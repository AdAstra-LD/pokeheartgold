	.include "asm/macros.inc"
	.text
	.syntax unified

	arm_func_start FUN_02097FF4
FUN_02097FF4: @ 0x02097FF4
	push {r4, r5, lr}
	sub sp, sp, #4
	mov r5, r0
	ldr r1, [r5, #4]
	cmp r1, #0
	addeq sp, sp, #4
	popeq {r4, r5, lr}
	bxeq lr
_02098014:
	ldr r4, [r1]
	mov r0, r5
	bl FUN_02098038
	mov r1, r4
	cmp r4, #0
	bne _02098014
	add sp, sp, #4
	pop {r4, r5, lr}
	bx lr
	arm_func_end FUN_02097FF4

	arm_func_start FUN_02098038
FUN_02098038: @ 0x02098038
	push {r4, r5, r6, r7, lr}
	sub sp, sp, #4
	mov r6, r1
	mov r7, r0
	add r0, r6, #8
	bl FUN_0209DEAC
	movs r1, r0
	beq _02098078
	add r5, r7, #0x1c
	add r4, r6, #8
_02098060:
	mov r0, r5
	bl FUN_0209DEF8
	mov r0, r4
	bl FUN_0209DEAC
	movs r1, r0
	bne _02098060
_02098078:
	add r0, r6, #0x14
	bl FUN_0209DEAC
	movs r1, r0
	beq _020980A8
	add r5, r7, #0x1c
	add r4, r6, #0x14
_02098090:
	mov r0, r5
	bl FUN_0209DEF8
	mov r0, r4
	bl FUN_0209DEAC
	movs r1, r0
	bne _02098090
_020980A8:
	mov r1, r6
	add r0, r7, #4
	bl FUN_0209DE2C
	mov r1, r6
	add r0, r7, #0x10
	bl FUN_0209DEF8
	add sp, sp, #4
	pop {r4, r5, r6, r7, lr}
	bx lr
	arm_func_end FUN_02098038

	arm_func_start FUN_020980CC
FUN_020980CC: @ 0x020980CC
	push {r4, r5, r6, r7, lr}
	sub sp, sp, #0xc
	mov r7, r0
	ldr r0, [r7, #0x10]
	mov r6, r1
	mov r5, r2
	cmp r0, #0
	mov r4, #0
	beq _02098150
	add r1, sp, #0
	str r4, [r1]
	str r4, [r1, #4]
	add r0, r7, #0x10
	str r4, [r1, #8]
	bl FUN_0209DEAC
	ldr r1, [r7, #0x28]
	add r2, sp, #0
	add r1, r1, r6, lsl #5
	mov r4, r0
	bl FUN_0209958C
	cmp r5, #0
	beq _0209812C
	mov r0, r4
	blx r5
_0209812C:
	mov r1, r4
	add r0, r7, #4
	bl FUN_0209DEF8
	ldr r0, [r4, #0x20]
	ldr r0, [r0]
	ldr r0, [r0]
	lsl r0, r0, #0x11
	lsrs r0, r0, #0x1f
	movne r4, #0
_02098150:
	mov r0, r4
	add sp, sp, #0xc
	pop {r4, r5, r6, r7, lr}
	bx lr
	arm_func_end FUN_020980CC

	arm_func_start FUN_02098160
FUN_02098160: @ 0x02098160
	push {r4, r5, r6, r7, lr}
	sub sp, sp, #4
	mov r7, r0
	ldr r0, [r7, #0x10]
	mov r6, r1
	mov r5, r2
	cmp r0, #0
	mov r4, #0
	beq _020981C4
	add r0, r7, #0x10
	bl FUN_0209DEAC
	ldr r1, [r7, #0x28]
	mov r4, r0
	mov r2, r5
	add r1, r1, r6, lsl #5
	bl FUN_0209958C
	mov r1, r4
	add r0, r7, #4
	bl FUN_0209DEF8
	ldr r0, [r4, #0x20]
	ldr r0, [r0]
	ldr r0, [r0]
	lsl r0, r0, #0x11
	lsrs r0, r0, #0x1f
	movne r4, #0
_020981C4:
	mov r0, r4
	add sp, sp, #4
	pop {r4, r5, r6, r7, lr}
	bx lr
	arm_func_end FUN_02098160

	arm_func_start FUN_020981D4
FUN_020981D4: @ 0x020981D4
	push {r4, r5, lr}
	sub sp, sp, #4
	ldr r2, _02098298 @ =0x04000060
	mov r4, r0
	ldrh r0, [r2]
	bic r0, r0, #0x3000
	orr r0, r0, #8
	strh r0, [r2]
	str r1, [r4, #0x44]
	ldr r0, [r4, #0x38]
	lsl r0, r0, #7
	lsrs r0, r0, #0x1f
	bne _02098250
	ldr r5, [r4, #4]
	cmp r5, #0
	addeq sp, sp, #4
	popeq {r4, r5, lr}
	bxeq lr
_0209821C:
	str r5, [r4, #0x40]
	ldr r0, [r5, #0x24]
	lsl r0, r0, #0x1c
	lsrs r0, r0, #0x1f
	bne _02098238
	mov r0, r4
	bl FUN_02098AF4
_02098238:
	ldr r5, [r5]
	cmp r5, #0
	bne _0209821C
	add sp, sp, #4
	pop {r4, r5, lr}
	bx lr
_02098250:
	ldr r5, [r4, #0xc]
	cmp r5, #0
	addeq sp, sp, #4
	popeq {r4, r5, lr}
	bxeq lr
_02098264:
	str r5, [r4, #0x40]
	ldr r0, [r5, #0x24]
	lsl r0, r0, #0x1c
	lsrs r0, r0, #0x1f
	bne _02098280
	mov r0, r4
	bl FUN_02098AF4
_02098280:
	ldr r5, [r5, #4]
	cmp r5, #0
	bne _02098264
	add sp, sp, #4
	pop {r4, r5, lr}
	bx lr
	.align 2, 0
_02098298: .4byte 0x04000060
	arm_func_end FUN_020981D4

	arm_func_start FUN_0209829C
FUN_0209829C: @ 0x0209829C
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	mov r8, r0
	ldr r7, [r8, #4]
	cmp r7, #0
	beq _020983B0
	add sl, r8, #4
	add sb, r8, #0x10
	mov r4, #0
_020982BC:
	ldr r2, [r7, #0x24]
	ldr r1, [r7, #0x20]
	lsl r0, r2, #0x1b
	lsrs r0, r0, #0x1f
	ldr r5, [r1]
	ldr r6, [r7]
	bne _020982F0
	ldrh r1, [r7, #0x4c]
	ldrh r0, [r5, #0x32]
	cmp r1, r0
	orrhs r0, r2, #0x10
	strhs r0, [r7, #0x24]
	strhhs r4, [r7, #0x4c]
_020982F0:
	ldr r0, [r7, #0x24]
	lsl r0, r0, #0x1d
	lsrs r0, r0, #0x1f
	bne _0209832C
	ldr r0, [r7, #0x80]
	lsl r0, r0, #0xd
	lsrs r0, r0, #0x1d
	beq _02098320
	ldrh r1, [r8, #0x48]
	sub r0, r0, #1
	cmp r1, r0
	bne _0209832C
_02098320:
	mov r0, r8
	mov r1, r7
	bl FUN_02098D44
_0209832C:
	ldr r0, [r5]
	lsl r0, r0, #0x11
	lsrs r0, r0, #0x1f
	beq _02098364
	ldrh r1, [r5, #0x3c]
	cmp r1, #0
	beq _02098364
	ldr r0, [r7, #0x24]
	lsl r0, r0, #0x1b
	lsrs r0, r0, #0x1f
	beq _02098364
	ldrh r0, [r7, #0x4c]
	cmp r0, r1
	bhi _02098374
_02098364:
	ldr r0, [r7, #0x24]
	lsl r0, r0, #0x1f
	lsrs r0, r0, #0x1f
	beq _020983A4
_02098374:
	ldr r0, [r7, #0xc]
	cmp r0, #0
	bne _020983A4
	ldr r0, [r7, #0x18]
	cmp r0, #0
	bne _020983A4
	mov r0, sl
	mov r1, r7
	bl FUN_0209DE2C
	mov r1, r0
	mov r0, sb
	bl FUN_0209DEF8
_020983A4:
	mov r7, r6
	cmp r6, #0
	bne _020982BC
_020983B0:
	ldrh r0, [r8, #0x48]
	add r0, r0, #1
	strh r0, [r8, #0x48]
	ldrh r0, [r8, #0x48]
	cmp r0, #1
	movhi r0, #0
	strhhi r0, [r8, #0x48]
	pop {r4, r5, r6, r7, r8, sb, sl, lr}
	bx lr
	arm_func_end FUN_0209829C

	arm_func_start FUN_020983D4
FUN_020983D4: @ 0x020983D4
	ldr ip, _020983E0 @ =FUN_020983FC
	ldr r1, _020983E4 @ =FUN_02098A84
	bx ip
	.align 2, 0
_020983E0: .4byte FUN_020983FC
_020983E4: .4byte FUN_02098A84
	arm_func_end FUN_020983D4

	arm_func_start FUN_020983E8
FUN_020983E8: @ 0x020983E8
	ldr ip, _020983F4 @ =FUN_020984B0
	ldr r1, _020983F8 @ =FUN_02098ABC
	bx ip
	.align 2, 0
_020983F4: .4byte FUN_020984B0
_020983F8: .4byte FUN_02098ABC
	arm_func_end FUN_020983E8

	arm_func_start FUN_020983FC
FUN_020983FC: @ 0x020983FC
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #4
	mov sl, r0
	mov fp, r1
	bl FUN_020D0AD4
	ldrh r0, [sl, #0x32]
	mov sb, #0
	cmp r0, #0
	ble _0209849C
	mov r0, #1
	mov r5, sb
	mov r4, sb
	str r0, [sp]
_02098430:
	ldr r0, [sl, #0x2c]
	mov r6, r4
	ldr r7, [r0, r5]
	add r8, r0, r5
	ldr r0, [r7, #0x10]
	cmp r0, #0
	beq _02098484
	ldr r1, [r7, #4]
	lsl r1, r1, #0x1c
	lsr r1, r1, #0x1c
	cmp r1, #2
	ldreq r1, [sp]
	movne r1, r4
	blx fp
	mov r6, r0
	ldr r1, [r8]
	ldr r0, [r7, #0xc]
	ldr r2, [r7, #0x10]
	add r0, r1, r0
	mov r1, r6
	bl FUN_020D0B08
_02098484:
	str r6, [r8, #8]
	ldrh r0, [sl, #0x32]
	add sb, sb, #1
	add r5, r5, #0x14
	cmp sb, r0
	blt _02098430
_0209849C:
	bl FUN_020D0B74
	mov r0, #1
	add sp, sp, #4
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	bx lr
	arm_func_end FUN_020983FC

	arm_func_start FUN_020984B0
FUN_020984B0: @ 0x020984B0
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0xc
	mov sl, r0
	mov fp, r1
	bl FUN_020D08EC
	ldrh r0, [sl, #0x32]
	mov sb, #0
	cmp r0, #0
	ble _02098568
	mov r0, #1
	mov r6, sb
	str sb, [sp, #4]
	str r0, [sp]
	mov r4, #0x14
_020984E8:
	ldr r2, [sl, #0x2c]
	ldr r7, [r2, r6]
	add r8, r2, r6
	ldr r0, [r7, #4]
	lsl r1, r0, #0xe
	lsrs r1, r1, #0x1f
	beq _0209851C
	lsl r0, r0, #6
	lsr r1, r0, #0x18
	mla r0, r1, r4, r2
	ldr r0, [r0, #4]
	str r0, [r8, #4]
	b _02098554
_0209851C:
	lsl r0, r0, #0x1c
	lsr r0, r0, #0x1c
	cmp r0, #5
	ldreq r1, [sp]
	ldr r0, [r7, #8]
	ldrne r1, [sp, #4]
	blx fp
	mov r5, r0
	ldr r0, [r8]
	ldr r2, [r7, #8]
	add r0, r0, #0x20
	mov r1, r5
	bl FUN_020D0948
	str r5, [r8, #4]
_02098554:
	ldrh r0, [sl, #0x32]
	add sb, sb, #1
	add r6, r6, #0x14
	cmp sb, r0
	blt _020984E8
_02098568:
	bl FUN_020D0A88
	mov r0, #1
	add sp, sp, #0xc
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	bx lr
	arm_func_end FUN_020984B0

	arm_func_start FUN_0209857C
FUN_0209857C: @ 0x0209857C
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x2c
	mov sb, r1
	ldrh r1, [sb, #8]
	mov sl, r0
	mov r8, #0x20
	strh r1, [sl, #0x30]
	ldrh r0, [sb, #0xa]
	strh r0, [sl, #0x32]
	ldrh r0, [sl, #0x30]
	ldr r1, [sl]
	lsl r0, r0, #5
	blx r1
	str r0, [sl, #0x28]
	ldrh r2, [sl, #0x30]
	ldr r0, [sl, #0x28]
	mov r1, #0
	lsl r2, r2, #5
	bl FUN_020D4994
	ldrh r1, [sl, #0x30]
	mov r0, #0
	str r0, [sp]
	cmp r1, #0
	ble _0209881C
	mov r6, r0
	str r0, [sp, #0x10]
	str r0, [sp, #0x14]
	str r0, [sp, #0x18]
	str r0, [sp, #0x1c]
	str r0, [sp, #0x20]
	str r0, [sp, #0x24]
_020985F8:
	ldr r1, [sl, #0x28]
	add r0, sb, r8
	str r0, [r1, r6]
	ldr r0, [r1, r6]
	add r8, r8, #0x58
	ldr r0, [r0]
	add r7, r1, r6
	str r0, [sp, #0x28]
	lsl r0, r0, #0x17
	lsrs r0, r0, #0x1f
	addne r0, sb, r8
	strne r0, [r7, #4]
	ldreq r0, [sp, #0x10]
	addne r8, r8, #0xc
	streq r0, [r7, #4]
	ldr r0, [sp, #0x28]
	lsl r0, r0, #0x16
	lsrs r0, r0, #0x1f
	addne r0, sb, r8
	strne r0, [r7, #8]
	ldreq r0, [sp, #0x14]
	addne r8, r8, #0xc
	streq r0, [r7, #8]
	ldr r0, [sp, #0x28]
	lsl r0, r0, #0x15
	lsrs r0, r0, #0x1f
	addne r0, sb, r8
	strne r0, [r7, #0xc]
	ldreq r0, [sp, #0x18]
	addne r8, r8, #8
	streq r0, [r7, #0xc]
	ldr r0, [sp, #0x28]
	lsl r0, r0, #0x14
	lsrs r0, r0, #0x1f
	addne r0, sb, r8
	strne r0, [r7, #0x10]
	ldreq r0, [sp, #0x1c]
	addne r8, r8, #0xc
	streq r0, [r7, #0x10]
	ldr r0, [sp, #0x28]
	lsl r0, r0, #0xf
	lsrs r0, r0, #0x1f
	addne r0, sb, r8
	strne r0, [r7, #0x14]
	ldreq r0, [sp, #0x20]
	addne r8, r8, #0x14
	streq r0, [r7, #0x14]
	ldr r0, [sp, #0x28]
	lsl r1, r0, #7
	lsl r2, r0, #6
	lsr r5, r1, #0x1f
	lsr r4, r2, #0x1f
	add r1, r5, r2, lsr #31
	lsl r2, r0, #5
	add r1, r1, r2, lsr #31
	lsl r3, r0, #4
	lsr fp, r2, #0x1f
	add r2, r1, r3, lsr #31
	lsr r1, r3, #0x1f
	lsl ip, r0, #3
	str r1, [sp, #4]
	lsl r3, r0, #2
	lsr r0, ip, #0x1f
	add r1, r2, ip, lsr #31
	str r0, [sp, #8]
	add r0, r1, r3, lsr #31
	strh r0, [r7, #0x1c]
	lsr r0, r3, #0x1f
	str r0, [sp, #0xc]
	ldrh r0, [r7, #0x1c]
	cmp r0, #0
	beq _020987F8
	lsl r0, r0, #3
	ldr r1, [sl]
	blx r1
	str r0, [r7, #0x18]
	cmp r5, #0
	ldr r0, [r7, #0x18]
	beq _0209874C
	add r1, sb, r8
	str r1, [r0, #4]
	ldr r1, _020988DC @ =FUN_0209DDF8
	add r8, r8, #8
	str r1, [r0]
	add r0, r0, #8
_0209874C:
	cmp r4, #0
	beq _0209876C
	add r1, sb, r8
	str r1, [r0, #4]
	ldr r1, _020988E0 @ =FUN_0209DD30
	add r8, r8, #8
	str r1, [r0]
	add r0, r0, #8
_0209876C:
	cmp fp, #0
	beq _0209878C
	add r1, sb, r8
	str r1, [r0, #4]
	ldr r1, _020988E4 @ =FUN_0209DCAC
	add r8, r8, #0x10
	str r1, [r0]
	add r0, r0, #8
_0209878C:
	ldr r1, [sp, #4]
	cmp r1, #0
	beq _020987B0
	add r1, sb, r8
	str r1, [r0, #4]
	ldr r1, _020988E8 @ =FUN_0209DBD4
	add r8, r8, #4
	str r1, [r0]
	add r0, r0, #8
_020987B0:
	ldr r1, [sp, #8]
	cmp r1, #0
	beq _020987D4
	add r1, sb, r8
	str r1, [r0, #4]
	ldr r1, _020988EC @ =FUN_0209DAB8
	add r8, r8, #8
	str r1, [r0]
	add r0, r0, #8
_020987D4:
	ldr r1, [sp, #0xc]
	cmp r1, #0
	beq _02098800
	add r1, sb, r8
	str r1, [r0, #4]
	ldr r1, _020988F0 @ =FUN_0209DA24
	add r8, r8, #0x10
	str r1, [r0]
	b _02098800
_020987F8:
	ldr r0, [sp, #0x24]
	str r0, [r7, #0x18]
_02098800:
	ldr r0, [sp]
	ldrh r1, [sl, #0x30]
	add r0, r0, #1
	add r6, r6, #0x20
	str r0, [sp]
	cmp r0, r1
	blt _020985F8
_0209881C:
	ldrh r2, [sl, #0x32]
	mov r0, #0x14
	ldr r1, [sl]
	mul r0, r2, r0
	blx r1
	str r0, [sl, #0x2c]
	ldrh r3, [sl, #0x32]
	mov r1, #0x14
	ldr r0, [sl, #0x2c]
	mul r2, r3, r1
	mov r1, #0
	bl FUN_020D4994
	ldrh r0, [sl, #0x32]
	mov r3, #0
	cmp r0, #0
	addle sp, sp, #0x2c
	pople {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	bxle lr
	mov r4, r3
	mov r0, #1
_0209886C:
	ldr r2, [sl, #0x2c]
	add r1, sb, r8
	str r1, [r2, r4]
	ldr r5, [r1, #4]
	add r2, r2, r4
	lsl r5, r5, #0x18
	lsr r5, r5, #0x1c
	add r5, r5, #3
	lsl r5, r0, r5
	strh r5, [r2, #0x10]
	ldr r5, [r1, #4]
	add r3, r3, #1
	lsl r5, r5, #0x14
	lsr r5, r5, #0x1c
	add r5, r5, #3
	lsl r5, r0, r5
	strh r5, [r2, #0x12]
	ldr r5, [r1, #4]
	add r4, r4, #0x14
	str r5, [r2, #0xc]
	ldrh r2, [sl, #0x32]
	ldr r1, [r1, #0x1c]
	cmp r3, r2
	add r8, r8, r1
	blt _0209886C
	add sp, sp, #0x2c
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	bx lr
	.align 2, 0
_020988DC: .4byte FUN_0209DDF8
_020988E0: .4byte FUN_0209DD30
_020988E4: .4byte FUN_0209DCAC
_020988E8: .4byte FUN_0209DBD4
_020988EC: .4byte FUN_0209DAB8
_020988F0: .4byte FUN_0209DA24
	arm_func_end FUN_0209857C

	arm_func_start FUN_020988F4
FUN_020988F4: @ 0x020988F4
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	mov r8, r0
	mov r0, #0x4c
	mov r7, r1
	mov r6, r2
	mov r4, r3
	blx r8
	mov r5, r0
	mov r1, #0
	mov r2, #0x4c
	bl FUN_020D4994
	strh r7, [r5, #0x34]
	strh r6, [r5, #0x36]
	ldrh r0, [sp, #0x20]
	and r2, r4, #0x3f
	ldr r1, [r5, #0x38]
	and r0, r0, #0x3f
	bic r1, r1, #0x3f
	orr r0, r1, r0
	str r0, [r5, #0x38]
	ldrh r0, [sp, #0x24]
	ldr r3, [r5, #0x38]
	mov r1, #0
	bic r3, r3, #0xfc0
	and r0, r0, #0x3f
	orr r0, r3, r0, lsl #6
	str r0, [r5, #0x38]
	ldr r3, [r5, #0x38]
	mov r0, #0x9c
	mul r4, r7, r0
	bic ip, r3, #0x3f000
	lsl r0, r3, #0x1a
	lsr r0, r0, #0x1a
	and r0, r0, #0x3f
	orr r0, ip, r0, lsl #12
	str r0, [r5, #0x38]
	ldr r3, [r5, #0x38]
	mov r0, r4
	bic r3, r3, #0xfc0000
	orr r2, r3, r2, lsl #18
	str r2, [r5, #0x38]
	ldr r2, [r5, #0x38]
	bic r2, r2, #0x1000000
	str r2, [r5, #0x38]
	ldr r2, [r5, #0x38]
	bic r2, r2, #0xfe000000
	str r2, [r5, #0x38]
	str r8, [r5]
	str r1, [r5, #8]
	str r1, [r5, #0x14]
	str r1, [r5, #0x20]
	str r1, [r5, #4]
	str r1, [r5, #0x10]
	str r1, [r5, #0x1c]
	str r1, [r5, #0x3c]
	strh r1, [r5, #0x48]
	blx r8
	mov r2, r4
	mov sb, r0
	mov r1, #0
	bl FUN_020D4994
	cmp r7, #0
	mov sl, #0
	ble _02098A14
	add r4, r5, #0x10
_020989F8:
	mov r0, r4
	mov r1, sb
	bl FUN_0209DEF8
	add sl, sl, #1
	cmp sl, r7
	add sb, sb, #0x9c
	blt _020989F8
_02098A14:
	mov r0, #0x44
	mul r4, r6, r0
	mov r0, r4
	blx r8
	mov r2, r4
	mov r1, #0
	mov r8, r0
	bl FUN_020D4994
	cmp r6, #0
	mov r7, #0
	ble _02098A60
	add r4, r5, #0x1c
_02098A44:
	mov r0, r4
	mov r1, r8
	bl FUN_0209DEF8
	add r7, r7, #1
	cmp r7, r6
	add r8, r8, #0x44
	blt _02098A44
_02098A60:
	mov r0, #0
	str r0, [r5, #0x28]
	str r0, [r5, #0x2c]
	strh r0, [r5, #0x32]
	ldrh r1, [r5, #0x32]
	mov r0, r5
	strh r1, [r5, #0x30]
	pop {r4, r5, r6, r7, r8, sb, sl, lr}
	bx lr
	arm_func_end FUN_020988F4

	arm_func_start FUN_02098A84
FUN_02098A84: @ 0x02098A84
	stmdb sp!, {lr}
	sub sp, sp, #4
	ldr r3, _02098AB4 @ =_0211092C
	mov r2, #0
	ldr r3, [r3]
	blx r3
	ldr r1, _02098AB8 @ =0x0000FFFF
	and r0, r0, r1
	lsl r0, r0, #3
	add sp, sp, #4
	ldm sp!, {lr}
	bx lr
	.align 2, 0
_02098AB4: .4byte _0211092C
_02098AB8: .4byte 0x0000FFFF
	arm_func_end FUN_02098A84

	arm_func_start FUN_02098ABC
FUN_02098ABC: @ 0x02098ABC
	stmdb sp!, {lr}
	sub sp, sp, #4
	ldr r3, _02098AEC @ =_02110924
	mov r2, #0
	ldr r3, [r3]
	blx r3
	ldr r1, _02098AF0 @ =0x0000FFFF
	and r0, r0, r1
	lsl r0, r0, #3
	add sp, sp, #4
	ldm sp!, {lr}
	bx lr
	.align 2, 0
_02098AEC: .4byte _02110924
_02098AF0: .4byte 0x0000FFFF
	arm_func_end FUN_02098ABC

	arm_func_start FUN_02098AF4
FUN_02098AF4: @ 0x02098AF4
	push {r4, r5, lr}
	sub sp, sp, #4
	mov r4, r0
	ldr r1, [r4, #0x40]
	ldr r1, [r1, #0x20]
	ldr r5, [r1]
	ldr r1, [r5]
	lsl r2, r1, #0xa
	lsrs r2, r2, #0x1f
	beq _02098B4C
	bl FUN_02098B70
	ldr r0, [r5]
	lsl r0, r0, #9
	lsrs r0, r0, #0x1f
	addne sp, sp, #4
	popne {r4, r5, lr}
	bxne lr
	mov r0, r4
	bl FUN_02098C58
	add sp, sp, #4
	pop {r4, r5, lr}
	bx lr
_02098B4C:
	lsl r1, r1, #9
	lsrs r1, r1, #0x1f
	bne _02098B5C
	bl FUN_02098C58
_02098B5C:
	mov r0, r4
	bl FUN_02098B70
	add sp, sp, #4
	pop {r4, r5, lr}
	bx lr
	arm_func_end FUN_02098AF4

	arm_func_start FUN_02098B70
FUN_02098B70: @ 0x02098B70
	push {r4, r5, r6, r7, lr}
	sub sp, sp, #4
	mov r7, r0
	ldr r6, [r7, #0x40]
	mov r4, #0
	ldr r5, [r6, #0x20]
	ldr r0, [r5]
	ldr r0, [r0]
	lsl r0, r0, #0xf
	lsrs r0, r0, #0x1f
	addeq sp, sp, #4
	popeq {r4, r5, r6, r7, lr}
	bxeq lr
	ldr r0, [r5, #0x14]
	ldr r2, [r7, #0x2c]
	ldrb r1, [r0, #0xf]
	mov r0, #0x14
	mla r0, r1, r0, r2
	bl FUN_0209985C
	ldr r0, [r5, #0x14]
	ldrh r0, [r0]
	lsl r0, r0, #0x17
	lsr r0, r0, #0x1e
	cmp r0, #4
	addls pc, pc, r0, lsl #2
	b _02098C10
_02098BD8: @ jump table
	b _02098BEC @ case 0
	b _02098BF4 @ case 1
	b _02098BFC @ case 2
	b _02098C04 @ case 3
	b _02098C0C @ case 4
_02098BEC:
	ldr r4, _02098C48 @ =FUN_0209B6AC
	b _02098C10
_02098BF4:
	ldr r4, _02098C4C @ =FUN_0209A8E4
	b _02098C10
_02098BFC:
	ldr r4, _02098C50 @ =FUN_0209A244
	b _02098C10
_02098C04:
	ldr r4, _02098C54 @ =FUN_02099948
	b _02098C10
_02098C0C:
	ldr r4, _02098C54 @ =FUN_02099948
_02098C10:
	ldr r5, [r6, #0x14]
	cmp r5, #0
	addeq sp, sp, #4
	popeq {r4, r5, r6, r7, lr}
	bxeq lr
_02098C24:
	mov r0, r7
	mov r1, r5
	blx r4
	ldr r5, [r5]
	cmp r5, #0
	bne _02098C24
	add sp, sp, #4
	pop {r4, r5, r6, r7, lr}
	bx lr
	.align 2, 0
_02098C48: .4byte FUN_0209B6AC
_02098C4C: .4byte FUN_0209A8E4
_02098C50: .4byte FUN_0209A244
_02098C54: .4byte FUN_02099948
	arm_func_end FUN_02098B70

	arm_func_start FUN_02098C58
FUN_02098C58: @ 0x02098C58
	push {r4, r5, r6, r7, r8, lr}
	mov r7, r0
	ldr r6, [r7, #0x40]
	ldr r2, [r7, #0x2c]
	ldr r1, [r6, #0x20]
	mov r0, #0x14
	ldr r5, [r1]
	mov r4, #0
	ldrb r1, [r5, #0x47]
	mla r0, r1, r0, r2
	bl FUN_0209985C
	ldr r0, [r5]
	lsl r0, r0, #0x1a
	lsr r0, r0, #0x1e
	cmp r0, #4
	addls pc, pc, r0, lsl #2
	b _02098CD4
_02098C9C: @ jump table
	b _02098CB0 @ case 0
	b _02098CB8 @ case 1
	b _02098CC0 @ case 2
	b _02098CC8 @ case 3
	b _02098CD0 @ case 4
_02098CB0:
	ldr r4, _02098D2C @ =FUN_0209BB00
	b _02098CD4
_02098CB8:
	ldr r4, _02098D30 @ =FUN_0209AFC4
	b _02098CD4
_02098CC0:
	ldr r4, _02098D34 @ =FUN_0209A594
	b _02098CD4
_02098CC8:
	ldr r4, _02098D38 @ =FUN_02099DC8
	b _02098CD4
_02098CD0:
	ldr r4, _02098D38 @ =FUN_02099DC8
_02098CD4:
	ldr r0, [r5]
	ldr r8, [r6, #8]
	lsl r0, r0, #0x14
	lsrs r0, r0, #0x1f
	ldrne r5, _02098D3C @ =FUN_0209985C
	ldreq r5, _02098D40 @ =FUN_02099858
	cmp r8, #0
	popeq {r4, r5, r6, r7, r8, lr}
	bxeq lr
	mov r6, #0x14
_02098CFC:
	ldrb r1, [r8, #0x2c]
	ldr r0, [r7, #0x2c]
	mla r0, r1, r6, r0
	blx r5
	mov r0, r7
	mov r1, r8
	blx r4
	ldr r8, [r8]
	cmp r8, #0
	bne _02098CFC
	pop {r4, r5, r6, r7, r8, lr}
	bx lr
	.align 2, 0
_02098D2C: .4byte FUN_0209BB00
_02098D30: .4byte FUN_0209AFC4
_02098D34: .4byte FUN_0209A594
_02098D38: .4byte FUN_02099DC8
_02098D3C: .4byte FUN_0209985C
_02098D40: .4byte FUN_02099858
	arm_func_end FUN_02098C58

	arm_func_start FUN_02098D44
FUN_02098D44: @ 0x02098D44
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x74
	mov sb, r1
	ldr r8, [sb, #0x20]
	mov sl, r0
	ldr r0, [r8, #0x14]
	ldr r4, [r8]
	str r0, [sp, #4]
	ldr r0, [r4]
	mov r6, #0
	str r0, [sp, #0x24]
	ldrb r0, [r4, #0x46]
	ldr r2, [sb, #0x90]
	ldrh r7, [r8, #0x1c]
	add r0, r0, #0x180
	cmp r2, #0
	str r0, [sp, #8]
	beq _02098D98
	mov r0, sb
	mov r1, r6
	blx r2
_02098D98:
	ldrh r1, [r4, #0x3c]
	cmp r1, #0
	beq _02098DB0
	ldrh r0, [sb, #0x4c]
	cmp r0, r1
	bhs _02098DF8
_02098DB0:
	ldrh r0, [sb, #0x4c]
	ldrb r1, [sb, #0x80]
	bl FUN_020F2998
	cmp r1, #0
	bne _02098DF8
	ldr r1, [sb, #0x24]
	lsl r0, r1, #0x1f
	lsrs r0, r0, #0x1f
	bne _02098DF8
	lsl r0, r1, #0x1e
	lsrs r0, r0, #0x1f
	bne _02098DF8
	lsl r0, r1, #0x1b
	lsrs r0, r0, #0x1f
	beq _02098DF8
	mov r0, sb
	add r1, sl, #0x1c
	bl FUN_0209C4D0
_02098DF8:
	ldr r0, [sp, #0x24]
	lsl r0, r0, #0x17
	lsrs r0, r0, #0x1f
	beq _02098E28
	ldr r0, _02099574 @ =FUN_0209D994
	add r6, r6, #1
	str r0, [sp, #0x28]
	ldr r0, [r8, #4]
	ldrh r0, [r0, #8]
	lsl r0, r0, #0x1f
	lsr r0, r0, #0x1f
	str r0, [sp, #0x2c]
_02098E28:
	ldr r0, [sp, #0x24]
	lsl r0, r0, #0x16
	lsrs r0, r0, #0x1f
	beq _02098E74
	ldr r3, [r8, #8]
	ldrh r0, [r3, #8]
	lsl r0, r0, #0x1f
	lsrs r0, r0, #0x1f
	bne _02098E74
	ldr r2, _02099578 @ =FUN_0209D7C8
	add r1, sp, #0x28
	str r2, [r1, r6, lsl #3]
	ldrh r1, [r3, #8]
	lsl r2, r6, #3
	add r0, sp, #0x2c
	lsl r1, r1, #0x1e
	lsr r1, r1, #0x1f
	add r6, r6, #1
	str r1, [r0, r2]
_02098E74:
	ldr r0, [sp, #0x24]
	lsl r0, r0, #0x15
	lsrs r0, r0, #0x1f
	beq _02098EB0
	ldr r2, _0209957C @ =FUN_0209D6EC
	add r1, sp, #0x28
	str r2, [r1, r6, lsl #3]
	ldr r1, [r8, #0xc]
	lsl r2, r6, #3
	ldrh r1, [r1, #2]
	add r0, sp, #0x2c
	add r6, r6, #1
	lsl r1, r1, #0x17
	lsr r1, r1, #0x1f
	str r1, [r0, r2]
_02098EB0:
	ldr r0, [sp, #0x24]
	lsl r0, r0, #0x14
	lsrs r0, r0, #0x1f
	beq _02098EF8
	ldr r3, [r8, #0x10]
	ldr r0, [r3, #8]
	lsl r0, r0, #0xf
	lsrs r0, r0, #0x1f
	bne _02098EF8
	ldr r2, _02099580 @ =FUN_0209D688
	add r1, sp, #0x28
	str r2, [r1, r6, lsl #3]
	ldr r1, [r3, #8]
	add r0, sp, #0x2c
	lsl r1, r1, #0xe
	lsr r1, r1, #0x1f
	str r1, [r0, r6, lsl #3]
	add r6, r6, #1
_02098EF8:
	ldr r4, [sb, #8]
	cmp r4, #0
	beq _02099234
	ldr r0, [sp, #0x24]
	add fp, sp, #0x28
	lsl r2, r0, #0x10
	lsl r1, r0, #0xf
	lsr r0, r2, #0x1f
	str r0, [sp, #0xc]
	lsr r0, r1, #0x1f
	str r0, [sp, #0x10]
	mov r0, #0
	str r0, [sp, #0x18]
_02098F2C:
	ldr r0, [r4]
	ldrh r1, [r4, #0x2a]
	str r0, [sp]
	ldrh r0, [r4, #0x26]
	cmp r6, #0
	ldr r5, [sp, #0x18]
	mul r2, r1, r0
	asr r1, r2, #8
	strb r1, [sp, #0x20]
	ldrh r1, [r4, #0x28]
	ldrb r2, [r4, #0x2d]
	mul r0, r1, r0
	add r0, r2, r0, asr #8
	strb r0, [sp, #0x21]
	ble _02098F94
_02098F68:
	add r2, fp, r5, lsl #3
	ldr ip, [r2, #4]
	add r2, sp, #0x20
	ldrb r2, [r2, ip]
	ldr r3, [fp, r5, lsl #3]
	mov r0, r4
	mov r1, r8
	blx r3
	add r5, r5, #1
	cmp r5, r6
	blt _02098F68
_02098F94:
	ldr r0, [sp, #0x18]
	ldr r5, [sp, #0x18]
	str r0, [sp, #0x70]
	str r0, [sp, #0x6c]
	str r0, [sp, #0x68]
	ldr r0, [sp, #0xc]
	cmp r0, #0
	addne r0, sb, #0x28
	addne r3, r4, #0x38
	ldmne r0, {r0, r1, r2}
	stmne r3, {r0, r1, r2}
	cmp r7, #0
	ble _02098FF4
_02098FC8:
	ldr r2, [r8, #0x18]
	mov r1, r4
	add r0, r2, r5, lsl #3
	ldr ip, [r2, r5, lsl #3]
	ldr r0, [r0, #4]
	add r2, sp, #0x68
	mov r3, sb
	blx ip
	add r5, r5, #1
	cmp r5, r7
	blt _02098FC8
_02098FF4:
	ldr r0, [sp, #0x10]
	ldrh r1, [r4, #0x20]
	cmp r0, #0
	ldrsh r0, [r4, #0x22]
	add r0, r1, r0
	strh r0, [r4, #0x20]
	ldr r1, [r4, #0x14]
	ldr r0, [sp, #8]
	mul r0, r1, r0
	asr r0, r0, #9
	str r0, [r4, #0x14]
	ldr r1, [r4, #0x18]
	ldr r0, [sp, #8]
	mul r0, r1, r0
	asr r0, r0, #9
	str r0, [r4, #0x18]
	ldr r1, [r4, #0x1c]
	ldr r0, [sp, #8]
	mul r0, r1, r0
	asr r0, r0, #9
	str r0, [r4, #0x1c]
	ldr r1, [r4, #0x14]
	ldr r0, [sp, #0x68]
	add r0, r1, r0
	str r0, [r4, #0x14]
	ldr r1, [r4, #0x18]
	ldr r0, [sp, #0x6c]
	add r0, r1, r0
	str r0, [r4, #0x18]
	ldr r1, [r4, #0x1c]
	ldr r0, [sp, #0x70]
	add r0, r1, r0
	str r0, [r4, #0x1c]
	ldr r1, [r4, #0x14]
	ldr r0, [sb, #0x34]
	ldr r2, [r4, #8]
	add r0, r1, r0
	add r0, r2, r0
	str r0, [r4, #8]
	ldr r1, [r4, #0x18]
	ldr r0, [sb, #0x38]
	ldr r2, [r4, #0xc]
	add r0, r1, r0
	add r0, r2, r0
	str r0, [r4, #0xc]
	ldr r1, [r4, #0x1c]
	ldr r0, [sb, #0x3c]
	ldr r2, [r4, #0x10]
	add r0, r1, r0
	add r0, r2, r0
	str r0, [r4, #0x10]
	beq _0209912C
	ldr r0, [sp, #4]
	ldrh r2, [r4, #0x24]
	ldrb r1, [r0, #0xd]
	ldrh r3, [r4, #0x26]
	lsl r2, r2, #0xc
	lsl r1, r1, #0xc
	lsl r0, r3, #0xc
	smull r5, r3, r2, r1
	mov r1, #0x800
	adds r2, r5, r1
	adc r1, r3, #0
	lsr r2, r2, #0xc
	orr r2, r2, r1, lsl #20
	asr r1, r2, #8
	subs r0, r0, r1
	bmi _0209912C
	ldr r1, [sp, #4]
	asr r0, r0, #0xc
	ldrb r1, [r1, #0xe]
	bl FUN_020F2998
	cmp r1, #0
	bne _0209912C
	mov r0, r4
	mov r1, sb
	add r2, sl, #0x1c
	bl FUN_0209C1B0
_0209912C:
	ldr r0, [sb, #0x20]
	ldr r0, [r0]
	ldr r0, [r0]
	lsl r0, r0, #1
	lsrs r0, r0, #0x1f
	beq _02099170
	ldrh r0, [r4, #0x2e]
	ldr r1, [sl, #0x38]
	bic r0, r0, #0xfc00
	lsl r1, r1, #8
	lsr r1, r1, #0x1a
	lsl r1, r1, #0x10
	lsr r1, r1, #0x10
	and r1, r1, #0x3f
	orr r0, r0, r1, lsl #10
	strh r0, [r4, #0x2e]
	b _020991F0
_02099170:
	ldrh r0, [r4, #0x2e]
	ldr r2, [sl, #0x38]
	add r1, sl, #0x38
	bic r0, r0, #0xfc00
	lsl r2, r2, #0xe
	lsr r2, r2, #0x1a
	lsl r2, r2, #0x10
	lsr r2, r2, #0x10
	and r2, r2, #0x3f
	orr r0, r0, r2, lsl #10
	strh r0, [r4, #0x2e]
	ldr r2, [sl, #0x38]
	bic r0, r2, #0x3f000
	lsl r2, r2, #0xe
	lsr r2, r2, #0x1a
	add r2, r2, #1
	and r2, r2, #0x3f
	orr r0, r0, r2, lsl #12
	str r0, [sl, #0x38]
	ldr r2, [sl, #0x38]
	lsl r0, r2, #0xe
	lsr r3, r0, #0x1a
	lsl r0, r2, #0x14
	cmp r3, r0, lsr #26
	bls _020991F0
	lsl r0, r2, #0x1a
	lsr r0, r0, #0x1a
	and r0, r0, #0x3f
	ldr r2, [r1]
	bic r2, r2, #0x3f000
	orr r0, r2, r0, lsl #12
	str r0, [r1]
_020991F0:
	ldrh r0, [r4, #0x26]
	add r0, r0, #1
	strh r0, [r4, #0x26]
	ldrh r1, [r4, #0x26]
	ldrh r0, [r4, #0x24]
	cmp r1, r0
	bls _02099224
	mov r1, r4
	add r0, sb, #8
	bl FUN_0209DE2C
	mov r1, r0
	add r0, sl, #0x1c
	bl FUN_0209DEF8
_02099224:
	ldr r0, [sp]
	cmp r0, #0
	mov r4, r0
	bne _02098F2C
_02099234:
	ldr r0, [sp, #0x24]
	lsl r0, r0, #0xf
	lsrs r0, r0, #0x1f
	beq _0209953C
	ldr r0, [sp, #4]
	mov r6, #0
	ldrh r0, [r0]
	lsl r0, r0, #0x1e
	lsrs r0, r0, #0x1f
	ldrne r0, _02099584 @ =FUN_0209D63C
	strne r6, [sp, #0x4c]
	strne r0, [sp, #0x48]
	ldr r0, [sp, #4]
	addne r6, r6, #1
	ldrh r0, [r0]
	lsl r0, r0, #0x1d
	lsrs r0, r0, #0x1f
	beq _02099298
	ldr r2, _02099588 @ =FUN_0209D5E4
	add r1, sp, #0x48
	str r2, [r1, r6, lsl #3]
	add r0, sp, #0x4c
	mov r1, #0
	str r1, [r0, r6, lsl #3]
	add r6, r6, #1
_02099298:
	ldr r0, [sp, #4]
	ldr r5, [sb, #0x14]
	ldrh r0, [r0]
	lsl r0, r0, #0x1f
	lsrs r0, r0, #0x1f
	moveq r7, #0
	cmp r5, #0
	beq _0209953C
	mov r0, #0
	str r0, [sp, #0x1c]
_020992C0:
	ldrh r2, [r5, #0x26]
	ldr r0, [r5]
	ldrh r1, [r5, #0x24]
	str r0, [sp, #0x14]
	lsl r0, r2, #8
	bl FUN_020F2998
	ldr r4, [sp, #0x1c]
	strb r0, [sp, #0x20]
	cmp r6, #0
	ble _02099310
	ldrb fp, [sp, #0x20]
_020992EC:
	add r3, sp, #0x48
	ldr r3, [r3, r4, lsl #3]
	mov r0, r5
	mov r1, r8
	mov r2, fp
	blx r3
	add r4, r4, #1
	cmp r4, r6
	blt _020992EC
_02099310:
	ldr r0, [sp, #0x1c]
	ldr r4, [sp, #0x1c]
	str r0, [sp, #0x70]
	str r0, [sp, #0x6c]
	str r0, [sp, #0x68]
	ldr r0, [sp, #4]
	ldrh r0, [r0]
	lsl r0, r0, #0x1a
	lsrs r0, r0, #0x1f
	addne r0, sb, #0x28
	addne r3, r5, #0x38
	ldmne r0, {r0, r1, r2}
	stmne r3, {r0, r1, r2}
	cmp r7, #0
	ble _02099378
_0209934C:
	ldr r2, [r8, #0x18]
	mov r1, r5
	add r0, r2, r4, lsl #3
	ldr fp, [r2, r4, lsl #3]
	ldr r0, [r0, #4]
	add r2, sp, #0x68
	mov r3, sb
	blx fp
	add r4, r4, #1
	cmp r4, r7
	blt _0209934C
_02099378:
	ldrh r1, [r5, #0x20]
	ldrsh r0, [r5, #0x22]
	add r0, r1, r0
	strh r0, [r5, #0x20]
	ldr r1, [r5, #0x14]
	ldr r0, [sp, #8]
	mul r0, r1, r0
	asr r0, r0, #9
	str r0, [r5, #0x14]
	ldr r1, [r5, #0x18]
	ldr r0, [sp, #8]
	mul r0, r1, r0
	asr r0, r0, #9
	str r0, [r5, #0x18]
	ldr r1, [r5, #0x1c]
	ldr r0, [sp, #8]
	mul r0, r1, r0
	asr r0, r0, #9
	str r0, [r5, #0x1c]
	ldr r1, [r5, #0x14]
	ldr r0, [sp, #0x68]
	add r0, r1, r0
	str r0, [r5, #0x14]
	ldr r1, [r5, #0x18]
	ldr r0, [sp, #0x6c]
	add r0, r1, r0
	str r0, [r5, #0x18]
	ldr r1, [r5, #0x1c]
	ldr r0, [sp, #0x70]
	add r0, r1, r0
	str r0, [r5, #0x1c]
	ldr r1, [r5, #0x14]
	ldr r0, [sb, #0x34]
	ldr r2, [r5, #8]
	add r0, r1, r0
	add r0, r2, r0
	str r0, [r5, #8]
	ldr r1, [r5, #0x18]
	ldr r0, [sb, #0x38]
	ldr r2, [r5, #0xc]
	add r0, r1, r0
	add r0, r2, r0
	str r0, [r5, #0xc]
	ldr r1, [r5, #0x1c]
	ldr r0, [sb, #0x3c]
	ldr r2, [r5, #0x10]
	add r0, r1, r0
	add r0, r2, r0
	str r0, [r5, #0x10]
	ldr r0, [sb, #0x20]
	ldr r0, [r0]
	ldr r0, [r0]
	lsrs r0, r0, #0x1f
	beq _0209947C
	ldr r0, [sl, #0x38]
	ldrh r1, [r5, #0x2e]
	lsl r0, r0, #8
	lsr r0, r0, #0x1a
	bic r1, r1, #0xfc00
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	and r0, r0, #0x3f
	orr r0, r1, r0, lsl #10
	strh r0, [r5, #0x2e]
	b _020994FC
_0209947C:
	ldr r0, [sl, #0x38]
	ldrh r1, [r5, #0x2e]
	lsl r0, r0, #0xe
	lsr r0, r0, #0x1a
	bic r1, r1, #0xfc00
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	and r0, r0, #0x3f
	orr r0, r1, r0, lsl #10
	strh r0, [r5, #0x2e]
	ldr r1, [sl, #0x38]
	add r0, sl, #0x38
	bic r2, r1, #0x3f000
	lsl r1, r1, #0xe
	lsr r1, r1, #0x1a
	add r1, r1, #1
	and r1, r1, #0x3f
	orr r1, r2, r1, lsl #12
	str r1, [sl, #0x38]
	ldr r2, [sl, #0x38]
	lsl r1, r2, #0xe
	lsr r3, r1, #0x1a
	lsl r1, r2, #0x14
	cmp r3, r1, lsr #26
	bls _020994FC
	lsl r1, r2, #0x1a
	lsr r1, r1, #0x1a
	and r1, r1, #0x3f
	ldr r2, [r0]
	bic r2, r2, #0x3f000
	orr r1, r2, r1, lsl #12
	str r1, [r0]
_020994FC:
	ldrh r0, [r5, #0x26]
	add r0, r0, #1
	strh r0, [r5, #0x26]
	ldrh r1, [r5, #0x26]
	ldrh r0, [r5, #0x24]
	cmp r1, r0
	bls _02099530
	mov r1, r5
	add r0, sb, #0x14
	bl FUN_0209DE2C
	mov r1, r0
	add r0, sl, #0x1c
	bl FUN_0209DEF8
_02099530:
	ldr r5, [sp, #0x14]
	movs r0, r5
	bne _020992C0
_0209953C:
	ldrh r0, [sb, #0x4c]
	add r0, r0, #1
	strh r0, [sb, #0x4c]
	ldr r2, [sb, #0x90]
	cmp r2, #0
	addeq sp, sp, #0x74
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	bxeq lr
	mov r0, sb
	mov r1, #1
	blx r2
	add sp, sp, #0x74
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	bx lr
	.align 2, 0
_02099574: .4byte FUN_0209D994
_02099578: .4byte FUN_0209D7C8
_0209957C: .4byte FUN_0209D6EC
_02099580: .4byte FUN_0209D688
_02099584: .4byte FUN_0209D63C
_02099588: .4byte FUN_0209D5E4
	arm_func_end FUN_02098D44

	arm_func_start FUN_0209958C
FUN_0209958C: @ 0x0209958C
	push {r4, r5, r6, lr}
	str r1, [r0, #0x20]
	mov r3, #0
	str r3, [r0, #0x24]
	ldr r1, [r0, #0x20]
	ldr r5, [r2]
	ldr r1, [r1]
	ldr r4, _02099850 @ =0x00007FFF
	ldr r1, [r1, #4]
	ldr ip, _02099854 @ =0x0007FFFF
	add r1, r5, r1
	str r1, [r0, #0x28]
	ldr r1, [r0, #0x20]
	ldr r6, [r2, #4]
	ldr r1, [r1]
	mov lr, #0x80000000
	ldr r5, [r1, #8]
	mov r1, #0x1000
	add r5, r6, r5
	str r5, [r0, #0x2c]
	ldr r5, [r0, #0x20]
	ldr r6, [r2, #8]
	ldr r2, [r5]
	ldr r2, [r2, #0xc]
	add r2, r6, r2
	str r2, [r0, #0x30]
	str r3, [r0, #0x40]
	str r3, [r0, #0x44]
	str r3, [r0, #0x48]
	str r3, [r0, #0x3c]
	ldr r2, [r0, #0x3c]
	str r2, [r0, #0x38]
	ldr r2, [r0, #0x38]
	str r2, [r0, #0x34]
	strh r3, [r0, #0x4c]
	strh r3, [r0, #0x4e]
	ldr r2, [r0, #0x20]
	ldr r5, [r2]
	ldrh r3, [r5, #0x1c]
	ldrh r2, [r5, #0x1e]
	strh r3, [r0, #0x50]
	strh r2, [r0, #0x52]
	ldrh r2, [r5, #0x20]
	strh r2, [r0, #0x54]
	ldr r2, [r0, #0x20]
	ldr r2, [r2]
	ldrh r2, [r2, #0x38]
	strh r2, [r0, #0x56]
	ldr r2, [r0, #0x20]
	ldr r2, [r2]
	ldr r2, [r2, #0x10]
	str r2, [r0, #0x58]
	ldr r2, [r0, #0x20]
	ldr r2, [r2]
	ldr r2, [r2, #0x14]
	str r2, [r0, #0x5c]
	ldr r2, [r0, #0x20]
	ldr r2, [r2]
	ldr r2, [r2, #0x18]
	str r2, [r0, #0x60]
	ldr r2, [r0, #0x20]
	ldr r2, [r2]
	ldr r2, [r2, #0x24]
	str r2, [r0, #0x64]
	ldr r2, [r0, #0x20]
	ldr r2, [r2]
	ldr r2, [r2, #0x28]
	str r2, [r0, #0x68]
	ldr r2, [r0, #0x20]
	ldr r2, [r2]
	ldr r2, [r2, #0x2c]
	str r2, [r0, #0x6c]
	ldr r2, [r0, #0x20]
	ldr r2, [r2]
	ldrh r2, [r2, #0x3e]
	strh r2, [r0, #0x70]
	strh r4, [r0, #0x72]
	ldr r2, [r0, #0x20]
	ldr r2, [r2]
	ldrb r2, [r2, #0x44]
	strb r2, [r0, #0x80]
	ldr r2, [r0, #0x20]
	ldr r2, [r2]
	ldrb r2, [r2, #0x45]
	strb r2, [r0, #0x81]
	ldr r2, [r0, #0x80]
	bic r2, r2, #0x70000
	str r2, [r0, #0x80]
	ldr r2, [r0, #0x80]
	and r2, r2, ip
	str r2, [r0, #0x80]
	str lr, [r0, #0x74]
	ldr r2, [r0, #0x20]
	ldr r2, [r2]
	ldr r2, [r2, #0x48]
	lsl r2, r2, #6
	lsr r2, r2, #0x1e
	lsl r2, r1, r2
	strh r2, [r0, #0x78]
	ldr r2, [r0, #0x20]
	ldr r2, [r2]
	ldr r2, [r2, #0x48]
	lsl r2, r2, #4
	lsr r2, r2, #0x1e
	lsl r1, r1, r2
	strh r1, [r0, #0x7a]
	ldr r1, [r0, #0x20]
	ldr r1, [r1]
	ldr r1, [r1, #0x4c]
	lsl r1, r1, #0x1f
	lsrs r1, r1, #0x1f
	ldrshne r2, [r0, #0x78]
	mvnne r1, #0
	smulbbne r1, r2, r1
	strhne r1, [r0, #0x78]
	ldr r1, [r0, #0x20]
	ldr r1, [r1]
	ldr r1, [r1, #0x4c]
	lsl r1, r1, #0x1e
	lsrs r1, r1, #0x1f
	ldrshne r2, [r0, #0x7a]
	mvnne r1, #0
	smulbbne r1, r2, r1
	strhne r1, [r0, #0x7a]
	ldr r2, [r0, #0x20]
	ldr r1, [r2]
	ldr r1, [r1]
	lsl r1, r1, #0xf
	lsrs r1, r1, #0x1f
	beq _02099814
	ldr r1, [r2, #0x14]
	mov r2, #0x1000
	ldr r1, [r1, #0x10]
	lsl r1, r1, #0x1e
	lsr r1, r1, #0x1e
	lsl r1, r2, r1
	strh r1, [r0, #0x7c]
	ldr r1, [r0, #0x20]
	ldr r1, [r1, #0x14]
	ldr r1, [r1, #0x10]
	lsl r1, r1, #0x1c
	lsr r1, r1, #0x1e
	lsl r1, r2, r1
	strh r1, [r0, #0x7e]
	ldr r1, [r0, #0x20]
	ldr r1, [r1, #0x14]
	ldr r1, [r1, #0x10]
	lsl r1, r1, #0x1b
	lsrs r1, r1, #0x1f
	ldrshne r2, [r0, #0x7c]
	mvnne r1, #0
	smulbbne r1, r2, r1
	strhne r1, [r0, #0x7c]
	ldr r1, [r0, #0x20]
	ldr r1, [r1, #0x14]
	ldr r1, [r1, #0x10]
	lsl r1, r1, #0x1a
	lsrs r1, r1, #0x1f
	ldrshne r2, [r0, #0x7e]
	mvnne r1, #0
	smulbbne r1, r2, r1
	strhne r1, [r0, #0x7e]
_02099814:
	mov r2, #0
	str r2, [r0, #4]
	ldr r1, [r0, #4]
	str r1, [r0]
	str r2, [r0, #0x14]
	ldr r1, [r0, #0x14]
	str r1, [r0, #8]
	str r2, [r0, #0x18]
	ldr r1, [r0, #0x18]
	str r1, [r0, #0xc]
	str r2, [r0, #0x90]
	str r2, [r0, #0x94]
	str r2, [r0, #0x98]
	pop {r4, r5, r6, lr}
	bx lr
	.align 2, 0
_02099850: .4byte 0x00007FFF
_02099854: .4byte 0x0007FFFF
	arm_func_end FUN_0209958C

	arm_func_start FUN_02099858
FUN_02099858: @ 0x02099858
	bx lr
	arm_func_end FUN_02099858

	arm_func_start FUN_0209985C
FUN_0209985C: @ 0x0209985C
	push {r4, r5, r6, r7, lr}
	sub sp, sp, #4
	ldr r7, [r0, #0xc]
	ldr r3, _02099934 @ =0x040004A8
	str r7, [sp]
	ldr r1, [r0, #4]
	lsl r2, r7, #0x1c
	lsr lr, r2, #0x1c
	lsr r1, r1, #3
	orr ip, r1, lr, lsl #26
	lsl r4, r7, #0x18
	lsl r5, r7, #0x14
	lsl r2, r7, #0xf
	lsr r4, r4, #0x1c
	orr ip, ip, #0x40000000
	lsl r6, r7, #0x12
	orr ip, ip, r4, lsl #20
	lsr r5, r5, #0x1c
	lsl r1, r7, #0x10
	orr ip, ip, r5, lsl #23
	lsr r4, r6, #0x1e
	lsr r5, r1, #0x1e
	orr r1, ip, r4, lsl #16
	lsr r2, r2, #0x1f
	orr r1, r1, r5, lsl #18
	orr r1, r1, r2, lsl #29
	str r1, [r3]
	cmp lr, #2
	moveq r1, #1
	movne r1, #0
	ldr r2, [r0, #8]
	rsb r1, r1, #4
	lsr r2, r2, r1
	ldr r1, _02099938 @ =0x040004AC
	ldr ip, _0209993C @ =0x04000440
	str r2, [r1]
	mov r2, #3
	ldr r1, _02099940 @ =0x04000454
	str r2, [ip]
	mov r3, #0
	str r3, [r1]
	ldrh r1, [r0, #0x10]
	ldrh r2, [r0, #0x12]
	ldr r0, _02099944 @ =0x0400046C
	lsl r1, r1, #0xc
	str r1, [r0]
	lsl r1, r2, #0xc
	str r1, [r0]
	str r3, [r0]
	mov r0, #1
	str r0, [ip]
	add sp, sp, #4
	pop {r4, r5, r6, r7, lr}
	bx lr
	.align 2, 0
_02099934: .4byte 0x040004A8
_02099938: .4byte 0x040004AC
_0209993C: .4byte 0x04000440
_02099940: .4byte 0x04000454
_02099944: .4byte 0x0400046C
	arm_func_end FUN_0209985C

	arm_func_start FUN_02099948
FUN_02099948: @ 0x02099948
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0xf0
	mov r4, r1
	ldrh r2, [r4, #0x2e]
	mov r5, r0
	ldr r0, [r5, #0x3c]
	lsl r1, r2, #0x16
	lsl r3, r2, #0x1b
	lsr r1, r1, #0x1b
	lsr r3, r3, #0x1b
	add r1, r1, #1
	mul r6, r3, r1
	lsl r1, r2, #0x10
	asrs r2, r6, #5
	lsr r1, r1, #0x1a
	orr r0, r0, #0xc0
	orr r1, r0, r1, lsl #24
	ldr r0, _02099DA4 @ =0x040004A4
	orr r1, r1, r2, lsl #16
	str r1, [r0]
	addeq sp, sp, #0xf0
	ldr r0, [r0]
	popeq {r4, r5, r6, r7, r8, lr}
	bxeq lr
	ldr r0, [r5, #0x40]
	ldrh r1, [r4, #0x20]
	ldr r0, [r0, #0x20]
	ldr r6, _02099DA8 @ =0x021094DC
	ldr r0, [r0, #0x14]
	asr r1, r1, #4
	ldrh r0, [r0]
	lsl r2, r1, #1
	add r1, r2, #1
	lsl r7, r2, #1
	lsl r1, r1, #1
	lsl r0, r0, #0x15
	lsr r3, r0, #0x1e
	ldr r2, _02099DAC @ =_021105E4
	ldrsh r0, [r6, r7]
	ldr r3, [r2, r3, lsl #2]
	ldrsh r1, [r6, r1]
	add r2, sp, #0x30
	blx r3
	add r0, sp, #0xc0
	bl FUN_020CB6AC
	ldr r0, [r5, #0x40]
	ldr r0, [r0, #0x20]
	ldr r0, [r0, #0x14]
	ldr r0, [r0, #0x10]
	lsl r0, r0, #0x19
	lsrs r0, r0, #0x1f
	bne _02099A28
	add r1, sp, #0x90
	add r0, r4, #0x14
	bl FUN_020CCFE0
	b _02099A58
_02099A28:
	add r1, sp, #0x90
	add r0, r4, #8
	bl FUN_020CCFE0
	ldr r2, [sp, #0x90]
	ldr r1, [sp, #0x94]
	ldr r0, [sp, #0x98]
	rsb r2, r2, #0
	rsb r1, r1, #0
	rsb r0, r0, #0
	str r2, [sp, #0x90]
	str r1, [sp, #0x94]
	str r0, [sp, #0x98]
_02099A58:
	mov r3, #0
	mov r2, #0x1000
	add r0, sp, #0x90
	add r1, sp, #0xb4
	str r3, [sp, #0xb4]
	str r2, [sp, #0xb8]
	str r3, [sp, #0xbc]
	bl FUN_020CCE14
	ldr r1, _02099DB0 @ =0x00000CCD
	cmp r0, r1
	bgt _02099A90
	ldr r1, _02099DB4 @ =0xFFFFF333
	cmp r0, r1
	bge _02099AA4
_02099A90:
	mov r0, #0
	mov r1, #0x1000
	str r1, [sp, #0xb4]
	str r0, [sp, #0xb8]
	str r0, [sp, #0xbc]
_02099AA4:
	add r0, sp, #0x90
	add r1, sp, #0xb4
	add r2, sp, #0x9c
	bl FUN_020CCE94
	add r0, sp, #0x90
	add r1, sp, #0x9c
	add r2, sp, #0xa8
	bl FUN_020CCE94
	ldr r7, [sp, #0x9c]
	ldr r6, [sp, #0xa0]
	ldr r3, [sp, #0xa4]
	ldr r0, [sp, #0x90]
	ldr r1, [sp, #0x94]
	ldr r2, [sp, #0x98]
	str r7, [sp, #0xc0]
	ldr r7, [sp, #0xa8]
	str r6, [sp, #0xc4]
	ldr r6, [sp, #0xac]
	str r3, [sp, #0xc8]
	ldr r3, [sp, #0xb0]
	str r0, [sp, #0xcc]
	str r1, [sp, #0xd0]
	add r0, sp, #0x30
	str r2, [sp, #0xd4]
	add r1, sp, #0xc0
	mov r2, r0
	str r7, [sp, #0xd8]
	str r6, [sp, #0xdc]
	str r3, [sp, #0xe0]
	bl FUN_020CBBC8
	ldr r0, [r5, #0x40]
	ldr r2, [r4, #0x30]
	ldr r0, [r0, #0x20]
	mov ip, #0x800
	ldr r0, [r0]
	asr r3, r2, #0x1f
	ldrsh r1, [r0, #0x30]
	ldr r0, [r0, #0x48]
	mov lr, #0
	smull r6, r1, r2, r1
	adds r7, r6, ip
	adc r6, r1, #0
	lsl r0, r0, #1
	lsr r1, r7, #0xc
	orr r1, r1, r6, lsl #20
	lsrs r0, r0, #0x1d
	beq _02099B74
	cmp r0, #1
	beq _02099BB0
	cmp r0, #2
	beq _02099BCC
	b _02099BF0
_02099B74:
	ldrsh r0, [r4, #0x34]
	asr r8, r0, #0x1f
	umull r7, r6, r2, r0
	mla r6, r2, r8, r6
	smull r8, r2, r1, r0
	adds r1, r8, ip
	adc r8, r2, lr
	adds r2, r7, ip
	mla r6, r3, r0, r6
	lsr r1, r1, #0xc
	adc r0, r6, lr
	lsr r2, r2, #0xc
	orr r1, r1, r8, lsl #20
	orr r2, r2, r0, lsl #20
	b _02099BF0
_02099BB0:
	ldrsh r0, [r4, #0x34]
	smull r3, r0, r1, r0
	adds r1, r3, ip
	adc r0, r0, lr
	lsr r1, r1, #0xc
	orr r1, r1, r0, lsl #20
	b _02099BF0
_02099BCC:
	ldrsh r6, [r4, #0x34]
	asr r0, r6, #0x1f
	umull r8, r7, r2, r6
	mla r7, r2, r0, r7
	adds r2, r8, ip
	mla r7, r3, r6, r7
	adc r0, r7, lr
	lsr r2, r2, #0xc
	orr r2, r2, r0, lsl #20
_02099BF0:
	add r0, sp, #0x60
	mov r3, r2
	blx FUN_020CB7B4
	add r0, sp, #0x30
	add r1, sp, #0x60
	add r2, sp, #0
	bl FUN_020CBBC8
	ldr r0, [r5, #0x40]
	ldr r0, [r0, #0x20]
	ldr r3, [r0]
	ldr r0, [r3]
	lsl r0, r0, #8
	lsrs r0, r0, #0x1f
	bne _02099C6C
	ldr r1, [r4, #8]
	ldr r0, [r4, #0x38]
	add r0, r1, r0
	str r0, [sp, #0x24]
	ldr r1, [r4, #0xc]
	ldr r0, [r4, #0x3c]
	add r0, r1, r0
	str r0, [sp, #0x28]
	ldr r1, [r4, #0x10]
	ldr r0, [r4, #0x40]
	add r0, r1, r0
	str r0, [sp, #0x2c]
	ldr r0, [r5, #0x44]
	bl FUN_020CF510
	add r0, sp, #0
	bl FUN_020CF52C
	b _02099D10
_02099C6C:
	ldr r2, [r4, #8]
	ldr r1, [r4, #0x38]
	ldr r0, [r3, #4]
	add r1, r2, r1
	sub r0, r1, r0
	str r0, [sp, #0x24]
	ldr r0, [r5, #0x40]
	ldr r2, [r4, #0xc]
	ldr r0, [r0, #0x20]
	ldr r1, [r4, #0x3c]
	ldr r0, [r0]
	add r2, r2, r1
	ldr r1, [r0, #8]
	ldr r0, _02099DB8 @ =0x04000454
	sub r1, r2, r1
	str r1, [sp, #0x28]
	ldr r1, [r5, #0x40]
	ldr r3, [r4, #0x10]
	ldr r1, [r1, #0x20]
	ldr r2, [r4, #0x40]
	ldr r1, [r1]
	add r3, r3, r2
	ldr r2, [r1, #0xc]
	mov r1, #0
	sub r2, r3, r2
	str r2, [sp, #0x2c]
	str r1, [r0]
	ldr r1, [r5, #0x40]
	ldr r0, _02099DBC @ =0x04000470
	ldr r1, [r1, #0x20]
	ldr r1, [r1]
	ldr r3, [r1, #0xc]
	ldr r2, [r1, #8]
	ldr r1, [r1, #4]
	str r1, [r0]
	str r2, [r0]
	str r3, [r0]
	ldr r0, [r5, #0x44]
	bl FUN_020CF52C
	add r0, sp, #0
	bl FUN_020CF52C
_02099D10:
	ldr r0, [r5, #0x40]
	ldrh r4, [r4, #0x36]
	ldrh ip, [r0, #0x72]
	mov r2, #0
	and r1, r4, #0x1f
	and r0, ip, #0x1f
	mul r3, r1, r0
	and r1, r4, #0x3e0
	and r0, ip, #0x3e0
	mul r0, r1, r0
	and r4, r4, #0x7c00
	and r1, ip, #0x7c00
	mul ip, r4, r1
	asr r1, r3, #5
	asr r0, r0, #0xf
	asr r3, ip, #0x19
	orr r0, r1, r0, lsl #5
	orr r0, r0, r3, lsl #10
	lsl r0, r0, #0x10
	ldr r1, _02099DC0 @ =0x04000480
	lsr r0, r0, #0x10
	str r0, [r1]
	ldr r5, [r5, #0x40]
	ldr r4, _02099DC4 @ =_021105DC
	ldr r1, [r5, #0x20]
	ldrsh r0, [r5, #0x7c]
	ldr r3, [r1, #0x14]
	ldrsh r1, [r5, #0x7e]
	ldrh r5, [r3]
	mov r3, r2
	lsl r5, r5, #0x14
	lsr r5, r5, #0x1f
	ldr r4, [r4, r5, lsl #2]
	blx r4
	add sp, sp, #0xf0
	pop {r4, r5, r6, r7, r8, lr}
	bx lr
	.align 2, 0
_02099DA4: .4byte 0x040004A4
_02099DA8: .4byte 0x021094DC
_02099DAC: .4byte _021105E4
_02099DB0: .4byte 0x00000CCD
_02099DB4: .4byte 0xFFFFF333
_02099DB8: .4byte 0x04000454
_02099DBC: .4byte 0x04000470
_02099DC0: .4byte 0x04000480
_02099DC4: .4byte _021105DC
	arm_func_end FUN_02099948

	arm_func_start FUN_02099DC8
FUN_02099DC8: @ 0x02099DC8
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0xf0
	mov r4, r1
	ldrh r2, [r4, #0x2e]
	mov r5, r0
	ldr r0, [r5, #0x3c]
	lsl r1, r2, #0x16
	lsl r3, r2, #0x1b
	lsr r1, r1, #0x1b
	lsr r3, r3, #0x1b
	add r1, r1, #1
	mul r6, r3, r1
	lsl r1, r2, #0x10
	asrs r2, r6, #5
	lsr r1, r1, #0x1a
	orr r0, r0, #0xc0
	orr r1, r0, r1, lsl #24
	ldr r0, _0209A220 @ =0x040004A4
	orr r1, r1, r2, lsl #16
	str r1, [r0]
	addeq sp, sp, #0xf0
	ldr r0, [r0]
	popeq {r4, r5, r6, r7, r8, lr}
	bxeq lr
	ldr r0, [r5, #0x40]
	ldrh r1, [r4, #0x20]
	ldr r0, [r0, #0x20]
	ldr r6, _0209A224 @ =0x021094DC
	ldr r0, [r0]
	asr r1, r1, #4
	lsl r2, r1, #1
	ldr r0, [r0]
	add r1, r2, #1
	lsl r7, r2, #1
	lsl r1, r1, #1
	lsl r0, r0, #0xd
	lsr r3, r0, #0x1e
	ldr r2, _0209A228 @ =_021105E4
	ldrsh r0, [r6, r7]
	ldr r3, [r2, r3, lsl #2]
	ldrsh r1, [r6, r1]
	add r2, sp, #0x30
	blx r3
	add r0, sp, #0xc0
	bl FUN_020CB6AC
	ldr r0, [r5, #0x40]
	ldr r0, [r0, #0x20]
	ldr r0, [r0]
	ldr r0, [r0, #0x48]
	lsrs r0, r0, #0x1f
	bne _02099EA4
	add r1, sp, #0x90
	add r0, r4, #0x14
	bl FUN_020CCFE0
	b _02099ED4
_02099EA4:
	add r1, sp, #0x90
	add r0, r4, #8
	bl FUN_020CCFE0
	ldr r2, [sp, #0x90]
	ldr r1, [sp, #0x94]
	ldr r0, [sp, #0x98]
	rsb r2, r2, #0
	rsb r1, r1, #0
	rsb r0, r0, #0
	str r2, [sp, #0x90]
	str r1, [sp, #0x94]
	str r0, [sp, #0x98]
_02099ED4:
	mov r3, #0
	mov r2, #0x1000
	add r0, sp, #0x90
	add r1, sp, #0xb4
	str r3, [sp, #0xb4]
	str r2, [sp, #0xb8]
	str r3, [sp, #0xbc]
	bl FUN_020CCE14
	ldr r1, _0209A22C @ =0x00000CCD
	cmp r0, r1
	bgt _02099F0C
	ldr r1, _0209A230 @ =0xFFFFF333
	cmp r0, r1
	bge _02099F20
_02099F0C:
	mov r0, #0
	mov r1, #0x1000
	str r1, [sp, #0xb4]
	str r0, [sp, #0xb8]
	str r0, [sp, #0xbc]
_02099F20:
	add r0, sp, #0x90
	add r1, sp, #0xb4
	add r2, sp, #0x9c
	bl FUN_020CCE94
	add r0, sp, #0x90
	add r1, sp, #0x9c
	add r2, sp, #0xa8
	bl FUN_020CCE94
	ldr r7, [sp, #0x9c]
	ldr r6, [sp, #0xa0]
	ldr r3, [sp, #0xa4]
	ldr r0, [sp, #0x90]
	ldr r1, [sp, #0x94]
	ldr r2, [sp, #0x98]
	str r7, [sp, #0xc0]
	ldr r7, [sp, #0xa8]
	str r6, [sp, #0xc4]
	ldr r6, [sp, #0xac]
	str r3, [sp, #0xc8]
	ldr r3, [sp, #0xb0]
	str r0, [sp, #0xcc]
	str r1, [sp, #0xd0]
	add r0, sp, #0x30
	str r2, [sp, #0xd4]
	add r1, sp, #0xc0
	mov r2, r0
	str r7, [sp, #0xd8]
	str r6, [sp, #0xdc]
	str r3, [sp, #0xe0]
	bl FUN_020CBBC8
	ldr r0, [r5, #0x40]
	ldr r2, [r4, #0x30]
	ldr r0, [r0, #0x20]
	mov ip, #0x800
	ldr r0, [r0]
	asr r3, r2, #0x1f
	ldrsh r1, [r0, #0x30]
	ldr r0, [r0, #0x48]
	mov lr, #0
	smull r6, r1, r2, r1
	adds r7, r6, ip
	adc r6, r1, #0
	lsl r0, r0, #1
	lsr r1, r7, #0xc
	orr r1, r1, r6, lsl #20
	lsrs r0, r0, #0x1d
	beq _02099FF0
	cmp r0, #1
	beq _0209A02C
	cmp r0, #2
	beq _0209A048
	b _0209A06C
_02099FF0:
	ldrsh r0, [r4, #0x34]
	asr r8, r0, #0x1f
	umull r7, r6, r2, r0
	mla r6, r2, r8, r6
	smull r8, r2, r1, r0
	adds r1, r8, ip
	adc r8, r2, lr
	adds r2, r7, ip
	mla r6, r3, r0, r6
	lsr r1, r1, #0xc
	adc r0, r6, lr
	lsr r2, r2, #0xc
	orr r1, r1, r8, lsl #20
	orr r2, r2, r0, lsl #20
	b _0209A06C
_0209A02C:
	ldrsh r0, [r4, #0x34]
	smull r3, r0, r1, r0
	adds r1, r3, ip
	adc r0, r0, lr
	lsr r1, r1, #0xc
	orr r1, r1, r0, lsl #20
	b _0209A06C
_0209A048:
	ldrsh r6, [r4, #0x34]
	asr r0, r6, #0x1f
	umull r8, r7, r2, r6
	mla r7, r2, r0, r7
	adds r2, r8, ip
	mla r7, r3, r6, r7
	adc r0, r7, lr
	lsr r2, r2, #0xc
	orr r2, r2, r0, lsl #20
_0209A06C:
	add r0, sp, #0x60
	mov r3, r2
	blx FUN_020CB7B4
	add r0, sp, #0x60
	add r1, sp, #0x30
	add r2, sp, #0
	bl FUN_020CBBC8
	ldr r0, [r5, #0x40]
	ldr r0, [r0, #0x20]
	ldr r3, [r0]
	ldr r0, [r3]
	lsl r0, r0, #8
	lsrs r0, r0, #0x1f
	bne _0209A0E8
	ldr r1, [r4, #8]
	ldr r0, [r4, #0x38]
	add r0, r1, r0
	str r0, [sp, #0x24]
	ldr r1, [r4, #0xc]
	ldr r0, [r4, #0x3c]
	add r0, r1, r0
	str r0, [sp, #0x28]
	ldr r1, [r4, #0x10]
	ldr r0, [r4, #0x40]
	add r0, r1, r0
	str r0, [sp, #0x2c]
	ldr r0, [r5, #0x44]
	bl FUN_020CF510
	add r0, sp, #0
	bl FUN_020CF52C
	b _0209A18C
_0209A0E8:
	ldr r2, [r4, #8]
	ldr r1, [r4, #0x38]
	ldr r0, [r3, #4]
	add r1, r2, r1
	sub r0, r1, r0
	str r0, [sp, #0x24]
	ldr r0, [r5, #0x40]
	ldr r2, [r4, #0xc]
	ldr r0, [r0, #0x20]
	ldr r1, [r4, #0x3c]
	ldr r0, [r0]
	add r2, r2, r1
	ldr r1, [r0, #8]
	ldr r0, _0209A234 @ =0x04000454
	sub r1, r2, r1
	str r1, [sp, #0x28]
	ldr r1, [r5, #0x40]
	ldr r3, [r4, #0x10]
	ldr r1, [r1, #0x20]
	ldr r2, [r4, #0x40]
	ldr r1, [r1]
	add r3, r3, r2
	ldr r2, [r1, #0xc]
	mov r1, #0
	sub r2, r3, r2
	str r2, [sp, #0x2c]
	str r1, [r0]
	ldr r1, [r5, #0x40]
	ldr r0, _0209A238 @ =0x04000470
	ldr r1, [r1, #0x20]
	ldr r1, [r1]
	ldr r3, [r1, #0xc]
	ldr r2, [r1, #8]
	ldr r1, [r1, #4]
	str r1, [r0]
	str r2, [r0]
	str r3, [r0]
	ldr r0, [r5, #0x44]
	bl FUN_020CF52C
	add r0, sp, #0
	bl FUN_020CF52C
_0209A18C:
	ldr r0, [r5, #0x40]
	ldrh r4, [r4, #0x36]
	ldrh ip, [r0, #0x72]
	ldr r1, _0209A23C @ =0x04000480
	and r2, r4, #0x1f
	and r0, ip, #0x1f
	mul r3, r2, r0
	and r2, r4, #0x3e0
	and r0, ip, #0x3e0
	mul r0, r2, r0
	and r4, r4, #0x7c00
	and r2, ip, #0x7c00
	mul ip, r4, r2
	asr r2, r3, #5
	asr r0, r0, #0xf
	asr r3, ip, #0x19
	orr r0, r2, r0, lsl #5
	orr r0, r0, r3, lsl #10
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	str r0, [r1]
	ldr r2, [r5, #0x40]
	ldr r4, _0209A240 @ =_021105DC
	ldr r1, [r2, #0x20]
	ldrsh r0, [r2, #0x78]
	ldr ip, [r1]
	ldrsh r1, [r2, #0x7a]
	ldr r3, [ip]
	ldrsh r2, [ip, #0x50]
	lsl r3, r3, #0xc
	lsr r5, r3, #0x1f
	ldrsh r3, [ip, #0x52]
	ldr r4, [r4, r5, lsl #2]
	blx r4
	add sp, sp, #0xf0
	pop {r4, r5, r6, r7, r8, lr}
	bx lr
	.align 2, 0
_0209A220: .4byte 0x040004A4
_0209A224: .4byte 0x021094DC
_0209A228: .4byte _021105E4
_0209A22C: .4byte 0x00000CCD
_0209A230: .4byte 0xFFFFF333
_0209A234: .4byte 0x04000454
_0209A238: .4byte 0x04000470
_0209A23C: .4byte 0x04000480
_0209A240: .4byte _021105DC
	arm_func_end FUN_02099DC8

	arm_func_start FUN_0209A244
FUN_0209A244: @ 0x0209A244
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x90
	mov r4, r1
	ldrh r2, [r4, #0x2e]
	mov r5, r0
	ldr r0, [r5, #0x3c]
	lsl r1, r2, #0x16
	lsl r3, r2, #0x1b
	lsr r1, r1, #0x1b
	lsr r3, r3, #0x1b
	add r1, r1, #1
	mul r6, r3, r1
	lsl r1, r2, #0x10
	asrs r2, r6, #5
	lsr r1, r1, #0x1a
	orr r0, r0, #0xc0
	orr r1, r0, r1, lsl #24
	ldr r0, _0209A578 @ =0x040004A4
	orr r1, r1, r2, lsl #16
	str r1, [r0]
	addeq sp, sp, #0x90
	ldr r0, [r0]
	popeq {r4, r5, r6, r7, r8, lr}
	bxeq lr
	ldr r0, [r5, #0x40]
	ldrh r1, [r4, #0x20]
	ldr r0, [r0, #0x20]
	ldr r6, _0209A57C @ =0x021094DC
	ldr r0, [r0, #0x14]
	asr r1, r1, #4
	ldrh r0, [r0]
	lsl r2, r1, #1
	add r1, r2, #1
	lsl r7, r2, #1
	lsl r1, r1, #1
	lsl r0, r0, #0x15
	lsr r3, r0, #0x1e
	ldr r2, _0209A580 @ =_021105E4
	ldrsh r0, [r6, r7]
	ldr r3, [r2, r3, lsl #2]
	ldrsh r1, [r6, r1]
	add r2, sp, #0x30
	blx r3
	ldr r0, [r5, #0x40]
	ldr r2, [r4, #0x30]
	ldr r0, [r0, #0x20]
	mov ip, #0x800
	ldr r0, [r0]
	asr r3, r2, #0x1f
	ldrsh r1, [r0, #0x30]
	ldr r0, [r0, #0x48]
	mov lr, #0
	smull r6, r1, r2, r1
	adds r7, r6, ip
	adc r6, r1, #0
	lsr r1, r7, #0xc
	lsl r0, r0, #1
	orr r1, r1, r6, lsl #20
	lsrs r0, r0, #0x1d
	beq _0209A348
	cmp r0, #1
	beq _0209A384
	cmp r0, #2
	beq _0209A3A0
	b _0209A3C4
_0209A348:
	ldrsh r0, [r4, #0x34]
	asr r8, r0, #0x1f
	umull r7, r6, r2, r0
	mla r6, r2, r8, r6
	smull r8, r2, r1, r0
	adds r1, r8, ip
	adc r8, r2, lr
	adds r2, r7, ip
	mla r6, r3, r0, r6
	lsr r1, r1, #0xc
	adc r0, r6, lr
	lsr r2, r2, #0xc
	orr r1, r1, r8, lsl #20
	orr r2, r2, r0, lsl #20
	b _0209A3C4
_0209A384:
	ldrsh r0, [r4, #0x34]
	smull r3, r0, r1, r0
	adds r1, r3, ip
	adc r0, r0, lr
	lsr r1, r1, #0xc
	orr r1, r1, r0, lsl #20
	b _0209A3C4
_0209A3A0:
	ldrsh r6, [r4, #0x34]
	asr r0, r6, #0x1f
	umull r8, r7, r2, r6
	mla r7, r2, r0, r7
	adds r2, r8, ip
	mla r7, r3, r6, r7
	adc r0, r7, lr
	lsr r2, r2, #0xc
	orr r2, r2, r0, lsl #20
_0209A3C4:
	add r0, sp, #0x60
	mov r3, r2
	blx FUN_020CB7B4
	add r0, sp, #0x30
	add r1, sp, #0x60
	add r2, sp, #0
	bl FUN_020CBBC8
	ldr r0, [r5, #0x40]
	ldr r0, [r0, #0x20]
	ldr r3, [r0]
	ldr r0, [r3]
	lsl r0, r0, #8
	lsrs r0, r0, #0x1f
	bne _0209A440
	ldr r1, [r4, #8]
	ldr r0, [r4, #0x38]
	add r0, r1, r0
	str r0, [sp, #0x24]
	ldr r1, [r4, #0xc]
	ldr r0, [r4, #0x3c]
	add r0, r1, r0
	str r0, [sp, #0x28]
	ldr r1, [r4, #0x10]
	ldr r0, [r4, #0x40]
	add r0, r1, r0
	str r0, [sp, #0x2c]
	ldr r0, [r5, #0x44]
	bl FUN_020CF510
	add r0, sp, #0
	bl FUN_020CF52C
	b _0209A4E4
_0209A440:
	ldr r2, [r4, #8]
	ldr r1, [r4, #0x38]
	ldr r0, [r3, #4]
	add r1, r2, r1
	sub r0, r1, r0
	str r0, [sp, #0x24]
	ldr r0, [r5, #0x40]
	ldr r2, [r4, #0xc]
	ldr r0, [r0, #0x20]
	ldr r1, [r4, #0x3c]
	ldr r0, [r0]
	add r2, r2, r1
	ldr r1, [r0, #8]
	ldr r0, _0209A584 @ =0x04000454
	sub r1, r2, r1
	str r1, [sp, #0x28]
	ldr r1, [r5, #0x40]
	ldr r3, [r4, #0x10]
	ldr r1, [r1, #0x20]
	ldr r2, [r4, #0x40]
	ldr r1, [r1]
	add r3, r3, r2
	ldr r2, [r1, #0xc]
	mov r1, #0
	sub r2, r3, r2
	str r2, [sp, #0x2c]
	str r1, [r0]
	ldr r1, [r5, #0x40]
	ldr r0, _0209A588 @ =0x04000470
	ldr r1, [r1, #0x20]
	ldr r1, [r1]
	ldr r3, [r1, #0xc]
	ldr r2, [r1, #8]
	ldr r1, [r1, #4]
	str r1, [r0]
	str r2, [r0]
	str r3, [r0]
	ldr r0, [r5, #0x44]
	bl FUN_020CF52C
	add r0, sp, #0
	bl FUN_020CF52C
_0209A4E4:
	ldr r0, [r5, #0x40]
	ldrh r4, [r4, #0x36]
	ldrh ip, [r0, #0x72]
	mov r2, #0
	and r1, r4, #0x1f
	and r0, ip, #0x1f
	mul r3, r1, r0
	and r1, r4, #0x3e0
	and r0, ip, #0x3e0
	mul r0, r1, r0
	and r4, r4, #0x7c00
	and r1, ip, #0x7c00
	mul ip, r4, r1
	asr r1, r3, #5
	asr r0, r0, #0xf
	asr r3, ip, #0x19
	orr r0, r1, r0, lsl #5
	orr r0, r0, r3, lsl #10
	lsl r0, r0, #0x10
	ldr r1, _0209A58C @ =0x04000480
	lsr r0, r0, #0x10
	str r0, [r1]
	ldr r5, [r5, #0x40]
	ldr r4, _0209A590 @ =_021105DC
	ldr r1, [r5, #0x20]
	ldrsh r0, [r5, #0x7c]
	ldr r3, [r1, #0x14]
	ldrsh r1, [r5, #0x7e]
	ldrh r5, [r3]
	mov r3, r2
	lsl r5, r5, #0x14
	lsr r5, r5, #0x1f
	ldr r4, [r4, r5, lsl #2]
	blx r4
	add sp, sp, #0x90
	pop {r4, r5, r6, r7, r8, lr}
	bx lr
	.align 2, 0
_0209A578: .4byte 0x040004A4
_0209A57C: .4byte 0x021094DC
_0209A580: .4byte _021105E4
_0209A584: .4byte 0x04000454
_0209A588: .4byte 0x04000470
_0209A58C: .4byte 0x04000480
_0209A590: .4byte _021105DC
	arm_func_end FUN_0209A244

	arm_func_start FUN_0209A594
FUN_0209A594: @ 0x0209A594
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x90
	mov r4, r1
	ldrh r2, [r4, #0x2e]
	mov r5, r0
	ldr r0, [r5, #0x3c]
	lsl r1, r2, #0x16
	lsl r3, r2, #0x1b
	lsr r1, r1, #0x1b
	lsr r3, r3, #0x1b
	add r1, r1, #1
	mul r6, r3, r1
	lsl r1, r2, #0x10
	asrs r2, r6, #5
	lsr r1, r1, #0x1a
	orr r0, r0, #0xc0
	orr r1, r0, r1, lsl #24
	ldr r0, _0209A8C8 @ =0x040004A4
	orr r1, r1, r2, lsl #16
	str r1, [r0]
	addeq sp, sp, #0x90
	ldr r0, [r0]
	popeq {r4, r5, r6, r7, r8, lr}
	bxeq lr
	ldr r0, [r5, #0x40]
	ldrh r1, [r4, #0x20]
	ldr r0, [r0, #0x20]
	ldr r6, _0209A8CC @ =0x021094DC
	ldr r0, [r0]
	asr r1, r1, #4
	lsl r2, r1, #1
	ldr r0, [r0]
	add r1, r2, #1
	lsl r7, r2, #1
	lsl r1, r1, #1
	lsl r0, r0, #0xd
	lsr r3, r0, #0x1e
	ldr r2, _0209A8D0 @ =_021105E4
	ldrsh r0, [r6, r7]
	ldr r3, [r2, r3, lsl #2]
	ldrsh r1, [r6, r1]
	add r2, sp, #0x30
	blx r3
	ldr r0, [r5, #0x40]
	ldr r2, [r4, #0x30]
	ldr r0, [r0, #0x20]
	mov ip, #0x800
	ldr r0, [r0]
	asr r3, r2, #0x1f
	ldrsh r1, [r0, #0x30]
	ldr r0, [r0, #0x48]
	mov lr, #0
	smull r6, r1, r2, r1
	adds r7, r6, ip
	adc r6, r1, #0
	lsr r1, r7, #0xc
	lsl r0, r0, #1
	orr r1, r1, r6, lsl #20
	lsrs r0, r0, #0x1d
	beq _0209A698
	cmp r0, #1
	beq _0209A6D4
	cmp r0, #2
	beq _0209A6F0
	b _0209A714
_0209A698:
	ldrsh r0, [r4, #0x34]
	asr r8, r0, #0x1f
	umull r7, r6, r2, r0
	mla r6, r2, r8, r6
	smull r8, r2, r1, r0
	adds r1, r8, ip
	adc r8, r2, lr
	adds r2, r7, ip
	mla r6, r3, r0, r6
	lsr r1, r1, #0xc
	adc r0, r6, lr
	lsr r2, r2, #0xc
	orr r1, r1, r8, lsl #20
	orr r2, r2, r0, lsl #20
	b _0209A714
_0209A6D4:
	ldrsh r0, [r4, #0x34]
	smull r3, r0, r1, r0
	adds r1, r3, ip
	adc r0, r0, lr
	lsr r1, r1, #0xc
	orr r1, r1, r0, lsl #20
	b _0209A714
_0209A6F0:
	ldrsh r6, [r4, #0x34]
	asr r0, r6, #0x1f
	umull r8, r7, r2, r6
	mla r7, r2, r0, r7
	adds r2, r8, ip
	mla r7, r3, r6, r7
	adc r0, r7, lr
	lsr r2, r2, #0xc
	orr r2, r2, r0, lsl #20
_0209A714:
	add r0, sp, #0x60
	mov r3, r2
	blx FUN_020CB7B4
	add r0, sp, #0x60
	add r1, sp, #0x30
	add r2, sp, #0
	bl FUN_020CBBC8
	ldr r0, [r5, #0x40]
	ldr r0, [r0, #0x20]
	ldr r3, [r0]
	ldr r0, [r3]
	lsl r0, r0, #8
	lsrs r0, r0, #0x1f
	bne _0209A790
	ldr r1, [r4, #8]
	ldr r0, [r4, #0x38]
	add r0, r1, r0
	str r0, [sp, #0x24]
	ldr r1, [r4, #0xc]
	ldr r0, [r4, #0x3c]
	add r0, r1, r0
	str r0, [sp, #0x28]
	ldr r1, [r4, #0x10]
	ldr r0, [r4, #0x40]
	add r0, r1, r0
	str r0, [sp, #0x2c]
	ldr r0, [r5, #0x44]
	bl FUN_020CF510
	add r0, sp, #0
	bl FUN_020CF52C
	b _0209A834
_0209A790:
	ldr r2, [r4, #8]
	ldr r1, [r4, #0x38]
	ldr r0, [r3, #4]
	add r1, r2, r1
	sub r0, r1, r0
	str r0, [sp, #0x24]
	ldr r0, [r5, #0x40]
	ldr r2, [r4, #0xc]
	ldr r0, [r0, #0x20]
	ldr r1, [r4, #0x3c]
	ldr r0, [r0]
	add r2, r2, r1
	ldr r1, [r0, #8]
	ldr r0, _0209A8D4 @ =0x04000454
	sub r1, r2, r1
	str r1, [sp, #0x28]
	ldr r1, [r5, #0x40]
	ldr r3, [r4, #0x10]
	ldr r1, [r1, #0x20]
	ldr r2, [r4, #0x40]
	ldr r1, [r1]
	add r3, r3, r2
	ldr r2, [r1, #0xc]
	mov r1, #0
	sub r2, r3, r2
	str r2, [sp, #0x2c]
	str r1, [r0]
	ldr r1, [r5, #0x40]
	ldr r0, _0209A8D8 @ =0x04000470
	ldr r1, [r1, #0x20]
	ldr r1, [r1]
	ldr r3, [r1, #0xc]
	ldr r2, [r1, #8]
	ldr r1, [r1, #4]
	str r1, [r0]
	str r2, [r0]
	str r3, [r0]
	ldr r0, [r5, #0x44]
	bl FUN_020CF52C
	add r0, sp, #0
	bl FUN_020CF52C
_0209A834:
	ldr r0, [r5, #0x40]
	ldrh r4, [r4, #0x36]
	ldrh ip, [r0, #0x72]
	ldr r1, _0209A8DC @ =0x04000480
	and r2, r4, #0x1f
	and r0, ip, #0x1f
	mul r3, r2, r0
	and r2, r4, #0x3e0
	and r0, ip, #0x3e0
	mul r0, r2, r0
	and r4, r4, #0x7c00
	and r2, ip, #0x7c00
	mul ip, r4, r2
	asr r2, r3, #5
	asr r0, r0, #0xf
	asr r3, ip, #0x19
	orr r0, r2, r0, lsl #5
	orr r0, r0, r3, lsl #10
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	str r0, [r1]
	ldr r2, [r5, #0x40]
	ldr r4, _0209A8E0 @ =_021105DC
	ldr r1, [r2, #0x20]
	ldrsh r0, [r2, #0x78]
	ldr ip, [r1]
	ldrsh r1, [r2, #0x7a]
	ldr r3, [ip]
	ldrsh r2, [ip, #0x50]
	lsl r3, r3, #0xc
	lsr r5, r3, #0x1f
	ldrsh r3, [ip, #0x52]
	ldr r4, [r4, r5, lsl #2]
	blx r4
	add sp, sp, #0x90
	pop {r4, r5, r6, r7, r8, lr}
	bx lr
	.align 2, 0
_0209A8C8: .4byte 0x040004A4
_0209A8CC: .4byte 0x021094DC
_0209A8D0: .4byte _021105E4
_0209A8D4: .4byte 0x04000454
_0209A8D8: .4byte 0x04000470
_0209A8DC: .4byte 0x04000480
_0209A8E0: .4byte _021105DC
	arm_func_end FUN_0209A594

	arm_func_start FUN_0209A8E4
FUN_0209A8E4: @ 0x0209A8E4
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0x88
	mov r6, r1
	ldrh r1, [r6, #0x2e]
	mov r7, r0
	ldr r4, [r7, #0x40]
	lsl r0, r1, #0x16
	lsl r2, r1, #0x1b
	lsr r0, r0, #0x1b
	lsr r2, r2, #0x1b
	add r0, r0, #1
	mul r3, r2, r0
	ldr r2, [r4, #0x20]
	asrs r3, r3, #5
	ldr r0, [r7, #0x3c]
	ldr r4, [r2]
	lsl r1, r1, #0x10
	lsr r2, r1, #0x1a
	orr r1, r0, #0xc0
	orr r2, r1, r2, lsl #24
	ldrsh r0, [r4, #0x30]
	ldr r8, [r7, #0x44]
	ldr r1, _0209AFB4 @ =0x040004A4
	orr r2, r2, r3, lsl #16
	str r2, [r1]
	addeq sp, sp, #0x88
	ldr r1, [r1]
	popeq {r4, r5, r6, r7, r8, sb, sl, lr}
	bxeq lr
	ldr r4, [r6, #0x30]
	ldr r1, [r7, #0x40]
	smull r2, r5, r4, r0
	ldr r0, [r1, #0x20]
	mov r3, #0x800
	adds r1, r2, r3
	ldr r2, [r0]
	adc sb, r5, #0
	ldr r0, [r2, #0x48]
	lsr r5, r1, #0xc
	lsl r0, r0, #1
	asr r1, r4, #0x1f
	orr r5, r5, sb, lsl #20
	lsrs r0, r0, #0x1d
	mov sb, #0
	beq _0209A9AC
	cmp r0, #1
	beq _0209A9E8
	cmp r0, #2
	beq _0209AA04
	b _0209AA28
_0209A9AC:
	ldrsh r0, [r6, #0x34]
	asr lr, r0, #0x1f
	umull ip, sl, r4, r0
	mla sl, r4, lr, sl
	smull lr, r4, r5, r0
	mla sl, r1, r0, sl
	adds r0, lr, r3
	adc lr, r4, sb
	adds r1, ip, r3
	lsr r5, r0, #0xc
	adc r0, sl, sb
	lsr r4, r1, #0xc
	orr r5, r5, lr, lsl #20
	orr r4, r4, r0, lsl #20
	b _0209AA28
_0209A9E8:
	ldrsh r0, [r6, #0x34]
	smull r1, r0, r5, r0
	adds r1, r1, r3
	adc r0, r0, sb
	lsr r5, r1, #0xc
	orr r5, r5, r0, lsl #20
	b _0209AA28
_0209AA04:
	ldrsh sl, [r6, #0x34]
	asr r0, sl, #0x1f
	umull lr, ip, r4, sl
	mla ip, r4, r0, ip
	adds r3, lr, r3
	mla ip, r1, sl, ip
	adc r0, ip, sb
	lsr r4, r3, #0xc
	orr r4, r4, r0, lsl #20
_0209AA28:
	ldr r0, [r2]
	lsl r0, r0, #8
	lsrs r0, r0, #0x1f
	bne _0209AC90
	ldr r1, [r6, #8]
	ldr r0, [r6, #0x38]
	add sb, sp, #0x18
	add r0, r1, r0
	str r0, [sp, #0xc]
	ldr r2, [r6, #0xc]
	ldr r1, [r6, #0x3c]
	add r0, r6, #0x14
	add r1, r2, r1
	str r1, [sp, #0x10]
	ldr r2, [r6, #0x10]
	ldr r1, [r6, #0x40]
	add r1, r2, r1
	str r1, [sp, #0x14]
	ldm r0, {r0, r1, r2}
	stm sb, {r0, r1, r2}
	ldr r0, [r8, #8]
	add r1, sp, #0x24
	str r0, [sp, #0x24]
	ldr r2, [r8, #0x14]
	mov r0, sb
	str r2, [sp, #0x28]
	ldr r3, [r8, #0x20]
	mov r2, sb
	str r3, [sp, #0x2c]
	bl FUN_020CCE94
	ldr r0, [sp, #0x18]
	cmp r0, #0
	bne _0209AACC
	ldr r0, [sp, #0x1c]
	cmp r0, #0
	bne _0209AACC
	ldr r0, [sp, #0x20]
	cmp r0, #0
	addeq sp, sp, #0x88
	popeq {r4, r5, r6, r7, r8, sb, sl, lr}
	bxeq lr
_0209AACC:
	add r0, sp, #0x18
	mov r1, r0
	bl FUN_020CCFE0
	add r1, sp, #0x30
	mov r0, r8
	bl FUN_020D4928
	add r0, sp, #0x18
	add r1, sp, #0x30
	mov r2, r0
	bl FUN_020CB630
	add r0, sp, #0xc
	mov r1, r8
	mov r2, r0
	bl FUN_020CBE9C
	add r0, r6, #0x14
	add r3, sp, #0
	ldm r0, {r0, r1, r2}
	stm r3, {r0, r1, r2}
	mov r0, r3
	mov r1, r3
	bl FUN_020CCFE0
	ldr r0, [r8, #0x20]
	ldr r1, [sp, #8]
	rsb r0, r0, #0
	smull r3, r0, r1, r0
	mov r2, #0x800
	adds r1, r3, r2
	ldr r3, [r8, #0x14]
	adc r0, r0, #0
	lsr r1, r1, #0xc
	orr r1, r1, r0, lsl #20
	ldr r0, [r8, #8]
	ldr sb, [sp]
	rsb r0, r0, #0
	smull r8, r0, sb, r0
	adds sb, r8, r2
	adc r8, r0, #0
	lsr r0, sb, #0xc
	orr r0, r0, r8, lsl #20
	ldr r8, [sp, #4]
	rsb r3, r3, #0
	smull sb, r3, r8, r3
	adds r8, sb, r2
	adc r2, r3, #0
	lsr r3, r8, #0xc
	orr r3, r3, r2, lsl #20
	add r0, r0, r3
	adds r1, r1, r0
	ldr r0, [r7, #0x40]
	rsbmi r1, r1, #0
	ldr r0, [r0, #0x20]
	rsb r2, r1, #0x1000
	ldr r0, [r0]
	mov sb, #0x800
	ldr r0, [r0, #0x48]
	ldr ip, [sp, #0x18]
	lsl r0, r0, #8
	lsr r0, r0, #0x10
	smull r8, r0, r2, r0
	adds r2, r8, sb
	adc r0, r0, #0
	mov r1, #0
	lsr r2, r2, #0xc
	orr r2, r2, r0, lsl #20
	add r0, r2, #0x1000
	smull r2, r0, r4, r0
	adds r2, r2, sb
	adc r0, r0, #0
	lsr lr, r2, #0xc
	orr lr, lr, r0, lsl #20
	smull r0, r4, ip, r5
	adds r8, r0, sb
	ldr r3, [sp, #0x1c]
	ldr r0, [sp, #0xc]
	rsb r2, r3, #0
	str r0, [sp, #0x78]
	ldr r0, [sp, #0x10]
	smull sl, r5, r3, r5
	str r0, [sp, #0x7c]
	smull r3, r0, r2, lr
	adc r4, r4, #0
	lsr r8, r8, #0xc
	orr r8, r8, r4, lsl #20
	adds r3, r3, sb
	smull lr, r2, ip, lr
	str r8, [sp, #0x54]
	adc r0, r0, #0
	adds r8, sl, sb
	adc r4, r5, #0
	adds r5, lr, sb
	lsr sb, r3, #0xc
	orr sb, sb, r0, lsl #20
	lsr r8, r8, #0xc
	orr r8, r8, r4, lsl #20
	ldr r3, [sp, #0x14]
	adc r0, r2, #0
	lsr r5, r5, #0xc
	orr r5, r5, r0, lsl #20
	mov r4, #0x1000
	ldr r2, _0209AFB8 @ =0x04000454
	str sb, [sp, #0x60]
	str r8, [sp, #0x58]
	add r0, sp, #0x54
	str r5, [sp, #0x64]
	str r1, [sp, #0x6c]
	str r1, [sp, #0x70]
	str r1, [sp, #0x5c]
	str r1, [sp, #0x68]
	str r4, [sp, #0x74]
	str r3, [sp, #0x80]
	str r1, [r2]
	bl FUN_020CF52C
	b _0209AF3C
_0209AC90:
	ldr r3, [r6, #8]
	ldr r1, [r6, #0x38]
	ldr r0, [r2, #4]
	add r1, r3, r1
	sub r0, r1, r0
	str r0, [sp, #0xc]
	ldr r0, [r7, #0x40]
	ldr r2, [r6, #0xc]
	ldr r0, [r0, #0x20]
	ldr r1, [r6, #0x3c]
	ldr r0, [r0]
	add r1, r2, r1
	ldr r0, [r0, #8]
	add sb, sp, #0x18
	sub r0, r1, r0
	str r0, [sp, #0x10]
	ldr r0, [r7, #0x40]
	ldr r2, [r6, #0x10]
	ldr r0, [r0, #0x20]
	ldr r1, [r6, #0x40]
	ldr r0, [r0]
	add r2, r2, r1
	ldr r1, [r0, #0xc]
	add r0, r6, #0x14
	sub r1, r2, r1
	str r1, [sp, #0x14]
	ldm r0, {r0, r1, r2}
	stm sb, {r0, r1, r2}
	ldr r0, [r8, #8]
	add r1, sp, #0x24
	str r0, [sp, #0x24]
	ldr r2, [r8, #0x14]
	mov r0, sb
	str r2, [sp, #0x28]
	ldr r3, [r8, #0x20]
	mov r2, sb
	str r3, [sp, #0x2c]
	bl FUN_020CCE94
	ldr r0, [sp, #0x18]
	cmp r0, #0
	bne _0209AD54
	ldr r0, [sp, #0x1c]
	cmp r0, #0
	bne _0209AD54
	ldr r0, [sp, #0x20]
	cmp r0, #0
	addeq sp, sp, #0x88
	popeq {r4, r5, r6, r7, r8, sb, sl, lr}
	bxeq lr
_0209AD54:
	add r0, sp, #0x18
	mov r1, r0
	bl FUN_020CCFE0
	add r1, sp, #0x30
	mov r0, r8
	bl FUN_020D4928
	add r0, sp, #0x18
	add r1, sp, #0x30
	mov r2, r0
	bl FUN_020CB630
	add r0, sp, #0xc
	mov r1, r8
	mov r2, r0
	bl FUN_020CBE9C
	add r0, r6, #0x14
	add r3, sp, #0
	ldm r0, {r0, r1, r2}
	stm r3, {r0, r1, r2}
	mov r0, r3
	mov r1, r3
	bl FUN_020CCFE0
	ldr r0, [r8, #0x20]
	ldr r1, [sp, #8]
	rsb r0, r0, #0
	smull r3, r0, r1, r0
	mov r2, #0x800
	adds r1, r3, r2
	ldr r3, [r8, #0x14]
	adc r0, r0, #0
	lsr r1, r1, #0xc
	orr r1, r1, r0, lsl #20
	ldr r0, [r8, #8]
	ldr sb, [sp]
	rsb r0, r0, #0
	smull r8, r0, sb, r0
	adds sb, r8, r2
	adc r8, r0, #0
	lsr r0, sb, #0xc
	orr r0, r0, r8, lsl #20
	ldr r8, [sp, #4]
	rsb r3, r3, #0
	smull sb, r3, r8, r3
	adds r8, sb, r2
	adc r2, r3, #0
	lsr r3, r8, #0xc
	orr r3, r3, r2, lsl #20
	add r0, r0, r3
	adds r1, r1, r0
	ldr r0, [r7, #0x40]
	rsbmi r1, r1, #0
	ldr r0, [r0, #0x20]
	rsb r2, r1, #0x1000
	ldr r0, [r0]
	mov sb, #0x800
	ldr r0, [r0, #0x48]
	ldr lr, [sp, #0x18]
	lsl r0, r0, #8
	lsr r0, r0, #0x10
	smull r8, r0, r2, r0
	adds r2, r8, sb
	adc r0, r0, #0
	mov r1, #0
	lsr r2, r2, #0xc
	orr r2, r2, r0, lsl #20
	add r0, r2, #0x1000
	smull r2, r0, r4, r0
	adds r2, r2, sb
	adc r0, r0, #0
	lsr r8, r2, #0xc
	orr r8, r8, r0, lsl #20
	smull r0, r4, lr, r5
	adds ip, r0, sb
	ldr r3, [sp, #0x1c]
	ldr r0, [sp, #0xc]
	rsb r2, r3, #0
	str r0, [sp, #0x78]
	ldr r0, [sp, #0x10]
	smull sl, r5, r3, r5
	str r0, [sp, #0x7c]
	smull r3, r0, r2, r8
	adc r4, r4, #0
	lsr ip, ip, #0xc
	adds r3, r3, sb
	orr ip, ip, r4, lsl #20
	adc r0, r0, #0
	adds sl, sl, sb
	smull r8, r2, lr, r8
	adc r4, r5, #0
	adds r5, r8, sb
	lsr sb, r3, #0xc
	orr sb, sb, r0, lsl #20
	lsr r8, sl, #0xc
	orr r8, r8, r4, lsl #20
	ldr r3, [sp, #0x14]
	adc r0, r2, #0
	lsr r2, r5, #0xc
	orr r2, r2, r0, lsl #20
	mov r4, #0x1000
	ldr r0, _0209AFB8 @ =0x04000454
	str ip, [sp, #0x54]
	str sb, [sp, #0x60]
	str r8, [sp, #0x58]
	str r1, [sp, #0x6c]
	str r2, [sp, #0x64]
	str r1, [sp, #0x70]
	str r1, [sp, #0x5c]
	str r1, [sp, #0x68]
	str r4, [sp, #0x74]
	str r3, [sp, #0x80]
	str r1, [r0]
	ldr r0, [r7, #0x40]
	ldr r1, _0209AFBC @ =0x04000470
	ldr r2, [r0, #0x20]
	add r0, sp, #0x54
	ldr r2, [r2]
	ldr r4, [r2, #0xc]
	ldr r3, [r2, #8]
	ldr r2, [r2, #4]
	str r2, [r1]
	str r3, [r1]
	str r4, [r1]
	bl FUN_020CF52C
_0209AF3C:
	ldr r0, [r7, #0x40]
	ldrh r4, [r6, #0x36]
	ldrh r5, [r0, #0x72]
	mov r2, #0
	and r1, r4, #0x1f
	and r0, r5, #0x1f
	mul r3, r1, r0
	and r1, r4, #0x3e0
	and r0, r5, #0x3e0
	mul r0, r1, r0
	and r4, r4, #0x7c00
	and r1, r5, #0x7c00
	mul r5, r4, r1
	asr r1, r3, #5
	asr r0, r0, #0xf
	asr r3, r5, #0x19
	orr r0, r1, r0, lsl #5
	orr r0, r0, r3, lsl #10
	lsl r0, r0, #0x10
	ldr r1, _0209AFC0 @ =0x04000480
	lsr r0, r0, #0x10
	str r0, [r1]
	ldr r1, [r7, #0x40]
	mov r3, r2
	ldrsh r0, [r1, #0x7c]
	ldrsh r1, [r1, #0x7e]
	bl FUN_0209C0F4
	add sp, sp, #0x88
	pop {r4, r5, r6, r7, r8, sb, sl, lr}
	bx lr
	.align 2, 0
_0209AFB4: .4byte 0x040004A4
_0209AFB8: .4byte 0x04000454
_0209AFBC: .4byte 0x04000470
_0209AFC0: .4byte 0x04000480
	arm_func_end FUN_0209A8E4

	arm_func_start FUN_0209AFC4
FUN_0209AFC4: @ 0x0209AFC4
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0x88
	mov r6, r1
	ldrh r1, [r6, #0x2e]
	mov r7, r0
	ldr r4, [r7, #0x40]
	lsl r0, r1, #0x16
	lsl r2, r1, #0x1b
	lsr r0, r0, #0x1b
	lsr r2, r2, #0x1b
	add r0, r0, #1
	mul r3, r2, r0
	ldr r2, [r4, #0x20]
	asrs r3, r3, #5
	ldr r0, [r7, #0x3c]
	ldr r4, [r2]
	lsl r1, r1, #0x10
	lsr r2, r1, #0x1a
	orr r1, r0, #0xc0
	orr r2, r1, r2, lsl #24
	ldrsh r0, [r4, #0x30]
	ldr r8, [r7, #0x44]
	ldr r1, _0209B69C @ =0x040004A4
	orr r2, r2, r3, lsl #16
	str r2, [r1]
	addeq sp, sp, #0x88
	ldr r1, [r1]
	popeq {r4, r5, r6, r7, r8, sb, sl, lr}
	bxeq lr
	ldr r4, [r6, #0x30]
	ldr r1, [r7, #0x40]
	smull r2, r5, r4, r0
	ldr r0, [r1, #0x20]
	mov r3, #0x800
	adds r1, r2, r3
	ldr r2, [r0]
	adc sb, r5, #0
	ldr r0, [r2, #0x48]
	lsr r5, r1, #0xc
	lsl r0, r0, #1
	asr r1, r4, #0x1f
	orr r5, r5, sb, lsl #20
	lsrs r0, r0, #0x1d
	mov sb, #0
	beq _0209B08C
	cmp r0, #1
	beq _0209B0C8
	cmp r0, #2
	beq _0209B0E4
	b _0209B108
_0209B08C:
	ldrsh r0, [r6, #0x34]
	asr lr, r0, #0x1f
	umull ip, sl, r4, r0
	mla sl, r4, lr, sl
	smull lr, r4, r5, r0
	mla sl, r1, r0, sl
	adds r0, lr, r3
	adc lr, r4, sb
	adds r1, ip, r3
	lsr r5, r0, #0xc
	adc r0, sl, sb
	lsr r4, r1, #0xc
	orr r5, r5, lr, lsl #20
	orr r4, r4, r0, lsl #20
	b _0209B108
_0209B0C8:
	ldrsh r0, [r6, #0x34]
	smull r1, r0, r5, r0
	adds r1, r1, r3
	adc r0, r0, sb
	lsr r5, r1, #0xc
	orr r5, r5, r0, lsl #20
	b _0209B108
_0209B0E4:
	ldrsh sl, [r6, #0x34]
	asr r0, sl, #0x1f
	umull lr, ip, r4, sl
	mla ip, r4, r0, ip
	adds r3, lr, r3
	mla ip, r1, sl, ip
	adc r0, ip, sb
	lsr r4, r3, #0xc
	orr r4, r4, r0, lsl #20
_0209B108:
	ldr r0, [r2]
	lsl r0, r0, #8
	lsrs r0, r0, #0x1f
	bne _0209B370
	ldr r1, [r6, #8]
	ldr r0, [r6, #0x38]
	add sb, sp, #0x18
	add r0, r1, r0
	str r0, [sp, #0xc]
	ldr r2, [r6, #0xc]
	ldr r1, [r6, #0x3c]
	add r0, r6, #0x14
	add r1, r2, r1
	str r1, [sp, #0x10]
	ldr r2, [r6, #0x10]
	ldr r1, [r6, #0x40]
	add r1, r2, r1
	str r1, [sp, #0x14]
	ldm r0, {r0, r1, r2}
	stm sb, {r0, r1, r2}
	ldr r0, [r8, #8]
	add r1, sp, #0x24
	str r0, [sp, #0x24]
	ldr r2, [r8, #0x14]
	mov r0, sb
	str r2, [sp, #0x28]
	ldr r3, [r8, #0x20]
	mov r2, sb
	str r3, [sp, #0x2c]
	bl FUN_020CCE94
	ldr r0, [sp, #0x18]
	cmp r0, #0
	bne _0209B1AC
	ldr r0, [sp, #0x1c]
	cmp r0, #0
	bne _0209B1AC
	ldr r0, [sp, #0x20]
	cmp r0, #0
	addeq sp, sp, #0x88
	popeq {r4, r5, r6, r7, r8, sb, sl, lr}
	bxeq lr
_0209B1AC:
	add r0, sp, #0x18
	mov r1, r0
	bl FUN_020CCFE0
	add r1, sp, #0x30
	mov r0, r8
	bl FUN_020D4928
	add r0, sp, #0x18
	add r1, sp, #0x30
	mov r2, r0
	bl FUN_020CB630
	add r0, sp, #0xc
	mov r1, r8
	mov r2, r0
	bl FUN_020CBE9C
	add r0, r6, #0x14
	add r3, sp, #0
	ldm r0, {r0, r1, r2}
	stm r3, {r0, r1, r2}
	mov r0, r3
	mov r1, r3
	bl FUN_020CCFE0
	ldr r0, [r8, #0x20]
	ldr r1, [sp, #8]
	rsb r0, r0, #0
	smull r3, r0, r1, r0
	mov r2, #0x800
	adds r1, r3, r2
	ldr r3, [r8, #0x14]
	adc r0, r0, #0
	lsr r1, r1, #0xc
	orr r1, r1, r0, lsl #20
	ldr r0, [r8, #8]
	ldr sb, [sp]
	rsb r0, r0, #0
	smull r8, r0, sb, r0
	adds sb, r8, r2
	adc r8, r0, #0
	lsr r0, sb, #0xc
	orr r0, r0, r8, lsl #20
	ldr r8, [sp, #4]
	rsb r3, r3, #0
	smull sb, r3, r8, r3
	adds r8, sb, r2
	adc r2, r3, #0
	lsr r3, r8, #0xc
	orr r3, r3, r2, lsl #20
	add r0, r0, r3
	adds r1, r1, r0
	ldr r0, [r7, #0x40]
	rsbmi r1, r1, #0
	ldr r0, [r0, #0x20]
	rsb r2, r1, #0x1000
	ldr r0, [r0]
	mov sb, #0x800
	ldr r0, [r0, #0x48]
	ldr ip, [sp, #0x18]
	lsl r0, r0, #8
	lsr r0, r0, #0x10
	smull r8, r0, r2, r0
	adds r2, r8, sb
	adc r0, r0, #0
	mov r1, #0
	lsr r2, r2, #0xc
	orr r2, r2, r0, lsl #20
	add r0, r2, #0x1000
	smull r2, r0, r4, r0
	adds r2, r2, sb
	adc r0, r0, #0
	lsr lr, r2, #0xc
	orr lr, lr, r0, lsl #20
	smull r0, r4, ip, r5
	adds r8, r0, sb
	ldr r3, [sp, #0x1c]
	ldr r0, [sp, #0xc]
	rsb r2, r3, #0
	str r0, [sp, #0x78]
	ldr r0, [sp, #0x10]
	smull sl, r5, r3, r5
	str r0, [sp, #0x7c]
	smull r3, r0, r2, lr
	adc r4, r4, #0
	lsr r8, r8, #0xc
	orr r8, r8, r4, lsl #20
	adds r3, r3, sb
	smull lr, r2, ip, lr
	str r8, [sp, #0x54]
	adc r0, r0, #0
	adds r8, sl, sb
	adc r4, r5, #0
	adds r5, lr, sb
	lsr sb, r3, #0xc
	orr sb, sb, r0, lsl #20
	lsr r8, r8, #0xc
	orr r8, r8, r4, lsl #20
	ldr r3, [sp, #0x14]
	adc r0, r2, #0
	lsr r5, r5, #0xc
	orr r5, r5, r0, lsl #20
	mov r4, #0x1000
	ldr r2, _0209B6A0 @ =0x04000454
	str sb, [sp, #0x60]
	str r8, [sp, #0x58]
	add r0, sp, #0x54
	str r5, [sp, #0x64]
	str r1, [sp, #0x6c]
	str r1, [sp, #0x70]
	str r1, [sp, #0x5c]
	str r1, [sp, #0x68]
	str r4, [sp, #0x74]
	str r3, [sp, #0x80]
	str r1, [r2]
	bl FUN_020CF52C
	b _0209B61C
_0209B370:
	ldr r3, [r6, #8]
	ldr r1, [r6, #0x38]
	ldr r0, [r2, #4]
	add r1, r3, r1
	sub r0, r1, r0
	str r0, [sp, #0xc]
	ldr r0, [r7, #0x40]
	ldr r2, [r6, #0xc]
	ldr r0, [r0, #0x20]
	ldr r1, [r6, #0x3c]
	ldr r0, [r0]
	add r1, r2, r1
	ldr r0, [r0, #8]
	add sb, sp, #0x18
	sub r0, r1, r0
	str r0, [sp, #0x10]
	ldr r0, [r7, #0x40]
	ldr r2, [r6, #0x10]
	ldr r0, [r0, #0x20]
	ldr r1, [r6, #0x40]
	ldr r0, [r0]
	add r2, r2, r1
	ldr r1, [r0, #0xc]
	add r0, r6, #0x14
	sub r1, r2, r1
	str r1, [sp, #0x14]
	ldm r0, {r0, r1, r2}
	stm sb, {r0, r1, r2}
	ldr r0, [r8, #8]
	add r1, sp, #0x24
	str r0, [sp, #0x24]
	ldr r2, [r8, #0x14]
	mov r0, sb
	str r2, [sp, #0x28]
	ldr r3, [r8, #0x20]
	mov r2, sb
	str r3, [sp, #0x2c]
	bl FUN_020CCE94
	ldr r0, [sp, #0x18]
	cmp r0, #0
	bne _0209B434
	ldr r0, [sp, #0x1c]
	cmp r0, #0
	bne _0209B434
	ldr r0, [sp, #0x20]
	cmp r0, #0
	addeq sp, sp, #0x88
	popeq {r4, r5, r6, r7, r8, sb, sl, lr}
	bxeq lr
_0209B434:
	add r0, sp, #0x18
	mov r1, r0
	bl FUN_020CCFE0
	add r1, sp, #0x30
	mov r0, r8
	bl FUN_020D4928
	add r0, sp, #0x18
	add r1, sp, #0x30
	mov r2, r0
	bl FUN_020CB630
	add r0, sp, #0xc
	mov r1, r8
	mov r2, r0
	bl FUN_020CBE9C
	add r0, r6, #0x14
	add r3, sp, #0
	ldm r0, {r0, r1, r2}
	stm r3, {r0, r1, r2}
	mov r0, r3
	mov r1, r3
	bl FUN_020CCFE0
	ldr r0, [r8, #0x20]
	ldr r1, [sp, #8]
	rsb r0, r0, #0
	smull r3, r0, r1, r0
	mov r2, #0x800
	adds r1, r3, r2
	ldr r3, [r8, #0x14]
	adc r0, r0, #0
	lsr r1, r1, #0xc
	orr r1, r1, r0, lsl #20
	ldr r0, [r8, #8]
	ldr sb, [sp]
	rsb r0, r0, #0
	smull r8, r0, sb, r0
	adds sb, r8, r2
	adc r8, r0, #0
	lsr r0, sb, #0xc
	orr r0, r0, r8, lsl #20
	ldr r8, [sp, #4]
	rsb r3, r3, #0
	smull sb, r3, r8, r3
	adds r8, sb, r2
	adc r2, r3, #0
	lsr r3, r8, #0xc
	orr r3, r3, r2, lsl #20
	add r0, r0, r3
	adds r1, r1, r0
	ldr r0, [r7, #0x40]
	rsbmi r1, r1, #0
	ldr r0, [r0, #0x20]
	rsb r2, r1, #0x1000
	ldr r0, [r0]
	mov sb, #0x800
	ldr r0, [r0, #0x48]
	ldr lr, [sp, #0x18]
	lsl r0, r0, #8
	lsr r0, r0, #0x10
	smull r8, r0, r2, r0
	adds r2, r8, sb
	adc r0, r0, #0
	mov r1, #0
	lsr r2, r2, #0xc
	orr r2, r2, r0, lsl #20
	add r0, r2, #0x1000
	smull r2, r0, r4, r0
	adds r2, r2, sb
	adc r0, r0, #0
	lsr r8, r2, #0xc
	orr r8, r8, r0, lsl #20
	smull r0, r4, lr, r5
	adds ip, r0, sb
	ldr r3, [sp, #0x1c]
	ldr r0, [sp, #0xc]
	rsb r2, r3, #0
	str r0, [sp, #0x78]
	ldr r0, [sp, #0x10]
	smull sl, r5, r3, r5
	str r0, [sp, #0x7c]
	smull r3, r0, r2, r8
	adc r4, r4, #0
	lsr ip, ip, #0xc
	adds r3, r3, sb
	orr ip, ip, r4, lsl #20
	adc r0, r0, #0
	adds sl, sl, sb
	smull r8, r2, lr, r8
	adc r4, r5, #0
	adds r5, r8, sb
	lsr sb, r3, #0xc
	orr sb, sb, r0, lsl #20
	lsr r8, sl, #0xc
	orr r8, r8, r4, lsl #20
	ldr r3, [sp, #0x14]
	adc r0, r2, #0
	lsr r2, r5, #0xc
	orr r2, r2, r0, lsl #20
	mov r4, #0x1000
	ldr r0, _0209B6A0 @ =0x04000454
	str ip, [sp, #0x54]
	str sb, [sp, #0x60]
	str r8, [sp, #0x58]
	str r1, [sp, #0x6c]
	str r2, [sp, #0x64]
	str r1, [sp, #0x70]
	str r1, [sp, #0x5c]
	str r1, [sp, #0x68]
	str r4, [sp, #0x74]
	str r3, [sp, #0x80]
	str r1, [r0]
	ldr r0, [r7, #0x40]
	ldr r1, _0209B6A4 @ =0x04000470
	ldr r2, [r0, #0x20]
	add r0, sp, #0x54
	ldr r2, [r2]
	ldr r4, [r2, #0xc]
	ldr r3, [r2, #8]
	ldr r2, [r2, #4]
	str r2, [r1]
	str r3, [r1]
	str r4, [r1]
	bl FUN_020CF52C
_0209B61C:
	ldr r0, [r7, #0x40]
	ldrh r4, [r6, #0x36]
	ldrh r5, [r0, #0x72]
	ldr r1, _0209B6A8 @ =0x04000480
	and r2, r4, #0x1f
	and r0, r5, #0x1f
	mul r3, r2, r0
	and r2, r4, #0x3e0
	and r0, r5, #0x3e0
	mul r0, r2, r0
	and r4, r4, #0x7c00
	and r2, r5, #0x7c00
	mul r5, r4, r2
	asr r2, r3, #5
	asr r0, r0, #0xf
	asr r3, r5, #0x19
	orr r0, r2, r0, lsl #5
	orr r0, r0, r3, lsl #10
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	str r0, [r1]
	ldr r2, [r7, #0x40]
	ldr r1, [r2, #0x20]
	ldrsh r0, [r2, #0x78]
	ldr r3, [r1]
	ldrsh r1, [r2, #0x7a]
	ldrsh r2, [r3, #0x50]
	ldrsh r3, [r3, #0x52]
	bl FUN_0209C0F4
	add sp, sp, #0x88
	pop {r4, r5, r6, r7, r8, sb, sl, lr}
	bx lr
	.align 2, 0
_0209B69C: .4byte 0x040004A4
_0209B6A0: .4byte 0x04000454
_0209B6A4: .4byte 0x04000470
_0209B6A8: .4byte 0x04000480
	arm_func_end FUN_0209AFC4

	arm_func_start FUN_0209B6AC
FUN_0209B6AC: @ 0x0209B6AC
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0x40
	mov r6, r1
	ldrh r1, [r6, #0x2e]
	mov r7, r0
	ldr r4, [r7, #0x40]
	lsl r0, r1, #0x16
	lsl r2, r1, #0x1b
	lsr r0, r0, #0x1b
	lsr r2, r2, #0x1b
	add r0, r0, #1
	mul r3, r2, r0
	ldr r2, [r4, #0x20]
	ldr r0, [r7, #0x3c]
	ldr r4, [r2]
	lsl r1, r1, #0x10
	lsr r2, r1, #0x1a
	orr r1, r0, #0xc0
	ldrsh r0, [r4, #0x30]
	asrs r4, r3, #5
	orr r3, r1, r2, lsl #24
	ldr r1, [r7, #0x44]
	ldr r2, _0209BAEC @ =0x040004A4
	orr r3, r3, r4, lsl #16
	str r3, [r2]
	addeq sp, sp, #0x40
	ldr r2, [r2]
	popeq {r4, r5, r6, r7, r8, sb, sl, lr}
	bxeq lr
	ldr r4, [r6, #0x30]
	ldr r2, [r7, #0x40]
	smull r3, r5, r4, r0
	ldr r0, [r2, #0x20]
	mov r8, #0x800
	adds r2, r3, r8
	ldr r3, [r0]
	adc sb, r5, #0
	ldr r0, [r3, #0x48]
	lsr r5, r2, #0xc
	lsl r0, r0, #1
	asr r2, r4, #0x1f
	orr r5, r5, sb, lsl #20
	lsrs r0, r0, #0x1d
	mov sb, #0
	beq _0209B774
	cmp r0, #1
	beq _0209B7B0
	cmp r0, #2
	beq _0209B7CC
	b _0209B7F0
_0209B774:
	ldrsh r0, [r6, #0x34]
	asr lr, r0, #0x1f
	umull ip, sl, r4, r0
	mla sl, r4, lr, sl
	smull lr, r4, r5, r0
	mla sl, r2, r0, sl
	adds r0, lr, r8
	adc lr, r4, sb
	adds r2, ip, r8
	lsr r5, r0, #0xc
	adc r0, sl, sb
	lsr r4, r2, #0xc
	orr r5, r5, lr, lsl #20
	orr r4, r4, r0, lsl #20
	b _0209B7F0
_0209B7B0:
	ldrsh r0, [r6, #0x34]
	smull r2, r0, r5, r0
	adds r2, r2, r8
	adc r0, r0, sb
	lsr r5, r2, #0xc
	orr r5, r5, r0, lsl #20
	b _0209B7F0
_0209B7CC:
	ldrsh sl, [r6, #0x34]
	asr r0, sl, #0x1f
	umull lr, ip, r4, sl
	mla ip, r4, r0, ip
	adds r4, lr, r8
	mla ip, r2, sl, ip
	adc r0, ip, sb
	lsr r4, r4, #0xc
	orr r4, r4, r0, lsl #20
_0209B7F0:
	ldr r0, [r3]
	lsl r0, r0, #8
	lsrs r0, r0, #0x1f
	bne _0209B910
	ldr r3, [r6, #8]
	ldr r2, [r6, #0x38]
	add r0, sp, #0
	add r2, r3, r2
	str r2, [sp]
	ldr r8, [r6, #0xc]
	ldr r3, [r6, #0x3c]
	mov r2, r0
	add r3, r8, r3
	str r3, [sp, #4]
	ldr r8, [r6, #0x10]
	ldr r3, [r6, #0x40]
	add r3, r8, r3
	str r3, [sp, #8]
	bl FUN_020CBE9C
	ldrh r0, [r6, #0x20]
	ldr r2, _0209BAF0 @ =0x021094DC
	mov sb, #0
	asr r0, r0, #4
	lsl r3, r0, #1
	lsl r0, r3, #1
	ldrsh r1, [r2, r0]
	add r0, r3, #1
	lsl r0, r0, #1
	ldrsh r0, [r2, r0]
	mov lr, #0x1000
	ldr r3, [sp]
	ldr r2, [sp, #4]
	str r3, [sp, #0x30]
	smull ip, sl, r1, r5
	str lr, [sp, #0x2c]
	rsb r8, r1, #0
	ldr r1, [sp, #8]
	smull lr, r5, r0, r5
	mov r3, #0x800
	str r2, [sp, #0x34]
	adds r2, lr, r3
	adc r5, r5, #0
	adds ip, ip, r3
	lsr lr, r2, #0xc
	orr lr, lr, r5, lsl #20
	smull r5, r2, r8, r4
	adc sl, sl, #0
	lsr r8, ip, #0xc
	orr r8, r8, sl, lsl #20
	adds r5, r5, r3
	smull sl, r4, r0, r4
	adc r0, r2, #0
	adds r2, sl, r3
	lsr r5, r5, #0xc
	orr r5, r5, r0, lsl #20
	lsr r3, r2, #0xc
	adc r0, r4, #0
	orr r3, r3, r0, lsl #20
	ldr r2, _0209BAF4 @ =0x04000454
	str lr, [sp, #0xc]
	add r0, sp, #0xc
	str r8, [sp, #0x10]
	str sb, [sp, #0x14]
	str r5, [sp, #0x18]
	str r3, [sp, #0x1c]
	str sb, [sp, #0x20]
	str sb, [sp, #0x24]
	str sb, [sp, #0x28]
	str r1, [sp, #0x38]
	str sb, [r2]
	bl FUN_020CF52C
	b _0209BA74
_0209B910:
	ldr r8, [r6, #8]
	ldr r2, [r6, #0x38]
	ldr r0, [r3, #4]
	add r2, r8, r2
	sub r0, r2, r0
	str r0, [sp]
	ldr r2, [r7, #0x40]
	ldr r8, [r6, #0xc]
	ldr r2, [r2, #0x20]
	ldr r3, [r6, #0x3c]
	ldr r2, [r2]
	add r3, r8, r3
	ldr r2, [r2, #8]
	add r0, sp, #0
	sub r2, r3, r2
	str r2, [sp, #4]
	ldr r2, [r7, #0x40]
	ldr r8, [r6, #0x10]
	ldr r2, [r2, #0x20]
	ldr r3, [r6, #0x40]
	ldr r2, [r2]
	add r8, r8, r3
	ldr r3, [r2, #0xc]
	mov r2, r0
	sub r3, r8, r3
	str r3, [sp, #8]
	bl FUN_020CBE9C
	ldrh r0, [r6, #0x20]
	ldr r2, _0209BAF0 @ =0x021094DC
	mov lr, #0
	asr r0, r0, #4
	lsl r3, r0, #1
	lsl r0, r3, #1
	ldrsh r1, [r2, r0]
	add r0, r3, #1
	lsl r0, r0, #1
	ldrsh r0, [r2, r0]
	mov sl, #0x1000
	ldr r3, [sp]
	ldr r2, [sp, #4]
	str r3, [sp, #0x30]
	smull sb, r8, r1, r5
	str sl, [sp, #0x2c]
	rsb ip, r1, #0
	smull sl, r5, r0, r5
	ldr r1, [sp, #8]
	mov r3, #0x800
	str r2, [sp, #0x34]
	adds r2, sl, r3
	adc r5, r5, #0
	lsr sl, r2, #0xc
	orr sl, sl, r5, lsl #20
	str r1, [sp, #0x38]
	adds sb, sb, r3
	str sl, [sp, #0xc]
	adc sl, r8, #0
	smull r5, r2, ip, r4
	lsr r8, sb, #0xc
	orr r8, r8, sl, lsl #20
	smull sb, r4, r0, r4
	adds r5, r5, r3
	adc r0, r2, #0
	adds r2, sb, r3
	lsr r3, r5, #0xc
	orr r3, r3, r0, lsl #20
	adc r0, r4, #0
	lsr r2, r2, #0xc
	orr r2, r2, r0, lsl #20
	ldr r0, _0209BAF4 @ =0x04000454
	str r8, [sp, #0x10]
	str lr, [sp, #0x14]
	str r3, [sp, #0x18]
	str r2, [sp, #0x1c]
	str lr, [sp, #0x20]
	str lr, [sp, #0x24]
	str lr, [sp, #0x28]
	str lr, [r0]
	ldr r0, [r7, #0x40]
	ldr r1, _0209BAF8 @ =0x04000470
	ldr r2, [r0, #0x20]
	add r0, sp, #0xc
	ldr r2, [r2]
	ldr r4, [r2, #0xc]
	ldr r3, [r2, #8]
	ldr r2, [r2, #4]
	str r2, [r1]
	str r3, [r1]
	str r4, [r1]
	bl FUN_020CF52C
_0209BA74:
	ldr r0, [r7, #0x40]
	ldrh r4, [r6, #0x36]
	ldrh r5, [r0, #0x72]
	mov r2, #0
	and r1, r4, #0x1f
	and r0, r5, #0x1f
	mul r3, r1, r0
	and r1, r4, #0x3e0
	and r0, r5, #0x3e0
	mul r0, r1, r0
	and r4, r4, #0x7c00
	and r1, r5, #0x7c00
	mul r5, r4, r1
	asr r1, r3, #5
	asr r0, r0, #0xf
	asr r3, r5, #0x19
	orr r0, r1, r0, lsl #5
	orr r0, r0, r3, lsl #10
	lsl r0, r0, #0x10
	ldr r1, _0209BAFC @ =0x04000480
	lsr r0, r0, #0x10
	str r0, [r1]
	ldr r1, [r7, #0x40]
	mov r3, r2
	ldrsh r0, [r1, #0x7c]
	ldrsh r1, [r1, #0x7e]
	bl FUN_0209C0F4
	add sp, sp, #0x40
	pop {r4, r5, r6, r7, r8, sb, sl, lr}
	bx lr
	.align 2, 0
_0209BAEC: .4byte 0x040004A4
_0209BAF0: .4byte 0x021094DC
_0209BAF4: .4byte 0x04000454
_0209BAF8: .4byte 0x04000470
_0209BAFC: .4byte 0x04000480
	arm_func_end FUN_0209B6AC

	arm_func_start FUN_0209BB00
FUN_0209BB00: @ 0x0209BB00
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x3c
	mov r8, r1
	ldrh r3, [r8, #0x2e]
	mov sb, r0
	ldr r1, [sb, #0x40]
	lsl r0, r3, #0x16
	lsl r2, r3, #0x1b
	lsr r0, r0, #0x1b
	ldr r4, [r1, #0x20]
	lsr r2, r2, #0x1b
	ldr r5, [r4]
	add r0, r0, #1
	mul r0, r2, r0
	asrs fp, r0, #5
	lsl r3, r3, #0x10
	ldr r2, [sb, #0x3c]
	lsr r6, r3, #0x1a
	orr r3, r2, #0xc0
	ldr r4, [r5, #0x48]
	ldrsh r7, [r5, #0x30]
	lsl r2, r4, #1
	ldrh r4, [r1, #0x72]
	orr r3, r3, r6, lsl #24
	ldrsh sl, [r8, #0x34]
	ldrh r5, [r8, #0x36]
	ldr r1, [sb, #0x44]
	ldr r0, _0209BF38 @ =0x040004A4
	orr r3, r3, fp, lsl #16
	str r3, [r0]
	lsr r2, r2, #0x1d
	addeq sp, sp, #0x3c
	and r3, r2, #0xff
	ldr r0, [r0]
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	bxeq lr
	ldr r6, [r8, #0x30]
	mov r0, #0x800
	smull r7, r2, r6, r7
	adds r7, r7, r0
	adc r2, r2, #0
	lsr r7, r7, #0xc
	cmp r3, #0
	asr lr, r6, #0x1f
	orr r7, r7, r2, lsl #20
	mov r2, #0
	bne _0209BBF4
	asr ip, sl, #0x1f
	umull fp, r3, r6, sl
	mla r3, r6, ip, r3
	mla r3, lr, sl, r3
	smull r6, sl, r7, sl
	adds r6, r6, r0
	adc sl, sl, r2
	adds fp, fp, r0
	adc r0, r3, r2
	lsr r7, r6, #0xc
	lsr r6, fp, #0xc
	orr r7, r7, sl, lsl #20
	orr r6, r6, r0, lsl #20
	b _0209BC34
_0209BBF4:
	cmp r3, #1
	bne _0209BC14
	smull sl, r3, r7, sl
	adds r7, sl, r0
	adc r0, r3, r2
	lsr r7, r7, #0xc
	orr r7, r7, r0, lsl #20
	b _0209BC34
_0209BC14:
	asr ip, sl, #0x1f
	umull fp, r3, r6, sl
	adds r0, fp, r0
	mla r3, r6, ip, r3
	mla r3, lr, sl, r3
	adc r2, r3, r2
	lsr r6, r0, #0xc
	orr r6, r6, r2, lsl #20
_0209BC34:
	ldr r0, [sb, #0x40]
	ldr r0, [r0, #0x20]
	ldr sl, [r0]
	ldr r0, [sl]
	lsl r0, r0, #8
	lsrs r0, r0, #0x1f
	bne _0209BD60
	ldr r3, [r8, #8]
	ldr r2, [r8, #0x38]
	add r0, sp, #0
	add r2, r3, r2
	str r2, [sp]
	ldr sl, [r8, #0xc]
	ldr r3, [r8, #0x3c]
	mov r2, r0
	add r3, sl, r3
	str r3, [sp, #4]
	ldr sl, [r8, #0x10]
	ldr r3, [r8, #0x40]
	add r3, sl, r3
	str r3, [sp, #8]
	bl FUN_020CBE9C
	ldrh r0, [r8, #0x20]
	ldr r2, _0209BF3C @ =0x021094DC
	ldr ip, [sp]
	asr r0, r0, #4
	lsl r3, r0, #1
	lsl r0, r3, #1
	ldrsh r1, [r2, r0]
	add r0, r3, #1
	lsl r0, r0, #1
	ldrsh r0, [r2, r0]
	str ip, [sp, #0x30]
	mov ip, #0x1000
	ldr r2, [sp, #4]
	smull fp, sl, r1, r7
	str ip, [sp, #0x2c]
	rsb r3, r1, #0
	ldr r1, [sp, #8]
	str r2, [sp, #0x34]
	mov r8, #0
	smull ip, r7, r0, r7
	mov r2, #0x800
	str r1, [sp, #0x38]
	adds r1, ip, r2
	adc ip, r7, #0
	adds r7, fp, r2
	lsr fp, r1, #0xc
	orr fp, fp, ip, lsl #20
	smull ip, r1, r3, r6
	adc sl, sl, #0
	lsr r7, r7, #0xc
	orr r7, r7, sl, lsl #20
	adds r3, ip, r2
	smull sl, r6, r0, r6
	adc r0, r1, #0
	adds r1, sl, r2
	lsr r3, r3, #0xc
	orr r3, r3, r0, lsl #20
	lsr r2, r1, #0xc
	adc r0, r6, #0
	orr r2, r2, r0, lsl #20
	ldr r1, _0209BF40 @ =0x04000454
	str fp, [sp, #0xc]
	add r0, sp, #0xc
	str r7, [sp, #0x10]
	str r8, [sp, #0x14]
	str r3, [sp, #0x18]
	str r2, [sp, #0x1c]
	str r8, [sp, #0x20]
	str r8, [sp, #0x24]
	str r8, [sp, #0x28]
	str r8, [r1]
	bl FUN_020CF52C
	b _0209BEC4
_0209BD60:
	ldr r3, [r8, #8]
	ldr r2, [r8, #0x38]
	ldr r0, [sl, #4]
	add r2, r3, r2
	sub r0, r2, r0
	str r0, [sp]
	ldr r2, [sb, #0x40]
	ldr sl, [r8, #0xc]
	ldr r2, [r2, #0x20]
	ldr r3, [r8, #0x3c]
	ldr r2, [r2]
	add r3, sl, r3
	ldr r2, [r2, #8]
	add r0, sp, #0
	sub r2, r3, r2
	str r2, [sp, #4]
	ldr r2, [sb, #0x40]
	ldr sl, [r8, #0x10]
	ldr r2, [r2, #0x20]
	ldr r3, [r8, #0x40]
	ldr r2, [r2]
	add sl, sl, r3
	ldr r3, [r2, #0xc]
	mov r2, r0
	sub r3, sl, r3
	str r3, [sp, #8]
	bl FUN_020CBE9C
	ldrh r0, [r8, #0x20]
	ldr r2, _0209BF3C @ =0x021094DC
	mov r8, #0
	asr r0, r0, #4
	lsl r3, r0, #1
	lsl r0, r3, #1
	ldrsh r1, [r2, r0]
	add r0, r3, #1
	lsl r0, r0, #1
	ldrsh r0, [r2, r0]
	ldr ip, [sp]
	ldr r2, [sp, #4]
	str ip, [sp, #0x30]
	mov ip, #0x1000
	str r2, [sp, #0x34]
	smull fp, sl, r1, r7
	str ip, [sp, #0x2c]
	rsb r3, r1, #0
	ldr r1, [sp, #8]
	smull ip, r7, r0, r7
	mov r2, #0x800
	str r1, [sp, #0x38]
	adds r1, ip, r2
	adc ip, r7, #0
	adds r7, fp, r2
	lsr fp, r1, #0xc
	orr fp, fp, ip, lsl #20
	smull ip, r1, r3, r6
	adc sl, sl, #0
	lsr r7, r7, #0xc
	orr r7, r7, sl, lsl #20
	smull sl, r6, r0, r6
	adds r3, ip, r2
	adc r0, r1, #0
	adds r1, sl, r2
	lsr r2, r3, #0xc
	orr r2, r2, r0, lsl #20
	adc r0, r6, #0
	lsr r1, r1, #0xc
	orr r1, r1, r0, lsl #20
	str r1, [sp, #0x1c]
	ldr r0, _0209BF40 @ =0x04000454
	str fp, [sp, #0xc]
	str r7, [sp, #0x10]
	str r8, [sp, #0x14]
	str r2, [sp, #0x18]
	str r8, [sp, #0x20]
	str r8, [sp, #0x24]
	str r8, [sp, #0x28]
	str r8, [r0]
	ldr r0, [sb, #0x40]
	ldr r1, _0209BF44 @ =0x04000470
	ldr r2, [r0, #0x20]
	add r0, sp, #0xc
	ldr r2, [r2]
	ldr r6, [r2, #0xc]
	ldr r3, [r2, #8]
	ldr r2, [r2, #4]
	str r2, [r1]
	str r3, [r1]
	str r6, [r1]
	bl FUN_020CF52C
_0209BEC4:
	and r1, r5, #0x1f
	and r0, r4, #0x1f
	mul r2, r1, r0
	and r1, r5, #0x3e0
	and r0, r4, #0x3e0
	mul r0, r1, r0
	and r3, r5, #0x7c00
	and r1, r4, #0x7c00
	mul r4, r3, r1
	asr r1, r2, #5
	asr r0, r0, #0xf
	asr r2, r4, #0x19
	orr r0, r1, r0, lsl #5
	orr r0, r0, r2, lsl #10
	lsl r0, r0, #0x10
	ldr r1, _0209BF48 @ =0x04000480
	lsr r0, r0, #0x10
	str r0, [r1]
	ldr r2, [sb, #0x40]
	ldr r1, [r2, #0x20]
	ldrsh r0, [r2, #0x78]
	ldr r3, [r1]
	ldrsh r1, [r2, #0x7a]
	ldrsh r2, [r3, #0x50]
	ldrsh r3, [r3, #0x52]
	bl FUN_0209C0F4
	add sp, sp, #0x3c
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	bx lr
	.align 2, 0
_0209BF38: .4byte 0x040004A4
_0209BF3C: .4byte 0x021094DC
_0209BF40: .4byte 0x04000454
_0209BF44: .4byte 0x04000470
_0209BF48: .4byte 0x04000480
	arm_func_end FUN_0209BB00

	arm_func_start FUN_0209BF4C
FUN_0209BF4C: @ 0x0209BF4C
	str r1, [r2]
	mov ip, #0
	str ip, [r2, #0xc]
	str r0, [r2, #0x18]
	str ip, [r2, #0x24]
	str ip, [r2, #4]
	mov r3, #0x1000
	str r3, [r2, #0x10]
	str ip, [r2, #0x1c]
	str ip, [r2, #0x28]
	rsb r0, r0, #0
	str r0, [r2, #8]
	str ip, [r2, #0x14]
	str r1, [r2, #0x20]
	str ip, [r2, #0x2c]
	bx lr
	arm_func_end FUN_0209BF4C

	arm_func_start FUN_0209BF8C
FUN_0209BF8C: @ 0x0209BF8C
	push {r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #4
	ldr r3, _0209C030 @ =0x00000555
	rsb r7, r1, #0x1000
	ldr ip, _0209C034 @ =0x0000093D
	mov r4, #0
	umull sb, r8, r7, r3
	umull r6, r5, r0, ip
	mov lr, #0x800
	adds sb, sb, lr
	mla r8, r7, r4, r8
	asr r7, r7, #0x1f
	mla r8, r7, r3, r8
	adc r7, r8, #0
	lsr r3, sb, #0xc
	adds r6, r6, lr
	orr r3, r3, r7, lsl #20
	add r1, r3, r1
	mla r5, r0, r4, r5
	asr r0, r0, #0x1f
	mla r5, r0, ip, r5
	adc r0, r5, #0
	lsr r5, r6, #0xc
	orr r5, r5, r0, lsl #20
	str r1, [r2]
	add ip, r3, r5
	str ip, [r2, #0xc]
	sub r0, r3, r5
	str r0, [r2, #0x18]
	str r4, [r2, #0x24]
	str r0, [r2, #4]
	str r1, [r2, #0x10]
	str ip, [r2, #0x1c]
	str r4, [r2, #0x28]
	str ip, [r2, #8]
	str r0, [r2, #0x14]
	str r1, [r2, #0x20]
	str r4, [r2, #0x2c]
	add sp, sp, #4
	pop {r4, r5, r6, r7, r8, sb, lr}
	bx lr
	.align 2, 0
_0209C030: .4byte 0x00000555
_0209C034: .4byte 0x0000093D
	arm_func_end FUN_0209BF8C

	arm_func_start FUN_0209C038
FUN_0209C038: @ 0x0209C038
	push {r4, r5, r6, r7, r8, lr}
	sub r7, r2, #0x1000
	add r5, r3, #0x1000
	add r4, r2, #0x1000
	lsl r2, r0, #8
	lsl r0, r1, #8
	sub r3, r3, #0x1000
	lsr r0, r0, #0x10
	lsr r1, r2, #0x10
	ldr ip, _0209C0E0 @ =0x04000500
	mov r8, #1
	ldr r6, _0209C0E4 @ =0x000003FF
	lsl r2, r7, #0x10
	lsl lr, r5, #0x10
	lsl r4, r4, #0x10
	lsl r5, r3, #0x10
	ldr r3, _0209C0E8 @ =0x04000488
	str r8, [ip]
	mov ip, #0
	and r2, r6, r2, asr #22
	and r7, r6, lr, asr #22
	and lr, r6, r4, asr #22
	and r4, r6, r5, asr #22
	ldr r6, _0209C0EC @ =0x04000490
	str ip, [r3]
	orr r5, r2, r7, lsl #20
	str r5, [r6]
	str r1, [r3]
	orr r5, lr, r7, lsl #20
	str r5, [r6]
	orr r1, r1, r0, lsl #16
	str r1, [r3]
	orr r1, lr, r4, lsl #20
	str r1, [r6]
	lsl r0, r0, #0x10
	str r0, [r3]
	orr r1, r2, r4, lsl #20
	ldr r0, _0209C0F0 @ =0x04000504
	str r1, [r6]
	str ip, [r0]
	pop {r4, r5, r6, r7, r8, lr}
	bx lr
	.align 2, 0
_0209C0E0: .4byte 0x04000500
_0209C0E4: .4byte 0x000003FF
_0209C0E8: .4byte 0x04000488
_0209C0EC: .4byte 0x04000490
_0209C0F0: .4byte 0x04000504
	arm_func_end FUN_0209C038

	arm_func_start FUN_0209C0F4
FUN_0209C0F4: @ 0x0209C0F4
	push {r4, r5, r6, r7, r8, lr}
	add ip, r3, #0x1000
	sub r5, r2, #0x1000
	add r4, r2, #0x1000
	lsl r2, r0, #8
	lsl r0, r1, #8
	sub r3, r3, #0x1000
	lsr r0, r0, #0x10
	lsr r1, r2, #0x10
	ldr r7, _0209C19C @ =0x04000500
	mov r8, #1
	ldr r6, _0209C1A0 @ =0x000003FF
	lsl r2, ip, #0x10
	lsl lr, r5, #0x10
	lsl r4, r4, #0x10
	lsl r5, r3, #0x10
	ldr r3, _0209C1A4 @ =0x04000488
	str r8, [r7]
	mov ip, #0
	and r7, r6, r2, asr #22
	and r2, r6, lr, asr #22
	and lr, r6, r4, asr #22
	and r4, r6, r5, asr #22
	ldr r6, _0209C1A8 @ =0x04000490
	str ip, [r3]
	orr r5, r2, r7, lsl #10
	str r5, [r6]
	str r1, [r3]
	orr r5, lr, r7, lsl #10
	str r5, [r6]
	orr r1, r1, r0, lsl #16
	str r1, [r3]
	orr r1, lr, r4, lsl #10
	str r1, [r6]
	lsl r0, r0, #0x10
	str r0, [r3]
	orr r1, r2, r4, lsl #10
	ldr r0, _0209C1AC @ =0x04000504
	str r1, [r6]
	str ip, [r0]
	pop {r4, r5, r6, r7, r8, lr}
	bx lr
	.align 2, 0
_0209C19C: .4byte 0x04000500
_0209C1A0: .4byte 0x000003FF
_0209C1A4: .4byte 0x04000488
_0209C1A8: .4byte 0x04000490
_0209C1AC: .4byte 0x04000504
	arm_func_end FUN_0209C0F4

	arm_func_start FUN_0209C1B0
FUN_0209C1B0: @ 0x0209C1B0
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x24
	ldr r3, [r1, #0x20]
	str r1, [sp]
	ldr r6, [r3, #0x14]
	mov r8, r0
	ldrb r3, [r6, #8]
	ldrb r0, [r6, #0xc]
	str r2, [sp, #4]
	lsl r3, r3, #0xc
	asr r2, r3, #0x1f
	lsl r2, r2, #4
	mov r1, #0x800
	lsl r4, r3, #4
	adds r4, r4, r1
	orr r2, r2, r3, lsr #28
	adc r1, r2, #0
	lsr r5, r4, #0xc
	cmp r0, #0
	mov r0, #0
	str r0, [sp, #8]
	orr r5, r5, r1, lsl #20
	addle sp, sp, #0x24
	pople {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	bxle lr
	ldr sb, _0209C4C0 @ =0x021D43B8
	str r0, [sp, #0x18]
	str r0, [sp, #0x14]
	str r0, [sp, #0x1c]
	str r0, [sp, #0x20]
	mov r0, #0x1000
	asr r4, r5, #0x1f
	str r0, [sp, #0x10]
_0209C234:
	ldr r0, [sp, #4]
	bl FUN_0209DEAC
	movs r7, r0
	addeq sp, sp, #0x24
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	bxeq lr
	ldr r0, [sp]
	mov r1, r7
	add r0, r0, #0x14
	bl FUN_0209DEF8
	add r0, r7, #0x38
	add r1, r8, #8
	str r0, [sp, #0xc]
	add sl, r7, #8
	ldm r1, {r0, r1, r2}
	stm sl, {r0, r1, r2}
	ldr sl, [r8, #0x14]
	ldr ip, [sb]
	ldr r1, _0209C4C4 @ =0x5EEDF715
	ldr r0, _0209C4C8 @ =0x1B0CB173
	asr r2, sl, #0x1f
	mla r0, ip, r1, r0
	str r0, [sb]
	umull lr, ip, sl, r5
	mla ip, sl, r4, ip
	ldrsh r1, [r6, #2]
	lsr r0, r0, #0x17
	mla ip, r2, r5, ip
	mul r0, r1, r0
	mov r3, #0x800
	adds r2, lr, r3
	sub r0, r0, r1, lsl #8
	adc sl, ip, #0
	lsr r2, r2, #0xc
	orr r2, r2, sl, lsl #20
	add r0, r2, r0, asr #8
	str r0, [r7, #0x14]
	ldr sl, [r8, #0x18]
	ldr ip, [sb]
	ldr r1, _0209C4C4 @ =0x5EEDF715
	ldr r0, _0209C4C8 @ =0x1B0CB173
	asr r2, sl, #0x1f
	mla r0, ip, r1, r0
	str r0, [sb]
	umull lr, ip, sl, r5
	mla ip, sl, r4, ip
	mla ip, r2, r5, ip
	adds r2, lr, r3
	ldrsh r1, [r6, #2]
	lsr r0, r0, #0x17
	adc sl, ip, #0
	mul r0, r1, r0
	lsr r2, r2, #0xc
	sub r0, r0, r1, lsl #8
	orr r2, r2, sl, lsl #20
	add r0, r2, r0, asr #8
	str r0, [r7, #0x18]
	ldr ip, [r8, #0x1c]
	ldr sl, [sb]
	ldr r1, _0209C4C4 @ =0x5EEDF715
	ldr r0, _0209C4C8 @ =0x1B0CB173
	asr r2, ip, #0x1f
	mla r0, sl, r1, r0
	umull sl, lr, ip, r5
	str r0, [sb]
	mla lr, ip, r4, lr
	adds r3, sl, r3
	mla lr, r2, r5, lr
	ldrsh r1, [r6, #2]
	lsr r0, r0, #0x17
	adc r2, lr, #0
	mul r0, r1, r0
	lsr r3, r3, #0xc
	orr r3, r3, r2, lsl #20
	sub r0, r0, r1, lsl #8
	add r0, r3, r0, asr #8
	ldr r3, [sp, #0xc]
	add fp, r8, #0x38
	str r0, [r7, #0x1c]
	ldm fp, {r0, r1, r2}
	stm r3, {r0, r1, r2}
	ldrb r0, [r6, #9]
	ldrsh r1, [r8, #0x34]
	ldr r2, [r8, #0x30]
	add r0, r0, #1
	mul r1, r2, r1
	asr r1, r1, #0xc
	mul r0, r1, r0
	asr r0, r0, #6
	str r0, [r7, #0x30]
	ldr r0, [sp, #0x10]
	strh r0, [r7, #0x34]
	ldrh r0, [r6]
	lsl r0, r0, #0x19
	lsrs r0, r0, #0x1f
	ldrhne r0, [r6, #0xa]
	strhne r0, [r7, #0x36]
	ldrheq r0, [r8, #0x36]
	strheq r0, [r7, #0x36]
	ldrh r1, [r8, #0x2e]
	ldrh r0, [r7, #0x2e]
	lsl r2, r1, #0x1b
	lsl r1, r1, #0x16
	lsr r1, r1, #0x1b
	lsr r2, r2, #0x1b
	add r1, r1, #1
	mul r1, r2, r1
	lsl r1, r1, #0xb
	lsr r1, r1, #0x10
	bic r0, r0, #0x1f
	and r1, r1, #0x1f
	orr r0, r0, r1
	strh r0, [r7, #0x2e]
	ldrh r0, [r7, #0x2e]
	bic r0, r0, #0x3e0
	orr r0, r0, #0x3e0
	strh r0, [r7, #0x2e]
	ldrh r0, [r6]
	lsl r0, r0, #0x1b
	lsrs r0, r0, #0x1e
	beq _0209C438
	cmp r0, #1
	beq _0209C448
	cmp r0, #2
	ldrheq r0, [r8, #0x20]
	strheq r0, [r7, #0x20]
	ldrsheq r0, [r8, #0x22]
	strheq r0, [r7, #0x22]
	b _0209C458
_0209C438:
	ldr r0, [sp, #0x14]
	strh r0, [r7, #0x20]
	strh r0, [r7, #0x22]
	b _0209C458
_0209C448:
	ldrh r0, [r8, #0x20]
	strh r0, [r7, #0x20]
	ldr r0, [sp, #0x18]
	strh r0, [r7, #0x22]
_0209C458:
	ldrh r1, [r6, #6]
	ldr r0, _0209C4CC @ =0x0000FFFF
	strh r1, [r7, #0x24]
	ldr r1, [sp, #0x1c]
	strh r1, [r7, #0x26]
	ldrb r1, [r6, #0xf]
	strb r1, [r7, #0x2c]
	ldrh r1, [r8, #0x24]
	lsr r1, r1, #1
	bl FUN_020F2998
	strh r0, [r7, #0x28]
	ldrh r1, [r8, #0x24]
	ldr r0, _0209C4CC @ =0x0000FFFF
	bl FUN_020F2998
	strh r0, [r7, #0x2a]
	ldr r0, [sp, #0x20]
	strb r0, [r7, #0x2d]
	ldr r0, [sp, #8]
	ldrb r1, [r6, #0xc]
	add r0, r0, #1
	str r0, [sp, #8]
	cmp r0, r1
	blt _0209C234
	add sp, sp, #0x24
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	bx lr
	.align 2, 0
_0209C4C0: .4byte 0x021D43B8
_0209C4C4: .4byte 0x5EEDF715
_0209C4C8: .4byte 0x1B0CB173
_0209C4CC: .4byte 0x0000FFFF
	arm_func_end FUN_0209C1B0

	arm_func_start FUN_0209C4D0
FUN_0209C4D0: @ 0x0209C4D0
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0xc4
	mov sb, r0
	ldr r0, [sb, #0x20]
	ldrsh r3, [sb, #0x4e]
	str r0, [sp, #4]
	ldr r0, [sb, #0x58]
	ldr r2, _0209D1DC @ =0x00000FFF
	add r3, r0, r3
	ldr r0, [sp, #4]
	str r1, [sp]
	ldr r8, [r0]
	and r0, r3, r2
	strh r0, [sb, #0x4e]
	ldr r0, [r8]
	lsl r0, r0, #0x1c
	lsr r1, r0, #0x1c
	asr r0, r3, #0xc
	cmp r1, #2
	str r0, [sp, #0xc]
	beq _0209C538
	cmp r1, #3
	beq _0209C538
	sub r0, r1, #5
	cmp r0, #4
	bhi _0209C540
_0209C538:
	mov r0, sb
	bl FUN_0209D35C
_0209C540:
	ldr r0, [sp, #0xc]
	cmp r0, #0
	mov r0, #0
	str r0, [sp, #8]
	addle sp, sp, #0xc4
	pople {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	bxle lr
	str r0, [sp, #0x18]
	str r0, [sp, #0x24]
	str r0, [sp, #0x20]
	str r0, [sp, #0x1c]
	mov r0, #0x1000
	str r0, [sp, #0x34]
	ldr r0, [sp, #8]
	ldr r6, _0209D1E0 @ =0x021D43B8
	ldr r4, _0209D1E4 @ =0x5EEDF715
	ldr r5, _0209D1E8 @ =0x1B0CB173
	str r0, [sp, #0x38]
	str r0, [sp, #0x3c]
	str r0, [sp, #0x40]
_0209C590:
	ldr r0, [sp]
	bl FUN_0209DEAC
	movs r7, r0
	addeq sp, sp, #0xc4
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	bxeq lr
	add r0, sb, #8
	mov r1, r7
	bl FUN_0209DEF8
	ldr r0, [r8]
	lsl r0, r0, #0x1c
	lsr r0, r0, #0x1c
	cmp r0, #9
	addls pc, pc, r0, lsl #2
	b _0209CCD0
_0209C5CC: @ jump table
	b _0209C5F4 @ case 0
	b _0209C610 @ case 1
	b _0209C680 @ case 2
	b _0209C6E8 @ case 3
	b _0209C77C @ case 4
	b _0209C87C @ case 5
	b _0209CB74 @ case 6
	b _0209CBF8 @ case 7
	b _0209C938 @ case 8
	b _0209CA08 @ case 9
_0209C5F4:
	ldr r0, [sp, #0x1c]
	str r0, [r7, #0x10]
	ldr r0, [r7, #0x10]
	str r0, [r7, #0xc]
	ldr r0, [r7, #0xc]
	str r0, [r7, #8]
	b _0209CCD0
_0209C610:
	add r0, r7, #8
	bl FUN_0209DFA4
	ldr r2, [r7, #8]
	ldr r1, [sb, #0x5c]
	mov r0, #0x800
	smull r3, r1, r2, r1
	adds r2, r3, r0
	adc r1, r1, #0
	lsr r2, r2, #0xc
	orr r2, r2, r1, lsl #20
	str r2, [r7, #8]
	ldr r2, [r7, #0xc]
	ldr r1, [sb, #0x5c]
	smull r3, r1, r2, r1
	adds r2, r3, r0
	adc r1, r1, #0
	lsr r2, r2, #0xc
	orr r2, r2, r1, lsl #20
	str r2, [r7, #0xc]
	ldr r2, [r7, #0x10]
	ldr r1, [sb, #0x5c]
	smull r3, r1, r2, r1
	adds r2, r3, r0
	adc r0, r1, #0
	lsr r1, r2, #0xc
	orr r1, r1, r0, lsl #20
	str r1, [r7, #0x10]
	b _0209CCD0
_0209C680:
	add r0, sp, #0x58
	bl FUN_0209DF48
	ldr r2, [sp, #0x58]
	ldr r0, [sb, #0x5c]
	mov r1, #0x800
	smull r3, r0, r2, r0
	adds r2, r3, r1
	adc r0, r0, #0
	lsr r2, r2, #0xc
	orr r2, r2, r0, lsl #20
	str r2, [sp, #0x58]
	ldr r3, [sp, #0x5c]
	ldr r2, [sb, #0x5c]
	add r0, r7, #8
	smull sl, r2, r3, r2
	adds r3, sl, r1
	adc r1, r2, #0
	lsr r2, r3, #0xc
	orr r2, r2, r1, lsl #20
	ldr r1, [sp, #0x20]
	str r2, [sp, #0x5c]
	str r1, [sp, #0x60]
	add r1, sp, #0x58
	mov r2, sb
	bl FUN_0209D1FC
	b _0209CCD0
_0209C6E8:
	ldr r0, [sp, #0x18]
	ldr r1, [sp, #0xc]
	bl FUN_020F2998
	ldr r1, [sp, #0x18]
	asr r0, r0, #4
	add r1, r1, #0x10000
	lsl r2, r0, #1
	str r1, [sp, #0x18]
	ldr r0, _0209D1EC @ =0x021094DC
	lsl r1, r2, #1
	ldrsh r0, [r0, r1]
	add r1, r2, #1
	lsl r2, r1, #1
	ldr r1, _0209D1EC @ =0x021094DC
	ldrsh r3, [r1, r2]
	ldr r2, [sb, #0x5c]
	mov r1, #0x800
	smull sl, r2, r0, r2
	adds sl, sl, r1
	adc r0, r2, #0
	lsr r2, sl, #0xc
	orr r2, r2, r0, lsl #20
	str r2, [sp, #0x64]
	ldr r2, [sb, #0x5c]
	add r0, r7, #8
	smull sl, r2, r3, r2
	adds r3, sl, r1
	adc r1, r2, #0
	lsr r2, r3, #0xc
	orr r2, r2, r1, lsl #20
	ldr r1, [sp, #0x24]
	str r2, [sp, #0x68]
	str r1, [sp, #0x6c]
	add r1, sp, #0x64
	mov r2, sb
	bl FUN_0209D1FC
	b _0209CCD0
_0209C77C:
	add r0, r7, #8
	bl FUN_0209DFA4
	ldr r1, [r6]
	mov r0, #0x800
	mla r2, r1, r4, r5
	str r2, [r6]
	lsr r1, r2, #0x17
	lsl r1, r1, #0xc
	sub r1, r1, #0x100000
	asr r1, r1, #8
	ldr r3, [r7, #8]
	ldr r2, [sb, #0x5c]
	smull sl, r2, r3, r2
	adds r3, sl, r0
	adc r2, r2, #0
	lsr r3, r3, #0xc
	orr r3, r3, r2, lsl #20
	smull r2, r1, r3, r1
	adds r2, r2, r0
	adc r1, r1, #0
	lsr r2, r2, #0xc
	orr r2, r2, r1, lsl #20
	str r2, [r7, #8]
	ldr r1, [r6]
	mla r2, r1, r4, r5
	str r2, [r6]
	lsr r1, r2, #0x17
	lsl r1, r1, #0xc
	sub r1, r1, #0x100000
	asr r1, r1, #8
	ldr r3, [r7, #0xc]
	ldr r2, [sb, #0x5c]
	smull sl, r2, r3, r2
	adds r3, sl, r0
	adc r2, r2, #0
	lsr r3, r3, #0xc
	orr r3, r3, r2, lsl #20
	smull r2, r1, r3, r1
	adds r2, r2, r0
	adc r1, r1, #0
	lsr r2, r2, #0xc
	orr r2, r2, r1, lsl #20
	str r2, [r7, #0xc]
	ldr r1, [r6]
	mla r2, r1, r4, r5
	str r2, [r6]
	lsr r1, r2, #0x17
	lsl r1, r1, #0xc
	sub r1, r1, #0x100000
	asr r1, r1, #8
	ldr r3, [r7, #0x10]
	ldr r2, [sb, #0x5c]
	smull sl, r2, r3, r2
	adds r3, sl, r0
	adc r2, r2, #0
	lsr r3, r3, #0xc
	orr r3, r3, r2, lsl #20
	smull r2, r1, r3, r1
	adds r2, r2, r0
	adc r0, r1, #0
	lsr r1, r2, #0xc
	orr r1, r1, r0, lsl #20
	str r1, [r7, #0x10]
	b _0209CCD0
_0209C87C:
	add r0, sp, #0x70
	bl FUN_0209DF48
	ldr r0, [r6]
	ldr r3, [sp, #0x70]
	mla r1, r0, r4, r5
	str r1, [r6]
	ldr r0, [sb, #0x5c]
	mov r2, #0x800
	smull sl, r0, r3, r0
	adds sl, sl, r2
	adc r3, r0, #0
	lsr r0, sl, #0xc
	orr r0, r0, r3, lsl #20
	lsr r3, r1, #0x17
	lsl r3, r3, #0xc
	sub r3, r3, #0x100000
	asr r3, r3, #8
	smull sl, r3, r0, r3
	adds sl, sl, r2
	adc r0, r3, #0
	lsr r3, sl, #0xc
	orr r3, r3, r0, lsl #20
	mla r0, r1, r4, r5
	str r0, [r6]
	str r3, [sp, #0x70]
	lsr r0, r0, #0x17
	lsl r0, r0, #0xc
	sub r0, r0, #0x100000
	asr r1, r0, #8
	ldr sl, [sp, #0x74]
	ldr r3, [sb, #0x5c]
	add r0, r7, #8
	smull fp, r3, sl, r3
	adds sl, fp, r2
	adc r3, r3, #0
	lsr sl, sl, #0xc
	orr sl, sl, r3, lsl #20
	smull r3, r1, sl, r1
	adds r2, r3, r2
	adc r1, r1, #0
	lsr r2, r2, #0xc
	orr r2, r2, r1, lsl #20
	str r2, [sp, #0x74]
	add r1, sp, #0x70
	mov r2, sb
	bl FUN_0209D1FC
	b _0209CCD0
_0209C938:
	add r0, r7, #8
	bl FUN_0209DFA4
	add r0, sb, #0x84
	add r1, sb, #0x8a
	add r2, sp, #0x44
	bl FUN_020CCF18
	ldrsh r1, [sp, #0x46]
	ldrsh r0, [sp, #0x48]
	ldrsh r2, [sp, #0x44]
	str r1, [sp, #0x80]
	str r0, [sp, #0x84]
	add r0, sp, #0x7c
	add r1, r7, #8
	str r2, [sp, #0x7c]
	bl FUN_020CCE14
	cmp r0, #0
	bgt _0209C9A0
	ldr r0, [r7, #8]
	rsb r0, r0, #0
	str r0, [r7, #8]
	ldr r0, [r7, #0xc]
	rsb r0, r0, #0
	str r0, [r7, #0xc]
	ldr r0, [r7, #0x10]
	rsb r0, r0, #0
	str r0, [r7, #0x10]
_0209C9A0:
	ldr r2, [r7, #8]
	ldr r1, [sb, #0x5c]
	mov r0, #0x800
	smull r3, r1, r2, r1
	adds r2, r3, r0
	adc r1, r1, #0
	lsr r2, r2, #0xc
	orr r2, r2, r1, lsl #20
	str r2, [r7, #8]
	ldr r2, [r7, #0xc]
	ldr r1, [sb, #0x5c]
	smull r3, r1, r2, r1
	adds r2, r3, r0
	adc r1, r1, #0
	lsr r2, r2, #0xc
	orr r2, r2, r1, lsl #20
	str r2, [r7, #0xc]
	ldr r2, [r7, #0x10]
	ldr r1, [sb, #0x5c]
	smull r3, r1, r2, r1
	adds r2, r3, r0
	adc r0, r1, #0
	lsr r1, r2, #0xc
	orr r1, r1, r0, lsl #20
	str r1, [r7, #0x10]
	b _0209CCD0
_0209CA08:
	add r0, r7, #8
	bl FUN_0209DFA4
	add r0, sb, #0x84
	add r1, sb, #0x8a
	add r2, sp, #0x4a
	bl FUN_020CCF18
	ldrsh r1, [sp, #0x4c]
	ldrsh r0, [sp, #0x4e]
	ldrsh r2, [sp, #0x4a]
	str r1, [sp, #0x8c]
	str r0, [sp, #0x90]
	add r0, sp, #0x88
	add r1, r7, #8
	str r2, [sp, #0x88]
	bl FUN_020CCE14
	cmp r0, #0
	bge _0209CA70
	ldr r0, [r7, #8]
	rsb r0, r0, #0
	str r0, [r7, #8]
	ldr r0, [r7, #0xc]
	rsb r0, r0, #0
	str r0, [r7, #0xc]
	ldr r0, [r7, #0x10]
	rsb r0, r0, #0
	str r0, [r7, #0x10]
_0209CA70:
	ldr r1, [r6]
	mov r0, #0x800
	mla r2, r1, r4, r5
	str r2, [r6]
	lsr r1, r2, #0x17
	lsl r1, r1, #0xc
	sub r1, r1, #0x100000
	asr r1, r1, #9
	add r1, r1, #0x800
	ldr r3, [r7, #8]
	ldr r2, [sb, #0x5c]
	smull sl, r2, r3, r2
	adds r3, sl, r0
	adc r2, r2, #0
	lsr r3, r3, #0xc
	orr r3, r3, r2, lsl #20
	smull r2, r1, r3, r1
	adds r2, r2, r0
	adc r1, r1, #0
	lsr r2, r2, #0xc
	orr r2, r2, r1, lsl #20
	str r2, [r7, #8]
	ldr r1, [r6]
	mla r2, r1, r4, r5
	str r2, [r6]
	lsr r1, r2, #0x17
	lsl r1, r1, #0xc
	sub r1, r1, #0x100000
	asr r1, r1, #9
	add r1, r1, #0x800
	ldr r3, [r7, #0xc]
	ldr r2, [sb, #0x5c]
	smull sl, r2, r3, r2
	adds r3, sl, r0
	adc r2, r2, #0
	lsr r3, r3, #0xc
	orr r3, r3, r2, lsl #20
	smull r2, r1, r3, r1
	adds r2, r2, r0
	adc r1, r1, #0
	lsr r2, r2, #0xc
	orr r2, r2, r1, lsl #20
	str r2, [r7, #0xc]
	ldr r1, [r6]
	mla r2, r1, r4, r5
	str r2, [r6]
	lsr r1, r2, #0x17
	lsl r1, r1, #0xc
	sub r1, r1, #0x100000
	asr r1, r1, #9
	add r1, r1, #0x800
	ldr r3, [r7, #0x10]
	ldr r2, [sb, #0x5c]
	smull sl, r2, r3, r2
	adds r3, sl, r0
	adc r2, r2, #0
	lsr r3, r3, #0xc
	orr r3, r3, r2, lsl #20
	smull r2, r1, r3, r1
	adds r2, r2, r0
	adc r0, r1, #0
	lsr r1, r2, #0xc
	orr r1, r1, r0, lsl #20
	str r1, [r7, #0x10]
	b _0209CCD0
_0209CB74:
	add r0, r7, #0x14
	bl FUN_0209DF48
	ldr r2, [r7, #0x14]
	ldr r1, [sb, #0x5c]
	mov r0, #0x800
	smull r3, r1, r2, r1
	adds r2, r3, r0
	adc r1, r1, #0
	lsr r2, r2, #0xc
	orr r2, r2, r1, lsl #20
	str r2, [sp, #0x94]
	ldr r3, [r7, #0x18]
	ldr r2, [sb, #0x5c]
	ldr r1, [r6]
	smull sl, r2, r3, r2
	adds r3, sl, r0
	adc r0, r2, #0
	lsr r2, r3, #0xc
	orr r2, r2, r0, lsl #20
	mla r0, r1, r4, r5
	str r0, [r6]
	str r2, [sp, #0x98]
	lsr r1, r0, #0x17
	ldr r2, [sb, #0x60]
	add r0, r7, #8
	mul r1, r2, r1
	sub r1, r1, r2, lsl #8
	asr r1, r1, #8
	str r1, [sp, #0x9c]
	add r1, sp, #0x94
	mov r2, sb
	bl FUN_0209D1FC
	b _0209CCD0
_0209CBF8:
	add r0, r7, #0x14
	bl FUN_0209DF48
	ldr r0, [r6]
	mov r3, #0x800
	mla r2, r0, r4, r5
	str r2, [r6]
	ldr sl, [r7, #0x14]
	ldr r0, [sb, #0x5c]
	lsr r1, r2, #0x17
	smull fp, r0, sl, r0
	adds fp, fp, r3
	lsl r1, r1, #0xc
	adc sl, r0, #0
	lsr r0, fp, #0xc
	sub r1, r1, #0x100000
	orr r0, r0, sl, lsl #20
	asr r1, r1, #8
	smull sl, r1, r0, r1
	adds sl, sl, r3
	adc r0, r1, #0
	lsr r1, sl, #0xc
	orr r1, r1, r0, lsl #20
	str r1, [sp, #0xa0]
	mla r1, r2, r4, r5
	str r1, [r6]
	lsr r2, r1, #0x17
	lsl r2, r2, #0xc
	sub r2, r2, #0x100000
	ldr sl, [r7, #0x18]
	ldr r0, [sb, #0x5c]
	asr r2, r2, #8
	smull fp, r0, sl, r0
	adds fp, fp, r3
	adc sl, r0, #0
	lsr r0, fp, #0xc
	orr r0, r0, sl, lsl #20
	smull sl, r2, r0, r2
	adds r3, sl, r3
	adc r0, r2, #0
	lsr r2, r3, #0xc
	orr r2, r2, r0, lsl #20
	mla r0, r1, r4, r5
	str r0, [r6]
	str r2, [sp, #0xa4]
	lsr r1, r0, #0x17
	ldr r2, [sb, #0x60]
	add r0, r7, #8
	mul r1, r2, r1
	sub r1, r1, r2, lsl #8
	asr r1, r1, #8
	str r1, [sp, #0xa8]
	add r1, sp, #0xa0
	mov r2, sb
	bl FUN_0209D1FC
_0209CCD0:
	ldr r1, [r6]
	mla r0, r1, r4, r5
	str r0, [r6]
	ldrb r2, [r8, #0x42]
	lsr r1, r0, #0x18
	ldr r3, [sb, #0x64]
	mul r1, r2, r1
	add r2, r2, #0xff
	sub r1, r2, r1, asr #7
	mul r1, r3, r1
	asr r1, r1, #8
	str r1, [sp, #0x10]
	mla r1, r0, r4, r5
	str r1, [r6]
	lsr r0, r1, #0x18
	ldrb r2, [r8, #0x42]
	ldr r3, [sb, #0x68]
	ldr r1, [r8]
	mul r0, r2, r0
	add r2, r2, #0xff
	sub r0, r2, r0, asr #7
	mul r0, r3, r0
	asr r0, r0, #8
	str r0, [sp, #0x14]
	lsl r0, r1, #0x1c
	lsr r0, r0, #0x1c
	cmp r0, #6
	bne _0209CE1C
	ldrsh r0, [sb, #0x84]
	ldr r1, [r7, #0x14]
	mov r2, #0x800
	smull r3, r0, r1, r0
	adds r1, r3, r2
	ldrsh r3, [sb, #0x8a]
	ldr lr, [r7, #0x18]
	lsr ip, r1, #0xc
	smull sl, r3, lr, r3
	adc r0, r0, #0
	adds sl, sl, r2
	orr ip, ip, r0, lsl #20
	adc r3, r3, #0
	lsr sl, sl, #0xc
	orr sl, sl, r3, lsl #20
	add r3, ip, sl
	str r3, [sp, #0xb8]
	ldrsh sl, [sb, #0x86]
	ldr r3, [r7, #0x14]
	ldrsh lr, [sb, #0x8c]
	smull ip, sl, r3, sl
	adds ip, ip, r2
	ldr fp, [r7, #0x18]
	adc sl, sl, #0
	smull r3, lr, fp, lr
	lsr ip, ip, #0xc
	adds r3, r3, r2
	orr ip, ip, sl, lsl #20
	adc sl, lr, #0
	lsr r3, r3, #0xc
	orr r3, r3, sl, lsl #20
	add r3, ip, r3
	str r3, [sp, #0xbc]
	ldr sl, [r7, #0x18]
	ldrsh fp, [sb, #0x88]
	ldr r3, [r7, #0x14]
	str sl, [sp, #0x28]
	smull ip, fp, r3, fp
	ldrsh sl, [sb, #0x8e]
	ldr r3, [sp, #0x28]
	adds ip, ip, r2
	smull sl, lr, r3, sl
	adc r3, fp, #0
	adds r2, sl, r2
	lsr sl, ip, #0xc
	orr sl, sl, r3, lsl #20
	adc r3, lr, #0
	lsr r2, r2, #0xc
	orr r2, r2, r3, lsl #20
	add r2, sl, r2
	add r0, sp, #0xb8
	add r1, sp, #0xac
	str r2, [sp, #0xc0]
	bl FUN_020CCFE0
	b _0209CE58
_0209CE1C:
	ldr r0, [r7, #8]
	cmp r0, #0
	bne _0209CE4C
	ldr r0, [r7, #0xc]
	cmp r0, #0
	bne _0209CE4C
	ldr r0, [r7, #0x10]
	cmp r0, #0
	bne _0209CE4C
	add r0, sp, #0xac
	bl FUN_0209DFA4
	b _0209CE58
_0209CE4C:
	add r0, r7, #8
	add r1, sp, #0xac
	bl FUN_020CCFE0
_0209CE58:
	ldr r2, [sp, #0xac]
	ldr r1, [sp, #0x10]
	mov r0, #0x800
	smull sl, r1, r2, r1
	adds r2, sl, r0
	add sl, sb, #0x28
	str sl, [sp, #0x2c]
	add sl, r7, #0x38
	str sl, [sp, #0x30]
	adc r1, r1, #0
	lsr r2, r2, #0xc
	orr r2, r2, r1, lsl #20
	ldrsh r1, [sb, #0x50]
	ldr sl, [sp, #0x14]
	ldr r3, [sb, #0x40]
	smull fp, sl, r1, sl
	adds fp, fp, r0
	adc r1, sl, #0
	lsr sl, fp, #0xc
	orr sl, sl, r1, lsl #20
	add r1, r2, sl
	add r1, r3, r1
	str r1, [r7, #0x14]
	ldr r3, [sp, #0xb0]
	ldr r1, [sp, #0x10]
	ldrsh sl, [sb, #0x52]
	smull fp, r1, r3, r1
	adds fp, fp, r0
	adc r3, r1, #0
	lsr r1, fp, #0xc
	orr r1, r1, r3, lsl #20
	ldr r3, [sp, #0x14]
	ldr r2, [sb, #0x44]
	smull fp, r3, sl, r3
	adds sl, fp, r0
	adc r3, r3, #0
	lsr sl, sl, #0xc
	orr sl, sl, r3, lsl #20
	add r1, r1, sl
	add r1, r2, r1
	str r1, [r7, #0x18]
	ldr r1, [sp, #0xb4]
	ldr r2, [sp, #0x10]
	ldrsh lr, [sb, #0x54]
	smull sl, r3, r1, r2
	ldr r1, [sp, #0x14]
	adds sl, sl, r0
	smull r2, r1, lr, r1
	adc r3, r3, #0
	adds r0, r2, r0
	lsr r2, sl, #0xc
	orr r2, r2, r3, lsl #20
	adc r1, r1, #0
	lsr r0, r0, #0xc
	orr r0, r0, r1, lsl #20
	ldr ip, [sb, #0x48]
	add r0, r2, r0
	add r0, ip, r0
	str r0, [r7, #0x1c]
	ldr r0, [sp, #0x2c]
	ldr r3, [sp, #0x30]
	ldm r0, {r0, r1, r2}
	stm r3, {r0, r1, r2}
	ldr r0, [r6]
	mla r1, r0, r4, r5
	str r1, [r6]
	lsr r0, r1, #0x18
	ldrb r1, [r8, #0x40]
	ldr r2, [sb, #0x6c]
	mul r0, r1, r0
	add r1, r1, #0xff
	sub r0, r1, r0, asr #7
	mul r0, r2, r0
	asr r0, r0, #8
	str r0, [r7, #0x30]
	ldr r0, [sp, #0x34]
	strh r0, [r7, #0x34]
	ldr r0, [r8]
	lsl r0, r0, #0x16
	lsrs r0, r0, #0x1f
	beq _0209D010
	ldr r0, [sp, #4]
	ldr r0, [r0, #8]
	ldrh r0, [r0, #8]
	lsl r0, r0, #0x1f
	lsrs r0, r0, #0x1f
	beq _0209D010
	ldr r0, [r6]
	ldr r3, _0209D1F0 @ =0x00000003
	mla r1, r0, r4, r5
	str r1, [r6]
	lsr r0, r1, #0x14
	ldr r1, [sp, #4]
	ldr r2, [r1, #8]
	ldr r1, _0209D1F4 @ =0xAAAAAAAB
	umull r1, sl, r0, r1
	lsr sl, sl, #1
	umull sl, fp, r3, sl
	ldrh r1, [r2]
	sub sl, r0, sl
	strh r1, [sp, #0x50]
	ldrh r0, [r8, #0x22]
	lsl r1, sl, #1
	strh r0, [sp, #0x52]
	ldrh r0, [r2, #2]
	strh r0, [sp, #0x54]
	add r0, sp, #0x50
	ldrh r0, [r0, r1]
	strh r0, [r7, #0x36]
	b _0209D018
_0209D010:
	ldrh r0, [r8, #0x22]
	strh r0, [r7, #0x36]
_0209D018:
	ldrh r1, [r7, #0x2e]
	ldrb r0, [sb, #0x81]
	bic r1, r1, #0x1f
	and r0, r0, #0x1f
	orr r0, r1, r0
	strh r0, [r7, #0x2e]
	ldrh r0, [r7, #0x2e]
	bic r0, r0, #0x3e0
	orr r0, r0, #0x3e0
	strh r0, [r7, #0x2e]
	ldr r0, [r8]
	lsl r0, r0, #0x12
	lsrs r0, r0, #0x1f
	ldrne r0, [r6]
	mlane r1, r0, r4, r5
	strne r1, [r6]
	strhne r1, [r7, #0x20]
	ldrheq r0, [sb, #0x56]
	strheq r0, [r7, #0x20]
	ldr r0, [r8]
	lsl r0, r0, #0x13
	lsrs r0, r0, #0x1f
	ldreq r0, [sp, #0x38]
	strheq r0, [r7, #0x22]
	beq _0209D0A8
	ldr r0, [r6]
	mla r1, r0, r4, r5
	str r1, [r6]
	lsr r0, r1, #0x14
	ldrsh r2, [r8, #0x34]
	ldrsh r1, [r8, #0x36]
	sub r1, r1, r2
	mul r0, r1, r0
	add r0, r0, r2, lsl #12
	lsr r0, r0, #0xc
	strh r0, [r7, #0x22]
_0209D0A8:
	ldr r0, [r6]
	mla r1, r0, r4, r5
	str r1, [r6]
	lsr r0, r1, #0x18
	ldrb r1, [r8, #0x41]
	ldrh r2, [sb, #0x70]
	mul r0, r1, r0
	asr r0, r0, #8
	rsb r0, r0, #0xff
	mul r0, r2, r0
	asr r0, r0, #8
	add r0, r0, #1
	strh r0, [r7, #0x24]
	ldr r0, [sp, #0x3c]
	strh r0, [r7, #0x26]
	ldr r0, [r8]
	lsl r0, r0, #0x14
	lsrs r1, r0, #0x1f
	beq _0209D138
	ldr r0, [sp, #4]
	ldr r0, [r0, #0x10]
	ldr r0, [r0, #8]
	lsl r0, r0, #0xf
	lsrs r0, r0, #0x1f
	beq _0209D138
	ldr r0, [r6]
	mla r1, r0, r4, r5
	str r1, [r6]
	lsr r0, r1, #0x14
	ldr r1, [sp, #4]
	ldr sl, [r1, #0x10]
	ldrb r1, [sl, #8]
	bl FUN_020F2BA4
	ldrb r0, [sl, r1]
	strb r0, [r7, #0x2c]
	b _0209D168
_0209D138:
	cmp r1, #0
	beq _0209D160
	ldr r0, [sp, #4]
	ldr r1, [r0, #0x10]
	ldr r0, [r1, #8]
	lsl r0, r0, #0xf
	lsrs r0, r0, #0x1f
	ldrbeq r0, [r1]
	strbeq r0, [r7, #0x2c]
	beq _0209D168
_0209D160:
	ldrb r0, [r8, #0x47]
	strb r0, [r7, #0x2c]
_0209D168:
	ldr r1, [sp, #4]
	ldr r0, _0209D1F8 @ =0x0000FFFF
	ldr r1, [r1]
	ldrb r1, [r1, #0x48]
	bl FUN_020F2998
	strh r0, [r7, #0x28]
	ldrh r1, [r7, #0x24]
	ldr r0, _0209D1F8 @ =0x0000FFFF
	bl FUN_020F2998
	strh r0, [r7, #0x2a]
	ldr r0, [sp, #0x40]
	strb r0, [r7, #0x2d]
	ldr r0, [r8]
	lsl r0, r0, #0xb
	lsrs r0, r0, #0x1f
	ldrne r0, [r6]
	mlane r1, r0, r4, r5
	strne r1, [r6]
	lsrne r0, r1, #0x18
	strbne r0, [r7, #0x2d]
	ldr r0, [sp, #8]
	add r1, r0, #1
	ldr r0, [sp, #0xc]
	str r1, [sp, #8]
	cmp r1, r0
	blt _0209C590
	add sp, sp, #0xc4
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	bx lr
	.align 2, 0
_0209D1DC: .4byte 0x00000FFF
_0209D1E0: .4byte 0x021D43B8
_0209D1E4: .4byte 0x5EEDF715
_0209D1E8: .4byte 0x1B0CB173
_0209D1EC: .4byte 0x021094DC
_0209D1F0: .4byte 0x00000003
_0209D1F4: .4byte 0xAAAAAAAB
_0209D1F8: .4byte 0x0000FFFF
	arm_func_end FUN_0209C4D0

	arm_func_start FUN_0209D1FC
FUN_0209D1FC: @ 0x0209D1FC
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #8
	mov r4, r2
	mov r6, r0
	mov r5, r1
	add r2, sp, #0
	add r0, r4, #0x84
	add r1, r4, #0x8a
	bl FUN_020CCF18
	add r0, sp, #0
	mov r1, r0
	bl FUN_020CD0F8
	ldrsh r1, [sp]
	ldr lr, [r5, #8]
	ldrsh r0, [r4, #0x84]
	ldr ip, [r5]
	smull r3, r2, lr, r1
	smull r1, r0, ip, r0
	ldrsh r7, [r4, #0x8a]
	ldr r8, [r5, #4]
	mov ip, #0x800
	smull lr, r7, r8, r7
	adds r8, r3, ip
	adc r3, r2, #0
	lsr r2, r8, #0xc
	adds r1, r1, ip
	orr r2, r2, r3, lsl #20
	adc r0, r0, #0
	lsr r3, r1, #0xc
	adds r1, lr, ip
	orr r3, r3, r0, lsl #20
	adc r0, r7, #0
	lsr r1, r1, #0xc
	orr r1, r1, r0, lsl #20
	add r0, r3, r1
	add r0, r2, r0
	str r0, [r6]
	ldrsh r0, [sp, #2]
	ldr r1, [r5, #8]
	ldrsh r3, [r4, #0x86]
	smull r2, r0, r1, r0
	adds r2, r2, ip
	ldr lr, [r5]
	adc r1, r0, #0
	lsr r0, r2, #0xc
	orr r0, r0, r1, lsl #20
	smull r8, r7, lr, r3
	ldrsh r1, [r4, #0x8c]
	ldr r2, [r5, #4]
	adds r8, r8, ip
	smull r3, r1, r2, r1
	adc r2, r7, #0
	lsr r7, r8, #0xc
	orr r7, r7, r2, lsl #20
	adds r2, r3, ip
	adc r1, r1, #0
	lsr r2, r2, #0xc
	orr r2, r2, r1, lsl #20
	add r1, r7, r2
	add r0, r0, r1
	str r0, [r6, #4]
	ldrsh r0, [sp, #4]
	ldr r1, [r5, #8]
	ldr lr, [r5]
	smull r3, r0, r1, r0
	adds r3, r3, ip
	adc r1, r0, #0
	lsr r0, r3, #0xc
	orr r0, r0, r1, lsl #20
	ldrsh r3, [r4, #0x88]
	ldrsh r1, [r4, #0x8e]
	ldr r2, [r5, #4]
	smull r5, r4, lr, r3
	adds r5, r5, ip
	smull r3, r1, r2, r1
	adc r4, r4, #0
	adds r2, r3, ip
	lsr r3, r5, #0xc
	adc r1, r1, #0
	lsr r2, r2, #0xc
	orr r3, r3, r4, lsl #20
	orr r2, r2, r1, lsl #20
	add r1, r3, r2
	add r0, r0, r1
	str r0, [r6, #8]
	add sp, sp, #8
	pop {r4, r5, r6, r7, r8, lr}
	bx lr
	arm_func_end FUN_0209D1FC

	arm_func_start FUN_0209D35C
FUN_0209D35C: @ 0x0209D35C
	push {r4, r5, r6, lr}
	sub sp, sp, #0x10
	ldr r1, _0209D5E0 @ =_021105EC
	mov r4, r0
	ldrh r3, [r1]
	ldrh r2, [r1, #2]
	ldrh r0, [r1, #4]
	strh r3, [sp]
	strh r2, [sp, #2]
	strh r0, [sp, #4]
	ldr r0, [r4, #0x20]
	ldr r0, [r0]
	ldr r0, [r0]
	lsl r0, r0, #0x18
	lsrs r0, r0, #0x1e
	beq _0209D3DC
	cmp r0, #1
	beq _0209D3C4
	cmp r0, #2
	bne _0209D3F4
	mov r0, #0
	mov r1, #0x1000
	strh r1, [sp, #6]
	strh r0, [sp, #8]
	strh r0, [sp, #0xa]
	b _0209D400
_0209D3C4:
	mov r1, #0
	mov r0, #0x1000
	strh r1, [sp, #6]
	strh r0, [sp, #8]
	strh r1, [sp, #0xa]
	b _0209D400
_0209D3DC:
	mov r1, #0
	mov r0, #0x1000
	strh r1, [sp, #6]
	strh r1, [sp, #8]
	strh r0, [sp, #0xa]
	b _0209D400
_0209D3F4:
	add r1, sp, #6
	add r0, r4, #0x50
	bl FUN_020CD0F8
_0209D400:
	add r0, sp, #0
	add r1, sp, #6
	bl FUN_020CCE50
	cmp r0, #0x1000
	beq _0209D424
	mov r1, #0x1000
	rsb r1, r1, #0
	cmp r0, r1
	bne _0209D438
_0209D424:
	mov r0, #0
	mov r1, #0x1000
	strh r1, [sp]
	strh r0, [sp, #2]
	strh r0, [sp, #4]
_0209D438:
	ldrsh r3, [sp, #8]
	ldrsh r1, [sp, #4]
	ldrsh r2, [sp, #0xa]
	ldrsh r0, [sp, #2]
	smull r6, r5, r3, r1
	mov r1, #0x800
	adds r6, r6, r1
	smull r3, r0, r2, r0
	adc r5, r5, #0
	adds r2, r3, r1
	lsr r3, r6, #0xc
	adc r0, r0, #0
	lsr r2, r2, #0xc
	orr r3, r3, r5, lsl #20
	orr r2, r2, r0, lsl #20
	sub r0, r3, r2
	strh r0, [r4, #0x84]
	ldrsh r5, [sp, #0xa]
	ldrsh r3, [sp]
	ldrsh r2, [sp, #6]
	ldrsh r0, [sp, #4]
	smull r3, r6, r5, r3
	adds ip, r3, r1
	smull r3, r0, r2, r0
	adc r5, r6, #0
	adds r2, r3, r1
	lsr r3, ip, #0xc
	adc r0, r0, #0
	lsr r2, r2, #0xc
	orr r3, r3, r5, lsl #20
	orr r2, r2, r0, lsl #20
	sub r0, r3, r2
	strh r0, [r4, #0x86]
	ldrsh r5, [sp, #6]
	ldrsh r3, [sp, #2]
	ldrsh r2, [sp, #8]
	ldrsh r0, [sp]
	smull r3, r6, r5, r3
	adds ip, r3, r1
	smull r3, r0, r2, r0
	adc r5, r6, #0
	adds r2, r3, r1
	lsr r3, ip, #0xc
	adc r0, r0, #0
	lsr r2, r2, #0xc
	orr r3, r3, r5, lsl #20
	orr r2, r2, r0, lsl #20
	sub r0, r3, r2
	strh r0, [r4, #0x88]
	ldrsh r6, [sp, #8]
	ldrsh r5, [r4, #0x88]
	add r0, r4, #0x84
	ldrsh r3, [sp, #0xa]
	ldrsh r2, [r4, #0x86]
	smull r5, ip, r6, r5
	adds lr, r5, r1
	smull r5, r2, r3, r2
	adc r6, ip, #0
	adds r3, r5, r1
	lsr r5, lr, #0xc
	adc r2, r2, #0
	lsr r3, r3, #0xc
	orr r5, r5, r6, lsl #20
	orr r3, r3, r2, lsl #20
	sub r2, r5, r3
	strh r2, [r4, #0x8a]
	ldrsh r6, [sp, #0xa]
	ldrsh r5, [r4, #0x84]
	ldrsh r3, [sp, #6]
	ldrsh r2, [r4, #0x88]
	smull lr, ip, r6, r5
	smull r5, r2, r3, r2
	adds r6, lr, r1
	adc r3, ip, #0
	lsr r6, r6, #0xc
	orr r6, r6, r3, lsl #20
	adds r3, r5, r1
	adc r2, r2, #0
	lsr r3, r3, #0xc
	orr r3, r3, r2, lsl #20
	sub r2, r6, r3
	strh r2, [r4, #0x8c]
	ldrsh lr, [sp, #6]
	ldrsh ip, [r4, #0x86]
	ldrsh r3, [sp, #8]
	ldrsh r2, [r4, #0x84]
	smull r6, r5, lr, ip
	smull ip, r2, r3, r2
	adds r6, r6, r1
	adc r5, r5, #0
	adds r3, ip, r1
	lsr r6, r6, #0xc
	orr r6, r6, r5, lsl #20
	adc r1, r2, #0
	lsr r2, r3, #0xc
	orr r2, r2, r1, lsl #20
	sub r1, r6, r2
	strh r1, [r4, #0x8e]
	mov r1, r0
	bl FUN_020CD0F8
	add r0, r4, #0x8a
	mov r1, r0
	bl FUN_020CD0F8
	add sp, sp, #0x10
	pop {r4, r5, r6, lr}
	bx lr
	.align 2, 0
_0209D5E0: .4byte _021105EC
	arm_func_end FUN_0209D35C

	arm_func_start FUN_0209D5E4
FUN_0209D5E4: @ 0x0209D5E4
	stmdb sp!, {lr}
	sub sp, sp, #4
	rsb r2, r2, #0xff
	mov r1, #0x1f
	mul r3, r2, r1
	ldr r2, _0209D638 @ =0x80808081
	ldrh lr, [r0, #0x2e]
	smull r1, ip, r2, r3
	add ip, r3, ip
	asr ip, ip, #7
	lsr r1, r3, #0x1f
	add ip, r1, ip
	lsl r1, ip, #0x10
	lsr r1, r1, #0x10
	bic r2, lr, #0x3e0
	and r1, r1, #0x1f
	orr r1, r2, r1, lsl #5
	strh r1, [r0, #0x2e]
	add sp, sp, #4
	ldm sp!, {lr}
	bx lr
	.align 2, 0
_0209D638: .4byte 0x80808081
	arm_func_end FUN_0209D5E4

	arm_func_start FUN_0209D63C
FUN_0209D63C: @ 0x0209D63C
	stmdb sp!, {lr}
	sub sp, sp, #4
	ldr r3, [r1, #0x14]
	sub r1, r2, #0xff
	ldrsh lr, [r3, #4]
	ldr r2, _0209D684 @ =0x80808081
	sub r3, lr, #0x1000
	mul ip, r3, r1
	smull r1, r3, r2, ip
	add r3, ip, r3
	asr r3, r3, #7
	lsr r1, ip, #0x1f
	add r3, r1, r3
	add r1, lr, r3
	strh r1, [r0, #0x34]
	add sp, sp, #4
	ldm sp!, {lr}
	bx lr
	.align 2, 0
_0209D684: .4byte 0x80808081
	arm_func_end FUN_0209D63C

	arm_func_start FUN_0209D688
FUN_0209D688: @ 0x0209D688
	push {r4, r5, lr}
	sub sp, sp, #4
	ldr r5, [r1, #0x10]
	mov r4, #0
	ldrb r3, [r5, #8]
	cmp r3, #0
	addle sp, sp, #4
	pople {r4, r5, lr}
	bxle lr
	ldrb ip, [r5, #9]
	mov lr, r4
_0209D6B4:
	add r1, lr, ip
	cmp r2, r1
	ldrblt r1, [r5, r4]
	addlt sp, sp, #4
	strblt r1, [r0, #0x2c]
	poplt {r4, r5, lr}
	bxlt lr
	add r4, r4, #1
	cmp r4, r3
	add lr, lr, ip
	blt _0209D6B4
	add sp, sp, #4
	pop {r4, r5, lr}
	bx lr
	arm_func_end FUN_0209D688

	arm_func_start FUN_0209D6EC
FUN_0209D6EC: @ 0x0209D6EC
	push {r4, r5, r6, lr}
	ldr r4, [r1, #0xc]
	mov r5, r0
	ldrb r1, [r4, #4]
	ldrb r3, [r4, #5]
	cmp r2, r1
	bge _0209D72C
	ldrh r3, [r4]
	lsl r0, r3, #0x16
	lsl r6, r3, #0x1b
	lsr r0, r0, #0x1b
	sub r0, r0, r6, lsr #27
	mul r0, r2, r0
	bl FUN_020F2998
	add r0, r0, r6, lsr #27
	b _0209D768
_0209D72C:
	cmp r2, r3
	ldrhlt r0, [r4]
	lsllt r0, r0, #0x16
	lsrlt r0, r0, #0x1b
	blt _0209D768
	ldrh r0, [r4]
	sub r2, r2, #0xff
	rsb r1, r3, #0xff
	lsl r6, r0, #0x11
	lsr r3, r6, #0x1b
	lsl r0, r0, #0x16
	sub r0, r3, r0, lsr #27
	mul r0, r2, r0
	bl FUN_020F2998
	add r0, r0, r6, lsr #27
_0209D768:
	ldr r3, _0209D7BC @ =0x021D43B8
	ldr r1, _0209D7C0 @ =0x5EEDF715
	ldr ip, [r3]
	ldr r2, _0209D7C4 @ =0x1B0CB173
	mla r1, ip, r1, r2
	str r1, [r3]
	ldrb r2, [r4, #2]
	lsr r1, r1, #0x18
	ldrh r3, [r5, #0x2e]
	mul r1, r2, r1
	asr r1, r1, #8
	rsb r1, r1, #0xff
	mul r1, r0, r1
	lsl r0, r1, #8
	lsr r0, r0, #0x10
	bic r1, r3, #0x3e0
	and r0, r0, #0x1f
	orr r0, r1, r0, lsl #5
	strh r0, [r5, #0x2e]
	pop {r4, r5, r6, lr}
	bx lr
	.align 2, 0
_0209D7BC: .4byte 0x021D43B8
_0209D7C0: .4byte 0x5EEDF715
_0209D7C4: .4byte 0x1B0CB173
	arm_func_end FUN_0209D6EC

	arm_func_start FUN_0209D7C8
FUN_0209D7C8: @ 0x0209D7C8
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #4
	ldr r4, [r1, #8]
	mov sl, r0
	ldrb r3, [r4, #4]
	ldr r0, [r1]
	ldrb r1, [r4, #5]
	cmp r2, r3
	ldrb fp, [r4, #6]
	ldrhlt r0, [r4]
	addlt sp, sp, #4
	strhlt r0, [sl, #0x36]
	poplt {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	bxlt lr
	cmp r2, r1
	bge _0209D8C0
	ldrh sb, [r0, #0x22]
	ldrh r0, [r4, #8]
	ldrh r8, [r4]
	asr r7, sb, #5
	asr fp, sb, #0xa
	lsl r4, r0, #0x1d
	asr r6, r8, #5
	asr r5, r8, #0xa
	lsrs r4, r4, #0x1f
	and sb, sb, #0x1f
	and r7, r7, #0x1f
	and r0, fp, #0x1f
	orreq r1, sb, r7, lsl #5
	orreq r0, r1, r0, lsl #10
	and r8, r8, #0x1f
	and r6, r6, #0x1f
	and r5, r5, #0x1f
	addeq sp, sp, #4
	strheq r0, [sl, #0x36]
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	bxeq lr
	sub r4, r2, r3
	sub r0, r0, r5
	mul r0, r4, r0
	sub fp, r1, r3
	mov r1, fp
	bl FUN_020F2998
	sub r1, sb, r8
	mov sb, r0
	mul r0, r4, r1
	mov r1, fp
	bl FUN_020F2998
	sub r1, r7, r6
	mov r7, r0
	mul r0, r4, r1
	mov r1, fp
	bl FUN_020F2998
	add r1, r8, r7
	add r0, r6, r0
	add r2, r5, sb
	orr r0, r1, r0, lsl #5
	orr r0, r0, r2, lsl #10
	add sp, sp, #4
	strh r0, [sl, #0x36]
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	bx lr
_0209D8C0:
	cmp r2, fp
	bge _0209D980
	ldrh r7, [r4, #2]
	ldrh r8, [r0, #0x22]
	ldrh r0, [r4, #8]
	asr r5, r7, #5
	asr r4, r7, #0xa
	lsl r3, r0, #0x1d
	asr r6, r8, #5
	asr sb, r8, #0xa
	lsrs r3, r3, #0x1f
	and r7, r7, #0x1f
	and r5, r5, #0x1f
	and r0, r4, #0x1f
	orreq r1, r7, r5, lsl #5
	orreq r0, r1, r0, lsl #10
	and r8, r8, #0x1f
	and r6, r6, #0x1f
	and sb, sb, #0x1f
	addeq sp, sp, #4
	strheq r0, [sl, #0x36]
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	bxeq lr
	sub r4, r2, r1
	sub r0, r0, sb
	mul r0, r4, r0
	sub fp, fp, r1
	mov r1, fp
	bl FUN_020F2998
	sub r1, r7, r8
	mov r7, r0
	mul r0, r4, r1
	mov r1, fp
	bl FUN_020F2998
	sub r1, r5, r6
	mov r5, r0
	mul r0, r4, r1
	mov r1, fp
	bl FUN_020F2998
	add r1, r8, r5
	add r0, r6, r0
	add r2, sb, r7
	orr r0, r1, r0, lsl #5
	orr r0, r0, r2, lsl #10
	add sp, sp, #4
	strh r0, [sl, #0x36]
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	bx lr
_0209D980:
	ldrh r0, [r4, #2]
	strh r0, [sl, #0x36]
	add sp, sp, #4
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	bx lr
	arm_func_end FUN_0209D7C8

	arm_func_start FUN_0209D994
FUN_0209D994: @ 0x0209D994
	push {r4, r5, lr}
	sub sp, sp, #4
	ldr ip, [r1, #4]
	mov r4, r0
	ldrb r1, [ip, #6]
	ldrb r3, [ip, #7]
	cmp r2, r1
	bge _0209D9DC
	ldrsh r5, [ip]
	ldrsh r0, [ip, #2]
	sub r0, r0, r5
	mul r0, r2, r0
	bl FUN_020F2998
	add r0, r5, r0
	add sp, sp, #4
	strh r0, [r4, #0x34]
	pop {r4, r5, lr}
	bx lr
_0209D9DC:
	cmp r2, r3
	ldrshlt r0, [ip, #2]
	addlt sp, sp, #4
	strhlt r0, [r4, #0x34]
	poplt {r4, r5, lr}
	bxlt lr
	ldrsh r5, [ip, #4]
	ldrsh r0, [ip, #2]
	sub r2, r2, #0xff
	rsb r1, r3, #0xff
	sub r0, r5, r0
	mul r0, r2, r0
	bl FUN_020F2998
	add r0, r5, r0
	strh r0, [r4, #0x34]
	add sp, sp, #4
	pop {r4, r5, lr}
	bx lr
	arm_func_end FUN_0209D994

	arm_func_start FUN_0209DA24
FUN_0209DA24: @ 0x0209DA24
	push {r4, lr}
	ldr lr, [r1, #8]
	ldr r2, [r0]
	ldrsh r4, [r0, #0xc]
	sub r3, r2, lr
	mov r2, #0x800
	smull ip, r3, r4, r3
	adds r4, ip, r2
	adc r3, r3, #0
	lsr r4, r4, #0xc
	orr r4, r4, r3, lsl #20
	add r3, lr, r4
	str r3, [r1, #8]
	ldr r4, [r1, #0xc]
	ldr r3, [r0, #4]
	ldrsh ip, [r0, #0xc]
	sub r3, r3, r4
	smull lr, r3, ip, r3
	adds ip, lr, r2
	adc r3, r3, #0
	lsr ip, ip, #0xc
	orr ip, ip, r3, lsl #20
	add r3, r4, ip
	str r3, [r1, #0xc]
	ldr lr, [r1, #0x10]
	ldr r3, [r0, #8]
	ldrsh ip, [r0, #0xc]
	sub r0, r3, lr
	smull r3, r0, ip, r0
	adds r2, r3, r2
	adc r0, r0, #0
	lsr r2, r2, #0xc
	orr r2, r2, r0, lsl #20
	add r0, lr, r2
	str r0, [r1, #0x10]
	pop {r4, lr}
	bx lr
	arm_func_end FUN_0209DA24

	arm_func_start FUN_0209DAB8
FUN_0209DAB8: @ 0x0209DAB8
	ldr r3, [r3, #0x74]
	ldr r2, [r0]
	cmp r3, #0x80000000
	movne r2, r3
	ldrh r3, [r0, #6]
	lsl r3, r3, #0x1e
	lsrs r3, r3, #0x1e
	beq _0209DAE4
	cmp r3, #1
	beq _0209DB38
	bx lr
_0209DAE4:
	ldr r3, [r1, #0x3c]
	cmp r3, r2
	bge _0209DB10
	ldr r0, [r1, #0xc]
	add r0, r3, r0
	cmp r0, r2
	subgt r0, r2, r3
	strgt r0, [r1, #0xc]
	ldrhgt r0, [r1, #0x24]
	strhgt r0, [r1, #0x26]
	bxgt lr
_0209DB10:
	cmp r3, r2
	bxlt lr
	ldr r0, [r1, #0xc]
	add r0, r3, r0
	cmp r0, r2
	sublt r0, r2, r3
	strlt r0, [r1, #0xc]
	ldrhlt r0, [r1, #0x24]
	strhlt r0, [r1, #0x26]
	bx lr
_0209DB38:
	ldr ip, [r1, #0x3c]
	cmp ip, r2
	bge _0209DB88
	ldr r3, [r1, #0xc]
	add r3, ip, r3
	cmp r3, r2
	ble _0209DB88
	sub r2, r2, ip
	str r2, [r1, #0xc]
	ldrsh r2, [r0, #4]
	ldr r3, [r1, #0x18]
	mov r0, #0x800
	smull ip, r2, r3, r2
	adds r3, ip, r0
	adc r0, r2, #0
	lsr r2, r3, #0xc
	orr r2, r2, r0, lsl #20
	rsb r0, r2, #0
	str r0, [r1, #0x18]
	bx lr
_0209DB88:
	cmp ip, r2
	bxlt lr
	ldr r3, [r1, #0xc]
	add r3, ip, r3
	cmp r3, r2
	bxge lr
	sub r2, r2, ip
	str r2, [r1, #0xc]
	ldrsh r2, [r0, #4]
	ldr r3, [r1, #0x18]
	mov r0, #0x800
	smull ip, r2, r3, r2
	adds r3, ip, r0
	adc r0, r2, #0
	lsr r2, r3, #0xc
	orr r2, r2, r0, lsl #20
	rsb r0, r2, #0
	str r0, [r1, #0x18]
	bx lr
	arm_func_end FUN_0209DAB8

	arm_func_start FUN_0209DBD4
FUN_0209DBD4: @ 0x0209DBD4
	push {r4, lr}
	sub sp, sp, #0x28
	ldrh r2, [r0, #2]
	mov r4, r1
	cmp r2, #0
	beq _0209DC00
	cmp r2, #1
	beq _0209DC30
	cmp r2, #2
	beq _0209DC60
	b _0209DC8C
_0209DC00:
	ldrh r1, [r0]
	ldr r3, _0209DCA8 @ =0x021094DC
	add r0, sp, #0
	asr r1, r1, #4
	lsl r2, r1, #1
	add r1, r2, #1
	lsl ip, r2, #1
	lsl r2, r1, #1
	ldrsh r1, [r3, ip]
	ldrsh r2, [r3, r2]
	blx FUN_020CB0D0
	b _0209DC8C
_0209DC30:
	ldrh r1, [r0]
	ldr r3, _0209DCA8 @ =0x021094DC
	add r0, sp, #0
	asr r1, r1, #4
	lsl r2, r1, #1
	add r1, r2, #1
	lsl ip, r2, #1
	lsl r2, r1, #1
	ldrsh r1, [r3, ip]
	ldrsh r2, [r3, r2]
	blx FUN_020CB0EC
	b _0209DC8C
_0209DC60:
	ldrh r1, [r0]
	ldr r3, _0209DCA8 @ =0x021094DC
	add r0, sp, #0
	asr r1, r1, #4
	lsl r2, r1, #1
	add r1, r2, #1
	lsl ip, r2, #1
	lsl r2, r1, #1
	ldrsh r1, [r3, ip]
	ldrsh r2, [r3, r2]
	blx FUN_020CB108
_0209DC8C:
	add r0, r4, #8
	add r1, sp, #0
	mov r2, r0
	bl FUN_020CB630
	add sp, sp, #0x28
	pop {r4, lr}
	bx lr
	.align 2, 0
_0209DCA8: .4byte 0x021094DC
	arm_func_end FUN_0209DBD4

	arm_func_start FUN_0209DCAC
FUN_0209DCAC: @ 0x0209DCAC
	push {r4, lr}
	ldr ip, [r0]
	ldr r4, [r1, #8]
	ldrsh lr, [r0, #0xc]
	ldr r3, [r1, #0x14]
	sub r4, ip, r4
	sub r3, r4, r3
	mul r3, lr, r3
	ldr r4, [r2]
	add r3, r4, r3, asr #12
	str r3, [r2]
	ldr lr, [r0, #4]
	ldr ip, [r1, #0xc]
	ldrsh r4, [r0, #0xc]
	ldr r3, [r1, #0x18]
	sub ip, lr, ip
	sub r3, ip, r3
	mul r3, r4, r3
	ldr r4, [r2, #4]
	add r3, r4, r3, asr #12
	str r3, [r2, #4]
	ldr ip, [r0, #8]
	ldr r3, [r1, #0x10]
	ldrsh lr, [r0, #0xc]
	ldr r0, [r1, #0x1c]
	sub r1, ip, r3
	sub r0, r1, r0
	mul r0, lr, r0
	ldr r1, [r2, #8]
	add r0, r1, r0, asr #12
	str r0, [r2, #8]
	pop {r4, lr}
	bx lr
	arm_func_end FUN_0209DCAC

	arm_func_start FUN_0209DD30
FUN_0209DD30: @ 0x0209DD30
	push {r4, r5, lr}
	sub sp, sp, #4
	mov r5, r0
	ldrh r0, [r1, #0x26]
	ldrh r1, [r5, #6]
	mov r4, r2
	bl FUN_020F2998
	cmp r1, #0
	addne sp, sp, #4
	popne {r4, r5, lr}
	bxne lr
	ldr r2, _0209DDEC @ =0x021D43B8
	ldr r0, _0209DDF0 @ =0x5EEDF715
	ldr r3, [r2]
	ldr r1, _0209DDF4 @ =0x1B0CB173
	mla ip, r3, r0, r1
	str ip, [r2]
	ldrsh lr, [r5]
	lsr r3, ip, #0x17
	ldr ip, [r4]
	mul r3, lr, r3
	sub r3, r3, lr, lsl #8
	add r3, ip, r3, asr #8
	str r3, [r4]
	ldr r3, [r2]
	mla ip, r3, r0, r1
	str ip, [r2]
	ldrsh lr, [r5, #2]
	lsr r3, ip, #0x17
	ldr ip, [r4, #4]
	mul r3, lr, r3
	sub r3, r3, lr, lsl #8
	add r3, ip, r3, asr #8
	str r3, [r4, #4]
	ldr r3, [r2]
	mla r0, r3, r0, r1
	str r0, [r2]
	ldrsh r2, [r5, #4]
	lsr r0, r0, #0x17
	ldr r1, [r4, #8]
	mul r0, r2, r0
	sub r0, r0, r2, lsl #8
	add r0, r1, r0, asr #8
	str r0, [r4, #8]
	add sp, sp, #4
	pop {r4, r5, lr}
	bx lr
	.align 2, 0
_0209DDEC: .4byte 0x021D43B8
_0209DDF0: .4byte 0x5EEDF715
_0209DDF4: .4byte 0x1B0CB173
	arm_func_end FUN_0209DD30

	arm_func_start FUN_0209DDF8
FUN_0209DDF8: @ 0x0209DDF8
	ldrsh r1, [r0]
	ldr r3, [r2]
	add r1, r3, r1
	str r1, [r2]
	ldrsh r1, [r0, #2]
	ldr r3, [r2, #4]
	add r1, r3, r1
	str r1, [r2, #4]
	ldrsh r0, [r0, #4]
	ldr r1, [r2, #8]
	add r0, r1, r0
	str r0, [r2, #8]
	bx lr
	arm_func_end FUN_0209DDF8

	arm_func_start FUN_0209DE2C
FUN_0209DE2C: @ 0x0209DE2C
	ldr r3, [r1]
	cmp r3, #0
	bne _0209DE6C
	ldr r2, [r0]
	cmp r2, r1
	moveq r2, #0
	streq r2, [r0]
	streq r2, [r0, #8]
	beq _0209DE98
	ldr r2, [r1, #4]
	mov r3, #0
	str r3, [r2]
	ldr r2, [r0, #8]
	ldr r2, [r2, #4]
	str r2, [r0, #8]
	b _0209DE98
_0209DE6C:
	ldr r2, [r0]
	cmp r2, r1
	streq r3, [r0]
	ldreq r2, [r0]
	moveq r3, #0
	streq r3, [r2, #4]
	ldrne r2, [r1, #4]
	strne r2, [r3, #4]
	ldrne r3, [r1]
	ldrne r2, [r1, #4]
	strne r3, [r2]
_0209DE98:
	ldr r2, [r0, #4]
	sub r2, r2, #1
	str r2, [r0, #4]
	mov r0, r1
	bx lr
	arm_func_end FUN_0209DE2C

	arm_func_start FUN_0209DEAC
FUN_0209DEAC: @ 0x0209DEAC
	ldr r2, [r0]
	mov r3, #0
	mov ip, r3
	cmp r2, #0
	beq _0209DEF0
	ldr r1, [r2]
	mov ip, r2
	str r1, [r0]
	ldr r1, [r0]
	cmp r1, #0
	ldrne r1, [r2]
	strne r3, [r1, #4]
	streq r3, [r0]
	streq r3, [r0, #8]
	ldr r1, [r0, #4]
	sub r1, r1, #1
	str r1, [r0, #4]
_0209DEF0:
	mov r0, ip
	bx lr
	arm_func_end FUN_0209DEAC

	arm_func_start FUN_0209DEF8
FUN_0209DEF8: @ 0x0209DEF8
	ldr r2, [r0]
	cmp r2, #0
	bne _0209DF20
	str r1, [r0]
	str r1, [r0, #8]
	mov r2, #0
	str r2, [r1]
	ldr r2, [r1]
	str r2, [r1, #4]
	b _0209DF38
_0209DF20:
	str r2, [r1]
	mov r2, #0
	str r2, [r1, #4]
	ldr r2, [r0]
	str r1, [r2, #4]
	str r1, [r0]
_0209DF38:
	ldr r1, [r0, #4]
	add r1, r1, #1
	str r1, [r0, #4]
	bx lr
	arm_func_end FUN_0209DEF8

	arm_func_start FUN_0209DF48
FUN_0209DF48: @ 0x0209DF48
	push {r4, lr}
	ldr ip, _0209DF98 @ =0x021D43B8
	ldr r2, _0209DF9C @ =0x5EEDF715
	ldr r4, [ip]
	ldr r3, _0209DFA0 @ =0x1B0CB173
	mov r1, r0
	mla lr, r4, r2, r3
	str lr, [ip]
	asr r4, lr, #8
	str r4, [r0]
	ldr r4, [ip]
	mov lr, #0
	mla r2, r4, r2, r3
	str r2, [ip]
	asr r2, r2, #8
	str r2, [r0, #4]
	str lr, [r0, #8]
	bl FUN_020CCFE0
	pop {r4, lr}
	bx lr
	.align 2, 0
_0209DF98: .4byte 0x021D43B8
_0209DF9C: .4byte 0x5EEDF715
_0209DFA0: .4byte 0x1B0CB173
	arm_func_end FUN_0209DF48

	arm_func_start FUN_0209DFA4
FUN_0209DFA4: @ 0x0209DFA4
	push {r4, lr}
	ldr ip, _0209E000 @ =0x021D43B8
	ldr r2, _0209E004 @ =0x5EEDF715
	ldr r4, [ip]
	ldr r3, _0209E008 @ =0x1B0CB173
	mov r1, r0
	mla lr, r4, r2, r3
	str lr, [ip]
	asr r4, lr, #8
	str r4, [r0]
	ldr lr, [ip]
	mla r4, lr, r2, r3
	str r4, [ip]
	asr lr, r4, #8
	str lr, [r0, #4]
	ldr lr, [ip]
	mla r2, lr, r2, r3
	str r2, [ip]
	asr r2, r2, #8
	str r2, [r0, #8]
	bl FUN_020CCFE0
	pop {r4, lr}
	bx lr
	.align 2, 0
_0209E000: .4byte 0x021D43B8
_0209E004: .4byte 0x5EEDF715
_0209E008: .4byte 0x1B0CB173
	arm_func_end FUN_0209DFA4

	arm_func_start FUN_0209E00C
FUN_0209E00C: @ 0x0209E00C
	push {r4, r5, r6, r7, r8, lr}
	mov r7, r0
	mov r6, r1
	mov r5, r2
	bl FUN_020D6548
	mov r0, #0xf
	mov r1, #1
	bl FUN_020D66A0
	cmp r0, #0
	moveq r0, #2
	popeq {r4, r5, r6, r7, r8, pc}
	ldr r8, _0209E234 @ =0x021D43BC
	ldrh r0, [r8]
	cmp r0, #0
	bne _0209E06C
	mvn r4, #2
_0209E04C:
	bl FUN_020D15C4
	cmp r0, r4
	moveq r0, #7
	popeq {r4, r5, r6, r7, r8, pc}
	strh r0, [r8]
	ldrh r0, [r8]
	cmp r0, #0
	beq _0209E04C
_0209E06C:
	bl FUN_020D3A38
	ldr r1, _0209E234 @ =0x021D43BC
	mov r4, r0
	ldr r2, [r1, #8]
	cmp r2, #0
	beq _0209E090
	bl FUN_020D3A4C
	mov r0, #5
	pop {r4, r5, r6, r7, r8, pc}
_0209E090:
	ldrh r2, [r1, #2]
	cmp r2, #0
	beq _0209E0A8
	bl FUN_020D3A4C
	mov r0, #5
	pop {r4, r5, r6, r7, r8, pc}
_0209E0A8:
	cmp r7, #4
	beq _0209E0C4
	cmp r7, #8
	beq _0209E104
	cmp r7, #0xc
	beq _0209E144
	b _0209E18C
_0209E0C4:
	ldrh r1, [r1]
	mov r0, #4
	bl FUN_020D3D30
	cmp r0, #0
	bne _0209E0E8
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, #6
	pop {r4, r5, r6, r7, r8, pc}
_0209E0E8:
	ldr r0, _0209E234 @ =0x021D43BC
	mov r2, #4
	ldr r1, _0209E238 @ =0x04000242
	strh r2, [r0, #2]
	mov r0, #0x82
	strb r0, [r1]
	b _0209E198
_0209E104:
	ldrh r1, [r1]
	mov r0, #8
	bl FUN_020D3D30
	cmp r0, #0
	bne _0209E128
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, #6
	pop {r4, r5, r6, r7, r8, pc}
_0209E128:
	ldr r0, _0209E234 @ =0x021D43BC
	mov r2, #8
	ldr r1, _0209E23C @ =0x04000243
	strh r2, [r0, #2]
	mov r0, #0x82
	strb r0, [r1]
	b _0209E198
_0209E144:
	ldrh r1, [r1]
	mov r0, #0xc
	bl FUN_020D3D30
	cmp r0, #0
	bne _0209E168
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, #6
	pop {r4, r5, r6, r7, r8, pc}
_0209E168:
	ldr r0, _0209E234 @ =0x021D43BC
	mov r2, #0xc
	ldr r1, _0209E238 @ =0x04000242
	strh r2, [r0, #2]
	mov r0, #0x82
	strb r0, [r1]
	mov r0, #0x8a
	strb r0, [r1, #1]
	b _0209E198
_0209E18C:
	bl FUN_020D3A4C
	mov r0, #3
	pop {r4, r5, r6, r7, r8, pc}
_0209E198:
	mov r0, #0xf
	mov r1, #0
	bl FUN_020D66A0
	cmp r0, #0
	bne _0209E1B8
	ldr r1, _0209E240 @ =FUN_0209E328
	mov r0, #0xf
	bl FUN_020D6654
_0209E1B8:
	cmp r6, #0
	ldrne r0, _0209E234 @ =0x021D43BC
	strne r6, [r0, #8]
	bne _0209E1D4
	ldr r1, _0209E244 @ =FUN_0209E400
	ldr r0, _0209E234 @ =0x021D43BC
	str r1, [r0, #8]
_0209E1D4:
	ldr r3, _0209E234 @ =0x021D43BC
	mov r0, #0xf
	mov r1, #0x10000
	mov r2, #0
	str r5, [r3, #4]
	bl FUN_020D66C4
	cmp r0, #0
	bge _0209E224
	ldr r1, _0209E234 @ =0x021D43BC
	ldrh r0, [r1, #2]
	ldrh r1, [r1]
	bl FUN_020D3DF0
	ldr r1, _0209E234 @ =0x021D43BC
	mov r2, #0
	strh r2, [r1, #2]
	mov r0, r4
	str r2, [r1, #8]
	bl FUN_020D3A4C
	mov r0, #4
	pop {r4, r5, r6, r7, r8, pc}
_0209E224:
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, #1
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0
_0209E234: .4byte 0x021D43BC
_0209E238: .4byte 0x04000242
_0209E23C: .4byte 0x04000243
_0209E240: .4byte FUN_0209E328
_0209E244: .4byte FUN_0209E400
	arm_func_end FUN_0209E00C

	arm_func_start FUN_0209E248
FUN_0209E248: @ 0x0209E248
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	bl FUN_020D6548
	mov r0, #0xf
	mov r1, #1
	bl FUN_020D66A0
	cmp r0, #0
	moveq r0, #2
	popeq {r4, r5, r6, pc}
	bl FUN_020D3A38
	ldr r1, _0209E31C @ =0x021D43BC
	mov r4, r0
	ldr r1, [r1, #8]
	cmp r1, #0
	beq _0209E294
	bl FUN_020D3A4C
	mov r0, #5
	pop {r4, r5, r6, pc}
_0209E294:
	mov r0, #0xf
	mov r1, #0
	bl FUN_020D66A0
	cmp r0, #0
	bne _0209E2B4
	ldr r1, _0209E320 @ =FUN_0209E328
	mov r0, #0xf
	bl FUN_020D6654
_0209E2B4:
	cmp r6, #0
	ldrne r0, _0209E31C @ =0x021D43BC
	strne r6, [r0, #8]
	bne _0209E2D0
	ldr r1, _0209E324 @ =FUN_0209E400
	ldr r0, _0209E31C @ =0x021D43BC
	str r1, [r0, #8]
_0209E2D0:
	ldr r3, _0209E31C @ =0x021D43BC
	mov r0, #0xf
	mov r1, #0x20000
	mov r2, #0
	str r5, [r3, #4]
	bl FUN_020D66C4
	cmp r0, #0
	bge _0209E30C
	ldr r1, _0209E31C @ =0x021D43BC
	mov r2, #0
	mov r0, r4
	str r2, [r1, #8]
	bl FUN_020D3A4C
	mov r0, #4
	pop {r4, r5, r6, pc}
_0209E30C:
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, #1
	pop {r4, r5, r6, pc}
	.align 2, 0
_0209E31C: .4byte 0x021D43BC
_0209E320: .4byte FUN_0209E328
_0209E324: .4byte FUN_0209E400
	arm_func_end FUN_0209E248

	arm_func_start FUN_0209E328
FUN_0209E328: @ 0x0209E328
	push {r4, r5, r6, lr}
	mov r0, #0x10000
	ldr r2, _0209E3FC @ =0x021D43BC
	rsb r0, r0, #0
	and r0, r1, r0
	cmp r0, #0x10000
	and r6, r1, #0xff
	ldr r4, [r2, #8]
	ldr r5, [r2, #4]
	beq _0209E35C
	cmp r0, #0x20000
	beq _0209E394
	b _0209E3D4
_0209E35C:
	cmp r6, #7
	bne _0209E3D4
	ldrh r0, [r2, #2]
	cmp r0, #0
	ldrhne r0, [r2]
	cmpne r0, #0
	beq _0209E3D4
	ldrh r0, [r2, #2]
	ldrh r1, [r2]
	bl FUN_020D3DF0
	ldr r0, _0209E3FC @ =0x021D43BC
	mov r1, #0
	strh r1, [r0, #2]
	b _0209E3D4
_0209E394:
	cmp r6, #0
	bne _0209E3C8
	ldrh r0, [r2, #2]
	cmp r0, #0
	ldrhne r0, [r2]
	cmpne r0, #0
	beq _0209E3C8
	ldrh r0, [r2, #2]
	ldrh r1, [r2]
	bl FUN_020D3DF0
	ldr r0, _0209E3FC @ =0x021D43BC
	mov r1, #0
	strh r1, [r0, #2]
_0209E3C8:
	mov r0, #0xf
	mov r1, #0
	bl FUN_020D6654
_0209E3D4:
	cmp r4, #0
	popeq {r4, r5, r6, pc}
	ldr r2, _0209E3FC @ =0x021D43BC
	mov r3, #0
	str r3, [r2, #8]
	mov r0, r5
	mov r1, r6
	str r3, [r2, #4]
	blx r4
	pop {r4, r5, r6, pc}
	.align 2, 0
_0209E3FC: .4byte 0x021D43BC
	arm_func_end FUN_0209E328

	arm_func_start FUN_0209E400
FUN_0209E400: @ 0x0209E400
	bx lr
	arm_func_end FUN_0209E400

	arm_func_start FUN_0209E404
FUN_0209E404: @ 0x0209E404
	push {r3, lr}
	ldr r1, _0209E42C @ =0x021D43C8
	mov r2, r0
	ldr r0, [r1, #8]
	mov r1, #0x300
	bl FUN_0209ED38
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	pop {r3, pc}
	.align 2, 0
_0209E42C: .4byte 0x021D43C8
	arm_func_end FUN_0209E404

	arm_func_start FUN_0209E430
FUN_0209E430: @ 0x0209E430
	push {r4, lr}
	mov r4, r0
	ldr r0, _0209E4F0 @ =0x021D43D4
	mov r1, r4
	mov r2, #6
	bl FUN_020D4A50
	ldr r1, _0209E4F4 @ =0x000007FF
	ldr r3, [r4]
	sub r0, r1, #0x800
	ldr r2, [r4, #4]
	and r0, r3, r0
	str r0, [r4]
	and r1, r2, r1
	str r1, [r4, #4]
	ldr r0, _0209E4F8 @ =0x021D43D9
	add r1, r4, #8
	mov r2, #6
	bl FUN_020D4A50
	ldr r1, [r4, #8]
	ldr r0, [r4, #0xc]
	lsr r1, r1, #3
	orr r1, r1, r0, lsl #29
	str r1, [r4, #8]
	lsr r3, r0, #3
	str r3, [r4, #0xc]
	ldr r1, _0209E4F4 @ =0x000007FF
	ldr r2, [r4, #8]
	sub r0, r1, #0x800
	and r0, r2, r0
	str r0, [r4, #8]
	and r1, r1, r3
	str r1, [r4, #0xc]
	ldr r0, _0209E4FC @ =0x021D43DE
	add r1, r4, #0x10
	mov r2, #2
	bl FUN_020D4A50
	ldrh r1, [r4, #0x10]
	ldr r3, _0209E500 @ =0x000003FF
	ldr r0, _0209E504 @ =0x021D43E0
	asr r1, r1, #6
	strh r1, [r4, #0x10]
	ldrh ip, [r4, #0x10]
	add r1, r4, #0x12
	mov r2, #2
	and r3, ip, r3
	strh r3, [r4, #0x10]
	bl FUN_020D4A50
	pop {r4, pc}
	.align 2, 0
_0209E4F0: .4byte 0x021D43D4
_0209E4F4: .4byte 0x000007FF
_0209E4F8: .4byte 0x021D43D9
_0209E4FC: .4byte 0x021D43DE
_0209E500: .4byte 0x000003FF
_0209E504: .4byte 0x021D43E0
	arm_func_end FUN_0209E430

	arm_func_start FUN_0209E508
FUN_0209E508: @ 0x0209E508
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	ldr r2, _0209E5D8 @ =0x021D43C8
	mov sl, r1
	ldr sb, [r2, #8]
	bl FUN_0209EF2C
	ldr r1, _0209E5DC @ =0x0000A001
	add r0, sl, #0x200
	bl FUN_020E389C
	mov r5, #0x100
	ldr r6, _0209E5E0 @ =0x021D43D4
	mov r8, #0
	mov r4, r5
	mov fp, #0xe
	mov r7, r5
_0209E540:
	mov r0, sb
	mov r1, r7
	mov r2, sl
	bl FUN_0209ED38
	cmp r0, #0
	bne _0209E564
	bl FUN_020D3F48
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0209E564:
	mov r0, r6
	mov r2, fp
	add r1, sl, #0xf0
	bl FUN_020D4A50
	mov r1, sl
	mov r2, #0xfe
	add r0, sl, #0x200
	bl FUN_020E3A04
	strh r0, [sl, #0xfe]
_0209E588:
	mov r0, sb
	mov r1, r5
	mov r2, sl
	bl FUN_0209EDC8
	mov r0, sl
	mov r1, sb
	mov r2, r4
	add r3, sl, #0x100
	bl FUN_0209EE44
	cmp r0, #0
	beq _0209E588
	add r8, r8, #1
	cmp r8, #2
	add sb, sb, #0x100
	blt _0209E540
	bl FUN_0209EE90
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_0209E5D8: .4byte 0x021D43C8
_0209E5DC: .4byte 0x0000A001
_0209E5E0: .4byte 0x021D43D4
	arm_func_end FUN_0209E508

	arm_func_start FUN_0209E5E4
FUN_0209E5E4: @ 0x0209E5E4
	push {r4, lr}
	mov r4, r0
	mov r0, #0x20
	mov r1, r0
	mov r2, r4
	bl FUN_0209ED38
	cmp r0, #0
	moveq r0, #0
	popeq {r4, pc}
	ldrh r2, [r4]
	ldr r1, _0209E624 @ =0x021D43C8
	mov r0, #1
	lsl r2, r2, #3
	sub r2, r2, #0x400
	str r2, [r1, #8]
	pop {r4, pc}
	.align 2, 0
_0209E624: .4byte 0x021D43C8
	arm_func_end FUN_0209E5E4

	arm_func_start FUN_0209E628
FUN_0209E628: @ 0x0209E628
	push {r3, lr}
	ldr r1, _0209E650 @ =0x021D43C8
	mov r2, r0
	ldr r0, [r1, #8]
	mov r1, #0x400
	bl FUN_0209ED38
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	pop {r3, pc}
	.align 2, 0
_0209E650: .4byte 0x021D43C8
	arm_func_end FUN_0209E628

	arm_func_start FUN_0209E654
FUN_0209E654: @ 0x0209E654
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	ldr r3, _0209E6D8 @ =0x021D43C8
	mov sl, #0x100
	ldr r5, [r3, #8]
	mov r8, r0
	mov r7, r1
	mov r6, r2
	mov r4, #0
	mov sb, sl
_0209E678:
	ldr r0, [r7, r4, lsl #2]
	cmp r0, #0
	beq _0209E6B0
_0209E684:
	mov r0, r5
	mov r1, sl
	mov r2, r8
	bl FUN_0209EDC8
	mov r0, r8
	mov r1, r5
	mov r2, sb
	mov r3, r6
	bl FUN_0209EE44
	cmp r0, #0
	beq _0209E684
_0209E6B0:
	add r4, r4, #1
	cmp r4, #4
	add r8, r8, #0x100
	add r5, r5, #0x100
	blt _0209E678
	bl FUN_0209EE90
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0
_0209E6D8: .4byte 0x021D43C8
	arm_func_end FUN_0209E654

	arm_func_start FUN_0209E6DC
FUN_0209E6DC: @ 0x0209E6DC
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	ldr r1, _0209E76C @ =0x021D43C8
	mov r8, r0
	mov sl, #0x100
	ldr r6, [r1, #8]
	mov r7, r8
	mov r5, #0
	mov sb, sl
	mov r4, #0xfe
_0209E700:
	mov r1, r7
	mov r2, r4
	add r0, r8, #0x500
	bl FUN_020E3A04
	add r1, r8, r5, lsl #8
	strh r0, [r1, #0xfe]
_0209E718:
	mov r0, r6
	mov r1, sl
	mov r2, r7
	bl FUN_0209EDC8
	mov r0, r7
	mov r1, r6
	mov r2, sb
	add r3, r8, #0x400
	bl FUN_0209EE44
	cmp r0, #0
	beq _0209E718
	add r5, r5, #1
	cmp r5, #4
	add r7, r7, #0x100
	add r6, r6, #0x100
	blt _0209E700
	bl FUN_0209EE90
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0
_0209E76C: .4byte 0x021D43C8
	arm_func_end FUN_0209E6DC

	arm_func_start FUN_0209E770
FUN_0209E770: @ 0x0209E770
	ldr ip, _0209E780 @ =FUN_020D4A50
	ldr r1, _0209E784 @ =0x021D43D4
	mov r2, #0xe
	bx ip
	.align 2, 0
_0209E780: .4byte FUN_020D4A50
_0209E784: .4byte 0x021D43D4
	arm_func_end FUN_0209E770

	arm_func_start FUN_0209E788
FUN_0209E788: @ 0x0209E788
	push {r4, lr}
	mov ip, #0
	mov r3, ip
	mov r2, ip
_0209E798:
	ldrb r4, [r0, ip]
	mov lr, r2
_0209E7A0:
	asr r1, r4, lr
	tst r1, #1
	add lr, lr, #1
	addne r3, r3, #1
	cmp lr, #8
	blt _0209E7A0
	add ip, ip, #1
	cmp ip, #4
	blt _0209E798
	and r0, r3, #0xff
	pop {r4, pc}
	arm_func_end FUN_0209E788

	arm_func_start FUN_0209E7CC
FUN_0209E7CC: @ 0x0209E7CC
	mvn r2, #0
	mov r3, #0
	eor r2, r2, r2, lsr r0
	mov ip, r3
_0209E7DC:
	rsb r0, ip, #0x18
	lsr r0, r2, r0
	strb r0, [r1, r3]
	add r3, r3, #1
	cmp r3, #4
	add ip, ip, #8
	blt _0209E7DC
	bx lr
	arm_func_end FUN_0209E7CC

	arm_func_start FUN_0209E7FC
FUN_0209E7FC: @ 0x0209E7FC
	mov r2, #0
_0209E800:
	ldrb r1, [r0, r2]
	cmp r1, #0
	movne r0, #1
	bxne lr
	add r2, r2, #1
	cmp r2, #0x20
	blt _0209E800
	mov r0, #0
	bx lr
	arm_func_end FUN_0209E7FC

	arm_func_start FUN_0209E824
FUN_0209E824: @ 0x0209E824
	push {r3, r4, r5, lr}
	sub sp, sp, #8
	mov r5, r0
	mov r4, r1
	bl FUN_0209E8A0
	cmp r0, #0
	addeq sp, sp, #8
	moveq r0, #0
	popeq {r3, r4, r5, pc}
	add r1, sp, #4
	mov r0, r5
	mov r2, #4
	bl FUN_020D4A50
	add r1, sp, #0
	mov r0, r4
	mov r2, #4
	bl FUN_020D4A50
	ldr r3, [sp]
	ldr r2, [sp, #4]
	mvn r0, #1
	orr r1, r2, r3
	cmp r1, r0
	addeq sp, sp, #8
	moveq r0, #0
	popeq {r3, r4, r5, pc}
	mvn r0, r3
	tst r2, r0
	movne r0, #1
	moveq r0, #0
	add sp, sp, #8
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0209E824

	arm_func_start FUN_0209E8A0
FUN_0209E8A0: @ 0x0209E8A0
	ldrb r0, [r0]
	cmp r0, #0x7f
	moveq r0, #0
	bxeq lr
	cmp r0, #1
	movlo r0, #0
	bxlo lr
	cmp r0, #0xdf
	movls r0, #1
	movhi r0, #0
	bx lr
	arm_func_end FUN_0209E8A0

	arm_func_start FUN_0209E8CC
FUN_0209E8CC: @ 0x0209E8CC
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x3c
	ldr sl, _0209ED20 @ =0x021D4400
	lsr r8, r1, #0x10
	lsl r4, sl, #8
	mov sb, r4
	and r4, r4, #0xff00
	lsl r1, r1, #0x10
	orr r4, r4, #0x20000
	lsr r5, r3, #0x10
	mov r7, r0
	ldr ip, _0209ED24 @ =0x01020000
	lsr r1, r1, #0x10
	str r4, [sp, #0x30]
	orr r4, r1, #0x10000
	lsl r3, r3, #0x10
	add r1, ip, #0x30000
	orr r1, r1, r3, lsr #16
	str r1, [sp, #0x10]
	lsr r1, r3, #0x10
	orr r1, r1, #0x1040000
	ldr r0, _0209ED28 @ =0x02002200
	str r1, [sp, #0x24]
	orr r1, r0, sl, lsr #24
	str r1, [sp, #0x28]
	ldr r1, [sp, #0x30]
	lsr sb, sb, #0x10
	orr r1, r1, #0x1000000
	str r1, [sp, #0x30]
	add r1, r0, #0x300
	and r8, r8, #0xff
	add r0, r0, #0x100
	orr r0, r8, r0
	orr r1, r8, r1
	str r0, [sp]
	orr r0, r2, #0x20000
	str r0, [sp, #0x1c]
	orr r0, r5, #0x30000
	str r0, [sp, #0x20]
	orr r0, r5, #0x40000
	str r0, [sp, #0xc]
	ldr r0, _0209ED2C @ =0x03002100
	mov r6, #0
	sub r0, r0, #0x100
	str r0, [sp, #0x14]
	lsr r0, r2, #0x10
	orr r0, r0, #0x20000
	str r0, [sp, #4]
	lsl r0, r2, #0x10
	lsr r0, r0, #0x10
	orr sb, sb, #0x10000
	orr r0, r0, #0x30000
	str sb, [sp, #0x2c]
	str r1, [sp, #0x18]
	str r0, [sp, #8]
	mov r5, r6
	mov r8, #0xfa0
_0209E9B0:
	cmp r6, #0
	bne _0209EBF0
	ldr r0, _0209ED30 @ =0x021D43C8
	cmp r7, #7
	str r5, [r0, #4]
	addls pc, pc, r7, lsl #2
	b _0209E9B0
_0209E9CC: @ jump table
	b _0209E9B0 @ case 0
	b _0209E9EC @ case 1
	b _0209EA98 @ case 2
	b _0209EAB8 @ case 3
	b _0209EB54 @ case 4
	b _0209EB54 @ case 5
	b _0209EBAC @ case 6
	b _0209EBD0 @ case 7
_0209E9EC:
	ldr r1, [sp]
	mov r0, #4
	mov r2, r5
	bl FUN_020D66C4
	cmp r0, #0
	movlt r6, #0
	blt _0209E9B0
	mov r0, #4
	mov r1, r4
	mov r2, #0
	bl FUN_020D66C4
	cmp r0, #0
	movlt r6, #0
	blt _0209E9B0
	ldr r1, [sp, #4]
	mov r0, #4
	mov r2, #0
	bl FUN_020D66C4
	cmp r0, #0
	movlt r6, #0
	blt _0209E9B0
	ldr r1, [sp, #8]
	mov r0, #4
	mov r2, #0
	bl FUN_020D66C4
	cmp r0, #0
	movlt r6, #0
	blt _0209E9B0
	ldr r1, [sp, #0xc]
	mov r0, #4
	mov r2, #0
	bl FUN_020D66C4
	cmp r0, #0
	movlt r6, #0
	blt _0209E9B0
	ldr r1, [sp, #0x10]
	mov r0, #4
	mov r2, #0
	bl FUN_020D66C4
	cmp r0, #0
	movlt r6, #0
	movge r6, #1
	b _0209E9B0
_0209EA98:
	ldr r1, [sp, #0x14]
	mov r0, #4
	mov r2, r5
	bl FUN_020D66C4
	cmp r0, #0
	movlt r6, #0
	movge r6, #1
	b _0209E9B0
_0209EAB8:
	ldr r1, [sp, #0x18]
	mov r0, #4
	mov r2, r5
	bl FUN_020D66C4
	cmp r0, #0
	movlt r6, #0
	blt _0209EB44
	mov r0, #4
	mov r1, r4
	mov r2, #0
	bl FUN_020D66C4
	cmp r0, #0
	movlt r6, #0
	blt _0209EB44
	ldr r1, [sp, #0x1c]
	mov r0, #4
	mov r2, #0
	bl FUN_020D66C4
	cmp r0, #0
	movlt r6, #0
	blt _0209EB44
	ldr r1, [sp, #0x20]
	mov r0, #4
	mov r2, #0
	bl FUN_020D66C4
	cmp r0, #0
	movlt r6, #0
	blt _0209EB44
	ldr r1, [sp, #0x24]
	mov r0, #4
	mov r2, #0
	bl FUN_020D66C4
	cmp r0, #0
	movlt r6, #0
	movge r6, #1
_0209EB44:
	bl FUN_020D34B0
	str r0, [sp, #0x34]
	mov fp, r1
	b _0209E9B0
_0209EB54:
	ldr r1, [sp, #0x28]
	mov r0, #4
	mov r2, r5
	bl FUN_020D66C4
	cmp r0, #0
	movlt r6, #0
	blt _0209E9B0
	ldr r1, [sp, #0x2c]
	mov r0, #4
	mov r2, #0
	bl FUN_020D66C4
	cmp r0, #0
	movlt r6, #0
	blt _0209E9B0
	ldr r1, [sp, #0x30]
	mov r0, #4
	mov r2, #0
	bl FUN_020D66C4
	cmp r0, #0
	movlt r6, #0
	movge r6, #1
	b _0209E9B0
_0209EBAC:
	ldr r1, _0209ED2C @ =0x03002100
	mov r0, #4
	add r1, r1, #0xc00
	mov r2, r5
	bl FUN_020D66C4
	cmp r0, #0
	movlt r6, #0
	movge r6, #1
	b _0209E9B0
_0209EBD0:
	ldr r1, _0209ED2C @ =0x03002100
	mov r0, #4
	mov r2, r5
	bl FUN_020D66C4
	cmp r0, #0
	movlt r6, #0
	movge r6, #1
	b _0209E9B0
_0209EBF0:
	ldr r0, _0209ED30 @ =0x021D43C8
	ldr r0, [r0, #4]
	cmp r0, #1
	bne _0209E9B0
	ldr r0, _0209ED30 @ =0x021D43C8
	mov r6, #0
	ldrh r0, [r0]
	cmp r0, #0
	bne _0209ED14
	cmp r7, #7
	addls pc, pc, r7, lsl #2
	b _0209E9B0
_0209EC20: @ jump table
	b _0209E9B0 @ case 0
	b _0209EC40 @ case 1
	b _0209EC4C @ case 2
	b _0209EC54 @ case 3
	b _0209EC5C @ case 4
	b _0209EC5C @ case 5
	b _0209ECFC @ case 6
	b _0209ED08 @ case 7
_0209EC40:
	add sp, sp, #0x3c
	mov r0, #1
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0209EC4C:
	mov r7, #4
	b _0209E9B0
_0209EC54:
	mov r7, #5
	b _0209E9B0
_0209EC5C:
	mov r0, sl
	mov r1, #1
	bl FUN_020D285C
	cmp r7, #4
	ldrb r0, [sl]
	bne _0209EC8C
	tst r0, #2
	movne r7, #3
	bne _0209E9B0
	add sp, sp, #0x3c
	mov r0, r6
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0209EC8C:
	tst r0, #1
	addeq sp, sp, #0x3c
	moveq r0, #1
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	tst r0, #0x20
	bne _0209ECE8
	bl FUN_020D34B0
	ldr r2, [sp, #0x34]
	mov ip, r6
	subs sb, r0, r2
	mov r0, #0x40
	sbc lr, r1, fp
	umull r0, r1, sb, r0
	mla r1, sb, ip, r1
	mov sb, #0x40
	mla r1, lr, sb, r1
	ldr r2, _0209ED34 @ =0x000082EA
	mov r3, r6
	bl FUN_020F2900
	mov r2, r6
	cmp r1, r2
	cmpeq r0, r8
	bls _0209ECF0
_0209ECE8:
	mov r7, #6
	b _0209E9B0
_0209ECF0:
	mov r0, #0x4000
	blx SVC_WaitByLoop
	b _0209E9B0
_0209ECFC:
	add sp, sp, #0x3c
	mov r0, r6
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0209ED08:
	add sp, sp, #0x3c
	mov r0, #1
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0209ED14:
	mov r0, r6
	add sp, sp, #0x3c
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_0209ED20: .4byte 0x021D4400
_0209ED24: .4byte 0x01020000
_0209ED28: .4byte 0x02002200
_0209ED2C: .4byte 0x03002100
_0209ED30: .4byte 0x021D43C8
_0209ED34: .4byte 0x000082EA
	arm_func_end FUN_0209E8CC

	arm_func_start FUN_0209ED38
FUN_0209ED38: @ 0x0209ED38
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r4, r2
	mov r6, r0
	mov r0, r4
	mov r5, r1
	bl FUN_020D285C
	mov r8, #4
	mov r7, #1
_0209ED58:
	mov r0, r8
	mov r1, r7
	bl FUN_020D66A0
	cmp r0, #0
	beq _0209ED58
	ldr r1, _0209EDC4 @ =FUN_0209EEFC
	mov r0, #4
	bl FUN_020D6654
	lsl r0, r5, #0x10
	lsr r8, r0, #0x10
	mov r7, #0x40000
	mov sb, #1
_0209ED88:
	mov r0, sb
	mov r1, r6
	mov r2, r8
	mov r3, r4
	bl FUN_0209E8CC
	cmp r0, #1
	beq _0209EDB0
	mov r0, r7
	blx SVC_WaitByLoop
	b _0209ED88
_0209EDB0:
	mov r0, r4
	mov r1, r5
	bl FUN_020D285C
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0
_0209EDC4: .4byte FUN_0209EEFC
	arm_func_end FUN_0209ED38

	arm_func_start FUN_0209EDC8
FUN_0209EDC8: @ 0x0209EDC8
	push {r4, r5, r6, r7, r8, lr}
	mov r8, r0
	mov r7, r1
	mov r6, r2
	mov r5, #4
	mov r4, #1
_0209EDE0:
	mov r0, r5
	mov r1, r4
	bl FUN_020D66A0
	cmp r0, #0
	beq _0209EDE0
	ldr r1, _0209EE40 @ =FUN_0209EEFC
	mov r0, #4
	bl FUN_020D6654
	mov r0, r6
	mov r1, r7
	bl FUN_020D2878
	mov r4, #0x40000
	mov r5, #2
_0209EE14:
	mov r0, r5
	mov r1, r8
	mov r2, r7
	mov r3, r6
	bl FUN_0209E8CC
	cmp r0, #1
	popeq {r4, r5, r6, r7, r8, pc}
	mov r0, r4
	blx SVC_WaitByLoop
	b _0209EE14
	arm_func_end FUN_0209EDC8

	arm_func_start FUN_0209EE3C
FUN_0209EE3C: @ 0x0209EE3C
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0
_0209EE40: .4byte FUN_0209EEFC
	arm_func_end FUN_0209EE3C

	arm_func_start FUN_0209EE44
FUN_0209EE44: @ 0x0209EE44
	push {r4, r5, r6, lr}
	mov r5, r2
	mov r4, r3
	mov r6, r0
	mov r0, r1
	mov r1, r5
	mov r2, r4
	bl FUN_0209ED38
	cmp r0, #0
	moveq r0, #0
	popeq {r4, r5, r6, pc}
	mov r0, r6
	mov r1, r4
	mov r2, r5
	bl FUN_020E5BB0
	cmp r0, #0
	moveq r0, #1
	movne r0, #0
	pop {r4, r5, r6, pc}
	arm_func_end FUN_0209EE44

	arm_func_start FUN_0209EE90
FUN_0209EE90: @ 0x0209EE90
	push {r4, r5, r6, lr}
	mov r5, #4
	mov r4, #1
_0209EE9C:
	mov r0, r5
	mov r1, r4
	bl FUN_020D66A0
	cmp r0, #0
	beq _0209EE9C
	ldr r1, _0209EEF8 @ =FUN_0209EEFC
	mov r0, #4
	bl FUN_020D6654
	mov r4, #0x40000
	mov r6, #7
	mov r5, #0
_0209EEC8:
	mov r0, r6
	mov r1, r5
	mov r2, r5
	mov r3, r5
	bl FUN_0209E8CC
	cmp r0, #1
	beq _0209EEF0
	mov r0, r4
	blx SVC_WaitByLoop
	b _0209EEC8
_0209EEF0:
	mov r0, #1
	pop {r4, r5, r6, pc}
	.align 2, 0
_0209EEF8: .4byte FUN_0209EEFC
	arm_func_end FUN_0209EE90

	arm_func_start FUN_0209EEFC
FUN_0209EEFC: @ 0x0209EEFC
	ldr r0, _0209EF28 @ =0x021D43C8
	and r1, r1, #0xff
	strh r1, [r0]
	mov r1, #1
	str r1, [r0, #4]
	cmp r2, #0
	movne r1, #0xff
	strhne r1, [r0]
	ldr r0, _0209EF28 @ =0x021D43C8
	ldrh r0, [r0]
	bx lr
	.align 2, 0
_0209EF28: .4byte 0x021D43C8
	arm_func_end FUN_0209EEFC

	arm_func_start FUN_0209EF2C
FUN_0209EF2C: @ 0x0209EF2C
	push {r4, lr}
	sub sp, sp, #8
	mov r4, r0
	ldr r3, [r4, #8]
	ldr r2, [r4, #0xc]
	ldr r1, _0209EFE0 @ =0x021D43D4
	str r2, [sp, #4]
	str r3, [sp]
	mov r2, #5
	bl FUN_020D4A50
	ldr r2, [sp]
	ldr r1, [sp, #4]
	lsr ip, r2, #5
	ldr lr, [r4, #4]
	lsr r3, r1, #5
	orr ip, ip, r1, lsl #27
	mov r0, #7
	and r1, r0, lr, lsr #8
	and r0, r2, #0x1f
	orr lr, r1, r0, lsl #3
	ldr r2, _0209EFE0 @ =0x021D43D4
	ldr r1, _0209EFE4 @ =0x021D43DA
	strb lr, [r2, #5]
	add r0, sp, #0
	str ip, [sp]
	str r3, [sp, #4]
	mov r2, #4
	bl FUN_020D4A50
	ldrh r0, [r4, #0x10]
	ldr r1, [sp, #4]
	ldr r3, _0209EFE0 @ =0x021D43D4
	and r1, r1, #0x3f
	lsl r0, r0, #0x1e
	orr r0, r1, r0, lsr #24
	strb r0, [r3, #0xa]
	ldrh r2, [r4, #0x10]
	add r0, r4, #0x12
	ldr r1, _0209EFE8 @ =0x021D43E0
	asr r4, r2, #2
	mov r2, #2
	strb r4, [r3, #0xb]
	bl FUN_020D4A50
	ldr r0, _0209EFE0 @ =0x021D43D4
	add sp, sp, #8
	pop {r4, pc}
	.align 2, 0
_0209EFE0: .4byte 0x021D43D4
_0209EFE4: .4byte 0x021D43DA
_0209EFE8: .4byte 0x021D43E0
	arm_func_end FUN_0209EF2C

	arm_func_start FUN_0209EFEC
FUN_0209EFEC: @ 0x0209EFEC
	ldr r0, _0209EFF4 @ =0x021D43D4
	bx lr
	.align 2, 0
_0209EFF4: .4byte 0x021D43D4
	arm_func_end FUN_0209EFEC

	arm_func_start FUN_0209EFF8
FUN_0209EFF8: @ 0x0209EFF8
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0x10
	mov r8, r0
	mov r1, #0
	mov r2, #0x700
	bl FUN_020D4994
	mov r0, r8
	bl FUN_0209E5E4
	cmp r0, #0
	addeq sp, sp, #0x10
	ldreq r0, _0209F2EC @ =0xFFFFD8EF
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	ldr r1, _0209F2F0 @ =0x0000A001
	add r0, r8, #0x500
	bl FUN_020E389C
	mov r0, r8
	bl FUN_0209E628
	cmp r0, #0
	addeq sp, sp, #0x10
	ldreq r0, _0209F2EC @ =0xFFFFD8EF
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	add r0, sp, #0
	mov r1, #0
	mov r2, #0x10
	bl FUN_020D4994
	mov r6, r8
	mov r7, r8
	mov r5, #0
	mov sl, #1
	add sb, sp, #0
	mov r4, #0xfe
_0209F074:
	mov r1, r6
	mov r2, r4
	add r0, r8, #0x500
	bl FUN_020E3A04
	add r1, r8, r5, lsl #8
	ldrh r1, [r1, #0xfe]
	cmp r0, r1
	bne _0209F0A4
	mov r0, r7
	bl FUN_0209F300
	cmp r0, #0
	strne sl, [sb, r5, lsl #2]
_0209F0A4:
	add r5, r5, #1
	cmp r5, #3
	add r6, r6, #0x100
	add r7, r7, #0x100
	blt _0209F074
	add r0, r8, #0x500
	add r1, r8, #0x300
	mov r2, #0xfe
	bl FUN_020E3A04
	add r1, r8, #0x300
	ldrh r1, [r1, #0xfe]
	cmp r0, r1
	moveq r0, #1
	ldr r1, [sp]
	streq r0, [sp, #0xc]
	cmp r1, #0
	ldrne r0, [sp, #4]
	cmpne r0, #0
	ldrne r0, [sp, #8]
	cmpne r0, #0
	ldrne r0, [sp, #0xc]
	cmpne r0, #0
	beq _0209F114
	add r0, r8, #0xf0
	bl FUN_0209E770
	add sp, sp, #0x10
	mov r0, #0
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_0209F114:
	cmp r1, #0
	ldreq r0, [sp, #4]
	cmpeq r0, #0
	ldreq r0, [sp, #8]
	cmpeq r0, #0
	ldreq r0, [sp, #0xc]
	cmpeq r0, #0
	bne _0209F158
	mov r0, r8
	bl FUN_0209F400
	mov r0, r8
	bl FUN_0209E6DC
	cmp r0, #0
	movne r0, #0
	add sp, sp, #0x10
	ldreq r0, _0209F2F4 @ =0xFFFFD8F0
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_0209F158:
	cmp r1, #0
	ldrne r0, [sp, #4]
	cmpne r0, #0
	bne _0209F1A0
	ldr r0, [sp, #8]
	cmp r0, #0
	ldrne r0, [sp, #0xc]
	cmpne r0, #0
	bne _0209F1A0
	mov r0, r8
	bl FUN_0209F400
	mov r0, r8
	bl FUN_0209E6DC
	cmp r0, #0
	movne r0, #0
	add sp, sp, #0x10
	ldreq r0, _0209F2F4 @ =0xFFFFD8F0
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_0209F1A0:
	cmp r1, #0
	ldreq r0, [sp, #4]
	cmpeq r0, #0
	bne _0209F1D4
	mov r0, r8
	bl FUN_0209F400
	mov r0, r8
	bl FUN_0209E6DC
	cmp r0, #0
	ldrne r0, _0209F2F8 @ =0xFFFFD8ED
	add sp, sp, #0x10
	ldreq r0, _0209F2F4 @ =0xFFFFD8F0
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_0209F1D4:
	cmp r1, #0
	bne _0209F204
	mov r0, r8
	mov r1, #0
	bl FUN_0209F480
	add r0, r8, #0x1f0
	add r1, r8, #0xf0
	mov r2, #0xe
	bl FUN_020D4A50
	ldrb r0, [r8, #0x1ef]
	strb r0, [r8, #0xef]
	b _0209F234
_0209F204:
	ldr r0, [sp, #4]
	cmp r0, #0
	bne _0209F234
	mov r0, r8
	mov r1, #1
	bl FUN_0209F480
	add r0, r8, #0xf0
	add r1, r8, #0x1f0
	mov r2, #0xe
	bl FUN_020D4A50
	ldrb r0, [r8, #0xef]
	strb r0, [r8, #0x1ef]
_0209F234:
	add r0, r8, #0xf0
	bl FUN_0209E770
	ldr r0, [sp, #8]
	cmp r0, #0
	bne _0209F254
	mov r0, r8
	mov r1, #2
	bl FUN_0209F480
_0209F254:
	ldr r0, [sp, #0xc]
	cmp r0, #0
	bne _0209F270
	add r1, r8, #0x300
	mov r0, #0
	mov r2, #0x100
	bl FUN_020D4790
_0209F270:
	mov r4, #0
	mov r5, r4
	mov r2, #1
	add r3, sp, #0
_0209F280:
	ldr r0, [r3, r5, lsl #2]
	cmp r0, #0
	bne _0209F2B4
	ldrb r0, [r8, #0xef]
	tst r0, r2, lsl r5
	beq _0209F2B4
	mov r1, r0
	mvn r0, r2, lsl r5
	and r0, r1, r0
	strb r0, [r8, #0xef]
	and r0, r0, #0xff
	mov r4, r2
	strb r0, [r8, #0x1ef]
_0209F2B4:
	add r5, r5, #1
	cmp r5, #3
	blt _0209F280
	mov r0, r8
	bl FUN_0209E6DC
	cmp r0, #0
	addeq sp, sp, #0x10
	ldreq r0, _0209F2F4 @ =0xFFFFD8F0
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	cmp r4, #0
	ldrne r0, _0209F2FC @ =0xFFFFD8EE
	moveq r0, #0
	add sp, sp, #0x10
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0
_0209F2EC: .4byte 0xFFFFD8EF
_0209F2F0: .4byte 0x0000A001
_0209F2F4: .4byte 0xFFFFD8F0
_0209F2F8: .4byte 0xFFFFD8ED
_0209F2FC: .4byte 0xFFFFD8EE
	arm_func_end FUN_0209EFF8

	arm_func_start FUN_0209F300
FUN_0209F300: @ 0x0209F300
	push {r3, r4, lr}
	sub sp, sp, #4
	mov r4, r0
	ldrb r0, [r4, #0xe7]
	cmp r0, #0xff
	addeq sp, sp, #4
	moveq r0, #1
	popeq {r3, r4, pc}
	cmp r0, #2
	addhi sp, sp, #4
	movhi r0, #0
	pophi {r3, r4, pc}
	add r0, r4, #0x40
	bl FUN_0209E7FC
	cmp r0, #0
	addeq sp, sp, #4
	moveq r0, #0
	popeq {r3, r4, pc}
	ldr r1, _0209F3FC @ =0x02108F9C
	add r0, r4, #0xc0
	mov r2, #4
	bl FUN_020E5BB0
	cmp r0, #0
	beq _0209F3B0
	add r0, r4, #0xc4
	bl FUN_0209E8A0
	cmp r0, #0
	addeq sp, sp, #4
	moveq r0, #0
	popeq {r3, r4, pc}
	ldrb r0, [r4, #0xd0]
	cmp r0, #0x20
	addhi sp, sp, #4
	movhi r0, #0
	pophi {r3, r4, pc}
	add r1, sp, #0
	bl FUN_0209E7CC
	add r1, sp, #0
	add r0, r4, #0xc0
	bl FUN_0209E824
	cmp r0, #0
	addeq sp, sp, #4
	moveq r0, #0
	popeq {r3, r4, pc}
_0209F3B0:
	ldr r1, _0209F3FC @ =0x02108F9C
	add r0, r4, #0xc8
	mov r2, #4
	bl FUN_020E5BB0
	cmp r0, #0
	beq _0209F3F0
	add r0, r4, #0xc8
	bl FUN_0209E8A0
	cmp r0, #0
	bne _0209F3F0
	add r0, r4, #0xcc
	bl FUN_0209E8A0
	cmp r0, #0
	addeq sp, sp, #4
	moveq r0, #0
	popeq {r3, r4, pc}
_0209F3F0:
	mov r0, #1
	add sp, sp, #4
	pop {r3, r4, pc}
	.align 2, 0
_0209F3FC: .4byte 0x02108F9C
	arm_func_end FUN_0209F300

	arm_func_start FUN_0209F400
FUN_0209F400: @ 0x0209F400
	push {r4, r5, r6, r7, lr}
	sub sp, sp, #0x14
	mov r7, r0
	mov r1, r7
	mov r0, #0
	mov r2, #0x400
	bl FUN_020D4790
	mov r2, #0
	mov r1, #0xff
_0209F424:
	add r0, r7, r2, lsl #8
	add r2, r2, #1
	strb r1, [r0, #0xe7]
	cmp r2, #3
	blt _0209F424
	add r0, sp, #0
	bl FUN_0209F630
	add r0, sp, #0
	bl FUN_0209EF2C
	mov r5, r0
	mov r6, #0
	mov r4, #0xe
_0209F454:
	mov r0, r5
	mov r2, r4
	add r1, r7, #0xf0
	bl FUN_020D4A50
	add r6, r6, #1
	cmp r6, #2
	add r7, r7, #0x100
	blt _0209F454
	mov r0, #0
	add sp, sp, #0x14
	pop {r4, r5, r6, r7, pc}
	arm_func_end FUN_0209F400

	arm_func_start FUN_0209F480
FUN_0209F480: @ 0x0209F480
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	add r1, r5, r4, lsl #8
	mov r0, #0
	mov r2, #0x100
	bl FUN_020D4790
	add r0, r5, r4, lsl #8
	mov r1, #0xff
	strb r1, [r0, #0xe7]
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0209F480

	arm_func_start FUN_0209F4AC
FUN_0209F4AC: @ 0x0209F4AC
	push {r3, r4, r5, r6, r7, lr}
	sub sp, sp, #0x10
	ldr r4, _0209F624 @ =0x0000FFFF
	mov lr, #0
	and ip, lr, #0
	add r5, r4, #0xff0000
	and r2, r2, #1
	lsl r6, ip, #2
	and r3, r3, #3
	and r5, r1, r5
	orr r1, r3, r2, lsl #2
	orr r6, r6, r2, lsr #30
	lsl r7, ip, #3
	and r2, r0, r4
	orr r0, r1, r5, lsl #3
	orr r1, r0, r2, lsl #27
	lsl r3, ip, #0x1b
	orr r3, r3, r2, lsr #5
	orr r7, r7, r5, lsr #29
	orr r0, ip, r6
	orr r0, r7, r0
	orr r0, r3, r0
	add r2, sp, #8
	str r1, [sp, #8]
	str r0, [sp, #0xc]
_0209F510:
	ldrb r0, [r2]
	add lr, lr, #1
	cmp lr, #6
	eor r0, r0, #0xd6
	strb r0, [r2], #1
	blt _0209F510
	ldr r2, _0209F628 @ =0x02108FA8
	add r4, sp, #8
	mov r5, #0
_0209F534:
	ldrb r3, [r4]
	add r5, r5, #1
	cmp r5, #5
	asr r0, r3, #4
	and r1, r0, #0xf
	and r0, r3, #0xf
	ldrb r1, [r2, r1]
	ldrb r0, [r2, r0]
	orr r0, r0, r1, lsl #4
	strb r0, [r4], #1
	blt _0209F534
	add r0, sp, #8
	add r1, sp, #0
	mov r2, #8
	bl FUN_020D4A50
	ldr r4, _0209F62C @ =0x02108FA0
	add r3, sp, #0
	mov r5, #0
	add r0, sp, #8
_0209F580:
	ldrb r2, [r3], #1
	ldrb r1, [r4], #1
	add r5, r5, #1
	cmp r5, #5
	strb r2, [r0, r1]
	blt _0209F580
	ldrb r2, [sp, #0xd]
	mov r1, #0
	ldr r3, [sp, #8]
	and r2, r2, #7
	strb r1, [sp, #0xf]
	strb r1, [sp, #0xe]
	strb r2, [sp, #0xd]
	ldr r2, [sp, #0xc]
	lsl r4, r3, #1
	lsl r2, r2, #1
	orr r2, r2, r3, lsr #31
	str r2, [sp, #0xc]
	ldrb r2, [sp, #0xd]
	str r4, [sp, #8]
	ldrb r3, [sp, #8]
	asr r2, r2, #3
	and r2, r2, #1
	orr r2, r3, r2
	strb r2, [sp, #8]
_0209F5E4:
	ldrb r2, [r0]
	add r1, r1, #1
	cmp r1, #6
	eor r2, r2, #0x67
	strb r2, [r0], #1
	blt _0209F5E4
	ldrb r0, [sp, #0xd]
	mov r1, #0
	strb r1, [sp, #0xf]
	and r0, r0, #7
	strb r1, [sp, #0xe]
	strb r0, [sp, #0xd]
	ldr r0, [sp, #8]
	ldr r1, [sp, #0xc]
	add sp, sp, #0x10
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_0209F624: .4byte 0x0000FFFF
_0209F628: .4byte 0x02108FA8
_0209F62C: .4byte 0x02108FA0
	arm_func_end FUN_0209F4AC

	arm_func_start FUN_0209F630
FUN_0209F630: @ 0x0209F630
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x24
	mov sl, r0
	bl FUN_0209E430
	bl FUN_020DB9C0
	add r0, sp, #0x14
	bl FUN_020DBA9C
	cmp r0, #0
	addne sp, sp, #0x24
	movne r0, #0
	popne {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	add r0, sp, #8
	bl FUN_020DBB48
	cmp r0, #0
	addne sp, sp, #0x24
	movne r0, #0
	popne {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	add r0, sp, #0x14
	add r1, sp, #8
	bl FUN_020DC330
	mov r4, r0
	mov r0, #0
	subs r2, r4, r0
	sbcs r2, r1, r0
	addlt sp, sp, #0x24
	poplt {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	bl FUN_020D3438
	cmp r0, #0
	beq _0209F6AC
	ldr r0, _0209F7FC @ =FUN_020D34B0
	adds r4, r4, r0
_0209F6AC:
	add r0, sp, #0
	bl FUN_020D3C40
	ldrb r0, [sp, #1]
	ldr r5, _0209F800 @ =0x5D588B65
	ldr r6, _0209F804 @ =0x00269EC3
	ldrb r1, [sp]
	mla sb, r4, r5, r6
	lsl r0, r0, #8
	orr r1, r0, r1, lsl #16
	ldrb r2, [sp, #2]
	ldr r0, _0209F808 @ =0x000009BF
	ldrb r7, [sp, #4]
	orr r1, r2, r1
	cmp r1, r0
	lsr r2, sb, #0x10
	mov r0, #0x3e8
	mul r3, r2, r0
	lsr r2, r3, #0x10
	movne r1, #1
	ldrb r0, [sp, #5]
	ldrb r4, [sp, #3]
	lsl r3, r7, #8
	moveq r1, #0
	orr r4, r3, r4, lsl #16
	strh r2, [sl, #0x10]
	mov r3, #0
	str r3, [sl]
	str r3, [sl, #4]
	ldrh r2, [sl, #0x12]
	and r7, r1, #0xff
	orr r8, r0, r4
	str r3, [sl, #8]
	cmp r2, #0
	str r3, [sl, #0xc]
	bne _0209F79C
	ldr r0, [sl, #8]
	cmp r3, r3
	cmpeq r0, r3
	bne _0209F7F0
	mov fp, r3
	mov r4, r3
_0209F750:
	mul r0, sb, r5
	adds sb, r0, r6
	bne _0209F768
_0209F75C:
	mul r0, sb, r5
	adds sb, r0, r6
	beq _0209F75C
_0209F768:
	strh sb, [sl, #0x12]
	ldrh r0, [sl, #0x12]
	mov r1, r8
	mov r2, r7
	mov r3, #0
	bl FUN_0209F4AC
	str r0, [sl, #8]
	str r1, [sl, #0xc]
	ldr r0, [sl, #8]
	cmp r1, fp
	cmpeq r0, r4
	beq _0209F750
	b _0209F7F0
_0209F79C:
	ldr r0, [sl, #8]
	cmp r3, r3
	cmpeq r0, r3
	bne _0209F7F0
	mov r6, r3
	mov r5, r3
	mov r4, r3
_0209F7B8:
	ldrh r0, [sl, #0x12]
	mov r1, r8
	mov r2, r7
	add r0, r0, #1
	strh r0, [sl, #0x12]
	ldrh r0, [sl, #0x12]
	mov r3, r6
	bl FUN_0209F4AC
	str r0, [sl, #8]
	str r1, [sl, #0xc]
	ldr r0, [sl, #8]
	cmp r1, r5
	cmpeq r0, r4
	beq _0209F7B8
_0209F7F0:
	mov r0, #1
	add sp, sp, #0x24
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_0209F7FC: .4byte FUN_020D34B0
_0209F800: .4byte 0x5D588B65
_0209F804: .4byte 0x00269EC3
_0209F808: .4byte 0x000009BF
	arm_func_end FUN_0209F630

	arm_func_start FUN_0209F80C
FUN_0209F80C: @ 0x0209F80C
	push {r3, r4, lr}
	sub sp, sp, #0x14
	mov r4, r0
	add r0, sp, #0
	bl FUN_0209F630
	cmp r0, #0
	addeq sp, sp, #0x14
	moveq r0, #0
	popeq {r3, r4, pc}
	add r0, sp, #0
	mov r1, r4
	bl FUN_0209E508
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	add sp, sp, #0x14
	pop {r3, r4, pc}
	arm_func_end FUN_0209F80C

	arm_func_start FUN_0209F850
FUN_0209F850: @ 0x0209F850
	push {r4, r5, lr}
	sub sp, sp, #0x14
	mov r5, r0
	add r0, sp, #0
	mov r4, r1
	bl FUN_0209E430
	add ip, r5, #8
	ldm ip, {r2, r3}
	stm r5, {r2, r3}
	add r1, sp, #8
	ldm r1, {r2, r3}
	mov r0, r5
	mov r1, r4
	stm ip, {r2, r3}
	bl FUN_0209E508
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	add sp, sp, #0x14
	pop {r4, r5, pc}
	arm_func_end FUN_0209F850

	arm_func_start FUN_0209F8A0
FUN_0209F8A0: @ 0x0209F8A0
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x24
	add r2, sp, #0
	mov r1, #0
	mov sl, r0
	strb r1, [r2]
	strb r1, [r2, #1]
	strb r1, [r2, #2]
	strb r1, [r2, #3]
	strb r1, [r2, #4]
	strb r1, [r2, #5]
	bl FUN_0209E430
	bl FUN_020DB9C0
	add r0, sp, #0x14
	bl FUN_020DBA9C
	cmp r0, #0
	addne sp, sp, #0x24
	movne r0, #0
	popne {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	add r0, sp, #8
	bl FUN_020DBB48
	cmp r0, #0
	addne sp, sp, #0x24
	movne r0, #0
	popne {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	add r0, sp, #0x14
	add r1, sp, #8
	bl FUN_020DC330
	mov r4, r0
	mov r0, #0
	subs r2, r4, r0
	sbcs r2, r1, r0
	addlt sp, sp, #0x24
	poplt {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	bl FUN_020D3438
	cmp r0, #0
	beq _0209F93C
	ldr r0, _0209FA30 @ =FUN_020D34B0
	adds r4, r4, r0
_0209F93C:
	add r0, sp, #0
	bl FUN_020D3C40
	ldrb r0, [sp, #1]
	ldr r5, _0209FA34 @ =0x5D588B65
	ldr r6, _0209FA38 @ =0x00269EC3
	ldrb r1, [sp]
	lsl r0, r0, #8
	mla sb, r4, r5, r6
	orr r1, r0, r1, lsl #16
	ldrb r2, [sp, #2]
	ldr r0, _0209FA3C @ =0x000009BF
	ldrb r7, [sp, #4]
	orr r1, r2, r1
	cmp r1, r0
	movne r1, #1
	lsr r2, sb, #0x10
	mov r0, #0x3e8
	mul r4, r2, r0
	lsr r2, r4, #0x10
	ldrb r0, [sp, #5]
	ldrb r8, [sp, #3]
	lsl r4, r7, #8
	moveq r1, #0
	mov r3, #0
	strh r2, [sl, #0x10]
	str r3, [sl, #8]
	str r3, [sl, #0xc]
	orr r4, r4, r8, lsl #16
	ldr r2, [sl, #8]
	cmp r3, #0
	cmpeq r2, #0
	and r7, r1, #0xff
	orr r8, r0, r4
	bne _0209FA24
	mov fp, r3
	mov r4, r3
_0209F9CC:
	mla sb, r5, sb, r6
	b _0209F9D8
_0209F9D4:
	mla sb, r5, sb, r6
_0209F9D8:
	cmp sb, #0
	beq _0209F9D4
	ldrh r2, [sl, #0x12]
	lsl r0, sb, #0x10
	lsr r1, r0, #0x10
	cmp r2, r0, lsr #16
	beq _0209F9D4
	strh r1, [sl, #0x12]
	ldrh r0, [sl, #0x12]
	mov r1, r8
	mov r2, r7
	mov r3, #0
	bl FUN_0209F4AC
	str r0, [sl, #8]
	str r1, [sl, #0xc]
	ldr r0, [sl, #8]
	cmp r1, fp
	cmpeq r0, r4
	beq _0209F9CC
_0209FA24:
	mov r0, #1
	add sp, sp, #0x24
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_0209FA30: .4byte FUN_020D34B0
_0209FA34: .4byte 0x5D588B65
_0209FA38: .4byte 0x00269EC3
_0209FA3C: .4byte 0x000009BF
	arm_func_end FUN_0209F8A0

	arm_func_start FUN_0209FA40
FUN_0209FA40: @ 0x0209FA40
	push {r3, r4, lr}
	sub sp, sp, #0x14
	mov r4, r0
	add r0, sp, #0
	bl FUN_0209E430
	add r0, sp, #0
	ldm r0, {r2, r3}
	stm r4, {r2, r3}
	add r1, sp, #8
	add r0, r4, #8
	ldm r1, {r2, r3}
	stm r0, {r2, r3}
	ldr r0, [sp, #4]
	ldr r1, [sp]
	cmp r0, #0
	mov r0, #0
	cmpeq r1, #0
	movne r0, #1
	str r0, [r4, #0x10]
	add sp, sp, #0x14
	pop {r3, r4, pc}
	arm_func_end FUN_0209FA40

	arm_func_start FUN_0209FA94
FUN_0209FA94: @ 0x0209FA94
	stmdb sp!, {lr}
	sub sp, sp, #0x14
	add r0, sp, #0
	bl FUN_0209E430
	ldr r0, [sp, #0xc]
	ldr r1, [sp, #8]
	cmp r0, #0
	cmpeq r1, #0
	mov r0, #0
	bne _0209FAD8
	ldr r1, [sp, #4]
	ldr r2, [sp]
	cmp r1, r0
	cmpeq r2, r0
	addeq sp, sp, #0x14
	moveq r0, #1
	ldmeq sp!, {pc}
_0209FAD8:
	mov r0, #0
	add sp, sp, #0x14
	ldm sp!, {pc}
	arm_func_end FUN_0209FA94

	arm_func_start FUN_0209FAE4
FUN_0209FAE4: @ 0x0209FAE4
	push {r4, r5, r6, lr}
	mov r6, r0
	ldr r0, _0209FB44 @ =_version_NINTENDO_DWC
	mov r5, #0
	bl OSi_ReferSymbol
	mov r0, r6
	bl FUN_0209EFF8
	mov r4, r0
	bl FUN_0209FA94
	cmp r0, #0
	beq _0209FB1C
	mov r0, r6
	bl FUN_0209F80C
	mov r5, #1
_0209FB1C:
	cmp r4, #0
	bge _0209FB34
	cmp r5, #0
	movne r0, #2
	moveq r0, #3
	pop {r4, r5, r6, pc}
_0209FB34:
	cmp r5, #0
	movne r0, #1
	moveq r0, #0
	pop {r4, r5, r6, pc}
	.align 2, 0
_0209FB44: .4byte _version_NINTENDO_DWC
	arm_func_end FUN_0209FAE4

	arm_func_start FUN_0209FB48
FUN_0209FB48: @ 0x0209FB48
	mvn ip, r3
	tst r1, ip
	movne r0, #0
	bxne lr
	mvn r3, r3, lsl r2
	ldr ip, [r0]
	and r3, ip, r3
	orr r1, r3, r1, lsl r2
	str r1, [r0]
	mov r0, #1
	bx lr
	arm_func_end FUN_0209FB48

	arm_func_start FUN_0209FB74
FUN_0209FB74: @ 0x0209FB74
	ldr r2, [r0]
	ldr r1, _0209FB90 @ =0x000007FF
	ldr r0, [r0, #4]
	and r1, r2, r1
	orr r1, r1, #0
	orr r0, r0, #0
	bx lr
	.align 2, 0
_0209FB90: .4byte 0x000007FF
	arm_func_end FUN_0209FB74

	arm_func_start FUN_0209FB94
FUN_0209FB94: @ 0x0209FB94
	ldr r0, [r0, #8]
	bx lr
	arm_func_end FUN_0209FB94

	arm_func_start FUN_0209FB9C
FUN_0209FB9C: @ 0x0209FB9C
	ldr r1, [r0, #8]
	ldr r0, [r0, #4]
	orr r1, r1, #0
	orr r0, r0, #0
	bx lr
	arm_func_end FUN_0209FB9C

	arm_func_start FUN_0209FBB0
FUN_0209FBB0: @ 0x0209FBB0
	ldr r0, [r0, #4]
	bx lr
	arm_func_end FUN_0209FBB0

	arm_func_start FUN_0209FBB8
FUN_0209FBB8: @ 0x0209FBB8
	push {r3, r4, r5, lr}
	ldr r3, _0209FBDC @ =0x000007FF
	mov r4, r1
	mov r1, r2
	mov r2, #0
	mov r5, r0
	bl FUN_0209FB48
	str r4, [r5, #4]
	pop {r3, r4, r5, pc}
	.align 2, 0
_0209FBDC: .4byte 0x000007FF
	arm_func_end FUN_0209FBB8

	arm_func_start FUN_0209FBE0
FUN_0209FBE0: @ 0x0209FBE0
	str r1, [r0, #8]
	bx lr
	arm_func_end FUN_0209FBE0

	arm_func_start FUN_0209FBE8
FUN_0209FBE8: @ 0x0209FBE8
	stmib r0, {r1, r2}
	bx lr
	arm_func_end FUN_0209FBE8

	arm_func_start FUN_0209FBF0
FUN_0209FBF0: @ 0x0209FBF0
	str r1, [r0, #4]
	bx lr
	arm_func_end FUN_0209FBF0

	arm_func_start FUN_0209FBF8
FUN_0209FBF8: @ 0x0209FBF8
	ldr r1, [r0]
	ldr r0, _0209FC08 @ =0x001FFFFF
	and r0, r0, r1, lsr #11
	bx lr
	.align 2, 0
_0209FC08: .4byte 0x001FFFFF
	arm_func_end FUN_0209FBF8

	arm_func_start FUN_0209FC0C
FUN_0209FC0C: @ 0x0209FC0C
	push {r3, lr}
	bl FUN_0209FBF8
	and r0, r0, #3
	pop {r3, pc}
	arm_func_end FUN_0209FC0C

	arm_func_start FUN_0209FC1C
FUN_0209FC1C: @ 0x0209FC1C
	push {r4, lr}
	mov r4, r0
	bl FUN_0209FC0C
	cmp r0, #3
	bne _0209FC4C
	mov r0, r4
	bl FUN_0209FBF8
	and r0, r0, #4
	cmp r0, #4
	moveq r0, #1
	movne r0, #0
	pop {r4, pc}
_0209FC4C:
	mov r0, #0
	pop {r4, pc}
	arm_func_end FUN_0209FC1C

	arm_func_start FUN_0209FC54
FUN_0209FC54: @ 0x0209FC54
	ldr ip, _0209FC5C @ =FUN_0209FC0C
	bx ip
	.align 2, 0
_0209FC5C: .4byte FUN_0209FC0C
	arm_func_end FUN_0209FC54

	arm_func_start FUN_0209FC60
FUN_0209FC60: @ 0x0209FC60
	ldr ip, _0209FC70 @ =FUN_0209FB48
	ldr r3, _0209FC74 @ =0x001FFFFF
	mov r2, #0xb
	bx ip
	.align 2, 0
_0209FC70: .4byte FUN_0209FB48
_0209FC74: .4byte 0x001FFFFF
	arm_func_end FUN_0209FC60

	arm_func_start FUN_0209FC78
FUN_0209FC78: @ 0x0209FC78
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	bl FUN_0209FBF8
	bic r1, r0, #3
	mov r0, r5
	orr r1, r1, r4
	bl FUN_0209FC60
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0209FC78

	arm_func_start FUN_0209FC9C
FUN_0209FC9C: @ 0x0209FC9C
	push {r4, lr}
	mov r4, r0
	bl FUN_0209FC0C
	cmp r0, #3
	popne {r4, pc}
	mov r0, r4
	bl FUN_0209FBF8
	orr r1, r0, #4
	mov r0, r4
	bl FUN_0209FC60
	pop {r4, pc}
	arm_func_end FUN_0209FC9C

	arm_func_start FUN_0209FCC8
FUN_0209FCC8: @ 0x0209FCC8
	push {r4, lr}
	sub sp, sp, #0x108
	mov r4, r0
	str r1, [sp, #4]
	add r0, sp, #8
	mov r1, #7
	str r4, [sp]
	bl FUN_020E37D8
	add r0, sp, #8
	add r1, sp, #0
	mov r2, #8
	bl FUN_020E39DC
	and r0, r0, #0x7f
	orr r1, r0, #0
	orr r0, r4, #0
	add sp, sp, #0x108
	pop {r4, pc}
	arm_func_end FUN_0209FCC8

	arm_func_start FUN_0209FD0C
FUN_0209FD0C: @ 0x0209FD0C
	ldr ip, _0209FD24 @ =FUN_0209FD28
	mov r3, r0
	mov r0, r1
	mov r1, r2
	ldr r2, [r3, #0x24]
	bx ip
	.align 2, 0
_0209FD24: .4byte FUN_0209FD28
	arm_func_end FUN_0209FD0C

	arm_func_start FUN_0209FD28
FUN_0209FD28: @ 0x0209FD28
	push {r4, lr}
	sub sp, sp, #0x108
	mov r4, r1
	and r1, r4, #0
	cmp r1, #0
	and r3, r0, #0x80000000
	cmpeq r3, #0
	mov r1, #0
	addne sp, sp, #0x108
	movne r0, r1
	popne {r4, pc}
	str r0, [sp]
	add r0, sp, #8
	mov r1, #7
	str r2, [sp, #4]
	bl FUN_020E37D8
	add r0, sp, #8
	add r1, sp, #0
	mov r2, #8
	bl FUN_020E39DC
	and r1, r0, #0x7f
	asr r0, r1, #0x1f
	cmp r0, #0
	cmpeq r1, r4
	moveq r0, #1
	movne r0, #0
	add sp, sp, #0x108
	pop {r4, pc}
	arm_func_end FUN_0209FD28

	arm_func_start FUN_0209FD98
FUN_0209FD98: @ 0x0209FD98
	push {r4, lr}
	mov r4, r0
	bl FUN_0209FD28
	cmp r0, #0
	mov r0, #0
	subne r0, r0, #1
	andne r0, r4, r0
	pop {r4, pc}
	arm_func_end FUN_0209FD98

	arm_func_start FUN_0209FDB8
FUN_0209FDB8: @ 0x0209FDB8
	push {r3, r4, r5, r6, r7, lr}
	ldr lr, _0209FE20 @ =0x66666667
	add r4, r2, #4
	smull ip, r2, lr, r4
	lsr ip, r4, #0x1f
	add r2, ip, r2, asr #1
	cmp r2, #0
	ldr r7, _0209FE24 @ =_021105F4
	mov r6, #0
	ble _0209FE14
	add r4, r3, r2
	sub r4, r4, #1
	mov ip, #0x1f
_0209FDEC:
	and r5, r0, ip
	ldrsb r5, [r7, r5]
	lsr r0, r0, #5
	lsr lr, r1, #5
	strb r5, [r4, -r6]
	add r6, r6, #1
	orr r0, r0, r1, lsl #27
	mov r1, lr
	cmp r6, r2
	blt _0209FDEC
_0209FE14:
	mov r0, #0
	strb r0, [r3, r2]
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_0209FE20: .4byte 0x66666667
_0209FE24: .4byte _021105F4
	arm_func_end FUN_0209FDB8

	arm_func_start FUN_0209FE28
FUN_0209FE28: @ 0x0209FE28
	push {r4, r5, r6, lr}
	sub sp, sp, #0x40
	mov r6, r0
	mov r4, r1
	mov r5, r2
	bl FUN_0209FB74
	add r3, sp, #0x29
	mov r2, #0x2b
	bl FUN_0209FDB8
	mov r0, r6
	bl FUN_0209FB94
	mov r1, #0
	mov r2, #0x20
	add r3, sp, #0x14
	bl FUN_0209FDB8
	lsr r1, r4, #0x18
	and r1, r1, #0xff
	str r1, [sp]
	lsr r1, r4, #0x10
	and r1, r1, #0xff
	str r1, [sp, #4]
	lsr r1, r4, #8
	and r1, r1, #0xff
	str r1, [sp, #8]
	and r1, r4, #0xff
	str r1, [sp, #0xc]
	add r2, sp, #0x14
	str r2, [sp, #0x10]
	ldr r2, _0209FEB4 @ =_02110618
	mov r0, r5
	mov r1, #0x15
	add r3, sp, #0x29
	bl FUN_020D168C
	add sp, sp, #0x40
	pop {r4, r5, r6, pc}
	.align 2, 0
_0209FEB4: .4byte _02110618
	arm_func_end FUN_0209FE28

	arm_func_start FUN_0209FEB8
FUN_0209FEB8: @ 0x0209FEB8
	push {r3, r4, r5, lr}
	sub sp, sp, #0x400
	mov r4, r1
	mov r1, #0
	mov r2, #0x40
	mov r5, r0
	bl FUN_020D4994
	mov r0, #0x40
	str r0, [r5]
	mov r0, #0
	str r0, [r5, #0x1c]
	add r0, r5, #4
	str r4, [r5, #0x24]
	bl FUN_0209FF34
	add r0, r5, #0x10
	mov r1, #0
	bl FUN_0209FC78
	ldr r1, _0209FF30 @ =0xEDB88320
	add r0, sp, #0
	bl FUN_020E3960
	add r0, sp, #0
	mov r1, r5
	mov r2, #0x3c
	bl FUN_020E3A58
	str r0, [r5, #0x3c]
	ldr r0, [r5, #0x20]
	orr r0, r0, #1
	str r0, [r5, #0x20]
	add sp, sp, #0x400
	pop {r3, r4, r5, pc}
	.align 2, 0
_0209FF30: .4byte 0xEDB88320
	arm_func_end FUN_0209FEB8

	arm_func_start FUN_0209FF34
FUN_0209FF34: @ 0x0209FF34
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #0x34
	mov r6, r0
	add r0, sp, #0
	bl FUN_020D3E78
	mov r3, #1
	add r2, sp, #0
_0209FF50:
	add r0, r2, r3, lsl #2
	ldr r1, [r2, r3, lsl #2]
	ldr r0, [r0, #-4]
	eor r0, r1, r0
	str r0, [r2, r3, lsl #2]
	add r3, r3, #1
	cmp r3, #8
	blo _0209FF50
	add r0, sp, #0x20
	ldr r5, [sp, #0x1c]
	mov r4, #0
	bl FUN_0209FA40
	ldr r0, [sp, #0x30]
	cmp r0, #0
	beq _0209FFA0
	ldr r1, [sp, #0x20]
	ldr r2, [sp, #0x24]
	mov r0, r6
	bl FUN_0209FBB8
	b _0209FFB0
_0209FFA0:
	ldr r1, [sp, #0x28]
	ldr r2, [sp, #0x2c]
	mov r0, r6
	bl FUN_0209FBB8
_0209FFB0:
	ldr r0, _0209FFEC @ =0x6C078965
	ldr r1, _0209FFF0 @ =0x5D588B65
	umull r3, r2, r5, r0
	mla r2, r5, r1, r2
	ldr r1, _0209FFF4 @ =0x00269EC3
	mla r2, r4, r0, r2
	adds r0, r3, r1
	mov r0, r6
	adc r1, r2, #0
	bl FUN_0209FBE0
	mov r0, r6
	mov r1, #1
	bl FUN_0209FC78
	add sp, sp, #0x34
	pop {r3, r4, r5, r6, pc}
	.align 2, 0
_0209FFEC: .4byte 0x6C078965
_0209FFF0: .4byte 0x5D588B65
_0209FFF4: .4byte 0x00269EC3
	arm_func_end FUN_0209FF34

	arm_func_start FUN_0209FFF8
FUN_0209FFF8: @ 0x0209FFF8
	push {r3, r4, lr}
	sub sp, sp, #0x14
	mov r4, r0
	add r0, sp, #0
	bl FUN_0209FA40
	ldr r0, [sp, #0x10]
	cmp r0, #0
	mov r0, r4
	beq _020A0040
	bl FUN_0209FB74
	ldr r2, [sp, #4]
	ldr r3, [sp]
	cmp r2, r1
	cmpeq r3, r0
	moveq r0, #1
	add sp, sp, #0x14
	movne r0, #0
	pop {r3, r4, pc}
_020A0040:
	bl FUN_0209FB74
	ldr r2, [sp, #0xc]
	ldr r3, [sp, #8]
	cmp r2, r1
	cmpeq r3, r0
	moveq r0, #1
	movne r0, #0
	add sp, sp, #0x14
	pop {r3, r4, pc}
	arm_func_end FUN_0209FFF8

	arm_func_start FUN_020A0064
FUN_020A0064: @ 0x020A0064
	push {r3, lr}
	bl FUN_0209FC0C
	cmp r0, #1
	moveq r0, #1
	movne r0, #0
	pop {r3, pc}
	arm_func_end FUN_020A0064

	arm_func_start FUN_020A007C
FUN_020A007C: @ 0x020A007C
	ldr ip, _020A0088 @ =FUN_020A0064
	add r0, r0, #0x10
	bx ip
	.align 2, 0
_020A0088: .4byte FUN_020A0064
	arm_func_end FUN_020A007C

	arm_func_start FUN_020A008C
FUN_020A008C: @ 0x020A008C
	push {r3, lr}
	bl FUN_0209FC0C
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	pop {r3, pc}
	arm_func_end FUN_020A008C

	arm_func_start FUN_020A00A4
FUN_020A00A4: @ 0x020A00A4
	ldr ip, _020A00AC @ =FUN_020A008C
	bx ip
	.align 2, 0
_020A00AC: .4byte FUN_020A008C
	arm_func_end FUN_020A00A4

	arm_func_start FUN_020A00B0
FUN_020A00B0: @ 0x020A00B0
	ldr ip, _020A00B8 @ =FUN_0209FEB8
	bx ip
	.align 2, 0
_020A00B8: .4byte FUN_0209FEB8
	arm_func_end FUN_020A00B0

	arm_func_start FUN_020A00BC
FUN_020A00BC: @ 0x020A00BC
	push {r4, lr}
	sub sp, sp, #0x400
	ldr r1, _020A00FC @ =0xEDB88320
	mov r4, r0
	add r0, sp, #0
	bl FUN_020E3960
	add r0, sp, #0
	mov r1, r4
	mov r2, #0x3c
	bl FUN_020E3A58
	ldr r1, [r4, #0x3c]
	cmp r0, r1
	moveq r0, #1
	movne r0, #0
	add sp, sp, #0x400
	pop {r4, pc}
	.align 2, 0
_020A00FC: .4byte 0xEDB88320
	arm_func_end FUN_020A00BC

	arm_func_start FUN_020A0100
FUN_020A0100: @ 0x020A0100
	push {r4, lr}
	mov r4, r0
	add r0, r4, #0x10
	bl FUN_020A0064
	cmp r0, #0
	beq _020A0128
	ldr r0, [r4, #0x1c]
	cmp r0, #0
	movgt r0, #1
	popgt {r4, pc}
_020A0128:
	mov r0, #0
	pop {r4, pc}
	arm_func_end FUN_020A0100

	arm_func_start FUN_020A0130
FUN_020A0130: @ 0x020A0130
	push {r3, r4, lr}
	sub sp, sp, #0x14
	mov r4, r0
	add r0, r4, #0x10
	bl FUN_0209FC0C
	cmp r0, #0
	addeq sp, sp, #0x14
	moveq r0, #1
	popeq {r3, r4, pc}
	add r0, sp, #0
	bl FUN_0209FA40
	ldr r0, [sp, #0x10]
	cmp r0, #0
	addeq sp, sp, #0x14
	moveq r0, #0
	popeq {r3, r4, pc}
	add r0, r4, #0x10
	bl FUN_0209FB74
	ldr r2, [sp, #4]
	ldr r3, [sp]
	cmp r2, r1
	cmpeq r3, r0
	moveq r0, #1
	movne r0, #0
	add sp, sp, #0x14
	pop {r3, r4, pc}
	arm_func_end FUN_020A0130

	arm_func_start FUN_020A0198
FUN_020A0198: @ 0x020A0198
	push {r4, lr}
	sub sp, sp, #0x400
	mov r4, r0
	add r3, r4, #0x10
	mov ip, r2
	ldm r1, {r0, r1, r2}
	stm r3, {r0, r1, r2}
	ldr r1, _020A01EC @ =0xEDB88320
	add r0, sp, #0
	str ip, [r4, #0x1c]
	bl FUN_020E3960
	add r0, sp, #0
	mov r1, r4
	mov r2, #0x3c
	bl FUN_020E3A58
	str r0, [r4, #0x3c]
	ldr r0, [r4, #0x20]
	orr r0, r0, #1
	str r0, [r4, #0x20]
	add sp, sp, #0x400
	pop {r4, pc}
	.align 2, 0
_020A01EC: .4byte 0xEDB88320
	arm_func_end FUN_020A0198

	arm_func_start FUN_020A01F0
FUN_020A01F0: @ 0x020A01F0
	ldr ip, _020A01F8 @ =FUN_020A01FC
	bx ip
	.align 2, 0
_020A01F8: .4byte FUN_020A01FC
	arm_func_end FUN_020A01F0

	arm_func_start FUN_020A01FC
FUN_020A01FC: @ 0x020A01FC
	ldr r0, [r0, #0x20]
	and r0, r0, #1
	cmp r0, #1
	moveq r0, #1
	movne r0, #0
	bx lr
	arm_func_end FUN_020A01FC

	arm_func_start FUN_020A0214
FUN_020A0214: @ 0x020A0214
	ldr ip, _020A021C @ =FUN_020A0220
	bx ip
	.align 2, 0
_020A021C: .4byte FUN_020A0220
	arm_func_end FUN_020A0214

	arm_func_start FUN_020A0220
FUN_020A0220: @ 0x020A0220
	push {r4, lr}
	sub sp, sp, #0x400
	mov r4, r0
	ldr r1, [r4, #0x20]
	add r0, sp, #0
	bic r2, r1, #1
	ldr r1, _020A0260 @ =0xEDB88320
	str r2, [r4, #0x20]
	bl FUN_020E3960
	add r0, sp, #0
	mov r1, r4
	mov r2, #0x3c
	bl FUN_020E3A58
	str r0, [r4, #0x3c]
	add sp, sp, #0x400
	pop {r4, pc}
	.align 2, 0
_020A0260: .4byte 0xEDB88320
	arm_func_end FUN_020A0220

	arm_func_start FUN_020A0264
FUN_020A0264: @ 0x020A0264
	push {r4, lr}
	mov r4, r0
	bl FUN_0209FC0C
	cmp r0, #2
	movne r0, #0
	movne r1, r0
	popne {r4, pc}
	mov r0, r4
	bl FUN_0209FB9C
	pop {r4, pc}
	arm_func_end FUN_020A0264

	arm_func_start FUN_020A028C
FUN_020A028C: @ 0x020A028C
	push {r4, r5, r6, lr}
	mov r4, r1
	mov r6, r0
	mov r0, r4
	bl FUN_0209FC0C
	cmp r0, #1
	beq _020A0300
	cmp r0, #2
	beq _020A02BC
	cmp r0, #3
	beq _020A02F4
	b _020A0308
_020A02BC:
	mov r0, r4
	bl FUN_0209FB9C
	ldr r2, [r6, #0x24]
	mov r4, r0
	mov r5, r1
	bl FUN_0209FD28
	cmp r0, #0
	moveq r0, #0
	popeq {r4, r5, r6, pc}
	ldr r2, [r6, #0x24]
	mov r0, r4
	mov r1, r5
	bl FUN_0209FD98
	pop {r4, r5, r6, pc}
_020A02F4:
	mov r0, r4
	bl FUN_0209FBB0
	pop {r4, r5, r6, pc}
_020A0300:
	mvn r0, #0
	pop {r4, r5, r6, pc}
_020A0308:
	mov r0, #0
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020A028C

	arm_func_start FUN_020A0310
FUN_020A0310: @ 0x020A0310
	push {r3, lr}
	mov r3, r0
	ldr r0, [r3, #0x1c]
	mov r2, #0
	mov r1, r2
	cmp r0, #0
	beq _020A0338
	ldr r1, [r3, #0x24]
	bl FUN_0209FCC8
	mov r2, r0
_020A0338:
	mov r0, r2
	pop {r3, pc}
	arm_func_end FUN_020A0310

	arm_func_start FUN_020A0340
FUN_020A0340: @ 0x020A0340
	push {r4, r5, r6, lr}
	mov r5, r1
	mov r4, r2
	mov r6, r0
	mov r1, #0
	mov r2, #0xc
	bl FUN_020D4994
	mov r0, r6
	mov r1, r5
	mov r2, r4
	bl FUN_0209FBE8
	mov r0, r6
	mov r1, #2
	bl FUN_0209FC78
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020A0340

	arm_func_start FUN_020A037C
FUN_020A037C: @ 0x020A037C
	push {r3, r4, r5, lr}
	mov r4, r1
	mov r5, r0
	mov r0, r4
	mov r1, #0
	mov r2, #0xc
	bl FUN_020D4994
	mov r0, r5
	bl FUN_020A007C
	cmp r0, #0
	addeq r0, r5, #4
	ldmeq r0, {r0, r1, r2}
	stmeq r4, {r0, r1, r2}
	popeq {r3, r4, r5, pc}
	ldr r1, [r5, #0x1c]
	mov r0, r4
	bl FUN_0209FBF0
	mov r0, r4
	mov r1, #3
	bl FUN_0209FC78
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020A037C

	arm_func_start FUN_020A03D0
FUN_020A03D0: @ 0x020A03D0
	push {r3, r4, r5, lr}
	mov r4, r1
	mov r5, r0
	mov r1, #0
	mov r2, #0xc
	bl FUN_020D4994
	mov r0, r5
	mov r1, r4
	bl FUN_0209FBF0
	mov r0, r5
	mov r1, #3
	bl FUN_0209FC78
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020A03D0

	arm_func_start FUN_020A0404
FUN_020A0404: @ 0x020A0404
	ldr ip, _020A0418 @ =FUN_0209FE28
	mov r3, r0
	mov r0, r1
	ldr r1, [r3, #0x24]
	bx ip
	.align 2, 0
_020A0418: .4byte FUN_0209FE28
	arm_func_end FUN_020A0404

	arm_func_start FUN_020A041C
FUN_020A041C: @ 0x020A041C
	push {r3, r4, r5, r6, r7, lr}
	mov r4, r1
	mov r7, r0
	bl FUN_0209FC0C
	mov r5, r0
	mov r0, r4
	bl FUN_0209FC0C
	cmp r5, r0
	movne r0, #0
	popne {r3, r4, r5, r6, r7, pc}
	cmp r5, #3
	bne _020A0470
	mov r0, r7
	bl FUN_0209FBB0
	mov r5, r0
	mov r0, r4
	bl FUN_0209FBB0
	cmp r5, r0
	moveq r0, #1
	movne r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_020A0470:
	cmp r5, #1
	bne _020A04C4
	mov r0, r7
	bl FUN_0209FB74
	mov r5, r0
	mov r6, r1
	mov r0, r4
	bl FUN_0209FB74
	cmp r6, r1
	cmpeq r5, r0
	bne _020A04BC
	mov r0, r7
	bl FUN_0209FB94
	mov r5, r0
	mov r0, r4
	bl FUN_0209FB94
	cmp r5, r0
	moveq r0, #1
	popeq {r3, r4, r5, r6, r7, pc}
_020A04BC:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_020A04C4:
	cmp r5, #2
	bne _020A04F8
	mov r0, r7
	bl FUN_0209FB9C
	mov r5, r0
	mov r6, r1
	mov r0, r4
	bl FUN_0209FB9C
	cmp r6, r1
	cmpeq r5, r0
	moveq r0, #1
	movne r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_020A04F8:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020A041C

	arm_func_start FUN_020A0500
FUN_020A0500: @ 0x020A0500
	push {r4, r5, r6, lr}
	mov r3, #0
	str r3, [r0]
	cmp r2, #0x10
	str r3, [r0, #4]
	movhi r2, #0x10
	add r0, r0, #8
_020A051C:
	str r3, [r0, r3, lsl #2]
	add r3, r3, #1
	cmp r3, #0x100
	blt _020A051C
	mov r5, #0
	mov r6, r5
	mov lr, r5
	mov ip, r5
_020A053C:
	ldrb r3, [r1, r6]
	ldr r4, [r0, lr, lsl #2]
	add r6, r6, #1
	add r3, r4, r3
	add r3, r5, r3
	and r5, r3, #0xff
	ldr r3, [r0, r5, lsl #2]
	cmp r6, r2
	str r3, [r0, lr, lsl #2]
	add lr, lr, #1
	moveq r6, ip
	str r4, [r0, r5, lsl #2]
	cmp lr, #0x100
	blt _020A053C
	mov r2, #0
_020A0578:
	ldr r1, [r0, r2, lsl #2]
	lsl r1, r1, #0x18
	str r1, [r0, r2, lsl #2]
	add r2, r2, #1
	cmp r2, #0x100
	blt _020A0578
	pop {r4, r5, r6, lr}
	bx lr
	arm_func_end FUN_020A0500

	arm_func_start FUN_020A0598
FUN_020A0598: @ 0x020A0598
	push {r4, r5, r6, r7, lr}
	sub sp, sp, #4
	mov r3, #0
	strb r3, [r0]
	cmp r2, #0x10
	strb r3, [r0, #1]
	movhi r2, #0x10
	add r0, r0, #4
_020A05B8:
	strb r3, [r0, r3]
	add r3, r3, #1
	cmp r3, #0x100
	blt _020A05B8
	mov r6, #0
	mov r7, r6
	mov r4, r6
	mov r3, r6
	and ip, r2, #0xff
_020A05DC:
	ldrb r5, [r0, r4]
	ldrb lr, [r1, r7]
	add r2, r7, #1
	and r7, r2, #0xff
	add r2, r5, lr
	add r2, r6, r2
	and r6, r2, #0xff
	ldrb r2, [r0, r6]
	add lr, r0, r4
	add r4, r4, #1
	strb r2, [lr]
	cmp r7, ip
	moveq r7, r3
	cmp r4, #0x100
	strb r5, [r0, r6]
	blt _020A05DC
	add sp, sp, #4
	pop {r4, r5, r6, r7, lr}
	bx lr
	arm_func_end FUN_020A0598

	arm_func_start FUN_020A0628
FUN_020A0628: @ 0x020A0628
	push {r4, r5, r6, r7, r8, sb, lr}
	ldr r7, [r0]
	ldr r6, [r0, #4]
	add r0, r0, #8
	mov lr, #0x1000000
	add r7, r7, lr
	subs r2, r2, #8
	ldr sb, [r0, r7, lsr #22]
	bmi _020A07B4
_020A064C:
	add r6, r6, sb
	ldr r8, [r0, r6, lsr #22]
	ldrb r5, [r1], #1
	str r8, [r0, r7, lsr #22]
	str sb, [r0, r6, lsr #22]
	add r4, sb, r8
	add r7, r7, lr
	ldr r4, [r0, r4, lsr #22]
	ldr sb, [r0, r7, lsr #22]
	eor r5, r5, r4, lsr #24
	strb r5, [r3], #1
	add r6, r6, sb
	ldr r8, [r0, r6, lsr #22]
	ldrb r5, [r1], #1
	str r8, [r0, r7, lsr #22]
	str sb, [r0, r6, lsr #22]
	add r4, sb, r8
	add r7, r7, lr
	ldr r4, [r0, r4, lsr #22]
	ldr sb, [r0, r7, lsr #22]
	eor r5, r5, r4, lsr #24
	strb r5, [r3], #1
	add r6, r6, sb
	ldr r8, [r0, r6, lsr #22]
	ldrb r5, [r1], #1
	str r8, [r0, r7, lsr #22]
	str sb, [r0, r6, lsr #22]
	add r4, sb, r8
	add r7, r7, lr
	ldr r4, [r0, r4, lsr #22]
	ldr sb, [r0, r7, lsr #22]
	eor r5, r5, r4, lsr #24
	strb r5, [r3], #1
	add r6, r6, sb
	ldr r8, [r0, r6, lsr #22]
	ldrb r5, [r1], #1
	str r8, [r0, r7, lsr #22]
	str sb, [r0, r6, lsr #22]
	add r4, sb, r8
	add r7, r7, lr
	ldr r4, [r0, r4, lsr #22]
	ldr sb, [r0, r7, lsr #22]
	eor r5, r5, r4, lsr #24
	strb r5, [r3], #1
	add r6, r6, sb
	ldr r8, [r0, r6, lsr #22]
	ldrb r5, [r1], #1
	str r8, [r0, r7, lsr #22]
	str sb, [r0, r6, lsr #22]
	add r4, sb, r8
	add r7, r7, lr
	ldr r4, [r0, r4, lsr #22]
	ldr sb, [r0, r7, lsr #22]
	eor r5, r5, r4, lsr #24
	strb r5, [r3], #1
	add r6, r6, sb
	ldr r8, [r0, r6, lsr #22]
	ldrb r5, [r1], #1
	str r8, [r0, r7, lsr #22]
	str sb, [r0, r6, lsr #22]
	add r4, sb, r8
	add r7, r7, lr
	ldr r4, [r0, r4, lsr #22]
	ldr sb, [r0, r7, lsr #22]
	eor r5, r5, r4, lsr #24
	strb r5, [r3], #1
	add r6, r6, sb
	ldr r8, [r0, r6, lsr #22]
	ldrb r5, [r1], #1
	str r8, [r0, r7, lsr #22]
	str sb, [r0, r6, lsr #22]
	add r4, sb, r8
	add r7, r7, lr
	ldr r4, [r0, r4, lsr #22]
	ldr sb, [r0, r7, lsr #22]
	eor r5, r5, r4, lsr #24
	strb r5, [r3], #1
	add r6, r6, sb
	subs r2, r2, #8
	ldr r8, [r0, r6, lsr #22]
	ldrb r5, [r1], #1
	str r8, [r0, r7, lsr #22]
	str sb, [r0, r6, lsr #22]
	add r4, sb, r8
	add r7, r7, lr
	ldr r4, [r0, r4, lsr #22]
	ldr sb, [r0, r7, lsr #22]
	eor r5, r5, r4, lsr #24
	strb r5, [r3], #1
	bpl _020A064C
_020A07B4:
	adds r2, r2, #8
	ble _020A07F0
_020A07BC:
	add r6, r6, sb
	subs r2, r2, #1
	ldr r8, [r0, r6, lsr #22]
	ldrb r5, [r1], #1
	str r8, [r0, r7, lsr #22]
	str sb, [r0, r6, lsr #22]
	add r4, sb, r8
	add r7, r7, lr
	ldr r4, [r0, r4, lsr #22]
	ldr sb, [r0, r7, lsr #22]
	eor r5, r5, r4, lsr #24
	strb r5, [r3], #1
	bgt _020A07BC
_020A07F0:
	sub r7, r7, lr
	and r7, r7, #0xff000000
	str r6, [r0, #-4]
	str r7, [r0, #-8]
	pop {r4, r5, r6, r7, r8, sb, pc}
	arm_func_end FUN_020A0628

	arm_func_start FUN_020A0804
FUN_020A0804: @ 0x020A0804
	push {r4, lr}
	mov r4, r0
	ldr r0, _020A0838 @ =_version_NINTENDO_WiFi
	bl OSi_ReferSymbol
	ldr r0, _020A083C @ =_02110628
	ldr r1, [r0]
	cmp r1, #0
	movne r0, #0
	popne {r4, pc}
	str r4, [r0]
	bl FUN_020A0880
	bl FUN_020A0840
	pop {r4, pc}
	.align 2, 0
_020A0838: .4byte _version_NINTENDO_WiFi
_020A083C: .4byte _02110628
	arm_func_end FUN_020A0804

	arm_func_start FUN_020A0840
FUN_020A0840: @ 0x020A0840
	push {r4, lr}
	ldr r0, _020A0874 @ =_02110628
	ldr r0, [r0]
	ldr r0, [r0, #0x20]
	bl FUN_020A0A78
	movs r4, r0
	bmi _020A086C
	ldr r0, _020A0878 @ =_02110660
	bl FUN_020A0DAC
	ldr r1, _020A087C @ =0x021D4420
	str r0, [r1, #0xc]
_020A086C:
	mov r0, r4
	pop {r4, pc}
	.align 2, 0
_020A0874: .4byte _02110628
_020A0878: .4byte _02110660
_020A087C: .4byte 0x021D4420
	arm_func_end FUN_020A0840

	arm_func_start FUN_020A0880
FUN_020A0880: @ 0x020A0880
	push {r3, r4, r5, lr}
	ldr r0, _020A09B4 @ =_02110628
	ldr r4, _020A09B8 @ =0x021D4430
	ldr r5, [r0]
	mov r0, r4
	mov r1, #0
	mov r2, #0x30
	bl FUN_020D4994
	ldr r1, [r5, #0x18]
	ldr r0, _020A09BC @ =0x021D4420
	ldr r2, _020A09C0 @ =FUN_020A0A60
	str r1, [r0, #0x14]
	ldr r3, [r5, #0x1c]
	mov r1, #0
	str r3, [r0, #0x18]
	str r2, [r0, #0x20]
	str r1, [r0, #0x24]
	str r1, [r0, #0x28]
	ldr r1, [r0]
	str r1, [r0, #0x3c]
	ldr r0, [r5, #0x24]
	cmp r0, #0
	moveq r0, #0x4000
	str r0, [r4, #0x20]
	ldr r0, [r5, #0x28]
	cmp r0, #0
	bne _020A0900
	ldr r1, _020A09B4 @ =_02110628
	ldr r0, [r4, #0x20]
	ldr r1, [r1]
	ldr r1, [r1, #0x18]
	blx r1
_020A0900:
	str r0, [r4, #0x1c]
	ldr r1, [r5, #0x30]
	ldr lr, [r5, #0x34]
	cmp r1, #0
	moveq r1, #0x240
	sub ip, r1, #0x28
	cmp lr, #0
	moveq lr, #0x10c0
	ldr r2, _020A09C4 @ =_02110648
	add r0, lr, lr, lsr #31
	ldr r1, _020A09C8 @ =0x021D4670
	mov r3, #0
	strh lr, [r2, #2]
	asr r0, r0, #1
	strh r0, [r2, #4]
	str ip, [r4, #0x24]
	str r3, [r1]
	ldr r0, [r5]
	mov r2, #1
	cmp r0, #0
	beq _020A0974
	ldr r1, _020A09CC @ =FUN_020A0A48
	ldr r0, _020A09BC @ =0x021D4420
	str r3, [r4]
	str r1, [r4, #0xc]
	str r2, [r0, #8]
	ldr r0, [r0, #4]
	str r0, [r4, #0x28]
	b _020A0988
_020A0974:
	ldr r0, _020A09BC @ =0x021D4420
	ldr r1, _020A09D0 @ =FUN_020A09DC
	str r3, [r0, #8]
	str r2, [r4]
	str r1, [r4, #0xc]
_020A0988:
	ldr r0, [r5, #0x2c]
	cmp r0, #0
	moveq r0, #0xb
	bl FUN_020A3C90
	ldr r0, _020A09D4 @ =FUN_020A41B4
	bl FUN_020AFFC4
	ldr r0, _020A09D8 @ =FUN_020A28DC
	bl FUN_020A3C38
	mov r0, r4
	bl FUN_020A39AC
	pop {r3, r4, r5, pc}
	.align 2, 0
_020A09B4: .4byte _02110628
_020A09B8: .4byte 0x021D4430
_020A09BC: .4byte 0x021D4420
_020A09C0: .4byte FUN_020A0A60
_020A09C4: .4byte _02110648
_020A09C8: .4byte 0x021D4670
_020A09CC: .4byte FUN_020A0A48
_020A09D0: .4byte FUN_020A09DC
_020A09D4: .4byte FUN_020A41B4
_020A09D8: .4byte FUN_020A28DC
	arm_func_end FUN_020A0880

	arm_func_start FUN_020A09DC
FUN_020A09DC: @ 0x020A09DC
	ldr r0, _020A0A30 @ =_02110628
	ldr r1, _020A0A34 @ =0x021D4670
	ldr ip, [r0]
	ldr r0, _020A0A38 @ =0x021D463C
	ldr r3, [ip, #4]
	ldr r2, _020A0A3C @ =0x021D464C
	str r3, [r1]
	ldr r3, [ip, #8]
	ldr r1, _020A0A40 @ =0x021D4680
	str r3, [r0]
	ldr r3, [ip, #0xc]
	ldr r0, _020A0A44 @ =0x021D4420
	str r3, [r2]
	ldr r2, [ip, #0x10]
	str r2, [r1]
	ldr r2, [ip, #0x14]
	str r2, [r1, #4]
	ldr r1, [r0, #8]
	orr r1, r1, #2
	str r1, [r0, #8]
	bx lr
	.align 2, 0
_020A0A30: .4byte _02110628
_020A0A34: .4byte 0x021D4670
_020A0A38: .4byte 0x021D463C
_020A0A3C: .4byte 0x021D464C
_020A0A40: .4byte 0x021D4680
_020A0A44: .4byte 0x021D4420
	arm_func_end FUN_020A09DC

	arm_func_start FUN_020A0A48
FUN_020A0A48: @ 0x020A0A48
	ldr r0, _020A0A5C @ =0x021D4420
	ldr r1, [r0, #8]
	orr r1, r1, #2
	str r1, [r0, #8]
	bx lr
	.align 2, 0
_020A0A5C: .4byte 0x021D4420
	arm_func_end FUN_020A0A48

	arm_func_start FUN_020A0A60
FUN_020A0A60: @ 0x020A0A60
	push {r3, lr}
	bl FUN_020AFF20
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	pop {r3, pc}
	arm_func_end FUN_020A0A60

	arm_func_start FUN_020A0A78
FUN_020A0A78: @ 0x020A0A78
	push {r4, r5, r6, lr}
	mov r4, r0
	mov r0, #0x2c
	mul r1, r4, r0
	ldr r0, _020A0B00 @ =_02110628
	lsl r2, r4, #2
	add r2, r2, #3
	ldr r0, [r0]
	add r1, r1, #3
	bic r5, r2, #3
	bic r2, r1, #3
	ldr r1, [r0, #0x18]
	add r0, r2, r5
	blx r1
	movs r6, r0
	mvneq r0, #0
	popeq {r4, r5, r6, pc}
	ldr r0, _020A0B04 @ =0x021D4464
	mov r1, r6
	mov r2, r4
	bl FUN_020D2388
	cmp r4, #0
	add r5, r6, r5
	ble _020A0AF0
_020A0AD8:
	mov r0, r5
	bl FUN_020A0BBC
	sub r4, r4, #1
	cmp r4, #0
	add r5, r5, #0x2c
	bgt _020A0AD8
_020A0AF0:
	ldr r1, _020A0B08 @ =0x021D4460
	mov r0, #0
	str r6, [r1]
	pop {r4, r5, r6, pc}
	.align 2, 0
_020A0B00: .4byte _02110628
_020A0B04: .4byte 0x021D4464
_020A0B08: .4byte 0x021D4460
	arm_func_end FUN_020A0A78

	arm_func_start FUN_020A0B0C
FUN_020A0B0C: @ 0x020A0B0C
	push {r3, lr}
	ldr r0, _020A0B4C @ =0x021D4460
	ldr r2, [r0, #0x20]
	ldr r1, [r0, #0x18]
	cmp r2, r1
	mvnlt r0, #0
	poplt {r3, pc}
	ldr r1, _020A0B50 @ =_02110628
	ldr r0, [r0]
	ldr r1, [r1]
	ldr r1, [r1, #0x1c]
	blx r1
	ldr r1, _020A0B4C @ =0x021D4460
	mov r0, #0
	str r0, [r1]
	pop {r3, pc}
	.align 2, 0
_020A0B4C: .4byte 0x021D4460
_020A0B50: .4byte _02110628
	arm_func_end FUN_020A0B0C

	arm_func_start FUN_020A0B54
FUN_020A0B54: @ 0x020A0B54
	push {r3, lr}
	mov r2, r0
	ldr r0, _020A0B78 @ =0x021D4464
	add r1, sp, #0
	bl FUN_020D2444
	cmp r0, #0
	ldrne r0, [sp]
	moveq r0, #0
	pop {r3, pc}
	.align 2, 0
_020A0B78: .4byte 0x021D4464
	arm_func_end FUN_020A0B54

	arm_func_start FUN_020A0B7C
FUN_020A0B7C: @ 0x020A0B7C
	push {r4, r5, r6, lr}
	mov r4, r2
	mov r6, r0
	mov r0, r4
	mov r5, r1
	bl FUN_020A0B54
	cmp r0, #0
	popeq {r4, r5, r6, pc}
	str r6, [r0]
	str r5, [r0, #4]
	mov r1, #0
	str r1, [r0, #8]
	ldrsb r1, [r5, #0x73]
	strb r1, [r0, #0xc]
	strb r4, [r0, #0xd]
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020A0B7C

	arm_func_start FUN_020A0BBC
FUN_020A0BBC: @ 0x020A0BBC
	push {r3, lr}
	movs r1, r0
	popeq {r3, pc}
	ldr r0, _020A0BD8 @ =0x021D4464
	mov r2, #0
	bl FUN_020D23B0
	pop {r3, pc}
	.align 2, 0
_020A0BD8: .4byte 0x021D4464
	arm_func_end FUN_020A0BBC

	arm_func_start FUN_020A0BDC
FUN_020A0BDC: @ 0x020A0BDC
	ldr r1, [r0, #0x64]
	cmp r1, #0
	ldreq r1, [r0, #0x68]
	mov r0, r1
	bx lr
	arm_func_end FUN_020A0BDC

	arm_func_start FUN_020A0BF0
FUN_020A0BF0: @ 0x020A0BF0
	push {r3, r4, r5, lr}
	movs r5, r1
	beq _020A0C08
	ldrsb r1, [r5, #0xd]
	tst r1, #1
	beq _020A0C10
_020A0C08:
	mov r2, #1
	b _020A0C14
_020A0C10:
	mov r2, #0
_020A0C14:
	mov r1, r5
	bl FUN_020D23B0
	movs r4, r0
	bne _020A0C2C
	mov r0, r5
	bl FUN_020A0BBC
_020A0C2C:
	cmp r4, #0
	movne r0, #0
	mvneq r0, #0x29
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020A0BF0

	arm_func_start FUN_020A0C3C
FUN_020A0C3C: @ 0x020A0C3C
	push {r4, lr}
	mov r4, r1
	bl FUN_020A0BDC
	mov r1, r4
	bl FUN_020A0BF0
	pop {r4, pc}
	arm_func_end FUN_020A0C3C

	arm_func_start FUN_020A0C54
FUN_020A0C54: @ 0x020A0C54
	push {r3, r4, r5, lr}
	sub sp, sp, #0x28
	mov r4, r1
	ldrsb r2, [r4, #0xd]
	mov r5, r0
	cmp r2, #1
	bne _020A0CA8
	add r0, sp, #8
	add r1, sp, #0
	mov r2, #1
	bl FUN_020D2388
	add r2, sp, #8
	mov r0, r5
	mov r1, r4
	str r2, [r4, #8]
	bl FUN_020A0BF0
	add r0, sp, #8
	add r1, sp, #4
	mov r2, #1
	bl FUN_020D2444
	b _020A0CB8
_020A0CA8:
	mov r2, #0
	str r2, [r4, #8]
	bl FUN_020A0BF0
	str r0, [sp, #4]
_020A0CB8:
	ldr r0, [sp, #4]
	add sp, sp, #0x28
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020A0C54

	arm_func_start FUN_020A0CC4
FUN_020A0CC4: @ 0x020A0CC4
	ldr ip, _020A0CD0 @ =FUN_020A0C54
	ldr r0, [r0, #0x64]
	bx ip
	.align 2, 0
_020A0CD0: .4byte FUN_020A0C54
	arm_func_end FUN_020A0CC4

	arm_func_start FUN_020A0CD4
FUN_020A0CD4: @ 0x020A0CD4
	ldr ip, _020A0CE0 @ =FUN_020A0C54
	ldr r0, [r0, #0x68]
	bx ip
	.align 2, 0
_020A0CE0: .4byte FUN_020A0C54
	arm_func_end FUN_020A0CD4

	arm_func_start FUN_020A0CE4
FUN_020A0CE4: @ 0x020A0CE4
	push {r4, lr}
	mov r4, r1
	bl FUN_020A0BDC
	mov r1, r4
	bl FUN_020A0C54
	pop {r4, pc}
	arm_func_end FUN_020A0CE4

	arm_func_start FUN_020A0CFC
FUN_020A0CFC: @ 0x020A0CFC
	push {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #4
	mov r4, #0
	mov sb, r0
	mov sl, r4
	add r6, sp, #0
	mov r5, #1
_020A0D18:
	mov r0, sb
	mov r1, r6
	mov r2, r5
	bl FUN_020D2584
	ldr r0, [sp]
	cmp r0, #0
	addeq sp, sp, #4
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	ldr r1, [r0]
	blx r1
	mov r8, r0
	bl FUN_020D3A38
	mov r7, r0
	bl FUN_020D21FC
	mov r0, sb
	mov r1, r4
	mov r2, r4
	bl FUN_020D2444
	ldr r0, [sp]
	ldr r0, [r0, #4]
	cmp r0, #0
	strne r8, [r0, #0x6c]
	ldr r0, [sp]
	ldr r0, [r0, #8]
	cmp r0, #0
	beq _020A0D8C
	mov r1, r8
	mov r2, sl
	bl FUN_020D23B0
_020A0D8C:
	ldr r0, [sp]
	bl FUN_020A0BBC
	bl FUN_020D2230
	mov r0, r7
	bl FUN_020D3A4C
	b _020A0D18
	arm_func_end FUN_020A0CFC

	arm_func_start FUN_020A0DA4
FUN_020A0DA4: @ 0x020A0DA4
	add sp, sp, #4
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	arm_func_end FUN_020A0DA4

	arm_func_start FUN_020A0DAC
FUN_020A0DAC: @ 0x020A0DAC
	push {r4, lr}
	bl FUN_020A0E5C
	movs r4, r0
	mvneq r0, #0x30
	popeq {r4, pc}
	ldr r0, _020A0DE4 @ =FUN_020A0DE8
	mov r1, r4
	mov r2, #1
	bl FUN_020A0B7C
	mov r1, r0
	mov r0, r4
	bl FUN_020A0CE4
	mov r0, r4
	pop {r4, pc}
	.align 2, 0
_020A0DE4: .4byte FUN_020A0DE8
	arm_func_end FUN_020A0DAC

	arm_func_start FUN_020A0DE8
FUN_020A0DE8: @ 0x020A0DE8
	push {r4, lr}
	ldr r4, [r0, #4]
	mov r0, r4
	bl FUN_020A6878
	ldrsb r0, [r4, #0x73]
	ldr r1, [r4, #0x68]
	cmp r0, #4
	addls pc, pc, r0, lsl #2
	b _020A0E48
_020A0E0C: @ jump table
	b _020A0E20 @ case 0
	b _020A0E30 @ case 1
	b _020A0E44 @ case 2
	b _020A0E48 @ case 3
	b _020A0E20 @ case 4
_020A0E20:
	add r0, r1, #0x20
	bl FUN_020A6984
	bl FUN_020A6930
	b _020A0E48
_020A0E30:
	bl FUN_020A6930
	bl FUN_020A68A4
	ldr r0, _020A0E58 @ =FUN_020A1D10
	bl FUN_020A69DC
	b _020A0E48
_020A0E44:
	bl FUN_020A68A4
_020A0E48:
	mov r0, #1
	strh r0, [r4, #0x70]
	mov r0, #0
	pop {r4, pc}
	.align 2, 0
_020A0E58: .4byte FUN_020A1D10
	arm_func_end FUN_020A0DE8

	arm_func_start FUN_020A0E5C
FUN_020A0E5C: @ 0x020A0E5C
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	bl FUN_020A0EC4
	mov r4, r0
	bl FUN_020D3A38
	ldr r1, _020A0EC0 @ =_02110628
	mov r6, r0
	ldr r1, [r1]
	mov r0, r4
	ldr r1, [r1, #0x18]
	blx r1
	movs r5, r0
	beq _020A0EB0
	mov r2, r4
	mov r1, #0
	bl FUN_020D4994
	mov r0, r5
	mov r1, r7
	bl FUN_020A0F6C
	mov r0, r5
	bl FUN_020A2D9C
_020A0EB0:
	mov r0, r6
	bl FUN_020D3A4C
	mov r0, r5
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020A0EC0: .4byte _02110628
	arm_func_end FUN_020A0E5C

	arm_func_start FUN_020A0EC4
FUN_020A0EC4: @ 0x020A0EC4
	push {r3, r4, r5, lr}
	mov r5, r0
	ldrh r0, [r5, #2]
	mov r4, #0x80
	cmp r0, #0
	beq _020A0F00
	add r4, r4, #0x114
	bl FUN_020A2D90
	add r4, r4, r0
	ldrh r0, [r5, #8]
	bl FUN_020A2D90
	add r4, r4, r0
	add r0, r5, #0x10
	bl FUN_020A0F44
	add r4, r4, r0
_020A0F00:
	ldrh r0, [r5, #6]
	cmp r0, #0
	beq _020A0F3C
	add r4, r4, #0x110
	bl FUN_020A2D90
	add r4, r4, r0
	ldrh r0, [r5, #0xa]
	bl FUN_020A2D90
	add r4, r4, r0
	ldrh r0, [r5, #0xc]
	bl FUN_020A2D90
	add r4, r4, r0
	add r0, r5, #0x14
	bl FUN_020A0F44
	add r4, r4, r0
_020A0F3C:
	mov r0, r4
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020A0EC4

	arm_func_start FUN_020A0F44
FUN_020A0F44: @ 0x020A0F44
	push {r3, r4, r5, lr}
	mov r5, r0
	ldrb r0, [r5, #3]
	lsl r0, r0, #2
	bl FUN_020A2D90
	mov r4, r0
	ldrh r0, [r5]
	bl FUN_020A2D90
	add r0, r4, r0
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020A0F44

	arm_func_start FUN_020A0F6C
FUN_020A0F6C: @ 0x020A0F6C
	push {r3, r4, r5, r6, r7, lr}
	mov r5, r1
	ldrsb r1, [r5]
	mov r6, r0
	add r4, r6, #0x80
	strb r1, [r6, #0x73]
	ldrsb r0, [r5, #1]
	strb r0, [r6, #0x72]
	ldrh r0, [r5, #2]
	cmp r0, #0
	beq _020A0FEC
	str r4, [r6, #0x64]
	ldrh r2, [r5, #4]
	mov r1, r4
	add r0, r4, #0x114
	strh r2, [r4, #0xfc]
	add r2, r5, #0x10
	mov r7, r4
	bl FUN_020A1090
	ldrh r2, [r5, #2]
	add r1, r6, #0x3c
	bl FUN_020A1068
	ldrh r2, [r5, #8]
	add r1, r6, #0x50
	bl FUN_020A1068
	ldrh r3, [r5, #0xe]
	add r1, r7, #0x100
	mov r2, #0
	strh r3, [r1, #0xa]
	str r2, [r7, #0x110]
	mov r4, r0
	str r2, [r7, #0x10c]
_020A0FEC:
	ldrh r0, [r5, #6]
	cmp r0, #0
	beq _020A104C
	str r4, [r6, #0x68]
	mov r1, r4
	str r6, [r4, #0x10c]
	add r0, r4, #0x110
	add r2, r5, #0x14
	mov r7, r4
	bl FUN_020A1090
	ldrh r2, [r5, #6]
	add r1, r6, #0x48
	bl FUN_020A1068
	ldrh r2, [r5, #0xa]
	add r1, r6, #0x58
	bl FUN_020A1068
	ldrh r2, [r5, #0xc]
	add r1, r4, #0xf8
	bl FUN_020A1068
	mov r1, #0
	str r1, [r7, #0x108]
	mov r4, r0
	str r1, [r7, #0x104]
	b _020A105C
_020A104C:
	ldr r0, _020A1064 @ =0x021D442C
	ldr r0, [r0]
	ldr r0, [r0, #0x68]
	str r0, [r6, #0x68]
_020A105C:
	mov r0, r4
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020A1064: .4byte 0x021D442C
	arm_func_end FUN_020A0F6C

	arm_func_start FUN_020A1068
FUN_020A1068: @ 0x020A1068
	push {r4, lr}
	mov r4, r0
	cmp r2, #0
	moveq r0, #0
	str r0, [r1, #4]
	mov r0, r2
	str r2, [r1]
	bl FUN_020A2D90
	add r0, r4, r0
	pop {r4, pc}
	arm_func_end FUN_020A1068

	arm_func_start FUN_020A1090
FUN_020A1090: @ 0x020A1090
	push {r3, r4, r5, r6, r7, lr}
	sub sp, sp, #8
	mov r5, r2
	mov r7, r0
	mov r0, r5
	mov r6, r1
	bl FUN_020A0F44
	mov r4, r0
	ldrb r2, [r5, #3]
	mov r0, r6
	mov r1, r7
	bl FUN_020D2388
	add r0, r6, #0xe0
	bl FUN_020D2600
	ldrh r2, [r5]
	add r0, r6, #0x20
	ldr r1, _020A1100 @ =FUN_020A0CFC
	str r2, [sp]
	ldrb ip, [r5, #2]
	mov r2, r6
	add r3, r7, r4
	str ip, [sp, #4]
	bl FUN_020D1AD4
	add r0, r6, #0x20
	bl FUN_020D1F34
	add r0, r7, r4
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020A1100: .4byte FUN_020A0CFC
	arm_func_end FUN_020A1090

	arm_func_start FUN_020A1104
FUN_020A1104: @ 0x020A1104
	push {r4, lr}
	mov r4, r0
	bl FUN_020A2E54
	cmp r0, #0
	mvnne r0, #0x1b
	popne {r4, pc}
	cmp r4, #0
	mov r1, #0
	beq _020A1134
	ldrsh r0, [r4, #0x70]
	tst r0, #1
	movne r1, #1
_020A1134:
	cmp r1, #0
	mvneq r0, #0x26
	popeq {r4, pc}
	ldrsh r0, [r4, #0x70]
	tst r0, #2
	mvnne r0, #0x1b
	popne {r4, pc}
	ldrsb r0, [r4, #0x73]
	mov r1, #1
	cmp r0, #0
	cmpne r0, #4
	movne r1, #0
	cmp r1, #0
	mvneq r0, #0x1b
	popeq {r4, pc}
	ldrsb r0, [r4, #0x72]
	cmp r0, #1
	moveq r0, #0
	mvnne r0, #5
	pop {r4, pc}
	arm_func_end FUN_020A1104

	arm_func_start FUN_020A1184
FUN_020A1184: @ 0x020A1184
	push {r3, r4, r5, r6, r7, lr}
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_020A2E54
	cmp r0, #0
	mvnne r0, #0x1b
	popne {r3, r4, r5, r6, r7, pc}
	cmp r6, #0
	mov r1, #0
	beq _020A11BC
	ldrsh r0, [r6, #0x70]
	tst r0, #1
	movne r1, #1
_020A11BC:
	cmp r1, #0
	mvneq r0, #0x26
	popeq {r3, r4, r5, r6, r7, pc}
	ldrsh r0, [r6, #0x70]
	tst r0, #2
	mvnne r0, #0x1b
	popne {r3, r4, r5, r6, r7, pc}
	ldrsb r0, [r6, #0x73]
	mov r1, #1
	cmp r0, #0
	cmpne r0, #4
	movne r1, #0
	cmp r1, #0
	mvneq r0, #0x1b
	popeq {r3, r4, r5, r6, r7, pc}
	ldrsb r0, [r6, #0x72]
	cmp r0, #1
	mvnne r0, #5
	popne {r3, r4, r5, r6, r7, pc}
	ldr r0, _020A1244 @ =_02110648
	bl FUN_020A0DAC
	movs r7, r0
	popmi {r3, r4, r5, r6, r7, pc}
	ldrh r1, [r6, #0x74]
	bl FUN_020A1390
	cmp r0, #0
	poplt {r3, r4, r5, r6, r7, pc}
	mov r0, r7
	mov r1, r5
	mov r2, r4
	bl FUN_020A1248
	cmp r0, #0
	movge r0, r7
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020A1244: .4byte _02110648
	arm_func_end FUN_020A1184

	arm_func_start FUN_020A1248
FUN_020A1248: @ 0x020A1248
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_020A2E54
	cmp r0, #0
	mvnne r0, #0x1b
	popne {r4, r5, r6, pc}
	cmp r6, #0
	mov r1, #0
	beq _020A1280
	ldrsh r0, [r6, #0x70]
	tst r0, #1
	movne r1, #1
_020A1280:
	cmp r1, #0
	mvneq r0, #0x26
	popeq {r4, r5, r6, pc}
	ldrsh r0, [r6, #0x70]
	tst r0, #2
	mvnne r0, #0x1b
	popne {r4, r5, r6, pc}
	ldrsb r0, [r6, #0x73]
	mov r1, #1
	cmp r0, #0
	cmpne r0, #4
	movne r1, #0
	cmp r1, #0
	mvneq r0, #0x1b
	popeq {r4, r5, r6, pc}
	ldrsb r2, [r6, #0x72]
	cmp r2, #1
	mvnne r0, #5
	popne {r4, r5, r6, pc}
	ldrh r0, [r6, #0x74]
	cmp r0, #0
	mvneq r0, #0x1b
	popeq {r4, r5, r6, pc}
	ldr r0, _020A1314 @ =FUN_020A1318
	mov r1, r6
	bl FUN_020A0B7C
	mov r1, r0
	ldrh r2, [r6, #0x74]
	mov r0, r6
	strh r2, [r1, #0x10]
	str r5, [r1, #0x14]
	str r4, [r1, #0x18]
	ldrsh r2, [r6, #0x70]
	orr r2, r2, #2
	strh r2, [r6, #0x70]
	bl FUN_020A0CC4
	pop {r4, r5, r6, pc}
	.align 2, 0
_020A1314: .4byte FUN_020A1318
	arm_func_end FUN_020A1248

	arm_func_start FUN_020A1318
FUN_020A1318: @ 0x020A1318
	push {r4, r5, r6, lr}
	sub sp, sp, #8
	mov r6, r0
	ldr r4, [r6, #4]
	ldr r5, [r4, #0x64]
	add r0, r5, #0xe0
	bl FUN_020D2618
	mov r1, #0
	ldrh r0, [r6, #0x10]
	mov r2, r1
	bl FUN_020A68D0
	bl FUN_020A69F8
	mov r2, #0
	add r0, sp, #0
	add r1, sp, #4
	str r2, [r5, #0xf8]
	bl FUN_020A6B24
	ldrh r2, [sp]
	ldr r1, [r6, #0x14]
	strh r2, [r1]
	ldr r1, [r6, #0x18]
	str r0, [r1]
	ldrsh r1, [r4, #0x70]
	add r0, r5, #0xe0
	orr r1, r1, #4
	strh r1, [r4, #0x70]
	bl FUN_020D269C
	mov r0, #0
	add sp, sp, #8
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020A1318

	arm_func_start FUN_020A1390
FUN_020A1390: @ 0x020A1390
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	bl FUN_020A2E54
	cmp r0, #0
	mvnne r0, #0x1b
	popne {r3, r4, r5, pc}
	cmp r5, #0
	mov r1, #0
	beq _020A13C4
	ldrsh r0, [r5, #0x70]
	tst r0, #1
	movne r1, #1
_020A13C4:
	cmp r1, #0
	mvneq r0, #0x26
	popeq {r3, r4, r5, pc}
	ldrsh r0, [r5, #0x70]
	tst r0, #2
	mvnne r0, #6
	popne {r3, r4, r5, pc}
	strh r4, [r5, #0x74]
	ldrsb r0, [r5, #0x73]
	cmp r0, #1
	movne r0, #0
	popne {r3, r4, r5, pc}
	mov r0, r5
	bl FUN_020A14E8
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020A1390

	arm_func_start FUN_020A1400
FUN_020A1400: @ 0x020A1400
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_020A2E54
	cmp r0, #0
	bne _020A1428
	ldrsh r0, [r6, #0x70]
	tst r0, #8
	beq _020A1430
_020A1428:
	mvn r0, #0x1b
	pop {r4, r5, r6, pc}
_020A1430:
	cmp r6, #0
	mov r1, #0
	beq _020A1448
	ldrsh r0, [r6, #0x70]
	tst r0, #1
	movne r1, #1
_020A1448:
	cmp r1, #0
	mvneq r0, #0x26
	popeq {r4, r5, r6, pc}
	ldrsb r0, [r6, #0x73]
	mov r1, #1
	cmp r0, #0
	cmpne r0, #4
	movne r1, #0
	cmp r1, #0
	beq _020A14D4
	ldrsh r0, [r6, #0x70]
	tst r0, #4
	beq _020A1490
	ldrsb r0, [r6, #0x72]
	cmp r0, #1
	mvneq r0, #0x1d
	movne r0, #0
	pop {r4, r5, r6, pc}
_020A1490:
	ldrsh r0, [r6, #0x70]
	tst r0, #2
	beq _020A14B4
	ldrsh r0, [r6, #0x70]
	tst r0, #0x40
	ldrne r0, [r6, #0x6c]
	ldreq r0, _020A14E4 @ =_0211062C
	ldreq r0, [r0]
	pop {r4, r5, r6, pc}
_020A14B4:
	strh r5, [r6, #0x76]
	mov r0, r6
	str r4, [r6, #0x78]
	bl FUN_020A14E8
	ldrsb r1, [r6, #0x72]
	cmp r1, #1
	mvnne r0, #0x19
	pop {r4, r5, r6, pc}
_020A14D4:
	strh r5, [r6, #0x76]
	str r4, [r6, #0x78]
	mov r0, #0
	pop {r4, r5, r6, pc}
	.align 2, 0
_020A14E4: .4byte _0211062C
	arm_func_end FUN_020A1400

	arm_func_start FUN_020A14E8
FUN_020A14E8: @ 0x020A14E8
	push {r4, lr}
	mov r4, r0
	ldrsb r2, [r4, #0x72]
	ldr r0, _020A153C @ =FUN_020A1540
	mov r1, r4
	bl FUN_020A0B7C
	movs r1, r0
	mvneq r0, #0x20
	popeq {r4, pc}
	ldrh r2, [r4, #0x74]
	mov r0, r4
	strh r2, [r1, #0x10]
	ldrh r2, [r4, #0x76]
	strh r2, [r1, #0x12]
	ldr r2, [r4, #0x78]
	str r2, [r1, #0x14]
	ldrsh r2, [r4, #0x70]
	orr r2, r2, #2
	strh r2, [r4, #0x70]
	bl FUN_020A0CC4
	pop {r4, pc}
	.align 2, 0
_020A153C: .4byte FUN_020A1540
	arm_func_end FUN_020A14E8

	arm_func_start FUN_020A1540
FUN_020A1540: @ 0x020A1540
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	ldr r4, [r7, #4]
	mov r6, #0
	ldr r5, [r4, #0x64]
	add r0, r5, #0xe0
	bl FUN_020D2618
	ldrh r0, [r7, #0x10]
	ldrh r1, [r7, #0x12]
	ldr r2, [r7, #0x14]
	bl FUN_020A68D0
	mov r0, r6
	str r0, [r5, #0xf8]
	ldrsb r0, [r7, #0xc]
	cmp r0, #0
	cmpne r0, #4
	bne _020A158C
	bl FUN_020A6AE4
	mov r6, r0
_020A158C:
	add r0, r5, #0xe0
	bl FUN_020D269C
	cmp r6, #0
	beq _020A15B0
	ldrsh r1, [r4, #0x70]
	mvn r0, #0x4b
	orr r1, r1, #0x40
	strh r1, [r4, #0x70]
	pop {r3, r4, r5, r6, r7, pc}
_020A15B0:
	ldrsh r1, [r4, #0x70]
	mov r0, #0
	orr r1, r1, #4
	strh r1, [r4, #0x70]
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020A1540

	arm_func_start FUN_020A15C4
FUN_020A15C4: @ 0x020A15C4
	push {r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #0xc
	mov sb, r0
	mov r8, r1
	mov r7, r2
	mov r6, r3
	bl FUN_020A2E54
	cmp r0, #0
	addne sp, sp, #0xc
	mvnne r0, #0x1b
	popne {r4, r5, r6, r7, r8, sb, pc}
	ldr r0, [sp, #0x2c]
	tst r0, #4
	bne _020A1608
	ldrsb r0, [sb, #0x72]
	cmp r0, #0
	bne _020A1624
_020A1608:
	ldrsb r0, [sb, #0x73]
	cmp r0, #4
	addeq sp, sp, #0xc
	mvneq r0, #0x1b
	popeq {r4, r5, r6, r7, r8, sb, pc}
	mov r5, #0
	b _020A163C
_020A1624:
	bl FUN_020D3A9C
	cmp r0, #0x12
	addeq sp, sp, #0xc
	mvneq r0, #0x1b
	popeq {r4, r5, r6, r7, r8, sb, pc}
	mov r5, #1
_020A163C:
	cmp sb, #0
	mov r1, #0
	beq _020A1654
	ldrsh r0, [sb, #0x70]
	tst r0, #1
	movne r1, #1
_020A1654:
	cmp r1, #0
	addeq sp, sp, #0xc
	mvneq r0, #0x26
	popeq {r4, r5, r6, r7, r8, sb, pc}
	ldrsb r0, [sb, #0x73]
	mov r1, #1
	cmp r0, #0
	cmpne r0, #4
	movne r1, #0
	cmp r1, #0
	beq _020A16A4
	ldrsh r0, [sb, #0x70]
	tst r0, #4
	beq _020A1698
	ldrsh r0, [sb, #0x70]
	tst r0, #8
	beq _020A16A4
_020A1698:
	add sp, sp, #0xc
	mvn r0, #0x37
	pop {r4, r5, r6, r7, r8, sb, pc}
_020A16A4:
	ldr r4, [sb, #0x64]
	tst r5, #1
	add r0, r4, #0xe0
	bne _020A16CC
	bl FUN_020D2734
	cmp r0, #0
	bne _020A16D0
	add sp, sp, #0xc
	mvn r0, #5
	pop {r4, r5, r6, r7, r8, sb, pc}
_020A16CC:
	bl FUN_020D2618
_020A16D0:
	ldr r0, [sp, #0x28]
	ldr ip, [sp, #0x2c]
	str r0, [sp]
	mov r0, sb
	mov r1, r8
	mov r2, r7
	mov r3, r6
	stmib sp, {r5, ip}
	bl FUN_020A170C
	mov r5, r0
	add r0, r4, #0xe0
	bl FUN_020D269C
	mov r0, r5
	add sp, sp, #0xc
	pop {r4, r5, r6, r7, r8, sb, pc}
	arm_func_end FUN_020A15C4

	arm_func_start FUN_020A170C
FUN_020A170C: @ 0x020A170C
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #8
	ldr r4, [sp, #0x28]
	mov r7, r0
	tst r4, #2
	ldr r4, [r7, #0x64]
	cmpne r4, #0
	movne r6, #1
	moveq r6, #0
	cmp r6, #0
	ldrsbne r5, [r4, #0xfe]
	movne r0, #1
	strbne r0, [r4, #0xfe]
	ldrsb r0, [r7, #0x73]
	cmp r0, #1
	bne _020A176C
	ldr r0, [sp, #0x20]
	ldr ip, [sp, #0x24]
	str r0, [sp]
	mov r0, r7
	str ip, [sp, #4]
	bl FUN_020A1BCC
	mov r8, r0
	b _020A1794
_020A176C:
	ldr r0, [sp, #0x20]
	ldr ip, [sp, #0x24]
	str r0, [sp]
	mov r0, r7
	str ip, [sp, #4]
	bl FUN_020A17A8
	movs r8, r0
	bmi _020A1794
	mov r0, r7
	bl FUN_020A1B34
_020A1794:
	cmp r6, #0
	strbne r5, [r4, #0xfe]
	mov r0, r8
	add sp, sp, #8
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020A170C

	arm_func_start FUN_020A17A8
FUN_020A17A8: @ 0x020A17A8
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	ldrsb ip, [r7, #0x73]
	mov r6, r1
	mov r5, r2
	mov r4, r3
	cmp ip, #4
	bne _020A17D8
	ldr r4, [sp, #0x18]
	str r4, [sp]
	bl FUN_020A1998
	pop {r3, r4, r5, r6, r7, pc}
_020A17D8:
	ldr ip, [sp, #0x18]
	str ip, [sp]
	bl FUN_020A181C
	mvn r1, #5
	cmp r0, r1
	popne {r3, r4, r5, r6, r7, pc}
	ldr r1, [sp, #0x1c]
	tst r1, #1
	popeq {r3, r4, r5, r6, r7, pc}
	ldr ip, [sp, #0x18]
	mov r0, r7
	mov r1, r6
	mov r2, r5
	mov r3, r4
	str ip, [sp]
	bl FUN_020A1998
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020A17A8

	arm_func_start FUN_020A181C
FUN_020A181C: @ 0x020A181C
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #0x10
	mov sb, r0
	mov r8, r1
	mov r7, r2
	mov r6, r3
	bl FUN_020D3A38
	add r1, sp, #8
	mov r4, r0
	str r1, [sp]
	add r1, sp, #0xc
	mov r0, sb
	add r2, sp, #6
	add r3, sp, #4
	bl FUN_020A1924
	cmp r0, #0
	beq _020A18BC
	ldr r5, [sp, #0xc]
	cmp r5, #0
	mvneq r5, #5
	beq _020A18D8
	ldrsb r1, [sb, #0x73]
	cmp r7, r5
	mov r2, #1
	movgt r7, r5
	cmp r1, #0
	cmpne r1, #4
	movne r2, #0
	cmp r2, #0
	mov r1, r8
	mov r2, r7
	movne r5, r7
	bl FUN_020D4A50
	ldr r1, [sb, #0x64]
	ldrsb r0, [r1, #0xfe]
	cmp r0, #0
	ldreq r0, [r1, #0xf8]
	addeq r0, r0, r5
	streq r0, [r1, #0xf8]
	b _020A18D8
_020A18BC:
	ldr r0, [sp, #0xc]
	cmp r0, #0
	ldrsh r0, [sb, #0x70]
	moveq r5, #0
	mvnne r5, #0x1b
	bic r0, r0, #6
	strh r0, [sb, #0x70]
_020A18D8:
	cmp r5, #0
	blt _020A1910
	cmp r6, #0
	ldrne r1, [sp, #0x30]
	cmpne r1, #0
	beq _020A1900
	ldrh r0, [sp, #4]
	strh r0, [r6]
	ldr r0, [sp, #8]
	str r0, [r1]
_020A1900:
	ldrh r0, [sb, #0x74]
	cmp r0, #0
	ldrheq r0, [sp, #6]
	strheq r0, [sb, #0x74]
_020A1910:
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, r5
	add sp, sp, #0x10
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	arm_func_end FUN_020A181C

	arm_func_start FUN_020A1924
FUN_020A1924: @ 0x020A1924
	push {r3, r4, r5, lr}
	ldr r0, [r0, #0x64]
	ldr r4, [r0, #0xc4]
	ldr r5, [r0, #0xf8]
	ldr r0, [r4, #0x44]
	subs lr, r0, r5
	bmi _020A197C
	ldrh ip, [r4, #0xa]
	ldr r0, [sp, #0x10]
	cmp lr, #0
	strh ip, [r2]
	ldrh r2, [r4, #0x18]
	strh r2, [r3]
	ldr r2, [r4, #0x1c]
	str r2, [r0]
	str lr, [r1]
	bne _020A198C
	ldrb r0, [r4, #8]
	cmp r0, #4
	beq _020A198C
	mov r0, #0
	pop {r3, r4, r5, pc}
_020A197C:
	mvn r0, #0
	str r0, [r1]
	mov r0, #0
	pop {r3, r4, r5, pc}
_020A198C:
	ldr r0, [r4, #0x40]
	add r0, r0, r5
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020A1924

	arm_func_start FUN_020A1998
FUN_020A1998: @ 0x020A1998
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	mov r6, r1
	mov r5, r2
	ldr r0, _020A19E0 @ =FUN_020A19E4
	mov r1, r7
	mov r2, #1
	mov r4, r3
	bl FUN_020A0B7C
	mov r1, r0
	str r6, [r1, #0x10]
	str r5, [r1, #0x14]
	ldr r2, [sp, #0x18]
	str r4, [r1, #0x18]
	mov r0, r7
	str r2, [r1, #0x1c]
	bl FUN_020A0CC4
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020A19E0: .4byte FUN_020A19E4
	arm_func_end FUN_020A1998

	arm_func_start FUN_020A19E4
FUN_020A19E4: @ 0x020A19E4
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x14
	ldr r7, [r0, #4]
	ldr r1, [r0, #0x10]
	ldr r8, [r7, #0x64]
	str r1, [sp, #0xc]
	ldr r1, [r0, #0x18]
	ldr sl, [r0, #0x14]
	ldr r0, [r0, #0x1c]
	ldr sb, [r8, #0xf8]
	str r1, [sp, #8]
	str r0, [sp, #4]
	mov r4, #0
	mov r5, #1
	mov fp, #0xa
	add r6, sp, #0x10
_020A1A24:
	mov r0, r6
	bl FUN_020A6D58
	cmp r0, #0
	beq _020A1A78
	ldr r1, [sp, #0x10]
	sub r1, r1, sb
	cmp r1, #0
	bgt _020A1A78
	ldrsb r0, [r7, #0x73]
	mov r1, r5
	cmp r0, #0
	cmpne r0, #4
	movne r1, r4
	cmp r1, #0
	ldrbne r0, [r7, #8]
	cmpne r0, #4
	movne r0, #0
	bne _020A1A78
	mov r0, fp
	bl FUN_020D2108
	b _020A1A24
_020A1A78:
	ldrsh r1, [r7, #0x70]
	tst r1, #0x80
	addne sp, sp, #0x14
	mvnne r0, #0xe
	popne {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldrsb r1, [r7, #0x73]
	cmp r1, #4
	bne _020A1AD4
	cmp r0, #0
	addeq sp, sp, #0x14
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r1, [sp, #0x10]
	cmp sl, r1
	movhi sl, r1
	ldr r1, [sp, #0xc]
	mov r2, sl
	bl FUN_020D4A50
	mov r0, sl
	bl FUN_020A6E4C
	add sp, sp, #0x14
	mov r0, sl
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020A1AD4:
	cmp r0, #0
	moveq r4, #0
	beq _020A1B00
	ldr r4, [sp, #4]
	ldr r1, [sp, #0xc]
	ldr r3, [sp, #8]
	mov r0, r7
	mov r2, sl
	str r4, [sp]
	bl FUN_020A181C
	mov r4, r0
_020A1B00:
	cmp r4, #0
	addle sp, sp, #0x14
	movle r0, r4
	pople {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldrh r0, [r8, #0xfc]
	ldr r1, [r8, #0xf8]
	cmp r1, r0
	blt _020A1B28
	mov r0, r7
	bl FUN_020A1B90
_020A1B28:
	mov r0, r4
	add sp, sp, #0x14
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_020A19E4

	arm_func_start FUN_020A1B34
FUN_020A1B34: @ 0x020A1B34
	push {r4, lr}
	mov r4, r0
	ldr r1, [r4, #0x64]
	ldrh r0, [r1, #0xfc]
	ldr r1, [r1, #0xf8]
	cmp r1, r0
	movlt r0, #0
	poplt {r4, pc}
	ldr r0, _020A1B7C @ =FUN_020A1B80
	mov r1, r4
	mov r2, #0
	bl FUN_020A0B7C
	movs r1, r0
	mvneq r0, #0x20
	popeq {r4, pc}
	mov r0, r4
	bl FUN_020A0CC4
	pop {r4, pc}
	.align 2, 0
_020A1B7C: .4byte FUN_020A1B80
	arm_func_end FUN_020A1B34

	arm_func_start FUN_020A1B80
FUN_020A1B80: @ 0x020A1B80
	ldr ip, _020A1B8C @ =FUN_020A1B90
	ldr r0, [r0, #4]
	bx ip
	.align 2, 0
_020A1B8C: .4byte FUN_020A1B90
	arm_func_end FUN_020A1B80

	arm_func_start FUN_020A1B90
FUN_020A1B90: @ 0x020A1B90
	push {r4, r5, r6, lr}
	ldr r4, [r0, #0x64]
	bl FUN_020D3A38
	ldr r6, [r4, #0xf8]
	mov r5, r0
	cmp r6, #0
	beq _020A1BBC
	mov r1, #0
	mov r0, r6
	str r1, [r4, #0xf8]
	bl FUN_020A6E4C
_020A1BBC:
	mov r0, r5
	bl FUN_020D3A4C
	mov r0, r6
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020A1B90

	arm_func_start FUN_020A1BCC
FUN_020A1BCC: @ 0x020A1BCC
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0xc
	mov sl, r0
	ldr r6, [sl, #0x64]
	str r1, [sp]
	ldr r0, [r6, #0x104]
	str r2, [sp, #4]
	mov fp, r3
	bl FUN_020D3A38
	ldr r7, [r6, #0x104]
	str r0, [sp, #8]
	cmp r7, #0
	bne _020A1C68
	ldr r0, [sp, #0x34]
	mov r4, #1
	and sb, r0, #1
	mov r5, #0
_020A1C10:
	cmp sb, #0
	mvneq r8, #5
	beq _020A1C68
	add r0, r6, #0x10c
	bl FUN_020D1E7C
	mov r0, sl
	bl FUN_020A2E54
	cmp r0, #0
	bne _020A1C54
	mov r1, r5
	cmp sl, #0
	beq _020A1C4C
	ldrsh r0, [sl, #0x70]
	tst r0, #1
	movne r1, r4
_020A1C4C:
	cmp r1, #0
	bne _020A1C5C
_020A1C54:
	mvn r8, #0x37
	b _020A1C68
_020A1C5C:
	ldr r7, [r6, #0x104]
	cmp r7, #0
	beq _020A1C10
_020A1C68:
	cmp r7, #0
	beq _020A1CF8
	ldrh r1, [r7, #4]
	ldr r0, [sp, #4]
	cmp r0, r1
	strgt r1, [sp, #4]
	ldr r1, [sp]
	ldr r2, [sp, #4]
	add r0, r7, #0xc
	bl FUN_020D4A50
	cmp fp, #0
	ldrhne r0, [r7, #6]
	ldr r1, [sp, #0x30]
	strhne r0, [fp]
	cmp r1, #0
	ldrne r0, [r7, #8]
	strne r0, [r1]
	ldrsb r0, [r6, #0xfe]
	ldrh r8, [r7, #4]
	cmp r0, #0
	bne _020A1CF8
	ldr r0, [r7]
	ldr r1, _020A1D0C @ =_02110628
	str r0, [r6, #0x104]
	ldr r0, [r7]
	cmp r0, #0
	moveq r0, #0
	streq r0, [r6, #0x100]
	ldr r1, [r1]
	mov r0, r7
	ldr r1, [r1, #0x1c]
	blx r1
	add r0, r6, #0x100
	ldrh r1, [r0, #8]
	sub r1, r1, r8
	strh r1, [r0, #8]
_020A1CF8:
	ldr r0, [sp, #8]
	bl FUN_020D3A4C
	mov r0, r8
	add sp, sp, #0xc
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020A1D0C: .4byte _02110628
	arm_func_end FUN_020A1BCC

	arm_func_start FUN_020A1D10
FUN_020A1D10: @ 0x020A1D10
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r7, r2
	ldr r4, [r7, #0x64]
	mov sb, r0
	mov r8, r1
	bl FUN_020D3A38
	add r1, r4, #0x100
	ldrh r2, [r1, #8]
	ldrh r1, [r1, #0xa]
	mov r6, r0
	add r0, r2, r8
	cmp r1, r0
	blo _020A1DD4
	ldr r1, _020A1E1C @ =_02110628
	add r0, r8, #0xc
	ldr r1, [r1]
	ldr r1, [r1, #0x18]
	blx r1
	movs r5, r0
	beq _020A1DC0
	add r1, r4, #0x100
	ldrh r3, [r1, #8]
	mov r2, #0
	mov r0, sb
	add r3, r3, r8
	strh r3, [r1, #8]
	str r2, [r5]
	strh r8, [r5, #4]
	ldrh r3, [r7, #0x18]
	mov r2, r8
	add r1, r5, #0xc
	strh r3, [r5, #6]
	ldr r3, [r7, #0x1c]
	str r3, [r5, #8]
	bl FUN_020D4A50
	ldr r0, [r4, #0x100]
	cmp r0, #0
	ldrne r0, [r4, #0x100]
	strne r5, [r0]
	str r5, [r4, #0x100]
	ldr r0, [r4, #0x104]
	cmp r0, #0
	streq r5, [r4, #0x104]
	b _020A1DE4
_020A1DC0:
	ldr r0, _020A1E20 @ =0x021D4484
	ldr r1, [r0]
	add r1, r1, #1
	str r1, [r0]
	b _020A1DE4
_020A1DD4:
	ldr r0, _020A1E20 @ =0x021D4484
	ldr r1, [r0, #4]
	add r1, r1, #1
	str r1, [r0, #4]
_020A1DE4:
	ldrh r0, [r7, #0x74]
	cmp r0, #0
	ldrheq r0, [r7, #0xa]
	strheq r0, [r7, #0x74]
	ldrh r1, [r7, #0x1a]
	add r0, r4, #0x10c
	strh r1, [r7, #0x18]
	ldr r1, [r7, #0x20]
	str r1, [r7, #0x1c]
	bl FUN_020D1ECC
	mov r0, r6
	bl FUN_020D3A4C
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0
_020A1E1C: .4byte _02110628
_020A1E20: .4byte 0x021D4484
	arm_func_end FUN_020A1D10

	arm_func_start FUN_020A1E24
FUN_020A1E24: @ 0x020A1E24
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #8
	mov r8, r0
	mov r7, r1
	mov r6, r2
	mov r5, r3
	bl FUN_020A2E54
	cmp r0, #0
	addne sp, sp, #8
	mvnne r0, #0x1b
	popne {r4, r5, r6, r7, r8, pc}
	cmp r8, #0
	mov r1, #0
	beq _020A1E68
	ldrsh r0, [r8, #0x70]
	tst r0, #1
	movne r1, #1
_020A1E68:
	cmp r1, #0
	addeq sp, sp, #8
	mvneq r0, #0x26
	popeq {r4, r5, r6, r7, r8, pc}
	ldrsb r0, [r8, #0x73]
	mov r1, #1
	cmp r0, #0
	cmpne r0, #4
	movne r1, #0
	cmp r1, #0
	beq _020A1EB8
	ldrsh r0, [r8, #0x70]
	tst r0, #4
	beq _020A1EAC
	ldrsh r0, [r8, #0x70]
	tst r0, #8
	beq _020A1EB8
_020A1EAC:
	add sp, sp, #8
	mvn r0, #0x37
	pop {r4, r5, r6, r7, r8, pc}
_020A1EB8:
	ldr r0, [sp, #0x24]
	ldr r4, [r8, #0x68]
	tst r0, #4
	bne _020A1ED4
	ldrsb r0, [r8, #0x72]
	cmp r0, #0
	bne _020A1EF4
_020A1ED4:
	add r0, r4, #0xe0
	bl FUN_020D2734
	cmp r0, #0
	addeq sp, sp, #8
	mvneq r0, #5
	popeq {r4, r5, r6, r7, r8, pc}
	mov ip, #0
	b _020A1F00
_020A1EF4:
	add r0, r4, #0xe0
	bl FUN_020D2618
	mov ip, #1
_020A1F00:
	ldr r1, [sp, #0x20]
	mov r0, r8
	str r1, [sp]
	mov r1, r7
	mov r2, r6
	mov r3, r5
	str ip, [sp, #4]
	bl FUN_020A1F38
	mov r5, r0
	add r0, r4, #0xe0
	bl FUN_020D269C
	mov r0, r5
	add sp, sp, #8
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020A1E24

	arm_func_start FUN_020A1F38
FUN_020A1F38: @ 0x020A1F38
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x18
	mov sl, r0
	ldr r4, [sl, #0x68]
	ldrsb r0, [sl, #0x73]
	ldr r4, [r4, #0x10c]
	mov sb, r1
	str r3, [sp, #0xc]
	cmp r0, #1
	mov r8, r2
	ldr r7, [sp, #0x40]
	ldr r6, [sp, #0x44]
	ldr r0, [r4, #0x48]
	mov r5, #0
	bne _020A1F90
	sub r0, r0, #0x2a
	cmp r8, r0
	addgt sp, sp, #0x18
	subgt r0, r5, #0x23
	popgt {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	str r8, [sp, #0x10]
	b _020A1FA0
_020A1F90:
	sub r0, r0, #0x36
	str r0, [sp, #0x10]
	cmp r8, r0
	strle r8, [sp, #0x10]
_020A1FA0:
	cmp r8, #0
	ble _020A2030
	and fp, r6, #1
_020A1FAC:
	ldr r2, [sp, #0x10]
	mov r0, sl
	mov r1, r8
	add r3, sp, #0x14
	str r6, [sp]
	bl FUN_020A203C
	mov r4, r0
	cmp r4, #0
	ble _020A200C
	ldr r0, [sp, #0xc]
	mov r1, sb
	stm sp, {r0, r7}
	str r6, [sp, #8]
	ldr r3, [sp, #0x14]
	mov r0, sl
	mov r2, r4
	bl FUN_020A20E4
	cmp r0, #0
	addle sp, sp, #0x18
	mvnle r0, #5
	pople {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	add sb, sb, r4
	sub r8, r8, r4
	add r5, r5, r4
_020A200C:
	cmp fp, #0
	bne _020A2028
	cmp r4, #0
	bgt _020A2030
	add sp, sp, #0x18
	mvn r0, #5
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020A2028:
	cmp r8, #0
	bgt _020A1FAC
_020A2030:
	mov r0, r5
	add sp, sp, #0x18
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_020A1F38

	arm_func_start FUN_020A203C
FUN_020A203C: @ 0x020A203C
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sl, r0
	mov sb, r1
	mov r8, r2
	cmp r8, sb
	mov r7, r3
	ldr r4, [sl, #0x68]
	movgt r8, sb
	bl FUN_020D3A38
	ldr r1, [sp, #0x28]
	mov fp, r0
	and r6, r1, #1
_020A206C:
	mov r0, sl
	bl FUN_020A20C0
	mov r5, r0
	cmp r5, r8
	blt _020A2098
	add r0, r4, #0x100
	ldrh r0, [r0]
	cmp r5, sb
	movge r5, sb
	str r0, [r7]
	b _020A20B0
_020A2098:
	cmp r6, #0
	moveq r5, #0
	beq _020A20B0
	add r0, r4, #0x104
	bl FUN_020D1E7C
	b _020A206C
_020A20B0:
	mov r0, fp
	bl FUN_020D3A4C
	mov r0, r5
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_020A203C

	arm_func_start FUN_020A20C0
FUN_020A20C0: @ 0x020A20C0
	ldr r2, [r0, #0x68]
	add r0, r2, #0x100
	ldrh r1, [r0]
	ldrh r0, [r0, #2]
	ldr r2, [r2, #0xf8]
	sub r0, r0, r1
	subs r0, r0, #1
	addmi r0, r0, r2
	bx lr
	arm_func_end FUN_020A20C0

	arm_func_start FUN_020A20E4
FUN_020A20E4: @ 0x020A20E4
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov sb, r0
	ldr r4, [sb, #0x68]
	mov r6, r1
	mov r8, r2
	ldr r1, [r4, #0x10c]
	ldr r2, [sp, #0x28]
	ldr r0, _020A2254 @ =FUN_020A2258
	mov r7, r3
	bl FUN_020A0B7C
	movs r5, r0
	mvneq r0, #0x20
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	ldr r0, [sp, #0x28]
	add r1, r7, r8
	tst r0, #1
	ldrsbne r0, [sb, #0x73]
	cmpne r0, #1
	movne r0, #3
	strbne r0, [r5, #0xd]
	moveq r0, #0
	strbeq r0, [r5, #0xd]
	ldr r3, [r4, #0xfc]
	ldr r2, [r4, #0xf8]
	add r0, r3, r7
	cmp r1, r2
	str r0, [r5, #0x10]
	bge _020A216C
	str r8, [r5, #0x14]
	mov r0, #0
	str r0, [r5, #0x18]
	mov r7, r1
	str r0, [r5, #0x1c]
	b _020A2198
_020A216C:
	sub r0, r2, r7
	str r0, [r5, #0x14]
	str r3, [r5, #0x18]
	ldr r0, [r5, #0x14]
	sub r7, r8, r0
	str r7, [r5, #0x1c]
	ldr r0, [r5, #0x14]
	ldr r1, [r5, #0x18]
	mov r2, r7
	add r0, r6, r0
	bl FUN_020D4A50
_020A2198:
	ldr r1, [r5, #0x10]
	ldr r2, [r5, #0x14]
	mov r0, r6
	bl FUN_020D4A50
	add r0, r4, #0x100
	ldrh r6, [r0]
	strh r7, [r5, #0x20]
	ldrh r1, [r5, #0x20]
	strh r1, [r0]
	ldrsb r0, [sb, #0x73]
	cmp r0, #1
	bne _020A2228
	ldrh r0, [sb, #0x74]
	cmp r0, #0
	bne _020A21E4
	bl FUN_020A678C
	strh r0, [sb, #0x74]
	ldrh r0, [sb, #0x74]
	strh r0, [sb, #0xa]
_020A21E4:
	ldrh r0, [sb, #0x74]
	strh r0, [r5, #0x24]
	ldr r1, [sb, #0x78]
	cmp r1, #0
	beq _020A2204
	ldr r0, [sp, #0x24]
	cmp r0, #0
	beq _020A2218
_020A2204:
	ldr r1, [sp, #0x24]
	ldrh r0, [sp, #0x20]
	str r1, [r5, #0x28]
	strh r0, [r5, #0x26]
	b _020A2230
_020A2218:
	str r1, [r5, #0x28]
	ldrh r0, [sb, #0x76]
	strh r0, [r5, #0x26]
	b _020A2230
_020A2228:
	mov r0, #0
	str r0, [r5, #0x28]
_020A2230:
	ldr r0, [r4, #0x10c]
	mov r1, r5
	bl FUN_020A0CD4
	cmp r0, #0
	addne r0, r4, #0x100
	movne r8, #0
	strhne r6, [r0]
	mov r0, r8
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0
_020A2254: .4byte FUN_020A2258
	arm_func_end FUN_020A20E4

	arm_func_start FUN_020A2258
FUN_020A2258: @ 0x020A2258
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	mov sb, r0
	ldr r5, [sb, #4]
	mov r7, #0
	ldrsb r0, [r5, #0x73]
	mov r1, #1
	ldr r6, [r5, #0x68]
	cmp r0, #0
	cmpne r0, #4
	movne r1, r7
	cmp r1, #0
	beq _020A2294
	ldrsh r0, [r5, #0x70]
	tst r0, #4
	beq _020A2368
_020A2294:
	ldr r2, [sb, #0x28]
	cmp r2, #0
	beq _020A22AC
	ldrh r0, [sb, #0x24]
	ldrh r1, [sb, #0x26]
	bl FUN_020A68D0
_020A22AC:
	ldrsb r1, [r5, #0x73]
	mov r0, #1
	ldr r4, [r5, #0x4c]
	cmp r1, #0
	cmpne r1, #4
	movne r0, #0
	cmp r0, #0
	movne r8, #0x36
	moveq r8, #0x2a
	cmp r1, #0
	cmpne r1, #4
	ldrne r0, [r5, #0x48]
	subne sl, r0, r8
	bne _020A22F4
	ldr r0, [r5, #0x48]
	sub r0, r0, r8
	bl FUN_020A2388
	mov sl, r0
_020A22F4:
	mov r1, sl
	mov r2, sb
	add r0, r4, r8
	bl FUN_020A242C
	mov r1, r0
	cmp r1, #0
	ble _020A236C
	add r0, r4, r8
	bl FUN_020A7260
	cmp r0, #0
	bgt _020A2360
	ldrsb r0, [r5, #0x73]
	mov r1, #1
	cmp r0, #0
	cmpne r0, #4
	movne r1, #0
	cmp r1, #0
	beq _020A2358
	ldrsh r0, [r5, #0x70]
	bic r0, r0, #0xe
	strh r0, [r5, #0x70]
	ldrsh r0, [r5, #0x70]
	orr r0, r0, #0x80
	strh r0, [r5, #0x70]
	bl FUN_020A6C00
_020A2358:
	mvn r7, #0x4b
	b _020A236C
_020A2360:
	add r7, r7, r0
	b _020A22F4
_020A2368:
	mvn r7, #0x4b
_020A236C:
	ldrh r2, [sb, #0x20]
	add r1, r6, #0x100
	add r0, r6, #0x104
	strh r2, [r1, #2]
	bl FUN_020D1ECC
	mov r0, r7
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	arm_func_end FUN_020A2258

	arm_func_start FUN_020A2388
FUN_020A2388: @ 0x020A2388
	push {r3, r4, r5, lr}
	ldr r1, _020A2424 @ =0x021E16A0
	mov r4, r0
	ldr r0, [r1, #4]
	ldr r5, [r0, #0xa4]
	bl FUN_020D3A38
	cmp r5, #0
	beq _020A23EC
	ldrh r3, [r5, #0x2e]
	cmp r3, #0
	ldrhne r2, [r5, #0x2c]
	cmpne r2, #0
	beq _020A23DC
	ldr r1, _020A2428 @ =0x021D4430
	cmp r3, r2
	ldr r1, [r1, #0x24]
	movgt r3, r2
	cmp r3, r1
	movgt r3, r1
	lsl r5, r3, #1
	b _020A23F8
_020A23DC:
	ldr r1, _020A2428 @ =0x021D4430
	ldr r1, [r1, #0x24]
	lsl r5, r1, #1
	b _020A23F8
_020A23EC:
	ldr r1, _020A2428 @ =0x021D4430
	ldr r1, [r1, #0x24]
	lsl r5, r1, #1
_020A23F8:
	bl FUN_020D3A4C
	cmp r5, #0
	ble _020A241C
	mov r0, r4
	mov r1, r5
	bl FUN_020F2998
	cmp r0, #0
	mulgt r0, r5, r0
	popgt {r3, r4, r5, pc}
_020A241C:
	mov r0, r4
	pop {r3, r4, r5, pc}
	.align 2, 0
_020A2424: .4byte 0x021E16A0
_020A2428: .4byte 0x021D4430
	arm_func_end FUN_020A2388

	arm_func_start FUN_020A242C
FUN_020A242C: @ 0x020A242C
	push {r3, r4, r5, r6, r7, lr}
	mov r6, r2
	ldr r4, [r6, #0x14]
	ldr r5, [r6, #0x1c]
	cmp r4, r1
	mov r7, r0
	movgt r4, r1
	movgt r5, #0
	bgt _020A245C
	sub r0, r1, r4
	cmp r5, r0
	movgt r5, r0
_020A245C:
	cmp r4, #0
	ble _020A248C
	ldr r0, [r6, #0x10]
	mov r1, r7
	mov r2, r4
	bl FUN_020D4A50
	ldr r0, [r6, #0x10]
	add r0, r0, r4
	str r0, [r6, #0x10]
	ldr r0, [r6, #0x14]
	sub r0, r0, r4
	str r0, [r6, #0x14]
_020A248C:
	cmp r5, #0
	ble _020A24BC
	ldr r0, [r6, #0x18]
	mov r2, r5
	add r1, r7, r4
	bl FUN_020D4A50
	ldr r0, [r6, #0x18]
	add r0, r0, r5
	str r0, [r6, #0x18]
	ldr r0, [r6, #0x1c]
	sub r0, r0, r5
	str r0, [r6, #0x1c]
_020A24BC:
	add r0, r4, r5
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020A242C

	arm_func_start FUN_020A24C4
FUN_020A24C4: @ 0x020A24C4
	push {r3, r4, r5, lr}
	mov r4, r0
	bl FUN_020A2E54
	cmp r0, #0
	mvnne r0, #0x1b
	popne {r3, r4, r5, pc}
	cmp r4, #0
	mov r1, #0
	beq _020A24F4
	ldrsh r0, [r4, #0x70]
	tst r0, #1
	movne r1, #1
_020A24F4:
	cmp r1, #0
	mvneq r0, #0x26
	popeq {r3, r4, r5, pc}
	ldrsh r0, [r4, #0x70]
	tst r0, #4
	beq _020A2518
	ldrsh r0, [r4, #0x70]
	tst r0, #8
	beq _020A2520
_020A2518:
	mvn r0, #0x37
	pop {r3, r4, r5, pc}
_020A2520:
	ldrsh r0, [r4, #0x70]
	orr r0, r0, #8
	strh r0, [r4, #0x70]
	ldr r5, [r4, #0x68]
	cmp r5, #0
	ldrne r1, [r5, #0x10c]
	cmpne r1, #0
	beq _020A2564
	ldrsb r2, [r4, #0x72]
	ldr r0, _020A256C @ =FUN_020A2570
	bl FUN_020A0B7C
	movs r1, r0
	mvneq r0, #0x20
	popeq {r3, r4, r5, pc}
	ldr r0, [r5, #0x10c]
	bl FUN_020A0CD4
	pop {r3, r4, r5, pc}
_020A2564:
	mov r0, #0
	pop {r3, r4, r5, pc}
	.align 2, 0
_020A256C: .4byte FUN_020A2570
	arm_func_end FUN_020A24C4

	arm_func_start FUN_020A2570
FUN_020A2570: @ 0x020A2570
	push {r3, lr}
	ldr r0, [r0, #4]
	mov r1, #1
	ldrsb r0, [r0, #0x73]
	cmp r0, #0
	cmpne r0, #4
	movne r1, #0
	cmp r1, #0
	beq _020A2598
	bl FUN_020A6BC4
_020A2598:
	mov r0, #0
	pop {r3, pc}
	arm_func_end FUN_020A2570

	arm_func_start FUN_020A25A0
FUN_020A25A0: @ 0x020A25A0
	push {r4, lr}
	movs r4, r0
	bmi _020A25CC
	bl FUN_020A2E54
	cmp r0, #0
	beq _020A25CC
	mov r0, r4
	bl FUN_020A2E88
	cmp r0, #0
	moveq r0, #1
	popeq {r4, pc}
_020A25CC:
	mov r0, #0
	pop {r4, pc}
	arm_func_end FUN_020A25A0

	arm_func_start FUN_020A25D4
FUN_020A25D4: @ 0x020A25D4
	push {r4, lr}
	mov r4, r0
	cmp r4, #0
	mvnle r0, #0x1b
	pople {r4, pc}
	bl FUN_020A2E88
	cmp r0, #0
	mvnne r0, #0x19
	popne {r4, pc}
	mov r0, r4
	bl FUN_020A2E54
	cmp r0, #0
	movne r0, #0
	popne {r4, pc}
	cmp r4, #0
	mov r1, #0
	beq _020A2624
	ldrsh r0, [r4, #0x70]
	tst r0, #1
	movne r1, #1
_020A2624:
	cmp r1, #0
	mvneq r0, #0x26
	popeq {r4, pc}
	ldrsh r0, [r4, #0x70]
	tst r0, #0x10
	mvnne r0, #0x19
	popne {r4, pc}
	ldrsh r0, [r4, #0x70]
	mov r1, #1
	orr r0, r0, #0x18
	strh r0, [r4, #0x70]
	ldrsb r0, [r4, #0x73]
	cmp r0, #0
	cmpne r0, #4
	movne r1, #0
	cmp r1, #0
	beq _020A2674
	ldr r0, [r4, #0x68]
	mov r1, #0
	bl FUN_020A0BF0
_020A2674:
	ldr r0, _020A26A0 @ =FUN_020A26A4
	mov r1, r4
	mov r2, #1
	bl FUN_020A0B7C
	mov r1, r0
	mov r2, #0
	mov r0, r4
	str r2, [r1, #8]
	bl FUN_020A0C3C
	mov r0, #0
	pop {r4, pc}
	.align 2, 0
_020A26A0: .4byte FUN_020A26A4
	arm_func_end FUN_020A25D4

	arm_func_start FUN_020A26A4
FUN_020A26A4: @ 0x020A26A4
	push {r3, r4, r5, lr}
	ldr r4, [r0, #4]
	mov r1, #1
	ldrsb r0, [r4, #0x73]
	cmp r0, #0
	cmpne r0, #4
	movne r1, #0
	cmp r1, #0
	beq _020A26E0
	ldr r0, [r4, #0x68]
	add r0, r0, #0x20
	bl FUN_020D1E38
	bl FUN_020A6BC4
	bl FUN_020A6C00
	bl FUN_020A6964
_020A26E0:
	bl FUN_020A688C
	ldrsh r0, [r4, #0x70]
	mov r1, #0
	bic r0, r0, #6
	strh r0, [r4, #0x70]
	ldrsb r0, [r4, #0x73]
	cmp r0, #2
	ldreq r0, [r4, #0x68]
	ldrne r0, [r4, #0x64]
	bl FUN_020A0BF0
	bl FUN_020D3A38
	mov r5, r0
	mov r0, r4
	bl FUN_020A2DDC
	mov r0, r4
	bl FUN_020A2DC4
	mov r0, r5
	bl FUN_020D3A4C
	ldrsh r1, [r4, #0x70]
	mov r0, #0
	orr r1, r1, #0x20
	strh r1, [r4, #0x70]
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020A26A4

	arm_func_start FUN_020A273C
FUN_020A273C: @ 0x020A273C
	push {r4, r5, r6, lr}
	movs r4, r0
	popeq {r4, r5, r6, pc}
	mov r0, #0
	strh r0, [r4, #0x70]
	ldrsb r2, [r4, #0x73]
	mov r1, #1
	cmp r2, #0
	cmpne r2, #4
	movne r1, r0
	cmp r1, #0
	beq _020A2780
	ldr r0, [r4, #0x68]
	bl FUN_020A283C
	ldr r0, [r4, #0x64]
	bl FUN_020A283C
	b _020A2800
_020A2780:
	cmp r2, #1
	bne _020A27F0
	ldr r0, [r4, #0x64]
	ldr r0, [r0, #0x104]
	cmp r0, #0
	beq _020A27B8
	ldr r5, _020A2838 @ =_02110628
_020A279C:
	ldr r1, [r5]
	ldr r6, [r0]
	ldr r1, [r1, #0x1c]
	blx r1
	mov r0, r6
	cmp r6, #0
	bne _020A279C
_020A27B8:
	ldr r0, [r4, #0x64]
	mov r1, #0
	add r0, r0, #0x100
	strh r1, [r0, #8]
	ldr r0, [r4, #0x64]
	str r1, [r0, #0x100]
	ldr r0, [r4, #0x64]
	str r1, [r0, #0x104]
	ldr r0, [r4, #0x64]
	add r0, r0, #0x10c
	bl FUN_020D1ECC
	ldr r0, [r4, #0x64]
	bl FUN_020A283C
	b _020A2800
_020A27F0:
	cmp r2, #2
	bne _020A2800
	ldr r0, [r4, #0x68]
	bl FUN_020A283C
_020A2800:
	bl FUN_020D3A38
	mov r5, r0
	mov r0, r4
	bl FUN_020A2DDC
	mov r0, r4
	bl FUN_020A2E3C
	ldr r1, _020A2838 @ =_02110628
	mov r0, r4
	ldr r1, [r1]
	ldr r1, [r1, #0x1c]
	blx r1
	mov r0, r5
	bl FUN_020D3A4C
	pop {r4, r5, r6, pc}
	.align 2, 0
_020A2838: .4byte _02110628
	arm_func_end FUN_020A273C

	arm_func_start FUN_020A283C
FUN_020A283C: @ 0x020A283C
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	movs sb, r0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	add r0, sb, #0x20
	bl FUN_020D1E38
	bl FUN_020D3A38
	mov r8, r0
	bl FUN_020D21FC
	add r1, sp, #0
	mov r0, sb
	mov r2, #0
	bl FUN_020D2444
	cmp r0, #0
	beq _020A28C8
	mov r6, #0
	mvn r7, #0xa
	add r5, sp, #0
	mov r4, r6
_020A2884:
	ldr r0, [sp]
	cmp r0, #0
	beq _020A28B0
	ldr r0, [r0, #8]
	cmp r0, #0
	beq _020A28A8
	mov r1, r7
	mov r2, r6
	bl FUN_020D23B0
_020A28A8:
	ldr r0, [sp]
	bl FUN_020A0BBC
_020A28B0:
	mov r0, sb
	mov r1, r5
	mov r2, r4
	bl FUN_020D2444
	cmp r0, #0
	bne _020A2884
_020A28C8:
	bl FUN_020D2230
	bl FUN_020D1F84
	mov r0, r8
	bl FUN_020D3A4C
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	arm_func_end FUN_020A283C

	arm_func_start FUN_020A28DC
FUN_020A28DC: @ 0x020A28DC
	push {r3, r4, r5, lr}
	bl FUN_020D3A38
	ldr r4, _020A2914 @ =0x021D4490
	mov r5, r0
	ldr r0, [r4]
	cmp r0, #0
	beq _020A2908
_020A28F8:
	bl FUN_020A273C
	ldr r0, [r4]
	cmp r0, #0
	bne _020A28F8
_020A2908:
	mov r0, r5
	bl FUN_020D3A4C
	pop {r3, r4, r5, pc}
	.align 2, 0
_020A2914: .4byte 0x021D4490
	arm_func_end FUN_020A28DC

	arm_func_start FUN_020A2918
FUN_020A2918: @ 0x020A2918
	push {r3, r4, r5, lr}
	ldr r1, _020A29AC @ =0x021D4424
	ldr r0, [r1]
	cmp r0, #0
	ldreq r0, _020A29B0 @ =0x021D4670
	ldreq r0, [r0]
	streq r0, [r1]
	bl FUN_020A2A64
	mvn r4, #0x19
	cmp r0, r4
	bne _020A295C
	mov r5, #0x64
_020A2948:
	mov r0, r5
	bl FUN_020D2108
	bl FUN_020A2A64
	cmp r0, r4
	beq _020A2948
_020A295C:
	bl FUN_020A0B0C
	movs r4, r0
	bmi _020A29A4
	bl FUN_020A3C48
	mov r0, #0
	bl FUN_020A3C38
	ldr r0, _020A29B4 @ =_02110628
	ldr r1, [r0]
	ldr r0, [r1, #0x28]
	cmp r0, #0
	bne _020A2998
	ldr r0, _020A29B8 @ =0x021D4430
	ldr r1, [r1, #0x1c]
	ldr r0, [r0, #0x1c]
	blx r1
_020A2998:
	ldr r0, _020A29B4 @ =_02110628
	mov r1, #0
	str r1, [r0]
_020A29A4:
	mov r0, r4
	pop {r3, r4, r5, pc}
	.align 2, 0
_020A29AC: .4byte 0x021D4424
_020A29B0: .4byte 0x021D4670
_020A29B4: .4byte _02110628
_020A29B8: .4byte 0x021D4430
	arm_func_end FUN_020A2918

	arm_func_start FUN_020A29BC
FUN_020A29BC: @ 0x020A29BC
	push {r4, r5, r6, lr}
	ldr r4, _020A2A58 @ =0x021D442C
	ldr r5, _020A2A5C @ =0x021D448C
_020A29C8:
	bl FUN_020D3A38
	ldr r6, [r5]
	cmp r6, #0
	beq _020A29FC
	ldr r2, [r4]
_020A29DC:
	cmp r6, r2
	beq _020A29F0
	ldrsh r1, [r6, #0x70]
	tst r1, #0x10
	beq _020A29FC
_020A29F0:
	ldr r6, [r6, #0x7c]
	cmp r6, #0
	bne _020A29DC
_020A29FC:
	bl FUN_020D3A4C
	cmp r6, #0
	beq _020A2A14
	mov r0, r6
	bl FUN_020A25D4
	b _020A29C8
_020A2A14:
	ldr r0, _020A2A5C @ =0x021D448C
	ldr r1, [r0]
	cmp r1, #0
	beq _020A2A3C
	ldr r0, _020A2A58 @ =0x021D442C
	ldr r0, [r0]
	cmp r1, r0
	ldreq r0, [r1, #0x7c]
	cmpeq r0, #0
	bne _020A2A50
_020A2A3C:
	ldr r0, _020A2A60 @ =0x021D4490
	ldr r0, [r0]
	cmp r0, #0
	moveq r0, #0
	popeq {r4, r5, r6, pc}
_020A2A50:
	mvn r0, #0x19
	pop {r4, r5, r6, pc}
	.align 2, 0
_020A2A58: .4byte 0x021D442C
_020A2A5C: .4byte 0x021D448C
_020A2A60: .4byte 0x021D4490
	arm_func_end FUN_020A29BC

	arm_func_start FUN_020A2A64
FUN_020A2A64: @ 0x020A2A64
	push {r4, lr}
	ldr r0, _020A2ADC @ =0x021D442C
	ldr r0, [r0]
	cmp r0, #0
	beq _020A2AB8
	bl FUN_020A29BC
	movs r4, r0
	bne _020A2AB0
	ldr r0, _020A2ADC @ =0x021D442C
	ldr r0, [r0]
	bl FUN_020A25D4
	ldr r0, _020A2ADC @ =0x021D442C
	ldr r0, [r0]
	bl FUN_020A25A0
	cmp r0, #0
	ldrne r0, _020A2ADC @ =0x021D442C
	movne r1, #0
	strne r1, [r0]
	mvn r4, #0x19
_020A2AB0:
	bl FUN_020A28DC
	b _020A2AD4
_020A2AB8:
	bl FUN_020A3BE8
	cmp r0, #0
	mvneq r4, #0x19
	beq _020A2AD4
	mov r0, #0
	bl FUN_020AFFC4
	mov r4, #0
_020A2AD4:
	mov r0, r4
	pop {r4, pc}
	.align 2, 0
_020A2ADC: .4byte 0x021D442C
	arm_func_end FUN_020A2A64

	arm_func_start FUN_020A2AE0
FUN_020A2AE0: @ 0x020A2AE0
	push {r4, r5, lr}
	sub sp, sp, #0x64
	movs r5, r0
	addeq sp, sp, #0x64
	moveq r0, #0
	popeq {r4, r5, pc}
	ldr r1, _020A2B84 @ =_02110628
	mov r0, #0xfd0
	ldr r1, [r1]
	ldr r1, [r1, #0x18]
	blx r1
	movs r4, r0
	addeq sp, sp, #0x64
	moveq r0, #0
	popeq {r4, r5, pc}
	add r0, sp, #0
	mov r1, #0
	mov r2, #0x64
	bl FUN_020D4994
	add r0, r4, #0x368
	add r2, r0, #0x800
	ldr r3, _020A2B88 @ =0x00000B68
	ldr r1, _020A2B8C @ =0x00000466
	add r0, sp, #0
	str r4, [sp, #0x40]
	str r3, [sp, #0x3c]
	str r2, [sp, #0x4c]
	str r1, [sp, #0x48]
	bl FUN_020A6878
	mov r0, r5
	bl FUN_020A8460
	mov r5, r0
	bl FUN_020A688C
	ldr r1, _020A2B84 @ =_02110628
	mov r0, r4
	ldr r1, [r1]
	ldr r1, [r1, #0x1c]
	blx r1
	mov r0, r5
	add sp, sp, #0x64
	pop {r4, r5, pc}
	.align 2, 0
_020A2B84: .4byte _02110628
_020A2B88: .4byte 0x00000B68
_020A2B8C: .4byte 0x00000466
	arm_func_end FUN_020A2AE0

	arm_func_start FUN_020A2B90
FUN_020A2B90: @ 0x020A2B90
	push {r3, r4, r5, r6, r7, lr}
	mov r4, r0
	bl FUN_020D3A38
	ldr r1, _020A2BD8 @ =0x021D4680
	mov r5, r0
	ldm r1, {r6, r7}
	mov r2, #0
	str r2, [r1]
	mov r0, r4
	str r2, [r1, #4]
	bl FUN_020A8460
	ldr r1, _020A2BD8 @ =0x021D4680
	mov r4, r0
	mov r0, r5
	stm r1, {r6, r7}
	bl FUN_020D3A4C
	mov r0, r4
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020A2BD8: .4byte 0x021D4680
	arm_func_end FUN_020A2B90

	arm_func_start FUN_020A2BDC
FUN_020A2BDC: @ 0x020A2BDC
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	bl FUN_020A2C10
	cmp r0, #0
	mvneq r0, #0x26
	popeq {r3, r4, r5, pc}
	ldr r1, _020A2C0C @ =0x021D4680
	mov r0, #0
	str r5, [r1]
	str r4, [r1, #4]
	pop {r3, r4, r5, pc}
	.align 2, 0
_020A2C0C: .4byte 0x021D4680
	arm_func_end FUN_020A2BDC

	arm_func_start FUN_020A2C10
FUN_020A2C10: @ 0x020A2C10
	push {r3, lr}
	ldr r0, _020A2C6C @ =0x021D4670
	ldr r2, [r0]
	cmp r2, #0
	bne _020A2C50
	ldr r0, _020A2C70 @ =0x021D4428
	ldr r0, [r0]
	and r0, r0, #3
	cmp r0, #1
	bne _020A2C60
	bl FUN_020D3A9C
	cmp r0, #0x12
	beq _020A2C60
	mov r0, #0xa
	bl FUN_020D2108
	b _020A2C60
_020A2C50:
	ldr r0, _020A2C74 @ =0x021D4424
	ldr r1, [r0]
	cmp r1, #0
	streq r2, [r0]
_020A2C60:
	ldr r0, _020A2C6C @ =0x021D4670
	ldr r0, [r0]
	pop {r3, pc}
	.align 2, 0
_020A2C6C: .4byte 0x021D4670
_020A2C70: .4byte 0x021D4428
_020A2C74: .4byte 0x021D4424
	arm_func_end FUN_020A2C10

	arm_func_start FUN_020A2C78
FUN_020A2C78: @ 0x020A2C78
	push {r4, r5, r6, lr}
	mov r4, #0
	mov r5, r0
	bl FUN_020A2E54
	cmp r0, #0
	orrne r4, r4, #0x80
	bne _020A2D40
	ldrsh r0, [r5, #0x70]
	tst r0, #0x40
	ldrsb r0, [r5, #0x73]
	orrne r4, r4, #0x20
	cmp r0, #1
	beq _020A2CB8
	ldrsh r0, [r5, #0x70]
	tst r0, #4
	beq _020A2CE8
_020A2CB8:
	bl FUN_020D3A38
	mov r6, r0
	mov r0, r5
	bl FUN_020A2D48
	cmp r0, #0
	mov r0, r5
	orrgt r4, r4, #1
	bl FUN_020A20C0
	cmp r0, #0
	mov r0, r6
	orrgt r4, r4, #8
	bl FUN_020D3A4C
_020A2CE8:
	ldrsb r0, [r5, #0x73]
	mov r1, #1
	cmp r0, #0
	cmpne r0, #4
	movne r1, #0
	cmp r1, #0
	beq _020A2D40
	ldrsh r0, [r5, #0x70]
	tst r0, #4
	ldrbne r0, [r5, #8]
	cmpne r0, #4
	beq _020A2D28
	tst r4, #1
	ldrsheq r0, [r5, #0x70]
	biceq r0, r0, #6
	strheq r0, [r5, #0x70]
_020A2D28:
	ldrsh r0, [r5, #0x70]
	tst r0, #2
	bne _020A2D40
	ldrsh r0, [r5, #0x70]
	tst r0, #4
	orreq r4, r4, #0x40
_020A2D40:
	mov r0, r4
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020A2C78

	arm_func_start FUN_020A2D48
FUN_020A2D48: @ 0x020A2D48
	ldr r2, [r0, #0x64]
	mov r3, #0
	cmp r2, #0
	beq _020A2D88
	ldrsb r1, [r0, #0x73]
	cmp r1, #1
	bne _020A2D74
	ldr r0, [r2, #0x104]
	cmp r0, #0
	ldrhne r3, [r0, #4]
	b _020A2D88
_020A2D74:
	cmp r1, #0
	cmpne r1, #4
	ldreq r1, [r0, #0x44]
	ldreq r0, [r2, #0xf8]
	subeq r3, r1, r0
_020A2D88:
	mov r0, r3
	bx lr
	arm_func_end FUN_020A2D48

	arm_func_start FUN_020A2D90
FUN_020A2D90: @ 0x020A2D90
	add r0, r0, #3
	bic r0, r0, #3
	bx lr
	arm_func_end FUN_020A2D90

	arm_func_start FUN_020A2D9C
FUN_020A2D9C: @ 0x020A2D9C
	ldr ip, _020A2DAC @ =FUN_020A2DB4
	mov r1, r0
	ldr r0, _020A2DB0 @ =0x021D448C
	bx ip
	.align 2, 0
_020A2DAC: .4byte FUN_020A2DB4
_020A2DB0: .4byte 0x021D448C
	arm_func_end FUN_020A2D9C

	arm_func_start FUN_020A2DB4
FUN_020A2DB4: @ 0x020A2DB4
	ldr r2, [r0]
	str r2, [r1, #0x7c]
	str r1, [r0]
	bx lr
	arm_func_end FUN_020A2DB4

	arm_func_start FUN_020A2DC4
FUN_020A2DC4: @ 0x020A2DC4
	ldr ip, _020A2DD4 @ =FUN_020A2DB4
	mov r1, r0
	ldr r0, _020A2DD8 @ =0x021D4490
	bx ip
	.align 2, 0
_020A2DD4: .4byte FUN_020A2DB4
_020A2DD8: .4byte 0x021D4490
	arm_func_end FUN_020A2DC4

	arm_func_start FUN_020A2DDC
FUN_020A2DDC: @ 0x020A2DDC
	ldr ip, _020A2DEC @ =FUN_020A2DF4
	mov r1, r0
	ldr r0, _020A2DF0 @ =0x021D448C
	bx ip
	.align 2, 0
_020A2DEC: .4byte FUN_020A2DF4
_020A2DF0: .4byte 0x021D448C
	arm_func_end FUN_020A2DDC

	arm_func_start FUN_020A2DF4
FUN_020A2DF4: @ 0x020A2DF4
	push {r4, lr}
	mov r4, r1
	bl FUN_020A2E10
	cmp r0, #0
	ldrne r1, [r4, #0x7c]
	strne r1, [r0]
	pop {r4, pc}
	arm_func_end FUN_020A2DF4

	arm_func_start FUN_020A2E10
FUN_020A2E10: @ 0x020A2E10
	ldr r2, [r0]
	cmp r2, #0
	beq _020A2E34
_020A2E1C:
	cmp r2, r1
	bxeq lr
	add r0, r2, #0x7c
	ldr r2, [r2, #0x7c]
	cmp r2, #0
	bne _020A2E1C
_020A2E34:
	mov r0, #0
	bx lr
	arm_func_end FUN_020A2E10

	arm_func_start FUN_020A2E3C
FUN_020A2E3C: @ 0x020A2E3C
	ldr ip, _020A2E4C @ =FUN_020A2DF4
	mov r1, r0
	ldr r0, _020A2E50 @ =0x021D4490
	bx ip
	.align 2, 0
_020A2E4C: .4byte FUN_020A2DF4
_020A2E50: .4byte 0x021D4490
	arm_func_end FUN_020A2E3C

	arm_func_start FUN_020A2E54
FUN_020A2E54: @ 0x020A2E54
	push {r3, lr}
	mov r1, r0
	cmp r1, #0
	ble _020A2E74
	ldr r0, _020A2E84 @ =0x021D448C
	bl FUN_020A2E10
	cmp r0, #0
	bne _020A2E7C
_020A2E74:
	mov r0, #1
	pop {r3, pc}
_020A2E7C:
	mov r0, #0
	pop {r3, pc}
	.align 2, 0
_020A2E84: .4byte 0x021D448C
	arm_func_end FUN_020A2E54

	arm_func_start FUN_020A2E88
FUN_020A2E88: @ 0x020A2E88
	push {r3, lr}
	mov r1, r0
	ldr r0, _020A2EA8 @ =0x021D4490
	bl FUN_020A2E10
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	pop {r3, pc}
	.align 2, 0
_020A2EA8: .4byte 0x021D4490
	arm_func_end FUN_020A2E88

	arm_func_start FUN_020A2EAC
FUN_020A2EAC: @ 0x020A2EAC
	push {r3, lr}
	cmp r1, #1
	bne _020A2EC4
	ldr r0, _020A2ED0 @ =_02110648
	bl FUN_020A0DAC
	pop {r3, pc}
_020A2EC4:
	ldr r0, _020A2ED4 @ =_02110630
	bl FUN_020A0DAC
	pop {r3, pc}
	.align 2, 0
_020A2ED0: .4byte _02110648
_020A2ED4: .4byte _02110630
	arm_func_end FUN_020A2EAC

	arm_func_start FUN_020A2ED8
FUN_020A2ED8: @ 0x020A2ED8
	ldrh r1, [r1, #2]
	ldr ip, _020A2F00 @ =FUN_020A1390
	asr r2, r1, #8
	lsl r1, r1, #8
	and r2, r2, #0xff
	and r1, r1, #0xff00
	orr r1, r2, r1
	lsl r1, r1, #0x10
	lsr r1, r1, #0x10
	bx ip
	.align 2, 0
_020A2F00: .4byte FUN_020A1390
	arm_func_end FUN_020A2ED8

	arm_func_start FUN_020A2F04
FUN_020A2F04: @ 0x020A2F04
	push {r4, lr}
	ldrh r2, [r1, #2]
	ldr lr, [r1, #4]
	asr r4, r2, #8
	lsl r1, r2, #8
	lsr r3, lr, #0x18
	lsr r2, lr, #8
	lsl ip, lr, #8
	lsl lr, lr, #0x18
	and r4, r4, #0xff
	and r1, r1, #0xff00
	orr r1, r4, r1
	lsl r1, r1, #0x10
	and r3, r3, #0xff
	and r2, r2, #0xff00
	and ip, ip, #0xff0000
	orr r2, r3, r2
	and r3, lr, #0xff000000
	orr r2, ip, r2
	lsr r1, r1, #0x10
	orr r2, r3, r2
	bl FUN_020A1400
	pop {r4, pc}
	arm_func_end FUN_020A2F04

	arm_func_start FUN_020A2F60
FUN_020A2F60: @ 0x020A2F60
	push {r3, lr}
	sub sp, sp, #8
	mov ip, #0
	str ip, [sp]
	str r3, [sp, #4]
	mov r3, ip
	bl FUN_020A15C4
	add sp, sp, #8
	pop {r3, pc}
	arm_func_end FUN_020A2F60

	arm_func_start FUN_020A2F84
FUN_020A2F84: @ 0x020A2F84
	push {r3, lr}
	sub sp, sp, #0x10
	add ip, sp, #0xc
	str ip, [sp]
	str r3, [sp, #4]
	add r3, sp, #8
	bl FUN_020A15C4
	cmp r0, #0
	addlt sp, sp, #0x10
	poplt {r3, pc}
	ldr r1, [sp, #0x18]
	cmp r1, #0
	addeq sp, sp, #0x10
	popeq {r3, pc}
	ldrh r2, [sp, #8]
	asr r3, r2, #8
	lsl r2, r2, #8
	and r3, r3, #0xff
	and r2, r2, #0xff00
	orr r2, r3, r2
	strh r2, [r1, #2]
	ldr lr, [sp, #0xc]
	lsr r3, lr, #0x18
	lsr r2, lr, #8
	lsl ip, lr, #8
	lsl lr, lr, #0x18
	and r3, r3, #0xff
	and r2, r2, #0xff00
	and ip, ip, #0xff0000
	orr r2, r3, r2
	and r3, lr, #0xff000000
	orr r2, ip, r2
	orr r2, r3, r2
	str r2, [r1, #4]
	add sp, sp, #0x10
	pop {r3, pc}
	arm_func_end FUN_020A2F84

	arm_func_start FUN_020A3014
FUN_020A3014: @ 0x020A3014
	push {r3, lr}
	sub sp, sp, #8
	mov ip, #0
	str ip, [sp]
	str r3, [sp, #4]
	mov r3, ip
	bl FUN_020A1E24
	add sp, sp, #8
	pop {r3, pc}
	arm_func_end FUN_020A3014

	arm_func_start FUN_020A3038
FUN_020A3038: @ 0x020A3038
	push {r3, r4, r5, r6, r7, lr}
	sub sp, sp, #8
	ldr r5, [sp, #0x20]
	cmp r5, #0
	moveq r5, #0
	moveq r4, r5
	beq _020A30A4
	ldrh r4, [r5, #2]
	ldr r6, [r5, #4]
	asr r7, r4, #8
	lsl ip, r4, #8
	lsr r4, r6, #0x18
	lsr lr, r6, #8
	lsl r5, r6, #8
	lsl r6, r6, #0x18
	and r7, r7, #0xff
	and ip, ip, #0xff00
	orr r7, r7, ip
	and r4, r4, #0xff
	and lr, lr, #0xff00
	and r5, r5, #0xff0000
	orr r4, r4, lr
	lsl ip, r7, #0x10
	orr r4, r5, r4
	and r6, r6, #0xff000000
	lsr r5, ip, #0x10
	orr r4, r6, r4
_020A30A4:
	str r4, [sp]
	str r3, [sp, #4]
	mov r3, r5
	bl FUN_020A1E24
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020A3038

	arm_func_start FUN_020A30BC
FUN_020A30BC: @ 0x020A30BC
	ldr ip, _020A30C4 @ =FUN_020A24C4
	bx ip
	.align 2, 0
_020A30C4: .4byte FUN_020A24C4
	arm_func_end FUN_020A30BC

	arm_func_start FUN_020A30C8
FUN_020A30C8: @ 0x020A30C8
	ldr ip, _020A30D0 @ =FUN_020A25D4
	bx ip
	.align 2, 0
_020A30D0: .4byte FUN_020A25D4
	arm_func_end FUN_020A30C8

	arm_func_start FUN_020A30D4
FUN_020A30D4: @ 0x020A30D4
	push {r3, r4, r5, lr}
	mov r5, r0
	bl FUN_020A2AE0
	movs r4, r0
	moveq r0, #0
	popeq {r3, r4, r5, pc}
	ldr r0, _020A317C @ =0x021D451C
	ldr r2, _020A3180 @ =0x00000101
	mov r1, #0
	bl FUN_020D4994
	ldr r0, _020A317C @ =0x021D451C
	ldr r2, _020A3180 @ =0x00000101
	mov r1, r5
	bl FUN_020E3D74
	lsr r3, r4, #0x18
	lsr r2, r4, #8
	lsl ip, r4, #8
	lsl lr, r4, #0x18
	ldr r4, _020A317C @ =0x021D451C
	ldr r1, _020A3184 @ =0x021D4494
	mov r0, #0
	str r4, [r1, #0x20]
	str r0, [r1, #0x24]
	mov r4, #2
	strh r4, [r1, #0x28]
	mov r4, #4
	ldr r5, _020A3188 @ =0x021D44AC
	strh r4, [r1, #0x2a]
	and r3, r3, #0xff
	and r2, r2, #0xff00
	ldr r4, _020A318C @ =0x021D4494
	str r5, [r1, #0x2c]
	str r4, [r1, #0x18]
	and ip, ip, #0xff0000
	orr r2, r3, r2
	and r3, lr, #0xff000000
	orr r2, ip, r2
	str r0, [r1, #0x1c]
	orr r2, r3, r2
	ldr r0, _020A3190 @ =0x021D44B4
	str r2, [r1]
	pop {r3, r4, r5, pc}
	.align 2, 0
_020A317C: .4byte 0x021D451C
_020A3180: .4byte 0x00000101
_020A3184: .4byte 0x021D4494
_020A3188: .4byte 0x021D44AC
_020A318C: .4byte 0x021D4494
_020A3190: .4byte 0x021D44B4
	arm_func_end FUN_020A30D4

	arm_func_start FUN_020A3194
FUN_020A3194: @ 0x020A3194
	push {r4, r5, r6, lr}
	movs r5, r0
	mov r4, r1
	mvneq r0, #0x26
	popeq {r4, r5, r6, pc}
	bl FUN_020A2C10
	cmp r5, #0
	ldrhne r1, [r5, #0x74]
	lsr r2, r0, #0x18
	mov r6, #8
	moveq r1, #0
	cmp r0, #0
	moveq r1, #0
	lsl r1, r1, #0x10
	lsr r3, r1, #0x10
	asr r5, r3, #8
	lsl lr, r3, #8
	strb r6, [r4]
	mov r6, #2
	lsr r1, r0, #8
	lsl r3, r0, #8
	lsl ip, r0, #0x18
	and r0, r1, #0xff00
	and r2, r2, #0xff
	orr r0, r2, r0
	and r1, r3, #0xff0000
	and r5, r5, #0xff
	and lr, lr, #0xff00
	strb r6, [r4, #1]
	orr r3, r5, lr
	and r2, ip, #0xff000000
	orr r0, r1, r0
	strh r3, [r4, #2]
	orr r0, r2, r0
	str r0, [r4, #4]
	mov r0, #0
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020A3194

	arm_func_start FUN_020A3228
FUN_020A3228: @ 0x020A3228
	push {r3, lr}
	bl FUN_020A2C10
	lsr r2, r0, #0x18
	lsr r1, r0, #8
	lsl r3, r0, #8
	lsl ip, r0, #0x18
	and r2, r2, #0xff
	and r0, r1, #0xff00
	and r1, r3, #0xff0000
	orr r0, r2, r0
	and r2, ip, #0xff000000
	orr r0, r1, r0
	orr r0, r2, r0
	pop {r3, pc}
	arm_func_end FUN_020A3228

	arm_func_start FUN_020A3260
FUN_020A3260: @ 0x020A3260
	push {r3, r4, r5, lr}
	ldr ip, [r1]
	ldr r0, [r0]
	lsr r2, ip, #0x18
	lsr r4, r0, #0x18
	lsr lr, r0, #8
	lsr r1, ip, #8
	lsl r5, r0, #8
	lsl r3, ip, #8
	lsl r0, r0, #0x18
	lsl ip, ip, #0x18
	and r4, r4, #0xff
	and lr, lr, #0xff00
	and r2, r2, #0xff
	and r1, r1, #0xff00
	and r5, r5, #0xff0000
	orr r4, r4, lr
	and r3, r3, #0xff0000
	orr r1, r2, r1
	and lr, r0, #0xff000000
	orr r0, r5, r4
	and r2, ip, #0xff000000
	orr r1, r3, r1
	orr r0, lr, r0
	orr r1, r2, r1
	bl FUN_020A2BDC
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020A3260

	arm_func_start FUN_020A32CC
FUN_020A32CC: @ 0x020A32CC
	ldr ip, _020A32D4 @ =FUN_020A1104
	bx ip
	.align 2, 0
_020A32D4: .4byte FUN_020A1104
	arm_func_end FUN_020A32CC

	arm_func_start FUN_020A32D8
FUN_020A32D8: @ 0x020A32D8
	push {r4, lr}
	sub sp, sp, #8
	mov r4, r1
	add r1, sp, #0
	add r2, sp, #4
	bl FUN_020A1184
	cmp r0, #0
	addlt sp, sp, #8
	poplt {r4, pc}
	ldrh r1, [sp]
	asr r2, r1, #8
	lsl r1, r1, #8
	and r2, r2, #0xff
	and r1, r1, #0xff00
	orr r1, r2, r1
	strh r1, [r4, #2]
	ldr ip, [sp, #4]
	lsr r2, ip, #0x18
	lsr r1, ip, #8
	lsl r3, ip, #8
	lsl ip, ip, #0x18
	and r2, r2, #0xff
	and r1, r1, #0xff00
	and r3, r3, #0xff0000
	orr r1, r2, r1
	and r2, ip, #0xff000000
	orr r1, r3, r1
	orr r1, r2, r1
	str r1, [r4, #4]
	add sp, sp, #8
	pop {r4, pc}
	arm_func_end FUN_020A32D8

	arm_func_start FUN_020A3354
FUN_020A3354: @ 0x020A3354
	cmp r0, #0
	mvneq r0, #0
	bxeq lr
	cmp r1, #3
	beq _020A3374
	cmp r1, #4
	beq _020A3388
	b _020A339C
_020A3374:
	ldrsb r0, [r0, #0x72]
	cmp r0, #1
	moveq r0, #0
	movne r0, #4
	bx lr
_020A3388:
	tst r2, #4
	movne r1, #0
	strbne r1, [r0, #0x72]
	moveq r1, #1
	strbeq r1, [r0, #0x72]
_020A339C:
	mov r0, #0
	bx lr
	arm_func_end FUN_020A3354

	arm_func_start FUN_020A33A4
FUN_020A33A4: @ 0x020A33A4
	push {r4, lr}
	ldr r1, _020A33CC @ =0x021D4494
	add r4, r0, #4
	ldr r2, [r1, #0xc]
	mov r1, r4
	mov r0, #0
	blx r2
	cmp r0, #0
	strne r4, [r0], #4
	pop {r4, pc}
	.align 2, 0
_020A33CC: .4byte 0x021D4494
	arm_func_end FUN_020A33A4

	arm_func_start FUN_020A33D0
FUN_020A33D0: @ 0x020A33D0
	push {r3, lr}
	cmp r0, #0
	popeq {r3, pc}
	ldr r1, _020A33F8 @ =0x021D4494
	ldr r2, [r0, #-4]
	ldr r3, [r1, #4]
	sub r1, r0, #4
	mov r0, #0
	blx r3
	pop {r3, pc}
	.align 2, 0
_020A33F8: .4byte 0x021D4494
	arm_func_end FUN_020A33D0

	arm_func_start FUN_020A33FC
FUN_020A33FC: @ 0x020A33FC
	push {r4, r5, r6, lr}
	ldr r1, [r0, #0xc]
	ldr ip, _020A3560 @ =FUN_020A33A4
	cmp r1, #1
	moveq r2, #1
	ldr r1, _020A3564 @ =0x021D4494
	movne r2, #0
	str r2, [r1, #0x40]
	ldr r6, [r0, #0x10]
	ldr r3, _020A3568 @ =FUN_020A33D0
	lsr r4, r6, #0x18
	lsr r2, r6, #8
	lsl r5, r6, #8
	and r4, r4, #0xff
	and r2, r2, #0xff00
	lsl r6, r6, #0x18
	orr r2, r4, r2
	and r5, r5, #0xff0000
	and r4, r6, #0xff000000
	orr r2, r5, r2
	orr r2, r4, r2
	str r2, [r1, #0x44]
	ldr lr, [r0, #0x14]
	mov r2, #0x40
	lsr r5, lr, #0x18
	lsr r4, lr, #8
	lsl r6, lr, #8
	and r5, r5, #0xff
	and r4, r4, #0xff00
	lsl lr, lr, #0x18
	orr r4, r5, r4
	and r6, r6, #0xff0000
	and r5, lr, #0xff000000
	orr r4, r6, r4
	orr r4, r5, r4
	str r4, [r1, #0x48]
	ldr lr, [r0, #0x18]
	lsr r5, lr, #0x18
	lsr r4, lr, #8
	lsl r6, lr, #8
	and r5, r5, #0xff
	and r4, r4, #0xff00
	lsl lr, lr, #0x18
	orr r4, r5, r4
	and r6, r6, #0xff0000
	and r5, lr, #0xff000000
	orr r4, r6, r4
	orr r4, r5, r4
	str r4, [r1, #0x4c]
	ldr lr, [r0, #0x1c]
	lsr r5, lr, #0x18
	lsr r4, lr, #8
	lsl r6, lr, #8
	and r5, r5, #0xff
	and r4, r4, #0xff00
	lsl lr, lr, #0x18
	orr r4, r5, r4
	and r6, r6, #0xff0000
	and r5, lr, #0xff000000
	orr r4, r6, r4
	orr r4, r5, r4
	str r4, [r1, #0x50]
	ldr r6, [r0, #0x20]
	lsr r4, r6, #0x18
	lsr lr, r6, #8
	lsl r5, r6, #8
	lsl r6, r6, #0x18
	and r4, r4, #0xff
	and lr, lr, #0xff00
	and r5, r5, #0xff0000
	orr r4, r4, lr
	and r6, r6, #0xff000000
	orr r4, r5, r4
	orr r4, r6, r4
	str r4, [r1, #0x54]
	str ip, [r1, #0x58]
	str r3, [r1, #0x5c]
	ldr r3, [r0, #4]
	str r3, [r1, #0xc]
	ldr r3, [r0, #8]
	str r3, [r1, #4]
	str r2, [r1, #0x60]
	ldr r2, [r0, #0x2c]
	str r2, [r1, #0x70]
	ldr r2, [r0, #0x30]
	ldr r0, _020A356C @ =0x021D44D4
	str r2, [r1, #0x74]
	bl FUN_020A0804
	pop {r4, r5, r6, pc}
	.align 2, 0
_020A3560: .4byte FUN_020A33A4
_020A3564: .4byte 0x021D4494
_020A3568: .4byte FUN_020A33D0
_020A356C: .4byte 0x021D44D4
	arm_func_end FUN_020A33FC

	arm_func_start FUN_020A3570
FUN_020A3570: @ 0x020A3570
	ldr ip, _020A3578 @ =FUN_020A2918
	bx ip
	.align 2, 0
_020A3578: .4byte FUN_020A2918
	arm_func_end FUN_020A3570

	arm_func_start FUN_020A357C
FUN_020A357C: @ 0x020A357C
	push {r0, r1, r2, r3}
	push {r3, lr}
	ldr r2, _020A35A8 @ =0x021D450C
	add r1, sp, #8
	mov r0, #2
	mov r3, #0x10
	bl FUN_020A35FC
	ldr r0, _020A35A8 @ =0x021D450C
	pop {r3, lr}
	add sp, sp, #0x10
	bx lr
	.align 2, 0
_020A35A8: .4byte 0x021D450C
	arm_func_end FUN_020A357C

	arm_func_start FUN_020A35AC
FUN_020A35AC: @ 0x020A35AC
	push {r4, lr}
	mov r4, r1
	bl FUN_020A2B90
	cmp r0, #0
	moveq r0, #0
	popeq {r4, pc}
	lsr r2, r0, #0x18
	lsr r1, r0, #8
	lsl r3, r0, #8
	lsl ip, r0, #0x18
	and r2, r2, #0xff
	and r0, r1, #0xff00
	and r1, r3, #0xff0000
	orr r0, r2, r0
	and r2, ip, #0xff000000
	orr r0, r1, r0
	orr r0, r2, r0
	str r0, [r4]
	mov r0, #1
	pop {r4, pc}
	arm_func_end FUN_020A35AC

	arm_func_start FUN_020A35FC
FUN_020A35FC: @ 0x020A35FC
	push {r3, r4, lr}
	sub sp, sp, #0x14
	cmp r0, #2
	mov r4, r2
	addne sp, sp, #0x14
	movne r0, #0
	popne {r3, r4, pc}
	cmp r3, #0x10
	addlo sp, sp, #0x14
	movlo r0, #0
	poplo {r3, r4, pc}
	mov r0, r1
	add r1, sp, #0x10
	mov r2, #4
	bl FUN_020D4A50
	ldr r0, [sp, #0x10]
	add r1, sp, #0xc
	bl FUN_020A3680
	ldrb r1, [sp, #0xe]
	ldr r2, _020A367C @ =_02110678
	mov r0, r4
	str r1, [sp]
	ldrb r3, [sp, #0xd]
	mov r1, #0x10
	str r3, [sp, #4]
	ldrb r3, [sp, #0xc]
	str r3, [sp, #8]
	ldrb r3, [sp, #0xf]
	bl FUN_020D168C
	mov r0, r4
	add sp, sp, #0x14
	pop {r3, r4, pc}
	.align 2, 0
_020A367C: .4byte _02110678
	arm_func_end FUN_020A35FC

	arm_func_start FUN_020A3680
FUN_020A3680: @ 0x020A3680
	lsr r2, r0, #0x18
	strb r2, [r1]
	lsr r2, r0, #0x10
	strb r2, [r1, #1]
	lsr r2, r0, #8
	strb r2, [r1, #2]
	strb r0, [r1, #3]
	bx lr
	arm_func_end FUN_020A3680

	arm_func_start FUN_020A36A0
FUN_020A36A0: @ 0x020A36A0
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sb, r2
	mov r8, r3
	mvn r2, #0
	cmp r8, r2
	cmpeq sb, r2
	movne fp, #1
	str r0, [sp]
	mov sl, r1
	moveq fp, #0
_020A36C8:
	mov r6, #0
	ldr r4, [sp]
	mov r5, r6
	cmp sl, #0
	bls _020A3708
_020A36DC:
	ldrsh r1, [r4, #4]
	ldr r0, [r4]
	orr r7, r1, #0xe0
	bl FUN_020A2C78
	ands r0, r7, r0
	strh r0, [r4, #6]
	add r5, r5, #1
	addne r6, r6, #1
	add r4, r4, #8
	cmp r5, sl
	blo _020A36DC
_020A3708:
	cmp r6, #0
	bgt _020A3748
	cmp fp, #0
	beq _020A372C
	mov r0, #0
	subs r0, r0, sb
	mov r0, #0
	sbcs r0, r0, r8
	bge _020A3748
_020A372C:
	mov r0, #1
	bl FUN_020D2108
	ldr r0, _020A3750 @ =0x0000020B
	subs sb, sb, r0
	mov r0, #0
	sbc r8, r8, r0
	b _020A36C8
_020A3748:
	mov r0, r6
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020A3750: .4byte 0x0000020B
	arm_func_end FUN_020A36A0

	arm_func_start FUN_020A3754
FUN_020A3754: @ 0x020A3754
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	bl FUN_020A2E54
	cmp r0, #0
	mvnne r0, #0x1b
	popne {r3, r4, r5, pc}
	ldrsb r0, [r5, #0x73]
	mov r1, #1
	cmp r0, #0
	cmpne r0, #4
	movne r1, #0
	cmp r1, #0
	mvneq r0, #0x1b
	popeq {r3, r4, r5, pc}
	cmp r5, #0
	mov r1, #0
	beq _020A37A8
	ldrsh r0, [r5, #0x70]
	tst r0, #1
	movne r1, #1
_020A37A8:
	cmp r1, #0
	mvneq r0, #0x26
	popeq {r3, r4, r5, pc}
	ldrsh r0, [r5, #0x70]
	tst r0, #2
	mvnne r0, #0x1b
	popne {r3, r4, r5, pc}
	mov r0, r5
	mov r1, r4
	bl FUN_020A37D4
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020A3754

	arm_func_start FUN_020A37D4
FUN_020A37D4: @ 0x020A37D4
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	ldr r0, _020A380C @ =FUN_020A3810
	mov r1, r5
	mov r2, #1
	bl FUN_020A0B7C
	movs r1, r0
	mvneq r0, #0x20
	popeq {r3, r4, r5, pc}
	mov r0, r5
	str r4, [r1, #0x10]
	bl FUN_020A0CC4
	pop {r3, r4, r5, pc}
	.align 2, 0
_020A380C: .4byte FUN_020A3810
	arm_func_end FUN_020A37D4

	arm_func_start FUN_020A3810
FUN_020A3810: @ 0x020A3810
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	ldr r4, [r7, #4]
	ldr r5, [r4, #0x64]
	add r0, r5, #0xe0
	ldr r6, [r5, #0xc4]
	bl FUN_020D2618
	ldr r1, [r7, #0x10]
	cmp r1, #0
	beq _020A3850
	mov r0, #1
	str r1, [r6, #0xc]
	bl FUN_020AB948
	mov r0, #4
	strb r0, [r4, #0x73]
	b _020A3864
_020A3850:
	mov r0, #0
	strb r0, [r4, #0x73]
	bl FUN_020AB948
	mov r0, #0
	str r0, [r6, #0xc]
_020A3864:
	add r0, r5, #0xe0
	bl FUN_020D269C
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020A3810

	arm_func_start FUN_020A3874
FUN_020A3874: @ 0x020A3874
	push {r3, r4, r5, r6, r7, lr}
	ldr r1, _020A3968 @ =0x021D4620
	ldr r2, _020A3968 @ =0x021D4620
	ldr r1, [r1, #0x50]
	str r0, [r2, #0xc]
	cmp r1, #0
	mov r1, #0
	str r1, [r2, #0x50]
	str r1, [r2, #0x1c]
	str r1, [r2, #0x2c]
	str r1, [r2, #0x60]
	movne r3, #1
	str r1, [r2, #0x64]
	moveq r3, #0
	str r1, [r2, #0x20]
	cmp r3, #0
	popeq {r3, r4, r5, r6, r7, pc}
	ldr r0, _020A396C @ =0x021D46A0
	mov r2, #0x60
	bl FUN_020D4994
	ldr r0, _020A3970 @ =0x021E16A0
	ldr r6, [r0, #8]
	cmp r6, #0
	beq _020A3924
	mov r5, #0
	mov r4, r5
_020A38DC:
	ldr r1, [r6, #0xa4]
	cmp r1, #0
	ldrne r0, [r1]
	cmpne r0, #0
	beq _020A3918
	ldrb r0, [r1, #8]
	cmp r0, #0xa
	cmpne r0, #0xb
	strbne r5, [r1, #8]
	ldr r0, [r1, #4]
	cmp r0, #0
	beq _020A3918
	str r4, [r1, #4]
	ldr r0, [r1]
	bl FUN_020D1F34
_020A3918:
	ldr r6, [r6, #0x68]
	cmp r6, #0
	bne _020A38DC
_020A3924:
	mov r6, #0
	ldr r7, _020A3974 @ =0x021D4948
	ldr r4, _020A3968 @ =0x021D4620
	mov r5, r6
_020A3934:
	ldrh r0, [r7, #4]
	cmp r0, #0
	beq _020A3950
	ldr r0, [r7, #0x34]
	ldr r1, [r4, #0x40]
	blx r1
	strh r5, [r7, #4]
_020A3950:
	add r6, r6, #1
	cmp r6, #8
	add r7, r7, #0x38
	blt _020A3934
	bl FUN_020ABA58
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020A3968: .4byte 0x021D4620
_020A396C: .4byte 0x021D46A0
_020A3970: .4byte 0x021E16A0
_020A3974: .4byte 0x021D4948
	arm_func_end FUN_020A3874

	arm_func_start FUN_020A3978
FUN_020A3978: @ 0x020A3978
	push {r3, lr}
	ldr r0, _020A399C @ =0x021D4620
	ldr r0, [r0, #0x24]
	cmp r0, #0
	bne _020A3994
	bl FUN_020D1FA0
	pop {r3, pc}
_020A3994:
	bl FUN_020D2108
	pop {r3, pc}
	.align 2, 0
_020A399C: .4byte 0x021D4620
	arm_func_end FUN_020A3978

	arm_func_start FUN_020A39A0
FUN_020A39A0: @ 0x020A39A0
	bx lr
	arm_func_end FUN_020A39A0

	arm_func_start FUN_020A39A4
FUN_020A39A4: @ 0x020A39A4
	mov r0, #1
	bx lr
	arm_func_end FUN_020A39A4

	arm_func_start FUN_020A39AC
FUN_020A39AC: @ 0x020A39AC
	push {r3, r4, r5, lr}
	sub sp, sp, #8
	mov r4, r0
	ldr r0, _020A3BA4 @ =_version_UBIQUITOUS_CPS
	bl OSi_ReferSymbol
	ldr r3, [r4, #0x18]
	ldr r5, [r4, #0x14]
	cmp r3, #0
	cmpeq r5, #0
	mov r1, #0
	beq _020A3A04
	ldr r0, _020A3BA8 @ =0x021D4620
	ldr r2, _020A3BAC @ =0x6C078965
	str r5, [r0, #0x68]
	str r3, [r0, #0x6c]
	ldr r3, _020A3BB0 @ =0x5D588B65
	str r2, [r0, #0x70]
	ldr r2, _020A3BB4 @ =0x00269EC3
	str r3, [r0, #0x74]
	str r2, [r0, #0x78]
	str r1, [r0, #0x7c]
	b _020A3A34
_020A3A04:
	bl FUN_020D34B0
	ldr r2, _020A3BA8 @ =0x021D4620
	ldr r3, _020A3BAC @ =0x6C078965
	str r0, [r2, #0x68]
	str r1, [r2, #0x6c]
	ldr r1, _020A3BB0 @ =0x5D588B65
	str r3, [r2, #0x70]
	ldr r0, _020A3BB4 @ =0x00269EC3
	str r1, [r2, #0x74]
	str r0, [r2, #0x78]
	mov r0, #0
	str r0, [r2, #0x7c]
_020A3A34:
	ldr r1, [r4, #4]
	cmp r1, #0
	ldrne r0, [r4, #8]
	cmpne r0, #0
	beq _020A3A58
	ldr r0, _020A3BA8 @ =0x021D4620
	str r1, [r0, #0x14]
	ldr r1, [r4, #8]
	b _020A3A64
_020A3A58:
	ldr r1, _020A3BB8 @ =FUN_020A39A0
	ldr r0, _020A3BA8 @ =0x021D4620
	str r1, [r0, #0x14]
_020A3A64:
	str r1, [r0, #0x40]
	ldr r1, [r4]
	ldr r0, _020A3BA8 @ =0x021D4620
	ldr r2, _020A3BA8 @ =0x021D4620
	str r1, [r0, #0x10]
	ldr r1, [r4, #0x24]
	cmp r1, #0
	ldreq r1, _020A3BBC @ =0x000005B4
	strh r1, [r0, #2]
	ldr r1, [r4, #0x28]
	ldr r0, _020A3BA8 @ =0x021D4620
	str r1, [r0, #0x34]
	ldr r1, [r4, #0x2c]
	str r1, [r0, #0x24]
	ldr r1, [r4, #0xc]
	cmp r1, #0
	ldreq r1, _020A3BB8 @ =FUN_020A39A0
	str r1, [r0, #0x18]
	ldr r1, [r4, #0x10]
	cmp r1, #0
	ldrne r0, _020A3BA8 @ =0x021D4620
	ldreq r1, _020A3BC0 @ =FUN_020A39A4
	ldreq r0, _020A3BA8 @ =0x021D4620
	str r1, [r0, #0x48]
	ldr r1, [r4, #0x1c]
	mov r0, #0
	str r1, [r2, #0x58]
	ldr r3, [r4, #0x20]
	ldr r1, _020A3BC4 @ =0x00000F88
	str r3, [r2, #0x5c]
	str r0, [r2, #0x30]
	str r0, [r2, #0x28]
	ldr ip, [r2, #0x70]
	ldr r4, [r2, #0x68]
	ldr r3, [r2, #0x6c]
	umull r5, lr, ip, r4
	mla lr, ip, r3, lr
	ldr r3, [r2, #0x74]
	ldr ip, [r2, #0x78]
	mla lr, r3, r4, lr
	ldr r3, [r2, #0x7c]
	adds ip, ip, r5
	adc r5, r3, lr
	umull r3, r4, r5, r1
	mla r4, r5, r0, r4
	mla r4, r0, r1, r4
	str ip, [r2, #0x68]
	ldr r0, _020A3BC8 @ =0x021D4B08
	str r5, [r2, #0x6c]
	add r1, r4, #0x400
	strh r1, [r2, #8]
	bl FUN_020D3C40
	ldr r0, _020A3BA8 @ =0x021D4620
	mov r2, #0
	strb r2, [r0, #1]
	mov r1, #0x800
	str r1, [sp]
	ldr r0, _020A3BCC @ =_02110684
	ldr r1, _020A3BD0 @ =FUN_020A671C
	ldr r4, [r0]
	ldr r0, _020A3BD4 @ =0x021D4888
	ldr r3, _020A3BD8 @ =0x021D5E60
	str r4, [sp, #4]
	bl FUN_020D1AD4
	mov r1, #0x800
	ldr r0, _020A3BCC @ =_02110684
	str r1, [sp]
	ldr r1, [r0]
	ldr r0, _020A3BDC @ =0x021D47C8
	str r1, [sp, #4]
	ldr r1, _020A3BE0 @ =FUN_020A7448
	ldr r3, _020A3BE4 @ =0x021D5660
	mov r2, #0
	bl FUN_020D1AD4
	ldr r0, _020A3BD4 @ =0x021D4888
	bl FUN_020D1F34
	ldr r0, _020A3BDC @ =0x021D47C8
	bl FUN_020D1F34
	add sp, sp, #8
	pop {r3, r4, r5, pc}
	.align 2, 0
_020A3BA4: .4byte _version_UBIQUITOUS_CPS
_020A3BA8: .4byte 0x021D4620
_020A3BAC: .4byte 0x6C078965
_020A3BB0: .4byte 0x5D588B65
_020A3BB4: .4byte 0x00269EC3
_020A3BB8: .4byte FUN_020A39A0
_020A3BBC: .4byte 0x000005B4
_020A3BC0: .4byte FUN_020A39A4
_020A3BC4: .4byte 0x00000F88
_020A3BC8: .4byte 0x021D4B08
_020A3BCC: .4byte _02110684
_020A3BD0: .4byte FUN_020A671C
_020A3BD4: .4byte 0x021D4888
_020A3BD8: .4byte 0x021D5E60
_020A3BDC: .4byte 0x021D47C8
_020A3BE0: .4byte FUN_020A7448
_020A3BE4: .4byte 0x021D5660
	arm_func_end FUN_020A39AC

	arm_func_start FUN_020A3BE8
FUN_020A3BE8: @ 0x020A3BE8
	push {r3, r4, r5, lr}
	bl FUN_020D3A38
	mov r4, r0
	ldr r0, _020A3C30 @ =0x021D47C8
	bl FUN_020D1E68
	movs r5, r0
	ldreq r1, _020A3C34 @ =0x021D4620
	ldreq r0, [r1, #0x44]
	cmpeq r0, #0
	bne _020A3C20
	ldr r0, _020A3C30 @ =0x021D47C8
	mov r2, #1
	str r2, [r1, #0x44]
	bl FUN_020D1F34
_020A3C20:
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, r5
	pop {r3, r4, r5, pc}
	.align 2, 0
_020A3C30: .4byte 0x021D47C8
_020A3C34: .4byte 0x021D4620
	arm_func_end FUN_020A3BE8

	arm_func_start FUN_020A3C38
FUN_020A3C38: @ 0x020A3C38
	ldr r1, _020A3C44 @ =0x021D4620
	str r0, [r1, #0x3c]
	bx lr
	.align 2, 0
_020A3C44: .4byte 0x021D4620
	arm_func_end FUN_020A3C38

	arm_func_start FUN_020A3C48
FUN_020A3C48: @ 0x020A3C48
	push {r3, lr}
	bl FUN_020A3BE8
	ldr r0, _020A3C84 @ =0x021D47C8
	bl FUN_020D1E38
	ldr r0, _020A3C88 @ =0x021D4888
	bl FUN_020D1CE0
	ldr r1, _020A3C8C @ =0x021D4620
	mov r0, #0
	str r0, [r1, #0x54]
	bl FUN_020A3874
	ldr r0, _020A3C8C @ =0x021D4620
	mov r1, #0
	str r1, [r0, #0x58]
	str r1, [r0, #0x5c]
	pop {r3, pc}
	.align 2, 0
_020A3C84: .4byte 0x021D47C8
_020A3C88: .4byte 0x021D4888
_020A3C8C: .4byte 0x021D4620
	arm_func_end FUN_020A3C48

	arm_func_start FUN_020A3C90
FUN_020A3C90: @ 0x020A3C90
	push {r4, lr}
	mov r4, r0
	ldr r2, _020A3CBC @ =_02110684
	ldr r0, _020A3CC0 @ =0x021D4888
	mov r1, r4
	str r4, [r2]
	bl FUN_020D2058
	ldr r0, _020A3CC4 @ =0x021D47C8
	mov r1, r4
	bl FUN_020D2058
	pop {r4, pc}
	.align 2, 0
_020A3CBC: .4byte _02110684
_020A3CC0: .4byte 0x021D4888
_020A3CC4: .4byte 0x021D47C8
	arm_func_end FUN_020A3C90

	arm_func_start FUN_020A3CC8
FUN_020A3CC8: @ 0x020A3CC8
	tst r0, #1
	beq _020A3D00
	cmp r1, #1
	bls _020A3D50
_020A3CD8:
	ldrb ip, [r0]
	ldrb r3, [r0, #1]
	sub r1, r1, #2
	cmp r1, #1
	orr r3, r3, ip, lsl #8
	lsl r3, r3, #0x10
	add r2, r2, r3, lsr #16
	add r0, r0, #2
	bhi _020A3CD8
	b _020A3D50
_020A3D00:
	lsl r2, r2, #0x10
	lsr r3, r2, #0x10
	lsl r2, r3, #8
	orr r2, r2, r3, asr #8
	lsl r2, r2, #0x10
	cmp r1, #1
	lsr r2, r2, #0x10
	bls _020A3D34
_020A3D20:
	ldrh r3, [r0], #2
	sub r1, r1, #2
	cmp r1, #1
	add r2, r2, r3
	bhi _020A3D20
_020A3D34:
	ldr r3, _020A3D78 @ =0x00FF00FF
	lsl ip, r3, #8
	and r3, r3, r2, lsr #8
	and r2, ip, r2, lsl #8
	orr r3, r3, r2
	lsl r2, r3, #0x10
	orr r2, r2, r3, lsr #16
_020A3D50:
	cmp r1, #0
	ldrbne r0, [r0]
	addne r2, r2, r0, lsl #8
	lsl r0, r2, #0x10
	lsr r1, r2, #0x10
	add r0, r1, r0, lsr #16
	add r0, r0, r0, lsr #16
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	bx lr
	.align 2, 0
_020A3D78: .4byte 0x00FF00FF
	arm_func_end FUN_020A3CC8

	arm_func_start FUN_020A3D7C
FUN_020A3D7C: @ 0x020A3D7C
	ldr r1, _020A3D94 @ =0x0000FFFF
	eor r0, r0, r1
	lsl r0, r0, #0x10
	lsrs r0, r0, #0x10
	moveq r0, r1
	bx lr
	.align 2, 0
_020A3D94: .4byte 0x0000FFFF
	arm_func_end FUN_020A3D7C

	arm_func_start FUN_020A3D98
FUN_020A3D98: @ 0x020A3D98
	push {r3, lr}
	mov r2, #0
	bl FUN_020A3CC8
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	bl FUN_020A3D7C
	pop {r3, pc}
	arm_func_end FUN_020A3D98

	arm_func_start FUN_020A3DB4
FUN_020A3DB4: @ 0x020A3DB4
	push {r3, r4, r5, lr}
	mov r4, r2
	mov r2, r3
	mov r5, r1
	bl FUN_020A3CC8
	mov r2, r0
	add r0, r4, #0xc
	mov r1, #8
	bl FUN_020A3CC8
	add r1, r0, r5
	tst r1, #0x10000
	addne r0, r1, #1
	lslne r0, r0, #0x10
	lsrne r1, r0, #0x10
	ldr r0, _020A3E00 @ =0x0000FFFF
	cmp r1, r0
	movne r0, #1
	moveq r0, #0
	pop {r3, r4, r5, pc}
	.align 2, 0
_020A3E00: .4byte 0x0000FFFF
	arm_func_end FUN_020A3DB4

	arm_func_start FUN_020A3E04
FUN_020A3E04: @ 0x020A3E04
	mov ip, #1
	sub r1, ip, #2
	cmp r0, r1
	subne r1, ip, #0x81000000
	cmpne r0, r1
	beq _020A3E38
	ldr r1, _020A3E40 @ =0x021D4620
	ldr r3, [r1, #0x1c]
	ldr r1, [r1, #0x50]
	and r2, r0, r3
	and r0, r1, r3
	cmp r2, r0
	movne ip, #0
_020A3E38:
	mov r0, ip
	bx lr
	.align 2, 0
_020A3E40: .4byte 0x021D4620
	arm_func_end FUN_020A3E04

	arm_func_start FUN_020A3E44
FUN_020A3E44: @ 0x020A3E44
	push {r4, lr}
	mov r4, r0
	bl FUN_020A3E04
	cmp r0, #0
	ldreq r0, _020A3E64 @ =0x021D4620
	ldreq r4, [r0, #0x2c]
	mov r0, r4
	pop {r4, pc}
	.align 2, 0
_020A3E64: .4byte 0x021D4620
	arm_func_end FUN_020A3E44

	arm_func_start FUN_020A3E68
FUN_020A3E68: @ 0x020A3E68
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, #0
	bl FUN_020A3E04
	cmp r0, #0
	beq _020A3E98
	ldr r0, _020A3EA0 @ =0x021D4620
	ldr r0, [r0, #0x1c]
	mvn r1, r0
	and r0, r1, r5
	cmp r1, r0
	moveq r4, #1
_020A3E98:
	mov r0, r4
	pop {r3, r4, r5, pc}
	.align 2, 0
_020A3EA0: .4byte 0x021D4620
	arm_func_end FUN_020A3E68

	arm_func_start FUN_020A3EA4
FUN_020A3EA4: @ 0x020A3EA4
	and r0, r0, #0xf0000000
	cmp r0, #0xe0000000
	moveq r0, #1
	movne r0, #0
	bx lr
	arm_func_end FUN_020A3EA4

	arm_func_start FUN_020A3EB8
FUN_020A3EB8: @ 0x020A3EB8
	push {r4, r5, r6, lr}
	ldr r1, _020A3F30 @ =0x021D4620
	mov r4, #1
	ldr r1, [r1, #0x50]
	mov r6, r0
	cmp r1, #0
	mov r0, r4
	cmpne r6, r1
	movne r0, #0
	mov r5, r4
	mov r2, r4
	cmp r0, #0
	bne _020A3EF8
	ldr r0, _020A3F34 @ =0x7F000001
	cmp r6, r0
	movne r2, #0
_020A3EF8:
	cmp r2, #0
	bne _020A3F10
	mov r0, r6
	bl FUN_020A3E68
	cmp r0, #0
	moveq r5, #0
_020A3F10:
	cmp r5, #0
	bne _020A3F28
	mov r0, r6
	bl FUN_020A3EA4
	cmp r0, #0
	moveq r4, #0
_020A3F28:
	mov r0, r4
	pop {r4, r5, r6, pc}
	.align 2, 0
_020A3F30: .4byte 0x021D4620
_020A3F34: .4byte 0x7F000001
	arm_func_end FUN_020A3EB8

	arm_func_start FUN_020A3F38
FUN_020A3F38: @ 0x020A3F38
	mov ip, #0
_020A3F3C:
	ldrh r3, [r0], #2
	ldrh r2, [r1], #2
	cmp r3, r2
	movne r0, #1
	bxne lr
	add ip, ip, #1
	cmp ip, #3
	blt _020A3F3C
	mov r0, #0
	bx lr
	arm_func_end FUN_020A3F38

	arm_func_start FUN_020A3F64
FUN_020A3F64: @ 0x020A3F64
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	mov r6, r1
	mov r5, r2
	ldr r0, _020A3FB8 @ =_02110690
	add r1, r7, #6
	mov r2, #6
	mov r4, r3
	bl FUN_020D4A50
	mov r0, r7
	mov r3, r5
	add r1, r7, #6
	sub r2, r6, #6
	str r4, [sp]
	bl FUN_020AFFE4
	cmp r0, #0
	movlt r1, #1
	ldr r0, _020A3FBC @ =0x021D4620
	movge r1, #0
	strb r1, [r0]
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020A3FB8: .4byte _02110690
_020A3FBC: .4byte 0x021D4620
	arm_func_end FUN_020A3F64

	arm_func_start FUN_020A3FC0
FUN_020A3FC0: @ 0x020A3FC0
	push {r4, r5, r6, r7, r8, lr}
	ldr r4, _020A41A8 @ =0x021D4620
	mov r7, r0
	ldr ip, [r4, #0x58]
	mov r6, r2
	cmp ip, #0
	ldrne r0, [r4, #0x5c]
	mov r5, r3
	cmpne r0, #0
	popeq {r4, r5, r6, r7, r8, pc}
	ldr r0, [sp, #0x1c]
	add r0, r5, r0
	cmp r0, #8
	poplo {r4, r5, r6, r7, r8, pc}
	ldr r2, _020A41AC @ =0x000005E4
	cmp r0, r2
	pophi {r4, r5, r6, r7, r8, pc}
	ldr r2, _020A41B0 @ =_02110690
	ldrb r4, [r6]
	ldrb r3, [r2]
	cmp r4, r3
	ldrbeq r4, [r6, #1]
	ldrbeq r3, [r2, #1]
	cmpeq r4, r3
	ldrbeq r3, [r6, #2]
	ldrbeq r2, [r2, #2]
	cmpeq r3, r2
	ldrbeq r2, [r6, #6]
	cmpeq r2, #8
	popne {r4, r5, r6, r7, r8, pc}
	ldrb r2, [r6, #7]
	cmp r2, #0
	cmpne r2, #6
	popne {r4, r5, r6, r7, r8, pc}
	ldr r2, _020A41A8 @ =0x021D4620
	add r0, r0, #9
	bic r0, r0, #1
	ldr r8, [r2, #0x28]
	lsl r0, r0, #0x10
	ldr lr, [r2, #0x28]
	ldr r4, [r2, #0x30]
	lsr r3, r0, #0x10
	cmp lr, r4
	add r4, r8, r0, lsr #16
	bhs _020A4080
	ldr r0, [r2, #0x30]
	cmp r0, r4
	popls {r4, r5, r6, r7, r8, pc}
_020A4080:
	ldr r0, _020A41A8 @ =0x021D4620
	ldr r2, [r0, #0x5c]
	cmp r4, r2
	bne _020A40A4
	ldr r0, [r0, #0x30]
	mov r4, #0
	cmp r0, #0
	bne _020A40C0
	pop {r4, r5, r6, r7, r8, pc}
_020A40A4:
	ldr r2, [r0, #0x5c]
	cmp r4, r2
	bls _020A40C0
	ldr r0, [r0, #0x30]
	mov r4, r3
	cmp r0, r3
	popls {r4, r5, r6, r7, r8, pc}
_020A40C0:
	ldr r0, _020A41A8 @ =0x021D4620
	ldr lr, [r0, #0x28]
	ldr r2, [r0, #0x5c]
	add lr, lr, r3
	cmp lr, r2
	bls _020A4100
	ldr lr, [r0, #0x5c]
	ldr r2, [r0, #0x28]
	sub r2, lr, r2
	cmp r2, #2
	ldrhs r0, [r0, #0x28]
	movhs r2, #0
	strhhs r2, [ip, r0]
	ldr r0, _020A41A8 @ =0x021D4620
	mov r2, #0
	str r2, [r0, #0x28]
_020A4100:
	ldr ip, _020A41A8 @ =0x021D4620
	mov r0, r1
	ldr lr, [ip, #0x58]
	ldr r1, [ip, #0x28]
	mov r2, #6
	strh r3, [lr, r1]
	ldr r3, [ip, #0x58]
	ldr r1, [ip, #0x28]
	add r1, r3, r1
	add r1, r1, #2
	bl FUN_020D4A50
	ldr r1, _020A41A8 @ =0x021D4620
	mov r0, r7
	ldr r3, [r1, #0x58]
	ldr r1, [r1, #0x28]
	mov r2, #6
	add r1, r3, r1
	add r1, r1, #8
	bl FUN_020D4A50
	ldr r1, _020A41A8 @ =0x021D4620
	add r0, r6, #6
	ldr r3, [r1, #0x58]
	ldr r1, [r1, #0x28]
	sub r2, r5, #6
	add r1, r3, r1
	add r1, r1, #0xe
	bl FUN_020D4A50
	ldr r0, [sp, #0x18]
	cmp r0, #0
	ldrne r2, [sp, #0x1c]
	cmpne r2, #0
	beq _020A419C
	ldr r1, _020A41A8 @ =0x021D4620
	ldr r3, [r1, #0x58]
	ldr r1, [r1, #0x28]
	add r1, r3, r1
	add r1, r1, #8
	add r1, r1, r5
	bl FUN_020D4A50
_020A419C:
	ldr r0, _020A41A8 @ =0x021D4620
	str r4, [r0, #0x28]
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0
_020A41A8: .4byte 0x021D4620
_020A41AC: .4byte 0x000005E4
_020A41B0: .4byte _02110690
	arm_func_end FUN_020A3FC0

	arm_func_start FUN_020A41B4
FUN_020A41B4: @ 0x020A41B4
	push {r3, lr}
	sub sp, sp, #8
	mov ip, #0
	str ip, [sp]
	str ip, [sp, #4]
	bl FUN_020A3FC0
	ldr r0, _020A4208 @ =0x021D4620
	ldr r1, [r0, #0x54]
	cmp r1, #0
	addeq sp, sp, #8
	popeq {r3, pc}
	ldr r0, [r0, #0x54]
	bl FUN_020D1E68
	cmp r0, #0
	addne sp, sp, #8
	popne {r3, pc}
	ldr r0, _020A4208 @ =0x021D4620
	ldr r0, [r0, #0x54]
	bl FUN_020D1F34
	add sp, sp, #8
	pop {r3, pc}
	.align 2, 0
_020A4208: .4byte 0x021D4620
	arm_func_end FUN_020A41B4

	arm_func_start FUN_020A420C
FUN_020A420C: @ 0x020A420C
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r7, r0
	bl FUN_020D3A38
	ldr sb, _020A42C4 @ =0x021D4620
	mov r6, r0
	ldr r1, [sb, #0x30]
	ldr r0, [sb, #0x28]
	cmp r1, r0
	bne _020A4260
	mov r5, #0
	ldr r8, _020A42C8 @ =0x021E16A0
	mov r4, r5
_020A423C:
	ldr r1, [r8, #4]
	mov r0, r5
	str r1, [sb, #0x54]
	bl FUN_020D1E7C
	str r4, [sb, #0x54]
	ldr r1, [sb, #0x30]
	ldr r0, [sb, #0x28]
	cmp r1, r0
	beq _020A423C
_020A4260:
	mov r0, r6
	bl FUN_020D3A4C
	ldr r0, _020A42C4 @ =0x021D4620
	mov r3, #0
	ldr r5, [r0, #0x58]
	mov r1, r3
_020A4278:
	ldr r4, [r0, #0x5c]
	ldr r2, [r0, #0x30]
	sub r2, r4, r2
	cmp r2, #2
	strlo r3, [r0, #0x30]
	ldr r2, [r0, #0x30]
	ldrh r2, [r5, r2]
	cmp r2, #0
	streq r1, [r0, #0x30]
	cmp r2, #0
	beq _020A4278
	sub r1, r2, #2
	ldr r0, _020A42C4 @ =0x021D4620
	str r1, [r7]
	ldr r1, [r0, #0x58]
	ldr r0, [r0, #0x30]
	add r0, r1, r0
	add r0, r0, #2
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0
_020A42C4: .4byte 0x021D4620
_020A42C8: .4byte 0x021E16A0
	arm_func_end FUN_020A420C

	arm_func_start FUN_020A42CC
FUN_020A42CC: @ 0x020A42CC
	push {r3, lr}
	bl FUN_020D3A38
	ldr r1, _020A430C @ =0x021D4620
	ldr ip, [r1, #0x30]
	ldr r3, [r1, #0x58]
	ldr r2, [r1, #0x30]
	ldrh r2, [r3, r2]
	add r2, ip, r2
	str r2, [r1, #0x30]
	ldr r3, [r1, #0x30]
	ldr r2, [r1, #0x5c]
	cmp r3, r2
	movhs r2, #0
	strhs r2, [r1, #0x30]
	bl FUN_020D3A4C
	pop {r3, pc}
	.align 2, 0
_020A430C: .4byte 0x021D4620
	arm_func_end FUN_020A42CC

	arm_func_start FUN_020A4310
FUN_020A4310: @ 0x020A4310
	push {r3, r4, r5, r6, r7, lr}
	mov r5, r0
	bl FUN_020D3A38
	ldr r1, _020A43C8 @ =0x7F000001
	mov r4, r0
	cmp r5, r1
	ldrne r0, _020A43CC @ =0x021D4620
	mov r7, #0
	ldrne r0, [r0, #0x50]
	cmpne r5, r0
	ldreq r7, _020A43D0 @ =0x021D4B08
	beq _020A43B8
	mov r0, r5
	bl FUN_020A3E68
	cmp r0, #0
	bne _020A4360
	mov r0, r5
	bl FUN_020A3EA4
	cmp r0, #0
	beq _020A4368
_020A4360:
	ldr r7, _020A43D4 @ =_02110688
	b _020A43B8
_020A4368:
	ldr r1, _020A43D8 @ =0x021D46A0
	mov r6, r7
_020A4370:
	ldr r0, [r1]
	cmp r5, r0
	bne _020A43A8
	bl FUN_020D34B0
	mov r2, #0xc
	mul r3, r6, r2
	ldr r2, _020A43D8 @ =0x021D46A0
	lsr r5, r0, #0x10
	add r0, r2, r3
	ldr r2, _020A43DC @ =0x021D46AA
	orr r5, r5, r1, lsl #16
	strh r5, [r2, r3]
	add r7, r0, #4
	b _020A43B8
_020A43A8:
	add r6, r6, #1
	cmp r6, #8
	add r1, r1, #0xc
	blo _020A4370
_020A43B8:
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, r7
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020A43C8: .4byte 0x7F000001
_020A43CC: .4byte 0x021D4620
_020A43D0: .4byte 0x021D4B08
_020A43D4: .4byte _02110688
_020A43D8: .4byte 0x021D46A0
_020A43DC: .4byte 0x021D46AA
	arm_func_end FUN_020A4310

	arm_func_start FUN_020A43E0
FUN_020A43E0: @ 0x020A43E0
	push {r3, r4, lr}
	sub sp, sp, #0x2c
	mov r4, r0
	add r0, sp, #0
	mov r1, #0
	mov r2, #0x2a
	bl FUN_020D4994
	add r0, sp, #0
	mov r1, #0xff
	mov r2, #6
	bl FUN_020D4994
	ldr r0, _020A44CC @ =0x021D4B08
	add r1, sp, #6
	mov r2, #6
	bl FUN_020D4A50
	mov r0, #1
	ldr r1, _020A44D0 @ =0x00000608
	strb r0, [sp, #0xf]
	strh r1, [sp, #0xc]
	strb r0, [sp, #0x15]
	mov r0, #8
	ldr r1, _020A44D4 @ =0x00000406
	strb r0, [sp, #0x10]
	strh r1, [sp, #0x12]
	ldr r0, _020A44CC @ =0x021D4B08
	add r1, sp, #0x16
	mov r2, #6
	bl FUN_020D4A50
	ldr r0, _020A44D8 @ =0x021D4620
	lsr r1, r4, #0x10
	ldr r3, [r0, #0x50]
	lsl r0, r1, #0x10
	lsr r2, r0, #0x10
	lsl r0, r4, #0x10
	lsr r1, r0, #0x10
	lsr r0, r3, #0x10
	lsl r0, r0, #0x10
	lsr r4, r0, #0x10
	lsl r0, r3, #0x10
	lsr r3, r0, #0x10
	lsl r0, r4, #8
	orr r0, r0, r4, asr #8
	strh r0, [sp, #0x1c]
	lsl r0, r3, #8
	orr r0, r0, r3, asr #8
	strh r0, [sp, #0x1e]
	lsl r0, r2, #8
	orr r0, r0, r2, asr #8
	strh r0, [sp, #0x26]
	lsl r0, r1, #8
	orr r0, r0, r1, asr #8
	mov r2, #0
	strh r0, [sp, #0x28]
	add r0, sp, #0
	mov r1, #0x2a
	mov r3, r2
	bl FUN_020A3F64
	add sp, sp, #0x2c
	pop {r3, r4, pc}
	.align 2, 0
_020A44CC: .4byte 0x021D4B08
_020A44D0: .4byte 0x00000608
_020A44D4: .4byte 0x00000406
_020A44D8: .4byte 0x021D4620
	arm_func_end FUN_020A43E0

	arm_func_start FUN_020A44DC
FUN_020A44DC: @ 0x020A44DC
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r7, #0
	ldr r4, _020A4548 @ =0x021D4620
	mov sb, r0
	mov r5, #0x64
	mov r6, r7
_020A44F4:
	mov r0, sb
	bl FUN_020A43E0
	mov r8, r6
_020A4500:
	ldr r0, [r4, #0x50]
	cmp r0, #0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	mov r0, r5
	bl FUN_020D2108
	mov r0, sb
	bl FUN_020A4310
	cmp r0, #0
	popne {r3, r4, r5, r6, r7, r8, sb, pc}
	add r8, r8, #1
	cmp r8, #0x14
	blo _020A4500
	add r7, r7, #1
	cmp r7, #8
	blo _020A44F4
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0
_020A4548: .4byte 0x021D4620
	arm_func_end FUN_020A44DC

	arm_func_start FUN_020A454C
FUN_020A454C: @ 0x020A454C
	push {r3, r4, r5, r6, r7, lr}
	ldr r3, _020A4678 @ =0x7F000001
	mov r6, r1
	mov r7, r0
	cmp r6, r3
	ldrne r0, _020A467C @ =0x021D4620
	mov r5, r2
	ldrne r0, [r0, #0x50]
	cmpne r6, r0
	popeq {r3, r4, r5, r6, r7, pc}
	mov r0, r6
	bl FUN_020A3E04
	cmp r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	mov r0, r6
	bl FUN_020A3EA4
	cmp r0, #0
	popne {r3, r4, r5, r6, r7, pc}
	bl FUN_020D34B0
	lsr r0, r0, #0x10
	orr r0, r0, r1, lsl #16
	lsl r0, r0, #0x10
	ldr r2, _020A4680 @ =0x021D46A0
	lsr r4, r0, #0x10
	mov r1, #0
_020A45B0:
	ldr r0, [r2]
	cmp r6, r0
	bne _020A45E8
	mov r0, #0xc
	mul r5, r1, r0
	ldr r0, _020A4680 @ =0x021D46A0
	ldr r3, _020A4684 @ =0x021D46AA
	add r1, r0, r5
	mov r0, r7
	add r1, r1, #4
	mov r2, #6
	strh r4, [r3, r5]
	bl FUN_020D4A50
	pop {r3, r4, r5, r6, r7, pc}
_020A45E8:
	add r1, r1, #1
	cmp r1, #8
	add r2, r2, #0xc
	blo _020A45B0
	cmp r5, #0
	popeq {r3, r4, r5, r6, r7, pc}
	mov r2, #0
	ldr r3, _020A4680 @ =0x021D46A0
	mov r1, r2
	mov r5, r2
_020A4610:
	ldr r0, [r3]
	cmp r0, #0
	moveq r1, r5
	beq _020A4648
	ldrh r0, [r3, #0xa]
	add r3, r3, #0xc
	sub r0, r4, r0
	lsl r0, r0, #0x10
	cmp r2, r0, asr #16
	movlt r1, r5
	add r5, r5, #1
	lsrlt r2, r0, #0x10
	cmp r5, #8
	blo _020A4610
_020A4648:
	mov r0, #0xc
	mul r5, r1, r0
	ldr r3, _020A4680 @ =0x021D46A0
	mov r0, r7
	add r1, r3, r5
	add r1, r1, #4
	mov r2, #6
	str r6, [r3, r5]
	bl FUN_020D4A50
	ldr r0, _020A4684 @ =0x021D46AA
	strh r4, [r0, r5]
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020A4678: .4byte 0x7F000001
_020A467C: .4byte 0x021D4620
_020A4680: .4byte 0x021D46A0
_020A4684: .4byte 0x021D46AA
	arm_func_end FUN_020A454C

	arm_func_start FUN_020A4688
FUN_020A4688: @ 0x020A4688
	push {r4, r5, r6, r7, r8, lr}
	ldrh r5, [sp, #0x1c]
	ldr r4, [sp, #0x18]
	mov r8, r0
	lsl r0, r5, #8
	orr ip, r0, r5, asr #8
	mov r0, r4
	mov r7, r1
	mov r6, r2
	mov r5, r3
	strh ip, [r8, #-2]
	bl FUN_020A3EA4
	cmp r0, #0
	bne _020A46FC
	mov r0, r4
	bl FUN_020A3E44
	movs r4, r0
	popeq {r4, r5, r6, r7, r8, pc}
	bl FUN_020A4310
	cmp r0, #0
	bne _020A46E4
	mov r0, r4
	bl FUN_020A44DC
_020A46E4:
	cmp r0, #0
	popeq {r4, r5, r6, r7, r8, pc}
	sub r1, r8, #0xe
	mov r2, #6
	bl FUN_020D4A50
	b _020A472C
_020A46FC:
	mov r0, #1
	strb r0, [r8, #-0xe]
	mov r1, #0
	lsr r0, r4, #0x10
	strb r1, [r8, #-0xd]
	mov r1, #0x5e
	strb r1, [r8, #-0xc]
	and r0, r0, #0x7f
	strb r0, [r8, #-0xb]
	lsr r0, r4, #8
	strb r0, [r8, #-0xa]
	strb r4, [r8, #-9]
_020A472C:
	ldr r0, _020A4754 @ =0x021D4B08
	sub r1, r8, #8
	mov r2, #6
	bl FUN_020D4A50
	mov r2, r6
	mov r3, r5
	sub r0, r8, #0xe
	add r1, r7, #0xe
	bl FUN_020A3F64
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0
_020A4754: .4byte 0x021D4B08
	arm_func_end FUN_020A4688

	arm_func_start FUN_020A4758
FUN_020A4758: @ 0x020A4758
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #8
	mov r7, r1
	mov r5, r3
	add r1, r7, #0x14
	add r1, r1, r5
	lsl r1, r1, #0x10
	ldr r3, [sp, #0x24]
	lsr r4, r1, #0x10
	lsl r1, r3, #0x10
	lsl r3, r4, #8
	orr r3, r3, r4, asr #8
	mov r8, r0
	lsr r1, r1, #0x10
	lsl r0, r1, #8
	strh r3, [r8, #-0x12]
	orr r0, r0, r1, asr #8
	strh r0, [r8, #-0xe]
	mov r3, #0
	sub r0, r8, #0x14
	mov r1, #0x14
	mov r6, r2
	strh r3, [r8, #-0xa]
	ldr r4, [sp, #0x20]
	bl FUN_020A3D98
	lsl r2, r0, #8
	ldr r1, _020A4870 @ =0x7F000001
	orr r0, r2, r0, asr #8
	strh r0, [r8, #-0xa]
	cmp r4, r1
	ldrne r0, _020A4874 @ =0x021D4620
	ldrne r0, [r0, #0x50]
	cmpne r4, r0
	beq _020A4800
	mov r2, r6
	mov r3, r5
	str r4, [sp]
	mov ip, #0x800
	sub r0, r8, #0x14
	add r1, r7, #0x14
	str ip, [sp, #4]
	bl FUN_020A4688
_020A4800:
	ldr r0, _020A4870 @ =0x7F000001
	cmp r4, r0
	ldrne r0, _020A4874 @ =0x021D4620
	ldrne r0, [r0, #0x50]
	cmpne r4, r0
	beq _020A482C
	mov r0, r4
	bl FUN_020A3EA4
	cmp r0, #0
	addeq sp, sp, #8
	popeq {r4, r5, r6, r7, r8, pc}
_020A482C:
	ldr r0, _020A4878 @ =_02110690
	sub r1, r8, #0x1c
	mov r2, #8
	bl FUN_020D4A50
	bl FUN_020D3A38
	mov r4, r0
	ldr r0, _020A487C @ =0x021D4B08
	str r6, [sp]
	mov r1, r0
	str r5, [sp, #4]
	sub r2, r8, #0x1c
	add r3, r7, #0x1c
	bl FUN_020A3FC0
	mov r0, r4
	bl FUN_020D3A4C
	add sp, sp, #8
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0
_020A4870: .4byte 0x7F000001
_020A4874: .4byte 0x021D4620
_020A4878: .4byte _02110690
_020A487C: .4byte 0x021D4B08
	arm_func_end FUN_020A4758

	arm_func_start FUN_020A4880
FUN_020A4880: @ 0x020A4880
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #8
	mov sl, r0
	mov r0, #0x45
	strb r0, [sl, #-0x14]
	mov r4, #0
	ldr r7, _020A4A70 @ =0x021D4620
	strb r4, [sl, #-0x13]
	ldrh r0, [r7, #6]
	ldr r6, [sp, #0x30]
	ldrb r5, [sp, #0x34]
	add r0, r0, #1
	strh r0, [r7, #6]
	ldrh fp, [r7, #6]
	lsr r0, r6, #0x10
	mov r8, #0x80
	lsl sb, fp, #8
	orr sb, sb, fp, asr #8
	strh sb, [sl, #-0x10]
	strb r8, [sl, #-0xc]
	strb r5, [sl, #-0xb]
	ldr r8, [r7, #0x50]
	lsl r5, r0, #0x10
	lsr r0, r8, #0x10
	lsl r0, r0, #0x10
	lsr r8, r0, #0x10
	lsl r0, r8, #8
	orr r0, r0, r8, asr #8
	strh r0, [sl, #-8]
	ldr r0, [r7, #0x50]
	lsr r8, r5, #0x10
	lsl r0, r0, #0x10
	lsr r7, r0, #0x10
	lsl r5, r7, #8
	lsl r0, r6, #0x10
	orr sb, r5, r7, asr #8
	lsl r7, r8, #8
	lsr r5, r0, #0x10
	lsl r0, r5, #8
	strh sb, [sl, #-6]
	orr r7, r7, r8, asr #8
	ldr fp, _020A4A74 @ =0x000005C8
	mov sb, r1
	strh r7, [sl, #-4]
	orr r0, r0, r5, asr #8
	mov r8, r2
	mov r7, r3
	strh r0, [sl, #-2]
	cmp sb, fp
	bls _020A49EC
	mov r5, sl
	bls _020A4990
_020A4950:
	mov r0, sl
	mov r1, #0
	mov r2, r5
	mov r3, fp
	str r6, [sp]
	orr ip, r4, #0x2000
	str ip, [sp, #4]
	bl FUN_020A4758
	add r1, r4, #0xb9
	add r0, r5, #0x1c8
	sub sb, sb, fp
	lsl r1, r1, #0x10
	cmp sb, fp
	add r5, r0, #0x400
	lsr r4, r1, #0x10
	bhi _020A4950
_020A4990:
	cmp sb, #0
	beq _020A49EC
	cmp r7, #0
	mov r1, #0
	beq _020A49C4
	mov r2, r5
	mov r0, sl
	mov r3, sb
	str r6, [sp]
	orr r5, r4, #0x2000
	str r5, [sp, #4]
	bl FUN_020A4758
	b _020A49DC
_020A49C4:
	str r6, [sp]
	mov r0, sl
	mov r2, r5
	mov r3, sb
	str r4, [sp, #4]
	bl FUN_020A4758
_020A49DC:
	add r0, r4, sb, lsr #3
	lsl r0, r0, #0x10
	lsr r4, r0, #0x10
	mov sb, #0
_020A49EC:
	ldr fp, _020A4A74 @ =0x000005C8
	add r0, sb, r7
	cmp r0, fp
	bls _020A4A40
_020A49FC:
	sub r5, fp, sb
	mov r1, sb
	mov r0, sl
	mov r2, r8
	mov r3, r5
	str r6, [sp]
	orr sb, r4, #0x2000
	str sb, [sp, #4]
	bl FUN_020A4758
	add r0, r4, #0xb9
	sub r7, r7, r5
	lsl r0, r0, #0x10
	mov sb, #0
	cmp r7, fp
	add r8, r8, r5
	lsr r4, r0, #0x10
	bhi _020A49FC
_020A4A40:
	adds r0, sb, r7
	addeq sp, sp, #8
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	str r6, [sp]
	mov r0, sl
	mov r1, sb
	mov r2, r8
	mov r3, r7
	str r4, [sp, #4]
	bl FUN_020A4758
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020A4A70: .4byte 0x021D4620
_020A4A74: .4byte 0x000005C8
	arm_func_end FUN_020A4880

	arm_func_start FUN_020A4A78
FUN_020A4A78: @ 0x020A4A78
	push {r3, r4, r5, r6, r7, lr}
	sub sp, sp, #8
	mov r5, r2
	ldr r4, [r5, #0x4c]
	mov r6, r1
	mov r1, #8
	ldr r3, _020A4B20 @ =0x021D4620
	ldr r2, _020A4B24 @ =0x021E16A0
	strh r1, [r4, #0x22]
	ldr r2, [r2, #4]
	ldrh lr, [r3, #4]
	mov r7, r0
	strh r2, [r4, #0x26]
	mov r2, #0
	strh r2, [r4, #0x24]
	strh lr, [r5, #0xa]
	add ip, lr, #1
	add r0, r4, #0x22
	strh ip, [r3, #4]
	strh lr, [r4, #0x28]
	bl FUN_020A3CC8
	mov r2, r0
	mov r0, r7
	mov r1, r6
	bl FUN_020A3CC8
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	bl FUN_020A3D7C
	mov r2, r7
	mov r3, r6
	lsl r1, r0, #8
	orr r0, r1, r0, asr #8
	strh r0, [r4, #0x24]
	ldr r1, [r5, #0x1c]
	add r0, r4, #0x22
	str r1, [sp]
	mov r1, #1
	str r1, [sp, #4]
	mov r1, #8
	bl FUN_020A4880
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020A4B20: .4byte 0x021D4620
_020A4B24: .4byte 0x021E16A0
	arm_func_end FUN_020A4A78

	arm_func_start FUN_020A4B28
FUN_020A4B28: @ 0x020A4B28
	push {r3, r4, r5, r6, r7, lr}
	sub sp, sp, #8
	ldr r7, _020A4C60 @ =0x021D4620
	mov r5, r2
	ldr r2, [r7, #0x50]
	mov r6, r1
	lsr r1, r2, #0x10
	lsl r1, r1, #0x10
	lsr r2, r1, #0x10
	ldr r3, [r5, #0x4c]
	lsl r1, r2, #8
	add r4, r3, #0x22
	orr r1, r1, r2, asr #8
	strh r1, [r4, #-0xc]
	ldr r1, [r7, #0x50]
	add r2, r6, #8
	lsl r1, r1, #0x10
	lsr r7, r1, #0x10
	lsl r1, r7, #8
	orr r1, r1, r7, asr #8
	strh r1, [r4, #-0xa]
	ldr r1, [r5, #0x1c]
	lsl r2, r2, #0x10
	lsr r1, r1, #0x10
	lsl r1, r1, #0x10
	lsr r7, r1, #0x10
	lsl r1, r7, #8
	orr r1, r1, r7, asr #8
	strh r1, [r4, #-8]
	ldr r1, [r5, #0x1c]
	lsr r2, r2, #0x10
	lsl r1, r1, #0x10
	lsr r7, r1, #0x10
	lsl r1, r7, #8
	orr r7, r1, r7, asr #8
	lsl r1, r2, #8
	strh r7, [r4, #-6]
	mov r7, #0x1100
	strh r7, [r4, #-4]
	orr r1, r1, r2, asr #8
	strh r1, [r4, #4]
	ldrh r1, [r4, #4]
	mov r7, r0
	sub r0, r4, #0xc
	strh r1, [r4, #-2]
	ldrh lr, [r5, #0x18]
	mov r2, #0
	mov r1, #0x14
	lsl ip, lr, #8
	orr ip, ip, lr, asr #8
	strh ip, [r4, #2]
	ldrh lr, [r5, #0xa]
	lsl ip, lr, #8
	orr ip, ip, lr, asr #8
	strh ip, [r3, #0x22]
	strh r2, [r4, #6]
	bl FUN_020A3CC8
	mov r2, r0
	mov r0, r7
	mov r1, r6
	bl FUN_020A3CC8
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	bl FUN_020A3D7C
	mov r2, r7
	mov r3, r6
	lsl r1, r0, #8
	orr r0, r1, r0, asr #8
	strh r0, [r4, #6]
	ldr r1, [r5, #0x1c]
	mov r0, r4
	str r1, [sp]
	mov r1, #0x11
	str r1, [sp, #4]
	mov r1, #8
	bl FUN_020A4880
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020A4C60: .4byte 0x021D4620
	arm_func_end FUN_020A4B28

	arm_func_start FUN_020A4C64
FUN_020A4C64: @ 0x020A4C64
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #8
	mov r7, r2
	ldrb r2, [r7, #8]
	mov sb, r0
	mov r8, r1
	cmp r2, #0
	mov r6, r3
	addeq sp, sp, #8
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	ldr r0, _020A4EC8 @ =0x021E16A0
	ldr r1, _020A4ECC @ =0x021D4888
	ldr r0, [r0, #4]
	cmp r0, r1
	ldreq r4, _020A4ED0 @ =0x021D4B32
	ldrne r0, [r7, #0x4c]
	addne r4, r0, #0x22
	ldr r0, _020A4ED4 @ =0x021D4620
	ands r2, r6, #2
	movne r5, #0x18
	moveq r5, #0x14
	add r1, r5, r8
	ldr sl, [r0, #0x50]
	lsl r3, r1, #0x10
	lsr r1, sl, #0x10
	lsl r1, r1, #0x10
	lsr sl, r1, #0x10
	lsl r1, sl, #8
	orr r1, r1, sl, asr #8
	strh r1, [r4, #-0xc]
	lsr r1, r3, #0x10
	ldr sl, [r0, #0x50]
	lsl lr, r1, #8
	lsl r3, sl, #0x10
	lsr sl, r3, #0x10
	lsl r3, sl, #8
	orr r3, r3, sl, asr #8
	strh r3, [r4, #-0xa]
	ldr r3, [r7, #0x1c]
	orr r1, lr, r1, asr #8
	lsr r3, r3, #0x10
	lsl r3, r3, #0x10
	lsr sl, r3, #0x10
	lsl r3, sl, #8
	orr r3, r3, sl, asr #8
	strh r3, [r4, #-8]
	ldr r3, [r7, #0x1c]
	lsr ip, r5, #2
	lsl r3, r3, #0x10
	lsr sl, r3, #0x10
	lsl r3, sl, #8
	orr r3, r3, sl, asr #8
	strh r3, [r4, #-6]
	mov r3, #0x600
	strh r3, [r4, #-4]
	strh r1, [r4, #-2]
	ldrh lr, [r7, #0xa]
	lsl r3, ip, #4
	cmp r2, #0
	lsl r1, lr, #8
	orr r1, r1, lr, asr #8
	strh r1, [r4]
	ldrh ip, [r7, #0x18]
	lsl r1, ip, #8
	orr r1, r1, ip, asr #8
	strh r1, [r4, #2]
	ldr r1, [r7, #0x28]
	lsr r1, r1, #0x10
	lsl r1, r1, #0x10
	lsr ip, r1, #0x10
	lsl r1, ip, #8
	orr r1, r1, ip, asr #8
	strh r1, [r4, #4]
	ldr r1, [r7, #0x28]
	lsl r1, r1, #0x10
	lsr ip, r1, #0x10
	lsl r1, ip, #8
	orr r1, r1, ip, asr #8
	strh r1, [r4, #6]
	ldr r1, [r7, #0x24]
	lsr r1, r1, #0x10
	lsl r1, r1, #0x10
	lsr ip, r1, #0x10
	lsl r1, ip, #8
	orr r1, r1, ip, asr #8
	strh r1, [r4, #8]
	ldr r1, [r7, #0x24]
	lsl r1, r1, #0x10
	lsr ip, r1, #0x10
	lsl r1, ip, #8
	orr r1, r1, ip, asr #8
	strh r1, [r4, #0xa]
	strb r3, [r4, #0xc]
	strb r6, [r4, #0xd]
	ldr r3, [r7, #0x3c]
	ldr r1, [r7, #0x44]
	sub r1, r3, r1
	lsl r1, r1, #0x10
	lsr r3, r1, #0x10
	lsl r1, r3, #8
	orr r1, r1, r3, asr #8
	strh r1, [r4, #0xe]
	mov r1, #0
	strh r1, [r4, #0x10]
	strh r1, [r4, #0x12]
	beq _020A4E48
	ldrh r1, [r0, #2]
	add r1, r1, #0x2040000
	lsr r1, r1, #0x10
	lsl r1, r1, #0x10
	lsr r2, r1, #0x10
	lsl r1, r2, #8
	orr r1, r1, r2, asr #8
	strh r1, [r4, #0x14]
	ldrh r0, [r0, #2]
	add r0, r0, #0x2040000
	lsl r0, r0, #0x10
	lsr r1, r0, #0x10
	lsl r0, r1, #8
	orr r0, r0, r1, asr #8
	strh r0, [r4, #0x16]
_020A4E48:
	sub r0, r4, #0xc
	add r1, r5, #0xc
	mov r2, #0
	bl FUN_020A3CC8
	mov r2, r0
	mov r0, sb
	mov r1, r8
	bl FUN_020A3CC8
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	bl FUN_020A3D7C
	lsl r3, r0, #8
	orr r0, r3, r0, asr #8
	strh r0, [r4, #0x10]
	mov r0, r4
	ldr r4, [r7, #0x1c]
	mov r3, #6
	str r4, [sp]
	str r3, [sp, #4]
	mov r1, r5
	mov r2, sb
	mov r3, r8
	bl FUN_020A4880
	ldr r0, [r7, #0x28]
	tst r6, #3
	add r0, r0, r8
	str r0, [r7, #0x28]
	ldrne r0, [r7, #0x28]
	addne r0, r0, #1
	strne r0, [r7, #0x28]
	add sp, sp, #8
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0
_020A4EC8: .4byte 0x021E16A0
_020A4ECC: .4byte 0x021D4888
_020A4ED0: .4byte 0x021D4B32
_020A4ED4: .4byte 0x021D4620
	arm_func_end FUN_020A4C64

	arm_func_start FUN_020A4ED8
FUN_020A4ED8: @ 0x020A4ED8
	push {r4, lr}
	mov r4, r0
	mov r3, #0x200
	add r0, r4, #8
	add r1, r4, #0x12
	mov r2, #0xa
	strh r3, [r4, #6]
	bl FUN_020D4A50
	ldr r0, _020A4F78 @ =0x021D4B08
	add r1, r4, #8
	mov r2, #6
	bl FUN_020D4A50
	ldr r3, _020A4F7C @ =0x021D4620
	add r0, r4, #0x12
	ldr r2, [r3, #0x50]
	sub r1, r4, #0xe
	lsr r2, r2, #0x10
	lsl r2, r2, #0x10
	lsr ip, r2, #0x10
	lsl r2, ip, #8
	orr r2, r2, ip, asr #8
	strh r2, [r4, #0xe]
	ldr r3, [r3, #0x50]
	mov r2, #6
	lsl r3, r3, #0x10
	lsr ip, r3, #0x10
	lsl r3, ip, #8
	orr r3, r3, ip, asr #8
	strh r3, [r4, #0x10]
	bl FUN_020D4A50
	ldr r0, _020A4F78 @ =0x021D4B08
	sub r1, r4, #8
	mov r2, #6
	bl FUN_020D4A50
	sub r0, r4, #0xe
	mov r1, #0x2a
	mov r2, #0
	mov r3, r2
	bl FUN_020A3F64
	pop {r4, pc}
	.align 2, 0
_020A4F78: .4byte 0x021D4B08
_020A4F7C: .4byte 0x021D4620
	arm_func_end FUN_020A4ED8

	arm_func_start FUN_020A4F80
FUN_020A4F80: @ 0x020A4F80
	push {r3, r4, r5, r6, r7, lr}
	mov r6, r0
	cmp r1, #0x1c
	poplo {r3, r4, r5, r6, r7, pc}
	ldr r1, _020A50B8 @ =0x021D4B08
	add r0, r6, #8
	bl FUN_020A3F38
	cmp r0, #0
	ldrne r0, _020A50BC @ =0x021D4620
	ldrne r0, [r0, #0x50]
	cmpne r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	ldrh r0, [r6]
	cmp r0, #0x100
	ldrheq r0, [r6, #2]
	cmpeq r0, #8
	ldrheq r1, [r6, #4]
	ldreq r0, _020A50C0 @ =0x00000406
	cmpeq r1, r0
	popne {r3, r4, r5, r6, r7, pc}
	ldrh r1, [r6, #6]
	lsl r0, r1, #8
	orr r0, r0, r1, asr #8
	lsl r0, r0, #0x10
	lsr r4, r0, #0x10
	cmp r4, #1
	cmpne r4, #2
	popne {r3, r4, r5, r6, r7, pc}
	ldrh r5, [r6, #0x10]
	ldrh r3, [r6, #0xe]
	ldrh lr, [r6, #0x1a]
	lsl r0, r5, #8
	lsl r1, r3, #8
	orr r3, r1, r3, asr #8
	orr r1, r0, r5, asr #8
	lsl r0, r3, #0x10
	lsl r1, r1, #0x10
	ldrh ip, [r6, #0x18]
	ldr r2, _020A50BC @ =0x021D4620
	lsr r3, r0, #0x10
	lsr r1, r1, #0x10
	ldr r0, [r2, #0x50]
	orr r1, r1, r3, lsl #16
	lsl r3, ip, #8
	cmp r1, r0
	moveq r5, #1
	lsl r2, lr, #8
	orr ip, r3, ip, asr #8
	orr r3, r2, lr, asr #8
	lsl r2, ip, #0x10
	lsl r3, r3, #0x10
	lsr ip, r2, #0x10
	lsr r2, r3, #0x10
	orr r2, r2, ip, lsl #16
	movne r5, #0
	cmp r0, r2
	moveq r7, #1
	movne r7, #0
	cmp r5, #0
	bne _020A507C
	mov r2, r7
	add r0, r6, #8
	bl FUN_020A454C
_020A507C:
	cmp r4, #1
	bne _020A5098
	cmp r7, #0
	beq _020A5098
	mov r0, r6
	bl FUN_020A4ED8
	pop {r3, r4, r5, r6, r7, pc}
_020A5098:
	cmp r4, #2
	popne {r3, r4, r5, r6, r7, pc}
	cmp r7, #0
	cmpne r5, #0
	ldrne r0, _020A50BC @ =0x021D4620
	movne r1, #1
	strbne r1, [r0, #1]
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020A50B8: .4byte 0x021D4B08
_020A50BC: .4byte 0x021D4620
_020A50C0: .4byte 0x00000406
	arm_func_end FUN_020A4F80

	arm_func_start FUN_020A50C4
FUN_020A50C4: @ 0x020A50C4
	push {r3, r4, r5, r6, r7, lr}
	sub sp, sp, #8
	mov r6, r0
	ldrh r4, [r6, #0xe]
	ldrh r3, [r6, #0xc]
	mov r5, r1
	lsl r0, r4, #8
	lsl r1, r3, #8
	orr r3, r1, r3, asr #8
	orr r1, r0, r4, asr #8
	lsl r0, r3, #0x10
	lsl r1, r1, #0x10
	lsr r3, r0, #0x10
	lsr r0, r1, #0x10
	orr r0, r0, r3, lsl #16
	mov r4, r2
	bl FUN_020A3E44
	movs r7, r0
	addeq sp, sp, #8
	popeq {r3, r4, r5, r6, r7, pc}
	bl FUN_020A4310
	cmp r0, #0
	bne _020A5130
	mov r0, r7
	bl FUN_020A43E0
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, pc}
_020A5130:
	mov r2, #0
	strb r2, [r5]
	mov r0, r5
	mov r1, r4
	strh r2, [r5, #2]
	bl FUN_020A3D98
	lsl r1, r0, #8
	orr r0, r1, r0, asr #8
	strh r0, [r5, #2]
	ldrh ip, [r6, #0xe]
	ldrh r3, [r6, #0xc]
	mov r2, #0
	lsl r0, ip, #8
	lsl r1, r3, #8
	orr r3, r1, r3, asr #8
	orr r1, r0, ip, asr #8
	lsl r0, r3, #0x10
	lsl r1, r1, #0x10
	lsr r3, r0, #0x10
	lsr r0, r1, #0x10
	orr r6, r0, r3, lsl #16
	mov r0, r5
	mov r1, r4
	mov r3, r2
	str r6, [sp]
	mov r4, #1
	str r4, [sp, #4]
	bl FUN_020A4880
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020A50C4

	arm_func_start FUN_020A51A8
FUN_020A51A8: @ 0x020A51A8
	push {r4, r5, r6, r7, r8, lr}
	mov r8, r0
	mov r7, r1
	mov r6, r2
	bl FUN_020D3A38
	ldr r1, _020A52A4 @ =0x021E16A0
	mov r5, r0
	ldr r1, [r1, #8]
	cmp r1, #0
	beq _020A5298
_020A51D0:
	ldr r4, [r1, #0xa4]
	cmp r4, #0
	ldrne r3, [r4]
	cmpne r3, #0
	beq _020A528C
	ldrb r0, [r4, #8]
	cmp r0, #0xb
	ldrheq r2, [r7, #4]
	lsleq r0, r3, #0x10
	cmpeq r2, r0, lsr #16
	ldrheq r2, [r4, #0xa]
	ldrheq r0, [r7, #6]
	cmpeq r2, r0
	ldreq r0, [r4, #0x44]
	cmpeq r0, #0
	bne _020A528C
	ldrh lr, [r8, #0xe]
	ldrh ip, [r8, #0xc]
	ldr r0, [r4, #0x1c]
	lsl r2, lr, #8
	lsl r3, ip, #8
	orr ip, r3, ip, asr #8
	orr r3, r2, lr, asr #8
	lsl r2, ip, #0x10
	lsl r3, r3, #0x10
	lsr ip, r2, #0x10
	lsr r2, r3, #0x10
	orr r2, r2, ip, lsl #16
	cmp r0, r2
	bne _020A528C
	ldr r1, [r4, #0x3c]
	sub r0, r6, #8
	cmp r0, r1
	strhi r1, [r4, #0x44]
	strls r0, [r4, #0x44]
	ldr r1, [r4, #0x40]
	ldr r2, [r4, #0x44]
	add r0, r7, #8
	bl FUN_020D4A50
	ldr r0, [r4, #4]
	cmp r0, #3
	bne _020A5298
	mov r0, #0
	str r0, [r4, #4]
	ldr r0, [r4]
	bl FUN_020D1F34
	b _020A5298
_020A528C:
	ldr r1, [r1, #0x68]
	cmp r1, #0
	bne _020A51D0
_020A5298:
	mov r0, r5
	bl FUN_020D3A4C
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0
_020A52A4: .4byte 0x021E16A0
	arm_func_end FUN_020A51A8

	arm_func_start FUN_020A52A8
FUN_020A52A8: @ 0x020A52A8
	cmp r0, #0
	mvnne r2, #0
	cmpne r0, r2
	cmpne r1, #0
	cmpne r1, r2
	movne r0, #1
	moveq r0, #0
	bx lr
	arm_func_end FUN_020A52A8

	arm_func_start FUN_020A52C8
FUN_020A52C8: @ 0x020A52C8
	push {r4, r5, r6, r7, r8, lr}
	mov r5, r1
	mov r4, r2
	mov r6, r0
	mov r0, r5
	mov r1, r4
	bl FUN_020A3D98
	ldr r1, _020A5394 @ =0x0000FFFF
	cmp r0, r1
	popne {r4, r5, r6, r7, r8, pc}
	ldrh r0, [r6, #0x12]
	ldrh r8, [r6, #0x10]
	ldrh r7, [r6, #0xe]
	ldrh lr, [r6, #0xc]
	lsl r2, r8, #8
	orr r2, r2, r8, asr #8
	lsl ip, lr, #8
	lsl r2, r2, #0x10
	lsl r3, r7, #8
	orr lr, ip, lr, asr #8
	lsl r1, r0, #8
	orr ip, r3, r7, asr #8
	orr r3, r1, r0, asr #8
	lsl r0, lr, #0x10
	lsl r1, ip, #0x10
	lsr ip, r0, #0x10
	lsr r0, r1, #0x10
	lsl r3, r3, #0x10
	lsr r2, r2, #0x10
	lsr r1, r3, #0x10
	orr r0, r0, ip, lsl #16
	orr r1, r1, r2, lsl #16
	bl FUN_020A52A8
	cmp r0, #0
	popeq {r4, r5, r6, r7, r8, pc}
	ldrb r0, [r5]
	cmp r0, #0
	beq _020A536C
	cmp r0, #8
	beq _020A5380
	pop {r4, r5, r6, r7, r8, pc}
_020A536C:
	mov r0, r6
	mov r1, r5
	mov r2, r4
	bl FUN_020A51A8
	pop {r4, r5, r6, r7, r8, pc}
_020A5380:
	mov r0, r6
	mov r1, r5
	mov r2, r4
	bl FUN_020A50C4
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0
_020A5394: .4byte 0x0000FFFF
	arm_func_end FUN_020A52C8

	arm_func_start FUN_020A5398
FUN_020A5398: @ 0x020A5398
	push {r4, r5, r6, lr}
	ldr r2, _020A5468 @ =0x021E16A0
	ldr ip, [r2, #8]
	cmp ip, #0
	beq _020A5460
_020A53AC:
	ldr r3, [ip, #0xa4]
	cmp r3, #0
	ldrne r2, [r3]
	cmpne r2, #0
	beq _020A5454
	ldrb r2, [r3, #8]
	cmp r2, #1
	bne _020A5454
	ldrh r5, [r1, #2]
	ldrh r4, [r3, #0xa]
	lsl r2, r5, #8
	orr r2, r2, r5, asr #8
	lsl r2, r2, #0x10
	cmp r4, r2, lsr #16
	bne _020A5454
	ldrh r5, [r3, #0x18]
	cmp r5, #0
	beq _020A540C
	ldrh r4, [r1]
	lsl r2, r4, #8
	orr r2, r2, r4, asr #8
	lsl r2, r2, #0x10
	cmp r5, r2, lsr #16
	bne _020A5454
_020A540C:
	ldr r2, [r3, #0x1c]
	cmp r2, #0
	beq _020A544C
	ldrh r6, [r0, #0xe]
	ldrh r5, [r0, #0xc]
	lsl r4, r6, #8
	lsl lr, r5, #8
	orr lr, lr, r5, asr #8
	orr r4, r4, r6, asr #8
	lsl lr, lr, #0x10
	lsl r4, r4, #0x10
	lsr lr, lr, #0x10
	lsr r4, r4, #0x10
	orr r4, r4, lr, lsl #16
	cmp r2, r4
	bne _020A5454
_020A544C:
	mov r0, r3
	pop {r4, r5, r6, pc}
_020A5454:
	ldr ip, [ip, #0x68]
	cmp ip, #0
	bne _020A53AC
_020A5460:
	mov r0, #0
	pop {r4, r5, r6, pc}
	.align 2, 0
_020A5468: .4byte 0x021E16A0
	arm_func_end FUN_020A5398

	arm_func_start FUN_020A546C
FUN_020A546C: @ 0x020A546C
	push {r4, r5, r6, lr}
	ldrb r4, [r2, #8]
	mov r3, #0
	mov r5, r3
	cmp r4, #0xa
	cmpne r4, #0xb
	movne r5, #1
	mov ip, r3
	mov r6, r3
	cmp r5, #0
	beq _020A54B4
	ldrh lr, [r1, #2]
	ldrh r5, [r2, #0xa]
	lsl r4, lr, #8
	orr r4, r4, lr, asr #8
	lsl lr, r4, #0x10
	cmp r5, lr, lsr #16
	moveq r6, #1
_020A54B4:
	cmp r6, #0
	beq _020A54D8
	ldrh lr, [r1]
	ldrh r4, [r2, #0x18]
	lsl r1, lr, #8
	orr r1, r1, lr, asr #8
	lsl r1, r1, #0x10
	cmp r4, r1, lsr #16
	moveq ip, #1
_020A54D8:
	cmp ip, #0
	beq _020A5518
	ldrh lr, [r0, #0xc]
	ldrh r4, [r0, #0xe]
	ldr ip, [r2, #0x1c]
	lsl r1, lr, #8
	lsl r0, r4, #8
	orr r2, r1, lr, asr #8
	orr r1, r0, r4, asr #8
	lsl r0, r2, #0x10
	lsl r1, r1, #0x10
	lsr r2, r0, #0x10
	lsr r0, r1, #0x10
	orr r0, r0, r2, lsl #16
	cmp ip, r0
	moveq r3, #1
_020A5518:
	mov r0, r3
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020A546C

	arm_func_start FUN_020A5520
FUN_020A5520: @ 0x020A5520
	push {r3, r4, r5, r6, r7, lr}
	ldr r2, _020A5580 @ =0x021E16A0
	mov r7, r0
	ldr r5, [r2, #8]
	mov r6, r1
	cmp r5, #0
	beq _020A5578
_020A553C:
	ldr r4, [r5, #0xa4]
	cmp r4, #0
	ldrne r0, [r4]
	cmpne r0, #0
	beq _020A556C
	mov r0, r7
	mov r1, r6
	mov r2, r4
	bl FUN_020A546C
	cmp r0, #0
	movne r0, r4
	popne {r3, r4, r5, r6, r7, pc}
_020A556C:
	ldr r5, [r5, #0x68]
	cmp r5, #0
	bne _020A553C
_020A5578:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020A5580: .4byte 0x021E16A0
	arm_func_end FUN_020A5520

	arm_func_start FUN_020A5584
FUN_020A5584: @ 0x020A5584
	mov r2, #0x218
	strh r2, [r1, #0x2e]
	ldrb r2, [r0, #0xc]
	add r3, r0, #0x14
	and r2, r2, #0xf0
	asr r0, r2, #1
	add r0, r2, r0, lsr #30
	asr r0, r0, #2
	subs r0, r0, #0x14
	sub ip, r0, #1
	bxeq lr
_020A55B0:
	ldrb r0, [r3], #1
	cmp r0, #0
	bxeq lr
	cmp r0, #1
	beq _020A55F8
	cmp r0, #2
	bne _020A55E8
	ldrb r2, [r3, #1]
	ldrb r0, [r3, #2]
	add r3, r3, #3
	sub ip, ip, #3
	orr r0, r0, r2, lsl #8
	strh r0, [r1, #0x2e]
	b _020A55F8
_020A55E8:
	ldrb r0, [r3]
	sub r0, r0, #1
	sub ip, ip, r0
	add r3, r3, r0
_020A55F8:
	cmp ip, #0
	sub ip, ip, #1
	bne _020A55B0
	bx lr
	arm_func_end FUN_020A5584

	arm_func_start FUN_020A5608
FUN_020A5608: @ 0x020A5608
	push {r3, lr}
	bl FUN_020A3E44
	cmp r0, #0
	moveq r0, #1
	popeq {r3, pc}
	bl FUN_020A4310
	pop {r3, pc}
	arm_func_end FUN_020A5608

	arm_func_start FUN_020A5624
FUN_020A5624: @ 0x020A5624
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #4
	mov r6, r0
	ldr r0, [r6, #0x1c]
	mov r5, r1
	mov r4, r2
	bl FUN_020A5608
	cmp r0, #0
	bne _020A565C
	ldr r0, _020A5690 @ =0x021E16A0
	ldr r1, _020A5694 @ =0x021D4888
	ldr r0, [r0, #4]
	cmp r0, r1
	beq _020A567C
_020A565C:
	mov r0, #0
	mov r1, r0
	mov r2, r6
	mov r3, r5
	str r4, [sp]
	bl FUN_020A4C64
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
_020A567C:
	ldr r0, [r6, #0x1c]
	bl FUN_020A3E44
	bl FUN_020A43E0
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
	.align 2, 0
_020A5690: .4byte 0x021E16A0
_020A5694: .4byte 0x021D4888
	arm_func_end FUN_020A5624

	arm_func_start FUN_020A5698
FUN_020A5698: @ 0x020A5698
	ldr ip, _020A56A8 @ =FUN_020A5624
	mov r2, r1
	mov r1, #0x10
	bx ip
	.align 2, 0
_020A56A8: .4byte FUN_020A5624
	arm_func_end FUN_020A5698

	arm_func_start FUN_020A56AC
FUN_020A56AC: @ 0x020A56AC
	ldr ip, _020A56BC @ =FUN_020A5624
	mov r2, r1
	mov r1, #0x11
	bx ip
	.align 2, 0
_020A56BC: .4byte FUN_020A5624
	arm_func_end FUN_020A56AC

	arm_func_start FUN_020A56C0
FUN_020A56C0: @ 0x020A56C0
	push {r4, r5, r6, r7, r8, lr}
	ldr r4, _020A57F0 @ =0x021D4764
	mov r8, r0
	mov r7, r1
	mov r6, r2
	mov r0, r4
	mov r1, #0
	mov r2, #0x64
	mov r5, r3
	bl FUN_020D4994
	ldrh r3, [r7, #2]
	ldr r0, _020A57F4 @ =0x021D4720
	ldr r2, _020A57F8 @ =0x021D4620
	lsl r1, r3, #8
	orr r1, r1, r3, asr #8
	strh r1, [r0, #0x4e]
	ldrh r3, [r7]
	lsl r1, r3, #8
	orr r1, r1, r3, asr #8
	strh r1, [r0, #0x5c]
	ldrh ip, [r8, #0xe]
	ldrh r3, [r8, #0xc]
	lsl r0, ip, #8
	lsl r1, r3, #8
	orr r3, r1, r3, asr #8
	orr r1, r0, ip, asr #8
	lsl r0, r3, #0x10
	lsl r1, r1, #0x10
	lsr r3, r0, #0x10
	lsr r0, r1, #0x10
	orr r0, r0, r3, lsl #16
	str r0, [r2, #0x160]
	ldrb r0, [r7, #0xd]
	tst r0, #0x10
	beq _020A5790
	ldrh r6, [r7, #0xa]
	ldrh r3, [r7, #8]
	mov r0, r4
	lsl r1, r6, #8
	lsl r2, r3, #8
	orr r3, r2, r3, asr #8
	orr r2, r1, r6, asr #8
	lsl r1, r3, #0x10
	lsl r2, r2, #0x10
	lsr r3, r1, #0x10
	lsr r1, r2, #0x10
	orr r3, r1, r3, lsl #16
	mov r2, r5
	mov r1, #4
	str r3, [r4, #0x28]
	bl FUN_020A5624
	pop {r4, r5, r6, r7, r8, pc}
_020A5790:
	mov r0, #0
	str r0, [r4, #0x28]
	ldrh r3, [r7, #6]
	ldrh r2, [r7, #4]
	lsl r0, r3, #8
	lsl r1, r2, #8
	orr r2, r1, r2, asr #8
	orr r1, r0, r3, asr #8
	lsl r0, r2, #0x10
	lsl r1, r1, #0x10
	lsr r2, r0, #0x10
	lsr r0, r1, #0x10
	orr r0, r0, r2, lsl #16
	add r1, r6, r0
	str r1, [r4, #0x24]
	ldrb r0, [r7, #0xd]
	mov r2, r5
	tst r0, #3
	addne r0, r1, #1
	strne r0, [r4, #0x24]
	mov r0, r4
	mov r1, #0x14
	bl FUN_020A5624
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0
_020A57F0: .4byte 0x021D4764
_020A57F4: .4byte 0x021D4720
_020A57F8: .4byte 0x021D4620
	arm_func_end FUN_020A56C0

	arm_func_start FUN_020A57FC
FUN_020A57FC: @ 0x020A57FC
	push {r4, r5, r6, lr}
	mov r4, r2
	mov r2, #3
	mov r6, r0
	mov r5, r1
	strb r2, [r4, #8]
	bl FUN_020D34B0
	lsr r0, r0, #0x10
	orr r0, r0, r1, lsl #16
	str r0, [r4, #0x10]
	ldrh r2, [r6, #0x12]
	ldrh r3, [r6, #0x10]
	mov r0, r5
	lsl r1, r2, #8
	orr r2, r1, r2, asr #8
	lsl r1, r3, #8
	orr r1, r1, r3, asr #8
	lsl r1, r1, #0x10
	lsl r2, r2, #0x10
	lsr r3, r1, #0x10
	lsr r1, r2, #0x10
	orr r1, r1, r3, lsl #16
	str r1, [r4, #0x14]
	ldrh r3, [r5]
	mov r1, r4
	lsl r2, r3, #8
	orr r2, r2, r3, asr #8
	strh r2, [r4, #0x18]
	ldrh r3, [r6, #0xe]
	ldrh r6, [r6, #0xc]
	lsl r2, r3, #8
	orr r3, r2, r3, asr #8
	lsl r2, r6, #8
	orr r2, r2, r6, asr #8
	lsl r2, r2, #0x10
	lsl r3, r3, #0x10
	lsr r6, r2, #0x10
	lsr r2, r3, #0x10
	orr r2, r2, r6, lsl #16
	str r2, [r4, #0x1c]
	ldrh r6, [r5, #6]
	ldrh r5, [r5, #4]
	lsl r2, r6, #8
	lsl r3, r5, #8
	orr r5, r3, r5, asr #8
	orr r3, r2, r6, asr #8
	lsl r2, r5, #0x10
	lsl r3, r3, #0x10
	lsr r5, r2, #0x10
	lsr r2, r3, #0x10
	orr r2, r2, r5, lsl #16
	add r2, r2, #1
	str r2, [r4, #0x24]
	bl FUN_020A5584
	mov r0, r4
	mov r1, #0x12
	mov r2, #0
	bl FUN_020A5624
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020A57FC

	arm_func_start FUN_020A58E8
FUN_020A58E8: @ 0x020A58E8
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_020A5520
	movs r2, r0
	beq _020A5968
	ldrb r0, [r2, #8]
	cmp r0, #1
	bne _020A5920
	mov r0, r6
	mov r1, r5
	bl FUN_020A57FC
	b _020A5960
_020A5920:
	add r0, r0, #0xfd
	and r0, r0, #0xff
	cmp r0, #1
	bhi _020A594C
	ldr r1, [r2, #0x28]
	mov r0, r6
	sub r3, r1, #1
	mov r1, r5
	str r3, [r2, #0x28]
	bl FUN_020A57FC
	b _020A5960
_020A594C:
	mov r0, r6
	mov r1, r5
	mov r2, r4
	mov r3, #0
	bl FUN_020A56C0
_020A5960:
	mov r0, #1
	pop {r4, r5, r6, pc}
_020A5968:
	mov r0, #0
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020A58E8

	arm_func_start FUN_020A5970
FUN_020A5970: @ 0x020A5970
	push {r4, r5, r6, r7, r8, lr}
	mov r4, r0
	ldrh r0, [r4, #0x12]
	ldrh r8, [r4, #0x10]
	ldrh r7, [r4, #0xe]
	ldrh r6, [r4, #0xc]
	lsl ip, r8, #8
	orr ip, ip, r8, asr #8
	lsl r5, r6, #8
	lsl ip, ip, #0x10
	lsl lr, r7, #8
	orr r6, r5, r6, asr #8
	lsl r3, r0, #8
	orr r5, lr, r7, asr #8
	orr lr, r3, r0, asr #8
	lsl r0, r6, #0x10
	lsl r3, r5, #0x10
	lsr r5, r0, #0x10
	lsr r0, r3, #0x10
	lsl lr, lr, #0x10
	orr r0, r0, r5, lsl #16
	lsr ip, ip, #0x10
	lsr r3, lr, #0x10
	mov r6, r1
	orr r1, r3, ip, lsl #16
	mov r5, r2
	bl FUN_020A52A8
	cmp r0, #0
	popeq {r4, r5, r6, r7, r8, pc}
	mov r0, r4
	mov r1, r6
	mov r2, r5
	bl FUN_020A58E8
	cmp r0, #0
	popne {r4, r5, r6, r7, r8, pc}
	mov r0, r4
	mov r1, r6
	bl FUN_020A5398
	movs r2, r0
	beq _020A5A20
	mov r0, r4
	mov r1, r6
	bl FUN_020A57FC
	pop {r4, r5, r6, r7, r8, pc}
_020A5A20:
	bl FUN_020D1FA0
	mov r0, r4
	mov r1, r6
	bl FUN_020A5398
	movs r2, r0
	popeq {r4, r5, r6, r7, r8, pc}
	mov r0, r4
	mov r1, r6
	bl FUN_020A57FC
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020A5970

	arm_func_start FUN_020A5A48
FUN_020A5A48: @ 0x020A5A48
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	mov r5, r1
	mov r6, r2
	bl FUN_020A5520
	movs r4, r0
	beq _020A5A70
	ldrb r0, [r4, #8]
	cmp r0, #2
	beq _020A5A88
_020A5A70:
	mov r0, r7
	mov r1, r5
	mov r2, r6
	mov r3, #0
	bl FUN_020A56C0
	pop {r3, r4, r5, r6, r7, pc}
_020A5A88:
	bl FUN_020D1FA0
	ldrh ip, [r5, #6]
	ldrh r3, [r5, #4]
	mov r0, r5
	lsl r1, ip, #8
	lsl r2, r3, #8
	orr r3, r2, r3, asr #8
	orr r2, r1, ip, asr #8
	lsl r1, r3, #0x10
	lsl r2, r2, #0x10
	lsr r3, r1, #0x10
	lsr r1, r2, #0x10
	orr r1, r1, r3, lsl #16
	add r1, r1, #1
	str r1, [r4, #0x24]
	ldrh lr, [r5, #0xa]
	ldrh ip, [r5, #8]
	mov r1, r4
	lsl r2, lr, #8
	lsl r3, ip, #8
	orr ip, r3, ip, asr #8
	orr r3, r2, lr, asr #8
	lsl r2, ip, #0x10
	lsl r3, r3, #0x10
	lsr ip, r2, #0x10
	lsr r2, r3, #0x10
	orr r2, r2, ip, lsl #16
	str r2, [r4, #0x30]
	ldrh r3, [r5, #0xe]
	lsl r2, r3, #8
	orr r2, r2, r3, asr #8
	strh r2, [r4, #0x2c]
	bl FUN_020A5584
	mov r0, r4
	mov r1, #0
	bl FUN_020A5698
	mov r0, #4
	strb r0, [r4, #8]
	ldr r0, [r4, #4]
	cmp r0, #1
	popne {r3, r4, r5, r6, r7, pc}
	mov r0, #0
	str r0, [r4, #4]
	ldr r0, [r4]
	bl FUN_020D1F34
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020A5A48

	arm_func_start FUN_020A5B40
FUN_020A5B40: @ 0x020A5B40
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r4, r0
	mov sb, r1
	mov r8, r2
	bl FUN_020A5520
	movs r5, r0
	bne _020A5B74
	mov r0, r4
	mov r1, sb
	mov r2, r8
	mov r3, #0
	bl FUN_020A56C0
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_020A5B74:
	ldrh r6, [sb, #0xa]
	ldrh r3, [sb, #8]
	ldr r2, [r5, #0x30]
	lsl r0, r6, #8
	lsl r1, r3, #8
	orr r3, r1, r3, asr #8
	orr r1, r0, r6, asr #8
	lsl r0, r3, #0x10
	lsl r1, r1, #0x10
	lsr r3, r0, #0x10
	lsr r0, r1, #0x10
	orr r1, r0, r3, lsl #16
	sub r0, r1, r2
	ldrb r6, [sb, #0xd]
	cmp r0, #0
	strgt r1, [r5, #0x30]
	ldrh r7, [sb, #6]
	ldrh r3, [sb, #4]
	ldrb r2, [r5, #8]
	lsl r0, r7, #8
	lsl r1, r3, #8
	orr r3, r1, r3, asr #8
	orr r1, r0, r7, asr #8
	lsl r0, r3, #0x10
	lsl r1, r1, #0x10
	lsr r3, r0, #0x10
	lsr r0, r1, #0x10
	cmp r2, #4
	orr r1, r0, r3, lsl #16
	bne _020A5C08
	ldr r0, [r5, #0x24]
	cmp r0, r1
	beq _020A5C08
	mov r0, r5
	mov r1, #0
	bl FUN_020A5698
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_020A5C08:
	ldrh r1, [sb, #0xe]
	lsl r0, r1, #8
	orr r0, r0, r1, asr #8
	strh r0, [r5, #0x2c]
	ldrb r0, [r5, #8]
	cmp r0, #9
	addls pc, pc, r0, lsl #2
	b _020A5E34
_020A5C28: @ jump table
	b _020A5C50 @ case 0
	b _020A5E34 @ case 1
	b _020A5C50 @ case 2
	b _020A5C68 @ case 3
	b _020A5C94 @ case 4
	b _020A5E34 @ case 5
	b _020A5E10 @ case 6
	b _020A5D9C @ case 7
	b _020A5D9C @ case 8
	b _020A5E10 @ case 9
_020A5C50:
	mov r0, r4
	mov r1, sb
	mov r2, r8
	mov r3, #0
	bl FUN_020A56C0
	b _020A5E50
_020A5C68:
	mov r0, #4
	strb r0, [r5, #8]
	ldr r0, [r5, #4]
	cmp r0, #1
	bne _020A5C8C
	mov r0, #0
	str r0, [r5, #4]
	ldr r0, [r5]
	bl FUN_020D1F34
_020A5C8C:
	cmp r8, #0
	beq _020A5E50
_020A5C94:
	ldr r0, [r5, #0x34]
	add r0, r0, #1
	str r0, [r5, #0x34]
	ldr r1, [r5, #0x3c]
	ldr r0, [r5, #0x44]
	sub r0, r1, r0
	cmp r8, r0
	movhi r7, #0
	movhi r8, r0
	movls r7, #1
	cmp r8, #0
	beq _020A5D30
	bl FUN_020D3A38
	ldrb r1, [sb, #0xc]
	ldr ip, [r5, #0x40]
	ldr r3, [r5, #0x44]
	and r2, r1, #0xf0
	asr r1, r2, #1
	add r1, r2, r1, lsr #30
	mov r4, r0
	mov r2, r8
	add r0, sb, r1, asr #2
	add r1, ip, r3
	bl FUN_020D4A50
	ldr r1, [r5, #0x44]
	mov r0, r4
	add r1, r1, r8
	str r1, [r5, #0x44]
	ldr r1, [r5, #0x24]
	add r1, r1, r8
	str r1, [r5, #0x24]
	bl FUN_020D3A4C
	ldr r0, [r5, #4]
	cmp r0, #2
	bne _020A5D30
	mov r0, #0
	str r0, [r5, #4]
	ldr r0, [r5]
	bl FUN_020D1F34
_020A5D30:
	cmp r7, #0
	beq _020A5D84
	tst r6, #1
	beq _020A5D84
	mov r0, #6
	strb r0, [r5, #8]
	ldr r1, [r5, #0x24]
	mov r0, r5
	add r2, r1, #1
	mov r1, #0
	str r2, [r5, #0x24]
	bl FUN_020A56AC
	cmp r8, #0
	ldreq r0, [r5, #4]
	cmpeq r0, #2
	bne _020A5E50
	mov r0, #0
	str r0, [r5, #4]
	ldr r0, [r5]
	bl FUN_020D1F34
	b _020A5E50
_020A5D84:
	cmp r8, #0
	beq _020A5E50
	mov r0, r5
	mov r1, #0
	bl FUN_020A5698
	b _020A5E50
_020A5D9C:
	tst r6, #1
	beq _020A5DE4
	ldr r1, [r5, #0x24]
	add r0, r8, #1
	add r2, r1, r0
	mov r0, r5
	mov r1, #0
	str r2, [r5, #0x24]
	bl FUN_020A5698
	mov r1, #0
	strb r1, [r5, #8]
	ldr r0, [r5, #4]
	cmp r0, #2
	bne _020A5E50
	str r1, [r5, #4]
	ldr r0, [r5]
	bl FUN_020D1F34
	b _020A5E50
_020A5DE4:
	cmp r8, #0
	beq _020A5E04
	ldr r1, [r5, #0x24]
	mov r0, r5
	add r2, r1, r8
	mov r1, #0
	str r2, [r5, #0x24]
	bl FUN_020A5698
_020A5E04:
	mov r0, #8
	strb r0, [r5, #8]
	b _020A5E50
_020A5E10:
	mov r1, #0
	strb r1, [r5, #8]
	ldr r0, [r5, #4]
	cmp r0, #2
	bne _020A5E50
	str r1, [r5, #4]
	ldr r0, [r5]
	bl FUN_020D1F34
	b _020A5E50
_020A5E34:
	tst r6, #1
	ldrne r0, [r5, #0x24]
	mov r1, #0
	addne r0, r0, #1
	strne r0, [r5, #0x24]
	mov r0, r5
	bl FUN_020A5698
_020A5E50:
	bl FUN_020D1FA0
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	arm_func_end FUN_020A5B40

	arm_func_start FUN_020A5E58
FUN_020A5E58: @ 0x020A5E58
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	mov r6, r1
	mov r5, r2
	bl FUN_020A5520
	movs r4, r0
	popeq {r3, r4, r5, r6, r7, pc}
	ldrb r1, [r4, #8]
	cmp r1, #4
	beq _020A5EEC
	cmp r1, #7
	beq _020A5E94
	cmp r1, #8
	beq _020A5EB4
	b _020A5F0C
_020A5E94:
	ldr r2, [r4, #0x24]
	mov r1, #0
	add r2, r2, #1
	str r2, [r4, #0x24]
	bl FUN_020A5698
	mov r0, #9
	strb r0, [r4, #8]
	pop {r3, r4, r5, r6, r7, pc}
_020A5EB4:
	ldr r2, [r4, #0x24]
	mov r1, #0
	add r2, r2, #1
	str r2, [r4, #0x24]
	bl FUN_020A5698
	mov r1, #0
	strb r1, [r4, #8]
	ldr r0, [r4, #4]
	cmp r0, #2
	popne {r3, r4, r5, r6, r7, pc}
	str r1, [r4, #4]
	ldr r0, [r4]
	bl FUN_020D1F34
	pop {r3, r4, r5, r6, r7, pc}
_020A5EEC:
	ldr r2, [r4, #0x24]
	mov r1, #0
	add r2, r2, #1
	str r2, [r4, #0x24]
	bl FUN_020A56AC
	mov r0, #6
	strb r0, [r4, #8]
	pop {r3, r4, r5, r6, r7, pc}
_020A5F0C:
	mov r0, r7
	mov r1, r6
	mov r2, r5
	mov r3, #0
	bl FUN_020A56C0
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020A5E58

	arm_func_start FUN_020A5F24
FUN_020A5F24: @ 0x020A5F24
	push {r4, lr}
	bl FUN_020A5520
	movs r4, r0
	popeq {r4, pc}
	bl FUN_020D1FA0
	mov r1, #0
	strb r1, [r4, #8]
	ldr r0, [r4, #4]
	sub r0, r0, #1
	cmp r0, #1
	pophi {r4, pc}
	str r1, [r4, #4]
	ldr r0, [r4]
	bl FUN_020D1F34
	pop {r4, pc}
	arm_func_end FUN_020A5F24

	arm_func_start FUN_020A5F60
FUN_020A5F60: @ 0x020A5F60
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	mov r4, r2
	mov r0, r5
	mov r1, r4
	mov r2, r6
	mov r3, #6
	bl FUN_020A3DB4
	cmp r0, #0
	popne {r4, r5, r6, pc}
	ldrb r0, [r5, #0xc]
	ldrb r2, [r5, #0xd]
	and r1, r0, #0xf0
	asr r0, r1, #1
	add r0, r1, r0, lsr #30
	and r1, r2, #0x17
	cmp r1, #0x10
	sub r4, r4, r0, asr #2
	bgt _020A5FD8
	cmp r1, #0x10
	bge _020A6030
	cmp r1, #2
	bgt _020A6058
	cmp r1, #1
	blt _020A6058
	beq _020A6044
	cmp r1, #2
	beq _020A5FF8
	b _020A6058
_020A5FD8:
	cmp r1, #0x12
	bgt _020A6058
	cmp r1, #0x11
	blt _020A6058
	beq _020A6030
	cmp r1, #0x12
	beq _020A6014
	b _020A6058
_020A5FF8:
	tst r2, #0x28
	popne {r4, r5, r6, pc}
	mov r0, r6
	mov r1, r5
	mov r2, r4
	bl FUN_020A5970
	pop {r4, r5, r6, pc}
_020A6014:
	tst r2, #0x28
	popne {r4, r5, r6, pc}
	mov r0, r6
	mov r1, r5
	mov r2, r4
	bl FUN_020A5A48
	pop {r4, r5, r6, pc}
_020A6030:
	mov r0, r6
	mov r1, r5
	mov r2, r4
	bl FUN_020A5B40
	pop {r4, r5, r6, pc}
_020A6044:
	mov r0, r6
	mov r1, r5
	mov r2, r4
	bl FUN_020A5E58
	pop {r4, r5, r6, pc}
_020A6058:
	tst r2, #4
	mov r0, r6
	mov r1, r5
	beq _020A6070
	bl FUN_020A5F24
	pop {r4, r5, r6, pc}
_020A6070:
	mov r2, r4
	mov r3, #0
	bl FUN_020A56C0
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020A5F60

	arm_func_start FUN_020A6080
FUN_020A6080: @ 0x020A6080
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r7, r1
	ldrh r1, [r7, #6]
	mov r8, r0
	mov r6, r2
	cmp r1, #0
	beq _020A60B8
	mov r0, r7
	mov r1, r6
	mov r2, r8
	mov r3, #0x11
	bl FUN_020A3DB4
	cmp r0, #0
	popne {r3, r4, r5, r6, r7, r8, sb, pc}
_020A60B8:
	bl FUN_020D3A38
	ldr r1, _020A6288 @ =0x021E16A0
	mov r5, r0
	ldr r1, [r1, #8]
	cmp r1, #0
	beq _020A627C
	mvn ip, #0
_020A60D4:
	ldr r4, [r1, #0xa4]
	cmp r4, #0
	ldrne r0, [r4]
	cmpne r0, #0
	beq _020A6270
	ldrb r0, [r4, #8]
	cmp r0, #0xa
	bne _020A6270
	ldrh r3, [r7, #2]
	ldrh r2, [r4, #0xa]
	lsl r0, r3, #8
	orr r0, r0, r3, asr #8
	lsl r0, r0, #0x10
	cmp r2, r0, lsr #16
	bne _020A6270
	ldrh r3, [r4, #0x18]
	cmp r3, #0
	beq _020A6134
	ldrh r2, [r7]
	lsl r0, r2, #8
	orr r0, r0, r2, asr #8
	lsl r0, r0, #0x10
	cmp r3, r0, lsr #16
	bne _020A6270
_020A6134:
	ldr r0, [r4, #0x1c]
	cmp r0, #0
	cmpne r0, ip
	beq _020A6178
	ldrh sb, [r8, #0xe]
	ldrh lr, [r8, #0xc]
	lsl r2, sb, #8
	lsl r3, lr, #8
	orr lr, r3, lr, asr #8
	orr r3, r2, sb, asr #8
	lsl r2, lr, #0x10
	lsl r3, r3, #0x10
	lsr lr, r2, #0x10
	lsr r2, r3, #0x10
	orr r2, r2, lr, lsl #16
	cmp r0, r2
	bne _020A6270
_020A6178:
	ldrh r3, [r8, #0x12]
	ldrh r2, [r8, #0x10]
	lsl r0, r3, #8
	lsl r1, r2, #8
	orr r2, r1, r2, asr #8
	orr r1, r0, r3, asr #8
	lsl r0, r2, #0x10
	lsl r1, r1, #0x10
	lsr r2, r0, #0x10
	lsr r0, r1, #0x10
	orr r0, r0, r2, lsl #16
	str r0, [r4, #0x14]
	ldr r0, [r4, #0x1c]
	cmp r0, #0
	bne _020A61F4
	ldrh r3, [r8, #0xe]
	ldrh r2, [r8, #0xc]
	lsl r0, r3, #8
	lsl r1, r2, #8
	orr r2, r1, r2, asr #8
	orr r1, r0, r3, asr #8
	lsl r0, r2, #0x10
	lsl r1, r1, #0x10
	lsr r2, r0, #0x10
	lsr r0, r1, #0x10
	orr r0, r0, r2, lsl #16
	str r0, [r4, #0x1c]
	ldrh r1, [r7]
	lsl r0, r1, #8
	orr r0, r0, r1, asr #8
	strh r0, [r4, #0x18]
_020A61F4:
	ldr r0, [r4, #0x44]
	cmp r0, #0
	bne _020A627C
	ldr r1, [r4, #0x3c]
	sub r0, r6, #8
	cmp r0, r1
	strhi r1, [r4, #0x44]
	strls r0, [r4, #0x44]
	ldr r1, [r4, #0x40]
	ldr r2, [r4, #0x44]
	add r0, r7, #8
	bl FUN_020D4A50
	ldr r0, [r4, #4]
	cmp r0, #3
	bne _020A6244
	mov r0, #0
	str r0, [r4, #4]
	ldr r0, [r4]
	bl FUN_020D1F34
	b _020A627C
_020A6244:
	ldr r3, [r4, #0x38]
	cmp r3, #0
	beq _020A627C
	ldr r0, [r4, #0x40]
	ldr r1, [r4, #0x44]
	mov r2, r4
	blx r3
	cmp r0, #0
	movne r0, #0
	strne r0, [r4, #0x44]
	b _020A627C
_020A6270:
	ldr r1, [r1, #0x68]
	cmp r1, #0
	bne _020A60D4
_020A627C:
	mov r0, r5
	bl FUN_020D3A4C
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0
_020A6288: .4byte 0x021E16A0
	arm_func_end FUN_020A6080

	arm_func_start FUN_020A628C
FUN_020A628C: @ 0x020A628C
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0xc
	mov r6, #0
	mov sl, r0
	str r6, [r1]
	ldrh r3, [sl, #6]
	str r1, [sp]
	ldr r2, _020A6548 @ =0x00003FFF
	lsl r1, r3, #8
	orr r1, r1, r3, asr #8
	lsl r1, r1, #0x10
	lsr r1, r1, #0x10
	str r1, [sp, #8]
	tst r1, r2
	addeq sp, sp, #0xc
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldrh r3, [sl, #0xe]
	ldrh r2, [sl, #0xc]
	ldrb r4, [sl]
	lsl r0, r3, #8
	lsl r1, r2, #8
	orr r2, r1, r2, asr #8
	orr r1, r0, r3, asr #8
	lsl r3, r4, #0x1c
	lsl r0, r2, #0x10
	lsl r1, r1, #0x10
	lsr r2, r0, #0x10
	lsr r1, r1, #0x10
	ldrh r4, [sl, #4]
	ldr r7, _020A654C @ =0x021D4948
	mov r0, r6
	lsr r5, r3, #0x1a
	orr sb, r1, r2, lsl #16
_020A6310:
	ldrh r2, [r7, #4]
	cmp r2, #0
	beq _020A6330
	ldr r1, [r7]
	cmp r1, sb
	ldrheq r1, [r7, #6]
	cmpeq r1, r4
	beq _020A634C
_020A6330:
	add r0, r0, #1
	cmp r2, #0
	cmpeq r6, #0
	moveq r6, r7
	cmp r0, #8
	add r7, r7, #0x38
	blo _020A6310
_020A634C:
	ldrh r2, [sl, #2]
	cmp r0, #8
	ldr r1, _020A6550 @ =0x00001FFF
	lsl r0, r2, #8
	orr r0, r0, r2, asr #8
	lsl r0, r0, #0x10
	rsb r0, r5, r0, lsr #16
	str r0, [sp, #4]
	ldr r0, [sp, #8]
	and fp, r0, r1
	ldr r0, [sp, #4]
	add r8, r0, fp, lsl #3
	bne _020A6408
	cmp r6, #0
	beq _020A6390
	cmp r8, #0x1000
	bls _020A639C
_020A6390:
	add sp, sp, #0xc
	mov r0, #0
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020A639C:
	ldr r1, _020A6554 @ =0x021D4620
	add r0, r5, #0xe
	ldr r1, [r1, #0x14]
	add r0, r0, #0x1000
	mov r7, r6
	blx r1
	cmp r0, #0
	str r0, [r6, #0x34]
	addeq sp, sp, #0xc
	mov r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	str sb, [r6]
	strh r4, [r6, #6]
	strh r0, [r6, #8]
	bl FUN_020D34B0
	lsr r0, r0, #0x10
	orr r0, r0, r1, lsl #16
	str r0, [r6, #0x2c]
	ldr r1, [r6, #0x34]
	mov r0, sl
	add r1, r1, #0xe
	add r1, r1, r5
	str r1, [r6, #0x30]
	ldr r1, [r6, #0x34]
	mov r2, r5
	add r1, r1, #0xe
	bl FUN_020D4A50
_020A6408:
	ldrh r0, [r7, #4]
	cmp r0, #8
	beq _020A641C
	cmp r8, #0x1000
	bls _020A6440
_020A641C:
	ldr r1, _020A6554 @ =0x021D4620
	mov r0, #0
	strh r0, [r7, #4]
	ldr r0, [r7, #0x34]
	ldr r1, [r1, #0x40]
	blx r1
	add sp, sp, #0xc
	mov r0, #0
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020A6440:
	ldr r0, [sp, #4]
	ldr r2, [sp, #4]
	add r1, r0, #7
	ldr r0, [sp, #8]
	add r3, fp, r1, lsr #3
	tst r0, #0x2000
	strheq r8, [r7, #0xa]
	strheq r3, [r7, #8]
	ldrh r1, [r7, #4]
	add r0, sl, r5
	add r1, r7, r1, lsl #1
	strh fp, [r1, #0xc]
	ldrh r1, [r7, #4]
	add r1, r7, r1, lsl #1
	strh r3, [r1, #0x1c]
	ldrh r1, [r7, #4]
	add r1, r1, #1
	strh r1, [r7, #4]
	ldr r1, [r7, #0x30]
	add r1, r1, fp, lsl #3
	bl FUN_020D4A50
	ldrh r4, [r7, #8]
	cmp r4, #0
	addeq sp, sp, #0xc
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldrh r3, [r7, #4]
	mov r6, #0
	mov r5, r6
	cmp r3, #0
	bls _020A64F0
	mov r0, r6
_020A64C0:
	add r2, r7, r5, lsl #1
	ldrh r1, [r2, #0xc]
	cmp r1, r6
	bhi _020A64E4
	ldrh r1, [r2, #0x1c]
	cmp r6, r1
	movlo r6, r1
	movlo r5, r0
	blo _020A64E8
_020A64E4:
	add r5, r5, #1
_020A64E8:
	cmp r5, r3
	blo _020A64C0
_020A64F0:
	cmp r6, r4
	addlo sp, sp, #0xc
	movlo r0, #0
	poplo {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r4, [r7, #0x34]
	ldrh r3, [r7, #0xa]
	ldrb r0, [r4, #0xe]
	mov r2, #0
	mov r1, #1
	lsl r0, r0, #0x1c
	add r0, r3, r0, lsr #26
	lsl r0, r0, #0x10
	lsr r3, r0, #0x10
	lsl r0, r3, #8
	orr r0, r0, r3, asr #8
	strh r0, [r4, #0x10]
	ldr r0, [sp]
	strh r2, [r7, #4]
	str r1, [r0]
	add r0, r4, #0xe
	add sp, sp, #0xc
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020A6548: .4byte 0x00003FFF
_020A654C: .4byte 0x021D4948
_020A6550: .4byte 0x00001FFF
_020A6554: .4byte 0x021D4620
	arm_func_end FUN_020A628C

	arm_func_start FUN_020A6558
FUN_020A6558: @ 0x020A6558
	push {r3, r4, r5, r6, r7, lr}
	mov r4, r0
	ldrh r7, [r4, #0xe]
	ldrh r6, [r4, #0xc]
	ldrh lr, [r4, #0x12]
	ldrh r5, [r4, #0x10]
	lsl r2, r6, #8
	lsl r3, lr, #8
	lsl ip, r5, #8
	lsl r0, r7, #8
	orr r5, ip, r5, asr #8
	orr lr, r3, lr, asr #8
	orr r3, r2, r6, asr #8
	orr ip, r0, r7, asr #8
	lsl r0, r5, #0x10
	lsl r2, lr, #0x10
	lsl r3, r3, #0x10
	lsl ip, ip, #0x10
	lsr lr, r0, #0x10
	lsr r0, r2, #0x10
	lsr r3, r3, #0x10
	lsr r2, ip, #0x10
	orr r0, r0, lr, lsl #16
	orr r2, r2, r3, lsl #16
	mov r5, r1
	cmp r0, r2
	beq _020A667C
	bl FUN_020A3EB8
	cmp r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	ldrh r1, [r4, #2]
	lsl r0, r1, #8
	orr r0, r0, r1, asr #8
	lsl r0, r0, #0x10
	cmp r5, r0, lsr #16
	poplo {r3, r4, r5, r6, r7, pc}
	ldrb r1, [r4]
	mov r0, r4
	lsl r1, r1, #0x1c
	lsr r1, r1, #0x1a
	bl FUN_020A3D98
	ldr r1, _020A6714 @ =0x0000FFFF
	cmp r0, r1
	popne {r3, r4, r5, r6, r7, pc}
	ldrh ip, [r4, #0x12]
	ldrh r3, [r4, #0x10]
	ldr r2, _020A6718 @ =0x021D4620
	lsl r0, ip, #8
	lsl r1, r3, #8
	orr r3, r1, r3, asr #8
	orr r1, r0, ip, asr #8
	lsl r0, r3, #0x10
	lsl r1, r1, #0x10
	lsr r3, r0, #0x10
	lsr r0, r1, #0x10
	ldr r1, [r2, #0x50]
	orr r0, r0, r3, lsl #16
	cmp r1, r0
	bne _020A667C
	ldrh ip, [r4, #0xe]
	ldrh r3, [r4, #0xc]
	sub r0, r4, #8
	lsl r1, ip, #8
	lsl r2, r3, #8
	orr r3, r2, r3, asr #8
	orr r2, r1, ip, asr #8
	lsl r1, r3, #0x10
	lsl r2, r2, #0x10
	lsr r3, r1, #0x10
	lsr r1, r2, #0x10
	orr r1, r1, r3, lsl #16
	mov r2, #1
	bl FUN_020A454C
_020A667C:
	add r1, sp, #0
	mov r0, r4
	bl FUN_020A628C
	movs r4, r0
	popeq {r3, r4, r5, r6, r7, pc}
	ldrh r2, [r4, #2]
	ldrb r3, [r4]
	ldrb ip, [r4, #9]
	lsl r1, r2, #8
	orr r1, r1, r2, asr #8
	lsl r1, r1, #0x10
	lsl r3, r3, #0x1c
	lsr r2, r1, #0x10
	cmp ip, #0x11
	add r1, r4, r3, lsr #26
	sub r2, r2, r3, lsr #26
	bne _020A66C8
	bl FUN_020A6080
	b _020A66F4
_020A66C8:
	ldr r3, _020A6718 @ =0x021D4620
	ldr r3, [r3, #0x50]
	cmp r3, #0
	beq _020A66F4
	cmp ip, #1
	bne _020A66E8
	bl FUN_020A52C8
	b _020A66F4
_020A66E8:
	cmp ip, #6
	bne _020A66F4
	bl FUN_020A5F60
_020A66F4:
	ldr r0, [sp]
	cmp r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	ldr r1, _020A6718 @ =0x021D4620
	sub r0, r4, #0xe
	ldr r1, [r1, #0x40]
	blx r1
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020A6714: .4byte 0x0000FFFF
_020A6718: .4byte 0x021D4620
	arm_func_end FUN_020A6558

	arm_func_start FUN_020A671C
FUN_020A671C: @ 0x020A671C
	push {r3, r4, r5, lr}
	ldr r5, _020A6788 @ =0x00000806
	add r4, sp, #0
_020A6728:
	mov r0, r4
	bl FUN_020A420C
	ldr r3, [sp]
	cmp r3, #0x22
	bls _020A6780
	ldrh r2, [r0, #0xc]
	lsl r1, r2, #8
	orr r1, r1, r2, asr #8
	lsl r1, r1, #0x10
	lsr r1, r1, #0x10
	cmp r1, #0x800
	beq _020A6764
	cmp r1, r5
	beq _020A6774
	b _020A6780
_020A6764:
	add r0, r0, #0xe
	sub r1, r3, #0xe
	bl FUN_020A6558
	b _020A6780
_020A6774:
	add r0, r0, #0xe
	sub r1, r3, #0xe
	bl FUN_020A4F80
_020A6780:
	bl FUN_020A42CC
	b _020A6728
	.align 2, 0
_020A6788: .4byte 0x00000806
	arm_func_end FUN_020A671C

	arm_func_start FUN_020A678C
FUN_020A678C: @ 0x020A678C
	push {r4, r5, r6, r7, r8, lr}
	ldr r0, _020A6828 @ =0x021E16A0
	ldr r2, _020A682C @ =0x021D4620
	ldr r0, [r0, #8]
	ldr r1, _020A6830 @ =0x00001388
	mov r4, #0x400
	mov r3, #1
	mov r5, #0
_020A67AC:
	ldrh ip, [r2, #8]
	mov r6, r5
	add ip, ip, #1
	strh ip, [r2, #8]
	ldrh ip, [r2, #8]
	cmp ip, #0x400
	blo _020A67D0
	cmp ip, r1
	blo _020A67D4
_020A67D0:
	strh r4, [r2, #8]
_020A67D4:
	mov r7, r0
	cmp r0, #0
	beq _020A6814
	ldrh r8, [r2, #8]
_020A67E4:
	ldr lr, [r7, #0xa4]
	cmp lr, #0
	ldrne ip, [lr]
	cmpne ip, #0
	beq _020A6808
	ldrh ip, [lr, #0xa]
	cmp ip, r8
	moveq r6, r3
	beq _020A6814
_020A6808:
	ldr r7, [r7, #0x68]
	cmp r7, #0
	bne _020A67E4
_020A6814:
	cmp r6, #0
	bne _020A67AC
	ldr r0, _020A682C @ =0x021D4620
	ldrh r0, [r0, #8]
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0
_020A6828: .4byte 0x021E16A0
_020A682C: .4byte 0x021D4620
_020A6830: .4byte 0x00001388
	arm_func_end FUN_020A678C

	arm_func_start FUN_020A6834
FUN_020A6834: @ 0x020A6834
	push {r3, lr}
	ldr r1, _020A6874 @ =0x021D4620
	ldr r3, [r1, #0x70]
	ldr r2, [r1, #0x68]
	ldr r0, [r1, #0x6c]
	umull lr, ip, r3, r2
	mla ip, r3, r0, ip
	ldr r0, [r1, #0x74]
	ldr r3, [r1, #0x78]
	mla ip, r0, r2, ip
	ldr r0, [r1, #0x7c]
	adds r2, r3, lr
	str r2, [r1, #0x68]
	adc r0, r0, ip
	str r0, [r1, #0x6c]
	pop {r3, pc}
	.align 2, 0
_020A6874: .4byte 0x021D4620
	arm_func_end FUN_020A6834

	arm_func_start FUN_020A6878
FUN_020A6878: @ 0x020A6878
	ldr r1, _020A6888 @ =0x021E16A0
	ldr r1, [r1, #4]
	str r0, [r1, #0xa4]
	bx lr
	.align 2, 0
_020A6888: .4byte 0x021E16A0
	arm_func_end FUN_020A6878

	arm_func_start FUN_020A688C
FUN_020A688C: @ 0x020A688C
	ldr r0, _020A68A0 @ =0x021E16A0
	mov r1, #0
	ldr r0, [r0, #4]
	str r1, [r0, #0xa4]
	bx lr
	.align 2, 0
_020A68A0: .4byte 0x021E16A0
	arm_func_end FUN_020A688C

	arm_func_start FUN_020A68A4
FUN_020A68A4: @ 0x020A68A4
	ldr r0, _020A68CC @ =0x021E16A0
	ldr r0, [r0, #4]
	ldr r1, [r0, #0xa4]
	cmp r1, #0
	bxeq lr
	mov r0, #0xa
	strb r0, [r1, #8]
	mov r0, #0
	str r0, [r1, #0x44]
	bx lr
	.align 2, 0
_020A68CC: .4byte 0x021E16A0
	arm_func_end FUN_020A68A4

	arm_func_start FUN_020A68D0
FUN_020A68D0: @ 0x020A68D0
	push {r4, lr}
	ldr r3, _020A6924 @ =0x021E16A0
	ldr r3, [r3, #4]
	ldr r4, [r3, #0xa4]
	cmp r4, #0
	popeq {r4, pc}
	ldr r3, _020A6928 @ =0x7F000001
	cmp r2, r3
	ldreq r2, _020A692C @ =0x021D4620
	ldreq r2, [r2, #0x50]
	cmp r0, #0
	strh r1, [r4, #0x1a]
	ldrh r1, [r4, #0x1a]
	strh r1, [r4, #0x18]
	str r2, [r4, #0x20]
	str r2, [r4, #0x1c]
	strhne r0, [r4, #0xa]
	popne {r4, pc}
	bl FUN_020A678C
	strh r0, [r4, #0xa]
	pop {r4, pc}
	.align 2, 0
_020A6924: .4byte 0x021E16A0
_020A6928: .4byte 0x7F000001
_020A692C: .4byte 0x021D4620
	arm_func_end FUN_020A68D0

	arm_func_start FUN_020A6930
FUN_020A6930: @ 0x020A6930
	ldr r0, _020A6960 @ =0x021E16A0
	ldr r0, [r0, #4]
	ldr r1, [r0, #0xa4]
	cmp r1, #0
	bxeq lr
	str r0, [r1]
	mov r0, #0
	strb r0, [r1, #8]
	str r0, [r1, #0x44]
	str r0, [r1, #0x60]
	str r0, [r1, #0x38]
	bx lr
	.align 2, 0
_020A6960: .4byte 0x021E16A0
	arm_func_end FUN_020A6930

	arm_func_start FUN_020A6964
FUN_020A6964: @ 0x020A6964
	ldr r0, _020A6980 @ =0x021E16A0
	ldr r0, [r0, #4]
	ldr r1, [r0, #0xa4]
	cmp r1, #0
	movne r0, #0
	strne r0, [r1]
	bx lr
	.align 2, 0
_020A6980: .4byte 0x021E16A0
	arm_func_end FUN_020A6964

	arm_func_start FUN_020A6984
FUN_020A6984: @ 0x020A6984
	ldr r1, _020A6998 @ =0x021E16A0
	ldr r1, [r1, #4]
	ldr r1, [r1, #0xa4]
	str r1, [r0, #0xa4]
	bx lr
	.align 2, 0
_020A6998: .4byte 0x021E16A0
	arm_func_end FUN_020A6984

	arm_func_start FUN_020A699C
FUN_020A699C: @ 0x020A699C
	push {r3, r4, r5, lr}
	mov r5, r0
	bl FUN_020A6834
	str r0, [r5, #0x28]
	str r0, [r5, #0x30]
	mov r0, #1
	strb r0, [r5, #8]
	bl FUN_020D3A38
	mov r4, r0
	mov r1, #1
	mov r0, #0
	str r1, [r5, #4]
	bl FUN_020D1E7C
	mov r0, r4
	bl FUN_020D3A4C
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020A699C

	arm_func_start FUN_020A69DC
FUN_020A69DC: @ 0x020A69DC
	ldr r1, _020A69F4 @ =0x021E16A0
	ldr r1, [r1, #4]
	ldr r1, [r1, #0xa4]
	cmp r1, #0
	strne r0, [r1, #0x38]
	bx lr
	.align 2, 0
_020A69F4: .4byte 0x021E16A0
	arm_func_end FUN_020A69DC

	arm_func_start FUN_020A69F8
FUN_020A69F8: @ 0x020A69F8
	push {r3, lr}
	ldr r0, _020A6A2C @ =0x021E16A0
	ldr r0, [r0, #4]
	ldr r0, [r0, #0xa4]
	cmp r0, #0
	popeq {r3, pc}
	ldrb r1, [r0, #9]
	cmp r1, #0
	beq _020A6A24
	bl FUN_020AB2E4
	pop {r3, pc}
_020A6A24:
	bl FUN_020A699C
	pop {r3, pc}
	.align 2, 0
_020A6A2C: .4byte 0x021E16A0
	arm_func_end FUN_020A69F8

	arm_func_start FUN_020A6A30
FUN_020A6A30: @ 0x020A6A30
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sl, r0
	bl FUN_020A6834
	mov r6, #2
	ldr r4, _020A6AE0 @ =0x021D4620
	mov r8, r0
	mov r7, #0
	mov r5, #1
	mov fp, r6
_020A6A54:
	str r8, [sl, #0x28]
	strb r6, [sl, #8]
	bl FUN_020D34B0
	lsr r0, r0, #0x10
	orr r0, r0, r1, lsl #16
	str r0, [sl, #0x10]
	mov r0, sl
	mov r1, fp
	mov r2, #0x18
	bl FUN_020A5624
	bl FUN_020D3A38
	mov sb, r0
	ldrb r0, [sl, #8]
	cmp r0, #2
	bne _020A6AA8
	ldr r0, [r4, #0x50]
	cmp r0, #0
	beq _020A6AA8
	mov r0, #0
	str r5, [sl, #4]
	bl FUN_020D1E7C
_020A6AA8:
	mov r0, sb
	bl FUN_020D3A4C
	ldrb r0, [sl, #8]
	cmp r0, #4
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, [r4, #0x50]
	cmp r0, #0
	beq _020A6AD8
	add r7, r7, #1
	cmp r7, #3
	blo _020A6A54
_020A6AD8:
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020A6AE0: .4byte 0x021D4620
	arm_func_end FUN_020A6A30

	arm_func_start FUN_020A6AE4
FUN_020A6AE4: @ 0x020A6AE4
	push {r3, lr}
	ldr r0, _020A6B20 @ =0x021E16A0
	ldr r0, [r0, #4]
	ldr r0, [r0, #0xa4]
	cmp r0, #0
	beq _020A6B18
	ldrb r1, [r0, #9]
	cmp r1, #0
	beq _020A6B10
	bl FUN_020AB420
	pop {r3, pc}
_020A6B10:
	bl FUN_020A6A30
	pop {r3, pc}
_020A6B18:
	mov r0, #1
	pop {r3, pc}
	.align 2, 0
_020A6B20: .4byte 0x021E16A0
	arm_func_end FUN_020A6AE4

	arm_func_start FUN_020A6B24
FUN_020A6B24: @ 0x020A6B24
	ldr r2, _020A6B70 @ =0x021E16A0
	ldr r2, [r2, #4]
	ldr r3, [r2, #0xa4]
	cmp r3, #0
	beq _020A6B68
	ldrb r2, [r3, #8]
	cmp r2, #4
	cmpne r2, #0xa
	bne _020A6B68
	cmp r0, #0
	ldrhne r2, [r3, #0x18]
	strhne r2, [r0]
	cmp r1, #0
	ldrne r0, [r3, #0x14]
	strne r0, [r1]
	ldr r0, [r3, #0x1c]
	bx lr
_020A6B68:
	mov r0, #0
	bx lr
	.align 2, 0
_020A6B70: .4byte 0x021E16A0
	arm_func_end FUN_020A6B24

	arm_func_start FUN_020A6B74
FUN_020A6B74: @ 0x020A6B74
	push {r4, lr}
	mov r4, r0
	bl FUN_020D1FA0
	ldrb r1, [r4, #8]
	add r0, r1, #0xfd
	and r0, r0, #0xff
	cmp r0, #1
	bhi _020A6BAC
	mov r0, r4
	mov r1, #0x19
	bl FUN_020A56AC
	mov r0, #7
	strb r0, [r4, #8]
	pop {r4, pc}
_020A6BAC:
	cmp r1, #0
	popeq {r4, pc}
	mov r0, r4
	mov r1, #0x1a
	bl FUN_020A5698
	pop {r4, pc}
	arm_func_end FUN_020A6B74

	arm_func_start FUN_020A6BC4
FUN_020A6BC4: @ 0x020A6BC4
	push {r4, lr}
	ldr r0, _020A6BFC @ =0x021E16A0
	ldr r0, [r0, #4]
	ldr r4, [r0, #0xa4]
	cmp r4, #0
	popeq {r4, pc}
	ldrb r0, [r4, #9]
	cmp r0, #0
	beq _020A6BF0
	mov r0, r4
	bl FUN_020AB890
_020A6BF0:
	mov r0, r4
	bl FUN_020A6B74
	pop {r4, pc}
	.align 2, 0
_020A6BFC: .4byte 0x021E16A0
	arm_func_end FUN_020A6BC4

	arm_func_start FUN_020A6C00
FUN_020A6C00: @ 0x020A6C00
	push {r4, r5, r6, lr}
	ldr r0, _020A6C80 @ =0x021E16A0
	ldr r0, [r0, #4]
	ldr r4, [r0, #0xa4]
	cmp r4, #0
	popeq {r4, r5, r6, pc}
	ldrb r0, [r4, #9]
	cmp r0, #0
	beq _020A6C2C
	mov r0, r4
	bl FUN_020AB910
_020A6C2C:
	bl FUN_020D34B0
	lsr r6, r0, #0x10
	orr r6, r6, r1, lsl #16
	ldr r5, _020A6C84 @ =0x021D4620
	b _020A6C44
_020A6C40:
	bl FUN_020A3978
_020A6C44:
	ldr r0, [r5, #0x48]
	blx r0
	cmp r0, #0
	ldrbne r0, [r4, #8]
	cmpne r0, #0
	beq _020A6C74
	bl FUN_020D34B0
	lsr r0, r0, #0x10
	orr r0, r0, r1, lsl #16
	sub r0, r0, r6
	cmp r0, #0x27
	blt _020A6C40
_020A6C74:
	mov r0, #0
	strb r0, [r4, #8]
	pop {r4, r5, r6, pc}
	.align 2, 0
_020A6C80: .4byte 0x021E16A0
_020A6C84: .4byte 0x021D4620
	arm_func_end FUN_020A6C00

	arm_func_start FUN_020A6C88
FUN_020A6C88: @ 0x020A6C88
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r8, r1
	mov sb, r0
	bl FUN_020D3A38
	ldr r6, [r8, #0x44]
	mov r7, r0
	cmp r6, #0
	bne _020A6CC8
	mov r5, #3
	mov r4, #0
_020A6CB0:
	mov r0, r4
	str r5, [r8, #4]
	bl FUN_020D1E7C
	ldr r6, [r8, #0x44]
	cmp r6, #0
	beq _020A6CB0
_020A6CC8:
	mov r0, r7
	bl FUN_020D3A4C
	str r6, [sb]
	ldr r0, [r8, #0x40]
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	arm_func_end FUN_020A6C88

	arm_func_start FUN_020A6CDC
FUN_020A6CDC: @ 0x020A6CDC
	push {r4, r5, r6, r7, r8, lr}
	mov r4, r1
	ldr r1, [r4, #0x44]
	mov r5, r0
	cmp r1, #0
	ldrbeq r0, [r4, #8]
	cmpeq r0, #4
	bne _020A6D3C
	bl FUN_020D3A38
	mov r8, r0
	mov r7, #2
	mov r6, #0
	b _020A6D1C
_020A6D10:
	mov r0, r6
	str r7, [r4, #4]
	bl FUN_020D1E7C
_020A6D1C:
	ldr r0, [r4, #0x44]
	cmp r0, #0
	ldrbeq r0, [r4, #8]
	cmpeq r0, #4
	beq _020A6D10
	mov r0, r8
	bl FUN_020D3A4C
	b _020A6D40
_020A6D3C:
	bl FUN_020D1FA0
_020A6D40:
	ldr r0, [r4, #0x44]
	str r0, [r5]
	cmp r0, #0
	ldrne r0, [r4, #0x40]
	moveq r0, #0
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020A6CDC

	arm_func_start FUN_020A6D58
FUN_020A6D58: @ 0x020A6D58
	push {r3, lr}
	ldr r1, _020A6DB8 @ =0x021E16A0
	ldr r1, [r1, #4]
	ldr r1, [r1, #0xa4]
	cmp r1, #0
	beq _020A6DA8
	ldrb r2, [r1, #8]
	add r2, r2, #0xf6
	and r2, r2, #0xff
	cmp r2, #1
	bhi _020A6D8C
	bl FUN_020A6C88
	pop {r3, pc}
_020A6D8C:
	ldrb r2, [r1, #9]
	cmp r2, #0
	beq _020A6DA0
	bl FUN_020AB474
	pop {r3, pc}
_020A6DA0:
	bl FUN_020A6CDC
	pop {r3, pc}
_020A6DA8:
	mov r1, #0
	str r1, [r0]
	mov r0, r1
	pop {r3, pc}
	.align 2, 0
_020A6DB8: .4byte 0x021E16A0
	arm_func_end FUN_020A6D58

	arm_func_start FUN_020A6DBC
FUN_020A6DBC: @ 0x020A6DBC
	push {r3, r4, r5, r6, r7, lr}
	mov r4, r1
	mov r7, r0
	bl FUN_020D3A38
	ldr r2, [r4, #0x44]
	ldr r1, [r4, #0x3c]
	mov r5, r0
	cmp r2, r1
	mov r6, #0
	bne _020A6DEC
	cmp r7, #0
	movne r6, #1
_020A6DEC:
	cmp r7, r2
	movhs r0, #0
	strhs r0, [r4, #0x44]
	bhs _020A6E10
	ldr r0, [r4, #0x40]
	sub r2, r2, r7
	add r1, r0, r7
	str r2, [r4, #0x44]
	bl FUN_020E5AF8
_020A6E10:
	mov r0, r5
	bl FUN_020D3A4C
	ldrb r0, [r4, #8]
	cmp r0, #0xa
	cmpne r0, #0xb
	popeq {r3, r4, r5, r6, r7, pc}
	ldr r0, [r4, #0x44]
	cmp r0, #0
	beq _020A6E3C
	cmp r6, #0
	popeq {r3, r4, r5, r6, r7, pc}
_020A6E3C:
	mov r0, r4
	mov r1, #0x1b
	bl FUN_020A5698
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020A6DBC

	arm_func_start FUN_020A6E4C
FUN_020A6E4C: @ 0x020A6E4C
	push {r3, lr}
	ldr r1, _020A6E80 @ =0x021E16A0
	ldr r1, [r1, #4]
	ldr r1, [r1, #0xa4]
	cmp r1, #0
	popeq {r3, pc}
	ldrb r2, [r1, #9]
	cmp r2, #0
	beq _020A6E78
	bl FUN_020AB54C
	pop {r3, pc}
_020A6E78:
	bl FUN_020A6DBC
	pop {r3, pc}
	.align 2, 0
_020A6E80: .4byte 0x021E16A0
	arm_func_end FUN_020A6E4C

	arm_func_start FUN_020A6E84
FUN_020A6E84: @ 0x020A6E84
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov r8, r2
	ldr r6, [r8, #0x34]
	movs fp, r3
	mov sl, r0
	movne r5, #1
	lsl r0, r6, #1
	mov sb, r1
	ldrheq r5, [r8, #0x2c]
	add r7, r0, #4
	b _020A6F28
_020A6EB0:
	ldr r0, _020A6F44 @ =0x021D4620
	ldrh r4, [r8, #0x2e]
	ldrh r0, [r0, #2]
	ldr r1, [r8, #0x34]
	cmp r4, r5
	movhs r4, r5
	cmp r0, r4
	movlo r4, r0
	cmp fp, #0
	biceq r4, r4, #1
	cmp sb, r4
	sub r0, r1, r6
	movlo r4, sb
	adds r0, r7, r0
	moveq r4, #0
	mov r6, r1
	sub r7, r0, #1
	cmp r4, #0
	beq _020A6F3C
	mov r2, #0
	str r2, [sp]
	mov r0, sl
	mov r1, r4
	mov r2, r8
	mov r3, #0x18
	sub r5, r5, r4
	bl FUN_020A4C64
	bl FUN_020D1FA0
	add sl, sl, r4
	sub sb, sb, r4
_020A6F28:
	cmp sb, #0
	beq _020A6F3C
	ldrb r0, [r8, #8]
	cmp r0, #4
	beq _020A6EB0
_020A6F3C:
	mov r0, r4
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020A6F44: .4byte 0x021D4620
	arm_func_end FUN_020A6E84

	arm_func_start FUN_020A6F48
FUN_020A6F48: @ 0x020A6F48
	push {r3, r4, r5, lr}
	mov r5, r2
	mov r4, r3
	ldr r2, [sp, #0x10]
	ldr r3, [sp, #0x14]
	bl FUN_020A6E84
	cmp r0, #0
	cmpne r4, #0
	popeq {r3, r4, r5, pc}
	ldr r2, [sp, #0x10]
	mov r0, r5
	mov r1, r4
	mov r3, #0
	bl FUN_020A6E84
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020A6F48

	arm_func_start FUN_020A6F84
FUN_020A6F84: @ 0x020A6F84
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x14
	mov r4, #0
	mov fp, r0
	ldr r8, [sp, #0x38]
	mov r0, r4
	str r4, [sp, #0x10]
	mov sl, r1
	mov sb, r2
	str r3, [sp, #8]
	mov r6, r4
	str r0, [r8, #0x34]
	bl FUN_020D34B0
	lsr r0, r0, #0x10
	orr r0, r0, r1, lsl #16
	str r0, [sp, #0xc]
	b _020A713C
_020A6FC8:
	ldr r7, [r8, #0x28]
	ldr r3, [sp, #8]
	str r8, [sp]
	mov r0, fp
	mov r1, sl
	mov r2, sb
	str r6, [sp, #4]
	bl FUN_020A6F48
	bl FUN_020D34B0
	lsr r5, r0, #0x10
	ldr r4, _020A7188 @ =0x021D4620
	orr r5, r5, r1, lsl #16
_020A6FF8:
	bl FUN_020A3978
	ldr r0, [r4, #0x48]
	blx r0
	cmp r0, #0
	beq _020A7050
	ldrb r0, [r8, #8]
	cmp r0, #4
	bne _020A7050
	ldr r1, [r8, #0x28]
	ldr r0, [r8, #0x30]
	cmp r1, r0
	beq _020A7050
	bl FUN_020D34B0
	lsr r0, r0, #0x10
	orr r0, r0, r1, lsl #16
	sub r0, r0, r5
	cmp r0, #0xf
	bge _020A7050
	cmp r6, #0
	ldrhne r0, [r8, #0x2c]
	cmpne r0, #0
	beq _020A6FF8
_020A7050:
	ldr r1, [r8, #0x30]
	ldr r0, [r8, #0x28]
	sub r5, r1, r7
	sub r0, r0, r7
	cmp r5, r0
	movhi r5, #0
	ldr r0, [sp, #0x10]
	cmp r5, #0
	add r0, r0, r5
	str r0, [sp, #0x10]
	beq _020A708C
	bl FUN_020D34B0
	lsr r0, r0, #0x10
	orr r0, r0, r1, lsl #16
	str r0, [sp, #0xc]
_020A708C:
	ldr r0, [r8, #0x30]
	str r0, [r8, #0x28]
	ldrb r0, [r8, #8]
	cmp r0, #4
	ldrheq r0, [r8, #0x2c]
	cmpeq r0, #0
	cmpeq r5, #0
	bne _020A7110
	cmp r6, #0
	bne _020A7114
	bl FUN_020D34B0
	lsr r7, r0, #0x10
	orr r7, r7, r1, lsl #16
	ldr r4, _020A7188 @ =0x021D4620
	b _020A70D8
_020A70C8:
	bl FUN_020A3978
	ldrh r0, [r8, #0x2c]
	cmp r0, #0
	bne _020A7100
_020A70D8:
	ldr r0, [r4, #0x48]
	blx r0
	cmp r0, #0
	beq _020A7100
	bl FUN_020D34B0
	lsr r0, r0, #0x10
	orr r0, r0, r1, lsl #16
	sub r0, r0, r7
	cmp r0, #0xf
	blt _020A70C8
_020A7100:
	ldrh r0, [r8, #0x2c]
	cmp r0, #0
	moveq r6, #1
	b _020A7114
_020A7110:
	mov r6, #0
_020A7114:
	cmp r5, sl
	addlo fp, fp, r5
	sublo sl, sl, r5
	blo _020A713C
	sub r1, r5, sl
	ldr r0, [sp, #8]
	add fp, sb, r1
	mov sb, #0
	sub sl, r0, r1
	str sb, [sp, #8]
_020A713C:
	ldr r0, _020A7188 @ =0x021D4620
	ldr r0, [r0, #0x48]
	blx r0
	cmp r0, #0
	cmpne sl, #0
	beq _020A717C
	ldrb r0, [r8, #8]
	cmp r0, #4
	bne _020A717C
	bl FUN_020D34B0
	lsr r2, r0, #0x10
	ldr r0, [sp, #0xc]
	orr r2, r2, r1, lsl #16
	sub r0, r2, r0
	cmp r0, #0x9f
	blt _020A6FC8
_020A717C:
	ldr r0, [sp, #0x10]
	add sp, sp, #0x14
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020A7188: .4byte 0x021D4620
	arm_func_end FUN_020A6F84

	arm_func_start FUN_020A718C
FUN_020A718C: @ 0x020A718C
	push {r3, r4, r5, r6, r7, lr}
	ldr ip, _020A7258 @ =0x021E16A0
	mov r7, r1
	ldr ip, [ip, #4]
	mov r6, r2
	ldr r4, [ip, #0xa4]
	mov r5, r3
	cmp r4, #0
	beq _020A7250
	ldrb ip, [r4, #8]
	cmp ip, #0xa
	bne _020A71EC
	cmp r7, #0
	beq _020A71CC
	mov r2, r4
	bl FUN_020A4B28
_020A71CC:
	cmp r5, #0
	beq _020A71E4
	mov r0, r6
	mov r1, r5
	mov r2, r4
	bl FUN_020A4B28
_020A71E4:
	add r0, r7, r5
	b _020A7240
_020A71EC:
	cmp ip, #0xb
	bne _020A7224
	cmp r7, #0
	beq _020A7204
	mov r2, r4
	bl FUN_020A4A78
_020A7204:
	cmp r5, #0
	beq _020A721C
	mov r0, r6
	mov r1, r5
	mov r2, r4
	bl FUN_020A4A78
_020A721C:
	add r0, r7, r5
	b _020A7240
_020A7224:
	ldrb ip, [r4, #9]
	cmp ip, #0
	str r4, [sp]
	beq _020A723C
	bl FUN_020AB75C
	b _020A7240
_020A723C:
	bl FUN_020A6F84
_020A7240:
	ldr r1, _020A725C @ =0x021D4620
	ldrb r1, [r1]
	cmp r1, #0
	popeq {r3, r4, r5, r6, r7, pc}
_020A7250:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020A7258: .4byte 0x021E16A0
_020A725C: .4byte 0x021D4620
	arm_func_end FUN_020A718C

	arm_func_start FUN_020A7260
FUN_020A7260: @ 0x020A7260
	push {r3, r4, r5, lr}
	ldr r3, _020A72F4 @ =0x021E16A0
	mov r2, r0
	ldr r4, [r3, #4]
	mov r3, r1
	ldr r5, [r4, #0xa4]
	cmp r5, #0
	beq _020A72EC
	ldr r4, [r5, #0x60]
	cmp r4, #0
	beq _020A72DC
	ldr r0, [r5, #0x5c]
	mov r1, r4
	bl FUN_020A718C
	ldr r1, [r5, #0x60]
	mov r4, r0
	cmp r4, r1
	bhs _020A72CC
	ldr r0, [r5, #0x5c]
	sub r2, r1, r4
	add r1, r0, r4
	bl FUN_020E5AF8
	ldr r1, [r5, #0x60]
	mov r0, #0
	sub r1, r1, r4
	str r1, [r5, #0x60]
	pop {r3, r4, r5, pc}
_020A72CC:
	mov r0, #0
	str r0, [r5, #0x60]
	sub r0, r4, r1
	pop {r3, r4, r5, pc}
_020A72DC:
	mov r2, #0
	mov r3, r2
	bl FUN_020A718C
	pop {r3, r4, r5, pc}
_020A72EC:
	mov r0, #0
	pop {r3, r4, r5, pc}
	.align 2, 0
_020A72F4: .4byte 0x021E16A0
	arm_func_end FUN_020A7260

	arm_func_start FUN_020A72F8
FUN_020A72F8: @ 0x020A72F8
	push {r3, lr}
	ldr r0, _020A7364 @ =0x021E16A0
	ldr r0, [r0, #4]
	ldr r0, [r0, #0xa4]
	cmp r0, #0
	beq _020A735C
	ldrb r1, [r0, #9]
	cmp r1, #0
	beq _020A7324
	bl FUN_020AB6E0
	pop {r3, pc}
_020A7324:
	ldr r1, [r0, #0x44]
	cmp r1, #0
	bne _020A734C
	ldrb r0, [r0, #8]
	cmp r0, #4
	beq _020A734C
	add r0, r0, #0xf6
	and r0, r0, #0xff
	cmp r0, #1
	bhi _020A7354
_020A734C:
	mov r0, r1
	pop {r3, pc}
_020A7354:
	mvn r0, #0
	pop {r3, pc}
_020A735C:
	mov r0, #0
	pop {r3, pc}
	.align 2, 0
_020A7364: .4byte 0x021E16A0
	arm_func_end FUN_020A72F8

	arm_func_start FUN_020A7368
FUN_020A7368: @ 0x020A7368
	push {r4, lr}
	ldr r0, _020A73A4 @ =0x021E16A0
	ldr r0, [r0, #4]
	ldr r4, [r0, #0xa4]
	cmp r4, #0
	ldrne r1, [r4, #0x60]
	cmpne r1, #0
	popeq {r4, pc}
	mov r2, #0
	ldr r0, [r4, #0x5c]
	mov r3, r2
	bl FUN_020A718C
	mov r0, #0
	str r0, [r4, #0x60]
	pop {r4, pc}
	.align 2, 0
_020A73A4: .4byte 0x021E16A0
	arm_func_end FUN_020A7368

	arm_func_start FUN_020A73A8
FUN_020A73A8: @ 0x020A73A8
	push {r4, r5, r6, lr}
	ldr r0, _020A7444 @ =0x021D4620
	ldr r0, [r0, #0x18]
	blx r0
	ldr r0, _020A7444 @ =0x021D4620
	ldr r0, [r0, #0x50]
	cmp r0, #0
	popeq {r4, r5, r6, pc}
	bl FUN_020A43E0
	mov r0, #0x64
	bl FUN_020D2108
	ldr r0, _020A7444 @ =0x021D4620
	ldr r0, [r0, #0x50]
	bl FUN_020A43E0
	bl FUN_020D34B0
	lsr r6, r0, #0x10
	orr r6, r6, r1, lsl #16
	mov r5, #0x64
	ldr r4, _020A7444 @ =0x021D4620
	b _020A7418
_020A73F8:
	ldrb r0, [r4, #1]
	cmp r0, #0
	beq _020A7410
	mov r0, #4
	bl FUN_020A3874
	pop {r4, r5, r6, pc}
_020A7410:
	mov r0, r5
	bl FUN_020D2108
_020A7418:
	ldr r0, [r4, #0x48]
	blx r0
	cmp r0, #0
	popeq {r4, r5, r6, pc}
	bl FUN_020D34B0
	lsr r0, r0, #0x10
	orr r0, r0, r1, lsl #16
	sub r0, r0, r6
	cmp r0, #0x17
	blt _020A73F8
	pop {r4, r5, r6, pc}
	.align 2, 0
_020A7444: .4byte 0x021D4620
	arm_func_end FUN_020A73A8

	arm_func_start FUN_020A7448
FUN_020A7448: @ 0x020A7448
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	ldr r3, _020A7798 @ =0x021D4620
	mov r1, #0
	ldr r0, _020A779C @ =0x021D4700
	mov r2, #0x64
	str r1, [r3, #0x44]
	bl FUN_020D4994
	ldr r1, _020A7798 @ =0x021D4620
	mov r3, #0x180
	ldr r0, _020A77A0 @ =0x021D4CCC
	str r3, [r1, #0x11c]
	str r0, [r1, #0x120]
	ldr r2, _020A77A4 @ =0x021D4B4C
	str r3, [r1, #0x128]
	ldr r0, _020A779C @ =0x021D4700
	str r2, [r1, #0x12c]
	bl FUN_020A6878
	mov sl, #1
	ldr r0, _020A7798 @ =0x021D4620
	mov fp, sl
	str sl, [sp]
	str sl, [r0, #0xc]
	mov r4, #0
_020A74A4:
	mov r0, #0x3e8
	bl FUN_020D2108
	ldr r0, _020A7798 @ =0x021D4620
	ldr r1, [r0, #0x44]
	cmp r1, #0
	bne _020A7778
	bl FUN_020D34B0
	ldr r2, _020A7798 @ =0x021D4620
	lsr r5, r0, #0x10
	ldr r0, [r2, #0x48]
	orr r5, r5, r1, lsl #16
	blx r0
	cmp r0, #0
	beq _020A75D0
	ldr r0, [sp]
	subs r0, r0, #1
	str r0, [sp]
	bne _020A75E4
	ldr r0, _020A7798 @ =0x021D4620
	ldr r1, [r0, #0x10]
	tst r1, #1
	beq _020A7510
	cmp r4, #0
	bne _020A75E4
	bl FUN_020A73A8
	mov r4, #1
	b _020A75E4
_020A7510:
	cmp r4, #3
	addls pc, pc, r4, lsl #2
	b _020A75E4
_020A751C: @ jump table
	b _020A752C @ case 0
	b _020A7570 @ case 1
	b _020A7594 @ case 2
	b _020A75E4 @ case 3
_020A752C:
	cmp fp, #0
	movne r1, #2
	strne r1, [r0, #0xc]
	movne fp, #0
	bl FUN_020A7E94
	cmp r0, #0
	beq _020A755C
	add r0, sp, #0
	mov r1, #0
	bl FUN_020A7EEC
	cmp r0, #0
	bne _020A7568
_020A755C:
	bl FUN_020A73A8
	mov r4, #3
	b _020A75E4
_020A7568:
	mov r4, #1
	b _020A75E4
_020A7570:
	add r0, sp, #0
	mov r1, #1
	bl FUN_020A7EEC
	cmp r0, #0
	bne _020A75E4
	ldr r0, [sp]
	cmp r0, #0x3c
	movlo r4, #2
	b _020A75E4
_020A7594:
	add r0, sp, #0
	mov r1, #2
	bl FUN_020A7EEC
	cmp r0, #0
	movne r4, #1
	bne _020A75E4
	ldr r0, [sp]
	cmp r0, #0x3c
	bhs _020A75E4
	mov r0, #3
	bl FUN_020A3874
	mov sl, #1
	str sl, [sp]
	mov r4, #0
	b _020A75E4
_020A75D0:
	mov r0, #1
	bl FUN_020A3874
	mov sl, #1
	str sl, [sp]
	mov r4, #0
_020A75E4:
	mov r3, #0
	ldr r6, _020A77A8 @ =0x021D46A0
	ldr r1, _020A77AC @ =0x000003BD
	mov r2, r3
_020A75F4:
	ldr r0, [r6]
	cmp r0, #0
	beq _020A7614
	ldrh r0, [r6, #0xa]
	sub r0, r5, r0
	lsl r0, r0, #0x10
	cmp r1, r0, asr #16
	strlt r2, [r6]
_020A7614:
	add r3, r3, #1
	cmp r3, #8
	add r6, r6, #0xc
	blt _020A75F4
	ldr r0, _020A7798 @ =0x021D4620
	ldr r0, [r0, #0x2c]
	cmp r0, #0
	beq _020A7644
	subs sl, sl, #1
	bne _020A7644
	bl FUN_020A43E0
	mov sl, #0x69
_020A7644:
	ldr r0, _020A77B0 @ =0x021E16A0
	ldr sb, [r0, #8]
	cmp sb, #0
	beq _020A770C
	mov r6, #0
	mov r7, r6
	mov r8, #1
_020A7660:
	ldr r0, [sb, #0xa4]
	cmp r0, #0
	ldrne r1, [r0]
	cmpne r1, #0
	beq _020A7700
	ldrb r1, [r0, #8]
	cmp r1, #3
	bne _020A76A8
	ldr r2, [r0, #0x10]
	sub r2, r5, r2
	cmp r2, #0x27
	ble _020A76A8
	strb r8, [r0, #8]
	ldrh r1, [r0, #0x1a]
	strh r1, [r0, #0x18]
	ldr r1, [r0, #0x20]
	str r1, [r0, #0x1c]
	b _020A7700
_020A76A8:
	cmp r1, #2
	bne _020A76E0
	ldr r2, [r0, #0x10]
	sub r2, r5, r2
	cmp r2, #0x27
	ble _020A76E0
	ldr r1, [r0, #4]
	cmp r1, #1
	bne _020A7700
	strb r7, [r0, #8]
	str r7, [r0, #4]
	ldr r0, [r0]
	bl FUN_020D1F34
	b _020A7700
_020A76E0:
	cmp r1, #4
	beq _020A7700
	ldr r1, [r0, #4]
	cmp r1, #2
	bne _020A7700
	str r6, [r0, #4]
	ldr r0, [r0]
	bl FUN_020D1F34
_020A7700:
	ldr sb, [sb, #0x68]
	cmp sb, #0
	bne _020A7660
_020A770C:
	mov sb, #0
	ldr r8, _020A77B4 @ =0x021D4948
	ldr r6, _020A7798 @ =0x021D4620
	mov r7, sb
_020A771C:
	ldrh r0, [r8, #4]
	cmp r0, #0
	beq _020A7748
	ldr r0, [r8, #0x2c]
	sub r0, r5, r0
	cmp r0, #0xef
	ble _020A7748
	ldr r0, [r8, #0x34]
	ldr r1, [r6, #0x40]
	blx r1
	strh r7, [r8, #4]
_020A7748:
	add sb, sb, #1
	cmp sb, #8
	add r8, r8, #0x38
	blt _020A771C
	mov r0, r5
	bl FUN_020AB978
	ldr r0, _020A7798 @ =0x021D4620
	ldr r0, [r0, #0x3c]
	cmp r0, #0
	beq _020A74A4
	blx r0
	b _020A74A4
_020A7778:
	ldr r0, [r0, #0x10]
	tst r0, #1
	bne _020A7790
	cmp r4, #3
	beq _020A7790
	bl FUN_020A7FE8
_020A7790:
	bl FUN_020A688C
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020A7798: .4byte 0x021D4620
_020A779C: .4byte 0x021D4700
_020A77A0: .4byte 0x021D4CCC
_020A77A4: .4byte 0x021D4B4C
_020A77A8: .4byte 0x021D46A0
_020A77AC: .4byte 0x000003BD
_020A77B0: .4byte 0x021E16A0
_020A77B4: .4byte 0x021D4948
	arm_func_end FUN_020A7448

	arm_func_start FUN_020A77B8
FUN_020A77B8: @ 0x020A77B8
	push {r3, r4, r5, r6, r7, lr}
	mov r5, r1
	mov r4, r2
	mov r1, #0
	mov r2, #0xec
	mov r6, r0
	bl FUN_020D4994
	ldr r0, _020A7928 @ =0x00000101
	mov r1, #6
	strh r0, [r6]
	ldr r0, _020A792C @ =0x021D4620
	strb r1, [r6, #2]
	ldr r3, [r0, #0x70]
	ldr r2, [r0, #0x68]
	ldr r1, [r0, #0x6c]
	umull lr, ip, r3, r2
	mla ip, r3, r1, ip
	ldr r1, [r0, #0x74]
	ldr r7, [r0, #0x78]
	mla ip, r1, r2, ip
	ldr r3, [r0, #0x7c]
	adds r7, r7, lr
	adc r1, r3, ip
	str r7, [r0, #0x68]
	str r1, [r0, #0x6c]
	lsr r0, r1, #0x10
	lsl r0, r0, #0x10
	lsr r3, r0, #0x10
	cmp r4, #0
	lsl r2, r3, #8
	lsl r0, r1, #0x10
	strne r1, [r4]
	lsr r1, r0, #0x10
	orr r2, r2, r3, asr #8
	lsl r0, r1, #8
	strh r2, [r6, #4]
	orr r0, r0, r1, asr #8
	strh r0, [r6, #6]
	ldr r2, _020A792C @ =0x021D4620
	ldr r0, _020A7930 @ =0x021D4B08
	ldr r1, [r2, #0x50]
	lsr r1, r1, #0x10
	lsl r1, r1, #0x10
	lsr r3, r1, #0x10
	lsl r1, r3, #8
	orr r1, r1, r3, asr #8
	strh r1, [r6, #0xc]
	ldr r2, [r2, #0x50]
	add r1, r6, #0x1c
	lsl r2, r2, #0x10
	lsr r3, r2, #0x10
	lsl r2, r3, #8
	orr r3, r2, r3, asr #8
	mov r2, #6
	strh r3, [r6, #0xe]
	bl FUN_020D4A50
	ldr r0, _020A7934 @ =0x00008263
	ldr r1, _020A7938 @ =0x00006353
	strh r0, [r6, #0xec]
	strh r1, [r6, #0xee]
	ldr r0, _020A793C @ =0x00000135
	mov r1, #7
	strh r0, [r6, #0xf0]
	strb r5, [r6, #0xf2]
	mov r0, #0x3d
	strb r0, [r6, #0xf3]
	strb r1, [r6, #0xf4]
	mov r3, #1
	ldr r0, _020A7930 @ =0x021D4B08
	add r1, r6, #0xf6
	mov r2, #6
	strb r3, [r6, #0xf5]
	bl FUN_020D4A50
	mov r1, #0xc
	strb r1, [r6, #0xfc]
	mov r2, #0xa
	ldr r0, _020A7940 @ =_0211069C
	add r1, r6, #0xfe
	strb r2, [r6, #0xfd]
	bl FUN_020D4A50
	mov r1, #0x37
	strb r1, [r6, #0x108]
	mov r2, #3
	add r0, r6, #0xd
	strb r2, [r6, #0x109]
	mov r1, #1
	strb r1, [r6, #0x10a]
	strb r2, [r6, #0x10b]
	mov r1, #6
	strb r1, [r6, #0x10c]
	add r0, r0, #0x100
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020A7928: .4byte 0x00000101
_020A792C: .4byte 0x021D4620
_020A7930: .4byte 0x021D4B08
_020A7934: .4byte 0x00008263
_020A7938: .4byte 0x00006353
_020A793C: .4byte 0x00000135
_020A7940: .4byte _0211069C
	arm_func_end FUN_020A77B8

	arm_func_start FUN_020A7944
FUN_020A7944: @ 0x020A7944
	push {r3, r4, r5, lr}
	mov ip, r0
	mov r5, r2
	cmp r3, r1
	bhs _020A7970
	sub r4, r1, r3
	mov r0, r5
	mov r1, ip
	mov r2, r4
	bl FUN_020D4994
	add r5, r5, r4
_020A7970:
	mov r0, r5
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020A7944

	arm_func_start FUN_020A7978
FUN_020A7978: @ 0x020A7978
	push {r3, r4, lr}
	sub sp, sp, #4
	ldr r4, _020A7A34 @ =0x021D4B76
	add r2, sp, #0
	mov r0, r4
	mov r1, #1
	bl FUN_020A77B8
	ldr r1, _020A7A38 @ =0x021D4620
	mov ip, r0
	ldr r0, [r1, #0x34]
	cmp r0, #0
	beq _020A79FC
	mov r0, #0x32
	strb r0, [ip]
	mov r0, #4
	strb r0, [ip, #1]
	ldr r0, [r1, #0x34]
	lsr r0, r0, #0x10
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	asr r0, r0, #8
	strb r0, [ip, #2]
	ldr r0, [r1, #0x34]
	lsr r0, r0, #0x10
	strb r0, [ip, #3]
	ldr r0, [r1, #0x34]
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	asr r0, r0, #8
	strb r0, [ip, #4]
	ldr r0, [r1, #0x34]
	strb r0, [ip, #5]
	add ip, ip, #6
_020A79FC:
	add r2, ip, #1
	mov lr, #0xff
	sub r3, r2, r4
	mov r0, #0
	mov r1, #0x12c
	strb lr, [ip]
	bl FUN_020A7944
	mov r1, r0
	mov r0, r4
	sub r1, r1, r4
	bl FUN_020A7260
	ldr r0, [sp]
	add sp, sp, #4
	pop {r3, r4, pc}
	.align 2, 0
_020A7A34: .4byte 0x021D4B76
_020A7A38: .4byte 0x021D4620
	arm_func_end FUN_020A7978

	arm_func_start FUN_020A7A3C
FUN_020A7A3C: @ 0x020A7A3C
	push {r3, r4, r5, lr}
	ldr r4, _020A7B3C @ =0x021D4B76
	mov r5, r0
	add r2, sp, #0
	mov r0, r4
	mov r1, #3
	bl FUN_020A77B8
	mov ip, r0
	cmp r5, #0
	bne _020A7B08
	mov r0, #0x32
	strb r0, [ip]
	mov r0, #4
	ldr r2, _020A7B40 @ =0x021D4620
	strb r0, [ip, #1]
	ldr r1, [r2, #0x34]
	mov r3, #0x36
	lsr r1, r1, #0x10
	lsl r1, r1, #0x10
	lsr r1, r1, #0x10
	asr r1, r1, #8
	strb r1, [ip, #2]
	ldr r1, [r2, #0x34]
	lsr r1, r1, #0x10
	strb r1, [ip, #3]
	ldr r1, [r2, #0x34]
	lsl r1, r1, #0x10
	lsr r1, r1, #0x10
	asr r1, r1, #8
	strb r1, [ip, #4]
	ldr r1, [r2, #0x34]
	strb r1, [ip, #5]
	strb r3, [ip, #6]
	strb r0, [ip, #7]
	ldr r0, [r2, #0x20]
	lsr r0, r0, #0x10
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	asr r0, r0, #8
	strb r0, [ip, #8]
	ldr r0, [r2, #0x20]
	lsr r0, r0, #0x10
	strb r0, [ip, #9]
	ldr r0, [r2, #0x20]
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	asr r0, r0, #8
	strb r0, [ip, #0xa]
	ldr r0, [r2, #0x20]
	strb r0, [ip, #0xb]
	add ip, ip, #0xc
_020A7B08:
	add r2, ip, #1
	mov lr, #0xff
	sub r3, r2, r4
	mov r0, #0
	mov r1, #0x12c
	strb lr, [ip]
	bl FUN_020A7944
	mov r1, r0
	mov r0, r4
	sub r1, r1, r4
	bl FUN_020A7260
	ldr r0, [sp]
	pop {r3, r4, r5, pc}
	.align 2, 0
_020A7B3C: .4byte 0x021D4B76
_020A7B40: .4byte 0x021D4620
	arm_func_end FUN_020A7A3C

	arm_func_start FUN_020A7B44
FUN_020A7B44: @ 0x020A7B44
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #8
	add r1, r1, #1
	str r0, [sp]
	rsb fp, r1, r1, lsl #4
	bl FUN_020D34B0
	lsr r4, r0, #0x10
	orr r4, r4, r1, lsl #16
	mov r5, #0
	b _020A7E4C
_020A7B6C:
	bl FUN_020A72F8
	cmp r0, #0
	bne _020A7B80
	bl FUN_020A3978
	b _020A7E4C
_020A7B80:
	add r0, sp, #4
	bl FUN_020A6D58
	ldr r1, [sp, #4]
	mov r6, r0
	cmp r1, #0xf0
	bls _020A7E44
	ldrb r0, [r6]
	cmp r0, #2
	bne _020A7E44
	ldrh r3, [r6, #6]
	ldrh r2, [r6, #4]
	lsl r0, r3, #8
	lsl r1, r2, #8
	orr r2, r1, r2, asr #8
	orr r1, r0, r3, asr #8
	lsl r0, r2, #0x10
	lsl r1, r1, #0x10
	lsr r2, r0, #0x10
	lsr r0, r1, #0x10
	orr r1, r0, r2, lsl #16
	ldr r0, [sp]
	cmp r0, r1
	bne _020A7E44
	ldr r1, _020A7E8C @ =0x021D4B08
	add r0, r6, #0x1c
	bl FUN_020A3F38
	cmp r0, #0
	bne _020A7E44
	ldrb r3, [r6, #0x10]
	ldrb r2, [r6, #0x11]
	ldrb r1, [r6, #0x12]
	ldrb r0, [r6, #0x13]
	orr r3, r2, r3, lsl #8
	ldrb r2, [r6, #0xec]
	orr r1, r0, r1, lsl #8
	lsl r0, r3, #0x10
	lsl r1, r1, #0x10
	lsr r5, r0, #0x10
	lsr r0, r1, #0x10
	cmp r2, #0x63
	orr r2, r0, r5, lsl #16
	ldrbeq r0, [r6, #0xed]
	ldr r3, [sp, #4]
	mov r5, #3
	cmpeq r0, #0x82
	ldrbeq r0, [r6, #0xee]
	add r1, r6, r3
	cmpeq r0, #0x53
	ldrbeq r0, [r6, #0xef]
	addeq r3, r6, #0xf0
	cmpeq r0, #0x63
	bne _020A7E44
	mov r0, #0
	mov sb, #2
	mov sl, #1
	ldr ip, _020A7E90 @ =0x021D4620
	b _020A7E30
_020A7C64:
	cmp r6, #0
	beq _020A7E30
	cmp r6, #0x33
	bgt _020A7CA0
	bge _020A7D98
	cmp r6, #6
	bgt _020A7E24
	cmp r6, #1
	blt _020A7E24
	beq _020A7CBC
	cmp r6, #3
	beq _020A7CF0
	cmp r6, #6
	beq _020A7D24
	b _020A7E24
_020A7CA0:
	cmp r6, #0x35
	bgt _020A7CB0
	beq _020A7DCC
	b _020A7E24
_020A7CB0:
	cmp r6, #0x36
	beq _020A7DF4
	b _020A7E24
_020A7CBC:
	ldrb lr, [r3, #1]
	ldrb r8, [r3, #2]
	ldrb r7, [r3, #3]
	ldrb r6, [r3, #4]
	orr r8, r8, lr, lsl #8
	lsl r8, r8, #0x10
	orr r6, r6, r7, lsl #8
	lsl r6, r6, #0x10
	lsr r7, r8, #0x10
	lsr r6, r6, #0x10
	orr r6, r6, r7, lsl #16
	str r6, [ip, #0x1c]
	b _020A7E24
_020A7CF0:
	ldrb lr, [r3, #1]
	ldrb r8, [r3, #2]
	ldrb r7, [r3, #3]
	ldrb r6, [r3, #4]
	orr r8, r8, lr, lsl #8
	lsl r8, r8, #0x10
	orr r6, r6, r7, lsl #8
	lsl r6, r6, #0x10
	lsr r7, r8, #0x10
	lsr r6, r6, #0x10
	orr r6, r6, r7, lsl #16
	str r6, [ip, #0x2c]
	b _020A7E24
_020A7D24:
	ldrb r6, [r3]
	cmp r6, #8
	strlo r0, [ip, #0x64]
	blo _020A7D64
	ldrb lr, [r3, #5]
	ldrb r8, [r3, #6]
	ldrb r7, [r3, #7]
	ldrb r6, [r3, #8]
	orr r8, r8, lr, lsl #8
	lsl r8, r8, #0x10
	orr r6, r6, r7, lsl #8
	lsl r6, r6, #0x10
	lsr r7, r8, #0x10
	lsr r6, r6, #0x10
	orr r6, r6, r7, lsl #16
	str r6, [ip, #0x64]
_020A7D64:
	ldrb lr, [r3, #1]
	ldrb r8, [r3, #2]
	ldrb r7, [r3, #3]
	ldrb r6, [r3, #4]
	orr r8, r8, lr, lsl #8
	lsl r8, r8, #0x10
	orr r6, r6, r7, lsl #8
	lsl r6, r6, #0x10
	lsr r7, r8, #0x10
	lsr r6, r6, #0x10
	orr r6, r6, r7, lsl #16
	str r6, [ip, #0x60]
	b _020A7E24
_020A7D98:
	ldrb lr, [r3, #1]
	ldrb r8, [r3, #2]
	ldrb r7, [r3, #3]
	ldrb r6, [r3, #4]
	orr r8, r8, lr, lsl #8
	lsl r8, r8, #0x10
	orr r6, r6, r7, lsl #8
	lsl r6, r6, #0x10
	lsr r7, r8, #0x10
	lsr r6, r6, #0x10
	orr r6, r6, r7, lsl #16
	str r6, [ip, #0x4c]
	b _020A7E24
_020A7DCC:
	ldrb r6, [r3, #1]
	cmp r6, #2
	beq _020A7DE8
	cmp r6, #5
	moveq r5, sb
	streq r2, [ip, #0x50]
	b _020A7E24
_020A7DE8:
	mov r5, sl
	str r2, [ip, #0x34]
	b _020A7E24
_020A7DF4:
	ldrb r8, [r3, #1]
	ldrb r7, [r3, #2]
	ldrb r6, [r3, #3]
	ldrb lr, [r3, #4]
	orr r7, r7, r8, lsl #8
	lsl r7, r7, #0x10
	orr r6, lr, r6, lsl #8
	lsl r6, r6, #0x10
	lsr r7, r7, #0x10
	lsr r6, r6, #0x10
	orr r6, r6, r7, lsl #16
	str r6, [ip, #0x20]
_020A7E24:
	ldrb r6, [r3]
	add r6, r6, #1
	add r3, r3, r6
_020A7E30:
	cmp r3, r1
	bhs _020A7E44
	ldrb r6, [r3], #1
	cmp r6, #0xff
	bne _020A7C64
_020A7E44:
	ldr r0, [sp, #4]
	bl FUN_020A6E4C
_020A7E4C:
	ldr r0, _020A7E90 @ =0x021D4620
	ldr r0, [r0, #0x48]
	blx r0
	cmp r0, #0
	beq _020A7E80
	cmp r5, #0
	bne _020A7E80
	bl FUN_020D34B0
	lsr r0, r0, #0x10
	orr r0, r0, r1, lsl #16
	sub r0, r0, r4
	cmp r0, fp
	blt _020A7B6C
_020A7E80:
	mov r0, r5
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020A7E8C: .4byte 0x021D4B08
_020A7E90: .4byte 0x021D4620
	arm_func_end FUN_020A7B44

	arm_func_start FUN_020A7E94
FUN_020A7E94: @ 0x020A7E94
	push {r3, r4, r5, lr}
	bl FUN_020A6930
	bl FUN_020A68A4
	mov r1, #0x43
	sub r2, r1, #0x44
	mov r0, #0x44
	bl FUN_020A68D0
	mov r5, #0
_020A7EB4:
	bl FUN_020A7978
	mov r1, r5
	bl FUN_020A7B44
	mov r4, r0
	cmp r4, #1
	beq _020A7ED8
	add r5, r5, #1
	cmp r5, #4
	blt _020A7EB4
_020A7ED8:
	bl FUN_020A6964
	cmp r4, #1
	moveq r0, #1
	movne r0, #0
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020A7E94

	arm_func_start FUN_020A7EEC
FUN_020A7EEC: @ 0x020A7EEC
	push {r3, r4, r5, r6, r7, lr}
	mov r4, r1
	mov r5, r0
	bl FUN_020A6930
	bl FUN_020A68A4
	cmp r4, #1
	mov r0, #0x44
	bne _020A7F20
	ldr r1, _020A7FE4 @ =0x021D4620
	ldr r2, [r1, #0x20]
	mov r1, #0x43
	bl FUN_020A68D0
	b _020A7F2C
_020A7F20:
	mov r1, #0x43
	sub r2, r1, #0x44
	bl FUN_020A68D0
_020A7F2C:
	mov r7, #0
_020A7F30:
	mov r0, r4
	bl FUN_020A7A3C
	mov r1, r7
	bl FUN_020A7B44
	movs r6, r0
	bne _020A7F54
	add r7, r7, #1
	cmp r7, #4
	blt _020A7F30
_020A7F54:
	bl FUN_020A6964
	cmp r6, #2
	bne _020A7F88
	ldr r1, _020A7FE4 @ =0x021D4620
	mov r0, #1
	ldr r2, [r1, #0x4c]
	lsr r2, r2, #1
	str r2, [r5]
	ldr r2, [r1, #0x4c]
	add r2, r2, r2, lsl #1
	lsr r2, r2, #3
	str r2, [r1, #0x38]
	pop {r3, r4, r5, r6, r7, pc}
_020A7F88:
	ldr r0, _020A7FE4 @ =0x021D4620
	cmp r4, #1
	ldr r1, [r0, #0x38]
	lsr r1, r1, #1
	str r1, [r0, #0x38]
	str r1, [r5]
	beq _020A7FB0
	cmp r4, #2
	beq _020A7FD0
	b _020A7FDC
_020A7FB0:
	cmp r1, #0x3c
	bhs _020A7FDC
	mov r1, #1
	str r1, [r5]
	ldr r1, [r0, #0x4c]
	lsr r1, r1, #3
	str r1, [r0, #0x38]
	b _020A7FDC
_020A7FD0:
	cmp r1, #0x3c
	movlo r0, #1
	strlo r0, [r5]
_020A7FDC:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020A7FE4: .4byte 0x021D4620
	arm_func_end FUN_020A7EEC

	arm_func_start FUN_020A7FE8
FUN_020A7FE8: @ 0x020A7FE8
	push {r4, lr}
	bl FUN_020A6930
	bl FUN_020A68A4
	ldr r1, _020A804C @ =0x021D4620
	mov r0, #0x44
	ldr r2, [r1, #0x20]
	mov r1, #0x43
	bl FUN_020A68D0
	ldr r4, _020A8050 @ =0x021D4B76
	mov r1, #7
	mov r0, r4
	mov r2, #0
	bl FUN_020A77B8
	mov r1, #0xff
	add r2, r0, #1
	strb r1, [r0]
	mov r0, #0
	mov r1, #0x12c
	sub r3, r2, r4
	bl FUN_020A7944
	sub r1, r0, r4
	mov r0, r4
	bl FUN_020A7260
	bl FUN_020A6964
	pop {r4, pc}
	.align 2, 0
_020A804C: .4byte 0x021D4620
_020A8050: .4byte 0x021D4B76
	arm_func_end FUN_020A7FE8

	arm_func_start FUN_020A8054
FUN_020A8054: @ 0x020A8054
	ldrb r2, [r0], #1
	cmp r2, #0
	bxeq lr
_020A8060:
	and r1, r2, #0xc0
	cmp r1, #0xc0
	addeq r0, r0, #1
	bxeq lr
	add r0, r0, r2
	ldrb r2, [r0], #1
	cmp r2, #0
	bne _020A8060
	bx lr
	arm_func_end FUN_020A8054

	arm_func_start FUN_020A8084
FUN_020A8084: @ 0x020A8084
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x40
	mov sb, r2
	lsl r2, sb, #8
	mov sl, r1
	orr r1, r2, sb, asr #8
	strh r1, [sp, #4]
	cmp sl, #0x20
	mov r6, #0
	movne r1, #1
	strhne r1, [sp, #6]
	ldreq r1, _020A8324 @ =0x00001001
	strh r6, [sp, #0xa]
	strheq r1, [sp, #6]
	mov r1, #0x100
	strh r1, [sp, #8]
	add r1, sp, #0x10
	strh r6, [sp, #0xc]
	strh r6, [sp, #0xe]
	str r6, [sp]
	ldrb r7, [r0], #1
	mov fp, r3
	ldr r8, [sp, #0x68]
	add r2, r1, #1
	cmp r7, #0
	beq _020A814C
	mov r4, r6
	add r5, sp, #4
	mov r3, r6
_020A80F8:
	cmp r7, #0x2e
	beq _020A8128
	sub r6, r2, r5
	cmp r6, #0x3c
	addge sp, sp, #0x40
	mvnge r0, #0
	popge {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	add r6, r4, #1
	mov r4, r6
	str r6, [sp]
	strb r7, [r2], #1
	b _020A8140
_020A8128:
	strb r6, [r1]
	mov r1, r2
	mov r4, r3
	mov r6, r3
	str r3, [sp]
	add r2, r2, #1
_020A8140:
	ldrb r7, [r0], #1
	cmp r7, #0
	bne _020A80F8
_020A814C:
	ldr r0, [sp]
	mov r3, #0
	strb r0, [r1]
	strb r3, [r2]
	lsr r0, sl, #8
	strb r0, [r2, #1]
	strb sl, [r2, #2]
	strb r3, [r2, #3]
	mov r3, #1
	add r0, sp, #4
	add r1, r2, #5
	sub r1, r1, r0
	strb r3, [r2, #4]
	bl FUN_020A7260
	mov r4, #0
	bl FUN_020D34B0
	lsr r5, r0, #0x10
	orr r5, r5, r1, lsl #16
	b _020A82E4
_020A8198:
	bl FUN_020A72F8
	cmp r0, #0
	bne _020A81AC
	bl FUN_020A3978
	b _020A82E4
_020A81AC:
	add r0, sp, #0
	bl FUN_020A6D58
	ldr r1, [sp]
	cmp r1, #0xc
	bls _020A82DC
	ldrh r3, [r0]
	lsl r2, r3, #8
	orr r2, r2, r3, asr #8
	lsl r2, r2, #0x10
	cmp sb, r2, lsr #16
	bne _020A82DC
	ldrb r2, [r0, #3]
	and r2, r2, #0xf
	cmp r2, #3
	mvneq r4, #0
	beq _020A82DC
	cmp r2, #0
	bne _020A82DC
	ldrb r3, [r0, #4]
	ldrb r2, [r0, #5]
	add r6, r0, r1
	add r0, r0, #0xc
	orr r1, r2, r3, lsl #8
	lsl r1, r1, #0x10
	lsrs r1, r1, #0x10
	sub r7, r1, #1
	beq _020A822C
_020A8218:
	bl FUN_020A8054
	cmp r7, #0
	add r0, r0, #4
	sub r7, r7, #1
	bne _020A8218
_020A822C:
	cmp r0, r6
	bhs _020A82DC
_020A8234:
	bl FUN_020A8054
	ldrb r7, [r0, #8]
	ldrb r1, [r0, #9]
	ldrb r3, [r0]
	ldrb r2, [r0, #1]
	orr r1, r1, r7, lsl #8
	lsl r1, r1, #0x10
	orr r2, r2, r3, lsl #8
	lsl r2, r2, #0x10
	cmp sl, r2, lsr #16
	lsr r2, r1, #0x10
	bne _020A82CC
	cmp sl, #0xc
	beq _020A82AC
	add r4, r0, #8
	add r0, r0, #6
	add r6, r4, r2
	add r1, r0, r2
	ldrb r3, [r0, r2]
	ldrb r0, [r1, #1]
	ldrb r2, [r4, r2]
	ldrb r1, [r6, #1]
	orr r0, r0, r3, lsl #8
	lsl r0, r0, #0x10
	orr r1, r1, r2, lsl #8
	lsl r1, r1, #0x10
	lsr r2, r0, #0x10
	lsr r0, r1, #0x10
	orr r4, r0, r2, lsl #16
	b _020A82DC
_020A82AC:
	cmp r2, r8
	movhi r4, #2
	bhi _020A82DC
	mov r1, fp
	add r0, r0, #0xa
	bl FUN_020D4A50
	mov r4, #1
	b _020A82DC
_020A82CC:
	add r1, r2, #0xa
	add r0, r0, r1
	cmp r0, r6
	blo _020A8234
_020A82DC:
	ldr r0, [sp]
	bl FUN_020A6E4C
_020A82E4:
	ldr r0, _020A8328 @ =0x021D4620
	ldr r0, [r0, #0x48]
	blx r0
	cmp r0, #0
	beq _020A8318
	cmp r4, #0
	bne _020A8318
	bl FUN_020D34B0
	lsr r0, r0, #0x10
	orr r0, r0, r1, lsl #16
	sub r0, r0, r5
	cmp r0, #0xf
	blt _020A8198
_020A8318:
	mov r0, r4
	add sp, sp, #0x40
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020A8324: .4byte 0x00001001
_020A8328: .4byte 0x021D4620
	arm_func_end FUN_020A8084

	arm_func_start FUN_020A832C
FUN_020A832C: @ 0x020A832C
	str r0, [r1]
	mov ip, #0
	mov r2, #0xa
_020A8338:
	ldrb r3, [r0]
	sub r3, r3, #0x30
	and r3, r3, #0xff
	cmp r3, #9
	mlals ip, r2, ip, r3
	addls r0, r0, #1
	strls r0, [r1]
	bls _020A8338
	mov r0, ip
	bx lr
	arm_func_end FUN_020A832C

	arm_func_start FUN_020A8360
FUN_020A8360: @ 0x020A8360
	push {r3, r4, r5, r6, r7, r8, lr}
	sub sp, sp, #4
	mov r5, #0
	mov r8, r0
	mov r7, r1
	mov r6, r5
	add r4, sp, #0
_020A837C:
	mov r0, r8
	mov r1, r4
	bl FUN_020A832C
	ldr r2, [sp]
	cmp r8, r2
	addeq sp, sp, #4
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, pc}
	mov r8, r2
	cmp r0, #0xff
	bhi _020A83D0
	cmp r6, #3
	ldrbne r1, [r2]
	addne r8, r2, #1
	cmpne r1, #0x2e
	bne _020A83D0
	cmp r6, #3
	bne _020A83DC
	ldrb r1, [r8]
	cmp r1, #0
	beq _020A83DC
_020A83D0:
	add sp, sp, #4
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, pc}
_020A83DC:
	add r6, r6, #1
	cmp r6, #4
	orr r5, r0, r5, lsl #8
	blt _020A837C
	str r5, [r7]
	mov r0, #1
	add sp, sp, #4
	pop {r3, r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020A8360

	arm_func_start FUN_020A83FC
FUN_020A83FC: @ 0x020A83FC
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #4
	movs r5, r1
	mov r6, r0
	mov r4, r2
	addeq sp, sp, #4
	mvneq r0, #0
	popeq {r3, r4, r5, r6, pc}
	bl FUN_020A6930
	bl FUN_020A68A4
	mov r2, r5
	mov r0, #0
	mov r1, #0x35
	bl FUN_020A68D0
	mov r0, r6
	mov r2, r4
	mov r3, #0
	str r3, [sp]
	mov r1, #1
	bl FUN_020A8084
	mov r4, r0
	bl FUN_020A6964
	mov r0, r4
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
	arm_func_end FUN_020A83FC

	arm_func_start FUN_020A8460
FUN_020A8460: @ 0x020A8460
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0xc
	ldr r2, _020A8590 @ =0x021D4620
	mov r6, #0
	ldr r5, [r2, #0x70]
	ldr r3, [r2, #0x68]
	ldr r1, [r2, #0x6c]
	umull r8, r7, r5, r3
	ldr sb, [r2, #0x78]
	mla r7, r5, r1, r7
	ldr r4, [r2, #0x74]
	adds fp, sb, r8
	mla r7, r4, r3, r7
	ldr r8, [r2, #0x7c]
	umull r3, r1, r5, fp
	adc sl, r8, r7
	mla r1, r5, sl, r1
	str fp, [r2, #0x68]
	lsl r7, r6, #0x10
	adds r5, sb, r3
	mla r1, r4, fp, r1
	str sl, [r2, #0x6c]
	orr r7, r7, sl, lsr #16
	adc r4, r8, r1
	lsl r3, r6, #0x10
	str r5, [r2, #0x68]
	orr r3, r3, r4, lsr #16
	add r1, sp, #8
	mov sl, r0
	strh r7, [sp, #2]
	str r4, [r2, #0x6c]
	strh r3, [sp, #4]
	bl FUN_020A8360
	cmp r0, #0
	ldrne r0, [sp, #8]
	addne sp, sp, #0xc
	popne {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r0, #1
	mov fp, r6
	ldr r7, _020A8594 @ =0x021D4680
	strb r0, [sp]
	strb r0, [sp, #1]
	add r6, sp, #2
	mov r5, fp
	mvn r4, #0
_020A8514:
	mov r8, #0
	add sb, sp, #0
_020A851C:
	ldrb r0, [sb]
	cmp r0, #0
	beq _020A8554
	lsl r0, r8, #1
	ldrh r2, [r6, r0]
	ldr r1, [r7, r8, lsl #2]
	mov r0, sl
	bl FUN_020A83FC
	cmp r0, #0
	str r0, [sp, #8]
	cmpne r0, r4
	bne _020A8570
	cmp r0, r4
	strbeq r5, [sb]
_020A8554:
	add r8, r8, #1
	cmp r8, #2
	add sb, sb, #1
	blt _020A851C
	add fp, fp, #1
	cmp fp, #3
	blt _020A8514
_020A8570:
	ldr r1, [sp, #8]
	mvn r0, #0
	cmp r1, r0
	moveq r0, #0
	streq r0, [sp, #8]
	ldr r0, [sp, #8]
	add sp, sp, #0xc
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020A8590: .4byte 0x021D4620
_020A8594: .4byte 0x021D4680
	arm_func_end FUN_020A8460

	arm_func_start FUN_020A8598
FUN_020A8598: @ 0x020A8598
	push {r4, r5, r6, r7, r8, lr}
	mov r7, r0
	bl FUN_020D3A38
	mov r4, #0
	ldr r6, _020A8628 @ =0x021D5E68
	mov r5, r0
	strb r4, [r7, #0x30]
	mov r8, #0x20
_020A85B8:
	ldrb r0, [r6, #0x5a]
	cmp r0, #0
	beq _020A860C
	ldr r0, [r6, #0x54]
	cmp r0, #0
	ldrheq r0, [r6, #0x58]
	cmpeq r0, #0
	bne _020A860C
	mov r0, r6
	mov r2, r8
	add r1, r7, #0x74
	bl FUN_020E5BB0
	cmp r0, #0
	bne _020A860C
	mov r1, r7
	add r0, r6, #0x20
	mov r2, #0x30
	bl FUN_020D4A50
	mov r0, #1
	strb r0, [r7, #0x30]
	b _020A861C
_020A860C:
	add r4, r4, #1
	cmp r4, #4
	add r6, r6, #0x5c
	blt _020A85B8
_020A861C:
	mov r0, r5
	bl FUN_020D3A4C
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0
_020A8628: .4byte 0x021D5E68
	arm_func_end FUN_020A8598

	arm_func_start FUN_020A862C
FUN_020A862C: @ 0x020A862C
	push {r4, r5, r6, r7, r8, lr}
	mov r8, r0
	mov r7, r1
	mov r6, r2
	bl FUN_020D3A38
	mov r1, #0
	ldr r5, _020A86C8 @ =0x021D5E68
	mov r4, r0
	strb r1, [r8, #0x30]
_020A8650:
	ldrb r0, [r5, #0x5a]
	cmp r0, #0
	beq _020A86AC
	ldr r0, [r5, #0x54]
	cmp r0, r7
	ldrheq r0, [r5, #0x58]
	cmpeq r0, r6
	bne _020A86AC
	mov r0, r5
	add r1, r8, #0x74
	mov r2, #0x20
	bl FUN_020D4A50
	mov r1, r8
	add r0, r5, #0x20
	mov r2, #0x30
	bl FUN_020D4A50
	bl FUN_020D34B0
	lsr r0, r0, #0x10
	orr r0, r0, r1, lsl #16
	str r0, [r5, #0x50]
	mov r0, #1
	strb r0, [r8, #0x30]
	b _020A86BC
_020A86AC:
	add r1, r1, #1
	cmp r1, #4
	add r5, r5, #0x5c
	blt _020A8650
_020A86BC:
	mov r0, r4
	bl FUN_020D3A4C
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0
_020A86C8: .4byte 0x021D5E68
	arm_func_end FUN_020A862C

	arm_func_start FUN_020A86CC
FUN_020A86CC: @ 0x020A86CC
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r8, r0
	mov r7, r1
	mov r6, r2
	bl FUN_020D3A38
	mov r4, r0
	bl FUN_020D34B0
	ldr sb, _020A87B4 @ =0x021D5E68
	lsr r5, r0, #0x10
	mov r2, #0
	mov r0, r2
	mov r3, sb
	orr r5, r5, r1, lsl #16
	mvn ip, #0
_020A8704:
	ldrb lr, [r3, #0x5a]
	cmp lr, #0
	cmpne r7, #0
	beq _020A8738
	ldr r1, [r3, #0x54]
	cmp r7, r1
	bne _020A8738
	cmp r6, #0
	beq _020A8738
	ldrh r1, [r3, #0x58]
	cmp r6, r1
	moveq sb, r3
	beq _020A8774
_020A8738:
	cmp r2, ip
	beq _020A8764
	cmp lr, #0
	moveq r2, ip
	moveq sb, r3
	beq _020A8764
	ldr r1, [r3, #0x50]
	sub r1, r5, r1
	cmp r1, r2
	movhi r2, r1
	movhi sb, r3
_020A8764:
	add r0, r0, #1
	cmp r0, #4
	add r3, r3, #0x5c
	blt _020A8704
_020A8774:
	mov r1, sb
	add r0, r8, #0x74
	mov r2, #0x20
	bl FUN_020D4A50
	mov r0, r8
	add r1, sb, #0x20
	mov r2, #0x30
	bl FUN_020D4A50
	str r5, [sb, #0x50]
	mov r0, #1
	strb r0, [sb, #0x5a]
	str r7, [sb, #0x54]
	mov r0, r4
	strh r6, [sb, #0x58]
	bl FUN_020D3A4C
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0
_020A87B4: .4byte 0x021D5E68
	arm_func_end FUN_020A86CC

	arm_func_start FUN_020A87B8
FUN_020A87B8: @ 0x020A87B8
	push {r4, r5, r6, r7, r8, lr}
	mov r8, r0
	bl FUN_020D3A38
	ldr r7, _020A881C @ =0x021D5E68
	mov r6, r0
	mov r5, #0
	mov r4, #0x20
_020A87D4:
	ldrb r0, [r7, #0x5a]
	cmp r0, #0
	beq _020A8800
	mov r0, r7
	mov r2, r4
	add r1, r8, #0x74
	bl FUN_020E5BB0
	cmp r0, #0
	moveq r0, #0
	strbeq r0, [r7, #0x5a]
	beq _020A8810
_020A8800:
	add r5, r5, #1
	cmp r5, #4
	add r7, r7, #0x5c
	blt _020A87D4
_020A8810:
	mov r0, r6
	bl FUN_020D3A4C
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0
_020A881C: .4byte 0x021D5E68
	arm_func_end FUN_020A87B8

	arm_func_start FUN_020A8820
FUN_020A8820: @ 0x020A8820
	stmdb sp!, {lr}
	sub sp, sp, #0x1c
	add r0, sp, #0xc
	bl FUN_020DBA9C
	add r0, sp, #0
	bl FUN_020DBB48
	add r0, sp, #0xc
	add r1, sp, #0
	bl FUN_020DC330
	ldr r1, _020A8854 @ =0x386D4380
	add r0, r0, r1
	add sp, sp, #0x1c
	ldm sp!, {pc}
	.align 2, 0
_020A8854: .4byte 0x386D4380
	arm_func_end FUN_020A8820

	arm_func_start FUN_020A8858
FUN_020A8858: @ 0x020A8858
	ldr r0, _020A8864 @ =_021106B0
	ldr r0, [r0, #4]
	bx lr
	.align 2, 0
_020A8864: .4byte _021106B0
	arm_func_end FUN_020A8858

	arm_func_start FUN_020A8868
FUN_020A8868: @ 0x020A8868
	ldr r1, _020A8874 @ =_021106B0
	str r0, [r1, #4]
	bx lr
	.align 2, 0
_020A8874: .4byte _021106B0
	arm_func_end FUN_020A8868

	arm_func_start FUN_020A8878
FUN_020A8878: @ 0x020A8878
	push {r3, r4, r5, lr}
	ldr r0, _020A88BC @ =_021106B0
	ldr r0, [r0, #4]
	cmp r0, #0x20
	mvnhs r0, #0
	pophs {r3, r4, r5, pc}
	ldr r0, _020A88C0 @ =0x021E16A0
	ldr r5, [r0, #4]
	mov r0, r5
	bl FUN_020D2100
	ldr r1, _020A88BC @ =_021106B0
	mov r4, r0
	ldr r1, [r1, #4]
	mov r0, r5
	bl FUN_020D2058
	mov r0, r4
	pop {r3, r4, r5, pc}
	.align 2, 0
_020A88BC: .4byte _021106B0
_020A88C0: .4byte 0x021E16A0
	arm_func_end FUN_020A8878

	arm_func_start FUN_020A88C4
FUN_020A88C4: @ 0x020A88C4
	push {r3, lr}
	mov r1, r0
	cmp r1, #0x20
	pophs {r3, pc}
	ldr r0, _020A88E4 @ =0x021E16A0
	ldr r0, [r0, #4]
	bl FUN_020D2058
	pop {r3, pc}
	.align 2, 0
_020A88E4: .4byte 0x021E16A0
	arm_func_end FUN_020A88C4

	arm_func_start FUN_020A88E8
FUN_020A88E8: @ 0x020A88E8
	ldr r2, _020A890C @ =0x021E16A0
	ldr r2, [r2, #4]
	ldr r2, [r2, #0xa4]
	cmp r2, #0
	ldrne r2, [r2, #0xc]
	cmpne r2, #0
	strne r0, [r2, #0x814]
	strne r1, [r2, #0x818]
	bx lr
	.align 2, 0
_020A890C: .4byte 0x021E16A0
	arm_func_end FUN_020A88E8

	arm_func_start FUN_020A8910
FUN_020A8910: @ 0x020A8910
	push {r4, r5, r6, r7, r8, lr}
	ldr r6, [r0, #0x818]
	mov r8, r1
	cmp r6, #0
	mov r4, #0
	ble _020A8954
	ldr r5, [r0, #0x814]
_020A892C:
	ldr r7, [r5, r4, lsl #2]
	mov r1, r8
	ldr r0, [r7]
	bl FUN_020E9734
	cmp r0, #0
	moveq r0, r7
	popeq {r4, r5, r6, r7, r8, pc}
	add r4, r4, #1
	cmp r4, r6
	blt _020A892C
_020A8954:
	mov r0, #0
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020A8910

	arm_func_start FUN_020A895C
FUN_020A895C: @ 0x020A895C
	ldr r1, [r0]
	ldrb r2, [r1]
	add r3, r1, #1
	tst r2, #0x80
	beq _020A89A0
	ands r1, r2, #0x7f
	sub ip, r1, #1
	mov r2, #0
	beq _020A89A0
_020A8980:
	tst r2, #0xff000000
	mvnne r0, #0
	bxne lr
	ldrb r1, [r3], #1
	cmp ip, #0
	sub ip, ip, #1
	add r2, r1, r2, lsl #8
	bne _020A8980
_020A89A0:
	str r3, [r0]
	mov r0, r2
	bx lr
	arm_func_end FUN_020A895C

	arm_func_start FUN_020A89AC
FUN_020A89AC: @ 0x020A89AC
	ldrsb r3, [r0]
	mov ip, r0
	cmp r3, #0
	beq _020A89F4
_020A89BC:
	ldrsb r3, [r0, #1]!
	cmp r3, #0
	bne _020A89BC
	sub r3, r0, ip
	cmp r3, #0xff
	bxge lr
	mov r3, #0x2c
	strb r3, [r0]
	mov r3, #0x20
	strb r3, [r0, #1]
	add r0, r0, #2
	b _020A89F4
_020A89EC:
	ldrsb r3, [r1], #1
	strb r3, [r0], #1
_020A89F4:
	cmp r2, #0
	sub r2, r2, #1
	beq _020A8A0C
	sub r3, r0, ip
	cmp r3, #0xff
	blt _020A89EC
_020A8A0C:
	mov r1, #0
	strb r1, [r0]
	bx lr
	arm_func_end FUN_020A89AC

	arm_func_start FUN_020A8A18
FUN_020A8A18: @ 0x020A8A18
	push {r4, lr}
	ldrb ip, [r0, #1]
	ldrb r3, [r0], #2
	mov r2, #0xa
	cmp r1, #0x17
	mla r1, r3, r2, ip
	sub lr, r1, #0x210
	bne _020A8A4C
	cmp lr, #0x32
	addlo r4, lr, #0x7d0
	addhs r1, lr, #0x36c
	addhs r4, r1, #0x400
	b _020A8A64
_020A8A4C:
	ldrb ip, [r0, #1]
	ldrb r3, [r0], #2
	mov r1, #0x64
	mla r2, r3, r2, ip
	sub r2, r2, #0x210
	mla r4, lr, r1, r2
_020A8A64:
	ldrb ip, [r0, #1]
	ldrb r3, [r0]
	mov r1, #0xa
	ldrb r2, [r0, #3]
	ldrb r0, [r0, #2]
	mla ip, r3, r1, ip
	mla r1, r0, r1, r2
	sub r0, ip, #0x210
	lsl r0, r0, #8
	add r2, r0, r4, lsl #16
	sub r0, r1, #0x210
	add r0, r2, r0
	pop {r4, pc}
	arm_func_end FUN_020A8A18

	arm_func_start FUN_020A8A98
FUN_020A8A98: @ 0x020A8A98
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #8
	mov fp, r1
	ldr r1, [fp]
	mov sb, r0
	add r0, r1, #1
	str r0, [sp, #4]
	add r0, sp, #4
	mov r7, r2
	mov r6, r3
	ldr r8, [sp, #0x30]
	ldrb r5, [r1]
	bl FUN_020A895C
	movs r4, r0
	bmi _020A8ADC
	cmp r4, #0x7d0
	ble _020A8AE8
_020A8ADC:
	add sp, sp, #8
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020A8AE8:
	and r1, r5, #0x1f
	cmp r1, #0x18
	addls pc, pc, r1, lsl #2
	b _020A8F0C
_020A8AF8: @ jump table
	b _020A8F0C @ case 0
	b _020A8F0C @ case 1
	b _020A8B5C @ case 2
	b _020A8C54 @ case 3
	b _020A8F0C @ case 4
	b _020A8F0C @ case 5
	b _020A8CD4 @ case 6
	b _020A8F0C @ case 7
	b _020A8F0C @ case 8
	b _020A8F0C @ case 9
	b _020A8F0C @ case 10
	b _020A8F0C @ case 11
	b _020A8D6C @ case 12
	b _020A8F0C @ case 13
	b _020A8F0C @ case 14
	b _020A8F0C @ case 15
	b _020A8E3C @ case 16
	b _020A8EBC @ case 17
	b _020A8F0C @ case 18
	b _020A8D6C @ case 19
	b _020A8D6C @ case 20
	b _020A8F0C @ case 21
	b _020A8D6C @ case 22
	b _020A8DEC @ case 23
	b _020A8DEC @ case 24
_020A8B5C:
	ldrb r0, [sb, #0x5ad]
	cmp r0, #0
	beq _020A8C44
	cmp r6, #0
	bne _020A8BDC
	ldr r0, [sp, #4]
	ldrb r1, [r0]
	cmp r1, #0
	bne _020A8B98
_020A8B80:
	add r0, r0, #1
	str r0, [sp, #4]
	ldrb r1, [r0]
	sub r4, r4, #1
	cmp r1, #0
	beq _020A8B80
_020A8B98:
	cmp r8, #0
	beq _020A8BAC
	cmp r8, #2
	beq _020A8BCC
	b _020A8C44
_020A8BAC:
	cmp r4, #0x100
	bgt _020A8C44
	add r1, sb, #0x94
	mov r2, r4
	add r1, r1, #0x400
	bl FUN_020D4A50
	str r4, [sb, #0x594]
	b _020A8C44
_020A8BCC:
	str r4, [sb, #0x484]
	ldr r0, [sp, #4]
	str r0, [sb, #0x488]
	b _020A8C44
_020A8BDC:
	cmp r6, #1
	bne _020A8C44
	ldr r0, [sp, #4]
	ldrb r1, [r0]
	cmp r1, #0
	bne _020A8C0C
_020A8BF4:
	add r0, r0, #1
	str r0, [sp, #4]
	ldrb r1, [r0]
	sub r4, r4, #1
	cmp r1, #0
	beq _020A8BF4
_020A8C0C:
	cmp r8, #0
	beq _020A8C28
	cmp r8, #2
	streq r4, [sb, #0x48c]
	ldreq r0, [sp, #4]
	streq r0, [sb, #0x490]
	b _020A8C44
_020A8C28:
	cmp r4, #8
	bgt _020A8C44
	add r1, sb, #0x198
	mov r2, r4
	add r1, r1, #0x400
	bl FUN_020D4A50
	str r4, [sb, #0x5a0]
_020A8C44:
	ldr r0, [sp, #4]
	add r0, r0, r4
	str r0, [sp, #4]
	b _020A8F70
_020A8C54:
	cmp r7, #1
	bne _020A8C78
	cmp r8, #2
	beq _020A8C78
	ldr r1, [sp, #4]
	sub r0, r4, #1
	add r1, r1, #1
	str r1, [sb, #0x5a4]
	str r0, [sb, #0x5a8]
_020A8C78:
	ldrb r0, [sb, #0x5ad]
	cmp r0, #0
	beq _020A8CC4
	ldr r0, [sp, #4]
	add r1, sp, #4
	add r0, r0, #1
	str r0, [sp, #4]
	mov r0, sb
	mov r2, r7
	mov r3, #0
	str r8, [sp]
	bl FUN_020A8A98
	cmp r0, #0
	addne sp, sp, #8
	movne r0, #1
	popne {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r0, #0
	strb r0, [sb, #0x5ad]
	b _020A8F70
_020A8CC4:
	ldr r0, [sp, #4]
	add r0, r0, r4
	str r0, [sp, #4]
	b _020A8F70
_020A8CD4:
	ldr r6, [sp, #4]
	ldr sl, _020A8F84 @ =_021106B8
	mov r5, #0
_020A8CE0:
	ldr r7, [sl, r5, lsl #2]
	mov r0, r7
	bl FUN_020E9580
	mov r2, r0
	mov r0, r6
	mov r1, r7
	bl FUN_020E5BB0
	cmp r0, #0
	bne _020A8D50
	cmp r5, #5
	addls pc, pc, r5, lsl #2
	b _020A8D5C
_020A8D10: @ jump table
	b _020A8D5C @ case 0
	b _020A8D28 @ case 1
	b _020A8D28 @ case 2
	b _020A8D38 @ case 3
	b _020A8D38 @ case 4
	b _020A8D44 @ case 5
_020A8D28:
	cmp r8, #0
	streq r5, [sb, #0x45c]
	strb r5, [sb, #0x5ad]
	b _020A8D5C
_020A8D38:
	cmp r8, #2
	strne r5, [sb, #0x458]
	b _020A8D5C
_020A8D44:
	cmp r8, #2
	strbne r5, [sb, #0x5ae]
	b _020A8D5C
_020A8D50:
	add r5, r5, #1
	cmp r5, #6
	blt _020A8CE0
_020A8D5C:
	ldr r0, [sp, #4]
	add r0, r0, r4
	str r0, [sp, #4]
	b _020A8F70
_020A8D6C:
	cmp r8, #2
	beq _020A8DD4
	ldrb r0, [sb, #0x5ac]
	cmp r0, #0
	beq _020A8DC4
	ldr r1, [sp, #4]
	mov r2, r4
	add r0, sb, #0x6b0
	bl FUN_020A89AC
	ldrb r0, [sb, #0x5ae]
	cmp r0, #5
	bne _020A8DD4
	cmp r4, #0x4f
	bgt _020A8DD4
	ldr r0, [sp, #4]
	mov r2, r4
	add r1, sb, #0x7b0
	bl FUN_020D4A50
	add r0, sb, r4
	mov r1, #0
	strb r1, [r0, #0x7b0]
	b _020A8DD4
_020A8DC4:
	ldr r1, [sp, #4]
	mov r2, r4
	add r0, sb, #0x5b0
	bl FUN_020A89AC
_020A8DD4:
	mov r0, #0
	strb r0, [sb, #0x5ae]
	ldr r0, [sp, #4]
	add r0, r0, r4
	str r0, [sp, #4]
	b _020A8F70
_020A8DEC:
	cmp r8, #2
	beq _020A8E24
	ldr r0, [sp, #4]
	bl FUN_020A8A18
	cmp r6, #0
	ldr r1, [sb, #0x80c]
	bne _020A8E18
	cmp r1, r0
	movhs r0, #1
	strbhs r0, [sb, #0x5af]
	b _020A8E24
_020A8E18:
	cmp r1, r0
	movhi r0, #0
	strbhi r0, [sb, #0x5af]
_020A8E24:
	ldr r1, [sp, #4]
	mov r0, #1
	add r1, r1, r4
	str r1, [sp, #4]
	strb r0, [sb, #0x5ac]
	b _020A8F70
_020A8E3C:
	cmp r7, #0
	cmpeq r6, #0
	bne _020A8E54
	cmp r8, #2
	ldrne r0, [sp, #4]
	strne r0, [sb, #0x460]
_020A8E54:
	ldr r0, [sp, #4]
	mov r5, #0
	add sl, r0, r4
	cmp r0, sl
	bhs _020A8EA4
	add r4, sp, #4
_020A8E6C:
	mov r0, sb
	mov r1, r4
	mov r3, r5
	add r2, r7, #1
	str r8, [sp]
	bl FUN_020A8A98
	cmp r0, #0
	add r5, r5, #1
	addne sp, sp, #8
	movne r0, #1
	popne {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, [sp, #4]
	cmp r0, sl
	blo _020A8E6C
_020A8EA4:
	cmp r7, #1
	cmpeq r6, #0
	bne _020A8F70
	cmp r8, #2
	strne r0, [sb, #0x464]
	b _020A8F70
_020A8EBC:
	ldr r0, [sp, #4]
	add r6, r0, r4
	cmp r0, r6
	bhs _020A8F70
	add r5, sp, #4
	mov r4, #0
_020A8ED4:
	mov r0, sb
	mov r1, r5
	mov r3, r4
	add r2, r7, #1
	str r8, [sp]
	bl FUN_020A8A98
	cmp r0, #0
	addne sp, sp, #8
	movne r0, #1
	popne {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, [sp, #4]
	cmp r0, r6
	blo _020A8ED4
	b _020A8F70
_020A8F0C:
	cmp r5, #0xa0
	bne _020A8F64
	ldr r0, [sp, #4]
	add r6, r0, r4
	cmp r0, r6
	bhs _020A8F70
	add r5, sp, #4
	mov r4, #0
_020A8F2C:
	mov r0, sb
	mov r1, r5
	mov r3, r4
	add r2, r7, #1
	str r8, [sp]
	bl FUN_020A8A98
	cmp r0, #0
	addne sp, sp, #8
	movne r0, #1
	popne {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, [sp, #4]
	cmp r0, r6
	blo _020A8F2C
	b _020A8F70
_020A8F64:
	ldr r0, [sp, #4]
	add r0, r0, r4
	str r0, [sp, #4]
_020A8F70:
	ldr r1, [sp, #4]
	mov r0, #0
	str r1, [fp]
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020A8F84: .4byte _021106B8
	arm_func_end FUN_020A8A98

	arm_func_start FUN_020A8F88
FUN_020A8F88: @ 0x020A8F88
	push {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #4
	mov r8, r0
	ldr r0, [r8, #0x5a4]
	mov r7, r1
	cmp r0, #0
	ldrne r0, [r8, #0x5a8]
	cmpne r0, #0
	ldrne r0, [r7, #0x10]
	cmpne r0, #0
	ldrne r0, [r7, #0xc]
	cmpne r0, #0
	ldrne r0, [r7, #8]
	cmpne r0, #0
	ldrne r0, [r7, #4]
	cmpne r0, #0
	addeq sp, sp, #4
	moveq r0, #2
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	lsl r0, r0, #1
	ldr r1, _020A9128 @ =0x021D4634
	add r0, r0, r0, lsr #31
	asr r5, r0, #1
	ldr r1, [r1]
	lsl r0, r5, #3
	blx r1
	movs r4, r0
	addeq sp, sp, #4
	moveq r0, #2
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	add r6, r4, r5, lsl #1
	add sb, r6, r5, lsl #1
	ldr r1, [r8, #0x5a4]
	ldr r2, [r8, #0x5a8]
	mov r0, r6
	mov r3, r5
	add sl, sb, r5, lsl #1
	bl FUN_020AD7B0
	ldr r1, [r7, #0x10]
	ldr r2, [r7, #0xc]
	mov r0, sb
	mov r3, r5
	bl FUN_020AD7B0
	ldr r1, [r7, #8]
	ldr r2, [r7, #4]
	mov r0, sl
	mov r3, r5
	bl FUN_020AD7B0
	bl FUN_020A8878
	mov r2, sb
	mov sb, r0
	mov r0, r4
	mov r1, r6
	mov r3, r5
	str sl, [sp]
	bl FUN_020AD19C
	mov r0, sb
	bl FUN_020A88C4
	ldr r2, [r7, #4]
	mov r0, r6
	mov r1, r4
	mov r3, r5
	bl FUN_020AD80C
	ldrb r0, [r4, r5, lsl #1]
	mov r5, #0
	cmp r0, #0
	ldrbeq r0, [r6, #1]
	cmpeq r0, #1
	movne r5, #2
	bne _020A910C
	ldr r3, [r7, #4]
	mov r2, #2
	cmp r3, #2
	ble _020A90C8
_020A90B0:
	ldrb r0, [r6, r2]
	cmp r0, #0xff
	bne _020A90C8
	add r2, r2, #1
	cmp r2, r3
	blt _020A90B0
_020A90C8:
	add r1, r2, #1
	cmp r1, r3
	bge _020A9108
	ldrb r0, [r6, r2]
	cmp r0, #0
	ldrbeq r0, [r6, r1]
	cmpeq r0, #0x30
	bne _020A9108
	ldr r2, [r8, #0x47c]
	add r0, r8, #0x68
	add r1, r6, r3
	add r0, r0, #0x400
	sub r1, r1, r2
	bl FUN_020E5BB0
	cmp r0, #0
	beq _020A910C
_020A9108:
	mov r5, #2
_020A910C:
	ldr r1, _020A912C @ =0x021D4660
	mov r0, r4
	ldr r1, [r1]
	blx r1
	mov r0, r5
	add sp, sp, #4
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0
_020A9128: .4byte 0x021D4634
_020A912C: .4byte 0x021D4660
	arm_func_end FUN_020A8F88

	arm_func_start FUN_020A9130
FUN_020A9130: @ 0x020A9130
	push {r3, r4, r5, lr}
	mov r5, r0
	ldrb r0, [r5, #0x5af]
	ldr r1, [r5, #0x45c]
	cmp r0, #0
	movne r4, #0
	moveq r4, #0x8000
	mvn r0, #0
	cmp r1, r0
	orreq r0, r4, #4
	popeq {r3, r4, r5, pc}
	ldr r0, [r5, #0x458]
	cmp r0, #3
	beq _020A9174
	cmp r0, #4
	beq _020A91AC
	b _020A91E4
_020A9174:
	add r0, r5, #0x3fc
	bl FUN_020ABEC0
	ldr r1, [r5, #0x460]
	ldr r2, [r5, #0x464]
	add r0, r5, #0x3fc
	sub r2, r2, r1
	bl FUN_020ABF08
	add r1, r5, #0x68
	add r0, r5, #0x3fc
	add r1, r1, #0x400
	bl FUN_020ABFC0
	mov r0, #0x10
	str r0, [r5, #0x47c]
	b _020A91EC
_020A91AC:
	add r0, r5, #0x348
	bl FUN_020AC780
	ldr r1, [r5, #0x460]
	ldr r2, [r5, #0x464]
	add r0, r5, #0x348
	sub r2, r2, r1
	bl FUN_020AC7D4
	add r1, r5, #0x68
	add r0, r5, #0x348
	add r1, r1, #0x400
	bl FUN_020AC88C
	mov r0, #0x14
	str r0, [r5, #0x47c]
	b _020A91EC
_020A91E4:
	orr r0, r4, #3
	pop {r3, r4, r5, pc}
_020A91EC:
	mov r0, r5
	add r1, r5, #0x5b0
	bl FUN_020A8910
	movs r1, r0
	orreq r0, r4, #1
	popeq {r3, r4, r5, pc}
	mov r0, r5
	bl FUN_020A8F88
	orr r0, r4, r0
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020A9130

	arm_func_start FUN_020A9214
FUN_020A9214: @ 0x020A9214
	mov r2, r0
	b _020A9220
_020A921C:
	add r0, r0, #1
_020A9220:
	ldrsb r1, [r0]
	cmp r1, #0x2e
	cmpne r1, #0
	bne _020A921C
	sub r0, r0, r2
	bx lr
	arm_func_end FUN_020A9214

	arm_func_start FUN_020A9238
FUN_020A9238: @ 0x020A9238
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	b _020A9254
_020A9248:
	cmp r1, #0
	moveq r0, #0
	popeq {r4, r5, r6, pc}
_020A9254:
	ldrsb r0, [r5], #1
	ldrsb r1, [r6], #1
	cmp r1, r0
	beq _020A9248
	cmp r0, #0x2a
	movne r0, #1
	popne {r4, r5, r6, pc}
	sub r6, r6, #1
	mov r0, r6
	bl FUN_020A9214
	mov r4, r0
	mov r0, r5
	bl FUN_020A9214
	cmp r0, r4
	movgt r0, #1
	popgt {r4, r5, r6, pc}
	sub r0, r4, r0
	add r6, r6, r0
	b _020A9254
	arm_func_end FUN_020A9238

	arm_func_start FUN_020A92A0
FUN_020A92A0: @ 0x020A92A0
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020A92A0

	arm_func_start FUN_020A92A4
FUN_020A92A4: @ 0x020A92A4
	push {r0, r1, r2, r3}
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x18
	ldr r1, [sp, #0x44]
	mov sl, r0
	ldrb r4, [r1, #2]
	ldrb r3, [r1]
	ldrb r2, [r1, #1]
	add r0, r1, #3
	mvn r1, #0
	str r0, [sp, #0x44]
	add r2, r2, r3, lsl #8
	add r0, sp, #8
	str r1, [sl, #0x45c]
	add r8, r4, r2, lsl #8
	bl FUN_020DBA9C
	mov r6, #0
	ldr r1, [sp, #8]
	ldr r0, [sp, #0xc]
	add r1, r1, #0x7d0
	lsl r0, r0, #8
	ldr r2, [sp, #0x10]
	add r0, r0, r1, lsl #16
	add r0, r2, r0
	str r0, [sl, #0x80c]
	strb r6, [sl, #0x6b0]
	str r6, [sl, #0x5a0]
	mov sb, r6
	str r6, [sl, #0x594]
	mov fp, #2
	mvn r5, #0
	mov r4, r6
_020A9324:
	ldr r1, [sp, #0x44]
	mov r0, sl
	ldrb r2, [r1, #2]
	ldrb ip, [r1]
	ldrb r3, [r1, #1]
	add r7, r1, #3
	add r1, sp, #0x44
	str r7, [sp, #0x44]
	str r5, [sl, #0x458]
	strb r4, [sl, #0x5ad]
	strb r4, [sl, #0x5ac]
	strb r4, [sl, #0x5af]
	strb r4, [sl, #0x6b0]
	strb r4, [sl, #0x5b0]
	strb r4, [sl, #0x7b0]
	add r3, r3, ip, lsl #8
	ldr r7, [sp, #0x44]
	add r3, r2, r3, lsl #8
	add r2, r3, #3
	str r7, [sl, #0x804]
	str r3, [sl, #0x808]
	sub r8, r8, r2
	mov r2, r4
	mov r3, r4
	str r6, [sp]
	bl FUN_020A8A98
	cmp r0, #0
	bne _020A93AC
	ldr r0, [sl, #0x594]
	cmp r0, #0x33
	blo _020A93AC
	ldr r0, [sl, #0x5a0]
	cmp r0, #0
	bne _020A93C4
_020A93AC:
	mov r0, #9
	add sp, sp, #0x18
	strb r0, [sl, #0x455]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_020A93C4:
	mov r0, sl
	bl FUN_020A9130
	mov r7, r0
	cmp sb, #0
	bne _020A93F4
	ldr r0, [sl, #0x800]
	cmp r0, #0
	beq _020A93F4
	add r1, sl, #0x7b0
	bl FUN_020A9238
	cmp r0, #0
	orrne r7, r7, #0x4000
_020A93F4:
	and r6, r7, #0xff
	cmp r6, #1
	bne _020A9464
	cmp r8, #0
	beq _020A9464
	ldr r1, [sp, #0x44]
	mov r2, #0
	add r1, r1, #3
	str r1, [sp, #4]
	mov r1, #0
	strb r1, [sl, #0x5ad]
	mov r0, sl
	add r1, sp, #4
	mov r3, r2
	str fp, [sp]
	bl FUN_020A8A98
	cmp r0, #0
	movne r0, #9
	addne sp, sp, #0x18
	strbne r0, [sl, #0x455]
	popne {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	addne sp, sp, #0x10
	bxne lr
	mov r0, sl
	add r1, sl, #0x480
	bl FUN_020A8F88
	bic r1, r7, #0xff
	orr r7, r1, r0
_020A9464:
	ldr r3, [sl, #0x810]
	cmp r3, #0
	beq _020A9484
	mov r0, r7
	mov r1, sl
	mov r2, sb
	blx r3
	mov r7, r0
_020A9484:
	cmp r6, #0
	add sb, sb, #1
	beq _020A94A4
	cmp r7, #0
	bne _020A94A4
	cmp r8, #0
	movne r6, #1
	bne _020A9324
_020A94A4:
	cmp r7, #0
	moveq r0, #3
	strbeq r0, [sl, #0x455]
	movne r0, #9
	strbne r0, [sl, #0x455]
	add sp, sp, #0x18
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
	arm_func_end FUN_020A92A4

	arm_func_start FUN_020A94C8
FUN_020A94C8: @ 0x020A94C8
	push {r3, r4, r5, r6, r7, lr}
	mov r6, r0
	mov r5, r1
	add r0, r5, #2
	add r1, r6, #0x54
	mov r2, #0x20
	bl FUN_020D4A50
	ldrb r7, [r6, #0x30]
	ldrb r4, [r5, #0x22]
	add r5, r5, #0x23
	cmp r7, #0
	beq _020A9520
	cmp r4, #0x20
	bne _020A9520
	mov r1, r5
	add r0, r6, #0x74
	mov r2, #0x20
	bl FUN_020E5BB0
	cmp r0, #0
	moveq r0, #1
	strbeq r0, [r6, #0x31]
	beq _020A955C
_020A9520:
	cmp r7, #0
	beq _020A9530
	mov r0, r6
	bl FUN_020A87B8
_020A9530:
	cmp r4, #0
	moveq r0, #0
	beq _020A9550
	mov r0, r5
	add r1, r6, #0x74
	mov r2, #0x20
	bl FUN_020D4A50
	mov r0, #1
_020A9550:
	strb r0, [r6, #0x30]
	mov r0, #0
	strb r0, [r6, #0x31]
_020A955C:
	add r0, r5, r4
	ldrb r2, [r5, r4]
	ldrb r1, [r0, #1]
	mov r0, #2
	add r1, r1, r2, lsl #8
	strh r1, [r6, #0x32]
	strb r0, [r6, #0x455]
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020A94C8

	arm_func_start FUN_020A957C
FUN_020A957C: @ 0x020A957C
	push {r4, lr}
	cmp r1, #0
	mov r4, #0
	ble _020A95C0
_020A958C:
	ldrb lr, [r0]
	ldrb ip, [r0, #1]
	cmp r2, #3
	add lr, ip, lr, lsl #8
	ldrbeq ip, [r0, #2]
	addeq lr, ip, lr, lsl #8
	cmp lr, r3
	moveq r0, #1
	popeq {r4, pc}
	add r4, r4, #1
	cmp r4, r1
	add r0, r0, r2
	blt _020A958C
_020A95C0:
	mov r0, #0
	pop {r4, pc}
	arm_func_end FUN_020A957C

	arm_func_start FUN_020A95C8
FUN_020A95C8: @ 0x020A95C8
	push {r4, r5, r6, r7, r8, lr}
	ldr r4, _020A9624 @ =_021106B0
	mov r8, r0
	mov r7, r1
	mov r6, r2
	mov r5, #0
_020A95E0:
	lsl r0, r5, #1
	ldrh r3, [r4, r0]
	mov r0, r8
	mov r1, r7
	mov r2, r6
	bl FUN_020A957C
	cmp r0, #0
	beq _020A9610
	ldr r0, _020A9624 @ =_021106B0
	lsl r1, r5, #1
	ldrh r0, [r0, r1]
	pop {r4, r5, r6, r7, r8, pc}
_020A9610:
	add r5, r5, #1
	cmp r5, #2
	blo _020A95E0
	mov r0, #0
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0
_020A9624: .4byte _021106B0
	arm_func_end FUN_020A95C8

	arm_func_start FUN_020A9628
FUN_020A9628: @ 0x020A9628
	cmp r0, #3
	moveq r0, #1
	movne r0, #0
	bx lr
	arm_func_end FUN_020A9628

	arm_func_start FUN_020A9638
FUN_020A9638: @ 0x020A9638
	push {r3, r4, r5, r6, r7, lr}
	mov r6, r1
	mov r7, r0
	ldrb r0, [r6]
	ldrb r1, [r6, #1]
	bl FUN_020A9628
	cmp r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	ldrb r2, [r6, #2]
	ldrb r1, [r6, #3]
	ldr r3, _020A96FC @ =0x55555556
	add r0, r6, #8
	add r4, r1, r2, lsl #8
	smull r2, r1, r3, r4
	add r1, r1, r4, lsr #31
	mov r2, #3
	bl FUN_020A95C8
	lsl r0, r0, #0x10
	lsrs r0, r0, #0x10
	popeq {r3, r4, r5, r6, r7, pc}
	strh r0, [r7, #0x32]
	ldrb r5, [r6, #4]
	ldrb r3, [r6, #5]
	ldrb r2, [r6, #6]
	ldrb r0, [r6, #7]
	mov r1, #0
	add r3, r3, r5, lsl #8
	add r5, r0, r2, lsl #8
	add r0, r4, #8
	strb r1, [r7, #0x30]
	cmp r5, #0x20
	add r4, r0, r3
	blt _020A96D0
	add r0, r6, r4
	add r1, r7, #0x34
	mov r2, #0x20
	bl FUN_020D4A50
	b _020A96F0
_020A96D0:
	add r0, r7, #0x34
	rsb r2, r5, #0x20
	bl FUN_020D4994
	add r1, r7, #0x54
	mov r2, r5
	add r0, r6, r4
	sub r1, r1, r5
	bl FUN_020D4A50
_020A96F0:
	mov r0, #1
	strb r0, [r7, #0x455]
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020A96FC: .4byte 0x55555556
	arm_func_end FUN_020A9638

	arm_func_start FUN_020A9700
FUN_020A9700: @ 0x020A9700
	push {r4, r5, r6, lr}
	mov r6, r1
	mov r4, r0
	ldrb r0, [r6]
	ldrb r1, [r6, #1]
	bl FUN_020A9628
	cmp r0, #0
	popeq {r4, r5, r6, pc}
	add r0, r6, #2
	add r1, r4, #0x34
	mov r2, #0x20
	bl FUN_020D4A50
	ldrb r5, [r6, #0x22]
	add r6, r6, #0x23
	cmp r5, #0x20
	movne r0, #0
	strbne r0, [r4, #0x30]
	bne _020A9760
	mov r0, r6
	add r1, r4, #0x74
	mov r2, #0x20
	bl FUN_020D4A50
	mov r0, r4
	bl FUN_020A8598
_020A9760:
	add r0, r6, r5
	ldrb r1, [r0, #1]
	ldrb r3, [r6, r5]
	add r0, r0, #2
	mov r2, #2
	add r1, r1, r3, lsl #8
	add r1, r1, r1, lsr #31
	asr r1, r1, #1
	bl FUN_020A95C8
	lsl r0, r0, #0x10
	lsrs r0, r0, #0x10
	strh r0, [r4, #0x32]
	movne r0, #1
	strbne r0, [r4, #0x455]
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020A9700

	arm_func_start FUN_020A979C
FUN_020A979C: @ 0x020A979C
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x18
	movs sl, r2
	str r0, [sp, #8]
	ldrne r0, [sl]
	mov fp, r1
	cmpne r0, #0
	addeq sp, sp, #0x18
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	lsl r0, r0, #1
	add r0, r0, r0, lsr #31
	asr r0, r0, #1
	add r4, r0, #1
	mov r0, #0x14
	mul r0, r4, r0
	ldr r1, _020A99D4 @ =0x021D4634
	ldr r1, [r1]
	blx r1
	movs r5, r0
	addeq sp, sp, #0x18
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	add r6, r5, r4, lsl #1
	add r7, r6, r4, lsl #1
	add r1, r7, r4, lsl #1
	str r1, [sp, #0x10]
	add r1, r1, r4, lsl #1
	add r8, r1, r4, lsl #1
	str r1, [sp, #0xc]
	ldr r2, [sl]
	add sb, r8, r4, lsl #1
	mov r1, fp
	mov r3, r4
	add fp, sb, r4, lsl #1
	bl FUN_020AD7B0
	ldr r1, [sl, #0x1c]
	ldr r2, [sl, #0x18]
	mov r0, r6
	mov r3, r4
	bl FUN_020AD7B0
	ldr r1, [sl, #0xc]
	ldr r2, [sl, #8]
	mov r0, r8
	mov r3, r4
	bl FUN_020AD7B0
	bl FUN_020A8878
	str r0, [sp, #0x14]
	ldr r0, [sp, #0x10]
	str r8, [sp]
	mov r1, r5
	mov r2, r6
	mov r3, r4
	bl FUN_020AD5A4
	ldr r1, [sl, #0x24]
	ldr r2, [sl, #0x20]
	mov r0, r6
	mov r3, r4
	bl FUN_020AD7B0
	ldr r1, [sl, #0x14]
	ldr r2, [sl, #0x10]
	mov r0, r8
	mov r3, r4
	bl FUN_020AD7B0
	ldr r0, [sp, #0xc]
	mov r1, r5
	mov r2, r6
	mov r3, r4
	str r8, [sp]
	bl FUN_020AD5A4
	ldr r0, [sp, #0x14]
	bl FUN_020A88C4
	ldr r1, [sp, #0x10]
	ldr r2, [sp, #0xc]
	mov r0, r5
	mov r3, r4
	bl FUN_020ACB9C
	ldr r1, [sl, #0x2c]
	ldr r2, [sl, #0x28]
	mov r0, r6
	mov r3, r4
	bl FUN_020AD7B0
	mov r0, r7
	mov r1, r5
	mov r2, r6
	mov r3, r4
	bl FUN_020ACD18
	ldr r1, [sl, #0x14]
	ldr r2, [sl, #0x10]
	mov r0, r6
	mov r3, r4
	bl FUN_020AD7B0
	mov r0, r5
	mov r1, r7
	mov r2, r6
	mov r3, r4
	bl FUN_020ACD18
	ldr r2, [sp, #0xc]
	mov r0, r7
	mov r1, r5
	mov r3, r4
	bl FUN_020ACA5C
	ldr r1, [sl, #4]
	ldr r2, [sl]
	mov r0, r6
	mov r3, r4
	bl FUN_020AD7B0
	mov r0, r7
	mov r1, r4
	bl FUN_020ACA2C
	cmp r0, #0
	bge _020A9990
	mov r0, r7
	mov r1, r4
	bl FUN_020ACB5C
	mov r1, r7
	mov r2, r6
	mov r3, sb
	mov r0, #0
	stm sp, {r4, fp}
	bl FUN_020ACFBC
	mov r0, sb
	mov r1, r6
	mov r2, sb
	mov r3, r4
	bl FUN_020ACB9C
	b _020A99A8
_020A9990:
	mov r1, r7
	mov r2, r6
	mov r3, sb
	mov r0, #0
	stm sp, {r4, fp}
	bl FUN_020ACFBC
_020A99A8:
	ldr r0, [sp, #8]
	mov r1, sb
	mov r3, r4
	mov r2, #0x30
	bl FUN_020AD80C
	ldr r1, _020A99D8 @ =0x021D4660
	mov r0, r5
	ldr r1, [r1]
	blx r1
	add sp, sp, #0x18
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020A99D4: .4byte 0x021D4634
_020A99D8: .4byte 0x021D4660
	arm_func_end FUN_020A979C

	arm_func_start FUN_020A99DC
FUN_020A99DC: @ 0x020A99DC
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #0x14
	mov r4, r2
	mov r6, r0
	mov r5, r1
	add r0, r4, #0x348
	bl FUN_020AC780
	mov r0, r5
	bl FUN_020E9580
	mov r2, r0
	mov r1, r5
	add r0, r4, #0x348
	bl FUN_020AC7D4
	add r0, r4, #0x348
	mov r1, r4
	mov r2, #0x30
	bl FUN_020AC7D4
	add r0, r4, #0x348
	add r1, r4, #0x34
	mov r2, #0x40
	bl FUN_020AC7D4
	add r0, r4, #0x348
	add r1, sp, #0
	bl FUN_020AC88C
	add r0, r4, #0x3fc
	bl FUN_020ABEC0
	add r0, r4, #0x3fc
	mov r1, r4
	mov r2, #0x30
	bl FUN_020ABF08
	add r0, r4, #0x3fc
	add r1, sp, #0
	mov r2, #0x14
	bl FUN_020ABF08
	add r0, r4, #0x3fc
	mov r1, r6
	bl FUN_020ABFC0
	add sp, sp, #0x14
	pop {r3, r4, r5, r6, pc}
	arm_func_end FUN_020A99DC

	arm_func_start FUN_020A9A78
FUN_020A9A78: @ 0x020A9A78
	push {r4, lr}
	sub sp, sp, #0x30
	mov r4, r0
	ldr r1, _020A9ACC @ =_021106FC
	add r0, sp, #0
	mov r2, r4
	bl FUN_020A99DC
	ldr r1, _020A9AD0 @ =_02110700
	add r0, sp, #0x10
	mov r2, r4
	bl FUN_020A99DC
	ldr r1, _020A9AD4 @ =_02110704
	add r0, sp, #0x20
	mov r2, r4
	bl FUN_020A99DC
	add r0, sp, #0
	mov r1, r4
	mov r2, #0x30
	bl FUN_020D4A50
	add sp, sp, #0x30
	pop {r4, pc}
	.align 2, 0
_020A9ACC: .4byte _021106FC
_020A9AD0: .4byte _02110700
_020A9AD4: .4byte _02110704
	arm_func_end FUN_020A9A78

	arm_func_start FUN_020A9AD8
FUN_020A9AD8: @ 0x020A9AD8
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x24
	mov sl, r0
	ldrh r0, [sl, #0x32]
	cmp r0, #4
	beq _020A9AFC
	cmp r0, #5
	beq _020A9B10
	b _020A9B24
_020A9AFC:
	mov r0, #0x10
	str r0, [sp, #4]
	str r0, [sp]
	mov r2, #0
	b _020A9B24
_020A9B10:
	mov r0, #0x14
	str r0, [sp, #4]
	mov r0, #0x10
	str r0, [sp]
	mov r2, #0
_020A9B24:
	ldr r1, [sp, #4]
	ldr r0, [sp]
	mov r7, #0
	add r0, r1, r0
	add r0, r2, r0
	lsl fp, r0, #1
	cmp fp, #0
	ble _020A9C18
	add r0, sl, #0x74
	mov sb, r7
	str r0, [sp, #8]
	add r5, sp, #0xc
	mov r4, #1
_020A9B58:
	add r0, sl, #0x348
	bl FUN_020AC780
	add r0, r7, #0x41
	add r6, r7, #1
	strb r0, [sp, #0xc]
	mov r8, #0
	cmp r6, #0
	ble _020A9B94
_020A9B78:
	add r0, sl, #0x348
	mov r1, r5
	mov r2, r4
	bl FUN_020AC7D4
	add r8, r8, #1
	cmp r8, r6
	blt _020A9B78
_020A9B94:
	add r0, sl, #0x348
	mov r1, sl
	mov r2, #0x30
	bl FUN_020AC7D4
	add r0, sl, #0x348
	add r1, sl, #0x54
	mov r2, #0x20
	bl FUN_020AC7D4
	add r0, sl, #0x348
	add r1, sl, #0x34
	mov r2, #0x20
	bl FUN_020AC7D4
	add r0, sl, #0x348
	add r1, sp, #0xd
	bl FUN_020AC88C
	add r0, sl, #0x3fc
	bl FUN_020ABEC0
	add r0, sl, #0x3fc
	mov r1, sl
	mov r2, #0x30
	bl FUN_020ABF08
	add r0, sl, #0x3fc
	add r1, sp, #0xd
	mov r2, #0x14
	bl FUN_020ABF08
	ldr r1, [sp, #8]
	add r0, sl, #0x3fc
	add r1, r1, sb
	bl FUN_020ABFC0
	add sb, sb, #0x10
	cmp sb, fp
	add r7, r7, #1
	blt _020A9B58
_020A9C18:
	ldrb r0, [sl, #0x454]
	add r3, sl, #0x74
	cmp r0, #0
	beq _020A9C54
	ldr r0, [sp, #4]
	str r3, [sl, #0x1d4]
	add r2, r3, r0
	add r1, r2, r0
	add r0, r3, r0, lsl #1
	str r0, [sl, #0x1d8]
	ldr r0, [sp]
	str r2, [sl, #0xbc]
	add r0, r1, r0
	str r0, [sl, #0xc0]
	b _020A9C7C
_020A9C54:
	ldr r0, [sp, #4]
	str r3, [sl, #0xbc]
	add r2, r3, r0
	add r1, r2, r0
	add r0, r3, r0, lsl #1
	str r0, [sl, #0xc0]
	ldr r0, [sp]
	str r2, [sl, #0x1d4]
	add r0, r1, r0
	str r0, [sl, #0x1d8]
_020A9C7C:
	ldr r1, [sl, #0x1d8]
	add r0, sl, #0x1e0
	mov r2, #0x10
	bl FUN_020AC924
	ldr r1, [sl, #0xc0]
	add r0, sl, #0xc8
	mov r2, #0x10
	bl FUN_020AC924
	add sp, sp, #0x24
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_020A9AD8

	arm_func_start FUN_020A9CA4
FUN_020A9CA4: @ 0x020A9CA4
	push {r4, lr}
	mov r4, r0
	ldr r2, [r4, #0x81c]
	bl FUN_020A979C
	mov r0, r4
	bl FUN_020A9A78
	mov r1, #0
	mov r0, r4
	mov r2, r1
	bl FUN_020A86CC
	mov r0, r4
	bl FUN_020A9AD8
	mov r0, #5
	strb r0, [r4, #0x455]
	pop {r4, pc}
	arm_func_end FUN_020A9CA4

	arm_func_start FUN_020A9CE0
FUN_020A9CE0: @ 0x020A9CE0
	push {r3, r4, r5, lr}
	sub sp, sp, #0x30
	mov r5, r0
	ldrb r0, [r5, #0x454]
	mov r4, r1
	teq r0, r2
	mov r2, #4
	beq _020A9D10
	ldr r1, _020A9DB4 @ =_02110708
	add r0, r5, #0x3a4
	bl FUN_020ABF08
	b _020A9D1C
_020A9D10:
	ldr r1, _020A9DB8 @ =_02110710
	add r0, r5, #0x3a4
	bl FUN_020ABF08
_020A9D1C:
	mov r1, r5
	add r0, r5, #0x3a4
	mov r2, #0x30
	bl FUN_020ABF08
	add r0, sp, #0
	mov r1, #0x36
	mov r2, #0x30
	bl FUN_020D4994
	add r1, sp, #0
	add r0, r5, #0x3a4
	mov r2, #0x30
	bl FUN_020ABF08
	mov r1, r4
	add r0, r5, #0x3a4
	bl FUN_020ABFC0
	add r0, r5, #0x3a4
	bl FUN_020ABEC0
	add r0, r5, #0x3a4
	mov r1, r5
	mov r2, #0x30
	bl FUN_020ABF08
	add r0, sp, #0
	mov r1, #0x5c
	mov r2, #0x30
	bl FUN_020D4994
	add r0, r5, #0x3a4
	add r1, sp, #0
	mov r2, #0x30
	bl FUN_020ABF08
	add r0, r5, #0x3a4
	mov r1, r4
	mov r2, #0x10
	bl FUN_020ABF08
	add r0, r5, #0x3a4
	mov r1, r4
	bl FUN_020ABFC0
	add sp, sp, #0x30
	pop {r3, r4, r5, pc}
	.align 2, 0
_020A9DB4: .4byte _02110708
_020A9DB8: .4byte _02110710
	arm_func_end FUN_020A9CE0

	arm_func_start FUN_020A9DBC
FUN_020A9DBC: @ 0x020A9DBC
	push {r3, r4, r5, lr}
	sub sp, sp, #0x28
	mov r5, r0
	ldrb r0, [r5, #0x454]
	mov r4, r1
	teq r0, r2
	mov r2, #4
	beq _020A9DEC
	ldr r1, _020A9E90 @ =_02110708
	add r0, r5, #0x2ec
	bl FUN_020AC7D4
	b _020A9DF8
_020A9DEC:
	ldr r1, _020A9E94 @ =_02110710
	add r0, r5, #0x2ec
	bl FUN_020AC7D4
_020A9DF8:
	mov r1, r5
	add r0, r5, #0x2ec
	mov r2, #0x30
	bl FUN_020AC7D4
	add r0, sp, #0
	mov r1, #0x36
	mov r2, #0x28
	bl FUN_020D4994
	add r1, sp, #0
	add r0, r5, #0x2ec
	mov r2, #0x28
	bl FUN_020AC7D4
	mov r1, r4
	add r0, r5, #0x2ec
	bl FUN_020AC88C
	add r0, r5, #0x2ec
	bl FUN_020AC780
	add r0, r5, #0x2ec
	mov r1, r5
	mov r2, #0x30
	bl FUN_020AC7D4
	add r0, sp, #0
	mov r1, #0x5c
	mov r2, #0x28
	bl FUN_020D4994
	add r0, r5, #0x2ec
	add r1, sp, #0
	mov r2, #0x28
	bl FUN_020AC7D4
	add r0, r5, #0x2ec
	mov r1, r4
	mov r2, #0x14
	bl FUN_020AC7D4
	add r0, r5, #0x2ec
	mov r1, r4
	bl FUN_020AC88C
	add sp, sp, #0x28
	pop {r3, r4, r5, pc}
	.align 2, 0
_020A9E90: .4byte _02110708
_020A9E94: .4byte _02110710
	arm_func_end FUN_020A9DBC

	arm_func_start FUN_020A9E98
FUN_020A9E98: @ 0x020A9E98
	push {r4, r5, lr}
	sub sp, sp, #0x14
	mov r5, r0
	mov r4, r1
	add r0, r5, #0x3a4
	add r1, r5, #0x3fc
	mov r2, #0x58
	bl FUN_020D4A50
	add r1, sp, #0
	mov r0, r5
	mov r2, #1
	bl FUN_020A9CE0
	add r0, r5, #0x3fc
	add r1, r5, #0x3a4
	mov r2, #0x58
	bl FUN_020D4A50
	add r1, sp, #0
	mov r0, r4
	mov r2, #0x10
	bl FUN_020E5BB0
	cmp r0, #0
	movne r0, #9
	addne sp, sp, #0x14
	strbne r0, [r5, #0x455]
	popne {r4, r5, pc}
	add r0, r5, #0x2ec
	add r1, r5, #0x348
	mov r2, #0x5c
	bl FUN_020D4A50
	add r1, sp, #0
	mov r0, r5
	mov r2, #1
	bl FUN_020A9DBC
	add r0, r5, #0x348
	add r1, r5, #0x2ec
	mov r2, #0x5c
	bl FUN_020D4A50
	add r1, sp, #0
	add r0, r4, #0x10
	mov r2, #0x14
	bl FUN_020E5BB0
	cmp r0, #0
	movne r0, #9
	strbne r0, [r5, #0x455]
	moveq r0, #6
	strbeq r0, [r5, #0x455]
	add sp, sp, #0x14
	pop {r4, r5, pc}
	arm_func_end FUN_020A9E98

	arm_func_start FUN_020A9F58
FUN_020A9F58: @ 0x020A9F58
	mov r2, #8
_020A9F5C:
	ldrb r1, [r0, #-1]!
	add r1, r1, #1
	ands r1, r1, #0xff
	strb r1, [r0]
	bxne lr
	subs r2, r2, #1
	bne _020A9F5C
	bx lr
	arm_func_end FUN_020A9F58

	arm_func_start FUN_020A9F7C
FUN_020A9F7C: @ 0x020A9F7C
	push {r4, lr}
	add r0, r0, #0x1e0
	mov r4, r2
	bl FUN_020AC998
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_020A9F7C

	arm_func_start FUN_020A9F94
FUN_020A9F94: @ 0x020A9F94
	push {r4, r5, r6, r7, lr}
	sub sp, sp, #0x44
	mov r6, r1
	ldrb r3, [r6, #3]
	ldrb r2, [r6, #4]
	mov r7, r0
	add r1, r6, #5
	add r2, r2, r3, lsl #8
	bl FUN_020A9F7C
	ldrh r1, [r7, #0x32]
	mov r4, r0
	cmp r1, #4
	beq _020A9FD4
	cmp r1, #5
	beq _020AA0B4
	b _020AA190
_020A9FD4:
	sub r4, r4, #0x10
	asr r0, r4, #8
	strb r0, [r6, #3]
	strb r4, [r6, #4]
	add r0, r7, #0x3fc
	bl FUN_020ABEC0
	ldr r1, [r7, #0x1d4]
	add r0, r7, #0x3fc
	mov r2, #0x10
	bl FUN_020ABF08
	add r0, sp, #0
	mov r1, #0x36
	mov r2, #0x30
	bl FUN_020D4994
	add r1, sp, #0
	add r0, r7, #0x3fc
	mov r2, #0x30
	bl FUN_020ABF08
	add r0, r7, #0x3fc
	add r1, r7, #0x2e4
	mov r2, #8
	bl FUN_020ABF08
	add r0, r7, #0x3fc
	mov r1, r6
	mov r2, #1
	bl FUN_020ABF08
	add r0, r7, #0x3fc
	add r1, r6, #3
	add r2, r4, #2
	bl FUN_020ABF08
	add r0, r7, #0x3fc
	add r1, sp, #0x30
	bl FUN_020ABFC0
	add r0, r7, #0x3fc
	bl FUN_020ABEC0
	ldr r1, [r7, #0x1d4]
	add r0, r7, #0x3fc
	mov r2, #0x10
	bl FUN_020ABF08
	add r0, sp, #0
	mov r1, #0x5c
	mov r2, #0x30
	bl FUN_020D4994
	add r0, r7, #0x3fc
	add r1, sp, #0
	mov r2, #0x30
	bl FUN_020ABF08
	add r0, r7, #0x3fc
	add r1, sp, #0x30
	mov r2, #0x10
	bl FUN_020ABF08
	add r0, r7, #0x3fc
	add r1, sp, #0x30
	bl FUN_020ABFC0
	mov r5, #0x10
	b _020AA190
_020AA0B4:
	sub r4, r4, #0x14
	asr r0, r4, #8
	strb r0, [r6, #3]
	strb r4, [r6, #4]
	add r0, r7, #0x348
	bl FUN_020AC780
	ldr r1, [r7, #0x1d4]
	add r0, r7, #0x348
	mov r2, #0x14
	bl FUN_020AC7D4
	add r0, sp, #0
	mov r1, #0x36
	mov r2, #0x28
	bl FUN_020D4994
	add r1, sp, #0
	add r0, r7, #0x348
	mov r2, #0x28
	bl FUN_020AC7D4
	add r0, r7, #0x348
	add r1, r7, #0x2e4
	mov r2, #8
	bl FUN_020AC7D4
	add r0, r7, #0x348
	mov r1, r6
	mov r2, #1
	bl FUN_020AC7D4
	add r0, r7, #0x348
	add r1, r6, #3
	add r2, r4, #2
	bl FUN_020AC7D4
	add r0, r7, #0x348
	add r1, sp, #0x30
	bl FUN_020AC88C
	add r0, r7, #0x348
	bl FUN_020AC780
	ldr r1, [r7, #0x1d4]
	add r0, r7, #0x348
	mov r2, #0x14
	bl FUN_020AC7D4
	add r0, sp, #0
	mov r1, #0x5c
	mov r2, #0x28
	bl FUN_020D4994
	add r0, r7, #0x348
	add r1, sp, #0
	mov r2, #0x28
	bl FUN_020AC7D4
	add r0, r7, #0x348
	add r1, sp, #0x30
	mov r2, #0x14
	bl FUN_020AC7D4
	add r0, r7, #0x348
	add r1, sp, #0x30
	bl FUN_020AC88C
	mov r5, #0x14
_020AA190:
	add r0, r6, #5
	add r1, sp, #0x30
	mov r2, r5
	add r0, r0, r4
	bl FUN_020E5BB0
	cmp r0, #0
	movne r0, #9
	strbne r0, [r7, #0x455]
	add r0, r7, #0x2ec
	bl FUN_020A9F58
	add r0, r4, #5
	add sp, sp, #0x44
	pop {r4, r5, r6, r7, pc}
	arm_func_end FUN_020A9F94

	arm_func_start FUN_020AA1C4
FUN_020AA1C4: @ 0x020AA1C4
	push {r3, r4, r5, r6, r7, lr}
	sub sp, sp, #0x30
	mov r4, r1
	mov r5, r0
	ldrh r0, [r5, #0x32]
	ldrb r2, [r4, #3]
	ldrb r1, [r4, #4]
	cmp r0, #4
	add r6, r4, #5
	add r7, r1, r2, lsl #8
	beq _020AA1FC
	cmp r0, #5
	beq _020AA2CC
	b _020AA398
_020AA1FC:
	add r0, r5, #0x3fc
	bl FUN_020ABEC0
	ldr r1, [r5, #0xbc]
	add r0, r5, #0x3fc
	mov r2, #0x10
	bl FUN_020ABF08
	add r0, sp, #0
	mov r1, #0x36
	mov r2, #0x30
	bl FUN_020D4994
	add r1, sp, #0
	add r0, r5, #0x3fc
	mov r2, #0x30
	bl FUN_020ABF08
	add r0, r5, #0x3fc
	add r1, r5, #0x1cc
	mov r2, #8
	bl FUN_020ABF08
	add r0, r5, #0x3fc
	mov r1, r4
	mov r2, #1
	bl FUN_020ABF08
	add r0, r5, #0x3fc
	add r1, r4, #3
	add r2, r7, #2
	bl FUN_020ABF08
	add r0, r5, #0x3fc
	add r1, r6, r7
	bl FUN_020ABFC0
	add r0, r5, #0x3fc
	bl FUN_020ABEC0
	ldr r1, [r5, #0xbc]
	add r0, r5, #0x3fc
	mov r2, #0x10
	bl FUN_020ABF08
	add r0, sp, #0
	mov r1, #0x5c
	mov r2, #0x30
	bl FUN_020D4994
	add r0, r5, #0x3fc
	add r1, sp, #0
	mov r2, #0x30
	bl FUN_020ABF08
	add r0, r5, #0x3fc
	add r1, r6, r7
	mov r2, #0x10
	bl FUN_020ABF08
	add r1, r6, r7
	add r0, r5, #0x3fc
	bl FUN_020ABFC0
	add r7, r7, #0x10
	b _020AA398
_020AA2CC:
	add r0, r5, #0x348
	bl FUN_020AC780
	ldr r1, [r5, #0xbc]
	add r0, r5, #0x348
	mov r2, #0x14
	bl FUN_020AC7D4
	add r0, sp, #0
	mov r1, #0x36
	mov r2, #0x28
	bl FUN_020D4994
	add r1, sp, #0
	add r0, r5, #0x348
	mov r2, #0x28
	bl FUN_020AC7D4
	add r0, r5, #0x348
	add r1, r5, #0x1cc
	mov r2, #8
	bl FUN_020AC7D4
	add r0, r5, #0x348
	mov r1, r4
	mov r2, #1
	bl FUN_020AC7D4
	add r0, r5, #0x348
	add r1, r4, #3
	add r2, r7, #2
	bl FUN_020AC7D4
	add r0, r5, #0x348
	add r1, r6, r7
	bl FUN_020AC88C
	add r0, r5, #0x348
	bl FUN_020AC780
	ldr r1, [r5, #0xbc]
	add r0, r5, #0x348
	mov r2, #0x14
	bl FUN_020AC7D4
	add r0, sp, #0
	mov r1, #0x5c
	mov r2, #0x28
	bl FUN_020D4994
	add r0, r5, #0x348
	add r1, sp, #0
	mov r2, #0x28
	bl FUN_020AC7D4
	add r0, r5, #0x348
	add r1, r6, r7
	mov r2, #0x14
	bl FUN_020AC7D4
	add r1, r6, r7
	add r0, r5, #0x348
	bl FUN_020AC88C
	add r7, r7, #0x14
_020AA398:
	asr r0, r7, #8
	strb r0, [r4, #3]
	mov r2, r7
	add r0, r5, #0xc8
	add r1, r4, #5
	strb r7, [r4, #4]
	bl FUN_020AC998
	add r0, r5, #0x1d4
	bl FUN_020A9F58
	add r0, r7, #5
	add sp, sp, #0x30
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020AA1C4

	arm_func_start FUN_020AA3C8
FUN_020AA3C8: @ 0x020AA3C8
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	mov r6, r1
	mov r5, r2
	add r4, sp, #0
_020AA3DC:
	mov r0, r4
	mov r1, r5
	bl FUN_020A6CDC
	ldr r1, [sp]
	cmp r1, #0
	mvneq r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	cmp r1, r6
	strhi r6, [sp]
	ldr r2, [sp]
	mov r1, r7
	bl FUN_020D4A50
	ldr r0, [sp]
	mov r1, r5
	bl FUN_020A6DBC
	ldr r0, [sp]
	sub r6, r6, r0
	cmp r6, #0
	add r7, r7, r0
	bgt _020AA3DC
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020AA3C8

	arm_func_start FUN_020AA434
FUN_020AA434: @ 0x020AA434
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	mov r4, r2
	add r0, r6, #0x2ec
	bl FUN_020AC7D4
	mov r1, r5
	mov r2, r4
	add r0, r6, #0x3a4
	bl FUN_020ABF08
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020AA434

	arm_func_start FUN_020AA460
FUN_020AA460: @ 0x020AA460
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sb, r0
	ldrb r2, [sb, #0x455]
	mov r8, r1
	cmp r2, #9
	bne _020AA48C
	ldr r1, _020AA6DC @ =0x021D4660
	mov r0, r8
	ldr r1, [r1]
	blx r1
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020AA48C:
	ldrb r3, [r8, #3]
	ldrb r1, [r8, #4]
	add r0, r2, #0xf9
	and r0, r0, #0xff
	add r1, r1, r3, lsl #8
	cmp r0, #1
	add r6, r1, #5
	ldrb r4, [r8]
	bhi _020AA4B8
	cmp r4, #0x15
	bne _020AA4C8
_020AA4B8:
	cmp r4, #0x15
	bne _020AA4F8
	cmp r6, #7
	bls _020AA4F8
_020AA4C8:
	mov r0, sb
	mov r1, r8
	bl FUN_020A9F94
	ldrb r2, [sb, #0x455]
	mov r6, r0
	cmp r2, #9
	bne _020AA4F8
	ldr r1, _020AA6DC @ =0x021D4660
	mov r0, r8
	ldr r1, [r1]
	blx r1
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020AA4F8:
	sub r0, r4, #0x14
	cmp r0, #3
	add r5, r8, #5
	sub r6, r6, #5
	addls pc, pc, r0, lsl #2
	b _020AA6C0
_020AA510: @ jump table
	b _020AA520 @ case 0
	b _020AA550 @ case 1
	b _020AA564 @ case 2
	b _020AA6A0 @ case 3
_020AA520:
	ldr r0, [sb, #0x1d4]
	cmp r0, #0
	moveq r0, #9
	strbeq r0, [sb, #0x455]
	beq _020AA6C8
	add r0, sb, #0x2e4
	mov r1, #0
	mov r2, #8
	bl FUN_020D4994
	mov r0, #7
	strb r0, [sb, #0x455]
	b _020AA6C8
_020AA550:
	ldrb r0, [r5]
	cmp r0, #2
	moveq r0, #9
	strbeq r0, [sb, #0x455]
	b _020AA6C8
_020AA564:
	mov fp, #4
	mov sl, #1
	mov r4, #0
_020AA570:
	ldrb r7, [r5, #2]
	ldrb r0, [r5, #1]
	ldrb r3, [r5]
	ldrb r1, [r5, #3]
	lsl r7, r7, #8
	add r0, r7, r0, lsl #16
	cmp r3, #0xb
	add r7, r1, r0
	add r5, r5, #4
	bgt _020AA5C0
	cmp r3, #0xb
	bge _020AA634
	cmp r3, #2
	bgt _020AA668
	cmp r3, #1
	blt _020AA668
	beq _020AA5F0
	cmp r3, #2
	beq _020AA624
	b _020AA668
_020AA5C0:
	sub r0, r3, #0xd
	cmp r0, #7
	addls pc, pc, r0, lsl #2
	b _020AA668
_020AA5D0: @ jump table
	b _020AA648 @ case 0
	b _020AA650 @ case 1
	b _020AA668 @ case 2
	b _020AA614 @ case 3
	b _020AA668 @ case 4
	b _020AA668 @ case 5
	b _020AA668 @ case 6
	b _020AA658 @ case 7
_020AA5F0:
	ldrb r0, [sb, #0x454]
	cmp r0, #0
	beq _020AA670
	cmp r2, #0
	bne _020AA670
	mov r0, sb
	mov r1, r5
	bl FUN_020A9700
	b _020AA670
_020AA614:
	mov r0, sb
	mov r1, r5
	bl FUN_020A9CA4
	b _020AA670
_020AA624:
	mov r0, sb
	mov r1, r5
	bl FUN_020A94C8
	b _020AA670
_020AA634:
	mov r0, sb
	mov r1, r5
	bl FUN_020A92A4
	strb r4, [sb, #0x5ac]
	b _020AA670
_020AA648:
	strb sl, [sb, #0x5ac]
	b _020AA670
_020AA650:
	strb fp, [sb, #0x455]
	b _020AA670
_020AA658:
	mov r0, sb
	mov r1, r5
	bl FUN_020A9E98
	b _020AA670
_020AA668:
	mov r0, #9
	strb r0, [sb, #0x455]
_020AA670:
	mov r0, sb
	sub r1, r5, #4
	add r2, r7, #4
	bl FUN_020AA434
	add r0, r7, #4
	add r5, r5, r7
	subs r6, r6, r0
	beq _020AA6C8
	ldrb r2, [sb, #0x455]
	cmp r2, #9
	bne _020AA570
	b _020AA6C8
_020AA6A0:
	str r8, [sb, #0x824]
	mov r0, #5
	str r0, [sb, #0x82c]
	add r0, r6, #5
	str r0, [sb, #0x828]
	mov r0, #1
	strb r0, [sb, #0x456]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020AA6C0:
	mov r0, #9
	strb r0, [sb, #0x455]
_020AA6C8:
	ldr r1, _020AA6DC @ =0x021D4660
	mov r0, r8
	ldr r1, [r1]
	blx r1
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020AA6DC: .4byte 0x021D4660
	arm_func_end FUN_020AA460

	arm_func_start FUN_020AA6E0
FUN_020AA6E0: @ 0x020AA6E0
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #4
	mov r5, r0
	ldr r4, [r5, #0xc]
	add r6, sp, #0
_020AA6F4:
	mov r0, r6
	mov r1, r5
	bl FUN_020A6CDC
	ldr r1, [sp]
	cmp r1, #0
	moveq r0, #9
	addeq sp, sp, #4
	strbeq r0, [r4, #0x455]
	popeq {r3, r4, r5, r6, pc}
	cmp r1, #5
	blo _020AA6F4
	ldrb r1, [r0]
	cmp r1, #0x80
	bne _020AA7DC
	ldrb r1, [r4, #0x454]
	cmp r1, #0
	beq _020AA7D0
	ldrb r1, [r4, #0x455]
	cmp r1, #0
	bne _020AA7D0
	ldrb r2, [r0, #1]
	mov r1, r5
	mov r0, #2
	str r2, [sp]
	bl FUN_020A6DBC
	ldr r1, _020AA874 @ =0x021D4634
	ldr r0, [sp]
	ldr r1, [r1]
	blx r1
	movs r6, r0
	moveq r0, #9
	addeq sp, sp, #4
	strbeq r0, [r4, #0x455]
	popeq {r3, r4, r5, r6, pc}
	ldr r1, [sp]
	mov r2, r5
	bl FUN_020AA3C8
	cmp r0, #0
	ldrbeq r0, [r6]
	cmpeq r0, #1
	movne r0, #9
	strbne r0, [r4, #0x455]
	bne _020AA7AC
	mov r0, r4
	add r1, r6, #1
	bl FUN_020A9638
_020AA7AC:
	ldr r2, [sp]
	mov r0, r4
	mov r1, r6
	bl FUN_020AA434
	ldr r1, _020AA878 @ =0x021D4660
	mov r0, r6
	ldr r1, [r1]
	blx r1
	b _020AA868
_020AA7D0:
	mov r0, #9
	strb r0, [r4, #0x455]
	b _020AA868
_020AA7DC:
	ldrb r2, [r0, #3]
	ldrb r0, [r0, #4]
	ldr r1, _020AA87C @ =0x00004805
	add r0, r0, r2, lsl #8
	add r0, r0, #5
	str r0, [sp]
	cmp r0, r1
	movhi r0, #9
	addhi sp, sp, #4
	strbhi r0, [r4, #0x455]
	pophi {r3, r4, r5, r6, pc}
	ldr r1, _020AA874 @ =0x021D4634
	ldr r1, [r1]
	blx r1
	movs r6, r0
	moveq r0, #9
	addeq sp, sp, #4
	strbeq r0, [r4, #0x455]
	popeq {r3, r4, r5, r6, pc}
	ldr r1, [sp]
	mov r2, r5
	bl FUN_020AA3C8
	cmp r0, #0
	beq _020AA85C
	ldr r1, _020AA878 @ =0x021D4660
	mov r0, r6
	ldr r1, [r1]
	blx r1
	mov r0, #9
	add sp, sp, #4
	strb r0, [r4, #0x455]
	pop {r3, r4, r5, r6, pc}
_020AA85C:
	mov r0, r4
	mov r1, r6
	bl FUN_020AA460
_020AA868:
	ldrb r0, [r4, #0x455]
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
	.align 2, 0
_020AA874: .4byte 0x021D4634
_020AA878: .4byte 0x021D4660
_020AA87C: .4byte 0x00004805
	arm_func_end FUN_020AA6E0

	arm_func_start FUN_020AA880
FUN_020AA880: @ 0x020AA880
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x74
	ldr r2, _020AA9A0 @ =0x021D5E60
	mov sl, r0
	ldrb r0, [r2]
	mov sb, r1
	cmp r0, #0
	bne _020AA8E4
	ldr r2, _020AA9A4 @ =0x021D4688
	add r0, sp, #0
	ldr r3, [r2]
	ldmib r2, {r1, r4}
	umull r6, r5, r4, r3
	mla r5, r4, r1, r5
	ldr r1, [r2, #0xc]
	ldr r4, [r2, #0x10]
	mla r5, r1, r3, r5
	ldr r1, [r2, #0x14]
	adds r4, r4, r6
	adc r3, r1, r5
	str r4, [r2]
	mov r1, #4
	str r3, [r2, #4]
	str r3, [sp]
	bl FUN_020AA9B0
_020AA8E4:
	cmp sb, #0
	mov r8, #0
	addle sp, sp, #0x74
	mov r1, #0x14
	pople {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r5, _020AA9A8 @ =0x021D5FD8
	add r6, sp, #0x18
	mov fp, r1
	add r4, sp, #4
_020AA908:
	cmp r1, #0x14
	bne _020AA97C
	mov r0, r6
	bl FUN_020AC780
	bl FUN_020D3A38
	mov r7, r0
	mov r0, r6
	mov r1, r5
	mov r2, fp
	bl FUN_020AC7D4
	mov r0, r6
	mov r1, r4
	bl FUN_020AC8F4
	ldr lr, _020AA9AC @ =0x021D5FEB
	mov r3, #1
	mov r2, #0x13
	add ip, sp, #0x17
_020AA94C:
	ldrb r1, [lr]
	ldrb r0, [ip], #-1
	subs r2, r2, #1
	add r0, r1, r0
	add r0, r3, r0
	strb r0, [lr], #-1
	lsr r3, r0, #8
	bpl _020AA94C
	str r0, [sp]
	mov r0, r7
	bl FUN_020D3A4C
	mov r1, #0
_020AA97C:
	ldrb r0, [r4, r1]
	add r1, r1, #1
	cmp r0, #0
	strbne r0, [sl, r8]
	addne r8, r8, #1
	cmp r8, sb
	blt _020AA908
	add sp, sp, #0x74
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020AA9A0: .4byte 0x021D5E60
_020AA9A4: .4byte 0x021D4688
_020AA9A8: .4byte 0x021D5FD8
_020AA9AC: .4byte 0x021D5FEB
	arm_func_end FUN_020AA880

	arm_func_start FUN_020AA9B0
FUN_020AA9B0: @ 0x020AA9B0
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #0x5c
	mov r6, r0
	add r0, sp, #0
	mov r5, r1
	bl FUN_020AC780
	bl FUN_020D3A38
	mov r4, r0
	ldr r1, _020AAA18 @ =0x021D5FD8
	add r0, sp, #0
	mov r2, #0x14
	bl FUN_020AC7D4
	mov r1, r6
	mov r2, r5
	add r0, sp, #0
	bl FUN_020AC7D4
	ldr r1, _020AAA18 @ =0x021D5FD8
	add r0, sp, #0
	bl FUN_020AC88C
	mov r0, r4
	bl FUN_020D3A4C
	ldr r0, _020AAA1C @ =0x021D5E60
	mov r1, #1
	strb r1, [r0]
	add sp, sp, #0x5c
	pop {r3, r4, r5, r6, pc}
	.align 2, 0
_020AAA18: .4byte 0x021D5FD8
_020AAA1C: .4byte 0x021D5E60
	arm_func_end FUN_020AA9B0

	arm_func_start FUN_020AAA20
FUN_020AAA20: @ 0x020AAA20
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov sb, r0
	ldr r4, [sb, #0xc]
	ldr r7, [r4, #0x820]
	cmp r7, #0
	ldrne r8, [r7]
	moveq r8, #0
	bl FUN_020A8820
	lsr r1, r0, #0x18
	strb r1, [r4, #0x54]
	lsr r1, r0, #0x10
	strb r1, [r4, #0x55]
	lsr r1, r0, #8
	strb r1, [r4, #0x56]
	strb r0, [r4, #0x57]
	add r0, r4, #0x58
	mov r1, #0x1c
	bl FUN_020AA880
	ldr r1, _020AAC74 @ =0x021D4634
	add r0, r8, #0x9d
	ldr r1, [r1]
	blx r1
	movs r5, r0
	bne _020AAA90
	mov r0, #9
	strb r0, [r4, #0x455]
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_020AAA90:
	mov r0, #2
	strb r0, [r5, #5]
	mov r3, #0
	strb r3, [r5, #6]
	strb r3, [r5, #7]
	mov r0, #0x46
	strb r0, [r5, #8]
	mov r0, #3
	strb r0, [r5, #9]
	add r0, r4, #0x54
	add r1, r5, #0xb
	mov r2, #0x20
	strb r3, [r5, #0xa]
	bl FUN_020D4A50
	mov r2, #0x20
	strb r2, [r5, #0x2b]
	ldrb r0, [r4, #0x30]
	cmp r0, #0
	beq _020AAAF8
	add r0, r4, #0x74
	add r1, r5, #0x2c
	bl FUN_020D4A50
	mov r0, #1
	strb r0, [r4, #0x31]
	add r6, r5, #0x4c
	b _020AAB54
_020AAAF8:
	add r0, r5, #0x2c
	mov r1, #0x1c
	bl FUN_020AA880
	ldr r0, _020AAC78 @ =0x021D5E60
	add r6, r5, #0x4c
	ldr r3, [r0, #4]
	sub r0, r6, #0x20
	lsr r1, r3, #0x18
	strb r1, [r5, #0x48]
	lsr r1, r3, #0x10
	strb r1, [r5, #0x49]
	lsr r1, r3, #8
	strb r1, [r5, #0x4a]
	add r1, r4, #0x74
	mov r2, #0x20
	strb r3, [r5, #0x4b]
	bl FUN_020D4A50
	ldr r0, _020AAC78 @ =0x021D5E60
	mov r1, #0
	ldr r2, [r0, #4]
	strb r1, [r4, #0x31]
	add r1, r2, #1
	str r1, [r0, #4]
_020AAB54:
	ldrh r1, [r4, #0x32]
	mov r0, #0
	asr r1, r1, #8
	strb r1, [r6]
	ldrh r1, [r4, #0x32]
	strb r1, [r6, #1]
	strb r0, [r6, #2]
	ldrb r0, [r4, #0x31]
	add r6, r6, #3
	cmp r0, #0
	bne _020AAC08
	cmp r8, #0
	beq _020AABEC
	add r2, r8, #6
	mov r0, #0xb
	strb r0, [r6]
	add r1, r8, #3
	asr r0, r2, #0x10
	strb r0, [r6, #1]
	asr r0, r2, #8
	strb r0, [r6, #2]
	strb r2, [r6, #3]
	asr r0, r1, #0x10
	strb r0, [r6, #4]
	asr r0, r1, #8
	strb r0, [r6, #5]
	strb r1, [r6, #6]
	asr r0, r8, #0x10
	strb r0, [r6, #7]
	asr r0, r8, #8
	strb r0, [r6, #8]
	strb r8, [r6, #9]
	add r6, r6, #0xa
	ldr r0, [r7, #4]
	mov r1, r6
	mov r2, r8
	bl FUN_020D4A50
	add r6, r6, r8
_020AABEC:
	mov r0, #0xe
	strb r0, [r6]
	mov r0, #0
	strb r0, [r6, #1]
	strb r0, [r6, #2]
	strb r0, [r6, #3]
	add r6, r6, #4
_020AAC08:
	mov r0, #0x16
	sub r1, r6, r5
	sub r6, r1, #5
	strb r0, [r5]
	mov r0, #3
	strb r0, [r5, #1]
	mov r0, #0
	strb r0, [r5, #2]
	asr r0, r6, #8
	strb r0, [r5, #3]
	mov r0, r4
	mov r2, r6
	add r1, r5, #5
	strb r6, [r5, #4]
	bl FUN_020AA434
	mov r2, #0
	mov r0, r5
	mov r3, r2
	add r1, r6, #5
	str sb, [sp]
	bl FUN_020A6F84
	ldr r1, _020AAC7C @ =0x021D4660
	mov r0, r5
	ldr r1, [r1]
	blx r1
	ldrb r0, [r4, #0x31]
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0
_020AAC74: .4byte 0x021D4634
_020AAC78: .4byte 0x021D5E60
_020AAC7C: .4byte 0x021D4660
	arm_func_end FUN_020AAA20

	arm_func_start FUN_020AAC80
FUN_020AAC80: @ 0x020AAC80
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #4
	ldr r1, _020AADD0 @ =0x021D4634
	mov r6, r0
	ldr r1, [r1]
	mov r0, #0x83
	ldr r5, [r6, #0xc]
	blx r1
	movs r4, r0
	moveq r0, #9
	addeq sp, sp, #4
	strbeq r0, [r5, #0x455]
	popeq {r3, r4, r5, r6, pc}
	mov r0, #0x14
	strb r0, [r4]
	mov r0, #3
	strb r0, [r4, #1]
	mov r1, #0
	strb r1, [r4, #2]
	strb r1, [r4, #3]
	mov r3, #1
	strb r3, [r4, #4]
	add r0, r5, #0x1cc
	mov r2, #8
	strb r3, [r4, #5]
	bl FUN_020D4994
	mov r0, #0x16
	strb r0, [r4, #6]
	mov r0, #3
	strb r0, [r4, #7]
	mov r1, #0
	strb r1, [r4, #8]
	strb r1, [r4, #9]
	mov r0, #0x28
	strb r0, [r4, #0xa]
	mov r0, #0x14
	strb r0, [r4, #0xb]
	strb r1, [r4, #0xc]
	strb r1, [r4, #0xd]
	mov r3, #0x24
	add r0, r5, #0x3a4
	add r1, r5, #0x3fc
	mov r2, #0x58
	strb r3, [r4, #0xe]
	bl FUN_020D4A50
	mov r0, r5
	add r1, r4, #0xf
	mov r2, #0
	bl FUN_020A9CE0
	add r0, r5, #0x3fc
	add r1, r5, #0x3a4
	mov r2, #0x58
	bl FUN_020D4A50
	add r0, r5, #0x2ec
	add r1, r5, #0x348
	mov r2, #0x5c
	bl FUN_020D4A50
	mov r0, r5
	add r1, r4, #0x1f
	mov r2, #0
	bl FUN_020A9DBC
	add r0, r5, #0x348
	add r1, r5, #0x2ec
	mov r2, #0x5c
	bl FUN_020D4A50
	mov r0, r5
	add r1, r4, #0xb
	mov r2, #0x28
	bl FUN_020AA434
	mov r0, r5
	add r1, r4, #6
	bl FUN_020AA1C4
	mov r2, #0
	add r1, r0, #6
	mov r0, r4
	mov r3, r2
	str r6, [sp]
	bl FUN_020A6F84
	ldr r1, _020AADD4 @ =0x021D4660
	mov r0, r4
	ldr r1, [r1]
	blx r1
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
	.align 2, 0
_020AADD0: .4byte 0x021D4634
_020AADD4: .4byte 0x021D4660
	arm_func_end FUN_020AAC80

	arm_func_start FUN_020AADD8
FUN_020AADD8: @ 0x020AADD8
	push {r3, r4, r5, r6, r7, lr}
	ldr r1, _020AAF60 @ =0x021D4634
	mov r7, r0
	ldr r1, [r1]
	mov r0, #0x98
	ldr r4, [r7, #0xc]
	blx r1
	movs r5, r0
	moveq r0, #9
	strbeq r0, [r4, #0x455]
	popeq {r3, r4, r5, r6, r7, pc}
	mov r0, #3
	strb r0, [r5, #9]
	mov r0, #0
	strb r0, [r5, #0xa]
	bl FUN_020A8820
	lsr r1, r0, #0x18
	strb r1, [r4, #0x34]
	lsr r1, r0, #0x10
	strb r1, [r4, #0x35]
	lsr r1, r0, #8
	strb r1, [r4, #0x36]
	strb r0, [r4, #0x37]
	add r0, r4, #0x38
	mov r1, #0x1c
	bl FUN_020AA880
	add r0, r4, #0x34
	add r1, r5, #0xb
	mov r2, #0x20
	bl FUN_020D4A50
	ldrh r2, [r7, #0x18]
	ldr r1, [r7, #0x1c]
	mov r0, r4
	bl FUN_020A862C
	ldrb r0, [r4, #0x30]
	cmp r0, #0
	moveq r0, #0
	strbeq r0, [r5, #0x2b]
	addeq r0, r5, #0x2c
	beq _020AAE90
	mov r2, #0x20
	add r0, r4, #0x74
	add r1, r5, #0x2c
	strb r2, [r5, #0x2b]
	bl FUN_020D4A50
	add r0, r5, #0x4c
_020AAE90:
	mov r6, #0
	strb r6, [r0]
	mov r1, #4
	strb r1, [r0, #1]
	ldr r2, _020AAF64 @ =_021106B0
	add r0, r0, #2
_020AAEA8:
	lsl r3, r6, #1
	ldrh r1, [r2, r3]
	add r6, r6, #1
	cmp r6, #2
	asr r1, r1, #8
	strb r1, [r0]
	ldrh r1, [r2, r3]
	strb r1, [r0, #1]
	add r0, r0, #2
	blo _020AAEA8
	mov r3, #1
	mov r2, #0
	strb r3, [r0]
	add r1, r0, #2
	sub r1, r1, r5
	sub r6, r1, #5
	strb r2, [r0, #1]
	sub r1, r6, #4
	mov r0, #0x16
	strb r0, [r5]
	mov r0, #3
	strb r0, [r5, #1]
	strb r2, [r5, #2]
	asr r0, r6, #8
	strb r0, [r5, #3]
	strb r6, [r5, #4]
	strb r3, [r5, #5]
	asr r0, r1, #0x10
	strb r0, [r5, #6]
	asr r0, r1, #8
	strb r0, [r5, #7]
	strb r1, [r5, #8]
	mov r0, r5
	mov r3, r2
	add r1, r6, #5
	str r7, [sp]
	bl FUN_020A6F84
	mov r0, r4
	mov r2, r6
	add r1, r5, #5
	bl FUN_020AA434
	ldr r1, _020AAF68 @ =0x021D4660
	mov r0, r5
	ldr r1, [r1]
	blx r1
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020AAF60: .4byte 0x021D4634
_020AAF64: .4byte _021106B0
_020AAF68: .4byte 0x021D4660
	arm_func_end FUN_020AADD8

	arm_func_start FUN_020AAF6C
FUN_020AAF6C: @ 0x020AAF6C
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #8
	mov sl, r0
	ldr r4, [sl, #0xc]
	ldrb r0, [r4, #0x5ac]
	cmp r0, #0
	beq _020AAFA0
	mov r2, #0
	ldr r0, _020AB220 @ =0x02108FB8
	mov r3, r2
	mov r1, #7
	str sl, [sp]
	bl FUN_020A6F84
_020AAFA0:
	mov r0, #3
	strb r0, [r4]
	mov r0, #0
	strb r0, [r4, #1]
	add r0, r4, #2
	mov r1, #0x2e
	bl FUN_020AA880
	ldr sb, [r4, #0x594]
	ldr r0, _020AB224 @ =0x021D4634
	lsl r1, sb, #1
	ldr r2, [r0]
	add r1, r1, r1, lsr #31
	mov r0, sb
	asr r7, r1, #1
	blx r2
	movs r8, r0
	moveq r0, #9
	addeq sp, sp, #8
	strbeq r0, [r4, #0x455]
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r0, #0
	strb r0, [r8]
	mov r2, #2
	add r0, r8, #2
	sub r1, sb, #0x33
	strb r2, [r8, #1]
	bl FUN_020AA880
	add r1, r8, sb
	mov r0, r4
	sub r3, sb, #0x31
	mov r5, #0
	sub r1, r1, #0x30
	mov r2, #0x30
	strb r5, [r8, r3]
	bl FUN_020D4A50
	ldr r1, _020AB224 @ =0x021D4634
	lsl r0, r7, #3
	ldr r1, [r1]
	blx r1
	movs r5, r0
	bne _020AB064
	ldr r1, _020AB228 @ =0x021D4660
	mov r0, r8
	ldr r1, [r1]
	blx r1
	mov r0, #9
	add sp, sp, #8
	strb r0, [r4, #0x455]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020AB064:
	add r0, r5, r7, lsl #1
	add fp, r0, r7, lsl #1
	mov r1, r8
	mov r2, sb
	mov r3, r7
	str r0, [sp, #4]
	add r6, fp, r7, lsl #1
	bl FUN_020AD7B0
	add r0, r4, #0x198
	add r1, r0, #0x400
	ldr r2, [r4, #0x5a0]
	mov r0, fp
	mov r3, r7
	bl FUN_020AD7B0
	add r1, r4, #0x94
	mov r0, r6
	add r1, r1, #0x400
	mov r2, sb
	mov r3, r7
	bl FUN_020AD7B0
	bl FUN_020A8878
	str r6, [sp]
	mov r6, r0
	ldr r1, [sp, #4]
	mov r2, fp
	mov r3, r7
	mov r0, r5
	bl FUN_020AD19C
	mov r0, r6
	bl FUN_020A88C4
	ldr r1, _020AB224 @ =0x021D4634
	add r0, sb, #0x49
	ldr r1, [r1]
	blx r1
	movs r6, r0
	bne _020AB124
	ldr r1, _020AB228 @ =0x021D4660
	mov r0, r8
	ldr r1, [r1]
	blx r1
	ldr r1, _020AB228 @ =0x021D4660
	mov r0, r5
	ldr r1, [r1]
	blx r1
	mov r0, #9
	add sp, sp, #8
	strb r0, [r4, #0x455]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020AB124:
	mov r0, #0x16
	strb r0, [r6]
	mov r1, #3
	add r0, sb, #4
	strb r1, [r6, #1]
	mov r1, #0
	strb r1, [r6, #2]
	asr r1, r0, #8
	strb r1, [r6, #3]
	strb r0, [r6, #4]
	mov r0, #0x10
	strb r0, [r6, #5]
	asr r0, sb, #0x10
	strb r0, [r6, #6]
	asr r0, sb, #8
	strb r0, [r6, #7]
	strb sb, [r6, #8]
	tst sb, #1
	add r0, r6, #9
	beq _020AB18C
	add r0, sb, sb, lsr #31
	asr r0, r0, #1
	lsl r0, r0, #1
	ldrh r1, [r5, r0]
	add r0, r6, #0xa
	strb r1, [r6, #9]
_020AB18C:
	add r1, sb, sb, lsr #31
	asr r1, r1, #1
	subs r3, r1, #1
	bmi _020AB1C0
_020AB19C:
	lsl r2, r3, #1
	ldrh r1, [r5, r2]
	subs r3, r3, #1
	asr r1, r1, #8
	strb r1, [r0]
	ldrh r1, [r5, r2]
	strb r1, [r0, #1]
	add r0, r0, #2
	bpl _020AB19C
_020AB1C0:
	mov r2, #0
	mov r0, r6
	mov r3, r2
	add r1, sb, #9
	str sl, [sp]
	bl FUN_020A6F84
	mov r0, r4
	add r1, r6, #5
	add r2, sb, #4
	bl FUN_020AA434
	ldr r1, _020AB228 @ =0x021D4660
	mov r0, r6
	ldr r1, [r1]
	blx r1
	ldr r1, _020AB228 @ =0x021D4660
	mov r0, r5
	ldr r1, [r1]
	blx r1
	ldr r1, _020AB228 @ =0x021D4660
	mov r0, r8
	ldr r1, [r1]
	blx r1
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020AB220: .4byte 0x02108FB8
_020AB224: .4byte 0x021D4634
_020AB228: .4byte 0x021D4660
	arm_func_end FUN_020AAF6C

	arm_func_start FUN_020AB22C
FUN_020AB22C: @ 0x020AB22C
	push {r4, lr}
	mov r4, r0
	bl FUN_020AA6E0
	cmp r0, #7
	movne r0, #1
	popne {r4, pc}
	mov r0, r4
	bl FUN_020AA6E0
	cmp r0, #6
	movne r0, #1
	moveq r0, #0
	pop {r4, pc}
	arm_func_end FUN_020AB22C

	arm_func_start FUN_020AB25C
FUN_020AB25C: @ 0x020AB25C
	push {r4, lr}
	mov r4, r0
	bl FUN_020AA6E0
	cmp r0, #1
	movne r0, #1
	popne {r4, pc}
	mov r0, r4
	bl FUN_020AAA20
	cmp r0, #0
	beq _020AB2AC
	ldr r0, [r4, #0xc]
	bl FUN_020A9AD8
	mov r0, r4
	bl FUN_020AAC80
	mov r0, r4
	bl FUN_020AB22C
	cmp r0, #0
	beq _020AB2DC
	mov r0, #1
	pop {r4, pc}
_020AB2AC:
	mov r0, r4
	bl FUN_020AA6E0
	cmp r0, #5
	movne r0, #1
	popne {r4, pc}
	mov r0, r4
	bl FUN_020AB22C
	cmp r0, #0
	movne r0, #1
	popne {r4, pc}
	mov r0, r4
	bl FUN_020AAC80
_020AB2DC:
	mov r0, #0
	pop {r4, pc}
	arm_func_end FUN_020AB25C

	arm_func_start FUN_020AB2E4
FUN_020AB2E4: @ 0x020AB2E4
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	ldr r6, [r7, #0xc]
	mov r5, #0
	mov r4, #1
_020AB2F8:
	mov r0, r7
	bl FUN_020A699C
	strb r5, [r6, #0x455]
	str r5, [r6, #0x1d4]
	add r0, r6, #0x2ec
	strb r4, [r6, #0x454]
	bl FUN_020AC780
	add r0, r6, #0x3a4
	bl FUN_020ABEC0
	mov r0, r7
	bl FUN_020AB25C
	cmp r0, #0
	moveq r0, #8
	strbeq r0, [r6, #0x455]
	popeq {r3, r4, r5, r6, r7, pc}
	mov r0, r7
	bl FUN_020A6B74
	ldrh r0, [r7, #0x1a]
	strh r0, [r7, #0x18]
	ldr r0, [r7, #0x20]
	str r0, [r7, #0x1c]
	b _020AB2F8
	arm_func_end FUN_020AB2E4

	arm_func_start FUN_020AB350
FUN_020AB350: @ 0x020AB350
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020AB350

	arm_func_start FUN_020AB354
FUN_020AB354: @ 0x020AB354
	push {r3, r4, r5, lr}
	mov r5, r0
	ldr r4, [r5, #0xc]
	bl FUN_020AADD8
_020AB364:
	mov r0, r5
	bl FUN_020AA6E0
	cmp r0, #9
	moveq r0, #1
	popeq {r3, r4, r5, pc}
	cmp r0, #4
	beq _020AB38C
	ldrb r0, [r4, #0x31]
	cmp r0, #0
	beq _020AB364
_020AB38C:
	ldrb r0, [r4, #0x31]
	cmp r0, #0
	beq _020AB3C0
	mov r0, r4
	bl FUN_020A9AD8
	mov r0, r5
	bl FUN_020AB22C
	cmp r0, #0
	movne r0, #1
	popne {r3, r4, r5, pc}
	mov r0, r5
	bl FUN_020AAC80
	b _020AB410
_020AB3C0:
	mov r0, r5
	bl FUN_020AAF6C
	mov r0, r4
	bl FUN_020A9A78
	ldrb r0, [r4, #0x30]
	cmp r0, #0
	beq _020AB3EC
	ldrh r2, [r5, #0x18]
	ldr r1, [r5, #0x1c]
	mov r0, r4
	bl FUN_020A86CC
_020AB3EC:
	mov r0, r4
	bl FUN_020A9AD8
	mov r0, r5
	bl FUN_020AAC80
	mov r0, r5
	bl FUN_020AB22C
	cmp r0, #0
	movne r0, #1
	popne {r3, r4, r5, pc}
_020AB410:
	mov r0, #8
	strb r0, [r4, #0x455]
	mov r0, #0
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020AB354

	arm_func_start FUN_020AB420
FUN_020AB420: @ 0x020AB420
	push {r3, r4, r5, lr}
	mov r5, r0
	ldrb r1, [r5, #8]
	ldr r4, [r5, #0xc]
	cmp r1, #4
	beq _020AB448
	bl FUN_020A6A30
	cmp r0, #0
	movne r0, #1
	popne {r3, r4, r5, pc}
_020AB448:
	mov r1, #0
	strb r1, [r4, #0x455]
	str r1, [r4, #0x1d4]
	add r0, r4, #0x2ec
	strb r1, [r4, #0x454]
	bl FUN_020AC780
	add r0, r4, #0x3a4
	bl FUN_020ABEC0
	mov r0, r5
	bl FUN_020AB354
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020AB420

	arm_func_start FUN_020AB474
FUN_020AB474: @ 0x020AB474
	push {r4, r5, r6, lr}
	mov r5, r1
	ldr r4, [r5, #0xc]
	mov r6, r0
	ldr ip, [r4, #0x824]
	cmp ip, #0
	beq _020AB4F8
	ldrb r0, [r4, #0x456]
	cmp r0, #0
	bne _020AB4F8
	ldr r3, [r4, #0x82c]
	ldr r1, [r4, #0x828]
	mov r2, r5
	add r0, ip, r3
	sub r1, r1, r3
	bl FUN_020AA3C8
	cmp r0, #0
	beq _020AB4DC
	ldr r1, _020AB548 @ =0x021D4660
	ldr r0, [r4, #0x824]
	ldr r1, [r1]
	blx r1
	mov r0, #0
	str r0, [r4, #0x824]
	str r0, [r6]
	pop {r4, r5, r6, pc}
_020AB4DC:
	ldr r1, [r4, #0x824]
	mov r0, r4
	bl FUN_020AA460
	ldrb r0, [r4, #0x456]
	cmp r0, #0
	moveq r0, #0
	streq r0, [r4, #0x824]
_020AB4F8:
	ldr r0, [r4, #0x824]
	cmp r0, #0
	bne _020AB528
_020AB504:
	mov r0, r5
	bl FUN_020AA6E0
	cmp r0, #9
	moveq r0, #0
	streq r0, [r6]
	popeq {r4, r5, r6, pc}
	ldr r0, [r4, #0x824]
	cmp r0, #0
	beq _020AB504
_020AB528:
	ldr r1, [r4, #0x828]
	ldr r0, [r4, #0x82c]
	sub r0, r1, r0
	str r0, [r6]
	ldr r1, [r4, #0x824]
	ldr r0, [r4, #0x82c]
	add r0, r1, r0
	pop {r4, r5, r6, pc}
	.align 2, 0
_020AB548: .4byte 0x021D4660
	arm_func_end FUN_020AB474

	arm_func_start FUN_020AB54C
FUN_020AB54C: @ 0x020AB54C
	push {r4, lr}
	ldr r4, [r1, #0xc]
	ldr r2, [r4, #0x828]
	ldr r1, [r4, #0x82c]
	sub r2, r2, r1
	cmp r0, r2
	blo _020AB58C
	ldr r0, [r4, #0x824]
	cmp r0, #0
	beq _020AB580
	ldr r1, _020AB598 @ =0x021D4660
	ldr r1, [r1]
	blx r1
_020AB580:
	mov r0, #0
	str r0, [r4, #0x824]
	pop {r4, pc}
_020AB58C:
	add r0, r1, r0
	str r0, [r4, #0x82c]
	pop {r4, pc}
	.align 2, 0
_020AB598: .4byte 0x021D4660
	arm_func_end FUN_020AB54C

	arm_func_start FUN_020AB59C
FUN_020AB59C: @ 0x020AB59C
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #4
	mov r5, r0
	ldr r4, [r5, #0xc]
	ldr r0, [r4, #0x824]
	cmp r0, #0
	ldr r0, [r5, #0x44]
	bne _020AB63C
	cmp r0, #5
	addlo sp, sp, #4
	poplo {r3, r4, r5, r6, pc}
	add r0, sp, #0
	mov r1, r5
	bl FUN_020A6CDC
	ldrb r2, [r0, #3]
	ldrb r0, [r0, #4]
	ldr r1, _020AB6D8 @ =0x00004805
	add r0, r0, r2, lsl #8
	add r0, r0, #5
	str r0, [sp]
	cmp r0, r1
	movhi r0, #9
	addhi sp, sp, #4
	strbhi r0, [r4, #0x455]
	pophi {r3, r4, r5, r6, pc}
	ldr r1, _020AB6DC @ =0x021D4634
	ldr r1, [r1]
	blx r1
	cmp r0, #0
	str r0, [r4, #0x824]
	moveq r0, #9
	addeq sp, sp, #4
	strbeq r0, [r4, #0x455]
	popeq {r3, r4, r5, r6, pc}
	ldr r1, [sp]
	mov r0, #0
	str r1, [r4, #0x828]
	str r0, [r4, #0x82c]
	strb r0, [r4, #0x456]
	b _020AB648
_020AB63C:
	cmp r0, #0
	addeq sp, sp, #4
	popeq {r3, r4, r5, r6, pc}
_020AB648:
	add r0, sp, #0
	mov r1, r5
	bl FUN_020A6CDC
	ldr r3, [r4, #0x828]
	ldr r2, [r4, #0x82c]
	ldr r1, [sp]
	sub r2, r3, r2
	cmp r1, r2
	strhs r2, [sp]
	movhs r6, #1
	ldr r3, [r4, #0x824]
	ldr r1, [r4, #0x82c]
	ldr r2, [sp]
	add r1, r3, r1
	movlo r6, #0
	bl FUN_020D4A50
	ldr r0, [sp]
	mov r1, r5
	bl FUN_020A6DBC
	cmp r6, #0
	beq _020AB6C0
	ldr r1, [r4, #0x824]
	mov r0, r4
	bl FUN_020AA460
	ldrb r0, [r4, #0x456]
	add sp, sp, #4
	cmp r0, #0
	moveq r0, #0
	streq r0, [r4, #0x824]
	pop {r3, r4, r5, r6, pc}
_020AB6C0:
	ldr r1, [r4, #0x82c]
	ldr r0, [sp]
	add r0, r1, r0
	str r0, [r4, #0x82c]
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
	.align 2, 0
_020AB6D8: .4byte 0x00004805
_020AB6DC: .4byte 0x021D4634
	arm_func_end FUN_020AB59C

	arm_func_start FUN_020AB6E0
FUN_020AB6E0: @ 0x020AB6E0
	push {r3, r4, r5, lr}
	mov r5, r0
	ldr r4, [r5, #0xc]
	ldr r0, [r4, #0x824]
	cmp r0, #0
	ldrbne r0, [r4, #0x456]
	cmpne r0, #0
	bne _020AB708
	mov r0, r5
	bl FUN_020AB59C
_020AB708:
	ldr r1, [r4, #0x824]
	cmp r1, #0
	ldrbne r0, [r4, #0x456]
	cmpne r0, #0
	beq _020AB72C
	ldr r1, [r4, #0x828]
	ldr r0, [r4, #0x82c]
	sub r0, r1, r0
	pop {r3, r4, r5, pc}
_020AB72C:
	cmp r1, #0
	bne _020AB754
	ldrb r0, [r5, #8]
	cmp r0, #4
	bne _020AB74C
	ldrb r0, [r4, #0x455]
	cmp r0, #9
	bne _020AB754
_020AB74C:
	mvn r0, #0
	pop {r3, r4, r5, pc}
_020AB754:
	mov r0, #0
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020AB6E0

	arm_func_start FUN_020AB75C
FUN_020AB75C: @ 0x020AB75C
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0xc
	ldr r4, [sp, #0x30]
	mov sb, r1
	mov r1, r4
	ldr r1, [r1, #0xc]
	mov sl, r0
	mov r0, #0
	str r4, [sp, #0x30]
	str r1, [sp, #8]
	mov r8, r2
	add r5, sb, r3
	str r0, [sp, #4]
_020AB790:
	ldr r0, _020AB884 @ =0x00000B4F
	ldr r1, _020AB888 @ =0x021D4634
	cmp r5, r0
	movgt r6, r0
	movle r6, r5
	ldr r1, [r1]
	add r0, r6, #0x19
	blx r1
	movs r4, r0
	beq _020AB878
	cmp sb, r6
	movhs r7, r6
	movlo r7, sb
	mov r0, sl
	add r1, r4, #5
	mov r2, r7
	sub fp, r6, r7
	bl FUN_020D4A50
	add r1, r4, #5
	mov r0, r8
	add r1, r1, r7
	mov r2, fp
	add sl, sl, r7
	sub sb, sb, r7
	bl FUN_020D4A50
	mov r0, #0x17
	strb r0, [r4]
	mov r0, #3
	strb r0, [r4, #1]
	mov r0, #0
	strb r0, [r4, #2]
	asr r0, r6, #8
	strb r0, [r4, #3]
	ldr r0, [sp, #8]
	mov r1, r4
	add r8, r8, fp
	strb r6, [r4, #4]
	bl FUN_020AA1C4
	ldr r1, [sp, #0x30]
	mov r7, r0
	mov r2, #0
	str r1, [sp]
	mov r0, r4
	mov r1, r7
	mov r3, r2
	bl FUN_020A6F84
	cmp r0, r7
	ldr r1, _020AB88C @ =0x021D4660
	mov r0, r4
	ldr r1, [r1]
	movlo r6, #0
	blx r1
	ldr r0, [sp, #4]
	subs r5, r5, r6
	add r0, r0, r6
	str r0, [sp, #4]
	cmpne r6, #0
	bne _020AB790
_020AB878:
	ldr r0, [sp, #4]
	add sp, sp, #0xc
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020AB884: .4byte 0x00000B4F
_020AB888: .4byte 0x021D4634
_020AB88C: .4byte 0x021D4660
	arm_func_end FUN_020AB75C

	arm_func_start FUN_020AB890
FUN_020AB890: @ 0x020AB890
	push {r4, r5, r6, lr}
	sub sp, sp, #0x20
	mov r5, r0
	ldr r4, [r5, #0xc]
	ldrb r0, [r4, #0x455]
	cmp r0, #8
	bne _020AB900
	mov ip, #0
	mov r6, #0x15
	mov lr, #3
	mov r3, #2
	mov r2, #1
	add r1, sp, #4
	mov r0, r4
	strb r6, [sp, #4]
	strb lr, [sp, #5]
	strb ip, [sp, #6]
	strb ip, [sp, #7]
	strb r3, [sp, #8]
	strb r2, [sp, #9]
	strb ip, [sp, #0xa]
	bl FUN_020AA1C4
	mov r2, #0
	mov r1, r0
	add r0, sp, #4
	mov r3, r2
	str r5, [sp]
	bl FUN_020A6F84
_020AB900:
	mov r0, #0
	strb r0, [r4, #0x455]
	add sp, sp, #0x20
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020AB890

	arm_func_start FUN_020AB910
FUN_020AB910: @ 0x020AB910
	push {r4, lr}
	ldr r4, [r0, #0xc]
	mov r0, #0
	strb r0, [r4, #0x455]
	ldr r0, [r4, #0x824]
	cmp r0, #0
	beq _020AB938
	ldr r1, _020AB944 @ =0x021D4660
	ldr r1, [r1]
	blx r1
_020AB938:
	mov r0, #0
	str r0, [r4, #0x824]
	pop {r4, pc}
	.align 2, 0
_020AB944: .4byte 0x021D4660
	arm_func_end FUN_020AB910

	arm_func_start FUN_020AB948
FUN_020AB948: @ 0x020AB948
	push {r4, lr}
	mov r4, r0
	ldr r0, _020AB970 @ =_version_UBIQUITOUS_SSL
	bl OSi_ReferSymbol
	ldr r0, _020AB974 @ =0x021E16A0
	ldr r0, [r0, #4]
	ldr r0, [r0, #0xa4]
	cmp r0, #0
	strbne r4, [r0, #9]
	pop {r4, pc}
	.align 2, 0
_020AB970: .4byte _version_UBIQUITOUS_SSL
_020AB974: .4byte 0x021E16A0
	arm_func_end FUN_020AB948

	arm_func_start FUN_020AB978
FUN_020AB978: @ 0x020AB978
	push {r4, r5, r6, lr}
	mov r5, r0
	bl FUN_020D3A38
	mov r4, #0
	ldr r6, _020ABA4C @ =0x021D5E68
	ldr r1, _020ABA50 @ =0x000003BD
	mov r2, r4
_020AB994:
	ldrb r3, [r6, #0x5a]
	cmp r3, #0
	beq _020AB9B0
	ldr r3, [r6, #0x50]
	sub r3, r5, r3
	cmp r3, r1
	strbgt r2, [r6, #0x5a]
_020AB9B0:
	add r4, r4, #1
	cmp r4, #4
	add r6, r6, #0x5c
	blt _020AB994
	bl FUN_020D3A4C
	ldr r0, _020ABA54 @ =0x021E16A0
	ldr r4, [r0, #8]
	cmp r4, #0
	popeq {r4, r5, r6, pc}
	mov r6, #0
_020AB9D8:
	ldr r1, [r4, #0xa4]
	cmp r1, #0
	ldrne r0, [r1]
	cmpne r0, #0
	ldrbne r0, [r1, #9]
	cmpne r0, #0
	beq _020ABA3C
	ldrb r0, [r1, #8]
	cmp r0, #4
	bne _020ABA3C
	ldr r0, [r1, #0xc]
	ldrb r0, [r0, #0x455]
	cmp r0, #8
	bhs _020ABA3C
	ldr r0, [r1, #0x10]
	sub r0, r5, r0
	cmp r0, #0xef
	ble _020ABA3C
	ldr r0, [r1, #4]
	cmp r0, #2
	bne _020ABA3C
	strb r6, [r1, #8]
	str r6, [r1, #4]
	ldr r0, [r1]
	bl FUN_020D1F34
_020ABA3C:
	ldr r4, [r4, #0x68]
	cmp r4, #0
	bne _020AB9D8
	pop {r4, r5, r6, pc}
	.align 2, 0
_020ABA4C: .4byte 0x021D5E68
_020ABA50: .4byte 0x000003BD
_020ABA54: .4byte 0x021E16A0
	arm_func_end FUN_020AB978

	arm_func_start FUN_020ABA58
FUN_020ABA58: @ 0x020ABA58
	ldr ip, _020ABA6C @ =FUN_020D4994
	ldr r0, _020ABA70 @ =0x021D5E68
	mov r1, #0
	mov r2, #0x170
	bx ip
	.align 2, 0
_020ABA6C: .4byte FUN_020D4994
_020ABA70: .4byte 0x021D5E68
	arm_func_end FUN_020ABA58

	arm_func_start FUN_020ABA74
FUN_020ABA74: @ 0x020ABA74
	ldr ip, _020ABA88 @ =FUN_020D4A50
	mov r3, r0
	mov r0, r1
	mov r1, r3
	bx ip
	.align 2, 0
_020ABA88: .4byte FUN_020D4A50
	arm_func_end FUN_020ABA74

	arm_func_start FUN_020ABA8C
FUN_020ABA8C: @ 0x020ABA8C
	ldr ip, _020ABAA0 @ =FUN_020D4A50
	mov r3, r0
	mov r0, r1
	mov r1, r3
	bx ip
	.align 2, 0
_020ABAA0: .4byte FUN_020D4A50
	arm_func_end FUN_020ABA8C

	arm_func_start FUN_020ABAA4
FUN_020ABAA4: @ 0x020ABAA4
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x44
	str r0, [sp]
	ldr r3, [sp]
	add r0, sp, #4
	mov r2, #0x40
	ldm r3, {r4, r5, r6, r7}
	bl FUN_020ABA8C
	mov r3, #0
	ldr lr, _020ABEB8 @ =_02110718
	mov ip, r3
	add r2, sp, #4
_020ABAD4:
	ldr r1, _020ABEBC @ =_02110798
	ldrb r0, [lr]
	add sb, r1, r3, lsl #2
	eor r1, r6, r7
	and r8, r5, r1
	ldr r1, _020ABEBC @ =_02110798
	ldr r0, [r2, r0, lsl #2]
	ldr sl, [r1, r3, lsl #2]
	eor r1, r7, r8
	add r0, r1, r0
	add r0, sl, r0
	add r1, r4, r0
	lsr r0, r1, #0x19
	orr r0, r0, r1, lsl #7
	ldrb r1, [lr, #1]
	add r4, r5, r0
	eor r0, r5, r6
	and r0, r4, r0
	ldr sl, [r2, r1, lsl #2]
	eor r0, r6, r0
	add r0, r0, sl
	ldr r8, [sb, #4]
	ldrb sl, [lr, #2]
	add r0, r8, r0
	add r7, r7, r0
	lsr r0, r7, #0x14
	orr r0, r0, r7, lsl #12
	add r7, r4, r0
	eor r0, r4, r5
	and r0, r7, r0
	ldr r1, [sb, #8]
	ldrb fp, [lr, #3]
	ldr sl, [r2, sl, lsl #2]
	eor r0, r5, r0
	add r0, r0, sl
	add r0, r1, r0
	add r6, r6, r0
	lsr r1, r6, #0xf
	orr r1, r1, r6, lsl #17
	add ip, ip, #1
	eor r8, r7, r4
	add r6, r7, r1
	and r1, r6, r8
	ldr r0, [r2, fp, lsl #2]
	eor r1, r4, r1
	ldr sb, [sb, #0xc]
	add r0, r1, r0
	add r0, sb, r0
	add r1, r5, r0
	lsr r0, r1, #0xa
	orr r0, r0, r1, lsl #22
	add lr, lr, #4
	add r5, r6, r0
	add r3, r3, #4
	cmp ip, #4
	blt _020ABAD4
	ldr r0, _020ABEB8 @ =_02110718
	ldr lr, _020ABEBC @ =_02110798
	mov fp, #0
	add sl, r0, r3
	add sb, sp, #4
_020ABBC8:
	ldrb r0, [sl]
	add ip, lr, r3, lsl #2
	eor r1, r5, r6
	and r1, r7, r1
	ldr r8, [lr, r3, lsl #2]
	eor r1, r6, r1
	ldr r0, [sb, r0, lsl #2]
	ldr r2, [ip, #4]
	add r0, r1, r0
	add r0, r8, r0
	add r1, r4, r0
	lsr r0, r1, #0x1b
	orr r1, r0, r1, lsl #5
	ldrb r0, [sl, #1]
	add r4, r5, r1
	eor r1, r4, r5
	and r1, r6, r1
	eor r1, r5, r1
	ldr r0, [sb, r0, lsl #2]
	ldr r8, [ip, #8]
	add r0, r1, r0
	add r0, r2, r0
	add r2, r7, r0
	ldr r0, [ip, #0xc]
	lsr r1, r2, #0x17
	orr r1, r1, r2, lsl #9
	add r7, r4, r1
	eor r1, r7, r4
	and r1, r5, r1
	eor r2, r4, r1
	ldrb r1, [sl, #2]
	ldrb ip, [sl, #3]
	add sl, sl, #4
	ldr r1, [sb, r1, lsl #2]
	ldr ip, [sb, ip, lsl #2]
	add r1, r2, r1
	add r1, r8, r1
	add r2, r6, r1
	lsr r1, r2, #0x12
	orr r1, r1, r2, lsl #14
	add r6, r7, r1
	eor r1, r6, r7
	and r1, r4, r1
	eor r1, r7, r1
	add r1, r1, ip
	add r0, r0, r1
	add r1, r5, r0
	lsr r0, r1, #0xc
	orr r0, r0, r1, lsl #20
	add r5, r6, r0
	add r3, r3, #4
	add fp, fp, #1
	cmp fp, #4
	blt _020ABBC8
	ldr r0, _020ABEB8 @ =_02110718
	ldr r1, _020ABEBC @ =_02110798
	add r2, r0, r3
	mov r8, #0
	add r0, sp, #4
_020ABCB4:
	ldrb sb, [r2]
	add fp, r1, r3, lsl #2
	eor ip, r5, r6
	ldr sl, [r0, sb, lsl #2]
	eor ip, r7, ip
	ldr sb, [r1, r3, lsl #2]
	add sl, ip, sl
	add sb, sb, sl
	add sb, r4, sb
	lsr r4, sb, #0x1c
	ldrb sl, [r2, #1]
	orr r4, r4, sb, lsl #4
	add r4, r5, r4
	eor sb, r4, r5
	eor sb, r6, sb
	ldr ip, [r0, sl, lsl #2]
	ldr sl, [fp, #4]
	add sb, sb, ip
	add sb, sl, sb
	add sb, r7, sb
	lsr r7, sb, #0x15
	orr r7, r7, sb, lsl #11
	ldrb sb, [r2, #2]
	add r7, r4, r7
	ldr sl, [fp, #8]
	ldr ip, [r0, sb, lsl #2]
	ldr sb, [fp, #0xc]
	eor fp, r7, r4
	eor fp, r5, fp
	add fp, fp, ip
	add sl, sl, fp
	add sl, r6, sl
	lsr r6, sl, #0x10
	orr r6, r6, sl, lsl #16
	add r6, r7, r6
	eor sl, r6, r7
	eor fp, r4, sl
	ldrb sl, [r2, #3]
	add r2, r2, #4
	add r3, r3, #4
	ldr sl, [r0, sl, lsl #2]
	add r8, r8, #1
	add sl, fp, sl
	add sb, sb, sl
	add sb, r5, sb
	cmp r8, #4
	lsr r5, sb, #9
	orr r5, r5, sb, lsl #23
	add r5, r6, r5
	blt _020ABCB4
	ldr r0, _020ABEB8 @ =_02110718
	mov sb, #0
	add r8, r0, r3
	add r2, sp, #4
_020ABD8C:
	ldr r1, _020ABEBC @ =_02110798
	ldrb r0, [r8]
	add fp, r1, r3, lsl #2
	mvn r1, r7
	orr sl, r5, r1
	ldr r1, _020ABEBC @ =_02110798
	ldr r0, [r2, r0, lsl #2]
	ldr ip, [r1, r3, lsl #2]
	eor r1, r6, sl
	add r0, r1, r0
	add r0, ip, r0
	add r1, r4, r0
	lsr r0, r1, #0x1a
	orr r0, r0, r1, lsl #6
	ldrb r1, [r8, #1]
	add r4, r5, r0
	mvn r0, r6
	orr r0, r4, r0
	ldr ip, [r2, r1, lsl #2]
	eor r0, r5, r0
	add r0, r0, ip
	ldr sl, [fp, #4]
	ldrb ip, [r8, #2]
	add r0, sl, r0
	add r7, r7, r0
	lsr r0, r7, #0x16
	orr r0, r0, r7, lsl #10
	add r7, r4, r0
	mvn r0, r5
	orr r0, r7, r0
	ldr r1, [fp, #8]
	ldrb lr, [r8, #3]
	ldr ip, [r2, ip, lsl #2]
	eor r0, r4, r0
	add r0, r0, ip
	add r0, r1, r0
	add r6, r6, r0
	lsr r1, r6, #0x11
	orr r1, r1, r6, lsl #15
	add sb, sb, #1
	mvn sl, r4
	add r6, r7, r1
	orr r1, r6, sl
	ldr r0, [r2, lr, lsl #2]
	eor r1, r7, r1
	ldr fp, [fp, #0xc]
	add r0, r1, r0
	add r0, fp, r0
	add r1, r5, r0
	lsr r0, r1, #0xb
	orr r0, r0, r1, lsl #21
	add r8, r8, #4
	add r5, r6, r0
	add r3, r3, #4
	cmp sb, #4
	blt _020ABD8C
	ldr r0, [sp]
	ldr r0, [r0]
	add r1, r0, r4
	ldr r0, [sp]
	str r1, [r0]
	ldr r0, [r0, #4]
	add r1, r0, r5
	ldr r0, [sp]
	str r1, [r0, #4]
	ldr r0, [r0, #8]
	add r1, r0, r6
	ldr r0, [sp]
	str r1, [r0, #8]
	ldr r0, [r0, #0xc]
	add r1, r0, r7
	ldr r0, [sp]
	str r1, [r0, #0xc]
	add sp, sp, #0x44
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020ABEB8: .4byte _02110718
_020ABEBC: .4byte _02110798
	arm_func_end FUN_020ABAA4

	arm_func_start FUN_020ABEC0
FUN_020ABEC0: @ 0x020ABEC0
	push {r4, lr}
	mov r1, #0
	mov r2, #0x58
	mov r4, r0
	bl FUN_020D4994
	ldr r1, _020ABEF8 @ =0x67452301
	ldr r0, _020ABEFC @ =0xEFCDAB89
	str r1, [r4]
	ldr r1, _020ABF00 @ =0x98BADCFE
	str r0, [r4, #4]
	ldr r0, _020ABF04 @ =0x10325476
	str r1, [r4, #8]
	str r0, [r4, #0xc]
	pop {r4, pc}
	.align 2, 0
_020ABEF8: .4byte 0x67452301
_020ABEFC: .4byte 0xEFCDAB89
_020ABF00: .4byte 0x98BADCFE
_020ABF04: .4byte 0x10325476
	arm_func_end FUN_020ABEC0

	arm_func_start FUN_020ABF08
FUN_020ABF08: @ 0x020ABF08
	push {r4, r5, r6, r7, r8, lr}
	mov r8, r0
	ldr r3, [r8, #0x10]
	mov r6, r2
	add r0, r3, r6, lsl #3
	str r0, [r8, #0x10]
	cmp r0, r6, lsl #3
	ldrlo r0, [r8, #0x14]
	lsr r2, r3, #3
	addlo r0, r0, #1
	strlo r0, [r8, #0x14]
	ldr r0, [r8, #0x14]
	and r4, r2, #0x3f
	rsb r5, r4, #0x40
	add r0, r0, r6, lsr #29
	mov r7, r1
	str r0, [r8, #0x14]
	cmp r6, r5
	blo _020ABFA4
	add r1, r8, #0x18
	mov r0, r7
	mov r2, r5
	add r1, r1, r4
	bl FUN_020D4A50
	mov r0, r8
	add r1, r8, #0x18
	mov r4, #0
	bl FUN_020ABAA4
	add r0, r5, #0x3f
	cmp r0, r6
	bhs _020ABFA8
_020ABF84:
	mov r0, r8
	add r1, r7, r5
	bl FUN_020ABAA4
	add r5, r5, #0x40
	add r0, r5, #0x3f
	cmp r0, r6
	blo _020ABF84
	b _020ABFA8
_020ABFA4:
	mov r5, #0
_020ABFA8:
	add r1, r8, #0x18
	add r0, r7, r5
	add r1, r1, r4
	sub r2, r6, r5
	bl FUN_020D4A50
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020ABF08

	arm_func_start FUN_020ABFC0
FUN_020ABFC0: @ 0x020ABFC0
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	mov r0, r4
	add r1, r5, #0x10
	mov r2, #8
	bl FUN_020ABA74
	ldr r0, [r5, #0x10]
	ldr r1, _020AC024 @ =_02110758
	lsr r0, r0, #3
	and r0, r0, #0x3f
	cmp r0, #0x38
	rsblt r2, r0, #0x38
	rsbge r2, r0, #0x78
	mov r0, r5
	bl FUN_020ABF08
	mov r0, r5
	mov r1, r4
	mov r2, #8
	bl FUN_020ABF08
	mov r0, r4
	mov r1, r5
	mov r2, #0x10
	bl FUN_020ABA74
	pop {r3, r4, r5, pc}
	.align 2, 0
_020AC024: .4byte _02110758
	arm_func_end FUN_020ABFC0

	arm_func_start FUN_020AC028
FUN_020AC028: @ 0x020AC028
	add r2, r0, #0xd
	add ip, r0, #2
	and r3, r2, #0xf
	eor r2, r0, #8
	and ip, ip, #0xf
	ldr r3, [r1, r3, lsl #2]
	ldr r2, [r1, r2, lsl #2]
	ldr ip, [r1, ip, lsl #2]
	eor r2, r3, r2
	ldr r3, [r1, r0, lsl #2]
	eor r2, ip, r2
	eor r3, r3, r2
	lsr r2, r3, #0x1f
	orr r2, r2, r3, lsl #1
	str r2, [r1, r0, lsl #2]
	mov r0, r2
	bx lr
	arm_func_end FUN_020AC028

	arm_func_start FUN_020AC06C
FUN_020AC06C: @ 0x020AC06C
	push {r3, lr}
	lsrs r2, r2, #2
	mov lr, #0
	popeq {r3, pc}
_020AC07C:
	ldr ip, [r1], #4
	add lr, lr, #1
	lsr r3, ip, #0x18
	strb r3, [r0]
	lsr r3, ip, #0x10
	strb r3, [r0, #1]
	lsr r3, ip, #8
	strb r3, [r0, #2]
	strb ip, [r0, #3]
	cmp lr, r2
	add r0, r0, #4
	blo _020AC07C
	pop {r3, pc}
	arm_func_end FUN_020AC06C

	arm_func_start FUN_020AC0B0
FUN_020AC0B0: @ 0x020AC0B0
	push {r3, r4, r5, lr}
	mov r5, #0
	cmp r2, #0
	popls {r3, r4, r5, pc}
_020AC0C0:
	add r4, r1, r5
	ldrb r3, [r4, #1]
	ldrb ip, [r1, r5]
	ldrb lr, [r4, #2]
	lsl r3, r3, #0x10
	orr r3, r3, ip, lsl #24
	ldrb ip, [r4, #3]
	orr r3, r3, lr, lsl #8
	add r5, r5, #4
	orr r3, ip, r3
	cmp r5, r2
	str r3, [r0], #4
	blo _020AC0C0
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020AC0B0

	arm_func_start FUN_020AC0F8
FUN_020AC0F8: @ 0x020AC0F8
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x50
	str r0, [sp]
	ldr r3, [sp]
	add r0, sp, #0x10
	ldm r3, {r4, r5, r7, r8, sb}
	mov r2, #0x40
	bl FUN_020AC0B0
	mov r0, #0
	ldr r3, _020AC770 @ =0x5A827999
	mov r2, r0
	add r1, sp, #0x10
_020AC128:
	eor r6, r7, r8
	lsr sl, r4, #0x1b
	and r6, r5, r6
	orr fp, sl, r4, lsl #5
	eor r6, r8, r6
	lsr sl, r5, #2
	orr sl, sl, r5, lsl #30
	add r5, r1, r0, lsl #2
	add r6, fp, r6
	ldr ip, [r1, r0, lsl #2]
	ldr fp, [r5, #4]
	add r6, ip, r6
	add r6, r6, r3
	add sb, sb, r6
	lsr r6, sb, #0x1b
	orr r6, r6, sb, lsl #5
	eor ip, sl, r7
	and ip, r4, ip
	eor ip, r7, ip
	add r6, r6, ip
	add r6, fp, r6
	add r6, r6, r3
	add r8, r8, r6
	lsr r6, r4, #2
	orr r4, r6, r4, lsl #30
	ldr fp, [r5, #8]
	lsr r6, r8, #0x1b
	orr r6, r6, r8, lsl #5
	eor ip, r4, sl
	and ip, sb, ip
	eor ip, sl, ip
	add r6, r6, ip
	add r6, fp, r6
	add r6, r6, r3
	add r6, r7, r6
	lsr r7, sb, #2
	orr sb, r7, sb, lsl #30
	ldr r7, [r5, #0xc]
	ldr fp, [r5, #0x10]
	lsr r5, r6, #0x1b
	orr r5, r5, r6, lsl #5
	eor ip, sb, r4
	and ip, r8, ip
	eor ip, r4, ip
	add r5, r5, ip
	add r5, r7, r5
	add r5, r5, r3
	add r5, sl, r5
	lsr r7, r8, #2
	orr r8, r7, r8, lsl #30
	lsr r7, r5, #0x1b
	orr r7, r7, r5, lsl #5
	eor sl, r8, sb
	and sl, r6, sl
	eor sl, sb, sl
	add r7, r7, sl
	add r7, fp, r7
	add r7, r7, r3
	add r4, r4, r7
	lsr r7, r6, #2
	orr r7, r7, r6, lsl #30
	add r0, r0, #5
	add r2, r2, #1
	cmp r2, #3
	blt _020AC128
	eor r0, r7, r8
	lsr r2, r4, #0x1b
	and r0, r5, r0
	orr r3, r2, r4, lsl #5
	eor r0, r8, r0
	add r3, r3, r0
	ldr r6, [sp, #0x4c]
	ldr r0, _020AC770 @ =0x5A827999
	add r3, r6, r3
	add r3, r3, r0
	lsr r2, r5, #2
	orr r6, r2, r5, lsl #30
	mov r0, #0
	add sb, sb, r3
	bl FUN_020AC028
	eor r1, r6, r7
	lsr r3, sb, #0x1b
	and r1, r4, r1
	lsr r2, r4, #2
	orr r3, r3, sb, lsl #5
	eor r1, r7, r1
	add r1, r3, r1
	add r3, r1, r0
	ldr r0, _020AC770 @ =0x5A827999
	add r1, sp, #0x10
	add r3, r3, r0
	orr r5, r2, r4, lsl #30
	mov r0, #1
	add r8, r8, r3
	bl FUN_020AC028
	eor r1, r5, r6
	lsr r2, r8, #0x1b
	and r1, sb, r1
	orr r2, r2, r8, lsl #5
	eor r1, r6, r1
	add r1, r2, r1
	add r2, r1, r0
	ldr r0, _020AC770 @ =0x5A827999
	lsr r1, sb, #2
	add r0, r2, r0
	orr sb, r1, sb, lsl #30
	add r7, r7, r0
	add r1, sp, #0x10
	mov r0, #2
	bl FUN_020AC028
	lsr r1, r7, #0x1b
	orr r2, r1, r7, lsl #5
	eor r1, sb, r5
	and r1, r8, r1
	eor r1, r5, r1
	add r1, r2, r1
	add r2, r1, r0
	ldr r0, _020AC770 @ =0x5A827999
	lsr r1, r8, #2
	add r0, r2, r0
	orr r8, r1, r8, lsl #30
	add r6, r6, r0
	mov r0, #3
	add r1, sp, #0x10
	bl FUN_020AC028
	lsr r1, r6, #0x1b
	orr r2, r1, r6, lsl #5
	eor r1, r8, sb
	and r1, r7, r1
	eor r1, sb, r1
	add r1, r2, r1
	add r2, r1, r0
	ldr r0, _020AC770 @ =0x5A827999
	lsr r1, r7, #2
	add r0, r2, r0
	add r5, r5, r0
	mov r0, #0
	ldr r4, _020AC774 @ =0x6ED9EBA1
	orr r7, r1, r7, lsl #30
	mov sl, #4
	str r0, [sp, #4]
	add fp, sp, #0x10
_020AC360:
	mov r0, sl
	mov r1, fp
	bl FUN_020AC028
	lsr r2, r5, #0x1b
	eor r1, r6, r7
	orr r2, r2, r5, lsl #5
	eor r1, r8, r1
	add r1, r2, r1
	add r0, r1, r0
	add r1, r0, r4
	lsr r0, r6, #2
	add sb, sb, r1
	orr r6, r0, r6, lsl #30
	add r0, sl, #1
	mov r1, fp
	bl FUN_020AC028
	lsr r1, sb, #0x1b
	orr r2, r1, sb, lsl #5
	eor r1, r5, r6
	eor r1, r7, r1
	add r1, r2, r1
	add r0, r1, r0
	add r0, r0, r4
	add r8, r8, r0
	lsr r0, r5, #2
	orr r5, r0, r5, lsl #30
	add r0, sl, #2
	and sl, r0, #0xf
	mov r0, sl
	mov r1, fp
	bl FUN_020AC028
	lsr r1, r8, #0x1b
	orr r2, r1, r8, lsl #5
	eor r1, sb, r5
	eor r1, r6, r1
	add r1, r2, r1
	add r0, r1, r0
	add r0, r0, r4
	add r7, r7, r0
	lsr r0, sb, #2
	orr sb, r0, sb, lsl #30
	add r0, sl, #1
	mov r1, fp
	bl FUN_020AC028
	lsr r1, r7, #0x1b
	orr r2, r1, r7, lsl #5
	eor r1, r8, sb
	eor r1, r5, r1
	add r1, r2, r1
	add r0, r1, r0
	add r0, r0, r4
	add r6, r6, r0
	lsr r0, r8, #2
	orr r8, r0, r8, lsl #30
	add r0, sl, #2
	mov r1, fp
	bl FUN_020AC028
	lsr r1, r6, #0x1b
	orr r2, r1, r6, lsl #5
	eor r1, r7, r8
	eor r1, sb, r1
	add r1, r2, r1
	add r0, r1, r0
	add r0, r0, r4
	add r5, r5, r0
	lsr r1, r7, #2
	ldr r0, [sp, #4]
	add r0, r0, #1
	str r0, [sp, #4]
	cmp r0, #4
	orr r7, r1, r7, lsl #30
	add sl, sl, #3
	blt _020AC360
	mov r0, #0
	ldr r4, _020AC778 @ =0x8F1BBCDC
	str r0, [sp, #8]
	add fp, sp, #0x10
_020AC494:
	mov r0, sl
	mov r1, fp
	bl FUN_020AC028
	orr r2, r7, r8
	lsr r1, r5, #0x1b
	orr r1, r1, r5, lsl #5
	and r3, r6, r2
	and r2, r7, r8
	orr r2, r3, r2
	add r1, r1, r2
	add r1, r1, r0
	lsr r0, r6, #2
	add r1, r1, r4
	add sb, sb, r1
	orr r6, r0, r6, lsl #30
	add r0, sl, #1
	mov r1, fp
	bl FUN_020AC028
	lsr r1, sb, #0x1b
	orr r1, r1, sb, lsl #5
	orr r2, r6, r7
	and r3, r5, r2
	and r2, r6, r7
	orr r2, r3, r2
	add r1, r1, r2
	add r0, r1, r0
	add r0, r0, r4
	add r8, r8, r0
	lsr r0, r5, #2
	orr r5, r0, r5, lsl #30
	add r0, sl, #2
	mov r1, fp
	bl FUN_020AC028
	lsr r1, r8, #0x1b
	orr r1, r1, r8, lsl #5
	orr r2, r5, r6
	and r3, sb, r2
	and r2, r5, r6
	orr r2, r3, r2
	add r1, r1, r2
	add r0, r1, r0
	add r0, r0, r4
	add r7, r7, r0
	lsr r0, sb, #2
	orr sb, r0, sb, lsl #30
	add r0, sl, #3
	and sl, r0, #0xf
	mov r0, sl
	mov r1, fp
	bl FUN_020AC028
	lsr r1, r7, #0x1b
	orr r1, r1, r7, lsl #5
	orr r2, sb, r5
	and r3, r8, r2
	and r2, sb, r5
	orr r2, r3, r2
	add r1, r1, r2
	add r0, r1, r0
	add r0, r0, r4
	add r6, r6, r0
	lsr r0, r8, #2
	orr r8, r0, r8, lsl #30
	add r0, sl, #1
	mov r1, fp
	bl FUN_020AC028
	lsr r1, r6, #0x1b
	orr r1, r1, r6, lsl #5
	orr r2, r8, sb
	and r3, r7, r2
	and r2, r8, sb
	orr r2, r3, r2
	add r1, r1, r2
	add r0, r1, r0
	add r0, r0, r4
	add r5, r5, r0
	lsr r1, r7, #2
	ldr r0, [sp, #8]
	add r0, r0, #1
	str r0, [sp, #8]
	cmp r0, #4
	orr r7, r1, r7, lsl #30
	add sl, sl, #2
	blt _020AC494
	mov r0, #0
	ldr r4, _020AC77C @ =0xCA62C1D6
	str r0, [sp, #0xc]
	add fp, sp, #0x10
_020AC5F0:
	mov r0, sl
	mov r1, fp
	bl FUN_020AC028
	lsr r2, r5, #0x1b
	eor r1, r6, r7
	orr r2, r2, r5, lsl #5
	eor r1, r8, r1
	add r1, r2, r1
	add r0, r1, r0
	add r1, r0, r4
	lsr r0, r6, #2
	add sb, sb, r1
	orr r6, r0, r6, lsl #30
	add r0, sl, #1
	mov r1, fp
	bl FUN_020AC028
	lsr r1, sb, #0x1b
	orr r2, r1, sb, lsl #5
	eor r1, r5, r6
	eor r1, r7, r1
	add r1, r2, r1
	add r0, r1, r0
	add r0, r0, r4
	add r8, r8, r0
	lsr r0, r5, #2
	orr r5, r0, r5, lsl #30
	add r0, sl, #2
	mov r1, fp
	bl FUN_020AC028
	lsr r1, r8, #0x1b
	orr r2, r1, r8, lsl #5
	eor r1, sb, r5
	eor r1, r6, r1
	add r1, r2, r1
	add r0, r1, r0
	add r0, r0, r4
	add r7, r7, r0
	lsr r0, sb, #2
	orr sb, r0, sb, lsl #30
	add r0, sl, #3
	mov r1, fp
	bl FUN_020AC028
	lsr r1, r7, #0x1b
	orr r2, r1, r7, lsl #5
	eor r1, r8, sb
	eor r1, r5, r1
	add r1, r2, r1
	add r0, r1, r0
	add r0, r0, r4
	add r6, r6, r0
	lsr r0, r8, #2
	orr r8, r0, r8, lsl #30
	add r0, sl, #4
	and sl, r0, #0xf
	mov r0, sl
	mov r1, fp
	bl FUN_020AC028
	lsr r1, r6, #0x1b
	orr r2, r1, r6, lsl #5
	eor r1, r7, r8
	eor r1, sb, r1
	add r1, r2, r1
	add r0, r1, r0
	add r0, r0, r4
	add r5, r5, r0
	lsr r1, r7, #2
	ldr r0, [sp, #0xc]
	add r0, r0, #1
	str r0, [sp, #0xc]
	cmp r0, #4
	orr r7, r1, r7, lsl #30
	add sl, sl, #1
	blt _020AC5F0
	ldr r0, [sp]
	ldr r0, [r0]
	add r1, r0, r5
	ldr r0, [sp]
	str r1, [r0]
	ldr r0, [r0, #4]
	add r1, r0, r6
	ldr r0, [sp]
	str r1, [r0, #4]
	ldr r0, [r0, #8]
	add r1, r0, r7
	ldr r0, [sp]
	str r1, [r0, #8]
	ldr r0, [r0, #0xc]
	add r1, r0, r8
	ldr r0, [sp]
	str r1, [r0, #0xc]
	ldr r0, [r0, #0x10]
	add r1, r0, sb
	ldr r0, [sp]
	str r1, [r0, #0x10]
	add sp, sp, #0x50
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020AC770: .4byte 0x5A827999
_020AC774: .4byte 0x6ED9EBA1
_020AC778: .4byte 0x8F1BBCDC
_020AC77C: .4byte 0xCA62C1D6
	arm_func_end FUN_020AC0F8

	arm_func_start FUN_020AC780
FUN_020AC780: @ 0x020AC780
	push {r4, lr}
	mov r1, #0
	mov r2, #0x5c
	mov r4, r0
	bl FUN_020D4994
	ldr r0, _020AC7C0 @ =0x67452301
	ldr r1, _020AC7C4 @ =0xEFCDAB89
	str r0, [r4]
	ldr r0, _020AC7C8 @ =0x98BADCFE
	str r1, [r4, #4]
	ldr r1, _020AC7CC @ =0x10325476
	str r0, [r4, #8]
	ldr r0, _020AC7D0 @ =0xC3D2E1F0
	str r1, [r4, #0xc]
	str r0, [r4, #0x10]
	pop {r4, pc}
	.align 2, 0
_020AC7C0: .4byte 0x67452301
_020AC7C4: .4byte 0xEFCDAB89
_020AC7C8: .4byte 0x98BADCFE
_020AC7CC: .4byte 0x10325476
_020AC7D0: .4byte 0xC3D2E1F0
	arm_func_end FUN_020AC780

	arm_func_start FUN_020AC7D4
FUN_020AC7D4: @ 0x020AC7D4
	push {r4, r5, r6, r7, r8, lr}
	mov r8, r0
	ldr r3, [r8, #0x18]
	mov r6, r2
	add r0, r3, r6, lsl #3
	str r0, [r8, #0x18]
	cmp r0, r6, lsl #3
	ldrlo r0, [r8, #0x14]
	lsr r2, r3, #3
	addlo r0, r0, #1
	strlo r0, [r8, #0x14]
	ldr r0, [r8, #0x14]
	and r4, r2, #0x3f
	rsb r5, r4, #0x40
	add r0, r0, r6, lsr #29
	mov r7, r1
	str r0, [r8, #0x14]
	cmp r6, r5
	blo _020AC870
	add r1, r8, #0x1c
	mov r0, r7
	mov r2, r5
	add r1, r1, r4
	bl FUN_020D4A50
	mov r0, r8
	add r1, r8, #0x1c
	mov r4, #0
	bl FUN_020AC0F8
	add r0, r5, #0x3f
	cmp r0, r6
	bhs _020AC874
_020AC850:
	mov r0, r8
	add r1, r7, r5
	bl FUN_020AC0F8
	add r5, r5, #0x40
	add r0, r5, #0x3f
	cmp r0, r6
	blo _020AC850
	b _020AC874
_020AC870:
	mov r5, #0
_020AC874:
	add r1, r8, #0x1c
	add r0, r7, r5
	add r1, r1, r4
	sub r2, r6, r5
	bl FUN_020D4A50
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020AC7D4

	arm_func_start FUN_020AC88C
FUN_020AC88C: @ 0x020AC88C
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	mov r0, r4
	add r1, r5, #0x14
	mov r2, #8
	bl FUN_020AC06C
	ldr r0, [r5, #0x18]
	ldr r1, _020AC8F0 @ =_02110898
	lsr r0, r0, #3
	and r0, r0, #0x3f
	cmp r0, #0x38
	rsblt r2, r0, #0x38
	rsbge r2, r0, #0x78
	mov r0, r5
	bl FUN_020AC7D4
	mov r0, r5
	mov r1, r4
	mov r2, #8
	bl FUN_020AC7D4
	mov r0, r4
	mov r1, r5
	mov r2, #0x14
	bl FUN_020AC06C
	pop {r3, r4, r5, pc}
	.align 2, 0
_020AC8F0: .4byte _02110898
	arm_func_end FUN_020AC88C

	arm_func_start FUN_020AC8F4
FUN_020AC8F4: @ 0x020AC8F4
	push {r3, r4, r5, lr}
	mov r4, r1
	ldr r1, _020AC920 @ =_02110899
	mov r5, r0
	mov r2, #0x2c
	bl FUN_020AC7D4
	mov r0, r4
	mov r1, r5
	mov r2, #0x14
	bl FUN_020AC06C
	pop {r3, r4, r5, pc}
	.align 2, 0
_020AC920: .4byte _02110899
	arm_func_end FUN_020AC8F4

	arm_func_start FUN_020AC924
FUN_020AC924: @ 0x020AC924
	push {r3, r4, r5, r6, r7, lr}
	mov r3, #0
	strb r3, [r0]
	strb r3, [r0, #1]
	add r4, r0, #2
_020AC938:
	strb r3, [r4, r3]
	add r3, r3, #1
	cmp r3, #0x100
	blt _020AC938
	mov r6, #0
	mov r5, r6
	mov r7, r6
	mov r0, r6
_020AC958:
	ldrb lr, [r4, r7]
	ldrb ip, [r1, r6]
	add r3, r6, #1
	and r6, r3, #0xff
	add r3, lr, ip
	add r3, r5, r3
	and r5, r3, #0xff
	ldrb r3, [r4, r5]
	cmp r6, r2
	movge r6, r0
	strb r3, [r4, r7]
	add r7, r7, #1
	strb lr, [r4, r5]
	cmp r7, #0x100
	blt _020AC958
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020AC924

	arm_func_start FUN_020AC998
FUN_020AC998: @ 0x020AC998
	push {r4, r5, r6, lr}
	cmp r2, #0
	add r4, r0, #2
	ldrb ip, [r0]
	ldrb lr, [r0, #1]
	mov r3, #0
	ble _020AC9F8
_020AC9B4:
	add r5, ip, #1
	and ip, r5, #0xff
	ldrb r6, [r4, ip]
	add r5, lr, r6
	and lr, r5, #0xff
	ldrb r5, [r4, lr]
	strb r5, [r4, ip]
	add r5, r6, r5
	strb r6, [r4, lr]
	and r5, r5, #0xff
	ldrb r6, [r1, r3]
	ldrb r5, [r4, r5]
	eor r5, r6, r5
	strb r5, [r1, r3]
	add r3, r3, #1
	cmp r3, r2
	blt _020AC9B4
_020AC9F8:
	strb ip, [r0]
	strb lr, [r0, #1]
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020AC998

	arm_func_start FUN_020ACA04
FUN_020ACA04: @ 0x020ACA04
	b _020ACA0C
_020ACA08:
	sub r1, r1, #1
_020ACA0C:
	cmp r1, #0
	beq _020ACA24
	add r2, r0, r1, lsl #1
	ldrh r2, [r2, #-2]
	cmp r2, #0
	beq _020ACA08
_020ACA24:
	mov r0, r1
	bx lr
	arm_func_end FUN_020ACA04

	arm_func_start FUN_020ACA2C
FUN_020ACA2C: @ 0x020ACA2C
	push {r3, lr}
	sub r2, r1, #1
	lsl r2, r2, #1
	ldrh r2, [r0, r2]
	tst r2, #0x8000
	mvnne r0, #0
	popne {r3, pc}
	bl FUN_020ACA04
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	pop {r3, pc}
	arm_func_end FUN_020ACA2C

	arm_func_start FUN_020ACA5C
FUN_020ACA5C: @ 0x020ACA5C
	push {r4, r5, r6, r7, r8, lr}
	mov r7, r1
	mov r5, r3
	mov r8, r0
	mov r6, r2
	mov r0, r7
	mov r1, r5
	bl FUN_020ACA04
	mov r4, r0
	mov r0, r6
	mov r1, r5
	bl FUN_020ACA04
	cmp r4, r0
	movlt r4, r0
	cmp r4, r5
	addne r4, r4, #1
	mov ip, #0
	mov r3, ip
	cmp r4, #0
	ble _020ACAD4
_020ACAAC:
	lsl r2, r3, #1
	ldrh r1, [r7, r2]
	ldrh r0, [r6, r2]
	add r3, r3, #1
	cmp r3, r4
	add r0, r1, r0
	add r0, ip, r0
	strh r0, [r8, r2]
	lsr ip, r0, #0x10
	blt _020ACAAC
_020ACAD4:
	cmp r8, r7
	cmpne r8, r6
	popeq {r4, r5, r6, r7, r8, pc}
	sub r1, r5, r3
	add r0, r8, r3, lsl #1
	lsl r2, r1, #1
	mov r1, #0
	bl FUN_020D4994
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020ACA5C

	arm_func_start FUN_020ACAF8
FUN_020ACAF8: @ 0x020ACAF8
	push {r4, lr}
	cmp r3, #0
	mov r4, #0
	ble _020ACB2C
_020ACB08:
	lsl lr, r4, #1
	ldrh ip, [r1, lr]
	add r2, r2, ip
	strh r2, [r0, lr]
	lsrs r2, r2, #0x10
	beq _020ACB2C
	add r4, r4, #1
	cmp r4, r3
	blt _020ACB08
_020ACB2C:
	cmp r0, r1
	popeq {r4, pc}
	add r4, r4, #1
	cmp r4, r3
	popge {r4, pc}
_020ACB40:
	lsl ip, r4, #1
	ldrh r2, [r1, ip]
	add r4, r4, #1
	cmp r4, r3
	strh r2, [r0, ip]
	blt _020ACB40
	pop {r4, pc}
	arm_func_end FUN_020ACAF8

	arm_func_start FUN_020ACB5C
FUN_020ACB5C: @ 0x020ACB5C
	push {r3, lr}
	mov r3, r1
	cmp r3, #0
	mov ip, #0
	ble _020ACB8C
_020ACB70:
	lsl r2, ip, #1
	ldrh r1, [r0, r2]
	add ip, ip, #1
	cmp ip, r3
	mvn r1, r1
	strh r1, [r0, r2]
	blt _020ACB70
_020ACB8C:
	mov r1, r0
	mov r2, #1
	bl FUN_020ACAF8
	pop {r3, pc}
	arm_func_end FUN_020ACB5C

	arm_func_start FUN_020ACB9C
FUN_020ACB9C: @ 0x020ACB9C
	push {r4, r5, r6, r7, r8, lr}
	mov r7, r1
	mov r5, r3
	mov r8, r0
	mov r6, r2
	mov r0, r7
	mov r1, r5
	bl FUN_020ACA04
	mov r4, r0
	mov r0, r6
	mov r1, r5
	bl FUN_020ACA04
	cmp r4, r0
	movlt r4, r0
	mov ip, #0
	cmp r4, r5
	addne r4, r4, #1
	mov r3, ip
	b _020ACC08
_020ACBE8:
	lsl r2, r3, #1
	ldrh r1, [r7, r2]
	ldrh r0, [r6, r2]
	add r3, r3, #1
	sub r0, r1, r0
	add r0, ip, r0
	strh r0, [r8, r2]
	asr ip, r0, #0x10
_020ACC08:
	cmp r3, r4
	blt _020ACBE8
	cmp r3, r5
	bge _020ACC20
	cmp ip, #0
	bne _020ACBE8
_020ACC20:
	cmp r8, r7
	cmpne r8, r6
	popeq {r4, r5, r6, r7, r8, pc}
	sub r1, r5, r3
	add r0, r8, r3, lsl #1
	lsl r2, r1, #1
	mov r1, #0
	bl FUN_020D4994
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020ACB9C

	arm_func_start FUN_020ACC44
FUN_020ACC44: @ 0x020ACC44
	push {r4, lr}
	cmp r3, #0
	mov r4, #0
	ble _020ACC7C
_020ACC54:
	lsl lr, r4, #1
	ldrh ip, [r1, lr]
	sub ip, ip, r2
	lsr r2, ip, #0x10
	strh ip, [r0, lr]
	ands r2, r2, #1
	beq _020ACC7C
	add r4, r4, #1
	cmp r4, r3
	blt _020ACC54
_020ACC7C:
	cmp r0, r1
	popeq {r4, pc}
	add r4, r4, #1
	cmp r4, r3
	popge {r4, pc}
_020ACC90:
	lsl ip, r4, #1
	ldrh r2, [r1, ip]
	add r4, r4, #1
	cmp r4, r3
	strh r2, [r0, ip]
	blt _020ACC90
	pop {r4, pc}
	arm_func_end FUN_020ACC44

	arm_func_start FUN_020ACCAC
FUN_020ACCAC: @ 0x020ACCAC
	subs ip, r2, #1
	bmi _020ACCDC
_020ACCB4:
	lsl r2, ip, #1
	ldrh r3, [r1, r2]
	ldrh r2, [r0, r2]
	cmp r2, r3
	movhi r0, #1
	bxhi lr
	mvnlo r0, #0
	bxlo lr
	subs ip, ip, #1
	bpl _020ACCB4
_020ACCDC:
	mov r0, #0
	bx lr
	arm_func_end FUN_020ACCAC

	arm_func_start FUN_020ACCE4
FUN_020ACCE4: @ 0x020ACCE4
	push {r3, lr}
	b _020ACD04
_020ACCEC:
	lsl lr, r2, #1
	ldrh ip, [r0, lr]
	add r2, r2, #1
	add r1, r1, ip
	strh r1, [r0, lr]
	lsr r1, r1, #0x10
_020ACD04:
	cmp r1, #0
	popeq {r3, pc}
	cmp r2, r3
	blt _020ACCEC
	pop {r3, pc}
	arm_func_end FUN_020ACCE4

	arm_func_start FUN_020ACD18
FUN_020ACD18: @ 0x020ACD18
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #8
	mov r8, r3
	mov sl, r1
	mov sb, r2
	lsl r2, r8, #1
	mov r1, #0
	str r0, [sp]
	bl FUN_020D4994
	mov r0, sl
	mov r1, r8
	bl FUN_020ACA04
	mov fp, r0
	mov r0, sb
	mov r1, r8
	bl FUN_020ACA04
	str r0, [sp, #4]
	cmp r0, #0
	mov r5, #0
	addle sp, sp, #8
	pople {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020ACD6C:
	mov r6, #0
	sub r7, r8, r5
	lsl r4, r5, #1
	b _020ACDA0
_020ACD7C:
	lsl r0, r6, #1
	ldrh r3, [sl, r0]
	ldrh r1, [sb, r4]
	ldr r0, [sp]
	add r2, r5, r6
	mul r1, r3, r1
	mov r3, r8
	bl FUN_020ACCE4
	add r6, r6, #1
_020ACDA0:
	cmp r6, fp
	cmplt r6, r7
	blt _020ACD7C
	ldr r0, [sp, #4]
	add r5, r5, #1
	cmp r5, r0
	blt _020ACD6C
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_020ACD18

	arm_func_start FUN_020ACDC4
FUN_020ACDC4: @ 0x020ACDC4
	push {r3, r4, r5, r6, r7, lr}
	mov r6, r1
	mov r4, r3
	mov r7, r0
	mov r0, r6
	mov r1, r4
	mov r5, r2
	bl FUN_020ACA04
	mov r3, #0
	mov ip, r3
	cmp r0, #0
	ble _020ACE14
_020ACDF4:
	lsl r2, ip, #1
	ldrh r1, [r6, r2]
	add ip, ip, #1
	cmp ip, r0
	mla r1, r5, r1, r3
	strh r1, [r7, r2]
	lsr r3, r1, #0x10
	blt _020ACDF4
_020ACE14:
	cmp ip, r4
	lsllt r0, ip, #1
	addlt ip, ip, #1
	sub r1, r4, ip
	strhlt r3, [r7, r0]
	lsl r2, r1, #1
	add r0, r7, ip, lsl #1
	mov r1, #0
	bl FUN_020D4994
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020ACDC4

	arm_func_start FUN_020ACE3C
FUN_020ACE3C: @ 0x020ACE3C
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sb, r1
	mov r8, r2
	mov sl, r0
	mov r0, sb
	mov r1, r8
	bl FUN_020ACA04
	mov fp, r0
	cmp r8, fp, lsl #1
	lsl r0, fp, #1
	ble _020ACE7C
	sub r1, r8, r0
	add r0, sl, r0, lsl #1
	lsl r2, r1, #1
	mov r1, #0
	bl FUN_020D4994
_020ACE7C:
	cmp fp, #0
	mov r4, #0
	ble _020ACED0
	mov r5, r4
	sub r2, r8, #1
_020ACE90:
	cmp r5, r8
	bge _020ACED0
	lsl r0, r4, #1
	ldrh r3, [sb, r0]
	lsl r0, r5, #1
	cmp r5, r2
	mul r1, r3, r3
	strh r1, [sl, r0]
	beq _020ACED0
	add r4, r4, #1
	lsr r1, r1, #0x10
	add r0, sl, r0
	strh r1, [r0, #2]
	cmp r4, fp
	add r5, r5, #2
	blt _020ACE90
_020ACED0:
	mov r6, #0
	cmp fp, #0
	pople {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020ACEDC:
	lsl r0, r6, #1
	add r4, r6, #1
	str r0, [sp]
	b _020ACF4C
_020ACEEC:
	lsl r0, r4, #1
	ldrh r1, [sb, r0]
	ldr r0, [sp]
	ldrh r0, [sb, r0]
	mul r7, r1, r0
	ldr r0, _020ACF6C @ =0x7FFF8000
	cmp r7, r0
	mov r0, sl
	bhi _020ACF24
	mov r2, r5
	mov r3, r8
	lsl r1, r7, #1
	bl FUN_020ACCE4
	b _020ACF48
_020ACF24:
	mov r1, r7
	mov r2, r5
	mov r3, r8
	bl FUN_020ACCE4
	mov r1, r7
	mov r2, r5
	mov r0, sl
	mov r3, r8
	bl FUN_020ACCE4
_020ACF48:
	add r4, r4, #1
_020ACF4C:
	cmp r4, fp
	addlt r5, r6, r4
	cmplt r5, r8
	blt _020ACEEC
	add r6, r6, #1
	cmp r6, fp
	blt _020ACEDC
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020ACF6C: .4byte 0x7FFF8000
	arm_func_end FUN_020ACE3C

	arm_func_start FUN_020ACF70
FUN_020ACF70: @ 0x020ACF70
	ldrh r1, [r0]
	mov r0, #0
	bx lr
	arm_func_end FUN_020ACF70

	arm_func_start FUN_020ACF7C
FUN_020ACF7C: @ 0x020ACF7C
	ldrh r1, [r0]
	ldrh r0, [r0, #-2]
	lsl r0, r0, #0x10
	bx lr
	arm_func_end FUN_020ACF7C

	arm_func_start FUN_020ACF8C
FUN_020ACF8C: @ 0x020ACF8C
	ldrh r1, [r0]
	ldrh r2, [r0, #-2]
	ldrh r3, [r0, #-4]
	orr r0, r3, r2, lsl #16
	bx lr
	arm_func_end FUN_020ACF8C

	arm_func_start FUN_020ACFA0
FUN_020ACFA0: @ 0x020ACFA0
	ldrh r2, [r0]
	ldrh r3, [r0, #-2]
	orr r1, r3, r2, lsl #16
	ldrh r2, [r0, #-4]
	ldrh r3, [r0, #-6]
	orr r0, r3, r2, lsl #16
	bx lr
	arm_func_end FUN_020ACFA0

	arm_func_start FUN_020ACFBC
FUN_020ACFBC: @ 0x020ACFBC
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x20
	ldr sb, [sp, #0x48]
	ldr r8, [sp, #0x4c]
	str r1, [sp, #4]
	add r6, r8, sb, lsl #1
	str r0, [sp]
	mov sl, r2
	mov r0, r6
	lsl r2, sb, #2
	mov r1, #0
	str r3, [sp, #8]
	add r7, r6, sb, lsl #1
	bl FUN_020D4994
	ldr r0, [sp, #4]
	mov r1, sb
	bl FUN_020ACA04
	mov fp, r0
	mov r0, sl
	mov r1, sb
	bl FUN_020ACA04
	mov r5, r0
	cmp fp, #0
	cmpgt r5, #0
	ble _020AD154
	sub r0, sb, fp
	add r0, r5, r0
	sub r4, r0, #1
	cmp r4, sb
	blt _020AD048
	ldr r0, [sp, #4]
	mov r1, r7
	lsl r2, sb, #1
	bl FUN_020D4A50
	b _020AD154
_020AD048:
	ldr r0, [sp, #4]
	add r1, r6, r4, lsl #1
	lsl r2, fp, #1
	bl FUN_020D4A50
	cmp r5, #2
	ble _020AD07C
	add r0, sl, r5, lsl #1
	sub r0, r0, #2
	lsl fp, r5, #1
	bl FUN_020ACF8C
	str r0, [sp, #0x18]
	str r1, [sp, #0x10]
	b _020AD0B0
_020AD07C:
	add r0, sl, r5, lsl #1
	cmp r5, #1
	sub r0, r0, #2
	ble _020AD0A0
	lsl fp, r5, #1
	bl FUN_020ACF7C
	str r0, [sp, #0x18]
	str r1, [sp, #0x10]
	b _020AD0B0
_020AD0A0:
	lsl fp, r5, #1
	bl FUN_020ACF70
	str r0, [sp, #0x18]
	str r1, [sp, #0x10]
_020AD0B0:
	cmp r4, sb
	bge _020AD154
	lsl r0, sb, #1
	sub r0, r0, #1
	lsl r0, r0, #1
	str r0, [sp, #0x14]
_020AD0C8:
	ldr r2, [sp, #0x14]
	mov r1, r6
	add r0, r6, #2
	bl FUN_020E5AF8
	add r0, r7, fp
	bl FUN_020ACFA0
	ldr r2, [sp, #0x18]
	ldr r3, [sp, #0x10]
	bl FUN_020F2900
	mov r5, r0
	ldr r0, _020AD198 @ =0x0000FFFF
	cmp r5, r0
	movhi r5, r0
_020AD0FC:
	lsl r2, r5, #0x10
	mov r0, r8
	mov r1, sl
	lsr r2, r2, #0x10
	mov r3, sb
	bl FUN_020ACDC4
	mov r0, r7
	mov r1, r8
	mov r2, sb
	bl FUN_020ACCAC
	cmp r0, #0
	sublt r5, r5, #1
	blt _020AD0FC
	mov r0, r7
	mov r1, r7
	mov r2, r8
	mov r3, sb
	bl FUN_020ACB9C
	strh r5, [r6]
	add r4, r4, #1
	cmp r4, sb
	blt _020AD0C8
_020AD154:
	ldr r0, [sp]
	cmp r0, #0
	beq _020AD170
	ldr r1, [sp]
	mov r0, r6
	lsl r2, sb, #1
	bl FUN_020D4A50
_020AD170:
	ldr r0, [sp, #8]
	cmp r0, #0
	addeq sp, sp, #0x20
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r1, [sp, #8]
	mov r0, r7
	lsl r2, sb, #1
	bl FUN_020D4A50
	add sp, sp, #0x20
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020AD198: .4byte 0x0000FFFF
	arm_func_end FUN_020ACFBC

	arm_func_start FUN_020AD19C
FUN_020AD19C: @ 0x020AD19C
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0xc
	ldr r4, _020AD328 @ =0x021D4634
	mov r8, r3
	ldr r3, [r4]
	mov sl, r0
	lsl r0, r8, #3
	ldr r7, [sp, #0x30]
	str r1, [sp, #8]
	mov sb, r2
	blx r3
	movs r4, r0
	addeq sp, sp, #0xc
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	sub r1, r8, #1
	add r0, sl, #2
	lsl r2, r1, #1
	mov r1, #0
	add r5, r4, r8, lsl #1
	bl FUN_020D4994
	mov r2, #1
	mov r0, sb
	mov r1, r8
	strh r2, [sl]
	bl FUN_020ACA04
	sub r0, r8, r0
	lsl r6, r0, #4
	cmp r6, r8, lsl #4
	bhs _020AD250
	mov r2, #0x8000
_020AD214:
	sub r0, r8, r6, asr #4
	add r0, sb, r0, lsl #1
	ldrh r0, [r0, #-2]
	and r1, r6, #0xf
	tst r0, r2, lsr r1
	beq _020AD244
	ldr r0, [sp, #8]
	mov r1, sl
	lsl r2, r8, #1
	bl FUN_020D4A50
	add r6, r6, #1
	b _020AD250
_020AD244:
	add r6, r6, #1
	cmp r6, r8, lsl #4
	blo _020AD214
_020AD250:
	cmp r6, r8, lsl #4
	bhs _020AD310
	lsl fp, r8, #1
_020AD25C:
	mov r0, r4
	mov r1, sl
	mov r2, r8
	bl FUN_020ACE3C
	mov r0, r4
	mov r1, sl
	mov r2, fp
	bl FUN_020D4A50
	cmp r7, #0
	beq _020AD2A0
	str r8, [sp]
	mov r0, #0
	mov r1, sl
	mov r2, r7
	mov r3, sl
	str r5, [sp, #4]
	bl FUN_020ACFBC
_020AD2A0:
	sub r0, r8, r6, asr #4
	add r0, sb, r0, lsl #1
	ldrh r1, [r0, #-2]
	and r2, r6, #0xf
	mov r0, #0x8000
	tst r1, r0, lsr r2
	beq _020AD304
	ldr r2, [sp, #8]
	mov r0, r4
	mov r1, sl
	mov r3, r8
	bl FUN_020ACD18
	mov r0, r4
	mov r1, sl
	mov r2, fp
	bl FUN_020D4A50
	cmp r7, #0
	beq _020AD304
	str r8, [sp]
	mov r0, #0
	mov r1, sl
	mov r2, r7
	mov r3, sl
	str r5, [sp, #4]
	bl FUN_020ACFBC
_020AD304:
	add r6, r6, #1
	cmp r6, r8, lsl #4
	blo _020AD25C
_020AD310:
	ldr r1, _020AD32C @ =0x021D4660
	mov r0, r4
	ldr r1, [r1]
	blx r1
	add sp, sp, #0xc
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020AD328: .4byte 0x021D4634
_020AD32C: .4byte 0x021D4660
	arm_func_end FUN_020AD19C

	arm_func_start FUN_020AD330
FUN_020AD330: @ 0x020AD330
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x14
	ldr sb, [sp, #0x38]
	mov sl, r3
	add fp, sb, sl, lsl #1
	add r4, fp, sl, lsl #1
	add r5, r4, sl, lsl #1
	add r6, r5, sl, lsl #1
	add r7, r6, sl, lsl #1
	str r0, [sp, #8]
	mov r0, r1
	add r1, r7, sl, lsl #1
	str r1, [sp, #0x10]
	lsl r8, sl, #1
	str r2, [sp, #0xc]
	mov r1, sb
	mov r2, r8
	bl FUN_020D4A50
	ldr r0, [sp, #0xc]
	mov r1, r4
	mov r2, r8
	bl FUN_020D4A50
	mov r0, #1
	strh r0, [r4, r8]
	mov r0, sb
	mov r1, sl
	bl FUN_020ACA2C
	cmp r0, #0
	ble _020AD440
_020AD3A4:
	ldr r3, [sp, #0x10]
	str sl, [sp]
	str r3, [sp, #4]
	mov r0, fp
	mov r1, r4
	mov r2, sb
	mov r3, r7
	bl FUN_020ACFBC
	mov r0, sb
	mov r1, r4
	mov r2, r8
	bl FUN_020D4A50
	mov r0, r7
	mov r1, sb
	mov r2, r8
	bl FUN_020D4A50
	mov r0, r7
	mov r1, fp
	mov r2, r5
	mov r3, sl
	bl FUN_020ACD18
	mov r0, r7
	mov r1, r6
	mov r2, r7
	mov r3, sl
	bl FUN_020ACB9C
	mov r0, r5
	mov r1, r6
	mov r2, r8
	bl FUN_020D4A50
	mov r0, r7
	mov r1, r5
	mov r2, r8
	bl FUN_020D4A50
	mov r0, sb
	mov r1, sl
	bl FUN_020ACA2C
	cmp r0, #0
	bgt _020AD3A4
_020AD440:
	ldr r2, [sp, #0xc]
	mov r0, r6
	mov r1, r6
	mov r3, sl
	bl FUN_020ACA5C
	ldr r2, [sp, #0xc]
	ldr r3, [sp, #8]
	ldr r4, [sp, #0x10]
	str sl, [sp]
	mov r1, r6
	mov r0, #0
	str r4, [sp, #4]
	bl FUN_020ACFBC
	add sp, sp, #0x14
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_020AD330

	arm_func_start FUN_020AD47C
FUN_020AD47C: @ 0x020AD47C
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r6, r3
	lsl r4, r6, #1
	mov r8, r2
	mov r2, r4
	mov r7, r0
	mov sb, r1
	ldr r5, [sp, #0x20]
	bl FUN_020D4A50
	cmp r8, #1
	bne _020AD4BC
	mov r0, r7
	mov r1, sb
	mov r2, r6
	bl FUN_020ACE3C
	b _020AD4D8
_020AD4BC:
	cmp r8, #0
	beq _020AD4D8
	mov r0, r7
	mov r1, sb
	mov r2, r8
	mov r3, r6
	bl FUN_020ACD18
_020AD4D8:
	ldr r0, [sp, #0x2c]
	ldr r2, [sp, #0x28]
	mov r1, r7
	mov r3, r5
	bl FUN_020ACD18
	sub r1, r6, r5
	ldr r0, [sp, #0x2c]
	lsl r8, r1, #1
	mov r2, r8
	add r0, r0, r5, lsl #1
	mov r1, #0
	bl FUN_020D4994
	ldr r0, [sp, #0x30]
	ldr r1, [sp, #0x2c]
	ldr r2, [sp, #0x24]
	mov r3, r6
	bl FUN_020ACD18
	mov r0, r7
	mov r1, r7
	ldr r2, [sp, #0x30]
	mov r3, r6
	bl FUN_020ACA5C
	mov r2, r8
	mov r0, r7
	add r1, r7, r5, lsl #1
	bl FUN_020E5AF8
	add r0, r7, r6, lsl #1
	sub r0, r0, r5, lsl #1
	lsl r2, r5, #1
	mov r1, #0
	bl FUN_020D4994
	mov r0, r7
	ldr r1, [sp, #0x24]
	mov r2, r6
	bl FUN_020ACCAC
	cmp r0, #0
	beq _020AD578
	cmp r0, #1
	beq _020AD58C
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_020AD578:
	mov r0, r7
	mov r2, r4
	mov r1, #0
	bl FUN_020D4994
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_020AD58C:
	ldr r2, [sp, #0x24]
	mov r0, r7
	mov r1, r7
	mov r3, r6
	bl FUN_020ACB9C
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	arm_func_end FUN_020AD47C

	arm_func_start FUN_020AD5A4
FUN_020AD5A4: @ 0x020AD5A4
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x2c
	mov sl, r3
	mov r3, #0x16
	mul r4, sl, r3
	ldr r3, _020AD7A8 @ =0x021D4634
	mov fp, r0
	ldr r3, [r3]
	mov r0, r4
	ldr sb, [sp, #0x50]
	str r1, [sp, #0x14]
	str r2, [sp, #0x18]
	blx r3
	str r0, [sp, #0x28]
	cmp r0, #0
	addeq sp, sp, #0x2c
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r2, r4
	mov r1, #0
	bl FUN_020D4994
	ldr r0, [sp, #0x28]
	mov r1, sl
	add r6, r0, sl, lsl #1
	add r0, r6, sl, lsl #1
	add r7, r0, sl, lsl #1
	add r8, r7, sl, lsl #1
	str r0, [sp, #0x24]
	add r0, r8, sl, lsl #1
	str r0, [sp, #0x20]
	add r5, r0, sl, lsl #1
	mov r0, sb
	bl FUN_020ACA04
	mov r4, r0
	ldr r0, [sp, #0x28]
	mov r2, #1
	lsl r1, r4, #1
	strh r2, [r0, r1]
	ldr r0, [sp, #0x24]
	ldr r1, [sp, #0x28]
	str r0, [sp]
	mov r0, r6
	mov r2, sb
	mov r3, sl
	bl FUN_020AD330
	ldr r1, [sp, #0x28]
	mov r0, r7
	mov r2, r6
	mov r3, sl
	bl FUN_020ACD18
	mov r0, r6
	mov r1, r7
	mov r2, #1
	mov r3, sl
	bl FUN_020ACC44
	str sl, [sp]
	mov r0, r6
	mov r1, r6
	mov r2, sb
	mov r3, #0
	str r5, [sp, #4]
	bl FUN_020ACFBC
	ldr r1, [sp, #0x14]
	ldr r0, [sp, #0x24]
	ldr r2, [sp, #0x28]
	mov r3, sl
	bl FUN_020ACD18
	ldr r1, [sp, #0x24]
	str sl, [sp]
	mov r0, #0
	mov r2, sb
	mov r3, r1
	str r5, [sp, #4]
	bl FUN_020ACFBC
	str sl, [sp]
	ldr r1, [sp, #0x28]
	mov r0, #0
	mov r2, sb
	mov r3, fp
	str r5, [sp, #4]
	bl FUN_020ACFBC
	lsls r0, r4, #4
	mov r5, #0
	str r0, [sp, #0x1c]
	beq _020AD76C
_020AD6F4:
	stm sp, {r4, sb}
	str r6, [sp, #8]
	str r7, [sp, #0xc]
	ldr r1, [sp, #0x20]
	mov r0, fp
	mov r2, #1
	mov r3, sl
	str r8, [sp, #0x10]
	bl FUN_020AD47C
	ldr r1, [sp, #0x18]
	sub r2, r4, r5, asr #4
	add r1, r1, r2, lsl #1
	ldrh r2, [r1, #-2]
	and r0, r5, #0xf
	mov r1, #0x8000
	tst r2, r1, lsr r0
	beq _020AD75C
	stm sp, {r4, sb}
	str r6, [sp, #8]
	str r7, [sp, #0xc]
	ldr r1, [sp, #0x20]
	ldr r2, [sp, #0x24]
	mov r0, fp
	mov r3, sl
	str r8, [sp, #0x10]
	bl FUN_020AD47C
_020AD75C:
	ldr r0, [sp, #0x1c]
	add r5, r5, #1
	cmp r5, r0
	blo _020AD6F4
_020AD76C:
	stm sp, {r4, sb}
	str r6, [sp, #8]
	str r7, [sp, #0xc]
	ldr r1, [sp, #0x20]
	mov r0, fp
	mov r3, sl
	mov r2, #0
	str r8, [sp, #0x10]
	bl FUN_020AD47C
	ldr r1, _020AD7AC @ =0x021D4660
	ldr r0, [sp, #0x28]
	ldr r1, [r1]
	blx r1
	add sp, sp, #0x2c
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020AD7A8: .4byte 0x021D4634
_020AD7AC: .4byte 0x021D4660
	arm_func_end FUN_020AD5A4

	arm_func_start FUN_020AD7B0
FUN_020AD7B0: @ 0x020AD7B0
	push {r4, r5, r6, lr}
	mov r6, r1
	mov r5, r2
	lsl r2, r3, #1
	mov r1, #0
	mov r4, r0
	bl FUN_020D4994
	sub r0, r5, #1
	cmp r5, #1
	add r6, r6, r0
	ble _020AD7FC
_020AD7DC:
	ldrb r1, [r6]
	ldrb r0, [r6, #-1]
	sub r5, r5, #2
	cmp r5, #1
	add r0, r1, r0, lsl #8
	strh r0, [r4], #2
	sub r6, r6, #2
	bgt _020AD7DC
_020AD7FC:
	cmp r5, #0
	ldrbgt r0, [r6]
	strhgt r0, [r4]
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020AD7B0

	arm_func_start FUN_020AD80C
FUN_020AD80C: @ 0x020AD80C
	sub r3, r2, #1
	cmp r2, #1
	add r0, r0, r3
	ble _020AD840
_020AD81C:
	ldrh r3, [r1]
	sub ip, r0, #1
	sub r2, r2, #2
	strb r3, [r0], #-2
	ldrh r3, [r1], #2
	cmp r2, #1
	asr r3, r3, #8
	strb r3, [ip]
	bgt _020AD81C
_020AD840:
	cmp r2, #0
	ldrhgt r1, [r1]
	strbgt r1, [r0]
	bx lr
	arm_func_end FUN_020AD80C

	arm_func_start FUN_020AD850
FUN_020AD850: @ 0x020AD850
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	bl FUN_020D3A38
	ldr r2, _020AD964 @ =0x021D5FEC
	mov r4, r0
	ldr r1, [r2]
	cmp r1, #0
	beq _020AD880
	bl FUN_020D3A4C
	mov r0, #1
	pop {r4, r5, r6, pc}
_020AD880:
	cmp r6, #0
	bne _020AD894
	bl FUN_020D3A4C
	mov r0, #1
	pop {r4, r5, r6, pc}
_020AD894:
	tst r6, #0x1f
	beq _020AD8A8
	bl FUN_020D3A4C
	mov r0, #1
	pop {r4, r5, r6, pc}
_020AD8A8:
	cmp r5, #0x2300
	bhs _020AD8BC
	bl FUN_020D3A4C
	mov r0, #6
	pop {r4, r5, r6, pc}
_020AD8BC:
	str r6, [r2]
	add r0, r6, #0x2000
	mov r1, #1
	str r1, [r0, #0x260]
	ldr r1, [r2]
	mov r0, #0
	add r1, r1, #0x2200
	strh r0, [r1, #0x80]
	ldr r1, [r2]
	add r1, r1, #0x2200
	strh r0, [r1, #0x68]
	ldr r1, [r2]
	add r1, r1, #0x2000
	strb r0, [r1, #0x26a]
	ldr r1, [r2]
	add r1, r1, #0x2000
	strb r0, [r1, #0x26b]
	ldr r1, [r2]
	add r1, r1, #0x2200
	strh r0, [r1, #0x82]
	ldr r1, [r2]
	add r1, r1, #0x2200
	strh r0, [r1, #0xf8]
	bl FUN_020AE7B4
	bl FUN_020AFE3C
	bl FUN_020D3438
	cmp r0, #0
	bne _020AD930
	bl FUN_020D33C0
_020AD930:
	bl FUN_020D369C
	cmp r0, #0
	bne _020AD940
	bl FUN_020D365C
_020AD940:
	ldr r0, _020AD964 @ =0x021D5FEC
	ldr r0, [r0]
	add r0, r0, #0x2cc
	add r0, r0, #0x2000
	bl FUN_020D36AC
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, #0
	pop {r4, r5, r6, pc}
	.align 2, 0
_020AD964: .4byte 0x021D5FEC
	arm_func_end FUN_020AD850

	arm_func_start FUN_020AD968
FUN_020AD968: @ 0x020AD968
	push {r3, lr}
	bl FUN_020D3A38
	ldr r2, _020AD9BC @ =0x021D5FEC
	ldr r1, [r2]
	cmp r1, #0
	bne _020AD98C
	bl FUN_020D3A4C
	mov r0, #1
	pop {r3, pc}
_020AD98C:
	add r1, r1, #0x2000
	ldr r1, [r1, #0x260]
	cmp r1, #1
	beq _020AD9A8
	bl FUN_020D3A4C
	mov r0, #1
	pop {r3, pc}
_020AD9A8:
	mov r1, #0
	str r1, [r2]
	bl FUN_020D3A4C
	mov r0, #0
	pop {r3, pc}
	.align 2, 0
_020AD9BC: .4byte 0x021D5FEC
	arm_func_end FUN_020AD968

	arm_func_start FUN_020AD9C0
FUN_020AD9C0: @ 0x020AD9C0
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	bl FUN_020D3A38
	ldr r1, _020ADBB8 @ =0x021D5FEC
	mov r4, r0
	ldr r1, [r1]
	cmp r1, #0
	bne _020AD9F0
	bl FUN_020D3A4C
	mov r0, #1
	pop {r4, r5, r6, pc}
_020AD9F0:
	add r1, r1, #0x2000
	ldr r1, [r1, #0x260]
	cmp r1, #1
	beq _020ADA14
	cmp r1, #2
	beq _020ADA24
	cmp r1, #3
	beq _020ADA30
	b _020ADA3C
_020ADA14:
	mov r0, r6
	mov r1, r5
	bl FUN_020AE4FC
	b _020ADA48
_020ADA24:
	bl FUN_020D3A4C
	mov r0, #2
	pop {r4, r5, r6, pc}
_020ADA30:
	bl FUN_020D3A4C
	mov r0, #0
	pop {r4, r5, r6, pc}
_020ADA3C:
	bl FUN_020D3A4C
	mov r0, #1
	pop {r4, r5, r6, pc}
_020ADA48:
	ldr r0, _020ADBB8 @ =0x021D5FEC
	ldr r0, [r0]
	add r1, r0, #0x2000
	ldr r1, [r1, #0x26c]
	lsl r1, r1, #0x10
	lsr r1, r1, #0x10
	bl FUN_020DE248
	cmp r0, #6
	addls pc, pc, r0, lsl #2
	b _020ADAB4
_020ADA70: @ jump table
	b _020ADACC @ case 0
	b _020ADAB4 @ case 1
	b _020ADAB4 @ case 2
	b _020ADA8C @ case 3
	b _020ADAA4 @ case 4
	b _020ADAB4 @ case 5
	b _020ADAB4 @ case 6
_020ADA8C:
	mov r0, #0xb
	bl FUN_020AE8FC
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, #7
	pop {r4, r5, r6, pc}
_020ADAA4:
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, #5
	pop {r4, r5, r6, pc}
_020ADAB4:
	mov r0, #0xb
	bl FUN_020AE8FC
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, #7
	pop {r4, r5, r6, pc}
_020ADACC:
	bl FUN_020DEF24
	cmp r0, #0
	bne _020ADB0C
	bl FUN_020DE458
	cmp r0, #0
	beq _020ADAFC
	mov r0, #0xb
	bl FUN_020AE8FC
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, #7
	pop {r4, r5, r6, pc}
_020ADAFC:
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, #5
	pop {r4, r5, r6, pc}
_020ADB0C:
	ldr r0, _020ADBBC @ =FUN_020AEAA8
	bl FUN_020DEBA8
	cmp r0, #0
	beq _020ADB34
	mov r0, #0xb
	bl FUN_020AE8FC
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, #7
	pop {r4, r5, r6, pc}
_020ADB34:
	ldr r0, _020ADBC0 @ =FUN_020AEB20
	bl FUN_020DF2C4
	cmp r0, #2
	beq _020ADB58
	cmp r0, #3
	beq _020ADB90
	cmp r0, #8
	beq _020ADB78
	b _020ADB90
_020ADB58:
	mov r0, #2
	bl FUN_020AE8FC
	ldr r0, _020ADBB8 @ =0x021D5FEC
	mov r1, #1
	ldr r0, [r0]
	add r0, r0, #0x2200
	strh r1, [r0, #0x80]
	b _020ADBA8
_020ADB78:
	mov r0, #0xc
	bl FUN_020AE8FC
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, #1
	pop {r4, r5, r6, pc}
_020ADB90:
	mov r0, #0xb
	bl FUN_020AE8FC
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, #7
	pop {r4, r5, r6, pc}
_020ADBA8:
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, #3
	pop {r4, r5, r6, pc}
	.align 2, 0
_020ADBB8: .4byte 0x021D5FEC
_020ADBBC: .4byte FUN_020AEAA8
_020ADBC0: .4byte FUN_020AEB20
	arm_func_end FUN_020AD9C0

	arm_func_start FUN_020ADBC4
FUN_020ADBC4: @ 0x020ADBC4
	push {r4, lr}
	bl FUN_020D3A38
	ldr r1, _020ADCAC @ =0x021D5FEC
	mov r4, r0
	ldr r1, [r1]
	cmp r1, #0
	bne _020ADBEC
	bl FUN_020D3A4C
	mov r0, #1
	pop {r4, pc}
_020ADBEC:
	add r1, r1, #0x2000
	ldr r1, [r1, #0x260]
	cmp r1, #1
	beq _020ADC18
	cmp r1, #3
	beq _020ADC30
	cmp r1, #4
	bne _020ADC24
	bl FUN_020D3A4C
	mov r0, #2
	pop {r4, pc}
_020ADC18:
	bl FUN_020D3A4C
	mov r0, #0
	pop {r4, pc}
_020ADC24:
	bl FUN_020D3A4C
	mov r0, #1
	pop {r4, pc}
_020ADC30:
	ldr r0, _020ADCB0 @ =FUN_020AEB20
	bl FUN_020DF3B8
	cmp r0, #2
	beq _020ADC54
	cmp r0, #3
	beq _020ADC84
	cmp r0, #8
	beq _020ADC74
	b _020ADC84
_020ADC54:
	mov r0, #4
	bl FUN_020AE8FC
	ldr r0, _020ADCAC @ =0x021D5FEC
	mov r1, #2
	ldr r0, [r0]
	add r0, r0, #0x2200
	strh r1, [r0, #0x80]
	b _020ADC9C
_020ADC74:
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, #4
	pop {r4, pc}
_020ADC84:
	mov r0, #0xb
	bl FUN_020AE8FC
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, #7
	pop {r4, pc}
_020ADC9C:
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, #3
	pop {r4, pc}
	.align 2, 0
_020ADCAC: .4byte 0x021D5FEC
_020ADCB0: .4byte FUN_020AEB20
	arm_func_end FUN_020ADBC4

	arm_func_start FUN_020ADCB4
FUN_020ADCB4: @ 0x020ADCB4
	push {r3, lr}
	cmp r0, #0
	cmpne r1, #0
	bne _020ADCCC
	bl FUN_020ADE4C
	pop {r3, pc}
_020ADCCC:
	bl FUN_020ADCD4
	pop {r3, pc}
	arm_func_end FUN_020ADCB4

	arm_func_start FUN_020ADCD4
FUN_020ADCD4: @ 0x020ADCD4
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	mov r6, r1
	mov r5, r2
	bl FUN_020D3A38
	ldr r1, _020ADE44 @ =0x021D5FEC
	mov r4, r0
	ldr r1, [r1]
	cmp r1, #0
	bne _020ADD08
	bl FUN_020D3A4C
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_020ADD08:
	add r1, r1, #0x2000
	ldr r1, [r1, #0x260]
	cmp r1, #3
	beq _020ADD78
	cmp r1, #5
	beq _020ADD2C
	cmp r1, #6
	beq _020ADD4C
	b _020ADD6C
_020ADD2C:
	mov r0, r7
	mov r1, r6
	mov r2, r5
	bl FUN_020AE61C
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, #2
	pop {r3, r4, r5, r6, r7, pc}
_020ADD4C:
	mov r0, r7
	mov r1, r6
	mov r2, r5
	bl FUN_020AE61C
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_020ADD6C:
	bl FUN_020D3A4C
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_020ADD78:
	mov r0, r7
	mov r1, r6
	mov r2, r5
	bl FUN_020AE61C
	ldr r0, _020ADE44 @ =0x021D5FEC
	ldr r0, [r0]
	add r1, r0, #0x2200
	add r0, r0, #0x2000
	ldrh r1, [r1, #0x8c]
	ldr r0, [r0, #0x288]
	bl FUN_020D285C
	ldr r2, _020ADE44 @ =0x021D5FEC
	ldr r0, _020ADE48 @ =FUN_020AEDDC
	ldr r1, [r2]
	add r1, r1, #0x2000
	ldr r3, [r1, #0x284]
	add r3, r3, #1
	str r3, [r1, #0x284]
	ldr r1, [r2]
	add r1, r1, #0x288
	add r1, r1, #0x2000
	bl FUN_020DF7BC
	cmp r0, #2
	beq _020ADDEC
	cmp r0, #3
	beq _020ADE1C
	cmp r0, #8
	beq _020ADE0C
	b _020ADE1C
_020ADDEC:
	mov r0, #5
	bl FUN_020AE8FC
	ldr r0, _020ADE44 @ =0x021D5FEC
	mov r1, #3
	ldr r0, [r0]
	add r0, r0, #0x2200
	strh r1, [r0, #0x80]
	b _020ADE34
_020ADE0C:
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, #4
	pop {r3, r4, r5, r6, r7, pc}
_020ADE1C:
	mov r0, #0xb
	bl FUN_020AE8FC
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, #7
	pop {r3, r4, r5, r6, r7, pc}
_020ADE34:
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, #3
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020ADE44: .4byte 0x021D5FEC
_020ADE48: .4byte FUN_020AEDDC
	arm_func_end FUN_020ADCD4

	arm_func_start FUN_020ADE4C
FUN_020ADE4C: @ 0x020ADE4C
	push {r4, lr}
	bl FUN_020D3A38
	ldr r1, _020ADEEC @ =0x021D5FEC
	mov r4, r0
	ldr r1, [r1]
	cmp r1, #0
	bne _020ADE74
	bl FUN_020D3A4C
	mov r0, #1
	pop {r4, pc}
_020ADE74:
	add r1, r1, #0x2000
	ldr r1, [r1, #0x260]
	cmp r1, #3
	beq _020ADEC4
	cmp r1, #6
	beq _020ADE98
	cmp r1, #7
	beq _020ADEB8
	b _020ADED0
_020ADE98:
	mov r0, #7
	bl FUN_020AE8FC
	ldr r0, _020ADEEC @ =0x021D5FEC
	mov r1, #4
	ldr r0, [r0]
	add r0, r0, #0x2200
	strh r1, [r0, #0x80]
	b _020ADEDC
_020ADEB8:
	bl FUN_020D3A4C
	mov r0, #2
	pop {r4, pc}
_020ADEC4:
	bl FUN_020D3A4C
	mov r0, #0
	pop {r4, pc}
_020ADED0:
	bl FUN_020D3A4C
	mov r0, #1
	pop {r4, pc}
_020ADEDC:
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, #3
	pop {r4, pc}
	.align 2, 0
_020ADEEC: .4byte 0x021D5FEC
	arm_func_end FUN_020ADE4C

	arm_func_start FUN_020ADEF0
FUN_020ADEF0: @ 0x020ADEF0
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	mov r6, r1
	mov r5, r2
	bl FUN_020D3A38
	ldr r2, _020AE0E8 @ =0x021D5FEC
	mov r4, r0
	ldr ip, [r2]
	cmp ip, #0
	bne _020ADF24
	bl FUN_020D3A4C
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_020ADF24:
	add r1, ip, #0x2000
	ldr r3, [r1, #0x260]
	cmp r3, #3
	beq _020ADF48
	cmp r3, #8
	beq _020AE038
	cmp r3, #9
	beq _020AE044
	b _020AE050
_020ADF48:
	cmp r7, #0
	bne _020ADF5C
	bl FUN_020D3A4C
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_020ADF5C:
	ldrh r3, [r7, #0x3c]
	cmp r3, #0
	beq _020ADF74
	bl FUN_020D3A4C
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_020ADF74:
	cmp r6, #0
	beq _020ADFEC
	ldrb r3, [r6]
	cmp r3, #4
	ldrblo r0, [r6, #1]
	cmplo r0, #4
	blo _020ADFA0
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_020ADFA0:
	strb r3, [r1, #0x250]
	ldr r0, [r2]
	ldrb r1, [r6, #1]
	add r0, r0, #0x2000
	strb r1, [r0, #0x251]
	ldr r1, [r2]
	mov r2, #0x50
	add r0, r1, #0x2000
	ldrb r0, [r0, #0x250]
	cmp r0, #0
	bne _020ADFDC
	add r0, r1, #0x2200
	mov r1, #0
	bl FUN_020D4994
	b _020ADFFC
_020ADFDC:
	add r0, r6, #2
	add r1, r1, #0x2200
	bl FUN_020D4A50
	b _020ADFFC
_020ADFEC:
	add r0, ip, #0x2200
	mov r1, #0
	mov r2, #0x52
	bl FUN_020D4994
_020ADFFC:
	ldr r1, _020AE0E8 @ =0x021D5FEC
	mov r0, r7
	ldr r1, [r1]
	mov r2, #0xc0
	add r1, r1, #0x2140
	bl FUN_020D4A50
	ldr r1, _020AE0E8 @ =0x021D5FEC
	mov r0, r5
	ldr r1, [r1]
	add r1, r1, #0x2100
	ldrh r2, [r1, #0x6e]
	orr r2, r2, #3
	strh r2, [r1, #0x70]
	bl FUN_020AE450
	b _020AE05C
_020AE038:
	bl FUN_020D3A4C
	mov r0, #2
	pop {r3, r4, r5, r6, r7, pc}
_020AE044:
	bl FUN_020D3A4C
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_020AE050:
	bl FUN_020D3A4C
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_020AE05C:
	ldr r1, _020AE0EC @ =0x0000FFFF
	ldr r0, _020AE0F0 @ =FUN_020AEB20
	mov r3, r1
	mov r2, #0x50
	str r1, [sp]
	bl FUN_020E0E94
	cmp r0, #2
	beq _020AE090
	cmp r0, #3
	beq _020AE0C0
	cmp r0, #8
	beq _020AE0B0
	b _020AE0C0
_020AE090:
	mov r0, #8
	bl FUN_020AE8FC
	ldr r0, _020AE0E8 @ =0x021D5FEC
	mov r1, #5
	ldr r0, [r0]
	add r0, r0, #0x2200
	strh r1, [r0, #0x80]
	b _020AE0D8
_020AE0B0:
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, #4
	pop {r3, r4, r5, r6, r7, pc}
_020AE0C0:
	mov r0, #0xb
	bl FUN_020AE8FC
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, #7
	pop {r3, r4, r5, r6, r7, pc}
_020AE0D8:
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, #3
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020AE0E8: .4byte 0x021D5FEC
_020AE0EC: .4byte 0x0000FFFF
_020AE0F0: .4byte FUN_020AEB20
	arm_func_end FUN_020ADEF0

	arm_func_start FUN_020AE0F4
FUN_020AE0F4: @ 0x020AE0F4
	push {r4, lr}
	bl FUN_020D3A38
	ldr r1, _020AE208 @ =0x021D5FEC
	mov r4, r0
	ldr r1, [r1]
	cmp r1, #0
	bne _020AE11C
	bl FUN_020D3A4C
	mov r0, #1
	pop {r4, pc}
_020AE11C:
	add r1, r1, #0x2000
	ldr r2, [r1, #0x260]
	cmp r2, #3
	beq _020AE148
	cmp r2, #9
	beq _020AE160
	cmp r2, #0xa
	bne _020AE154
	bl FUN_020D3A4C
	mov r0, #2
	pop {r4, pc}
_020AE148:
	bl FUN_020D3A4C
	mov r0, #0
	pop {r4, pc}
_020AE154:
	bl FUN_020D3A4C
	mov r0, #1
	pop {r4, pc}
_020AE160:
	ldrb r0, [r1, #0x26b]
	cmp r0, #1
	bne _020AE18C
	mov r0, #0xa
	bl FUN_020AE8FC
	ldr r0, _020AE208 @ =0x021D5FEC
	mov r1, #6
	ldr r0, [r0]
	add r0, r0, #0x2200
	strh r1, [r0, #0x80]
	b _020AE1F8
_020AE18C:
	ldr r0, _020AE20C @ =FUN_020AF574
	bl FUN_020E0088
	cmp r0, #2
	beq _020AE1B0
	cmp r0, #3
	beq _020AE1E0
	cmp r0, #8
	beq _020AE1D0
	b _020AE1E0
_020AE1B0:
	mov r0, #0xa
	bl FUN_020AE8FC
	ldr r0, _020AE208 @ =0x021D5FEC
	mov r1, #6
	ldr r0, [r0]
	add r0, r0, #0x2200
	strh r1, [r0, #0x80]
	b _020AE1F8
_020AE1D0:
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, #4
	pop {r4, pc}
_020AE1E0:
	mov r0, #0xb
	bl FUN_020AE8FC
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, #7
	pop {r4, pc}
_020AE1F8:
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, #3
	pop {r4, pc}
	.align 2, 0
_020AE208: .4byte 0x021D5FEC
_020AE20C: .4byte FUN_020AF574
	arm_func_end FUN_020AE0F4

	arm_func_start FUN_020AE210
FUN_020AE210: @ 0x020AE210
	push {r3, r4, r5, lr}
	bl FUN_020D3A38
	ldr r1, _020AE414 @ =0x021D5FEC
	mov r4, r0
	ldr r1, [r1]
	cmp r1, #0
	bne _020AE238
	bl FUN_020D3A4C
	mov r0, #1
	pop {r3, r4, r5, pc}
_020AE238:
	add r1, r1, #0x2000
	ldr r2, [r1, #0x260]
	cmp r2, #0xd
	addls pc, pc, r2, lsl #2
	b _020AE2C8
_020AE24C: @ jump table
	b _020AE2C8 @ case 0
	b _020AE290 @ case 1
	b _020AE2C8 @ case 2
	b _020AE2D8 @ case 3
	b _020AE2C8 @ case 4
	b _020AE2C8 @ case 5
	b _020AE29C @ case 6
	b _020AE2C8 @ case 7
	b _020AE2C8 @ case 8
	b _020AE2D8 @ case 9
	b _020AE2C8 @ case 10
	b _020AE2C8 @ case 11
	b _020AE2D8 @ case 12
	b _020AE284 @ case 13
_020AE284:
	bl FUN_020D3A4C
	mov r0, #2
	pop {r3, r4, r5, pc}
_020AE290:
	bl FUN_020D3A4C
	mov r0, #0
	pop {r3, r4, r5, pc}
_020AE29C:
	mov r0, #0xd
	bl FUN_020AE8FC
	ldr r1, _020AE414 @ =0x021D5FEC
	mov r2, #9
	ldr r1, [r1]
	mov r0, r4
	add r1, r1, #0x2200
	strh r2, [r1, #0x80]
	bl FUN_020D3A4C
	mov r0, #3
	pop {r3, r4, r5, pc}
_020AE2C8:
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, #1
	pop {r3, r4, r5, pc}
_020AE2D8:
	ldrb r0, [r1, #0x26b]
	cmp r0, #1
	bne _020AE304
	mov r0, #0xd
	bl FUN_020AE8FC
	ldr r0, _020AE414 @ =0x021D5FEC
	mov r1, #9
	ldr r0, [r0]
	add r0, r0, #0x2200
	strh r1, [r0, #0x80]
	b _020AE404
_020AE304:
	bl FUN_020DEB24
	mov r5, r0
	mov r1, #2
	bl FUN_020D285C
	ldrh r0, [r5]
	cmp r0, #0
	beq _020AE334
	cmp r0, #1
	beq _020AE36C
	cmp r0, #2
	beq _020AE378
	b _020AE384
_020AE334:
	bl FUN_020DE458
	cmp r0, #0
	bne _020AE3A0
	mov r0, #1
	bl FUN_020AE8FC
	ldr r1, _020AE414 @ =0x021D5FEC
	mov r2, #0
	ldr r1, [r1]
	mov r0, r4
	add r1, r1, #0x2200
	strh r2, [r1, #0x80]
	bl FUN_020D3A4C
	mov r0, #0
	pop {r3, r4, r5, pc}
_020AE36C:
	ldr r0, _020AE418 @ =FUN_020AEB20
	bl FUN_020DF338
	b _020AE3A0
_020AE378:
	ldr r0, _020AE418 @ =FUN_020AEB20
	bl FUN_020DF3B8
	b _020AE3A0
_020AE384:
	ldr r1, _020AE414 @ =0x021D5FEC
	ldr r0, _020AE41C @ =FUN_020AF690
	ldr r1, [r1]
	mov r2, #1
	add r1, r1, #0x2000
	strb r2, [r1, #0x26b]
	bl FUN_020DF480
_020AE3A0:
	cmp r0, #2
	beq _020AE3BC
	cmp r0, #3
	beq _020AE3EC
	cmp r0, #8
	beq _020AE3DC
	b _020AE3EC
_020AE3BC:
	mov r0, #0xd
	bl FUN_020AE8FC
	ldr r0, _020AE414 @ =0x021D5FEC
	mov r1, #9
	ldr r0, [r0]
	add r0, r0, #0x2200
	strh r1, [r0, #0x80]
	b _020AE404
_020AE3DC:
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, #4
	pop {r3, r4, r5, pc}
_020AE3EC:
	mov r0, #0xb
	bl FUN_020AE8FC
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, #7
	pop {r3, r4, r5, pc}
_020AE404:
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, #3
	pop {r3, r4, r5, pc}
	.align 2, 0
_020AE414: .4byte 0x021D5FEC
_020AE418: .4byte FUN_020AEB20
_020AE41C: .4byte FUN_020AF690
	arm_func_end FUN_020AE210

	arm_func_start FUN_020AE420
FUN_020AE420: @ 0x020AE420
	push {r4, lr}
	bl FUN_020D3A38
	ldr r1, _020AE44C @ =0x021D5FEC
	mov r4, #0
	ldr r1, [r1]
	cmp r1, #0
	addne r1, r1, #0x2000
	ldrne r4, [r1, #0x260]
	bl FUN_020D3A4C
	mov r0, r4
	pop {r4, pc}
	.align 2, 0
_020AE44C: .4byte 0x021D5FEC
	arm_func_end FUN_020AE420

	arm_func_start FUN_020AE450
FUN_020AE450: @ 0x020AE450
	push {r3, r4, r5, lr}
	mov r5, r0
	bl FUN_020D3A38
	ldr r1, _020AE4E4 @ =0x021D5FEC
	mov r2, #0
	ldr r3, [r1]
	add r1, r3, #0x2000
	cmp r3, #0
	ldr r4, [r1, #0x264]
	bne _020AE484
	bl FUN_020D3A4C
	mov r0, #0
	pop {r3, r4, r5, pc}
_020AE484:
	tst r5, #0x8000
	beq _020AE4A4
	ldr r1, _020AE4E8 @ =0x00003FFE
	orr r2, r2, #0xfe
	tst r5, r1
	orreq r5, r5, #0x82
	orr r2, r2, #0x3f00
	orreq r5, r5, #0xa000
_020AE4A4:
	tst r5, #0x20000
	orrne r2, r2, #0x10000
	tst r5, #0x80000
	orrne r2, r2, #0x40000
	tst r5, #0x200000
	orrne r2, r2, #0x100000
	tst r5, #0x800000
	orrne r2, r2, #0x400000
	mvn r1, r2
	and r1, r4, r1
	orr r2, r5, r1
	add r1, r3, #0x2000
	str r2, [r1, #0x264]
	bl FUN_020D3A4C
	mov r0, r4
	pop {r3, r4, r5, pc}
	.align 2, 0
_020AE4E4: .4byte 0x021D5FEC
_020AE4E8: .4byte 0x00003FFE
	arm_func_end FUN_020AE450

	arm_func_start FUN_020AE4EC
FUN_020AE4EC: @ 0x020AE4EC
	ldr r0, _020AE4F8 @ =0x021D5FEC
	ldr r0, [r0]
	bx lr
	.align 2, 0
_020AE4F8: .4byte 0x021D5FEC
	arm_func_end FUN_020AE4EC

	arm_func_start FUN_020AE4FC
FUN_020AE4FC: @ 0x020AE4FC
	push {r3, r4, r5, lr}
	movs r5, r0
	mov r4, r1
	bne _020AE54C
	ldr r1, _020AE618 @ =0x021D5FEC
	mov r3, #3
	ldr r0, [r1]
	mov r2, #0
	add r0, r0, #0x2000
	str r3, [r0, #0x26c]
	ldr r0, [r1]
	add r0, r0, #0x2000
	str r2, [r0, #0x270]
	ldr r0, [r1]
	add r0, r0, #0x2000
	str r2, [r0, #0x274]
	ldr r0, [r1]
	add r0, r0, #0x2000
	str r2, [r0, #0x278]
	b _020AE604
_020AE54C:
	ldr r1, _020AE618 @ =0x021D5FEC
	ldr r2, [r5]
	ldr r0, [r1]
	and r2, r2, #3
	add r0, r0, #0x2000
	str r2, [r0, #0x26c]
	ldr r3, [r5, #4]
	ldr r0, [r5, #8]
	and r2, r3, #3
	rsb r2, r2, #4
	and r2, r2, #3
	add r2, r2, #0xc
	cmp r2, r0
	ldr r0, [r1]
	bls _020AE5A4
	mov r2, #0
	add r0, r0, #0x2000
	str r2, [r0, #0x270]
	ldr r0, [r1]
	add r0, r0, #0x2000
	str r2, [r0, #0x274]
	b _020AE5F0
_020AE5A4:
	add r2, r3, #3
	bic r2, r2, #3
	add r0, r0, #0x2000
	str r2, [r0, #0x270]
	ldr r2, [r5, #4]
	ldr r0, [r1]
	and r2, r2, #3
	rsb r2, r2, #4
	ldr r3, [r5, #8]
	and r2, r2, #3
	sub r2, r3, r2
	add r0, r0, #0x2000
	str r2, [r0, #0x274]
	ldr r0, [r1]
	mov r1, #0
	add r2, r0, #0x2000
	ldr r0, [r2, #0x270]
	ldr r2, [r2, #0x274]
	bl FUN_020D4994
_020AE5F0:
	ldr r0, _020AE618 @ =0x021D5FEC
	ldr r1, [r5, #0xc]
	ldr r0, [r0]
	add r0, r0, #0x2000
	str r1, [r0, #0x278]
_020AE604:
	ldr r0, _020AE618 @ =0x021D5FEC
	ldr r0, [r0]
	add r0, r0, #0x2000
	str r4, [r0, #0x27c]
	pop {r3, r4, r5, pc}
	.align 2, 0
_020AE618: .4byte 0x021D5FEC
	arm_func_end FUN_020AE4FC

	arm_func_start FUN_020AE61C
FUN_020AE61C: @ 0x020AE61C
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r0, r2
	mov r4, r1
	bl FUN_020AE450
	ldr r2, _020AE7A8 @ =0x021D5FEC
	mov r3, #0x400
	ldr r1, [r2]
	mov r0, #0
	add ip, r1, #0x1500
	add r1, r1, #0x2000
	str ip, [r1, #0x288]
	ldr r1, [r2]
	add r1, r1, #0x2200
	strh r3, [r1, #0x8c]
	bl FUN_020AE7D4
	ldr r1, _020AE7A8 @ =0x021D5FEC
	mov r2, #1
	lsl r2, r2, r0
	ldr r0, [r1]
	asr r2, r2, #1
	add r0, r0, #0x2200
	strh r2, [r0, #0x8e]
	ldr r0, [r1]
	add r0, r0, #0x2200
	ldrh r0, [r0, #0x68]
	cmp r0, #0
	bne _020AE690
	bl FUN_020DF064
_020AE690:
	ldr r2, _020AE7A8 @ =0x021D5FEC
	ldr r1, [r2]
	add r1, r1, #0x2200
	strh r0, [r1, #0x90]
	ldr r1, [r2]
	add r0, r1, #0x2000
	ldr r0, [r0, #0x264]
	and r0, r0, #0x300000
	cmp r0, #0x300000
	movne r2, #1
	moveq r2, #0
	add r0, r1, #0x2200
	strh r2, [r0, #0x98]
	cmp r5, #0
	mov r2, #6
	bne _020AE6EC
	ldr r1, _020AE7A8 @ =0x021D5FEC
	ldr r0, _020AE7AC @ =0x02108FC0
	ldr r1, [r1]
	add r1, r1, #0x92
	add r1, r1, #0x2200
	bl FUN_020D4A50
	b _020AE704
_020AE6EC:
	ldr r1, _020AE7A8 @ =0x021D5FEC
	mov r0, r5
	ldr r1, [r1]
	add r1, r1, #0x92
	add r1, r1, #0x2200
	bl FUN_020D4A50
_020AE704:
	cmp r4, #0
	ldrne r0, _020AE7B0 @ =0x02108FC8
	mov r2, #0x20
	cmpne r4, r0
	bne _020AE748
	ldr r1, _020AE7A8 @ =0x021D5FEC
	ldr r0, _020AE7B0 @ =0x02108FC8
	ldr r1, [r1]
	add r1, r1, #0x29c
	add r1, r1, #0x2000
	bl FUN_020D4A50
	ldr r0, _020AE7A8 @ =0x021D5FEC
	mov r1, #0
	ldr r0, [r0]
	add r0, r0, #0x2200
	strh r1, [r0, #0x9a]
	b _020AE790
_020AE748:
	ldr r1, _020AE7A8 @ =0x021D5FEC
	mov r0, r4
	ldr r1, [r1]
	add r1, r1, #0x29c
	add r1, r1, #0x2000
	bl FUN_020D4A50
	mov r1, #0
_020AE764:
	ldrb r0, [r4]
	cmp r0, #0
	beq _020AE780
	add r1, r1, #1
	cmp r1, #0x20
	add r4, r4, #1
	blt _020AE764
_020AE780:
	ldr r0, _020AE7A8 @ =0x021D5FEC
	ldr r0, [r0]
	add r0, r0, #0x2200
	strh r1, [r0, #0x9a]
_020AE790:
	ldr r0, _020AE7A8 @ =0x021D5FEC
	mov r1, #0
	ldr r0, [r0]
	add r0, r0, #0x2000
	str r1, [r0, #0x284]
	pop {r3, r4, r5, pc}
	.align 2, 0
_020AE7A8: .4byte 0x021D5FEC
_020AE7AC: .4byte 0x02108FC0
_020AE7B0: .4byte 0x02108FC8
	arm_func_end FUN_020AE61C

	arm_func_start FUN_020AE7B4
FUN_020AE7B4: @ 0x020AE7B4
	ldr r0, _020AE7CC @ =0x021D5FEC
	ldr r1, _020AE7D0 @ =0x00AAA082
	ldr r0, [r0]
	add r0, r0, #0x2000
	str r1, [r0, #0x264]
	bx lr
	.align 2, 0
_020AE7CC: .4byte 0x021D5FEC
_020AE7D0: .4byte 0x00AAA082
	arm_func_end FUN_020AE7B4

	arm_func_start FUN_020AE7D4
FUN_020AE7D4: @ 0x020AE7D4
	push {r3, r4, r5, r6, r7, lr}
	ldr r2, _020AE85C @ =0x021D5FEC
	ldr lr, _020AE860 @ =0x4EC4EC4F
	ldr r2, [r2]
	mov r1, r0
	add r2, r2, #0x2000
	ldr r7, [r2, #0x264]
	mov r6, #0
	mov r5, #1
	mov ip, #0xd
_020AE7FC:
	lsr r2, r1, #0x1f
	smull r3, r4, lr, r1
	add r4, r2, r4, asr #2
	smull r2, r3, ip, r4
	sub r4, r1, r2
	add r2, r4, #1
	tst r7, r5, lsl r2
	bne _020AE82C
	add r6, r6, #1
	cmp r6, #0xd
	add r1, r1, #1
	blt _020AE7FC
_020AE82C:
	add r3, r0, r6
	ldr r2, _020AE860 @ =0x4EC4EC4F
	lsr r0, r3, #0x1f
	smull r1, ip, r2, r3
	add ip, r0, ip, asr #2
	mov r2, #0xd
	smull r0, r1, r2, ip
	sub ip, r3, r0
	add r0, ip, #1
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020AE85C: .4byte 0x021D5FEC
_020AE860: .4byte 0x4EC4EC4F
	arm_func_end FUN_020AE7D4

	arm_func_start FUN_020AE864
FUN_020AE864: @ 0x020AE864
	push {r3, r4, r5, lr}
	ldr ip, _020AE8A4 @ =0x021D5FEC
	mov r5, r0
	ldr r0, [ip]
	mov r4, r1
	add r1, r0, #0x2200
	ldrsh r0, [r1, #0x80]
	mov ip, #0
	mov lr, r2
	strh ip, [r1, #0x80]
	str r3, [sp]
	mov r1, r5
	mov r2, r4
	mov r3, lr
	bl FUN_020AE8A8
	pop {r3, r4, r5, pc}
	.align 2, 0
_020AE8A4: .4byte 0x021D5FEC
	arm_func_end FUN_020AE864

	arm_func_start FUN_020AE8A8
FUN_020AE8A8: @ 0x020AE8A8
	push {r3, lr}
	sub sp, sp, #0x10
	ldr ip, _020AE8F8 @ =0x021D5FEC
	ldr ip, [ip]
	add ip, ip, #0x2000
	ldr lr, [ip, #0x27c]
	cmp lr, #0
	addeq sp, sp, #0x10
	popeq {r3, pc}
	ldr lr, [sp, #0x18]
	strh r0, [sp]
	str r2, [sp, #4]
	str r3, [sp, #8]
	str lr, [sp, #0xc]
	strh r1, [sp, #2]
	ldr r1, [ip, #0x27c]
	add r0, sp, #0
	blx r1
	add sp, sp, #0x10
	pop {r3, pc}
	.align 2, 0
_020AE8F8: .4byte 0x021D5FEC
	arm_func_end FUN_020AE8A8

	arm_func_start FUN_020AE8FC
FUN_020AE8FC: @ 0x020AE8FC
	push {r3, r4, r5, lr}
	mov r5, r0
	bl FUN_020D3A38
	ldr r1, _020AE988 @ =0x021D5FEC
	mov r4, r0
	ldr r1, [r1]
	add r0, r1, #0x2000
	ldr r0, [r0, #0x260]
	cmp r0, #9
	bne _020AE938
	cmp r5, #9
	beq _020AE938
	add r0, r1, #0x2cc
	add r0, r0, #0x2000
	bl FUN_020D3854
_020AE938:
	ldr r0, _020AE988 @ =0x021D5FEC
	ldr r0, [r0]
	add r0, r0, #0x2000
	ldr r1, [r0, #0x260]
	cmp r1, #0xb
	strne r5, [r0, #0x260]
	cmp r5, #9
	bne _020AE97C
	mov r2, #0
	ldr r0, _020AE988 @ =0x021D5FEC
	str r2, [sp]
	ldr r0, [r0]
	ldr r1, _020AE98C @ =0x022F5341
	add r0, r0, #0x2cc
	ldr r3, _020AE990 @ =FUN_020AEA08
	add r0, r0, #0x2000
	bl FUN_020D37E8
_020AE97C:
	mov r0, r4
	bl FUN_020D3A4C
	pop {r3, r4, r5, pc}
	.align 2, 0
_020AE988: .4byte 0x021D5FEC
_020AE98C: .4byte 0x022F5341
_020AE990: .4byte FUN_020AEA08
	arm_func_end FUN_020AE8FC

	arm_func_start FUN_020AE994
FUN_020AE994: @ 0x020AE994
	push {r3, r4, lr}
	sub sp, sp, #4
	bl FUN_020D3A38
	ldr r1, _020AE9FC @ =0x021D5FEC
	mov r4, r0
	ldr r0, [r1]
	add r0, r0, #0x2cc
	add r0, r0, #0x2000
	bl FUN_020D3854
	ldr r0, _020AE9FC @ =0x021D5FEC
	ldr r1, [r0]
	add r0, r1, #0x2000
	ldr r0, [r0, #0x260]
	cmp r0, #9
	bne _020AE9EC
	add r0, r1, #0x2cc
	mov r2, #0
	ldr r1, _020AEA00 @ =0x022F5341
	ldr r3, _020AEA04 @ =FUN_020AEA08
	add r0, r0, #0x2000
	str r2, [sp]
	bl FUN_020D37E8
_020AE9EC:
	mov r0, r4
	bl FUN_020D3A4C
	add sp, sp, #4
	pop {r3, r4, pc}
	.align 2, 0
_020AE9FC: .4byte 0x021D5FEC
_020AEA00: .4byte 0x022F5341
_020AEA04: .4byte FUN_020AEA08
	arm_func_end FUN_020AE994

	arm_func_start FUN_020AEA08
FUN_020AEA08: @ 0x020AEA08
	push {r3, lr}
	bl FUN_020AFEB0
	bl FUN_020AE994
	pop {r3, pc}
	arm_func_end FUN_020AEA08

	arm_func_start FUN_020AEA18
FUN_020AEA18: @ 0x020AEA18
	mov r1, r0
	mov r0, #0
	mov r3, #1
_020AEA24:
	clz r2, r1
	rsbs r2, r2, #0x1f
	blo _020AEA34
	b _020AEA38
_020AEA34:
	bx lr
_020AEA38:
	bic r1, r1, r3, lsl r2
	add r0, r0, #1
	b _020AEA24
	arm_func_end FUN_020AEA18

	arm_func_start FUN_020AEA44
FUN_020AEA44: @ 0x020AEA44
	clz r0, r0
	bx lr
	arm_func_end FUN_020AEA44

	arm_func_start FUN_020AEA4C
FUN_020AEA4C: @ 0x020AEA4C
	push {r3, lr}
	ldr r0, _020AEAA0 @ =0x021D5FEC
	ldr r0, [r0]
	add r1, r0, #0x2000
	ldrb r0, [r1, #0x26b]
	cmp r0, #0
	popne {r3, pc}
	mov r2, #1
	ldr r0, _020AEAA4 @ =FUN_020AF690
	strb r2, [r1, #0x26b]
	bl FUN_020DF480
	cmp r0, #2
	popeq {r3, pc}
	mov r0, #0xb
	bl FUN_020AE8FC
	mov r1, #0
	mov r2, r1
	mov r0, #7
	mov r3, #0x610
	bl FUN_020AE864
	pop {r3, pc}
	.align 2, 0
_020AEAA0: .4byte 0x021D5FEC
_020AEAA4: .4byte FUN_020AF690
	arm_func_end FUN_020AEA4C

	arm_func_start FUN_020AEAA8
FUN_020AEAA8: @ 0x020AEAA8
	push {r3, lr}
	ldrh r1, [r0, #2]
	cmp r1, #8
	ldrheq r1, [r0, #4]
	cmpeq r1, #0x16
	ldrheq r0, [r0, #6]
	cmpeq r0, #0x25
	popne {r3, pc}
	ldr r0, _020AEB1C @ =0x021D5FEC
	ldr r0, [r0]
	add r0, r0, #0x2000
	ldr r0, [r0, #0x260]
	sub r0, r0, #8
	cmp r0, #4
	addls pc, pc, r0, lsl #2
	pop {r3, pc}
_020AEAE8: @ jump table
	b _020AEAFC @ case 0
	b _020AEB08 @ case 1
	b _020AEB10 @ case 2
	pop {r3, pc} @ case 3
	b _020AEB08 @ case 4
_020AEAFC:
	mov r0, #0xc
	bl FUN_020AE8FC
	pop {r3, pc}
_020AEB08:
	bl FUN_020AEA4C
	pop {r3, pc}
_020AEB10:
	mov r0, #0xc
	bl FUN_020AE8FC
	pop {r3, pc}
	.align 2, 0
_020AEB1C: .4byte 0x021D5FEC
	arm_func_end FUN_020AEAA8

	arm_func_start FUN_020AEB20
FUN_020AEB20: @ 0x020AEB20
	push {r3, lr}
	ldrh r1, [r0, #2]
	mov r2, #0x14
	cmp r1, #4
	addls pc, pc, r1, lsl #2
	b _020AED80
_020AEB38: @ jump table
	b _020AEB4C @ case 0
	b _020AED48 @ case 1
	b _020AED80 @ case 2
	b _020AED80 @ case 3
	b _020AED80 @ case 4
_020AEB4C:
	ldrh r0, [r0]
	cmp r0, #0x19
	bgt _020AEB84
	bge _020AEC48
	cmp r0, #6
	addls pc, pc, r0, lsl #2
	b _020AECC0
_020AEB68: @ jump table
	b _020AECC0 @ case 0
	b _020AECC0 @ case 1
	b _020AECC0 @ case 2
	b _020AEBA0 @ case 3
	b _020AEBB0 @ case 4
	b _020AEC04 @ case 5
	b _020AEC24 @ case 6
_020AEB84:
	cmp r0, #0x1d
	bgt _020AEB94
	beq _020AEC34
	b _020AECC0
_020AEB94:
	cmp r0, #0x27
	beq _020AEC70
	b _020AECC0
_020AEBA0:
	ldr r0, _020AEDB8 @ =FUN_020AEB20
	bl FUN_020DF378
	mov r2, r0
	b _020AECC0
_020AEBB0:
	bl FUN_020DE458
	cmp r0, #0
	beq _020AEBC4
	cmp r0, #4
	b _020AEBE4
_020AEBC4:
	mov r0, #1
	bl FUN_020AE8FC
	mov r0, #0
	ldr r3, _020AEDBC @ =0x00000663
	mov r1, r0
	mov r2, r0
	bl FUN_020AE864
	pop {r3, pc}
_020AEBE4:
	mov r0, #0xb
	bl FUN_020AE8FC
	mov r1, #0
	ldr r3, _020AEDC0 @ =0x0000066C
	mov r2, r1
	mov r0, #7
	bl FUN_020AE864
	pop {r3, pc}
_020AEC04:
	mov r0, #3
	bl FUN_020AE8FC
	mov r0, #0
	ldr r3, _020AEDC4 @ =0x00000673
	mov r1, r0
	mov r2, r0
	bl FUN_020AE864
	pop {r3, pc}
_020AEC24:
	ldr r0, _020AEDB8 @ =FUN_020AEB20
	bl FUN_020DF338
	mov r2, r0
	b _020AECC0
_020AEC34:
	ldr r0, _020AEDB8 @ =FUN_020AEB20
	mov r1, #0
	bl FUN_020E0E44
	mov r2, r0
	b _020AECC0
_020AEC48:
	ldr r1, _020AEDC8 @ =0x021D5FEC
	ldr r0, _020AEDB8 @ =FUN_020AEB20
	ldr r3, [r1]
	add r2, r3, #0x2000
	ldrb r1, [r2, #0x250]
	ldrb r2, [r2, #0x251]
	add r3, r3, #0x2200
	bl FUN_020E0D10
	mov r2, r0
	b _020AECC0
_020AEC70:
	ldr r0, _020AEDC8 @ =0x021D5FEC
	ldr r2, [r0]
	add r0, r2, #0x2000
	ldr r1, [r0, #0x264]
	and r0, r1, #0xc0000
	cmp r0, #0xc0000
	moveq r0, #1
	movne r0, #0
	lsl r0, r0, #0x10
	lsr ip, r0, #0x10
	and r1, r1, #0x30000
	cmp r1, #0x30000
	movne r3, #1
	add r1, r2, #0x2140
	ldr r0, _020AEDCC @ =FUN_020AF138
	moveq r3, #0
	mov r2, #0
	str ip, [sp]
	bl FUN_020DF94C
	mov r2, r0
_020AECC0:
	cmp r2, #2
	popeq {r3, pc}
	cmp r2, #3
	beq _020AED10
	cmp r2, #8
	bne _020AED10
	mov r0, #0xc
	bl FUN_020AE8FC
	ldr r0, _020AEDC8 @ =0x021D5FEC
	mov r2, #0
	ldr r1, [r0]
	add r0, r1, #0x2200
	ldrsh r0, [r0, #0x80]
	cmp r0, #5
	addeq r1, r1, #0x2140
	mov r0, #1
	movne r1, #0
	rsb r3, r0, #0x6b0
	bl FUN_020AE864
	pop {r3, pc}
_020AED10:
	mov r0, #0xb
	bl FUN_020AE8FC
	ldr r0, _020AEDC8 @ =0x021D5FEC
	ldr r3, _020AEDD0 @ =0x000006B8
	ldr r1, [r0]
	mov r2, #0
	add r0, r1, #0x2200
	ldrsh r0, [r0, #0x80]
	cmp r0, #5
	addeq r1, r1, #0x2140
	movne r1, #0
	mov r0, #7
	bl FUN_020AE864
	pop {r3, pc}
_020AED48:
	mov r0, #0xc
	bl FUN_020AE8FC
	ldr r0, _020AEDC8 @ =0x021D5FEC
	ldr r3, _020AEDD4 @ =0x000006DE
	ldr r1, [r0]
	mov r2, #0
	add r0, r1, #0x2200
	ldrsh r0, [r0, #0x80]
	cmp r0, #5
	addeq r1, r1, #0x2140
	movne r1, #0
	mov r0, #1
	bl FUN_020AE864
	pop {r3, pc}
_020AED80:
	mov r0, #0xb
	bl FUN_020AE8FC
	ldr r0, _020AEDC8 @ =0x021D5FEC
	ldr r3, _020AEDD8 @ =0x000006E8
	ldr r1, [r0]
	mov r2, #0
	add r0, r1, #0x2200
	ldrsh r0, [r0, #0x80]
	cmp r0, #5
	addeq r1, r1, #0x2140
	movne r1, #0
	mov r0, #7
	bl FUN_020AE864
	pop {r3, pc}
	.align 2, 0
_020AEDB8: .4byte FUN_020AEB20
_020AEDBC: .4byte 0x00000663
_020AEDC0: .4byte 0x0000066C
_020AEDC4: .4byte 0x00000673
_020AEDC8: .4byte 0x021D5FEC
_020AEDCC: .4byte FUN_020AF138
_020AEDD0: .4byte 0x000006B8
_020AEDD4: .4byte 0x000006DE
_020AEDD8: .4byte 0x000006E8
	arm_func_end FUN_020AEB20

	arm_func_start FUN_020AEDDC
FUN_020AEDDC: @ 0x020AEDDC
	push {r3, r4, r5, r6, r7, r8, lr}
	sub sp, sp, #4
	mov r5, r0
	ldrh r0, [r5, #2]
	mov r4, #0x14
	cmp r0, #4
	addls pc, pc, r0, lsl #2
	b _020AF074
_020AEDFC: @ jump table
	b _020AEE10 @ case 0
	b _020AF068 @ case 1
	b _020AF074 @ case 2
	b _020AF074 @ case 3
	b _020AF074 @ case 4
_020AEE10:
	ldr r0, _020AF098 @ =0x021D5FEC
	ldr r0, [r0]
	add r0, r0, #0x2000
	ldr r0, [r0, #0x260]
	cmp r0, #5
	bne _020AEE44
	mov r0, #6
	bl FUN_020AE8FC
	mov r0, #0
	ldr r3, _020AF09C @ =0x00000704
	mov r1, r0
	mov r2, r0
	bl FUN_020AE864
_020AEE44:
	ldr r1, _020AF098 @ =0x021D5FEC
	ldr r2, [r1]
	add r0, r2, #0x2000
	ldr r0, [r0, #0x260]
	cmp r0, #6
	beq _020AEE70
	cmp r0, #7
	beq _020AEFE8
	cmp r0, #0xd
	beq _020AEFF8
	b _020AF004
_020AEE70:
	add r0, r2, #0x2200
	mov r2, #7
	strh r2, [r0, #0x80]
	ldrh r0, [r5, #8]
	cmp r0, #5
	bne _020AEEFC
	ldr r0, [r1]
	add r1, r0, #0x2200
	add r0, r0, #0x2000
	ldrh r1, [r1, #0x8c]
	ldr r0, [r0, #0x288]
	bl FUN_020D285C
	ldrh r0, [r5, #0xe]
	mov r4, #0
	cmp r0, #0
	ble _020AEEFC
	ldr r8, _020AF0A0 @ =0x0000071A
	mov r7, #7
	mov r6, r4
_020AEEBC:
	add r0, r5, r4, lsl #1
	add r2, r5, r4, lsl #2
	ldrh r1, [r0, #0x50]
	ldr r0, [r2, #0x10]
	bl FUN_020AFB3C
	str r8, [sp]
	add r0, r5, r4, lsl #2
	ldr r2, [r0, #0x10]
	mov r0, r7
	mov r1, r6
	mov r3, r5
	bl FUN_020AE8A8
	ldrh r0, [r5, #0xe]
	add r4, r4, #1
	cmp r4, r0
	blt _020AEEBC
_020AEEFC:
	ldr r0, _020AF098 @ =0x021D5FEC
	ldr r0, [r0]
	add r0, r0, #0x2000
	ldr r1, [r0, #0x264]
	and r0, r1, #0xc00000
	cmp r0, #0xc00000
	bne _020AEF68
	ldr r0, _020AF0A4 @ =0x00003FFE
	and r0, r1, r0
	bl FUN_020AEA18
	movs r1, r0
	beq _020AEF68
	ldr r0, _020AF098 @ =0x021D5FEC
	ldr r0, [r0]
	add r0, r0, #0x2000
	ldr r6, [r0, #0x284]
	mov r0, r6
	bl FUN_020F2BA4
	cmp r1, #0
	bne _020AEF68
	ldr r4, _020AF0A8 @ =0x00000728
	mov r1, #0
	mov r2, r6
	mov r3, r1
	mov r0, #8
	str r4, [sp]
	bl FUN_020AE8A8
_020AEF68:
	ldrh r0, [r5, #0xa]
	bl FUN_020AEA44
	rsb r0, r0, #0x20
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	bl FUN_020AE7D4
	ldr r1, _020AF098 @ =0x021D5FEC
	mov r2, #1
	lsl r2, r2, r0
	ldr r0, [r1]
	asr r2, r2, #1
	add r0, r0, #0x2200
	strh r2, [r0, #0x8e]
	ldr r0, [r1]
	add r1, r0, #0x2200
	add r0, r0, #0x2000
	ldrh r1, [r1, #0x8c]
	ldr r0, [r0, #0x288]
	bl FUN_020D285C
	ldr r2, _020AF098 @ =0x021D5FEC
	ldr r0, _020AF0AC @ =FUN_020AEDDC
	ldr r1, [r2]
	add r1, r1, #0x2000
	ldr r3, [r1, #0x284]
	add r3, r3, #1
	str r3, [r1, #0x284]
	ldr r1, [r2]
	add r1, r1, #0x288
	add r1, r1, #0x2000
	bl FUN_020DF7BC
	mov r4, r0
	b _020AF004
_020AEFE8:
	ldr r0, _020AF0B0 @ =FUN_020AF0C0
	bl FUN_020DF90C
	mov r4, r0
	b _020AF004
_020AEFF8:
	bl FUN_020AEA4C
	add sp, sp, #4
	pop {r3, r4, r5, r6, r7, r8, pc}
_020AF004:
	cmp r4, #2
	addeq sp, sp, #4
	popeq {r3, r4, r5, r6, r7, r8, pc}
	cmp r4, #3
	beq _020AF044
	cmp r4, #8
	bne _020AF044
	mov r0, #0xc
	bl FUN_020AE8FC
	mov r1, #0
	ldr r3, _020AF0B4 @ =0x00000753
	mov r2, r1
	mov r0, #1
	bl FUN_020AE864
	add sp, sp, #4
	pop {r3, r4, r5, r6, r7, r8, pc}
_020AF044:
	mov r0, #0xb
	bl FUN_020AE8FC
	mov r1, #0
	ldr r3, _020AF0B8 @ =0x0000075C
	mov r2, r1
	mov r0, #7
	bl FUN_020AE864
	add sp, sp, #4
	pop {r3, r4, r5, r6, r7, r8, pc}
_020AF068:
	bl FUN_020AEA4C
	add sp, sp, #4
	pop {r3, r4, r5, r6, r7, r8, pc}
_020AF074:
	mov r0, #0xb
	bl FUN_020AE8FC
	mov r1, #0
	ldr r3, _020AF0BC @ =0x0000076D
	mov r2, r1
	mov r0, #7
	bl FUN_020AE864
	add sp, sp, #4
	pop {r3, r4, r5, r6, r7, r8, pc}
	.align 2, 0
_020AF098: .4byte 0x021D5FEC
_020AF09C: .4byte 0x00000704
_020AF0A0: .4byte 0x0000071A
_020AF0A4: .4byte 0x00003FFE
_020AF0A8: .4byte 0x00000728
_020AF0AC: .4byte FUN_020AEDDC
_020AF0B0: .4byte FUN_020AF0C0
_020AF0B4: .4byte 0x00000753
_020AF0B8: .4byte 0x0000075C
_020AF0BC: .4byte 0x0000076D
	arm_func_end FUN_020AEDDC

	arm_func_start FUN_020AF0C0
FUN_020AF0C0: @ 0x020AF0C0
	push {r3, lr}
	ldrh r0, [r0, #2]
	cmp r0, #4
	addls pc, pc, r0, lsl #2
	b _020AF110
_020AF0D4: @ jump table
	b _020AF0E8 @ case 0
	b _020AF108 @ case 1
	b _020AF110 @ case 2
	b _020AF110 @ case 3
	b _020AF110 @ case 4
_020AF0E8:
	mov r0, #3
	bl FUN_020AE8FC
	mov r0, #0
	ldr r3, _020AF130 @ =0x00000783
	mov r1, r0
	mov r2, r0
	bl FUN_020AE864
	pop {r3, pc}
_020AF108:
	bl FUN_020AEA4C
	pop {r3, pc}
_020AF110:
	mov r0, #0xb
	bl FUN_020AE8FC
	mov r1, #0
	ldr r3, _020AF134 @ =0x00000793
	mov r2, r1
	mov r0, #7
	bl FUN_020AE864
	pop {r3, pc}
	.align 2, 0
_020AF130: .4byte 0x00000783
_020AF134: .4byte 0x00000793
	arm_func_end FUN_020AF0C0

	arm_func_start FUN_020AF138
FUN_020AF138: @ 0x020AF138
	push {r4, lr}
	mov r4, r0
	ldrh r0, [r4, #2]
	cmp r0, #0xc
	addls pc, pc, r0, lsl #2
	b _020AF358
_020AF150: @ jump table
	b _020AF184 @ case 0
	b _020AF334 @ case 1
	b _020AF358 @ case 2
	b _020AF358 @ case 3
	b _020AF358 @ case 4
	b _020AF358 @ case 5
	b _020AF348 @ case 6
	b _020AF358 @ case 7
	b _020AF358 @ case 8
	b _020AF358 @ case 9
	b _020AF358 @ case 10
	b _020AF348 @ case 11
	b _020AF348 @ case 12
_020AF184:
	ldrh r0, [r4, #8]
	cmp r0, #9
	bgt _020AF1C4
	cmp r0, #0
	addge pc, pc, r0, lsl #2
	b _020AF30C
_020AF19C: @ jump table
	b _020AF30C @ case 0
	b _020AF30C @ case 1
	b _020AF30C @ case 2
	b _020AF30C @ case 3
	b _020AF30C @ case 4
	b _020AF30C @ case 5
	pop {r4, pc} @ case 6
	b _020AF240 @ case 7
	b _020AF1D0 @ case 8
	b _020AF1D0 @ case 9
_020AF1C4:
	cmp r0, #0x1a
	popeq {r4, pc}
	b _020AF30C
_020AF1D0:
	ldr r1, _020AF380 @ =0x021D5FEC
	ldr r2, [r1]
	add r0, r2, #0x2000
	ldr r0, [r0, #0x260]
	sub r0, r0, #8
	cmp r0, #4
	addls pc, pc, r0, lsl #2
	pop {r4, pc}
_020AF1F0: @ jump table
	b _020AF210 @ case 0
	b _020AF21C @ case 1
	b _020AF204 @ case 2
	pop {r4, pc} @ case 3
	b _020AF238 @ case 4
_020AF204:
	add r0, r2, #0x2200
	mov r1, #0
	strh r1, [r0, #0x82]
_020AF210:
	mov r0, #0xc
	bl FUN_020AE8FC
	pop {r4, pc}
_020AF21C:
	add r0, r2, #0x2200
	mov r2, #0
	strh r2, [r0, #0x82]
	ldr r0, [r1]
	mov r1, #6
	add r0, r0, #0x2200
	strh r1, [r0, #0x80]
_020AF238:
	bl FUN_020AEA4C
	pop {r4, pc}
_020AF240:
	ldr r1, _020AF380 @ =0x021D5FEC
	ldr r3, [r1]
	add r0, r3, #0x2000
	ldr r0, [r0, #0x260]
	cmp r0, #0xc
	bne _020AF268
	mov r0, #8
	bl FUN_020AE8FC
	bl FUN_020AEA4C
	pop {r4, pc}
_020AF268:
	ldrh r2, [r4, #0xa]
	cmp r2, #1
	blo _020AF304
	ldr r0, _020AF384 @ =0x000007D7
	cmp r2, r0
	bhi _020AF304
	add r0, r3, #0x2200
	strh r2, [r0, #0x82]
	ldr r1, [r1]
	ldr r0, _020AF388 @ =FUN_020AF464
	add r1, r1, #0x1500
	mov r2, #0x620
	bl FUN_020DFF1C
	cmp r0, #2
	popeq {r4, pc}
	cmp r0, #3
	beq _020AF2DC
	cmp r0, #8
	bne _020AF2DC
	mov r0, #0xc
	bl FUN_020AE8FC
	ldr r0, _020AF380 @ =0x021D5FEC
	ldr r3, _020AF38C @ =0x000007ED
	ldr r1, [r0]
	mov r0, #1
	add r1, r1, #0x2140
	mov r2, #0
	bl FUN_020AE864
	pop {r4, pc}
_020AF2DC:
	mov r0, #0xb
	bl FUN_020AE8FC
	ldr r0, _020AF380 @ =0x021D5FEC
	ldr r3, _020AF390 @ =0x000007F6
	ldr r1, [r0]
	mov r0, #7
	add r1, r1, #0x2140
	mov r2, #0
	bl FUN_020AE864
	pop {r4, pc}
_020AF304:
	bl FUN_020AEA4C
	pop {r4, pc}
_020AF30C:
	mov r0, #0xb
	bl FUN_020AE8FC
	ldr r0, _020AF380 @ =0x021D5FEC
	ldrh r2, [r4, #8]
	ldr r0, [r0]
	ldr r3, _020AF394 @ =0x00000804
	add r1, r0, #0x2140
	mov r0, #7
	bl FUN_020AE864
	pop {r4, pc}
_020AF334:
	ldr r0, _020AF380 @ =0x021D5FEC
	ldrh r1, [r4, #0xe]
	ldr r0, [r0]
	add r0, r0, #0x2200
	strh r1, [r0, #0xf8]
_020AF348:
	mov r0, #8
	bl FUN_020AE8FC
	bl FUN_020AEA4C
	pop {r4, pc}
_020AF358:
	mov r0, #0xb
	bl FUN_020AE8FC
	ldr r0, _020AF380 @ =0x021D5FEC
	ldr r3, _020AF398 @ =0x0000081B
	ldr r1, [r0]
	mov r0, #7
	add r1, r1, #0x2140
	mov r2, #0
	bl FUN_020AE864
	pop {r4, pc}
	.align 2, 0
_020AF380: .4byte 0x021D5FEC
_020AF384: .4byte 0x000007D7
_020AF388: .4byte FUN_020AF464
_020AF38C: .4byte 0x000007ED
_020AF390: .4byte 0x000007F6
_020AF394: .4byte 0x00000804
_020AF398: .4byte 0x0000081B
	arm_func_end FUN_020AF138

	arm_func_start FUN_020AF39C
FUN_020AF39C: @ 0x020AF39C
	push {r3, lr}
	ldrh r0, [r0, #2]
	cmp r0, #4
	addls pc, pc, r0, lsl #2
	b _020AF430
_020AF3B0: @ jump table
	b _020AF3C4 @ case 0
	b _020AF420 @ case 1
	b _020AF430 @ case 2
	b _020AF420 @ case 3
	b _020AF430 @ case 4
_020AF3C4:
	ldr r0, _020AF458 @ =0x021D5FEC
	ldr r1, [r0]
	add r0, r1, #0x2000
	ldr r0, [r0, #0x260]
	cmp r0, #0xc
	bne _020AF3EC
	mov r0, #0xa
	bl FUN_020AE8FC
	bl FUN_020AEA4C
	pop {r3, pc}
_020AF3EC:
	add r1, r1, #0x2200
	mov r2, #0
	mov r0, #3
	strh r2, [r1, #0x82]
	bl FUN_020AE8FC
	ldr r1, _020AF458 @ =0x021D5FEC
	mov r0, #0
	ldr r1, [r1]
	ldr r3, _020AF45C @ =0x0000083D
	mov r2, r0
	add r1, r1, #0x2140
	bl FUN_020AE864
	pop {r3, pc}
_020AF420:
	mov r0, #0xa
	bl FUN_020AE8FC
	bl FUN_020AEA4C
	pop {r3, pc}
_020AF430:
	mov r0, #0xb
	bl FUN_020AE8FC
	ldr r0, _020AF458 @ =0x021D5FEC
	ldr r3, _020AF460 @ =0x0000084F
	ldr r1, [r0]
	mov r0, #7
	add r1, r1, #0x2140
	mov r2, #0
	bl FUN_020AE864
	pop {r3, pc}
	.align 2, 0
_020AF458: .4byte 0x021D5FEC
_020AF45C: .4byte 0x0000083D
_020AF460: .4byte 0x0000084F
	arm_func_end FUN_020AF39C

	arm_func_start FUN_020AF464
FUN_020AF464: @ 0x020AF464
	push {r4, lr}
	mov r4, r0
	ldrh r0, [r4, #2]
	cmp r0, #0
	beq _020AF480
	cmp r0, #4
	b _020AF53C
_020AF480:
	ldrh r0, [r4, #4]
	cmp r0, #0xe
	beq _020AF498
	cmp r0, #0xf
	beq _020AF4E8
	b _020AF514
_020AF498:
	ldr r0, _020AF564 @ =0x021D5FEC
	ldr r0, [r0]
	add r0, r0, #0x2000
	ldr r0, [r0, #0x260]
	cmp r0, #0xc
	bne _020AF4C0
	mov r0, #8
	bl FUN_020AE8FC
	bl FUN_020AEA4C
	pop {r4, pc}
_020AF4C0:
	mov r0, #9
	bl FUN_020AE8FC
	ldr r1, _020AF564 @ =0x021D5FEC
	mov r0, #0
	ldr r1, [r1]
	ldr r3, _020AF568 @ =0x00000872
	mov r2, r0
	add r1, r1, #0x2140
	bl FUN_020AE864
	pop {r4, pc}
_020AF4E8:
	ldr r0, [r4, #8]
	ldrh r0, [r0, #0xe]
	asr r0, r0, #8
	and r0, r0, #0xff
	bl FUN_020B036C
	ldr r0, [r4, #8]
	mov r1, #0x620
	bl FUN_020D285C
	ldr r0, [r4, #8]
	bl FUN_020AFE7C
	pop {r4, pc}
_020AF514:
	mov r0, #0xb
	bl FUN_020AE8FC
	ldr r0, _020AF564 @ =0x021D5FEC
	ldrh r2, [r4, #4]
	ldr r0, [r0]
	ldr r3, _020AF56C @ =0x00000881
	add r1, r0, #0x2140
	mov r0, #7
	bl FUN_020AE864
	pop {r4, pc}
_020AF53C:
	mov r0, #0xb
	bl FUN_020AE8FC
	ldr r0, _020AF564 @ =0x021D5FEC
	ldr r3, _020AF570 @ =0x0000088C
	ldr r1, [r0]
	mov r0, #7
	add r1, r1, #0x2140
	mov r2, #0
	bl FUN_020AE864
	pop {r4, pc}
	.align 2, 0
_020AF564: .4byte 0x021D5FEC
_020AF568: .4byte 0x00000872
_020AF56C: .4byte 0x00000881
_020AF570: .4byte 0x0000088C
	arm_func_end FUN_020AF464

	arm_func_start FUN_020AF574
FUN_020AF574: @ 0x020AF574
	push {r3, lr}
	ldrh r0, [r0, #2]
	cmp r0, #4
	addls pc, pc, r0, lsl #2
	b _020AF658
_020AF588: @ jump table
	b _020AF59C @ case 0
	b _020AF648 @ case 1
	b _020AF658 @ case 2
	b _020AF648 @ case 3
	b _020AF658 @ case 4
_020AF59C:
	ldr r0, _020AF680 @ =0x021D5FEC
	ldr r0, [r0]
	add r0, r0, #0x2000
	ldr r0, [r0, #0x260]
	cmp r0, #0xc
	bne _020AF5C4
	mov r0, #0xa
	bl FUN_020AE8FC
	bl FUN_020AEA4C
	pop {r3, pc}
_020AF5C4:
	ldr r0, _020AF684 @ =FUN_020AF39C
	mov r1, #0
	bl FUN_020DFA18
	cmp r0, #2
	popeq {r3, pc}
	cmp r0, #3
	beq _020AF610
	cmp r0, #8
	bne _020AF620
	mov r0, #0xc
	bl FUN_020AE8FC
	ldr r0, _020AF680 @ =0x021D5FEC
	ldr r3, _020AF688 @ =0x000008B4
	ldr r1, [r0]
	mov r0, #1
	add r1, r1, #0x2140
	mov r2, #0
	bl FUN_020AE864
	pop {r3, pc}
_020AF610:
	mov r0, #0xa
	bl FUN_020AE8FC
	bl FUN_020AEA4C
	pop {r3, pc}
_020AF620:
	mov r0, #0xb
	bl FUN_020AE8FC
	ldr r1, _020AF680 @ =0x021D5FEC
	mov r0, #7
	ldr r1, [r1]
	mov r2, #0
	add r1, r1, #0x2140
	mov r3, #0x8c0
	bl FUN_020AE864
	pop {r3, pc}
_020AF648:
	mov r0, #0xa
	bl FUN_020AE8FC
	bl FUN_020AEA4C
	pop {r3, pc}
_020AF658:
	mov r0, #0xb
	bl FUN_020AE8FC
	ldr r0, _020AF680 @ =0x021D5FEC
	ldr r3, _020AF68C @ =0x000008D3
	ldr r1, [r0]
	mov r0, #7
	add r1, r1, #0x2140
	mov r2, #0
	bl FUN_020AE864
	pop {r3, pc}
	.align 2, 0
_020AF680: .4byte 0x021D5FEC
_020AF684: .4byte FUN_020AF39C
_020AF688: .4byte 0x000008B4
_020AF68C: .4byte 0x000008D3
	arm_func_end FUN_020AF574

	arm_func_start FUN_020AF690
FUN_020AF690: @ 0x020AF690
	push {r3, r4, lr}
	sub sp, sp, #4
	ldrh r0, [r0, #2]
	cmp r0, #0
	bne _020AF968
	ldr r2, _020AF98C @ =0x021D5FEC
	mov r0, #0
	ldr r1, [r2]
	add r1, r1, #0x2000
	strb r0, [r1, #0x26b]
	ldr r1, [r2]
	add r1, r1, #0x2200
	strh r0, [r1, #0x82]
	ldr r3, [r2]
	add r1, r3, #0x2000
	ldr r1, [r1, #0x260]
	cmp r1, #0xd
	addls pc, pc, r1, lsl #2
	b _020AF938
_020AF6DC: @ jump table
	b _020AF938 @ case 0
	b _020AF938 @ case 1
	b _020AF938 @ case 2
	b _020AF938 @ case 3
	b _020AF938 @ case 4
	b _020AF714 @ case 5
	b _020AF714 @ case 6
	b _020AF738 @ case 7
	b _020AF75C @ case 8
	b _020AF874 @ case 9
	b _020AF8A0 @ case 10
	b _020AF938 @ case 11
	b _020AF874 @ case 12
	b _020AF8CC @ case 13
_020AF714:
	mov r0, #3
	bl FUN_020AE8FC
	mov r1, #0
	ldr r3, _020AF990 @ =0x000008F5
	mov r2, r1
	mov r0, #1
	bl FUN_020AE864
	add sp, sp, #4
	pop {r3, r4, pc}
_020AF738:
	mov r0, #3
	bl FUN_020AE8FC
	mov r0, #0
	ldr r3, _020AF994 @ =0x000008FB
	mov r1, r0
	mov r2, r0
	bl FUN_020AE864
	add sp, sp, #4
	pop {r3, r4, pc}
_020AF75C:
	add r1, r3, #0x2200
	ldrh r4, [r1, #0xf8]
	strh r0, [r1, #0xf8]
	cmp r4, #0x12
	bne _020AF848
	ldr r1, [r2]
	add r1, r1, #0x2100
	ldrh r3, [r1, #0x70]
	and ip, r3, #0x24
	cmp ip, #0x24
	beq _020AF848
	orr r3, r3, #0x24
	strh r3, [r1, #0x70]
	ldr lr, [r2]
	add r1, lr, #0x2000
	ldr r2, [r1, #0x264]
	and r1, r2, #0xc0000
	cmp r1, #0xc0000
	moveq r0, #1
	and r1, r2, #0x30000
	cmp r1, #0x30000
	lsl r0, r0, #0x10
	lsr ip, r0, #0x10
	movne r3, #1
	ldr r0, _020AF998 @ =FUN_020AF138
	moveq r3, #0
	add r1, lr, #0x2140
	mov r2, #0
	str ip, [sp]
	bl FUN_020DF94C
	cmp r0, #2
	addeq sp, sp, #4
	popeq {r3, r4, pc}
	cmp r0, #3
	beq _020AF81C
	cmp r0, #8
	bne _020AF81C
	mov r0, #0xc
	bl FUN_020AE8FC
	ldr r0, _020AF98C @ =0x021D5FEC
	ldr r3, _020AF99C @ =0x0000091C
	ldr r0, [r0]
	mov r2, r4
	add r1, r0, #0x2140
	mov r0, #1
	bl FUN_020AE864
	add sp, sp, #4
	pop {r3, r4, pc}
_020AF81C:
	mov r0, #0xb
	bl FUN_020AE8FC
	ldr r0, _020AF98C @ =0x021D5FEC
	ldr r3, _020AF9A0 @ =0x00000925
	ldr r0, [r0]
	mov r2, r4
	add r1, r0, #0x2140
	mov r0, #7
	bl FUN_020AE864
	add sp, sp, #4
	pop {r3, r4, pc}
_020AF848:
	mov r0, #3
	bl FUN_020AE8FC
	ldr r0, _020AF98C @ =0x021D5FEC
	ldr r3, _020AF9A4 @ =0x0000092D
	ldr r0, [r0]
	mov r2, r4
	add r1, r0, #0x2140
	mov r0, #1
	bl FUN_020AE864
	add sp, sp, #4
	pop {r3, r4, pc}
_020AF874:
	mov r0, #3
	bl FUN_020AE8FC
	ldr r0, _020AF98C @ =0x021D5FEC
	ldr r3, _020AF9A8 @ =0x00000935
	ldr r1, [r0]
	mov r0, #0
	add r1, r1, #0x2140
	mov r2, #1
	bl FUN_020AE864
	add sp, sp, #4
	pop {r3, r4, pc}
_020AF8A0:
	mov r0, #3
	bl FUN_020AE8FC
	ldr r1, _020AF98C @ =0x021D5FEC
	mov r0, #0
	ldr r1, [r1]
	ldr r3, _020AF9AC @ =0x0000093C
	mov r2, r0
	add r1, r1, #0x2140
	bl FUN_020AE864
	add sp, sp, #4
	pop {r3, r4, pc}
_020AF8CC:
	ldr r0, _020AF9B0 @ =FUN_020AEB20
	bl FUN_020DF3B8
	cmp r0, #2
	addeq sp, sp, #4
	popeq {r3, r4, pc}
	cmp r0, #3
	beq _020AF914
	cmp r0, #8
	bne _020AF914
	mov r0, #0xc
	bl FUN_020AE8FC
	mov r1, #0
	ldr r3, _020AF9B4 @ =0x0000094A
	mov r2, r1
	mov r0, #1
	bl FUN_020AE864
	add sp, sp, #4
	pop {r3, r4, pc}
_020AF914:
	mov r0, #0xb
	bl FUN_020AE8FC
	mov r1, #0
	ldr r3, _020AF9B8 @ =0x00000953
	mov r2, r1
	mov r0, #7
	bl FUN_020AE864
	add sp, sp, #4
	pop {r3, r4, pc}
_020AF938:
	mov r0, #0xb
	bl FUN_020AE8FC
	ldr r1, _020AF98C @ =0x021D5FEC
	mov r0, #7
	ldr r1, [r1]
	rsb r3, r0, #0x960
	add r1, r1, #0x2000
	ldr r2, [r1, #0x260]
	mov r1, #0
	bl FUN_020AE864
	add sp, sp, #4
	pop {r3, r4, pc}
_020AF968:
	mov r0, #0xb
	bl FUN_020AE8FC
	mov r1, #0
	mov r2, r1
	mov r0, #7
	mov r3, #0x960
	bl FUN_020AE864
	add sp, sp, #4
	pop {r3, r4, pc}
	.align 2, 0
_020AF98C: .4byte 0x021D5FEC
_020AF990: .4byte 0x000008F5
_020AF994: .4byte 0x000008FB
_020AF998: .4byte FUN_020AF138
_020AF99C: .4byte 0x0000091C
_020AF9A0: .4byte 0x00000925
_020AF9A4: .4byte 0x0000092D
_020AF9A8: .4byte 0x00000935
_020AF9AC: .4byte 0x0000093C
_020AF9B0: .4byte FUN_020AEB20
_020AF9B4: .4byte 0x0000094A
_020AF9B8: .4byte 0x00000953
	arm_func_end FUN_020AF690

	arm_func_start FUN_020AF9BC
FUN_020AF9BC: @ 0x020AF9BC
	push {r4, lr}
	bl FUN_020D3A38
	mov r4, r0
	bl FUN_020AE4EC
	cmp r0, #0
	bne _020AF9E0
	mov r0, r4
	bl FUN_020D3A4C
	pop {r4, pc}
_020AF9E0:
	add r1, r0, #0x2000
	ldr r0, [r1, #0x270]
	cmp r0, #0
	beq _020AFA04
	ldr r2, [r1, #0x274]
	cmp r2, #0
	ble _020AFA04
	mov r1, #0
	bl FUN_020D4994
_020AFA04:
	mov r0, r4
	bl FUN_020D3A4C
	pop {r4, pc}
	arm_func_end FUN_020AF9BC

	arm_func_start FUN_020AFA10
FUN_020AFA10: @ 0x020AFA10
	push {r3, r4, r5, lr}
	bl FUN_020D3A38
	mov r4, r0
	bl FUN_020AE4EC
	cmp r0, #0
	mov r5, #0
	bne _020AFA3C
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, r5
	pop {r3, r4, r5, pc}
_020AFA3C:
	add r0, r0, #0x2000
	ldr r1, [r0, #0x270]
	cmp r1, #0
	beq _020AFA58
	ldr r0, [r0, #0x274]
	cmp r0, #0xc
	ldrhi r5, [r1]
_020AFA58:
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, r5
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020AFA10

	arm_func_start FUN_020AFA68
FUN_020AFA68: @ 0x020AFA68
	push {r3, r4, r5, lr}
	mov r5, r0
	bl FUN_020D3A38
	mov r4, r0
	bl FUN_020AE4EC
	cmp r0, #0
	bne _020AFA94
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, #0
	pop {r3, r4, r5, pc}
_020AFA94:
	add r1, r0, #0x2000
	cmp r5, #0
	ldrb r1, [r1, #0x26a]
	beq _020AFABC
	cmp r1, #0
	movne r5, #1
	moveq r5, #0
	add r0, r0, #0x2000
	mov r1, #1
	b _020AFAD0
_020AFABC:
	cmp r1, #0
	movne r5, #1
	moveq r5, #0
	add r0, r0, #0x2000
	mov r1, #0
_020AFAD0:
	strb r1, [r0, #0x26a]
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, r5
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020AFA68

	arm_func_start FUN_020AFAE4
FUN_020AFAE4: @ 0x020AFAE4
	push {r3, r4, r5, lr}
	mov r4, r0
	bl FUN_020D3A38
	mov r5, r0
	bl FUN_020AE4EC
	cmp r0, #0
	bne _020AFB10
	mov r0, r5
	bl FUN_020D3A4C
	mov r0, #0
	pop {r3, r4, r5, pc}
_020AFB10:
	mov r0, r4
	bl FUN_020AFD30
	movs r4, r0
	mov r0, r5
	bne _020AFB30
	bl FUN_020D3A4C
	mov r0, #0
	pop {r3, r4, r5, pc}
_020AFB30:
	bl FUN_020D3A4C
	add r0, r4, #0x10
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020AFAE4

	arm_func_start FUN_020AFB3C
FUN_020AFB3C: @ 0x020AFB3C
	push {r3, r4, r5, r6, r7, lr}
	mov r5, r0
	mov r4, r1
	bl FUN_020AE4EC
	movs r6, r0
	popeq {r3, r4, r5, r6, r7, pc}
	add r0, r6, #0x2000
	ldrb r0, [r0, #0x26a]
	cmp r0, #0
	ldrheq r0, [r5, #0x3c]
	cmpeq r0, #0
	popne {r3, r4, r5, r6, r7, pc}
	add r0, r5, #4
	bl FUN_020AFCC4
	movs r7, r0
	bne _020AFB84
	bl FUN_020AFBC8
	mov r7, r0
_020AFB84:
	cmp r7, #0
	addeq r0, r6, #0x2000
	ldreq r0, [r0, #0x278]
	cmpeq r0, #1
	bne _020AFBA0
	bl FUN_020AFC94
	mov r7, r0
_020AFBA0:
	cmp r7, #0
	popeq {r3, r4, r5, r6, r7, pc}
	mov r0, r5
	add r1, r7, #0x10
	mov r2, #0xc0
	strh r4, [r7, #2]
	bl FUN_020D48B4
	mov r0, r7
	bl FUN_020AFD80
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020AFB3C

	arm_func_start FUN_020AFBC8
FUN_020AFBC8: @ 0x020AFBC8
	push {r4, lr}
	bl FUN_020AE4EC
	add r2, r0, #0x2000
	ldr r1, [r2, #0x270]
	mov r0, #0
	cmp r1, #0
	popeq {r4, pc}
	ldr r3, [r2, #0x274]
	cmp r3, #0xc
	popls {r4, pc}
	ldr r2, _020AFC90 @ =0x4EC4EC4F
	sub r3, r3, #0xc
	umull r2, ip, r3, r2
	lsrs ip, ip, #6
	popeq {r4, pc}
	ldr r2, [r1]
	cmp ip, r2
	popls {r4, pc}
	mov lr, r0
	cmp ip, #0
	bls _020AFC44
	add r4, r1, #0xc
	mov r2, #0xd0
_020AFC24:
	mul r0, lr, r2
	ldrb r3, [r4, r0]
	add r0, r4, r0
	cmp r3, #0
	beq _020AFC44
	add lr, lr, #1
	cmp lr, ip
	blo _020AFC24
_020AFC44:
	cmp lr, ip
	pophs {r4, pc}
	mov r2, #1
	strb r2, [r0]
	ldr r3, [r1]
	mov r2, #0
	str r3, [r0, #4]
	str r2, [r0, #0xc]
	ldr r2, [r1, #8]
	str r2, [r0, #8]
	str r0, [r1, #8]
	ldr r2, [r0, #8]
	cmp r2, #0
	strne r0, [r2, #0xc]
	streq r0, [r1, #4]
	ldr r2, [r1]
	add r2, r2, #1
	str r2, [r1]
	pop {r4, pc}
	.align 2, 0
_020AFC90: .4byte 0x4EC4EC4F
	arm_func_end FUN_020AFBC8

	arm_func_start FUN_020AFC94
FUN_020AFC94: @ 0x020AFC94
	push {r3, lr}
	bl FUN_020AE4EC
	add r0, r0, #0x2000
	ldr r1, [r0, #0x270]
	cmp r1, #0
	beq _020AFCBC
	ldr r0, [r0, #0x274]
	cmp r0, #0xc
	ldrhi r0, [r1, #4]
	pophi {r3, pc}
_020AFCBC:
	mov r0, #0
	pop {r3, pc}
	arm_func_end FUN_020AFC94

	arm_func_start FUN_020AFCC4
FUN_020AFCC4: @ 0x020AFCC4
	push {r3, r4, r5, lr}
	mov r5, r0
	bl FUN_020AE4EC
	add r0, r0, #0x2000
	mov r4, #0
	cmp r5, #0
	ldr r1, [r0, #0x270]
	moveq r0, r4
	popeq {r3, r4, r5, pc}
	cmp r1, #0
	beq _020AFD28
	ldr r0, [r0, #0x274]
	cmp r0, #0xc
	bls _020AFD28
	ldr r4, [r1, #4]
	cmp r4, #0
	beq _020AFD28
_020AFD08:
	mov r1, r5
	add r0, r4, #0x14
	bl FUN_020B0248
	cmp r0, #0
	bne _020AFD28
	ldr r4, [r4, #0xc]
	cmp r4, #0
	bne _020AFD08
_020AFD28:
	mov r0, r4
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020AFCC4

	arm_func_start FUN_020AFD30
FUN_020AFD30: @ 0x020AFD30
	push {r4, lr}
	mov r4, r0
	bl FUN_020AE4EC
	add r1, r0, #0x2000
	ldr r2, [r1, #0x270]
	mov r0, #0
	cmp r2, #0
	popeq {r4, pc}
	ldr r1, [r1, #0x274]
	cmp r1, #0xc
	popls {r4, pc}
	ldr r0, [r2, #4]
	cmp r0, #0
	popeq {r4, pc}
_020AFD68:
	ldr r1, [r0, #4]
	cmp r1, r4
	ldrne r0, [r0, #0xc]
	cmpne r0, #0
	bne _020AFD68
	pop {r4, pc}
	arm_func_end FUN_020AFD30

	arm_func_start FUN_020AFD80
FUN_020AFD80: @ 0x020AFD80
	push {r4, lr}
	mov r4, r0
	bl FUN_020AE4EC
	add r1, r0, #0x2000
	ldr r0, [r1, #0x270]
	cmp r4, #0
	cmpne r0, #0
	popeq {r4, pc}
	ldr r1, [r1, #0x274]
	cmp r1, #0xc
	popls {r4, pc}
	ldr r3, [r0, #4]
	cmp r3, #0
	beq _020AFDF8
_020AFDB8:
	cmp r3, r4
	bne _020AFDEC
	ldr r2, [r3, #8]
	ldr r1, [r3, #0xc]
	cmp r2, #0
	strne r1, [r2, #0xc]
	streq r1, [r0, #4]
	ldr r2, [r3, #0xc]
	ldr r1, [r3, #8]
	cmp r2, #0
	strne r1, [r2, #8]
	streq r1, [r0, #8]
	b _020AFDF8
_020AFDEC:
	ldr r3, [r3, #0xc]
	cmp r3, #0
	bne _020AFDB8
_020AFDF8:
	mov r1, #0
	str r1, [r4, #0xc]
	ldr r1, [r0, #8]
	str r1, [r4, #8]
	str r4, [r0, #8]
	ldr r1, [r4, #8]
	cmp r1, #0
	strne r4, [r1, #0xc]
	streq r4, [r0, #4]
	cmp r3, #0
	popne {r4, pc}
	ldr r1, [r0]
	str r1, [r4, #4]
	ldr r1, [r0]
	add r1, r1, #1
	str r1, [r0]
	pop {r4, pc}
	arm_func_end FUN_020AFD80

	arm_func_start FUN_020AFE3C
FUN_020AFE3C: @ 0x020AFE3C
	push {r3, lr}
	ldr r1, _020AFE74 @ =0x021D5FF0
	ldrb r0, [r1]
	cmp r0, #0
	popne {r3, pc}
	mov r0, #1
	strb r0, [r1]
	mov r2, #0
	str r2, [r1, #0x24]
	str r2, [r1, #8]
	ldr r0, _020AFE78 @ =0x021D5FFC
	str r2, [r1, #4]
	bl FUN_020D2600
	pop {r3, pc}
	.align 2, 0
_020AFE74: .4byte 0x021D5FF0
_020AFE78: .4byte 0x021D5FFC
	arm_func_end FUN_020AFE3C

	arm_func_start FUN_020AFE7C
FUN_020AFE7C: @ 0x020AFE7C
	push {r3, lr}
	ldr r1, _020AFEAC @ =0x021D5FF0
	mov r2, r0
	ldr ip, [r1, #0x28]
	cmp ip, #0
	popeq {r3, pc}
	ldrh r3, [r2, #6]
	add r0, r2, #0x1e
	add r1, r2, #0x18
	add r2, r2, #0x2c
	blx ip
	pop {r3, pc}
	.align 2, 0
_020AFEAC: .4byte 0x021D5FF0
	arm_func_end FUN_020AFE7C

	arm_func_start FUN_020AFEB0
FUN_020AFEB0: @ 0x020AFEB0
	push {r4, lr}
	bl FUN_020AE4EC
	movs r4, r0
	popeq {r4, pc}
	add r0, r4, #0x2000
	ldr r1, [r0, #0x260]
	cmp r1, #9
	popne {r4, pc}
	ldrb r0, [r0, #0x26b]
	cmp r0, #1
	popeq {r4, pc}
	ldr r0, _020AFF18 @ =0x021D5FFC
	bl FUN_020B01C0
	cmp r0, #0
	popeq {r4, pc}
	add r1, r4, #0x144
	ldr r0, _020AFF1C @ =FUN_020B01AC
	add r1, r1, #0x2000
	add r2, r4, #0xf00
	mov r3, #0
	bl FUN_020DFFBC
	cmp r0, #2
	popeq {r4, pc}
	ldr r0, _020AFF18 @ =0x021D5FFC
	bl FUN_020B0210
	pop {r4, pc}
	.align 2, 0
_020AFF18: .4byte 0x021D5FFC
_020AFF1C: .4byte FUN_020B01AC
	arm_func_end FUN_020AFEB0

	arm_func_start FUN_020AFF20
FUN_020AFF20: @ 0x020AFF20
	push {r3, r4, r5, lr}
	mov r5, #0
	bl FUN_020AE4EC
	mov r4, r0
	bl FUN_020D3A38
	cmp r4, #0
	beq _020AFF58
	add r1, r4, #0x2000
	ldr r2, [r1, #0x260]
	cmp r2, #9
	ldrbeq r1, [r1, #0x26b]
	cmpeq r1, #0
	addeq r1, r4, #0x144
	addeq r5, r1, #0x2000
_020AFF58:
	bl FUN_020D3A4C
	mov r0, r5
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020AFF20

	arm_func_start FUN_020AFF64
FUN_020AFF64: @ 0x020AFF64
	push {r3, r4, r5, r6, r7, lr}
	mov r7, #0
	mov r5, r0
	mov r4, r7
	bl FUN_020AE4EC
	mov r6, r0
	bl FUN_020D3A38
	cmp r6, #0
	beq _020AFFB0
	add r1, r6, #0x2000
	ldr r2, [r1, #0x260]
	cmp r2, #9
	ldrbeq r1, [r1, #0x26b]
	cmpeq r1, #0
	bne _020AFFB0
	add r1, r6, #0x2100
	ldrh r4, [r1, #0x4a]
	add r1, r6, #0x14c
	add r7, r1, #0x2000
_020AFFB0:
	bl FUN_020D3A4C
	cmp r5, #0
	strhne r4, [r5]
	mov r0, r7
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020AFF64

	arm_func_start FUN_020AFFC4
FUN_020AFFC4: @ 0x020AFFC4
	push {r4, lr}
	mov r4, r0
	bl FUN_020D3A38
	ldr r1, _020AFFE0 @ =0x021D5FF0
	str r4, [r1, #0x28]
	bl FUN_020D3A4C
	pop {r4, pc}
	.align 2, 0
_020AFFE0: .4byte 0x021D5FF0
	arm_func_end FUN_020AFFC4

	arm_func_start FUN_020AFFE4
FUN_020AFFE4: @ 0x020AFFE4
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r4, r0
	mov sb, r1
	mov r8, r2
	mov r6, r3
	bl FUN_020D3A38
	mov r5, r0
	bl FUN_020AE4EC
	cmp r0, #0
	bne _020B001C
	mov r0, r5
	bl FUN_020D3A4C
	mvn r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_020B001C:
	ldr r0, _020B015C @ =0x021D5FFC
	bl FUN_020D2618
	bl FUN_020AE4EC
	movs r7, r0
	bne _020B0048
	ldr r0, _020B015C @ =0x021D5FFC
	bl FUN_020D269C
	mov r0, r5
	bl FUN_020D3A4C
	mvn r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_020B0048:
	add r0, r7, #0x2000
	ldr r1, [r0, #0x260]
	cmp r1, #9
	bne _020B0064
	ldrb r0, [r0, #0x26b]
	cmp r0, #1
	bne _020B007C
_020B0064:
	ldr r0, _020B015C @ =0x021D5FFC
	bl FUN_020D269C
	mov r0, r5
	bl FUN_020D3A4C
	mvn r0, #3
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_020B007C:
	mov r0, sb
	mov r2, r8
	add r1, r7, #0xf00
	bl FUN_020D4A50
	ldr r2, [sp, #0x20]
	cmp r2, #0
	ble _020B00A8
	add r1, r7, #0xf00
	mov r0, r6
	add r1, r1, r8
	bl FUN_020D4A50
_020B00A8:
	ldr r1, [sp, #0x20]
	ldr r0, _020B0160 @ =FUN_020B016C
	add r6, r8, r1
	lsl r3, r6, #0x10
	mov r1, r4
	add r2, r7, #0xf00
	lsr r3, r3, #0x10
	bl FUN_020DFFBC
	cmp r0, #8
	addls pc, pc, r0, lsl #2
	b _020B00F8
_020B00D4: @ jump table
	b _020B00F8 @ case 0
	b _020B00F8 @ case 1
	b _020B0110 @ case 2
	b _020B00F8 @ case 3
	b _020B00F8 @ case 4
	b _020B00F8 @ case 5
	b _020B00F8 @ case 6
	b _020B00F8 @ case 7
	b _020B00F8 @ case 8
_020B00F8:
	ldr r0, _020B015C @ =0x021D5FFC
	bl FUN_020D269C
	mov r0, r5
	bl FUN_020D3A4C
	mvn r0, #4
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_020B0110:
	ldr r0, _020B0164 @ =0x021D5FF4
	bl FUN_020D1E7C
	ldr r0, _020B0168 @ =0x021D5FF0
	ldr r0, [r0, #0x24]
	cmp r0, #0
	beq _020B0144
	cmp r0, #1
	ldr r0, _020B015C @ =0x021D5FFC
	bl FUN_020D269C
	mov r0, r5
	bl FUN_020D3A4C
	mvn r0, #4
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_020B0144:
	ldr r0, _020B015C @ =0x021D5FFC
	bl FUN_020D269C
	mov r0, r5
	bl FUN_020D3A4C
	mov r0, r6
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0
_020B015C: .4byte 0x021D5FFC
_020B0160: .4byte FUN_020B016C
_020B0164: .4byte 0x021D5FF4
_020B0168: .4byte 0x021D5FF0
	arm_func_end FUN_020AFFE4

	arm_func_start FUN_020B016C
FUN_020B016C: @ 0x020B016C
	push {r3, lr}
	ldrh r1, [r0]
	cmp r1, #0x12
	popne {r3, pc}
	ldrh r2, [r0, #2]
	ldr r1, _020B01A4 @ =0x021D5FF0
	str r2, [r1, #0x24]
	ldrh r0, [r0, #2]
	cmp r0, #0
	bne _020B0198
	bl FUN_020AE994
_020B0198:
	ldr r0, _020B01A8 @ =0x021D5FF4
	bl FUN_020D1ECC
	pop {r3, pc}
	.align 2, 0
_020B01A4: .4byte 0x021D5FF0
_020B01A8: .4byte 0x021D5FF4
	arm_func_end FUN_020B016C

	arm_func_start FUN_020B01AC
FUN_020B01AC: @ 0x020B01AC
	ldr ip, _020B01B8 @ =FUN_020B0210
	ldr r0, _020B01BC @ =0x021D5FFC
	bx ip
	.align 2, 0
_020B01B8: .4byte FUN_020B0210
_020B01BC: .4byte 0x021D5FFC
	arm_func_end FUN_020B01AC

	arm_func_start FUN_020B01C0
FUN_020B01C0: @ 0x020B01C0
	ldr r2, [r0, #8]
	cmp r2, #0
	bne _020B01E8
	ldr r1, _020B020C @ =FUN_01FF8000
	str r1, [r0, #8]
	ldr r1, [r0, #0xc]
	add r1, r1, #1
	str r1, [r0, #0xc]
	mov r0, #1
	bx lr
_020B01E8:
	ldr r1, _020B020C @ =FUN_01FF8000
	cmp r2, r1
	movne r0, #0
	bxne lr
	ldr r1, [r0, #0xc]
	add r1, r1, #1
	str r1, [r0, #0xc]
	mov r0, #1
	bx lr
	.align 2, 0
_020B020C: .4byte FUN_01FF8000
	arm_func_end FUN_020B01C0

	arm_func_start FUN_020B0210
FUN_020B0210: @ 0x020B0210
	push {r3, lr}
	ldr r2, [r0, #8]
	ldr r1, _020B0244 @ =FUN_01FF8000
	cmp r2, r1
	popne {r3, pc}
	ldr r1, [r0, #0xc]
	subs r1, r1, #1
	str r1, [r0, #0xc]
	popne {r3, pc}
	mov r1, #0
	str r1, [r0, #8]
	bl FUN_020D1ECC
	pop {r3, pc}
	.align 2, 0
_020B0244: .4byte FUN_01FF8000
	arm_func_end FUN_020B0210

	arm_func_start FUN_020B0248
FUN_020B0248: @ 0x020B0248
	mov ip, #0
_020B024C:
	ldrb r3, [r0, ip]
	ldrb r2, [r1, ip]
	cmp r3, r2
	movne r0, #0
	bxne lr
	add ip, ip, #1
	cmp ip, #6
	blt _020B024C
	mov r0, #1
	bx lr
	arm_func_end FUN_020B0248

	arm_func_start FUN_020B0274
FUN_020B0274: @ 0x020B0274
	push {r3, r4, r5, lr}
	bl FUN_020D3A38
	mov r4, r0
	bl FUN_020AE4EC
	cmp r0, #0
	mov r5, #0
	beq _020B02A8
	add r0, r0, #0x2000
	ldr r0, [r0, #0x260]
	cmp r0, #9
	bne _020B02A8
	bl FUN_020B0338
	mov r5, r0
_020B02A8:
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, r5
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020B0274

	arm_func_start FUN_020B02B8
FUN_020B02B8: @ 0x020B02B8
	push {r3, lr}
	ldr r1, _020B0330 @ =0x021D601C
	mov r0, #0
	ldrb r1, [r1]
	cmp r1, #0x10
	bls _020B02FC
	ldr r3, _020B0334 @ =0x021D6020
	mov r2, r0
_020B02D8:
	ldrb r1, [r3], #1
	add r2, r2, #1
	cmp r2, #0x10
	add r0, r0, r1
	blt _020B02D8
	asr r1, r0, #3
	add r0, r0, r1, lsr #28
	asr r0, r0, #4
	b _020B0328
_020B02FC:
	cmp r1, #0
	beq _020B0328
	mov ip, r0
	ble _020B0324
	ldr r3, _020B0334 @ =0x021D6020
_020B0310:
	ldrb r2, [r3], #1
	add ip, ip, #1
	cmp ip, r1
	add r0, r0, r2
	blt _020B0310
_020B0324:
	bl FUN_020F2998
_020B0328:
	and r0, r0, #0xff
	pop {r3, pc}
	.align 2, 0
_020B0330: .4byte 0x021D601C
_020B0334: .4byte 0x021D6020
	arm_func_end FUN_020B02B8

	arm_func_start FUN_020B0338
FUN_020B0338: @ 0x020B0338
	push {r3, lr}
	bl FUN_020B02B8
	mov r1, #0
	cmp r0, #0x1c
	movhs r1, #3
	bhs _020B0364
	cmp r0, #0x16
	movhs r1, #2
	bhs _020B0364
	cmp r0, #0x10
	movhs r1, #1
_020B0364:
	mov r0, r1
	pop {r3, pc}
	arm_func_end FUN_020B0338

	arm_func_start FUN_020B036C
FUN_020B036C: @ 0x020B036C
	push {r3, lr}
	ldr r2, _020B03C4 @ =0x021D601C
	tst r0, #2
	ldrb ip, [r2]
	asr r0, r0, #2
	addeq r0, r0, #0x19
	lsr r1, ip, #0x1f
	and lr, r0, #0xff
	rsb r0, r1, ip, lsl #28
	ldr r3, _020B03C8 @ =0x021D6020
	add r0, r1, r0, ror #28
	strb lr, [r3, r0]
	add r0, ip, #1
	cmp ip, #0x10
	strblo r0, [r2]
	poplo {r3, pc}
	lsr r1, r0, #0x1f
	rsb r0, r1, r0, lsl #28
	add r0, r1, r0, ror #28
	add r0, r0, #0x10
	strb r0, [r2]
	pop {r3, pc}
	.align 2, 0
_020B03C4: .4byte 0x021D601C
_020B03C8: .4byte 0x021D6020
	arm_func_end FUN_020B036C

	arm_func_start FUN_020B03CC
FUN_020B03CC: @ 0x020B03CC
	ldr ip, _020B03D4 @ =FUN_020D8E00
	bx ip
	.align 2, 0
_020B03D4: .4byte FUN_020D8E00
	arm_func_end FUN_020B03CC

	arm_func_start FUN_020B03D8
FUN_020B03D8: @ 0x020B03D8
	ldr ip, _020B03E0 @ =FUN_020D8E40
	bx ip
	.align 2, 0
_020B03E0: .4byte FUN_020D8E40
	arm_func_end FUN_020B03D8

	arm_func_start FUN_020B03E4
FUN_020B03E4: @ 0x020B03E4
	ldr ip, _020B03EC @ =FUN_020D8F08
	bx ip
	.align 2, 0
_020B03EC: .4byte FUN_020D8F08
	arm_func_end FUN_020B03E4

	arm_func_start FUN_020B03F0
FUN_020B03F0: @ 0x020B03F0
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov r6, #0
	cmp r2, #0
	popls {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r4, #0x8000
	ldr lr, _020B0538 @ =0x00007FFF
	ldr ip, _020B053C @ =0x02108FF4
	ldr r5, _020B0540 @ =0x02109004
	rsb r4, r4, #0
_020B0414:
	ldrb r7, [r3, #2]
	ldrb sl, [r0]
	ldrsh r8, [r3]
	lsl sb, r7, #1
	ldrsh fp, [r5, sb]
	and sl, sl, #0xf
	tst sl, #4
	asr sb, fp, #3
	addne sb, sb, fp
	tst sl, #2
	addne sb, sb, fp, asr #1
	tst sl, #1
	addne sb, sb, fp, asr #2
	tst sl, #8
	beq _020B0460
	sub r8, r8, sb
	cmp r8, r4
	movlt r8, r4
	b _020B046C
_020B0460:
	add r8, r8, sb
	cmp r8, lr
	movgt r8, lr
_020B046C:
	ldrsb sb, [ip, sl]
	adds r7, r7, sb
	movmi r7, #0
	bmi _020B0484
	cmp r7, #0x58
	movgt r7, #0x58
_020B0484:
	lsl r8, r8, #0x10
	asr r8, r8, #0x10
	strh r8, [r3]
	strb r7, [r3, #2]
	strh r8, [r1]
	ldrb r7, [r3, #2]
	ldrb sl, [r0]
	ldrsh r8, [r3]
	lsl sb, r7, #1
	ldrsh fp, [r5, sb]
	asr sl, sl, #4
	and sl, sl, #0xf
	asr sb, fp, #3
	tst sl, #4
	addne sb, sb, fp
	tst sl, #2
	addne sb, sb, fp, asr #1
	tst sl, #1
	addne sb, sb, fp, asr #2
	tst sl, #8
	beq _020B04E8
	sub r8, r8, sb
	cmp r8, r4
	movlt r8, r4
	b _020B04F4
_020B04E8:
	add r8, r8, sb
	cmp r8, lr
	movgt r8, lr
_020B04F4:
	ldrsb sb, [ip, sl]
	adds r7, r7, sb
	movmi r7, #0
	bmi _020B050C
	cmp r7, #0x58
	movgt r7, #0x58
_020B050C:
	lsl r8, r8, #0x10
	asr r8, r8, #0x10
	strh r8, [r3]
	strb r7, [r3, #2]
	add r6, r6, #1
	strh r8, [r1, #2]
	cmp r6, r2
	add r1, r1, #4
	add r0, r0, #1
	blo _020B0414
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020B0538: .4byte 0x00007FFF
_020B053C: .4byte 0x02108FF4
_020B0540: .4byte 0x02109004
	arm_func_end FUN_020B03F0

	arm_func_start FUN_020B0544
FUN_020B0544: @ 0x020B0544
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	lsrs r8, r2, #1
	mov r4, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov ip, #0x8000
	rsb ip, ip, #0
	ldr lr, _020B06C8 @ =0x02109004
	lsr r2, ip, #0x11
_020B0564:
	ldrb r6, [r3, #2]
	ldrsh r7, [r3]
	ldrsh r5, [r1]
	lsl sb, r6, #1
	ldrsh sb, [lr, sb]
	subs sl, r5, r7
	movmi r5, #8
	rsbmi sl, sl, #0
	movpl r5, #0
	cmp sl, sb
	orrge r5, r5, #4
	subge sl, sl, sb
	cmp sl, sb, asr #1
	orrge r5, r5, #2
	subge sl, sl, sb, asr #1
	cmp sl, sb, asr #2
	orrge r5, r5, #1
	asr sl, sb, #3
	tst r5, #4
	addne sl, sl, sb
	tst r5, #2
	addne sl, sl, sb, asr #1
	tst r5, #1
	addne sl, sl, sb, asr #2
	tst r5, #8
	rsbne sl, sl, #0
	add sb, r7, sl
	ldr r7, _020B06CC @ =0x02108FF4
	cmp sb, ip
	movlt sb, ip
	cmp sb, ip, lsr #17
	ldrsb r7, [r7, r5]
	movgt sb, r2
	adds r6, r6, r7
	movmi r6, #0
	bmi _020B05FC
	cmp r6, #0x58
	movgt r6, #0x58
_020B05FC:
	strh sb, [r3]
	strb r6, [r3, #2]
	and r7, r6, #0xff
	ldrsh r6, [r1, #2]
	ldrsh sb, [r3]
	lsl sl, r7, #1
	ldrsh sl, [lr, sl]
	subs fp, r6, sb
	movmi r6, #8
	rsbmi fp, fp, #0
	movpl r6, #0
	cmp fp, sl
	orrge r6, r6, #4
	subge fp, fp, sl
	cmp fp, sl, asr #1
	orrge r6, r6, #2
	subge fp, fp, sl, asr #1
	cmp fp, sl, asr #2
	orrge r6, r6, #1
	asr fp, sl, #3
	tst r6, #4
	addne fp, fp, sl
	tst r6, #2
	addne fp, fp, sl, asr #1
	tst r6, #1
	addne fp, fp, sl, asr #2
	tst r6, #8
	rsbne fp, fp, #0
	add sl, sb, fp
	ldr sb, _020B06CC @ =0x02108FF4
	cmp sl, ip
	movlt sl, ip
	cmp sl, ip, lsr #17
	ldrsb sb, [sb, r6]
	movgt sl, r2
	and r5, r5, #0xff
	adds r7, r7, sb
	add r1, r1, #4
	movmi r7, #0
	bmi _020B06A4
	cmp r7, #0x58
	movgt r7, #0x58
_020B06A4:
	strh sl, [r3]
	strb r7, [r3, #2]
	and r6, r6, #0xff
	orr r5, r5, r6, lsl #4
	strb r5, [r0], #1
	add r4, r4, #1
	cmp r4, r8
	blo _020B0564
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020B06C8: .4byte 0x02109004
_020B06CC: .4byte 0x02108FF4
	arm_func_end FUN_020B0544

	arm_func_start FUN_020B06D0
FUN_020B06D0: @ 0x020B06D0
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x10
	ldr r5, _020B0B54 @ =0xAAAAAAAB
	mov r4, #0
	str r4, [sp, #0xc]
	umull r5, r4, r2, r5
	lsrs r2, r4, #1
	str r2, [sp]
	addeq sp, sp, #0x10
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r4, #0x8000
	ldr lr, _020B0B58 @ =0x00007FFF
	ldr r5, _020B0B5C @ =0x02109004
	rsb r4, r4, #0
_020B0708:
	ldrb r7, [r3, #2]
	ldrb fp, [r0]
	ldrb r2, [r0, #1]
	lsl r6, r7, #1
	ldrsh r6, [r5, r6]
	asr sb, fp, #5
	tst sb, #2
	str r6, [sp, #8]
	ldrne sl, [sp, #8]
	asr r6, r6, #2
	addne r6, r6, sl
	tst sb, #1
	ldrne sl, [sp, #8]
	ldrb ip, [r0, #2]
	addne r6, r6, sl, asr #1
	ldrsh r8, [r3]
	tst sb, #4
	beq _020B0760
	sub r8, r8, r6
	cmp r8, r4
	movlt r8, r4
	b _020B076C
_020B0760:
	add r8, r8, r6
	cmp r8, lr
	movgt r8, lr
_020B076C:
	ldr r6, _020B0B60 @ =0x02108FEC
	ldrsb r6, [r6, sb]
	adds r7, r7, r6
	movmi r7, #0
	bmi _020B0788
	cmp r7, #0x58
	movgt r7, #0x58
_020B0788:
	lsl r6, r8, #0x10
	asr r6, r6, #0x10
	strh r6, [r3]
	strb r7, [r3, #2]
	strh r6, [r1]
	ldrb r7, [r3, #2]
	asr sb, fp, #2
	tst sb, #2
	lsl r6, r7, #1
	ldrsh r6, [r5, r6]
	ldrsh r8, [r3]
	str r6, [sp, #4]
	ldrne sl, [sp, #4]
	asr r6, r6, #2
	addne r6, r6, sl
	tst sb, #1
	ldrne sl, [sp, #4]
	addne r6, r6, sl, asr #1
	tst sb, #4
	beq _020B07E8
	sub r8, r8, r6
	cmp r8, r4
	movlt r8, r4
	b _020B07F4
_020B07E8:
	add r8, r8, r6
	cmp r8, lr
	movgt r8, lr
_020B07F4:
	ldr r6, _020B0B60 @ =0x02108FEC
	and sb, sb, #7
	ldrsb r6, [r6, sb]
	adds r7, r7, r6
	movmi r7, #0
	bmi _020B0814
	cmp r7, #0x58
	movgt r7, #0x58
_020B0814:
	lsl r6, r8, #0x10
	asr r6, r6, #0x10
	strh r6, [r3]
	strb r7, [r3, #2]
	strh r6, [r1, #2]
	ldrb r6, [r3, #2]
	lsl r8, fp, #1
	and r8, r8, #7
	lsl sb, r6, #1
	ldrsh sl, [r5, sb]
	orr r8, r8, r2, asr #7
	tst r8, #2
	asr sb, sl, #2
	addne sb, sb, sl
	tst r8, #1
	addne sb, sb, sl, asr #1
	ldrsh r7, [r3]
	tst r8, #4
	beq _020B0870
	sub r7, r7, sb
	cmp r7, r4
	movlt r7, r4
	b _020B087C
_020B0870:
	add r7, r7, sb
	cmp r7, lr
	movgt r7, lr
_020B087C:
	ldr sb, _020B0B60 @ =0x02108FEC
	ldrsb r8, [sb, r8]
	adds r6, r6, r8
	movmi r6, #0
	bmi _020B0898
	cmp r6, #0x58
	movgt r6, #0x58
_020B0898:
	lsl r7, r7, #0x10
	asr r7, r7, #0x10
	strh r7, [r3]
	strb r6, [r3, #2]
	strh r7, [r1, #4]
	ldrb r6, [r3, #2]
	asr r8, r2, #4
	tst r8, #2
	lsl sb, r6, #1
	ldrsh sl, [r5, sb]
	ldrsh r7, [r3]
	asr sb, sl, #2
	addne sb, sb, sl
	tst r8, #1
	addne sb, sb, sl, asr #1
	tst r8, #4
	beq _020B08EC
	sub r7, r7, sb
	cmp r7, r4
	movlt r7, r4
	b _020B08F8
_020B08EC:
	add r7, r7, sb
	cmp r7, lr
	movgt r7, lr
_020B08F8:
	and sb, r8, #7
	ldr r8, _020B0B60 @ =0x02108FEC
	ldrsb r8, [r8, sb]
	adds r6, r6, r8
	movmi r6, #0
	bmi _020B0918
	cmp r6, #0x58
	movgt r6, #0x58
_020B0918:
	lsl r7, r7, #0x10
	asr r7, r7, #0x10
	strh r7, [r3]
	strb r6, [r3, #2]
	strh r7, [r1, #6]
	ldrb r6, [r3, #2]
	asr r8, r2, #1
	tst r8, #2
	lsl sb, r6, #1
	ldrsh sl, [r5, sb]
	ldrsh r7, [r3]
	asr sb, sl, #2
	addne sb, sb, sl
	tst r8, #1
	addne sb, sb, sl, asr #1
	tst r8, #4
	beq _020B096C
	sub r7, r7, sb
	cmp r7, r4
	movlt r7, r4
	b _020B0978
_020B096C:
	add r7, r7, sb
	cmp r7, lr
	movgt r7, lr
_020B0978:
	and sb, r8, #7
	ldr r8, _020B0B60 @ =0x02108FEC
	ldrsb r8, [r8, sb]
	adds r6, r6, r8
	movmi r6, #0
	bmi _020B0998
	cmp r6, #0x58
	movgt r6, #0x58
_020B0998:
	lsl r7, r7, #0x10
	asr r8, r7, #0x10
	strh r8, [r3]
	lsl r2, r2, #2
	strb r6, [r3, #2]
	and r2, r2, #7
	strh r8, [r1, #8]
	orr r7, r2, ip, asr #6
	ldrb r2, [r3, #2]
	tst r7, #2
	ldrsh r6, [r3]
	lsl r8, r2, #1
	ldrsh sb, [r5, r8]
	asr r8, sb, #2
	addne r8, r8, sb
	tst r7, #1
	addne r8, r8, sb, asr #1
	tst r7, #4
	beq _020B09F4
	sub r6, r6, r8
	cmp r6, r4
	movlt r6, r4
	b _020B0A00
_020B09F4:
	add r6, r6, r8
	cmp r6, lr
	movgt r6, lr
_020B0A00:
	ldr r8, _020B0B60 @ =0x02108FEC
	ldrsb r7, [r8, r7]
	adds r2, r2, r7
	movmi r2, #0
	bmi _020B0A1C
	cmp r2, #0x58
	movgt r2, #0x58
_020B0A1C:
	lsl r6, r6, #0x10
	asr r6, r6, #0x10
	strh r6, [r3]
	strb r2, [r3, #2]
	strh r6, [r1, #0xa]
	ldrb r2, [r3, #2]
	asr sb, ip, #3
	tst sb, #2
	lsl r7, r2, #1
	ldrsh r8, [r5, r7]
	ldrsh r6, [r3]
	asr r7, r8, #2
	addne r7, r7, r8
	tst sb, #1
	addne r7, r7, r8, asr #1
	tst sb, #4
	beq _020B0A70
	sub r6, r6, r7
	cmp r6, r4
	movlt r6, r4
	b _020B0A7C
_020B0A70:
	add r6, r6, r7
	cmp r6, lr
	movgt r6, lr
_020B0A7C:
	ldr r7, _020B0B60 @ =0x02108FEC
	and r8, sb, #7
	ldrsb r7, [r7, r8]
	adds r2, r2, r7
	movmi r2, #0
	bmi _020B0A9C
	cmp r2, #0x58
	movgt r2, #0x58
_020B0A9C:
	lsl r6, r6, #0x10
	asr r6, r6, #0x10
	strh r6, [r3]
	strb r2, [r3, #2]
	strh r6, [r1, #0xc]
	ldrb r2, [r3, #2]
	tst ip, #2
	ldrsh r6, [r3]
	lsl r7, r2, #1
	ldrsh r8, [r5, r7]
	asr r7, r8, #2
	addne r7, r7, r8
	tst ip, #1
	addne r7, r7, r8, asr #1
	tst ip, #4
	beq _020B0AEC
	sub r6, r6, r7
	cmp r6, r4
	movlt r6, r4
	b _020B0AF8
_020B0AEC:
	add r6, r6, r7
	cmp r6, lr
	movgt r6, lr
_020B0AF8:
	ldr r7, _020B0B60 @ =0x02108FEC
	and r8, ip, #7
	ldrsb r7, [r7, r8]
	adds r2, r2, r7
	movmi r2, #0
	bmi _020B0B18
	cmp r2, #0x58
	movgt r2, #0x58
_020B0B18:
	lsl r6, r6, #0x10
	asr r6, r6, #0x10
	strh r6, [r3]
	strb r2, [r3, #2]
	ldr r2, [sp, #0xc]
	strh r6, [r1, #0xe]
	add r6, r2, #1
	ldr r2, [sp]
	add r0, r0, #3
	add r1, r1, #0x10
	str r6, [sp, #0xc]
	cmp r6, r2
	blo _020B0708
	add sp, sp, #0x10
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020B0B54: .4byte 0xAAAAAAAB
_020B0B58: .4byte 0x00007FFF
_020B0B5C: .4byte 0x02109004
_020B0B60: .4byte 0x02108FEC
	arm_func_end FUN_020B06D0

	arm_func_start FUN_020B0B64
FUN_020B0B64: @ 0x020B0B64
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #8
	lsrs r2, r2, #3
	str r2, [sp]
	mov r2, #0
	str r2, [sp, #4]
	addeq sp, sp, #8
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r6, #0x8000
	rsb r6, r6, #0
	ldr r7, _020B1068 @ =0x02109004
	ldr r4, _020B106C @ =0x02108FEC
	lsr r5, r6, #0x11
_020B0B98:
	ldrsh r2, [r3]
	ldrsh sb, [r1]
	ldrb r8, [r3, #2]
	subs fp, sb, r2
	lsl sb, r8, #1
	movmi sl, #4
	ldrsh sb, [r7, sb]
	rsbmi fp, fp, #0
	movpl sl, #0
	cmp fp, sb
	orrge sl, sl, #2
	subge fp, fp, sb
	cmp fp, sb, asr #1
	orrge sl, sl, #1
	asr fp, sb, #2
	tst sl, #2
	addne fp, fp, sb
	tst sl, #1
	addne fp, fp, sb, asr #1
	tst sl, #4
	rsbne fp, fp, #0
	add sb, r2, fp
	cmp sb, r6
	movlt sb, r6
	cmp sb, r6, lsr #17
	ldrsb r2, [r4, sl]
	movgt sb, r5
	adds r8, r8, r2
	movmi r8, #0
	bmi _020B0C18
	cmp r8, #0x58
	movgt r8, #0x58
_020B0C18:
	strh sb, [r3]
	strb r8, [r3, #2]
	and r2, sl, #0xff
	and sb, r8, #0xff
	lsl fp, sb, #1
	ldrsh sl, [r3]
	ldrsh r8, [r1, #2]
	ldrsh fp, [r7, fp]
	lsl r2, r2, #5
	subs ip, r8, sl
	movmi r8, #4
	rsbmi ip, ip, #0
	movpl r8, #0
	cmp ip, fp
	orrge r8, r8, #2
	subge ip, ip, fp
	cmp ip, fp, asr #1
	orrge r8, r8, #1
	asr ip, fp, #2
	tst r8, #2
	addne ip, ip, fp
	tst r8, #1
	addne ip, ip, fp, asr #1
	tst r8, #4
	rsbne ip, ip, #0
	add fp, sl, ip
	cmp fp, r6
	movlt fp, r6
	cmp fp, r6, lsr #17
	ldrsb sl, [r4, r8]
	movgt fp, r5
	and r2, r2, #0xff
	adds sb, sb, sl
	movmi sb, #0
	bmi _020B0CAC
	cmp sb, #0x58
	movgt sb, #0x58
_020B0CAC:
	strh fp, [r3]
	strb sb, [r3, #2]
	and r8, r8, #0xff
	orr r2, r2, r8, lsl #2
	and sb, sb, #0xff
	lsl fp, sb, #1
	ldrsh sl, [r3]
	ldrsh r8, [r1, #4]
	ldrsh fp, [r7, fp]
	and r2, r2, #0xff
	subs ip, r8, sl
	movmi r8, #4
	rsbmi ip, ip, #0
	movpl r8, #0
	cmp ip, fp
	orrge r8, r8, #2
	subge ip, ip, fp
	cmp ip, fp, asr #1
	orrge r8, r8, #1
	asr ip, fp, #2
	tst r8, #2
	addne ip, ip, fp
	tst r8, #1
	addne ip, ip, fp, asr #1
	tst r8, #4
	rsbne ip, ip, #0
	add fp, sl, ip
	cmp fp, r6
	movlt fp, r6
	cmp fp, r6, lsr #17
	ldrsb sl, [r4, r8]
	movgt fp, r5
	adds sb, sb, sl
	movmi sb, #0
	bmi _020B0D40
	cmp sb, #0x58
	movgt sb, #0x58
_020B0D40:
	strh fp, [r3]
	and lr, r8, #0xff
	strb sb, [r3, #2]
	orr r2, r2, lr, asr #1
	strb r2, [r0]
	ldrb sb, [r3, #2]
	ldrsh r8, [r3]
	ldrsh r2, [r1, #6]
	lsl sl, sb, #1
	ldrsh sl, [r7, sl]
	subs fp, r2, r8
	movmi r2, #4
	rsbmi fp, fp, #0
	movpl r2, #0
	cmp fp, sl
	orrge r2, r2, #2
	subge fp, fp, sl
	cmp fp, sl, asr #1
	orrge r2, r2, #1
	asr fp, sl, #2
	tst r2, #2
	addne fp, fp, sl
	tst r2, #1
	addne fp, fp, sl, asr #1
	tst r2, #4
	rsbne fp, fp, #0
	add sl, r8, fp
	cmp sl, r6
	movlt sl, r6
	cmp sl, r6, lsr #17
	ldrsb r8, [r4, r2]
	movgt sl, r5
	adds sb, sb, r8
	movmi sb, #0
	bmi _020B0DD4
	cmp sb, #0x58
	movgt sb, #0x58
_020B0DD4:
	strh sl, [r3]
	and r2, r2, #0xff
	lsl r2, r2, #4
	strb sb, [r3, #2]
	and r8, r2, #0xff
	and ip, sb, #0xff
	ldrsh r2, [r3]
	ldrsh sb, [r1, #8]
	subs fp, sb, r2
	lsl sb, ip, #1
	movmi sl, #4
	ldrsh sb, [r7, sb]
	rsbmi fp, fp, #0
	movpl sl, #0
	cmp fp, sb
	orrge sl, sl, #2
	subge fp, fp, sb
	cmp fp, sb, asr #1
	orrge sl, sl, #1
	asr fp, sb, #2
	tst sl, #2
	addne fp, fp, sb
	tst sl, #1
	addne fp, fp, sb, asr #1
	tst sl, #4
	rsbne fp, fp, #0
	add sb, r2, fp
	cmp sb, r6
	movlt sb, r6
	cmp sb, r6, lsr #17
	ldrsb r2, [r4, sl]
	movgt sb, r5
	adds ip, ip, r2
	movmi ip, #0
	bmi _020B0E68
	cmp ip, #0x58
	movgt ip, #0x58
_020B0E68:
	strh sb, [r3]
	strb ip, [r3, #2]
	and r2, sl, #0xff
	orr r2, r8, r2, lsl #1
	and r8, r2, #0xff
	ldrsh r2, [r3]
	ldrsh sb, [r1, #0xa]
	and ip, ip, #0xff
	subs fp, sb, r2
	lsl sb, ip, #1
	movmi sl, #4
	ldrsh sb, [r7, sb]
	rsbmi fp, fp, #0
	movpl sl, #0
	cmp fp, sb
	orrge sl, sl, #2
	subge fp, fp, sb
	cmp fp, sb, asr #1
	orrge sl, sl, #1
	asr fp, sb, #2
	tst sl, #2
	addne fp, fp, sb
	tst sl, #1
	addne fp, fp, sb, asr #1
	tst sl, #4
	rsbne fp, fp, #0
	add r2, r2, fp
	cmp r2, r6
	movlt r2, r6
	cmp r2, r6, lsr #17
	ldrsb sb, [r4, sl]
	movgt r2, r5
	adds ip, ip, sb
	movmi ip, #0
	bmi _020B0EFC
	cmp ip, #0x58
	movgt ip, #0x58
_020B0EFC:
	strh r2, [r3]
	orr r8, r8, lr, lsl #7
	and r2, sl, #0xff
	strb ip, [r3, #2]
	orr r8, r8, r2, asr #2
	strb r8, [r0, #1]
	ldrb sb, [r3, #2]
	ldrsh sl, [r3]
	ldrsh r8, [r1, #0xc]
	lsl fp, sb, #1
	ldrsh fp, [r7, fp]
	subs ip, r8, sl
	movmi r8, #4
	rsbmi ip, ip, #0
	movpl r8, #0
	cmp ip, fp
	orrge r8, r8, #2
	subge ip, ip, fp
	cmp ip, fp, asr #1
	orrge r8, r8, #1
	asr ip, fp, #2
	tst r8, #2
	addne ip, ip, fp
	tst r8, #1
	addne ip, ip, fp, asr #1
	tst r8, #4
	rsbne ip, ip, #0
	add fp, sl, ip
	cmp fp, r6
	movlt fp, r6
	cmp fp, r6, lsr #17
	ldrsb sl, [r4, r8]
	movgt fp, r5
	adds sb, sb, sl
	movmi sb, #0
	bmi _020B0F94
	cmp sb, #0x58
	movgt sb, #0x58
_020B0F94:
	strh fp, [r3]
	and r8, r8, #0xff
	lsl r8, r8, #3
	strb sb, [r3, #2]
	and ip, r8, #0xff
	and sl, sb, #0xff
	ldrsh r8, [r1, #0xe]
	ldrsh fp, [r3]
	lsl lr, sl, #1
	ldrsh lr, [r7, lr]
	subs sb, r8, fp
	movmi r8, #4
	rsbmi sb, sb, #0
	movpl r8, #0
	cmp sb, lr
	orrge r8, r8, #2
	subge sb, sb, lr
	cmp sb, lr, asr #1
	orrge r8, r8, #1
	asr sb, lr, #2
	tst r8, #2
	addne sb, sb, lr
	tst r8, #1
	addne sb, sb, lr, asr #1
	tst r8, #4
	rsbne sb, sb, #0
	add fp, fp, sb
	cmp fp, r6
	movlt fp, r6
	cmp fp, r6, lsr #17
	ldrsb sb, [r4, r8]
	movgt fp, r5
	add r1, r1, #0x10
	adds sl, sl, sb
	movmi sl, #0
	bmi _020B102C
	cmp sl, #0x58
	movgt sl, #0x58
_020B102C:
	and r8, r8, #0xff
	strh fp, [r3]
	orr r8, ip, r8
	strb sl, [r3, #2]
	orr r2, r8, r2, lsl #6
	strb r2, [r0, #2]
	ldr r2, [sp, #4]
	add r0, r0, #3
	add r8, r2, #1
	ldr r2, [sp]
	str r8, [sp, #4]
	cmp r8, r2
	blo _020B0B98
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020B1068: .4byte 0x02109004
_020B106C: .4byte 0x02108FEC
	arm_func_end FUN_020B0B64

	arm_func_start FUN_020B1070
FUN_020B1070: @ 0x020B1070
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov r7, #0
	cmp r2, #0
	popls {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r4, #0x8000
	ldr lr, _020B127C @ =0x00007FFF
	ldr ip, _020B1280 @ =0x02108FE8
	ldr r6, _020B1284 @ =0x02109004
	rsb r4, r4, #0
	mov r5, r7
_020B1098:
	ldrb sl, [r0]
	ldrb r8, [r3, #2]
	ldrsh sb, [r3]
	and fp, sl, #3
	lsl sl, r8, #1
	ldrsh sl, [r6, sl]
	tst fp, #1
	moveq sl, r5
	tst fp, #2
	beq _020B10D0
	sub sb, sb, sl
	cmp sb, r4
	movlt sb, r4
	b _020B10DC
_020B10D0:
	add sb, sb, sl
	cmp sb, lr
	movgt sb, lr
_020B10DC:
	ldrsb sl, [ip, fp]
	adds r8, r8, sl
	movmi r8, #0
	bmi _020B10F4
	cmp r8, #0x58
	movgt r8, #0x58
_020B10F4:
	lsl sb, sb, #0x10
	asr sb, sb, #0x10
	strh sb, [r3]
	strb r8, [r3, #2]
	strh sb, [r1]
	ldrb sl, [r0]
	ldrb r8, [r3, #2]
	ldrsh sb, [r3]
	asr sl, sl, #2
	and fp, sl, #3
	lsl sl, r8, #1
	ldrsh sl, [r6, sl]
	tst fp, #1
	moveq sl, #0
	tst fp, #2
	beq _020B1144
	sub sb, sb, sl
	cmp sb, r4
	movlt sb, r4
	b _020B1150
_020B1144:
	add sb, sb, sl
	cmp sb, lr
	movgt sb, lr
_020B1150:
	ldrsb sl, [ip, fp]
	adds r8, r8, sl
	movmi r8, #0
	bmi _020B1168
	cmp r8, #0x58
	movgt r8, #0x58
_020B1168:
	lsl sb, sb, #0x10
	asr sb, sb, #0x10
	strh sb, [r3]
	strb r8, [r3, #2]
	strh sb, [r1, #2]
	ldrb sl, [r0]
	ldrb r8, [r3, #2]
	ldrsh sb, [r3]
	asr sl, sl, #4
	and fp, sl, #3
	lsl sl, r8, #1
	ldrsh sl, [r6, sl]
	tst fp, #1
	moveq sl, #0
	tst fp, #2
	beq _020B11B8
	sub sb, sb, sl
	cmp sb, r4
	movlt sb, r4
	b _020B11C4
_020B11B8:
	add sb, sb, sl
	cmp sb, lr
	movgt sb, lr
_020B11C4:
	ldrsb sl, [ip, fp]
	adds r8, r8, sl
	movmi r8, #0
	bmi _020B11DC
	cmp r8, #0x58
	movgt r8, #0x58
_020B11DC:
	lsl sb, sb, #0x10
	asr sb, sb, #0x10
	strh sb, [r3]
	strb r8, [r3, #2]
	strh sb, [r1, #4]
	ldrb sl, [r0]
	ldrb r8, [r3, #2]
	ldrsh sb, [r3]
	asr sl, sl, #6
	and fp, sl, #3
	lsl sl, r8, #1
	ldrsh sl, [r6, sl]
	tst fp, #1
	moveq sl, #0
	tst fp, #2
	beq _020B122C
	sub sb, sb, sl
	cmp sb, r4
	movlt sb, r4
	b _020B1238
_020B122C:
	add sb, sb, sl
	cmp sb, lr
	movgt sb, lr
_020B1238:
	ldrsb sl, [ip, fp]
	adds r8, r8, sl
	movmi r8, #0
	bmi _020B1250
	cmp r8, #0x58
	movgt r8, #0x58
_020B1250:
	lsl sb, sb, #0x10
	asr sb, sb, #0x10
	strh sb, [r3]
	strb r8, [r3, #2]
	add r7, r7, #1
	strh sb, [r1, #6]
	add r1, r1, #8
	add r0, r0, #1
	cmp r7, r2
	blo _020B1098
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020B127C: .4byte 0x00007FFF
_020B1280: .4byte 0x02108FE8
_020B1284: .4byte 0x02109004
	arm_func_end FUN_020B1070

	arm_func_start FUN_020B1288
FUN_020B1288: @ 0x020B1288
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	lsrs r2, r2, #2
	mov fp, #0
	str r2, [sp]
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r4, #0x8000
	rsb r4, r4, #0
	ldr r5, _020B14B0 @ =0x02109004
	ldr ip, _020B14B4 @ =0x02108FE8
	lsr lr, r4, #0x11
_020B12B0:
	ldrb r7, [r3, #2]
	ldrsh r6, [r3]
	ldrsh r2, [r1]
	lsl r8, r7, #1
	ldrsh r8, [r5, r8]
	subs sb, r2, r6
	movmi r2, #2
	rsbmi sb, sb, #0
	movpl r2, #0
	cmp sb, r8
	orrge r2, r2, #1
	tst r2, #1
	moveq r8, #0
	tst r2, #2
	rsbne r8, r8, #0
	add r8, r6, r8
	cmp r8, r4
	movlt r8, r4
	cmp r8, r4, lsr #17
	ldrsb r6, [ip, r2]
	movgt r8, lr
	adds r7, r7, r6
	movmi r7, #0
	bmi _020B1318
	cmp r7, #0x58
	movgt r7, #0x58
_020B1318:
	strh r8, [r3]
	strb r7, [r3, #2]
	and r6, r2, #0xff
	ldrsh sl, [r3]
	ldrsh r2, [r1, #2]
	and sb, r7, #0xff
	subs r8, r2, sl
	lsl r2, sb, #1
	movmi r7, #2
	ldrsh r2, [r5, r2]
	rsbmi r8, r8, #0
	movpl r7, #0
	cmp r8, r2
	orrge r7, r7, #1
	tst r7, #1
	moveq r2, #0
	tst r7, #2
	rsbne r2, r2, #0
	add r8, sl, r2
	cmp r8, r4
	movlt r8, r4
	cmp r8, r4, lsr #17
	ldrsb r2, [ip, r7]
	movgt r8, lr
	adds sb, sb, r2
	movmi sb, #0
	bmi _020B138C
	cmp sb, #0x58
	movgt sb, #0x58
_020B138C:
	strh r8, [r3]
	strb sb, [r3, #2]
	and r2, r7, #0xff
	orr r2, r6, r2, lsl #2
	and r6, r2, #0xff
	ldrsh sl, [r3]
	ldrsh r2, [r1, #4]
	and sb, sb, #0xff
	subs r8, r2, sl
	lsl r2, sb, #1
	movmi r7, #2
	ldrsh r2, [r5, r2]
	rsbmi r8, r8, #0
	movpl r7, #0
	cmp r8, r2
	orrge r7, r7, #1
	tst r7, #1
	moveq r2, #0
	tst r7, #2
	rsbne r2, r2, #0
	add r8, sl, r2
	cmp r8, r4
	movlt r8, r4
	cmp r8, r4, lsr #17
	ldrsb r2, [ip, r7]
	movgt r8, lr
	adds sb, sb, r2
	movmi sb, #0
	bmi _020B1408
	cmp sb, #0x58
	movgt sb, #0x58
_020B1408:
	strh r8, [r3]
	strb sb, [r3, #2]
	and r2, r7, #0xff
	orr r2, r6, r2, lsl #4
	and r6, r2, #0xff
	ldrsh r2, [r1, #6]
	ldrsh sl, [r3]
	and sb, sb, #0xff
	add r1, r1, #8
	subs r8, r2, sl
	lsl r2, sb, #1
	movmi r7, #2
	ldrsh r2, [r5, r2]
	rsbmi r8, r8, #0
	movpl r7, #0
	cmp r8, r2
	orrge r7, r7, #1
	tst r7, #1
	moveq r2, #0
	tst r7, #2
	rsbne r2, r2, #0
	add r8, sl, r2
	cmp r8, r4
	movlt r8, r4
	cmp r8, r4, lsr #17
	ldrsb r2, [ip, r7]
	movgt r8, lr
	adds sb, sb, r2
	movmi sb, #0
	bmi _020B1488
	cmp sb, #0x58
	movgt sb, #0x58
_020B1488:
	strh r8, [r3]
	and r2, r7, #0xff
	strb sb, [r3, #2]
	orr r2, r6, r2, lsl #6
	strb r2, [r0], #1
	ldr r2, [sp]
	add fp, fp, #1
	cmp fp, r2
	blo _020B12B0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020B14B0: .4byte 0x02109004
_020B14B4: .4byte 0x02108FE8
	arm_func_end FUN_020B1288

	arm_func_start FUN_020B14B8
FUN_020B14B8: @ 0x020B14B8
	push {r3, lr}
	ldrsh ip, [r0]
	cmp r3, #2
	strh ip, [sp]
	ldrb ip, [r0, #2]
	strb ip, [sp, #2]
	beq _020B14E8
	cmp r3, #3
	beq _020B14FC
	cmp r3, #4
	beq _020B1510
	pop {r3, pc}
_020B14E8:
	add r3, sp, #0
	add r0, r0, #4
	sub r2, r2, #4
	bl FUN_020B1070
	pop {r3, pc}
_020B14FC:
	add r3, sp, #0
	add r0, r0, #4
	sub r2, r2, #4
	bl FUN_020B06D0
	pop {r3, pc}
_020B1510:
	add r3, sp, #0
	add r0, r0, #4
	sub r2, r2, #4
	bl FUN_020B03F0
	pop {r3, pc}
	arm_func_end FUN_020B14B8

	arm_func_start FUN_020B1524
FUN_020B1524: @ 0x020B1524
	push {r4, lr}
	ldrsh r4, [r3]
	ldr ip, [sp, #8]
	mov lr, #0
	strh r4, [r0]
	ldrb r4, [r3, #2]
	cmp ip, #2
	strb r4, [r0, #2]
	strb lr, [r0, #3]
	beq _020B1560
	cmp ip, #3
	beq _020B156C
	cmp ip, #4
	beq _020B1578
	pop {r4, pc}
_020B1560:
	add r0, r0, #4
	bl FUN_020B1288
	pop {r4, pc}
_020B156C:
	add r0, r0, #4
	bl FUN_020B0B64
	pop {r4, pc}
_020B1578:
	add r0, r0, #4
	bl FUN_020B0544
	pop {r4, pc}
	arm_func_end FUN_020B1524

	arm_func_start FUN_020B1584
FUN_020B1584: @ 0x020B1584
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	bl FUN_020D3550
	ldr r2, _020B1668 @ =0x021D6040
	ldr r1, _020B166C @ =_021108D8
	mov r3, #1
	str r3, [r1]
	strh r0, [r2]
	mov r1, #0
	str r1, [r2, #0x20]
	ldr r0, _020B1670 @ =0x021D8498
	str r1, [r2, #4]
	ldr r0, [r0, #0x10]
	ldr r3, _020B1674 @ =0x021090B8
	cmp r0, #1
	streq r1, [r2, #0x1c]
	movne r0, #4
	strne r0, [r2, #0x1c]
	ldr r1, _020B1668 @ =0x021D6040
	mov r0, #0x440
	str r0, [r1, #0x24]
	ldr r5, [r1, #0x1c]
	mov r0, #0x44
	add r2, r3, r5, lsl #1
	ldrb r4, [r2, #1]
	ldrb r3, [r3, r5, lsl #1]
	mov r2, #0
	mla r0, r3, r0, r4
	add r0, r0, #0xc
	str r0, [r1, #0xc]
	str r2, [r1, #0xf00]
	str r2, [r1, #0xf04]
	str r2, [r1, #0xf0c]
	str r2, [r1, #0xf08]
	str r2, [r1, #0xf10]
	str r2, [r1, #0xf14]
	bl FUN_020B43A8
	mov sb, #0
	mov r8, sb
	ldr r7, _020B1678 @ =0x021D606C
	ldr r6, _020B167C @ =0x021D6078
	mvn r5, #0
	mov r4, #0x94
	b _020B1650
_020B1630:
	mov r0, sb
	str r8, [r7, sb, lsl #2]
	bl FUN_020B27E0
	mla r0, sb, r4, r6
	mov r1, sb
	mov r2, r5
	bl FUN_020B2AC0
	add sb, sb, #1
_020B1650:
	cmp sb, #3
	blo _020B1630
	bl FUN_020B23F0
	bl FUN_020B44BC
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0
_020B1668: .4byte 0x021D6040
_020B166C: .4byte _021108D8
_020B1670: .4byte 0x021D8498
_020B1674: .4byte 0x021090B8
_020B1678: .4byte 0x021D606C
_020B167C: .4byte 0x021D6078
	arm_func_end FUN_020B1584

	arm_func_start FUN_020B1680
FUN_020B1680: @ 0x020B1680
	ldr r0, _020B1690 @ =0x021D6040
	mov r1, #0
	str r1, [r0, #0x20]
	bx lr
	.align 2, 0
_020B1690: .4byte 0x021D6040
	arm_func_end FUN_020B1680

	arm_func_start FUN_020B1694
FUN_020B1694: @ 0x020B1694
	push {r3, r4, r5, lr}
	movs r5, r0
	moveq r0, #0
	popeq {r3, r4, r5, pc}
	ldr r0, _020B17C0 @ =0x021D6040
	ldr r0, [r0, #0x20]
	cmp r0, #3
	moveq r0, #0
	popeq {r3, r4, r5, pc}
	ldr r0, [r5, #0xc]
	cmp r0, #2
	cmpne r0, #3
	movne r0, #0
	popne {r3, r4, r5, pc}
	mov r4, #0
	ldr r1, _020B17C4 @ =0x021D606C
	b _020B16EC
_020B16D8:
	ldr r0, [r1, r4, lsl #2]
	cmp r0, r5
	moveq r0, #1
	popeq {r3, r4, r5, pc}
	add r4, r4, #1
_020B16EC:
	cmp r4, #3
	blo _020B16D8
	mov r4, #0
	ldr r1, _020B17C4 @ =0x021D606C
	b _020B1714
_020B1700:
	ldr r0, [r1, r4, lsl #2]
	cmp r0, #0
	streq r5, [r1, r4, lsl #2]
	beq _020B171C
	add r4, r4, #1
_020B1714:
	cmp r4, #3
	blo _020B1700
_020B171C:
	ldr r1, _020B17C0 @ =0x021D6040
	ldr r2, _020B17C8 @ =0x021D6078
	ldr r3, [r1, #0x20]
	mov r0, #0x94
	add r3, r3, #1
	str r3, [r1, #0x20]
	ldr ip, [r1, #4]
	ldr r3, [r5, #8]
	mla r0, r4, r0, r2
	orr r2, ip, r3
	str r2, [r1, #4]
	ldrb r2, [r5, #5]
	mov r1, r4
	bl FUN_020B2AC0
	mov r0, r4
	bl FUN_020B27E0
	ldr r0, [r5, #0xc]
	cmp r0, #2
	movne r0, #1
	popne {r3, r4, r5, pc}
	ldr r0, _020B17C0 @ =0x021D6040
	ldr r0, [r0, #0x20]
	cmp r0, #1
	bne _020B17B8
	bl FUN_020B415C
	bl FUN_020D3550
	ldr r1, _020B17C0 @ =0x021D6040
	mov r2, #0
	strh r0, [r1]
	strh r2, [r1, #0x10]
	strb r2, [r1, #0x12]
	mov r0, #1
	str r0, [r1, #0x14]
	str r2, [r1, #0xf00]
	str r2, [r1, #0xf04]
	str r2, [r1, #0xf0c]
	str r2, [r1, #0xf08]
	str r2, [r1, #0xf10]
	str r2, [r1, #0xf14]
_020B17B8:
	mov r0, #1
	pop {r3, r4, r5, pc}
	.align 2, 0
_020B17C0: .4byte 0x021D6040
_020B17C4: .4byte 0x021D606C
_020B17C8: .4byte 0x021D6078
	arm_func_end FUN_020B1694

	arm_func_start FUN_020B17CC
FUN_020B17CC: @ 0x020B17CC
	push {r3, r4, r5, lr}
	ldr ip, _020B1874 @ =0x021D606C
	mov r5, r0
	mov r4, #0
_020B17DC:
	ldr r0, [ip, r4, lsl #2]
	cmp r0, r5
	bne _020B183C
	ldr r1, _020B1878 @ =0x021D6078
	mov r0, #0x94
	mla r0, r4, r0, r1
	ldr r1, _020B187C @ =0x021D6040
	mov r3, #0
	ldr r2, [r1, #0x20]
	str r3, [ip, r4, lsl #2]
	sub r2, r2, #1
	str r2, [r1, #0x20]
	bl FUN_020B2B4C
	mov r0, r4
	bl FUN_020B281C
	mov r0, r4
	bl FUN_020B2430
	ldr r0, _020B187C @ =0x021D6040
	ldr r1, [r5, #8]
	ldr r2, [r0, #4]
	mvn r1, r1
	and r1, r2, r1
	str r1, [r0, #4]
	b _020B1848
_020B183C:
	add r4, r4, #1
	cmp r4, #3
	blo _020B17DC
_020B1848:
	ldr r0, _020B187C @ =0x021D6040
	ldr r1, [r0, #0x20]
	cmp r1, #0
	popne {r3, r4, r5, pc}
	mov r1, #1
	str r1, [r0, #0x14]
	bl FUN_020B415C
	ldr r0, _020B187C @ =0x021D6040
	mov r1, #0
	str r1, [r0, #4]
	pop {r3, r4, r5, pc}
	.align 2, 0
_020B1874: .4byte 0x021D606C
_020B1878: .4byte 0x021D6078
_020B187C: .4byte 0x021D6040
	arm_func_end FUN_020B17CC

	arm_func_start FUN_020B1880
FUN_020B1880: @ 0x020B1880
	push {r4, lr}
	ldr r3, _020B1980 @ =0x021D6040
	mov r2, r1
	ldr r1, [r3, #0x24]
	mov ip, #0
	cmp r2, r1
	movne r0, ip
	popne {r4, pc}
	ldr r1, [r3, #0x20]
	cmp r1, #0
	moveq r0, ip
	popeq {r4, pc}
	mov r4, ip
	ldr r3, _020B1984 @ =0x021D606C
	b _020B18DC
_020B18BC:
	ldr r1, [r3, r4, lsl #2]
	cmp r1, #0
	beq _020B18D8
	ldr r1, [r1, #0xc]
	cmp r1, #2
	moveq ip, #1
	beq _020B18E4
_020B18D8:
	add r4, r4, #1
_020B18DC:
	cmp r4, #3
	blo _020B18BC
_020B18E4:
	cmp ip, #0
	moveq r0, #0
	popeq {r4, pc}
	ldr r1, _020B1980 @ =0x021D6040
	ldr ip, _020B1988 @ =0x021D6680
	ldr r1, [r1, #0xf04]
	ldr r3, _020B198C @ =0x5F564354
	tst r1, #1
	ldr r1, _020B1980 @ =0x021D6040
	movne r4, #0
	moveq r4, #0x460
	ldr r1, [r1, #0x1c]
	str r3, [ip, r4]
	cmp r1, #2
	add r4, ip, r4
	blt _020B1930
	add r1, r4, #0x10
	bl FUN_020D48B4
	b _020B1938
_020B1930:
	add r1, r4, #0xc
	bl FUN_020D48B4
_020B1938:
	ldr r0, _020B1980 @ =0x021D6040
	mov r1, #0x40
	ldrh r2, [r0]
	strb r1, [r4, #4]
	add r1, r2, #1
	strh r1, [r0]
	strh r2, [r4, #6]
	bl FUN_020D34B0
	mov r2, #0x40
	mov r3, #0
	bl FUN_020F2900
	str r0, [r4, #8]
	ldr r1, _020B1980 @ =0x021D6040
	mov r0, #1
	ldr r2, [r1, #0xf04]
	add r2, r2, #1
	str r2, [r1, #0xf04]
	pop {r4, pc}
	.align 2, 0
_020B1980: .4byte 0x021D6040
_020B1984: .4byte 0x021D606C
_020B1988: .4byte 0x021D6680
_020B198C: .4byte 0x5F564354
	arm_func_end FUN_020B1880

	arm_func_start FUN_020B1990
FUN_020B1990: @ 0x020B1990
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #8
	ldr r4, _020B1BD4 @ =0x021D6078
	mov sl, r2
	mov r2, #0x94
	mla r6, sl, r2, r4
	str r0, [sp]
	mov r0, sl
	str r1, [sp, #4]
	mov fp, r3
	mov r7, #1
	bl FUN_020B2AB0
	movs r4, r0
	beq _020B1BB0
_020B19C8:
	bl FUN_020D34B0
	mov r8, r0
	mov r0, sl
	mov sb, r1
	bl FUN_020B2A0C
	movs r5, r0
	beq _020B1B98
	ldr r1, [r5, #0x46c]
	adds r3, r8, #0x34
	ldr r0, [r5, #0x470]
	adc r2, sb, #0
	cmp r0, r2
	cmpeq r1, r3
	bls _020B1A7C
	ldr r0, [r5, #0x45c]
	cmp r0, #0
	bne _020B1A70
	ldr r0, [r6, #0x3c]
	cmp r0, #0
	beq _020B1A70
	ldr r0, [r6, #0x20]
	ldr r1, [sp]
	add r0, r0, #1
	str r0, [r6, #0x20]
	ldr r0, [r6, #0x3c]
	ldr r2, [sp, #4]
	ldr r0, [r0, #0x474]
	bl FUN_020D48B4
	ldr r0, [r6, #0x3c]
	bl FUN_020B4128
	mov r0, #0
	str r0, [r6, #0x3c]
	cmp fp, #0
	beq _020B1A64
	ldrb r0, [r5, #0x10]
	ldr r2, [fp]
	mov r1, #1
	orr r0, r2, r1, lsl r0
	str r0, [fp]
_020B1A64:
	add sp, sp, #8
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020B1A70:
	add sp, sp, #8
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020B1A7C:
	ldr r2, _020B1BD8 @ =0x00008B4C
	adds r2, r1, r2
	adc r0, r0, #0
	cmp sb, r0
	cmpeq r8, r2
	bls _020B1ABC
	ldr r2, [r5, #0x18]
	mov r0, r6
	mov r1, r5
	str r2, [r6, #0x58]
	bl FUN_020B2B78
	mov r4, r0
	mov r0, sl
	bl FUN_020B2A0C
	mov r7, #0
	b _020B1BA8
_020B1ABC:
	ldr r1, [r6, #0x58]
	ldr r2, [r5, #0x18]
	add r0, r1, #1
	cmp r0, r2
	cmpne r1, #0
	beq _020B1AF0
	cmp r1, r2
	bhi _020B1AF0
	ldr r0, [r5, #0x45c]
	cmp r0, #0
	ldreq r0, [r6, #0x14]
	addeq r0, r0, #1
	streq r0, [r6, #0x14]
_020B1AF0:
	ldr r0, [r5, #0x18]
	cmp r7, #0
	str r0, [r6, #0x58]
	ldrne r0, [r6, #0x70]
	cmpne r0, #0
	beq _020B1B30
	mov r0, r6
	mov r1, r5
	bl FUN_020B2B78
	mov r4, r0
	mov r0, sl
	bl FUN_020B2A0C
	ldr r0, [r6, #0x70]
	sub r0, r0, #1
	str r0, [r6, #0x70]
	b _020B1BA8
_020B1B30:
	ldr r1, [r5, #0x464]
	ldr r0, [r6, #0x28]
	subs r1, r8, r1
	sub r0, r1, r0
	sub r0, r0, r1
	str r1, [r6, #0x28]
	add r0, r1, r0, lsr #4
	str r0, [r6, #0x2c]
	str r0, [r6]
	ldr r0, [r5, #0x474]
	ldr r1, [sp]
	ldr r2, [sp, #4]
	bl FUN_020D48B4
	mov r0, r6
	mov r1, r5
	bl FUN_020B2B78
	cmp fp, #0
	beq _020B1B8C
	ldrb r0, [r5, #0x10]
	ldr r2, [fp]
	mov r1, #1
	orr r0, r2, r1, lsl r0
	str r0, [fp]
_020B1B8C:
	add sp, sp, #8
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020B1B98:
	add sp, sp, #8
	str r4, [r6, #8]
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020B1BA8:
	cmp r4, #0
	bne _020B19C8
_020B1BB0:
	ldr r0, [r6, #0x3c]
	cmp r0, #0
	beq _020B1BC8
	bl FUN_020B4128
	mov r0, #0
	str r0, [r6, #0x3c]
_020B1BC8:
	mov r0, #0
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020B1BD4: .4byte 0x021D6078
_020B1BD8: .4byte 0x00008B4C
	arm_func_end FUN_020B1990

	arm_func_start FUN_020B1BDC
FUN_020B1BDC: @ 0x020B1BDC
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	movs r5, r2
	mov r7, r0
	movne r0, #0
	strne r0, [r5]
	ldr r0, _020B1CF0 @ =0x021D6040
	mov r6, r1
	ldr r1, [r0, #0x24]
	mov r4, #0
	cmp r6, r1
	bne _020B1CB8
	ldr r0, [r0, #0x20]
	cmp r0, #0
	beq _020B1CB8
	mov r8, r4
_020B1C18:
	mov r0, r7
	mov r1, r6
	mov r2, r8
	mov r3, r5
	bl FUN_020B1990
	cmp r0, #1
	moveq r4, #1
	beq _020B1C44
	add r8, r8, #1
	cmp r8, #3
	blo _020B1C18
_020B1C44:
	cmp r4, #0
	beq _020B1CA4
	add sb, r8, #1
	cmp sb, #3
	moveq r4, #1
	beq _020B1CCC
	bhs _020B1CCC
	ldr r8, _020B1CF4 @ =0x021D6234
_020B1C64:
	mov r0, r8
	mov r1, r6
	mov r2, sb
	mov r3, r5
	bl FUN_020B1990
	cmp r0, #1
	bne _020B1C94
	mov r0, r7
	mov r1, r8
	mov r2, r7
	mov r3, r6
	bl FUN_020B478C
_020B1C94:
	add sb, sb, #1
	cmp sb, #3
	blo _020B1C64
	b _020B1CCC
_020B1CA4:
	mov r1, r7
	mov r2, r6
	mov r0, #0
	bl FUN_020D4858
	b _020B1CCC
_020B1CB8:
	mov r1, r7
	mov r2, r6
	mov r0, #0
	bl FUN_020D4858
	mov r4, #0
_020B1CCC:
	ldr r0, _020B1CF0 @ =0x021D6040
	ldr r0, [r0, #0x18]
	cmp r0, #0
	beq _020B1CE8
	mov r0, r7
	mov r1, r6
	bl FUN_020B4538
_020B1CE8:
	mov r0, r4
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0
_020B1CF0: .4byte 0x021D6040
_020B1CF4: .4byte 0x021D6234
	arm_func_end FUN_020B1BDC

	arm_func_start FUN_020B1CF8
FUN_020B1CF8: @ 0x020B1CF8
	cmp r0, #5
	movge r0, #0
	bxge lr
	ldr r1, _020B1D5C @ =0x021D8498
	ldr r1, [r1, #0x10]
	cmp r1, #1
	beq _020B1D20
	cmp r0, #1
	movls r0, #0
	bxls lr
_020B1D20:
	ldr r2, _020B1D60 @ =0x021090B9
	ldr r1, _020B1D64 @ =0x021090B8
	ldrb ip, [r2, r0, lsl #1]
	ldrb r3, [r1, r0, lsl #1]
	mov r1, #0x44
	ldr r2, _020B1D68 @ =0x021D6040
	mla r1, r3, r1, ip
	add r1, r1, #0xc
	str r1, [r2, #0xc]
	str r0, [r2, #0x1c]
	mov r0, #0
	strh r0, [r2, #0x10]
	strb r0, [r2, #0x12]
	mov r0, #1
	bx lr
	.align 2, 0
_020B1D5C: .4byte 0x021D8498
_020B1D60: .4byte 0x021090B9
_020B1D64: .4byte 0x021090B8
_020B1D68: .4byte 0x021D6040
	arm_func_end FUN_020B1CF8

	arm_func_start FUN_020B1D6C
FUN_020B1D6C: @ 0x020B1D6C
	push {r4, lr}
	ldr r1, _020B1D94 @ =_021108D8
	mov r4, r0
	str r4, [r1]
	bl FUN_020B415C
	cmp r4, #0
	ldreq r0, _020B1D98 @ =0x021D6040
	moveq r1, #1
	streq r1, [r0, #8]
	pop {r4, pc}
	.align 2, 0
_020B1D94: .4byte _021108D8
_020B1D98: .4byte 0x021D6040
	arm_func_end FUN_020B1D6C

	arm_func_start FUN_020B1D9C
FUN_020B1D9C: @ 0x020B1D9C
	ldr r1, _020B1DA8 @ =0x021D6040
	str r0, [r1, #0x18]
	bx lr
	.align 2, 0
_020B1DA8: .4byte 0x021D6040
	arm_func_end FUN_020B1D9C

	arm_func_start FUN_020B1DAC
FUN_020B1DAC: @ 0x020B1DAC
	push {r3, r4, r5, r6, r7, r8, lr}
	sub sp, sp, #4
	ldr r0, _020B200C @ =0x021D6040
	ldr r2, [r0, #0xf04]
	ldr r1, [r0, #0xf00]
	ldr r8, [r0, #0x1c]
	sub r1, r2, r1
	cmp r1, #1
	subhi r1, r2, #1
	strhi r1, [r0, #0xf00]
	movhi r1, #1
	cmp r1, #0
	addeq sp, sp, #4
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, pc}
	ldr r0, _020B200C @ =0x021D6040
	ldr r0, [r0, #0xf00]
	tst r0, #1
	movne r1, #0
	moveq r1, #0x460
	ldr r0, _020B2010 @ =0x021D6680
	cmp r8, #2
	add r5, r0, r1
	ldr r1, _020B200C @ =0x021D6040
	add r4, r5, #0xc
	addge r4, r4, #4
	ldr r1, [r1, #0x24]
	mov r0, r4
	bl FUN_020B43D0
	ldr r1, _020B2014 @ =0x040002B0
	mov r2, #0
	mov r6, r0
	strh r2, [r1]
	str r6, [r1, #8]
_020B1E34:
	ldrh r0, [r1]
	tst r0, #0x8000
	bne _020B1E34
	ldr r0, _020B200C @ =0x021D6040
	ldr r2, _020B2018 @ =0x040002B4
	ldr r1, [r0, #0x18]
	ldr r7, [r2]
	cmp r1, #0
	beq _020B1E68
	ldr r1, [r0, #0x24]
	mov r0, r4
	mov r2, r7
	bl FUN_020B476C
_020B1E68:
	ldr r0, _020B201C @ =_021108D8
	strb r8, [r5, #5]
	ldr r0, [r0]
	cmp r0, #0
	beq _020B1ED8
	mov r0, r6
	mov r1, r7
	mov r2, #0
	bl FUN_020B41C8
	ldr r1, _020B200C @ =0x021D6040
	cmp r0, #0
	str r0, [r1, #0x28]
	beq _020B1EB4
	cmp r0, #1
	beq _020B1ECC
	cmp r0, #3
	moveq r0, #0x41
	strbeq r0, [r5, #4]
	b _020B1ED8
_020B1EB4:
	ldr r2, [r1, #0xf00]
	add sp, sp, #4
	add r2, r2, #1
	str r2, [r1, #0xf00]
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, pc}
_020B1ECC:
	ldrb r0, [r5, #5]
	orr r0, r0, #0x80
	strb r0, [r5, #5]
_020B1ED8:
	ldr r0, _020B201C @ =_021108D8
	ldr r0, [r0]
	cmp r0, #0
	bne _020B1F0C
	ldr r0, _020B200C @ =0x021D6040
	ldr r1, [r0, #8]
	cmp r1, #0
	beq _020B1F0C
	ldrb r2, [r5, #5]
	mov r1, #0
	str r1, [r0, #8]
	orr r0, r2, #0x80
	strb r0, [r5, #5]
_020B1F0C:
	ldr r0, _020B200C @ =0x021D6040
	ldr r1, [r0, #0x14]
	cmp r1, #0
	beq _020B1F30
	ldrb r2, [r5, #5]
	mov r1, #0
	str r1, [r0, #0x14]
	orr r0, r2, #0x80
	strb r0, [r5, #5]
_020B1F30:
	cmp r8, #2
	blt _020B1F78
	ldrb r0, [r5, #5]
	tst r0, #0x80
	beq _020B1F54
	ldr r0, _020B200C @ =0x021D6040
	mov r1, #0
	strh r1, [r0, #0x10]
	strb r1, [r0, #0x12]
_020B1F54:
	ldr r0, _020B200C @ =0x021D6040
	str r8, [sp]
	ldr r2, [r0, #0x24]
	ldr r3, _020B2020 @ =0x021D6050
	mov r1, r4
	sub r0, r4, #4
	lsr r2, r2, #1
	bl FUN_020B1524
	b _020B1FBC
_020B1F78:
	cmp r8, #1
	bne _020B1F9C
	ldr r1, _020B200C @ =0x021D6040
	mov r0, r4
	ldr r2, [r1, #0x24]
	mov r1, r4
	lsr r2, r2, #1
	bl FUN_020B2684
	b _020B1FBC
_020B1F9C:
	cmp r8, #0
	bne _020B1FBC
	ldr r1, _020B200C @ =0x021D6040
	mov r0, r4
	ldr r2, [r1, #0x24]
	mov r1, r4
	lsr r2, r2, #1
	bl FUN_020B2784
_020B1FBC:
	ldr r1, _020B200C @ =0x021D6040
	ldr r0, _020B2024 @ =0x021D8498
	ldr r3, [r1, #4]
	mov r2, #1
	str r3, [r1, #0xf0c]
	ldrb r0, [r0]
	mvn r0, r2, lsl r0
	and r0, r3, r0
	str r0, [r1, #0xf0c]
	bl FUN_020E3714
	sub r0, r0, #1
	ldr r1, _020B200C @ =0x021D6040
	cmp r0, #7
	str r0, [r1, #0xf14]
	movgt r0, #0
	movle r2, #0
	movle r0, r5
	strle r2, [r1, #0xf10]
	add sp, sp, #4
	pop {r3, r4, r5, r6, r7, r8, pc}
	.align 2, 0
_020B200C: .4byte 0x021D6040
_020B2010: .4byte 0x021D6680
_020B2014: .4byte 0x040002B0
_020B2018: .4byte 0x040002B4
_020B201C: .4byte _021108D8
_020B2020: .4byte 0x021D6050
_020B2024: .4byte 0x021D8498
	arm_func_end FUN_020B1DAC

	arm_func_start FUN_020B2028
FUN_020B2028: @ 0x020B2028
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	ldr r4, _020B2204 @ =0x021D6040
	mov sl, r0
	ldr r0, [r4, #0x20]
	ldr r7, [sp, #0x28]
	mov sb, r1
	mov r8, r2
	mov fp, r3
	mov r5, #0
	cmp r0, #0
	moveq r0, r5
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r1, _020B2208 @ =0x021D6078
	mov r2, r5
_020B2060:
	ldr r0, [r1, #0x38]
	cmp sl, r0
	bne _020B207C
	ldr r1, _020B2208 @ =0x021D6078
	mov r0, #0x94
	mla r5, r2, r0, r1
	b _020B208C
_020B207C:
	add r2, r2, #1
	cmp r2, #3
	add r1, r1, #0x94
	blo _020B2060
_020B208C:
	cmp r5, #0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldrb r0, [sb, #4]
	cmp r0, #0x41
	bne _020B20C0
	ldrh r2, [sb, #6]
	mov r0, #0
	mov r1, #1
	str r2, [r5, #0x30]
	str r0, [r5, #0x4c]
	str r1, [r5, #0x6c]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020B20C0:
	cmp r0, #0x40
	movne r0, #0
	popne {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldrb r0, [sb, #5]
	and r6, r0, #0x7f
	cmp r6, #5
	str r6, [r5, #0x24]
	movge r0, #0
	popge {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r1, _020B220C @ =0x021090B9
	ldr r0, _020B2210 @ =0x021090B8
	ldrb r2, [r1, r6, lsl #1]
	ldrb r1, [r0, r6, lsl #1]
	mov r0, #0x44
	mla r0, r1, r0, r2
	add r0, r0, #0xc
	cmp r8, r0
	movne r0, #0
	popne {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp sl, #0
	movne r0, #1
	lslne r1, r0, sl
	ldr r0, _020B2204 @ =0x021D6040
	moveq r1, #1
	ldr r0, [r0, #4]
	tst r0, r1
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	bl FUN_020B40F4
	movs r4, r0
	bne _020B2174
	ldr r0, [r5, #0x34]
	bl FUN_020B281C
	ldr r0, [r5, #0x34]
	bl FUN_020B2430
	bl FUN_020B40F4
	movs r4, r0
	bne _020B2168
	bl FUN_020B288C
	bl FUN_020B248C
	bl FUN_020B40F4
	mov r4, r0
_020B2168:
	cmp r4, #0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020B2174:
	add r0, r4, #0x5c
	add r0, r0, #0x400
	sub r2, r8, #0xc
	sub r1, r0, r2
	add r0, sb, #0xc
	str r1, [sp]
	bl FUN_020D4A50
	ldr r0, [r5, #0x34]
	sub r1, r8, #0xc
	strb r0, [r4, #0x11]
	ldr r0, [sp]
	str r6, [r4, #0xc]
	str r0, [r4, #0x474]
	str r1, [r4, #0x14]
	str fp, [r4, #0x464]
	str r7, [r4, #0x468]
	strb sl, [r4, #0x10]
	ldrb r2, [sb, #5]
	mov r0, r5
	mov r1, r4
	and r2, r2, #0x80
	str r2, [r4, #0x45c]
	ldr r2, [sb, #8]
	str r2, [r4, #0x460]
	ldrh r2, [sb, #6]
	str r2, [r4, #0x18]
	bl FUN_020B2C9C
	cmp r0, #0
	mov r0, r4
	bne _020B21F8
	bl FUN_020B4128
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020B21F8:
	bl FUN_020B24F8
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020B2204: .4byte 0x021D6040
_020B2208: .4byte 0x021D6078
_020B220C: .4byte 0x021090B9
_020B2210: .4byte 0x021090B8
	arm_func_end FUN_020B2028

	arm_func_start FUN_020B2214
FUN_020B2214: @ 0x020B2214
	push {r4, r5, r6, r7, r8, lr}
	bl FUN_020B2580
	movs r4, r0
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, pc}
	bl FUN_020D3A38
	ldrb r6, [r4, #0x11]
	mov r7, r0
	mov r0, r6
	bl FUN_020B2590
	mov r5, r0
	cmp r5, #0
	mov r4, #0
	ble _020B22D4
_020B224C:
	mov r0, r6
	bl FUN_020B25A0
	mov r8, r0
	ldr r3, [r8, #0xc]
	cmp r3, #2
	blt _020B2278
	ldr r0, [r8, #0x474]
	ldr r2, [r8, #0x14]
	add r1, r8, #0x1c
	bl FUN_020B14B8
	b _020B229C
_020B2278:
	cmp r3, #1
	ldr r0, [r8, #0x474]
	ldr r2, [r8, #0x14]
	bne _020B2294
	add r1, r8, #0x1c
	bl FUN_020B2730
	b _020B229C
_020B2294:
	add r1, r8, #0x1c
	bl FUN_020B27B0
_020B229C:
	add r1, r8, #0x1c
	mov r0, r8
	str r1, [r8, #0x474]
	bl FUN_020B25F0
	ldrb r1, [r8, #0x11]
	mov r0, r8
	bl FUN_020B290C
	cmp r0, #0
	bge _020B22C8
	mov r0, r8
	bl FUN_020B4128
_020B22C8:
	add r4, r4, #1
	cmp r4, r5
	blt _020B224C
_020B22D4:
	mov r0, r7
	bl FUN_020D3A4C
	mov r0, r5
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020B2214

	arm_func_start FUN_020B22E4
FUN_020B22E4: @ 0x020B22E4
	push {r3, r4, r5, r6, r7, lr}
	ldr r1, _020B23E4 @ =0x021D6040
	ldr r0, [r1, #0x20]
	cmp r0, #0
	moveq r0, #1
	popeq {r3, r4, r5, r6, r7, pc}
	ldr r0, [r1, #0xf08]
	cmp r0, #0
	bne _020B232C
	bl FUN_020B1DAC
	ldr r1, _020B23E4 @ =0x021D6040
	cmp r0, #0
	str r0, [r1, #0xf08]
	ldrne r0, [r1, #0x18]
	cmpne r0, #0
	movne r0, #0
	moveq r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_020B232C:
	ldr r0, _020B23E8 @ =0x021D8498
	mov r5, #1
	ldr r0, [r0, #0x10]
	cmp r0, #2
	bne _020B2360
	ldr r3, [r1, #0xf10]
	ldr r0, _020B23EC @ =0x021090C2
	add r2, r3, #1
	str r2, [r1, #0xf10]
	ldr r1, [r1, #0xf14]
	add r1, r1, r1, lsl #1
	add r0, r0, r1
	ldrb r5, [r3, r0]
_020B2360:
	mov r4, #0
	mov r7, #0x80000000
	ldr r6, _020B23E4 @ =0x021D6040
	b _020B23D4
_020B2370:
	ldr r1, [r6, #0xf0c]
	mov r2, r1
	clz r2, r2
	cmp r2, #0x20
	beq _020B23DC
	mvn r0, r7, lsr r2
	and r0, r1, r0
	str r0, [r6, #0xf0c]
	rsb r0, r2, #0x1f
	ldr r1, [r6, #0xf08]
	ldr r2, [r6, #0xc]
	and r0, r0, #0xff
	bl FUN_021F97C0
	ldr r0, [r6, #0xf0c]
	cmp r0, #0
	bne _020B23D0
	ldr r0, _020B23E4 @ =0x021D6040
	mov r1, #0
	ldr r2, [r0, #0xf00]
	add r2, r2, #1
	str r2, [r0, #0xf00]
	str r1, [r0, #0xf08]
	str r1, [r0, #0xf0c]
	b _020B23DC
_020B23D0:
	add r4, r4, #1
_020B23D4:
	cmp r4, r5
	blt _020B2370
_020B23DC:
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020B23E4: .4byte 0x021D6040
_020B23E8: .4byte 0x021D8498
_020B23EC: .4byte 0x021090C2
	arm_func_end FUN_020B22E4

	arm_func_start FUN_020B23F0
FUN_020B23F0: @ 0x020B23F0
	push {r3, lr}
	bl FUN_020D3A38
	mov r3, #0
	ldr r1, _020B2428 @ =0x021D6F58
	mov r2, r3
	str r3, [r1, #4]
	str r3, [r1]
	ldr r1, _020B242C @ =0x021D6F60
_020B2410:
	str r2, [r1, r3, lsl #2]
	add r3, r3, #1
	cmp r3, #3
	blt _020B2410
	bl FUN_020D3A4C
	pop {r3, pc}
	.align 2, 0
_020B2428: .4byte 0x021D6F58
_020B242C: .4byte 0x021D6F60
	arm_func_end FUN_020B23F0

	arm_func_start FUN_020B2430
FUN_020B2430: @ 0x020B2430
	push {r4, r5, r6, lr}
	mov r6, r0
	bl FUN_020D3A38
	mov r4, r0
	mov r0, r6
	bl FUN_020B25A0
	movs r5, r0
	beq _020B2470
_020B2450:
	mov r0, r5
	bl FUN_020B25F0
	mov r0, r5
	bl FUN_020B4128
	mov r0, r6
	bl FUN_020B25A0
	movs r5, r0
	bne _020B2450
_020B2470:
	ldr r1, _020B2488 @ =0x021D6F60
	mov r2, #0
	mov r0, r4
	str r2, [r1, r6, lsl #2]
	bl FUN_020D3A4C
	pop {r4, r5, r6, pc}
	.align 2, 0
_020B2488: .4byte 0x021D6F60
	arm_func_end FUN_020B2430

	arm_func_start FUN_020B248C
FUN_020B248C: @ 0x020B248C
	push {r3, r4, r5, lr}
	bl FUN_020D3A38
	ldr r1, _020B24F0 @ =0x021D6F58
	mov r4, r0
	ldr r5, [r1]
	cmp r5, #0
	beq _020B24BC
_020B24A8:
	mov r0, r5
	ldr r5, [r5, #8]
	bl FUN_020B4128
	cmp r5, #0
	bne _020B24A8
_020B24BC:
	ldr r0, _020B24F0 @ =0x021D6F58
	mov r2, #0
	str r2, [r0]
	str r2, [r0, #4]
	ldr r0, _020B24F4 @ =0x021D6F60
	mov r1, r2
_020B24D4:
	str r1, [r0, r2, lsl #2]
	add r2, r2, #1
	cmp r2, #3
	blt _020B24D4
	mov r0, r4
	bl FUN_020D3A4C
	pop {r3, r4, r5, pc}
	.align 2, 0
_020B24F0: .4byte 0x021D6F58
_020B24F4: .4byte 0x021D6F60
	arm_func_end FUN_020B248C

	arm_func_start FUN_020B24F8
FUN_020B24F8: @ 0x020B24F8
	push {r4, lr}
	mov r4, r0
	bl FUN_020D3A38
	ldr r1, _020B2578 @ =0x021D6F58
	ldr r2, [r1]
	cmp r2, #0
	bne _020B2534
	str r4, [r1]
	mov r3, #0
	str r3, [r4, #4]
	ldr r2, [r1]
	str r3, [r2, #8]
	ldr r2, [r1]
	str r2, [r1, #4]
	b _020B2550
_020B2534:
	ldr r3, [r1, #4]
	mov r2, #0
	str r3, [r4, #4]
	str r2, [r4, #8]
	ldr r2, [r1, #4]
	str r4, [r2, #8]
	str r4, [r1, #4]
_020B2550:
	ldrb r2, [r4, #0x11]
	ldr r3, _020B257C @ =0x021D6F60
	ldr r1, [r3, r2, lsl #2]
	add r1, r1, #1
	str r1, [r3, r2, lsl #2]
	bl FUN_020D3A4C
	ldrb r1, [r4, #0x11]
	ldr r0, _020B257C @ =0x021D6F60
	ldr r0, [r0, r1, lsl #2]
	pop {r4, pc}
	.align 2, 0
_020B2578: .4byte 0x021D6F58
_020B257C: .4byte 0x021D6F60
	arm_func_end FUN_020B24F8

	arm_func_start FUN_020B2580
FUN_020B2580: @ 0x020B2580
	ldr r0, _020B258C @ =0x021D6F58
	ldr r0, [r0]
	bx lr
	.align 2, 0
_020B258C: .4byte 0x021D6F58
	arm_func_end FUN_020B2580

	arm_func_start FUN_020B2590
FUN_020B2590: @ 0x020B2590
	ldr r1, _020B259C @ =0x021D6F60
	ldr r0, [r1, r0, lsl #2]
	bx lr
	.align 2, 0
_020B259C: .4byte 0x021D6F60
	arm_func_end FUN_020B2590

	arm_func_start FUN_020B25A0
FUN_020B25A0: @ 0x020B25A0
	push {r3, r4, r5, lr}
	ldr r1, _020B25EC @ =0x021D6F58
	mov r5, r0
	ldr r4, [r1]
	bl FUN_020D3A38
	cmp r4, #0
	beq _020B25E0
_020B25BC:
	ldrb r1, [r4, #0x11]
	cmp r1, r5
	bne _020B25D4
	bl FUN_020D3A4C
	mov r0, r4
	pop {r3, r4, r5, pc}
_020B25D4:
	ldr r4, [r4, #8]
	cmp r4, #0
	bne _020B25BC
_020B25E0:
	bl FUN_020D3A4C
	mov r0, #0
	pop {r3, r4, r5, pc}
	.align 2, 0
_020B25EC: .4byte 0x021D6F58
	arm_func_end FUN_020B25A0

	arm_func_start FUN_020B25F0
FUN_020B25F0: @ 0x020B25F0
	push {r4, lr}
	mov r4, r0
	bl FUN_020D3A38
	ldr r2, [r4, #4]
	cmp r2, #0
	ldrne r1, [r4, #8]
	strne r1, [r2, #8]
	bne _020B2628
	ldr r2, [r4, #8]
	ldr r1, _020B267C @ =0x021D6F58
	cmp r2, #0
	str r2, [r1]
	movne r1, #0
	strne r1, [r2, #4]
_020B2628:
	ldr r2, [r4, #8]
	cmp r2, #0
	ldrne r1, [r4, #4]
	strne r1, [r2, #4]
	bne _020B2654
	ldr r2, [r4, #4]
	ldr r1, _020B267C @ =0x021D6F58
	cmp r2, #0
	str r2, [r1, #4]
	movne r1, #0
	strne r1, [r2, #8]
_020B2654:
	ldrb r2, [r4, #0x11]
	ldr r3, _020B2680 @ =0x021D6F60
	ldr r1, [r3, r2, lsl #2]
	sub r1, r1, #1
	str r1, [r3, r2, lsl #2]
	bl FUN_020D3A4C
	ldrb r1, [r4, #0x11]
	ldr r0, _020B2680 @ =0x021D6F60
	ldr r0, [r0, r1, lsl #2]
	pop {r4, pc}
	.align 2, 0
_020B267C: .4byte 0x021D6F58
_020B2680: .4byte 0x021D6F60
	arm_func_end FUN_020B25F0

	arm_func_start FUN_020B2684
FUN_020B2684: @ 0x020B2684
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov r7, #0
	cmp r2, #0
	popls {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr ip, _020B2728 @ =0x00001FDF
	ldr r3, _020B272C @ =_021108DC
	mov lr, #0xff
	mov r4, #0x7f
_020B26A4:
	lsl r5, r7, #1
	ldrsh r5, [r1, r5]
	mov fp, r3
	asrs sl, r5, #2
	movmi r6, r4
	ldr r5, _020B2728 @ =0x00001FDF
	rsbmi sl, sl, #0
	movpl r6, lr
	cmp sl, r5
	movgt sl, ip
	mov r5, #0
	add sb, sl, #0x21
_020B26D4:
	ldr r8, [fp], #4
	cmp sb, r8
	ble _020B26F0
	add r5, r5, #1
	cmp r5, #8
	blt _020B26D4
	mov r5, #8
_020B26F0:
	cmp r5, #8
	eorge r5, r6, #0x7f
	bge _020B2714
	add sb, sl, #0x21
	add r8, r5, #1
	asr r8, sb, r8
	and r8, r8, #0xf
	orr r5, r8, r5, lsl #4
	eor r5, r5, r6
_020B2714:
	strb r5, [r0, r7]
	add r7, r7, #1
	cmp r7, r2
	blo _020B26A4
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020B2728: .4byte 0x00001FDF
_020B272C: .4byte _021108DC
	arm_func_end FUN_020B2684

	arm_func_start FUN_020B2730
FUN_020B2730: @ 0x020B2730
	push {r4, lr}
	mov r4, #0
	cmp r2, #0
	popls {r4, pc}
_020B2740:
	ldrb r3, [r0, r4]
	mvn lr, r3
	lsl r3, lr, #0x1c
	lsr ip, r3, #0x19
	and r3, lr, #0x70
	add ip, ip, #0x84
	asr r3, r3, #4
	lsl r3, ip, r3
	tst lr, #0x80
	rsbne ip, r3, #0x84
	subeq ip, r3, #0x84
	lsl r3, r4, #1
	add r4, r4, #1
	strh ip, [r1, r3]
	cmp r4, r2
	blo _020B2740
	pop {r4, pc}
	arm_func_end FUN_020B2730

	arm_func_start FUN_020B2784
FUN_020B2784: @ 0x020B2784
	cmp r2, #0
	mov ip, #0
	bxls lr
_020B2790:
	lsl r3, ip, #1
	ldrsh r3, [r1, r3]
	asr r3, r3, #8
	strb r3, [r0, ip]
	add ip, ip, #1
	cmp ip, r2
	blo _020B2790
	bx lr
	arm_func_end FUN_020B2784

	arm_func_start FUN_020B27B0
FUN_020B27B0: @ 0x020B27B0
	push {r3, lr}
	cmp r2, #0
	mov lr, #0
	popls {r3, pc}
_020B27C0:
	ldrsb ip, [r0, lr]
	lsl r3, lr, #1
	add lr, lr, #1
	lsl ip, ip, #8
	strh ip, [r1, r3]
	cmp lr, r2
	blo _020B27C0
	pop {r3, pc}
	arm_func_end FUN_020B27B0

	arm_func_start FUN_020B27E0
FUN_020B27E0: @ 0x020B27E0
	push {r4, lr}
	mov r4, r0
	bl FUN_020D3A38
	ldr r3, _020B2810 @ =0x021D6F84
	mov ip, #0
	ldr r1, _020B2814 @ =0x021D6F78
	ldr r2, _020B2818 @ =0x021D6F6C
	str ip, [r3, r4, lsl #2]
	str ip, [r2, r4, lsl #2]
	str ip, [r1, r4, lsl #2]
	bl FUN_020D3A4C
	pop {r4, pc}
	.align 2, 0
_020B2810: .4byte 0x021D6F84
_020B2814: .4byte 0x021D6F78
_020B2818: .4byte 0x021D6F6C
	arm_func_end FUN_020B27E0

	arm_func_start FUN_020B281C
FUN_020B281C: @ 0x020B281C
	push {r3, r4, r5, r6, r7, lr}
	mov r5, r0
	bl FUN_020D3A38
	ldr r7, _020B2880 @ =0x021D6F6C
	mov r4, r0
	ldr r0, [r7, r5, lsl #2]
	cmp r0, #0
	beq _020B2860
	mov r6, #0
_020B2840:
	ldr r1, [r0, #8]
	str r1, [r7, r5, lsl #2]
	cmp r1, #0
	strne r6, [r1, #4]
	bl FUN_020B4128
	ldr r0, [r7, r5, lsl #2]
	cmp r0, #0
	bne _020B2840
_020B2860:
	ldr r2, _020B2884 @ =0x021D6F84
	mov r3, #0
	ldr r1, _020B2888 @ =0x021D6F78
	mov r0, r4
	str r3, [r2, r5, lsl #2]
	str r3, [r1, r5, lsl #2]
	bl FUN_020D3A4C
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020B2880: .4byte 0x021D6F6C
_020B2884: .4byte 0x021D6F84
_020B2888: .4byte 0x021D6F78
	arm_func_end FUN_020B281C

	arm_func_start FUN_020B288C
FUN_020B288C: @ 0x020B288C
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	bl FUN_020D3A38
	mov r6, #0
	mov r5, r0
	mov sl, r6
	ldr r4, _020B2900 @ =0x021D6F6C
	mov sb, r6
	ldr r8, _020B2904 @ =0x021D6F84
	ldr r7, _020B2908 @ =0x021D6F78
	b _020B28EC
_020B28B4:
	ldr r0, [r4, r6, lsl #2]
	cmp r0, #0
	beq _020B28E0
_020B28C0:
	ldr r1, [r0, #8]
	str r1, [r4, r6, lsl #2]
	cmp r1, #0
	strne sl, [r1, #4]
	bl FUN_020B4128
	ldr r0, [r4, r6, lsl #2]
	cmp r0, #0
	bne _020B28C0
_020B28E0:
	str sb, [r8, r6, lsl #2]
	str sb, [r7, r6, lsl #2]
	add r6, r6, #1
_020B28EC:
	cmp r6, #3
	blt _020B28B4
	mov r0, r5
	bl FUN_020D3A4C
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0
_020B2900: .4byte 0x021D6F6C
_020B2904: .4byte 0x021D6F84
_020B2908: .4byte 0x021D6F78
	arm_func_end FUN_020B288C

	arm_func_start FUN_020B290C
FUN_020B290C: @ 0x020B290C
	push {r3, r4, r5, lr}
	movs r5, r0
	mov r4, r1
	mvneq r0, #0
	popeq {r3, r4, r5, pc}
	cmp r4, #3
	mvnhs r0, #0
	pophs {r3, r4, r5, pc}
	bl FUN_020D3A38
	ldr ip, _020B2A00 @ =0x021D6F6C
	ldr r1, [ip, r4, lsl #2]
	cmp r1, #0
	bne _020B2964
	str r5, [ip, r4, lsl #2]
	mov r3, #0
	str r3, [r5, #4]
	ldr r2, [ip, r4, lsl #2]
	ldr r1, _020B2A04 @ =0x021D6F84
	str r3, [r2, #8]
	ldr r2, [ip, r4, lsl #2]
	str r2, [r1, r4, lsl #2]
	b _020B29E0
_020B2964:
	ldr r1, _020B2A04 @ =0x021D6F84
	ldr r3, [r1, r4, lsl #2]
	cmp r3, #0
	beq _020B29C0
	ldr r2, [r5, #0x18]
_020B2978:
	ldr r1, [r3, #0x18]
	cmp r1, r2
	bhs _020B29B4
	str r3, [r5, #4]
	ldr r1, [r3, #8]
	ldr r2, _020B2A04 @ =0x021D6F84
	str r1, [r5, #8]
	str r5, [r3, #8]
	ldr r1, [r5, #8]
	cmp r1, #0
	strne r5, [r1, #4]
	ldr r1, [r2, r4, lsl #2]
	cmp r3, r1
	streq r5, [r2, r4, lsl #2]
	b _020B29E0
_020B29B4:
	ldr r3, [r3, #4]
	cmp r3, #0
	bne _020B2978
_020B29C0:
	mov r1, #0
	ldr r2, _020B2A00 @ =0x021D6F6C
	str r1, [r5, #4]
	ldr r1, [r2, r4, lsl #2]
	str r1, [r5, #8]
	ldr r1, [r2, r4, lsl #2]
	str r5, [r1, #4]
	str r5, [r2, r4, lsl #2]
_020B29E0:
	ldr r2, _020B2A08 @ =0x021D6F78
	ldr r1, [r2, r4, lsl #2]
	add r1, r1, #1
	str r1, [r2, r4, lsl #2]
	bl FUN_020D3A4C
	ldr r0, _020B2A08 @ =0x021D6F78
	ldr r0, [r0, r4, lsl #2]
	pop {r3, r4, r5, pc}
	.align 2, 0
_020B2A00: .4byte 0x021D6F6C
_020B2A04: .4byte 0x021D6F84
_020B2A08: .4byte 0x021D6F78
	arm_func_end FUN_020B290C

	arm_func_start FUN_020B2A0C
FUN_020B2A0C: @ 0x020B2A0C
	push {r4, lr}
	mov r4, r0
	bl FUN_020D3A38
	ldr r1, _020B2A44 @ =0x021D6F6C
	ldr r1, [r1, r4, lsl #2]
	cmp r1, #0
	beq _020B2A38
	bl FUN_020D3A4C
	ldr r0, _020B2A44 @ =0x021D6F6C
	ldr r0, [r0, r4, lsl #2]
	pop {r4, pc}
_020B2A38:
	bl FUN_020D3A4C
	mov r0, #0
	pop {r4, pc}
	.align 2, 0
_020B2A44: .4byte 0x021D6F6C
	arm_func_end FUN_020B2A0C

	arm_func_start FUN_020B2A48
FUN_020B2A48: @ 0x020B2A48
	push {r4, lr}
	mov r4, r0
	bl FUN_020D3A38
	ldr ip, _020B2AA4 @ =0x021D6F6C
	ldr r1, [ip, r4, lsl #2]
	cmp r1, #0
	beq _020B2A94
	ldr r2, _020B2AA8 @ =0x021D6F78
	ldr r3, [r1, #8]
	ldr r1, [r2, r4, lsl #2]
	str r3, [ip, r4, lsl #2]
	sub r1, r1, #1
	str r1, [r2, r4, lsl #2]
	cmp r3, #0
	movne r1, #0
	strne r1, [r3, #4]
	ldreq r1, _020B2AAC @ =0x021D6F84
	moveq r2, #0
	streq r2, [r1, r4, lsl #2]
_020B2A94:
	bl FUN_020D3A4C
	ldr r0, _020B2AA8 @ =0x021D6F78
	ldr r0, [r0, r4, lsl #2]
	pop {r4, pc}
	.align 2, 0
_020B2AA4: .4byte 0x021D6F6C
_020B2AA8: .4byte 0x021D6F78
_020B2AAC: .4byte 0x021D6F84
	arm_func_end FUN_020B2A48

	arm_func_start FUN_020B2AB0
FUN_020B2AB0: @ 0x020B2AB0
	ldr r1, _020B2ABC @ =0x021D6F78
	ldr r0, [r1, r0, lsl #2]
	bx lr
	.align 2, 0
_020B2ABC: .4byte 0x021D6F78
	arm_func_end FUN_020B2AB0

	arm_func_start FUN_020B2AC0
FUN_020B2AC0: @ 0x020B2AC0
	push {r4, r5, r6, lr}
	mov r5, r1
	mov r4, r2
	mov r1, #0
	mov r2, #0x28
	mov r6, r0
	bl FUN_020D4994
	ldr r0, _020B2B48 @ =0x000134DF
	mov r1, #0
	str r0, [r6, #4]
	str r1, [r6, #0x28]
	str r1, [r6, #0x2c]
	str r5, [r6, #0x34]
	str r4, [r6, #0x38]
	str r1, [r6, #0x7c]
	str r1, [r6, #0x80]
	str r1, [r6, #0x84]
	str r1, [r6, #0x88]
	str r0, [r6, #0x8c]
	str r1, [r6, #0x90]
	str r1, [r6, #0x4c]
	str r1, [r6, #0x44]
	str r1, [r6, #0x48]
	str r1, [r6, #0x6c]
	str r1, [r6, #0x70]
	str r1, [r6, #0x50]
	str r1, [r6, #0x54]
	str r1, [r6, #0x58]
	mov r0, #1
	str r0, [r6, #0x5c]
	str r1, [r6, #0x3c]
	str r1, [r6, #0x40]
	str r1, [r6, #0x30]
	pop {r4, r5, r6, pc}
	.align 2, 0
_020B2B48: .4byte 0x000134DF
	arm_func_end FUN_020B2AC0

	arm_func_start FUN_020B2B4C
FUN_020B2B4C: @ 0x020B2B4C
	push {r4, lr}
	mov r4, r0
	ldr r0, [r4, #0x3c]
	cmp r0, #0
	beq _020B2B6C
	bl FUN_020B4128
	mov r0, #0
	str r0, [r4, #0x3c]
_020B2B6C:
	mvn r0, #0
	str r0, [r4, #0x38]
	pop {r4, pc}
	arm_func_end FUN_020B2B4C

	arm_func_start FUN_020B2B78
FUN_020B2B78: @ 0x020B2B78
	push {r3, r4, r5, lr}
	mov r5, r0
	ldr r0, [r5, #0x3c]
	mov r4, r1
	cmp r0, #0
	beq _020B2B94
	bl FUN_020B4128
_020B2B94:
	str r4, [r5, #0x3c]
	ldr r0, [r5, #0x34]
	bl FUN_020B2A48
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020B2B78

	arm_func_start FUN_020B2BA4
FUN_020B2BA4: @ 0x020B2BA4
	ldr r2, _020B2BC0 @ =0x00010001
	strh r1, [r0, #0x68]
	str r2, [r0, #0x64]
	mov r1, #0
	str r1, [r0, #0x60]
	str r1, [r0, #0x5c]
	bx lr
	.align 2, 0
_020B2BC0: .4byte 0x00010001
	arm_func_end FUN_020B2BA4

	arm_func_start FUN_020B2BC4
FUN_020B2BC4: @ 0x020B2BC4
	push {r4, r5, r6, lr}
	mov r6, r0
	ldrh ip, [r6, #0x68]
	mov r4, r2
	ldr r3, _020B2C94 @ =0x00000BB8
	sub r2, r4, ip
	lsl r2, r2, #0x10
	mov r5, r1
	cmp r3, r2, lsr #16
	lsr r2, r2, #0x10
	bls _020B2C08
	cmp r4, ip
	ldrlo r0, [r6, #0x60]
	addlo r0, r0, #0x10000
	strlo r0, [r6, #0x60]
	strh r4, [r6, #0x68]
	b _020B2C80
_020B2C08:
	ldr r1, _020B2C98 @ =0x0000FF9C
	cmp r2, r1
	bhi _020B2C54
	ldr r1, [r6, #0x64]
	cmp r4, r1
	bne _020B2C3C
	mov r1, r4
	bl FUN_020B2BA4
	sub r0, r4, #1
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	str r0, [r6, #0x54]
	b _020B2C80
_020B2C3C:
	add r0, r4, #1
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	str r0, [r6, #0x64]
	mov r0, #0
	pop {r4, r5, r6, pc}
_020B2C54:
	ldr r0, [r6, #0x54]
	ldr r1, [r6, #0x60]
	add r0, r0, #0x39c
	add r1, r4, r1
	add r0, r0, #0xfc00
	cmp r1, r0
	bls _020B2C80
	sub r0, r1, #0x10000
	str r0, [r5, #0x18]
	mov r0, #1
	pop {r4, r5, r6, pc}
_020B2C80:
	ldr r1, [r6, #0x60]
	mov r0, #1
	add r1, r4, r1
	str r1, [r5, #0x18]
	pop {r4, r5, r6, pc}
	.align 2, 0
_020B2C94: .4byte 0x00000BB8
_020B2C98: .4byte 0x0000FF9C
	arm_func_end FUN_020B2BC4

	arm_func_start FUN_020B2C9C
FUN_020B2C9C: @ 0x020B2C9C
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	ldr r2, [r7, #0x5c]
	mov r6, r1
	cmp r2, #0
	mov r5, #0
	beq _020B2CCC
	ldr r1, [r6, #0x18]
	lsl r1, r1, #0x10
	lsr r1, r1, #0x10
	bl FUN_020B2BA4
	b _020B2D64
_020B2CCC:
	ldr r2, [r6, #0x18]
	lsl r2, r2, #0x10
	lsr r2, r2, #0x10
	bl FUN_020B2BC4
	cmp r0, #0
	bne _020B2CF8
	ldr r1, [r7, #0x14]
	mov r0, r5
	add r1, r1, #1
	str r1, [r7, #0x14]
	pop {r3, r4, r5, r6, r7, pc}
_020B2CF8:
	ldr r0, [r6, #0x18]
	str r0, [r7, #0x10]
	ldr r1, [r6, #0x18]
	ldr r2, [r7, #0x54]
	cmp r2, r1
	bne _020B2D24
	ldr r1, [r7, #0x14]
	mov r0, r5
	add r1, r1, #1
	str r1, [r7, #0x14]
	pop {r3, r4, r5, r6, r7, pc}
_020B2D24:
	add r0, r2, #1
	cmp r0, r1
	beq _020B2D64
	ldr r0, [r6, #0x45c]
	cmp r0, #0
	bne _020B2D64
	subs r0, r1, r2
	rsbmi r0, r0, #0
	cmp r0, #0x64
	strgt r1, [r7, #0x54]
	movgt r0, #0
	popgt {r3, r4, r5, r6, r7, pc}
	cmp r2, r1
	ldrhi r0, [r7, #0x1c]
	addhi r0, r0, #1
	strhi r0, [r7, #0x1c]
_020B2D64:
	ldr r0, [r6, #0x18]
	str r0, [r7, #0x54]
	ldr r0, [r7, #0x4c]
	cmp r0, #0
	bne _020B2D9C
	ldr r1, [r6, #0x460]
	add r0, r6, #0x64
	str r1, [r7, #0x4c]
	add r1, r0, #0x400
	add r0, r7, #0x44
	ldm r1, {r2, r3}
	stm r0, {r2, r3}
	mov r0, #0
	str r0, [r7, #0x6c]
_020B2D9C:
	ldr r2, [r6, #0x460]
	ldr r0, [r7, #0x4c]
	ldr r3, [r6, #0x464]
	ldr r1, [r7, #0x44]
	sub r0, r2, r0
	ldr r2, [r7, #0x80]
	lsl r0, r0, #6
	subs r1, r3, r1
	subs r4, r0, r1
	cmp r2, #0
	beq _020B2DD4
	ldr r1, [r6, #0x45c]
	cmp r1, #0
	beq _020B2DDC
_020B2DD4:
	str r4, [r7, #0x80]
	b _020B2E50
_020B2DDC:
	str r4, [r7, #0x80]
	subs r1, r4, r2
	ldr r2, [r7, #0x7c]
	rsbmi r1, r1, #0
	add r2, r2, #0x318
	add r2, r2, #0x8800
	lsl ip, r2, #1
	ldr r3, _020B302C @ =0x0000CC8D
	mov r2, #0
	adds r3, ip, r3
	asr lr, r1, #0x1f
	adc r2, r2, ip, asr #31
	cmp lr, r2
	cmpeq r1, r3
	bls _020B2E30
	ldr ip, _020B3030 @ =0x75CA82CB
	lsr r2, r1, #0x1f
	smull r3, lr, ip, r1
	add lr, r2, lr, asr #14
	add r2, lr, #2
	str r2, [r7, #0x84]
_020B2E30:
	ldr r2, [r7, #0x84]
	cmp r2, #0
	bgt _020B2E50
	ldr r2, [r7, #0x7c]
	sub r1, r1, r2
	add r1, r2, r1, asr #4
	str r1, [r7, #0x7c]
	str r1, [r7, #0x18]
_020B2E50:
	ldr r2, [r7, #0x44]
	ldr r3, [r7, #4]
	ldr r1, [r7, #0x48]
	adds r2, r0, r2
	adc r0, r1, #0
	adds r1, r3, r2
	str r1, [r6, #0x46c]
	adc r0, r0, #0
	str r0, [r6, #0x470]
	bl FUN_020D34B0
	ldr ip, [r6, #0x46c]
	ldr r2, _020B3034 @ =0x00008B18
	ldr lr, [r6, #0x470]
	adds r6, ip, r2
	adc r3, lr, #0
	cmp r3, r1
	mov r3, #0
	cmpeq r6, r0
	movlo r0, r3
	poplo {r3, r4, r5, r6, r7, pc}
	ldr r6, _020B3038 @ =0x0007FD88
	adds r6, r0, r6
	adc r0, r1, r3
	cmp lr, r0
	cmpeq ip, r6
	movhi r0, r3
	pophi {r3, r4, r5, r6, r7, pc}
	ldr r0, [r7, #0x84]
	cmp r0, #0
	bgt _020B3018
	ldr r0, [r7, #0x7c]
	ldr r6, _020B3030 @ =0x75CA82CB
	add ip, r0, r0, lsl #1
	smull r1, r0, r6, ip
	ldr r6, [r7, #0x8c]
	lsr r1, ip, #0x1f
	cmp ip, r6
	add r0, r1, r0, asr #14
	bls _020B2F24
	add r1, r0, #1
	mul r6, r1, r2
	mul r1, r0, r2
	add r0, r6, #0xdf
	add r2, r0, #0x13400
	ldr r0, _020B303C @ =0xFFFF2F5C
	add r1, r1, #0xdf
	str r2, [r7, #0x8c]
	add r0, r2, r0
	str r0, [r7, #0x88]
	add r0, r1, #0x13400
	str r0, [r7, #4]
	str r3, [r7, #0x90]
	b _020B2F84
_020B2F24:
	ldr r1, [r7, #0x88]
	cmp ip, r1
	bge _020B2F84
	ldr r1, [r7, #0x90]
	add r1, r1, #1
	str r1, [r7, #0x90]
	cmp r1, #0x46
	bls _020B2F84
	add r1, r0, #1
	mul ip, r1, r2
	add r1, ip, #0xdf
	add r1, r1, #0x13400
	ldr r6, _020B3040 @ =0xFFFFBA74
	str r1, [r7, #0x8c]
	ldr r1, _020B3034 @ =0x00008B18
	mlas r2, r0, r2, r6
	str r2, [r7, #0x88]
	mul r1, r0, r1
	add r0, r1, #0xdf
	strmi r3, [r7, #0x88]
	add r0, r0, #0x13400
	mov r2, #0
	str r0, [r7, #4]
	str r2, [r7, #0x90]
_020B2F84:
	ldr r1, [r7, #4]
	ldr r0, _020B3044 @ =0x00068520
	cmp r1, r0
	strhi r0, [r7, #4]
	ldr r0, [r7, #0x6c]
	cmp r0, #0x10
	bhs _020B2FB4
	add r0, r0, #1
	str r0, [r7, #0x6c]
	str r4, [r7, #0x74]
	str r4, [r7, #0x78]
	b _020B2FD0
_020B2FB4:
	ldr r0, [r7, #0x74]
	rsb r0, r0, r0, lsl #5
	add r1, r4, r0
	asr r0, r1, #4
	add r0, r1, r0, lsr #27
	asr r0, r0, #5
	str r0, [r7, #0x74]
_020B2FD0:
	ldr r2, [r7, #0x78]
	ldr r1, [r7, #0x74]
	ldr r0, _020B3048 @ =0x00008701
	sub r1, r2, r1
	cmp r1, r0
	mvn r0, #0x8700
	movgt r5, #1
	str r1, [r7, #0xc]
	cmp r1, r0
	bge _020B3008
	ldr r1, [r7, #0x70]
	add r5, r0, #0x8700
	add r0, r1, #1
	str r0, [r7, #0x70]
_020B3008:
	cmp r5, #0
	movne r0, #0
	strne r0, [r7, #0x6c]
	strne r0, [r7, #0x4c]
_020B3018:
	ldr r1, [r7, #0x84]
	mov r0, #1
	sub r1, r1, #1
	str r1, [r7, #0x84]
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020B302C: .4byte 0x0000CC8D
_020B3030: .4byte 0x75CA82CB
_020B3034: .4byte 0x00008B18
_020B3038: .4byte 0x0007FD88
_020B303C: .4byte 0xFFFF2F5C
_020B3040: .4byte 0xFFFFBA74
_020B3044: .4byte 0x00068520
_020B3048: .4byte 0x00008701
	arm_func_end FUN_020B2C9C

	arm_func_start FUN_020B304C
FUN_020B304C: @ 0x020B304C
	push {r3, lr}
	ldr r1, _020B3070 @ =0x021D8498
	ldr r1, [r1, #0x10]
	cmp r1, #0
	cmpne r1, #2
	moveq r0, #0
	popeq {r3, pc}
	bl FUN_020B35EC
	pop {r3, pc}
	.align 2, 0
_020B3070: .4byte 0x021D8498
	arm_func_end FUN_020B304C

	arm_func_start FUN_020B3074
FUN_020B3074: @ 0x020B3074
	push {r3, lr}
	ldr r2, _020B3124 @ =0x021D6F90
	mov ip, #0
	cmp r0, #0
	ldr lr, [r2, #0x14]
	moveq r0, ip
	popeq {r3, pc}
	ldr r1, _020B3128 @ =0x021D8498
	ldr r1, [r1, #0x10]
	cmp r1, #2
	bne _020B30B4
	ldr r1, _020B312C @ =0x021D6FCC
	cmp r0, r1
	streq ip, [r2, #0x3c]
	mov r0, #1
	pop {r3, pc}
_020B30B4:
	cmp lr, #0
	beq _020B311C
_020B30BC:
	cmp lr, r0
	bne _020B310C
	mov r3, #0
	str r3, [r0]
	cmp ip, #0
	ldrne r1, [r0, #0x14]
	strne r1, [ip, #0x14]
	bne _020B30F4
	ldr r2, [lr, #0x14]
	cmp r2, #0
	ldrne r1, _020B3124 @ =0x021D6F90
	strne r2, [r1, #0x14]
	ldreq r1, _020B3124 @ =0x021D6F90
	streq r3, [r1, #0x14]
_020B30F4:
	ldr r1, _020B3124 @ =0x021D6F90
	ldr r2, [r1, #0x10]
	str r2, [r0, #0x14]
	str r0, [r1, #0x10]
	mov r0, #1
	pop {r3, pc}
_020B310C:
	mov ip, lr
	ldr lr, [lr, #0x14]
	cmp lr, #0
	bne _020B30BC
_020B311C:
	mov r0, #0
	pop {r3, pc}
	.align 2, 0
_020B3124: .4byte 0x021D6F90
_020B3128: .4byte 0x021D8498
_020B312C: .4byte 0x021D6FCC
	arm_func_end FUN_020B3074

	arm_func_start FUN_020B3130
FUN_020B3130: @ 0x020B3130
	push {r4, r5, r6, lr}
	movs r5, r0
	mov r4, r1
	mov r6, r2
	mvneq r0, #0
	popeq {r4, r5, r6, pc}
	cmp r3, #0x10
	mvnlo r0, #0
	poplo {r4, r5, r6, pc}
	ldr r1, _020B31DC @ =0x021D8498
	ldr r1, [r1, #0xc]
	cmp r1, #1
	mvneq r0, #2
	popeq {r4, r5, r6, pc}
	cmp r4, #0
	blt _020B3178
	cmp r4, #5
	blt _020B3180
_020B3178:
	mvn r0, #2
	pop {r4, r5, r6, pc}
_020B3180:
	mov r3, #0xff
	mov r1, r6
	and r2, r4, #0xff
	strb r3, [r6, #4]
	bl FUN_020B393C
	mov r0, r5
	mov r1, r6
	bl FUN_020B3AA8
	cmp r0, #0
	mvneq r0, #2
	popeq {r4, r5, r6, pc}
	ldr r0, _020B31DC @ =0x021D8498
	ldr r0, [r0, #0x10]
	cmp r0, #1
	cmpeq r4, #0
	bne _020B31D4
	mov r0, r5
	bl FUN_020B3A5C
	cmp r0, #0
	mvneq r0, #2
	popeq {r4, r5, r6, pc}
_020B31D4:
	mov r0, #0
	pop {r4, r5, r6, pc}
	.align 2, 0
_020B31DC: .4byte 0x021D8498
	arm_func_end FUN_020B3130

	arm_func_start FUN_020B31E0
FUN_020B31E0: @ 0x020B31E0
	push {r3, lr}
	ldr r2, _020B3200 @ =0x021D8498
	ldr r2, [r2, #0x10]
	cmp r2, #2
	mvneq r0, #2
	popeq {r3, pc}
	bl FUN_020B3658
	pop {r3, pc}
	.align 2, 0
_020B3200: .4byte 0x021D8498
	arm_func_end FUN_020B31E0

	arm_func_start FUN_020B3204
FUN_020B3204: @ 0x020B3204
	push {r4, r5, r6, lr}
	movs r5, r0
	mov r6, r1
	mov r4, r2
	mvneq r0, #0
	popeq {r4, r5, r6, pc}
	cmp r3, #0x10
	mvnlo r0, #0
	poplo {r4, r5, r6, pc}
	cmp r6, #0
	blt _020B3238
	cmp r6, #6
	blt _020B3240
_020B3238:
	mvn r0, #2
	pop {r4, r5, r6, pc}
_020B3240:
	mov r3, #0
	mov r1, r4
	and r2, r6, #0xff
	strb r3, [r4, #4]
	bl FUN_020B393C
	cmp r6, #0
	bne _020B329C
	ldr r0, _020B32B8 @ =0x021D8498
	ldr r0, [r0, #0x10]
	cmp r0, #1
	ldreq r0, [r5, #0xc]
	cmpeq r0, #4
	bne _020B3288
	mov r0, r5
	bl FUN_020B3A5C
	cmp r0, #0
	mvneq r0, #2
	popeq {r4, r5, r6, pc}
_020B3288:
	ldrb r1, [r5, #4]
	mov r0, #1
	cmp r1, #0
	lslne r0, r0, r1
	str r0, [r5, #8]
_020B329C:
	mov r0, r5
	mov r1, r4
	bl FUN_020B3AA8
	cmp r0, #0
	mvneq r0, #2
	movne r0, #0
	pop {r4, r5, r6, pc}
	.align 2, 0
_020B32B8: .4byte 0x021D8498
	arm_func_end FUN_020B3204

	arm_func_start FUN_020B32BC
FUN_020B32BC: @ 0x020B32BC
	push {r3, lr}
	ldr r2, _020B32DC @ =0x021D8498
	ldr r2, [r2, #0x10]
	cmp r2, #2
	mvneq r0, #2
	popeq {r3, pc}
	bl FUN_020B369C
	pop {r3, pc}
	.align 2, 0
_020B32DC: .4byte 0x021D8498
	arm_func_end FUN_020B32BC

	arm_func_start FUN_020B32E0
FUN_020B32E0: @ 0x020B32E0
	push {r4, lr}
	ldr r2, _020B3390 @ =0x021D8498
	mov r4, r0
	ldr r1, [r2, #0x10]
	cmp r1, #3
	mvnne r0, #1
	popne {r4, pc}
	ldr r1, _020B3394 @ =0x021D6F90
	ldr r1, [r1]
	cmp r1, #3
	mvneq r0, #5
	popeq {r4, pc}
	ldrb r1, [r2]
	cmp r4, r1
	mvneq r0, #0
	popeq {r4, pc}
	bl FUN_020B3B30
	cmp r0, #0
	movne r0, #0
	popne {r4, pc}
	mov r0, r4
	bl FUN_020B304C
	movs r2, r0
	mvneq r0, #0
	popeq {r4, pc}
	strb r4, [r2, #4]
	mov r0, #1
	strb r4, [r2, #5]
	mov r3, #2
	lsl r1, r0, r4
	str r3, [r2, #0xc]
	ldr r0, _020B3390 @ =0x021D8498
	str r1, [r2, #8]
	ldr r3, [r0, #8]
	ldr ip, [r0, #4]
	mov r0, r4
	mov r1, #7
	blx ip
	ldr r1, _020B3394 @ =0x021D6F90
	mov r0, #0
	ldr r2, [r1]
	add r2, r2, #1
	str r2, [r1]
	pop {r4, pc}
	.align 2, 0
_020B3390: .4byte 0x021D8498
_020B3394: .4byte 0x021D6F90
	arm_func_end FUN_020B32E0

	arm_func_start FUN_020B3398
FUN_020B3398: @ 0x020B3398
	push {r4, lr}
	mov r4, r0
	ldr r0, [r4]
	cmp r0, #0
	ldrne r1, [r4, #4]
	cmpne r1, #0
	beq _020B33BC
	cmp r1, #8
	bls _020B33C4
_020B33BC:
	mov r0, #0
	pop {r4, pc}
_020B33C4:
	ldr r1, _020B3490 @ =0x021D6F90
	mov r2, #0x18
	str r0, [r1, #0x10]
	ldr r3, [r4, #4]
	mov r1, #0
	mul r2, r3, r2
	bl FUN_020D4994
	ldr r0, _020B3494 @ =0x021D6FCC
	mov r1, #0
	mov r2, #0x18
	bl FUN_020D4994
	ldr r0, _020B3498 @ =0x021D6FB4
	mov r1, #0
	mov r2, #0x18
	bl FUN_020D4994
	ldr r3, [r4, #4]
	mov ip, #0
	subs r0, r3, #1
	beq _020B3444
	ldr r1, _020B3490 @ =0x021D6F90
	mov lr, ip
	mov r0, #0x18
_020B341C:
	ldr r2, [r1, #0x10]
	add ip, ip, #1
	mla r3, ip, r0, r2
	add r2, r2, lr
	str r3, [r2, #0x14]
	ldr r3, [r4, #4]
	add lr, lr, #0x18
	sub r2, r3, #1
	cmp ip, r2
	blo _020B341C
_020B3444:
	ldr r1, _020B3490 @ =0x021D6F90
	mov r0, #0x18
	ldr r2, [r1, #0x10]
	mov r4, #0
	mla r0, r3, r0, r2
	str r4, [r0, #-4]
	str r4, [r1, #0x14]
	str r4, [r1, #4]
	ldr r0, _020B349C @ =0x021D8498
	str r4, [r1]
	ldr r3, _020B34A0 @ =FUN_020D34B0
	str r4, [r0, #0x14]
	ldr r2, _020B34A4 @ =0x5D588B65
	str r3, [r1, #0x18]
	ldr r0, _020B34A8 @ =0x00269EC3
	str r2, [r1, #0x1c]
	str r0, [r1, #0x20]
	mov r0, #1
	pop {r4, pc}
	.align 2, 0
_020B3490: .4byte 0x021D6F90
_020B3494: .4byte 0x021D6FCC
_020B3498: .4byte 0x021D6FB4
_020B349C: .4byte 0x021D8498
_020B34A0: .4byte FUN_020D34B0
_020B34A4: .4byte 0x5D588B65
_020B34A8: .4byte 0x00269EC3
	arm_func_end FUN_020B3398

	arm_func_start FUN_020B34AC
FUN_020B34AC: @ 0x020B34AC
	ldr r0, _020B34C0 @ =0x021D6F90
	mov r1, #0
	str r1, [r0, #0x14]
	str r1, [r0, #0x10]
	bx lr
	.align 2, 0
_020B34C0: .4byte 0x021D6F90
	arm_func_end FUN_020B34AC

	arm_func_start FUN_020B34C4
FUN_020B34C4: @ 0x020B34C4
	push {r3, r4, r5, lr}
	bl FUN_020D34B0
	ldr r2, _020B3560 @ =0x021D8498
	ldr r3, [r2, #0x10]
	cmp r3, #2
	popne {r3, r4, r5, pc}
	ldr r2, [r2, #0xc]
	cmp r2, #0
	popeq {r3, r4, r5, pc}
	ldr r3, _020B3564 @ =0x021D6F90
	mov ip, #0
	ldr r5, [r3, #0xc]
	ldr r4, [r3, #8]
	cmp r5, #0
	cmpeq r4, #0
	popeq {r3, r4, r5, pc}
	ldr r2, _020B3568 @ =_021108FC
	subs r4, r0, r4
	ldr lr, [r2]
	ldr r0, [r2, #4]
	sbc r1, r1, r5
	cmp r1, r0
	cmpeq r4, lr
	popls {r3, r4, r5, pc}
	str ip, [r3, #8]
	str ip, [r3, #0xc]
	str ip, [r3, #0x3c]
	mov r0, ip
	str ip, [r3, #0x48]
	bl FUN_020B37C8
	ldr r1, _020B3560 @ =0x021D8498
	ldr r0, _020B3564 @ =0x021D6F90
	ldr r3, [r1, #8]
	ldrb r0, [r0, #0x40]
	ldr ip, [r1, #4]
	ldr r2, _020B356C @ =0x021D6FCC
	mov r1, #9
	blx ip
	pop {r3, r4, r5, pc}
	.align 2, 0
_020B3560: .4byte 0x021D8498
_020B3564: .4byte 0x021D6F90
_020B3568: .4byte _021108FC
_020B356C: .4byte 0x021D6FCC
	arm_func_end FUN_020B34C4

	arm_func_start FUN_020B3570
FUN_020B3570: @ 0x020B3570
	push {r3, lr}
	cmp r2, #0x10
	movne r0, #0
	popne {r3, pc}
	ldrb r2, [r1, #8]
	cmp r2, r0
	bne _020B35A0
	ldr r0, _020B35E8 @ =0x021D8498
	ldrb ip, [r1, #9]
	ldrb r2, [r0]
	cmp ip, r2
	beq _020B35A8
_020B35A0:
	mov r0, #0
	pop {r3, pc}
_020B35A8:
	ldrb r2, [r1, #5]
	cmp r2, #0x10
	beq _020B35C4
	mov r0, r1
	mov r1, r3
	bl FUN_020B3E7C
	pop {r3, pc}
_020B35C4:
	ldr r0, [r0, #0xc]
	cmp r0, #0
	mov r0, r1
	mov r1, r3
	bne _020B35E0
	bl FUN_020B3BB0
	pop {r3, pc}
_020B35E0:
	bl FUN_020B3CEC
	pop {r3, pc}
	.align 2, 0
_020B35E8: .4byte 0x021D8498
	arm_func_end FUN_020B3570

	arm_func_start FUN_020B35EC
FUN_020B35EC: @ 0x020B35EC
	push {r4, lr}
	mov r1, r0
	cmp r1, #0x20
	movhs r0, #0
	pophs {r4, pc}
	ldr r0, _020B3650 @ =0x021D8498
	ldrb r0, [r0]
	cmp r1, r0
	moveq r0, #0
	popeq {r4, pc}
	ldr r2, _020B3654 @ =0x021D6F90
	ldr r4, [r2, #0x10]
	cmp r4, #0
	moveq r0, #0
	popeq {r4, pc}
	ldr r3, [r4, #0x14]
	mov r0, r4
	str r3, [r2, #0x10]
	bl FUN_020B3808
	ldr r1, _020B3654 @ =0x021D6F90
	mov r0, r4
	ldr r2, [r1, #0x14]
	str r2, [r4, #0x14]
	str r4, [r1, #0x14]
	pop {r4, pc}
	.align 2, 0
_020B3650: .4byte 0x021D8498
_020B3654: .4byte 0x021D6F90
	arm_func_end FUN_020B35EC

	arm_func_start FUN_020B3658
FUN_020B3658: @ 0x020B3658
	push {r4, lr}
	sub sp, sp, #0x10
	add r2, sp, #0
	mov r3, #0x10
	mov r4, r0
	bl FUN_020B3130
	cmp r0, #0
	addne sp, sp, #0x10
	popne {r4, pc}
	add r1, sp, #0
	mov r0, r4
	bl FUN_020B3850
	cmp r0, #0
	movne r0, #0
	mvneq r0, #3
	add sp, sp, #0x10
	pop {r4, pc}
	arm_func_end FUN_020B3658

	arm_func_start FUN_020B369C
FUN_020B369C: @ 0x020B369C
	push {r4, lr}
	sub sp, sp, #0x10
	add r2, sp, #0
	mov r3, #0x10
	mov r4, r0
	bl FUN_020B3204
	cmp r0, #0
	addne sp, sp, #0x10
	popne {r4, pc}
	add r1, sp, #0
	mov r0, r4
	bl FUN_020B3850
	cmp r0, #0
	movne r0, #0
	mvneq r0, #3
	add sp, sp, #0x10
	pop {r4, pc}
	arm_func_end FUN_020B369C

	arm_func_start FUN_020B36E0
FUN_020B36E0: @ 0x020B36E0
	ldrb r2, [r1, #0xa]
	cmp r2, #1
	bxne lr
	ldrb r2, [r0, #4]
	ldr r0, _020B3704 @ =0x021D6F90
	strb r2, [r1, #0xb]
	ldr r0, [r0, #4]
	str r0, [r1, #0xc]
	bx lr
	.align 2, 0
_020B3704: .4byte 0x021D6F90
	arm_func_end FUN_020B36E0

	arm_func_start FUN_020B3708
FUN_020B3708: @ 0x020B3708
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	str r0, [sp]
	mov sl, r1
	mov r8, #0
	bl FUN_020B36E0
	mov r6, #1
	ldr r4, _020B37C0 @ =0x021D8498
	ldr r5, _020B37C4 @ =0x021D6F90
	mov sb, r8
	mov r7, r6
	mov fp, #0x10
_020B3734:
	cmp sb, #0
	lslne r1, r7, sb
	ldr r0, [r5, #4]
	moveq r1, r6
	tst r0, r1
	ldrbne r0, [r4]
	cmpne sb, r0
	beq _020B3770
	mov r0, sb
	mov r1, sl
	mov r2, fp
	strb sb, [sl, #9]
	bl FUN_021F9610
	cmp r0, #0
	addne r8, r8, #1
_020B3770:
	add r0, sb, #1
	and sb, r0, #0xff
	cmp sb, #0x20
	blo _020B3734
	ldrb r0, [sl, #0xa]
	cmp r0, #1
	bne _020B37A0
	ldr r0, _020B37C4 @ =0x021D6F90
	ldr r1, [r0, #4]
	ldr r0, [sp]
	str r1, [r0, #8]
	b _020B37B0
_020B37A0:
	cmp r0, #0
	ldreq r0, [sp]
	moveq r1, #0
	streq r1, [r0, #8]
_020B37B0:
	cmp r8, #0
	mvneq r0, #3
	movne r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020B37C0: .4byte 0x021D8498
_020B37C4: .4byte 0x021D6F90
	arm_func_end FUN_020B3708

	arm_func_start FUN_020B37C8
FUN_020B37C8: @ 0x020B37C8
	push {r4, lr}
	sub sp, sp, #0x10
	mov r4, r0
	mov r3, #0xff
	ldr r0, _020B3804 @ =0x021D6FCC
	add r1, sp, #0
	mov r2, #4
	strb r3, [sp, #4]
	bl FUN_020B393C
	ldr r0, _020B3804 @ =0x021D6FCC
	add r1, sp, #0
	strb r4, [sp, #0xa]
	bl FUN_020B3708
	add sp, sp, #0x10
	pop {r4, pc}
	.align 2, 0
_020B3804: .4byte 0x021D6FCC
	arm_func_end FUN_020B37C8

	arm_func_start FUN_020B3808
FUN_020B3808: @ 0x020B3808
	mov ip, r0
	mov r3, #6
	mov r2, #0
_020B3814:
	strb r2, [ip]
	strb r2, [ip, #1]
	strb r2, [ip, #2]
	strb r2, [ip, #3]
	add ip, ip, #4
	subs r3, r3, #1
	bne _020B3814
	ldr r2, _020B384C @ =0x021D8498
	mov r3, #0
	ldr r2, [r2, #0x10]
	str r2, [r0]
	str r3, [r0, #0xc]
	strb r1, [r0, #4]
	bx lr
	.align 2, 0
_020B384C: .4byte 0x021D8498
	arm_func_end FUN_020B3808

	arm_func_start FUN_020B3850
FUN_020B3850: @ 0x020B3850
	push {r3, lr}
	ldrb r2, [r1, #4]
	cmp r2, #0xff
	ldrbeq r2, [r1, #6]
	cmpeq r2, #4
	bne _020B3870
	bl FUN_020B3708
	b _020B3888
_020B3870:
	ldrb r0, [r0, #4]
	mov r2, #0x10
	bl FUN_021F9610
	cmp r0, #0
	moveq r0, #0
	popeq {r3, pc}
_020B3888:
	mov r0, #1
	pop {r3, pc}
	arm_func_end FUN_020B3850

	arm_func_start FUN_020B3890
FUN_020B3890: @ 0x020B3890
	ldrb r2, [r0, #0xb]
	strb r2, [r1, #5]
	ldrb r2, [r0, #4]
	cmp r2, #0xff
	bne _020B38D4
	ldrb r2, [r0, #6]
	cmp r2, #0
	bne _020B38C4
	ldrb r3, [r1, #4]
	mov r2, #1
	cmp r3, #0
	lslne r2, r2, r3
	str r2, [r1, #8]
_020B38C4:
	ldrb r1, [r0, #6]
	ldr r0, _020B3934 @ =0x021090D8
	ldrb r0, [r0, r1]
	bx lr
_020B38D4:
	cmp r2, #0
	bne _020B392C
	ldrb r2, [r0, #6]
	cmp r2, #0
	bne _020B3920
	ldr r0, [r1, #0xc]
	cmp r0, #1
	bne _020B3910
	ldrb r2, [r1, #4]
	mov r0, #1
	cmp r2, #0
	lslne r0, r0, r2
	str r0, [r1, #8]
	mov r0, #7
	bx lr
_020B3910:
	cmp r0, #5
	moveq r0, #9
	movne r0, #0xc
	bx lr
_020B3920:
	ldr r0, _020B3938 @ =0x021090E0
	ldrb r0, [r0, r2]
	bx lr
_020B392C:
	mov r0, #0xc
	bx lr
	.align 2, 0
_020B3934: .4byte 0x021090D8
_020B3938: .4byte 0x021090E0
	arm_func_end FUN_020B3890

	arm_func_start FUN_020B393C
FUN_020B393C: @ 0x020B393C
	ldr ip, _020B397C @ =0x5F564354
	mov r3, #0x10
	str ip, [r1]
	strb r3, [r1, #5]
	ldr r3, _020B3980 @ =0x021D8498
	strb r2, [r1, #6]
	ldrb r2, [r3]
	strb r2, [r1, #8]
	ldrb r2, [r0, #4]
	mov r0, #0
	strb r2, [r1, #9]
	strb r0, [r1, #0xa]
	ldrb r2, [r3]
	strb r2, [r1, #0xb]
	str r0, [r1, #0xc]
	bx lr
	.align 2, 0
_020B397C: .4byte 0x5F564354
_020B3980: .4byte 0x021D8498
	arm_func_end FUN_020B393C

	arm_func_start FUN_020B3984
FUN_020B3984: @ 0x020B3984
	push {r3, r4, r5, lr}
	ldrb r2, [r1, #4]
	ldrb r3, [r1, #6]
	mov r4, r0
	cmp r2, #0
	addeq r3, r3, #5
	cmp r3, #0
	blt _020B39AC
	cmp r3, #0xb
	blt _020B39B0
_020B39AC:
	mvn r3, #0
_020B39B0:
	cmp r3, #0
	mvnlt r0, #0
	poplt {r3, r4, r5, pc}
	ldr r0, _020B3A50 @ =0x021D8498
	ldr r2, [r4, #0xc]
	ldr r0, [r0, #0x10]
	cmp r0, #1
	ldreq r1, _020B3A54 @ =0x021091AE
	mov r0, #0xb
	ldrne r1, _020B3A58 @ =0x021090E8
	mla r0, r2, r0, r1
	ldrsb r5, [r3, r0]
	mvn r1, #2
	cmp r5, r1
	beq _020B3A2C
	add r0, r1, #1
	cmp r5, r0
	beq _020B3A0C
	add r0, r1, #2
	cmp r5, r0
	mov r0, r5
	bne _020B3A4C
	pop {r3, r4, r5, pc}
_020B3A0C:
	mov r0, r4
	mov r1, #1
	bl FUN_020B369C
	mov r1, #0
	str r1, [r4, #0xc]
	mov r0, r5
	str r1, [r4]
	pop {r3, r4, r5, pc}
_020B3A2C:
	mov r0, r4
	mov r1, #3
	bl FUN_020B369C
	mov r1, #0
	str r1, [r4, #0xc]
	mov r0, r5
	str r1, [r4]
	pop {r3, r4, r5, pc}
_020B3A4C:
	pop {r3, r4, r5, pc}
	.align 2, 0
_020B3A50: .4byte 0x021D8498
_020B3A54: .4byte 0x021091AE
_020B3A58: .4byte 0x021090E8
	arm_func_end FUN_020B3984

	arm_func_start FUN_020B3A5C
FUN_020B3A5C: @ 0x020B3A5C
	ldr r1, _020B3AA4 @ =0x021D6F90
	ldr r2, [r1, #0x14]
	cmp r2, #0
	beq _020B3A9C
_020B3A6C:
	ldr r1, [r2]
	cmp r1, #0
	beq _020B3A90
	ldr r1, [r2, #0xc]
	cmp r1, #2
	bne _020B3A90
	cmp r0, r2
	movne r0, #0
	bxne lr
_020B3A90:
	ldr r2, [r2, #0x14]
	cmp r2, #0
	bne _020B3A6C
_020B3A9C:
	mov r0, #1
	bx lr
	.align 2, 0
_020B3AA4: .4byte 0x021D6F90
	arm_func_end FUN_020B3A5C

	arm_func_start FUN_020B3AA8
FUN_020B3AA8: @ 0x020B3AA8
	ldrb r2, [r1, #4]
	ldrb ip, [r1, #6]
	cmp r2, #0
	addeq ip, ip, #5
	cmp ip, #0
	blt _020B3AC8
	cmp ip, #0xb
	blt _020B3ACC
_020B3AC8:
	mvn ip, #0
_020B3ACC:
	cmp ip, #0
	mvnlt r0, #0
	bxlt lr
	ldr r1, _020B3B24 @ =0x021D8498
	ldr r3, [r0, #0xc]
	ldr r1, [r1, #0x10]
	cmp r1, #1
	ldreq r2, _020B3B28 @ =0x0210912A
	mov r1, #0xb
	ldrne r2, _020B3B2C @ =0x0210916C
	mla r1, r3, r1, r2
	ldrsb r2, [ip, r1]
	mvn r1, #0
	cmp r2, r1
	moveq r0, #1
	bxeq lr
	sub r1, r1, #1
	cmp r2, r1
	moveq r0, #0
	strne r2, [r0, #0xc]
	movne r0, #1
	bx lr
	.align 2, 0
_020B3B24: .4byte 0x021D8498
_020B3B28: .4byte 0x0210912A
_020B3B2C: .4byte 0x0210916C
	arm_func_end FUN_020B3AA8

	arm_func_start FUN_020B3B30
FUN_020B3B30: @ 0x020B3B30
	ldr r1, _020B3BA4 @ =0x021D8498
	ldr r2, _020B3BA8 @ =0x021D6F90
	ldr r1, [r1, #0x10]
	ldr r3, [r2, #0x14]
	cmp r1, #2
	bne _020B3B6C
	ldr r1, [r2, #0x3c]
	cmp r1, #0
	beq _020B3B64
	ldrb r1, [r2, #0x40]
	cmp r1, r0
	ldreq r0, _020B3BAC @ =0x021D6FCC
	bxeq lr
_020B3B64:
	mov r0, #0
	bx lr
_020B3B6C:
	cmp r3, #0
	beq _020B3B9C
_020B3B74:
	ldr r1, [r3]
	cmp r1, #0
	beq _020B3B90
	ldrb r1, [r3, #4]
	cmp r1, r0
	moveq r0, r3
	bxeq lr
_020B3B90:
	ldr r3, [r3, #0x14]
	cmp r3, #0
	bne _020B3B74
_020B3B9C:
	mov r0, #0
	bx lr
	.align 2, 0
_020B3BA4: .4byte 0x021D8498
_020B3BA8: .4byte 0x021D6F90
_020B3BAC: .4byte 0x021D6FCC
	arm_func_end FUN_020B3B30

	arm_func_start FUN_020B3BB0
FUN_020B3BB0: @ 0x020B3BB0
	push {r3, r4, r5, r6, r7, lr}
	mov r6, r0
	ldrb r2, [r6, #4]
	mov r5, r1
	cmp r2, #0xff
	bne _020B3BE8
	ldrb r2, [r6, #6]
	cmp r2, #4
	bne _020B3BDC
	bl FUN_020B3EF4
	pop {r3, r4, r5, r6, r7, pc}
_020B3BDC:
	cmp r2, #3
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
_020B3BE8:
	ldrb r0, [r6, #8]
	bl FUN_020B3B30
	movs r4, r0
	beq _020B3C68
	mov r1, r6
	bl FUN_020B3984
	mov r7, r0
	mvn r0, #1
	cmp r7, r0
	beq _020B3C24
	add r0, r0, #1
	cmp r7, r0
	bne _020B3C40
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_020B3C24:
	mov r0, #0xc
	str r0, [r5]
	mov r0, #0
	str r0, [r4]
	str r4, [r5, #4]
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_020B3C40:
	mov r0, r6
	mov r1, r4
	bl FUN_020B3890
	stm r5, {r0, r4}
	str r7, [r4, #0xc]
	ldr r0, [r5]
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_020B3C68:
	ldrb r0, [r6, #8]
	bl FUN_020B35EC
	movs r7, r0
	bne _020B3C98
	ldrb r1, [r6, #8]
	ldr r0, _020B3CE8 @ =0x021D6FB4
	bl FUN_020B3808
	ldr r0, _020B3CE8 @ =0x021D6FB4
	mov r1, #3
	bl FUN_020B369C
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_020B3C98:
	mov r1, r6
	bl FUN_020B3984
	mov r4, r0
	add r0, r4, #2
	cmp r0, #1
	bhi _020B3CC0
	mov r0, r7
	bl FUN_020B3074
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_020B3CC0:
	mov r0, r6
	mov r1, r7
	bl FUN_020B3890
	stm r5, {r0, r7}
	str r4, [r7, #0xc]
	ldr r0, [r5]
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020B3CE8: .4byte 0x021D6FB4
	arm_func_end FUN_020B3BB0

	arm_func_start FUN_020B3CEC
FUN_020B3CEC: @ 0x020B3CEC
	push {r4, r5, r6, lr}
	ldr r2, _020B3E74 @ =0x021D6F90
	mov r5, r0
	ldr r0, [r2, #0x3c]
	mov r4, r1
	cmp r0, #2
	bne _020B3D9C
	ldrb r1, [r2, #0x40]
	ldrb r0, [r5, #8]
	cmp r1, r0
	bne _020B3D8C
	ldr r0, _020B3E78 @ =0x021D6FCC
	mov r1, r5
	bl FUN_020B3984
	mov r6, r0
	mvn r1, #2
	cmp r6, r1
	beq _020B3D68
	add r0, r1, #1
	cmp r6, r0
	beq _020B3D50
	add r0, r1, #2
	cmp r6, r0
	beq _020B3D68
	b _020B3D70
_020B3D50:
	mov r0, #0xc
	str r0, [r4]
	mov r0, #0
	str r0, [r4, #4]
	mov r0, #1
	pop {r4, r5, r6, pc}
_020B3D68:
	mov r0, #0
	pop {r4, r5, r6, pc}
_020B3D70:
	ldr r1, _020B3E78 @ =0x021D6FCC
	mov r0, r5
	bl FUN_020B3890
	ldr r1, _020B3E78 @ =0x021D6FCC
	stm r4, {r0, r1}
	str r6, [r1, #0xc]
	b _020B3E2C
_020B3D8C:
	mov r0, #1
	bl FUN_020B37C8
	mov r0, #0
	pop {r4, r5, r6, pc}
_020B3D9C:
	ldrb r1, [r5, #8]
	ldr r2, _020B3E74 @ =0x021D6F90
	cmp r1, #0
	movne r0, #1
	lslne r3, r0, r1
	ldr r0, [r2, #4]
	moveq r3, #1
	tst r0, r3
	moveq r0, #0
	popeq {r4, r5, r6, pc}
	strb r1, [r2, #0x40]
	mov r3, #2
	str r3, [r2, #0x3c]
	mov r3, #0
	ldr r0, _020B3E78 @ =0x021D6FCC
	mov r1, r5
	str r3, [r2, #0x48]
	bl FUN_020B3984
	mov r6, r0
	mvn r1, #2
	cmp r6, r1
	addne r0, r1, #1
	cmpne r6, r0
	addne r0, r1, #2
	cmpne r6, r0
	bne _020B3E14
	ldr r1, _020B3E74 @ =0x021D6F90
	mov r0, #0
	str r0, [r1, #0x3c]
	pop {r4, r5, r6, pc}
_020B3E14:
	ldr r1, _020B3E78 @ =0x021D6FCC
	mov r0, r5
	bl FUN_020B3890
	ldr r1, _020B3E78 @ =0x021D6FCC
	stm r4, {r0, r1}
	str r6, [r1, #0xc]
_020B3E2C:
	ldr r0, [r4]
	cmp r0, #0xa
	bne _020B3E54
	mov r0, #1
	bl FUN_020B37C8
	bl FUN_020D34B0
	ldr r2, _020B3E74 @ =0x021D6F90
	str r0, [r2, #8]
	str r1, [r2, #0xc]
	b _020B3E6C
_020B3E54:
	mov r0, #0
	bl FUN_020B37C8
	ldr r0, _020B3E74 @ =0x021D6F90
	mov r1, #0
	str r1, [r0, #8]
	str r1, [r0, #0xc]
_020B3E6C:
	mov r0, #1
	pop {r4, r5, r6, pc}
	.align 2, 0
_020B3E74: .4byte 0x021D6F90
_020B3E78: .4byte 0x021D6FCC
	arm_func_end FUN_020B3CEC

	arm_func_start FUN_020B3E7C
FUN_020B3E7C: @ 0x020B3E7C
	push {r3, r4, r5, lr}
	mov r5, r0
	ldrb r0, [r5, #4]
	mov r4, r1
	cmp r0, #0xff
	ldrbeq r0, [r5, #6]
	cmpeq r0, #4
	moveq r0, #0
	popeq {r3, r4, r5, pc}
	ldrb r0, [r5, #8]
	bl FUN_020B3B30
	cmp r0, #0
	beq _020B3ED0
	mov r1, #2
	str r1, [r4]
	str r0, [r4, #4]
	mov r2, #0
	str r2, [r0]
	bl FUN_020B369C
	mov r0, #1
	pop {r3, r4, r5, pc}
_020B3ED0:
	ldrb r1, [r5, #8]
	ldr r0, _020B3EF0 @ =0x021D6FB4
	bl FUN_020B3808
	ldr r0, _020B3EF0 @ =0x021D6FB4
	mov r1, #2
	bl FUN_020B369C
	mov r0, #0
	pop {r3, r4, r5, pc}
	.align 2, 0
_020B3EF0: .4byte 0x021D6FB4
	arm_func_end FUN_020B3E7C

	arm_func_start FUN_020B3EF4
FUN_020B3EF4: @ 0x020B3EF4
	push {r3, lr}
	ldr r3, _020B4008 @ =0x021D8498
	ldr r2, [r3, #0x10]
	cmp r2, #2
	movne r0, #0
	popne {r3, pc}
	ldrb ip, [r3, #1]
	ldrb r2, [r0, #8]
	cmp ip, r2
	movne r0, #0
	popne {r3, pc}
	ldrb r2, [r0, #0xa]
	cmp r2, #0
	beq _020B3F38
	cmp r2, #1
	beq _020B3F84
	b _020B3FF8
_020B3F38:
	ldr r0, _020B400C @ =0x021D6F90
	ldr r2, [r0, #0x3c]
	cmp r2, #0
	moveq r0, #0
	popeq {r3, pc}
	ldr r0, [r0, #0x48]
	mov r3, #0
	cmp r0, #5
	cmpne r0, #2
	moveq r0, #9
	streq r0, [r1]
	movne r0, #5
	strne r0, [r1]
	ldr r0, _020B400C @ =0x021D6F90
	ldr r2, _020B4010 @ =0x021D6FCC
	str r3, [r0, #0x3c]
	str r3, [r0, #0x48]
	str r2, [r1, #4]
	b _020B4000
_020B3F84:
	ldr r2, _020B400C @ =0x021D6F90
	mov lr, #2
	str lr, [r2, #0x3c]
	ldrb ip, [r0, #0xb]
	ldrb r3, [r3]
	cmp ip, r3
	bne _020B3FB4
	str lr, [r2, #0x48]
	mov r3, #7
	str r3, [r1]
	ldr r3, [r0, #0xc]
	b _020B3FDC
_020B3FB4:
	mov r3, #3
	str r3, [r2, #0x48]
	mov r2, #6
	str r2, [r1]
	ldrb r3, [r0, #0xb]
	cmp r3, #0
	movne r2, #1
	lslne r3, r2, r3
	ldr r2, _020B400C @ =0x021D6F90
	moveq r3, #1
_020B3FDC:
	str r3, [r2, #0x44]
	ldrb r3, [r0, #0xb]
	ldr r0, _020B400C @ =0x021D6F90
	ldr r2, _020B4010 @ =0x021D6FCC
	strb r3, [r0, #0x41]
	str r2, [r1, #4]
	b _020B4000
_020B3FF8:
	mov r0, #0
	pop {r3, pc}
_020B4000:
	mov r0, #1
	pop {r3, pc}
	.align 2, 0
_020B4008: .4byte 0x021D8498
_020B400C: .4byte 0x021D6F90
_020B4010: .4byte 0x021D6FCC
	arm_func_end FUN_020B3EF4

	arm_func_start FUN_020B4014
FUN_020B4014: @ 0x020B4014
	push {r4, r5, r6, lr}
	ldr r3, _020B40D0 @ =0xE525982B
	mov r2, r1
	umull r1, r4, r2, r3
	ldr r1, _020B40D4 @ =0x021D6FE4
	lsr r4, r4, #0xa
	str r0, [r1, #4]
	cmp r4, #4
	blo _020B4040
	cmp r4, #0x48
	bls _020B4048
_020B4040:
	mov r0, #0
	pop {r4, r5, r6, pc}
_020B4048:
	cmp r0, #0
	moveq r0, #0
	popeq {r4, r5, r6, pc}
	tst r0, #0x1f
	movne r0, #0
	strne r0, [r1, #4]
	popne {r4, r5, r6, pc}
	mov r1, r0
	mov r0, #0
	bl FUN_020D4858
	subs lr, r4, #1
	mov r5, #0
	beq _020B40A8
	ldr r2, _020B40D4 @ =0x021D6FE4
	ldr r0, _020B40D8 @ =0x00000478
	mov r6, r5
_020B4088:
	ldr ip, [r2, #4]
	add r5, r5, #1
	mla r3, r5, r0, ip
	add r1, r6, #0x78
	str r3, [ip, r6]
	cmp r5, lr
	add r6, r1, #0x400
	blo _020B4088
_020B40A8:
	ldr r1, _020B40D4 @ =0x021D6FE4
	ldr r0, _020B40D8 @ =0x00000478
	ldr r2, [r1, #4]
	mov r3, #0
	mla r0, r4, r0, r2
	str r3, [r0, #-0x478]
	ldr r2, [r1, #4]
	mov r0, #1
	str r2, [r1]
	pop {r4, r5, r6, pc}
	.align 2, 0
_020B40D0: .4byte 0xE525982B
_020B40D4: .4byte 0x021D6FE4
_020B40D8: .4byte 0x00000478
	arm_func_end FUN_020B4014

	arm_func_start FUN_020B40DC
FUN_020B40DC: @ 0x020B40DC
	ldr r0, _020B40F0 @ =0x021D6FE4
	mov r1, #0
	str r1, [r0]
	str r1, [r0, #4]
	bx lr
	.align 2, 0
_020B40F0: .4byte 0x021D6FE4
	arm_func_end FUN_020B40DC

	arm_func_start FUN_020B40F4
FUN_020B40F4: @ 0x020B40F4
	push {r4, lr}
	mov r4, #0
	bl FUN_020D3A38
	ldr r1, _020B4124 @ =0x021D6FE4
	ldr r3, [r1]
	cmp r3, #0
	ldrne r2, [r3]
	movne r4, r3
	strne r2, [r1]
	bl FUN_020D3A4C
	mov r0, r4
	pop {r4, pc}
	.align 2, 0
_020B4124: .4byte 0x021D6FE4
	arm_func_end FUN_020B40F4

	arm_func_start FUN_020B4128
FUN_020B4128: @ 0x020B4128
	push {r4, lr}
	mov r4, r0
	bl FUN_020D3A38
	ldr r1, _020B4158 @ =0x021D6FE4
	mov r2, #0
	ldr r3, [r1]
	str r3, [r4]
	str r4, [r1]
	str r2, [r4, #4]
	str r2, [r4, #8]
	bl FUN_020D3A4C
	pop {r4, pc}
	.align 2, 0
_020B4158: .4byte 0x021D6FE4
	arm_func_end FUN_020B4128

	arm_func_start FUN_020B415C
FUN_020B415C: @ 0x020B415C
	ldr r0, _020B419C @ =0x021D6FF8
	mov r2, #0
	mov r1, #0x1000000
_020B4168:
	str r1, [r0, r2, lsl #2]
	add r2, r2, #1
	cmp r2, #4
	blt _020B4168
	ldr r1, _020B41A0 @ =0x021D6FEC
	mov r2, #0
	str r2, [r1, #4]
	ldr r0, _020B41A4 @ =_02110904
	str r2, [r1]
	str r2, [r0]
	str r2, [r0, #4]
	str r2, [r1, #8]
	bx lr
	.align 2, 0
_020B419C: .4byte 0x021D6FF8
_020B41A0: .4byte 0x021D6FEC
_020B41A4: .4byte _02110904
	arm_func_end FUN_020B415C

	arm_func_start FUN_020B41A8
FUN_020B41A8: @ 0x020B41A8
	push {r3, lr}
	movs r1, r0
	popeq {r3, pc}
	ldr r0, _020B41C4 @ =_02110904
	mov r2, #0x10
	bl FUN_020D4A50
	pop {r3, pc}
	.align 2, 0
_020B41C4: .4byte _02110904
	arm_func_end FUN_020B41A8

	arm_func_start FUN_020B41C8
FUN_020B41C8: @ 0x020B41C8
	push {r4, lr}
	ldr r3, _020B4394 @ =_02110904
	lsr ip, r1, #8
	str ip, [r3, #4]
	cmp r2, #0
	strbne ip, [r2]
	ldr r2, _020B4394 @ =_02110904
	ldr r2, [r2]
	cmp r2, #0
	bne _020B42DC
	mov ip, #0
	ldr r3, _020B4398 @ =0x021D6FF8
	mov lr, ip
_020B41FC:
	ldr r2, [r3, lr, lsl #2]
	add lr, lr, #1
	cmp lr, #4
	add ip, ip, r2
	blt _020B41FC
	ldr r3, _020B439C @ =0x040002B0
	mov r2, #0
	strh r2, [r3]
	lsr r2, ip, #2
	str r2, [r3, #8]
_020B4224:
	ldrh r2, [r3]
	tst r2, #0x8000
	bne _020B4224
	ldr r2, _020B43A0 @ =0x040002B4
	cmp r1, #0
	ldr r2, [r2]
	beq _020B42B8
	cmp r1, r2, lsl #1
	blo _020B42B8
	mov r3, #0
	ldr r2, _020B4398 @ =0x021D6FF8
	mov ip, r3
_020B4254:
	ldr r1, [r2, ip, lsl #2]
	add ip, ip, #1
	cmp ip, #4
	add r3, r3, r1
	blo _020B4254
	ldr r2, _020B439C @ =0x040002B0
	mov r1, #0
	strh r1, [r2]
	lsr r1, r3, #2
	str r1, [r2, #8]
_020B427C:
	ldrh r1, [r2]
	tst r1, #0x8000
	bne _020B427C
	ldr r1, _020B43A0 @ =0x040002B4
	ldr r2, _020B43A4 @ =0x021D6FEC
	ldr r1, [r1]
	mov r3, #0
	add r1, r1, r1, lsl #1
	lsr r1, r1, #1
	str r1, [r2]
	ldr r1, _020B4394 @ =_02110904
	str r3, [r2, #4]
	mov lr, #1
	str lr, [r1]
	b _020B42BC
_020B42B8:
	mov lr, #0
_020B42BC:
	ldr r1, _020B43A4 @ =0x021D6FEC
	ldr r3, _020B4398 @ =0x021D6FF8
	ldr ip, [r1, #4]
	add r2, ip, #1
	and r2, r2, #3
	str r0, [r3, ip, lsl #2]
	str r2, [r1, #4]
	b _020B438C
_020B42DC:
	ldr r1, _020B43A4 @ =0x021D6FEC
	mov lr, #0
	ldr ip, [r1, #4]
	ldr r3, _020B4398 @ =0x021D6FF8
	add r2, ip, #1
	and r2, r2, #3
	mov r4, lr
	str r0, [r3, ip, lsl #2]
	str r2, [r1, #4]
_020B4300:
	ldr r0, [r3, r4, lsl #2]
	add r4, r4, #1
	cmp r4, #4
	add lr, lr, r0
	blt _020B4300
	ldr r1, _020B439C @ =0x040002B0
	mov r0, #0
	strh r0, [r1]
	lsr r0, lr, #2
	str r0, [r1, #8]
_020B4328:
	ldrh r0, [r1]
	tst r0, #0x8000
	bne _020B4328
	ldr r0, _020B43A0 @ =0x040002B4
	ldr r1, _020B43A4 @ =0x021D6FEC
	ldr r2, [r0]
	ldr r0, [r1]
	cmp r2, r0
	bhi _020B4380
	ldr r2, [r1, #8]
	ldr r0, _020B4394 @ =_02110904
	add r3, r2, #1
	str r3, [r1, #8]
	ldr r2, [r0, #8]
	cmp r3, r2
	ble _020B4388
	mov r2, #0
	str r2, [r0]
	str r2, [r1, #8]
	str r2, [r1, #4]
	mov r0, #3
	pop {r4, pc}
_020B4380:
	mov r0, #0
	str r0, [r1, #8]
_020B4388:
	mov lr, #2
_020B438C:
	mov r0, lr
	pop {r4, pc}
	.align 2, 0
_020B4394: .4byte _02110904
_020B4398: .4byte 0x021D6FF8
_020B439C: .4byte 0x040002B0
_020B43A0: .4byte 0x040002B4
_020B43A4: .4byte 0x021D6FEC
	arm_func_end FUN_020B41C8

	arm_func_start FUN_020B43A8
FUN_020B43A8: @ 0x020B43A8
	mov r2, #0xf
	ldr r1, _020B43C8 @ =_02110904
	mov r0, #0x44
	smulbb r0, r2, r0
	str r2, [r1, #8]
	ldr ip, _020B43CC @ =FUN_020B415C
	str r0, [r1, #0xc]
	bx ip
	.align 2, 0
_020B43C8: .4byte _02110904
_020B43CC: .4byte FUN_020B415C
	arm_func_end FUN_020B43A8

	arm_func_start FUN_020B43D0
FUN_020B43D0: @ 0x020B43D0
	push {r4, r5, r6, r7, r8, lr}
	ldrsh r2, [r0]
	ldr r3, _020B44A8 @ =0x021D7008
	ldr r5, _020B44AC @ =0x00000E9F
	ldr r4, [r3, #4]
	smulbb r7, r2, r5
	ldr r2, [r3, #0x10]
	ldr r6, _020B44B0 @ =0x00000D3E
	add r4, r7, r4
	mla r4, r2, r6, r4
	asr r4, r4, #0xc
	mul lr, r4, r4
	lsr r1, r1, #1
	str r4, [r3, #0x10]
	rsb r2, r7, #0
	str r2, [r3, #4]
	cmp r1, #1
	asr ip, lr, #0x1f
	mov r3, #1
	bls _020B4468
_020B4420:
	lsl r7, r3, #1
	ldrsh r8, [r0, r7]
	add r7, r0, r3, lsl #1
	add r3, r3, #1
	smulbb r8, r8, r5
	add r2, r8, r2
	mla r2, r4, r6, r2
	strh r4, [r7, #-2]
	asr r4, r2, #0xc
	mul r2, r4, r4
	adds lr, lr, r2
	adc ip, ip, r2, asr #31
	rsb r2, r8, #0
	cmp r3, r1
	blo _020B4420
	ldr r3, _020B44A8 @ =0x021D7008
	str r2, [r3, #4]
	str r4, [r3, #0x10]
_020B4468:
	add r0, r0, r1, lsl #1
	strh r4, [r0, #-2]
	ldr r2, _020B44B4 @ =0x04000280
	mov r0, #1
	strh r0, [r2]
	str lr, [r2, #0x10]
	str ip, [r2, #0x14]
	str r1, [r2, #0x18]
	mov r0, #0
	str r0, [r2, #0x1c]
_020B4490:
	ldrh r0, [r2]
	tst r0, #0x8000
	bne _020B4490
	ldr r0, _020B44B8 @ =0x040002A0
	ldr r0, [r0]
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0
_020B44A8: .4byte 0x021D7008
_020B44AC: .4byte 0x00000E9F
_020B44B0: .4byte 0x00000D3E
_020B44B4: .4byte 0x04000280
_020B44B8: .4byte 0x040002A0
	arm_func_end FUN_020B43D0

	arm_func_start FUN_020B44BC
FUN_020B44BC: @ 0x020B44BC
	push {r3, lr}
	ldr r0, _020B4520 @ =0x021D7008
	mov r2, #0
	ldr r1, _020B4524 @ =0x0000019D
	str r2, [r0, #0xc]
	str r1, [r0, #8]
	ldr ip, _020B4528 @ =_02110914
	ldr r0, _020B452C @ =0x021D748C
	mov lr, r2
_020B44E0:
	lsl r1, r2, #1
	add r2, r2, #1
	strh lr, [r0, r1]
	cmp r2, #0x800
	blt _020B44E0
	ldr r2, _020B4530 @ =0x021D7034
	ldr r0, _020B4534 @ =0x021D701C
	mov r3, #0
_020B4500:
	lsl r1, lr, #1
	ldrsh r1, [ip, r1]
	str r3, [r2, lr, lsl #2]
	str r1, [r0, lr, lsl #2]
	add lr, lr, #1
	cmp lr, #6
	blt _020B4500
	pop {r3, pc}
	.align 2, 0
_020B4520: .4byte 0x021D7008
_020B4524: .4byte 0x0000019D
_020B4528: .4byte _02110914
_020B452C: .4byte 0x021D748C
_020B4530: .4byte 0x021D7034
_020B4534: .4byte 0x021D701C
	arm_func_end FUN_020B44BC

	arm_func_start FUN_020B4538
FUN_020B4538: @ 0x020B4538
	ldr ip, _020B4548 @ =FUN_020D48B4
	mov r2, r1
	ldr r1, _020B454C @ =0x021D704C
	bx ip
	.align 2, 0
_020B4548: .4byte FUN_020D48B4
_020B454C: .4byte 0x021D704C
	arm_func_end FUN_020B4538

	arm_func_start FUN_020B4550
FUN_020B4550: @ 0x020B4550
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0x10
	mov r4, #0
	str r4, [sp, #8]
	str r4, [sp, #0xc]
	mov r8, r4
	lsrs r2, r2, #1
	beq _020B4678
	ldr lr, _020B4754 @ =0x3FFF8000
	ldr ip, _020B4758 @ =0x021D7008
_020B4578:
	lsl r4, r8, #1
	ldr r7, [ip, #0xc]
	ldrsh r6, [r1, r4]
	ldr r4, _020B475C @ =0x021D748C
	lsl r5, r7, #1
	strh r6, [r4, r5]
	ldr r4, [ip, #8]
	str r4, [sp]
	lsl r5, r4, #1
	ldr r4, _020B475C @ =0x021D748C
	ldrsh r6, [r4, r5]
	str r6, [ip, #0x2c]
	ldr sb, [ip, #0x3c]
	ldr sl, [ip, #0x24]
	ldr r5, [ip, #0x40]
	mul sl, sb, sl
	ldr r4, [ip, #0x28]
	str sb, [sp, #4]
	mla r4, r5, r4, sl
	mov r5, sb
	str r5, [ip, #0x40]
	ldr sb, [ip, #0x38]
	ldr r5, [ip, #0x20]
	mla r5, sb, r5, r4
	str sb, [ip, #0x3c]
	ldr sb, [ip, #0x34]
	ldr r4, [ip, #0x1c]
	mla r5, sb, r4, r5
	str sb, [ip, #0x38]
	ldr sb, [ip, #0x30]
	ldr r4, [ip, #0x18]
	mla r5, sb, r4, r5
	str sb, [ip, #0x34]
	ldr r4, [ip, #0x14]
	mla r4, r6, r4, r5
	cmp r4, lr
	str r6, [ip, #0x30]
	movgt r4, lr
	bgt _020B461C
	cmp r4, #0xc0000000
	movlt r4, #0xc0000000
_020B461C:
	add r5, r7, #1
	and r5, r5, lr, lsr #19
	str r5, [ip, #0xc]
	ldr r5, [sp]
	lsl r6, r8, #1
	add r5, r5, #1
	and r5, r5, lr, lsr #19
	str r5, [ip, #8]
	asr r4, r4, #0xf
	strh r4, [r1, r6]
	ldrsh r5, [r1, r6]
	ldrsh r4, [r0, r6]
	add r8, r8, #1
	smulbb r5, r5, r5
	strh r4, [r1, r6]
	ldr r4, [sp, #8]
	adds r4, r4, r5
	str r4, [sp, #8]
	ldr r4, [sp, #0xc]
	adc r4, r4, r5, asr #31
	str r4, [sp, #0xc]
	cmp r8, r2
	blo _020B4578
_020B4678:
	ldr r4, _020B4760 @ =0x04000280
	mov r1, #1
	strh r1, [r4]
	ldr r1, [sp, #8]
	str r1, [r4, #0x10]
	ldr r1, [sp, #0xc]
	str r1, [r4, #0x14]
	str r2, [r4, #0x18]
	mov r1, #0
	str r1, [r4, #0x1c]
_020B46A0:
	ldrh r1, [r4]
	tst r1, #0x8000
	bne _020B46A0
	ldr r5, _020B4764 @ =0x040002A0
	mov r1, #0
	ldr r4, [r5]
	strh r1, [r5, #0x10]
	str r4, [r5, #0x18]
_020B46C0:
	ldrh r1, [r5, #0x10]
	tst r1, #0x8000
	bne _020B46C0
	ldr r1, _020B4768 @ =0x040002B4
	ldr r4, [r1]
	add r1, r4, r4, lsl #1
	cmp r1, r3, lsl #1
	bhs _020B46F4
	ldr r0, _020B4758 @ =0x021D7008
	mov r1, #0
	add sp, sp, #0x10
	strh r1, [r0]
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_020B46F4:
	cmp r3, r4
	ldrlo r1, _020B4758 @ =0x021D7008
	movlo r3, #4
	strhlo r3, [r1]
	ldr r1, _020B4758 @ =0x021D7008
	mov r5, #0
	ldrsh r3, [r1]
	cmp r3, #4
	addlt r3, r3, #1
	strhlt r3, [r1]
	cmp r2, #0
	addls sp, sp, #0x10
	popls {r4, r5, r6, r7, r8, sb, sl, pc}
	ldr r1, _020B4758 @ =0x021D7008
	ldrsh r4, [r1]
_020B4730:
	lsl r3, r5, #1
	ldrsh r1, [r0, r3]
	add r5, r5, #1
	cmp r5, r2
	asr r1, r1, r4
	strh r1, [r0, r3]
	blo _020B4730
	add sp, sp, #0x10
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0
_020B4754: .4byte 0x3FFF8000
_020B4758: .4byte 0x021D7008
_020B475C: .4byte 0x021D748C
_020B4760: .4byte 0x04000280
_020B4764: .4byte 0x040002A0
_020B4768: .4byte 0x040002B4
	arm_func_end FUN_020B4550

	arm_func_start FUN_020B476C
FUN_020B476C: @ 0x020B476C
	push {r3, lr}
	mov ip, r1
	mov r3, r2
	ldr r1, _020B4788 @ =0x021D704C
	mov r2, ip
	bl FUN_020B4550
	pop {r3, pc}
	.align 2, 0
_020B4788: .4byte 0x021D704C
	arm_func_end FUN_020B476C

	arm_func_start FUN_020B478C
FUN_020B478C: @ 0x020B478C
	push {r4, r5, r6, lr}
	mov r4, #0
	lsrs lr, r3, #1
	popeq {r4, r5, r6, pc}
	mov r3, #0x8000
	rsb r3, r3, #0
	lsr ip, r3, #0x11
_020B47A8:
	lsl r5, r4, #1
	ldrsh r6, [r0, r5]
	ldrsh r5, [r1, r5]
	add r6, r6, r5
	cmp r6, r3, lsr #17
	movgt r6, ip
	bgt _020B47CC
	cmp r6, r3
	movlt r6, r3
_020B47CC:
	lsl r5, r4, #1
	strh r6, [r2, r5]
	add r6, r0, r4, lsl #1
	add r5, r1, r4, lsl #1
	ldrsh r6, [r6, #2]
	ldrsh r5, [r5, #2]
	add r6, r6, r5
	cmp r6, r3, lsr #17
	movgt r6, ip
	bgt _020B47FC
	cmp r6, r3
	movlt r6, r3
_020B47FC:
	add r5, r2, r4, lsl #1
	strh r6, [r5, #2]
	add r6, r0, r4, lsl #1
	add r5, r1, r4, lsl #1
	ldrsh r6, [r6, #4]
	ldrsh r5, [r5, #4]
	add r6, r6, r5
	cmp r6, r3, lsr #17
	movgt r6, ip
	bgt _020B482C
	cmp r6, r3
	movlt r6, r3
_020B482C:
	add r5, r2, r4, lsl #1
	strh r6, [r5, #4]
	add r6, r0, r4, lsl #1
	add r5, r1, r4, lsl #1
	ldrsh r6, [r6, #6]
	ldrsh r5, [r5, #6]
	add r6, r6, r5
	cmp r6, r3, lsr #17
	movgt r6, ip
	bgt _020B485C
	cmp r6, r3
	movlt r6, r3
_020B485C:
	add r5, r2, r4, lsl #1
	add r4, r4, #4
	strh r6, [r5, #6]
	cmp r4, lr
	blo _020B47A8
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020B478C

	arm_func_start FUN_020B4874
FUN_020B4874: @ 0x020B4874
	push {r4, lr}
	mov r4, r0
	ldr r0, _020B49A0 @ =_version_Abiosso_libVCT
	bl OSi_ReferSymbol
	cmp r4, #0
	moveq r0, #0
	popeq {r4, pc}
	ldr r0, _020B49A4 @ =0x021D848C
	ldr r0, [r0, #8]
	cmp r0, #0
	movne r0, #1
	popne {r4, pc}
	ldr r0, [r4, #8]
	cmp r0, #1
	cmpne r0, #2
	cmpne r0, #3
	movne r0, #0
	popne {r4, pc}
	ldr r0, [r4, #0x18]
	cmp r0, #0
	moveq r0, #0
	popeq {r4, pc}
	ldr r2, [r4, #0x10]
	cmp r2, #0
	ldrne r0, [r4, #0x14]
	cmpne r0, #0
	moveq r0, #0
	popeq {r4, pc}
	lsr r1, r2, #0x1f
	rsb r0, r1, r2, lsl #27
	adds r0, r1, r0, ror #27
	movne r0, #0
	popne {r4, pc}
	ldr r0, _020B49A8 @ =0x021D8498
	mov r1, #0
	mov r2, #0x18
	bl FUN_020D4994
	ldr r2, [r4, #0x18]
	ldr r1, _020B49A4 @ =0x021D848C
	mov r0, #0
	str r2, [r1, #0x10]
	ldr r2, [r4, #0x1c]
	str r2, [r1, #0x14]
	ldr r2, [r4, #8]
	str r2, [r1, #0x1c]
	str r0, [r1, #0x18]
	ldrb r2, [r4, #0xc]
	cmp r2, #0x20
	pophs {r4, pc}
	strb r2, [r1, #0xc]
	ldr r0, [r4, #0x10]
	ldr r1, [r4, #0x14]
	bl FUN_020B4014
	cmp r0, #0
	bne _020B495C
	bl FUN_020B40DC
	mov r0, #0
	pop {r4, pc}
_020B495C:
	mov r0, r4
	bl FUN_020B3398
	cmp r0, #0
	bne _020B4978
	bl FUN_020B40DC
	mov r0, #0
	pop {r4, pc}
_020B4978:
	bl FUN_020B1584
	cmp r0, #0
	ldrne r1, _020B49A4 @ =0x021D848C
	movne r0, #1
	strne r0, [r1, #8]
	popne {r4, pc}
	bl FUN_020B34AC
	bl FUN_020B40DC
	mov r0, #0
	pop {r4, pc}
	.align 2, 0
_020B49A0: .4byte _version_Abiosso_libVCT
_020B49A4: .4byte 0x021D848C
_020B49A8: .4byte 0x021D8498
	arm_func_end FUN_020B4874

	arm_func_start FUN_020B49AC
FUN_020B49AC: @ 0x020B49AC
	push {r3, lr}
	bl FUN_020B1680
	bl FUN_020B34AC
	bl FUN_020B40DC
	ldr r0, _020B49D0 @ =0x021D848C
	mov r1, #0
	str r1, [r0, #0x1c]
	str r1, [r0, #8]
	pop {r3, pc}
	.align 2, 0
_020B49D0: .4byte 0x021D848C
	arm_func_end FUN_020B49AC

	arm_func_start FUN_020B49D4
FUN_020B49D4: @ 0x020B49D4
	push {r3, lr}
	ldr r0, _020B4A14 @ =0x021D848C
	ldr r1, [r0, #8]
	cmp r1, #0
	popeq {r3, pc}
	ldr r1, [r0]
	add r1, r1, #1
	str r1, [r0]
	tst r1, #0xf
	bne _020B4A00
	bl FUN_020B34C4
_020B4A00:
	bl FUN_020B22E4
	cmp r0, #0
	popeq {r3, pc}
	bl FUN_020B2214
	pop {r3, pc}
	.align 2, 0
_020B4A14: .4byte 0x021D848C
	arm_func_end FUN_020B49D4

	arm_func_start FUN_020B4A18
FUN_020B4A18: @ 0x020B4A18
	push {r4, lr}
	sub sp, sp, #8
	add r3, sp, #0
	mov r4, r0
	bl FUN_020B4A8C
	cmp r0, #0
	beq _020B4A7C
	cmp r0, #1
	beq _020B4A48
	cmp r0, #2
	beq _020B4A70
	b _020B4A7C
_020B4A48:
	ldr r0, _020B4A88 @ =0x021D848C
	ldr r1, [sp]
	ldr r2, [sp, #4]
	ldr r3, [r0, #0x14]
	ldr ip, [r0, #0x10]
	mov r0, r4
	blx ip
	add sp, sp, #8
	mov r0, #1
	pop {r4, pc}
_020B4A70:
	add sp, sp, #8
	mov r0, #0
	pop {r4, pc}
_020B4A7C:
	mov r0, #1
	add sp, sp, #8
	pop {r4, pc}
	.align 2, 0
_020B4A88: .4byte 0x021D848C
	arm_func_end FUN_020B4A18

	arm_func_start FUN_020B4A8C
FUN_020B4A8C: @ 0x020B4A8C
	push {r3, r4, r5, r6, r7, lr}
	movs r6, r1
	mov r7, r0
	mov r5, r2
	mov r4, r3
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	ldr r1, [r6]
	ldr r0, _020B4B60 @ =0x5F564354
	cmp r1, r0
	movne r0, #2
	popne {r3, r4, r5, r6, r7, pc}
	ldr r0, _020B4B64 @ =0x021D848C
	ldr r1, [r0, #0x1c]
	cmp r1, #0
	ldrne r0, [r0, #8]
	cmpne r0, #0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	mov r0, #0
	str r0, [r4]
	str r0, [r4, #4]
	bl FUN_020D34B0
	ldrb r2, [r6, #4]
	and r3, r2, #0xf0
	cmp r3, #0x40
	bne _020B4B28
	ldr r2, _020B4B64 @ =0x021D848C
	mov r3, r0
	ldr r4, [r2, #4]
	mov r0, r7
	add r4, r4, #1
	str r4, [r2, #4]
	str r1, [sp]
	mov r1, r6
	mov r2, r5
	bl FUN_020B2028
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_020B4B28:
	cmp r2, #0
	cmpne r2, #0xff
	bne _020B4B58
	mov r0, r7
	mov r1, r6
	mov r2, r5
	mov r3, r4
	bl FUN_020B3570
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_020B4B58:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020B4B60: .4byte 0x5F564354
_020B4B64: .4byte 0x021D848C
	arm_func_end FUN_020B4A8C

	arm_func_start FUN_020B4B68
FUN_020B4B68: @ 0x020B4B68
	mov r2, #0
	str r2, [r0]
	str r2, [r0, #4]
	strh r2, [r0, #8]
	strh r1, [r0, #0xa]
	bx lr
	arm_func_end FUN_020B4B68

	arm_func_start FUN_020B4B80
FUN_020B4B80: @ 0x020B4B80
	ldrh r3, [r0, #0xa]
	mov r2, #0
	add ip, r1, r3
	str r2, [ip, #4]
	str r2, [r1, r3]
	str r1, [r0]
	str r1, [r0, #4]
	ldrh r1, [r0, #8]
	add r1, r1, #1
	strh r1, [r0, #8]
	bx lr
	arm_func_end FUN_020B4B80

	arm_func_start FUN_020B4BAC
FUN_020B4BAC: @ 0x020B4BAC
	push {r3, lr}
	ldr r2, [r0]
	cmp r2, #0
	bne _020B4BC4
	bl FUN_020B4B80
	pop {r3, pc}
_020B4BC4:
	ldrh ip, [r0, #0xa]
	ldr r3, [r0, #4]
	mov r2, #0
	str r3, [r1, ip]
	add r3, r1, ip
	str r2, [r3, #4]
	ldrh r2, [r0, #0xa]
	ldr r3, [r0, #4]
	add r2, r3, r2
	str r1, [r2, #4]
	str r1, [r0, #4]
	ldrh r1, [r0, #8]
	add r1, r1, #1
	strh r1, [r0, #8]
	pop {r3, pc}
	arm_func_end FUN_020B4BAC

	arm_func_start FUN_020B4C00
FUN_020B4C00: @ 0x020B4C00
	push {r3, lr}
	ldr r2, [r0]
	cmp r2, #0
	bne _020B4C18
	bl FUN_020B4B80
	pop {r3, pc}
_020B4C18:
	ldrh r3, [r0, #0xa]
	mov r2, #0
	str r2, [r1, r3]
	ldr r2, [r0]
	add r3, r1, r3
	str r2, [r3, #4]
	ldrh r2, [r0, #0xa]
	ldr r3, [r0]
	str r1, [r3, r2]
	str r1, [r0]
	ldrh r1, [r0, #8]
	add r1, r1, #1
	strh r1, [r0, #8]
	pop {r3, pc}
	arm_func_end FUN_020B4C00

	arm_func_start FUN_020B4C50
FUN_020B4C50: @ 0x020B4C50
	push {r3, lr}
	cmp r1, #0
	bne _020B4C68
	mov r1, r2
	bl FUN_020B4BAC
	pop {r3, pc}
_020B4C68:
	ldr r3, [r0]
	cmp r1, r3
	bne _020B4C80
	mov r1, r2
	bl FUN_020B4C00
	pop {r3, pc}
_020B4C80:
	ldrh lr, [r0, #0xa]
	ldr r3, [r1, lr]
	add ip, r2, lr
	str r3, [r2, lr]
	str r1, [ip, #4]
	add r3, r3, lr
	str r2, [r3, #4]
	ldrh r3, [r0, #0xa]
	str r2, [r1, r3]
	ldrh r1, [r0, #8]
	add r1, r1, #1
	strh r1, [r0, #8]
	pop {r3, pc}
	arm_func_end FUN_020B4C50

	arm_func_start FUN_020B4CB4
FUN_020B4CB4: @ 0x020B4CB4
	push {r3, lr}
	ldrh ip, [r0, #0xa]
	ldr r3, [r1, ip]
	add lr, r1, ip
	cmp r3, #0
	ldreq r1, [lr, #4]
	streq r1, [r0]
	ldrne r2, [lr, #4]
	addne r1, r3, ip
	strne r2, [r1, #4]
	ldr r3, [lr, #4]
	cmp r3, #0
	ldreq r1, [lr]
	streq r1, [r0, #4]
	ldrhne r1, [r0, #0xa]
	ldrne r2, [lr]
	strne r2, [r3, r1]
	mov r1, #0
	str r1, [lr]
	str r1, [lr, #4]
	ldrh r1, [r0, #8]
	sub r1, r1, #1
	strh r1, [r0, #8]
	pop {r3, pc}
	arm_func_end FUN_020B4CB4

	arm_func_start FUN_020B4D14
FUN_020B4D14: @ 0x020B4D14
	cmp r1, #0
	ldreq r0, [r0]
	ldrhne r0, [r0, #0xa]
	addne r0, r1, r0
	ldrne r0, [r0, #4]
	bx lr
	arm_func_end FUN_020B4D14

	arm_func_start FUN_020B4D2C
FUN_020B4D2C: @ 0x020B4D2C
	cmp r1, #0
	ldreq r0, [r0, #4]
	ldrhne r0, [r0, #0xa]
	ldrne r0, [r1, r0]
	bx lr
	arm_func_end FUN_020B4D2C

	arm_func_start FUN_020B4D40
FUN_020B4D40: @ 0x020B4D40
	push {r4, r5, r6, lr}
	mov r5, r1
	mov r1, #0
	mov r6, r0
	bl FUN_020B4D14
	movs r4, r0
	beq _020B4DA0
_020B4D5C:
	ldr r0, [r4, #0x18]
	cmp r0, r5
	bhi _020B4D8C
	ldr r0, [r4, #0x1c]
	cmp r5, r0
	bhs _020B4D8C
	mov r1, r5
	add r0, r4, #0xc
	bl FUN_020B4D40
	cmp r0, #0
	moveq r0, r4
	pop {r4, r5, r6, pc}
_020B4D8C:
	mov r0, r6
	mov r1, r4
	bl FUN_020B4D14
	movs r4, r0
	bne _020B4D5C
_020B4DA0:
	mov r0, #0
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020B4D40

	arm_func_start FUN_020B4DA8
FUN_020B4DA8: @ 0x020B4DA8
	push {r4, lr}
	ldr r4, _020B4DCC @ =0x021D84B4
	mov r1, r0
	mov r0, r4
	bl FUN_020B4D40
	cmp r0, #0
	addne r4, r0, #0xc
	mov r0, r4
	pop {r4, pc}
	.align 2, 0
_020B4DCC: .4byte 0x021D84B4
	arm_func_end FUN_020B4DA8

	arm_func_start FUN_020B4DD0
FUN_020B4DD0: @ 0x020B4DD0
	push {r4, lr}
	mov r4, r0
	ldrh r0, [sp, #8]
	str r1, [r4]
	mov ip, #0
	str r2, [r4, #0x18]
	bic r1, ip, #0xff
	and r0, r0, #0xff
	orr r2, r1, r0
	str r3, [r4, #0x1c]
	add r0, r4, #0xc
	mov r1, #4
	str r2, [r4, #0x20]
	bl FUN_020B4B68
	ldr r0, _020B4E44 @ =0x021D84B0
	ldr r0, [r0]
	cmp r0, #0
	bne _020B4E30
	ldr r0, _020B4E48 @ =0x021D84B4
	mov r1, #4
	bl FUN_020B4B68
	ldr r0, _020B4E44 @ =0x021D84B0
	mov r1, #1
	str r1, [r0]
_020B4E30:
	mov r0, r4
	bl FUN_020B4DA8
	mov r1, r4
	bl FUN_020B4BAC
	pop {r4, pc}
	.align 2, 0
_020B4E44: .4byte 0x021D84B0
_020B4E48: .4byte 0x021D84B4
	arm_func_end FUN_020B4DD0

	arm_func_start FUN_020B4E4C
FUN_020B4E4C: @ 0x020B4E4C
	push {r4, lr}
	mov r4, r0
	bl FUN_020B4DA8
	mov r1, r4
	bl FUN_020B4CB4
	pop {r4, pc}
	arm_func_end FUN_020B4E4C

	arm_func_start FUN_020B4E64
FUN_020B4E64: @ 0x020B4E64
	ldrh r2, [r1, #2]
	add r3, r1, #0x10
	asr r2, r2, #8
	and r2, r2, #0x7f
	lsl r2, r2, #0x10
	sub r2, r1, r2, lsr #16
	str r2, [r0]
	ldr r1, [r1, #4]
	add r1, r1, r3
	str r1, [r0, #4]
	bx lr
	arm_func_end FUN_020B4E64

	arm_func_start FUN_020B4E90
FUN_020B4E90: @ 0x020B4E90
	ldr r2, [r1, #8]
	ldr r1, [r1, #0xc]
	cmp r2, #0
	strne r1, [r2, #0xc]
	streq r1, [r0]
	cmp r1, #0
	strne r2, [r1, #8]
	streq r2, [r0, #4]
	mov r0, r2
	bx lr
	arm_func_end FUN_020B4E90

	arm_func_start FUN_020B4EB8
FUN_020B4EB8: @ 0x020B4EB8
	str r2, [r1, #8]
	cmp r2, #0
	ldrne r3, [r2, #0xc]
	strne r1, [r2, #0xc]
	ldreq r3, [r0]
	streq r1, [r0]
	str r3, [r1, #0xc]
	cmp r3, #0
	strne r1, [r3, #8]
	streq r1, [r0, #4]
	mov r0, r1
	bx lr
	arm_func_end FUN_020B4EB8

	arm_func_start FUN_020B4EE8
FUN_020B4EE8: @ 0x020B4EE8
	ldr r3, [r0]
	mov r2, #0
	strh r1, [r3]
	strh r2, [r3, #2]
	ldr r1, [r0, #4]
	add r0, r3, #0x10
	sub r0, r1, r0
	stmib r3, {r0, r2}
	mov r0, r3
	str r2, [r3, #0xc]
	bx lr
	arm_func_end FUN_020B4EE8

	arm_func_start FUN_020B4F14
FUN_020B4F14: @ 0x020B4F14
	push {r3, r4, lr}
	sub sp, sp, #0xc
	mov r3, r1
	mov r4, r0
	str r2, [sp]
	ldr r1, _020B4F80 @ =0x45585048
	add r2, r4, #0x38
	bl FUN_020B4DD0
	mov r0, #0
	strh r0, [r4, #0x34]
	bic r0, r0, #1
	strh r0, [r4, #0x36]
	ldr r1, [r4, #0x18]
	add r0, sp, #4
	str r1, [sp, #4]
	ldr r2, [r4, #0x1c]
	ldr r1, _020B4F84 @ =0x00004652
	str r2, [sp, #8]
	bl FUN_020B4EE8
	str r0, [r4, #0x24]
	str r0, [r4, #0x28]
	mov r1, #0
	str r1, [r4, #0x2c]
	mov r0, r4
	str r1, [r4, #0x30]
	add sp, sp, #0xc
	pop {r3, r4, pc}
	.align 2, 0
_020B4F80: .4byte 0x45585048
_020B4F84: .4byte 0x00004652
	arm_func_end FUN_020B4F14

	arm_func_start FUN_020B4F88
FUN_020B4F88: @ 0x020B4F88
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x18
	mov r7, r0
	add r0, sp, #0x10
	mov r8, r1
	mov r6, r2
	mov r4, r3
	bl FUN_020B4E64
	ldr r3, [sp, #0x14]
	sub r5, r6, #0x10
	add r2, r4, r6
	mov r0, r7
	mov r1, r8
	str r5, [sp, #0x14]
	str r3, [sp, #0xc]
	str r2, [sp, #8]
	bl FUN_020B4E90
	ldr r2, [sp, #0x10]
	ldr r1, [sp, #0x14]
	mov r4, r0
	sub r0, r1, r2
	cmp r0, #0x14
	strlo r2, [sp, #0x14]
	blo _020B5008
	ldr r1, _020B5100 @ =0x00004652
	add r0, sp, #0x10
	bl FUN_020B4EE8
	mov r1, r0
	mov r0, r7
	mov r2, r4
	bl FUN_020B4EB8
	mov r4, r0
_020B5008:
	ldr r1, [sp, #0xc]
	ldr r0, [sp, #8]
	sub r0, r1, r0
	cmp r0, #0x14
	strlo r1, [sp, #8]
	blo _020B503C
	ldr r1, _020B5100 @ =0x00004652
	add r0, sp, #8
	bl FUN_020B4EE8
	mov r1, r0
	mov r0, r7
	mov r2, r4
	bl FUN_020B4EB8
_020B503C:
	ldr r0, [r7, #-4]
	ldr r1, [sp, #0x14]
	ldr r2, [sp, #8]
	and r0, r0, #0xff
	tst r0, #1
	sub r2, r2, r1
	beq _020B5060
	mov r0, #0
	bl FUN_020D47EC
_020B5060:
	ldr r2, [sp, #8]
	ldr r1, _020B5104 @ =0x00005544
	add r0, sp, #0
	str r5, [sp]
	str r2, [sp, #4]
	bl FUN_020B4EE8
	mov r1, r0
	ldrh r3, [r1, #2]
	ldrh r2, [sp, #0x30]
	add r0, r7, #8
	bic r3, r3, #0x8000
	strh r3, [r1, #2]
	ldrh r3, [r1, #2]
	lsl r2, r2, #0x1f
	orr r2, r3, r2, lsr #16
	strh r2, [r1, #2]
	ldrh r2, [r1, #2]
	ldr r3, [sp, #0x14]
	bic r2, r2, #0x7f00
	strh r2, [r1, #2]
	sub r2, r1, r3
	lsl r2, r2, #0x10
	lsr r2, r2, #0x10
	ldrh r3, [r1, #2]
	lsl r2, r2, #0x19
	orr r2, r3, r2, lsr #17
	strh r2, [r1, #2]
	ldrh r2, [r1, #2]
	ldrh r3, [r7, #0x10]
	bic r2, r2, #0xff
	strh r2, [r1, #2]
	ldrh r2, [r1, #2]
	and r3, r3, #0xff
	orr r2, r2, r3
	strh r2, [r1, #2]
	ldr r2, [r7, #0xc]
	bl FUN_020B4EB8
	mov r0, r6
	add sp, sp, #0x18
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0
_020B5100: .4byte 0x00004652
_020B5104: .4byte 0x00005544
	arm_func_end FUN_020B4F88

	arm_func_start FUN_020B5108
FUN_020B5108: @ 0x020B5108
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	ldrh r4, [r0, #0x36]
	mov r3, r1
	ldr ip, [r0, #0x24]
	and r1, r4, #1
	lsl r1, r1, #0x10
	lsrs r1, r1, #0x10
	mov r1, #0
	moveq r6, #1
	movne r6, #0
	mov r4, r1
	cmp ip, #0
	sub lr, r1, #1
	beq _020B5198
	sub r2, r2, #1
	mvn r5, r2
_020B5148:
	add r8, ip, #0x10
	add r7, r2, r8
	and sb, r5, r7
	sub r7, sb, r8
	ldr r8, [ip, #4]
	add r7, r3, r7
	cmp r8, r7
	blo _020B518C
	cmp lr, r8
	bls _020B518C
	mov r1, ip
	mov lr, r8
	mov r4, sb
	cmp r6, #0
	bne _020B5198
	cmp r8, r3
	beq _020B5198
_020B518C:
	ldr ip, [ip, #0xc]
	cmp ip, #0
	bne _020B5148
_020B5198:
	cmp r1, #0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	mov r5, #0
	mov r2, r4
	add r0, r0, #0x24
	str r5, [sp]
	bl FUN_020B4F88
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	arm_func_end FUN_020B5108

	arm_func_start FUN_020B51BC
FUN_020B51BC: @ 0x020B51BC
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	ldrh r4, [r0, #0x36]
	mov r3, r1
	ldr ip, [r0, #0x28]
	and r1, r4, #1
	lsl r1, r1, #0x10
	lsrs r1, r1, #0x10
	mov r1, #0
	moveq r5, #1
	movne r5, #0
	mov r4, r1
	cmp ip, #0
	sub lr, r1, #1
	beq _020B5248
	sub r2, r2, #1
	mvn r2, r2
_020B51FC:
	ldr r8, [ip, #4]
	add sb, ip, #0x10
	add r6, r8, sb
	sub r6, r6, r3
	and r7, r2, r6
	subs r6, r7, sb
	bmi _020B523C
	cmp lr, r8
	bls _020B523C
	mov r1, ip
	mov lr, r8
	mov r4, r7
	cmp r5, #0
	bne _020B5248
	cmp r8, r3
	beq _020B5248
_020B523C:
	ldr ip, [ip, #8]
	cmp ip, #0
	bne _020B51FC
_020B5248:
	cmp r1, #0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	mov r5, #1
	mov r2, r4
	add r0, r0, #0x24
	str r5, [sp]
	bl FUN_020B4F88
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	arm_func_end FUN_020B51BC

	arm_func_start FUN_020B526C
FUN_020B526C: @ 0x020B526C
	push {r4, r5, r6, lr}
	sub sp, sp, #8
	mov r5, r1
	ldr r2, [r5]
	ldr r1, [r5, #4]
	mov r6, r0
	str r2, [sp]
	str r1, [sp, #4]
	ldr r1, [r6]
	mov r4, #0
	cmp r1, #0
	beq _020B52E0
	ldr r0, [r5]
_020B52A0:
	cmp r1, r0
	movlo r4, r1
	blo _020B52D4
	ldr r0, [r5, #4]
	cmp r1, r0
	bne _020B52E0
	ldr r2, [r1, #4]
	add r0, r1, #0x10
	add r2, r2, r0
	mov r0, r6
	str r2, [sp, #4]
	bl FUN_020B4E90
	b _020B52E0
_020B52D4:
	ldr r1, [r1, #0xc]
	cmp r1, #0
	bne _020B52A0
_020B52E0:
	cmp r4, #0
	beq _020B5314
	ldr r2, [r4, #4]
	add r1, r4, #0x10
	ldr r0, [r5]
	add r1, r2, r1
	cmp r1, r0
	bne _020B5314
	mov r0, r6
	mov r1, r4
	str r4, [sp]
	bl FUN_020B4E90
	mov r4, r0
_020B5314:
	ldr r1, [sp, #4]
	ldr r0, [sp]
	sub r0, r1, r0
	cmp r0, #0x10
	addlo sp, sp, #8
	movlo r0, #0
	poplo {r4, r5, r6, pc}
	ldr r1, _020B5358 @ =0x00004652
	add r0, sp, #0
	bl FUN_020B4EE8
	mov r1, r0
	mov r0, r6
	mov r2, r4
	bl FUN_020B4EB8
	mov r0, #1
	add sp, sp, #8
	pop {r4, r5, r6, pc}
	.align 2, 0
_020B5358: .4byte 0x00004652
	arm_func_end FUN_020B526C

	arm_func_start FUN_020B535C
FUN_020B535C: @ 0x020B535C
	push {r3, lr}
	add r1, r1, r0
	add r0, r0, #3
	bic r1, r1, #3
	bic r0, r0, #3
	cmp r0, r1
	bhi _020B5384
	sub r3, r1, r0
	cmp r3, #0x4c
	bhs _020B538C
_020B5384:
	mov r0, #0
	pop {r3, pc}
_020B538C:
	bl FUN_020B4F14
	pop {r3, pc}
	arm_func_end FUN_020B535C

	arm_func_start FUN_020B5394
FUN_020B5394: @ 0x020B5394
	ldr ip, _020B539C @ =FUN_020B4E4C
	bx ip
	.align 2, 0
_020B539C: .4byte FUN_020B4E4C
	arm_func_end FUN_020B5394

	arm_func_start FUN_020B53A0
FUN_020B53A0: @ 0x020B53A0
	push {r3, lr}
	cmp r1, #0
	moveq r1, #1
	add r1, r1, #3
	cmp r2, #0
	bic r1, r1, #3
	blt _020B53C4
	bl FUN_020B5108
	pop {r3, pc}
_020B53C4:
	rsb r2, r2, #0
	bl FUN_020B51BC
	pop {r3, pc}
	arm_func_end FUN_020B53A0

	arm_func_start FUN_020B53D0
FUN_020B53D0: @ 0x020B53D0
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #0x10
	mov r4, r1
	mov sb, r2
	sub r8, r4, #0x10
	add r1, sb, #3
	ldr r7, [r8, #4]
	bic sb, r1, #3
	cmp sb, r7
	mov r5, r0
	addeq sp, sp, #0x10
	moveq r0, sb
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	bls _020B54F0
	ldr r6, [r5, #0x24]
	add r0, r8, #0x10
	cmp r6, #0
	add r0, r7, r0
	beq _020B542C
_020B541C:
	cmp r6, r0
	ldrne r6, [r6, #0xc]
	cmpne r6, #0
	bne _020B541C
_020B542C:
	cmp r6, #0
	beq _020B5448
	ldr r0, [r6, #4]
	add r1, r7, #0x10
	add r0, r1, r0
	cmp sb, r0
	bls _020B5454
_020B5448:
	add sp, sp, #0x10
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_020B5454:
	add r0, sp, #8
	mov r1, r6
	bl FUN_020B4E64
	mov r1, r6
	add r0, r5, #0x24
	bl FUN_020B4E90
	ldr r2, [sp, #0xc]
	add r3, sb, r4
	ldr r6, [sp, #8]
	sub r1, r2, r3
	str r3, [sp, #8]
	cmp r1, #0x10
	strlo r2, [sp, #8]
	mov r7, r0
	ldr r0, [sp, #8]
	sub r0, r0, r4
	str r0, [r8, #4]
	ldr r1, [sp, #0xc]
	ldr r0, [sp, #8]
	sub r0, r1, r0
	cmp r0, #0x10
	blo _020B54C8
	ldr r1, _020B552C @ =0x00004652
	add r0, sp, #8
	bl FUN_020B4EE8
	mov r1, r0
	mov r2, r7
	add r0, r5, #0x24
	bl FUN_020B4EB8
_020B54C8:
	ldr r0, [r5, #0x20]
	ldr r1, [sp, #8]
	and r0, r0, #0xff
	tst r0, #1
	sub r2, r1, r6
	beq _020B5520
	mov r1, r6
	mov r0, #0
	bl FUN_020D47EC
	b _020B5520
_020B54F0:
	add r0, sb, r4
	str r0, [sp]
	ldr r1, [r8, #4]
	add r0, r8, #0x10
	add r0, r1, r0
	str r0, [sp, #4]
	add r1, sp, #0
	add r0, r5, #0x24
	str sb, [r8, #4]
	bl FUN_020B526C
	cmp r0, #0
	streq r7, [r8, #4]
_020B5520:
	ldr r0, [r8, #4]
	add sp, sp, #0x10
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0
_020B552C: .4byte 0x00004652
	arm_func_end FUN_020B53D0

	arm_func_start FUN_020B5530
FUN_020B5530: @ 0x020B5530
	push {r3, r4, r5, lr}
	sub sp, sp, #8
	sub r4, r1, #0x10
	mov r5, r0
	add r0, sp, #0
	mov r1, r4
	bl FUN_020B4E64
	mov r1, r4
	add r0, r5, #0x2c
	bl FUN_020B4E90
	add r1, sp, #0
	add r0, r5, #0x24
	bl FUN_020B526C
	add sp, sp, #8
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020B5530

	arm_func_start FUN_020B556C
FUN_020B556C: @ 0x020B556C
	ldr r2, [r0, #0x24]
	mov r0, #0
	cmp r2, #0
	bxeq lr
_020B557C:
	ldr r1, [r2, #4]
	ldr r2, [r2, #0xc]
	add r0, r0, r1
	cmp r2, #0
	bne _020B557C
	bx lr
	arm_func_end FUN_020B556C

	arm_func_start FUN_020B5594
FUN_020B5594: @ 0x020B5594
	ldrh r2, [r0, #0x34]
	strh r1, [r0, #0x34]
	mov r0, r2
	bx lr
	arm_func_end FUN_020B5594

	arm_func_start FUN_020B55A4
FUN_020B55A4: @ 0x020B55A4
	ldr r0, [r0, #-0xc]
	bx lr
	arm_func_end FUN_020B55A4

	arm_func_start FUN_020B55AC
FUN_020B55AC: @ 0x020B55AC
	ldrh r0, [r0, #-0xe]
	and r0, r0, #0xff
	bx lr
	arm_func_end FUN_020B55AC

	arm_func_start FUN_020B55B8
FUN_020B55B8: @ 0x020B55B8
	push {r3, r4, lr}
	sub sp, sp, #4
	mov r3, r1
	mov r4, r0
	str r2, [sp]
	ldr r1, _020B55FC @ =0x46524D48
	add r2, r4, #0x30
	bl FUN_020B4DD0
	ldr r0, [r4, #0x18]
	mov r1, #0
	str r0, [r4, #0x24]
	ldr r2, [r4, #0x1c]
	mov r0, r4
	str r2, [r4, #0x28]
	str r1, [r4, #0x2c]
	add sp, sp, #4
	pop {r3, r4, pc}
	.align 2, 0
_020B55FC: .4byte 0x46524D48
	arm_func_end FUN_020B55B8

	arm_func_start FUN_020B5600
FUN_020B5600: @ 0x020B5600
	push {r4, r5, r6, lr}
	mov r4, r0
	ldr r3, [r4]
	sub r0, r2, #1
	mvn r2, r0
	add r0, r0, r3
	and r5, r2, r0
	ldr r0, [r4, #4]
	add r6, r1, r5
	cmp r6, r0
	movhi r0, #0
	pophi {r4, r5, r6, pc}
	ldr r0, [r4, #-4]
	sub r2, r6, r3
	and r0, r0, #0xff
	tst r0, #1
	beq _020B5650
	mov r1, r3
	mov r0, #0
	bl FUN_020D47EC
_020B5650:
	mov r0, r5
	str r6, [r4]
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020B5600

	arm_func_start FUN_020B565C
FUN_020B565C: @ 0x020B565C
	push {r3, r4, r5, lr}
	mov r4, r0
	ldr r3, [r4, #4]
	sub r0, r2, #1
	mvn r2, r0
	sub r1, r3, r1
	ldr r0, [r4]
	and r5, r2, r1
	cmp r5, r0
	movlo r0, #0
	poplo {r3, r4, r5, pc}
	ldr r0, [r4, #-4]
	sub r2, r3, r5
	and r0, r0, #0xff
	tst r0, #1
	beq _020B56A8
	mov r1, r5
	mov r0, #0
	bl FUN_020D47EC
_020B56A8:
	mov r0, r5
	str r5, [r4, #4]
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020B565C

	arm_func_start FUN_020B56B4
FUN_020B56B4: @ 0x020B56B4
	ldr r2, [r0, #0x18]
	mov r1, #0
	str r2, [r0, #0x24]
	str r1, [r0, #0x2c]
	bx lr
	arm_func_end FUN_020B56B4

	arm_func_start FUN_020B56C8
FUN_020B56C8: @ 0x020B56C8
	ldr r2, [r0, #0x2c]
	cmp r2, #0
	beq _020B56E8
_020B56D4:
	ldr r1, [r0, #0x1c]
	str r1, [r2, #8]
	ldr r2, [r2, #0xc]
	cmp r2, #0
	bne _020B56D4
_020B56E8:
	ldr r1, [r0, #0x1c]
	str r1, [r0, #0x28]
	bx lr
	arm_func_end FUN_020B56C8

	arm_func_start FUN_020B56F4
FUN_020B56F4: @ 0x020B56F4
	push {r3, lr}
	add r1, r1, r0
	add r0, r0, #3
	bic r1, r1, #3
	bic r0, r0, #3
	cmp r0, r1
	bhi _020B571C
	sub r3, r1, r0
	cmp r3, #0x30
	bhs _020B5724
_020B571C:
	mov r0, #0
	pop {r3, pc}
_020B5724:
	bl FUN_020B55B8
	pop {r3, pc}
	arm_func_end FUN_020B56F4

	arm_func_start FUN_020B572C
FUN_020B572C: @ 0x020B572C
	ldr ip, _020B5734 @ =FUN_020B4E4C
	bx ip
	.align 2, 0
_020B5734: .4byte FUN_020B4E4C
	arm_func_end FUN_020B572C

	arm_func_start FUN_020B5738
FUN_020B5738: @ 0x020B5738
	push {r3, lr}
	cmp r1, #0
	moveq r1, #1
	add r1, r1, #3
	cmp r2, #0
	bic r1, r1, #3
	add r0, r0, #0x24
	blt _020B5760
	bl FUN_020B5600
	pop {r3, pc}
_020B5760:
	rsb r2, r2, #0
	bl FUN_020B565C
	pop {r3, pc}
	arm_func_end FUN_020B5738

	arm_func_start FUN_020B576C
FUN_020B576C: @ 0x020B576C
	push {r3, r4, r5, lr}
	mov r4, r1
	mov r5, r0
	tst r4, #1
	beq _020B5784
	bl FUN_020B56B4
_020B5784:
	tst r4, #2
	popeq {r3, r4, r5, pc}
	mov r0, r5
	bl FUN_020B56C8
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020B576C

	arm_func_start FUN_020B5798
FUN_020B5798: @ 0x020B5798
	push {r4, lr}
	mov r4, r0
	mov r0, r1
	bl FUN_020E4A90
	sub r1, r0, #1
	ldr r0, [r4, #0x24]
	mvn r2, r1
	add r0, r1, r0
	ldr r1, [r4, #0x28]
	and r0, r2, r0
	cmp r0, r1
	movhi r0, #0
	subls r0, r1, r0
	pop {r4, pc}
	arm_func_end FUN_020B5798

	arm_func_start FUN_020B57D0
FUN_020B57D0: @ 0x020B57D0
	push {r4, r5, r6, lr}
	mov r6, r0
	ldr r4, [r6, #0x24]
	mov r5, r1
	add r0, r6, #0x24
	mov r1, #0x10
	mov r2, #4
	bl FUN_020B5600
	cmp r0, #0
	moveq r0, #0
	popeq {r4, r5, r6, pc}
	str r5, [r0]
	str r4, [r0, #4]
	ldr r1, [r6, #0x28]
	str r1, [r0, #8]
	ldr r1, [r6, #0x2c]
	str r1, [r0, #0xc]
	str r0, [r6, #0x2c]
	mov r0, #1
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020B57D0

	arm_func_start FUN_020B5820
FUN_020B5820: @ 0x020B5820
	ldr r3, [r0, #0x2c]
	cmp r1, #0
	cmpne r3, #0
	beq _020B5844
_020B5830:
	ldr r2, [r3]
	cmp r2, r1
	ldrne r3, [r3, #0xc]
	cmpne r3, #0
	bne _020B5830
_020B5844:
	cmp r3, #0
	moveq r0, #0
	bxeq lr
	ldr r1, [r3, #4]
	str r1, [r0, #0x24]
	ldr r1, [r3, #8]
	str r1, [r0, #0x28]
	ldr r1, [r3, #0xc]
	str r1, [r0, #0x2c]
	mov r0, #1
	bx lr
	arm_func_end FUN_020B5820

	arm_func_start FUN_020B5870
FUN_020B5870: @ 0x020B5870
	ldr r2, [r0]
	cmp r2, #0
	ldrne r1, [r2]
	strne r1, [r0]
	mov r0, r2
	bx lr
	arm_func_end FUN_020B5870

	arm_func_start FUN_020B5888
FUN_020B5888: @ 0x020B5888
	push {r3, r4, r5, lr}
	mov r5, r0
	add r0, r5, #0x24
	bl FUN_020B5870
	movs r4, r0
	beq _020B58C0
	ldr r0, [r5, #0x20]
	ldr r2, [r5, #0x28]
	and r0, r0, #0xff
	tst r0, #1
	beq _020B58C0
	mov r1, r4
	mov r0, #0
	bl FUN_020D47EC
_020B58C0:
	mov r0, r4
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020B5888

	arm_func_start FUN_020B58C8
FUN_020B58C8: @ 0x020B58C8
	ldr r2, [r0, #0x24]
	str r2, [r1]
	str r1, [r0, #0x24]
	bx lr
	arm_func_end FUN_020B58C8

	arm_func_start FUN_020B58D8
FUN_020B58D8: @ 0x020B58D8
	ldr ip, _020B58E8 @ =FUN_020B53A0
	mov r2, r0
	ldmib r2, {r0, r2}
	bx ip
	.align 2, 0
_020B58E8: .4byte FUN_020B53A0
	arm_func_end FUN_020B58D8

	arm_func_start FUN_020B58EC
FUN_020B58EC: @ 0x020B58EC
	ldr ip, _020B58F8 @ =FUN_020B5530
	ldr r0, [r0, #4]
	bx ip
	.align 2, 0
_020B58F8: .4byte FUN_020B5530
	arm_func_end FUN_020B58EC

	arm_func_start FUN_020B58FC
FUN_020B58FC: @ 0x020B58FC
	ldr ip, _020B590C @ =FUN_020B5738
	mov r2, r0
	ldmib r2, {r0, r2}
	bx ip
	.align 2, 0
_020B590C: .4byte FUN_020B5738
	arm_func_end FUN_020B58FC

	arm_func_start FUN_020B5910
FUN_020B5910: @ 0x020B5910
	bx lr
	arm_func_end FUN_020B5910

	arm_func_start FUN_020B5914
FUN_020B5914: @ 0x020B5914
	push {r3, lr}
	ldr r0, [r0, #4]
	ldr r2, [r0, #0x28]
	cmp r1, r2
	movhi r0, #0
	pophi {r3, pc}
	bl FUN_020B5888
	pop {r3, pc}
	arm_func_end FUN_020B5914

	arm_func_start FUN_020B5934
FUN_020B5934: @ 0x020B5934
	ldr ip, _020B5940 @ =FUN_020B58C8
	ldr r0, [r0, #4]
	bx ip
	.align 2, 0
_020B5940: .4byte FUN_020B58C8
	arm_func_end FUN_020B5934

	arm_func_start FUN_020B5944
FUN_020B5944: @ 0x020B5944
	ldr ip, _020B595C @ =FUN_020D2E54
	mov r3, r0
	mov r2, r1
	ldr r0, [r3, #8]
	ldr r1, [r3, #4]
	bx ip
	.align 2, 0
_020B595C: .4byte FUN_020D2E54
	arm_func_end FUN_020B5944

	arm_func_start FUN_020B5960
FUN_020B5960: @ 0x020B5960
	ldr ip, _020B5978 @ =FUN_020D2F5C
	mov r3, r0
	mov r2, r1
	ldr r0, [r3, #8]
	ldr r1, [r3, #4]
	bx ip
	.align 2, 0
_020B5978: .4byte FUN_020D2F5C
	arm_func_end FUN_020B5960

	arm_func_start FUN_020B597C
FUN_020B597C: @ 0x020B597C
	push {r3, lr}
	ldr r2, [r0]
	ldr r2, [r2]
	blx r2
	pop {r3, pc}
	arm_func_end FUN_020B597C

	arm_func_start FUN_020B5990
FUN_020B5990: @ 0x020B5990
	push {r3, lr}
	ldr r2, [r0]
	ldr r2, [r2, #4]
	blx r2
	pop {r3, pc}
	arm_func_end FUN_020B5990

	arm_func_start FUN_020B59A4
FUN_020B59A4: @ 0x020B59A4
	ldr ip, _020B59B8 @ =0x02109200
	mov r3, #0
	str ip, [r0]
	stmib r0, {r1, r2, r3}
	bx lr
	.align 2, 0
_020B59B8: .4byte 0x02109200
	arm_func_end FUN_020B59A4

	arm_func_start FUN_020B59BC
FUN_020B59BC: @ 0x020B59BC
	mov r0, #0
	bx lr
	arm_func_end FUN_020B59BC

	arm_func_start FUN_020B59C4
FUN_020B59C4: @ 0x020B59C4
	mvn r0, #0
	bx lr
	arm_func_end FUN_020B59C4

	arm_func_start FUN_020B59CC
FUN_020B59CC: @ 0x020B59CC
	mov r0, #0
	bx lr
	arm_func_end FUN_020B59CC

	arm_func_start FUN_020B59D4
FUN_020B59D4: @ 0x020B59D4
	mvn r0, #0
	bx lr
	arm_func_end FUN_020B59D4

	arm_func_start FUN_020B59DC
FUN_020B59DC: @ 0x020B59DC
	push {r4, r5, r6, lr}
	ldr r5, _020B5A1C @ =_02110950
	mov ip, #0x18
	mla r6, r0, ip, r5
	ldr lr, [sp, #0x10]
	ldr r0, _020B5A20 @ =_02110934
	mla r4, r1, ip, r5
	str r6, [r0, #8]
	mla r1, r2, ip, r5
	str r4, [r0, #0xc]
	mla r2, r3, ip, r5
	str r1, [r0, #0x10]
	mla r1, lr, ip, r5
	str r2, [r0, #0x14]
	str r1, [r0, #0x18]
	pop {r4, r5, r6, pc}
	.align 2, 0
_020B5A1C: .4byte _02110950
_020B5A20: .4byte _02110934
	arm_func_end FUN_020B59DC

	arm_func_start FUN_020B5A24
FUN_020B5A24: @ 0x020B5A24
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	cmp r5, #2
	mov ip, #1
	mov r0, #4
	mov r1, #3
	bhi _020B5A58
	mov r2, #2
	mov r3, #0
	str ip, [sp]
	bl FUN_020B59DC
	b _020B5A68
_020B5A58:
	mov r2, #0
	mov r3, #2
	str ip, [sp]
	bl FUN_020B59DC
_020B5A68:
	ldr r0, _020B5A98 @ =0x021D84C0
	strh r5, [r0]
	bl FUN_020B5AAC
	cmp r4, #0
	popeq {r3, r4, r5, pc}
	ldr r3, _020B5A9C @ =FUN_020B5B20
	ldr r1, _020B5AA0 @ =_02110924
	ldr r2, _020B5AA4 @ =FUN_020B5C90
	ldr r0, _020B5AA8 @ =_02110928
	str r3, [r1]
	str r2, [r0]
	pop {r3, r4, r5, pc}
	.align 2, 0
_020B5A98: .4byte 0x021D84C0
_020B5A9C: .4byte FUN_020B5B20
_020B5AA0: .4byte _02110924
_020B5AA4: .4byte FUN_020B5C90
_020B5AA8: .4byte _02110928
	arm_func_end FUN_020B5A24

	arm_func_start FUN_020B5AAC
FUN_020B5AAC: @ 0x020B5AAC
	push {r3, r4, r5, r6, r7, lr}
	ldr r0, _020B5B18 @ =0x021D84C0
	mov r5, #0
	ldrh r7, [r0]
	ldr r6, _020B5B1C @ =_02110950
	mov lr, r5
	cmp r7, #1
	addhi r7, r7, #1
	mov r4, #1
	mov r1, r5
	mov r0, #0x20000
	mov r3, r5
	mov r2, #0x10000
_020B5AE0:
	cmp r5, r7
	strlt r4, [r6, #8]
	strge lr, [r6, #8]
	ldr ip, [r6, #0xc]
	add r5, r5, #1
	cmp ip, #0
	strne r3, [r6]
	strne r2, [r6, #4]
	streq r1, [r6]
	streq r0, [r6, #4]
	cmp r5, #5
	add r6, r6, #0x18
	blt _020B5AE0
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020B5B18: .4byte 0x021D84C0
_020B5B1C: .4byte _02110950
	arm_func_end FUN_020B5AAC

	arm_func_start FUN_020B5B20
FUN_020B5B20: @ 0x020B5B20
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	cmp r0, #0
	moveq r3, #0x10
	addne r0, r0, #0xf
	bicne r3, r0, #0xf
	ldr r0, _020B5C7C @ =0x0007FFF0
	cmp r3, r0
	movhs r0, #0
	pophs {r3, r4, r5, r6, r7, r8, sb, pc}
	cmp r1, #0
	beq _020B5C04
	mov r4, #0
	ldr r8, _020B5C80 @ =_02110980
	ldr sb, _020B5C84 @ =_02110968
	ldr r0, _020B5C88 @ =_02110934
	mov r7, r4
_020B5B60:
	ldr lr, [r0, r4, lsl #2]
	ldr r5, [lr, #8]
	cmp r5, #0
	beq _020B5BF0
	ldm lr, {r5, r6}
	sub r5, r6, r5
	cmp r5, r3
	blo _020B5BF0
	ldrh r5, [lr, #0x10]
	cmp r5, #0
	beq _020B5B98
	cmp r5, #3
	beq _020B5BA0
	b _020B5BA8
_020B5B98:
	mov ip, sb
	b _020B5BAC
_020B5BA0:
	mov ip, r8
	b _020B5BAC
_020B5BA8:
	mov ip, r7
_020B5BAC:
	ldr r5, [ip, #8]
	cmp r5, #0
	beq _020B5BF0
	ldm ip, {r5, r6}
	sub r5, r6, r5
	cmp r5, r3, lsr #1
	blo _020B5BF0
	ldr r4, [lr]
	mov r0, #1
	add r2, r4, r3
	str r2, [lr]
	ldr r2, [ip]
	add r2, r2, r3, lsr #1
	str r2, [ip]
	ldr r2, [lr, #0x14]
	add r2, r4, r2
	b _020B5C58
_020B5BF0:
	add r4, r4, #1
	cmp r4, #2
	blt _020B5B60
	mov r0, #0
	b _020B5C58
_020B5C04:
	ldr lr, _020B5C8C @ =_0211093C
	mov r5, #0
_020B5C0C:
	ldr ip, [lr, r5, lsl #2]
	ldr r0, [ip, #8]
	cmp r0, #0
	beq _020B5C48
	ldm ip, {r0, r4}
	sub r0, r4, r0
	cmp r0, r3
	blo _020B5C48
	ldr r2, [ip, #4]
	mov r0, #1
	sub r4, r2, r3
	str r4, [ip, #4]
	ldr r2, [ip, #0x14]
	add r2, r4, r2
	b _020B5C58
_020B5C48:
	add r5, r5, #1
	cmp r5, #5
	blt _020B5C0C
	mov r0, #0
_020B5C58:
	cmp r0, #0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	lsl r0, r2, #0xd
	lsr r2, r3, #4
	lsr r0, r0, #0x10
	orr r0, r0, r2, lsl #16
	orr r0, r0, r1, lsl #31
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0
_020B5C7C: .4byte 0x0007FFF0
_020B5C80: .4byte _02110980
_020B5C84: .4byte _02110968
_020B5C88: .4byte _02110934
_020B5C8C: .4byte _0211093C
	arm_func_end FUN_020B5B20

	arm_func_start FUN_020B5C90
FUN_020B5C90: @ 0x020B5C90
	mov r0, #0
	bx lr
	arm_func_end FUN_020B5C90

	arm_func_start FUN_020B5C98
FUN_020B5C98: @ 0x020B5C98
	push {r3, lr}
	mov r3, #0
	ldr ip, _020B5CD4 @ =_02110950
	mov lr, r3
_020B5CA8:
	ldr r1, [ip]
	add r3, r3, #1
	str r1, [r0, lr, lsl #2]
	ldr r2, [ip, #4]
	add r1, r0, lr, lsl #2
	str r2, [r1, #4]
	cmp r3, #5
	add ip, ip, #0x18
	add lr, lr, #2
	blt _020B5CA8
	pop {r3, pc}
	.align 2, 0
_020B5CD4: .4byte _02110950
	arm_func_end FUN_020B5C98

	arm_func_start FUN_020B5CD8
FUN_020B5CD8: @ 0x020B5CD8
	push {r3, lr}
	mov r3, #0
	ldr lr, _020B5D14 @ =_02110950
	mov ip, r3
_020B5CE8:
	ldr r2, [r0, ip, lsl #2]
	add r1, r0, ip, lsl #2
	str r2, [lr]
	ldr r1, [r1, #4]
	add r3, r3, #1
	str r1, [lr, #4]
	cmp r3, #5
	add ip, ip, #2
	add lr, lr, #0x18
	blt _020B5CE8
	pop {r3, pc}
	.align 2, 0
_020B5D14: .4byte _02110950
	arm_func_end FUN_020B5CD8

	arm_func_start FUN_020B5D18
FUN_020B5D18: @ 0x020B5D18
	push {r4, lr}
	ldr r2, _020B5D50 @ =0x021D84C4
	mov r4, r1
	str r0, [r2, #8]
	bl FUN_020B5EE0
	cmp r4, #0
	popeq {r4, pc}
	ldr r3, _020B5D54 @ =FUN_020B5D64
	ldr r1, _020B5D58 @ =_0211092C
	ldr r2, _020B5D5C @ =FUN_020B5EA0
	ldr r0, _020B5D60 @ =_02110930
	str r3, [r1]
	str r2, [r0]
	pop {r4, pc}
	.align 2, 0
_020B5D50: .4byte 0x021D84C4
_020B5D54: .4byte FUN_020B5D64
_020B5D58: .4byte _0211092C
_020B5D5C: .4byte FUN_020B5EA0
_020B5D60: .4byte _02110930
	arm_func_end FUN_020B5D18

	arm_func_start FUN_020B5D64
FUN_020B5D64: @ 0x020B5D64
	push {r4, lr}
	cmp r0, #0
	moveq r0, #8
	addne r0, r0, #7
	ldr ip, _020B5E98 @ =0x0007FFF8
	bicne r0, r0, #7
	cmp r0, ip
	mov r3, #0
	movhs r0, #0
	pophs {r4, pc}
	cmp r2, #1
	bne _020B5E10
	ldr r2, _020B5E9C @ =0x021D84C4
	cmp r1, #0
	ldr lr, [r2]
	andeq r2, lr, #0xf
	rsbeq r2, r2, #0x10
	andeq r4, r2, #0xf
	beq _020B5DBC
	and r2, lr, #7
	rsb r2, r2, #8
	and r4, r2, #7
_020B5DBC:
	ldr r2, _020B5E9C @ =0x021D84C4
	add ip, r0, r4
	ldr r2, [r2, #4]
	sub r2, r2, lr
	cmp r2, ip
	blo _020B5E08
	cmp r1, #0
	add r1, lr, ip
	beq _020B5DEC
	cmp r1, #0x10000
	movhi lr, #0
	bhi _020B5E78
_020B5DEC:
	ldr r1, _020B5E9C @ =0x021D84C4
	add r3, lr, r4
	ldr r2, [r1]
	mov lr, #1
	add r2, r2, ip
	str r2, [r1]
	b _020B5E78
_020B5E08:
	mov lr, #0
	b _020B5E78
_020B5E10:
	ldr r2, _020B5E9C @ =0x021D84C4
	ldr lr, [r2, #4]
	cmp lr, r0
	blo _020B5E74
	sub r2, lr, r0
	cmp r1, #0
	andne r4, r2, #7
	andeq r4, r2, #0xf
	ldr r2, _020B5E9C @ =0x021D84C4
	add ip, r0, r4
	ldr r2, [r2]
	sub r2, lr, r2
	cmp r2, ip
	blo _020B5E74
	cmp r1, #0
	beq _020B5E5C
	cmp lr, #0x10000
	movhi lr, #0
	bhi _020B5E78
_020B5E5C:
	ldr r1, _020B5E9C @ =0x021D84C4
	mov lr, #1
	ldr r2, [r1, #4]
	sub r3, r2, ip
	str r3, [r1, #4]
	b _020B5E78
_020B5E74:
	mov lr, #0
_020B5E78:
	cmp lr, #0
	moveq r0, #0
	popeq {r4, pc}
	lsl r1, r3, #0xd
	lsr r2, r0, #3
	lsr r0, r1, #0x10
	orr r0, r0, r2, lsl #16
	pop {r4, pc}
	.align 2, 0
_020B5E98: .4byte 0x0007FFF8
_020B5E9C: .4byte 0x021D84C4
	arm_func_end FUN_020B5D64

	arm_func_start FUN_020B5EA0
FUN_020B5EA0: @ 0x020B5EA0
	mov r0, #0
	bx lr
	arm_func_end FUN_020B5EA0

	arm_func_start FUN_020B5EA8
FUN_020B5EA8: @ 0x020B5EA8
	ldr r1, _020B5EC0 @ =0x021D84C4
	ldr r2, [r1]
	str r2, [r0]
	ldr r1, [r1, #4]
	str r1, [r0, #4]
	bx lr
	.align 2, 0
_020B5EC0: .4byte 0x021D84C4
	arm_func_end FUN_020B5EA8

	arm_func_start FUN_020B5EC4
FUN_020B5EC4: @ 0x020B5EC4
	ldr r2, [r0]
	ldr r1, _020B5EDC @ =0x021D84C4
	str r2, [r1]
	ldr r0, [r0, #4]
	str r0, [r1, #4]
	bx lr
	.align 2, 0
_020B5EDC: .4byte 0x021D84C4
	arm_func_end FUN_020B5EC4

	arm_func_start FUN_020B5EE0
FUN_020B5EE0: @ 0x020B5EE0
	ldr r0, _020B5EF8 @ =0x021D84C4
	mov r1, #0
	str r1, [r0]
	ldr r1, [r0, #8]
	str r1, [r0, #4]
	bx lr
	.align 2, 0
_020B5EF8: .4byte 0x021D84C4
	arm_func_end FUN_020B5EE0

	arm_func_start FUN_020B5EFC
FUN_020B5EFC: @ 0x020B5EFC
	push {r3, lr}
	mov r2, r0
	add r0, r1, #1
	ldr r1, [r2, #4]
	bl FUN_020F2BA4
	lsl r0, r1, #0x10
	lsr r0, r0, #0x10
	pop {r3, pc}
	arm_func_end FUN_020B5EFC

	arm_func_start FUN_020B5F1C
FUN_020B5F1C: @ 0x020B5F1C
	ldrh r1, [r0, #0xc]
	ldr r0, [r0, #4]
	cmp r1, r0
	moveq r0, #1
	movne r0, #0
	bx lr
	arm_func_end FUN_020B5F1C

	arm_func_start FUN_020B5F34
FUN_020B5F34: @ 0x020B5F34
	ldrh r0, [r0, #0xc]
	cmp r0, #0
	moveq r0, #1
	movne r0, #0
	bx lr
	arm_func_end FUN_020B5F34

	arm_func_start FUN_020B5F48
FUN_020B5F48: @ 0x020B5F48
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_020D08EC
	mov r0, r6
	mov r1, r5
	mov r2, r4
	bl FUN_020D0948
	bl FUN_020D0A88
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020B5F48

	arm_func_start FUN_020B5F74
FUN_020B5F74: @ 0x020B5F74
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_020D0AD4
	mov r0, r6
	mov r1, r5
	mov r2, r4
	bl FUN_020D0B08
	bl FUN_020D0B74
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020B5F74

	arm_func_start FUN_020B5FA0
FUN_020B5FA0: @ 0x020B5FA0
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r2
	bl FUN_020D0BB8
	mov r0, r5
	mov r1, r4
	bl FUN_020D0C48
	bl FUN_020D0D1C
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020B5FA0

	arm_func_start FUN_020B5FC4
FUN_020B5FC4: @ 0x020B5FC4
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r2
	bl FUN_020D0BB8
	mov r0, r5
	mov r1, r4
	bl FUN_020D0CB0
	bl FUN_020D0D1C
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020B5FC4

	arm_func_start FUN_020B5FE8
FUN_020B5FE8: @ 0x020B5FE8
	ldr ip, _020B5FF0 @ =FUN_020D0224
	bx ip
	.align 2, 0
_020B5FF0: .4byte FUN_020D0224
	arm_func_end FUN_020B5FE8

	arm_func_start FUN_020B5FF4
FUN_020B5FF4: @ 0x020B5FF4
	ldr ip, _020B5FFC @ =FUN_020D02E4
	bx ip
	.align 2, 0
_020B5FFC: .4byte FUN_020D02E4
	arm_func_end FUN_020B5FF4

	arm_func_start FUN_020B6000
FUN_020B6000: @ 0x020B6000
	ldr ip, _020B6008 @ =FUN_020D03A4
	bx ip
	.align 2, 0
_020B6008: .4byte FUN_020D03A4
	arm_func_end FUN_020B6000

	arm_func_start FUN_020B600C
FUN_020B600C: @ 0x020B600C
	ldr ip, _020B6014 @ =FUN_020D0464
	bx ip
	.align 2, 0
_020B6014: .4byte FUN_020D0464
	arm_func_end FUN_020B600C

	arm_func_start FUN_020B6018
FUN_020B6018: @ 0x020B6018
	ldr ip, _020B6020 @ =FUN_020CFF24
	bx ip
	.align 2, 0
_020B6020: .4byte FUN_020CFF24
	arm_func_end FUN_020B6018

	arm_func_start FUN_020B6024
FUN_020B6024: @ 0x020B6024
	ldr ip, _020B602C @ =FUN_020CFFE4
	bx ip
	.align 2, 0
_020B602C: .4byte FUN_020CFFE4
	arm_func_end FUN_020B6024

	arm_func_start FUN_020B6030
FUN_020B6030: @ 0x020B6030
	ldr ip, _020B6038 @ =FUN_020D00A4
	bx ip
	.align 2, 0
_020B6038: .4byte FUN_020D00A4
	arm_func_end FUN_020B6030

	arm_func_start FUN_020B603C
FUN_020B603C: @ 0x020B603C
	ldr ip, _020B6044 @ =FUN_020D0164
	bx ip
	.align 2, 0
_020B6044: .4byte FUN_020D0164
	arm_func_end FUN_020B603C

	arm_func_start FUN_020B6048
FUN_020B6048: @ 0x020B6048
	ldr ip, _020B6050 @ =FUN_020D00A4
	bx ip
	.align 2, 0
_020B6050: .4byte FUN_020D00A4
	arm_func_end FUN_020B6048

	arm_func_start FUN_020B6054
FUN_020B6054: @ 0x020B6054
	ldr ip, _020B605C @ =FUN_020D0164
	bx ip
	.align 2, 0
_020B605C: .4byte FUN_020D0164
	arm_func_end FUN_020B6054

	arm_func_start FUN_020B6060
FUN_020B6060: @ 0x020B6060
	ldr ip, _020B6068 @ =FUN_020CFD18
	bx ip
	.align 2, 0
_020B6068: .4byte FUN_020CFD18
	arm_func_end FUN_020B6060

	arm_func_start FUN_020B606C
FUN_020B606C: @ 0x020B606C
	ldr ip, _020B6074 @ =FUN_020CFC6C
	bx ip
	.align 2, 0
_020B6074: .4byte FUN_020CFC6C
	arm_func_end FUN_020B606C

	arm_func_start FUN_020B6078
FUN_020B6078: @ 0x020B6078
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_020D067C
	mov r0, r6
	mov r1, r5
	mov r2, r4
	bl FUN_020D06C4
	bl FUN_020D0730
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020B6078

	arm_func_start FUN_020B60A4
FUN_020B60A4: @ 0x020B60A4
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_020D0524
	mov r0, r6
	mov r1, r5
	mov r2, r4
	bl FUN_020D05C4
	bl FUN_020D0634
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020B60A4

	arm_func_start FUN_020B60D0
FUN_020B60D0: @ 0x020B60D0
	ldr ip, _020B60D8 @ =FUN_020CFDC8
	bx ip
	.align 2, 0
_020B60D8: .4byte FUN_020CFDC8
	arm_func_end FUN_020B60D0

	arm_func_start FUN_020B60DC
FUN_020B60DC: @ 0x020B60DC
	ldr ip, _020B60E4 @ =FUN_020CFE74
	bx ip
	.align 2, 0
_020B60E4: .4byte FUN_020CFE74
	arm_func_end FUN_020B60DC

	arm_func_start FUN_020B60E8
FUN_020B60E8: @ 0x020B60E8
	ldr ip, _020B60F0 @ =FUN_020D0284
	bx ip
	.align 2, 0
_020B60F0: .4byte FUN_020D0284
	arm_func_end FUN_020B60E8

	arm_func_start FUN_020B60F4
FUN_020B60F4: @ 0x020B60F4
	ldr ip, _020B60FC @ =FUN_020D0344
	bx ip
	.align 2, 0
_020B60FC: .4byte FUN_020D0344
	arm_func_end FUN_020B60F4

	arm_func_start FUN_020B6100
FUN_020B6100: @ 0x020B6100
	ldr ip, _020B6108 @ =FUN_020D0404
	bx ip
	.align 2, 0
_020B6108: .4byte FUN_020D0404
	arm_func_end FUN_020B6100

	arm_func_start FUN_020B610C
FUN_020B610C: @ 0x020B610C
	ldr ip, _020B6114 @ =FUN_020D04C4
	bx ip
	.align 2, 0
_020B6114: .4byte FUN_020D04C4
	arm_func_end FUN_020B610C

	arm_func_start FUN_020B6118
FUN_020B6118: @ 0x020B6118
	ldr ip, _020B6120 @ =FUN_020CFF84
	bx ip
	.align 2, 0
_020B6120: .4byte FUN_020CFF84
	arm_func_end FUN_020B6118

	arm_func_start FUN_020B6124
FUN_020B6124: @ 0x020B6124
	ldr ip, _020B612C @ =FUN_020D0044
	bx ip
	.align 2, 0
_020B612C: .4byte FUN_020D0044
	arm_func_end FUN_020B6124

	arm_func_start FUN_020B6130
FUN_020B6130: @ 0x020B6130
	ldr ip, _020B6138 @ =FUN_020D0104
	bx ip
	.align 2, 0
_020B6138: .4byte FUN_020D0104
	arm_func_end FUN_020B6130

	arm_func_start FUN_020B613C
FUN_020B613C: @ 0x020B613C
	ldr ip, _020B6144 @ =FUN_020D01C4
	bx ip
	.align 2, 0
_020B6144: .4byte FUN_020D01C4
	arm_func_end FUN_020B613C

	arm_func_start FUN_020B6148
FUN_020B6148: @ 0x020B6148
	ldr ip, _020B6150 @ =FUN_020D0104
	bx ip
	.align 2, 0
_020B6150: .4byte FUN_020D0104
	arm_func_end FUN_020B6148

	arm_func_start FUN_020B6154
FUN_020B6154: @ 0x020B6154
	ldr ip, _020B615C @ =FUN_020D01C4
	bx ip
	.align 2, 0
_020B615C: .4byte FUN_020D01C4
	arm_func_end FUN_020B6154

	arm_func_start FUN_020B6160
FUN_020B6160: @ 0x020B6160
	ldr ip, _020B6168 @ =FUN_020CFD70
	bx ip
	.align 2, 0
_020B6168: .4byte FUN_020CFD70
	arm_func_end FUN_020B6160

	arm_func_start FUN_020B616C
FUN_020B616C: @ 0x020B616C
	ldr ip, _020B6174 @ =FUN_020CFCC0
	bx ip
	.align 2, 0
_020B6174: .4byte FUN_020CFCC0
	arm_func_end FUN_020B616C

	arm_func_start FUN_020B6178
FUN_020B6178: @ 0x020B6178
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_020D0830
	mov r0, r6
	mov r1, r5
	mov r2, r4
	bl FUN_020D0848
	bl FUN_020D08AC
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020B6178

	arm_func_start FUN_020B61A4
FUN_020B61A4: @ 0x020B61A4
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_020D0774
	mov r0, r6
	mov r1, r5
	mov r2, r4
	bl FUN_020D078C
	bl FUN_020D07F0
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020B61A4

	arm_func_start FUN_020B61D0
FUN_020B61D0: @ 0x020B61D0
	ldr ip, _020B61D8 @ =FUN_020CFE1C
	bx ip
	.align 2, 0
_020B61D8: .4byte FUN_020CFE1C
	arm_func_end FUN_020B61D0

	arm_func_start FUN_020B61DC
FUN_020B61DC: @ 0x020B61DC
	ldr ip, _020B61E4 @ =FUN_020CFECC
	bx ip
	.align 2, 0
_020B61E4: .4byte FUN_020CFECC
	arm_func_end FUN_020B61DC

	arm_func_start FUN_020B61E8
FUN_020B61E8: @ 0x020B61E8
	push {r3, r4, r5, lr}
	mov r5, r0
	ldr r3, [r5]
	ldr r2, _020B6214 @ =0x02109210
	ldr r0, [r5, #4]
	ldr r1, [r5, #0xc]
	ldr r4, [r2, r3, lsl #2]
	bl FUN_020D2894
	ldmib r5, {r0, r1, r2}
	blx r4
	pop {r3, r4, r5, pc}
	.align 2, 0
_020B6214: .4byte 0x02109210
	arm_func_end FUN_020B61E8

	arm_func_start FUN_020B6218
FUN_020B6218: @ 0x020B6218
	mov r1, #0
	strh r1, [r0, #0xa]
	strh r1, [r0, #8]
	strh r1, [r0, #0xc]
	str r1, [r0, #0x10]
	bx lr
	arm_func_end FUN_020B6218

	arm_func_start FUN_020B6230
FUN_020B6230: @ 0x020B6230
	push {r4, lr}
	mov r4, r0
	bl FUN_020B5F1C
	cmp r0, #0
	movne r0, #0
	popne {r4, pc}
	ldrh r1, [r4, #0xa]
	mov r0, r4
	bl FUN_020B5EFC
	strh r0, [r4, #0xa]
	ldrh r1, [r4, #0xc]
	mov r0, #1
	add r1, r1, #1
	strh r1, [r4, #0xc]
	pop {r4, pc}
	arm_func_end FUN_020B6230

	arm_func_start FUN_020B626C
FUN_020B626C: @ 0x020B626C
	ldrh r1, [r0, #8]
	ldr r0, [r0]
	add r0, r0, r1, lsl #4
	bx lr
	arm_func_end FUN_020B626C

	arm_func_start FUN_020B627C
FUN_020B627C: @ 0x020B627C
	ldrh r1, [r0, #0xa]
	ldr r0, [r0]
	add r0, r0, r1, lsl #4
	bx lr
	arm_func_end FUN_020B627C

	arm_func_start FUN_020B628C
FUN_020B628C: @ 0x020B628C
	push {r4, lr}
	mov r4, r0
	bl FUN_020B5F34
	cmp r0, #0
	movne r0, #0
	popne {r4, pc}
	ldrh r1, [r4, #8]
	mov r0, r4
	bl FUN_020B5EFC
	strh r0, [r4, #8]
	ldrh r1, [r4, #0xc]
	mov r0, #1
	sub r1, r1, #1
	strh r1, [r4, #0xc]
	pop {r4, pc}
	arm_func_end FUN_020B628C

	arm_func_start FUN_020B62C8
FUN_020B62C8: @ 0x020B62C8
	ldr r2, _020B62E0 @ =0x021D84D0
	ldr ip, _020B62E4 @ =FUN_020B6218
	str r0, [r2]
	ldr r0, _020B62E8 @ =0x021D84D0
	str r1, [r2, #4]
	bx ip
	.align 2, 0
_020B62E0: .4byte 0x021D84D0
_020B62E4: .4byte FUN_020B6218
_020B62E8: .4byte 0x021D84D0
	arm_func_end FUN_020B62C8

	arm_func_start FUN_020B62EC
FUN_020B62EC: @ 0x020B62EC
	push {r3, r4, r5, lr}
	ldr r4, _020B6348 @ =0x021D84D0
	mov r0, r4
	bl FUN_020B626C
	mov r5, r0
	mov r0, r4
	bl FUN_020B628C
	cmp r0, #0
	popeq {r3, r4, r5, pc}
_020B6310:
	mov r0, r5
	bl FUN_020B61E8
	ldr r2, [r4, #0x10]
	ldr r1, [r5, #0xc]
	mov r0, r4
	sub r1, r2, r1
	str r1, [r4, #0x10]
	bl FUN_020B626C
	mov r5, r0
	mov r0, r4
	bl FUN_020B628C
	cmp r0, #0
	bne _020B6310
	pop {r3, r4, r5, pc}
	.align 2, 0
_020B6348: .4byte 0x021D84D0
	arm_func_end FUN_020B62EC

	arm_func_start FUN_020B634C
FUN_020B634C: @ 0x020B634C
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	ldr r5, _020B63B0 @ =0x021D84D0
	mov sb, r0
	mov r0, r5
	mov r8, r1
	mov r7, r2
	mov r6, r3
	bl FUN_020B5F1C
	cmp r0, #0
	movne r0, #0
	popne {r3, r4, r5, r6, r7, r8, sb, pc}
	mov r0, r5
	bl FUN_020B627C
	mov r4, r0
	str sb, [r4]
	stmib r4, {r7, r8}
	mov r0, r5
	str r6, [r4, #0xc]
	bl FUN_020B6230
	ldr r2, [r5, #0x10]
	ldr r1, [r4, #0xc]
	mov r0, #1
	add r1, r2, r1
	str r1, [r5, #0x10]
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0
_020B63B0: .4byte 0x021D84D0
	arm_func_end FUN_020B634C

	arm_func_start FUN_020B63B4
FUN_020B63B4: @ 0x020B63B4
	push {r4, r5, r6, r7, r8, lr}
	ldr r3, [r0]
	mov lr, #0
	cmp r3, #0
	beq _020B6490
	mov r8, lr
	mov r4, lr
_020B63D0:
	ldr r6, [r3]
	ldr r5, [r2, #4]
	ldr ip, [r3, #0xc]
	cmp r6, r5
	bne _020B642C
	ldr r5, [r3, #4]
	orr lr, lr, #1
	add r5, r6, r5
	str r5, [r2, #4]
	ldr r6, [r3, #8]
	ldr r5, [r3, #0xc]
	cmp r6, #0
	strne r5, [r6, #0xc]
	streq r5, [r0]
	cmp r5, #0
	strne r6, [r5, #8]
	ldr r5, [r1]
	cmp r5, #0
	strne r3, [r5, #8]
	ldr r5, [r1]
	str r5, [r3, #0xc]
	str r8, [r3, #8]
	str r3, [r1]
_020B642C:
	ldr r7, [r3]
	ldr r5, [r3, #4]
	ldr r6, [r2]
	add r5, r7, r5
	cmp r6, r5
	bne _020B6484
	str r7, [r2]
	ldr r6, [r3, #8]
	ldr r5, [r3, #0xc]
	cmp r6, #0
	strne r5, [r6, #0xc]
	streq r5, [r0]
	cmp r5, #0
	strne r6, [r5, #8]
	ldr r5, [r1]
	orr lr, lr, #1
	cmp r5, #0
	strne r3, [r5, #8]
	ldr r5, [r1]
	str r5, [r3, #0xc]
	str r4, [r3, #8]
	str r3, [r1]
_020B6484:
	mov r3, ip
	cmp ip, #0
	bne _020B63D0
_020B6490:
	mov r0, lr
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020B63B4

	arm_func_start FUN_020B6498
FUN_020B6498: @ 0x020B6498
	mov r1, #0
	str r1, [r0]
	bx lr
	arm_func_end FUN_020B6498

	arm_func_start FUN_020B64A4
FUN_020B64A4: @ 0x020B64A4
	push {r4, lr}
	subs lr, r1, #1
	mov r2, #0
	beq _020B64DC
	mov r4, r0
_020B64B8:
	add r3, r2, #1
	add r2, r0, r2, lsl #4
	add ip, r0, r3, lsl #4
	str ip, [r2, #0xc]
	str r4, [r2, #0x18]
	mov r2, r3
	cmp r3, lr
	add r4, r4, #0x10
	blo _020B64B8
_020B64DC:
	mov r2, #0
	str r2, [r0, #8]
	add r1, r0, r1, lsl #4
	str r2, [r1, #-4]
	pop {r4, pc}
	arm_func_end FUN_020B64A4

	arm_func_start FUN_020B64F0
FUN_020B64F0: @ 0x020B64F0
	push {r3, lr}
	ldr lr, [r1]
	cmp lr, #0
	ldrne ip, [lr, #0xc]
	strne ip, [r1]
	cmp lr, #0
	beq _020B6544
	stm lr, {r2, r3}
	mov r1, #0
	str r1, [lr, #8]
	str r1, [lr, #0xc]
	ldr r1, [r0]
	cmp r1, #0
	strne lr, [r1, #8]
	ldr r2, [r0]
	mov r1, #0
	str r2, [lr, #0xc]
	str r1, [lr, #8]
	str lr, [r0]
	mov r0, #1
	pop {r3, pc}
_020B6544:
	mov r0, #0
	pop {r3, pc}
	arm_func_end FUN_020B64F0

	arm_func_start FUN_020B654C
FUN_020B654C: @ 0x020B654C
	push {r3, lr}
	mov ip, #0
	str ip, [sp]
	bl FUN_020B6560
	pop {r3, pc}
	arm_func_end FUN_020B654C

	arm_func_start FUN_020B6560
FUN_020B6560: @ 0x020B6560
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	ldr r7, [r0]
	ldr sb, [sp, #0x28]
	cmp r7, #0
	mov r6, #0
	beq _020B65C8
	sub ip, sb, #1
	mvn r8, ip
	mov fp, r6
_020B6584:
	cmp sb, #1
	ldrls lr, [r7]
	movls r5, fp
	movls r4, r3
	bls _020B65AC
	ldr r5, [r7]
	add r4, r5, ip
	and lr, r8, r4
	sub r5, lr, r5
	add r4, r3, r5
_020B65AC:
	ldr sl, [r7, #4]
	cmp sl, r4
	movhs r6, r7
	bhs _020B65C8
	ldr r7, [r7, #0xc]
	cmp r7, #0
	bne _020B6584
_020B65C8:
	cmp r6, #0
	beq _020B6694
	cmp r5, #0
	beq _020B6628
	ldr r8, [r1]
	cmp r8, #0
	ldrne r3, [r8, #0xc]
	strne r3, [r1]
	cmp r8, #0
	beq _020B6694
	ldr r7, [r6]
	mov r3, #0
	str r7, [r8]
	str r5, [r8, #4]
	str r3, [r8, #8]
	str r3, [r8, #0xc]
	ldr r3, [r0]
	cmp r3, #0
	strne r8, [r3, #8]
	ldr r5, [r0]
	mov r3, #0
	str r5, [r8, #0xc]
	str r3, [r8, #8]
	str r8, [r0]
_020B6628:
	ldr r3, [r6, #4]
	sub r3, r3, r4
	str r3, [r6, #4]
	ldr r3, [r6]
	add r3, r3, r4
	str r3, [r6]
	ldr r3, [r6, #4]
	cmp r3, #0
	bne _020B6688
	ldr r4, [r6, #8]
	ldr r3, [r6, #0xc]
	cmp r4, #0
	strne r3, [r4, #0xc]
	streq r3, [r0]
	cmp r3, #0
	strne r4, [r3, #8]
	ldr r0, [r1]
	cmp r0, #0
	strne r6, [r0, #8]
	ldr r3, [r1]
	mov r0, #0
	str r3, [r6, #0xc]
	str r0, [r6, #8]
	str r6, [r1]
_020B6688:
	str lr, [r2]
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020B6694:
	mov r0, #0
	str r0, [r2]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_020B6560

	arm_func_start FUN_020B66A0
FUN_020B66A0: @ 0x020B66A0
	push {r3, r4, r5, r6, r7, lr}
	sub sp, sp, #8
	mov r7, r0
	ldr r5, [r7]
	mov r6, r1
	cmp r5, #0
	addeq sp, sp, #8
	popeq {r3, r4, r5, r6, r7, pc}
	add r4, sp, #0
_020B66C4:
	ldr r1, [r5]
	mov r0, r7
	str r1, [sp]
	ldr r3, [r5]
	ldr r2, [r5, #4]
	mov r1, r6
	add r3, r3, r2
	mov r2, r4
	str r3, [sp, #4]
	bl FUN_020B63B4
	cmp r0, #0
	ldreq r5, [r5, #0xc]
	beq _020B6714
	ldr r0, [sp]
	str r0, [r5]
	ldr r1, [sp, #4]
	ldr r0, [sp]
	sub r0, r1, r0
	str r0, [r5, #4]
	ldr r5, [r7]
_020B6714:
	cmp r5, #0
	bne _020B66C4
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020B66A0

	arm_func_start FUN_020B6724
FUN_020B6724: @ 0x020B6724
	push {r3, r4, r5, lr}
	sub sp, sp, #8
	add r3, r2, r3
	str r2, [sp]
	add r2, sp, #0
	mov r5, r1
	str r3, [sp, #4]
	mov r4, r0
	bl FUN_020B63B4
	ldr r3, [r5]
	cmp r3, #0
	ldrne r0, [r3, #0xc]
	strne r0, [r5]
	cmp r3, #0
	addeq sp, sp, #8
	mov r0, #0
	popeq {r3, r4, r5, pc}
	ldr r1, [sp]
	str r1, [r3]
	ldr r2, [sp, #4]
	ldr r1, [sp]
	sub r1, r2, r1
	str r1, [r3, #4]
	str r0, [r3, #8]
	str r0, [r3, #0xc]
	ldr r0, [r4]
	cmp r0, #0
	strne r3, [r0, #8]
	ldr r1, [r4]
	mov r0, #0
	str r1, [r3, #0xc]
	str r0, [r3, #8]
	str r3, [r4]
	mov r0, #1
	add sp, sp, #8
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020B6724

	arm_func_start FUN_020B67B4
FUN_020B67B4: @ 0x020B67B4
	lsl r0, r0, #4
	bx lr
	arm_func_end FUN_020B67B4

	arm_func_start FUN_020B67BC
FUN_020B67BC: @ 0x020B67BC
	push {r3, lr}
	ldr ip, _020B6800 @ =0x021D84E4
	str r0, [ip, #0xc]
	str r1, [ip, #0x10]
	str r2, [ip, #0x14]
	str r3, [ip, #0x18]
	bl FUN_020B6918
	ldr r0, [sp, #8]
	cmp r0, #0
	popeq {r3, pc}
	ldr r3, _020B6804 @ =FUN_020B6814
	ldr r1, _020B6808 @ =_02110924
	ldr r2, _020B680C @ =FUN_020B68A4
	ldr r0, _020B6810 @ =_02110928
	str r3, [r1]
	str r2, [r0]
	pop {r3, pc}
	.align 2, 0
_020B6800: .4byte 0x021D84E4
_020B6804: .4byte FUN_020B6814
_020B6808: .4byte _02110924
_020B680C: .4byte FUN_020B68A4
_020B6810: .4byte _02110928
	arm_func_end FUN_020B67BC

	arm_func_start FUN_020B6814
FUN_020B6814: @ 0x020B6814
	push {r3, r4, r5, lr}
	cmp r0, #0
	moveq r5, #0x10
	addne r0, r0, #0xf
	bicne r5, r0, #0xf
	ldr r0, _020B6894 @ =0x0007FFF0
	mov r4, r1
	cmp r5, r0
	movhs r0, #0
	pophs {r3, r4, r5, pc}
	cmp r4, #0
	add r2, sp, #0
	beq _020B685C
	ldr r0, _020B6898 @ =0x021D84E8
	ldr r1, _020B689C @ =0x021D84EC
	mov r3, r5
	bl FUN_020B654C
	b _020B686C
_020B685C:
	ldr r0, _020B68A0 @ =0x021D84E4
	ldr r1, _020B689C @ =0x021D84EC
	mov r3, r5
	bl FUN_020B654C
_020B686C:
	cmp r0, #0
	moveq r0, #0
	popeq {r3, r4, r5, pc}
	ldr r0, [sp]
	lsr r1, r5, #4
	lsl r0, r0, #0xd
	lsr r0, r0, #0x10
	orr r0, r0, r1, lsl #16
	orr r0, r0, r4, lsl #31
	pop {r3, r4, r5, pc}
	.align 2, 0
_020B6894: .4byte 0x0007FFF0
_020B6898: .4byte 0x021D84E8
_020B689C: .4byte 0x021D84EC
_020B68A0: .4byte 0x021D84E4
	arm_func_end FUN_020B6814

	arm_func_start FUN_020B68A4
FUN_020B68A4: @ 0x020B68A4
	push {r3, lr}
	ldr r1, _020B6908 @ =0x7FFF0000
	lsl r2, r0, #0x10
	and r1, r0, r1
	lsr r1, r1, #0x10
	and r0, r0, #0x80000000
	lsr r2, r2, #0xd
	lsls r3, r1, #4
	lsr r0, r0, #0x1f
	beq _020B6900
	cmp r0, #0
	beq _020B68E4
	ldr r0, _020B690C @ =0x021D84E8
	ldr r1, _020B6910 @ =0x021D84EC
	bl FUN_020B6724
	b _020B68F0
_020B68E4:
	ldr r0, _020B6914 @ =0x021D84E4
	ldr r1, _020B6910 @ =0x021D84EC
	bl FUN_020B6724
_020B68F0:
	cmp r0, #0
	movne r0, #0
	moveq r0, #1
	pop {r3, pc}
_020B6900:
	mov r0, #2
	pop {r3, pc}
	.align 2, 0
_020B6908: .4byte 0x7FFF0000
_020B690C: .4byte 0x021D84E8
_020B6910: .4byte 0x021D84EC
_020B6914: .4byte 0x021D84E4
	arm_func_end FUN_020B68A4

	arm_func_start FUN_020B6918
FUN_020B6918: @ 0x020B6918
	push {r4, lr}
	sub sp, sp, #0x30
	ldr lr, _020B6B00 @ =0x021092A0
	add r4, sp, #0
	ldm lr!, {r0, r1, r2, r3}
	mov ip, r4
	stm r4!, {r0, r1, r2, r3}
	ldm lr!, {r0, r1, r2, r3}
	stm r4!, {r0, r1, r2, r3}
	ldm lr, {r0, r1, r2, r3}
	stm r4, {r0, r1, r2, r3}
	ldr r0, _020B6B04 @ =0x021D84E4
	mov r3, #0
	ldr r2, [r0, #0x10]
	ldr r1, [r0, #0xc]
	add r0, r2, r2, lsr #1
	lsr r4, r2, #1
	sub r1, r1, r0
_020B6960:
	cmp r3, #0
	cmpne r3, #2
	bne _020B69A0
	ldr lr, [ip]
	cmp lr, #0
	cmpne r2, #0
	beq _020B69A0
	ldr r0, [ip, #8]
	cmp lr, r2
	movhi lr, r2
	add r0, r0, lr
	str r0, [ip, #8]
	ldr r0, [ip]
	sub r2, r2, lr
	sub r0, r0, lr
	str r0, [ip]
_020B69A0:
	add r3, r3, #1
	cmp r3, #4
	add ip, ip, #0xc
	blo _020B6960
	ldr r0, [sp, #0xc]
	add r2, sp, #0
	sub r0, r0, r4
	str r0, [sp, #0xc]
	mov r3, #0
_020B69C4:
	ldr ip, [r2]
	cmp ip, #0
	cmpne r1, #0
	beq _020B69F8
	ldr r0, [r2, #4]
	cmp ip, r1
	movhi ip, r1
	add r0, r0, ip
	str r0, [r2, #4]
	ldr r0, [r2]
	sub r1, r1, ip
	sub r0, r0, ip
	str r0, [r2]
_020B69F8:
	add r3, r3, #1
	cmp r3, #4
	add r2, r2, #0xc
	blo _020B69C4
	ldr r0, _020B6B08 @ =0x021D84E4
	bl FUN_020B6498
	ldr r0, _020B6B0C @ =0x021D84E8
	bl FUN_020B6498
	ldr r0, _020B6B04 @ =0x021D84E4
	ldr r1, [r0, #0x18]
	ldr r0, [r0, #0x14]
	lsr r1, r1, #4
	bl FUN_020B64A4
	ldr r3, [sp, #8]
	ldr r1, _020B6B04 @ =0x021D84E4
	cmp r3, #0
	str r0, [r1, #8]
	beq _020B6A50
	ldr r0, _020B6B0C @ =0x021D84E8
	ldr r1, _020B6B10 @ =0x021D84EC
	mov r2, #0
	bl FUN_020B64F0
_020B6A50:
	ldr r3, [sp, #4]
	ldr r2, [sp, #8]
	cmp r3, #0
	beq _020B6A6C
	ldr r0, _020B6B08 @ =0x021D84E4
	ldr r1, _020B6B10 @ =0x021D84EC
	bl FUN_020B64F0
_020B6A6C:
	ldr r3, [sp, #0x20]
	cmp r3, #0
	beq _020B6A88
	ldr r0, _020B6B0C @ =0x021D84E8
	ldr r1, _020B6B10 @ =0x021D84EC
	mov r2, #0x40000
	bl FUN_020B64F0
_020B6A88:
	ldr r3, [sp, #0x1c]
	ldr r2, [sp, #0x20]
	cmp r3, #0
	beq _020B6AA8
	ldr r0, _020B6B08 @ =0x021D84E4
	ldr r1, _020B6B10 @ =0x021D84EC
	add r2, r2, #0x40000
	bl FUN_020B64F0
_020B6AA8:
	ldr r3, [sp, #0x28]
	cmp r3, #0
	beq _020B6AC4
	ldr r0, _020B6B08 @ =0x021D84E4
	ldr r1, _020B6B10 @ =0x021D84EC
	mov r2, #0x60000
	bl FUN_020B64F0
_020B6AC4:
	ldr r3, [sp, #0x10]
	cmp r3, #0
	beq _020B6AE0
	ldr r0, _020B6B08 @ =0x021D84E4
	ldr r1, _020B6B10 @ =0x021D84EC
	add r2, r4, #0x20000
	bl FUN_020B64F0
_020B6AE0:
	ldr r0, _020B6B08 @ =0x021D84E4
	ldr r1, _020B6B10 @ =0x021D84EC
	bl FUN_020B66A0
	ldr r0, _020B6B0C @ =0x021D84E8
	ldr r1, _020B6B10 @ =0x021D84EC
	bl FUN_020B66A0
	add sp, sp, #0x30
	pop {r4, pc}
	.align 2, 0
_020B6B00: .4byte 0x021092A0
_020B6B04: .4byte 0x021D84E4
_020B6B08: .4byte 0x021D84E4
_020B6B0C: .4byte 0x021D84E8
_020B6B10: .4byte 0x021D84EC
	arm_func_end FUN_020B6918

	arm_func_start FUN_020B6B14
FUN_020B6B14: @ 0x020B6B14
	lsl r0, r0, #4
	bx lr
	arm_func_end FUN_020B6B14

	arm_func_start FUN_020B6B1C
FUN_020B6B1C: @ 0x020B6B1C
	push {r4, lr}
	ldr ip, _020B6B5C @ =0x021D8500
	mov r4, r3
	str r0, [ip, #8]
	str r1, [ip, #0xc]
	str r2, [ip, #0x10]
	bl FUN_020B6C80
	cmp r4, #0
	popeq {r4, pc}
	ldr r3, _020B6B60 @ =FUN_020B6B70
	ldr r1, _020B6B64 @ =_0211092C
	ldr r2, _020B6B68 @ =FUN_020B6C3C
	ldr r0, _020B6B6C @ =_02110930
	str r3, [r1]
	str r2, [r0]
	pop {r4, pc}
	.align 2, 0
_020B6B5C: .4byte 0x021D8500
_020B6B60: .4byte FUN_020B6B70
_020B6B64: .4byte _0211092C
_020B6B68: .4byte FUN_020B6C3C
_020B6B6C: .4byte _02110930
	arm_func_end FUN_020B6B1C

	arm_func_start FUN_020B6B70
FUN_020B6B70: @ 0x020B6B70
	push {r4, lr}
	sub sp, sp, #8
	cmp r0, #0
	moveq r4, #8
	addne r0, r0, #7
	bicne r4, r0, #7
	ldr r0, _020B6C30 @ =0x0007FFF8
	cmp r4, r0
	addhs sp, sp, #8
	movhs r0, #0
	pophs {r4, pc}
	cmp r1, #0
	add r2, sp, #4
	beq _020B6BEC
	mov ip, #8
	ldr r0, _020B6C34 @ =0x021D8500
	ldr r1, _020B6C38 @ =0x021D8504
	mov r3, r4
	str ip, [sp]
	bl FUN_020B6560
	ldr r2, [sp, #4]
	add r1, r2, r4
	cmp r1, #0x10000
	bls _020B6C04
	ldr r0, _020B6C34 @ =0x021D8500
	ldr r1, _020B6C38 @ =0x021D8504
	mov r3, r4
	bl FUN_020B6724
	add sp, sp, #8
	mov r0, #0
	pop {r4, pc}
_020B6BEC:
	ldr r0, _020B6C34 @ =0x021D8500
	mov ip, #0x10
	ldr r1, _020B6C38 @ =0x021D8504
	mov r3, r4
	str ip, [sp]
	bl FUN_020B6560
_020B6C04:
	cmp r0, #0
	addeq sp, sp, #8
	moveq r0, #0
	popeq {r4, pc}
	ldr r0, [sp, #4]
	lsr r1, r4, #3
	lsl r0, r0, #0xd
	lsr r0, r0, #0x10
	orr r0, r0, r1, lsl #16
	add sp, sp, #8
	pop {r4, pc}
	.align 2, 0
_020B6C30: .4byte 0x0007FFF8
_020B6C34: .4byte 0x021D8500
_020B6C38: .4byte 0x021D8504
	arm_func_end FUN_020B6B70

	arm_func_start FUN_020B6C3C
FUN_020B6C3C: @ 0x020B6C3C
	push {r3, lr}
	mov r1, #0x10000
	rsb r1, r1, #0
	and r1, r0, r1
	lsl r2, r0, #0x10
	lsr r3, r1, #0x10
	ldr r0, _020B6C78 @ =0x021D8500
	ldr r1, _020B6C7C @ =0x021D8504
	lsr r2, r2, #0xd
	lsl r3, r3, #3
	bl FUN_020B6724
	cmp r0, #0
	moveq r0, #1
	movne r0, #0
	pop {r3, pc}
	.align 2, 0
_020B6C78: .4byte 0x021D8500
_020B6C7C: .4byte 0x021D8504
	arm_func_end FUN_020B6C3C

	arm_func_start FUN_020B6C80
FUN_020B6C80: @ 0x020B6C80
	push {r3, lr}
	ldr r0, _020B6CD0 @ =0x021D8500
	ldr r1, [r0, #0x10]
	ldr r0, [r0, #0xc]
	lsr r1, r1, #4
	bl FUN_020B64A4
	ldr r1, _020B6CD0 @ =0x021D8500
	str r0, [r1, #4]
	ldr r0, _020B6CD4 @ =0x021D8500
	bl FUN_020B6498
	ldr r1, _020B6CD0 @ =0x021D8500
	ldr r0, _020B6CD4 @ =0x021D8500
	ldr r3, [r1, #8]
	ldr r1, _020B6CD8 @ =0x021D8504
	mov r2, #0
	bl FUN_020B64F0
	ldr r0, _020B6CD4 @ =0x021D8500
	ldr r1, _020B6CD8 @ =0x021D8504
	bl FUN_020B66A0
	pop {r3, pc}
	.align 2, 0
_020B6CD0: .4byte 0x021D8500
_020B6CD4: .4byte 0x021D8500
_020B6CD8: .4byte 0x021D8504
	arm_func_end FUN_020B6C80

	arm_func_start FUN_020B6CDC
FUN_020B6CDC: @ 0x020B6CDC
	push {r3, r4, r5, lr}
	mov r5, r1
	ldr r1, _020B6D14 @ =0x41424E4B
	bl FUN_020B720C
	movs r4, r0
	moveq r0, #0
	streq r0, [r5]
	popeq {r3, r4, r5, pc}
	add r0, r4, #8
	bl FUN_020B6D30
	add r0, r4, #8
	str r0, [r5]
	mov r0, #1
	pop {r3, r4, r5, pc}
	.align 2, 0
_020B6D14: .4byte 0x41424E4B
	arm_func_end FUN_020B6CDC

	arm_func_start FUN_020B6D18
FUN_020B6D18: @ 0x020B6D18
	ldr ip, _020B6D20 @ =FUN_020B6CDC
	bx ip
	.align 2, 0
_020B6D20: .4byte FUN_020B6CDC
	arm_func_end FUN_020B6D18

	arm_func_start FUN_020B6D24
FUN_020B6D24: @ 0x020B6D24
	ldr ip, _020B6D2C @ =FUN_020B6CDC
	bx ip
	.align 2, 0
_020B6D2C: .4byte FUN_020B6CDC
	arm_func_end FUN_020B6D24

	arm_func_start FUN_020B6D30
FUN_020B6D30: @ 0x020B6D30
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	ldr r1, [r0, #4]
	mov ip, #0
	add r1, r1, r0
	str r1, [r0, #4]
	ldr r1, [r0, #8]
	add r1, r1, r0
	str r1, [r0, #8]
	ldr r1, [r0, #0xc]
	add r6, r1, r0
	str r6, [r0, #0xc]
	ldrh r1, [r0]
	ldmib r0, {r4, r5}
	cmp r1, #0
	bls _020B6DD4
	mov r1, ip
_020B6D70:
	add r2, r4, ip, lsl #4
	ldr r7, [r2, #0xc]
	lsl r3, ip, #4
	add r7, r5, r7
	str r7, [r2, #0xc]
	ldrh r7, [r4, r3]
	mov lr, r1
	cmp r7, #0
	bls _020B6DBC
_020B6D94:
	ldr sb, [r2, #0xc]
	add r7, lr, #1
	ldr r8, [sb, lr, lsl #3]
	lsl r7, r7, #0x10
	add r8, r6, r8
	str r8, [sb, lr, lsl #3]
	ldrh r8, [r4, r3]
	lsr lr, r7, #0x10
	cmp r8, r7, lsr #16
	bhi _020B6D94
_020B6DBC:
	ldrh r3, [r0]
	add r2, ip, #1
	lsl r2, r2, #0x10
	cmp r3, r2, lsr #16
	lsr ip, r2, #0x10
	bhi _020B6D70
_020B6DD4:
	ldr r1, [r0, #0x14]
	cmp r1, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	add r2, r1, r0
	str r2, [r0, #0x14]
	add r4, r2, #8
	ldr r1, [r4, #4]
	mov r0, #0
	add r1, r1, r4
	str r1, [r4, #4]
	ldrh r1, [r2, #8]
	cmp r1, #0
	popls {r3, r4, r5, r6, r7, r8, sb, pc}
	mov r3, r0
	mov r7, r0
_020B6E10:
	ldr r6, [r4, #4]
	mov r1, r7
	add r2, r6, r3
	ldr r5, [r2, #4]
	add r5, r5, r4
	str r5, [r2, #4]
	ldr r5, [r2, #8]
	add r5, r5, r4
	str r5, [r2, #8]
	ldrh r5, [r6, r3]
	cmp r5, #0
	bls _020B6E68
	mov r8, r7
_020B6E44:
	ldr r6, [r2, #8]
	add r1, r1, #1
	ldr r5, [r6, r8]
	add r5, r5, r4
	str r5, [r6, r8]
	ldrh r5, [r2]
	add r8, r8, #4
	cmp r1, r5
	blo _020B6E44
_020B6E68:
	ldrh r1, [r4]
	add r0, r0, #1
	add r3, r3, #0xc
	cmp r0, r1
	blo _020B6E10
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	arm_func_end FUN_020B6D30

	arm_func_start FUN_020B6E80
FUN_020B6E80: @ 0x020B6E80
	ldrh r2, [r0]
	cmp r2, r1
	ldrhi r0, [r0, #4]
	addhi r0, r0, r1, lsl #4
	movls r0, #0
	bx lr
	arm_func_end FUN_020B6E80

	arm_func_start FUN_020B6E98
FUN_020B6E98: @ 0x020B6E98
	ldrh r1, [r0, #2]
	tst r1, #1
	ldrh r1, [r0]
	ldrne r0, [r0, #4]
	addne r0, r0, r1, lsl #4
	ldreq r0, [r0, #4]
	addeq r0, r0, r1, lsl #3
	bx lr
	arm_func_end FUN_020B6E98

	arm_func_start FUN_020B6EB8
FUN_020B6EB8: @ 0x020B6EB8
	ldr ip, _020B6EC4 @ =FUN_020B7254
	add r0, r0, #8
	bx ip
	.align 2, 0
_020B6EC4: .4byte FUN_020B7254
	arm_func_end FUN_020B6EB8

	arm_func_start FUN_020B6EC8
FUN_020B6EC8: @ 0x020B6EC8
	push {r3, r4, r5, lr}
	mov r5, r1
	ldr r1, _020B6F00 @ =0x4345424B
	bl FUN_020B720C
	movs r4, r0
	moveq r0, #0
	streq r0, [r5]
	popeq {r3, r4, r5, pc}
	add r0, r4, #8
	bl FUN_020B6F2C
	add r0, r4, #8
	str r0, [r5]
	mov r0, #1
	pop {r3, r4, r5, pc}
	.align 2, 0
_020B6F00: .4byte 0x4345424B
	arm_func_end FUN_020B6EC8

	arm_func_start FUN_020B6F04
FUN_020B6F04: @ 0x020B6F04
	ldrh r2, [r0]
	cmp r1, r2
	movhs r0, #0
	bxhs lr
	ldrh r2, [r0, #2]
	ldr r0, [r0, #4]
	tst r2, #1
	addne r0, r0, r1, lsl #4
	addeq r0, r0, r1, lsl #3
	bx lr
	arm_func_end FUN_020B6F04

	arm_func_start FUN_020B6F2C
FUN_020B6F2C: @ 0x020B6F2C
	push {r4, r5, r6, lr}
	mov r5, r0
	ldr r1, [r5, #4]
	add r1, r1, r5
	str r1, [r5, #4]
	bl FUN_020B6E98
	ldrh r1, [r5]
	mov r4, r0
	mov r6, #0
	cmp r1, #0
	bls _020B6F88
_020B6F58:
	mov r0, r5
	mov r1, r6
	bl FUN_020B6F04
	ldr r2, [r0, #4]
	add r1, r6, #1
	add r2, r2, r4
	str r2, [r0, #4]
	lsl r0, r1, #0x10
	ldrh r1, [r5]
	lsr r6, r0, #0x10
	cmp r1, r0, lsr #16
	bhi _020B6F58
_020B6F88:
	ldr r0, [r5, #0xc]
	cmp r0, #0
	beq _020B6FAC
	add r1, r0, r5
	str r1, [r5, #0xc]
	ldr r0, [r1, #4]
	add r0, r0, r1
	str r0, [r1, #4]
	str r1, [r5, #0xc]
_020B6FAC:
	ldr r0, [r5, #0x14]
	cmp r0, #0
	popeq {r4, r5, r6, pc}
	add r0, r0, r5
	str r0, [r5, #0x14]
	bl FUN_020B6EB8
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020B6F2C

	arm_func_start FUN_020B6FC8
FUN_020B6FC8: @ 0x020B6FC8
	push {r3, r4, r5, lr}
	mov r5, r1
	ldr r1, _020B7000 @ =0x4D43424B
	bl FUN_020B720C
	movs r4, r0
	moveq r0, #0
	streq r0, [r5]
	popeq {r3, r4, r5, pc}
	add r0, r4, #8
	bl FUN_020B7014
	add r0, r4, #8
	str r0, [r5]
	mov r0, #1
	pop {r3, r4, r5, pc}
	.align 2, 0
_020B7000: .4byte 0x4D43424B
	arm_func_end FUN_020B6FC8

	arm_func_start FUN_020B7004
FUN_020B7004: @ 0x020B7004
	ldr ip, _020B7010 @ =FUN_020B7254
	add r0, r0, #8
	bx ip
	.align 2, 0
_020B7010: .4byte FUN_020B7254
	arm_func_end FUN_020B7004

	arm_func_start FUN_020B7014
FUN_020B7014: @ 0x020B7014
	push {r4, lr}
	ldr r1, [r0, #4]
	mov lr, #0
	add r1, r1, r0
	str r1, [r0, #4]
	ldr r1, [r0, #8]
	add r1, r1, r0
	str r1, [r0, #8]
	ldrh r1, [r0]
	ldr r4, [r0, #4]
	cmp r1, #0
	bls _020B7070
_020B7044:
	add r3, r4, lr, lsl #3
	ldr ip, [r0, #8]
	ldr r2, [r3, #4]
	add r1, lr, #1
	add r2, ip, r2
	str r2, [r3, #4]
	ldrh r2, [r0]
	lsl r1, r1, #0x10
	lsr lr, r1, #0x10
	cmp r2, r1, lsr #16
	bhi _020B7044
_020B7070:
	ldr r1, [r0, #0x10]
	cmp r1, #0
	popeq {r4, pc}
	add r1, r1, r0
	str r1, [r0, #0x10]
	mov r0, r1
	bl FUN_020B7004
	pop {r4, pc}
	arm_func_end FUN_020B7014

	arm_func_start FUN_020B7090
FUN_020B7090: @ 0x020B7090
	ldrh r2, [r0]
	cmp r1, r2
	ldrlo r0, [r0, #4]
	addlo r0, r0, r1, lsl #3
	movhs r0, #0
	bx lr
	arm_func_end FUN_020B7090

	arm_func_start FUN_020B70A8
FUN_020B70A8: @ 0x020B70A8
	push {r3, r4, r5, lr}
	mov r5, r1
	ldr r1, _020B70E0 @ =0x43484152
	bl FUN_020B720C
	movs r4, r0
	moveq r0, #0
	streq r0, [r5]
	popeq {r3, r4, r5, pc}
	add r0, r4, #8
	bl FUN_020B70E4
	add r0, r4, #8
	str r0, [r5]
	mov r0, #1
	pop {r3, r4, r5, pc}
	.align 2, 0
_020B70E0: .4byte 0x43484152
	arm_func_end FUN_020B70A8

	arm_func_start FUN_020B70E4
FUN_020B70E4: @ 0x020B70E4
	ldr r1, [r0, #0x14]
	add r1, r1, r0
	str r1, [r0, #0x14]
	bx lr
	arm_func_end FUN_020B70E4

	arm_func_start FUN_020B70F4
FUN_020B70F4: @ 0x020B70F4
	push {r3, r4, r5, lr}
	mov r5, r1
	ldr r1, _020B712C @ =0x43484152
	bl FUN_020B720C
	movs r4, r0
	moveq r0, #0
	streq r0, [r5]
	popeq {r3, r4, r5, pc}
	add r0, r4, #8
	bl FUN_020B7130
	add r0, r4, #8
	str r0, [r5]
	mov r0, #1
	pop {r3, r4, r5, pc}
	.align 2, 0
_020B712C: .4byte 0x43484152
	arm_func_end FUN_020B70F4

	arm_func_start FUN_020B7130
FUN_020B7130: @ 0x020B7130
	ldr r1, [r0, #0x14]
	add r1, r1, r0
	str r1, [r0, #0x14]
	bx lr
	arm_func_end FUN_020B7130

	arm_func_start FUN_020B7140
FUN_020B7140: @ 0x020B7140
	push {r3, r4, r5, lr}
	mov r5, r1
	ldr r1, _020B7178 @ =0x504C5454
	bl FUN_020B720C
	movs r4, r0
	moveq r0, #0
	streq r0, [r5]
	popeq {r3, r4, r5, pc}
	add r0, r4, #8
	bl FUN_020B71C8
	add r0, r4, #8
	str r0, [r5]
	mov r0, #1
	pop {r3, r4, r5, pc}
	.align 2, 0
_020B7178: .4byte 0x504C5454
	arm_func_end FUN_020B7140

	arm_func_start FUN_020B717C
FUN_020B717C: @ 0x020B717C
	push {r3, r4, r5, lr}
	mov r5, r1
	ldr r1, _020B71B4 @ =0x50434D50
	bl FUN_020B720C
	movs r4, r0
	moveq r0, #0
	streq r0, [r5]
	popeq {r3, r4, r5, pc}
	add r0, r4, #8
	bl FUN_020B71B8
	add r0, r4, #8
	str r0, [r5]
	mov r0, #1
	pop {r3, r4, r5, pc}
	.align 2, 0
_020B71B4: .4byte 0x50434D50
	arm_func_end FUN_020B717C

	arm_func_start FUN_020B71B8
FUN_020B71B8: @ 0x020B71B8
	ldr r1, [r0, #4]
	add r1, r1, r0
	str r1, [r0, #4]
	bx lr
	arm_func_end FUN_020B71B8

	arm_func_start FUN_020B71C8
FUN_020B71C8: @ 0x020B71C8
	ldr r1, [r0, #0xc]
	add r1, r1, r0
	str r1, [r0, #0xc]
	bx lr
	arm_func_end FUN_020B71C8

	arm_func_start FUN_020B71D8
FUN_020B71D8: @ 0x020B71D8
	push {r4, lr}
	mov r4, r1
	ldr r1, _020B7208 @ =0x5343524E
	bl FUN_020B720C
	cmp r0, #0
	moveq r0, #0
	streq r0, [r4]
	popeq {r4, pc}
	add r0, r0, #8
	str r0, [r4]
	mov r0, #1
	pop {r4, pc}
	.align 2, 0
_020B7208: .4byte 0x5343524E
	arm_func_end FUN_020B71D8

	arm_func_start FUN_020B720C
FUN_020B720C: @ 0x020B720C
	ldrh r2, [r0, #0xc]
	ldrh ip, [r0, #0xe]
	mov r3, #0
	add r0, r0, r2
	cmp ip, #0
	bls _020B724C
_020B7224:
	ldr r2, [r0]
	cmp r2, r1
	bxeq lr
	add r2, r3, #1
	lsl r2, r2, #0x10
	ldr r3, [r0, #4]
	cmp ip, r2, lsr #16
	add r0, r0, r3
	lsr r3, r2, #0x10
	bhi _020B7224
_020B724C:
	mov r0, #0
	bx lr
	arm_func_end FUN_020B720C

	arm_func_start FUN_020B7254
FUN_020B7254: @ 0x020B7254
	ldr r1, [r0, #4]
	mov ip, #0
	add r1, r1, r0
	str r1, [r0, #4]
	ldrh r1, [r0]
	cmp r1, #0
	bxls lr
_020B7270:
	ldr r3, [r0, #4]
	add r1, ip, #1
	ldr r2, [r3, ip, lsl #2]
	lsl r1, r1, #0x10
	add r2, r0, r2
	str r2, [r3, ip, lsl #2]
	ldrh r2, [r0]
	lsr ip, r1, #0x10
	cmp r2, r1, lsr #16
	bhi _020B7270
	bx lr
	arm_func_end FUN_020B7254

	arm_func_start FUN_020B729C
FUN_020B729C: @ 0x020B729C
	push {r3, r4, r5, r6, r7, lr}
	lsl ip, r3, #8
	lsl r0, r0, #8
	ldr r3, _020B734C @ =0x04000500
	asr r4, ip, #0x10
	asr r0, r0, #0x10
	lsl lr, r4, #0x10
	lsl r4, r0, #0x10
	lsl r0, r1, #8
	mov ip, #1
	asr r0, r0, #0x10
	lsl r5, r0, #0x10
	mov r0, #0x10000000
	lsl r1, r2, #8
	asr r1, r1, #0x10
	lsl r2, r1, #0x10
	lsr r7, lr, #0x10
	lsr r1, r4, #0x10
	lsr r5, r5, #0x10
	lsr r2, r2, #0x10
	str ip, [r3]
	orr r4, r1, r7, lsl #16
	sub r6, r3, #0x78
	str r4, [r6]
	sub lr, r3, #0x74
	str r0, [lr]
	mov ip, #0
	str ip, [lr]
	orr r4, r5, r7, lsl #16
	str r4, [r6]
	add r0, r0, #0x1000
	str r0, [lr]
	str ip, [lr]
	orr r0, r5, r2, lsl #16
	str r0, [r6]
	mov r0, #0x1000
	str r0, [lr]
	str ip, [lr]
	orr r0, r1, r2, lsl #16
	str r0, [r6]
	str ip, [lr]
	str ip, [lr]
	str ip, [r3, #4]
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020B734C: .4byte 0x04000500
	arm_func_end FUN_020B729C

	arm_func_start FUN_020B7350
FUN_020B7350: @ 0x020B7350
	push {r3, r4, r5, lr}
	sub sp, sp, #0x38
	ldr r2, _020B7400 @ =0xBFFF0000
	ldr r1, _020B7404 @ =0x04000580
	lsl r0, r2, #6
	str r2, [r1]
	str r0, [sp]
	mov r1, #0x400000
	str r1, [sp, #4]
	mov r0, #0
	str r1, [sp, #8]
	mov r1, #1
	str r1, [sp, #0xc]
	mov r2, r0
	mov r1, #0xc0000
	mov r3, #0x100000
	str r0, [sp, #0x10]
	bl FUN_020CFB08
	ldr r1, _020B7408 @ =0x0400044C
	mov r5, #0
	ldr r0, _020B740C @ =0x021092E0
	str r5, [r1]
	add r4, sp, #0x2c
	ldr ip, _020B7410 @ =0x021092EC
	add lr, sp, #0x20
	ldm r0, {r0, r1, r2}
	stm lr, {r0, r1, r2}
	add r3, sp, #0x14
	ldm ip, {r0, r1, r2}
	stm r3, {r0, r1, r2}
	mov r2, r3
	str r5, [r4]
	str r5, [r4, #4]
	str r5, [r4, #8]
	mov r0, r4
	mov r1, lr
	mov r3, #1
	str r5, [sp]
	bl FUN_020CFB6C
	ldr r0, _020B7414 @ =0x04000440
	mov r1, #1
	str r1, [r0]
	add sp, sp, #0x38
	pop {r3, r4, r5, pc}
	.align 2, 0
_020B7400: .4byte 0xBFFF0000
_020B7404: .4byte 0x04000580
_020B7408: .4byte 0x0400044C
_020B740C: .4byte 0x021092E0
_020B7410: .4byte 0x021092EC
_020B7414: .4byte 0x04000440
	arm_func_end FUN_020B7350

	arm_func_start FUN_020B7418
FUN_020B7418: @ 0x020B7418
	push {r4, lr}
	ldr lr, _020B747C @ =0x04000470
	lsl r0, r0, #0xc
	str r0, [lr]
	lsl r4, r1, #0xc
	ldr ip, [sp, #8]
	str r4, [lr]
	lsl r4, r2, #0xc
	ldr r0, [sp, #0xc]
	ldr r1, [sp, #0x14]
	ldr r2, [sp, #0x10]
	str r4, [lr]
	lsl r4, r3, #0xc
	ldr r3, [sp, #0x18]
	lsl ip, ip, #0xc
	str r4, [lr, #-4]!
	str ip, [lr]
	mov ip, #0x1000
	lsl r0, r0, #0xc
	lsl r1, r1, #0xc
	lsl r2, r2, #0xc
	lsl r3, r3, #0xc
	str ip, [lr]
	bl FUN_020B729C
	pop {r4, pc}
	.align 2, 0
_020B747C: .4byte 0x04000470
	arm_func_end FUN_020B7418

	arm_func_start FUN_020B7480
FUN_020B7480: @ 0x020B7480
	push {r4, lr}
	mov r4, r0
	ldr r0, [r4, #0x18]
	cmp r0, #0
	ldreq r0, [r4, #0x1c]
	ldreq r0, [r0, #8]
	cmp r0, #3
	cmpne r0, #4
	bne _020B751C
	ldr r0, [r4, #8]
	eor r0, r0, #1
	str r0, [r4, #8]
	ldr r1, [r4, #0x1c]
	ldr r2, [r4]
	ldrh r0, [r1, #2]
	ldr r1, [r1, #0xc]
	add r0, r1, r0, lsl #3
	sub r0, r0, #8
	cmp r2, r0
	bhi _020B7564
	ldr r0, [r4, #0x20]
	cmp r0, #1
	bne _020B74EC
	ldr r0, [r4, #0x24]
	ldr r1, [r4, #0x10]
	ldr r2, [r4, #0x28]
	blx r2
_020B74EC:
	ldr r0, [r4, #0x18]
	cmp r0, #0
	ldreq r0, [r4, #0x1c]
	ldreq r0, [r0, #8]
	cmp r0, #2
	cmpne r0, #4
	movne r0, #0
	strne r0, [r4, #0xc]
	bne _020B7564
	mov r0, r4
	bl FUN_020B781C
	b _020B7564
_020B751C:
	ldr r0, [r4, #0x20]
	cmp r0, #1
	bne _020B7538
	ldr r0, [r4, #0x24]
	ldr r1, [r4, #0x10]
	ldr r2, [r4, #0x28]
	blx r2
_020B7538:
	ldr r0, [r4, #0x18]
	cmp r0, #0
	ldreq r0, [r4, #0x1c]
	ldreq r0, [r0, #8]
	cmp r0, #2
	cmpne r0, #4
	movne r0, #0
	strne r0, [r4, #0xc]
	bne _020B7564
	mov r0, r4
	bl FUN_020B781C
_020B7564:
	ldr r1, [r4, #0x1c]
	ldr r2, [r4]
	ldrh r0, [r1]
	ldr r1, [r1, #0xc]
	add r0, r1, r0, lsl #3
	sub r0, r0, #8
	cmp r2, r0
	strhi r0, [r4]
	pophi {r4, pc}
	cmp r2, r1
	strlo r1, [r4]
	pop {r4, pc}
	arm_func_end FUN_020B7480

	arm_func_start FUN_020B7594
FUN_020B7594: @ 0x020B7594
	ldr r3, [r0, #0x1c]
	ldrh r2, [r3]
	cmp r1, r2
	bhs _020B75C4
	ldr r2, [r3, #0xc]
	add r2, r2, r1, lsl #3
	str r2, [r0]
	ldrh r1, [r2, #4]
	cmp r1, #0
	strne r2, [r0, #4]
	mov r0, #1
	bx lr
_020B75C4:
	mov r0, #0
	bx lr
	arm_func_end FUN_020B7594

	arm_func_start FUN_020B75CC
FUN_020B75CC: @ 0x020B75CC
	ldr r0, [r0, #4]
	ldr r0, [r0]
	bx lr
	arm_func_end FUN_020B75CC

	arm_func_start FUN_020B75D8
FUN_020B75D8: @ 0x020B75D8
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sl, r0
	ldr r0, [sl, #0xc]
	mov sb, #0
	cmp r0, #1
	movne r0, sb
	popne {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, [sl, #0x14]
	smull r2, r1, r0, r1
	adds r0, r2, #0x800
	adc r1, r1, sb
	lsr r0, r0, #0xc
	orr r0, r0, r1, lsl #20
	bl FUN_020E4A90
	mov r4, #1
	ldr r1, [sl, #0x10]
	mov fp, sb
	add r0, r1, r0
	str r0, [sl, #0x10]
	mov r8, r4
	mov r7, sb
	mov r5, sb
	mov r6, r4
	b _020B7754
_020B7638:
	ldr r0, [sl]
	ldr r1, [sl, #0x10]
	ldrh r0, [r0, #4]
	mov sb, r8
	sub r0, r1, r0, lsl #12
	str r0, [sl, #0x10]
	ldr r0, [sl, #0x14]
	cmp r0, #0
	movgt r1, r8
	ldr r0, [sl, #8]
	movle r1, r7
	teq r1, r0
	ldr r0, [sl]
	addne r0, r0, #8
	subeq r0, r0, #8
	str r0, [sl]
	ldr r1, [sl, #0x14]
	ldr r0, [sl]
	cmp r1, #0
	movgt r2, r6
	ldr r1, [sl, #8]
	movle r2, r5
	teq r2, r1
	ldr r1, [sl, #0x1c]
	ldr r2, [r1, #0xc]
	beq _020B76B8
	ldrh r1, [r1]
	add r1, r2, r1, lsl #3
	cmp r0, r1
	movhs r0, r4
	movlo r0, fp
	b _020B76D0
_020B76B8:
	ldrh r1, [r1, #2]
	add r1, r2, r1, lsl #3
	sub r1, r1, #8
	cmp r0, r1
	movls r0, #1
	movhi r0, #0
_020B76D0:
	cmp r0, #0
	beq _020B76E0
	mov r0, sl
	bl FUN_020B7480
_020B76E0:
	ldr r1, [sl]
	ldrh r0, [r1, #4]
	cmp r0, #0
	strne r1, [sl, #4]
	ldr r0, [sl, #0x20]
	cmp r0, #0
	beq _020B7754
	ldr r0, [sl, #0x1c]
	ldr r2, [sl, #0x20]
	ldr r0, [r0, #0xc]
	cmp r2, #2
	ldr r1, [sl]
	sub r0, r1, r0
	lsl r0, r0, #0xd
	lsr r1, r0, #0x10
	beq _020B772C
	cmp r2, #3
	beq _020B7748
	b _020B7754
_020B772C:
	ldrh r0, [sl, #0x2c]
	cmp r1, r0
	bne _020B7754
	ldr r0, [sl, #0x24]
	ldr r2, [sl, #0x28]
	blx r2
	b _020B7754
_020B7748:
	ldr r0, [sl, #0x24]
	ldr r2, [sl, #0x28]
	blx r2
_020B7754:
	ldr r0, [sl, #0xc]
	cmp r0, #0
	beq _020B7778
	ldr r0, [sl]
	ldr r1, [sl, #0x10]
	ldrh r0, [r0, #4]
	cmp r1, r0, lsl #12
	movge r0, #1
	bge _020B777C
_020B7778:
	mov r0, #0
_020B777C:
	cmp r0, #0
	bne _020B7638
	mov r0, sb
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_020B75D8

	arm_func_start FUN_020B778C
FUN_020B778C: @ 0x020B778C
	push {r4, lr}
	mov r4, r0
	bl FUN_020B7594
	cmp r0, #0
	movne r1, #0
	strne r1, [r4, #0x10]
	pop {r4, pc}
	arm_func_end FUN_020B778C

	arm_func_start FUN_020B77A8
FUN_020B77A8: @ 0x020B77A8
	ldr r1, [r0, #0x1c]
	ldr r2, [r0]
	ldr r0, [r1, #0xc]
	sub r0, r2, r0
	lsl r0, r0, #0xd
	lsr r0, r0, #0x10
	bx lr
	arm_func_end FUN_020B77A8

	arm_func_start FUN_020B77C4
FUN_020B77C4: @ 0x020B77C4
	push {r4, lr}
	mov r4, r0
	add r0, r4, #0x20
	bl FUN_020B7804
	mov r1, #0
	str r1, [r4]
	str r1, [r4, #4]
	str r1, [r4, #8]
	mov r0, #1
	str r0, [r4, #0xc]
	str r1, [r4, #0x10]
	mov r0, #0x1000
	str r0, [r4, #0x14]
	str r1, [r4, #0x18]
	str r1, [r4, #0x1c]
	pop {r4, pc}
	arm_func_end FUN_020B77C4

	arm_func_start FUN_020B7804
FUN_020B7804: @ 0x020B7804
	mov r1, #0
	str r1, [r0]
	str r1, [r0, #4]
	str r1, [r0, #8]
	strh r1, [r0, #0xc]
	bx lr
	arm_func_end FUN_020B7804

	arm_func_start FUN_020B781C
FUN_020B781C: @ 0x020B781C
	ldr r1, [r0, #0x14]
	cmp r1, #0
	movgt r2, #1
	ldr r1, [r0, #8]
	movle r2, #0
	teq r2, r1
	ldr r2, [r0, #0x1c]
	beq _020B784C
	ldrh r1, [r2, #2]
	ldr r2, [r2, #0xc]
	add r1, r2, r1, lsl #3
	b _020B785C
_020B784C:
	ldrh r1, [r2]
	ldr r2, [r2, #0xc]
	add r1, r2, r1, lsl #3
	sub r1, r1, #8
_020B785C:
	str r1, [r0]
	ldr r2, [r0]
	ldr ip, _020B7878 @ =FUN_020B75D8
	mov r1, #0
	str r2, [r0, #4]
	str r1, [r0, #0x10]
	bx ip
	.align 2, 0
_020B7878: .4byte FUN_020B75D8
	arm_func_end FUN_020B781C

	arm_func_start FUN_020B787C
FUN_020B787C: @ 0x020B787C
	ldr ip, _020B7888 @ =FUN_020B781C
	str r1, [r0, #0x1c]
	bx ip
	.align 2, 0
_020B7888: .4byte FUN_020B781C
	arm_func_end FUN_020B787C

	arm_func_start FUN_020B788C
FUN_020B788C: @ 0x020B788C
	ldr r1, [r0, #0x18]
	cmp r1, #0
	ldreq r0, [r0, #0x1c]
	ldreq r1, [r0, #8]
	cmp r1, #2
	cmpne r1, #4
	moveq r0, #1
	movne r0, #0
	bx lr
	arm_func_end FUN_020B788C

	arm_func_start FUN_020B78B0
FUN_020B78B0: @ 0x020B78B0
	ldr ip, _020B78C0 @ =FUN_020D47B8
	add r1, r1, #0x400
	add r1, r1, #0x7000000
	bx ip
	.align 2, 0
_020B78C0: .4byte FUN_020D47B8
	arm_func_end FUN_020B78B0

	arm_func_start FUN_020B78C4
FUN_020B78C4: @ 0x020B78C4
	ldr ip, _020B78D0 @ =FUN_020D47B8
	add r1, r1, #0x7000000
	bx ip
	.align 2, 0
_020B78D0: .4byte FUN_020D47B8
	arm_func_end FUN_020B78C4

	arm_func_start FUN_020B78D4
FUN_020B78D4: @ 0x020B78D4
	push {r3, lr}
	ldr r1, _020B796C @ =0x021D8618
	mov r0, #0xc0
	mov r2, #0x400
	bl FUN_020D4790
	ldr r1, _020B7970 @ =0x021D8B58
	mov r0, #0xc0
	mov r2, #0x400
	bl FUN_020D4790
	ldr r1, _020B7974 @ =0x021D9098
	mov r0, #0xc0
	mov r2, #0x400
	bl FUN_020D4790
	ldr r0, _020B7978 @ =0x0000FFFF
	ldr r1, _020B797C @ =0x021D8518
	mov r2, #0x100
	bl FUN_020D4790
	ldr r0, _020B7978 @ =0x0000FFFF
	ldr r1, _020B7980 @ =0x021D8A58
	mov r2, #0x100
	bl FUN_020D4790
	ldr r0, _020B7978 @ =0x0000FFFF
	ldr r1, _020B7984 @ =0x021D8F98
	mov r2, #0x100
	bl FUN_020D4790
	ldr r0, _020B7978 @ =0x0000FFFF
	ldr r1, _020B7988 @ =0x021D8A18
	mov r2, #0x40
	bl FUN_020D4790
	ldr r0, _020B7978 @ =0x0000FFFF
	ldr r1, _020B798C @ =0x021D8F58
	mov r2, #0x40
	bl FUN_020D4790
	ldr r0, _020B7978 @ =0x0000FFFF
	ldr r1, _020B7990 @ =0x021D9498
	mov r2, #0x40
	bl FUN_020D4790
	pop {r3, pc}
	.align 2, 0
_020B796C: .4byte 0x021D8618
_020B7970: .4byte 0x021D8B58
_020B7974: .4byte 0x021D9098
_020B7978: .4byte 0x0000FFFF
_020B797C: .4byte 0x021D8518
_020B7980: .4byte 0x021D8A58
_020B7984: .4byte 0x021D8F98
_020B7988: .4byte 0x021D8A18
_020B798C: .4byte 0x021D8F58
_020B7990: .4byte 0x021D9498
	arm_func_end FUN_020B78D4

	arm_func_start FUN_020B7994
FUN_020B7994: @ 0x020B7994
	push {r3, r4, r5, r6, r7, lr}
	ldr r5, [sp, #0x1c]
	ldr r6, _020B7B04 @ =0x021D8518
	mov r4, #0x540
	mla r4, r5, r4, r6
	mov ip, r1
	sub r1, r2, #1
	add r1, ip, r1
	lsl r1, r1, #0x10
	lsr r2, r1, #0x10
	add lr, r4, ip, lsl #1
	add r7, r4, r2, lsl #1
	mov r6, r0
	mov r5, r3
	cmp lr, r7
	bhi _020B79F4
	ldr r0, _020B7B08 @ =0x0000FFFF
_020B79D8:
	ldrh r1, [lr]
	cmp r1, r0
	movne r0, #0
	bne _020B79F8
	add lr, lr, #2
	cmp lr, r7
	bls _020B79D8
_020B79F4:
	mov r0, #1
_020B79F8:
	cmp r0, #0
	beq _020B7A3C
	ldr r0, _020B7B0C @ =0x021D8514
	sub r1, r2, ip
	ldrh r7, [r0]
	add r3, r1, #1
	add r1, r4, ip, lsl #1
	add lr, r7, #1
	strh lr, [r0]
	strh r7, [r6, #0x10]
	strh ip, [r6, #4]
	strh r2, [r6, #6]
	strh ip, [r6, #8]
	ldrh r0, [r6, #0x10]
	lsl r2, r3, #1
	bl FUN_020D4790
	b _020B7A44
_020B7A3C:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_020B7A44:
	ldrh r0, [sp, #0x18]
	add r3, r4, #0x500
	cmp r0, #0
	bne _020B7A70
	mov r0, #0x20
	strh r0, [r6, #0xa]
	mov r0, #0
	strh r0, [r6, #0xc]
	ldrh r0, [r6, #0xa]
	strh r0, [r6, #0xe]
	b _020B7AEC
_020B7A70:
	sub r0, r0, #1
	add r0, r5, r0
	lsl r0, r0, #0x10
	lsr r2, r0, #0x10
	add r7, r3, r5, lsl #1
	add r4, r3, r2, lsl #1
	cmp r7, r4
	bhi _020B7AB0
	ldr r0, _020B7B08 @ =0x0000FFFF
_020B7A94:
	ldrh r1, [r7]
	cmp r1, r0
	movne r0, #0
	bne _020B7AB4
	add r7, r7, #2
	cmp r7, r4
	bls _020B7A94
_020B7AB0:
	mov r0, #1
_020B7AB4:
	cmp r0, #0
	beq _020B7AE4
	strh r5, [r6, #0xa]
	strh r2, [r6, #0xc]
	strh r5, [r6, #0xe]
	sub r0, r2, r5
	add r2, r0, #1
	ldrh r0, [r6, #0x10]
	add r1, r3, r5, lsl #1
	lsl r2, r2, #1
	bl FUN_020D4790
	b _020B7AEC
_020B7AE4:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_020B7AEC:
	mov r1, #0
	ldr r0, [sp, #0x1c]
	str r1, [r6, #0x14]
	str r0, [r6]
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020B7B04: .4byte 0x021D8518
_020B7B08: .4byte 0x0000FFFF
_020B7B0C: .4byte 0x021D8514
	arm_func_end FUN_020B7994

	arm_func_start FUN_020B7B10
FUN_020B7B10: @ 0x020B7B10
	push {r4, lr}
	ldrh lr, [r0, #6]
	ldrh ip, [r0, #8]
	mov r4, #0
	add r3, lr, #1
	cmp ip, r3
	bgt _020B7B38
	ldrh r3, [r0, #4]
	cmp r3, lr
	movls r4, #1
_020B7B38:
	cmp r4, #0
	moveq r3, #0
	beq _020B7B54
	sub r3, lr, ip
	add r3, r3, #1
	lsl r3, r3, #0x10
	lsr r3, r3, #0x10
_020B7B54:
	cmp r3, #1
	movhs r3, #1
	movlo r3, #0
	cmp r3, #0
	beq _020B7BE4
	ldr r4, [r0]
	ldr ip, _020B7BEC @ =0x021D8518
	mov r3, #0x540
	mla ip, r4, r3, ip
	ldrh r3, [r0, #8]
	add r4, ip, #0x100
	ldrh ip, [r1]
	lsl lr, r3, #3
	add r3, r4, r3, lsl #3
	strh ip, [r4, lr]
	ldrh lr, [r1, #2]
	ldr ip, _020B7BF0 @ =0x0000FFFE
	strh lr, [r3, #2]
	ldrh r1, [r1, #4]
	cmp r2, ip
	strh r1, [r3, #4]
	beq _020B7BD0
	ldr r1, [r3]
	lsl ip, r1, #0x16
	lsr ip, ip, #0x1e
	tst ip, #1
	beq _020B7BD0
	bic ip, r1, #0x3e000000
	lsl r1, r2, #0x1b
	orr r1, ip, r1, lsr #2
	str r1, [r3]
_020B7BD0:
	ldrh r1, [r0, #8]
	add r1, r1, #1
	strh r1, [r0, #8]
	mov r0, #1
	pop {r4, pc}
_020B7BE4:
	mov r0, #0
	pop {r4, pc}
	.align 2, 0
_020B7BEC: .4byte 0x021D8518
_020B7BF0: .4byte 0x0000FFFE
	arm_func_end FUN_020B7B10

	arm_func_start FUN_020B7BF4
FUN_020B7BF4: @ 0x020B7BF4
	push {r3, lr}
	ldrh lr, [r0, #0xc]
	ldrh ip, [r0, #0xe]
	mov r3, #0
	add r2, lr, #1
	cmp ip, r2
	bgt _020B7C1C
	ldrh r2, [r0, #0xa]
	cmp r2, lr
	movls r3, #1
_020B7C1C:
	cmp r3, #0
	moveq r2, #0
	beq _020B7C38
	sub r2, lr, ip
	add r2, r2, #1
	lsl r2, r2, #0x10
	lsr r2, r2, #0x10
_020B7C38:
	cmp r2, #1
	movhs r2, #1
	movlo r2, #0
	cmp r2, #0
	ldreq r0, _020B7CB0 @ =0x0000FFFE
	popeq {r3, pc}
	ldr lr, [r0]
	ldr r3, _020B7CB4 @ =0x021D8518
	mov r2, #0x540
	mla ip, lr, r2, r3
	ldr r3, [r1]
	ldrh r2, [r0, #0xe]
	add ip, ip, #0x100
	asr r3, r3, #4
	add ip, ip, r2, lsl #5
	strh r3, [ip, #6]
	ldr r3, [r1, #4]
	asr r3, r3, #4
	strh r3, [ip, #0xe]
	ldr r3, [r1, #8]
	asr r3, r3, #4
	strh r3, [ip, #0x16]
	ldr r1, [r1, #0xc]
	asr r1, r1, #4
	strh r1, [ip, #0x1e]
	ldrh r1, [r0, #0xe]
	add r1, r1, #1
	strh r1, [r0, #0xe]
	mov r0, r2
	pop {r3, pc}
	.align 2, 0
_020B7CB0: .4byte 0x0000FFFE
_020B7CB4: .4byte 0x021D8518
	arm_func_end FUN_020B7BF4

	arm_func_start FUN_020B7CB8
FUN_020B7CB8: @ 0x020B7CB8
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov r7, r0
	ldr r0, [r7, #0x14]
	cmp r0, #0
	beq _020B7D4C
	ldr r6, [r7]
	ldr r1, _020B7EB4 @ =0x021D8518
	mov r0, #0x540
	mla r1, r6, r0, r1
	ldrh r3, [r7, #4]
	ldrh r0, [r7, #6]
	add r5, r1, #0x100
	lsl r4, r3, #3
	sub r0, r0, r3
	add r0, r0, #1
	lsl r0, r0, #0x13
	lsr r8, r0, #0x10
	lsl r2, r4, #0x10
	mov r1, r8
	add r0, r5, r3, lsl #3
	lsr r7, r2, #0x10
	bl FUN_020D2894
	cmp r6, #0
	beq _020B7D24
	cmp r6, #1
	beq _020B7D38
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020B7D24:
	mov r1, r7
	mov r2, r8
	add r0, r5, r4
	bl FUN_020CFDC8
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020B7D38:
	mov r1, r7
	mov r2, r8
	add r0, r5, r4
	bl FUN_020CFE1C
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020B7D4C:
	ldr r0, [r7]
	ldr r2, _020B7EB4 @ =0x021D8518
	mov r1, #0x540
	mla r2, r0, r1, r2
	ldrh r5, [r7, #4]
	ldrh r1, [r7, #6]
	ldr r3, _020B7EB8 @ =_021109C8
	add r4, r2, #0x100
	sub r1, r1, r5
	add r1, r1, #1
	lsl r1, r1, #0x10
	lsl r2, r5, #0x13
	add r6, r4, r5, lsl #3
	lsrs r5, r1, #0x10
	lsr r4, r2, #0x10
	ldr sb, [r3, r0, lsl #2]
	mov sl, #0
	beq _020B7DCC
	mov r8, #6
_020B7D98:
	mov r0, r6
	mov r1, r4
	mov r2, r8
	blx sb
	add r2, r4, #8
	add r0, sl, #1
	lsl r1, r0, #0x10
	lsl r0, r2, #0x10
	cmp r5, r1, lsr #16
	lsr r4, r0, #0x10
	add r6, r6, #8
	lsr sl, r1, #0x10
	bhi _020B7D98
_020B7DCC:
	ldrh r2, [r7, #0xc]
	ldrh r1, [r7, #0xe]
	mov r3, #0
	add r0, r2, #1
	cmp r1, r0
	bgt _020B7DF0
	ldrh r0, [r7, #0xa]
	cmp r0, r2
	movls r3, #1
_020B7DF0:
	cmp r3, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, [r7]
	ldr r2, _020B7EB4 @ =0x021D8518
	mov r1, #0x540
	mla r2, r0, r1, r2
	ldr r3, _020B7EB8 @ =_021109C8
	ldrh r5, [r7, #0xa]
	ldrh r1, [r7, #0xc]
	add r4, r2, #0x100
	lsl r2, r5, #0x15
	sub r1, r1, r5
	add r1, r1, #1
	lsl r1, r1, #0x10
	ldr r6, [r3, r0, lsl #2]
	add sl, r4, r5, lsl #5
	lsrs sb, r1, #0x10
	lsr r8, r2, #0x10
	mov r7, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r5, #2
	mov r4, r5
	mov fp, r5
_020B7E4C:
	mov r2, r5
	add r0, sl, #6
	add r1, r8, #6
	blx r6
	mov r2, r4
	add r0, sl, #0xe
	add r1, r8, #0xe
	blx r6
	add r0, sl, #0x16
	add r1, r8, #0x16
	mov r2, fp
	blx r6
	add r0, sl, #0x1e
	add r1, r8, #0x1e
	mov r2, #2
	blx r6
	add r0, r8, #0x20
	lsl r0, r0, #0x10
	lsr r8, r0, #0x10
	add r0, r7, #1
	lsl r0, r0, #0x10
	add sl, sl, #0x20
	cmp sb, r0, lsr #16
	lsr r7, r0, #0x10
	bhi _020B7E4C
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020B7EB4: .4byte 0x021D8518
_020B7EB8: .4byte _021109C8
	arm_func_end FUN_020B7CB8

	arm_func_start FUN_020B7EBC
FUN_020B7EBC: @ 0x020B7EBC
	push {r4, r5, r6, lr}
	mov r5, r0
	ldr r0, [r5, #0x14]
	cmp r0, #0
	beq _020B7F74
	ldrh r3, [r5, #6]
	ldrh r1, [r5, #8]
	mov r2, #0
	add r0, r3, #1
	cmp r1, r0
	bgt _020B7EF4
	ldrh r0, [r5, #4]
	cmp r0, r3
	movls r2, #1
_020B7EF4:
	cmp r2, #0
	moveq r4, #0
	beq _020B7F14
	ldrh r0, [r5, #4]
	sub r0, r3, r0
	add r0, r0, #1
	lsl r0, r0, #0x10
	lsr r4, r0, #0xd
_020B7F14:
	ldr r2, [r5]
	ldr r1, _020B7FDC @ =0x021D8518
	mov r0, #0x540
	mla r1, r2, r0, r1
	add r2, r1, #0x100
	ldrh r0, [r5, #4]
	mov r1, r4
	add r6, r2, r0, lsl #3
	mov r0, r6
	bl FUN_020D285C
	ldr r0, _020B7FE0 @ =_02110C80
	mvn r1, #0
	ldr r0, [r0]
	cmp r0, r1
	mov r1, r6
	beq _020B7F64
	mov r3, r4
	mov r2, #0xc0
	bl FUN_020D3F74
	b _020B7FC8
_020B7F64:
	mov r2, r4
	mov r0, #0xc0
	bl FUN_020D47EC
	b _020B7FC8
_020B7F74:
	ldr r2, [r5]
	ldr r1, _020B7FDC @ =0x021D8518
	mov r0, #0x540
	mla r1, r2, r0, r1
	ldrh r2, [r5, #4]
	ldrh r0, [r5, #6]
	add r1, r1, #0x100
	add r3, r1, r2, lsl #3
	sub r0, r0, r2
	add r0, r0, #1
	lsl r0, r0, #0x10
	lsrs r2, r0, #0x10
	mov r0, #0
	beq _020B7FC8
	mov r1, #0xc0
_020B7FB0:
	add r0, r0, #1
	lsl r0, r0, #0x10
	cmp r2, r0, lsr #16
	strh r1, [r3], #8
	lsr r0, r0, #0x10
	bhi _020B7FB0
_020B7FC8:
	ldrh r0, [r5, #4]
	strh r0, [r5, #8]
	ldrh r0, [r5, #0xa]
	strh r0, [r5, #0xe]
	pop {r4, r5, r6, pc}
	.align 2, 0
_020B7FDC: .4byte 0x021D8518
_020B7FE0: .4byte _02110C80
	arm_func_end FUN_020B7EBC

	arm_func_start FUN_020B7FE4
FUN_020B7FE4: @ 0x020B7FE4
	push {r4, lr}
	mov r4, r0
	bl FUN_020B7CB8
	mov r0, r4
	bl FUN_020B7EBC
	pop {r4, pc}
	arm_func_end FUN_020B7FE4

	arm_func_start FUN_020B7FFC
FUN_020B7FFC: @ 0x020B7FFC
	lsl r1, r1, #1
	ldrh r0, [r0, r1]
	bx lr
	arm_func_end FUN_020B7FFC

	arm_func_start FUN_020B8008
FUN_020B8008: @ 0x020B8008
	mov r2, #0
	mvn r1, #0
_020B8010:
	str r1, [r0, r2, lsl #2]
	add r2, r2, #1
	cmp r2, #3
	blt _020B8010
	bx lr
	arm_func_end FUN_020B8008

	arm_func_start FUN_020B8024
FUN_020B8024: @ 0x020B8024
	str r2, [r0, r1, lsl #2]
	bx lr
	arm_func_end FUN_020B8024

	arm_func_start FUN_020B802C
FUN_020B802C: @ 0x020B802C
	ldr r0, [r0, r1, lsl #2]
	bx lr
	arm_func_end FUN_020B802C

	arm_func_start FUN_020B8034
FUN_020B8034: @ 0x020B8034
	ldr r1, [r0, r1, lsl #2]
	mvn r0, #0
	cmp r1, r0
	movne r0, #1
	moveq r0, #0
	bx lr
	arm_func_end FUN_020B8034

	arm_func_start FUN_020B804C
FUN_020B804C: @ 0x020B804C
	mov r3, #0
	mvn r2, #0
_020B8054:
	add r1, r0, r3, lsl #2
	add r3, r3, #1
	str r2, [r1, #8]
	cmp r3, #3
	blt _020B8054
	bx lr
	arm_func_end FUN_020B804C

	arm_func_start FUN_020B806C
FUN_020B806C: @ 0x020B806C
	add r0, r0, r1, lsl #2
	str r2, [r0, #8]
	bx lr
	arm_func_end FUN_020B806C

	arm_func_start FUN_020B8078
FUN_020B8078: @ 0x020B8078
	add r0, r0, r1, lsl #2
	ldr r0, [r0, #8]
	bx lr
	arm_func_end FUN_020B8078

	arm_func_start FUN_020B8084
FUN_020B8084: @ 0x020B8084
	add r0, r0, r1, lsl #2
	ldr r1, [r0, #8]
	mvn r0, #0
	cmp r1, r0
	movne r0, #1
	moveq r0, #0
	bx lr
	arm_func_end FUN_020B8084

	arm_func_start FUN_020B80A0
FUN_020B80A0: @ 0x020B80A0
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	movs r5, r2
	mov r6, r1
	mov r4, r3
	ldr r0, [r7, #8]
	beq _020B8104
	cmp r5, #1
	beq _020B80D0
	cmp r5, #2
	beq _020B80EC
	b _020B8104
_020B80D0:
	mov r3, #0x4000000
	ldr r2, [r3]
	ldr r1, _020B82C4 @ =0xFFCFFFEF
	and r1, r2, r1
	orr r0, r1, r0
	str r0, [r3]
	b _020B8104
_020B80EC:
	ldr r3, _020B82C8 @ =0x04001000
	ldr r1, _020B82C4 @ =0xFFCFFFEF
	ldr r2, [r3]
	and r1, r2, r1
	orr r0, r1, r0
	str r0, [r3]
_020B8104:
	ldr r0, [r7, #0x14]
	ldr r1, [r7, #0x10]
	bl FUN_020D2894
	cmp r5, #0
	beq _020B812C
	cmp r5, #1
	beq _020B8148
	cmp r5, #2
	beq _020B815C
	b _020B816C
_020B812C:
	bl FUN_020D08EC
	ldr r0, [r7, #0x14]
	ldr r2, [r7, #0x10]
	mov r1, r6
	bl FUN_020D0948
	bl FUN_020D0A88
	b _020B816C
_020B8148:
	ldr r0, [r7, #0x14]
	ldr r2, [r7, #0x10]
	mov r1, r6
	bl FUN_020CFE74
	b _020B816C
_020B815C:
	ldr r0, [r7, #0x14]
	ldr r2, [r7, #0x10]
	mov r1, r6
	bl FUN_020CFECC
_020B816C:
	ldr r0, [r7, #8]
	cmp r0, #0
	ldrh r0, [r7, #2]
	bne _020B8284
	cmp r0, #0x10
	bgt _020B81B8
	bge _020B81E4
	cmp r0, #8
	addls pc, pc, r0, lsl #2
	b _020B81F4
_020B8194: @ jump table
	b _020B81F4 @ case 0
	b _020B81C4 @ case 1
	b _020B81CC @ case 2
	b _020B81F4 @ case 3
	b _020B81D4 @ case 4
	b _020B81F4 @ case 5
	b _020B81F4 @ case 6
	b _020B81F4 @ case 7
	b _020B81DC @ case 8
_020B81B8:
	cmp r0, #0x20
	beq _020B81EC
	b _020B81F4
_020B81C4:
	mov r0, #0
	b _020B81F8
_020B81CC:
	mov r0, #1
	b _020B81F8
_020B81D4:
	mov r0, #2
	b _020B81F8
_020B81DC:
	mov r0, #3
	b _020B81F8
_020B81E4:
	mov r0, #4
	b _020B81F8
_020B81EC:
	mov r0, #5
	b _020B81F8
_020B81F4:
	mov r0, #0
_020B81F8:
	str r0, [r4, #0xc]
	ldrh r0, [r7]
	cmp r0, #0x10
	bgt _020B823C
	bge _020B8268
	cmp r0, #8
	addls pc, pc, r0, lsl #2
	b _020B8278
_020B8218: @ jump table
	b _020B8278 @ case 0
	b _020B8248 @ case 1
	b _020B8250 @ case 2
	b _020B8278 @ case 3
	b _020B8258 @ case 4
	b _020B8278 @ case 5
	b _020B8278 @ case 6
	b _020B8278 @ case 7
	b _020B8260 @ case 8
_020B823C:
	cmp r0, #0x20
	beq _020B8270
	b _020B8278
_020B8248:
	mov r0, #0
	b _020B827C
_020B8250:
	mov r0, #1
	b _020B827C
_020B8258:
	mov r0, #2
	b _020B827C
_020B8260:
	mov r0, #3
	b _020B827C
_020B8268:
	mov r0, #4
	b _020B827C
_020B8270:
	mov r0, #5
	b _020B827C
_020B8278:
	mov r0, #0
_020B827C:
	str r0, [r4, #0x10]
	b _020B8290
_020B8284:
	str r0, [r4, #0xc]
	ldrh r0, [r7]
	str r0, [r4, #0x10]
_020B8290:
	ldr r1, [r7, #4]
	mov r0, #0
	str r1, [r4, #0x14]
	str r0, [r4, #0x18]
	mov r0, #1
	str r0, [r4, #0x1c]
	ldr r3, [r7, #8]
	mov r0, r4
	mov r1, r5
	mov r2, r6
	str r3, [r4, #0x20]
	bl FUN_020B8024
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020B82C4: .4byte 0xFFCFFFEF
_020B82C8: .4byte 0x04001000
	arm_func_end FUN_020B80A0

	arm_func_start FUN_020B82CC
FUN_020B82CC: @ 0x020B82CC
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	movs r5, r2
	mov r6, r1
	mov r4, r3
	ldr r0, [r7, #8]
	beq _020B8330
	cmp r5, #1
	beq _020B82FC
	cmp r5, #2
	beq _020B8318
	b _020B8330
_020B82FC:
	mov r3, #0x4000000
	ldr r2, [r3]
	ldr r1, _020B84F0 @ =0xFFCFFFEF
	and r1, r2, r1
	orr r0, r1, r0
	str r0, [r3]
	b _020B8330
_020B8318:
	ldr r3, _020B84F4 @ =0x04001000
	ldr r1, _020B84F0 @ =0xFFCFFFEF
	ldr r2, [r3]
	and r1, r2, r1
	orr r0, r1, r0
	str r0, [r3]
_020B8330:
	ldr r0, [r7, #0x14]
	ldr r1, [r7, #0x10]
	bl FUN_020D2894
	cmp r5, #0
	beq _020B8358
	cmp r5, #1
	beq _020B8374
	cmp r5, #2
	beq _020B8388
	b _020B8398
_020B8358:
	bl FUN_020D08EC
	ldr r0, [r7, #0x14]
	ldr r2, [r7, #0x10]
	mov r1, r6
	bl FUN_020D0948
	bl FUN_020D0A88
	b _020B8398
_020B8374:
	ldr r0, [r7, #0x14]
	ldr r2, [r7, #0x10]
	mov r1, r6
	bl FUN_020CFE74
	b _020B8398
_020B8388:
	ldr r0, [r7, #0x14]
	ldr r2, [r7, #0x10]
	mov r1, r6
	bl FUN_020CFECC
_020B8398:
	ldr r0, [r7, #8]
	cmp r0, #0
	ldrh r0, [r7, #2]
	bne _020B84B0
	cmp r0, #0x10
	bgt _020B83E4
	bge _020B8410
	cmp r0, #8
	addls pc, pc, r0, lsl #2
	b _020B8420
_020B83C0: @ jump table
	b _020B8420 @ case 0
	b _020B83F0 @ case 1
	b _020B83F8 @ case 2
	b _020B8420 @ case 3
	b _020B8400 @ case 4
	b _020B8420 @ case 5
	b _020B8420 @ case 6
	b _020B8420 @ case 7
	b _020B8408 @ case 8
_020B83E4:
	cmp r0, #0x20
	beq _020B8418
	b _020B8420
_020B83F0:
	mov r0, #0
	b _020B8424
_020B83F8:
	mov r0, #1
	b _020B8424
_020B8400:
	mov r0, #2
	b _020B8424
_020B8408:
	mov r0, #3
	b _020B8424
_020B8410:
	mov r0, #4
	b _020B8424
_020B8418:
	mov r0, #5
	b _020B8424
_020B8420:
	mov r0, #0
_020B8424:
	str r0, [r4, #0xc]
	ldrh r0, [r7]
	cmp r0, #0x10
	bgt _020B8468
	bge _020B8494
	cmp r0, #8
	addls pc, pc, r0, lsl #2
	b _020B84A4
_020B8444: @ jump table
	b _020B84A4 @ case 0
	b _020B8474 @ case 1
	b _020B847C @ case 2
	b _020B84A4 @ case 3
	b _020B8484 @ case 4
	b _020B84A4 @ case 5
	b _020B84A4 @ case 6
	b _020B84A4 @ case 7
	b _020B848C @ case 8
_020B8468:
	cmp r0, #0x20
	beq _020B849C
	b _020B84A4
_020B8474:
	mov r0, #0
	b _020B84A8
_020B847C:
	mov r0, #1
	b _020B84A8
_020B8484:
	mov r0, #2
	b _020B84A8
_020B848C:
	mov r0, #3
	b _020B84A8
_020B8494:
	mov r0, #4
	b _020B84A8
_020B849C:
	mov r0, #5
	b _020B84A8
_020B84A4:
	mov r0, #0
_020B84A8:
	str r0, [r4, #0x10]
	b _020B84BC
_020B84B0:
	str r0, [r4, #0xc]
	ldrh r0, [r7]
	str r0, [r4, #0x10]
_020B84BC:
	ldr r1, [r7, #4]
	mov r0, #0
	str r1, [r4, #0x14]
	str r0, [r4, #0x18]
	mov r0, #1
	str r0, [r4, #0x1c]
	ldr r3, [r7, #8]
	mov r0, r4
	mov r1, r5
	mov r2, r6
	str r3, [r4, #0x20]
	bl FUN_020B8024
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020B84F0: .4byte 0xFFCFFFEF
_020B84F4: .4byte 0x04001000
	arm_func_end FUN_020B82CC

	arm_func_start FUN_020B84F8
FUN_020B84F8: @ 0x020B84F8
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	mov r6, r1
	ldr r0, [r7, #0x14]
	ldr r1, [r7, #0x10]
	mov r5, r2
	mov r4, r3
	bl FUN_020D2894
	cmp r5, #0
	ldr r0, [r7, #8]
	beq _020B856C
	cmp r5, #1
	beq _020B8538
	cmp r5, #2
	beq _020B8554
	b _020B856C
_020B8538:
	mov r3, #0x4000000
	ldr r2, [r3]
	ldr r1, _020B86C4 @ =0xFFCFFFEF
	and r1, r2, r1
	orr r0, r1, r0
	str r0, [r3]
	b _020B856C
_020B8554:
	ldr r3, _020B86C8 @ =0x04001000
	ldr r1, _020B86C4 @ =0xFFCFFFEF
	ldr r2, [r3]
	and r1, r2, r1
	orr r0, r1, r0
	str r0, [r3]
_020B856C:
	ldr r0, [r7, #8]
	cmp r0, #0
	ldrh r0, [r7, #2]
	bne _020B8684
	cmp r0, #0x10
	bgt _020B85B8
	bge _020B85E4
	cmp r0, #8
	addls pc, pc, r0, lsl #2
	b _020B85F4
_020B8594: @ jump table
	b _020B85F4 @ case 0
	b _020B85C4 @ case 1
	b _020B85CC @ case 2
	b _020B85F4 @ case 3
	b _020B85D4 @ case 4
	b _020B85F4 @ case 5
	b _020B85F4 @ case 6
	b _020B85F4 @ case 7
	b _020B85DC @ case 8
_020B85B8:
	cmp r0, #0x20
	beq _020B85EC
	b _020B85F4
_020B85C4:
	mov r0, #0
	b _020B85F8
_020B85CC:
	mov r0, #1
	b _020B85F8
_020B85D4:
	mov r0, #2
	b _020B85F8
_020B85DC:
	mov r0, #3
	b _020B85F8
_020B85E4:
	mov r0, #4
	b _020B85F8
_020B85EC:
	mov r0, #5
	b _020B85F8
_020B85F4:
	mov r0, #0
_020B85F8:
	str r0, [r4, #0xc]
	ldrh r0, [r7]
	cmp r0, #0x10
	bgt _020B863C
	bge _020B8668
	cmp r0, #8
	addls pc, pc, r0, lsl #2
	b _020B8678
_020B8618: @ jump table
	b _020B8678 @ case 0
	b _020B8648 @ case 1
	b _020B8650 @ case 2
	b _020B8678 @ case 3
	b _020B8658 @ case 4
	b _020B8678 @ case 5
	b _020B8678 @ case 6
	b _020B8678 @ case 7
	b _020B8660 @ case 8
_020B863C:
	cmp r0, #0x20
	beq _020B8670
	b _020B8678
_020B8648:
	mov r0, #0
	b _020B867C
_020B8650:
	mov r0, #1
	b _020B867C
_020B8658:
	mov r0, #2
	b _020B867C
_020B8660:
	mov r0, #3
	b _020B867C
_020B8668:
	mov r0, #4
	b _020B867C
_020B8670:
	mov r0, #5
	b _020B867C
_020B8678:
	mov r0, #0
_020B867C:
	str r0, [r4, #0x10]
	b _020B8690
_020B8684:
	str r0, [r4, #0xc]
	ldrh r0, [r7]
	str r0, [r4, #0x10]
_020B8690:
	ldr r1, [r7, #4]
	mov r0, #0
	str r1, [r4, #0x14]
	str r0, [r4, #0x18]
	mov r0, #1
	str r0, [r4, #0x1c]
	ldr r3, [r7, #8]
	mov r0, r4
	mov r1, r5
	mov r2, r6
	str r3, [r4, #0x20]
	bl FUN_020B8024
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020B86C4: .4byte 0xFFCFFFEF
_020B86C8: .4byte 0x04001000
	arm_func_end FUN_020B84F8

	arm_func_start FUN_020B86CC
FUN_020B86CC: @ 0x020B86CC
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov sb, r0
	ldr r4, [sb, #0xc]
	ldr r5, [sb, #8]
	mov r8, r1
	mov r7, r2
	mov r0, r4
	mov r1, r5
	mov r6, r3
	bl FUN_020D2894
	cmp r7, #0
	beq _020B8788
	cmp r7, #1
	beq _020B8710
	cmp r7, #2
	beq _020B874C
	b _020B87A0
_020B8710:
	ldr r0, [sb, #4]
	cmp r0, #0
	beq _020B8738
	bl FUN_020D067C
	mov r0, r4
	mov r1, r8
	mov r2, r5
	bl FUN_020D06C4
	bl FUN_020D0730
	b _020B87A0
_020B8738:
	mov r0, r4
	mov r1, r8
	mov r2, r5
	bl FUN_020CFD18
	b _020B87A0
_020B874C:
	ldr r0, [sb, #4]
	cmp r0, #0
	beq _020B8774
	bl FUN_020D0830
	mov r0, r4
	mov r1, r8
	mov r2, r5
	bl FUN_020D0848
	bl FUN_020D08AC
	b _020B87A0
_020B8774:
	mov r0, r4
	mov r1, r8
	mov r2, r5
	bl FUN_020CFD70
	b _020B87A0
_020B8788:
	bl FUN_020D0AD4
	mov r0, r4
	mov r1, r8
	mov r2, r5
	bl FUN_020D0B08
	bl FUN_020D0B74
_020B87A0:
	ldr r1, [sb]
	mov r0, r6
	str r1, [r6]
	ldr r3, [sb, #4]
	mov r1, r7
	mov r2, r8
	str r3, [r6, #4]
	bl FUN_020B806C
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	arm_func_end FUN_020B86CC

	arm_func_start FUN_020B87C4
FUN_020B87C4: @ 0x020B87C4
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #8
	mov sl, r0
	ldr r0, [sl]
	str r1, [sp]
	cmp r0, #3
	ldr r0, [sp, #0x30]
	moveq r8, #0x20
	str r0, [sp, #0x30]
	ldr r0, [sp]
	mov sb, r2
	ldrh r0, [r0]
	mov fp, r3
	movne r8, #0x200
	str r0, [sp, #4]
	mov r7, #0
	movs r0, r0
	beq _020B88F8
_020B880C:
	ldr r0, [sp]
	ldr r5, [sl, #0xc]
	ldr r1, [r0, #4]
	lsl r0, r7, #1
	ldrh r0, [r1, r0]
	mul r4, r8, r7
	mul r6, r8, r0
	ldr r1, [sl, #8]
	mov r0, r5
	bl FUN_020D2894
	cmp fp, #0
	beq _020B88C8
	cmp fp, #1
	beq _020B8850
	cmp fp, #2
	beq _020B888C
	b _020B88E0
_020B8850:
	ldr r0, [sl, #4]
	cmp r0, #0
	beq _020B8878
	bl FUN_020D067C
	add r0, r5, r4
	mov r2, r8
	add r1, sb, r6
	bl FUN_020D06C4
	bl FUN_020D0730
	b _020B88E0
_020B8878:
	mov r2, r8
	add r0, r5, r4
	add r1, sb, r6
	bl FUN_020CFD18
	b _020B88E0
_020B888C:
	ldr r0, [sl, #4]
	cmp r0, #0
	beq _020B88B4
	bl FUN_020D0830
	add r0, r5, r4
	mov r2, r8
	add r1, sb, r6
	bl FUN_020D0848
	bl FUN_020D08AC
	b _020B88E0
_020B88B4:
	mov r2, r8
	add r0, r5, r4
	add r1, sb, r6
	bl FUN_020CFD70
	b _020B88E0
_020B88C8:
	bl FUN_020D0AD4
	add r0, r5, r4
	mov r2, r8
	add r1, sb, r6
	bl FUN_020D0B08
	bl FUN_020D0B74
_020B88E0:
	add r0, r7, #1
	lsl r1, r0, #0x10
	ldr r0, [sp, #4]
	lsr r7, r1, #0x10
	cmp r0, r1, lsr #16
	bhi _020B880C
_020B88F8:
	ldr r0, [sp, #0x30]
	ldr r2, [sl]
	mov r1, r0
	str r2, [r1]
	ldr r4, [sl, #4]
	mov r3, r0
	mov r1, fp
	mov r2, sb
	str r4, [r3, #4]
	bl FUN_020B806C
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_020B87C4

	arm_func_start FUN_020B8928
FUN_020B8928: @ 0x020B8928
	mov r2, #0
	mvn r1, #0
_020B8930:
	str r1, [r0, r2, lsl #2]
	add r2, r2, #1
	cmp r2, #3
	blt _020B8930
	bx lr
	arm_func_end FUN_020B8928

	arm_func_start FUN_020B8944
FUN_020B8944: @ 0x020B8944
	str r2, [r0, r1, lsl #2]
	bx lr
	arm_func_end FUN_020B8944

	arm_func_start FUN_020B894C
FUN_020B894C: @ 0x020B894C
	ldr r0, [r0, r1, lsl #2]
	bx lr
	arm_func_end FUN_020B894C

	arm_func_start FUN_020B8954
FUN_020B8954: @ 0x020B8954
	ldr r3, [r0]
	cmp r3, #1
	bxne lr
	ldrh r3, [r0, #0x12]
	orr r3, r3, #8
	strh r3, [r0, #0x12]
	strh r1, [r0, #0xc]
	strh r2, [r0, #0xe]
	bx lr
	arm_func_end FUN_020B8954

	arm_func_start FUN_020B8978
FUN_020B8978: @ 0x020B8978
	ldr r2, [r0]
	cmp r2, #1
	bxne lr
	ldrh r2, [r0, #0x12]
	orr r2, r2, #4
	strh r2, [r0, #0x12]
	strh r1, [r0, #0x10]
	bx lr
	arm_func_end FUN_020B8978

	arm_func_start FUN_020B8998
FUN_020B8998: @ 0x020B8998
	ldr r3, [r0]
	cmp r3, #1
	bxne lr
	ldrh r3, [r0, #0x12]
	orr r3, r3, #2
	strh r3, [r0, #0x12]
	stmib r0, {r1, r2}
	bx lr
	arm_func_end FUN_020B8998

	arm_func_start FUN_020B89B8
FUN_020B89B8: @ 0x020B89B8
	ldr ip, _020B89C4 @ =FUN_020B89C8
	str r1, [r0]
	bx ip
	.align 2, 0
_020B89C4: .4byte FUN_020B89C8
	arm_func_end FUN_020B89B8

	arm_func_start FUN_020B89C8
FUN_020B89C8: @ 0x020B89C8
	push {r4, lr}
	mov r4, r0
	add r1, r4, #4
	mov r0, #0
	mov r2, #0x18
	bl FUN_020D4790
	mov r0, #0x1000
	str r0, [r4, #4]
	str r0, [r4, #8]
	pop {r4, pc}
	arm_func_end FUN_020B89C8

	arm_func_start FUN_020B89F0
FUN_020B89F0: @ 0x020B89F0
	mov r2, #0
	str r2, [r0]
	str r1, [r0, #4]
	mov r1, #1
	str r1, [r0, #8]
	ldr ip, _020B8A10 @ =FUN_020B89B8
	add r0, r0, #0xc
	bx ip
	.align 2, 0
_020B8A10: .4byte FUN_020B89B8
	arm_func_end FUN_020B89F0

	arm_func_start FUN_020B8A14
FUN_020B8A14: @ 0x020B8A14
	push {r3, r4, r5, r6, r7, lr}
	mov r4, r0
	ldr r1, [r4, #4]
	ldrh r1, [r1, #4]
	cmp r1, #0
	popeq {r3, r4, r5, r6, r7, pc}
	bl FUN_020B75CC
	mov r0, r4
	bl FUN_020B75CC
	mov r5, r0
	ldr r6, [r4, #0x34]
	ldrh r1, [r5]
	mov r0, r6
	bl FUN_020B6F04
	str r0, [r4, #0x30]
	ldr r1, [r4, #0x1c]
	add r0, r4, #0x3c
	ldr r2, [r1, #4]
	mov r1, #1
	and r7, r2, #0xff
	bl FUN_020B89B8
	cmp r7, #0
	beq _020B8AB4
	cmp r7, #2
	bne _020B8A8C
	ldrsh r1, [r5, #4]
	ldrsh r2, [r5, #6]
	add r0, r4, #0x3c
	bl FUN_020B8954
	b _020B8AB4
_020B8A8C:
	add r0, r4, #0x3c
	ldmib r5, {r1, r2}
	bl FUN_020B8998
	ldrh r1, [r5, #2]
	add r0, r4, #0x3c
	bl FUN_020B8978
	ldrsh r1, [r5, #0xc]
	ldrsh r2, [r5, #0xe]
	add r0, r4, #0x3c
	bl FUN_020B8954
_020B8AB4:
	ldr r2, [r6, #0xc]
	cmp r2, #0
	movne r0, #1
	moveq r0, #0
	cmp r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	ldr r1, [r4, #0x38]
	mvn r0, #0
	cmp r1, r0
	movne r0, #1
	moveq r0, #0
	cmp r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	ldrh r1, [r5]
	ldr r2, [r2, #4]
	ldr r0, [r4, #0x38]
	add r3, r2, r1, lsl #3
	ldm r3, {r1, r2}
	bl FUN_020BAEC0
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020B8A14

	arm_func_start FUN_020B8B04
FUN_020B8B04: @ 0x020B8B04
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	str r2, [r5, #0x34]
	mvn r2, #0
	add r0, r5, #0x3c
	mov r1, #1
	str r2, [r5, #0x38]
	bl FUN_020B89B8
	mov r0, r5
	bl FUN_020B77C4
	mov r0, r5
	mov r1, r4
	bl FUN_020B8BC4
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020B8B04

	arm_func_start FUN_020B8B40
FUN_020B8B40: @ 0x020B8B40
	push {r3, r4, r5, r6, r7, lr}
	sub sp, sp, #0x10
	mov r4, r2
	ldr r2, [r4, #0xc]
	mov r5, r1
	ldr r1, [r2]
	ldr r2, [sp, #0x34]
	str r1, [sp]
	ldr r1, [sp, #0x38]
	str r2, [sp, #4]
	mov r6, r3
	mov r7, r0
	ldr ip, [sp, #0x3c]
	str r1, [sp, #8]
	ldr r1, [sp, #0x28]
	ldr r2, [sp, #0x2c]
	ldr r3, [sp, #0x30]
	mov r0, r6
	str ip, [sp, #0xc]
	bl FUN_020BAC94
	str r6, [r7, #0x38]
	str r4, [r7, #0x34]
	add r0, r7, #0x3c
	mov r1, #1
	str r6, [r7, #0x38]
	bl FUN_020B89B8
	mov r0, r7
	bl FUN_020B77C4
	mov r0, r7
	mov r1, r5
	bl FUN_020B8BC4
	add sp, sp, #0x10
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020B8B40

	arm_func_start FUN_020B8BC4
FUN_020B8BC4: @ 0x020B8BC4
	push {r4, lr}
	mov r4, r0
	bl FUN_020B787C
	mov r0, r4
	bl FUN_020B8A14
	pop {r4, pc}
	arm_func_end FUN_020B8BC4

	arm_func_start FUN_020B8BDC
FUN_020B8BDC: @ 0x020B8BDC
	push {r4, lr}
	mov r4, r0
	bl FUN_020B75D8
	cmp r0, #0
	popeq {r4, pc}
	mov r0, r4
	bl FUN_020B8A14
	pop {r4, pc}
	arm_func_end FUN_020B8BDC

	arm_func_start FUN_020B8BFC
FUN_020B8BFC: @ 0x020B8BFC
	push {r4, lr}
	mov r4, r0
	bl FUN_020B778C
	cmp r0, #0
	popeq {r4, pc}
	mov r0, r4
	bl FUN_020B8A14
	pop {r4, pc}
	arm_func_end FUN_020B8BFC

	arm_func_start FUN_020B8C1C
FUN_020B8C1C: @ 0x020B8C1C
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sl, r1
	str r0, [sp]
	str sl, [r0]
	ldr r0, [r0, #8]
	mov sb, r2
	cmp r0, #1
	bne _020B8D84
	ldrh r1, [sl, #2]
	ldr r0, [sp]
	mov r4, #0
	ldr r5, [r0, #0xc]
	cmp r1, #0
	bls _020B8C7C
	mov r3, r4
	mov r0, #0x5c
_020B8C5C:
	mla r1, r4, r0, r5
	str r3, [r1, #0x58]
	ldrh r2, [sl, #2]
	add r1, r4, #1
	lsl r1, r1, #0x10
	cmp r2, r1, lsr #16
	lsr r4, r1, #0x10
	bhi _020B8C5C
_020B8C7C:
	ldrh r0, [sl]
	mov r8, #0
	cmp r0, #0
	popls {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020B8C8C:
	ldr r0, [sl, #4]
	mov r1, #0x5c
	add r6, r0, r8, lsl #3
	ldrh r0, [r6, #6]
	and r0, r0, #0xff00
	lsl r0, r0, #8
	lsr r0, r0, #0x10
	mla r7, r0, r1, r5
	ldr r0, [r7, #0x58]
	cmp r0, #0
	bne _020B8D68
	ldr r0, [sp]
	ldrh r1, [r6]
	ldr r0, [r0, #4]
	bl FUN_020B6E80
	mov r4, r0
	mov r0, r7
	mov r1, r4
	bl FUN_020B8BC4
	mov r0, #1
	str r0, [r7, #0xc]
	ldrh r0, [r6, #6]
	and r0, r0, #0xf
	cmp r0, #1
	bne _020B8D60
	ldrh r3, [r4]
	mov r6, #0
	mov r1, r6
	cmp r3, #0
	bls _020B8D20
	ldr r2, [r4, #0xc]
_020B8D08:
	add r0, r2, r1, lsl #3
	ldrh r0, [r0, #4]
	add r1, r1, #1
	cmp r1, r3
	add r6, r6, r0
	blo _020B8D08
_020B8D20:
	mov r0, r7
	bl FUN_020B788C
	cmp r0, #0
	beq _020B8D4C
	mov r0, sb
	mov r1, r6
	bl FUN_020F2BA4
	mov r0, r7
	lsl r1, r1, #0xc
	bl FUN_020B8BDC
	b _020B8D60
_020B8D4C:
	cmp sb, r6
	movlo r6, sb
	mov r0, r7
	lsl r1, r6, #0xc
	bl FUN_020B8BDC
_020B8D60:
	mov r0, #1
	str r0, [r7, #0x58]
_020B8D68:
	ldrh r1, [sl]
	add r0, r8, #1
	lsl r0, r0, #0x10
	cmp r1, r0, lsr #16
	lsr r8, r0, #0x10
	bhi _020B8C8C
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020B8D84:
	ldr r0, [sp]
	ldrh r1, [sl]
	ldr fp, [r0, #0xc]
	mov r7, #0
	cmp r1, #0
	popls {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020B8D9C:
	mov r0, #0x28
	mul r2, r7, r0
	ldr r3, [sl, #4]
	lsl r0, r7, #3
	ldrh r1, [r3, r0]
	ldr r0, [sp]
	ldr r6, [fp, r2]
	ldr r0, [r0, #4]
	add r5, r3, r7, lsl #3
	bl FUN_020B6E80
	mov r4, r0
	mov r0, r6
	mov r1, r4
	bl FUN_020B8BC4
	mov r0, #1
	str r0, [r6, #0xc]
	ldrh r0, [r5, #6]
	and r0, r0, #0xf
	cmp r0, #1
	bne _020B8E5C
	ldrh r3, [r4]
	mov r8, #0
	mov r1, r8
	cmp r3, #0
	bls _020B8E1C
	ldr r2, [r4, #0xc]
_020B8E04:
	add r0, r2, r1, lsl #3
	ldrh r0, [r0, #4]
	add r1, r1, #1
	cmp r1, r3
	add r8, r8, r0
	blo _020B8E04
_020B8E1C:
	mov r0, r6
	bl FUN_020B788C
	cmp r0, #0
	beq _020B8E48
	mov r0, sb
	mov r1, r8
	bl FUN_020F2BA4
	mov r0, r6
	lsl r1, r1, #0xc
	bl FUN_020B8BDC
	b _020B8E5C
_020B8E48:
	cmp sb, r8
	movlo r8, sb
	mov r0, r6
	lsl r1, r8, #0xc
	bl FUN_020B8BDC
_020B8E5C:
	mov r0, #0x28
	mla r3, r7, r0, fp
	mov r0, #1
	str r0, [r3, #8]
	ldrsh r1, [r5, #2]
	ldrsh r2, [r5, #4]
	add r0, r3, #0xc
	bl FUN_020B8954
	add r0, r7, #1
	lsl r0, r0, #0x10
	ldrh r1, [sl]
	lsr r7, r0, #0x10
	cmp r1, r0, lsr #16
	bhi _020B8D9C
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_020B8C1C

	arm_func_start FUN_020B8E98
FUN_020B8E98: @ 0x020B8E98
	push {r3, r4, r5, r6, r7, lr}
	mov r4, r0
	bl FUN_020B787C
	mov r0, #0
	strh r0, [r4, #0x30]
	ldr r0, [r4, #4]
	ldrh r0, [r0, #4]
	cmp r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	mov r0, r4
	bl FUN_020B75CC
	mov r5, r0
	ldrh r1, [r5]
	ldr r0, [r4, #0x44]
	bl FUN_020B7090
	ldr r1, [r4, #0x1c]
	mov r7, r0
	ldr r1, [r1, #4]
	add r0, r4, #0x48
	and r6, r1, #0xff
	mov r1, #1
	bl FUN_020B89B8
	cmp r6, #0
	beq _020B8F3C
	cmp r6, #2
	bne _020B8F14
	ldrsh r1, [r5, #4]
	ldrsh r2, [r5, #6]
	add r0, r4, #0x48
	bl FUN_020B8954
	b _020B8F3C
_020B8F14:
	add r0, r4, #0x48
	ldmib r5, {r1, r2}
	bl FUN_020B8998
	ldrh r1, [r5, #2]
	add r0, r4, #0x48
	bl FUN_020B8978
	ldrsh r1, [r5, #0xc]
	ldrsh r2, [r5, #0xe]
	add r0, r4, #0x48
	bl FUN_020B8954
_020B8F3C:
	ldrh r2, [r4, #0x30]
	mov r1, r7
	add r0, r4, #0x34
	bl FUN_020B8C1C
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020B8E98

	arm_func_start FUN_020B8F50
FUN_020B8F50: @ 0x020B8F50
	push {r4, r5, r6, lr}
	mov r4, r0
	ldrh r0, [r4]
	mov r5, #0
	mov r6, r5
	cmp r0, #0
	bls _020B8F9C
_020B8F6C:
	mov r0, r4
	mov r1, r6
	bl FUN_020B7090
	ldrh r0, [r0]
	ldrh r1, [r4]
	cmp r0, r5
	movhi r5, r0
	add r0, r6, #1
	lsl r0, r0, #0x10
	cmp r1, r0, lsr #16
	lsr r6, r0, #0x10
	bhi _020B8F6C
_020B8F9C:
	mov r0, r5
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020B8F50

	arm_func_start FUN_020B8FA4
FUN_020B8FA4: @ 0x020B8FA4
	push {r4, r5, r6, r7, r8, lr}
	mov r7, r0
	ldr r0, [r7, #8]
	mov r6, r1
	cmp r0, #1
	ldr r0, [r7]
	mov r4, #0
	ldr r5, [r7, #0xc]
	bne _020B9004
	ldrh r0, [r0, #2]
	cmp r0, #0
	popls {r4, r5, r6, r7, r8, pc}
	mov r8, #0x5c
_020B8FD8:
	mla r0, r4, r8, r5
	mov r1, r6
	bl FUN_020B8BDC
	ldr r1, [r7]
	add r0, r4, #1
	lsl r0, r0, #0x10
	ldrh r1, [r1, #2]
	lsr r4, r0, #0x10
	cmp r1, r0, lsr #16
	bhi _020B8FD8
	pop {r4, r5, r6, r7, r8, pc}
_020B9004:
	ldrh r0, [r0]
	cmp r0, #0
	popls {r4, r5, r6, r7, r8, pc}
	mov r8, #0x28
_020B9014:
	mul r0, r4, r8
	ldr r0, [r5, r0]
	mov r1, r6
	bl FUN_020B8BDC
	ldr r1, [r7]
	add r0, r4, #1
	lsl r0, r0, #0x10
	ldrh r1, [r1]
	lsr r4, r0, #0x10
	cmp r1, r0, lsr #16
	bhi _020B9014
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020B8FA4

	arm_func_start FUN_020B9044
FUN_020B9044: @ 0x020B9044
	push {r3, r4, r5, r6, r7, lr}
	mov r4, r0
	ldr r2, [r4]
	mov r6, r1
	ldrh r5, [r2, #4]
	bl FUN_020B75D8
	cmp r0, #0
	beq _020B9114
	ldrh r0, [r4, #0x30]
	add r0, r0, r5
	strh r0, [r4, #0x30]
	ldr r0, [r4, #4]
	ldrh r0, [r0, #4]
	cmp r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	mov r0, r4
	bl FUN_020B75CC
	mov r5, r0
	ldrh r1, [r5]
	ldr r0, [r4, #0x44]
	bl FUN_020B7090
	ldr r1, [r4, #0x1c]
	mov r7, r0
	ldr r1, [r1, #4]
	add r0, r4, #0x48
	and r6, r1, #0xff
	mov r1, #1
	bl FUN_020B89B8
	cmp r6, #0
	beq _020B9100
	cmp r6, #2
	bne _020B90D8
	ldrsh r1, [r5, #4]
	ldrsh r2, [r5, #6]
	add r0, r4, #0x48
	bl FUN_020B8954
	b _020B9100
_020B90D8:
	add r0, r4, #0x48
	ldmib r5, {r1, r2}
	bl FUN_020B8998
	ldrh r1, [r5, #2]
	add r0, r4, #0x48
	bl FUN_020B8978
	ldrsh r1, [r5, #0xc]
	ldrsh r2, [r5, #0xe]
	add r0, r4, #0x48
	bl FUN_020B8954
_020B9100:
	ldrh r2, [r4, #0x30]
	mov r1, r7
	add r0, r4, #0x34
	bl FUN_020B8C1C
	pop {r3, r4, r5, r6, r7, pc}
_020B9114:
	mov r1, r6
	add r0, r4, #0x34
	bl FUN_020B8FA4
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020B9044

	arm_func_start FUN_020B9124
FUN_020B9124: @ 0x020B9124
	push {r3, r4, r5, r6, r7, lr}
	mov r4, r0
	bl FUN_020B778C
	cmp r0, #0
	ldrne r0, [r4, #4]
	ldrhne r0, [r0, #4]
	cmpne r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	mov r0, r4
	bl FUN_020B75CC
	mov r5, r0
	ldrh r1, [r5]
	ldr r0, [r4, #0x44]
	bl FUN_020B7090
	ldr r1, [r4, #0x1c]
	mov r7, r0
	ldr r1, [r1, #4]
	add r0, r4, #0x48
	and r6, r1, #0xff
	mov r1, #1
	bl FUN_020B89B8
	cmp r6, #0
	beq _020B91C4
	cmp r6, #2
	bne _020B919C
	ldrsh r1, [r5, #4]
	ldrsh r2, [r5, #6]
	add r0, r4, #0x48
	bl FUN_020B8954
	b _020B91C4
_020B919C:
	add r0, r4, #0x48
	ldmib r5, {r1, r2}
	bl FUN_020B8998
	ldrh r1, [r5, #2]
	add r0, r4, #0x48
	bl FUN_020B8978
	ldrsh r1, [r5, #0xc]
	ldrsh r2, [r5, #0xe]
	add r0, r4, #0x48
	bl FUN_020B8954
_020B91C4:
	ldrh r2, [r4, #0x30]
	mov r1, r7
	add r0, r4, #0x34
	bl FUN_020B8C1C
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020B9124

	arm_func_start FUN_020B91D8
FUN_020B91D8: @ 0x020B91D8
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov r5, #0
	str r5, [r0, #0x3c]
	ldr r7, [sp, #0x28]
	str r5, [r0, #0x34]
	mov sl, r1
	str r7, [r0, #0x38]
	str r0, [sp]
	movs r8, r3
	mov sb, r2
	str sl, [r0, #0x40]
	ldr fp, [sp, #0x2c]
	beq _020B925C
_020B920C:
	mov r0, #0x28
	mul r4, r5, r0
	mov r1, #1
	add r0, sl, r4
	bl FUN_020B89F0
	mov r0, #0x58
	mla r6, r5, r0, sb
	mov r0, r7
	mov r1, #0
	str r6, [sl, r4]
	bl FUN_020B6E80
	mov r1, r0
	mov r0, r6
	mov r2, fp
	bl FUN_020B8B04
	add r0, r5, #1
	lsl r0, r0, #0x10
	cmp r8, r0, lsr #16
	lsr r5, r0, #0x10
	bhi _020B920C
_020B925C:
	ldr r0, [sp]
	bl FUN_020B77C4
	ldr r0, [sp]
	ldr r3, [sp, #0x30]
	ldr r2, [sp]
	add r0, r0, #0x48
	mov r1, #1
	str r3, [r2, #0x44]
	bl FUN_020B89B8
	ldr r0, [sp]
	mov r1, #0
	strh r1, [r0, #0x30]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_020B91D8

	arm_func_start FUN_020B9290
FUN_020B9290: @ 0x020B9290
	push {r4, lr}
	ldr r0, _020B9318 @ =0x021D94D8
	ldr ip, [r0, #0xc]
	ldr r1, [r0, #4]
	mov r0, #0x18
	mul r3, ip, r0
	cmp r1, #0
	beq _020B92C8
	ldr r1, _020B931C @ =0x021D9678
	mov r2, #0
	ldr r0, _020B9320 @ =0x021D967C
	str r2, [r1, r3]
	str r2, [r0, r3]
	b _020B9308
_020B92C8:
	ldr r1, _020B9324 @ =0x021D9668
	mov r2, #0x1000
	str r2, [r1, r3]
	add r4, r1, r3
	mov r1, #0
	str r1, [r4, #4]
	ldr r0, _020B9328 @ =0x021D9968
	str r1, [r4, #8]
	str r2, [r4, #0xc]
	str r1, [r4, #0x10]
	add lr, r0, r3
	str r1, [r4, #0x14]
	ldm r4!, {r0, r1, r2, r3}
	stm lr!, {r0, r1, r2, r3}
	ldm r4, {r0, r1}
	stm lr, {r0, r1}
_020B9308:
	ldr r0, _020B932C @ =0x021D94E8
	mov r1, #0
	str r1, [r0, ip, lsl #2]
	pop {r4, pc}
	.align 2, 0
_020B9318: .4byte 0x021D94D8
_020B931C: .4byte 0x021D9678
_020B9320: .4byte 0x021D967C
_020B9324: .4byte 0x021D9668
_020B9328: .4byte 0x021D9968
_020B932C: .4byte 0x021D94E8
	arm_func_end FUN_020B9290

	arm_func_start FUN_020B9330
FUN_020B9330: @ 0x020B9330
	push {r3, r4, r5, lr}
	ldr r0, _020B9454 @ =0x021D94D8
	ldr r1, _020B9458 @ =0x021D9568
	ldr r0, [r0, #0xc]
	mov r2, #1
	lsl r0, r0, #0x10
	add r3, r1, r0, lsr #13
	ldrh r0, [r3, #4]
	cmp r0, #1
	cmpne r0, #2
	movne r2, #0
	cmp r2, #0
	popeq {r3, r4, r5, pc}
	ldr r0, _020B9454 @ =0x021D94D8
	ldrh r4, [r3, #2]
	ldrh r5, [r0]
	mov r2, #0x10
	cmp r5, #0x1f
	addlo r1, r5, #1
	strhlo r1, [r0]
	ldr r0, _020B945C @ =0x021D9C68
	strh r5, [r3]
	add r0, r0, r5, lsl #5
	add r1, r0, #0x10
	mvn r0, #0
	bl FUN_020D4858
	ldr r0, _020B9454 @ =0x021D94D8
	ldr r1, [r0, #4]
	ldr ip, [r0, #0xc]
	cmp r1, #0
	ldreq r1, _020B9460 @ =0x021D9968
	mov r0, #0x18
	mlaeq r1, ip, r0, r1
	beq _020B93DC
	mul r3, ip, r0
	ldr r1, _020B9464 @ =0x021D9678
	ldr r0, _020B9468 @ =_021109DC
	ldr r2, [r1, r3]
	ldr r1, _020B946C @ =0x021D967C
	str r2, [r0, #0x18]
	ldr r2, [r1, r3]
	ldr r1, _020B9470 @ =_021109E4
	str r2, [r0, #0x1c]
_020B93DC:
	lsl r2, ip, #0x10
	ldr r0, _020B9458 @ =0x021D9568
	lsr r2, r2, #0xd
	ldrh ip, [r0, r2]
	ldr lr, _020B945C @ =0x021D9C68
	ldr r3, [r1]
	ldr r2, _020B9454 @ =0x021D94D8
	str r3, [lr, ip, lsl #5]
	ldr r3, [r1, #4]
	add ip, lr, ip, lsl #5
	str r3, [ip, #4]
	ldr r3, [r1, #8]
	ldr r2, [r2, #0xc]
	str r3, [ip, #8]
	ldr r3, [r1, #0xc]
	lsl r1, r2, #0x10
	str r3, [ip, #0xc]
	lsrs lr, r1, #0x10
	popmi {r3, r4, r5, pc}
	mov r1, #3
_020B942C:
	add r3, r0, lr, lsl #3
	ldrh r2, [r3, #2]
	lsl ip, lr, #3
	cmp r4, r2
	popne {r3, r4, r5, pc}
	strh r1, [r3, #4]
	strh r5, [r0, ip]
	subs lr, lr, #1
	bpl _020B942C
	pop {r3, r4, r5, pc}
	.align 2, 0
_020B9454: .4byte 0x021D94D8
_020B9458: .4byte 0x021D9568
_020B945C: .4byte 0x021D9C68
_020B9460: .4byte 0x021D9968
_020B9464: .4byte 0x021D9678
_020B9468: .4byte _021109DC
_020B946C: .4byte 0x021D967C
_020B9470: .4byte _021109E4
	arm_func_end FUN_020B9330

	arm_func_start FUN_020B9474
FUN_020B9474: @ 0x020B9474
	push {r4, r5, r6, lr}
	ldr r2, _020B9570 @ =0x021D94D8
	mov r6, r0
	ldr r0, [r2, #8]
	mov r5, r1
	ldr r4, [r0, #0x74]
	ldr r0, [r4, #0x34]
	cmp r0, #0
	beq _020B9504
	ldr r0, [r2, #4]
	cmp r0, #0
	ldreq r2, [r2, #0xc]
	ldreq r1, _020B9574 @ =0x021D9668
	mov r0, #0x18
	mlaeq r1, r2, r0, r1
	beq _020B94DC
	ldr r1, [r2, #0xc]
	mul r3, r1, r0
	ldr r1, _020B9578 @ =0x021D9678
	ldr r0, _020B957C @ =_021109DC
	ldr r2, [r1, r3]
	ldr r1, _020B9580 @ =0x021D967C
	str r2, [r0, #0x18]
	ldr r2, [r1, r3]
	ldr r1, _020B9584 @ =_021109E4
	str r2, [r0, #0x1c]
_020B94DC:
	ldr r3, [r4, #0x34]
	mov r0, r5
	mov r2, r4
	blx r3
	cmp r0, #0
	moveq r0, #0
	streq r0, [r6, #0x30]
	popeq {r4, r5, r6, pc}
	mov r0, #1
	str r0, [r6, #0x30]
_020B9504:
	ldr r0, [r4, #0x38]
	cmp r0, #0
	popeq {r4, r5, r6, pc}
	ldr r0, _020B9570 @ =0x021D94D8
	ldr r1, [r0, #4]
	cmp r1, #0
	ldr r1, [r0, #0xc]
	ldreq r2, _020B9574 @ =0x021D9668
	mov r0, #0x18
	mlaeq r3, r1, r0, r2
	beq _020B9554
	mul r3, r1, r0
	ldr r1, _020B9578 @ =0x021D9678
	ldr r0, _020B957C @ =_021109DC
	ldr r2, [r1, r3]
	ldr r1, _020B9580 @ =0x021D967C
	str r2, [r0, #0x18]
	ldr r1, [r1, r3]
	ldr r3, _020B9584 @ =_021109E4
	str r1, [r0, #0x1c]
_020B9554:
	ldr r0, _020B9570 @ =0x021D94D8
	ldr r6, [r4, #0x38]
	ldr r0, [r0, #8]
	mov r1, r4
	mov r2, r5
	blx r6
	pop {r4, r5, r6, pc}
	.align 2, 0
_020B9570: .4byte 0x021D94D8
_020B9574: .4byte 0x021D9668
_020B9578: .4byte 0x021D9678
_020B957C: .4byte _021109DC
_020B9580: .4byte 0x021D967C
_020B9584: .4byte _021109E4
	arm_func_end FUN_020B9474

	arm_func_start FUN_020B9588
FUN_020B9588: @ 0x020B9588
	push {r4, lr}
	ldr r3, _020B95F4 @ =0x021D94D8
	mov r2, r1
	ldr r0, [r3, #8]
	ldr r1, [r0, #0x74]
	ldr r4, [r1, #0x3c]
	cmp r4, #0
	popeq {r4, pc}
	ldr r4, [r3, #4]
	ldr ip, [r3, #0xc]
	cmp r4, #0
	ldreq lr, _020B95F8 @ =0x021D9668
	mov r3, #0x18
	mlaeq r3, ip, r3, lr
	beq _020B95E8
	mul r4, ip, r3
	ldr r3, _020B95FC @ =0x021D9678
	ldr ip, _020B9600 @ =_021109DC
	ldr lr, [r3, r4]
	ldr r3, _020B9604 @ =0x021D967C
	str lr, [ip, #0x18]
	ldr lr, [r3, r4]
	ldr r3, _020B9608 @ =_021109E4
	str lr, [ip, #0x1c]
_020B95E8:
	ldr ip, [r1, #0x3c]
	blx ip
	pop {r4, pc}
	.align 2, 0
_020B95F4: .4byte 0x021D94D8
_020B95F8: .4byte 0x021D9668
_020B95FC: .4byte 0x021D9678
_020B9600: .4byte _021109DC
_020B9604: .4byte 0x021D967C
_020B9608: .4byte _021109E4
	arm_func_end FUN_020B9588

	arm_func_start FUN_020B960C
FUN_020B960C: @ 0x020B960C
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #4
	ldr r3, _020B97E0 @ =0x021D94D8
	mov r6, r0
	ldr r0, [r3, #8]
	mov r5, r1
	mov r4, r2
	bl FUN_020BAB44
	cmp r0, #0
	beq _020B965C
	ldrh r1, [r6, #0x3c]
	and r1, r1, #0xf000
	lsl r1, r1, #4
	lsr r1, r1, #0x10
	bl FUN_020B7FFC
	ldr r1, [r6, #0x3c]
	lsl r0, r0, #0x1c
	bic r1, r1, #0xf000
	orr r0, r1, r0, lsr #16
	str r0, [r6, #0x3c]
_020B965C:
	ldr r0, _020B97E0 @ =0x021D94D8
	ldr r1, [r0, #8]
	ldr r0, [r1, #0x84]
	cmp r0, #0
	beq _020B9768
	ldr r0, [r1, #0x84]
	tst r0, #1
	beq _020B9694
	ldrh r0, [r1, #0x88]
	ldr r1, [r6, #0x3c]
	bic r1, r1, #0xc00
	lsl r0, r0, #0x1e
	orr r0, r1, r0, lsr #20
	str r0, [r6, #0x3c]
_020B9694:
	ldr r0, _020B97E0 @ =0x021D94D8
	ldr r1, [r0, #8]
	ldr r0, [r1, #0x84]
	tst r0, #2
	beq _020B96C0
	ldrh r0, [r1, #0x8a]
	ldr r1, [r6, #0x3c]
	bic r1, r1, #0xf000
	lsl r0, r0, #0x1c
	orr r0, r1, r0, lsr #16
	str r0, [r6, #0x3c]
_020B96C0:
	ldr r0, _020B97E0 @ =0x021D94D8
	ldr r1, [r0, #8]
	ldr r0, [r1, #0x84]
	tst r0, #0x10
	beq _020B96F4
	ldr r2, [r6, #0x3c]
	ldrh r0, [r1, #0x94]
	lsl r1, r2, #0x10
	bic r2, r2, #0xf000
	add r0, r0, r1, lsr #28
	lsl r0, r0, #0x1c
	orr r0, r2, r0, lsr #16
	str r0, [r6, #0x3c]
_020B96F4:
	ldr r0, _020B97E0 @ =0x021D94D8
	ldr r1, [r0, #8]
	ldr r0, [r1, #0x84]
	tst r0, #4
	beq _020B9724
	ldr r0, [r1, #0x90]
	cmp r0, #0
	ldr r0, [r6, #0x38]
	orrne r0, r0, #0x1000
	strne r0, [r6, #0x38]
	biceq r0, r0, #0x1000
	streq r0, [r6, #0x38]
_020B9724:
	ldr r0, _020B97E0 @ =0x021D94D8
	ldr r1, [r0, #8]
	ldr r0, [r1, #0x84]
	tst r0, #8
	beq _020B9768
	ldr r0, [r6, #0x38]
	ldrh r2, [r6, #0x3c]
	ldr r1, [r1, #0x8c]
	bic r0, r0, #0xc00
	orr r0, r0, r1, lsl #10
	str r0, [r6, #0x38]
	ldrh r0, [r6, #0x3c]
	and r1, r2, #0xf000
	asr r1, r1, #0xc
	bic r0, r0, #0xf000
	orr r0, r0, r1, lsl #12
	strh r0, [r6, #0x3c]
_020B9768:
	ldr r2, _020B97E0 @ =0x021D94D8
	ldr r0, [r2, #8]
	ldr r1, [r0, #0x74]
	ldr r3, [r1, #0x40]
	cmp r3, #0
	addeq sp, sp, #4
	popeq {r3, r4, r5, r6, pc}
	ldr r3, [r2, #4]
	cmp r3, #0
	ldr r3, [r2, #0xc]
	ldreq r6, _020B97E4 @ =0x021D9668
	mov r2, #0x18
	mlaeq r6, r3, r2, r6
	beq _020B97C4
	mul ip, r3, r2
	ldr r3, _020B97E8 @ =0x021D9678
	ldr r2, _020B97EC @ =_021109DC
	ldr r6, [r3, ip]
	ldr r3, _020B97F0 @ =0x021D967C
	str r6, [r2, #0x18]
	ldr r3, [r3, ip]
	ldr r6, _020B97F4 @ =_021109E4
	str r3, [r2, #0x1c]
_020B97C4:
	str r6, [sp]
	ldr r6, [r1, #0x40]
	mov r2, r5
	mov r3, r4
	blx r6
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
	.align 2, 0
_020B97E0: .4byte 0x021D94D8
_020B97E4: .4byte 0x021D9668
_020B97E8: .4byte 0x021D9678
_020B97EC: .4byte _021109DC
_020B97F0: .4byte 0x021D967C
_020B97F4: .4byte _021109E4
	arm_func_end FUN_020B960C

	arm_func_start FUN_020B97F8
FUN_020B97F8: @ 0x020B97F8
	push {r3, r4, r5, lr}
	ldr lr, _020B9874 @ =0x021D94D8
	mov ip, r1
	ldr r0, [lr, #8]
	mov r3, r2
	ldr r1, [r0, #0x74]
	ldr r2, [r1, #0x44]
	cmp r2, #0
	popeq {r3, r4, r5, pc}
	ldr r2, [lr, #4]
	cmp r2, #0
	ldreq lr, [lr, #0xc]
	ldreq r4, _020B9878 @ =0x021D9668
	mov r2, #0x18
	mlaeq r5, lr, r2, r4
	beq _020B9860
	ldr r4, [lr, #0xc]
	mul r5, r4, r2
	ldr r4, _020B987C @ =0x021D9678
	ldr r2, _020B9880 @ =_021109DC
	ldr lr, [r4, r5]
	ldr r4, _020B9884 @ =0x021D967C
	str lr, [r2, #0x18]
	ldr r4, [r4, r5]
	ldr r5, _020B9888 @ =_021109E4
	str r4, [r2, #0x1c]
_020B9860:
	str r5, [sp]
	ldr lr, [r1, #0x44]
	mov r2, ip
	blx lr
	pop {r3, r4, r5, pc}
	.align 2, 0
_020B9874: .4byte 0x021D94D8
_020B9878: .4byte 0x021D9668
_020B987C: .4byte 0x021D9678
_020B9880: .4byte _021109DC
_020B9884: .4byte 0x021D967C
_020B9888: .4byte _021109E4
	arm_func_end FUN_020B97F8

	arm_func_start FUN_020B988C
FUN_020B988C: @ 0x020B988C
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	ldr r7, _020B9CA8 @ =0x021D94D8
	mov r4, r0
	ldr fp, [r7, #8]
	ldr r0, [fp, #0x7c]
	ldr sb, [fp, #0x70]
	tst r0, #2
	beq _020B9A7C
	ldr r0, [sb, #0x14]
	cmp r0, #0
	beq _020B99EC
	ldr r0, [r7, #4]
	mov r1, #0
	cmp r0, #0
	bne _020B98E0
	ldr r2, _020B9CAC @ =_021109DC
	ldr r0, _020B9CB0 @ =0x0000FFFE
	ldrh r2, [r2]
	cmp r2, r0
	movne r0, #1
	bne _020B98E4
_020B98E0:
	mov r0, #0
_020B98E4:
	cmp r0, #0
	beq _020B9970
	ldr r0, _020B9CA8 @ =0x021D94D8
	ldr r0, [r0, #0xf94]
	cmp r0, #0
	beq _020B994C
	ldr r0, _020B9CB4 @ =0x021D9FD8
	ldr r1, _020B9CB8 @ =0x021DA06C
	ldrh r0, [r0, #0x90]
	ldr r1, [r1, r0, lsl #2]
	cmp r1, #0
	bne _020B9970
	bl FUN_020B9330
	ldr r0, _020B9CA8 @ =0x021D94D8
	ldr r2, _020B9CBC @ =0x021D9568
	ldr r0, [r0, #0xc]
	ldr r1, _020B9CB4 @ =0x021D9FD8
	lsl r0, r0, #0x10
	lsr r0, r0, #0xd
	ldrh r3, [r2, r0]
	ldr r5, _020B9CC0 @ =0x021D9C68
	ldrh r2, [r1, #0x90]
	ldr r0, _020B9CB8 @ =0x021DA06C
	add r1, r5, r3, lsl #5
	str r1, [r0, r2, lsl #2]
	b _020B9970
_020B994C:
	bl FUN_020B9330
	ldr r0, _020B9CA8 @ =0x021D94D8
	ldr r1, _020B9CBC @ =0x021D9568
	ldr r0, [r0, #0xc]
	ldr r2, _020B9CC0 @ =0x021D9C68
	lsl r0, r0, #0x10
	lsr r0, r0, #0xd
	ldrh r0, [r1, r0]
	add r1, r2, r0, lsl #5
_020B9970:
	ldr r0, _020B9CA8 @ =0x021D94D8
	ldr r2, [r0, #4]
	cmp r2, #0
	ldr r2, [r0, #0xc]
	ldreq r3, _020B9CC4 @ =0x021D9668
	mov r0, #0x18
	mlaeq r0, r2, r0, r3
	beq _020B99B4
	mul r5, r2, r0
	ldr r0, _020B9CC8 @ =0x021D9678
	ldr r2, _020B9CAC @ =_021109DC
	ldr r3, [r0, r5]
	ldr r0, _020B9CCC @ =0x021D967C
	str r3, [r2, #0x18]
	ldr r3, [r0, r5]
	ldr r0, _020B9CD0 @ =_021109E4
	str r3, [r2, #0x1c]
_020B99B4:
	bl FUN_020BBF34
	ldr r1, _020B9CAC @ =_021109DC
	mvn r0, #0
	ldr r1, [r1, #4]
	cmp r1, r0
	movne r0, #1
	moveq r0, #0
	cmp r0, #0
	mov r0, r4
	beq _020B99E4
	bl FUN_020BC1D4
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020B99E4:
	bl FUN_020BC120
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020B99EC:
	ldr r2, [r7, #0xc]
	ldr r1, _020B9CD4 @ =0x021D94E8
	mov r0, fp
	ldr r1, [r1, r2, lsl #2]
	bl FUN_020BBF4C
	mov r0, r7
	ldr r1, [r0, #4]
	cmp r1, #0
	ldr r1, [r0, #0xc]
	ldreq r2, _020B9CC4 @ =0x021D9668
	mov r0, #0x18
	mlaeq r0, r1, r0, r2
	beq _020B9A44
	mul r3, r1, r0
	ldr r0, _020B9CC8 @ =0x021D9678
	ldr r1, _020B9CAC @ =_021109DC
	ldr r2, [r0, r3]
	ldr r0, _020B9CCC @ =0x021D967C
	str r2, [r1, #0x18]
	ldr r2, [r0, r3]
	ldr r0, _020B9CD0 @ =_021109E4
	str r2, [r1, #0x1c]
_020B9A44:
	bl FUN_020BBECC
	ldr r1, _020B9CAC @ =_021109DC
	mvn r0, #0
	ldr r1, [r1, #4]
	cmp r1, r0
	movne r0, #1
	moveq r0, #0
	cmp r0, #0
	mov r0, r4
	beq _020B9A74
	bl FUN_020BC1D4
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020B9A74:
	bl FUN_020BC120
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020B9A7C:
	cmp sb, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r8, _020B9CC4 @ =0x021D9668
	ldr r6, _020B9CAC @ =_021109DC
	mvn r5, #0
_020B9A90:
	ldr r0, [sb, #0x10]
	cmp r0, #0
	beq _020B9C98
	ldr r0, [sb, #0x14]
	ldr sl, [r7, #8]
	cmp r0, #0
	mov r1, sb
	beq _020B9BFC
	str sb, [sl, #0x74]
	mov r0, sl
	bl FUN_020BBF54
	ldr r1, [sb, #0x28]
	ldr r2, [sb, #0x2c]
	mov r0, sl
	bl FUN_020BBEB8
	mov r0, sl
	bl FUN_020BBFB0
	ldr r0, [r7, #4]
	mov r1, #0
	cmp r0, #0
	bne _020B9AF8
	ldrh r2, [r6]
	ldr r0, _020B9CB0 @ =0x0000FFFE
	cmp r2, r0
	movne r0, #1
	bne _020B9AFC
_020B9AF8:
	mov r0, #0
_020B9AFC:
	cmp r0, #0
	beq _020B9B84
	ldr r0, [r7, #0xf94]
	cmp r0, #0
	beq _020B9B64
	ldr r0, _020B9CB4 @ =0x021D9FD8
	ldrh r1, [r0, #0x90]
	ldr r0, _020B9CD8 @ =0x021DA068
	add r0, r0, r1, lsl #2
	ldr r1, [r0, #4]
	cmp r1, #0
	bne _020B9B84
	bl FUN_020B9330
	ldr r0, _020B9CB4 @ =0x021D9FD8
	ldr r2, [r7, #0xc]
	ldrh r1, [r0, #0x90]
	lsl r0, r2, #0x10
	lsr r2, r0, #0xd
	ldr r0, _020B9CBC @ =0x021D9568
	ldrh r3, [r0, r2]
	ldr r0, _020B9CD8 @ =0x021DA068
	add r2, r0, r1, lsl #2
	ldr r0, _020B9CC0 @ =0x021D9C68
	add r1, r0, r3, lsl #5
	str r1, [r2, #4]
	b _020B9B84
_020B9B64:
	bl FUN_020B9330
	ldr r0, [r7, #0xc]
	lsl r0, r0, #0x10
	lsr r1, r0, #0xd
	ldr r0, _020B9CBC @ =0x021D9568
	ldrh r1, [r0, r1]
	ldr r0, _020B9CC0 @ =0x021D9C68
	add r1, r0, r1, lsl #5
_020B9B84:
	ldr r0, [r7, #4]
	cmp r0, #0
	ldreq r2, [r7, #0xc]
	moveq r0, #0x18
	mlaeq r0, r2, r0, r8
	beq _020B9BBC
	ldr r3, [r7, #0xc]
	mov r2, #0x18
	mla sl, r3, r2, r8
	ldr r2, [sl, #0x10]
	ldr r0, _020B9CD0 @ =_021109E4
	str r2, [r6, #0x18]
	ldr r2, [sl, #0x14]
	str r2, [r6, #0x1c]
_020B9BBC:
	bl FUN_020BBF34
	ldr r1, [r6, #4]
	cmp r1, r5
	movne r0, #1
	moveq r0, #0
	cmp r0, #0
	mov r0, r4
	beq _020B9BE4
	bl FUN_020BC1D4
	b _020B9BE8
_020B9BE4:
	bl FUN_020BC120
_020B9BE8:
	ldr r1, [r7, #8]
	mov r0, #0
	str r0, [r1, #0x74]
	bl FUN_020BC0BC
	b _020B9C98
_020B9BFC:
	mov r0, sl
	str sb, [sl, #0x74]
	bl FUN_020BBF54
	mov r0, sl
	bl FUN_020BBFB0
	ldr r2, [r7, #0xc]
	ldr r1, _020B9CD4 @ =0x021D94E8
	mov r0, fp
	ldr r1, [r1, r2, lsl #2]
	bl FUN_020BBF4C
	ldr r0, [r7, #4]
	cmp r0, #0
	ldreq r1, [r7, #0xc]
	moveq r0, #0x18
	mlaeq r0, r1, r0, r8
	beq _020B9C5C
	ldr r2, [r7, #0xc]
	mov r1, #0x18
	mla r3, r2, r1, r8
	ldr r1, [r3, #0x10]
	ldr r0, _020B9CD0 @ =_021109E4
	str r1, [r6, #0x18]
	ldr r1, [r3, #0x14]
	str r1, [r6, #0x1c]
_020B9C5C:
	bl FUN_020BBECC
	ldr r1, [r6, #4]
	cmp r1, r5
	movne r0, #1
	moveq r0, #0
	cmp r0, #0
	mov r0, r4
	beq _020B9C84
	bl FUN_020BC1D4
	b _020B9C88
_020B9C84:
	bl FUN_020BC120
_020B9C88:
	ldr r1, [r7, #8]
	mov r0, #0
	str r0, [r1, #0x74]
	bl FUN_020BC0BC
_020B9C98:
	ldr sb, [sb, #0x30]
	cmp sb, #0
	bne _020B9A90
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020B9CA8: .4byte 0x021D94D8
_020B9CAC: .4byte _021109DC
_020B9CB0: .4byte 0x0000FFFE
_020B9CB4: .4byte 0x021D9FD8
_020B9CB8: .4byte 0x021DA06C
_020B9CBC: .4byte 0x021D9568
_020B9CC0: .4byte 0x021D9C68
_020B9CC4: .4byte 0x021D9668
_020B9CC8: .4byte 0x021D9678
_020B9CCC: .4byte 0x021D967C
_020B9CD0: .4byte _021109E4
_020B9CD4: .4byte 0x021D94E8
_020B9CD8: .4byte 0x021DA068
	arm_func_end FUN_020B988C

	arm_func_start FUN_020B9CDC
FUN_020B9CDC: @ 0x020B9CDC
	push {r3, r4, r5, r6, r7, lr}
	mov r5, r0
	ldrh r0, [r5, #0x4e]
	ldr r4, [r5, #0x30]
	cmp r0, #0
	bne _020B9D3C
	ldr r2, [r5, #0x38]
	mvn r0, #0
	cmp r2, r0
	movne r0, #1
	moveq r0, #0
	cmp r0, #0
	beq _020B9D30
	ldr r1, _020B9E2C @ =_021109DC
	mov r0, r4
	str r2, [r1, #4]
	bl FUN_020B988C
	ldr r0, _020B9E2C @ =_021109DC
	mvn r1, #0
	str r1, [r0, #4]
	pop {r3, r4, r5, r6, r7, pc}
_020B9D30:
	mov r0, r4
	bl FUN_020B988C
	pop {r3, r4, r5, r6, r7, pc}
_020B9D3C:
	bl FUN_020BA560
	ldrh r0, [r5, #0x4e]
	tst r0, #8
	beq _020B9D8C
	ldr r0, _020B9E30 @ =0x021D94D8
	ldrsh r7, [r5, #0x4a]
	ldr r0, [r0, #8]
	ldrsh r6, [r5, #0x48]
	bl FUN_020BBF5C
	cmp r0, #0
	ldr r0, _020B9E30 @ =0x021D94D8
	rsbne r6, r6, #0
	ldr r0, [r0, #8]
	bl FUN_020BBF70
	cmp r0, #0
	rsbne r7, r7, #0
	lsl r0, r6, #0xc
	lsl r1, r7, #0xc
	mov r2, #0
	bl FUN_020BA7D4
_020B9D8C:
	ldrh r0, [r5, #0x4e]
	tst r0, #4
	beq _020B9DC0
	ldrh r0, [r5, #0x4c]
	ldr r2, _020B9E34 @ =0x021094DC
	asr r0, r0, #4
	lsl r1, r0, #1
	add r0, r1, #1
	lsl r3, r1, #1
	lsl r1, r0, #1
	ldrsh r0, [r2, r3]
	ldrsh r1, [r2, r1]
	bl FUN_020BAA24
_020B9DC0:
	ldrh r0, [r5, #0x4e]
	tst r0, #2
	beq _020B9DDC
	ldr r0, [r5, #0x40]
	ldr r1, [r5, #0x44]
	mov r2, #0x1000
	bl FUN_020BA8D0
_020B9DDC:
	ldr r2, [r5, #0x38]
	mvn r0, #0
	cmp r2, r0
	movne r0, #1
	moveq r0, #0
	cmp r0, #0
	beq _020B9E18
	ldr r1, _020B9E2C @ =_021109DC
	mov r0, r4
	str r2, [r1, #4]
	bl FUN_020B988C
	ldr r0, _020B9E2C @ =_021109DC
	mvn r1, #0
	str r1, [r0, #4]
	b _020B9E20
_020B9E18:
	mov r0, r4
	bl FUN_020B988C
_020B9E20:
	mov r0, #1
	bl FUN_020BA784
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020B9E2C: .4byte _021109DC
_020B9E30: .4byte 0x021D94D8
_020B9E34: .4byte 0x021094DC
	arm_func_end FUN_020B9CDC

	arm_func_start FUN_020B9E38
FUN_020B9E38: @ 0x020B9E38
	push {r3, r4, r5, r6, r7, lr}
	mov r5, r0
	ldr r0, [r5, #8]
	cmp r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	ldr r4, [r5]
	bl FUN_020BA560
	ldrh r0, [r5, #0x1e]
	tst r0, #8
	beq _020B9EA0
	ldr r0, _020B9F04 @ =0x021D94D8
	ldrsh r7, [r5, #0x1a]
	ldr r0, [r0, #8]
	ldrsh r6, [r5, #0x18]
	bl FUN_020BBF5C
	cmp r0, #0
	ldr r0, _020B9F04 @ =0x021D94D8
	rsbne r6, r6, #0
	ldr r0, [r0, #8]
	bl FUN_020BBF70
	cmp r0, #0
	rsbne r7, r7, #0
	lsl r0, r6, #0xc
	lsl r1, r7, #0xc
	mov r2, #0
	bl FUN_020BA7D4
_020B9EA0:
	ldrh r0, [r5, #0x1e]
	tst r0, #4
	beq _020B9ED4
	ldrh r0, [r5, #0x1c]
	ldr r2, _020B9F08 @ =0x021094DC
	asr r0, r0, #4
	lsl r1, r0, #1
	add r0, r1, #1
	lsl r3, r1, #1
	lsl r1, r0, #1
	ldrsh r0, [r2, r3]
	ldrsh r1, [r2, r1]
	bl FUN_020BAA24
_020B9ED4:
	ldrh r0, [r5, #0x1e]
	tst r0, #2
	beq _020B9EF0
	ldr r0, [r5, #0x10]
	ldr r1, [r5, #0x14]
	mov r2, #0x1000
	bl FUN_020BA8D0
_020B9EF0:
	mov r0, r4
	bl FUN_020B9CDC
	mov r0, #1
	bl FUN_020BA784
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020B9F04: .4byte 0x021D94D8
_020B9F08: .4byte 0x021094DC
	arm_func_end FUN_020B9E38

	arm_func_start FUN_020B9F0C
FUN_020B9F0C: @ 0x020B9F0C
	push {r3, r4, r5, r6, r7, lr}
	mov r4, r0
	bl FUN_020BBE6C
	mov r6, #0
	str r6, [r4, #0x70]
	str r6, [r4, #0x74]
	str r6, [r4, #0x78]
	str r6, [r4, #0x7c]
	str r6, [r4, #0x80]
	str r6, [r4, #0x84]
	strh r6, [r4, #0x88]
	strh r6, [r4, #0x8a]
	str r6, [r4, #0x8c]
	str r6, [r4, #0x90]
	strh r6, [r4, #0x94]
	ldr r1, _020B9FB4 @ =0x021D94D8
	ldr r2, _020B9FB8 @ =0x0000FFFE
	ldr r0, _020B9FBC @ =_021109DC
	ldr r7, _020B9FC0 @ =0x021D9C68
	str r6, [r1, #0xc]
	strh r2, [r0]
	mvn r5, #0
	mov r4, #0x10
_020B9F68:
	mov r0, r5
	mov r2, r4
	add r1, r7, #0x10
	bl FUN_020D4858
	add r6, r6, #1
	cmp r6, #0x20
	add r7, r7, #0x20
	blt _020B9F68
	ldr r3, _020B9FB4 @ =0x021D94D8
	mov r0, #0
	strh r0, [r3]
	ldr r1, _020B9FC4 @ =0x021D9568
	mov r2, #0x100
	strh r0, [r3, #2]
	bl FUN_020D4858
	ldr r0, _020B9FB4 @ =0x021D94D8
	mov r1, #0
	str r1, [r0, #4]
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020B9FB4: .4byte 0x021D94D8
_020B9FB8: .4byte 0x0000FFFE
_020B9FBC: .4byte _021109DC
_020B9FC0: .4byte 0x021D9C68
_020B9FC4: .4byte 0x021D9568
	arm_func_end FUN_020B9F0C

	arm_func_start FUN_020B9FC8
FUN_020B9FC8: @ 0x020B9FC8
	ldr r2, [r0, #0x70]
	str r2, [r1, #0x30]
	str r1, [r0, #0x70]
	bx lr
	arm_func_end FUN_020B9FC8

	arm_func_start FUN_020B9FD8
FUN_020B9FD8: @ 0x020B9FD8
	push {r4, lr}
	mov r4, r0
	mov r1, r4
	mov r0, #0
	mov r2, #0x48
	bl FUN_020D4790
	mov r0, #1
	str r0, [r4, #0x10]
	mov r0, #3
	ldr r1, _020BA024 @ =FUN_020B9474
	str r0, [r4, #0x14]
	ldr r0, _020BA028 @ =FUN_020B9588
	str r1, [r4, #0x18]
	ldr r1, _020BA02C @ =FUN_020B960C
	str r0, [r4, #0x1c]
	ldr r0, _020BA030 @ =FUN_020B97F8
	str r1, [r4, #0x20]
	str r0, [r4, #0x24]
	pop {r4, pc}
	.align 2, 0
_020BA024: .4byte FUN_020B9474
_020BA028: .4byte FUN_020B9588
_020BA02C: .4byte FUN_020B960C
_020BA030: .4byte FUN_020B97F8
	arm_func_end FUN_020B9FD8

	arm_func_start FUN_020BA034
FUN_020BA034: @ 0x020BA034
	push {r4, r5, r6, r7, r8, lr}
	ldr r5, _020BA0C4 @ =0x021D94D8
	mov r4, #0
	str r0, [r5, #8]
	ldr r1, _020BA0C8 @ =0x0000FFFE
	ldr r0, _020BA0CC @ =_021109DC
	str r4, [r5, #0xc]
	strh r1, [r0]
	ldrh r0, [r5]
	cmp r0, #0
	ble _020BA090
	ldr r8, _020BA0D0 @ =0x021D9C68
	mvn r7, #0
	mov r6, #0x10
_020BA06C:
	mov r0, r7
	mov r2, r6
	add r1, r8, #0x10
	bl FUN_020D4858
	ldrh r0, [r5]
	add r4, r4, #1
	add r8, r8, #0x20
	cmp r4, r0
	blt _020BA06C
_020BA090:
	ldr r3, _020BA0C4 @ =0x021D94D8
	mov r0, #0
	strh r0, [r3]
	ldr r1, _020BA0D4 @ =0x021D9568
	mov r2, #0x100
	strh r0, [r3, #2]
	bl FUN_020D4858
	ldr r0, _020BA0D8 @ =0x04000444
	mov r1, #0
	str r1, [r0]
	str r1, [r0, #0x10]
	bl FUN_020B9290
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0
_020BA0C4: .4byte 0x021D94D8
_020BA0C8: .4byte 0x0000FFFE
_020BA0CC: .4byte _021109DC
_020BA0D0: .4byte 0x021D9C68
_020BA0D4: .4byte 0x021D9568
_020BA0D8: .4byte 0x04000444
	arm_func_end FUN_020BA034

	arm_func_start FUN_020BA0DC
FUN_020BA0DC: @ 0x020BA0DC
	push {r3, lr}
	ldr r1, _020BA140 @ =0x04000448
	mov r2, #1
	ldr r0, _020BA144 @ =0x021D94D8
	str r2, [r1]
	ldr r3, [r0, #8]
	ldr r2, [r3, #0x7c]
	cmp r2, #0
	beq _020BA130
	tst r2, #1
	movne r1, #0
	strne r1, [r0, #4]
	tst r2, #2
	beq _020BA120
	mov r0, #0
	str r0, [r3, #0x74]
	bl FUN_020BC0BC
_020BA120:
	ldr r0, _020BA144 @ =0x021D94D8
	mov r1, #0
	ldr r0, [r0, #8]
	str r1, [r0, #0x7c]
_020BA130:
	ldr r0, _020BA144 @ =0x021D94D8
	mov r1, #0
	str r1, [r0, #8]
	pop {r3, pc}
	.align 2, 0
_020BA140: .4byte 0x04000448
_020BA144: .4byte 0x021D94D8
	arm_func_end FUN_020BA0DC

	arm_func_start FUN_020BA148
FUN_020BA148: @ 0x020BA148
	push {r3, r4, r5, lr}
	ldr r1, _020BA1AC @ =0x021D94D8
	mov r5, r0
	ldr r1, [r1, #8]
	ldr r1, [r1, #0x80]
	cmp r1, #0
	beq _020BA1A4
	bl FUN_020BB224
	mov r4, r0
	mov r0, #1
	bl FUN_020BB1F0
	ldr r0, _020BA1AC @ =0x021D94D8
	ldr r0, [r0, #8]
	ldr r0, [r0, #0x80]
	bl FUN_020BB214
	mov r0, r5
	bl FUN_020B9CDC
	mov r0, #0
	bl FUN_020BB1F0
	mov r0, r4
	bl FUN_020BB214
	bl FUN_020BB200
	pop {r3, r4, r5, pc}
_020BA1A4:
	bl FUN_020B9CDC
	pop {r3, r4, r5, pc}
	.align 2, 0
_020BA1AC: .4byte 0x021D94D8
	arm_func_end FUN_020BA148

	arm_func_start FUN_020BA1B0
FUN_020BA1B0: @ 0x020BA1B0
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov r5, r0
	ldr r0, [r5, #8]
	cmp r0, #1
	bne _020BA3AC
	ldr r0, [r5]
	mov r2, #0
	ldrh r0, [r0, #2]
	cmp r0, #0
	bls _020BA204
	ldr r3, _020BA478 @ =0x021DA068
	mov r4, r2
_020BA1E0:
	add r0, r3, r2, lsl #2
	str r4, [r0, #4]
	ldr r0, [r5]
	add r2, r2, #1
	ldrh r1, [r0, #2]
	lsl r0, r2, #0x10
	lsr r2, r0, #0x10
	cmp r1, r0, lsr #16
	bhi _020BA1E0
_020BA204:
	ldr r6, _020BA47C @ =0x021D94D8
	mov r0, #1
	str r0, [r6, #0xf94]
	ldr r0, [r6, #8]
	mov sl, #0
	ldr r0, [r0, #0x80]
	cmp r0, #0
	beq _020BA2FC
	bl FUN_020BB224
	str r0, [sp]
	mov r0, #1
	bl FUN_020BB1F0
	mov r0, r6
	ldr r0, [r0, #8]
	ldr r0, [r0, #0x80]
	bl FUN_020BB214
	ldr r2, [r5]
	ldrh r0, [r2]
	cmp r0, #0
	bls _020BA2E4
	ldr fp, _020BA480 @ =0x021D9FD8
_020BA258:
	ldr r0, [r2, #4]
	ldr r8, [r5, #0xc]
	add r7, r0, sl, lsl #3
	ldrh r0, [r7, #6]
	and r0, r0, #0xff00
	lsl r0, r0, #8
	lsr sb, r0, #0x10
	strh sb, [fp, #0x90]
	bl FUN_020BA560
	ldrsh r4, [r7, #4]
	ldr r0, [r6, #8]
	ldrsh r7, [r7, #2]
	bl FUN_020BBF5C
	cmp r0, #0
	ldr r0, [r6, #8]
	rsbne r7, r7, #0
	bl FUN_020BBF70
	cmp r0, #0
	rsbne r4, r4, #0
	mov r2, #0
	lsl r0, r7, #0xc
	lsl r1, r4, #0xc
	bl FUN_020BA7D4
	mov r0, #0x5c
	mla r0, sb, r0, r8
	bl FUN_020B9CDC
	mov r0, #1
	bl FUN_020BA784
	ldr r2, [r5]
	add r0, sl, #1
	lsl r0, r0, #0x10
	ldrh r1, [r2]
	lsr sl, r0, #0x10
	cmp r1, r0, lsr #16
	bhi _020BA258
_020BA2E4:
	mov r0, #0
	bl FUN_020BB1F0
	ldr r0, [sp]
	bl FUN_020BB214
	bl FUN_020BB200
	b _020BA39C
_020BA2FC:
	ldr r2, [r5]
	ldrh r0, [r2]
	cmp r0, #0
	bls _020BA39C
	ldr fp, _020BA480 @ =0x021D9FD8
_020BA310:
	ldr r0, [r2, #4]
	ldr r8, [r5, #0xc]
	add r7, r0, sl, lsl #3
	ldrh r0, [r7, #6]
	and r0, r0, #0xff00
	lsl r0, r0, #8
	lsr sb, r0, #0x10
	strh sb, [fp, #0x90]
	bl FUN_020BA560
	ldrsh r4, [r7, #4]
	ldr r0, [r6, #8]
	ldrsh r7, [r7, #2]
	bl FUN_020BBF5C
	cmp r0, #0
	ldr r0, [r6, #8]
	rsbne r7, r7, #0
	bl FUN_020BBF70
	cmp r0, #0
	rsbne r4, r4, #0
	mov r2, #0
	lsl r0, r7, #0xc
	lsl r1, r4, #0xc
	bl FUN_020BA7D4
	mov r0, #0x5c
	mla r0, sb, r0, r8
	bl FUN_020B9CDC
	mov r0, #1
	bl FUN_020BA784
	ldr r2, [r5]
	add r0, sl, #1
	lsl r0, r0, #0x10
	ldrh r1, [r2]
	lsr sl, r0, #0x10
	cmp r1, r0, lsr #16
	bhi _020BA310
_020BA39C:
	ldr r0, _020BA47C @ =0x021D94D8
	mov r1, #0
	str r1, [r0, #0xf94]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020BA3AC:
	ldr r0, _020BA47C @ =0x021D94D8
	ldr r4, [r5, #0xc]
	ldr r0, [r0, #8]
	ldr r0, [r0, #0x80]
	cmp r0, #0
	beq _020BA438
	bl FUN_020BB224
	mov r6, r0
	mov r0, #1
	bl FUN_020BB1F0
	ldr r0, _020BA47C @ =0x021D94D8
	ldr r0, [r0, #8]
	ldr r0, [r0, #0x80]
	bl FUN_020BB214
	ldr r0, [r5]
	mov r7, #0
	ldrh r0, [r0]
	cmp r0, #0
	bls _020BA420
	mov r8, #0x28
_020BA3FC:
	mla r0, r7, r8, r4
	bl FUN_020B9E38
	ldr r1, [r5]
	add r0, r7, #1
	lsl r0, r0, #0x10
	ldrh r1, [r1]
	lsr r7, r0, #0x10
	cmp r1, r0, lsr #16
	bhi _020BA3FC
_020BA420:
	mov r0, #0
	bl FUN_020BB1F0
	mov r0, r6
	bl FUN_020BB214
	bl FUN_020BB200
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020BA438:
	ldr r0, [r5]
	mov r6, #0
	ldrh r0, [r0]
	cmp r0, #0
	popls {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r7, #0x28
_020BA450:
	mla r0, r6, r7, r4
	bl FUN_020B9E38
	ldr r1, [r5]
	add r0, r6, #1
	lsl r0, r0, #0x10
	ldrh r1, [r1]
	lsr r6, r0, #0x10
	cmp r1, r0, lsr #16
	bhi _020BA450
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020BA478: .4byte 0x021DA068
_020BA47C: .4byte 0x021D94D8
_020BA480: .4byte 0x021D9FD8
	arm_func_end FUN_020BA1B0

	arm_func_start FUN_020BA484
FUN_020BA484: @ 0x020BA484
	push {r4, r5, r6, lr}
	mov r4, r0
	ldrh r0, [r4, #0x5a]
	cmp r0, #0
	bne _020BA4A4
	add r0, r4, #0x34
	bl FUN_020BA1B0
	pop {r4, r5, r6, pc}
_020BA4A4:
	bl FUN_020BA560
	ldrh r0, [r4, #0x5a]
	tst r0, #8
	beq _020BA4F4
	ldr r0, _020BA558 @ =0x021D94D8
	ldrsh r6, [r4, #0x56]
	ldr r0, [r0, #8]
	ldrsh r5, [r4, #0x54]
	bl FUN_020BBF5C
	cmp r0, #0
	ldr r0, _020BA558 @ =0x021D94D8
	rsbne r5, r5, #0
	ldr r0, [r0, #8]
	bl FUN_020BBF70
	cmp r0, #0
	rsbne r6, r6, #0
	lsl r0, r5, #0xc
	lsl r1, r6, #0xc
	mov r2, #0
	bl FUN_020BA7D4
_020BA4F4:
	ldrh r0, [r4, #0x5a]
	tst r0, #4
	beq _020BA528
	ldrh r0, [r4, #0x58]
	ldr r2, _020BA55C @ =0x021094DC
	asr r0, r0, #4
	lsl r1, r0, #1
	add r0, r1, #1
	lsl r3, r1, #1
	lsl r1, r0, #1
	ldrsh r0, [r2, r3]
	ldrsh r1, [r2, r1]
	bl FUN_020BAA24
_020BA528:
	ldrh r0, [r4, #0x5a]
	tst r0, #2
	beq _020BA544
	ldr r0, [r4, #0x4c]
	ldr r1, [r4, #0x50]
	mov r2, #0x1000
	bl FUN_020BA8D0
_020BA544:
	add r0, r4, #0x34
	bl FUN_020BA1B0
	mov r0, #1
	bl FUN_020BA784
	pop {r4, r5, r6, pc}
	.align 2, 0
_020BA558: .4byte 0x021D94D8
_020BA55C: .4byte 0x021094DC
	arm_func_end FUN_020BA484

	arm_func_start FUN_020BA560
FUN_020BA560: @ 0x020BA560
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	ldr r0, _020BA764 @ =0x021D94D8
	ldr r1, [r0, #8]
	ldr r1, [r1, #0x7c]
	tst r1, #1
	bne _020BA6A0
	ldr r1, [r0, #0xc]
	lsl r0, r1, #0x10
	add r6, r1, #1
	cmp r6, #0x20
	lsr r5, r0, #0x10
	movlt r0, #1
	movge r0, #0
	cmp r0, #0
	beq _020BA640
	ldr r0, _020BA764 @ =0x021D94D8
	ldr r1, [r0, #4]
	cmp r1, #0
	beq _020BA5E4
	ldr r3, [r0, #0xc]
	mov r0, #0x18
	mul r8, r3, r0
	ldr r4, _020BA768 @ =0x021D9678
	ldr r1, _020BA76C @ =0x021D94E8
	mul r7, r6, r0
	ldr r2, [r4, r8]
	ldr r0, [r1, r3, lsl #2]
	ldr r3, _020BA770 @ =0x021D967C
	str r2, [r4, r7]
	ldr r2, [r3, r8]
	str r0, [r1, r6, lsl #2]
	str r2, [r3, r7]
	b _020BA638
_020BA5E4:
	ldr r4, [r0, #0xc]
	mov r0, #0x18
	mul lr, r4, r0
	ldr r1, _020BA774 @ =0x021D9668
	mul ip, r6, r0
	ldr r8, _020BA778 @ =0x021D9968
	add sl, r1, lr
	ldr r7, _020BA76C @ =0x021D94E8
	add sb, r1, ip
	ldm sl!, {r0, r1, r2, r3}
	stm sb!, {r0, r1, r2, r3}
	ldm sl, {r0, r1}
	stm sb, {r0, r1}
	add sb, r8, lr
	ldr r4, [r7, r4, lsl #2]
	add r8, r8, ip
	ldm sb!, {r0, r1, r2, r3}
	stm r8!, {r0, r1, r2, r3}
	str r4, [r7, r6, lsl #2]
	ldm sb, {r0, r1}
	stm r8, {r0, r1}
_020BA638:
	ldr r0, _020BA764 @ =0x021D94D8
	str r6, [r0, #0xc]
_020BA640:
	ldr r0, _020BA764 @ =0x021D94D8
	ldr r2, _020BA77C @ =0x021D9568
	ldr r0, [r0, #0xc]
	lsl r6, r5, #3
	lsl r0, r0, #0x10
	add r4, r2, r5, lsl #3
	lsr r3, r0, #0x10
	lsl r5, r3, #3
	ldrh r1, [r2, r6]
	ldrh r0, [r4, #2]
	add r3, r2, r3, lsl #3
	strh r1, [r2, r5]
	strh r0, [r3, #2]
	ldrh r2, [r4, #4]
	ldrh r0, [r4, #6]
	ldr r1, _020BA780 @ =0x021D956C
	strh r2, [r3, #4]
	strh r0, [r3, #6]
	ldrh r0, [r1, r6]
	cmp r0, #1
	moveq r0, #2
	strheq r0, [r1, r5]
	strhne r0, [r1, r5]
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_020BA6A0:
	ldr r0, [r0, #0xc]
	add r4, r0, #1
	cmp r4, #0x20
	movlt r0, #1
	movge r0, #0
	cmp r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	ldr r0, _020BA764 @ =0x021D94D8
	ldr r1, [r0, #4]
	cmp r1, #0
	beq _020BA704
	ldr r3, [r0, #0xc]
	mov r0, #0x18
	mul r7, r3, r0
	ldr r5, _020BA768 @ =0x021D9678
	ldr r1, _020BA76C @ =0x021D94E8
	mul r6, r4, r0
	ldr r2, [r5, r7]
	ldr r0, [r1, r3, lsl #2]
	ldr r3, _020BA770 @ =0x021D967C
	str r2, [r5, r6]
	ldr r2, [r3, r7]
	str r0, [r1, r4, lsl #2]
	str r2, [r3, r6]
	b _020BA758
_020BA704:
	ldr sb, [r0, #0xc]
	mov r0, #0x18
	mul lr, sb, r0
	ldr r1, _020BA774 @ =0x021D9668
	mul r8, r4, r0
	ldr ip, _020BA778 @ =0x021D9968
	add r5, r1, lr
	ldr r6, _020BA76C @ =0x021D94E8
	add r7, r1, r8
	ldm r5!, {r0, r1, r2, r3}
	stm r7!, {r0, r1, r2, r3}
	ldm r5, {r0, r1}
	ldr r5, [r6, sb, lsl #2]
	add lr, ip, lr
	stm r7, {r0, r1}
	add ip, ip, r8
	ldm lr!, {r0, r1, r2, r3}
	stm ip!, {r0, r1, r2, r3}
	ldm lr, {r0, r1}
	stm ip, {r0, r1}
	str r5, [r6, r4, lsl #2]
_020BA758:
	ldr r0, _020BA764 @ =0x021D94D8
	str r4, [r0, #0xc]
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0
_020BA764: .4byte 0x021D94D8
_020BA768: .4byte 0x021D9678
_020BA76C: .4byte 0x021D94E8
_020BA770: .4byte 0x021D967C
_020BA774: .4byte 0x021D9668
_020BA778: .4byte 0x021D9968
_020BA77C: .4byte 0x021D9568
_020BA780: .4byte 0x021D956C
	arm_func_end FUN_020BA560

	arm_func_start FUN_020BA784
FUN_020BA784: @ 0x020BA784
	ldr r0, _020BA7C8 @ =0x021D94D8
	ldr r0, [r0, #0xc]
	cmp r0, #0
	movle r0, #1
	movgt r0, #0
	cmp r0, #0
	bxne lr
	ldr r1, _020BA7C8 @ =0x021D94D8
	ldr r0, _020BA7CC @ =_021109DC
	ldr r3, [r1, #0xc]
	ldrh r2, [r0]
	sub r3, r3, #1
	str r3, [r1, #0xc]
	cmp r2, r3
	ldrgt r1, _020BA7D0 @ =0x0000FFFE
	strhgt r1, [r0]
	bx lr
	.align 2, 0
_020BA7C8: .4byte 0x021D94D8
_020BA7CC: .4byte _021109DC
_020BA7D0: .4byte 0x0000FFFE
	arm_func_end FUN_020BA784

	arm_func_start FUN_020BA7D4
FUN_020BA7D4: @ 0x020BA7D4
	push {r4, r5, r6, lr}
	sub sp, sp, #0x18
	ldr r3, _020BA8B8 @ =0x021D94D8
	mov r4, r2
	ldr r2, [r3, #4]
	cmp r2, #0
	beq _020BA834
	ldr r2, [r3, #0xc]
	mov r3, #0x18
	mul r6, r2, r3
	ldr r5, _020BA8BC @ =0x021D9678
	ldr r3, _020BA8C0 @ =0x021D94E8
	ldr ip, [r5, r6]
	ldr lr, _020BA8C4 @ =0x021D967C
	add r0, ip, r0
	str r0, [r5, r6]
	ldr r0, [r3, r2, lsl #2]
	ldr ip, [lr, r6]
	add r0, r0, r4
	add r1, ip, r1
	str r0, [r3, r2, lsl #2]
	add sp, sp, #0x18
	str r1, [lr, r6]
	pop {r4, r5, r6, pc}
_020BA834:
	mov ip, #0x1000
	mov r2, #0
	str r0, [sp, #0x10]
	str ip, [sp]
	str r2, [sp, #4]
	str r2, [sp, #8]
	str ip, [sp, #0xc]
	str r1, [sp, #0x14]
	ldr r1, [r3, #0xc]
	mov r0, #0x18
	mul r3, r1, r0
	ldr r2, _020BA8C8 @ =0x021D9668
	add r0, sp, #0
	add r1, r2, r3
	add r2, r2, r3
	bl FUN_020BAB58
	ldr r1, _020BA8B8 @ =0x021D94D8
	mov r0, #0x18
	ldr r1, [r1, #0xc]
	ldr r2, _020BA8CC @ =0x021D9968
	mul r3, r1, r0
	add r1, r2, r3
	add r0, sp, #0
	add r2, r2, r3
	bl FUN_020BAB58
	ldr r0, _020BA8B8 @ =0x021D94D8
	ldr r2, _020BA8C0 @ =0x021D94E8
	ldr r1, [r0, #0xc]
	ldr r0, [r2, r1, lsl #2]
	add r0, r0, r4
	str r0, [r2, r1, lsl #2]
	add sp, sp, #0x18
	pop {r4, r5, r6, pc}
	.align 2, 0
_020BA8B8: .4byte 0x021D94D8
_020BA8BC: .4byte 0x021D9678
_020BA8C0: .4byte 0x021D94E8
_020BA8C4: .4byte 0x021D967C
_020BA8C8: .4byte 0x021D9668
_020BA8CC: .4byte 0x021D9968
	arm_func_end FUN_020BA7D4

	arm_func_start FUN_020BA8D0
FUN_020BA8D0: @ 0x020BA8D0
	push {r3, r4, r5, lr}
	sub sp, sp, #0x18
	ldr r2, _020BAA0C @ =0x021D94D8
	mov lr, #0
	ldr r3, [r2, #0xc]
	mov r2, #0x18
	mul ip, r3, r2
	mov r5, r0
	mov r4, r1
	ldr r2, _020BAA10 @ =0x021D9668
	add r0, sp, #0
	add r1, r2, ip
	add r2, r2, ip
	str r5, [sp]
	str lr, [sp, #4]
	str lr, [sp, #8]
	str r4, [sp, #0xc]
	str lr, [sp, #0x10]
	str lr, [sp, #0x14]
	bl FUN_020BAB58
	mov r0, r5
	bl FUN_020CCBB0
	mov r1, #0
	str r0, [sp]
	mov r0, r4
	str r1, [sp, #4]
	str r1, [sp, #8]
	bl FUN_020CCBB0
	mov ip, #0
	ldr r1, _020BAA0C @ =0x021D94D8
	str r0, [sp, #0xc]
	ldr r1, [r1, #0xc]
	mov r0, #0x18
	mul r3, r1, r0
	ldr r2, _020BAA14 @ =0x021D9968
	add r0, sp, #0
	add r1, r2, r3
	add r2, r2, r3
	str ip, [sp, #0x10]
	str ip, [sp, #0x14]
	bl FUN_020BAB58
	ldr r0, _020BAA0C @ =0x021D94D8
	ldr r0, [r0, #4]
	cmp r0, #0
	bne _020BA99C
	ldr r1, _020BAA18 @ =_021109DC
	ldr r0, _020BAA1C @ =0x0000FFFE
	ldrh r1, [r1]
	cmp r1, r0
	movne r0, #1
	bne _020BA9A0
_020BA99C:
	mov r0, #0
_020BA9A0:
	cmp r0, #0
	bne _020BA9B8
	ldr r1, _020BAA0C @ =0x021D94D8
	ldr r0, _020BAA18 @ =_021109DC
	ldr r1, [r1, #0xc]
	strh r1, [r0]
_020BA9B8:
	ldr r1, _020BAA0C @ =0x021D94D8
	ldr r2, _020BAA20 @ =0x021D9568
	ldr r0, [r1, #0xc]
	lsl r0, r0, #0x10
	add ip, r2, r0, lsr #13
	ldrh r0, [ip, #4]
	cmp r0, #3
	addls pc, pc, r0, lsl #2
	b _020BAA04
_020BA9DC: @ jump table
	b _020BA9EC @ case 0
	b _020BAA04 @ case 1
	b _020BA9EC @ case 2
	b _020BA9EC @ case 3
_020BA9EC:
	ldrh r3, [r1, #2]
	mov r0, #1
	add r2, r3, #1
	strh r2, [r1, #2]
	strh r3, [ip, #2]
	strh r0, [ip, #4]
_020BAA04:
	add sp, sp, #0x18
	pop {r3, r4, r5, pc}
	.align 2, 0
_020BAA0C: .4byte 0x021D94D8
_020BAA10: .4byte 0x021D9668
_020BAA14: .4byte 0x021D9968
_020BAA18: .4byte _021109DC
_020BAA1C: .4byte 0x0000FFFE
_020BAA20: .4byte 0x021D9568
	arm_func_end FUN_020BA8D0

	arm_func_start FUN_020BAA24
FUN_020BAA24: @ 0x020BAA24
	push {r3, lr}
	sub sp, sp, #0x18
	ldr r2, _020BAB2C @ =0x021D94D8
	mov lr, #0
	ldr r3, [r2, #0xc]
	mov r2, #0x18
	mul ip, r3, r2
	rsb r3, r0, #0
	str r0, [sp, #4]
	ldr r2, _020BAB30 @ =0x021D9668
	add r0, sp, #0
	str r1, [sp]
	str r1, [sp, #0xc]
	add r1, r2, ip
	add r2, r2, ip
	str r3, [sp, #8]
	str lr, [sp, #0x10]
	str lr, [sp, #0x14]
	bl FUN_020BAB58
	ldr r1, _020BAB2C @ =0x021D94D8
	mov r0, #0x18
	ldr r1, [r1, #0xc]
	ldr r2, _020BAB34 @ =0x021D9968
	mul r3, r1, r0
	add r1, r2, r3
	add r0, sp, #0
	add r2, r2, r3
	bl FUN_020BAB58
	ldr r0, _020BAB2C @ =0x021D94D8
	ldr r0, [r0, #4]
	cmp r0, #0
	bne _020BAABC
	ldr r1, _020BAB38 @ =_021109DC
	ldr r0, _020BAB3C @ =0x0000FFFE
	ldrh r1, [r1]
	cmp r1, r0
	movne r0, #1
	bne _020BAAC0
_020BAABC:
	mov r0, #0
_020BAAC0:
	cmp r0, #0
	bne _020BAAD8
	ldr r1, _020BAB2C @ =0x021D94D8
	ldr r0, _020BAB38 @ =_021109DC
	ldr r1, [r1, #0xc]
	strh r1, [r0]
_020BAAD8:
	ldr r1, _020BAB2C @ =0x021D94D8
	ldr r2, _020BAB40 @ =0x021D9568
	ldr r0, [r1, #0xc]
	lsl r0, r0, #0x10
	add ip, r2, r0, lsr #13
	ldrh r0, [ip, #4]
	cmp r0, #3
	addls pc, pc, r0, lsl #2
	b _020BAB24
_020BAAFC: @ jump table
	b _020BAB0C @ case 0
	b _020BAB24 @ case 1
	b _020BAB0C @ case 2
	b _020BAB0C @ case 3
_020BAB0C:
	ldrh r3, [r1, #2]
	mov r0, #1
	add r2, r3, #1
	strh r2, [r1, #2]
	strh r3, [ip, #2]
	strh r0, [ip, #4]
_020BAB24:
	add sp, sp, #0x18
	pop {r3, pc}
	.align 2, 0
_020BAB2C: .4byte 0x021D94D8
_020BAB30: .4byte 0x021D9668
_020BAB34: .4byte 0x021D9968
_020BAB38: .4byte _021109DC
_020BAB3C: .4byte 0x0000FFFE
_020BAB40: .4byte 0x021D9568
	arm_func_end FUN_020BAA24

	arm_func_start FUN_020BAB44
FUN_020BAB44: @ 0x020BAB44
	ldr r0, [r0, #0x78]
	bx lr
	arm_func_end FUN_020BAB44

	arm_func_start FUN_020BAB4C
FUN_020BAB4C: @ 0x020BAB4C
	ldr ip, _020BAB54 @ =FUN_020BBEAC
	bx ip
	.align 2, 0
_020BAB54: .4byte FUN_020BBEAC
	arm_func_end FUN_020BAB4C

	arm_func_start FUN_020BAB58
FUN_020BAB58: @ 0x020BAB58
	push {r3, r4, r5, r6, r7, lr}
	sub sp, sp, #0x18
	ldr r4, [r0, #4]
	ldr r3, [r1, #8]
	mov ip, r2
	smull r6, r5, r4, r3
	ldr r4, [r0]
	ldr r3, [r1]
	cmp ip, r1
	smlal r6, r5, r4, r3
	lsr r3, r6, #0xc
	addeq r2, sp, #0
	orr r3, r3, r5, lsl #20
	str r3, [r2]
	ldr r4, [r0, #4]
	ldr r3, [r1, #0xc]
	ldr r5, [r0]
	smull r7, r6, r4, r3
	ldr r3, [r1, #4]
	add lr, sp, #0
	smlal r7, r6, r5, r3
	lsr r3, r7, #0xc
	orr r3, r3, r6, lsl #20
	str r3, [r2, #4]
	ldr r4, [r0, #0xc]
	ldr r3, [r1, #8]
	ldr r5, [r0, #8]
	smull r7, r6, r4, r3
	ldr r3, [r1]
	cmp r2, lr
	smlal r7, r6, r5, r3
	lsr r3, r7, #0xc
	orr r3, r3, r6, lsl #20
	str r3, [r2, #8]
	ldr r4, [r0, #0xc]
	ldr r3, [r1, #0xc]
	ldr r5, [r0, #8]
	smull r7, r6, r4, r3
	ldr r3, [r1, #4]
	addne sp, sp, #0x18
	smlal r7, r6, r5, r3
	lsr r3, r7, #0xc
	orr r3, r3, r6, lsl #20
	str r3, [r2, #0xc]
	ldr r4, [r0, #0x14]
	ldr r3, [r1, #8]
	ldr r5, [r0, #0x10]
	smull r7, r6, r4, r3
	ldr r3, [r1]
	ldr r4, [r1, #0x10]
	smlal r7, r6, r5, r3
	lsr r3, r7, #0xc
	orr r3, r3, r6, lsl #20
	add r3, r4, r3
	str r3, [r2, #0x10]
	ldr r4, [r0, #0x14]
	ldr r3, [r1, #0xc]
	ldr r5, [r0, #0x10]
	ldr r0, [r1, #4]
	smull r6, r3, r4, r3
	smlal r6, r3, r5, r0
	lsr r0, r6, #0xc
	ldr r1, [r1, #0x14]
	orr r0, r0, r3, lsl #20
	add r0, r1, r0
	str r0, [r2, #0x14]
	popne {r3, r4, r5, r6, r7, pc}
	ldm lr!, {r0, r1, r2, r3}
	stm ip!, {r0, r1, r2, r3}
	ldm lr, {r0, r1}
	stm ip, {r0, r1}
	add sp, sp, #0x18
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020BAB58

	arm_func_start FUN_020BAC7C
FUN_020BAC7C: @ 0x020BAC7C
	ldr r2, _020BAC90 @ =0x021DA470
	mov r1, #0x30
	ldr r2, [r2, #8]
	mla r0, r1, r0, r2
	bx lr
	.align 2, 0
_020BAC90: .4byte 0x021DA470
	arm_func_end FUN_020BAC7C

	arm_func_start FUN_020BAC94
FUN_020BAC94: @ 0x020BAC94
	push {r3, r4, r5, r6, r7, lr}
	ldr ip, _020BAD34 @ =0x021DA470
	mov r4, #0x30
	ldr ip, [ip, #8]
	mov r7, r1
	mla r4, r0, r4, ip
	mov r0, r4
	mov r6, r2
	mov r5, r3
	bl FUN_020B8928
	mvn r0, #0
	cmp r7, r0
	beq _020BACD8
	mov r0, r4
	mov r2, r7
	mov r1, #0
	bl FUN_020B8944
_020BACD8:
	mvn r0, #0
	cmp r6, r0
	beq _020BACF4
	mov r0, r4
	mov r2, r6
	mov r1, #1
	bl FUN_020B8944
_020BACF4:
	mvn r0, #0
	cmp r5, r0
	beq _020BAD10
	mov r0, r4
	mov r2, r5
	mov r1, #2
	bl FUN_020B8944
_020BAD10:
	ldr r1, [sp, #0x18]
	ldr r0, [sp, #0x1c]
	str r1, [r4, #0xc]
	ldr r1, [sp, #0x20]
	str r0, [r4, #0x10]
	ldr r0, [sp, #0x24]
	str r1, [r4, #0x14]
	str r0, [r4, #0x18]
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020BAD34: .4byte 0x021DA470
	arm_func_end FUN_020BAC94

	arm_func_start FUN_020BAD38
FUN_020BAD38: @ 0x020BAD38
	push {r3, r4, r5, r6, r7, lr}
	ldr r3, _020BAD98 @ =0x021DA470
	movs r6, r1
	mov r7, r0
	mov r5, #0
	stm r3, {r2, r6, r7}
	popeq {r3, r4, r5, r6, r7, pc}
	mov r4, r5
_020BAD58:
	mov r0, r7
	bl FUN_020B8928
	str r4, [r7, #0xc]
	str r4, [r7, #0x10]
	str r4, [r7, #0x14]
	str r4, [r7, #0x18]
	str r4, [r7, #0x1c]
	str r4, [r7, #0x20]
	str r4, [r7, #0x24]
	str r4, [r7, #0x28]
	add r5, r5, #1
	str r4, [r7, #0x2c]
	cmp r5, r6
	add r7, r7, #0x30
	blo _020BAD58
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020BAD98: .4byte 0x021DA470
	arm_func_end FUN_020BAD38

	arm_func_start FUN_020BAD9C
FUN_020BAD9C: @ 0x020BAD9C
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #8
	ldr r1, _020BAEB8 @ =0x021DA470
	mov r0, #0
	str r0, [sp, #4]
	ldr r0, [r1, #4]
	cmp r0, #0
	addls sp, sp, #8
	popls {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, [sp, #4]
	str r0, [sp]
_020BADC8:
	ldr r4, _020BAEB8 @ =0x021DA470
	ldr r0, [sp]
	ldr r1, [r4, #8]
	add r8, r1, r0
	ldr r0, [r8, #0x1c]
	cmp r0, #0
	beq _020BAE84
	mov r7, #0
	cmp r7, #3
	bge _020BAE7C
	ldr r5, _020BAEBC @ =0x02109328
	mov fp, r7
	mov r6, #1
_020BADFC:
	ldr r0, [r8, #0x24]
	mov r1, fp
	tst r0, r6, lsl r7
	beq _020BAE18
	ldr r0, [r8, #0x20]
	tst r0, r6, lsl r7
	movne r1, r6
_020BAE18:
	cmp r1, #0
	beq _020BAE70
	cmp r7, #0
	ldreq sl, [r8, #0x14]
	ldr sb, [r5, r7, lsl #2]
	mov r0, r8
	mov r1, r7
	ldrne sl, [r8, #0x10]
	bl FUN_020B894C
	ldr r2, [r8, #0x28]
	mov r1, r0
	mov r0, sb
	ldr r3, [r8, #0x2c]
	ldr sb, [r4]
	add r2, sl, r2
	blx sb
	cmp r0, #0
	beq _020BAE70
	mvn r0, r6, lsl r7
	ldr r1, [r8, #0x24]
	and r0, r1, r0
	str r0, [r8, #0x24]
_020BAE70:
	add r7, r7, #1
	cmp r7, #3
	blt _020BADFC
_020BAE7C:
	mov r0, #0
	str r0, [r8, #0x20]
_020BAE84:
	ldr r0, [sp, #4]
	ldr r1, _020BAEB8 @ =0x021DA470
	add r0, r0, #1
	str r0, [sp, #4]
	ldr r0, [sp]
	ldr r1, [r1, #4]
	add r0, r0, #0x30
	str r0, [sp]
	ldr r0, [sp, #4]
	cmp r0, r1
	blo _020BADC8
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020BAEB8: .4byte 0x021DA470
_020BAEBC: .4byte 0x02109328
	arm_func_end FUN_020BAD9C

	arm_func_start FUN_020BAEC0
FUN_020BAEC0: @ 0x020BAEC0
	push {r3, r4, r5, lr}
	mov r5, r1
	mov r4, r2
	bl FUN_020BAC7C
	mvn r1, #0
	str r1, [r0, #0x24]
	str r5, [r0, #0x28]
	str r4, [r0, #0x2c]
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020BAEC0

	arm_func_start FUN_020BAEE4
FUN_020BAEE4: @ 0x020BAEE4
	ldr r1, _020BAF38 @ =0x021DA470
	mov r0, #0
	ldr r3, [r1, #4]
	cmp r3, #0
	bls _020BAF30
	ldr ip, [r1, #8]
	mov r2, ip
_020BAF00:
	ldr r1, [r2, #0x1c]
	cmp r1, #1
	beq _020BAF20
	mov r1, #0x30
	mla r1, r0, r1, ip
	mov r2, #1
	str r2, [r1, #0x1c]
	bx lr
_020BAF20:
	add r0, r0, #1
	cmp r0, r3
	add r2, r2, #0x30
	blo _020BAF00
_020BAF30:
	mvn r0, #0
	bx lr
	.align 2, 0
_020BAF38: .4byte 0x021DA470
	arm_func_end FUN_020BAEE4

	arm_func_start FUN_020BAF3C
FUN_020BAF3C: @ 0x020BAF3C
	push {r4, lr}
	ldr r2, _020BAF84 @ =0x021DA470
	mov r1, #0x30
	ldr r2, [r2, #8]
	mla r4, r0, r1, r2
	mov r0, r4
	bl FUN_020B8928
	mov r0, #0
	str r0, [r4, #0xc]
	str r0, [r4, #0x10]
	str r0, [r4, #0x14]
	str r0, [r4, #0x18]
	str r0, [r4, #0x1c]
	str r0, [r4, #0x20]
	str r0, [r4, #0x24]
	str r0, [r4, #0x28]
	str r0, [r4, #0x2c]
	pop {r4, pc}
	.align 2, 0
_020BAF84: .4byte 0x021DA470
	arm_func_end FUN_020BAF3C

	arm_func_start FUN_020BAF88
FUN_020BAF88: @ 0x020BAF88
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #8
	mov r6, r0
	ldr r0, _020BB1C8 @ =0xC000C000
	ldm r6, {r4, r5}
	and r0, r4, r0
	and r4, r0, #0xc0000000
	lsr lr, r4, #0x1e
	and r0, r0, #0xc000
	lsl r5, r5, #0x16
	asr ip, r0, #0xe
	lsr r5, r5, #0x16
	ldr r4, _020BB1CC @ =0x02109310
	lsl r7, r5, #0x10
	ldr r0, _020BB1D0 @ =0x021092F8
	add r5, r4, ip, lsl #3
	lsl r8, lr, #1
	add r4, r0, ip, lsl #3
	ldrh r5, [r8, r5]
	ldr r0, [sp, #0x20]
	ldrh r4, [r8, r4]
	str r5, [r0, #0x10]
	mov r5, r1
	str r4, [r0, #0x14]
	ldr r8, [r5, #0x14]
	mov r4, r3
	cmp r8, #0
	lsr r1, r7, #0x10
	bne _020BB068
	ldr r3, [r5, #8]
	ldr r7, [r5]
	lsl r3, r3, #0x1a
	orr r2, r3, r2, lsr #3
	orr r2, r2, #0x40000000
	orr r2, r2, r7, lsl #20
	ldr r3, [r5, #4]
	ldr r7, [r5, #0x10]
	orr r3, r2, r3, lsl #23
	ldr r2, _020BB1D4 @ =0x040004A8
	orr r3, r3, r7, lsl #29
	str r3, [r2]
	ldr r2, [r5, #8]
	ldr r3, [r5]
	cmp r2, #4
	ldr r2, _020BB1D8 @ =0x02109344
	lsleq r1, r1, #0xf
	ldr r2, [r2, r3, lsl #2]
	lsreq r1, r1, #0x10
	sub r2, r2, #1
	and r2, r1, r2
	lsl r2, r2, #0xf
	str r2, [r0]
	ldr r2, [r5]
	asr r1, r1, r2
	lsl r1, r1, #0xf
	b _020BB0D0
_020BB068:
	and r3, r8, #0x700000
	asr r3, r3, #0x14
	add r7, r3, #5
	lsl r3, ip, #0x10
	add ip, r2, r1, lsl r7
	lsl r1, lr, #0x10
	lsr r8, r3, #0x10
	ldr r7, _020BB1DC @ =0x02109364
	ldr lr, [r5, #8]
	lsr r3, ip, #3
	orr ip, r3, lr, lsl #26
	ldr r2, _020BB1E0 @ =0x02109394
	lsr lr, r1, #0x10
	add r1, r2, r8, lsl #4
	add r3, r7, r8, lsl #4
	ldr r2, [r3, lr, lsl #2]
	orr r3, ip, #0x40000000
	orr r2, r3, r2, lsl #20
	ldr r1, [r1, lr, lsl #2]
	ldr r3, [r5, #0x10]
	orr r2, r2, r1, lsl #23
	ldr r1, _020BB1D4 @ =0x040004A8
	orr r2, r2, r3, lsl #29
	str r2, [r1]
	mov r1, #0
	str r1, [r0]
_020BB0D0:
	str r1, [r0, #4]
	ldr r2, [r0]
	ldr r1, [r0, #0x10]
	add r1, r2, r1, lsl #12
	str r1, [r0, #8]
	ldr r2, [r0, #4]
	ldr r1, [r0, #0x14]
	add r1, r2, r1, lsl #12
	str r1, [r0, #0xc]
	ldr r1, [r6]
	lsl r2, r1, #2
	lsl r1, r1, #3
	lsr ip, r2, #0x1f
	lsrs r3, r1, #0x1f
	beq _020BB11C
	ldr r2, [r0]
	ldr r1, [r0, #8]
	str r1, [r0]
	str r2, [r0, #8]
_020BB11C:
	cmp ip, #0
	beq _020BB134
	ldr r2, [r0, #4]
	ldr r1, [r0, #0xc]
	str r1, [r0, #4]
	str r2, [r0, #0xc]
_020BB134:
	ldr r1, _020BB1E4 @ =0x021DA47C
	ldr r7, [r1]
	cmp r7, #0
	beq _020BB15C
	str r3, [sp]
	add r1, r0, #4
	add r2, r0, #8
	add r3, r0, #0xc
	str ip, [sp, #4]
	blx r7
_020BB15C:
	ldr r0, [r6, #4]
	ldr r1, [r6]
	lsl r0, r0, #0x10
	lsr r0, r0, #0x1c
	lsl r3, r1, #0x12
	ldr r1, [r5, #0xc]
	lsl r0, r0, #0x10
	ldr r2, _020BB1E8 @ =0x0210933C
	lsr r3, r3, #0x1f
	cmp r1, #0
	lsr r0, r0, #0x10
	ldr r1, [r2, r3, lsl #2]
	lslne r0, r0, #9
	bne _020BB1A0
	cmp r1, #4
	moveq r0, #0
	lslne r0, r0, #5
_020BB1A0:
	cmp r1, #2
	moveq r2, #1
	movne r2, #0
	add r1, r4, r0
	rsb r0, r2, #4
	lsr r1, r1, r0
	ldr r0, _020BB1EC @ =0x040004AC
	str r1, [r0]
	add sp, sp, #8
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0
_020BB1C8: .4byte 0xC000C000
_020BB1CC: .4byte 0x02109310
_020BB1D0: .4byte 0x021092F8
_020BB1D4: .4byte 0x040004A8
_020BB1D8: .4byte 0x02109344
_020BB1DC: .4byte 0x02109364
_020BB1E0: .4byte 0x02109394
_020BB1E4: .4byte 0x021DA47C
_020BB1E8: .4byte 0x0210933C
_020BB1EC: .4byte 0x040004AC
	arm_func_end FUN_020BAF88

	arm_func_start FUN_020BB1F0
FUN_020BB1F0: @ 0x020BB1F0
	ldr r1, _020BB1FC @ =0x021DA47C
	str r0, [r1, #8]
	bx lr
	.align 2, 0
_020BB1FC: .4byte 0x021DA47C
	arm_func_end FUN_020BB1F0

	arm_func_start FUN_020BB200
FUN_020BB200: @ 0x020BB200
	ldr r0, _020BB210 @ =0x021DA47C
	mov r1, #0
	str r1, [r0, #4]
	bx lr
	.align 2, 0
_020BB210: .4byte 0x021DA47C
	arm_func_end FUN_020BB200

	arm_func_start FUN_020BB214
FUN_020BB214: @ 0x020BB214
	ldr r1, _020BB220 @ =_021109FC
	str r0, [r1]
	bx lr
	.align 2, 0
_020BB220: .4byte _021109FC
	arm_func_end FUN_020BB214

	arm_func_start FUN_020BB224
FUN_020BB224: @ 0x020BB224
	ldr r0, _020BB230 @ =_021109FC
	ldr r0, [r0]
	bx lr
	.align 2, 0
_020BB230: .4byte _021109FC
	arm_func_end FUN_020BB224

	arm_func_start FUN_020BB234
FUN_020BB234: @ 0x020BB234
	push {r4, r5, r6, r7, lr}
	sub sp, sp, #0x1c
	add ip, sp, #4
	mov r5, r1
	mov r4, r2
	mov r7, r3
	mov r6, r0
	ldr r1, [sp, #0x30]
	ldr r2, [sp, #0x34]
	ldr r3, [sp, #0x38]
	mov r0, r7
	str ip, [sp]
	bl FUN_020BAF88
	ldr r2, [r7]
	and r1, r2, #0x300
	cmp r1, #0x100
	cmpne r1, #0x300
	andne r0, r2, #0x30000000
	orrne r1, r1, r0
	cmp r1, #0x300
	bne _020BB2F8
	ldr r0, _020BB468 @ =0xC000C000
	ldr r3, _020BB46C @ =0x02109310
	and r2, r2, r0
	and r0, r2, #0xc0000000
	and r2, r2, #0xc000
	asr ip, r2, #0xe
	lsr lr, r0, #0x1e
	ldr r1, _020BB470 @ =0x021DA47C
	ldr r2, _020BB474 @ =0x021092F8
	ldr r0, [r1, #8]
	lsl lr, lr, #1
	cmp r0, #0
	ldrne r0, [r1, #4]
	add r3, r3, ip, lsl #3
	add r2, r2, ip, lsl #3
	ldrh ip, [lr, r3]
	ldrh r3, [lr, r2]
	addne r4, r0, r4, lsl #12
	add r2, r6, ip, asr #1
	add r0, r5, r3, asr #1
	ldr r1, _020BB478 @ =0x04000470
	lsl r2, r2, #0xc
	str r2, [r1]
	lsl r0, r0, #0xc
	lsleq r4, r4, #0xc
	str r0, [r1]
	str r4, [r1]
	b _020BB328
_020BB2F8:
	ldr r0, _020BB470 @ =0x021DA47C
	ldr r1, [r0, #8]
	cmp r1, #0
	ldrne r0, [r0, #4]
	ldr r1, _020BB478 @ =0x04000470
	addne r2, r0, r4, lsl #12
	lsl r0, r6, #0xc
	str r0, [r1]
	lsl r0, r5, #0xc
	lsleq r2, r4, #0xc
	str r0, [r1]
	str r2, [r1]
_020BB328:
	ldr r0, [sp, #0x14]
	ldr r2, [sp, #0x18]
	ldr r1, _020BB47C @ =0x0400046C
	lsl r0, r0, #0xc
	str r0, [r1]
	lsl r0, r2, #0xc
	str r0, [r1]
	mov r0, #0x1000
	str r0, [r1]
	mov r0, #1
	str r0, [r1, #0x94]
	ldr r0, [sp, #0x10]
	ldr r3, [sp, #4]
	lsl r0, r0, #8
	asr r2, r0, #0x10
	lsl r0, r3, #8
	lsl r2, r2, #0x10
	asr r4, r0, #0x10
	lsr r3, r2, #0x10
	lsl r2, r4, #0x10
	lsl r3, r3, #0x10
	orr r2, r3, r2, lsr #16
	mov r0, #0x10000
	str r2, [r1, #0x1c]
	str r0, [r1, #0x24]
	ldr r2, [sp, #0x10]
	ldr r4, [sp, #0xc]
	lsl r2, r2, #8
	asr r3, r2, #0x10
	lsl r2, r4, #8
	lsl r3, r3, #0x10
	asr r2, r2, #0x10
	lsr r3, r3, #0x10
	lsl r2, r2, #0x10
	lsl r3, r3, #0x10
	orr r2, r3, r2, lsr #16
	str r2, [r1, #0x1c]
	add r0, r0, #0x40
	str r0, [r1, #0x24]
	ldr r0, [sp, #8]
	ldr r3, [sp, #0xc]
	lsl r0, r0, #8
	asr r2, r0, #0x10
	lsl r0, r3, #8
	lsl r2, r2, #0x10
	asr r0, r0, #0x10
	lsr r2, r2, #0x10
	lsl r0, r0, #0x10
	lsl r2, r2, #0x10
	orr r0, r2, r0, lsr #16
	str r0, [r1, #0x1c]
	mov r0, #0x40
	str r0, [r1, #0x24]
	ldr r0, [sp, #8]
	ldr r3, [sp, #4]
	lsl r0, r0, #8
	asr r2, r0, #0x10
	lsl r0, r3, #8
	lsl r2, r2, #0x10
	asr r0, r0, #0x10
	lsr r2, r2, #0x10
	lsl r0, r0, #0x10
	lsl r2, r2, #0x10
	orr r0, r2, r0, lsr #16
	str r0, [r1, #0x1c]
	mov r0, #0
	str r0, [r1, #0x24]
	ldr r2, _020BB470 @ =0x021DA47C
	str r0, [r1, #0x98]
	ldr r0, [r2, #8]
	cmp r0, #0
	addeq sp, sp, #0x1c
	popeq {r4, r5, r6, r7, pc}
	ldr r0, _020BB480 @ =_021109FC
	ldr r1, [r2, #4]
	ldr r0, [r0]
	add r0, r1, r0
	str r0, [r2, #4]
	add sp, sp, #0x1c
	pop {r4, r5, r6, r7, pc}
	.align 2, 0
_020BB468: .4byte 0xC000C000
_020BB46C: .4byte 0x02109310
_020BB470: .4byte 0x021DA47C
_020BB474: .4byte 0x021092F8
_020BB478: .4byte 0x04000470
_020BB47C: .4byte 0x0400046C
_020BB480: .4byte _021109FC
	arm_func_end FUN_020BB234

	arm_func_start FUN_020BB484
FUN_020BB484: @ 0x020BB484
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x10
	ldr r4, [r1]
	ldr r3, _020BB728 @ =0x01FF0000
	and r3, r4, r3
	lsr r3, r3, #0x10
	lsl r3, r3, #0x10
	asr r3, r3, #0x10
	cmp r3, #0xff
	orrgt r3, r3, #0xff00
	lslgt r3, r3, #0x10
	asrgt r3, r3, #0x10
	lsl r3, r3, #0xc
	str r3, [sp, #8]
	ldr r3, [r1]
	and r3, r3, #0xff
	cmp r3, #0x7f
	orrgt r3, r3, #0xff00
	lslgt r3, r3, #0x10
	asrgt r3, r3, #0x10
	lsl r3, r3, #0xc
	str r3, [sp, #0xc]
	ldr r5, [r1]
	and r4, r5, #0x300
	cmp r4, #0x100
	cmpne r4, #0x300
	andne r3, r5, #0x30000000
	orrne r4, r4, r3
	cmp r4, #0x300
	bne _020BB548
	ldr r3, _020BB72C @ =0xC000C000
	ldr r4, _020BB730 @ =0x02109310
	and r3, r5, r3
	and r5, r3, #0xc0000000
	and r3, r3, #0xc000
	lsr r6, r5, #0x1e
	asr r5, r3, #0xe
	ldr r3, _020BB734 @ =0x021092F8
	lsl r6, r6, #1
	add r4, r4, r5, lsl #3
	add r3, r3, r5, lsl #3
	ldrh r5, [r6, r4]
	ldr r7, [sp, #8]
	ldrh r3, [r6, r3]
	ldr r4, [sp, #0xc]
	add r5, r7, r5, lsl #11
	add r3, r4, r3, lsl #11
	str r5, [sp, #8]
	str r3, [sp, #0xc]
_020BB548:
	ldr r6, [r0, #8]
	ldr r4, [sp, #0xc]
	add r3, sp, #8
	smull r4, r7, r6, r4
	cmp r3, r3
	addeq r3, sp, #0
	adds r8, r4, #0x1000
	ldr r5, [r0]
	ldr r4, [sp, #8]
	adc r6, r7, #0
	smlal r8, r6, r5, r4
	lsr r4, r8, #0xc
	orr r4, r4, r6, lsl #20
	str r4, [r3]
	ldr r6, [r0, #0xc]
	ldr r4, [sp, #0xc]
	ldr r5, [r0, #4]
	smull r4, r7, r6, r4
	adds r8, r4, #0x1000
	ldr r4, [sp, #8]
	adc r6, r7, #0
	smlal r8, r6, r5, r4
	lsr r5, r8, #0xc
	add r4, sp, #0
	orr r5, r5, r6, lsl #20
	str r5, [r3, #4]
	cmp r3, r4
	bne _020BB5C8
	ldr r4, [sp]
	ldr r3, [sp, #4]
	str r4, [sp, #8]
	str r3, [sp, #0xc]
_020BB5C8:
	ldr r3, _020BB738 @ =0x021DA498
	ldr r3, [r3]
	ldr r3, [r3, #4]
	cmp r3, #0
	beq _020BB610
	cmp r3, #2
	moveq r5, #0x300
	movne r5, #0x100
	ldr r4, [r1]
	ldr r3, _020BB73C @ =0xC1FFFCFF
	cmp r5, #0x100
	andeq r3, r4, r3
	orreq r3, r3, r5
	streq r3, [r1]
	beq _020BB610
	and r3, r4, r3
	orr r3, r3, r5
	str r3, [r1]
_020BB610:
	ldr r6, [r1]
	ldr r5, _020BB730 @ =0x02109310
	and r4, r6, #0x300
	cmp r4, #0x100
	cmpne r4, #0x300
	andne r3, r6, #0x30000000
	orrne r4, r4, r3
	ldr r3, _020BB72C @ =0xC000C000
	ldr r8, _020BB734 @ =0x021092F8
	and r3, r6, r3
	and r6, r3, #0xc0000000
	and r3, r3, #0xc000
	asr lr, r3, #0xe
	lsr r6, r6, #0x1e
	lsl r3, r6, #1
	add r5, r5, lr, lsl #3
	ldrh r5, [r3, r5]
	add lr, r8, lr, lsl #3
	ldrh r3, [r3, lr]
	asr ip, r5, #1
	lsl r5, ip, #0xc
	ldr r6, [r0]
	rsb r7, r5, #0
	mla r7, r6, ip, r7
	ldr r6, [r0, #8]
	asr r3, r3, #1
	mla r7, r6, r3, r7
	ldr lr, [sp, #8]
	cmp r4, #0x300
	add r6, lr, r7
	str r6, [sp, #8]
	lsl lr, r3, #0xc
	ldr r6, [r0, #4]
	rsb r7, lr, #0
	mla r7, r6, ip, r7
	ldr r0, [r0, #0xc]
	ldr r6, [sp, #0xc]
	mla r3, r0, r3, r7
	add r0, r6, r3
	str r0, [sp, #0xc]
	moveq r0, #1
	movne r0, #0
	cmp r0, #0
	beq _020BB6D8
	ldr r3, [sp, #8]
	ldr r0, [sp, #0xc]
	sub r3, r3, r5
	sub r0, r0, lr
	str r3, [sp, #8]
	str r0, [sp, #0xc]
_020BB6D8:
	ldr r4, [sp, #8]
	ldr r0, [r2]
	ldr r3, [sp, #0xc]
	add r4, r4, r0
	str r4, [sp, #8]
	ldr r0, [r2, #4]
	asr r4, r4, #0xc
	add r0, r3, r0
	str r0, [sp, #0xc]
	asr r2, r0, #0xc
	ldr r3, [r1]
	ldr r0, _020BB740 @ =0xFE00FF00
	and r2, r2, #0xff
	and r0, r3, r0
	lsl r3, r4, #0x17
	orr r0, r0, r2
	orr r0, r0, r3, lsr #7
	str r0, [r1]
	add sp, sp, #0x10
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0
_020BB728: .4byte 0x01FF0000
_020BB72C: .4byte 0xC000C000
_020BB730: .4byte 0x02109310
_020BB734: .4byte 0x021092F8
_020BB738: .4byte 0x021DA498
_020BB73C: .4byte 0xC1FFFCFF
_020BB740: .4byte 0xFE00FF00
	arm_func_end FUN_020BB484

	arm_func_start FUN_020BB744
FUN_020BB744: @ 0x020BB744
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x40
	ldr r2, _020BBB44 @ =0x021DA498
	mov r6, r0
	ldr r4, [r2]
	ldr r0, _020BBB44 @ =0x021DA498
	ldr r5, [r4, #0x2c]
	mov fp, r1
	cmp r5, #0
	ldreq r5, _020BBB48 @ =0x021093CC
	ldr r2, [r0]
	ldr r3, [r5, #0x10]
	str r3, [sp, #0x18]
	ldr r1, [r5, #0x14]
	str r1, [sp, #0x1c]
	ldr r0, [r6]
	sub r0, r3, r0
	str r0, [sp, #0x18]
	ldr r0, [r6, #4]
	sub r0, r1, r0
	str r0, [sp, #0x1c]
	ldr r1, [r2, #0x24]
	ldr r0, [r2, #0x10]
	cmp r1, #0
	str r0, [sp, #0xc]
	bne _020BB7C0
	ldr r0, [r2, #0x28]
	cmp r0, #0
	movne r0, #1
	strne r0, [sp]
	bne _020BB7C8
_020BB7C0:
	mov r0, #0
	str r0, [sp]
_020BB7C8:
	ldrh r0, [fp]
	mov r8, #0
	cmp r0, #0
	addls sp, sp, #0x40
	popls {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r0, #0x400
	str r0, [sp, #0x10]
	ldr r0, _020BBB4C @ =0x0000FFFE
	ldr r7, _020BBB44 @ =0x021DA498
	add r0, r0, #1
	str r0, [sp, #0x14]
	ldr r0, [sp, #0x10]
	rsb r0, r0, #0
	str r0, [sp, #0x10]
_020BB800:
	mov r0, #6
	mul r1, r8, r0
	ldr r2, [r7]
	mov r0, #1
	str r0, [r2, #0x30]
	ldr r0, [fp, #4]
	add r2, r0, r1
	ldrh r0, [r0, r1]
	strh r0, [r4, #0x38]
	ldrh r0, [r2, #2]
	strh r0, [r4, #0x3a]
	ldrh r0, [r2, #4]
	strh r0, [r4, #0x3c]
	ldr r3, [r6, #0x20]
	cmp r3, #0
	beq _020BB850
	ldr r0, [r7]
	mov r1, fp
	mov r2, r8
	blx r3
_020BB850:
	ldr r0, [r7]
	ldr r0, [r0, #0x30]
	cmp r0, #0
	beq _020BBB24
	ldr r0, [sp]
	ldr r1, [r4, #0x3c]
	cmp r0, #0
	ldr r0, [sp, #0x10]
	and r2, r1, r0
	ldr r0, [sp, #0xc]
	lsl r1, r1, #0x16
	add r1, r0, r1, lsr #22
	ldr r0, [sp, #0x10]
	and r0, r1, r0, lsr #22
	orr r0, r2, r0
	str r0, [r4, #0x3c]
	beq _020BB994
	ldr r0, [r4, #0x38]
	ldr lr, [r7]
	lsl r1, r0, #2
	lsl r0, r0, #3
	lsr r1, r1, #0x1f
	lsr r0, r0, #0x1f
	orr sl, r0, r1, lsl #1
	ldr sb, [lr, #0x28]
	ldr r1, [r6, #0x14]
	add r0, sb, sl, lsl #2
	add r0, r0, r1, lsl #1
	ldrh r1, [r0, #0xe]
	ldr r0, [sp, #0x14]
	str r1, [sp, #8]
	cmp r1, r0
	bne _020BB960
	cmp sl, #0
	bne _020BB8F0
	ldr r1, [lr, #0x20]
	mov r0, sb
	blx r1
	str r0, [sp, #8]
	b _020BB94C
_020BB8F0:
	add ip, sp, #0x20
	ldm sb, {r0, r1, r2, r3}
	stm ip, {r0, r1, r2, r3}
	tst sl, #1
	beq _020BB91C
	ldr r1, [sp, #0x20]
	ldr r0, [sp, #0x24]
	rsb r1, r1, #0
	str r1, [sp, #0x20]
	rsb r0, r0, #0
	str r0, [sp, #0x24]
_020BB91C:
	tst sl, #2
	beq _020BB93C
	ldr r1, [sp, #0x28]
	ldr r0, [sp, #0x2c]
	rsb r1, r1, #0
	str r1, [sp, #0x28]
	rsb r0, r0, #0
	str r0, [sp, #0x2c]
_020BB93C:
	ldr r1, [lr, #0x20]
	add r0, sp, #0x20
	blx r1
	str r0, [sp, #8]
_020BB94C:
	ldr r1, [r6, #0x14]
	add r0, sb, sl, lsl #2
	add r1, r0, r1, lsl #1
	ldr r0, [sp, #8]
	strh r0, [r1, #0xe]
_020BB960:
	ldr r1, [r5]
	add r0, sp, #0x30
	str r1, [sp, #0x30]
	ldr r2, [r5, #4]
	add r1, r4, #0x38
	str r2, [sp, #0x34]
	ldr r3, [r5, #8]
	add r2, sp, #0x18
	str r3, [sp, #0x38]
	ldr r3, [r5, #0xc]
	str r3, [sp, #0x3c]
	bl FUN_020BB484
	b _020BBAE4
_020BB994:
	ldr r0, _020BBB4C @ =0x0000FFFE
	str r0, [sp, #8]
	ldr r0, [r7]
	ldr r1, [r0, #0x24]
	cmp r1, #0
	beq _020BBA9C
	ldr r2, [r4, #0x38]
	ldr r1, _020BBB50 @ =0xC000C000
	lsl sl, r2, #3
	and sb, r2, r1
	bl FUN_020BBF5C
	eor r0, r0, sl, lsr #31
	ldr r1, [r4, #0x38]
	str r0, [sp, #4]
	ldr r0, [r7]
	lsl sl, r1, #2
	bl FUN_020BBF70
	eor r2, r0, sl, lsr #31
	ldr r0, [r4, #0x38]
	bic r1, r0, #0x10000000
	ldr r0, [sp, #4]
	orr r0, r1, r0, lsl #28
	bic r0, r0, #0x20000000
	orr r0, r0, r2, lsl #29
	str r0, [r4, #0x38]
	ldr r0, [r7]
	bl FUN_020BBF5C
	cmp r0, #0
	beq _020BBA4C
	and r1, sb, #0xc000
	asr r2, r1, #0xe
	ldr r1, _020BBB54 @ =0x02109310
	and r3, sb, #0xc0000000
	lsr r3, r3, #0x1e
	add r2, r1, r2, lsl #3
	lsl r3, r3, #1
	ldr r0, [r4, #0x38]
	ldr r1, _020BBB58 @ =0xFE00FFFF
	ldrh r2, [r3, r2]
	and r1, r0, r1
	lsl r0, r0, #7
	add r0, r2, r0, lsr #23
	rsb r0, r0, #0
	lsl r0, r0, #0x17
	orr r0, r1, r0, lsr #7
	str r0, [r4, #0x38]
_020BBA4C:
	ldr r0, [r7]
	bl FUN_020BBF70
	cmp r0, #0
	beq _020BBA9C
	and r1, sb, #0xc000
	asr r3, r1, #0xe
	and r1, sb, #0xc0000000
	lsr r1, r1, #0x1e
	lsl r2, r1, #1
	ldr r1, _020BBB5C @ =0x021092F8
	ldr r0, [r4, #0x38]
	add r1, r1, r3, lsl #3
	ldrh r1, [r2, r1]
	bic r2, r0, #0xff
	lsl r0, r0, #0x18
	add r0, r1, r0, lsr #24
	rsb r0, r0, #0
	and r0, r0, #0xff
	orr r0, r2, r0
	str r0, [r4, #0x38]
_020BBA9C:
	ldr r2, [r4, #0x38]
	ldr r0, _020BBB58 @ =0xFE00FFFF
	ldr r1, [sp, #0x18]
	and r3, r2, r0
	lsl r2, r2, #7
	asr r0, r1, #0xc
	add r0, r0, r2, lsr #23
	lsl r0, r0, #0x17
	orr r0, r3, r0, lsr #7
	str r0, [r4, #0x38]
	bic r2, r0, #0xff
	lsl r1, r0, #0x18
	ldr r0, [sp, #0x1c]
	asr r0, r0, #0xc
	add r0, r0, r1, lsr #24
	and r0, r0, #0xff
	orr r0, r2, r0
	str r0, [r4, #0x38]
_020BBAE4:
	ldr r3, [r7]
	ldr r1, [sp, #8]
	ldr r3, [r3, #0x1c]
	add r0, r4, #0x38
	mov r2, #0
	blx r3
	cmp r0, #1
	addne sp, sp, #0x40
	popne {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r3, [r6, #0x24]
	cmp r3, #0
	beq _020BBB24
	ldr r0, [r7]
	mov r1, fp
	mov r2, r8
	blx r3
_020BBB24:
	add r0, r8, #1
	lsl r0, r0, #0x10
	lsr r8, r0, #0x10
	ldrh r1, [fp]
	cmp r1, r0, lsr #16
	bhi _020BB800
	add sp, sp, #0x40
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020BBB44: .4byte 0x021DA498
_020BBB48: .4byte 0x021093CC
_020BBB4C: .4byte 0x0000FFFE
_020BBB50: .4byte 0xC000C000
_020BBB54: .4byte 0x02109310
_020BBB58: .4byte 0xFE00FFFF
_020BBB5C: .4byte 0x021092F8
	arm_func_end FUN_020BB744

	arm_func_start FUN_020BBB60
FUN_020BBB60: @ 0x020BBB60
	push {r3, r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0xc
	ldr r1, _020BBD94 @ =0x021DA498
	mov r7, r0
	ldr r0, [r1]
	add r0, r0, #0x40
	bl FUN_020CF510
	ldr r0, _020BBD94 @ =0x021DA498
	ldr r0, [r0]
	ldr r1, [r0, #0x24]
	cmp r1, #0
	beq _020BBD24
	ldr r2, [r7]
	ldr r1, _020BBD98 @ =0xC000C000
	and r4, r2, r1
	bl FUN_020BBF5C
	cmp r0, #0
	ldr r0, [r7]
	beq _020BBBF0
	lsl r0, r0, #7
	lsr r3, r0, #0x17
	and r2, r4, #0xc000
	and r1, r4, #0xc0000000
	lsr r1, r1, #0x1e
	ldr r0, _020BBD9C @ =0x02109310
	asr r2, r2, #0xe
	lsl r1, r1, #1
	add r0, r0, r2, lsl #3
	cmp r3, #0xff
	ldrh r1, [r1, r0]
	orrgt r0, r3, #0xff00
	lslgt r0, r0, #0x10
	asrgt r3, r0, #0x10
	add r0, r3, r1
	rsb r0, r0, #0
	b _020BBC08
_020BBBF0:
	lsl r0, r0, #7
	lsr r0, r0, #0x17
	cmp r0, #0xff
	orrgt r0, r0, #0xff00
	lslgt r0, r0, #0x10
	asrgt r0, r0, #0x10
_020BBC08:
	lsl r0, r0, #0x10
	lsr r1, r0, #0x10
	ldr r0, _020BBD94 @ =0x021DA498
	lsl r1, r1, #0x10
	ldr r0, [r0]
	asr r5, r1, #0x10
	bl FUN_020BBF70
	cmp r0, #0
	ldr r0, [r7]
	beq _020BBC74
	lsl r0, r0, #0x18
	lsr r3, r0, #0x18
	and r2, r4, #0xc000
	and r1, r4, #0xc0000000
	lsr r1, r1, #0x1e
	ldr r0, _020BBDA0 @ =0x021092F8
	asr r2, r2, #0xe
	lsl r1, r1, #1
	add r0, r0, r2, lsl #3
	cmp r3, #0x7f
	ldrh r1, [r1, r0]
	orrgt r0, r3, #0xff00
	lslgt r0, r0, #0x10
	asrgt r3, r0, #0x10
	add r0, r3, r1
	rsb r0, r0, #0
	b _020BBC8C
_020BBC74:
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	cmp r0, #0x7f
	orrgt r0, r0, #0xff00
	lslgt r0, r0, #0x10
	asrgt r0, r0, #0x10
_020BBC8C:
	lsl r0, r0, #0x10
	lsr r4, r0, #0x10
	ldr r0, _020BBD94 @ =0x021DA498
	ldr r1, [r7]
	ldr r0, [r0]
	lsl r6, r1, #3
	bl FUN_020BBF5C
	ldr r2, [r7]
	ldr r1, _020BBD94 @ =0x021DA498
	eor r6, r0, r6, lsr #31
	ldr r0, [r1]
	lsl r8, r2, #2
	bl FUN_020BBF70
	ldr r1, [r7]
	eor r3, r0, r8, lsr #31
	bic r2, r1, #0x10000000
	orr r2, r2, r6, lsl #28
	bic r2, r2, #0x20000000
	lsl r1, r4, #0x10
	orr r3, r2, r3, lsl #29
	str r2, [r7]
	str r3, [r7]
	ldr r2, _020BBD94 @ =0x021DA498
	mov r0, r5
	ldr r5, [r2]
	asr r1, r1, #0x10
	ldr r4, [r5, #8]
	mov r3, r7
	add r4, r4, #0xc
	str r4, [sp]
	ldr r4, [r5, #0x14]
	mvn r2, #0
	str r4, [sp, #4]
	ldr r4, [r5, #0x18]
	str r4, [sp, #8]
	bl FUN_020BB234
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, pc}
_020BBD24:
	ldr r2, _020BBD94 @ =0x021DA498
	ldr r0, [r7]
	ldr r5, [r2]
	lsl r0, r0, #7
	ldr r1, [r7]
	ldr r4, [r5, #8]
	lsr r0, r0, #0x17
	cmp r0, #0xff
	orrgt r0, r0, #0xff00
	lsl r1, r1, #0x18
	add r4, r4, #0xc
	lslgt r0, r0, #0x10
	str r4, [sp]
	ldr r4, [r5, #0x14]
	lsr r1, r1, #0x18
	asrgt r0, r0, #0x10
	cmp r1, #0x7f
	orrgt r1, r1, #0xff00
	lslgt r1, r1, #0x10
	str r4, [sp, #4]
	ldr r4, [r5, #0x18]
	asrgt r1, r1, #0x10
	mov r3, r7
	mvn r2, #0
	str r4, [sp, #8]
	bl FUN_020BB234
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, pc}
	.align 2, 0
_020BBD94: .4byte 0x021DA498
_020BBD98: .4byte 0xC000C000
_020BBD9C: .4byte 0x02109310
_020BBDA0: .4byte 0x021092F8
	arm_func_end FUN_020BBB60

	arm_func_start FUN_020BBDA4
FUN_020BBDA4: @ 0x020BBDA4
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	mov sb, r1
	ldr r5, _020BBE68 @ =0x021DA498
	ldrh r1, [sb]
	ldr r7, [r5]
	mov sl, r0
	mov r8, #0
	cmp r1, #0
	popls {r4, r5, r6, r7, r8, sb, sl, pc}
	mov r6, #1
	mov r4, #6
_020BBDD0:
	mul r1, r8, r4
	ldr r0, [r5]
	str r6, [r0, #0x30]
	ldr r2, [sb, #4]
	ldrh r0, [r2, r1]
	add r1, r2, r1
	strh r0, [r7, #0x38]
	ldrh r0, [r1, #2]
	strh r0, [r7, #0x3a]
	ldrh r0, [r1, #4]
	strh r0, [r7, #0x3c]
	ldr r3, [sl, #0x20]
	cmp r3, #0
	beq _020BBE18
	ldr r0, [r5]
	mov r1, sb
	mov r2, r8
	blx r3
_020BBE18:
	ldr r0, [r5]
	ldr r0, [r0, #0x30]
	cmp r0, #0
	beq _020BBE30
	add r0, r7, #0x38
	bl FUN_020BBB60
_020BBE30:
	ldr r3, [sl, #0x24]
	cmp r3, #0
	beq _020BBE4C
	ldr r0, [r5]
	mov r1, sb
	mov r2, r8
	blx r3
_020BBE4C:
	ldrh r1, [sb]
	add r0, r8, #1
	lsl r0, r0, #0x10
	cmp r1, r0, lsr #16
	lsr r8, r0, #0x10
	bhi _020BBDD0
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0
_020BBE68: .4byte 0x021DA498
	arm_func_end FUN_020BBDA4

	arm_func_start FUN_020BBE6C
FUN_020BBE6C: @ 0x020BBE6C
	push {r4, lr}
	mov r4, r0
	mov r1, r4
	mov r0, #0
	mov r2, #0x70
	bl FUN_020D4790
	mov r1, #0
	str r1, [r4]
	mov r0, #2
	stmib r4, {r0, r1}
	str r1, [r4, #0xc]
	str r1, [r4, #0x24]
	mov r0, #1
	str r0, [r4, #0x30]
	str r1, [r4, #0x28]
	pop {r4, pc}
	arm_func_end FUN_020BBE6C

	arm_func_start FUN_020BBEAC
FUN_020BBEAC: @ 0x020BBEAC
	str r1, [r0, #8]
	str r2, [r0, #0xc]
	bx lr
	arm_func_end FUN_020BBEAC

	arm_func_start FUN_020BBEB8
FUN_020BBEB8: @ 0x020BBEB8
	str r1, [r0, #0x1c]
	str r2, [r0, #0x20]
	bx lr
	arm_func_end FUN_020BBEB8

	arm_func_start FUN_020BBEC4
FUN_020BBEC4: @ 0x020BBEC4
	str r1, [r0, #4]
	bx lr
	arm_func_end FUN_020BBEC4

	arm_func_start FUN_020BBECC
FUN_020BBECC: @ 0x020BBECC
	ldr r1, _020BBF30 @ =0x021DA498
	mov r3, #0
	ldr ip, [r1]
	mov r1, #0x1000
	str r0, [ip, #0x2c]
	ldr r2, [r0]
	str r2, [ip, #0x40]
	ldr r2, [r0, #4]
	str r2, [ip, #0x44]
	str r3, [ip, #0x48]
	ldr r2, [r0, #8]
	str r2, [ip, #0x4c]
	ldr r2, [r0, #0xc]
	str r2, [ip, #0x50]
	str r3, [ip, #0x54]
	str r3, [ip, #0x58]
	str r3, [ip, #0x5c]
	str r1, [ip, #0x60]
	ldr r1, [r0, #0x10]
	str r1, [ip, #0x64]
	ldr r0, [r0, #0x14]
	str r0, [ip, #0x68]
	ldr r0, [ip, #0x34]
	str r0, [ip, #0x6c]
	bx lr
	.align 2, 0
_020BBF30: .4byte 0x021DA498
	arm_func_end FUN_020BBECC

	arm_func_start FUN_020BBF34
FUN_020BBF34: @ 0x020BBF34
	ldr r2, _020BBF48 @ =0x021DA498
	ldr r2, [r2]
	str r0, [r2, #0x2c]
	str r1, [r2, #0x28]
	bx lr
	.align 2, 0
_020BBF48: .4byte 0x021DA498
	arm_func_end FUN_020BBF34

	arm_func_start FUN_020BBF4C
FUN_020BBF4C: @ 0x020BBF4C
	str r1, [r0, #0x34]
	bx lr
	arm_func_end FUN_020BBF4C

	arm_func_start FUN_020BBF54
FUN_020BBF54: @ 0x020BBF54
	str r1, [r0]
	bx lr
	arm_func_end FUN_020BBF54

	arm_func_start FUN_020BBF5C
FUN_020BBF5C: @ 0x020BBF5C
	ldr r0, [r0, #0x24]
	tst r0, #1
	movne r0, #1
	moveq r0, #0
	bx lr
	arm_func_end FUN_020BBF5C

	arm_func_start FUN_020BBF70
FUN_020BBF70: @ 0x020BBF70
	ldr r0, [r0, #0x24]
	tst r0, #2
	movne r0, #1
	moveq r0, #0
	bx lr
	arm_func_end FUN_020BBF70

	arm_func_start FUN_020BBF84
FUN_020BBF84: @ 0x020BBF84
	cmp r1, #0
	ldr r1, [r0, #0x24]
	orrne r1, r1, #1
	biceq r1, r1, #1
	str r1, [r0, #0x24]
	ldr r1, [r0, #0x24]
	cmp r2, #0
	orrne r1, r1, #2
	biceq r1, r1, #2
	str r1, [r0, #0x24]
	bx lr
	arm_func_end FUN_020BBF84

	arm_func_start FUN_020BBFB0
FUN_020BBFB0: @ 0x020BBFB0
	push {r3, r4, r5, lr}
	ldr r2, _020BC0B4 @ =0x021DA498
	mov r4, r0
	str r4, [r2]
	ldr r0, [r4]
	ldr r5, [r0, #0x14]
	cmp r5, #0
	bne _020BC068
	ldr lr, _020BC0B8 @ =0x04000440
	mov r1, #0
	str r1, [lr]
	str r1, [lr, #4]
	ldr ip, [r4]
	mov r0, #1
	ldm ip, {r3, ip}
	rsb r3, r3, #0
	str r3, [lr, #0x30]
	rsb r3, ip, #0
	str r3, [lr, #0x30]
	str r1, [lr, #0x30]
	str r0, [lr]
	ldr r0, [r2]
	ldr r5, [r0, #8]
	mov r0, r5
	bl FUN_020B8034
	cmp r0, #0
	moveq r0, #0
	beq _020BC02C
	mov r0, r5
	mov r1, #0
	bl FUN_020B802C
_020BC02C:
	ldr r1, _020BC0B4 @ =0x021DA498
	str r0, [r4, #0x14]
	ldr r0, [r1]
	mov r1, #0
	ldr r5, [r0, #0xc]
	mov r0, r5
	bl FUN_020B8084
	cmp r0, #0
	moveq r0, #0
	beq _020BC060
	mov r0, r5
	mov r1, #0
	bl FUN_020B8078
_020BC060:
	str r0, [r4, #0x18]
	pop {r3, r4, r5, pc}
_020BC068:
	ldr r4, [r4, #8]
	mov r1, r5
	mov r0, r4
	bl FUN_020B8034
	cmp r0, #0
	moveq r1, #0
	beq _020BC0A4
	mov r0, r4
	mov r1, r5
	bl FUN_020B802C
	ldr r1, [r4, #0x20]
	and r1, r1, #0x700000
	asr r1, r1, #0x14
	add r1, r1, #5
	lsr r1, r0, r1
_020BC0A4:
	ldr r0, _020BC0B4 @ =0x021DA498
	ldr r0, [r0]
	str r1, [r0, #0x10]
	pop {r3, r4, r5, pc}
	.align 2, 0
_020BC0B4: .4byte 0x021DA498
_020BC0B8: .4byte 0x04000440
	arm_func_end FUN_020BBFB0

	arm_func_start FUN_020BC0BC
FUN_020BC0BC: @ 0x020BC0BC
	ldr r0, _020BC118 @ =0x021DA498
	ldr r3, [r0]
	ldr r1, [r3]
	ldr r1, [r1, #0x14]
	cmp r1, #0
	bne _020BC0F0
	ldr r1, _020BC11C @ =0x04000440
	mov r0, #0
	str r0, [r1]
	mov r0, #1
	str r0, [r1, #8]
	str r0, [r1]
	b _020BC108
_020BC0F0:
	mov r2, #0
	str r2, [r3, #0x10]
	ldr r1, [r0]
	str r2, [r1, #0x2c]
	ldr r0, [r0]
	str r2, [r0, #0x28]
_020BC108:
	ldr r0, _020BC118 @ =0x021DA498
	mov r1, #0
	str r1, [r0]
	bx lr
	.align 2, 0
_020BC118: .4byte 0x021DA498
_020BC11C: .4byte 0x04000440
	arm_func_end FUN_020BC0BC

	arm_func_start FUN_020BC120
FUN_020BC120: @ 0x020BC120
	push {r3, r4, r5, lr}
	ldr r1, _020BC1D0 @ =0x021DA498
	mov r5, r0
	ldr r2, [r1]
	ldr r4, [r2]
	ldr r0, [r4, #0x10]
	cmp r0, #0
	popeq {r3, r4, r5, pc}
	mov r0, #1
	str r0, [r2, #0x30]
	ldr r2, [r4, #0x18]
	cmp r2, #0
	beq _020BC160
	ldr r0, [r1]
	mov r1, r5
	blx r2
_020BC160:
	ldr r0, _020BC1D0 @ =0x021DA498
	ldr r0, [r0]
	ldr r0, [r0, #0x30]
	cmp r0, #0
	beq _020BC1B0
	ldr r0, [r4, #0x14]
	cmp r0, #3
	addls pc, pc, r0, lsl #2
	b _020BC1B0
_020BC184: @ jump table
	b _020BC194 @ case 0
	b _020BC1A4 @ case 1
	b _020BC1A4 @ case 2
	b _020BC1B0 @ case 3
_020BC194:
	mov r0, r4
	mov r1, r5
	bl FUN_020BBDA4
	b _020BC1B0
_020BC1A4:
	mov r0, r4
	mov r1, r5
	bl FUN_020BB744
_020BC1B0:
	ldr r2, [r4, #0x1c]
	cmp r2, #0
	popeq {r3, r4, r5, pc}
	ldr r0, _020BC1D0 @ =0x021DA498
	mov r1, r5
	ldr r0, [r0]
	blx r2
	pop {r3, r4, r5, pc}
	.align 2, 0
_020BC1D0: .4byte 0x021DA498
	arm_func_end FUN_020BC120

	arm_func_start FUN_020BC1D4
FUN_020BC1D4: @ 0x020BC1D4
	push {r4, r5, r6, lr}
	ldr r2, _020BC2B8 @ =0x021DA498
	mov r6, r0
	ldr r3, [r2]
	mov r4, r1
	ldr r5, [r3]
	ldr r0, [r5, #0x10]
	cmp r0, #0
	popeq {r4, r5, r6, pc}
	mov r0, #1
	str r0, [r3, #0x30]
	ldr r3, [r5, #0x18]
	cmp r3, #0
	beq _020BC218
	ldr r0, [r2]
	mov r1, r6
	blx r3
_020BC218:
	ldr r0, _020BC2B8 @ =0x021DA498
	ldr r0, [r0]
	ldr r0, [r0, #0x30]
	cmp r0, #0
	beq _020BC298
	mvn r0, #0
	cmp r4, r0
	beq _020BC25C
	mov r0, r4
	ldr r4, [r5, #0x14]
	bl FUN_020BAC7C
	mov r3, #1
	mvn r1, r3, lsl r4
	ldr r2, [r0, #0x20]
	and r1, r2, r1
	orr r1, r1, r3, lsl r4
	str r1, [r0, #0x20]
_020BC25C:
	ldr r0, [r5, #0x14]
	cmp r0, #3
	addls pc, pc, r0, lsl #2
	b _020BC298
_020BC26C: @ jump table
	b _020BC27C @ case 0
	b _020BC28C @ case 1
	b _020BC28C @ case 2
	b _020BC298 @ case 3
_020BC27C:
	mov r0, r5
	mov r1, r6
	bl FUN_020BBDA4
	b _020BC298
_020BC28C:
	mov r0, r5
	mov r1, r6
	bl FUN_020BB744
_020BC298:
	ldr r2, [r5, #0x1c]
	cmp r2, #0
	popeq {r4, r5, r6, pc}
	ldr r0, _020BC2B8 @ =0x021DA498
	mov r1, r6
	ldr r0, [r0]
	blx r2
	pop {r4, r5, r6, pc}
	.align 2, 0
_020BC2B8: .4byte 0x021DA498
	arm_func_end FUN_020BC1D4

	arm_func_start FUN_020BC2BC
FUN_020BC2BC: @ 0x020BC2BC
	push {r3, lr}
	ldrh r3, [r0, #4]
	ldr r2, _020BC380 @ =0x0000FFFF
	cmp r3, #0
	beq _020BC2E4
	cmp r3, #1
	beq _020BC300
	cmp r3, #2
	beq _020BC314
	b _020BC378
_020BC2E4:
	ldrh r2, [r0]
	ldrh r3, [r0, #0xc]
	sub r0, r1, r2
	add r0, r3, r0
	lsl r0, r0, #0x10
	lsr r2, r0, #0x10
	b _020BC378
_020BC300:
	ldrh r2, [r0]
	sub r1, r1, r2
	add r0, r0, r1, lsl #1
	ldrh r2, [r0, #0xc]
	b _020BC378
_020BC314:
	ldrh r3, [r0, #0xc]
	add ip, r0, #0xe
	sub r0, r3, #1
	add lr, ip, r0, lsl #2
	cmp ip, lr
	bhi _020BC378
_020BC32C:
	sub r3, lr, ip
	asr r0, r3, #1
	add r0, r3, r0, lsr #30
	asr r0, r0, #2
	add r0, r0, r0, lsr #31
	asr r3, r0, #1
	lsl r0, r3, #2
	ldrh r0, [ip, r0]
	add r3, ip, r3, lsl #2
	cmp r0, r1
	addlo ip, r3, #4
	blo _020BC370
	cmp r1, r0
	sublo lr, r3, #4
	blo _020BC370
	ldrh r2, [r3, #2]
	b _020BC378
_020BC370:
	cmp ip, lr
	bls _020BC32C
_020BC378:
	mov r0, r2
	pop {r3, pc}
	.align 2, 0
_020BC380: .4byte 0x0000FFFF
	arm_func_end FUN_020BC2BC

	arm_func_start FUN_020BC384
FUN_020BC384: @ 0x020BC384
	push {r4, lr}
	mov r4, r0
	mov r0, r1
	mov r1, r4
	bl FUN_020BDD04
	ldr r0, _020BC3A4 @ =FUN_020BDF94
	str r0, [r4, #4]
	pop {r4, pc}
	.align 2, 0
_020BC3A4: .4byte FUN_020BDF94
	arm_func_end FUN_020BC384

	arm_func_start FUN_020BC3A8
FUN_020BC3A8: @ 0x020BC3A8
	push {r3, lr}
	ldr r0, [r0]
	ldr r0, [r0, #0x10]
	cmp r0, #0
	beq _020BC3E4
_020BC3BC:
	ldrh r2, [r0]
	cmp r2, r1
	ldrhls r2, [r0, #2]
	cmpls r1, r2
	bhi _020BC3D8
	bl FUN_020BC2BC
	pop {r3, pc}
_020BC3D8:
	ldr r0, [r0, #8]
	cmp r0, #0
	bne _020BC3BC
_020BC3E4:
	ldr r0, _020BC3EC @ =0x0000FFFF
	pop {r3, pc}
	.align 2, 0
_020BC3EC: .4byte 0x0000FFFF
	arm_func_end FUN_020BC3A8

	arm_func_start FUN_020BC3F0
FUN_020BC3F0: @ 0x020BC3F0
	ldr ip, [r0]
	ldr r3, [ip, #0xc]
	cmp r3, #0
	beq _020BC434
_020BC400:
	ldrh r2, [r3]
	cmp r2, r1
	ldrhls r0, [r3, #2]
	cmpls r1, r0
	bhi _020BC428
	sub r0, r1, r2
	add r1, r3, #8
	add r0, r0, r0, lsl #1
	add r0, r1, r0
	bx lr
_020BC428:
	ldr r3, [r3, #4]
	cmp r3, #0
	bne _020BC400
_020BC434:
	add r0, ip, #4
	bx lr
	arm_func_end FUN_020BC3F0

	arm_func_start FUN_020BC43C
FUN_020BC43C: @ 0x020BC43C
	push {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #4
	mov r8, r0
	str r2, [sp]
	ldr r5, [r8, #4]
	add r0, sp, #0
	mov r7, r1
	mov r6, r3
	mov r4, #0
	blx r5
	movs r1, r0
	beq _020BC4B8
	ldr sb, _020BC4E4 @ =0x0000FFFF
	add sl, sp, #0
_020BC474:
	cmp r1, #0xa
	beq _020BC4B8
	mov r0, r8
	bl FUN_020BC3A8
	mov r1, r0
	cmp r1, sb
	ldreq r0, [r8]
	ldrheq r1, [r0, #2]
	mov r0, r8
	bl FUN_020BC3F0
	ldrsb r1, [r0, #2]
	mov r0, sl
	add r1, r7, r1
	add r4, r4, r1
	blx r5
	movs r1, r0
	bne _020BC474
_020BC4B8:
	cmp r6, #0
	beq _020BC4D0
	cmp r1, #0xa
	ldreq r0, [sp]
	movne r0, #0
	str r0, [r6]
_020BC4D0:
	cmp r4, #0
	subgt r4, r4, r7
	mov r0, r4
	add sp, sp, #4
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0
_020BC4E4: .4byte 0x0000FFFF
	arm_func_end FUN_020BC43C

	arm_func_start FUN_020BC4E8
FUN_020BC4E8: @ 0x020BC4E8
	push {r3, r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0xc
	add r4, sp, #0
	mov r3, #0
	mov r8, r0
	str r2, [sp, #8]
	str r3, [r4]
	str r3, [r4, #4]
	ldr r7, [r8, #4]
	add r0, sp, #8
	mov r4, r1
	mov r6, #1
	blx r7
	cmp r0, #0
	beq _020BC540
	add r5, sp, #8
_020BC528:
	cmp r0, #0xa
	mov r0, r5
	addeq r6, r6, #1
	blx r7
	cmp r0, #0
	bne _020BC528
_020BC540:
	ldr r0, [r8]
	ldrsb r0, [r0, #1]
	add r0, r4, r0
	mul r0, r6, r0
	sub r0, r0, r4
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020BC4E8

	arm_func_start FUN_020BC55C
FUN_020BC55C: @ 0x020BC55C
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #8
	mov r6, r2
	ldr r2, [sp, #0x28]
	add sb, sp, #0
	mov r4, #0
	mov r8, r0
	mov r7, r1
	mov r5, r3
	str r4, [sb]
	str r4, [sb, #4]
	cmp r2, #0
	mov r4, #1
	beq _020BC5C4
	add sb, sp, #0x28
_020BC598:
	mov r0, r7
	mov r1, r6
	mov r3, sb
	bl FUN_020BC43C
	ldr r1, [sp]
	ldr r2, [sp, #0x28]
	cmp r0, r1
	strgt r0, [sp]
	add r4, r4, #1
	cmp r2, #0
	bne _020BC598
_020BC5C4:
	ldr r0, [r7]
	sub r2, r4, #1
	ldrsb r1, [r0, #1]
	ldr r0, [sp]
	add r1, r5, r1
	mul r1, r2, r1
	sub r1, r1, r5
	str r1, [sp, #4]
	stm r8, {r0, r1}
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	arm_func_end FUN_020BC55C

	arm_func_start FUN_020BC5F0
FUN_020BC5F0: @ 0x020BC5F0
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	mov sl, #3
	ldr r7, [sp, #0x20]
	ldr r6, [sp, #0x24]
	ldr r8, _020BC6E4 @ =0x02109414
	mov r5, #0
	mov sb, sl
	mvn r4, #0
_020BC610:
	and ip, r3, r4, lsl r6
	cmp ip, r1
	and lr, r2, r4, lsl r7
	bhi _020BC654
	mla r5, r2, ip, r5
	cmp lr, r0
	bhi _020BC644
	sub r3, r3, ip
	mla r5, lr, r3, r5
	sub r0, r0, lr
	sub r1, r1, ip
	sub r2, r2, lr
	b _020BC69C
_020BC644:
	mov r2, lr
	sub r1, r1, ip
	sub r3, r3, ip
	b _020BC69C
_020BC654:
	cmp lr, r0
	mvn r3, r4, lsl r6
	bhi _020BC674
	mla r5, lr, ip, r5
	mov r3, ip
	sub r0, r0, lr
	sub r2, r2, lr
	b _020BC69C
_020BC674:
	and r2, r1, r4, lsl r6
	mla r5, lr, r2, r5
	and r2, r0, r4, lsl r7
	mvn r4, r4, lsl r7
	add r2, r5, r2, lsl r6
	and r1, r1, r3
	add r1, r2, r1, lsl r7
	and r0, r0, r4
	add r0, r1, r0
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_020BC69C:
	cmp r2, #8
	movge r6, sl
	movlt r6, r2
	clzlt r6, r6
	rsblt r6, r6, #0x1f
	cmp r3, #8
	movge r7, sb
	movlt r7, r3
	clzlt r7, r7
	rsblt r7, r7, #0x1f
	add r7, r8, r7, lsl #3
	add ip, r7, r6, lsl #1
	ldrb r7, [r7, r6, lsl #1]
	ldrb r6, [ip, #1]
	str r7, [sp, #0x20]
	str r6, [sp, #0x24]
	b _020BC610
	arm_func_end FUN_020BC5F0

	arm_func_start FUN_020BC6E0
FUN_020BC6E0: @ 0x020BC6E0
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0
_020BC6E4: .4byte 0x02109414
	arm_func_end FUN_020BC6E0

	arm_func_start FUN_020BC6E8
FUN_020BC6E8: @ 0x020BC6E8
	ldrb r3, [r0, #1]
	ldr r2, _020BC700 @ =0x02109434
	ldrb r1, [r0]
	add r0, r2, r3, lsl #4
	ldr r0, [r0, r1, lsl #2]
	bx lr
	.align 2, 0
_020BC700: .4byte 0x02109434
	arm_func_end FUN_020BC6E8

	arm_func_start FUN_020BC704
FUN_020BC704: @ 0x020BC704
	push {r3, r4, r5, lr}
	cmp r3, #8
	ldreq r4, [sp, #0x10]
	mov ip, r0
	ldr r0, [sp, #0x14]
	cmpeq r4, #8
	bne _020BC734
	ldr r2, [sp, #0x18]
	mov r1, ip
	lsl r2, r2, #3
	bl FUN_020D4858
	pop {r3, r4, r5, pc}
_020BC734:
	ldr r4, [sp, #0x18]
	cmp r4, #4
	bne _020BC794
	lsl r5, r1, #2
	add r4, r5, r3, lsl #2
	mvn r3, #0
	rsb r4, r4, #0x20
	lsr r3, r3, r5
	add r1, r4, r1, lsl #2
	lsl r3, r3, r1
	ldr r1, [sp, #0x10]
	add r2, ip, r2, lsl #2
	add r5, r2, r1, lsl #2
	and r1, r0, r3, lsr r4
	mvn r3, r3, lsr r4
	cmp r2, r5
	pophs {r3, r4, r5, pc}
_020BC778:
	ldr r0, [r2]
	and r0, r0, r3
	orr r0, r1, r0
	str r0, [r2], #4
	cmp r2, r5
	blo _020BC778
	pop {r3, r4, r5, pc}
_020BC794:
	lsl r1, r1, #3
	mvn r4, #0
	add r3, r1, r3, lsl #3
	rsb r3, r3, #0x40
	lsr r5, r4, r1
	cmp r3, #0x20
	lsllo r5, r5, r1
	blo _020BC7C4
	sub lr, r3, #0x20
	add r4, r1, lr
	lsl r4, r5, r4
	lsr r5, r4, lr
_020BC7C4:
	mvn lr, #0
	lsl r4, lr, r3
	cmp r1, #0x20
	lsrlo r3, r4, r3
	blo _020BC7E8
	sub lr, r1, #0x20
	add r1, lr, r3
	lsr r1, r4, r1
	lsl r3, r1, lr
_020BC7E8:
	ldr r1, [sp, #0x10]
	add r4, ip, r2, lsl #3
	add ip, r4, r1, lsl #3
	and r1, r0, r5
	and r2, r0, r3
	mvn r5, r5
	mvn r3, r3
	cmp r4, ip
	pophs {r3, r4, r5, pc}
_020BC80C:
	ldr r0, [r4]
	and r0, r0, r5
	orr r0, r1, r0
	str r0, [r4]
	ldr r0, [r4, #4]
	and r0, r0, r3
	orr r0, r2, r0
	str r0, [r4, #4]
	add r4, r4, #8
	cmp r4, ip
	blo _020BC80C
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020BC704

	arm_func_start FUN_020BC83C
FUN_020BC83C: @ 0x020BC83C
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x28
	ldr r5, [r0, #8]
	ldr r4, [r0, #0xc]
	cmp r5, #0
	strge r5, [sp]
	movlt r1, #0
	strlt r1, [sp]
	ldr r1, [r0, #0x10]
	cmp r4, #0
	add sl, r5, r1
	ldr r1, [r0, #0x14]
	movge r2, r4
	movlt r2, #0
	cmp sl, #8
	add r3, r4, r1
	movge sl, #8
	cmp r3, #8
	movge r3, #8
	cmp r4, #0
	movgt r4, #0
	cmp r5, #0
	ldr r7, [r0, #0x20]
	movgt r5, #0
	rsb r1, r4, #0
	mul r6, sl, r7
	ldr r8, [r0, #0x1c]
	rsb r4, r5, #0
	mul sb, r8, r4
	ldr r4, [r0, #0x18]
	mov sl, r6
	str r4, [sp, #0x10]
	ldr r4, [sp]
	cmp r7, #4
	mul r5, r4, r7
	ldr r4, [sp, #0x10]
	str r5, [sp]
	mla r4, r1, r4, sb
	ldr r1, [r0, #4]
	str r1, [sp, #0x14]
	ldr r1, [r0]
	bne _020BC9AC
	ldr r7, [r0, #0x24]
	add r0, r1, r2, lsl #2
	str r0, [sp, #0xc]
	add r0, r1, r3, lsl #2
	ldr r1, [sp, #0xc]
	str r0, [sp, #8]
	cmp r1, r0
	addhs sp, sp, #0x28
	pophs {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov fp, #0xf
	add r5, sp, #0x20
_020BC910:
	ldr r0, [sp, #0xc]
	lsr r1, r4, #0x1f
	ldr sb, [r0]
	ldr r0, [sp, #0x14]
	rsb r2, r1, r4, lsl #29
	add r0, r0, r4, lsr #3
	str r0, [sp, #0x20]
	mov r0, #0
	strb r0, [sp, #0x24]
	strb r0, [sp, #0x25]
	mov r0, r5
	add r1, r1, r2, ror #29
	bl FUN_020BDF34
	ldr r6, [sp]
	mov r0, r6
	cmp r0, sl
	bhs _020BC984
_020BC954:
	mov r0, r5
	mov r1, r8
	bl FUN_020BDF34
	cmp r0, #0
	beq _020BC978
	add r0, r7, r0
	mvn r1, fp, lsl r6
	and r1, sb, r1
	orr sb, r1, r0, lsl r6
_020BC978:
	add r6, r6, #4
	cmp r6, sl
	blo _020BC954
_020BC984:
	ldr r1, [sp, #0xc]
	ldr r0, [sp, #8]
	str sb, [r1], #4
	cmp r1, r0
	ldr r0, [sp, #0x10]
	str r1, [sp, #0xc]
	add r4, r4, r0
	blo _020BC910
	add sp, sp, #0x28
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020BC9AC:
	ldr r5, [r0, #0x24]
	add r0, r1, r3, lsl #3
	add fp, r1, r2, lsl #3
	str r0, [sp, #4]
	cmp fp, r0
	addhs sp, sp, #0x28
	pophs {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020BC9C8:
	lsr r1, r4, #0x1f
	rsb r0, r1, r4, lsl #29
	add r1, r1, r0, ror #29
	ldr r0, [sp, #0x14]
	ldm fp, {r6, r7}
	mov r2, #0
	add r0, r0, r4, lsr #3
	str r0, [sp, #0x18]
	add r0, sp, #0x18
	strb r2, [sp, #0x1c]
	strb r2, [sp, #0x1d]
	bl FUN_020BDF34
	ldr sb, [sp]
	mov r0, sb
	cmp r0, sl
	bhs _020BCA58
_020BCA08:
	add r0, sp, #0x18
	mov r1, r8
	bl FUN_020BDF34
	cmp r0, #0
	beq _020BCA4C
	add r1, r5, r0
	cmp sb, #0x20
	mov r0, #0xff
	bhs _020BCA3C
	mvn r0, r0, lsl sb
	and r0, r6, r0
	orr r6, r0, r1, lsl sb
	b _020BCA4C
_020BCA3C:
	sub r2, sb, #0x20
	mvn r0, r0, lsl r2
	and r0, r7, r0
	orr r7, r0, r1, lsl r2
_020BCA4C:
	add sb, sb, #8
	cmp sb, sl
	blo _020BCA08
_020BCA58:
	ldr r0, [sp, #4]
	stm fp, {r6, r7}
	add fp, fp, #8
	cmp fp, r0
	ldr r0, [sp, #0x10]
	add r4, r4, r0
	blo _020BC9C8
	add sp, sp, #0x28
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_020BC83C

	arm_func_start FUN_020BCA7C
FUN_020BCA7C: @ 0x020BCA7C
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x2c
	ldr r4, [sp, #0x54]
	ldrb r6, [r0, #0xc]
	str r4, [sp, #0x54]
	ldr r4, [r4]
	ldr r5, [r1]
	lsl r7, r6, #6
	ldrb r4, [r4, #1]
	asr r6, r7, #2
	add r6, r7, r6, lsr #29
	cmp r4, #0
	ldr r5, [r5, #8]
	mov sl, r2
	mov sb, r3
	asr r8, r6, #3
	addeq sp, sp, #0x2c
	ldmib r0, {fp, ip}
	ldr lr, [r0]
	ldrb r2, [r5, #1]
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	adds r7, sl, r4
	addmi sp, sp, #0x2c
	popmi {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	adds r3, sb, r2
	addmi sp, sp, #0x2c
	popmi {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp sl, #0
	movle r5, #0
	lsrgt r5, sl, #3
	cmp sb, #0
	movle r6, #0
	add r7, r7, #7
	lsrgt r6, sb, #3
	cmp fp, r7, lsr #3
	lsr r7, r7, #3
	add r3, r3, #7
	movls r7, fp
	lsr fp, r3, #3
	cmp ip, r3, lsr #3
	movls fp, ip
	subs r3, r7, r5
	sub fp, fp, r6
	addmi sp, sp, #0x2c
	popmi {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp fp, #0
	addlt sp, sp, #0x2c
	poplt {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r7, [r0, #0x10]
	cmp sl, #0
	mla r6, r7, r6, r5
	sub r5, r7, r3
	mul r5, r8, r5
	str r5, [sp]
	ldr r5, [sp, #0x54]
	mla r7, r8, r6, lr
	ldr ip, [r5, #4]
	ldr r6, [sp, #0x50]
	str ip, [sp, #8]
	sub r5, r6, #1
	str r4, [sp, #0x14]
	str r5, [sp, #0x28]
	str r2, [sp, #0x18]
	ldr r2, [r1]
	andge sl, sl, #7
	ldr r2, [r2, #8]
	cmp sb, #0
	ldrb r2, [r2, #6]
	andge sb, sb, #7
	sub fp, sb, fp, lsl #3
	str r2, [sp, #0x20]
	ldrb r0, [r0, #0xc]
	cmp sb, fp
	sub r6, sl, r3, lsl #3
	str r0, [sp, #0x24]
	ldr r0, [r1]
	ldr r0, [r0, #8]
	ldrb r0, [r0]
	smulbb r0, r2, r0
	str r0, [sp, #0x1c]
	addle sp, sp, #0x2c
	pople {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	add r4, sp, #4
_020BCBC8:
	mov r5, sl
	str sb, [sp, #0x10]
	cmp sl, r6
	ble _020BCBF8
_020BCBD8:
	mov r0, r4
	str r7, [sp, #4]
	str r5, [sp, #0xc]
	bl FUN_020BC83C
	sub r5, r5, #8
	cmp r5, r6
	add r7, r7, r8
	bgt _020BCBD8
_020BCBF8:
	ldr r0, [sp]
	sub sb, sb, #8
	cmp sb, fp
	add r7, r7, r0
	bgt _020BCBC8
	add sp, sp, #0x2c
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_020BCA7C

	arm_func_start FUN_020BCC14
FUN_020BCC14: @ 0x020BCC14
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x4c
	ldr r6, [sp, #0x74]
	ldrb r5, [r0, #0xc]
	ldr r4, [r6]
	ldr r7, [r1]
	lsl r8, r5, #6
	ldrb r4, [r4, #1]
	asr r5, r8, #2
	add r5, r8, r5, lsr #29
	ldr r7, [r7, #8]
	str r2, [sp, #8]
	str r3, [sp, #0xc]
	cmp r4, #0
	asr sb, r5, #3
	addeq sp, sp, #0x4c
	ldmib r0, {r3, r5}
	ldrb r2, [r7, #1]
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r7, [sp, #8]
	adds r7, r7, r4
	addmi sp, sp, #0x4c
	popmi {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r8, [sp, #0xc]
	adds r8, r8, r2
	addmi sp, sp, #0x4c
	popmi {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr sl, [sp, #8]
	add r7, r7, #7
	cmp sl, #0
	movle sl, #0
	strle sl, [sp, #0x10]
	lsrgt sl, sl, #3
	strgt sl, [sp, #0x10]
	ldr sl, [sp, #0xc]
	cmp sl, #0
	movle sl, #0
	lsrgt sl, sl, #3
	cmp r3, r7, lsr #3
	lsr r7, r7, #3
	movls r7, r3
	add r3, r8, #7
	cmp r5, r3, lsr #3
	lsr r8, r3, #3
	ldr r3, [sp, #0x10]
	movls r8, r5
	subs r5, r7, r3
	sub r7, r8, sl
	addmi sp, sp, #0x4c
	popmi {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp r7, #0
	addlt sp, sp, #0x4c
	poplt {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r3, [sp, #8]
	ldr fp, [r0]
	cmp r3, #0
	andge r3, r3, #7
	strge r3, [sp, #8]
	ldr r3, [sp, #0xc]
	ldr r8, [sp, #8]
	ldr r6, [r6, #4]
	cmp r3, #0
	andge r3, r3, #7
	strge r3, [sp, #0xc]
	ldr r3, [sp, #0x70]
	sub r5, r8, r5, lsl #3
	ldr r8, [sp, #0xc]
	sub r3, r3, #1
	str r3, [sp, #0x48]
	sub r7, r8, r7, lsl #3
	str r2, [sp, #0x38]
	str r6, [sp, #0x28]
	str r4, [sp, #0x34]
	ldr r4, [r1]
	mov r3, r8
	mov r2, r7
	cmp r3, r2
	ldr r2, [r4, #8]
	str r7, [sp, #0x1c]
	ldrb r3, [r2, #6]
	str r3, [sp, #0x40]
	ldrb r2, [r0, #0xc]
	str r2, [sp, #0x44]
	ldr r1, [r1]
	ldr r1, [r1, #8]
	ldrb r1, [r1]
	smulbb r1, r3, r1
	str r1, [sp, #0x3c]
	ldr r3, [r0, #0x10]
	ldr r1, [r0, #4]
	ldr r0, [r0, #8]
	str r1, [sp, #0x14]
	lsl r2, r3, #0x18
	lsl r1, r3, #0x10
	str r3, [sp, #0x20]
	str r0, [sp, #0x18]
	lsr r8, r2, #0x18
	lsr r7, r1, #0x18
	addle sp, sp, #0x4c
	pople {r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020BCDA4:
	ldr r0, [sp, #0xc]
	ldr r6, [sp, #0x10]
	str r0, [sp, #0x30]
	ldr r0, [sp, #8]
	cmp r0, r5
	mov r4, r0
	ble _020BCE00
_020BCDC0:
	ldr r2, [sp, #0x14]
	str r8, [sp]
	ldr r3, [sp, #0x18]
	mov r0, r6
	mov r1, sl
	str r7, [sp, #4]
	bl FUN_020BC5F0
	mla r1, r0, sb, fp
	add r0, sp, #0x24
	str r4, [sp, #0x2c]
	str r1, [sp, #0x24]
	bl FUN_020BC83C
	sub r4, r4, #8
	add r6, r6, #1
	cmp r4, r5
	bgt _020BCDC0
_020BCE00:
	ldr r0, [sp, #0xc]
	add sl, sl, #1
	sub r1, r0, #8
	ldr r0, [sp, #0x1c]
	str r1, [sp, #0xc]
	cmp r1, r0
	bgt _020BCDA4
	add sp, sp, #0x4c
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_020BCC14

	arm_func_start FUN_020BCE24
FUN_020BCE24: @ 0x020BCE24
	push {r3, lr}
	mov r3, r0
	ldrb r2, [r3, #0xc]
	ldr ip, [r3, #4]
	cmp r2, #4
	orreq r0, r1, r1, lsl #4
	orreq r0, r0, r0, lsl #8
	orrne r0, r1, r1, lsl #8
	orr r1, r0, r0, lsl #16
	ldr r0, [r3, #8]
	lsl r2, r2, #6
	mul lr, ip, r0
	asr r0, r2, #2
	add r0, r2, r0, lsr #29
	asr r2, r0, #3
	mov r0, r1
	mul r2, lr, r2
	ldr r1, [r3]
	bl FUN_020D4858
	pop {r3, pc}
	arm_func_end FUN_020BCE24

	arm_func_start FUN_020BCE74
FUN_020BCE74: @ 0x020BCE74
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r7, r0
	ldrb r2, [r7, #0xc]
	mov r6, r1
	ldr sb, [r7]
	cmp r2, #4
	orreq r0, r6, r6, lsl #4
	orreq r0, r0, r0, lsl #8
	orrne r0, r6, r6, lsl #8
	lsl r1, r2, #6
	orr r6, r0, r0, lsl #16
	asr r0, r1, #2
	add r0, r1, r0, lsr #29
	asr r3, r0, #3
	ldr r2, [r7, #0x10]
	ldr r1, [r7, #4]
	ldr r0, [r7, #8]
	mul r5, r3, r2
	mul r4, r3, r1
	mov r8, #0
	cmp r0, #0
	pople {r3, r4, r5, r6, r7, r8, sb, pc}
_020BCECC:
	mov r0, r6
	mov r1, sb
	mov r2, r4
	bl FUN_020D4858
	ldr r0, [r7, #8]
	add r8, r8, #1
	cmp r8, r0
	add sb, sb, r5
	blt _020BCECC
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	arm_func_end FUN_020BCE74

	arm_func_start FUN_020BCEF4
FUN_020BCEF4: @ 0x020BCEF4
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x30
	ldr r4, [sp, #0x58]
	mov sb, r2
	ldrb fp, [r0, #0xc]
	mov sl, r1
	add r1, sb, r4
	str r1, [sp, #0x28]
	ldr r2, [sp, #0x5c]
	mov r1, r3
	add r1, r1, r2
	cmp fp, #4
	str r1, [sp, #0x24]
	orreq r1, sl, sl, lsl #4
	orreq r1, r1, r1, lsl #8
	orrne r1, sl, sl, lsl #8
	str r3, [sp, #0xc]
	orr sl, r1, r1, lsl #16
	ldr r1, [sp, #0xc]
	lsl r6, fp, #6
	bic r1, r1, #7
	asr r4, r6, #2
	asr r2, r1, #2
	str r1, [sp, #0x2c]
	add r1, r1, r2, lsr #29
	ldr r2, [r0, #0x10]
	asr r3, r1, #3
	mul r1, r3, r2
	bic r3, sb, #7
	asr r5, r3, #2
	add r4, r6, r4, lsr #29
	str r3, [sp, #0x18]
	add r5, r3, r5, lsr #29
	asr r3, r4, #3
	str r3, [sp, #0x14]
	add r4, r1, r5, asr #3
	ldr r3, [sp, #0x24]
	ldr r5, [r0]
	ldr r1, [sp, #0x14]
	ldr r0, [sp, #0x28]
	mla r4, r1, r4, r5
	add r3, r3, #7
	bic r1, r3, #7
	str r1, [sp, #0x20]
	ldr r1, [sp, #0x14]
	add r0, r0, #7
	mul r1, r2, r1
	str r1, [sp, #0x10]
	ldr r2, [sp, #0x2c]
	ldr r1, [sp, #0x20]
	str r4, [sp, #0x1c]
	cmp r2, r1
	bic r6, r0, #7
	addge sp, sp, #0x30
	popge {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020BCFD0:
	ldr r1, [sp, #0x2c]
	ldr r0, [sp, #0xc]
	cmp r1, r0
	movge r8, #0
	bge _020BCFF0
	mov r1, r0
	ldr r0, [sp, #0x2c]
	sub r8, r1, r0
_020BCFF0:
	ldr r1, [sp, #0x24]
	ldr r0, [sp, #0x2c]
	ldr r7, [sp, #0x1c]
	sub r0, r1, r0
	cmp r0, #8
	movgt r0, #8
	sub r5, r0, r8
	ldr r0, [sp, #0x18]
	cmp r0, r6
	mov r4, r0
	bge _020BD060
_020BD01C:
	ldr r0, [sp, #0x28]
	cmp r4, sb
	sublt r1, sb, r4
	sub r0, r0, r4
	movge r1, #0
	cmp r0, #8
	movgt r0, #8
	sub r3, r0, r1
	mov r0, r7
	mov r2, r8
	stm sp, {r5, sl, fp}
	bl FUN_020BC704
	ldr r0, [sp, #0x14]
	add r4, r4, #8
	add r7, r7, r0
	cmp r4, r6
	blt _020BD01C
_020BD060:
	ldr r1, [sp, #0x1c]
	ldr r0, [sp, #0x10]
	add r0, r1, r0
	str r0, [sp, #0x1c]
	ldr r0, [sp, #0x2c]
	add r1, r0, #8
	ldr r0, [sp, #0x20]
	str r1, [sp, #0x2c]
	cmp r1, r0
	blt _020BCFD0
	add sp, sp, #0x30
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_020BCEF4

	arm_func_start FUN_020BD090
FUN_020BD090: @ 0x020BD090
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x48
	ldrb r4, [r0, #0xc]
	mov sl, r2
	mov fp, r1
	str r4, [sp, #0x10]
	ldr r1, [sp, #0x10]
	ldr r4, [sp, #0x70]
	cmp r1, #4
	add r1, sl, r4
	str r1, [sp, #0x3c]
	ldr r2, [sp, #0x74]
	mov r1, r3
	add r1, r1, r2
	bic r2, sl, #7
	str r1, [sp, #0x38]
	str r3, [sp, #0xc]
	str r2, [sp, #0x28]
	ldr r2, [sp, #0xc]
	orreq r1, fp, fp, lsl #4
	bic r2, r2, #7
	str r2, [sp, #0x40]
	ldr r2, [sp, #0x10]
	orreq r1, r1, r1, lsl #8
	lsl r5, r2, #6
	ldr r2, [sp, #0x38]
	asr r3, r5, #2
	add r6, r2, #7
	ldr r2, [sp, #0x28]
	add r3, r5, r3, lsr #29
	asr r4, r2, #2
	ldr r2, [sp, #0x40]
	orrne r1, fp, fp, lsl #8
	asr r5, r2, #2
	bic r2, r6, #7
	str r2, [sp, #0x34]
	asr r2, r3, #3
	str r2, [sp, #0x14]
	ldr r2, [sp, #0x28]
	orr fp, r1, r1, lsl #16
	add r2, r2, r4, lsr #29
	asr r2, r2, #3
	str r2, [sp, #0x2c]
	ldr r2, [sp, #0x40]
	ldr r1, [r0, #0x10]
	add r2, r2, r5, lsr #29
	asr r8, r2, #3
	ldr r3, [sp, #0x40]
	ldr r2, [sp, #0x34]
	str r1, [sp, #0x44]
	cmp r3, r2
	ldr r2, [sp, #0x3c]
	add r2, r2, #7
	bic r7, r2, #7
	ldr r2, [r0, #4]
	str r2, [sp, #0x18]
	ldr r2, [r0, #8]
	ldr r0, [r0]
	str r2, [sp, #0x1c]
	str r0, [sp, #0x30]
	lsl r0, r1, #0x18
	lsr r0, r0, #0x18
	str r0, [sp, #0x20]
	lsl r0, r1, #0x10
	lsr r0, r0, #0x18
	str r0, [sp, #0x24]
	addge sp, sp, #0x48
	popge {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020BD1A0:
	ldr r1, [sp, #0x40]
	ldr r0, [sp, #0xc]
	cmp r1, r0
	movge sb, #0
	bge _020BD1C0
	mov r1, r0
	ldr r0, [sp, #0x40]
	sub sb, r1, r0
_020BD1C0:
	ldr r1, [sp, #0x38]
	ldr r0, [sp, #0x40]
	ldr r6, [sp, #0x2c]
	sub r0, r1, r0
	cmp r0, #8
	movgt r0, #8
	sub r5, r0, sb
	ldr r0, [sp, #0x28]
	cmp r0, r7
	mov r4, r0
	bge _020BD260
_020BD1EC:
	ldr r0, [sp, #0x20]
	ldr r2, [sp, #0x18]
	str r0, [sp]
	ldr r0, [sp, #0x24]
	ldr r3, [sp, #0x1c]
	str r0, [sp, #4]
	mov r0, r6
	mov r1, r8
	bl FUN_020BC5F0
	ldr r2, [sp, #0x3c]
	cmp r4, sl
	sublt r1, sl, r4
	sub r2, r2, r4
	movge r1, #0
	cmp r2, #8
	movgt r2, #8
	stm sp, {r5, fp}
	sub r3, r2, r1
	ldr r2, [sp, #0x10]
	ldr ip, [sp, #0x14]
	str r2, [sp, #8]
	ldr r2, [sp, #0x30]
	mla r0, ip, r0, r2
	mov r2, sb
	bl FUN_020BC704
	add r4, r4, #8
	add r6, r6, #1
	cmp r4, r7
	blt _020BD1EC
_020BD260:
	ldr r0, [sp, #0x40]
	add r8, r8, #1
	add r1, r0, #8
	ldr r0, [sp, #0x34]
	str r1, [sp, #0x40]
	cmp r1, r0
	blt _020BD1A0
	add sp, sp, #0x48
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_020BD090

	arm_func_start FUN_020BD284
FUN_020BD284: @ 0x020BD284
	str r2, [r0, #4]
	ldr r2, [sp]
	str r3, [r0, #8]
	strb r2, [r0, #0xc]
	ldr r2, [sp, #4]
	str r1, [r0]
	ldr r1, [sp, #8]
	str r2, [r0, #0x14]
	str r1, [r0, #0x10]
	bx lr
	arm_func_end FUN_020BD284

	arm_func_start FUN_020BD2AC
FUN_020BD2AC: @ 0x020BD2AC
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x10
	mov r7, r1
	ldrh r1, [sp, #0x2c]
	mov r8, r0
	mov r0, r7
	mov r6, r2
	mov r5, r3
	bl FUN_020BC3A8
	ldr r1, _020BD3CC @ =0x0000FFFF
	mov r4, r0
	cmp r4, r1
	ldreq r0, [r7]
	ldrheq r4, [r0, #2]
	mov r0, r7
	mov r1, r4
	bl FUN_020BC3F0
	str r0, [sp, #8]
	ldr r1, [r7]
	ldr r2, [r1, #8]
	ldrh r1, [r2, #2]
	add r2, r2, #8
	mla r1, r4, r1, r2
	str r1, [sp, #0xc]
	ldr r1, [r7]
	ldr r3, [r1, #8]
	ldrb r1, [r3, #7]
	cmp r1, #7
	addls pc, pc, r1, lsl #2
	b _020BD390
_020BD324: @ jump table
	b _020BD344 @ case 0
	b _020BD350 @ case 1
	b _020BD350 @ case 2
	b _020BD364 @ case 3
	b _020BD364 @ case 4
	b _020BD380 @ case 5
	b _020BD380 @ case 6
	b _020BD344 @ case 7
_020BD344:
	ldrsb r0, [r0]
	add r6, r6, r0
	b _020BD390
_020BD350:
	ldrb r1, [r3]
	ldrsb r0, [r0]
	sub r6, r6, r1
	add r5, r5, r0
	b _020BD390
_020BD364:
	ldrsb r2, [r0]
	ldrb r1, [r0, #1]
	ldrb r0, [r3, #1]
	add r1, r2, r1
	sub r6, r6, r1
	sub r5, r5, r0
	b _020BD390
_020BD380:
	ldrsb r1, [r0]
	ldrb r0, [r3, #1]
	add r0, r1, r0
	sub r5, r5, r0
_020BD390:
	ldr r1, [sp, #0x28]
	add r0, sp, #8
	str r1, [sp]
	str r0, [sp, #4]
	ldr r1, [r8, #0x14]
	mov r0, r8
	ldr r4, [r1]
	mov r1, r7
	mov r2, r6
	mov r3, r5
	blx r4
	ldr r0, [sp, #8]
	ldrsb r0, [r0, #2]
	add sp, sp, #0x10
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0
_020BD3CC: .4byte 0x0000FFFF
	arm_func_end FUN_020BD2AC

	arm_func_start FUN_020BD3D0
FUN_020BD3D0: @ 0x020BD3D0
	stmdb sp!, {lr}
	sub sp, sp, #0xc
	ldr lr, [sp, #0x10]
	ldr ip, _020BD3F8 @ =0x021093FC
	str lr, [sp]
	str ip, [sp, #4]
	str r2, [sp, #8]
	bl FUN_020BD284
	add sp, sp, #0xc
	ldm sp!, {pc}
	.align 2, 0
_020BD3F8: .4byte 0x021093FC
	arm_func_end FUN_020BD3D0

	arm_func_start FUN_020BD3FC
FUN_020BD3FC: @ 0x020BD3FC
	push {r3, r4, r5, lr}
	sub sp, sp, #0x10
	cmp r2, #8
	movlt r4, r2
	movge ip, #3
	clzlt r4, r4
	rsblt ip, r4, #0x1f
	cmp r3, #8
	movlt r4, r3
	movge r5, #3
	clzlt r4, r4
	rsblt r5, r4, #0x1f
	ldr r4, _020BD47C @ =0x02109414
	ldr lr, [sp, #0xc]
	add r5, r4, r5, lsl #3
	add r4, r5, ip, lsl #1
	ldrb ip, [r5, ip, lsl #1]
	bic r5, lr, #0xff
	ldrb r4, [r4, #1]
	ldr lr, [sp, #0x20]
	orr r5, r5, ip
	str lr, [sp]
	ldr ip, _020BD480 @ =0x02109408
	bic lr, r5, #0xff00
	lsl r4, r4, #0x18
	orr r4, lr, r4, lsr #16
	str ip, [sp, #4]
	str r4, [sp, #0xc]
	str r4, [sp, #8]
	bl FUN_020BD284
	add sp, sp, #0x10
	pop {r3, r4, r5, pc}
	.align 2, 0
_020BD47C: .4byte 0x02109414
_020BD480: .4byte 0x02109408
	arm_func_end FUN_020BD3FC

	arm_func_start FUN_020BD484
FUN_020BD484: @ 0x020BD484
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #8
	ldr r5, [sp, #0x24]
	ldr lr, [sp, #0x20]
	cmp r5, #0x20
	ldr ip, [sp, #0x28]
	bgt _020BD4C0
	mla r4, r5, lr, r3
	ldr lr, [sp, #0x2c]
	mov r3, r5
	add r0, r0, r4, lsl #1
	stm sp, {ip, lr}
	bl FUN_020BD534
	add sp, sp, #8
	pop {r4, r5, r6, r7, r8, pc}
_020BD4C0:
	add r6, lr, r2
	ldr r4, [sp, #0x2c]
	cmp lr, r6
	add r5, r3, r1
	addge sp, sp, #8
	lsl r1, r4, #0x1c
	popge {r4, r5, r6, r7, r8, pc}
_020BD4DC:
	cmp lr, #0x20
	movlt r2, lr
	addge r2, lr, #0x20
	mov r7, r3
	cmp r3, r5
	add r8, r0, r2, lsl #6
	bge _020BD520
_020BD4F8:
	cmp r7, #0x20
	movlt r2, r7
	addge r2, r7, #0x3e0
	orr r4, ip, r1, lsr #16
	lsl r2, r2, #1
	add r7, r7, #1
	strh r4, [r8, r2]
	cmp r7, r5
	add ip, ip, #1
	blt _020BD4F8
_020BD520:
	add lr, lr, #1
	cmp lr, r6
	blt _020BD4DC
	add sp, sp, #8
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020BD484

	arm_func_start FUN_020BD534
FUN_020BD534: @ 0x020BD534
	push {r4, r5, r6, r7, r8, lr}
	ldr r4, [sp, #0x1c]
	ldr r8, [sp, #0x18]
	mov r6, #0
	cmp r2, #0
	lsl ip, r4, #0x1c
	pople {r4, r5, r6, r7, r8, pc}
	mov r4, r6
_020BD554:
	mov r7, r0
	mov r5, r4
	cmp r1, #0
	ble _020BD57C
_020BD564:
	orr lr, r8, ip, lsr #16
	add r5, r5, #1
	cmp r5, r1
	add r8, r8, #1
	strh lr, [r7], #2
	blt _020BD564
_020BD57C:
	add r6, r6, #1
	cmp r6, r2
	add r0, r0, r3, lsl #1
	blt _020BD554
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020BD534

	arm_func_start FUN_020BD590
FUN_020BD590: @ 0x020BD590
	push {r3, r4, r5, lr}
	lsr r3, r0, #3
	lsr r5, r1, #3
	mov r2, #0
	mla lr, r3, r5, r2
	and r4, r0, #2
	and r2, r0, #1
	add r2, r2, r4, lsr #1
	and r0, r0, #4
	lsl ip, r2, #1
	add ip, ip, r0, lsr #2
	mla ip, r5, ip, lr
	and r4, r1, #2
	and lr, r1, #1
	add r4, lr, r4, lsr #1
	and lr, r1, #4
	lsl r1, r4, #1
	add r1, r1, lr, lsr #2
	mla ip, r3, r1, ip
	add r1, r2, r0, lsr #2
	add r0, r4, lr, lsr #2
	mla r0, r1, r0, ip
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020BD590

	arm_func_start FUN_020BD5EC
FUN_020BD5EC: @ 0x020BD5EC
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x38
	mov r7, r0
	mov r0, r1
	cmp r0, #8
	ldr r0, [sp, #0x60]
	str r1, [sp, #0x10]
	str r0, [sp, #0x60]
	str r2, [sp, #0x14]
	ldrlt r0, [sp, #0x10]
	str r3, [sp, #0x34]
	ldr r6, [sp, #0x64]
	ldr r5, [sp, #0x68]
	ldr r4, [sp, #0x6c]
	movge r2, #3
	clzlt r0, r0
	rsblt r2, r0, #0x1f
	ldr r0, [sp, #0x14]
	cmp r0, #8
	ldrlt r0, [sp, #0x14]
	movge r1, #3
	clzlt r0, r0
	rsblt r1, r0, #0x1f
	ldr r0, _020BD8D8 @ =0x02109414
	mvn r3, #0
	add r1, r0, r1, lsl #3
	add r0, r1, r2, lsl #1
	ldrb fp, [r1, r2, lsl #1]
	ldrb r1, [r0, #1]
	ldr r2, [sp, #0x14]
	cmp r6, #0
	str r1, [sp, #0x30]
	ldr r1, [sp, #0x10]
	and r1, r1, r3, lsl fp
	str r1, [sp, #0x2c]
	ldr r1, [sp, #0x30]
	and r1, r2, r3, lsl r1
	str r1, [sp, #0x28]
	moveq r1, #1
	streq r1, [sp, #0x18]
	movne r1, #2
	strne r1, [sp, #0x18]
	mov r1, #0
	str r1, [sp, #0x24]
	bl FUN_020BC6E8
	ldr r1, [sp, #0x10]
	ldr r2, [sp, #0x14]
	asr sb, r1, fp
	ldr r1, [sp, #0x30]
	asr r1, r2, r1
	str r1, [sp, #0x20]
	ldr r1, [sp, #0x18]
	lsl r2, r1, fp
	ldr r1, [sp, #0x30]
	lsl r8, r2, r1
	mov r1, #0
	str r1, [sp, #0x1c]
	b _020BD76C
_020BD6D4:
	ldr r2, [sp, #0x1c]
	ldr r1, [sp, #0x30]
	mov sl, #0
	lsl r2, r2, r1
	ldr r1, [sp, #0x60]
	add r1, r1, r2, lsl #3
	mov r2, #0x400
	and r3, r1, #0xff
	rsb r2, r2, #0
	b _020BD758
_020BD6FC:
	lsl ip, sl, fp
	ldr r1, [sp, #0x34]
	add sl, sl, #1
	add r1, r1, ip, lsl #3
	lsl lr, r1, #0x17
	ldr ip, [r7]
	ldr r1, _020BD8DC @ =0xFE00FF00
	and r1, ip, r1
	orr r1, r1, r3
	orr ip, r1, lr, lsr #7
	ldr r1, _020BD8E0 @ =0x3FFF3FFF
	and r1, ip, r1
	orr r1, r1, r0
	str r1, [r7]
	ldrh r1, [r7, #4]
	and r1, r1, r2
	orr r1, r1, r5
	strh r1, [r7, #4]
	ldr r1, [r7]
	add r5, r5, r8, asr r4
	bic r1, r1, #0x2000
	orr r1, r1, r6, lsl #13
	str r1, [r7], #8
_020BD758:
	cmp sl, sb
	blt _020BD6FC
	ldr r1, [sp, #0x1c]
	add r1, r1, #1
	str r1, [sp, #0x1c]
_020BD76C:
	ldr r2, [sp, #0x1c]
	ldr r1, [sp, #0x20]
	cmp r2, r1
	blt _020BD6D4
	ldr r0, [sp, #0x24]
	mla r0, sb, r1, r0
	str r0, [sp, #0x24]
	ldr r1, [sp, #0x2c]
	ldr r0, [sp, #0x10]
	cmp r1, r0
	bhs _020BD7F4
	ldr r0, [sp, #0x60]
	ldr r1, [sp, #0x10]
	stm sp, {r0, r6}
	ldr r0, [sp, #0x2c]
	ldr r2, [sp, #0x2c]
	sub r8, r1, r0
	ldr r1, [sp, #0x34]
	str r5, [sp, #8]
	add r3, r1, r2, lsl #3
	ldr r2, [sp, #0x28]
	mov r0, r7
	mov r1, r8
	str r4, [sp, #0xc]
	bl FUN_020BD5EC
	ldr r1, [sp, #0x18]
	add r7, r7, r0, lsl #3
	mul r2, r1, r8
	ldr r1, [sp, #0x28]
	mul r2, r1, r2
	ldr r1, [sp, #0x24]
	add r5, r5, r2, lsr r4
	add r0, r1, r0
	str r0, [sp, #0x24]
_020BD7F4:
	ldr r1, [sp, #0x28]
	ldr r0, [sp, #0x14]
	cmp r1, r0
	bhs _020BD860
	ldr r1, [sp, #0x60]
	ldr r0, [sp, #0x28]
	ldr r3, [sp, #0x34]
	add r0, r1, r0, lsl #3
	stm sp, {r0, r6}
	str r5, [sp, #8]
	ldr r1, [sp, #0x14]
	ldr r0, [sp, #0x28]
	str r4, [sp, #0xc]
	sub r8, r1, r0
	ldr r1, [sp, #0x2c]
	mov r0, r7
	mov r2, r8
	bl FUN_020BD5EC
	ldr r2, [sp, #0x18]
	ldr r1, [sp, #0x2c]
	add r7, r7, r0, lsl #3
	mul r1, r2, r1
	mul r1, r8, r1
	add r5, r5, r1, lsr r4
	ldr r1, [sp, #0x24]
	add r0, r1, r0
	str r0, [sp, #0x24]
_020BD860:
	ldr r1, [sp, #0x2c]
	ldr r0, [sp, #0x10]
	cmp r1, r0
	ldrlo r1, [sp, #0x28]
	ldrlo r0, [sp, #0x14]
	cmplo r1, r0
	bhs _020BD8CC
	ldr r1, [sp, #0x60]
	ldr r0, [sp, #0x28]
	ldr r2, [sp, #0x10]
	add r0, r1, r0, lsl #3
	stm sp, {r0, r6}
	str r5, [sp, #8]
	ldr r1, [sp, #0x2c]
	ldr r3, [sp, #0x14]
	sub r1, r2, r1
	ldr r2, [sp, #0x28]
	ldr r5, [sp, #0x2c]
	sub r2, r3, r2
	ldr r3, [sp, #0x34]
	mov r0, r7
	add r3, r3, r5, lsl #3
	str r4, [sp, #0xc]
	bl FUN_020BD5EC
	ldr r1, [sp, #0x24]
	add r0, r1, r0
	str r0, [sp, #0x24]
_020BD8CC:
	ldr r0, [sp, #0x24]
	add sp, sp, #0x38
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020BD8D8: .4byte 0x02109414
_020BD8DC: .4byte 0xFE00FF00
_020BD8E0: .4byte 0x3FFF3FFF
	arm_func_end FUN_020BD5EC

	arm_func_start FUN_020BD8E4
FUN_020BD8E4: @ 0x020BD8E4
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x10
	mov fp, r0
	ldr r4, [fp, #8]
	ldr r5, [fp, #4]
	ldr r6, [sp, #0x38]
	add r0, sp, #0xc
	str r6, [sp, #0xc]
	ldr r6, [r5, #4]
	mov sl, r1
	mov sb, r2
	str r3, [sp, #8]
	ldrsb r8, [sp, #0x41]
	blx r6
	cmp r0, #0
	beq _020BD96C
	ldrsb r7, [sp, #0x40]
_020BD928:
	cmp r0, #0xa
	beq _020BD96C
	ldr r1, [sp, #8]
	mov r2, sl
	str r1, [sp]
	str r0, [sp, #4]
	ldr r0, [fp]
	mov r1, r5
	mov r3, sb
	bl FUN_020BD2AC
	add r0, r4, r0
	mla sl, r0, r7, sl
	mla sb, r0, r8, sb
	add r0, sp, #0xc
	blx r6
	cmp r0, #0
	bne _020BD928
_020BD96C:
	ldr r1, [sp, #0x3c]
	cmp r1, #0
	addeq sp, sp, #0x10
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp r0, #0xa
	ldreq r1, [sp, #0xc]
	ldr r0, [sp, #0x3c]
	movne r1, #0
	str r1, [r0]
	add sp, sp, #0x10
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_020BD8E4

	arm_func_start FUN_020BD998
FUN_020BD998: @ 0x020BD998
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x34
	mov sl, r0
	ldr r0, [sl, #4]
	ldr r4, [sp, #0x60]
	ldr r0, [r0]
	ldrsb r8, [sp, #0x65]
	ldrsb r0, [r0, #1]
	ldr r5, [sl, #0xc]
	ldrsb sb, [sp, #0x64]
	add r5, r5, r0
	rsb r0, r8, #0
	mul r0, r5, r0
	str r0, [sp, #0x20]
	mul r0, r5, sb
	str r0, [sp, #0x1c]
	ldr r0, [sp, #0x58]
	str r1, [sp, #0xc]
	str r2, [sp, #0x10]
	mov fp, r3
	str r4, [sp, #0x30]
	cmp r4, #0
	str r0, [sp, #0x58]
	addeq sp, sp, #0x34
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r2, [sp, #0x5c]
	mov r6, #0
	and r0, r2, #0x800
	add r1, fp, #1
	str r0, [sp, #0x18]
	add r0, r1, r1, lsr #31
	str r0, [sp, #0x2c]
	and r0, r2, #0x400
	str r0, [sp, #0x14]
	ldrb r0, [sp, #0x64]
	mov r7, r6
	str r0, [sp, #0x24]
	ldrb r0, [sp, #0x65]
	str r0, [sp, #0x28]
_020BDA34:
	ldr r0, [sp, #0x18]
	cmp r0, #0
	ldr r0, [sp, #0xc]
	add r4, r0, r6
	ldr r0, [sp, #0x10]
	add r5, r0, r7
	beq _020BDA70
	ldr r2, [sp, #0x30]
	mov r3, #0
	ldmib sl, {r0, r1}
	bl FUN_020BC43C
	sub r0, fp, r0
	mla r4, r0, sb, r4
	mla r5, r0, r8, r5
	b _020BDAA8
_020BDA70:
	ldr r0, [sp, #0x14]
	cmp r0, #0
	beq _020BDAA8
	ldr r2, [sp, #0x30]
	mov r3, #0
	ldmib sl, {r0, r1}
	bl FUN_020BC43C
	add r0, r0, #1
	add r0, r0, r0, lsr #31
	asr r1, r0, #1
	ldr r0, [sp, #0x2c]
	rsb r0, r1, r0, asr #1
	mla r4, r0, sb, r4
	mla r5, r0, r8, r5
_020BDAA8:
	ldr r3, [sp, #0x30]
	mov r1, r4
	str r3, [sp]
	add r3, sp, #0x30
	str r3, [sp, #4]
	ldr r3, [sp, #0x24]
	mov r2, r5
	strb r3, [sp, #8]
	ldr r3, [sp, #0x28]
	mov r0, sl
	strb r3, [sp, #9]
	ldr r3, [sp, #0x58]
	bl FUN_020BD8E4
	ldr r0, [sp, #0x20]
	add r6, r6, r0
	ldr r0, [sp, #0x1c]
	add r7, r7, r0
	ldr r0, [sp, #0x30]
	cmp r0, #0
	bne _020BDA34
	add sp, sp, #0x34
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_020BD998

	arm_func_start FUN_020BDB00
FUN_020BDB00: @ 0x020BDB00
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x28
	ldr r4, [sp, #0x44]
	mov r8, r0
	str r4, [sp]
	add r0, sp, #0x18
	mov r7, r1
	mov r6, r2
	mov r5, r3
	ldmib r8, {r1, r2, r3}
	ldr r4, [sp, #0x40]
	bl FUN_020BC55C
	ldr r2, [sp, #0x18]
	ldr r0, [sp, #0x1c]
	str r2, [sp, #0x10]
	str r0, [sp, #0x14]
	str r2, [sp, #0x20]
	str r0, [sp, #0x24]
	tst r4, #0x10
	beq _020BDB74
	add r0, r2, #1
	rsb r0, r0, #0
	add r0, r0, r0, lsr #31
	ldrsb r1, [sp, #0x48]
	asr r2, r0, #1
	ldrsb r0, [sp, #0x49]
	mla r7, r2, r1, r7
	mla r6, r2, r0, r6
	b _020BDB90
_020BDB74:
	tst r4, #0x20
	beq _020BDB90
	ldrsb r1, [sp, #0x48]
	ldrsb r0, [sp, #0x49]
	rsb r2, r2, #0
	mla r7, r2, r1, r7
	mla r6, r2, r0, r6
_020BDB90:
	tst r4, #2
	beq _020BDBC4
	ldr r0, [sp, #0x24]
	ldrsb r2, [sp, #0x49]
	add r0, r0, #1
	rsb r0, r0, #0
	add r0, r0, r0, lsr #31
	ldrsb r1, [sp, #0x48]
	asr r3, r0, #1
	rsb r0, r2, #0
	mla r7, r3, r0, r7
	mla r6, r3, r1, r6
	b _020BDBE8
_020BDBC4:
	tst r4, #4
	beq _020BDBE8
	ldrsb r1, [sp, #0x49]
	ldr r2, [sp, #0x24]
	ldrsb r0, [sp, #0x48]
	rsb r2, r2, #0
	rsb r1, r1, #0
	mla r7, r2, r1, r7
	mla r6, r2, r0, r6
_020BDBE8:
	str r5, [sp]
	ldr r1, [sp, #0x44]
	str r4, [sp, #4]
	ldrb r0, [sp, #0x48]
	str r1, [sp, #8]
	ldrb r4, [sp, #0x49]
	strb r0, [sp, #0xc]
	ldr r3, [sp, #0x20]
	mov r0, r8
	mov r1, r7
	mov r2, r6
	strb r4, [sp, #0xd]
	bl FUN_020BD998
	add sp, sp, #0x28
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020BDB00

	arm_func_start FUN_020BDC24
FUN_020BDC24: @ 0x020BDC24
	push {r3, r4, r5, r6, r7, lr}
	sub sp, sp, #0x10
	ldr ip, [sp, #0x30]
	mov r7, r0
	mov r6, r1
	mov r5, r2
	mov r4, r3
	tst ip, #0x100
	beq _020BDC78
	ldr r0, [r7, #4]
	ldr r1, [r7, #0xc]
	ldr r2, [sp, #0x34]
	bl FUN_020BC4E8
	ldrsb r2, [sp, #0x39]
	ldr r3, [sp, #0x28]
	ldrsb r1, [sp, #0x38]
	sub r3, r3, r0
	rsb r0, r2, #0
	mla r6, r3, r0, r6
	mla r5, r3, r1, r5
	b _020BDCC0
_020BDC78:
	tst ip, #0x80
	beq _020BDCC0
	ldr r0, [r7, #4]
	ldr r1, [r7, #0xc]
	ldr r2, [sp, #0x34]
	bl FUN_020BC4E8
	ldr r1, [sp, #0x28]
	add r0, r0, #1
	ldrsb r3, [sp, #0x39]
	add ip, r1, #1
	add r1, r0, r0, lsr #31
	ldrsb r2, [sp, #0x38]
	add r0, ip, ip, lsr #31
	asr r1, r1, #1
	rsb r1, r1, r0, asr #1
	rsb r0, r3, #0
	mla r6, r1, r0, r6
	mla r5, r1, r2, r5
_020BDCC0:
	ldr r1, [sp, #0x2c]
	ldr r0, [sp, #0x30]
	str r1, [sp]
	ldr r1, [sp, #0x34]
	str r0, [sp, #4]
	ldrb r0, [sp, #0x38]
	str r1, [sp, #8]
	ldrb ip, [sp, #0x39]
	strb r0, [sp, #0xc]
	mov r0, r7
	mov r1, r6
	mov r2, r5
	mov r3, r4
	strb ip, [sp, #0xd]
	bl FUN_020BD998
	add sp, sp, #0x10
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020BDC24

	arm_func_start FUN_020BDD04
FUN_020BDD04: @ 0x020BDD04
	push {r4, r5, r6, lr}
	movs r6, r0
	mov r5, r1
	mov r4, #0
	beq _020BDD7C
	cmp r6, #0
	beq _020BDD34
	ldr r1, [r6]
	ldr r0, _020BDE4C @ =0x4E465452
	cmp r1, r0
	moveq r0, #1
	beq _020BDD38
_020BDD34:
	mov r0, #0
_020BDD38:
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	cmp r0, #0
	beq _020BDD80
	cmp r6, #0
	beq _020BDD68
	ldrh r1, [r6, #6]
	ldr r0, _020BDE50 @ =0x00000101
	cmp r1, r0
	movhs r0, #1
	bhs _020BDD6C
_020BDD68:
	mov r0, #0
_020BDD6C:
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	b _020BDD80
_020BDD7C:
	mov r0, r4
_020BDD80:
	cmp r0, #0
	bne _020BDE00
	cmp r6, #0
	beq _020BDDEC
	beq _020BDDA8
	ldr r1, [r6]
	ldr r0, _020BDE4C @ =0x4E465452
	cmp r1, r0
	moveq r0, #1
	beq _020BDDAC
_020BDDA8:
	mov r0, #0
_020BDDAC:
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	cmp r0, #0
	beq _020BDDF0
	cmp r6, #0
	beq _020BDDD8
	ldrh r0, [r6, #6]
	cmp r0, #0x100
	movhs r0, #1
	bhs _020BDDDC
_020BDDD8:
	mov r0, #0
_020BDDDC:
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	b _020BDDF0
_020BDDEC:
	mov r0, #0
_020BDDF0:
	cmp r0, #0
	bne _020BDDFC
	bl FUN_020D3F48
_020BDDFC:
	mov r4, #1
_020BDE00:
	mov r0, r6
	bl FUN_020BDE58
	ldr r1, _020BDE54 @ =0x46494E46
	mov r0, r6
	bl FUN_020B720C
	cmp r0, #0
	moveq r0, #0
	streq r0, [r5]
	popeq {r4, r5, r6, pc}
	add r0, r0, #8
	str r0, [r5]
	cmp r4, #0
	beq _020BDE44
	ldr r0, [r5]
	mov r1, #0
	ldr r0, [r0, #8]
	strb r1, [r0, #7]
_020BDE44:
	mov r0, #1
	pop {r4, r5, r6, pc}
	.align 2, 0
_020BDE4C: .4byte 0x4E465452
_020BDE50: .4byte 0x00000101
_020BDE54: .4byte 0x46494E46
	arm_func_end FUN_020BDD04

	arm_func_start FUN_020BDE58
FUN_020BDE58: @ 0x020BDE58
	push {r4, r5, r6, lr}
	ldrh r1, [r0, #0xc]
	ldrh r3, [r0, #0xe]
	mov r2, #0
	add r1, r0, r1
	cmp r3, #0
	pople {r4, r5, r6, pc}
	ldr r3, _020BDF24 @ =0x46494E46
	ldr ip, _020BDF28 @ =0x43574448
	ldr r4, _020BDF2C @ =0x434D4150
	ldr lr, _020BDF30 @ =0x43474C50
_020BDE84:
	ldr r5, [r1]
	cmp r5, r4
	bhi _020BDE9C
	bhs _020BDEF8
	cmp r5, lr
	b _020BDF08
_020BDE9C:
	cmp r5, ip
	bhi _020BDEAC
	beq _020BDEE4
	b _020BDF08
_020BDEAC:
	cmp r5, r3
	bne _020BDF08
	ldr r5, [r1, #0x10]
	add r5, r5, r0
	str r5, [r1, #0x10]
	ldr r5, [r1, #0x14]
	cmp r5, #0
	addne r5, r5, r0
	strne r5, [r1, #0x14]
	ldr r5, [r1, #0x18]
	cmp r5, #0
	addne r5, r5, r0
	strne r5, [r1, #0x18]
	b _020BDF08
_020BDEE4:
	ldr r5, [r1, #0xc]
	cmp r5, #0
	addne r5, r5, r0
	strne r5, [r1, #0xc]
	b _020BDF08
_020BDEF8:
	ldr r5, [r1, #0x10]
	cmp r5, #0
	addne r5, r5, r0
	strne r5, [r1, #0x10]
_020BDF08:
	ldrh r5, [r0, #0xe]
	ldr r6, [r1, #4]
	add r2, r2, #1
	cmp r2, r5
	add r1, r1, r6
	blt _020BDE84
	pop {r4, r5, r6, pc}
	.align 2, 0
_020BDF24: .4byte 0x46494E46
_020BDF28: .4byte 0x43574448
_020BDF2C: .4byte 0x434D4150
_020BDF30: .4byte 0x43474C50
	arm_func_end FUN_020BDE58

	arm_func_start FUN_020BDF34
FUN_020BDF34: @ 0x020BDF34
	push {r4, r5, r6, lr}
	ldrsb r3, [r0, #4]
	ldrb r4, [r0, #5]
	mov r5, r1
	cmp r3, r5
	subge r1, r3, r5
	lsrge r2, r4, r1
	strbge r1, [r0, #4]
	bge _020BDF84
	ldr r2, [r0]
	sub r6, r5, r3
	add r1, r2, #1
	str r1, [r0]
	ldrb r3, [r2]
	mov r1, r6
	mov r2, #8
	strb r3, [r0, #5]
	strb r2, [r0, #4]
	bl FUN_020BDF34
	orr r2, r0, r4, lsl r6
_020BDF84:
	rsb r0, r5, #8
	mov r1, #0xff
	and r0, r2, r1, asr r0
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020BDF34

	arm_func_start FUN_020BDF94
FUN_020BDF94: @ 0x020BDF94
	ldr r1, [r0]
	ldrh r2, [r1], #2
	str r1, [r0]
	mov r0, r2
	bx lr
	arm_func_end FUN_020BDF94

	arm_func_start FUN_020BDFA8
FUN_020BDFA8: @ 0x020BDFA8
	cmp r0, #0
	cmpne r1, #0
	moveq r0, #0
	bxeq lr
	ldrb r0, [r0]
	cmp r0, #0x4a
	beq _020BDFEC
	cmp r0, #0x4d
	beq _020BDFD8
	cmp r0, #0x56
	beq _020BDFEC
	b _020BE000
_020BDFD8:
	ldrb r0, [r1, #0x18]
	lsl r0, r0, #1
	add r0, r0, #0x1c
	bic r0, r0, #3
	bx lr
_020BDFEC:
	ldrb r0, [r1, #0x17]
	lsl r0, r0, #1
	add r0, r0, #0x1c
	bic r0, r0, #3
	bx lr
_020BE000:
	mov r0, #0
	bx lr
	arm_func_end FUN_020BDFA8

	arm_func_start FUN_020BE008
FUN_020BE008: @ 0x020BE008
	push {r3, r4, r5, r6, r7, lr}
	mov ip, #0
	str ip, [r0]
	str r1, [r0, #8]
	str ip, [r0, #0x10]
	mov r4, #0x7f
	strb r4, [r0, #0x18]
	mov r4, #0x1000
	str r4, [r0, #4]
	str r3, [r0, #0x14]
	strb ip, [r0, #0x19]
	ldr r3, _020BE09C @ =_02110A00
	str ip, [r0, #0xc]
	ldr r7, [r3]
	cmp r7, #0
	popls {r3, r4, r5, r6, r7, pc}
	ldrb r6, [r1]
	ldr r4, _020BE0A0 @ =_02110A24
_020BE050:
	ldrb r3, [r4, ip, lsl #3]
	lsl r5, ip, #3
	cmp r6, r3
	bne _020BE08C
	add r3, r4, r5
	ldrh lr, [r1, #2]
	ldrh r3, [r3, #2]
	cmp lr, r3
	bne _020BE08C
	ldr r3, _020BE0A4 @ =_02110A28
	ldr r3, [r3, r5]
	cmp r3, #0
	popeq {r3, r4, r5, r6, r7, pc}
	blx r3
	pop {r3, r4, r5, r6, r7, pc}
_020BE08C:
	add ip, ip, #1
	cmp ip, r7
	blo _020BE050
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020BE09C: .4byte _02110A00
_020BE0A0: .4byte _02110A24
_020BE0A4: .4byte _02110A28
	arm_func_end FUN_020BE008

	arm_func_start FUN_020BE0A8
FUN_020BE0A8: @ 0x020BE0A8
	cmp r1, #0
	bxlt lr
	ldrb r2, [r0, #0x19]
	cmp r1, r2
	bxge lr
	add r2, r0, r1, lsl #1
	ldrh r2, [r2, #0x1a]
	lsl r3, r1, #1
	tst r2, #0x100
	bxeq lr
	add r1, r0, #0x1a
	ldrh r0, [r1, r3]
	bic r0, r0, #0x200
	strh r0, [r1, r3]
	bx lr
	arm_func_end FUN_020BE0A8

	arm_func_start FUN_020BE0E4
FUN_020BE0E4: @ 0x020BE0E4
	cmp r1, #0
	bxlt lr
	ldrb r2, [r0, #0x19]
	cmp r1, r2
	bxge lr
	add r2, r0, r1, lsl #1
	ldrh r2, [r2, #0x1a]
	lsl r3, r1, #1
	tst r2, #0x100
	bxeq lr
	add r1, r0, #0x1a
	ldrh r0, [r1, r3]
	orr r0, r0, #0x200
	strh r0, [r1, r3]
	bx lr
	arm_func_end FUN_020BE0E4

	arm_func_start FUN_020BE120
FUN_020BE120: @ 0x020BE120
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	mov r1, r5
	mov r0, #0
	mov r2, #0x54
	bl FUN_020D47EC
	ldr r0, _020BE168 @ =_02110A20
	ldr r1, _020BE16C @ =_02110A1C
	ldr r2, [r0]
	ldr r0, _020BE170 @ =_02110A18
	str r2, [r5, #0xc]
	ldr r1, [r1]
	str r1, [r5, #0x14]
	ldr r0, [r0]
	str r0, [r5, #0x1c]
	str r4, [r5, #4]
	pop {r3, r4, r5, pc}
	.align 2, 0
_020BE168: .4byte _02110A20
_020BE16C: .4byte _02110A1C
_020BE170: .4byte _02110A18
	arm_func_end FUN_020BE120

	arm_func_start FUN_020BE174
FUN_020BE174: @ 0x020BE174
	ldr ip, [r0]
	cmp ip, #0
	streq r1, [r0]
	bxeq lr
	ldr r2, [ip, #0x10]
	cmp r2, #0
	bne _020BE1D4
	ldrb r3, [ip, #0x18]
	ldrb r2, [r1, #0x18]
	cmp r3, r2
	bls _020BE1CC
	ldr r2, [r1, #0x10]
	mov r3, r1
	cmp r2, #0
	beq _020BE1C0
_020BE1B0:
	ldr r3, [r3, #0x10]
	ldr r2, [r3, #0x10]
	cmp r2, #0
	bne _020BE1B0
_020BE1C0:
	str ip, [r3, #0x10]
	str r1, [r0]
	bx lr
_020BE1CC:
	str r1, [ip, #0x10]
	bx lr
_020BE1D4:
	beq _020BE224
	ldrb r3, [r1, #0x18]
_020BE1DC:
	ldrb r0, [r2, #0x18]
	cmp r0, r3
	blo _020BE214
	ldr r0, [r1, #0x10]
	mov r3, r1
	cmp r0, #0
	beq _020BE208
_020BE1F8:
	ldr r3, [r3, #0x10]
	ldr r0, [r3, #0x10]
	cmp r0, #0
	bne _020BE1F8
_020BE208:
	str r1, [ip, #0x10]
	str r2, [r3, #0x10]
	bx lr
_020BE214:
	mov ip, r2
	ldr r2, [r2, #0x10]
	cmp r2, #0
	bne _020BE1DC
_020BE224:
	str r1, [ip, #0x10]
	bx lr
	arm_func_end FUN_020BE174

	arm_func_start FUN_020BE22C
FUN_020BE22C: @ 0x020BE22C
	push {r3, r4, r5, lr}
	cmp r1, #0
	popeq {r3, r4, r5, pc}
	mov r3, #1
	mov r4, #0
_020BE240:
	ldrb r2, [r1, #0x19]
	mov r5, r4
	cmp r2, #0
	ble _020BE284
_020BE250:
	add r2, r1, r5, lsl #1
	ldrh r2, [r2, #0x1a]
	tst r2, #0x100
	beq _020BE274
	asr lr, r5, #5
	ldr ip, [r0, lr, lsl #2]
	and r2, r5, #0x1f
	orr r2, ip, r3, lsl r2
	str r2, [r0, lr, lsl #2]
_020BE274:
	ldrb r2, [r1, #0x19]
	add r5, r5, #1
	cmp r5, r2
	blt _020BE250
_020BE284:
	ldr r1, [r1, #0x10]
	cmp r1, #0
	bne _020BE240
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020BE22C

	arm_func_start FUN_020BE294
FUN_020BE294: @ 0x020BE294
	push {r3, r4, r5, lr}
	movs r4, r1
	mov r5, r0
	ldrne r0, [r4, #8]
	cmpne r0, #0
	popeq {r3, r4, r5, pc}
	ldrb r0, [r0]
	cmp r0, #0x4a
	beq _020BE2E4
	cmp r0, #0x4d
	beq _020BE2CC
	cmp r0, #0x56
	beq _020BE2FC
	pop {r3, r4, r5, pc}
_020BE2CC:
	add r0, r5, #0x3c
	bl FUN_020BE22C
	mov r1, r4
	add r0, r5, #8
	bl FUN_020BE174
	pop {r3, r4, r5, pc}
_020BE2E4:
	add r0, r5, #0x44
	bl FUN_020BE22C
	mov r1, r4
	add r0, r5, #0x10
	bl FUN_020BE174
	pop {r3, r4, r5, pc}
_020BE2FC:
	add r0, r5, #0x4c
	bl FUN_020BE22C
	mov r1, r4
	add r0, r5, #0x18
	bl FUN_020BE174
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020BE294

	arm_func_start FUN_020BE314
FUN_020BE314: @ 0x020BE314
	ldr r3, [r0]
	cmp r3, #0
	moveq r0, #0
	bxeq lr
	cmp r3, r1
	bne _020BE344
	ldr r3, [r3, #0x10]
	mov r2, #0
	str r3, [r0]
	str r2, [r1, #0x10]
	mov r0, #1
	bx lr
_020BE344:
	ldr r2, [r3, #0x10]
	cmp r2, #0
	beq _020BE380
_020BE350:
	cmp r2, r1
	bne _020BE370
	ldr r1, [r2, #0x10]
	mov r0, #0
	str r1, [r3, #0x10]
	str r0, [r2, #0x10]
	mov r0, #1
	bx lr
_020BE370:
	mov r3, r2
	ldr r2, [r2, #0x10]
	cmp r2, #0
	bne _020BE350
_020BE380:
	mov r0, #0
	bx lr
	arm_func_end FUN_020BE314

	arm_func_start FUN_020BE388
FUN_020BE388: @ 0x020BE388
	push {r3, r4, r5, lr}
	mov r5, r0
	add r0, r5, #8
	mov r4, r1
	bl FUN_020BE314
	cmp r0, #0
	bne _020BE3CC
	mov r1, r4
	add r0, r5, #0x10
	bl FUN_020BE314
	cmp r0, #0
	bne _020BE3CC
	mov r1, r4
	add r0, r5, #0x18
	bl FUN_020BE314
	cmp r0, #0
	popeq {r3, r4, r5, pc}
_020BE3CC:
	ldr r0, [r5]
	orr r0, r0, #0x10
	str r0, [r5]
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020BE388

	arm_func_start FUN_020BE3DC
FUN_020BE3DC: @ 0x020BE3DC
	cmp r0, #0
	ldrhne r0, [r0, #0xc]
	lslne r0, r0, #3
	moveq r0, #0
	bx lr
	arm_func_end FUN_020BE3DC

	arm_func_start FUN_020BE3F0
FUN_020BE3F0: @ 0x020BE3F0
	cmp r0, #0
	ldrhne r0, [r0, #0x1c]
	lslne r0, r0, #3
	moveq r0, #0
	bx lr
	arm_func_end FUN_020BE3F0

	arm_func_start FUN_020BE404
FUN_020BE404: @ 0x020BE404
	cmp r1, #0
	strne r1, [r0, #8]
	cmp r2, #0
	strne r2, [r0, #0x18]
	bx lr
	arm_func_end FUN_020BE404

	arm_func_start FUN_020BE418
FUN_020BE418: @ 0x020BE418
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	movs r8, r1
	mov sb, r0
	beq _020BE42C
	bl FUN_020D08EC
_020BE42C:
	ldrh r0, [sb, #0xc]
	lsls r2, r0, #3
	beq _020BE45C
	ldr r0, [sb, #8]
	ldr r3, [sb, #0x14]
	lsl r1, r0, #0x10
	add r0, sb, r3
	lsr r1, r1, #0xd
	bl FUN_020D0948
	ldrh r0, [sb, #0x10]
	orr r0, r0, #1
	strh r0, [sb, #0x10]
_020BE45C:
	ldrh r0, [sb, #0x1c]
	lsls r6, r0, #3
	beq _020BE4BC
	ldr r1, [sb, #0x18]
	ldr r0, [sb, #0x24]
	lsl r4, r1, #0x10
	lsr r7, r4, #0xd
	mov r1, r7
	mov r2, r6
	add r0, sb, r0
	ldr r5, [sb, #0x28]
	bl FUN_020D0948
	ldr r0, _020BE4CC @ =0x0001FFFF
	and r1, r7, #0x40000
	and r0, r0, r4, lsr #13
	lsr r0, r0, #1
	add r2, r0, #0x20000
	add r0, sb, r5
	add r1, r2, r1, lsr #2
	lsr r2, r6, #1
	bl FUN_020D0948
	ldrh r0, [sb, #0x20]
	orr r0, r0, #1
	strh r0, [sb, #0x20]
_020BE4BC:
	cmp r8, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	bl FUN_020D0A88
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0
_020BE4CC: .4byte 0x0001FFFF
	arm_func_end FUN_020BE418

	arm_func_start FUN_020BE4D0
FUN_020BE4D0: @ 0x020BE4D0
	cmp r1, #0
	beq _020BE4F4
	ldrh ip, [r0, #0x10]
	mov r3, #0
	bic ip, ip, #1
	strh ip, [r0, #0x10]
	ldr ip, [r0, #8]
	str ip, [r1]
	str r3, [r0, #8]
_020BE4F4:
	cmp r2, #0
	bxeq lr
	ldrh r3, [r0, #0x20]
	mov r1, #0
	bic r3, r3, #1
	strh r3, [r0, #0x20]
	ldr r3, [r0, #0x18]
	str r3, [r2]
	str r1, [r0, #0x18]
	bx lr
	arm_func_end FUN_020BE4D0

	arm_func_start FUN_020BE51C
FUN_020BE51C: @ 0x020BE51C
	cmp r0, #0
	ldrhne r0, [r0, #0x30]
	lslne r0, r0, #3
	moveq r0, #0
	bx lr
	arm_func_end FUN_020BE51C

	arm_func_start FUN_020BE530
FUN_020BE530: @ 0x020BE530
	str r1, [r0, #0x2c]
	bx lr
	arm_func_end FUN_020BE530

	arm_func_start FUN_020BE538
FUN_020BE538: @ 0x020BE538
	push {r3, r4, r5, lr}
	movs r5, r1
	mov r4, r0
	beq _020BE54C
	bl FUN_020D0AD4
_020BE54C:
	ldr r0, [r4, #0x2c]
	ldrh r2, [r4, #0x30]
	lsl r1, r0, #0x10
	ldr r3, [r4, #0x38]
	lsr r1, r1, #0xd
	add r0, r4, r3
	lsl r2, r2, #3
	bl FUN_020D0B08
	ldrh r0, [r4, #0x32]
	cmp r5, #0
	orr r0, r0, #1
	strh r0, [r4, #0x32]
	popeq {r3, r4, r5, pc}
	bl FUN_020D0B74
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020BE538

	arm_func_start FUN_020BE588
FUN_020BE588: @ 0x020BE588
	ldrh r2, [r0, #0x32]
	mov r1, #0
	bic r2, r2, #1
	strh r2, [r0, #0x32]
	ldr r2, [r0, #0x2c]
	str r1, [r0, #0x2c]
	mov r0, r2
	bx lr
	arm_func_end FUN_020BE588

	arm_func_start FUN_020BE5A8
FUN_020BE5A8: @ 0x020BE5A8
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sb, r1
	mov r8, r3
	ldr r1, [r8]
	mov sl, r0
	and r0, r1, #0x1c000000
	ldrh r3, [sb]
	cmp r0, #0x14000000
	mov r5, #0
	add r0, sl, r3
	str r0, [sp]
	ldrne r0, [r2, #8]
	ldreq r0, [r2, #0x18]
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	bic fp, r0, #0xe0000000
	ldrb r0, [sb, #2]
	cmp r0, #0
	bls _020BE6C4
	add r4, sl, #4
_020BE5F8:
	ldr r0, [sp]
	cmp sl, #0
	ldrb r2, [r0, r5]
	beq _020BE648
	cmp r4, #0
	beq _020BE634
	ldrb r0, [sl, #5]
	cmp r2, r0
	bhs _020BE634
	ldrh r0, [sl, #0xa]
	add r1, r4, r0
	add r1, r1, #4
	ldrh r0, [r4, r0]
	mla r1, r0, r2, r1
	b _020BE638
_020BE634:
	mov r1, #0
_020BE638:
	cmp r1, #0
	ldrne r0, [r1]
	addne r7, sl, r0
	bne _020BE64C
_020BE648:
	mov r7, #0
_020BE64C:
	ldr r0, [r8]
	ldr r1, [r7, #0x14]
	add r0, r0, fp
	orr r0, r1, r0
	str r0, [r7, #0x14]
	ldr r3, [r8, #4]
	ldr r0, _020BE6D4 @ =0x000007FF
	ldrh r1, [r7, #0x20]
	and r2, r3, r0
	and r0, r3, r0, lsl #11
	lsr r6, r0, #0xb
	cmp r2, r1
	moveq r0, #0x1000
	beq _020BE690
	lsl r0, r2, #0xc
	lsl r1, r1, #0xc
	bl FUN_020CCBA0
_020BE690:
	str r0, [r7, #0x24]
	ldrh r1, [r7, #0x22]
	cmp r6, r1
	moveq r0, #0x1000
	beq _020BE6B0
	lsl r0, r6, #0xc
	lsl r1, r1, #0xc
	bl FUN_020CCBA0
_020BE6B0:
	str r0, [r7, #0x28]
	ldrb r0, [sb, #2]
	add r5, r5, #1
	cmp r5, r0
	blo _020BE5F8
_020BE6C4:
	ldrb r0, [sb, #3]
	orr r0, r0, #1
	strb r0, [sb, #3]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020BE6D4: .4byte 0x000007FF
	arm_func_end FUN_020BE5A8

	arm_func_start FUN_020BE6D8
FUN_020BE6D8: @ 0x020BE6D8
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	ldrh r3, [r1]
	ldrb r2, [r1, #2]
	mov lr, #0
	add ip, r0, r3
	cmp r2, #0
	bls _020BE77C
	ldr r4, _020BE78C @ =0xC00F0000
	add r2, r0, #4
	mov r7, lr
	mov r6, lr
	mov r5, #0x1000
_020BE708:
	cmp r0, #0
	ldrb r3, [ip, lr]
	beq _020BE754
	cmp r2, #0
	beq _020BE740
	ldrb r8, [r0, #5]
	cmp r3, r8
	bhs _020BE740
	ldrh sb, [r0, #0xa]
	ldrh r8, [r2, sb]
	add sb, r2, sb
	add sb, sb, #4
	mla r3, r8, r3, sb
	b _020BE744
_020BE740:
	mov r3, r7
_020BE744:
	cmp r3, #0
	ldrne r3, [r3]
	addne r8, r0, r3
	bne _020BE758
_020BE754:
	mov r8, r6
_020BE758:
	ldr r3, [r8, #0x14]
	add lr, lr, #1
	and r3, r3, r4
	str r3, [r8, #0x14]
	str r5, [r8, #0x24]
	str r5, [r8, #0x28]
	ldrb r3, [r1, #2]
	cmp lr, r3
	blo _020BE708
_020BE77C:
	ldrb r0, [r1, #3]
	bic r0, r0, #1
	strb r0, [r1, #3]
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0
_020BE78C: .4byte 0xC00F0000
	arm_func_end FUN_020BE6D8

	arm_func_start FUN_020BE790
FUN_020BE790: @ 0x020BE790
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sl, r1
	cmp r0, #0
	ldrne r1, [r0, #8]
	mov r7, #1
	cmpne r1, #0
	addne r8, r0, r1
	moveq r8, #0
	ldrh r0, [r8]
	mov r6, #0
	add r5, r8, r0
	ldrb r0, [r5, #1]
	cmp r0, #0
	bls _020BE888
	mov sb, r6
	mov r4, r6
	mov fp, r6
_020BE7D4:
	cmp r5, #0
	beq _020BE800
	ldrb r0, [r5, #1]
	cmp r6, r0
	bhs _020BE800
	ldrh r0, [r5, #6]
	add r1, r5, r0
	ldrh r0, [r1, #2]
	add r0, r1, r0
	add r1, r0, sb
	b _020BE804
_020BE800:
	mov r1, r4
_020BE804:
	cmp sl, #0
	moveq r3, fp
	beq _020BE81C
	add r0, sl, #0x3c
	bl FUN_020C3818
	mov r3, r0
_020BE81C:
	cmp r3, #0
	beq _020BE870
	cmp r5, #0
	beq _020BE850
	ldrb r0, [r5, #1]
	cmp r6, r0
	bhs _020BE850
	ldrh r1, [r5, #6]
	ldrh r0, [r5, r1]
	add r1, r5, r1
	add r1, r1, #4
	mla r1, r0, r6, r1
	b _020BE854
_020BE850:
	mov r1, #0
_020BE854:
	ldrb r0, [r1, #3]
	tst r0, #1
	bne _020BE874
	mov r0, r8
	mov r2, sl
	bl FUN_020BE5A8
	b _020BE874
_020BE870:
	mov r7, #0
_020BE874:
	ldrb r0, [r5, #1]
	add r6, r6, #1
	add sb, sb, #0x10
	cmp r6, r0
	blo _020BE7D4
_020BE888:
	mov r0, r7
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_020BE790

	arm_func_start FUN_020BE890
FUN_020BE890: @ 0x020BE890
	push {r3, r4, r5, lr}
	mov ip, r1
	cmp r0, #0
	ldrne r1, [r0, #8]
	cmpne r1, #0
	addne r0, r0, r1
	moveq r0, #0
	ldrh r1, [r0]
	cmp ip, #0
	add r1, r0, r1
	beq _020BE8F0
	adds r5, ip, #0x3c
	beq _020BE8E8
	ldrb r4, [ip, #0x3d]
	cmp r3, r4
	bhs _020BE8E8
	ldrh lr, [ip, #0x42]
	ldrh r4, [r5, lr]
	add lr, r5, lr
	add lr, lr, #4
	mla r3, r4, r3, lr
	b _020BE8F4
_020BE8E8:
	mov r3, #0
	b _020BE8F4
_020BE8F0:
	mov r3, #0
_020BE8F4:
	cmp r1, #0
	beq _020BE920
	ldrb r4, [r1, #1]
	cmp r2, r4
	bhs _020BE920
	ldrh r4, [r1, #6]
	ldrh lr, [r1, r4]
	add r1, r1, r4
	add r1, r1, #4
	mla r1, lr, r2, r1
	b _020BE924
_020BE920:
	mov r1, #0
_020BE924:
	cmp r1, #0
	moveq r0, #0
	popeq {r3, r4, r5, pc}
	mov r2, ip
	bl FUN_020BE5A8
	mov r0, #1
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020BE890

	arm_func_start FUN_020BE940
FUN_020BE940: @ 0x020BE940
	push {r3, r4, r5, r6, r7, lr}
	cmp r0, #0
	ldrne r1, [r0, #8]
	mov r5, #0
	cmpne r1, #0
	addne r6, r0, r1
	moveq r6, #0
	ldrh r0, [r6]
	add r4, r6, r0
	ldrb r0, [r4, #1]
	cmp r0, #0
	popls {r3, r4, r5, r6, r7, pc}
	mov r7, r5
_020BE974:
	cmp r4, #0
	beq _020BE9A0
	ldrb r0, [r4, #1]
	cmp r5, r0
	bhs _020BE9A0
	ldrh r1, [r4, #6]
	ldrh r0, [r4, r1]
	add r1, r4, r1
	add r1, r1, #4
	mla r1, r0, r5, r1
	b _020BE9A4
_020BE9A0:
	mov r1, r7
_020BE9A4:
	ldrb r0, [r1, #3]
	tst r0, #1
	beq _020BE9B8
	mov r0, r6
	bl FUN_020BE6D8
_020BE9B8:
	ldrb r0, [r4, #1]
	add r5, r5, #1
	cmp r5, r0
	blo _020BE974
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020BE940

	arm_func_start FUN_020BE9CC
FUN_020BE9CC: @ 0x020BE9CC
	push {r4, r5, r6, r7, r8, lr}
	ldr r2, [r2, #0x2c]
	ldrh r5, [r1]
	lsl r2, r2, #0x10
	lsr r2, r2, #0x10
	ldrh r4, [r3, #2]
	bic r2, r2, #0xe0000000
	lsl r2, r2, #0x10
	tst r4, #1
	add ip, r0, r5
	lsr r5, r2, #0x10
	ldrh r4, [r3]
	bne _020BEA10
	lsl r2, r4, #0xf
	lsl r3, r5, #0xf
	lsr r4, r2, #0x10
	lsr r5, r3, #0x10
_020BEA10:
	ldrb r2, [r1, #2]
	mov r3, #0
	cmp r2, #0
	bls _020BEA9C
	add r2, r4, r5
	lsl lr, r2, #0x10
	add r2, r0, #4
	lsr r4, lr, #0x10
	mov r6, r3
	mov r5, r3
_020BEA38:
	cmp r0, #0
	ldrb r8, [ip, r3]
	beq _020BEA84
	cmp r2, #0
	beq _020BEA70
	ldrb r7, [r0, #5]
	cmp r8, r7
	bhs _020BEA70
	ldrh r7, [r0, #0xa]
	ldrh lr, [r2, r7]
	add r7, r2, r7
	add r7, r7, #4
	mla r7, lr, r8, r7
	b _020BEA74
_020BEA70:
	mov r7, r6
_020BEA74:
	cmp r7, #0
	ldrne lr, [r7]
	addne r7, r0, lr
	bne _020BEA88
_020BEA84:
	mov r7, r5
_020BEA88:
	strh r4, [r7, #0x1c]
	ldrb lr, [r1, #2]
	add r3, r3, #1
	cmp r3, lr
	blo _020BEA38
_020BEA9C:
	ldrb r0, [r1, #3]
	orr r0, r0, #1
	strb r0, [r1, #3]
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020BE9CC

	arm_func_start FUN_020BEAAC
FUN_020BEAAC: @ 0x020BEAAC
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sl, r1
	cmp r0, #0
	ldrne r1, [r0, #8]
	mov r7, #1
	cmpne r1, #0
	addne r8, r0, r1
	moveq r8, #0
	ldrh r0, [r8, #2]
	mov r6, #0
	add r5, r8, r0
	ldrb r0, [r5, #1]
	cmp r0, #0
	bls _020BEBAC
	mov sb, r6
	mov r4, r6
	mov fp, r6
_020BEAF0:
	cmp r5, #0
	beq _020BEB1C
	ldrb r0, [r5, #1]
	cmp r6, r0
	bhs _020BEB1C
	ldrh r0, [r5, #6]
	add r1, r5, r0
	ldrh r0, [r1, #2]
	add r0, r1, r0
	add r1, r0, sb
	b _020BEB20
_020BEB1C:
	mov r1, r4
_020BEB20:
	cmp sl, #0
	ldrhne r0, [sl, #0x34]
	cmpne r0, #0
	moveq r3, fp
	beq _020BEB40
	add r0, sl, r0
	bl FUN_020C3818
	mov r3, r0
_020BEB40:
	cmp r3, #0
	beq _020BEB94
	cmp r5, #0
	beq _020BEB74
	ldrb r0, [r5, #1]
	cmp r6, r0
	bhs _020BEB74
	ldrh r1, [r5, #6]
	ldrh r0, [r5, r1]
	add r1, r5, r1
	add r1, r1, #4
	mla r1, r0, r6, r1
	b _020BEB78
_020BEB74:
	mov r1, #0
_020BEB78:
	ldrb r0, [r1, #3]
	tst r0, #1
	bne _020BEB98
	mov r0, r8
	mov r2, sl
	bl FUN_020BE9CC
	b _020BEB98
_020BEB94:
	mov r7, #0
_020BEB98:
	ldrb r0, [r5, #1]
	add r6, r6, #1
	add sb, sb, #0x10
	cmp r6, r0
	blo _020BEAF0
_020BEBAC:
	mov r0, r7
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_020BEAAC

	arm_func_start FUN_020BEBB4
FUN_020BEBB4: @ 0x020BEBB4
	push {r3, r4, r5, lr}
	mov ip, r1
	cmp r0, #0
	ldrne r1, [r0, #8]
	cmpne r1, #0
	addne r0, r0, r1
	moveq r0, #0
	ldrh r1, [r0, #2]
	cmp ip, #0
	ldrhne r4, [ip, #0x34]
	add r1, r0, r1
	cmpne r4, #0
	beq _020BEC1C
	adds r5, ip, r4
	beq _020BEC14
	ldrb r4, [r5, #1]
	cmp r3, r4
	bhs _020BEC14
	ldrh lr, [r5, #6]
	ldrh r4, [r5, lr]
	add lr, r5, lr
	add lr, lr, #4
	mla r3, r4, r3, lr
	b _020BEC20
_020BEC14:
	mov r3, #0
	b _020BEC20
_020BEC1C:
	mov r3, #0
_020BEC20:
	cmp r1, #0
	beq _020BEC4C
	ldrb r4, [r1, #1]
	cmp r2, r4
	bhs _020BEC4C
	ldrh r4, [r1, #6]
	ldrh lr, [r1, r4]
	add r1, r1, r4
	add r1, r1, #4
	mla r1, lr, r2, r1
	b _020BEC50
_020BEC4C:
	mov r1, #0
_020BEC50:
	cmp r1, #0
	beq _020BEC74
	ldrb r2, [r1, #3]
	tst r2, #1
	bne _020BEC74
	mov r2, ip
	bl FUN_020BE9CC
	mov r0, #1
	pop {r3, r4, r5, pc}
_020BEC74:
	mov r0, #0
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020BEBB4

	arm_func_start FUN_020BEC7C
FUN_020BEC7C: @ 0x020BEC7C
	cmp r0, #0
	ldrne r1, [r0, #8]
	mov ip, #0
	cmpne r1, #0
	addne r1, r0, r1
	moveq r1, #0
	ldrh r0, [r1, #2]
	add r3, r1, r0
	ldrb r0, [r3, #1]
	cmp r0, #0
	bxls lr
	mov r1, ip
_020BECAC:
	cmp r3, #0
	beq _020BECD8
	ldrb r0, [r3, #1]
	cmp ip, r0
	bhs _020BECD8
	ldrh r2, [r3, #6]
	ldrh r0, [r3, r2]
	add r2, r3, r2
	add r2, r2, #4
	mla r2, r0, ip, r2
	b _020BECDC
_020BECD8:
	mov r2, r1
_020BECDC:
	ldrb r0, [r2, #3]
	add ip, ip, #1
	tst r0, #1
	bicne r0, r0, #1
	strbne r0, [r2, #3]
	ldrb r0, [r3, #1]
	cmp ip, r0
	blo _020BECAC
	bx lr
	arm_func_end FUN_020BEC7C

	arm_func_start FUN_020BED00
FUN_020BED00: @ 0x020BED00
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sl, r0
	ldrb r0, [sl, #9]
	mov sb, r1
	mov r7, #1
	cmp r0, #0
	mov r6, #0
	bls _020BEDA8
	add r5, sl, #8
	mov r4, r6
	mov fp, r6
_020BED2C:
	cmp sl, #0
	beq _020BED74
	cmp r5, #0
	beq _020BED60
	ldrb r0, [sl, #9]
	cmp r6, r0
	bhs _020BED60
	ldrh r1, [sl, #0xe]
	ldrh r0, [r5, r1]
	add r1, r5, r1
	add r1, r1, #4
	mla r1, r0, r6, r1
	b _020BED64
_020BED60:
	mov r1, r4
_020BED64:
	cmp r1, #0
	ldrne r0, [r1]
	addne r8, sl, r0
	bne _020BED78
_020BED74:
	mov r8, fp
_020BED78:
	mov r0, r8
	mov r1, sb
	bl FUN_020BE790
	and r7, r7, r0
	mov r0, r8
	mov r1, sb
	bl FUN_020BEAAC
	ldrb r1, [sl, #9]
	add r6, r6, #1
	and r7, r7, r0
	cmp r6, r1
	blo _020BED2C
_020BEDA8:
	mov r0, r7
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_020BED00

	arm_func_start FUN_020BEDB0
FUN_020BEDB0: @ 0x020BEDB0
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r6, r0
	ldrb r0, [r6, #9]
	mov r5, #0
	cmp r0, #0
	popls {r3, r4, r5, r6, r7, r8, sb, pc}
	add r4, r6, #8
	mov r8, r5
	mov r7, r5
_020BEDD4:
	cmp r6, #0
	beq _020BEE1C
	cmp r4, #0
	beq _020BEE08
	ldrb r0, [r6, #9]
	cmp r5, r0
	bhs _020BEE08
	ldrh r1, [r6, #0xe]
	ldrh r0, [r4, r1]
	add r1, r4, r1
	add r1, r1, #4
	mla r1, r0, r5, r1
	b _020BEE0C
_020BEE08:
	mov r1, r8
_020BEE0C:
	cmp r1, #0
	ldrne r0, [r1]
	addne sb, r6, r0
	bne _020BEE20
_020BEE1C:
	mov sb, r7
_020BEE20:
	mov r0, sb
	bl FUN_020BE940
	mov r0, sb
	bl FUN_020BEC7C
	ldrb r0, [r6, #9]
	add r5, r5, #1
	cmp r5, r0
	blo _020BEDD4
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	arm_func_end FUN_020BEDB0

	arm_func_start FUN_020BEE44
FUN_020BEE44: @ 0x020BEE44
	push {r3, lr}
	ldr r2, _020BEF58 @ =0x17101610
	ldr r1, _020BEF5C @ =0x021DA49C
	mov r0, #0
	str r2, [r1]
	str r0, [r1, #4]
	mov r2, #2
	ldr r0, _020BEF60 @ =0x32323232
	str r2, [r1, #0x48]
	ldr r2, _020BEF64 @ =0x60293130
	str r0, [r1, #0x7c]
	ldr r0, _020BEF68 @ =0x33333333
	str r2, [r1, #0x90]
	ldr r2, _020BEF6C @ =0x002A1B19
	str r0, [r1, #0xa4]
	ldr r0, _020BEF70 @ =0x021DA4E8
	str r2, [r1, #0xb8]
	bl FUN_020CB6AC
	ldr r0, _020BEF74 @ =0x021DA4A4
	bl FUN_020CC044
	ldr ip, _020BEF78 @ =0x40000200
	ldr r3, _020BEF7C @ =0xC0080000
	ldr r2, _020BEF80 @ =0x2D8B62D8
	ldr r1, _020BEF5C @ =0x021DA49C
	sub r0, ip, #0xc0000001
	str r2, [r1, #0x80]
	str ip, [r1, #0x84]
	str r0, [r1, #0x88]
	ldr r2, _020BEF84 @ =0x4210C210
	str r3, [r1, #0x8c]
	str r2, [r1, #0x94]
	ldr r0, _020BEF88 @ =0x001F008F
	str r2, [r1, #0x98]
	str r0, [r1, #0x9c]
	sub r2, r3, #0x90000
	ldr r0, _020BEF8C @ =0x00007FFF
	str r2, [r1, #0xa0]
	str r0, [r1, #0xa8]
	mov r2, #0x4000001f
	ldr r0, _020BEF90 @ =0x800003E0
	str r2, [r1, #0xac]
	str r0, [r1, #0xb0]
	rsb r0, ip, #0x7e00
	str r0, [r1, #0xb4]
	mov r2, #0
	str r2, [r1, #0xe0]
	str r2, [r1, #0xe4]
	ldr r0, _020BEF94 @ =0x021DA558
	str r2, [r1, #0xe8]
	bl FUN_020CAFEC
	mov r1, #0
	ldr r0, _020BEF5C @ =0x021DA49C
	mov r2, #0x1000
	str r2, [r0, #0xec]
	str r2, [r0, #0xf0]
	str r2, [r0, #0xf4]
	str r1, [r0, #0xf8]
	str r1, [r0, #0xfc]
	str r1, [r0, #0x248]
	str r1, [r0, #0x244]
	str r1, [r0, #0x240]
	str r1, [r0, #0x254]
	str r1, [r0, #0x24c]
	str r2, [r0, #0x250]
	str r1, [r0, #0x25c]
	str r1, [r0, #0x258]
	sub r1, r1, #0x1000
	str r1, [r0, #0x260]
	pop {r3, pc}
	.align 2, 0
_020BEF58: .4byte 0x17101610
_020BEF5C: .4byte 0x021DA49C
_020BEF60: .4byte 0x32323232
_020BEF64: .4byte 0x60293130
_020BEF68: .4byte 0x33333333
_020BEF6C: .4byte 0x002A1B19
_020BEF70: .4byte 0x021DA4E8
_020BEF74: .4byte 0x021DA4A4
_020BEF78: .4byte 0x40000200
_020BEF7C: .4byte 0xC0080000
_020BEF80: .4byte 0x2D8B62D8
_020BEF84: .4byte 0x4210C210
_020BEF88: .4byte 0x001F008F
_020BEF8C: .4byte 0x00007FFF
_020BEF90: .4byte 0x800003E0
_020BEF94: .4byte 0x021DA558
	arm_func_end FUN_020BEE44

	arm_func_start FUN_020BEF98
FUN_020BEF98: @ 0x020BEF98
	push {r3, lr}
	ldr r0, _020BEFCC @ =0x021DA49C
	ldr r1, _020BEFD0 @ =0x021DA49C
	ldr r0, [r0]
	add r1, r1, #4
	mov r2, #0x3e
	bl FUN_020C2528
	ldr r0, _020BEFCC @ =0x021DA49C
	ldr r1, [r0, #0xfc]
	bic r1, r1, #1
	bic r1, r1, #2
	str r1, [r0, #0xfc]
	pop {r3, pc}
	.align 2, 0
_020BEFCC: .4byte 0x021DA49C
_020BEFD0: .4byte 0x021DA49C
	arm_func_end FUN_020BEF98

	arm_func_start FUN_020BEFD4
FUN_020BEFD4: @ 0x020BEFD4
	cmp r0, #0
	bxeq lr
	ldr r3, _020BEFFC @ =0x021DA57C
	ldm r0, {r0, r1, r2}
	stm r3, {r0, r1, r2}
	ldr r0, _020BF000 @ =0x021DA49C
	ldr r1, [r0, #0xfc]
	bic r1, r1, #0xa4
	str r1, [r0, #0xfc]
	bx lr
	.align 2, 0
_020BEFFC: .4byte 0x021DA57C
_020BF000: .4byte 0x021DA49C
	arm_func_end FUN_020BEFD4

	arm_func_start FUN_020BF004
FUN_020BF004: @ 0x020BF004
	cmp r0, #0
	bxeq lr
	ldr r3, _020BF02C @ =0x021DA588
	ldm r0, {r0, r1, r2}
	stm r3, {r0, r1, r2}
	ldr r0, _020BF030 @ =0x021DA49C
	ldr r1, [r0, #0xfc]
	bic r1, r1, #0xa4
	str r1, [r0, #0xfc]
	bx lr
	.align 2, 0
_020BF02C: .4byte 0x021DA588
_020BF030: .4byte 0x021DA49C
	arm_func_end FUN_020BF004

	arm_func_start FUN_020BF034
FUN_020BF034: @ 0x020BF034
	push {r3, lr}
	ldr ip, _020BF068 @ =0x000003FF
	asr r2, r2, #3
	asr lr, r3, #3
	and r3, ip, r1, asr #3
	lsl r1, r2, #0x16
	lsl r2, lr, #0x16
	orr r1, r3, r1, lsr #12
	orr r2, r1, r2, lsr #2
	ldr r1, _020BF06C @ =0x021DA51C
	orr r2, r2, r0, lsl #30
	str r2, [r1, r0, lsl #2]
	pop {r3, pc}
	.align 2, 0
_020BF068: .4byte 0x000003FF
_020BF06C: .4byte 0x021DA51C
	arm_func_end FUN_020BF034

	arm_func_start FUN_020BF070
FUN_020BF070: @ 0x020BF070
	ldr r2, _020BF080 @ =0x021DA544
	orr r1, r1, r0, lsl #30
	str r1, [r2, r0, lsl #2]
	bx lr
	.align 2, 0
_020BF080: .4byte 0x021DA544
	arm_func_end FUN_020BF070

	arm_func_start FUN_020BF084
FUN_020BF084: @ 0x020BF084
	cmp r2, #0
	movne r2, #1
	orr r1, r0, r1, lsl #16
	moveq r2, #0
	ldr r0, _020BF0A4 @ =0x021DA49C
	orr r1, r1, r2, lsl #15
	str r1, [r0, #0x94]
	bx lr
	.align 2, 0
_020BF0A4: .4byte 0x021DA49C
	arm_func_end FUN_020BF084

	arm_func_start FUN_020BF0A8
FUN_020BF0A8: @ 0x020BF0A8
	cmp r2, #0
	movne r2, #1
	orr r1, r0, r1, lsl #16
	moveq r2, #0
	ldr r0, _020BF0C8 @ =0x021DA49C
	orr r1, r1, r2, lsl #15
	str r1, [r0, #0x98]
	bx lr
	.align 2, 0
_020BF0C8: .4byte 0x021DA49C
	arm_func_end FUN_020BF0A8

	arm_func_start FUN_020BF0CC
FUN_020BF0CC: @ 0x020BF0CC
	orr r0, r0, r1, lsl #4
	ldr r1, [sp, #4]
	orr r0, r0, r2, lsl #6
	orr r0, r1, r0
	ldr r2, [sp]
	orr r1, r0, r3, lsl #24
	ldr r0, _020BF0F4 @ =0x021DA49C
	orr r1, r1, r2, lsl #16
	str r1, [r0, #0x9c]
	bx lr
	.align 2, 0
_020BF0F4: .4byte 0x021DA49C
	arm_func_end FUN_020BF0CC

	arm_func_start FUN_020BF0F8
FUN_020BF0F8: @ 0x020BF0F8
	push {r3, lr}
	ldr r0, _020BF130 @ =0x021DA49C
	ldr r0, [r0, #0xfc]
	tst r0, #8
	bne _020BF128
	ldr r0, _020BF134 @ =0x021DA4E8
	ldr r1, _020BF138 @ =0x021DA59C
	bl FUN_020CB83C
	ldr r0, _020BF130 @ =0x021DA49C
	ldr r1, [r0, #0xfc]
	orr r1, r1, #8
	str r1, [r0, #0xfc]
_020BF128:
	ldr r0, _020BF138 @ =0x021DA59C
	pop {r3, pc}
	.align 2, 0
_020BF130: .4byte 0x021DA49C
_020BF134: .4byte 0x021DA4E8
_020BF138: .4byte 0x021DA59C
	arm_func_end FUN_020BF0F8

	arm_func_start FUN_020BF13C
FUN_020BF13C: @ 0x020BF13C
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x48
	str r1, [sp]
	add r1, sp, #8
	bl FUN_020D4968
	ldr r0, [sp]
	bl FUN_020CC044
	mov fp, #0
_020BF15C:
	mov r3, fp
	mov r1, fp
	cmp fp, #4
	mov r2, #0
	bge _020BF19C
	add r0, sp, #8
	add r0, r0, fp, lsl #2
_020BF178:
	ldr r4, [r0, r1, lsl #4]
	cmp r4, #0
	rsblt r4, r4, #0
	cmp r4, r2
	movgt r3, r1
	add r1, r1, #1
	movgt r2, r4
	cmp r1, #4
	blt _020BF178
_020BF19C:
	cmp r2, #0
	addeq sp, sp, #0x48
	mvneq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp r3, fp
	beq _020BF1FC
	ldr r1, [sp]
	add r2, sp, #8
	mov r0, #0
	add r4, r1, fp, lsl #4
	add r6, r2, fp, lsl #4
	add r5, r2, r3, lsl #4
	add r2, r1, r3, lsl #4
_020BF1D0:
	ldr r3, [r6, r0, lsl #2]
	ldr r1, [r5, r0, lsl #2]
	str r1, [r6, r0, lsl #2]
	str r3, [r5, r0, lsl #2]
	ldr r3, [r4, r0, lsl #2]
	ldr r1, [r2, r0, lsl #2]
	str r1, [r4, r0, lsl #2]
	str r3, [r2, r0, lsl #2]
	add r0, r0, #1
	cmp r0, #4
	blt _020BF1D0
_020BF1FC:
	add r0, sp, #8
	add r0, r0, fp, lsl #4
	ldr r0, [r0, fp, lsl #2]
	bl FUN_020CCBC0
	ldr r2, [sp]
	mov r3, #0
	mov lr, #0x80000000
	add r4, sp, #8
	add sb, r2, fp, lsl #4
	add r2, r4, fp, lsl #4
	mov r4, r3
	mov r6, r3
	mov r5, lr
_020BF230:
	ldr r8, [r2, r3, lsl #2]
	asr r7, r8, #0x1f
	umull ip, sl, r0, r8
	adds ip, ip, lr
	mla sl, r0, r7, sl
	mla sl, r1, r8, sl
	adc r7, sl, r4
	str r7, [r2, r3, lsl #2]
	ldr r8, [sb, r3, lsl #2]
	asr r7, r8, #0x1f
	umull ip, sl, r0, r8
	adds ip, ip, r5
	mla sl, r0, r7, sl
	mla sl, r1, r8, sl
	adc r7, sl, r6
	str r7, [sb, r3, lsl #2]
	add r3, r3, #1
	cmp r3, #4
	blt _020BF230
	ldr r0, [sp]
	add r1, sp, #8
	add r6, r0, fp, lsl #4
	add r0, sp, #8
	add r1, r1, fp, lsl #2
	mov ip, #0
	add r0, r0, fp, lsl #4
	str r1, [sp, #4]
_020BF29C:
	cmp ip, fp
	beq _020BF320
	ldr r1, [sp, #4]
	ldr r4, [sp]
	ldr r3, [r1, ip, lsl #4]
	add r1, sp, #8
	mov lr, #0
	asr r2, r3, #0x1f
	add r1, r1, ip, lsl #4
	add sl, r4, ip, lsl #4
_020BF2C4:
	ldr r5, [r0, lr, lsl #2]
	ldr sb, [r1, lr, lsl #2]
	asr r4, r5, #0x1f
	umull r8, r7, r3, r5
	mla r7, r3, r4, r7
	mla r7, r2, r5, r7
	lsr r4, r8, #0xc
	orr r4, r4, r7, lsl #20
	sub r4, sb, r4
	str r4, [r1, lr, lsl #2]
	ldr sb, [sl, lr, lsl #2]
	ldr r5, [r6, lr, lsl #2]
	asr r4, r5, #0x1f
	umull r8, r7, r3, r5
	mla r7, r3, r4, r7
	mla r7, r2, r5, r7
	lsr r4, r8, #0xc
	orr r4, r4, r7, lsl #20
	sub r4, sb, r4
	str r4, [sl, lr, lsl #2]
	add lr, lr, #1
	cmp lr, #4
	blt _020BF2C4
_020BF320:
	add ip, ip, #1
	cmp ip, #4
	blt _020BF29C
	add fp, fp, #1
	cmp fp, #4
	blt _020BF15C
	mov r0, #0
	add sp, sp, #0x48
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_020BF13C

	arm_func_start FUN_020BF344
FUN_020BF344: @ 0x020BF344
	push {r3, lr}
	ldr r0, _020BF37C @ =0x021DA49C
	ldr r0, [r0, #0xfc]
	tst r0, #0x10
	bne _020BF374
	ldr r0, _020BF380 @ =0x021DA4A4
	ldr r1, _020BF384 @ =0x021DA65C
	bl FUN_020BF13C
	ldr r0, _020BF37C @ =0x021DA49C
	ldr r1, [r0, #0xfc]
	orr r1, r1, #0x10
	str r1, [r0, #0xfc]
_020BF374:
	ldr r0, _020BF384 @ =0x021DA65C
	pop {r3, pc}
	.align 2, 0
_020BF37C: .4byte 0x021DA49C
_020BF380: .4byte 0x021DA4A4
_020BF384: .4byte 0x021DA65C
	arm_func_end FUN_020BF344

	arm_func_start FUN_020BF388
FUN_020BF388: @ 0x020BF388
	push {r3, lr}
	ldr r0, _020BF3CC @ =0x021DA558
	ldr r1, _020BF3D0 @ =0x021DA4E8
	ldr r2, _020BF3D4 @ =0x021DA5CC
	bl FUN_020CBBC8
	ldr r3, _020BF3D8 @ =0x021DA49C
	ldr r0, _020BF3D4 @ =0x021DA5CC
	ldr r2, [r3, #0xf4]
	mov r1, r0
	str r2, [sp]
	ldr r2, [r3, #0xec]
	ldr r3, [r3, #0xf0]
	bl FUN_020CB7CC
	ldr r0, _020BF3D4 @ =0x021DA5CC
	ldr r1, _020BF3DC @ =0x021DA5FC
	bl FUN_020CB83C
	pop {r3, pc}
	.align 2, 0
_020BF3CC: .4byte 0x021DA558
_020BF3D0: .4byte 0x021DA4E8
_020BF3D4: .4byte 0x021DA5CC
_020BF3D8: .4byte 0x021DA49C
_020BF3DC: .4byte 0x021DA5FC
	arm_func_end FUN_020BF388

	arm_func_start FUN_020BF3E0
FUN_020BF3E0: @ 0x020BF3E0
	push {r3, lr}
	ldr r0, _020BF410 @ =0x021DA49C
	ldr r0, [r0, #0xfc]
	tst r0, #0x80
	bne _020BF408
	bl FUN_020BF388
	ldr r0, _020BF410 @ =0x021DA49C
	ldr r1, [r0, #0xfc]
	orr r1, r1, #0x80
	str r1, [r0, #0xfc]
_020BF408:
	ldr r0, _020BF414 @ =0x021DA5CC
	pop {r3, pc}
	.align 2, 0
_020BF410: .4byte 0x021DA49C
_020BF414: .4byte 0x021DA5CC
	arm_func_end FUN_020BF3E0

	arm_func_start FUN_020BF418
FUN_020BF418: @ 0x020BF418
	push {r3, lr}
	ldr r0, _020BF448 @ =0x021DA49C
	ldr r0, [r0, #0xfc]
	tst r0, #0x80
	bne _020BF440
	bl FUN_020BF388
	ldr r0, _020BF448 @ =0x021DA49C
	ldr r1, [r0, #0xfc]
	orr r1, r1, #0x80
	str r1, [r0, #0xfc]
_020BF440:
	ldr r0, _020BF44C @ =0x021DA5FC
	pop {r3, pc}
	.align 2, 0
_020BF448: .4byte 0x021DA49C
_020BF44C: .4byte 0x021DA5FC
	arm_func_end FUN_020BF418

	arm_func_start FUN_020BF450
FUN_020BF450: @ 0x020BF450
	push {r3, r4, r5, lr}
	sub sp, sp, #0x40
	ldr r0, _020BF4B0 @ =0x021DA49C
	ldr r0, [r0, #0xfc]
	tst r0, #0x40
	bne _020BF4A4
	bl FUN_020BF0F8
	mov r5, r0
	bl FUN_020BF344
	mov r4, r0
	add r1, sp, #0
	mov r0, r5
	bl FUN_020CB6D4
	ldr r2, _020BF4B4 @ =0x021DA69C
	add r1, sp, #0
	mov r0, r4
	bl FUN_020CC1E8
	ldr r0, _020BF4B0 @ =0x021DA49C
	ldr r1, [r0, #0xfc]
	orr r1, r1, #0x40
	str r1, [r0, #0xfc]
_020BF4A4:
	ldr r0, _020BF4B4 @ =0x021DA69C
	add sp, sp, #0x40
	pop {r3, r4, r5, pc}
	.align 2, 0
_020BF4B0: .4byte 0x021DA49C
_020BF4B4: .4byte 0x021DA69C
	arm_func_end FUN_020BF450

	arm_func_start FUN_020BF4B8
FUN_020BF4B8: @ 0x020BF4B8
	cmp r0, #0
	beq _020BF4D0
	ldr ip, _020BF528 @ =0x021DA49C
	ldr ip, [ip, #0xa0]
	and ip, ip, #0xff
	str ip, [r0]
_020BF4D0:
	cmp r1, #0
	beq _020BF4EC
	ldr r0, _020BF528 @ =0x021DA49C
	ldr r0, [r0, #0xa0]
	lsr r0, r0, #8
	and r0, r0, #0xff
	str r0, [r1]
_020BF4EC:
	cmp r2, #0
	beq _020BF508
	ldr r0, _020BF528 @ =0x021DA49C
	ldr r0, [r0, #0xa0]
	lsr r0, r0, #0x10
	and r0, r0, #0xff
	str r0, [r2]
_020BF508:
	cmp r3, #0
	bxeq lr
	ldr r0, _020BF528 @ =0x021DA49C
	ldr r0, [r0, #0xa0]
	lsr r0, r0, #0x18
	and r0, r0, #0xff
	str r0, [r3]
	bx lr
	.align 2, 0
_020BF528: .4byte 0x021DA49C
	arm_func_end FUN_020BF4B8

	arm_func_start FUN_020BF52C
FUN_020BF52C: @ 0x020BF52C
	push {r3, r4, r5, r6, r7, lr}
	mov r6, r0
	movs r5, r1
	mov r4, r2
	mov r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	mov r7, #1
_020BF548:
	ldrb r1, [r5, #0x19]
	cmp r4, r1
	bhs _020BF588
	add r1, r5, r4, lsl #1
	ldrh r2, [r1, #0x1a]
	and r1, r2, #0x300
	cmp r1, #0x100
	bne _020BF588
	ldr r3, [r5, #0xc]
	cmp r3, #0
	beq _020BF588
	mov r0, r6
	mov r1, r5
	and r2, r2, #0xff
	blx r3
	mov r0, r7
_020BF588:
	ldr r5, [r5, #0x10]
	cmp r5, #0
	bne _020BF548
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020BF52C

	arm_func_start FUN_020BF598
FUN_020BF598: @ 0x020BF598
	cmp r3, #0
	beq _020BF5C8
	ldr r1, [r0]
	add r1, r1, r2
	str r1, [r0]
	ldr r1, [r0, #4]
	add r1, r1, r2
	str r1, [r0, #4]
	ldr r1, [r0, #8]
	add r1, r1, r2
	str r1, [r0, #8]
	bx lr
_020BF5C8:
	ldr r3, [r1]
	ldr ip, [r0]
	mul r3, r2, r3
	add r3, ip, r3, asr #12
	str r3, [r0]
	ldr r3, [r1, #4]
	ldr ip, [r0, #4]
	mul r3, r2, r3
	add r3, ip, r3, asr #12
	str r3, [r0, #4]
	ldr r1, [r1, #8]
	ldr r3, [r0, #8]
	mul r1, r2, r1
	add r1, r3, r1, asr #12
	str r1, [r0, #8]
	bx lr
	arm_func_end FUN_020BF598

	arm_func_start FUN_020BF608
FUN_020BF608: @ 0x020BF608
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x70
	movs sb, r1
	mov sl, r0
	mov r8, r2
	addeq sp, sp, #0x70
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r2, [sb, #0x10]
	cmp r2, #0
	bne _020BF694
	ldrb r2, [sb, #0x19]
	cmp r8, r2
	bhs _020BF688
	add r2, sb, r8, lsl #1
	ldrh r4, [r2, #0x1a]
	and r2, r4, #0x300
	cmp r2, #0x100
	bne _020BF67C
	ldr r3, [sb, #0xc]
	cmp r3, #0
	addeq sp, sp, #0x70
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	and r2, r4, #0xff
	blx r3
	add sp, sp, #0x70
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020BF67C:
	add sp, sp, #0x70
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020BF688:
	add sp, sp, #0x70
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020BF694:
	mov r5, #0
	mov r3, r5
	mov r6, r5
	mov r2, sb
_020BF6A4:
	ldrb r0, [r2, #0x19]
	cmp r8, r0
	bhs _020BF6E4
	add r0, r2, r8, lsl #1
	ldrh r0, [r0, #0x1a]
	and r0, r0, #0x300
	cmp r0, #0x100
	bne _020BF6E4
	ldr r0, [r2, #4]
	cmp r0, #0x1000
	addgt r5, r5, #0x1000
	bgt _020BF6DC
	cmp r0, #0
	addgt r5, r5, r0
_020BF6DC:
	mov r1, r2
	add r3, r3, #1
_020BF6E4:
	ldr r2, [r2, #0x10]
	cmp r2, #0
	bne _020BF6A4
	cmp r5, #0
	addeq sp, sp, #0x70
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp r3, #1
	bne _020BF73C
	ldr r3, [r1, #0xc]
	add r0, r1, r8, lsl #1
	cmp r3, #0
	ldrh r2, [r0, #0x1a]
	addeq sp, sp, #0x70
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r0, sl
	and r2, r2, #0xff
	blx r3
	add sp, sp, #0x70
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020BF73C:
	mov r1, sl
	mov r0, #0
	mov r2, #0x58
	bl FUN_020D4858
	mvn r0, #0
	str r0, [sl]
	add fp, sp, #0x40
	add r4, sp, #0x18
_020BF75C:
	ldrb r0, [sb, #0x19]
	cmp r8, r0
	bhs _020BF940
	add r0, sb, r8, lsl #1
	ldrh r1, [r0, #0x1a]
	and r0, r1, #0x300
	cmp r0, #0x100
	bne _020BF940
	ldr r0, [sb, #4]
	cmp r0, #0
	ble _020BF940
	ldr r3, [sb, #0xc]
	cmp r3, #0
	beq _020BF940
	and r2, r1, #0xff
	mov r0, r4
	mov r1, sb
	blx r3
	cmp r6, #0
	bne _020BF7CC
	mov r0, fp
	add r1, sp, #0xc
	mov r2, #0xc
	bl FUN_020D4808
	add r0, sp, #0x58
	add r1, sp, #0
	mov r2, #0xc
	bl FUN_020D4808
_020BF7CC:
	cmp r5, #0x1000
	ldreq r7, [sb, #4]
	beq _020BF7E8
	ldr r0, [sb, #4]
	mov r1, r5
	bl FUN_020CCBA0
	mov r7, r0
_020BF7E8:
	ldr r3, [sp, #0x18]
	add r0, sl, #4
	add r1, sp, #0x1c
	mov r2, r7
	and r3, r3, #1
	bl FUN_020BF598
	ldr r3, [sp, #0x18]
	add r0, sl, #0x10
	add r1, sp, #0x28
	mov r2, r7
	and r3, r3, #8
	bl FUN_020BF598
	ldr r3, [sp, #0x18]
	add r0, sl, #0x1c
	add r1, sp, #0x34
	mov r2, r7
	and r3, r3, #0x10
	bl FUN_020BF598
	ldr r0, [sp, #0x18]
	tst r0, #4
	bne _020BF890
	ldr r2, [sl, #0x4c]
	ldr r0, [sp, #0x64]
	smull r1, r0, r7, r0
	lsr r1, r1, #0xc
	orr r1, r1, r0, lsl #20
	add r0, r2, r1
	str r0, [sl, #0x4c]
	ldr r2, [sl, #0x50]
	ldr r0, [sp, #0x68]
	smull r1, r0, r7, r0
	lsr r1, r1, #0xc
	orr r1, r1, r0, lsl #20
	add r0, r2, r1
	str r0, [sl, #0x50]
	ldr r2, [sl, #0x54]
	ldr r0, [sp, #0x6c]
	smull r1, r0, r7, r0
	lsr r1, r1, #0xc
	orr r1, r1, r0, lsl #20
	add r0, r2, r1
	str r0, [sl, #0x54]
_020BF890:
	ldr r0, [sp, #0x18]
	tst r0, #2
	bne _020BF918
	ldr r1, [sl, #0x28]
	ldr r0, [sp, #0x40]
	mul r0, r7, r0
	add r0, r1, r0, asr #12
	str r0, [sl, #0x28]
	ldr r1, [sl, #0x2c]
	ldr r0, [sp, #0x44]
	mul r0, r7, r0
	add r0, r1, r0, asr #12
	str r0, [sl, #0x2c]
	ldr r1, [sl, #0x30]
	ldr r0, [sp, #0x48]
	mul r0, r7, r0
	add r0, r1, r0, asr #12
	str r0, [sl, #0x30]
	ldr r1, [sl, #0x34]
	ldr r0, [sp, #0x4c]
	mul r0, r7, r0
	add r0, r1, r0, asr #12
	str r0, [sl, #0x34]
	ldr r1, [sl, #0x38]
	ldr r0, [sp, #0x50]
	mul r0, r7, r0
	add r0, r1, r0, asr #12
	str r0, [sl, #0x38]
	ldr r1, [sl, #0x3c]
	ldr r0, [sp, #0x54]
	mul r0, r7, r0
	add r0, r1, r0, asr #12
	str r0, [sl, #0x3c]
	b _020BF930
_020BF918:
	ldr r0, [sl, #0x28]
	add r0, r0, r7
	str r0, [sl, #0x28]
	ldr r0, [sl, #0x38]
	add r0, r0, r7
	str r0, [sl, #0x38]
_020BF930:
	ldr r1, [sl]
	ldr r0, [sp, #0x18]
	and r0, r1, r0
	str r0, [sl]
_020BF940:
	ldr sb, [sb, #0x10]
	add r6, r6, #1
	cmp sb, #0
	bne _020BF75C
	add r0, sl, #0x28
	add r1, sl, #0x34
	add r2, sl, #0x40
	bl FUN_020CCE94
	ldr r0, [sl, #0x28]
	cmp r0, #0
	ldreq r0, [sl, #0x2c]
	cmpeq r0, #0
	ldreq r0, [sl, #0x30]
	cmpeq r0, #0
	bne _020BF990
	add r0, sp, #0xc
	add r1, sl, #0x28
	mov r2, #0xc
	bl FUN_020D4808
	b _020BF99C
_020BF990:
	add r0, sl, #0x28
	mov r1, r0
	bl FUN_020CCFE0
_020BF99C:
	ldr r0, [sl, #0x40]
	cmp r0, #0
	ldreq r0, [sl, #0x44]
	cmpeq r0, #0
	ldreq r0, [sl, #0x48]
	cmpeq r0, #0
	bne _020BF9CC
	add r0, sp, #0
	add r1, sl, #0x40
	mov r2, #0xc
	bl FUN_020D4808
	b _020BF9D8
_020BF9CC:
	add r0, sl, #0x40
	mov r1, r0
	bl FUN_020CCFE0
_020BF9D8:
	add r0, sl, #0x40
	add r1, sl, #0x28
	add r2, sl, #0x34
	bl FUN_020CCE94
	mov r0, #1
	add sp, sp, #0x70
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_020BF608

	arm_func_start FUN_020BF9F4
FUN_020BF9F4: @ 0x020BF9F4
	push {r3, r4, r5, r6, r7, r8, lr}
	sub sp, sp, #4
	mov r7, r0
	mov r0, #0
	mov r6, r1
	mov r5, r2
	str r0, [r7]
	add r4, sp, #0
	mov r8, #1
_020BFA18:
	ldrb r1, [r6, #0x19]
	cmp r5, r1
	bhs _020BFA68
	add r1, r6, r5, lsl #1
	ldrh r2, [r1, #0x1a]
	and r1, r2, #0x300
	cmp r1, #0x100
	bne _020BFA68
	ldr r3, [r6, #0xc]
	cmp r3, #0
	beq _020BFA68
	mov r0, r4
	mov r1, r6
	and r2, r2, #0xff
	blx r3
	ldr r2, [r7]
	ldr r1, [sp]
	mov r0, r8
	orr r1, r2, r1
	str r1, [r7]
_020BFA68:
	ldr r6, [r6, #0x10]
	cmp r6, #0
	bne _020BFA18
	add sp, sp, #4
	pop {r3, r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020BF9F4

	arm_func_start FUN_020BFA7C
FUN_020BFA7C: @ 0x020BFA7C
	push {r3, r4, r5, lr}
	ldr r5, _020BFAC0 @ =_02110B9C
	mov r4, r0
_020BFA88:
	ldr r1, [r4, #8]
	mov r0, r4
	bic r1, r1, #0x40
	str r1, [r4, #8]
	ldr r1, [r4]
	ldrb r3, [r1]
	and r1, r3, #0x1f
	ldr r2, [r5, r1, lsl #2]
	and r1, r3, #0xe0
	blx r2
	ldr r0, [r4, #8]
	tst r0, #0x20
	beq _020BFA88
	pop {r3, r4, r5, pc}
	.align 2, 0
_020BFAC0: .4byte _02110B9C
	arm_func_end FUN_020BFA7C

	arm_func_start FUN_020BFAC4
FUN_020BFAC4: @ 0x020BFAC4
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	mov r1, r5
	mov r0, #0
	mov r2, #0x188
	bl FUN_020D4858
	mov r0, #1
	str r0, [r5, #0xc4]
	str r0, [r5, #8]
	ldr r0, [r4, #0x30]
	ldr r2, _020BFC54 @ =_02110A80
	cmp r0, #0
	ldreq r1, [r4, #4]
	ldreq r0, [r1, #4]
	addeq r0, r1, r0
	str r0, [r5]
	str r4, [r5, #4]
	ldr r0, [r4, #4]
	cmp r0, #0
	addne r0, r0, #0x40
	moveq r0, #0
	str r0, [r5, #0xd4]
	ldr r1, [r4, #4]
	cmp r1, #0
	ldrne r0, [r1, #8]
	cmpne r0, #0
	addne r0, r1, r0
	moveq r0, #0
	str r0, [r5, #0xd8]
	ldr r1, [r4, #4]
	cmp r1, #0
	ldrne r0, [r1, #0xc]
	cmpne r0, #0
	addne r0, r1, r0
	moveq r0, #0
	str r0, [r5, #0xdc]
	ldr r0, [r4, #4]
	ldr r1, _020BFC58 @ =_02110A74
	ldrb r3, [r0, #0x15]
	ldr r0, _020BFC5C @ =_02110A8C
	ldr r2, [r2, r3, lsl #2]
	str r2, [r5, #0xe8]
	ldr r2, [r4, #4]
	ldrb r2, [r2, #0x15]
	ldr r1, [r1, r2, lsl #2]
	str r1, [r5, #0xec]
	ldr r1, [r4, #4]
	ldrb r1, [r1, #0x16]
	ldr r0, [r0, r1, lsl #2]
	str r0, [r5, #0xf0]
	ldr r0, [r4, #4]
	ldr r0, [r0, #0x1c]
	str r0, [r5, #0xe0]
	ldr r0, [r4, #4]
	ldr r0, [r0, #0x20]
	str r0, [r5, #0xe4]
	ldr r1, [r4, #0x20]
	cmp r1, #0
	beq _020BFBD8
	ldrb r0, [r4, #0x24]
	cmp r0, #0x20
	bhs _020BFBD8
	add r0, r5, r0, lsl #2
	str r1, [r0, #0xc]
	ldrb r0, [r4, #0x24]
	ldrb r1, [r4, #0x25]
	add r0, r5, r0
	strb r1, [r0, #0x8c]
_020BFBD8:
	ldr r0, [r4]
	tst r0, #1
	ldrne r0, [r5, #8]
	orrne r0, r0, #0x80
	strne r0, [r5, #8]
	ldr r0, [r4]
	tst r0, #2
	ldrne r0, [r5, #8]
	orrne r0, r0, #0x100
	strne r0, [r5, #8]
	ldr r0, [r4]
	tst r0, #4
	ldrne r0, [r5, #8]
	orrne r0, r0, #0x200
	strne r0, [r5, #8]
	ldr r0, [r4]
	tst r0, #8
	ldrne r0, [r5, #8]
	orrne r0, r0, #0x400
	strne r0, [r5, #8]
	ldr r1, [r4, #0x28]
	cmp r1, #0
	beq _020BFC3C
	mov r0, r5
	blx r1
_020BFC3C:
	mov r0, r5
	bl FUN_020BFA7C
	ldr r0, [r4]
	bic r0, r0, #1
	str r0, [r4]
	pop {r3, r4, r5, pc}
	.align 2, 0
_020BFC54: .4byte _02110A80
_020BFC58: .4byte _02110A74
_020BFC5C: .4byte _02110A8C
	arm_func_end FUN_020BFAC4

	arm_func_start FUN_020BFC60
FUN_020BFC60: @ 0x020BFC60
	push {r3, r4, r5, lr}
	cmp r1, #0
	popeq {r3, r4, r5, pc}
	mov r3, #1
	mov r4, #0
_020BFC74:
	ldrb r2, [r1, #0x19]
	mov r5, r4
	cmp r2, #0
	ble _020BFCB8
_020BFC84:
	add r2, r1, r5, lsl #1
	ldrh r2, [r2, #0x1a]
	tst r2, #0x100
	beq _020BFCA8
	asr lr, r5, #5
	ldr ip, [r0, lr, lsl #2]
	and r2, r5, #0x1f
	orr r2, ip, r3, lsl r2
	str r2, [r0, lr, lsl #2]
_020BFCA8:
	ldrb r2, [r1, #0x19]
	add r5, r5, #1
	cmp r5, r2
	blt _020BFC84
_020BFCB8:
	ldr r1, [r1, #0x10]
	cmp r1, #0
	bne _020BFC74
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020BFC60

	arm_func_start FUN_020BFCC8
FUN_020BFCC8: @ 0x020BFCC8
	push {r4, lr}
	sub sp, sp, #0x188
	mov r4, r0
	ldr r0, [r4]
	and r0, r0, #0x10
	cmp r0, #0x10
	bne _020BFD5C
	add r1, r4, #0x3c
	mov r0, #0
	mov r2, #8
	bl FUN_020D47EC
	add r1, r4, #0x44
	mov r0, #0
	mov r2, #8
	bl FUN_020D47EC
	add r1, r4, #0x4c
	mov r0, #0
	mov r2, #8
	bl FUN_020D47EC
	ldr r1, [r4, #8]
	cmp r1, #0
	beq _020BFD28
	add r0, r4, #0x3c
	bl FUN_020BFC60
_020BFD28:
	ldr r1, [r4, #0x10]
	cmp r1, #0
	beq _020BFD3C
	add r0, r4, #0x44
	bl FUN_020BFC60
_020BFD3C:
	ldr r1, [r4, #0x18]
	cmp r1, #0
	beq _020BFD50
	add r0, r4, #0x4c
	bl FUN_020BFC60
_020BFD50:
	ldr r0, [r4]
	bic r0, r0, #0x10
	str r0, [r4]
_020BFD5C:
	ldr r2, _020BFDA0 @ =0x021DA700
	ldr r0, [r2]
	cmp r0, #0
	beq _020BFD7C
	mov r1, r4
	bl FUN_020BFAC4
	add sp, sp, #0x188
	pop {r4, pc}
_020BFD7C:
	add r0, sp, #0
	mov r1, r4
	str r0, [r2]
	bl FUN_020BFAC4
	ldr r0, _020BFDA0 @ =0x021DA700
	mov r1, #0
	str r1, [r0]
	add sp, sp, #0x188
	pop {r4, pc}
	.align 2, 0
_020BFDA0: .4byte 0x021DA700
	arm_func_end FUN_020BFCC8

	arm_func_start FUN_020BFDA4
FUN_020BFDA4: @ 0x020BFDA4
	push {r4, lr}
	mov r4, r0
	ldr r1, [r4, #0xc]
	cmp r1, #0
	beq _020BFDBC
	blx r1
_020BFDBC:
	ldr r0, [r4]
	add r0, r0, #1
	str r0, [r4]
	pop {r4, pc}
	arm_func_end FUN_020BFDA4

	arm_func_start FUN_020BFDCC
FUN_020BFDCC: @ 0x020BFDCC
	push {r4, lr}
	mov r4, r0
	ldr r1, [r4, #0x10]
	cmp r1, #0
	beq _020BFDE4
	blx r1
_020BFDE4:
	ldr r0, [r4, #8]
	orr r0, r0, #0x20
	str r0, [r4, #8]
	pop {r4, pc}
	arm_func_end FUN_020BFDCC

	arm_func_start FUN_020BFDF4
FUN_020BFDF4: @ 0x020BFDF4
	push {r4, r5, r6, lr}
	mov r6, r0
	ldr r0, [r6, #8]
	tst r0, #0x200
	bne _020BFF60
	ldr r1, [r6]
	add r0, r6, #0x184
	ldrb r4, [r1, #1]
	strb r4, [r6, #0xac]
	ldr r1, [r6, #8]
	orr r1, r1, #4
	str r1, [r6, #8]
	str r0, [r6, #0xb8]
	ldr r0, [r6, #0x14]
	cmp r0, #0
	ldrbne r5, [r6, #0x8e]
	moveq r5, #0
	cmp r5, #1
	bne _020BFE74
	ldr r1, [r6, #8]
	mov r0, r6
	bic r1, r1, #0x40
	str r1, [r6, #8]
	ldr r1, [r6, #0x14]
	blx r1
	ldr r0, [r6, #0x14]
	cmp r0, #0
	ldrbne r5, [r6, #0x8e]
	ldr r0, [r6, #8]
	moveq r5, #0
	and r0, r0, #0x40
	b _020BFE78
_020BFE74:
	mov r0, #0
_020BFE78:
	cmp r0, #0
	bne _020BFED8
	ldr ip, [r6, #4]
	ldr r1, [ip, #0x18]
	cmp r1, #0
	beq _020BFEC4
	lsr r0, r4, #5
	add r0, ip, r0, lsl #2
	ldr r0, [r0, #0x4c]
	and r2, r4, #0x1f
	mov r3, #1
	tst r0, r3, lsl r2
	beq _020BFEC4
	ldr r0, [r6, #0xb8]
	ldr r3, [ip, #0x1c]
	mov r2, r4
	blx r3
	cmp r0, #0
	bne _020BFED8
_020BFEC4:
	ldr r1, [r6]
	ldr r0, [r6, #0xb8]
	ldrb r1, [r1, #2]
	and r1, r1, #1
	str r1, [r0]
_020BFED8:
	cmp r5, #2
	bne _020BFF14
	ldr r1, [r6, #8]
	mov r0, r6
	bic r1, r1, #0x40
	str r1, [r6, #8]
	ldr r1, [r6, #0x14]
	blx r1
	ldr r0, [r6, #0x14]
	cmp r0, #0
	ldrbne r5, [r6, #0x8e]
	ldr r0, [r6, #8]
	moveq r5, #0
	and r0, r0, #0x40
	b _020BFF18
_020BFF14:
	mov r0, #0
_020BFF18:
	cmp r0, #0
	bne _020BFF40
	ldr r0, [r6, #0xb8]
	ldr r0, [r0]
	cmp r0, #0
	ldr r0, [r6, #8]
	orrne r0, r0, #1
	strne r0, [r6, #8]
	biceq r0, r0, #1
	streq r0, [r6, #8]
_020BFF40:
	cmp r5, #3
	bne _020BFF60
	ldr r1, [r6, #8]
	mov r0, r6
	bic r1, r1, #0x40
	str r1, [r6, #8]
	ldr r1, [r6, #0x14]
	blx r1
_020BFF60:
	ldr r0, [r6]
	add r0, r0, #3
	str r0, [r6]
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020BFDF4

	arm_func_start FUN_020BFF70
FUN_020BFF70: @ 0x020BFF70
	push {r3, r4, r5, lr}
	mov r4, r0
	ldr r0, [r4, #8]
	tst r0, #0x200
	bne _020C002C
	tst r0, #1
	beq _020C002C
	ldr r0, [r4, #0x18]
	cmp r0, #0
	ldrbne r5, [r4, #0x8f]
	moveq r5, #0
	cmp r5, #1
	bne _020BFFD8
	ldr r1, [r4, #8]
	mov r0, r4
	bic r1, r1, #0x40
	str r1, [r4, #8]
	ldr r1, [r4, #0x18]
	blx r1
	ldr r0, [r4, #0x18]
	cmp r0, #0
	ldrbne r5, [r4, #0x8f]
	ldr r0, [r4, #8]
	moveq r5, #0
	and r0, r0, #0x40
	b _020BFFDC
_020BFFD8:
	mov r0, #0
_020BFFDC:
	cmp r0, #0
	bne _020C000C
	ldr r0, [r4]
	ldrb r0, [r0, #1]
	str r0, [sp]
	ldr r0, [r4, #8]
	tst r0, #0x100
	bne _020C000C
	add r1, sp, #0
	mov r0, #0x14
	mov r2, #1
	bl FUN_020C2528
_020C000C:
	cmp r5, #3
	bne _020C002C
	ldr r1, [r4, #8]
	mov r0, r4
	bic r1, r1, #0x40
	str r1, [r4, #8]
	ldr r1, [r4, #0x18]
	blx r1
_020C002C:
	ldr r0, [r4]
	add r0, r0, #2
	str r0, [r4]
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020BFF70

	arm_func_start FUN_020C003C
FUN_020C003C: @ 0x020C003C
	push {r3, r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x1c
	mov r7, r0
	mov r5, r3
	strb r5, [r7, #0xad]
	ldr r3, [r7, #8]
	add r0, r7, #0xf4
	orr r3, r3, #8
	str r3, [r7, #8]
	str r0, [r7, #0xb0]
	ldr r0, [r7, #0x1c]
	mov r8, r1
	cmp r0, #0
	ldrbne r4, [r7, #0x90]
	mov r6, r2
	moveq r4, #0
	cmp r4, #1
	bne _020C00B8
	ldr r1, [r7, #8]
	mov r0, r7
	bic r1, r1, #0x40
	str r1, [r7, #8]
	ldr r1, [r7, #0x1c]
	blx r1
	ldr r0, [r7, #0x1c]
	cmp r0, #0
	ldrbne r4, [r7, #0x90]
	ldr r0, [r7, #8]
	moveq r4, #0
	and r0, r0, #0x40
	b _020C00BC
_020C00B8:
	mov r0, #0
_020C00BC:
	cmp r0, #0
	bne _020C039C
	ldr r0, [r7, #4]
	ldr r0, [r0, #0x38]
	cmp r0, #0
	beq _020C00E8
	ldr r1, [r7, #8]
	tst r1, #0x80
	moveq r1, #0x38
	mlaeq r8, r5, r1, r0
	beq _020C0398
_020C00E8:
	cmp r8, #0x20
	cmpne r8, #0x40
	bne _020C0130
	lsr r1, r5, #5
	add r1, r7, r1, lsl #2
	ldr r1, [r1, #0xbc]
	and r2, r5, #0x1f
	mov r3, #1
	tst r1, r3, lsl r2
	beq _020C0130
	cmp r0, #0
	movne r1, #0x38
	mlane r8, r5, r1, r0
	bne _020C0398
	ldr r1, _020C04B0 @ =0x021DA704
	mov r0, #0x38
	mla r8, r5, r0, r1
	b _020C0398
_020C0130:
	cmp r0, #0
	beq _020C0168
	add r8, r7, #0xbc
	lsr r3, r5, #5
	ldr r2, [r8, r3, lsl #2]
	and r0, r5, #0x1f
	mov r1, #1
	orr r0, r2, r1, lsl r0
	str r0, [r8, r3, lsl #2]
	ldr r1, [r7, #4]
	mov r0, #0x38
	ldr r1, [r1, #0x38]
	mla r8, r5, r0, r1
	b _020C019C
_020C0168:
	cmp r8, #0x40
	addne r8, r7, #0xf4
	bne _020C019C
	add lr, r7, #0xbc
	lsr ip, r5, #5
	ldr r1, _020C04B0 @ =0x021DA704
	ldr r8, [lr, ip, lsl #2]
	mov r0, #0x38
	and r2, r5, #0x1f
	mov r3, #1
	orr r2, r8, r3, lsl r2
	mla r8, r5, r0, r1
	str r2, [lr, ip, lsl #2]
_020C019C:
	mov r0, #0
	str r0, [r8]
	ldr r3, [r7, #0xd8]
	cmp r3, #0
	beq _020C01F0
	adds r2, r3, #4
	beq _020C01DC
	ldrb r0, [r3, #5]
	cmp r5, r0
	bhs _020C01DC
	ldrh r1, [r3, #0xa]
	ldrh r0, [r2, r1]
	add r1, r2, r1
	add r1, r1, #4
	mla r1, r0, r5, r1
	b _020C01E0
_020C01DC:
	mov r1, #0
_020C01E0:
	cmp r1, #0
	ldrne r0, [r1]
	addne r0, r3, r0
	bne _020C01F4
_020C01F0:
	mov r0, #0
_020C01F4:
	ldrh r0, [r0, #0x1e]
	ldr r1, _020C04B4 @ =0x021DA49C
	tst r0, #0x20
	ldrne r0, [r8]
	orrne r0, r0, #0x20
	strne r0, [r8]
	ldrh r2, [r6, #0x1e]
	ldr r0, _020C04B8 @ =0x02109474
	ldr ip, [r1, #0x94]
	asr r2, r2, #6
	and r2, r2, #7
	ldr lr, [r0, r2, lsl #2]
	ldr r2, [r6, #4]
	mvn r3, lr
	and r3, ip, r3
	and r2, r2, lr
	orr r2, r3, r2
	str r2, [r8, #4]
	ldrh ip, [r6, #0x1e]
	ldr r3, [r1, #0x98]
	ldr r2, [r6, #8]
	asr ip, ip, #9
	and ip, ip, #7
	ldr ip, [r0, ip, lsl #2]
	mvn r0, ip
	and r3, r3, r0
	and r0, r2, ip
	orr r0, r3, r0
	str r0, [r8, #8]
	ldr r3, [r6, #0x10]
	ldr r0, [r6, #0xc]
	ldr r2, [r1, #0x9c]
	mvn r1, r3
	and r1, r2, r1
	and r0, r0, r3
	orr r0, r1, r0
	str r0, [r8, #0xc]
	ldr r0, [r6, #0x14]
	str r0, [r8, #0x10]
	ldrh r0, [r6, #0x1c]
	str r0, [r8, #0x14]
	ldrh r0, [r6, #0x1e]
	tst r0, #1
	beq _020C0330
	tst r0, #2
	ldrne r1, [r8]
	add r0, r6, #0x2c
	orrne r1, r1, #1
	strne r1, [r8]
	bne _020C02D0
	ldr r1, [r0]
	str r1, [r8, #0x18]
	ldr r1, [r0, #4]
	add r0, r0, #8
	str r1, [r8, #0x1c]
_020C02D0:
	ldrh r1, [r6, #0x1e]
	tst r1, #4
	ldrne r1, [r8]
	orrne r1, r1, #2
	strne r1, [r8]
	bne _020C02FC
	ldrsh r1, [r0]
	strh r1, [r8, #0x20]
	ldrsh r1, [r0, #2]
	add r0, r0, #4
	strh r1, [r8, #0x22]
_020C02FC:
	ldrh r1, [r6, #0x1e]
	tst r1, #8
	ldrne r0, [r8]
	orrne r0, r0, #4
	strne r0, [r8]
	bne _020C0324
	ldr r1, [r0]
	str r1, [r8, #0x24]
	ldr r0, [r0, #4]
	str r0, [r8, #0x28]
_020C0324:
	ldr r0, [r8]
	orr r0, r0, #8
	str r0, [r8]
_020C0330:
	ldr ip, [r7, #4]
	ldr r1, [ip, #8]
	cmp r1, #0
	beq _020C036C
	lsr r0, r5, #5
	add r0, ip, r0, lsl #2
	ldr r0, [r0, #0x3c]
	and r2, r5, #0x1f
	mov r3, #1
	tst r0, r3, lsl r2
	beq _020C036C
	ldr r3, [ip, #0xc]
	mov r0, r8
	mov r2, r5
	blx r3
_020C036C:
	ldr r0, [r8]
	tst r0, #0x18
	beq _020C0398
	ldrh r0, [r6, #0x20]
	strh r0, [r8, #0x2c]
	ldrh r0, [r6, #0x22]
	strh r0, [r8, #0x2e]
	ldr r0, [r6, #0x24]
	str r0, [r8, #0x30]
	ldr r0, [r6, #0x28]
	str r0, [r8, #0x34]
_020C0398:
	str r8, [r7, #0xb0]
_020C039C:
	cmp r4, #2
	bne _020C03D8
	ldr r1, [r7, #8]
	mov r0, r7
	bic r1, r1, #0x40
	str r1, [r7, #8]
	ldr r1, [r7, #0x1c]
	blx r1
	ldr r0, [r7, #0x1c]
	cmp r0, #0
	ldrbne r4, [r7, #0x90]
	ldr r0, [r7, #8]
	moveq r4, #0
	and r0, r0, #0x40
	b _020C03DC
_020C03D8:
	mov r0, #0
_020C03DC:
	cmp r0, #0
	bne _020C0484
	ldr r5, [r7, #0xb0]
	ldr r1, [r5, #0xc]
	tst r1, #0x1f0000
	beq _020C0478
	ldr r0, [r5]
	tst r0, #0x20
	bicne r0, r1, #0x1f0000
	strne r0, [r5, #0xc]
	ldr r0, [r7, #8]
	bic r0, r0, #2
	str r0, [r7, #8]
	tst r0, #0x100
	bne _020C0484
	ldr r0, _020C04BC @ =0x00293130
	ldr r3, _020C04C0 @ =0x00002B2A
	str r0, [sp]
	ldr r2, [r5, #4]
	add r1, sp, #4
	str r2, [sp, #4]
	ldr r6, [r5, #8]
	mov r2, #6
	str r6, [sp, #8]
	ldr r6, [r5, #0xc]
	str r6, [sp, #0xc]
	str r3, [sp, #0x10]
	ldr r3, [r5, #0x10]
	str r3, [sp, #0x14]
	ldr r3, [r5, #0x14]
	str r3, [sp, #0x18]
	bl FUN_020C2528
	ldr r0, [r5]
	tst r0, #0x18
	beq _020C0484
	ldr r1, [r7, #0xf0]
	mov r0, r5
	blx r1
	b _020C0484
_020C0478:
	ldr r0, [r7, #8]
	orr r0, r0, #2
	str r0, [r7, #8]
_020C0484:
	cmp r4, #3
	addne sp, sp, #0x1c
	popne {r3, r4, r5, r6, r7, r8, pc}
	ldr r1, [r7, #8]
	mov r0, r7
	bic r1, r1, #0x40
	str r1, [r7, #8]
	ldr r1, [r7, #0x1c]
	blx r1
	add sp, sp, #0x1c
	pop {r3, r4, r5, r6, r7, r8, pc}
	.align 2, 0
_020C04B0: .4byte 0x021DA704
_020C04B4: .4byte 0x021DA49C
_020C04B8: .4byte 0x02109474
_020C04BC: .4byte 0x00293130
_020C04C0: .4byte 0x00002B2A
	arm_func_end FUN_020C003C

	arm_func_start FUN_020C04C4
FUN_020C04C4: @ 0x020C04C4
	push {r4, lr}
	mov r4, r0
	ldr r2, [r4, #8]
	tst r2, #0x200
	bne _020C0560
	ldr r0, [r4]
	tst r2, #1
	ldrb r3, [r0, #1]
	bne _020C04FC
	tst r2, #8
	beq _020C04FC
	ldrb r0, [r4, #0xad]
	cmp r3, r0
	beq _020C0560
_020C04FC:
	ldr lr, [r4, #0xd8]
	cmp lr, #0
	beq _020C0548
	adds ip, lr, #4
	beq _020C0534
	ldrb r0, [lr, #5]
	cmp r3, r0
	bhs _020C0534
	ldrh r2, [lr, #0xa]
	ldrh r0, [ip, r2]
	add r2, ip, r2
	add r2, r2, #4
	mla r2, r0, r3, r2
	b _020C0538
_020C0534:
	mov r2, #0
_020C0538:
	cmp r2, #0
	ldrne r0, [r2]
	addne r2, lr, r0
	bne _020C054C
_020C0548:
	mov r2, #0
_020C054C:
	ldrh lr, [r2]
	ldr ip, _020C0570 @ =_02110AAC
	mov r0, r4
	ldr ip, [ip, lr, lsl #2]
	blx ip
_020C0560:
	ldr r0, [r4]
	add r0, r0, #2
	str r0, [r4]
	pop {r4, pc}
	.align 2, 0
_020C0570: .4byte _02110AAC
	arm_func_end FUN_020C04C4

	arm_func_start FUN_020C0574
FUN_020C0574: @ 0x020C0574
	push {r4, r5, r6, lr}
	mov r5, r0
	ldr r0, [r5, #0x20]
	mov r4, r2
	cmp r0, #0
	ldrbne r6, [r5, #0x91]
	moveq r6, #0
	cmp r6, #1
	bne _020C05CC
	ldr r1, [r5, #8]
	mov r0, r5
	bic r1, r1, #0x40
	str r1, [r5, #8]
	ldr r1, [r5, #0x20]
	blx r1
	ldr r0, [r5, #0x20]
	cmp r0, #0
	ldrbne r6, [r5, #0x91]
	ldr r0, [r5, #8]
	moveq r6, #0
	and r0, r0, #0x40
	b _020C05D0
_020C05CC:
	mov r0, #0
_020C05D0:
	cmp r0, #0
	bne _020C05F4
	ldr r0, [r5, #8]
	tst r0, #0x100
	bne _020C05F4
	ldr r0, [r4, #8]
	ldr r1, [r4, #0xc]
	add r0, r4, r0
	bl FUN_020C2474
_020C05F4:
	cmp r6, #2
	bne _020C0624
	ldr r1, [r5, #8]
	mov r0, r5
	bic r1, r1, #0x40
	str r1, [r5, #8]
	ldr r1, [r5, #0x20]
	blx r1
	ldr r0, [r5, #0x20]
	cmp r0, #0
	ldrbne r6, [r5, #0x91]
	moveq r6, #0
_020C0624:
	cmp r6, #3
	popne {r4, r5, r6, pc}
	ldr r1, [r5, #8]
	mov r0, r5
	bic r1, r1, #0x40
	str r1, [r5, #8]
	ldr r1, [r5, #0x20]
	blx r1
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020C0574

	arm_func_start FUN_020C0648
FUN_020C0648: @ 0x020C0648
	push {r4, lr}
	mov r4, r0
	ldr r0, [r4, #8]
	tst r0, #0x200
	bne _020C06D4
	tst r0, #1
	beq _020C06D4
	tst r0, #2
	bne _020C06D4
	ldr r0, [r4]
	ldr ip, [r4, #0xdc]
	ldrb r3, [r0, #1]
	cmp ip, #0
	beq _020C06BC
	beq _020C06A8
	ldrb r0, [ip, #1]
	cmp r3, r0
	bhs _020C06A8
	ldrh r2, [ip, #6]
	ldrh r0, [ip, r2]
	add r2, ip, r2
	add r2, r2, #4
	mla r2, r0, r3, r2
	b _020C06AC
_020C06A8:
	mov r2, #0
_020C06AC:
	cmp r2, #0
	ldrne r0, [r2]
	addne r2, ip, r0
	bne _020C06C0
_020C06BC:
	mov r2, #0
_020C06C0:
	ldrh lr, [r2]
	ldr ip, _020C06E4 @ =_02110ABC
	mov r0, r4
	ldr ip, [ip, lr, lsl #2]
	blx ip
_020C06D4:
	ldr r0, [r4]
	add r0, r0, #2
	str r0, [r4]
	pop {r4, pc}
	.align 2, 0
_020C06E4: .4byte _02110ABC
	arm_func_end FUN_020C0648

	arm_func_start FUN_020C06E8
FUN_020C06E8: @ 0x020C06E8
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x14
	mov sl, r0
	ldr r0, [sl]
	mov sb, r1
	ldrb r6, [r0, #1]
	mov r4, #4
	strb r6, [sl, #0xae]
	ldr r0, [sl, #8]
	orr r0, r0, #0x10
	str r0, [sl, #8]
	tst r0, #0x400
	beq _020C0770
	cmp sb, #0x40
	cmpne sb, #0x60
	addeq r4, r4, #1
	cmp sb, #0x20
	cmpne sb, #0x60
	bne _020C075C
	tst r0, #0x100
	add r4, r4, #1
	bne _020C075C
	ldr r0, [sl]
	add r1, sp, #0x10
	ldrb r3, [r0, #4]
	mov r0, #0x14
	mov r2, #1
	str r3, [sp, #0x10]
	bl FUN_020C2528
_020C075C:
	ldr r0, [sl]
	add sp, sp, #0x14
	add r0, r0, r4
	str r0, [sl]
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020C0770:
	cmp sb, #0x40
	cmpne sb, #0x60
	bne _020C07B4
	ldr r0, [sl]
	cmp sb, #0x40
	ldrbeq r0, [r0, #4]
	add r4, r4, #1
	streq r0, [sp, #0xc]
	ldrbne r0, [r0, #5]
	strne r0, [sp, #0xc]
	ldr r0, [sl, #8]
	tst r0, #0x100
	bne _020C07B4
	add r1, sp, #0xc
	mov r0, #0x14
	mov r2, #1
	bl FUN_020C2528
_020C07B4:
	add r0, sl, #0x12c
	str r0, [sl, #0xb4]
	ldr r0, [sl, #0x24]
	cmp r0, #0
	ldrbne r8, [sl, #0x92]
	moveq r8, #0
	cmp r8, #1
	bne _020C0808
	ldr r1, [sl, #8]
	mov r0, sl
	bic r1, r1, #0x40
	str r1, [sl, #8]
	ldr r1, [sl, #0x24]
	blx r1
	ldr r0, [sl, #0x24]
	cmp r0, #0
	ldrbne r8, [sl, #0x92]
	ldr r0, [sl, #8]
	moveq r8, #0
	and r0, r0, #0x40
	b _020C080C
_020C0808:
	mov r0, #0
_020C080C:
	cmp r0, #0
	bne _020C0A54
	ldr r0, [sl, #4]
	ldr r1, [r0, #0x34]
	cmp r1, #0
	beq _020C0840
	mov r0, #0x58
	mla r5, r6, r0, r1
	ldr r0, [sl, #8]
	tst r0, #0x80
	moveq r0, #1
	movne r0, #0
	b _020C0848
_020C0840:
	add r5, sl, #0x12c
	mov r0, #0
_020C0848:
	cmp r0, #0
	bne _020C0A50
	mov r0, #0
	str r0, [r5]
	ldr r0, [sl, #4]
	ldr r1, [r0, #0x10]
	cmp r1, #0
	beq _020C0880
	ldr r3, [r0, #0x14]
	mov r0, r5
	mov r2, r6
	blx r3
	cmp r0, #0
	bne _020C0A50
_020C0880:
	ldr r2, [sl, #0xd4]
	cmp r2, #0
	beq _020C08C8
	beq _020C08B4
	ldrb r0, [r2, #1]
	cmp r6, r0
	bhs _020C08B4
	ldrh r1, [r2, #6]
	ldrh r0, [r2, r1]
	add r1, r2, r1
	add r1, r1, #4
	mla r1, r0, r6, r1
	b _020C08B8
_020C08B4:
	mov r1, #0
_020C08B8:
	cmp r1, #0
	ldrne r0, [r1]
	addne r7, r2, r0
	bne _020C08CC
_020C08C8:
	mov r7, #0
_020C08CC:
	ldrh r0, [r7]
	add r6, r7, #4
	tst r0, #1
	beq _020C08EC
	ldr r0, [r5]
	orr r0, r0, #4
	str r0, [r5]
	b _020C0908
_020C08EC:
	ldr r0, [r6]
	str r0, [r5, #0x4c]
	ldr r0, [r6, #4]
	str r0, [r5, #0x50]
	ldr r0, [r6, #8]
	add r6, r6, #0xc
	str r0, [r5, #0x54]
_020C0908:
	ldrh r0, [r7]
	tst r0, #2
	beq _020C0924
	ldr r0, [r5]
	orr r0, r0, #2
	str r0, [r5]
	b _020C0A38
_020C0924:
	tst r0, #8
	beq _020C09EC
	and r1, r0, #0xf0
	asr fp, r1, #4
	ldrsh r1, [r6]
	add r0, r5, #0x28
	str r1, [sp]
	ldrsh r1, [r6, #2]
	str r1, [sp, #4]
	blx FUN_020D4BD0
	ldrh r0, [r7]
	ldr r2, _020C0B38 @ =0x02109494
	ldr r1, _020C0B3C @ =0x02109495
	tst r0, #0x100
	mov r0, #0x1000
	ldrb r2, [r2, fp, lsl #2]
	ldrb r1, [r1, fp, lsl #2]
	rsbne r0, r0, #0
	add r3, r5, fp, lsl #2
	str r0, [r3, #0x28]
	ldr r0, [sp]
	add r2, r5, r2, lsl #2
	str r0, [r2, #0x28]
	ldr r0, [sp, #4]
	add r1, r5, r1, lsl #2
	str r0, [r1, #0x28]
	ldrh r0, [r7]
	tst r0, #0x200
	beq _020C09A4
	ldr r0, [sp, #4]
	rsb r0, r0, #0
	str r0, [sp, #4]
_020C09A4:
	ldr r0, _020C0B40 @ =0x02109496
	ldrb r0, [r0, fp, lsl #2]
	add r1, r5, r0, lsl #2
	ldr r0, [sp, #4]
	str r0, [r1, #0x28]
	ldrh r0, [r7]
	tst r0, #0x400
	beq _020C09D0
	ldr r0, [sp]
	rsb r0, r0, #0
	str r0, [sp]
_020C09D0:
	ldr r0, _020C0B44 @ =0x02109497
	add r6, r6, #4
	ldrb r0, [r0, fp, lsl #2]
	add r1, r5, r0, lsl #2
	ldr r0, [sp]
	str r0, [r1, #0x28]
	b _020C0A38
_020C09EC:
	ldrsh r0, [r7, #2]
	str r0, [r5, #0x28]
	ldrsh r0, [r6]
	str r0, [r5, #0x2c]
	ldrsh r0, [r6, #2]
	str r0, [r5, #0x30]
	ldrsh r0, [r6, #4]
	str r0, [r5, #0x34]
	ldrsh r0, [r6, #6]
	str r0, [r5, #0x38]
	ldrsh r0, [r6, #8]
	str r0, [r5, #0x3c]
	ldrsh r0, [r6, #0xa]
	str r0, [r5, #0x40]
	ldrsh r0, [r6, #0xc]
	str r0, [r5, #0x44]
	ldrsh r0, [r6, #0xe]
	add r6, r6, #0x10
	str r0, [r5, #0x48]
_020C0A38:
	ldrh r3, [r7]
	ldr r2, [sl]
	ldr r7, [sl, #0xe8]
	mov r0, r5
	mov r1, r6
	blx r7
_020C0A50:
	str r5, [sl, #0xb4]
_020C0A54:
	cmp r8, #2
	bne _020C0A90
	ldr r1, [sl, #8]
	mov r0, sl
	bic r1, r1, #0x40
	str r1, [sl, #8]
	ldr r1, [sl, #0x24]
	blx r1
	ldr r0, [sl, #0x24]
	cmp r0, #0
	ldrbne r8, [sl, #0x92]
	ldr r0, [sl, #8]
	moveq r8, #0
	and r0, r0, #0x40
	b _020C0A94
_020C0A90:
	mov r0, #0
_020C0A94:
	cmp r0, #0
	bne _020C0AB4
	ldr r0, [sl, #8]
	tst r0, #0x100
	bne _020C0AB4
	ldr r0, [sl, #0xb4]
	ldr r1, [sl, #0xec]
	blx r1
_020C0AB4:
	mov r0, #0
	str r0, [sl, #0xb4]
	cmp r8, #3
	bne _020C0AE4
	ldr r1, [sl, #8]
	mov r0, sl
	bic r1, r1, #0x40
	str r1, [sl, #8]
	ldr r1, [sl, #0x24]
	blx r1
	ldr r0, [sl, #8]
	and r0, r0, #0x40
_020C0AE4:
	cmp sb, #0x20
	cmpne sb, #0x60
	bne _020C0B24
	cmp r0, #0
	add r4, r4, #1
	bne _020C0B24
	ldr r0, [sl, #8]
	tst r0, #0x100
	bne _020C0B24
	ldr r0, [sl]
	add r1, sp, #8
	ldrb r3, [r0, #4]
	mov r0, #0x13
	mov r2, #1
	str r3, [sp, #8]
	bl FUN_020C2528
_020C0B24:
	ldr r0, [sl]
	add r0, r0, r4
	str r0, [sl]
	add sp, sp, #0x14
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020C0B38: .4byte 0x02109494
_020C0B3C: .4byte 0x02109495
_020C0B40: .4byte 0x02109496
_020C0B44: .4byte 0x02109497
	arm_func_end FUN_020C06E8

	arm_func_start FUN_020C0B48
FUN_020C0B48: @ 0x020C0B48
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0xc8
	mov sb, r0
	ldr r0, [sb, #8]
	mov r8, r1
	tst r0, #0x200
	mov r4, #2
	ldr r5, _020C0E24 @ =_02110B3C
	ldr r6, _020C0E28 @ =_02110B48
	beq _020C0B9C
	cmp r8, #0x40
	cmpne r8, #0x60
	addeq r4, r4, #1
	cmp r8, #0x20
	cmpne r8, #0x60
	ldr r0, [sb]
	addeq r4, r4, #1
	add r0, r0, r4
	add sp, sp, #0xc8
	str r0, [sb]
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_020C0B9C:
	cmp r8, #0x40
	cmpne r8, #0x60
	bne _020C0BDC
	tst r0, #0x100
	add r4, r4, #1
	bne _020C0BDC
	ldr r0, [sb]
	cmp r8, #0x40
	ldrbeq r0, [r0, #2]
	add r1, sp, #4
	mov r2, #1
	streq r0, [sp, #4]
	ldrbne r0, [r0, #3]
	strne r0, [sp, #4]
	mov r0, #0x14
	bl FUN_020C2528
_020C0BDC:
	ldr r0, [sb, #0x28]
	cmp r0, #0
	ldrbne r7, [sb, #0x93]
	moveq r7, #0
	cmp r7, #1
	bne _020C0C28
	ldr r1, [sb, #8]
	mov r0, sb
	bic r1, r1, #0x40
	str r1, [sb, #8]
	ldr r1, [sb, #0x28]
	blx r1
	ldr r0, [sb, #0x28]
	cmp r0, #0
	ldrbne r7, [sb, #0x93]
	ldr r0, [sb, #8]
	moveq r7, #0
	and r1, r0, #0x40
	b _020C0C2C
_020C0C28:
	mov r1, #0
_020C0C2C:
	ldr r0, [sb, #8]
	tst r0, #0x100
	cmpeq r1, #0
	bne _020C0DA4
	bl FUN_020C23F4
	ldr r2, _020C0E2C @ =0x00151110
	ldr r1, _020C0E30 @ =0x04000400
	mov r0, #0
	str r2, [r1]
	str r0, [r1]
	str r0, [r1]
	add sl, sp, #0x88
_020C0C5C:
	mov r0, sl
	bl FUN_020CF884
	cmp r0, #0
	bne _020C0C5C
	ldr r0, _020C0E34 @ =0x021DA49C
	ldr r0, [r0, #0xfc]
	tst r0, #1
	beq _020C0C9C
	bl FUN_020BF3E0
	add r1, sp, #0x48
	bl FUN_020CB6D4
	add r0, sp, #0x88
	add r1, sp, #0x48
	mov r2, r0
	bl FUN_020CC1E8
	b _020C0CC0
_020C0C9C:
	tst r0, #2
	beq _020C0CC0
	ldr r0, _020C0E38 @ =0x021DA4E8
	add r1, sp, #8
	bl FUN_020CB6D4
	add r0, sp, #0x88
	add r1, sp, #8
	mov r2, r0
	bl FUN_020CC1E8
_020C0CC0:
	ldr r3, [sp, #0xb8]
	ldr r2, [sp, #0xbc]
	ldr r1, [sp, #0xc0]
	add r0, sp, #0x88
	str r3, [r5]
	str r2, [r5, #4]
	str r1, [r5, #8]
	bl FUN_020CCF80
	str r0, [r6]
	add r0, sp, #0x98
	bl FUN_020CCF80
	str r0, [r6, #4]
	add r0, sp, #0xa8
	bl FUN_020CCF80
	ldr r1, _020C0E34 @ =0x021DA49C
	str r0, [r6, #8]
	ldr r0, [r1, #0xfc]
	ldr r1, _020C0E30 @ =0x04000400
	tst r0, #1
	beq _020C0D50
	ldr r3, _020C0E3C @ =0x00171012
	ldr r0, _020C0E40 @ =_02110B10
	mov r2, #8
	str r3, [r1]
	bl FUN_020D4830
	bl FUN_020BF418
	ldr r1, _020C0E30 @ =0x04000400
	mov r2, #0x30
	bl FUN_020D4830
	ldr r2, _020C0E44 @ =0x00001B19
	ldr r1, _020C0E30 @ =0x04000400
	ldr r0, _020C0E48 @ =_02110B18
	str r2, [r1]
	mov r2, #0x3c
	bl FUN_020D4830
	b _020C0DA4
_020C0D50:
	tst r0, #2
	beq _020C0D98
	ldr r3, _020C0E3C @ =0x00171012
	ldr r0, _020C0E40 @ =_02110B10
	mov r2, #8
	str r3, [r1]
	bl FUN_020D4830
	bl FUN_020BF0F8
	ldr r1, _020C0E30 @ =0x04000400
	mov r2, #0x30
	bl FUN_020D4830
	ldr r2, _020C0E44 @ =0x00001B19
	ldr r1, _020C0E30 @ =0x04000400
	ldr r0, _020C0E48 @ =_02110B18
	str r2, [r1]
	mov r2, #0x3c
	bl FUN_020D4830
	b _020C0DA4
_020C0D98:
	ldr r0, _020C0E4C @ =_02110B0C
	mov r2, #0x48
	bl FUN_020D4830
_020C0DA4:
	cmp r7, #3
	movne r0, #0
	bne _020C0DD0
	ldr r1, [sb, #8]
	mov r0, sb
	bic r1, r1, #0x40
	str r1, [sb, #8]
	ldr r1, [sb, #0x28]
	blx r1
	ldr r0, [sb, #8]
	and r0, r0, #0x40
_020C0DD0:
	cmp r8, #0x20
	cmpne r8, #0x60
	bne _020C0E10
	cmp r0, #0
	add r4, r4, #1
	bne _020C0E10
	ldr r0, [sb, #8]
	tst r0, #0x100
	bne _020C0E10
	ldr r0, [sb]
	add r1, sp, #0
	ldrb r3, [r0, #2]
	mov r0, #0x13
	mov r2, #1
	str r3, [sp]
	bl FUN_020C2528
_020C0E10:
	ldr r0, [sb]
	add r0, r0, r4
	str r0, [sb]
	add sp, sp, #0xc8
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0
_020C0E24: .4byte _02110B3C
_020C0E28: .4byte _02110B48
_020C0E2C: .4byte 0x00151110
_020C0E30: .4byte 0x04000400
_020C0E34: .4byte 0x021DA49C
_020C0E38: .4byte 0x021DA4E8
_020C0E3C: .4byte 0x00171012
_020C0E40: .4byte _02110B10
_020C0E44: .4byte 0x00001B19
_020C0E48: .4byte _02110B18
_020C0E4C: .4byte _02110B0C
	arm_func_end FUN_020C0B48

	arm_func_start FUN_020C0E50
FUN_020C0E50: @ 0x020C0E50
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0xc8
	mov sl, r0
	ldr r0, [sl, #8]
	mov sb, r1
	tst r0, #0x200
	mov r5, #2
	ldr fp, _020C1188 @ =_02110B84
	ldr r6, _020C118C @ =_02110B90
	ldr r7, _020C1190 @ =_02110B60
	beq _020C0EA8
	cmp sb, #0x40
	cmpne sb, #0x60
	addeq r5, r5, #1
	cmp sb, #0x20
	cmpne sb, #0x60
	ldr r0, [sl]
	addeq r5, r5, #1
	add r0, r0, r5
	add sp, sp, #0xc8
	str r0, [sl]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020C0EA8:
	cmp sb, #0x40
	cmpne sb, #0x60
	bne _020C0EE8
	tst r0, #0x100
	add r5, r5, #1
	bne _020C0EE8
	ldr r0, [sl]
	cmp sb, #0x40
	ldrbeq r0, [r0, #2]
	add r1, sp, #4
	mov r2, #1
	streq r0, [sp, #4]
	ldrbne r0, [r0, #3]
	strne r0, [sp, #4]
	mov r0, #0x14
	bl FUN_020C2528
_020C0EE8:
	ldr r0, [sl, #0x2c]
	cmp r0, #0
	ldrbne r8, [sl, #0x94]
	moveq r8, #0
	cmp r8, #1
	bne _020C0F34
	ldr r1, [sl, #8]
	mov r0, sl
	bic r1, r1, #0x40
	str r1, [sl, #8]
	ldr r1, [sl, #0x2c]
	blx r1
	ldr r0, [sl, #0x2c]
	cmp r0, #0
	ldrbne r8, [sl, #0x94]
	ldr r0, [sl, #8]
	moveq r8, #0
	and r1, r0, #0x40
	b _020C0F38
_020C0F34:
	mov r1, #0
_020C0F38:
	ldr r0, [sl, #8]
	tst r0, #0x100
	cmpeq r1, #0
	bne _020C1108
	bl FUN_020C23F4
	ldr r2, _020C1194 @ =0x00151110
	ldr r1, _020C1198 @ =0x04000400
	mov r0, #0
	str r2, [r1]
	str r0, [r1]
	str r0, [r1]
	add r4, sp, #0x88
_020C0F68:
	mov r0, r4
	bl FUN_020CF884
	cmp r0, #0
	bne _020C0F68
	ldr r0, _020C119C @ =0x021DA49C
	ldr r0, [r0, #0xfc]
	tst r0, #1
	beq _020C0FA8
	bl FUN_020BF3E0
	add r1, sp, #0x48
	bl FUN_020CB6D4
	add r0, sp, #0x88
	add r1, sp, #0x48
	mov r2, r0
	bl FUN_020CC1E8
	b _020C0FCC
_020C0FA8:
	tst r0, #2
	beq _020C0FCC
	ldr r0, _020C11A0 @ =0x021DA4E8
	add r1, sp, #8
	bl FUN_020CB6D4
	add r0, sp, #0x88
	add r1, sp, #8
	mov r2, r0
	bl FUN_020CC1E8
_020C0FCC:
	ldr r3, [sp, #0xb8]
	ldr r2, [sp, #0xbc]
	ldr r1, [sp, #0xc0]
	add r0, sp, #0x88
	str r3, [fp]
	str r2, [fp, #4]
	str r1, [fp, #8]
	bl FUN_020CCF80
	str r0, [r6]
	add r0, sp, #0x98
	bl FUN_020CCF80
	str r0, [r6, #4]
	add r0, sp, #0xa8
	bl FUN_020CCF80
	ldr r1, [sp, #0x9c]
	str r0, [r6, #8]
	cmp r1, #0
	ldreq r0, [sp, #0xa0]
	cmpeq r0, #0
	beq _020C1040
	add r0, sp, #0x98
	add r1, r7, #0xc
	bl FUN_020CCFE0
	ldr r1, [r7, #0x14]
	ldr r0, [r7, #0x10]
	rsb r1, r1, #0
	str r1, [r7, #0x1c]
	str r0, [r7, #0x20]
	b _020C1060
_020C1040:
	add r0, sp, #0xa8
	add r1, r7, #0x18
	bl FUN_020CCFE0
	ldr r1, [r7, #0x1c]
	ldr r0, [r7, #0x20]
	rsb r1, r1, #0
	str r1, [r7, #0x14]
	str r0, [r7, #0x10]
_020C1060:
	ldr r0, _020C119C @ =0x021DA49C
	ldr r1, _020C1198 @ =0x04000400
	ldr r0, [r0, #0xfc]
	tst r0, #1
	beq _020C10B4
	ldr r3, _020C11A4 @ =0x00171012
	ldr r0, _020C11A8 @ =_02110B58
	mov r2, #8
	str r3, [r1]
	bl FUN_020D4830
	bl FUN_020BF418
	ldr r1, _020C1198 @ =0x04000400
	mov r2, #0x30
	bl FUN_020D4830
	ldr r2, _020C11AC @ =0x00001B19
	ldr r1, _020C1198 @ =0x04000400
	ldr r0, _020C1190 @ =_02110B60
	str r2, [r1]
	mov r2, #0x3c
	bl FUN_020D4830
	b _020C1108
_020C10B4:
	tst r0, #2
	beq _020C10FC
	ldr r3, _020C11A4 @ =0x00171012
	ldr r0, _020C11A8 @ =_02110B58
	mov r2, #8
	str r3, [r1]
	bl FUN_020D4830
	bl FUN_020BF0F8
	ldr r1, _020C1198 @ =0x04000400
	mov r2, #0x30
	bl FUN_020D4830
	ldr r2, _020C11AC @ =0x00001B19
	ldr r1, _020C1198 @ =0x04000400
	ldr r0, _020C1190 @ =_02110B60
	str r2, [r1]
	mov r2, #0x3c
	bl FUN_020D4830
	b _020C1108
_020C10FC:
	ldr r0, _020C11B0 @ =_02110B54
	mov r2, #0x48
	bl FUN_020D4830
_020C1108:
	cmp r8, #3
	movne r0, #0
	bne _020C1134
	ldr r1, [sl, #8]
	mov r0, sl
	bic r1, r1, #0x40
	str r1, [sl, #8]
	ldr r1, [sl, #0x2c]
	blx r1
	ldr r0, [sl, #8]
	and r0, r0, #0x40
_020C1134:
	cmp sb, #0x20
	cmpne sb, #0x60
	bne _020C1174
	cmp r0, #0
	add r5, r5, #1
	bne _020C1174
	ldr r0, [sl, #8]
	tst r0, #0x100
	bne _020C1174
	ldr r0, [sl]
	add r1, sp, #0
	ldrb r3, [r0, #2]
	mov r0, #0x13
	mov r2, #1
	str r3, [sp]
	bl FUN_020C2528
_020C1174:
	ldr r0, [sl]
	add r0, r0, r5
	str r0, [sl]
	add sp, sp, #0xc8
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020C1188: .4byte _02110B84
_020C118C: .4byte _02110B90
_020C1190: .4byte _02110B60
_020C1194: .4byte 0x00151110
_020C1198: .4byte 0x04000400
_020C119C: .4byte 0x021DA49C
_020C11A0: .4byte 0x021DA4E8
_020C11A4: .4byte 0x00171012
_020C11A8: .4byte _02110B58
_020C11AC: .4byte 0x00001B19
_020C11B0: .4byte _02110B54
	arm_func_end FUN_020C0E50

	arm_func_start FUN_020C11B4
FUN_020C11B4: @ 0x020C11B4
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x104
	ldr r1, [r0, #4]
	ldr r6, [r0]
	ldr r7, [r1, #4]
	ldrb r2, [r6, #2]
	ldr r3, [r7, #0x10]
	mov r5, #0
	str r0, [sp]
	str r2, [sp, #0x10]
	add r3, r7, r3
	add r1, sp, #0xb0
	mov r0, r5
	mov r2, #0x54
	mov r4, r5
	str r3, [sp, #0x14]
	add r6, r6, #3
	bl FUN_020D4858
	bl FUN_020C23F4
	mov r0, r5
	ldr r1, _020C1900 @ =0x04000440
	str r0, [sp, #0xc]
	str r0, [r1]
	mov r0, #1
	str r0, [r1, #0xc]
	ldr r0, [sp, #0xc]
	str r0, [r1, #0x14]
	mov r0, #2
	str r0, [r1]
	ldr r0, [sp, #0x10]
	cmp r0, #0
	bls _020C16A4
_020C1234:
	ldrb fp, [r6, #1]
	mov r1, #0x64
	ldr r0, [sp]
	smulbb r1, fp, r1
	lsr r2, fp, #5
	str r1, [sp, #4]
	add r0, r0, r2, lsl #2
	ldr r3, _020C1904 @ =0x021DBB04
	ldr r2, [sp, #4]
	ldr sb, [r0, #0xcc]
	add r7, r3, r2
	and r1, fp, #0x1f
	mov r2, #1
	ands r3, sb, r2, lsl r1
	str r3, [sp, #8]
	bne _020C12A0
	ldr sb, [r0, #0xcc]
	ldr r3, _020C1908 @ =0x04000450
	orr r1, sb, r2, lsl r1
	str r1, [r0, #0xcc]
	ldr r0, [sp, #0x14]
	mov r1, #0x54
	mla r0, fp, r1, r0
	ldrb sb, [r6]
	str sb, [r3]
	str r2, [r3, #-0x10]
	bl FUN_020CF52C
_020C12A0:
	ldr r0, [sp, #0xc]
	cmp r0, #0
	beq _020C14C8
	ldr r0, [sp, #0xe0]
	ldm r8, {sb, lr}
	str r0, [sp, #0x18]
	asr r0, sb, #0x1f
	str r0, [sp, #0x20]
	ldr r0, [sp, #0xe4]
	ldr ip, [r8, #8]
	str r0, [sp, #0x24]
	asr r0, lr, #0x1f
	str r0, [sp, #0x28]
	ldr r0, [sp, #0xe8]
	ldr r3, [r8, #0xc]
	str r0, [sp, #0x2c]
	ldr r0, [sp, #0xec]
	ldr r2, [r8, #0x10]
	str r0, [sp, #0x34]
	asr r0, ip, #0x1f
	str r0, [sp, #0x30]
	ldr r0, [sp, #0xf0]
	ldr r1, [r8, #0x14]
	str r0, [sp, #0x3c]
	asr r0, r3, #0x1f
	str r0, [sp, #0x38]
	ldr r0, [sp, #0xf4]
	str r0, [sp, #0x44]
	asr r0, r2, #0x1f
	str r0, [sp, #0x40]
	ldr r0, [sp, #0xf8]
	str r0, [sp, #0x4c]
	asr r0, r1, #0x1f
	str r0, [sp, #0x48]
	ldr r0, [r8, #0x18]
	str r0, [sp, #0x50]
	ldr r0, [sp, #0xfc]
	str r0, [sp, #0x58]
	ldr r0, [sp, #0x50]
	asr r0, r0, #0x1f
	str r0, [sp, #0x54]
	ldr r0, [r8, #0x1c]
	str r0, [sp, #0xa8]
	ldr r0, [r8, #0x20]
	ldr r8, [sp, #0xa8]
	asr r8, r8, #0x1f
	str r8, [sp, #0x5c]
	ldr r8, [sp, #0x100]
	str r8, [sp, #0x60]
	asr r8, r0, #0x1f
	str r8, [sp, #0x64]
	umull sl, r8, r5, sb
	str sl, [sp, #0x1c]
	ldr sl, [sp, #0x20]
	mla r8, r5, sl, r8
	mla r8, r4, sb, r8
	ldr sb, [sp, #0x1c]
	lsr sb, sb, #0xc
	orr sb, sb, r8, lsl #20
	ldr r8, [sp, #0x18]
	adds r8, r8, sb
	str r8, [sp, #0xe0]
	umull sl, sb, r5, lr
	ldr r8, [sp, #0x28]
	lsr sl, sl, #0xc
	mla sb, r5, r8, sb
	mla sb, r4, lr, sb
	ldr r8, [sp, #0x24]
	orr sl, sl, sb, lsl #20
	adds r8, r8, sl
	str r8, [sp, #0xe4]
	umull sl, sb, r5, ip
	ldr r8, [sp, #0x30]
	lsr sl, sl, #0xc
	mla sb, r5, r8, sb
	mla sb, r4, ip, sb
	ldr r8, [sp, #0x2c]
	orr sl, sl, sb, lsl #20
	adds r8, r8, sl
	str r8, [sp, #0xe8]
	ldr r8, [sp, #0x38]
	umull sl, sb, r5, r3
	mla sb, r5, r8, sb
	mla sb, r4, r3, sb
	lsr r8, sl, #0xc
	ldr r3, [sp, #0x34]
	orr r8, r8, sb, lsl #20
	adds r3, r3, r8
	str r3, [sp, #0xec]
	ldr r3, [sp, #0x40]
	umull sb, r8, r5, r2
	mla r8, r5, r3, r8
	mla r8, r4, r2, r8
	lsr r3, sb, #0xc
	ldr r2, [sp, #0x3c]
	orr r3, r3, r8, lsl #20
	adds r2, r2, r3
	str r2, [sp, #0xf0]
	ldr r2, [sp, #0x48]
	umull r8, r3, r5, r1
	mla r3, r5, r2, r3
	mla r3, r4, r1, r3
	lsr r2, r8, #0xc
	ldr r1, [sp, #0x44]
	orr r2, r2, r3, lsl #20
	adds r1, r1, r2
	str r1, [sp, #0xf4]
	ldr r1, [sp, #0x50]
	umull r3, r2, r5, r1
	ldr r1, [sp, #0x54]
	lsr r3, r3, #0xc
	mla r2, r5, r1, r2
	ldr r1, [sp, #0x50]
	mla r2, r4, r1, r2
	ldr r1, [sp, #0x4c]
	orr r3, r3, r2, lsl #20
	adds r1, r1, r3
	str r1, [sp, #0xf8]
	ldr r1, [sp, #0xa8]
	umull r3, r2, r5, r1
	ldr r1, [sp, #0x5c]
	lsr r3, r3, #0xc
	mla r2, r5, r1, r2
	ldr r1, [sp, #0xa8]
	mla r2, r4, r1, r2
	ldr r1, [sp, #0x58]
	orr r3, r3, r2, lsl #20
	adds r1, r1, r3
	str r1, [sp, #0xfc]
	ldr r1, [sp, #0x64]
	umull r3, r2, r5, r0
	mla r2, r5, r1, r2
	mla r2, r4, r0, r2
	lsr r1, r3, #0xc
	ldr r0, [sp, #0x60]
	orr r1, r1, r2, lsl #20
	adds r0, r0, r1
	str r0, [sp, #0x100]
_020C14C8:
	ldr r0, [sp, #8]
	cmp r0, #0
	bne _020C1504
_020C14D4:
	mov r0, r7
	bl FUN_020CF884
	cmp r0, #0
	bne _020C14D4
	ldr r0, [sp, #0x14]
	mov r1, #0x54
	mla r0, fp, r1, r0
	ldr r1, _020C1900 @ =0x04000440
	mov r2, #2
	add r0, r0, #0x30
	str r2, [r1]
	bl FUN_020CF548
_020C1504:
	ldrb r0, [r6, #2]
	ldr r2, [r7]
	ldr r1, [r7, #4]
	lsl r5, r0, #4
	ldr r0, [r7, #8]
	ldr r4, [r7, #0x10]
	ldr r3, [r7, #0x14]
	smull r2, r8, r5, r2
	lsr r2, r2, #0xc
	orr r2, r2, r8, lsl #20
	smull r1, r8, r5, r1
	lsr r1, r1, #0xc
	orr r1, r1, r8, lsl #20
	smull r0, r8, r5, r0
	lsr r0, r0, #0xc
	orr r0, r0, r8, lsl #20
	smull r8, r4, r5, r4
	lsr sb, r8, #0xc
	orr sb, sb, r4, lsl #20
	smull r4, r3, r5, r3
	lsr r8, r4, #0xc
	orr r8, r8, r3, lsl #20
	asr r4, r5, #0x1f
	ldr sl, [sp, #0xb0]
	ldr r3, [sp, #0xb4]
	adds r2, sl, r2
	adds r1, r3, r1
	str r2, [sp, #0xb0]
	str r1, [sp, #0xb4]
	ldr r2, [sp, #0xb8]
	ldr r1, [sp, #0xbc]
	adds r2, r2, r0
	adds r0, r1, sb
	str r2, [sp, #0xb8]
	str r0, [sp, #0xbc]
	ldr r0, [sp, #0xc0]
	ldr r2, [sp, #0xc4]
	adds r0, r0, r8
	str r0, [sp, #0xc0]
	ldr r0, [r7, #0x18]
	ldr r3, [sp, #0xc8]
	smull r1, r0, r5, r0
	lsr r1, r1, #0xc
	orr r1, r1, r0, lsl #20
	adds r0, r2, r1
	str r0, [sp, #0xc4]
	ldr r0, [r7, #0x20]
	ldr r2, [sp, #0xcc]
	smull r1, r0, r5, r0
	lsr r1, r1, #0xc
	orr r1, r1, r0, lsl #20
	adds r0, r3, r1
	str r0, [sp, #0xc8]
	ldr r0, [r7, #0x24]
	ldr r3, [sp, #0xd0]
	smull r1, r0, r5, r0
	lsr r1, r1, #0xc
	orr r1, r1, r0, lsl #20
	adds r0, r2, r1
	str r0, [sp, #0xcc]
	ldr r0, [r7, #0x28]
	ldr r2, [sp, #0xd4]
	smull r1, r0, r5, r0
	lsr r1, r1, #0xc
	orr r1, r1, r0, lsl #20
	adds r0, r3, r1
	str r0, [sp, #0xd0]
	ldr r0, [r7, #0x30]
	ldr r3, [sp, #0xd8]
	smull r1, r0, r5, r0
	lsr r1, r1, #0xc
	orr r1, r1, r0, lsl #20
	adds r0, r2, r1
	str r0, [sp, #0xd4]
	ldr r1, [r7, #0x34]
	ldr r0, [r7, #0x38]
	smull r2, r1, r5, r1
	lsr r2, r2, #0xc
	orr r2, r2, r1, lsl #20
	adds r1, r3, r2
	str r1, [sp, #0xd8]
	smull r1, r0, r5, r0
	lsr r1, r1, #0xc
	orr r1, r1, r0, lsl #20
	ldr r0, [sp, #0xdc]
	adds r0, r0, r1
	str r0, [sp, #0xdc]
	ldr r1, _020C190C @ =0x021DBB44
	ldr r0, [sp, #8]
	cmp r0, #0
	add r6, r6, #3
	ldr r0, [sp, #4]
	add r8, r1, r0
	bne _020C168C
_020C167C:
	mov r0, r8
	bl FUN_020CF8B4
	cmp r0, #0
	bne _020C167C
_020C168C:
	ldr r0, [sp, #0xc]
	add r1, r0, #1
	ldr r0, [sp, #0x10]
	str r1, [sp, #0xc]
	cmp r1, r0
	blo _020C1234
_020C16A4:
	ldm r8, {r0, fp}
	ldr sl, [r8, #8]
	ldr sb, [r8, #0xc]
	ldr r7, [r8, #0x10]
	ldr r6, [r8, #0x14]
	ldr r3, [r8, #0x18]
	ldr r2, [r8, #0x1c]
	ldr r1, [r8, #0x20]
	umull ip, r8, r5, r0
	lsr lr, ip, #0xc
	ldr ip, [sp, #0xe0]
	str ip, [sp, #0x68]
	asr ip, r0, #0x1f
	mla r8, r5, ip, r8
	mla r8, r4, r0, r8
	orr lr, lr, r8, lsl #20
	umull ip, r8, r5, fp
	ldr r0, [sp, #0x68]
	str ip, [sp, #0x6c]
	adds r0, r0, lr
	str r0, [sp, #0xe0]
	asr r0, fp, #0x1f
	str r0, [sp, #0xac]
	ldr ip, [sp, #0xac]
	ldr r0, [sp, #0xe8]
	mla r8, r5, ip, r8
	mla r8, r4, fp, r8
	ldr fp, [sp, #0x6c]
	str r0, [sp, #0x70]
	lsr fp, fp, #0xc
	asr r0, sl, #0x1f
	str r0, [sp, #0x74]
	ldr r0, [sp, #0xec]
	ldr lr, [sp, #0xe4]
	orr fp, fp, r8, lsl #20
	adds r8, lr, fp
	str r8, [sp, #0xe4]
	str r0, [sp, #0x78]
	asr r0, sb, #0x1f
	str r0, [sp, #0x7c]
	ldr r0, [sp, #0xf0]
	ldr r8, [sp, #0x74]
	umull ip, fp, r5, sl
	mla fp, r5, r8, fp
	mla fp, r4, sl, fp
	lsr sl, ip, #0xc
	str r0, [sp, #0x80]
	asr r0, r7, #0x1f
	str r0, [sp, #0x84]
	ldr r0, [sp, #0xf4]
	ldr r8, [sp, #0x70]
	orr sl, sl, fp, lsl #20
	adds r8, r8, sl
	str r8, [sp, #0xe8]
	str r0, [sp, #0x88]
	asr r0, r6, #0x1f
	str r0, [sp, #0x8c]
	ldr r0, [sp, #0xf8]
	ldr r8, [sp, #0x7c]
	umull fp, sl, r5, sb
	mla sl, r5, r8, sl
	mla sl, r4, sb, sl
	lsr sb, fp, #0xc
	str r0, [sp, #0x90]
	asr r0, r3, #0x1f
	str r0, [sp, #0x94]
	ldr r0, [sp, #0xfc]
	ldr r8, [sp, #0x78]
	orr sb, sb, sl, lsl #20
	adds r8, r8, sb
	str r8, [sp, #0xec]
	str r0, [sp, #0x98]
	asr r0, r2, #0x1f
	str r0, [sp, #0x9c]
	ldr r0, [sp, #0x100]
	ldr r8, [sp, #0x84]
	umull sl, sb, r5, r7
	mla sb, r5, r8, sb
	mla sb, r4, r7, sb
	lsr r8, sl, #0xc
	str r0, [sp, #0xa0]
	asr r0, r1, #0x1f
	str r0, [sp, #0xa4]
	ldr r7, [sp, #0x80]
	orr r8, r8, sb, lsl #20
	adds r7, r7, r8
	str r7, [sp, #0xf0]
	ldr r7, [sp, #0x8c]
	umull sb, r8, r5, r6
	mla r8, r5, r7, r8
	mla r8, r4, r6, r8
	lsr r7, sb, #0xc
	ldr r6, [sp, #0x88]
	orr r7, r7, r8, lsl #20
	adds r6, r6, r7
	str r6, [sp, #0xf4]
	ldr r6, [sp, #0x94]
	umull r8, r7, r5, r3
	mla r7, r5, r6, r7
	mla r7, r4, r3, r7
	lsr r6, r8, #0xc
	ldr r3, [sp, #0x90]
	orr r6, r6, r7, lsl #20
	adds r3, r3, r6
	str r3, [sp, #0xf8]
	ldr r3, [sp, #0x9c]
	umull r7, r6, r5, r2
	mla r6, r5, r3, r6
	mla r6, r4, r2, r6
	lsr r3, r7, #0xc
	ldr r2, [sp, #0x98]
	orr r3, r3, r6, lsl #20
	adds r2, r2, r3
	str r2, [sp, #0xfc]
	ldr r2, [sp, #0xa4]
	umull r6, r3, r5, r1
	mla r3, r5, r2, r3
	mla r3, r4, r1, r3
	lsr r2, r6, #0xc
	ldr r1, [sp, #0xa0]
	orr r2, r2, r3, lsl #20
	adds r1, r1, r2
	add r0, sp, #0xe0
	str r1, [sp, #0x100]
	bl FUN_020CF510
	ldr r1, _020C1900 @ =0x04000440
	mov r2, #1
	add r0, sp, #0xb0
	str r2, [r1]
	bl FUN_020CF510
	ldr r1, _020C1900 @ =0x04000440
	mov r2, #0
	mov r0, #1
	str r2, [r1]
	str r0, [r1, #0x10]
	mov r0, #2
	str r0, [r1]
	ldr r0, [sp]
	ldr r0, [r0]
	ldrb r0, [r0, #1]
	str r0, [r1, #0xc]
	ldr r0, [sp]
	ldr r1, [r0]
	ldrb r0, [r1, #2]
	add r0, r0, #1
	add r0, r0, r0, lsl #1
	add r1, r1, r0
	ldr r0, [sp]
	str r1, [r0]
	add sp, sp, #0x104
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020C1900: .4byte 0x04000440
_020C1904: .4byte 0x021DBB04
_020C1908: .4byte 0x04000450
_020C190C: .4byte 0x021DBB44
	arm_func_end FUN_020C11B4

	arm_func_start FUN_020C1910
FUN_020C1910: @ 0x020C1910
	push {r4, r5, r6, lr}
	mov r5, r0
	ldr r0, [r5, #0x34]
	cmp r0, #0
	ldrbne r4, [r5, #0x96]
	moveq r4, #0
	cmp r4, #1
	bne _020C1964
	ldr r1, [r5, #8]
	mov r0, r5
	bic r1, r1, #0x40
	str r1, [r5, #8]
	ldr r1, [r5, #0x34]
	blx r1
	ldr r0, [r5, #0x34]
	cmp r0, #0
	ldrbne r4, [r5, #0x96]
	ldr r0, [r5, #8]
	moveq r4, #0
	and r1, r0, #0x40
	b _020C1968
_020C1964:
	mov r1, #0
_020C1968:
	ldr r0, [r5, #8]
	tst r0, #0x100
	cmpeq r1, #0
	bne _020C19BC
	ldr r0, [r5]
	ldrb ip, [r0, #1]
	ldrb r3, [r0, #2]
	ldrb lr, [r0, #3]
	ldrb r2, [r0, #5]
	ldrb r1, [r0, #6]
	orr r3, ip, r3, lsl #8
	ldrb r6, [r0, #4]
	orr ip, r3, lr, lsl #16
	ldrb r3, [r0, #7]
	orr r1, r2, r1, lsl #8
	orr r6, ip, r6, lsl #24
	ldrb r2, [r0, #8]
	orr r1, r1, r3, lsl #16
	add r0, r0, r6
	orr r1, r1, r2, lsl #24
	bl FUN_020C2474
_020C19BC:
	cmp r4, #3
	bne _020C19DC
	ldr r1, [r5, #8]
	mov r0, r5
	bic r1, r1, #0x40
	str r1, [r5, #8]
	ldr r1, [r5, #0x34]
	blx r1
_020C19DC:
	ldr r0, [r5]
	add r0, r0, #9
	str r0, [r5]
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020C1910

	arm_func_start FUN_020C19EC
FUN_020C19EC: @ 0x020C19EC
	push {r3, r4, lr}
	sub sp, sp, #0xc
	mov r4, r0
	ldr r0, [r4, #8]
	tst r0, #0x100
	bne _020C1A48
	tst r0, #0x200
	bne _020C1A48
	cmp r1, #0
	bne _020C1A28
	ldr r0, [r4, #0xe0]
	str r0, [sp, #8]
	str r0, [sp, #4]
	str r0, [sp]
	b _020C1A38
_020C1A28:
	ldr r0, [r4, #0xe4]
	str r0, [sp, #8]
	str r0, [sp, #4]
	str r0, [sp]
_020C1A38:
	add r1, sp, #0
	mov r0, #0x1b
	mov r2, #3
	bl FUN_020C2528
_020C1A48:
	ldr r0, [r4]
	add r0, r0, #1
	str r0, [r4]
	add sp, sp, #0xc
	pop {r3, r4, pc}
	arm_func_end FUN_020C19EC

	arm_func_start FUN_020C1A5C
FUN_020C1A5C: @ 0x020C1A5C
	push {r4, r5, r6, r7, lr}
	sub sp, sp, #0x44
	mov r7, r0
	ldr r0, [r7, #8]
	tst r0, #0x200
	bne _020C1D78
	tst r0, #1
	beq _020C1D78
	ldr r2, [r7, #0xb0]
	ldr r0, [r2, #0x10]
	and r1, r0, #0xc0000000
	cmp r1, #0x80000000
	beq _020C1AC8
	bic r0, r0, #0xc0000000
	str r0, [r2, #0x10]
	ldr r3, [r7, #0xb0]
	ldr r0, _020C1D8C @ =_02110A9C
	ldr r2, [r3, #0x10]
	ldr r1, _020C1D90 @ =_02110AA8
	orr r2, r2, #0x80000000
	str r2, [r3, #0x10]
	ldr r3, [r7, #0xb0]
	mov r2, #1
	ldr r3, [r3, #0x10]
	str r3, [r0, #0xc]
	ldr r0, [r0, #8]
	bl FUN_020C2528
_020C1AC8:
	mov r0, #3
	str r0, [sp, #0x10]
	add r1, sp, #0x10
	mov r0, #0x10
	mov r2, #1
	bl FUN_020C2528
	ldr r0, [r7, #0x3c]
	cmp r0, #0
	ldrbne r6, [r7, #0x98]
	moveq r6, #0
	cmp r6, #1
	bne _020C1B2C
	ldr r1, [r7, #8]
	mov r0, r7
	bic r1, r1, #0x40
	str r1, [r7, #8]
	ldr r1, [r7, #0x3c]
	blx r1
	ldr r0, [r7, #0x3c]
	cmp r0, #0
	ldrbne r6, [r7, #0x98]
	ldr r0, [r7, #8]
	moveq r6, #0
	and r0, r0, #0x40
	b _020C1B30
_020C1B2C:
	mov r0, #0
_020C1B30:
	cmp r0, #0
	bne _020C1BA8
	ldr r0, [r7, #0xb0]
	add r1, sp, #0x14
	ldrh r5, [r0, #0x2e]
	ldrh r4, [r0, #0x2c]
	mov r3, #0x10000
	rsb r0, r5, #0
	lsl ip, r0, #0xf
	lsl lr, r4, #0xf
	mov r0, #0x1b
	mov r2, #3
	str lr, [sp, #0x14]
	str ip, [sp, #0x18]
	str r3, [sp, #0x1c]
	bl FUN_020C2528
	lsl r0, r5, #0x13
	asr r1, r0, #0x10
	lsl r0, r4, #0x13
	lsl r1, r1, #0x10
	asr r0, r0, #0x10
	lsr r1, r1, #0x10
	lsl r0, r0, #0x10
	lsl r1, r1, #0x10
	orr r3, r1, r0, lsr #16
	add r1, sp, #0xc
	mov r0, #0x22
	mov r2, #1
	str r3, [sp, #0xc]
	bl FUN_020C2528
_020C1BA8:
	cmp r6, #2
	bne _020C1BE4
	ldr r1, [r7, #8]
	mov r0, r7
	bic r1, r1, #0x40
	str r1, [r7, #8]
	ldr r1, [r7, #0x3c]
	blx r1
	ldr r0, [r7, #0x3c]
	cmp r0, #0
	ldrbne r6, [r7, #0x98]
	ldr r0, [r7, #8]
	moveq r6, #0
	and r0, r0, #0x40
	b _020C1BE8
_020C1BE4:
	mov r0, #0
_020C1BE8:
	cmp r0, #0
	bne _020C1C7C
	ldr r0, [r7]
	ldr r4, [r7, #0xd8]
	ldrb r3, [r0, #1]
	cmp r4, #0
	beq _020C1C44
	adds r2, r4, #4
	beq _020C1C30
	ldrb r0, [r4, #5]
	cmp r3, r0
	bhs _020C1C30
	ldrh r1, [r4, #0xa]
	ldrh r0, [r2, r1]
	add r1, r2, r1
	add r1, r1, #4
	mla r1, r0, r3, r1
	b _020C1C34
_020C1C30:
	mov r1, #0
_020C1C34:
	cmp r1, #0
	ldrne r0, [r1]
	addne r0, r4, r0
	bne _020C1C48
_020C1C44:
	mov r0, #0
_020C1C48:
	ldrh r2, [r0, #0x1e]
	tst r2, #0x2000
	beq _020C1C7C
	add r1, r0, #0x2c
	tst r2, #2
	addeq r1, r1, #8
	tst r2, #4
	addeq r1, r1, #4
	tst r2, #8
	addeq r1, r1, #8
	mov r0, #0x18
	mov r2, #0x10
	bl FUN_020C2528
_020C1C7C:
	cmp r6, #3
	movne r0, #0
	bne _020C1CA8
	ldr r1, [r7, #8]
	mov r0, r7
	bic r1, r1, #0x40
	str r1, [r7, #8]
	ldr r1, [r7, #0x3c]
	blx r1
	ldr r0, [r7, #8]
	and r0, r0, #0x40
_020C1CA8:
	cmp r0, #0
	bne _020C1D60
	mov r3, #2
	add r1, sp, #8
	mov r0, #0x10
	mov r2, #1
	str r3, [sp, #8]
	bl FUN_020C2528
	add r1, sp, #0x20
	mov r0, #0
	bl FUN_020C260C
	mov r3, #3
	add r1, sp, #4
	mov r0, #0x10
	mov r2, #1
	str r3, [sp, #4]
	bl FUN_020C2528
	ldr r0, _020C1D94 @ =0x021DA49C
	mov r2, #9
	ldr r0, [r0, #0xfc]
	tst r0, #1
	beq _020C1D30
	ldr r1, _020C1D98 @ =0x021DA4E8
	mov r0, #0x1a
	bl FUN_020C2528
	ldr r1, _020C1D9C @ =0x021DA558
	mov r0, #0x1a
	mov r2, #9
	bl FUN_020C2528
	add r1, sp, #0x20
	mov r0, #0x1a
	mov r2, #9
	bl FUN_020C2528
	b _020C1D60
_020C1D30:
	tst r0, #2
	mov r0, #0x1a
	beq _020C1D58
	ldr r1, _020C1D98 @ =0x021DA4E8
	bl FUN_020C2528
	add r1, sp, #0x20
	mov r0, #0x1a
	mov r2, #9
	bl FUN_020C2528
	b _020C1D60
_020C1D58:
	add r1, sp, #0x20
	bl FUN_020C2528
_020C1D60:
	mov r3, #2
	add r1, sp, #0
	mov r0, #0x10
	mov r2, #1
	str r3, [sp]
	bl FUN_020C2528
_020C1D78:
	ldr r0, [r7]
	add r0, r0, #3
	str r0, [r7]
	add sp, sp, #0x44
	pop {r4, r5, r6, r7, pc}
	.align 2, 0
_020C1D8C: .4byte _02110A9C
_020C1D90: .4byte _02110AA8
_020C1D94: .4byte 0x021DA49C
_020C1D98: .4byte 0x021DA4E8
_020C1D9C: .4byte 0x021DA558
	arm_func_end FUN_020C1A5C

	arm_func_start FUN_020C1DA0
FUN_020C1DA0: @ 0x020C1DA0
	push {r3, r4, r5, lr}
	sub sp, sp, #0x80
	mov r5, r0
	ldr r0, [r5, #8]
	tst r0, #0x200
	bne _020C211C
	tst r0, #1
	beq _020C211C
	add r0, sp, #0x50
	mov r1, #0
	bl FUN_020C260C
	mov r0, #0x1e
	str r0, [sp, #0xc]
	add r1, sp, #0xc
	mov r0, #0x13
	mov r2, #1
	bl FUN_020C2528
	ldr r2, [r5, #0xb0]
	ldr r0, [r2, #0x10]
	and r1, r0, #0xc0000000
	cmp r1, #0xc0000000
	beq _020C1E30
	bic r0, r0, #0xc0000000
	str r0, [r2, #0x10]
	ldr r3, [r5, #0xb0]
	ldr r0, _020C2130 @ =_02110A9C
	ldr r2, [r3, #0x10]
	ldr r1, _020C2134 @ =_02110AA0
	orr r2, r2, #0xc0000000
	str r2, [r3, #0x10]
	ldr r3, [r5, #0xb0]
	mov r2, #1
	ldr r3, [r3, #0x10]
	str r3, [r0, #4]
	ldr r0, [r0]
	bl FUN_020C2528
_020C1E30:
	ldr r0, [r5, #0x40]
	cmp r0, #0
	ldrbne r4, [r5, #0x99]
	moveq r4, #0
	cmp r4, #1
	bne _020C1E7C
	ldr r1, [r5, #8]
	mov r0, r5
	bic r1, r1, #0x40
	str r1, [r5, #8]
	ldr r1, [r5, #0x40]
	blx r1
	ldr r0, [r5, #0x40]
	cmp r0, #0
	ldrbne r4, [r5, #0x99]
	ldr r0, [r5, #8]
	moveq r4, #0
	and r0, r0, #0x40
	b _020C1E80
_020C1E7C:
	mov r0, #0
_020C1E80:
	cmp r0, #0
	bne _020C1EC8
	ldr r0, [r5, #0xb0]
	ldr r3, _020C2130 @ =_02110A9C
	ldrh ip, [r0, #0x2e]
	ldrh r2, [r0, #0x2c]
	ldr r1, _020C2138 @ =_02110ACC
	rsb r0, ip, #0
	lsl r2, r2, #0xf
	str r2, [r3, #0x30]
	lsl r0, r0, #0xf
	str r0, [r3, #0x44]
	str r2, [r3, #0x60]
	lsl ip, ip, #0xf
	mov r0, #0x16
	mov r2, #0x10
	str ip, [r3, #0x64]
	bl FUN_020C2528
_020C1EC8:
	cmp r4, #2
	bne _020C1F04
	ldr r1, [r5, #8]
	mov r0, r5
	bic r1, r1, #0x40
	str r1, [r5, #8]
	ldr r1, [r5, #0x40]
	blx r1
	ldr r0, [r5, #0x40]
	cmp r0, #0
	ldrbne r4, [r5, #0x99]
	ldr r0, [r5, #8]
	moveq r4, #0
	and r0, r0, #0x40
	b _020C1F08
_020C1F04:
	mov r0, #0
_020C1F08:
	cmp r0, #0
	bne _020C1F9C
	ldr r0, [r5]
	ldr ip, [r5, #0xd8]
	ldrb r3, [r0, #1]
	cmp ip, #0
	beq _020C1F64
	adds r2, ip, #4
	beq _020C1F50
	ldrb r0, [ip, #5]
	cmp r3, r0
	bhs _020C1F50
	ldrh r1, [ip, #0xa]
	ldrh r0, [r2, r1]
	add r1, r2, r1
	add r1, r1, #4
	mla r1, r0, r3, r1
	b _020C1F54
_020C1F50:
	mov r1, #0
_020C1F54:
	cmp r1, #0
	ldrne r0, [r1]
	addne r0, ip, r0
	bne _020C1F68
_020C1F64:
	mov r0, #0
_020C1F68:
	ldrh r2, [r0, #0x1e]
	tst r2, #0x2000
	beq _020C1F9C
	add r1, r0, #0x2c
	tst r2, #2
	addeq r1, r1, #8
	tst r2, #4
	addeq r1, r1, #4
	tst r2, #8
	addeq r1, r1, #8
	mov r0, #0x18
	mov r2, #0x10
	bl FUN_020C2528
_020C1F9C:
	cmp r4, #3
	movne r0, #0
	bne _020C1FC8
	ldr r1, [r5, #8]
	mov r0, r5
	bic r1, r1, #0x40
	str r1, [r5, #8]
	ldr r1, [r5, #0x40]
	blx r1
	ldr r0, [r5, #8]
	and r0, r0, #0x40
_020C1FC8:
	cmp r0, #0
	bne _020C20EC
	ldr r0, _020C213C @ =0x021DA49C
	ldr r0, [r0, #0xfc]
	tst r0, #1
	beq _020C2014
	ldr r1, _020C2140 @ =0x021DA57C
	mov r0, #0x1c
	mov r2, #3
	bl FUN_020C2528
	ldr r1, _020C2144 @ =0x021DA558
	mov r0, #0x1a
	mov r2, #9
	bl FUN_020C2528
	add r1, sp, #0x50
	mov r0, #0x19
	mov r2, #0xc
	bl FUN_020C2528
	b _020C2054
_020C2014:
	tst r0, #2
	beq _020C2030
	add r1, sp, #0x50
	mov r0, #0x19
	mov r2, #0xc
	bl FUN_020C2528
	b _020C2054
_020C2030:
	bl FUN_020BF0F8
	mov r1, r0
	mov r0, #0x19
	mov r2, #0xc
	bl FUN_020C2528
	add r1, sp, #0x50
	mov r0, #0x19
	mov r2, #0xc
	bl FUN_020C2528
_020C2054:
	bl FUN_020C23F4
	ldr r0, _020C2148 @ =0x04000440
	mov r1, #0
	str r1, [r0]
	str r1, [r0, #4]
	str r1, [r0, #0x14]
	add r4, sp, #0x10
_020C2070:
	mov r0, r4
	bl FUN_020CF884
	cmp r0, #0
	bne _020C2070
	ldr r2, _020C214C @ =0x04000448
	mov r0, #1
	str r0, [r2]
	mov r0, #3
	str r0, [r2, #-8]
	add r1, sp, #0x10
	mov r0, #0x16
	mov r2, #0x10
	bl FUN_020C2528
	ldr r0, [sp, #0x44]
	ldr r1, [sp, #0x40]
	asr r0, r0, #4
	lsl r0, r0, #8
	asr r2, r1, #4
	asr r1, r0, #0x10
	lsl r0, r2, #8
	lsl r1, r1, #0x10
	asr r0, r0, #0x10
	lsr r1, r1, #0x10
	lsl r0, r0, #0x10
	lsl r1, r1, #0x10
	orr r3, r1, r0, lsr #16
	add r1, sp, #8
	mov r0, #0x22
	mov r2, #1
	str r3, [sp, #8]
	bl FUN_020C2528
_020C20EC:
	mov r3, #2
	add r1, sp, #4
	mov r0, #0x10
	mov r2, #1
	str r3, [sp, #4]
	bl FUN_020C2528
	mov r3, #0x1e
	add r1, sp, #0
	mov r0, #0x14
	mov r2, #1
	str r3, [sp]
	bl FUN_020C2528
_020C211C:
	ldr r0, [r5]
	add r0, r0, #3
	str r0, [r5]
	add sp, sp, #0x80
	pop {r3, r4, r5, pc}
	.align 2, 0
_020C2130: .4byte _02110A9C
_020C2134: .4byte _02110AA0
_020C2138: .4byte _02110ACC
_020C213C: .4byte 0x021DA49C
_020C2140: .4byte 0x021DA57C
_020C2144: .4byte 0x021DA558
_020C2148: .4byte 0x04000440
_020C214C: .4byte 0x04000448
	arm_func_end FUN_020C1DA0

	arm_func_start FUN_020C2150
FUN_020C2150: @ 0x020C2150
	push {r4, r5, r6, r7, lr}
	sub sp, sp, #0x6c
	mov r6, r0
	ldr ip, [r6, #0x1c]
	mov r4, r1
	mov r5, r2
	mov r7, r3
	cmp ip, #0x1000
	beq _020C2190
	add r1, sp, #0xc
	mov r0, #0x1b
	mov r2, #3
	str ip, [sp, #0xc]
	str ip, [sp, #0x10]
	str ip, [sp, #0x14]
	bl FUN_020C2528
_020C2190:
	cmp r7, #0
	beq _020C233C
	ldrb r0, [r6, #0x18]
	cmp r4, r0
	bhs _020C233C
	cmp r6, #0
	ldrne r0, [r6, #8]
	cmpne r0, #0
	addne r3, r6, r0
	moveq r3, #0
	cmp r3, #0
	beq _020C2200
	adds r2, r3, #4
	beq _020C21EC
	ldrb r0, [r3, #5]
	cmp r4, r0
	bhs _020C21EC
	ldrh r1, [r3, #0xa]
	ldrh r0, [r2, r1]
	add r1, r2, r1
	add r1, r1, #4
	mla r1, r0, r4, r1
	b _020C21F0
_020C21EC:
	mov r1, #0
_020C21F0:
	cmp r1, #0
	ldrne r0, [r1]
	addne r4, r3, r0
	bne _020C2204
_020C2200:
	mov r4, #0
_020C2204:
	ldr r0, [r4, #0xc]
	tst r0, #0x1f0000
	addeq sp, sp, #0x6c
	popeq {r4, r5, r6, r7, pc}
	ldr r0, _020C23E8 @ =0x00293130
	str r0, [sp, #0x50]
	ldr r0, [r4, #4]
	str r0, [sp, #0x54]
	ldr r0, [r4, #8]
	str r0, [sp, #0x58]
	ldr r1, [r4, #0xc]
	str r1, [sp, #0x5c]
	ldrh r0, [r4, #0x1e]
	tst r0, #0x20
	bicne r0, r1, #0x1f0000
	ldr r1, _020C23EC @ =0x00002B2A
	strne r0, [sp, #0x5c]
	str r1, [sp, #0x60]
	ldr r2, [r4, #0x14]
	ldr r0, [sp, #0x50]
	str r2, [sp, #0x64]
	ldrh r3, [r4, #0x1c]
	add r1, sp, #0x54
	mov r2, #6
	str r3, [sp, #0x68]
	bl FUN_020C2528
	ldrh r0, [r4, #0x1e]
	tst r0, #1
	beq _020C233C
	mov r2, #8
	str r2, [sp, #0x18]
	ldrh r1, [r4, #0x20]
	add r0, r4, #0x2c
	strh r1, [sp, #0x44]
	ldrh r1, [r4, #0x22]
	strh r1, [sp, #0x46]
	ldr r1, [r4, #0x24]
	str r1, [sp, #0x48]
	ldr r1, [r4, #0x28]
	str r1, [sp, #0x4c]
	ldrh r1, [r4, #0x1e]
	tst r1, #2
	orrne r1, r2, #1
	strne r1, [sp, #0x18]
	bne _020C22CC
	ldr r1, [r0]
	str r1, [sp, #0x30]
	ldr r1, [r0, #4]
	add r0, r0, #8
	str r1, [sp, #0x34]
_020C22CC:
	ldrh r1, [r4, #0x1e]
	tst r1, #4
	ldrne r1, [sp, #0x18]
	orrne r1, r1, #2
	strne r1, [sp, #0x18]
	bne _020C22F8
	ldrsh r1, [r0]
	strh r1, [sp, #0x38]
	ldrsh r1, [r0, #2]
	add r0, r0, #4
	strh r1, [sp, #0x3a]
_020C22F8:
	ldrh r1, [r4, #0x1e]
	tst r1, #8
	ldrne r0, [sp, #0x18]
	orrne r0, r0, #4
	strne r0, [sp, #0x18]
	bne _020C2320
	ldr r1, [r0]
	str r1, [sp, #0x3c]
	ldr r0, [r0, #4]
	str r0, [sp, #0x40]
_020C2320:
	ldrb r1, [r6, #0x16]
	ldr r0, _020C23F0 @ =_02110A8C
	ldr r1, [r0, r1, lsl #2]
	cmp r1, #0
	beq _020C233C
	add r0, sp, #0x18
	blx r1
_020C233C:
	ldrb r0, [r6, #0x19]
	cmp r5, r0
	bhs _020C23B4
	cmp r6, #0
	ldrne r0, [r6, #0xc]
	cmpne r0, #0
	addne r2, r6, r0
	moveq r2, #0
	cmp r2, #0
	beq _020C23A0
	beq _020C238C
	ldrb r0, [r2, #1]
	cmp r5, r0
	bhs _020C238C
	ldrh r1, [r2, #6]
	ldrh r0, [r2, r1]
	add r1, r2, r1
	add r1, r1, #4
	mla r1, r0, r5, r1
	b _020C2390
_020C238C:
	mov r1, #0
_020C2390:
	cmp r1, #0
	ldrne r0, [r1]
	addne r2, r2, r0
	bne _020C23A4
_020C23A0:
	mov r2, #0
_020C23A4:
	ldr r0, [r2, #8]
	ldr r1, [r2, #0xc]
	add r0, r2, r0
	bl FUN_020C2474
_020C23B4:
	ldr r3, [r6, #0x20]
	cmp r3, #0x1000
	addeq sp, sp, #0x6c
	popeq {r4, r5, r6, r7, pc}
	add r1, sp, #0
	mov r0, #0x1b
	mov r2, #3
	str r3, [sp]
	str r3, [sp, #4]
	str r3, [sp, #8]
	bl FUN_020C2528
	add sp, sp, #0x6c
	pop {r4, r5, r6, r7, pc}
	.align 2, 0
_020C23E8: .4byte 0x00293130
_020C23EC: .4byte 0x00002B2A
_020C23F0: .4byte _02110A8C
	arm_func_end FUN_020C2150

	arm_func_start FUN_020C23F4
FUN_020C23F4: @ 0x020C23F4
	push {r3, lr}
	ldr r0, _020C2448 @ =0x021DD404
	ldr r0, [r0, #4]
	cmp r0, #0
	beq _020C240C
	bl FUN_020C2450
_020C240C:
	ldr r0, _020C2448 @ =0x021DD404
	ldr r0, [r0]
	cmp r0, #0
	ldrne r2, [r0]
	cmpne r2, #0
	popeq {r3, pc}
	ldr r1, _020C244C @ =0x04000400
	add r0, r0, #4
	lsl r2, r2, #2
	bl FUN_020D4830
	ldr r0, _020C2448 @ =0x021DD404
	mov r1, #0
	ldr r0, [r0]
	str r1, [r0]
	pop {r3, pc}
	.align 2, 0
_020C2448: .4byte 0x021DD404
_020C244C: .4byte 0x04000400
	arm_func_end FUN_020C23F4

	arm_func_start FUN_020C2450
FUN_020C2450: @ 0x020C2450
	ldr r0, _020C2464 @ =0x021DD404
_020C2454:
	ldr r1, [r0, #4]
	cmp r1, #0
	bne _020C2454
	bx lr
	.align 2, 0
_020C2464: .4byte 0x021DD404
	arm_func_end FUN_020C2450

	arm_func_start FUN_020C2468
FUN_020C2468: @ 0x020C2468
	mov r1, #0
	str r1, [r0]
	bx lr
	arm_func_end FUN_020C2468

	arm_func_start FUN_020C2474
FUN_020C2474: @ 0x020C2474
	push {r3, r4, r5, lr}
	mov r4, r1
	mov r5, r0
	cmp r4, #0x100
	blo _020C249C
	ldr r1, _020C2518 @ =_02110C80
	mvn r0, #0
	ldr r1, [r1]
	cmp r1, r0
	bne _020C24B4
_020C249C:
	lsr r2, r4, #2
	ldr r0, [r5]
	add r1, r5, #4
	sub r2, r2, #1
	bl FUN_020C2528
	pop {r3, r4, r5, pc}
_020C24B4:
	bl FUN_020C23F4
	ldr r0, _020C251C @ =0x021DD404
	mov r1, #1
	str r1, [r0, #4]
	ldr r0, [r0, #8]
	cmp r0, #0
	beq _020C24F4
	ldr r1, _020C2520 @ =0x021DD408
	ldr r0, _020C2518 @ =_02110C80
	str r1, [sp]
	ldr r0, [r0]
	ldr r3, _020C2524 @ =FUN_020C2468
	mov r1, r5
	mov r2, r4
	bl FUN_020D46AC
	pop {r3, r4, r5, pc}
_020C24F4:
	ldr r1, _020C2520 @ =0x021DD408
	ldr r0, _020C2518 @ =_02110C80
	str r1, [sp]
	ldr r0, [r0]
	ldr r3, _020C2524 @ =FUN_020C2468
	mov r1, r5
	mov r2, r4
	bl FUN_020D44A8
	pop {r3, r4, r5, pc}
	.align 2, 0
_020C2518: .4byte _02110C80
_020C251C: .4byte 0x021DD404
_020C2520: .4byte 0x021DD408
_020C2524: .4byte FUN_020C2468
	arm_func_end FUN_020C2474

	arm_func_start FUN_020C2528
FUN_020C2528: @ 0x020C2528
	push {r4, r5, r6, lr}
	ldr r3, _020C2604 @ =0x021DD404
	mov r6, r0
	ldr ip, [r3]
	mov r5, r1
	mov r4, r2
	cmp ip, #0
	beq _020C25DC
	ldr r0, [r3, #4]
	cmp r0, #0
	beq _020C25B0
	ldr r2, [ip]
	add r0, r2, #1
	add r1, r0, r4
	cmp r1, #0xc0
	bhi _020C25B0
	str r0, [ip]
	ldr r0, [r3]
	cmp r4, #0
	add r0, r0, r2, lsl #2
	str r6, [r0, #4]
	popeq {r4, r5, r6, pc}
	ldr r2, [r3]
	mov r0, r5
	ldr r1, [r2], #4
	add r1, r2, r1, lsl #2
	lsl r2, r4, #2
	bl FUN_020D48B4
	ldr r0, _020C2604 @ =0x021DD404
	ldr r1, [r0]
	ldr r0, [r1]
	add r0, r0, r4
	str r0, [r1]
	pop {r4, r5, r6, pc}
_020C25B0:
	ldr r0, [ip]
	cmp r0, #0
	beq _020C25C4
	bl FUN_020C23F4
	b _020C25EC
_020C25C4:
	ldr r0, _020C2604 @ =0x021DD404
	ldr r0, [r0, #4]
	cmp r0, #0
	beq _020C25EC
	bl FUN_020C2450
	b _020C25EC
_020C25DC:
	ldr r0, [r3, #4]
	cmp r0, #0
	beq _020C25EC
	bl FUN_020C2450
_020C25EC:
	ldr r1, _020C2608 @ =0x04000400
	mov r0, r5
	lsl r2, r4, #2
	str r6, [r1]
	bl FUN_020D4830
	pop {r4, r5, r6, pc}
	.align 2, 0
_020C2604: .4byte 0x021DD404
_020C2608: .4byte 0x04000400
	arm_func_end FUN_020C2528

	arm_func_start FUN_020C260C
FUN_020C260C: @ 0x020C260C
	push {r4, r5, r6, lr}
	sub sp, sp, #0x40
	mov r6, r0
	mov r5, r1
	bl FUN_020C23F4
	ldr r0, _020C2690 @ =0x04000440
	mov r1, #0
	str r1, [r0]
	str r1, [r0, #4]
	str r1, [r0, #0x14]
	cmp r6, #0
	beq _020C265C
	add r4, sp, #0
_020C2640:
	mov r0, r4
	bl FUN_020CF884
	cmp r0, #0
	bne _020C2640
	add r0, sp, #0
	mov r1, r6
	bl FUN_020CC070
_020C265C:
	cmp r5, #0
	beq _020C2674
_020C2664:
	mov r0, r5
	bl FUN_020CF8B4
	cmp r0, #0
	bne _020C2664
_020C2674:
	ldr r1, _020C2694 @ =0x04000448
	mov r0, #1
	str r0, [r1]
	mov r0, #2
	str r0, [r1, #-8]
	add sp, sp, #0x40
	pop {r4, r5, r6, pc}
	.align 2, 0
_020C2690: .4byte 0x04000440
_020C2694: .4byte 0x04000448
	arm_func_end FUN_020C260C

	arm_func_start FUN_020C2698
FUN_020C2698: @ 0x020C2698
	push {r3, lr}
	bl FUN_020CF564
	bl FUN_020BEE44
	ldr r1, _020C26BC @ =0x04000600
	ldr r0, [r1]
	bic r0, r0, #0xc0000000
	orr r0, r0, #0x80000000
	str r0, [r1]
	pop {r3, pc}
	.align 2, 0
_020C26BC: .4byte 0x04000600
	arm_func_end FUN_020C2698

	arm_func_start FUN_020C26C0
FUN_020C26C0: @ 0x020C26C0
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sl, r0
	ldr r2, [sl]
	ldr r1, _020C28DC @ =0x30415642
	cmp r2, r1
	bhi _020C270C
	bhs _020C28CC
	sub r0, r1, #0x900
	cmp r2, r0
	bhi _020C26FC
	bhs _020C28CC
	sub r0, r1, #0x1300
	cmp r2, r0
	beq _020C28CC
	b _020C28D4
_020C26FC:
	sub r0, r1, #0x200
	cmp r2, r0
	beq _020C28CC
	b _020C28D4
_020C270C:
	ldr r0, _020C28E0 @ =0x30505442
	cmp r2, r0
	bhi _020C272C
	bhs _020C28CC
	ldr r0, _020C28E4 @ =0x30444D42
	cmp r2, r0
	beq _020C2738
	b _020C28D4
_020C272C:
	add r0, r0, #0x80000
	cmp r2, r0
	bne _020C28D4
_020C2738:
	mov r5, #1
	mov r0, sl
	mov r6, r5
	mov r7, r5
	bl FUN_020C3B50
	movs r4, r0
	beq _020C289C
	bl FUN_020BE3DC
	mov sb, r0
	mov r0, r4
	bl FUN_020BE3F0
	mov r8, r0
	mov r0, r4
	bl FUN_020BE51C
	str r0, [sp]
	cmp sb, #0
	beq _020C27A0
	ldr r0, _020C28E8 @ =_02110924
	mov r1, #0
	ldr r3, [r0]
	mov r0, sb
	mov r2, r1
	blx r3
	movs fp, r0
	moveq r5, #0
	b _020C27A4
_020C27A0:
	mov fp, #0
_020C27A4:
	cmp r8, #0
	beq _020C27D0
	ldr r1, _020C28E8 @ =_02110924
	mov r0, r8
	ldr r3, [r1]
	mov r1, #1
	mov r2, #0
	blx r3
	movs r8, r0
	moveq r6, #0
	b _020C27D4
_020C27D0:
	mov r8, #0
_020C27D4:
	ldr r0, [sp]
	cmp r0, #0
	beq _020C2804
	ldr r1, _020C28EC @ =_0211092C
	ldrh r2, [r4, #0x20]
	ldr r3, [r1]
	and r1, r2, #0x8000
	mov r2, #0
	blx r3
	movs sb, r0
	moveq r7, #0
	b _020C2808
_020C2804:
	mov sb, #0
_020C2808:
	cmp r5, #0
	cmpne r6, #0
	cmpne r7, #0
	bne _020C2868
	cmp r7, #0
	beq _020C2830
	ldr r1, _020C28F0 @ =_02110930
	mov r0, sb
	ldr r1, [r1]
	blx r1
_020C2830:
	cmp r6, #0
	beq _020C2848
	ldr r1, _020C28F4 @ =_02110928
	mov r0, r8
	ldr r1, [r1]
	blx r1
_020C2848:
	cmp r5, #0
	beq _020C2860
	ldr r1, _020C28F4 @ =_02110928
	mov r0, fp
	ldr r1, [r1]
	blx r1
_020C2860:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020C2868:
	mov r0, r4
	mov r1, fp
	mov r2, r8
	bl FUN_020BE404
	mov r0, r4
	mov r1, sb
	bl FUN_020BE530
	mov r0, r4
	mov r1, #1
	bl FUN_020BE418
	mov r0, r4
	mov r1, #1
	bl FUN_020BE538
_020C289C:
	ldr r1, [sl]
	ldr r0, _020C28E4 @ =0x30444D42
	cmp r1, r0
	bne _020C28C4
	mov r0, sl
	bl FUN_020C3B40
	cmp r4, #0
	beq _020C28C4
	mov r1, r4
	bl FUN_020BED00
_020C28C4:
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020C28CC:
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020C28D4:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020C28DC: .4byte 0x30415642
_020C28E0: .4byte 0x30505442
_020C28E4: .4byte 0x30444D42
_020C28E8: .4byte _02110924
_020C28EC: .4byte _0211092C
_020C28F0: .4byte _02110930
_020C28F4: .4byte _02110928
	arm_func_end FUN_020C26C0

	arm_func_start FUN_020C28F8
FUN_020C28F8: @ 0x020C28F8
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x24
	mov r7, r0
	mov r6, r1
	mov fp, r2
	mov r4, r3
	add r0, sp, #0x20
	add r1, sp, #0x1c
	add r2, sp, #0x18
	add r3, sp, #0x14
	bl FUN_020BF4B8
	ldr r1, [sp, #0x14]
	ldr r0, [sp, #0x1c]
	ldr r2, [sp, #0x20]
	sub r5, r1, r0
	ldr r1, [sp, #0x18]
	sub r0, r7, r2
	sub r1, r1, r2
	lsl r0, r0, #0xc
	lsl r1, r1, #0xc
	bl FUN_020CCBA0
	rsb r1, r5, #0
	mov r5, r0
	ldr r0, [sp, #0x1c]
	lsl r1, r1, #0xc
	add r0, r6, r0
	sub r0, r0, #0xbf
	lsl r0, r0, #0xc
	bl FUN_020CCBA0
	cmp r5, #0
	cmpge r0, #0
	blt _020C2984
	cmp r5, #0x1000
	cmple r0, #0x1000
	ble _020C2990
_020C2984:
	mvn r1, #0
	str r1, [sp, #0x10]
	b _020C2998
_020C2990:
	mov r1, #0
	str r1, [sp, #0x10]
_020C2998:
	sub r1, r5, #0x800
	sub r0, r0, #0x800
	lsl r8, r1, #1
	lsl sl, r0, #1
	bl FUN_020BF450
	mov r5, r0
	ldr r0, [r5, #0x1c]
	ldr r1, [r5, #0xc]
	smull r2, r0, sl, r0
	smlal r2, r0, r8, r1
	lsr r2, r2, #0xc
	orr r2, r2, r0, lsl #20
	ldr r0, [r5, #0x3c]
	ldr r1, [r5, #0x2c]
	add r0, r0, r2
	str r0, [sp, #0xc]
	sub r0, r0, r1
	bl FUN_020CCC7C
	ldr r0, [r5, #0x10]
	ldr r2, [r5]
	smull r3, r0, sl, r0
	smlal r3, r0, r8, r2
	lsr r2, r3, #0xc
	orr r2, r2, r0, lsl #20
	ldr r6, [r5, #0x30]
	ldr r3, [r5, #4]
	add r6, r6, r2
	ldr r2, [r5, #0x14]
	ldr r1, [r5, #0x34]
	smull r7, r2, sl, r2
	smlal r7, r2, r8, r3
	lsr r3, r7, #0xc
	orr r3, r3, r2, lsl #20
	add r7, r1, r3
	ldr r1, [r5, #0x18]
	ldr r2, [r5, #8]
	smull r3, r1, sl, r1
	smlal r3, r1, r8, r2
	lsr r2, r3, #0xc
	ldr r0, [r5, #0x38]
	orr r2, r2, r1, lsl #20
	cmp r4, #0
	add r8, r0, r2
	beq _020C2A78
	ldr r0, [r5, #0x20]
	ldr r3, [r5, #0x24]
	add r0, r6, r0
	str r0, [sp, #4]
	add r0, r7, r3
	str r0, [sp]
	ldr r2, [r5, #0x28]
	ldr r1, [r5, #0x2c]
	ldr r0, [sp, #0xc]
	add sb, r8, r2
	add r0, r0, r1
	str r0, [sp, #8]
_020C2A78:
	ldr r2, [r5, #0x20]
	ldr r1, [r5, #0x24]
	ldr r0, [r5, #0x28]
	sub r6, r6, r2
	sub r7, r7, r1
	sub r8, r8, r0
	bl FUN_020CCC20
	mov r5, r0
	mov sl, r1
	cmp r4, #0
	beq _020C2AAC
	ldr r0, [sp, #8]
	bl FUN_020CCC7C
_020C2AAC:
	asr r0, r6, #0x1f
	umull r2, r1, r5, r6
	adds r2, r2, #0x80000000
	mla r1, r5, r0, r1
	mla r1, sl, r6, r1
	adc r2, r1, #0
	umull r0, r1, r5, r7
	str r2, [fp]
	adds r0, r0, #0x80000000
	asr r0, r7, #0x1f
	mla r1, r5, r0, r1
	mla r1, sl, r7, r1
	adc r0, r1, #0
	str r0, [fp, #4]
	umull r0, r1, r5, r8
	adds r0, r0, #0x80000000
	asr r0, r8, #0x1f
	mla r1, r5, r0, r1
	mla r1, sl, r8, r1
	adc r0, r1, #0
	str r0, [fp, #8]
	cmp r4, #0
	beq _020C2B70
	bl FUN_020CCC20
	ldr r2, [sp, #4]
	umull r6, r5, r0, r2
	asr r2, r2, #0x1f
	mla r5, r0, r2, r5
	ldr r2, [sp]
	adds r6, r6, #0x80000000
	asr r7, r2, #0x1f
	umull r3, r2, r0, r2
	mla r2, r0, r7, r2
	asr r7, sb, #0x1f
	umull r8, r6, r0, sb
	mla r6, r0, r7, r6
	ldr r0, [sp, #4]
	mla r6, r1, sb, r6
	mla r5, r1, r0, r5
	adc r0, r5, #0
	str r0, [r4]
	ldr r0, [sp]
	mla r2, r1, r0, r2
	adds r0, r3, #0x80000000
	adc r2, r2, #0
	adds r0, r8, #0x80000000
	str r2, [r4, #4]
	adc r0, r6, #0
	str r0, [r4, #8]
_020C2B70:
	ldr r0, [sp, #0x10]
	add sp, sp, #0x24
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_020C28F8

	arm_func_start FUN_020C2B7C
FUN_020C2B7C: @ 0x020C2B7C
	push {r4, lr}
	mov r4, r0
	mov r0, r1
	mov r1, r2
	bl FUN_020BDFA8
	mov r1, r0
	mov r0, r4
	bl FUN_020B597C
	pop {r4, pc}
	arm_func_end FUN_020C2B7C

	arm_func_start FUN_020C2BA0
FUN_020C2BA0: @ 0x020C2BA0
	ldr ip, _020C2BA8 @ =FUN_020B5990
	bx ip
	.align 2, 0
_020C2BA8: .4byte FUN_020B5990
	arm_func_end FUN_020C2BA0

	arm_func_start FUN_020C2BAC
FUN_020C2BAC: @ 0x020C2BAC
	push {r4, r5, r6, r7, r8, lr}
	cmp r0, #0
	ldrne r4, [r0, #8]
	ldrb r3, [r0, #0x18]
	cmpne r4, #0
	addne lr, r0, r4
	moveq lr, #0
	cmp r3, #0
	mov ip, #0
	popls {r4, r5, r6, r7, r8, pc}
	mvn r4, r2
	add r0, lr, #4
	mov r7, ip
	mov r6, ip
_020C2BE4:
	cmp lr, #0
	beq _020C2C2C
	cmp r0, #0
	beq _020C2C18
	ldrb r5, [lr, #5]
	cmp ip, r5
	bhs _020C2C18
	ldrh r8, [lr, #0xa]
	ldrh r5, [r0, r8]
	add r8, r0, r8
	add r8, r8, #4
	mla r8, r5, ip, r8
	b _020C2C1C
_020C2C18:
	mov r8, r7
_020C2C1C:
	cmp r8, #0
	ldrne r5, [r8]
	addne r8, lr, r5
	bne _020C2C30
_020C2C2C:
	mov r8, r6
_020C2C30:
	ldrh r5, [r8, #0x1e]
	cmp r1, #0
	add ip, ip, #1
	orrne r5, r5, r2
	andeq r5, r5, r4
	strh r5, [r8, #0x1e]
	cmp ip, r3
	blo _020C2BE4
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020C2BAC

	arm_func_start FUN_020C2C54
FUN_020C2C54: @ 0x020C2C54
	push {r4, r5, r6, r7, r8, lr}
	cmp r0, #0
	ldrne r4, [r0, #8]
	ldrb r3, [r0, #0x18]
	cmpne r4, #0
	addne lr, r0, r4
	moveq lr, #0
	cmp r3, #0
	mov ip, #0
	popls {r4, r5, r6, r7, r8, pc}
	mvn r4, r2
	add r0, lr, #4
	mov r7, ip
	mov r6, ip
_020C2C8C:
	cmp lr, #0
	beq _020C2CD4
	cmp r0, #0
	beq _020C2CC0
	ldrb r5, [lr, #5]
	cmp ip, r5
	bhs _020C2CC0
	ldrh r8, [lr, #0xa]
	ldrh r5, [r0, r8]
	add r8, r0, r8
	add r8, r8, #4
	mla r8, r5, ip, r8
	b _020C2CC4
_020C2CC0:
	mov r8, r7
_020C2CC4:
	cmp r8, #0
	ldrne r5, [r8]
	addne r8, lr, r5
	bne _020C2CD8
_020C2CD4:
	mov r8, r6
_020C2CD8:
	ldr r5, [r8, #0x10]
	cmp r1, #0
	orrne r5, r5, r2
	andeq r5, r5, r4
	add ip, ip, #1
	str r5, [r8, #0x10]
	cmp ip, r3
	blo _020C2C8C
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020C2C54

	arm_func_start FUN_020C2CFC
FUN_020C2CFC: @ 0x020C2CFC
	push {r3, lr}
	cmp r0, #0
	ldrne r3, [r0, #8]
	cmpne r3, #0
	addne lr, r0, r3
	moveq lr, #0
	cmp lr, #0
	beq _020C2D5C
	adds ip, lr, #4
	beq _020C2D48
	ldrb r0, [lr, #5]
	cmp r1, r0
	bhs _020C2D48
	ldrh r3, [lr, #0xa]
	ldrh r0, [ip, r3]
	add r3, ip, r3
	add r3, r3, #4
	mla r1, r0, r1, r3
	b _020C2D4C
_020C2D48:
	mov r1, #0
_020C2D4C:
	cmp r1, #0
	ldrne r0, [r1]
	addne r3, lr, r0
	bne _020C2D60
_020C2D5C:
	mov r3, #0
_020C2D60:
	mov r0, #0x8000
	ldr r1, [r3, #4]
	rsb r0, r0, #0
	and r0, r1, r0
	orr r0, r0, r2
	str r0, [r3, #4]
	pop {r3, pc}
	arm_func_end FUN_020C2CFC

	arm_func_start FUN_020C2D7C
FUN_020C2D7C: @ 0x020C2D7C
	push {r3, lr}
	cmp r0, #0
	ldrne r3, [r0, #8]
	cmpne r3, #0
	addne lr, r0, r3
	moveq lr, #0
	cmp lr, #0
	beq _020C2DDC
	adds ip, lr, #4
	beq _020C2DC8
	ldrb r0, [lr, #5]
	cmp r1, r0
	bhs _020C2DC8
	ldrh r3, [lr, #0xa]
	ldrh r0, [ip, r3]
	add r3, ip, r3
	add r3, r3, #4
	mla r1, r0, r1, r3
	b _020C2DCC
_020C2DC8:
	mov r1, #0
_020C2DCC:
	cmp r1, #0
	ldrne r0, [r1]
	addne r3, lr, r0
	bne _020C2DE0
_020C2DDC:
	mov r3, #0
_020C2DE0:
	ldr r1, [r3, #4]
	ldr r0, _020C2DF8 @ =0x8000FFFF
	and r0, r1, r0
	orr r0, r0, r2, lsl #16
	str r0, [r3, #4]
	pop {r3, pc}
	.align 2, 0
_020C2DF8: .4byte 0x8000FFFF
	arm_func_end FUN_020C2D7C

	arm_func_start FUN_020C2DFC
FUN_020C2DFC: @ 0x020C2DFC
	push {r3, lr}
	cmp r0, #0
	ldrne r3, [r0, #8]
	cmpne r3, #0
	addne lr, r0, r3
	moveq lr, #0
	cmp lr, #0
	beq _020C2E5C
	adds ip, lr, #4
	beq _020C2E48
	ldrb r0, [lr, #5]
	cmp r1, r0
	bhs _020C2E48
	ldrh r3, [lr, #0xa]
	ldrh r0, [ip, r3]
	add r3, ip, r3
	add r3, r3, #4
	mla r1, r0, r1, r3
	b _020C2E4C
_020C2E48:
	mov r1, #0
_020C2E4C:
	cmp r1, #0
	ldrne r0, [r1]
	addne r3, lr, r0
	bne _020C2E60
_020C2E5C:
	mov r3, #0
_020C2E60:
	mov r0, #0x8000
	ldr r1, [r3, #8]
	rsb r0, r0, #0
	and r0, r1, r0
	orr r0, r0, r2
	str r0, [r3, #8]
	pop {r3, pc}
	arm_func_end FUN_020C2DFC

	arm_func_start FUN_020C2E7C
FUN_020C2E7C: @ 0x020C2E7C
	push {r3, lr}
	cmp r0, #0
	ldrne r3, [r0, #8]
	cmpne r3, #0
	addne lr, r0, r3
	moveq lr, #0
	cmp lr, #0
	beq _020C2EDC
	adds ip, lr, #4
	beq _020C2EC8
	ldrb r0, [lr, #5]
	cmp r1, r0
	bhs _020C2EC8
	ldrh r3, [lr, #0xa]
	ldrh r0, [ip, r3]
	add r3, ip, r3
	add r3, r3, #4
	mla r1, r0, r1, r3
	b _020C2ECC
_020C2EC8:
	mov r1, #0
_020C2ECC:
	cmp r1, #0
	ldrne r0, [r1]
	addne r3, lr, r0
	bne _020C2EE0
_020C2EDC:
	mov r3, #0
_020C2EE0:
	ldr r1, [r3, #8]
	ldr r0, _020C2EF8 @ =0x8000FFFF
	and r0, r1, r0
	orr r0, r0, r2, lsl #16
	str r0, [r3, #8]
	pop {r3, pc}
	.align 2, 0
_020C2EF8: .4byte 0x8000FFFF
	arm_func_end FUN_020C2E7C

	arm_func_start FUN_020C2EFC
FUN_020C2EFC: @ 0x020C2EFC
	push {r3, lr}
	cmp r0, #0
	ldrne r3, [r0, #8]
	cmpne r3, #0
	addne lr, r0, r3
	moveq lr, #0
	cmp lr, #0
	beq _020C2F5C
	adds ip, lr, #4
	beq _020C2F48
	ldrb r0, [lr, #5]
	cmp r1, r0
	bhs _020C2F48
	ldrh r3, [lr, #0xa]
	ldrh r0, [ip, r3]
	add r3, ip, r3
	add r3, r3, #4
	mla r1, r0, r1, r3
	b _020C2F4C
_020C2F48:
	mov r1, #0
_020C2F4C:
	cmp r1, #0
	ldrne r0, [r1]
	addne r1, lr, r0
	bne _020C2F60
_020C2F5C:
	mov r1, #0
_020C2F60:
	ldr r0, [r1, #0xc]
	bic r0, r0, #0xf
	orr r0, r0, r2
	str r0, [r1, #0xc]
	pop {r3, pc}
	arm_func_end FUN_020C2EFC

	arm_func_start FUN_020C2F74
FUN_020C2F74: @ 0x020C2F74
	push {r3, lr}
	cmp r0, #0
	ldrne r3, [r0, #8]
	cmpne r3, #0
	addne lr, r0, r3
	moveq lr, #0
	cmp lr, #0
	beq _020C2FD4
	adds ip, lr, #4
	beq _020C2FC0
	ldrb r0, [lr, #5]
	cmp r1, r0
	bhs _020C2FC0
	ldrh r3, [lr, #0xa]
	ldrh r0, [ip, r3]
	add r3, ip, r3
	add r3, r3, #4
	mla r1, r0, r1, r3
	b _020C2FC4
_020C2FC0:
	mov r1, #0
_020C2FC4:
	cmp r1, #0
	ldrne r0, [r1]
	addne r1, lr, r0
	bne _020C2FD8
_020C2FD4:
	mov r1, #0
_020C2FD8:
	ldr r0, [r1, #0xc]
	bic r0, r0, #0x30
	orr r0, r0, r2, lsl #4
	str r0, [r1, #0xc]
	pop {r3, pc}
	arm_func_end FUN_020C2F74

	arm_func_start FUN_020C2FEC
FUN_020C2FEC: @ 0x020C2FEC
	push {r3, lr}
	cmp r0, #0
	ldrne r3, [r0, #8]
	cmpne r3, #0
	addne lr, r0, r3
	moveq lr, #0
	cmp lr, #0
	beq _020C304C
	adds ip, lr, #4
	beq _020C3038
	ldrb r0, [lr, #5]
	cmp r1, r0
	bhs _020C3038
	ldrh r3, [lr, #0xa]
	ldrh r0, [ip, r3]
	add r3, ip, r3
	add r3, r3, #4
	mla r1, r0, r1, r3
	b _020C303C
_020C3038:
	mov r1, #0
_020C303C:
	cmp r1, #0
	ldrne r0, [r1]
	addne r1, lr, r0
	bne _020C3050
_020C304C:
	mov r1, #0
_020C3050:
	ldr r0, [r1, #0xc]
	bic r0, r0, #0xc0
	orr r0, r0, r2, lsl #6
	str r0, [r1, #0xc]
	pop {r3, pc}
	arm_func_end FUN_020C2FEC

	arm_func_start FUN_020C3064
FUN_020C3064: @ 0x020C3064
	push {r3, lr}
	cmp r0, #0
	ldrne r3, [r0, #8]
	cmpne r3, #0
	addne lr, r0, r3
	moveq lr, #0
	cmp lr, #0
	beq _020C30C4
	adds ip, lr, #4
	beq _020C30B0
	ldrb r0, [lr, #5]
	cmp r1, r0
	bhs _020C30B0
	ldrh r3, [lr, #0xa]
	ldrh r0, [ip, r3]
	add r3, ip, r3
	add r3, r3, #4
	mla r1, r0, r1, r3
	b _020C30B4
_020C30B0:
	mov r1, #0
_020C30B4:
	cmp r1, #0
	ldrne r0, [r1]
	addne r1, lr, r0
	bne _020C30C8
_020C30C4:
	mov r1, #0
_020C30C8:
	ldr r0, [r1, #0xc]
	bic r0, r0, #0x3f000000
	orr r0, r0, r2, lsl #24
	str r0, [r1, #0xc]
	pop {r3, pc}
	arm_func_end FUN_020C3064

	arm_func_start FUN_020C30DC
FUN_020C30DC: @ 0x020C30DC
	push {r3, lr}
	cmp r0, #0
	ldrne r3, [r0, #8]
	cmpne r3, #0
	addne lr, r0, r3
	moveq lr, #0
	cmp lr, #0
	beq _020C313C
	adds ip, lr, #4
	beq _020C3128
	ldrb r0, [lr, #5]
	cmp r1, r0
	bhs _020C3128
	ldrh r3, [lr, #0xa]
	ldrh r0, [ip, r3]
	add r3, ip, r3
	add r3, r3, #4
	mla r1, r0, r1, r3
	b _020C312C
_020C3128:
	mov r1, #0
_020C312C:
	cmp r1, #0
	ldrne r0, [r1]
	addne r1, lr, r0
	bne _020C3140
_020C313C:
	mov r1, #0
_020C3140:
	ldr r0, [r1, #0xc]
	bic r0, r0, #0x1f0000
	orr r0, r0, r2, lsl #16
	str r0, [r1, #0xc]
	pop {r3, pc}
	arm_func_end FUN_020C30DC

	arm_func_start FUN_020C3154
FUN_020C3154: @ 0x020C3154
	push {r3, lr}
	cmp r0, #0
	ldrne r3, [r0, #8]
	cmpne r3, #0
	addne lr, r0, r3
	moveq lr, #0
	cmp lr, #0
	beq _020C31B4
	adds ip, lr, #4
	beq _020C31A0
	ldrb r0, [lr, #5]
	cmp r1, r0
	bhs _020C31A0
	ldrh r3, [lr, #0xa]
	ldrh r0, [ip, r3]
	add r3, ip, r3
	add r3, r3, #4
	mla r1, r0, r1, r3
	b _020C31A4
_020C31A0:
	mov r1, #0
_020C31A4:
	cmp r1, #0
	ldrne r0, [r1]
	addne r1, lr, r0
	bne _020C31B8
_020C31B4:
	mov r1, #0
_020C31B8:
	ldr r0, [r1, #0xc]
	cmp r2, #0
	orrne r0, r0, #0x8000
	biceq r0, r0, #0x8000
	str r0, [r1, #0xc]
	pop {r3, pc}
	arm_func_end FUN_020C3154

	arm_func_start FUN_020C31D0
FUN_020C31D0: @ 0x020C31D0
	push {r3, lr}
	cmp r0, #0
	ldrne r3, [r0, #8]
	cmpne r3, #0
	addne lr, r0, r3
	moveq lr, #0
	cmp lr, #0
	beq _020C3230
	adds ip, lr, #4
	beq _020C321C
	ldrb r0, [lr, #5]
	cmp r1, r0
	bhs _020C321C
	ldrh r3, [lr, #0xa]
	ldrh r0, [ip, r3]
	add r3, ip, r3
	add r3, r3, #4
	mla r1, r0, r1, r3
	b _020C3220
_020C321C:
	mov r1, #0
_020C3220:
	cmp r1, #0
	ldrne r0, [r1]
	addne r1, lr, r0
	bne _020C3234
_020C3230:
	mov r1, #0
_020C3234:
	ldr r0, [r1, #0xc]
	cmp r2, #0
	orrne r0, r0, #0x4000
	biceq r0, r0, #0x4000
	str r0, [r1, #0xc]
	pop {r3, pc}
	arm_func_end FUN_020C31D0

	arm_func_start FUN_020C324C
FUN_020C324C: @ 0x020C324C
	push {r3, lr}
	cmp r0, #0
	ldrne r3, [r0, #8]
	cmpne r3, #0
	addne lr, r0, r3
	moveq lr, #0
	cmp lr, #0
	beq _020C32AC
	adds ip, lr, #4
	beq _020C3298
	ldrb r0, [lr, #5]
	cmp r1, r0
	bhs _020C3298
	ldrh r3, [lr, #0xa]
	ldrh r0, [ip, r3]
	add r3, ip, r3
	add r3, r3, #4
	mla r1, r0, r1, r3
	b _020C329C
_020C3298:
	mov r1, #0
_020C329C:
	cmp r1, #0
	ldrne r0, [r1]
	addne r1, lr, r0
	bne _020C32B0
_020C32AC:
	mov r1, #0
_020C32B0:
	ldr r0, [r1, #0xc]
	cmp r2, #0
	orrne r0, r0, #0x2000
	biceq r0, r0, #0x2000
	str r0, [r1, #0xc]
	pop {r3, pc}
	arm_func_end FUN_020C324C

	arm_func_start FUN_020C32C8
FUN_020C32C8: @ 0x020C32C8
	push {r3, lr}
	cmp r0, #0
	ldrne r3, [r0, #8]
	cmpne r3, #0
	addne lr, r0, r3
	moveq lr, #0
	cmp lr, #0
	beq _020C3328
	adds ip, lr, #4
	beq _020C3314
	ldrb r0, [lr, #5]
	cmp r1, r0
	bhs _020C3314
	ldrh r3, [lr, #0xa]
	ldrh r0, [ip, r3]
	add r3, ip, r3
	add r3, r3, #4
	mla r1, r0, r1, r3
	b _020C3318
_020C3314:
	mov r1, #0
_020C3318:
	cmp r1, #0
	ldrne r0, [r1]
	addne r1, lr, r0
	bne _020C332C
_020C3328:
	mov r1, #0
_020C332C:
	ldr r0, [r1, #0xc]
	cmp r2, #0
	orrne r0, r0, #0x1000
	biceq r0, r0, #0x1000
	str r0, [r1, #0xc]
	pop {r3, pc}
	arm_func_end FUN_020C32C8

	arm_func_start FUN_020C3344
FUN_020C3344: @ 0x020C3344
	push {r3, lr}
	cmp r0, #0
	ldrne r3, [r0, #8]
	cmpne r3, #0
	addne lr, r0, r3
	moveq lr, #0
	cmp lr, #0
	beq _020C33A4
	adds ip, lr, #4
	beq _020C3390
	ldrb r0, [lr, #5]
	cmp r1, r0
	bhs _020C3390
	ldrh r3, [lr, #0xa]
	ldrh r0, [ip, r3]
	add r3, ip, r3
	add r3, r3, #4
	mla r1, r0, r1, r3
	b _020C3394
_020C3390:
	mov r1, #0
_020C3394:
	cmp r1, #0
	ldrne r0, [r1]
	addne r1, lr, r0
	bne _020C33A8
_020C33A4:
	mov r1, #0
_020C33A8:
	ldr r0, [r1, #0xc]
	cmp r2, #0
	orrne r0, r0, #0x800
	biceq r0, r0, #0x800
	str r0, [r1, #0xc]
	pop {r3, pc}
	arm_func_end FUN_020C3344

	arm_func_start FUN_020C33C0
FUN_020C33C0: @ 0x020C33C0
	cmp r0, #0
	ldrne r2, [r0, #8]
	cmpne r2, #0
	addne ip, r0, r2
	moveq ip, #0
	cmp ip, #0
	beq _020C341C
	adds r3, ip, #4
	beq _020C3408
	ldrb r0, [ip, #5]
	cmp r1, r0
	bhs _020C3408
	ldrh r2, [ip, #0xa]
	ldrh r0, [r3, r2]
	add r2, r3, r2
	add r2, r2, #4
	mla r1, r0, r1, r2
	b _020C340C
_020C3408:
	mov r1, #0
_020C340C:
	cmp r1, #0
	ldrne r0, [r1]
	addne r0, ip, r0
	bne _020C3420
_020C341C:
	mov r0, #0
_020C3420:
	ldr r0, [r0, #0xc]
	and r0, r0, #0xf
	bx lr
	arm_func_end FUN_020C33C0

	arm_func_start FUN_020C342C
FUN_020C342C: @ 0x020C342C
	cmp r0, #0
	ldrne r2, [r0, #8]
	cmpne r2, #0
	addne ip, r0, r2
	moveq ip, #0
	cmp ip, #0
	beq _020C3488
	adds r3, ip, #4
	beq _020C3474
	ldrb r0, [ip, #5]
	cmp r1, r0
	bhs _020C3474
	ldrh r2, [ip, #0xa]
	ldrh r0, [r3, r2]
	add r2, r3, r2
	add r2, r2, #4
	mla r1, r0, r1, r2
	b _020C3478
_020C3474:
	mov r1, #0
_020C3478:
	cmp r1, #0
	ldrne r0, [r1]
	addne r0, ip, r0
	bne _020C348C
_020C3488:
	mov r0, #0
_020C348C:
	ldr r0, [r0, #0xc]
	and r0, r0, #0x8000
	bx lr
	arm_func_end FUN_020C342C

	arm_func_start FUN_020C3498
FUN_020C3498: @ 0x020C3498
	push {r4, r5, r6, lr}
	mov r6, r0
	ldrb r0, [r6, #0x18]
	mov r5, r1
	mov r4, #0
	cmp r0, #0
	popls {r4, r5, r6, pc}
_020C34B4:
	mov r0, r6
	mov r1, r4
	mov r2, r5
	bl FUN_020C2CFC
	ldrb r0, [r6, #0x18]
	add r4, r4, #1
	cmp r4, r0
	blo _020C34B4
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020C3498

	arm_func_start FUN_020C34D8
FUN_020C34D8: @ 0x020C34D8
	push {r4, r5, r6, lr}
	mov r6, r0
	ldrb r0, [r6, #0x18]
	mov r5, r1
	mov r4, #0
	cmp r0, #0
	popls {r4, r5, r6, pc}
_020C34F4:
	mov r0, r6
	mov r1, r4
	mov r2, r5
	bl FUN_020C2D7C
	ldrb r0, [r6, #0x18]
	add r4, r4, #1
	cmp r4, r0
	blo _020C34F4
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020C34D8

	arm_func_start FUN_020C3518
FUN_020C3518: @ 0x020C3518
	push {r4, r5, r6, lr}
	mov r6, r0
	ldrb r0, [r6, #0x18]
	mov r5, r1
	mov r4, #0
	cmp r0, #0
	popls {r4, r5, r6, pc}
_020C3534:
	mov r0, r6
	mov r1, r4
	mov r2, r5
	bl FUN_020C2DFC
	ldrb r0, [r6, #0x18]
	add r4, r4, #1
	cmp r4, r0
	blo _020C3534
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020C3518

	arm_func_start FUN_020C3558
FUN_020C3558: @ 0x020C3558
	push {r4, r5, r6, lr}
	mov r6, r0
	ldrb r0, [r6, #0x18]
	mov r5, r1
	mov r4, #0
	cmp r0, #0
	popls {r4, r5, r6, pc}
_020C3574:
	mov r0, r6
	mov r1, r4
	mov r2, r5
	bl FUN_020C2E7C
	ldrb r0, [r6, #0x18]
	add r4, r4, #1
	cmp r4, r0
	blo _020C3574
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020C3558

	arm_func_start FUN_020C3598
FUN_020C3598: @ 0x020C3598
	push {r4, r5, r6, lr}
	mov r6, r0
	ldrb r0, [r6, #0x18]
	mov r5, r1
	mov r4, #0
	cmp r0, #0
	popls {r4, r5, r6, pc}
_020C35B4:
	mov r0, r6
	mov r1, r4
	mov r2, r5
	bl FUN_020C2EFC
	ldrb r0, [r6, #0x18]
	add r4, r4, #1
	cmp r4, r0
	blo _020C35B4
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020C3598

	arm_func_start FUN_020C35D8
FUN_020C35D8: @ 0x020C35D8
	push {r4, r5, r6, lr}
	mov r6, r0
	ldrb r0, [r6, #0x18]
	mov r5, r1
	mov r4, #0
	cmp r0, #0
	popls {r4, r5, r6, pc}
_020C35F4:
	mov r0, r6
	mov r1, r4
	mov r2, r5
	bl FUN_020C2F74
	ldrb r0, [r6, #0x18]
	add r4, r4, #1
	cmp r4, r0
	blo _020C35F4
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020C35D8

	arm_func_start FUN_020C3618
FUN_020C3618: @ 0x020C3618
	push {r4, r5, r6, lr}
	mov r6, r0
	ldrb r0, [r6, #0x18]
	mov r5, r1
	mov r4, #0
	cmp r0, #0
	popls {r4, r5, r6, pc}
_020C3634:
	mov r0, r6
	mov r1, r4
	mov r2, r5
	bl FUN_020C2FEC
	ldrb r0, [r6, #0x18]
	add r4, r4, #1
	cmp r4, r0
	blo _020C3634
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020C3618

	arm_func_start FUN_020C3658
FUN_020C3658: @ 0x020C3658
	push {r4, r5, r6, lr}
	mov r6, r0
	ldrb r0, [r6, #0x18]
	mov r5, r1
	mov r4, #0
	cmp r0, #0
	popls {r4, r5, r6, pc}
_020C3674:
	mov r0, r6
	mov r1, r4
	mov r2, r5
	bl FUN_020C3064
	ldrb r0, [r6, #0x18]
	add r4, r4, #1
	cmp r4, r0
	blo _020C3674
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020C3658

	arm_func_start FUN_020C3698
FUN_020C3698: @ 0x020C3698
	push {r4, r5, r6, lr}
	mov r6, r0
	ldrb r0, [r6, #0x18]
	mov r5, r1
	mov r4, #0
	cmp r0, #0
	popls {r4, r5, r6, pc}
_020C36B4:
	mov r0, r6
	mov r1, r4
	mov r2, r5
	bl FUN_020C30DC
	ldrb r0, [r6, #0x18]
	add r4, r4, #1
	cmp r4, r0
	blo _020C36B4
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020C3698

	arm_func_start FUN_020C36D8
FUN_020C36D8: @ 0x020C36D8
	push {r4, r5, r6, lr}
	mov r6, r0
	ldrb r0, [r6, #0x18]
	mov r5, r1
	mov r4, #0
	cmp r0, #0
	popls {r4, r5, r6, pc}
_020C36F4:
	mov r0, r6
	mov r1, r4
	mov r2, r5
	bl FUN_020C3154
	ldrb r0, [r6, #0x18]
	add r4, r4, #1
	cmp r4, r0
	blo _020C36F4
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020C36D8

	arm_func_start FUN_020C3718
FUN_020C3718: @ 0x020C3718
	push {r4, r5, r6, lr}
	mov r6, r0
	ldrb r0, [r6, #0x18]
	mov r5, r1
	mov r4, #0
	cmp r0, #0
	popls {r4, r5, r6, pc}
_020C3734:
	mov r0, r6
	mov r1, r4
	mov r2, r5
	bl FUN_020C31D0
	ldrb r0, [r6, #0x18]
	add r4, r4, #1
	cmp r4, r0
	blo _020C3734
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020C3718

	arm_func_start FUN_020C3758
FUN_020C3758: @ 0x020C3758
	push {r4, r5, r6, lr}
	mov r6, r0
	ldrb r0, [r6, #0x18]
	mov r5, r1
	mov r4, #0
	cmp r0, #0
	popls {r4, r5, r6, pc}
_020C3774:
	mov r0, r6
	mov r1, r4
	mov r2, r5
	bl FUN_020C324C
	ldrb r0, [r6, #0x18]
	add r4, r4, #1
	cmp r4, r0
	blo _020C3774
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020C3758

	arm_func_start FUN_020C3798
FUN_020C3798: @ 0x020C3798
	push {r4, r5, r6, lr}
	mov r6, r0
	ldrb r0, [r6, #0x18]
	mov r5, r1
	mov r4, #0
	cmp r0, #0
	popls {r4, r5, r6, pc}
_020C37B4:
	mov r0, r6
	mov r1, r4
	mov r2, r5
	bl FUN_020C32C8
	ldrb r0, [r6, #0x18]
	add r4, r4, #1
	cmp r4, r0
	blo _020C37B4
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020C3798

	arm_func_start FUN_020C37D8
FUN_020C37D8: @ 0x020C37D8
	push {r4, r5, r6, lr}
	mov r6, r0
	ldrb r0, [r6, #0x18]
	mov r5, r1
	mov r4, #0
	cmp r0, #0
	popls {r4, r5, r6, pc}
_020C37F4:
	mov r0, r6
	mov r1, r4
	mov r2, r5
	bl FUN_020C3344
	ldrb r0, [r6, #0x18]
	add r4, r4, #1
	cmp r4, r0
	blo _020C37F4
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020C37D8

	arm_func_start FUN_020C3818
FUN_020C3818: @ 0x020C3818
	push {r4, r5, r6, r7, r8, lr}
	cmp r1, #0
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, pc}
	ldrb r5, [r0, #1]
	cmp r5, #0x10
	bhs _020C38E8
	ldm r1, {r2, r3, ip, lr}
	cmp r5, #0
	mov r1, #0
	bls _020C39D0
	mov r4, r1
	mov r7, r1
_020C384C:
	cmp r0, #0
	beq _020C3878
	ldrb r6, [r0, #1]
	cmp r1, r6
	bhs _020C3878
	ldrh r6, [r0, #6]
	add r8, r0, r6
	ldrh r6, [r8, #2]
	add r6, r8, r6
	add r8, r6, r4
	b _020C387C
_020C3878:
	mov r8, r7
_020C387C:
	ldr r6, [r8]
	cmp r6, r2
	ldreq r6, [r8, #4]
	cmpeq r6, r3
	ldreq r6, [r8, #8]
	cmpeq r6, ip
	ldreq r6, [r8, #0xc]
	cmpeq r6, lr
	bne _020C38D0
	cmp r0, #0
	beq _020C38C8
	cmp r1, r5
	bhs _020C38C8
	ldrh r3, [r0, #6]
	ldrh r2, [r0, r3]
	add r0, r0, r3
	add r0, r0, #4
	mla r0, r2, r1, r0
	pop {r4, r5, r6, r7, r8, pc}
_020C38C8:
	mov r0, #0
	pop {r4, r5, r6, r7, r8, pc}
_020C38D0:
	ldrb r6, [r0, #1]
	add r1, r1, #1
	add r4, r4, #0x10
	cmp r1, r6
	blo _020C384C
	b _020C39D0
_020C38E8:
	add r4, r0, #8
	ldrb r3, [r4, #1]
	cmp r3, #0
	beq _020C39D0
	ldrb r7, [r4, r3, lsl #2]
	ldrb r2, [r4]
	add r6, r4, r3, lsl #2
	cmp r2, r7
	bls _020C393C
_020C390C:
	asr r2, r7, #5
	ldr r3, [r1, r2, lsl #2]
	and r2, r7, #0x1f
	lsr r2, r3, r2
	and r2, r2, #1
	add r2, r6, r2
	ldrb r3, [r2, #1]
	ldrb r2, [r6]
	ldrb r7, [r4, r3, lsl #2]
	add r6, r4, r3, lsl #2
	cmp r2, r7
	bhi _020C390C
_020C393C:
	cmp r0, #0
	ldrb r2, [r6, #3]
	beq _020C3968
	cmp r2, r5
	bhs _020C3968
	ldrh r3, [r0, #6]
	add r4, r0, r3
	ldrh r3, [r4, #2]
	add r3, r4, r3
	add r6, r3, r2, lsl #4
	b _020C396C
_020C3968:
	mov r6, #0
_020C396C:
	ldr r4, [r6]
	ldr r3, [r1]
	cmp r4, r3
	ldreq r4, [r6, #4]
	ldreq r3, [r1, #4]
	cmpeq r4, r3
	ldreq r4, [r6, #8]
	ldreq r3, [r1, #8]
	cmpeq r4, r3
	ldreq r3, [r6, #0xc]
	ldreq r1, [r1, #0xc]
	cmpeq r3, r1
	bne _020C39D0
	cmp r0, #0
	beq _020C39C8
	cmp r2, r5
	bhs _020C39C8
	ldrh r3, [r0, #6]
	ldrh r1, [r0, r3]
	add r0, r0, r3
	add r0, r0, #4
	mla r0, r1, r2, r0
	pop {r4, r5, r6, r7, r8, pc}
_020C39C8:
	mov r0, #0
	pop {r4, r5, r6, r7, r8, pc}
_020C39D0:
	mov r0, #0
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020C3818

	arm_func_start FUN_020C39D8
FUN_020C39D8: @ 0x020C39D8
	push {r3, r4, r5, r6, r7, lr}
	cmp r1, #0
	mvneq r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	ldrb r2, [r0, #1]
	cmp r2, #0x10
	bhs _020C3A7C
	cmp r2, #0
	ldm r1, {r2, r3, ip, lr}
	mov r1, #0
	bls _020C3B38
	mov r4, r1
	mov r6, r1
_020C3A0C:
	cmp r0, #0
	beq _020C3A38
	ldrb r5, [r0, #1]
	cmp r1, r5
	bhs _020C3A38
	ldrh r5, [r0, #6]
	add r7, r0, r5
	ldrh r5, [r7, #2]
	add r5, r7, r5
	add r7, r5, r4
	b _020C3A3C
_020C3A38:
	mov r7, r6
_020C3A3C:
	ldr r5, [r7]
	cmp r5, r2
	ldreq r5, [r7, #4]
	cmpeq r5, r3
	ldreq r5, [r7, #8]
	cmpeq r5, ip
	ldreq r5, [r7, #0xc]
	cmpeq r5, lr
	moveq r0, r1
	popeq {r3, r4, r5, r6, r7, pc}
	ldrb r5, [r0, #1]
	add r1, r1, #1
	add r4, r4, #0x10
	cmp r1, r5
	blo _020C3A0C
	b _020C3B38
_020C3A7C:
	add r5, r0, #8
	ldrb r4, [r5, #1]
	cmp r4, #0
	beq _020C3B38
	ldrb r7, [r5, r4, lsl #2]
	ldrb r3, [r5]
	add r6, r5, r4, lsl #2
	cmp r3, r7
	bls _020C3AD0
_020C3AA0:
	asr r3, r7, #5
	ldr r4, [r1, r3, lsl #2]
	and r3, r7, #0x1f
	lsr r3, r4, r3
	and r3, r3, #1
	add r3, r6, r3
	ldrb r4, [r3, #1]
	ldrb r3, [r6]
	ldrb r7, [r5, r4, lsl #2]
	add r6, r5, r4, lsl #2
	cmp r3, r7
	bhi _020C3AA0
_020C3AD0:
	cmp r0, #0
	ldrb r3, [r6, #3]
	beq _020C3AFC
	cmp r3, r2
	bhs _020C3AFC
	ldrh r2, [r0, #6]
	add r2, r0, r2
	ldrh r0, [r2, #2]
	add r0, r2, r0
	add r4, r0, r3, lsl #4
	b _020C3B00
_020C3AFC:
	mov r4, #0
_020C3B00:
	ldr r2, [r4]
	ldr r0, [r1]
	cmp r2, r0
	ldreq r2, [r4, #4]
	ldreq r0, [r1, #4]
	cmpeq r2, r0
	ldreq r2, [r4, #8]
	ldreq r0, [r1, #8]
	cmpeq r2, r0
	ldreq r2, [r4, #0xc]
	ldreq r0, [r1, #0xc]
	cmpeq r2, r0
	moveq r0, r3
	popeq {r3, r4, r5, r6, r7, pc}
_020C3B38:
	mvn r0, #0
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020C39D8

	arm_func_start FUN_020C3B40
FUN_020C3B40: @ 0x020C3B40
	ldrh r1, [r0, #0xc]
	ldr r1, [r0, r1]
	add r0, r0, r1
	bx lr
	arm_func_end FUN_020C3B40

	arm_func_start FUN_020C3B50
FUN_020C3B50: @ 0x020C3B50
	ldrh r2, [r0, #0xc]
	ldrh r1, [r0, #0xe]
	add r3, r0, r2
	cmp r1, #1
	bne _020C3B80
	ldr r2, [r0]
	ldr r1, _020C3B8C @ =0x30585442
	cmp r2, r1
	ldreq r1, [r3]
	addeq r0, r0, r1
	movne r0, #0
	bx lr
_020C3B80:
	ldr r1, [r3, #4]
	add r0, r0, r1
	bx lr
	.align 2, 0
_020C3B8C: .4byte 0x30585442
	arm_func_end FUN_020C3B50

	arm_func_start FUN_020C3B90
FUN_020C3B90: @ 0x020C3B90
	cmp r0, #0
	beq _020C3BE4
	ldrh r2, [r0, #0xc]
	ldr r2, [r0, r2]
	add ip, r0, r2
	adds r3, ip, #8
	beq _020C3BD0
	ldrb r0, [ip, #9]
	cmp r1, r0
	bhs _020C3BD0
	ldrh r2, [ip, #0xe]
	ldrh r0, [r3, r2]
	add r2, r3, r2
	add r2, r2, #4
	mla r1, r0, r1, r2
	b _020C3BD4
_020C3BD0:
	mov r1, #0
_020C3BD4:
	cmp r1, #0
	ldrne r0, [r1]
	addne r0, ip, r0
	bxne lr
_020C3BE4:
	mov r0, #0
	bx lr
	arm_func_end FUN_020C3B90

	arm_func_start FUN_020C3BEC
FUN_020C3BEC: @ 0x020C3BEC
	cmp r0, #0
	beq _020C3C10
	ldrb r2, [r0, #6]
	cmp r1, r2
	bhs _020C3C10
	ldrh r2, [r0, #8]
	add r0, r0, r2
	add r0, r0, r1, lsl #4
	bx lr
_020C3C10:
	mov r0, #0
	bx lr
	arm_func_end FUN_020C3BEC

	arm_func_start FUN_020C3C18
FUN_020C3C18: @ 0x020C3C18
	cmp r0, #0
	beq _020C3C3C
	ldrb r2, [r0, #7]
	cmp r1, r2
	bhs _020C3C3C
	ldrh r2, [r0, #0xa]
	add r0, r0, r2
	add r0, r0, r1, lsl #4
	bx lr
_020C3C3C:
	mov r0, #0
	bx lr
	arm_func_end FUN_020C3C18

	arm_func_start FUN_020C3C44
FUN_020C3C44: @ 0x020C3C44
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r2
	bl FUN_020C3CB8
	ldrsh r1, [r0, #4]
	ldrh r3, [r0, #6]
	mul r2, r1, r4
	add r3, r5, r3
	lsr r2, r2, #0xc
	b _020C3C70
_020C3C6C:
	sub r2, r2, #1
_020C3C70:
	cmp r2, #0
	beq _020C3C88
	lsl r1, r2, #2
	ldrh r1, [r3, r1]
	cmp r1, r4
	bhs _020C3C6C
_020C3C88:
	ldrh r1, [r0]
	b _020C3C94
_020C3C90:
	add r2, r2, #1
_020C3C94:
	add r0, r2, #1
	cmp r0, r1
	bhs _020C3CB0
	add r0, r3, r2, lsl #2
	ldrh r0, [r0, #4]
	cmp r0, r4
	bls _020C3C90
_020C3CB0:
	add r0, r3, r2, lsl #2
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020C3C44

	arm_func_start FUN_020C3CB8
FUN_020C3CB8: @ 0x020C3CB8
	adds r3, r0, #0xc
	beq _020C3CE4
	ldrb r2, [r0, #0xd]
	cmp r1, r2
	bhs _020C3CE4
	ldrh r0, [r0, #0x12]
	ldrh r2, [r3, r0]
	add r0, r3, r0
	add r0, r0, #4
	mla r0, r2, r1, r0
	bx lr
_020C3CE4:
	mov r0, #0
	bx lr
	arm_func_end FUN_020C3CB8

	arm_func_start FUN_020C3CEC
FUN_020C3CEC: @ 0x020C3CEC
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	ldr r0, _020C3D64 @ =_02110A08
	str r4, [r5, #8]
	ldr r0, [r0]
	add r1, r5, #0x1a
	str r0, [r5, #0xc]
	ldrb r2, [r2, #0x17]
	mov r0, #0
	strb r2, [r5, #0x19]
	lsl r2, r2, #1
	bl FUN_020D4790
	ldrh r0, [r4, #6]
	add r3, r4, #0x14
	mov r2, #0
	cmp r0, #0
	popls {r3, r4, r5, pc}
_020C3D34:
	lsl r0, r2, #1
	ldrh r1, [r3, r0]
	add r0, r5, r2, lsl #1
	add r2, r2, #1
	ldr r1, [r4, r1]
	lsr r1, r1, #0x18
	orr r1, r1, #0x100
	strh r1, [r0, #0x1a]
	ldrh r0, [r4, #6]
	cmp r2, r0
	blo _020C3D34
	pop {r3, r4, r5, pc}
	.align 2, 0
_020C3D64: .4byte _02110A08
	arm_func_end FUN_020C3CEC

	arm_func_start FUN_020C3D68
FUN_020C3D68: @ 0x020C3D68
	push {r3, lr}
	mov r3, r0
	ldr r0, [r1, #8]
	ldr ip, [r1]
	ldrh r1, [r0, #4]
	cmp ip, r1, lsl #12
	lsl r1, r1, #0xc
	subge ip, r1, #1
	bge _020C3D94
	cmp ip, #0
	movlt ip, #0
_020C3D94:
	mov r1, r2
	mov r2, ip
	bl FUN_020C404C
	pop {r3, pc}
	arm_func_end FUN_020C3D68

	arm_func_start FUN_020C3DA4
FUN_020C3DA4: @ 0x020C3DA4
	ldr r1, _020C3E38 @ =0x021DA700
	ldr r2, [r1]
	ldr r1, [r2]
	ldr ip, [r2, #0xd4]
	ldrb r3, [r1, #1]
	cmp ip, #0
	beq _020C3DFC
	beq _020C3DE8
	ldrb r1, [ip, #1]
	cmp r3, r1
	bhs _020C3DE8
	ldrh r2, [ip, #6]
	ldrh r1, [ip, r2]
	add r2, ip, r2
	add r2, r2, #4
	mla r2, r1, r3, r2
	b _020C3DEC
_020C3DE8:
	mov r2, #0
_020C3DEC:
	cmp r2, #0
	ldrne r1, [r2]
	addne r2, ip, r1
	bne _020C3E00
_020C3DFC:
	mov r2, #0
_020C3E00:
	ldrh r1, [r2]
	tst r1, #1
	beq _020C3E1C
	ldr r1, [r0]
	orr r1, r1, #4
	str r1, [r0]
	bx lr
_020C3E1C:
	ldr r1, [r2, #4]
	str r1, [r0, #0x4c]
	ldr r1, [r2, #8]
	str r1, [r0, #0x50]
	ldr r1, [r2, #0xc]
	str r1, [r0, #0x54]
	bx lr
	.align 2, 0
_020C3E38: .4byte 0x021DA700
	arm_func_end FUN_020C3DA4

	arm_func_start FUN_020C3E3C
FUN_020C3E3C: @ 0x020C3E3C
	push {r4, lr}
	ldr r1, _020C3EC8 @ =0x021DA700
	ldr ip, [r1]
	ldr r2, [ip]
	ldr r4, [ip, #0xd4]
	ldrb lr, [r2, #1]
	cmp r4, #0
	beq _020C3E98
	beq _020C3E84
	ldrb r1, [r4, #1]
	cmp lr, r1
	bhs _020C3E84
	ldrh r3, [r4, #6]
	ldrh r1, [r4, r3]
	add r3, r4, r3
	add r3, r3, #4
	mla r3, r1, lr, r3
	b _020C3E88
_020C3E84:
	mov r3, #0
_020C3E88:
	cmp r3, #0
	ldrne r1, [r3]
	addne r1, r4, r1
	bne _020C3E9C
_020C3E98:
	mov r1, #0
_020C3E9C:
	ldrh r3, [r1], #4
	tst r3, #1
	addeq r1, r1, #0xc
	tst r3, #2
	bne _020C3EBC
	tst r3, #8
	addne r1, r1, #4
	addeq r1, r1, #0x10
_020C3EBC:
	ldr ip, [ip, #0xe8]
	blx ip
	pop {r4, pc}
	.align 2, 0
_020C3EC8: .4byte 0x021DA700
	arm_func_end FUN_020C3E3C

	arm_func_start FUN_020C3ECC
FUN_020C3ECC: @ 0x020C3ECC
	push {r4, r5, r6, r7, r8, lr}
	ldr r1, _020C4038 @ =0x021DA700
	mov r8, r0
	ldr r1, [r1]
	ldr r0, [r1]
	ldr r3, [r1, #0xd4]
	ldrb r2, [r0, #1]
	cmp r3, #0
	beq _020C3F2C
	beq _020C3F18
	ldrb r0, [r3, #1]
	cmp r2, r0
	bhs _020C3F18
	ldrh r1, [r3, #6]
	ldrh r0, [r3, r1]
	add r1, r3, r1
	add r1, r1, #4
	mla r1, r0, r2, r1
	b _020C3F1C
_020C3F18:
	mov r1, #0
_020C3F1C:
	cmp r1, #0
	ldrne r0, [r1]
	addne r5, r3, r0
	bne _020C3F30
_020C3F2C:
	mov r5, #0
_020C3F30:
	ldrh r0, [r5]
	add r1, r5, #4
	tst r0, #1
	addeq r1, r1, #0xc
	tst r0, #2
	bne _020C4028
	tst r0, #8
	beq _020C3FDC
	and r2, r0, #0xf0
	add r0, r8, #0x28
	asr r4, r2, #4
	ldrsh r7, [r1]
	ldrsh r6, [r1, #2]
	blx FUN_020D4BD0
	ldrh r0, [r5]
	ldr r1, _020C403C @ =0x021094B8
	mov r3, #0x1000
	tst r0, #0x100
	ldr r0, _020C4040 @ =0x021094B9
	ldrb r1, [r1, r4, lsl #2]
	ldrb r0, [r0, r4, lsl #2]
	rsbne r3, r3, #0
	add r2, r8, r4, lsl #2
	str r3, [r2, #0x28]
	add r1, r8, r1, lsl #2
	str r7, [r1, #0x28]
	add r0, r8, r0, lsl #2
	str r6, [r0, #0x28]
	ldrh r0, [r5]
	tst r0, #0x200
	ldr r0, _020C4044 @ =0x021094BA
	rsbne r6, r6, #0
	ldrb r0, [r0, r4, lsl #2]
	add r0, r8, r0, lsl #2
	str r6, [r0, #0x28]
	ldrh r0, [r5]
	tst r0, #0x400
	ldr r0, _020C4048 @ =0x021094BB
	rsbne r7, r7, #0
	ldrb r0, [r0, r4, lsl #2]
	add r0, r8, r0, lsl #2
	str r7, [r0, #0x28]
	pop {r4, r5, r6, r7, r8, pc}
_020C3FDC:
	ldrsh r0, [r5, #2]
	str r0, [r8, #0x28]
	ldrsh r0, [r1]
	str r0, [r8, #0x2c]
	ldrsh r0, [r1, #2]
	str r0, [r8, #0x30]
	ldrsh r0, [r1, #4]
	str r0, [r8, #0x34]
	ldrsh r0, [r1, #6]
	str r0, [r8, #0x38]
	ldrsh r0, [r1, #8]
	str r0, [r8, #0x3c]
	ldrsh r0, [r1, #0xa]
	str r0, [r8, #0x40]
	ldrsh r0, [r1, #0xc]
	str r0, [r8, #0x44]
	ldrsh r0, [r1, #0xe]
	str r0, [r8, #0x48]
	pop {r4, r5, r6, r7, r8, pc}
_020C4028:
	ldr r0, [r8]
	orr r0, r0, #2
	str r0, [r8]
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0
_020C4038: .4byte 0x021DA700
_020C403C: .4byte 0x021094B8
_020C4040: .4byte 0x021094B9
_020C4044: .4byte 0x021094BA
_020C4048: .4byte 0x021094BB
	arm_func_end FUN_020C3ECC

	arm_func_start FUN_020C404C
FUN_020C404C: @ 0x020C404C
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x30
	mov sb, r0
	add r0, sb, r1, lsl #1
	ldrh r0, [r0, #0x14]
	mov r7, r3
	mov r8, r2
	ldr r4, [sb, r0]
	add r1, sb, r0
	tst r4, #1
	movne r0, #7
	strne r0, [r7]
	bne _020C43C4
	ldr r0, _020C43F8 @ =0x00000FFF
	add r5, r1, #4
	tst r8, r0
	beq _020C40A0
	ldr r0, [sb, #8]
	tst r0, #1
	movne r6, #1
	bne _020C40A4
_020C40A0:
	mov r6, #0
_020C40A4:
	mov r0, #0
	str r0, [r7]
	tst r4, #6
	bne _020C4184
	tst r4, #8
	bne _020C40F0
	cmp r6, #0
	mov r1, r8
	mov r2, r5
	beq _020C40DC
	mov r3, sb
	add r0, r7, #0x4c
	bl FUN_020C4560
	b _020C40E8
_020C40DC:
	mov r3, sb
	add r0, r7, #0x4c
	bl FUN_020C4400
_020C40E8:
	add r5, r5, #8
	b _020C40F8
_020C40F0:
	ldr r0, [r5], #4
	str r0, [r7, #0x4c]
_020C40F8:
	tst r4, #0x10
	bne _020C4134
	cmp r6, #0
	mov r1, r8
	mov r2, r5
	beq _020C4120
	mov r3, sb
	add r0, r7, #0x50
	bl FUN_020C4560
	b _020C412C
_020C4120:
	mov r3, sb
	add r0, r7, #0x50
	bl FUN_020C4400
_020C412C:
	add r5, r5, #8
	b _020C413C
_020C4134:
	ldr r0, [r5], #4
	str r0, [r7, #0x50]
_020C413C:
	tst r4, #0x20
	bne _020C4178
	cmp r6, #0
	mov r1, r8
	mov r2, r5
	beq _020C4164
	mov r3, sb
	add r0, r7, #0x54
	bl FUN_020C4560
	b _020C4170
_020C4164:
	mov r3, sb
	add r0, r7, #0x54
	bl FUN_020C4400
_020C4170:
	add r5, r5, #8
	b _020C41A4
_020C4178:
	ldr r0, [r5], #4
	str r0, [r7, #0x54]
	b _020C41A4
_020C4184:
	tst r4, #2
	beq _020C419C
	ldr r0, [r7]
	orr r0, r0, #4
	str r0, [r7]
	b _020C41A4
_020C419C:
	mov r0, r7
	bl FUN_020C3DA4
_020C41A4:
	tst r4, #0xc0
	bne _020C4268
	tst r4, #0x100
	bne _020C41E8
	cmp r6, #0
	mov r1, r8
	mov r2, r5
	beq _020C41D4
	mov r3, sb
	add r0, r7, #0x28
	bl FUN_020C4E5C
	b _020C41E0
_020C41D4:
	mov r3, sb
	add r0, r7, #0x28
	bl FUN_020C4A44
_020C41E0:
	add r5, r5, #8
	b _020C4288
_020C41E8:
	ldr r1, [sb, #0xc]
	ldr r2, [sb, #0x10]
	ldr r3, [r5]
	add r0, r7, #0x28
	add r1, sb, r1
	add r2, sb, r2
	bl FUN_020C51A0
	cmp r0, #0
	beq _020C4260
	ldr ip, [r7, #0x3c]
	ldr r0, [r7, #0x2c]
	ldr r3, [r7, #0x28]
	ldr fp, [r7, #0x38]
	ldr r1, [r7, #0x30]
	ldr r2, [r7, #0x34]
	mul sl, r0, ip
	mul lr, r1, fp
	sub sl, sl, lr
	asr sl, sl, #0xc
	mul lr, r1, r2
	mul r1, r3, ip
	sub r1, lr, r1
	mul fp, r3, fp
	mul r2, r0, r2
	sub r0, fp, r2
	str sl, [r7, #0x40]
	asr r1, r1, #0xc
	str r1, [r7, #0x44]
	asr r0, r0, #0xc
	str r0, [r7, #0x48]
_020C4260:
	add r5, r5, #4
	b _020C4288
_020C4268:
	tst r4, #0x40
	beq _020C4280
	ldr r0, [r7]
	orr r0, r0, #2
	str r0, [r7]
	b _020C4288
_020C4280:
	mov r0, r7
	bl FUN_020C3ECC
_020C4288:
	tst r4, #0x600
	bne _020C439C
	tst r4, #0x800
	bne _020C42D8
	cmp r6, #0
	add r0, sp, #0x10
	mov r1, r8
	beq _020C42B8
	mov r2, r5
	mov r3, sb
	bl FUN_020C48B0
	b _020C42C4
_020C42B8:
	mov r2, r5
	mov r3, sb
	bl FUN_020C46BC
_020C42C4:
	ldr r1, [sp, #0x10]
	ldr r0, [sp, #0x14]
	str r1, [sp, #0x18]
	str r0, [sp, #0x24]
	b _020C42E8
_020C42D8:
	ldr r0, [r5]
	str r0, [sp, #0x18]
	ldr r0, [r5, #4]
	str r0, [sp, #0x24]
_020C42E8:
	tst r4, #0x1000
	bne _020C4330
	cmp r6, #0
	add r0, sp, #8
	mov r1, r8
	beq _020C4310
	mov r3, sb
	add r2, r5, #8
	bl FUN_020C48B0
	b _020C431C
_020C4310:
	mov r3, sb
	add r2, r5, #8
	bl FUN_020C46BC
_020C431C:
	ldr r1, [sp, #8]
	ldr r0, [sp, #0xc]
	str r1, [sp, #0x1c]
	str r0, [sp, #0x28]
	b _020C4340
_020C4330:
	ldr r0, [r5, #8]
	str r0, [sp, #0x1c]
	ldr r0, [r5, #0xc]
	str r0, [sp, #0x28]
_020C4340:
	tst r4, #0x2000
	bne _020C4388
	cmp r6, #0
	add r0, sp, #0
	mov r1, r8
	beq _020C4368
	mov r3, sb
	add r2, r5, #0x10
	bl FUN_020C48B0
	b _020C4374
_020C4368:
	mov r3, sb
	add r2, r5, #0x10
	bl FUN_020C46BC
_020C4374:
	ldr r1, [sp]
	ldr r0, [sp, #4]
	str r1, [sp, #0x20]
	str r0, [sp, #0x2c]
	b _020C43C4
_020C4388:
	ldr r0, [r5, #0x10]
	str r0, [sp, #0x20]
	ldr r0, [r5, #0x14]
	str r0, [sp, #0x2c]
	b _020C43C4
_020C439C:
	tst r4, #0x200
	beq _020C43B4
	ldr r0, [r7]
	orr r0, r0, #1
	str r0, [r7]
	b _020C43C4
_020C43B4:
	mov r0, r7
	bl FUN_020C3E3C
	add sp, sp, #0x30
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020C43C4:
	ldr r0, [r7]
	add r1, sp, #0x18
	tst r0, #1
	ldr r0, _020C43FC @ =0x021DA700
	movne r3, #4
	ldr r4, [r0]
	moveq r3, #0
	ldr r2, [r4]
	ldr r4, [r4, #0xe8]
	mov r0, r7
	blx r4
	add sp, sp, #0x30
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020C43F8: .4byte 0x00000FFF
_020C43FC: .4byte 0x021DA700
	arm_func_end FUN_020C404C

	arm_func_start FUN_020C4400
FUN_020C4400: @ 0x020C4400
	push {r3, r4, r5, lr}
	ldr r4, [r2, #4]
	ldr ip, [r2]
	asr r5, r1, #0xc
	tst ip, #0xc0000000
	add r1, r3, r4
	beq _020C453C
	ldr r2, _020C455C @ =0x1FFF0000
	tst ip, #0x40000000
	and r2, ip, r2
	lsr r3, r2, #0x10
	beq _020C4458
	tst r5, #1
	beq _020C4450
	cmp r5, r3
	lsrhi r2, r3, #1
	addhi r5, r2, #1
	bhi _020C453C
	lsr r4, r5, #1
	b _020C44FC
_020C4450:
	lsr r5, r5, #1
	b _020C453C
_020C4458:
	ands r2, r5, #3
	beq _020C44F4
	cmp r5, r3
	addhi r5, r2, r3, lsr #2
	bhi _020C453C
	tst r5, #1
	beq _020C44EC
	tst r5, #2
	lsrne r5, r5, #2
	addne r2, r5, #1
	lsreq r2, r5, #2
	addeq r5, r2, #1
	tst ip, #0x20000000
	beq _020C44B4
	lsl r3, r2, #1
	lsl r2, r5, #1
	ldrsh r3, [r1, r3]
	ldrsh r1, [r1, r2]
	add r2, r3, r3, lsl #1
	add r1, r2, r1
	asr r1, r1, #2
	str r1, [r0]
	pop {r3, r4, r5, pc}
_020C44B4:
	ldr ip, [r1, r2, lsl #2]
	mov r2, #3
	mov r3, #0
	umull r4, lr, ip, r2
	mla lr, ip, r3, lr
	asr r3, ip, #0x1f
	mla lr, r3, r2, lr
	ldr r1, [r1, r5, lsl #2]
	adds r2, r4, r1
	adc r1, lr, r1, asr #31
	lsr r2, r2, #2
	orr r2, r2, r1, lsl #30
	str r2, [r0]
	pop {r3, r4, r5, pc}
_020C44EC:
	lsr r4, r5, #2
	b _020C44FC
_020C44F4:
	lsr r5, r5, #2
	b _020C453C
_020C44FC:
	tst ip, #0x20000000
	beq _020C4520
	lsl r3, r4, #1
	add r2, r1, r4, lsl #1
	ldrsh r3, [r1, r3]
	ldrsh r1, [r2, #2]
	add r1, r3, r1
	asr r1, r1, #1
	b _020C4534
_020C4520:
	add r2, r1, r4, lsl #2
	ldr r2, [r2, #4]
	ldr r3, [r1, r4, lsl #2]
	asr r1, r2, #1
	add r1, r1, r3, asr #1
_020C4534:
	str r1, [r0]
	pop {r3, r4, r5, pc}
_020C453C:
	tst ip, #0x20000000
	ldreq r1, [r1, r5, lsl #2]
	streq r1, [r0]
	popeq {r3, r4, r5, pc}
	lsl r2, r5, #1
	ldrsh r1, [r1, r2]
	str r1, [r0]
	pop {r3, r4, r5, pc}
	.align 2, 0
_020C455C: .4byte 0x1FFF0000
	arm_func_end FUN_020C4400

	arm_func_start FUN_020C4560
FUN_020C4560: @ 0x020C4560
	push {r3, r4, r5, lr}
	ldrh r4, [r3, #4]
	ldr ip, [r2, #4]
	asr lr, r1, #0xc
	sub r4, r4, #1
	cmp r4, r1, asr #12
	add ip, r3, ip
	ldr r2, [r2]
	bne _020C45FC
	tst r2, #0xc0000000
	beq _020C45A0
	tst r2, #0x40000000
	andne r4, lr, #1
	addne lr, r4, lr, lsr #1
	andeq r4, lr, #3
	addeq lr, r4, lr, lsr #2
_020C45A0:
	ldr r3, [r3, #8]
	tst r3, #2
	beq _020C45E4
	ldr r3, _020C46B0 @ =0x00000FFF
	tst r2, #0x20000000
	and r2, r1, r3
	ldreq r3, [ip, lr, lsl #2]
	ldreq r1, [ip]
	beq _020C45D0
	lsl r1, lr, #1
	ldrsh r3, [ip, r1]
	ldrsh r1, [ip]
_020C45D0:
	sub r1, r1, r3
	mul r1, r2, r1
	add r1, r3, r1, asr #12
	str r1, [r0]
	pop {r3, r4, r5, pc}
_020C45E4:
	tst r2, #0x20000000
	lslne r1, lr, #1
	ldrshne r1, [ip, r1]
	ldreq r1, [ip, lr, lsl #2]
	str r1, [r0]
	pop {r3, r4, r5, pc}
_020C45FC:
	tst r2, #0xc0000000
	beq _020C4660
	ldr r3, _020C46B4 @ =0x1FFF0000
	tst r2, #0x40000000
	and r4, r2, r3
	lsr r4, r4, #0x10
	beq _020C4638
	cmp lr, r4
	lsrhs lr, r4, #1
	bhs _020C4660
	lsr lr, lr, #1
	and r1, r1, r3, lsr #16
	mov r4, #2
	mov r5, #1
	b _020C4670
_020C4638:
	cmp lr, r4
	andhs r3, lr, #3
	addhs lr, r3, lr, lsr #2
	bhs _020C4660
	ldr r3, _020C46B8 @ =0x00003FFF
	lsr lr, lr, #2
	and r1, r1, r3
	mov r4, #4
	mov r5, #2
	b _020C4670
_020C4660:
	ldr r3, _020C46B0 @ =0x00000FFF
	mov r4, #1
	and r1, r1, r3
	mov r5, #0
_020C4670:
	tst r2, #0x20000000
	addeq r2, ip, lr, lsl #2
	ldreq ip, [ip, lr, lsl #2]
	ldreq r2, [r2, #4]
	beq _020C4694
	add r2, ip, lr, lsl #1
	lsl r3, lr, #1
	ldrsh ip, [ip, r3]
	ldrsh r2, [r2, #2]
_020C4694:
	sub r2, r2, ip
	mul r3, ip, r4
	mul r2, r1, r2
	add r1, r3, r2, asr #12
	asr r1, r1, r5
	str r1, [r0]
	pop {r3, r4, r5, pc}
	.align 2, 0
_020C46B0: .4byte 0x00000FFF
_020C46B4: .4byte 0x1FFF0000
_020C46B8: .4byte 0x00003FFF
	arm_func_end FUN_020C4560

	arm_func_start FUN_020C46BC
FUN_020C46BC: @ 0x020C46BC
	push {r3, r4, r5, r6, r7, lr}
	ldr r4, [r2, #4]
	ldr r5, [r2]
	asr r6, r1, #0xc
	tst r5, #0xc0000000
	add r1, r3, r4
	beq _020C4808
	ldr r2, _020C48AC @ =0x1FFF0000
	tst r5, #0x40000000
	and r2, r5, r2
	lsr r3, r2, #0x10
	beq _020C4714
	tst r6, #1
	beq _020C470C
	cmp r6, r3
	lsrhi r2, r3, #1
	addhi r6, r2, #1
	bhi _020C4808
	lsr r4, r6, #1
	b _020C4840
_020C470C:
	lsr r6, r6, #1
	b _020C4808
_020C4714:
	ands r2, r6, #3
	beq _020C4804
	cmp r6, r3
	addhi r6, r2, r3, lsr #2
	bhi _020C4808
	tst r6, #1
	beq _020C47FC
	tst r6, #2
	lsrne r3, r6, #2
	addne r2, r3, #1
	lsreq r2, r6, #2
	addeq r3, r2, #1
	tst r5, #0x20000000
	beq _020C4790
	lsl r5, r2, #2
	lsl r4, r3, #2
	ldrsh r6, [r1, r5]
	ldrsh r5, [r1, r4]
	add r2, r1, r2, lsl #2
	add r4, r6, r6, lsl #1
	add r4, r5, r4
	asr r4, r4, #2
	str r4, [r0]
	add r1, r1, r3, lsl #2
	ldrsh r3, [r2, #2]
	ldrsh r2, [r1, #2]
	add r1, r3, r3, lsl #1
	add r1, r2, r1
	asr r1, r1, #2
	str r1, [r0, #4]
	pop {r3, r4, r5, r6, r7, pc}
_020C4790:
	ldr r4, [r1, r2, lsl #3]
	mov ip, #3
	mov lr, #0
	umull r6, r5, r4, ip
	mla r5, r4, lr, r5
	asr r4, r4, #0x1f
	ldr r7, [r1, r3, lsl #3]
	add r2, r1, r2, lsl #3
	mla r5, r4, ip, r5
	adds r6, r6, r7
	adc r4, r5, r7, asr #31
	lsr r5, r6, #2
	orr r5, r5, r4, lsl #30
	str r5, [r0]
	add r1, r1, r3, lsl #3
	ldr r2, [r2, #4]
	ldr r1, [r1, #4]
	umull r4, r3, r2, ip
	mla r3, r2, lr, r3
	asr r2, r2, #0x1f
	mla r3, r2, ip, r3
	adds r4, r4, r1
	adc r1, r3, r1, asr #31
	lsr r2, r4, #2
	orr r2, r2, r1, lsl #30
	str r2, [r0, #4]
	pop {r3, r4, r5, r6, r7, pc}
_020C47FC:
	lsr r4, r6, #2
	b _020C4840
_020C4804:
	lsr r6, r6, #2
_020C4808:
	tst r5, #0x20000000
	beq _020C4828
	lsl r2, r6, #2
	ldrsh r2, [r1, r2]
	add r1, r1, r6, lsl #2
	str r2, [r0]
	ldrsh r1, [r1, #2]
	b _020C4838
_020C4828:
	ldr r2, [r1, r6, lsl #3]
	add r1, r1, r6, lsl #3
	str r2, [r0]
	ldr r1, [r1, #4]
_020C4838:
	str r1, [r0, #4]
	pop {r3, r4, r5, r6, r7, pc}
_020C4840:
	tst r5, #0x20000000
	beq _020C487C
	lsl r2, r4, #2
	add r3, r1, r4, lsl #2
	ldrsh r2, [r1, r2]
	ldrsh r1, [r3, #4]
	add r1, r2, r1
	asr r1, r1, #1
	str r1, [r0]
	ldrsh r2, [r3, #2]
	ldrsh r1, [r3, #6]
	add r1, r2, r1
	asr r1, r1, #1
	str r1, [r0, #4]
	pop {r3, r4, r5, r6, r7, pc}
_020C487C:
	add r3, r1, r4, lsl #3
	ldr r2, [r1, r4, lsl #3]
	ldr r1, [r3, #8]
	add r1, r2, r1
	asr r1, r1, #1
	str r1, [r0]
	ldr r2, [r3, #4]
	ldr r1, [r3, #0xc]
	add r1, r2, r1
	asr r1, r1, #1
	str r1, [r0, #4]
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020C48AC: .4byte 0x1FFF0000
	arm_func_end FUN_020C46BC

	arm_func_start FUN_020C48B0
FUN_020C48B0: @ 0x020C48B0
	push {r3, r4, r5, r6, r7, lr}
	ldrh r4, [r3, #4]
	ldr r5, [r2, #4]
	asr lr, r1, #0xc
	sub r4, r4, #1
	cmp r4, r1, asr #12
	add ip, r3, r5
	ldr r2, [r2]
	bne _020C4938
	tst r2, #0xc0000000
	beq _020C48F0
	tst r2, #0x40000000
	andne r4, lr, #1
	addne lr, r4, lr, lsr #1
	andeq r4, lr, #3
	addeq lr, r4, lr, lsr #2
_020C48F0:
	ldr r3, [r3, #8]
	tst r3, #2
	movne r3, #0
	bne _020C49B4
	tst r2, #0x20000000
	beq _020C4920
	lsl r1, lr, #2
	ldrsh r2, [ip, r1]
	add r1, ip, lr, lsl #2
	str r2, [r0]
	ldrsh r1, [r1, #2]
	b _020C4930
_020C4920:
	ldr r2, [ip, lr, lsl #3]
	add r1, ip, lr, lsl #3
	str r2, [r0]
	ldr r1, [r1, #4]
_020C4930:
	str r1, [r0, #4]
	pop {r3, r4, r5, r6, r7, pc}
_020C4938:
	tst r2, #0xc0000000
	beq _020C49B0
	ldr r4, _020C4A38 @ =0x1FFF0000
	tst r2, #0x40000000
	and r3, r2, r4
	lsr r3, r3, #0x10
	beq _020C497C
	cmp lr, r3
	lsrhs lr, r3, #1
	addhs r3, lr, #1
	bhs _020C49B4
	lsr lr, lr, #1
	add r3, lr, #1
	and r1, r1, r4, lsr #16
	mov r4, #2
	mov r5, #1
	b _020C49C4
_020C497C:
	cmp lr, r3
	blo _020C4994
	and r3, lr, #3
	add lr, r3, lr, lsr #2
	add r3, lr, #1
	b _020C49B4
_020C4994:
	ldr r4, _020C4A3C @ =0x00003FFF
	lsr lr, lr, #2
	add r3, lr, #1
	and r1, r1, r4
	mov r4, #4
	mov r5, #2
	b _020C49C4
_020C49B0:
	add r3, lr, #1
_020C49B4:
	ldr r5, _020C4A40 @ =0x00000FFF
	mov r4, #1
	and r1, r1, r5
	mov r5, #0
_020C49C4:
	tst r2, #0x20000000
	beq _020C49F0
	lsl r2, lr, #2
	add r7, ip, lr, lsl #2
	lsl r6, r3, #2
	add r3, ip, r3, lsl #2
	ldrsh r2, [ip, r2]
	ldrsh lr, [r7, #2]
	ldrsh r7, [ip, r6]
	ldrsh r3, [r3, #2]
	b _020C4A04
_020C49F0:
	add r7, ip, lr, lsl #3
	ldm r7, {r2, lr}
	add r6, ip, r3, lsl #3
	ldr r7, [ip, r3, lsl #3]
	ldr r3, [r6, #4]
_020C4A04:
	sub ip, r7, r2
	sub r3, r3, lr
	mul r6, r2, r4
	mul r2, r1, ip
	add r2, r6, r2, asr #12
	asr r6, r2, r5
	mul r4, lr, r4
	mul r2, r1, r3
	add r1, r4, r2, asr #12
	asr r1, r1, r5
	str r6, [r0]
	str r1, [r0, #4]
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020C4A38: .4byte 0x1FFF0000
_020C4A3C: .4byte 0x00003FFF
_020C4A40: .4byte 0x00000FFF
	arm_func_end FUN_020C48B0

	arm_func_start FUN_020C4A44
FUN_020C4A44: @ 0x020C4A44
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0x48
	ldr sb, [r2]
	mov r4, r3
	ldr r2, [r2, #4]
	mov r5, r0
	tst sb, #0xc0000000
	asr r3, r1, #0xc
	add r8, r4, r2
	ldr r7, [r4, #0xc]
	ldr r6, [r4, #0x10]
	beq _020C4DC8
	ldr r0, _020C4E58 @ =0x1FFF0000
	tst sb, #0x40000000
	and r0, sb, r0
	lsr r1, r0, #0x10
	beq _020C4AB0
	tst r3, #1
	beq _020C4AA8
	cmp r3, r1
	lsrhi r0, r1, #1
	addhi r3, r0, #1
	bhi _020C4DC8
	lsr sb, r3, #1
	b _020C4C70
_020C4AA8:
	lsr r3, r3, #1
	b _020C4DC8
_020C4AB0:
	ands r0, r3, #3
	beq _020C4C68
	cmp r3, r1
	addhi r3, r0, r1, lsr #2
	bhi _020C4DC8
	tst r3, #1
	beq _020C4C60
	tst r3, #2
	lsrne sb, r3, #2
	addne r0, sb, #1
	lsreq r0, r3, #2
	addeq sb, r0, #1
	lsl r0, r0, #1
	ldrh r3, [r8, r0]
	mov r0, r5
	add r1, r4, r7
	add r2, r4, r6
	mov sl, #0
	bl FUN_020C51A0
	lsl r1, sb, #1
	ldrh r3, [r8, r1]
	orr sl, sl, r0
	add r0, sp, #0x24
	add r1, r4, r7
	add r2, r4, r6
	bl FUN_020C51A0
	ldr r1, [r5]
	ldr r2, [sp, #0x24]
	add r1, r1, r1, lsl #1
	add r1, r2, r1
	str r1, [r5]
	ldr r1, [r5, #4]
	ldr r2, [sp, #0x28]
	add r1, r1, r1, lsl #1
	add r1, r2, r1
	str r1, [r5, #4]
	ldr r1, [r5, #8]
	ldr r2, [sp, #0x2c]
	add r1, r1, r1, lsl #1
	add r1, r2, r1
	str r1, [r5, #8]
	ldr r1, [r5, #0xc]
	ldr r2, [sp, #0x30]
	add r1, r1, r1, lsl #1
	add r1, r2, r1
	str r1, [r5, #0xc]
	ldr r1, [r5, #0x10]
	orr sl, sl, r0
	ldr r2, [sp, #0x34]
	add r0, r1, r1, lsl #1
	add r0, r2, r0
	str r0, [r5, #0x10]
	ldr r0, [r5, #0x14]
	ldr r1, [sp, #0x38]
	add r0, r0, r0, lsl #1
	add r2, r1, r0
	mov r0, r5
	mov r1, r5
	str r2, [r5, #0x14]
	bl FUN_020CCFE0
	add r0, r5, #0xc
	mov r1, r0
	bl FUN_020CCFE0
	cmp sl, #0
	bne _020C4C04
	ldr r0, [r5, #0x18]
	ldr r1, [sp, #0x3c]
	add r0, r0, r0, lsl #1
	add r0, r1, r0
	str r0, [r5, #0x18]
	ldr r0, [r5, #0x1c]
	ldr r1, [sp, #0x40]
	add r0, r0, r0, lsl #1
	add r0, r1, r0
	str r0, [r5, #0x1c]
	ldr r0, [r5, #0x20]
	ldr r1, [sp, #0x44]
	add r0, r0, r0, lsl #1
	add r2, r1, r0
	add r0, r5, #0x18
	mov r1, r0
	str r2, [r5, #0x20]
	bl FUN_020CCFE0
	add sp, sp, #0x48
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_020C4C04:
	ldr sb, [r5, #0x14]
	ldr r6, [r5, #4]
	ldr r4, [r5, #0x10]
	ldr r2, [r5, #8]
	mul r1, r6, sb
	mul r0, r2, r4
	sub r0, r1, r0
	ldr r7, [r5, #0xc]
	ldr r8, [r5]
	asr r3, r0, #0xc
	mul r1, r2, r7
	mul r0, r8, sb
	sub r2, r1, r0
	mul r1, r8, r4
	mul r0, r6, r7
	sub r0, r1, r0
	str r3, [r5, #0x18]
	asr r1, r2, #0xc
	str r1, [r5, #0x1c]
	asr r0, r0, #0xc
	add sp, sp, #0x48
	str r0, [r5, #0x20]
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_020C4C60:
	lsr sb, r3, #2
	b _020C4C70
_020C4C68:
	lsr r3, r3, #2
	b _020C4DC8
_020C4C70:
	lsl r0, sb, #1
	ldrh r3, [r8, r0]
	mov r0, r5
	add r1, r4, r7
	add r2, r4, r6
	bl FUN_020C51A0
	add r1, r8, sb, lsl #1
	ldrh r3, [r1, #2]
	orr r8, r0, #0
	add r0, sp, #0
	add r1, r4, r7
	add r2, r4, r6
	bl FUN_020C51A0
	ldr r2, [r5]
	ldr r1, [sp]
	orr r8, r8, r0
	add r0, r2, r1
	str r0, [r5]
	ldr r2, [r5, #4]
	ldr r1, [sp, #4]
	mov r0, r5
	add r1, r2, r1
	str r1, [r5, #4]
	ldr r3, [r5, #8]
	ldr r2, [sp, #8]
	mov r1, r5
	add r2, r3, r2
	str r2, [r5, #8]
	ldr r3, [r5, #0xc]
	ldr r2, [sp, #0xc]
	add r2, r3, r2
	str r2, [r5, #0xc]
	ldr r3, [r5, #0x10]
	ldr r2, [sp, #0x10]
	add r2, r3, r2
	str r2, [r5, #0x10]
	ldr r3, [r5, #0x14]
	ldr r2, [sp, #0x14]
	add r2, r3, r2
	str r2, [r5, #0x14]
	bl FUN_020CCFE0
	add r0, r5, #0xc
	mov r1, r0
	bl FUN_020CCFE0
	cmp r8, #0
	bne _020C4D6C
	ldr r2, [r5, #0x18]
	ldr r1, [sp, #0x18]
	add r0, r5, #0x18
	add r1, r2, r1
	str r1, [r5, #0x18]
	ldr r3, [r5, #0x1c]
	ldr r2, [sp, #0x1c]
	mov r1, r0
	add r2, r3, r2
	str r2, [r5, #0x1c]
	ldr r3, [r5, #0x20]
	ldr r2, [sp, #0x20]
	add r2, r3, r2
	str r2, [r5, #0x20]
	bl FUN_020CCFE0
	add sp, sp, #0x48
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_020C4D6C:
	ldr sb, [r5, #0x14]
	ldr r6, [r5, #4]
	ldr r4, [r5, #0x10]
	ldr r2, [r5, #8]
	mul r1, r6, sb
	mul r0, r2, r4
	sub r0, r1, r0
	ldr r7, [r5, #0xc]
	ldr r8, [r5]
	asr r3, r0, #0xc
	mul r1, r2, r7
	mul r0, r8, sb
	sub r2, r1, r0
	mul r1, r8, r4
	mul r0, r6, r7
	sub r0, r1, r0
	str r3, [r5, #0x18]
	asr r1, r2, #0xc
	str r1, [r5, #0x1c]
	asr r0, r0, #0xc
	add sp, sp, #0x48
	str r0, [r5, #0x20]
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_020C4DC8:
	lsl r0, r3, #1
	ldrh r3, [r8, r0]
	mov r0, r5
	add r1, r4, r7
	add r2, r4, r6
	bl FUN_020C51A0
	cmp r0, #0
	beq _020C4E44
	ldr sb, [r5, #0x14]
	ldr r6, [r5, #4]
	ldr r4, [r5, #0x10]
	ldr r2, [r5, #8]
	mul r1, r6, sb
	mul r0, r2, r4
	sub r0, r1, r0
	ldr r7, [r5, #0xc]
	ldr r8, [r5]
	asr r3, r0, #0xc
	mul r1, r2, r7
	mul r0, r8, sb
	sub r2, r1, r0
	mul r1, r8, r4
	mul r0, r6, r7
	sub r0, r1, r0
	str r3, [r5, #0x18]
	asr r1, r2, #0xc
	str r1, [r5, #0x1c]
	asr r0, r0, #0xc
	add sp, sp, #0x48
	str r0, [r5, #0x20]
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_020C4E44:
	add r0, r5, #0x18
	mov r1, r0
	bl FUN_020CCFE0
	add sp, sp, #0x48
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0
_020C4E58: .4byte 0x1FFF0000
	arm_func_end FUN_020C4A44

	arm_func_start FUN_020C4E5C
FUN_020C4E5C: @ 0x020C4E5C
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x48
	mov sb, r3
	ldrh r3, [sb, #4]
	ldr r4, [r2, #4]
	mov sl, r0
	sub r0, r3, #1
	cmp r0, r1, asr #12
	add r8, sb, r4
	asr r0, r1, #0xc
	ldr r4, [sb, #0xc]
	ldr fp, [sb, #0x10]
	ldr r3, [r2]
	bne _020C4F50
	tst r3, #0xc0000000
	beq _020C4EB0
	tst r3, #0x40000000
	andne r2, r0, #1
	addne r0, r2, r0, lsr #1
	andeq r2, r0, #3
	addeq r0, r2, r0, lsr #2
_020C4EB0:
	ldr r2, [sb, #8]
	tst r2, #2
	movne r5, #0
	bne _020C4FC4
	lsl r0, r0, #1
	ldrh r3, [r8, r0]
	mov r0, sl
	add r1, sb, r4
	add r2, sb, fp
	bl FUN_020C51A0
	cmp r0, #0
	beq _020C4F3C
	ldr r8, [sl, #0x14]
	ldr r5, [sl, #4]
	ldr r4, [sl, #0x10]
	ldr r2, [sl, #8]
	mul r1, r5, r8
	mul r0, r2, r4
	sub r0, r1, r0
	ldr r6, [sl, #0xc]
	ldr r7, [sl]
	asr r3, r0, #0xc
	mul r1, r2, r6
	mul r0, r7, r8
	sub r2, r1, r0
	mul r1, r7, r4
	mul r0, r5, r6
	sub r0, r1, r0
	str r3, [sl, #0x18]
	asr r1, r2, #0xc
	str r1, [sl, #0x1c]
	asr r0, r0, #0xc
	add sp, sp, #0x48
	str r0, [sl, #0x20]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020C4F3C:
	add r0, sl, #0x18
	mov r1, r0
	bl FUN_020CCFE0
	add sp, sp, #0x48
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020C4F50:
	tst r3, #0xc0000000
	beq _020C4FC0
	ldr r2, _020C5194 @ =0x1FFF0000
	tst r3, #0x40000000
	and r3, r3, r2
	lsr r3, r3, #0x10
	beq _020C4F90
	cmp r0, r3
	lsrhs r0, r3, #1
	addhs r5, r0, #1
	bhs _020C4FC4
	lsr r0, r0, #1
	add r5, r0, #1
	and r6, r1, r2, lsr #16
	mov r7, #2
	b _020C4FD0
_020C4F90:
	cmp r0, r3
	blo _020C4FA8
	and r2, r0, #3
	add r0, r2, r0, lsr #2
	add r5, r0, #1
	b _020C4FC4
_020C4FA8:
	ldr r2, _020C5198 @ =0x00003FFF
	lsr r0, r0, #2
	add r5, r0, #1
	and r6, r1, r2
	mov r7, #4
	b _020C4FD0
_020C4FC0:
	add r5, r0, #1
_020C4FC4:
	ldr r2, _020C519C @ =0x00000FFF
	mov r7, #1
	and r6, r1, r2
_020C4FD0:
	lsl r0, r0, #1
	ldrh r3, [r8, r0]
	add r0, sp, #0x24
	add r1, sb, r4
	add r2, sb, fp
	bl FUN_020C51A0
	lsl r1, r5, #1
	ldrh r3, [r8, r1]
	orr r5, r0, #0
	add r0, sp, #0
	add r1, sb, r4
	add r2, sb, fp
	bl FUN_020C51A0
	ldr r3, [sp, #0x24]
	ldr r1, [sp]
	mul r2, r3, r7
	sub r1, r1, r3
	mul r1, r6, r1
	add r1, r2, r1, asr #12
	str r1, [sl]
	ldr r3, [sp, #0x28]
	ldr r1, [sp, #4]
	mul r2, r3, r7
	sub r1, r1, r3
	mul r1, r6, r1
	add r1, r2, r1, asr #12
	str r1, [sl, #4]
	ldr r3, [sp, #0x2c]
	ldr r1, [sp, #8]
	mul r2, r3, r7
	sub r1, r1, r3
	mul r1, r6, r1
	add r1, r2, r1, asr #12
	str r1, [sl, #8]
	ldr r3, [sp, #0x30]
	ldr r1, [sp, #0xc]
	mul r2, r3, r7
	sub r1, r1, r3
	mul r1, r6, r1
	add r1, r2, r1, asr #12
	str r1, [sl, #0xc]
	ldr r2, [sp, #0x34]
	ldr r1, [sp, #0x10]
	orr r5, r5, r0
	sub r0, r1, r2
	mul r1, r2, r7
	mul r0, r6, r0
	add r0, r1, r0, asr #12
	str r0, [sl, #0x10]
	ldr r2, [sp, #0x38]
	ldr r0, [sp, #0x14]
	mul r1, r2, r7
	sub r0, r0, r2
	mul r0, r6, r0
	add r2, r1, r0, asr #12
	mov r0, sl
	mov r1, sl
	str r2, [sl, #0x14]
	bl FUN_020CCFE0
	add r0, sl, #0xc
	mov r1, r0
	bl FUN_020CCFE0
	cmp r5, #0
	bne _020C5138
	ldr r2, [sp, #0x3c]
	ldr r0, [sp, #0x18]
	mul r1, r2, r7
	sub r0, r0, r2
	mul r0, r6, r0
	add r0, r1, r0, asr #12
	str r0, [sl, #0x18]
	ldr r2, [sp, #0x40]
	ldr r0, [sp, #0x1c]
	mul r1, r2, r7
	sub r0, r0, r2
	mul r0, r6, r0
	add r0, r1, r0, asr #12
	str r0, [sl, #0x1c]
	ldr r2, [sp, #0x44]
	ldr r0, [sp, #0x20]
	mul r1, r2, r7
	sub r0, r0, r2
	mul r0, r6, r0
	add r2, r1, r0, asr #12
	add r0, sl, #0x18
	mov r1, r0
	str r2, [sl, #0x20]
	bl FUN_020CCFE0
	add sp, sp, #0x48
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020C5138:
	ldr r8, [sl, #0x14]
	ldr r5, [sl, #4]
	ldr r7, [sl]
	ldr r4, [sl, #0x10]
	ldr r2, [sl, #8]
	ldr r6, [sl, #0xc]
	mul r1, r5, r8
	mul r0, r2, r4
	sub r0, r1, r0
	asr r3, r0, #0xc
	mul r1, r2, r6
	mul r0, r7, r8
	sub r2, r1, r0
	mul r1, r7, r4
	mul r0, r5, r6
	sub r0, r1, r0
	str r3, [sl, #0x18]
	asr r1, r2, #0xc
	str r1, [sl, #0x1c]
	asr r0, r0, #0xc
	str r0, [sl, #0x20]
	add sp, sp, #0x48
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020C5194: .4byte 0x1FFF0000
_020C5198: .4byte 0x00003FFF
_020C519C: .4byte 0x00000FFF
	arm_func_end FUN_020C4E5C

	arm_func_start FUN_020C51A0
FUN_020C51A0: @ 0x020C51A0
	push {r3, r4, r5, lr}
	tst r3, #0x8000
	beq _020C5258
	mov r4, #0
	str r4, [r0, #0x20]
	str r4, [r0, #0x1c]
	str r4, [r0, #0x18]
	str r4, [r0, #0x14]
	str r4, [r0, #0x10]
	ldr r2, _020C52F8 @ =0x00007FFF
	str r4, [r0, #0xc]
	str r4, [r0, #8]
	and r2, r3, r2
	add r3, r2, r2, lsl #1
	str r4, [r0, #4]
	add r2, r1, r3, lsl #1
	str r4, [r0]
	lsl r3, r3, #1
	ldrsh r1, [r1, r3]
	ldrsh ip, [r2, #2]
	ldrsh r3, [r2, #4]
	tst r1, #0x10
	subne r5, r4, #0x1000
	ldr r4, _020C52FC @ =0x021094B8
	and r1, r1, #0xf
	ldr lr, _020C5300 @ =0x021094B9
	moveq r5, #0x1000
	ldrb r4, [r4, r1, lsl #2]
	str r5, [r0, r1, lsl #2]
	ldrb lr, [lr, r1, lsl #2]
	str ip, [r0, r4, lsl #2]
	str r3, [r0, lr, lsl #2]
	ldrsh lr, [r2]
	tst lr, #0x20
	ldr lr, _020C5304 @ =0x021094BA
	rsbne r3, r3, #0
	ldrb lr, [lr, r1, lsl #2]
	str r3, [r0, lr, lsl #2]
	ldrsh r2, [r2]
	tst r2, #0x40
	ldr r2, _020C5308 @ =0x021094BB
	rsbne ip, ip, #0
	ldrb r1, [r2, r1, lsl #2]
	str ip, [r0, r1, lsl #2]
	mov r0, #0
	pop {r3, r4, r5, pc}
_020C5258:
	ldr r1, _020C52F8 @ =0x00007FFF
	and r1, r3, r1
	add r3, r1, r1, lsl #2
	add r1, r2, r3, lsl #1
	ldrsh lr, [r1, #8]
	lsl ip, r3, #1
	asr r3, lr, #3
	str r3, [r0, #0x10]
	ldrsh ip, [r2, ip]
	and r2, lr, #7
	lsl r2, r2, #0x10
	asr r3, ip, #3
	str r3, [r0]
	ldrsh r3, [r1, #2]
	and ip, ip, #7
	orr lr, ip, r2, asr #13
	asr r2, r3, #3
	str r2, [r0, #4]
	ldrsh ip, [r1, #4]
	lsl r2, lr, #0x10
	and lr, r3, #7
	asr r3, ip, #3
	str r3, [r0, #8]
	ldrsh r3, [r1, #6]
	orr r1, lr, r2, asr #13
	lsl r1, r1, #0x10
	and r2, ip, #7
	orr r1, r2, r1, asr #13
	lsl r1, r1, #0x10
	and r2, r3, #7
	orr r1, r2, r1, asr #13
	lsl r1, r1, #0x10
	asr r1, r1, #0x10
	asr r2, r3, #3
	lsl r1, r1, #0x13
	str r2, [r0, #0xc]
	asr r1, r1, #0x13
	str r1, [r0, #0x14]
	mov r0, #1
	pop {r3, r4, r5, pc}
	.align 2, 0
_020C52F8: .4byte 0x00007FFF
_020C52FC: .4byte 0x021094B8
_020C5300: .4byte 0x021094B9
_020C5304: .4byte 0x021094BA
_020C5308: .4byte 0x021094BB
	arm_func_end FUN_020C51A0

	arm_func_start FUN_020C530C
FUN_020C530C: @ 0x020C530C
	tst r1, #0x20000000
	lslne r0, r1, #0x10
	lsrne r0, r0, #0x10
	bxne lr
	lsl r3, r1, #0x10
	tst r1, #0xc0000000
	add r0, r0, r3, lsr #16
	lsleq r1, r2, #1
	ldrheq r0, [r0, r1]
	bxeq lr
	ldr r3, _020C546C @ =0x1FFF0000
	tst r1, #0x40000000
	and r1, r1, r3
	lsr r3, r1, #0x10
	beq _020C537C
	tst r2, #1
	beq _020C5370
	cmp r2, r3
	bls _020C5368
	bic r1, r3, #1
	add r0, r0, r1
	ldrh r0, [r0, #2]
	bx lr
_020C5368:
	lsr r1, r2, #1
	b _020C5424
_020C5370:
	bic r1, r2, #1
	ldrh r0, [r0, r1]
	bx lr
_020C537C:
	ands r1, r2, #3
	beq _020C5414
	cmp r2, r3
	bls _020C53A0
	lsr r2, r3, #2
	lsl r1, r1, #1
	add r0, r0, r2, lsl #1
	ldrh r0, [r1, r0]
	bx lr
_020C53A0:
	tst r2, #1
	beq _020C540C
	tst r2, #2
	lsrne r3, r2, #2
	addne r1, r3, #1
	lsreq r1, r2, #2
	lsl r2, r1, #1
	addeq r3, r1, #1
	lsl r1, r3, #1
	ldrh r2, [r0, r2]
	ldrh ip, [r0, r1]
	ldr r0, _020C5470 @ =0x00007C1F
	and r1, r2, #0x3e0
	and r3, r2, r0
	add r2, r1, r1, lsl #1
	and r1, ip, #0x3e0
	add r1, r2, r1
	add r3, r3, r3, lsl #1
	and r2, ip, r0
	add r2, r3, r2
	lsr r1, r1, #2
	and r2, r0, r2, lsr #2
	and r0, r1, #0x3e0
	orr r0, r2, r0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	bx lr
_020C540C:
	lsr r1, r2, #2
	b _020C5424
_020C5414:
	lsr r1, r2, #2
	lsl r1, r1, #1
	ldrh r0, [r0, r1]
	bx lr
_020C5424:
	lsl r2, r1, #1
	add r1, r0, r1, lsl #1
	ldrh r3, [r0, r2]
	ldrh ip, [r1, #2]
	ldr r0, _020C5470 @ =0x00007C1F
	and r2, r3, #0x3e0
	and r1, ip, #0x3e0
	add r1, r2, r1
	lsr r1, r1, #1
	and r3, r3, r0
	and r2, ip, r0
	add r2, r3, r2
	and r2, r0, r2, lsr #1
	and r0, r1, #0x3e0
	orr r0, r2, r0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	bx lr
	.align 2, 0
_020C546C: .4byte 0x1FFF0000
_020C5470: .4byte 0x00007C1F
	arm_func_end FUN_020C530C

	arm_func_start FUN_020C5474
FUN_020C5474: @ 0x020C5474
	tst r1, #0x20000000
	lslne r0, r1, #0x10
	lsrne r0, r0, #0x10
	bxne lr
	lsl r3, r1, #0x10
	add r3, r0, r3, lsr #16
	tst r1, #0xc0000000
	ldrbeq r0, [r3, r2]
	bxeq lr
	ldr r0, _020C555C @ =0x1FFF0000
	tst r1, #0x40000000
	and r0, r1, r0
	lsr r0, r0, #0x10
	beq _020C54E8
	tst r2, #1
	beq _020C54E0
	cmp r2, r0
	addhi r0, r3, r0, lsr #1
	ldrbhi r0, [r0, #1]
	bxhi lr
	add r0, r3, r2, lsr #1
	ldrb r1, [r3, r2, lsr #1]
	ldrb r0, [r0, #1]
	add r0, r1, r0
	lsl r0, r0, #0xf
	lsr r0, r0, #0x10
	bx lr
_020C54E0:
	ldrb r0, [r3, r2, lsr #1]
	bx lr
_020C54E8:
	ands r1, r2, #3
	beq _020C5554
	cmp r2, r0
	addhi r0, r3, r0, lsr #2
	ldrbhi r0, [r1, r0]
	bxhi lr
	tst r2, #1
	beq _020C5538
	tst r2, #2
	lsrne r2, r2, #2
	addne r0, r2, #1
	lsreq r0, r2, #2
	ldrb r1, [r3, r0]
	addeq r2, r0, #1
	ldrb r0, [r3, r2]
	add r1, r1, r1, lsl #1
	add r0, r1, r0
	lsl r0, r0, #0xe
	lsr r0, r0, #0x10
	bx lr
_020C5538:
	add r0, r3, r2, lsr #2
	ldrb r1, [r3, r2, lsr #2]
	ldrb r0, [r0, #1]
	add r0, r1, r0
	lsl r0, r0, #0xf
	lsr r0, r0, #0x10
	bx lr
_020C5554:
	ldrb r0, [r3, r2, lsr #2]
	bx lr
	.align 2, 0
_020C555C: .4byte 0x1FFF0000
	arm_func_end FUN_020C5474

	arm_func_start FUN_020C5560
FUN_020C5560: @ 0x020C5560
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sl, r0
	cmp r2, #0
	ldrne r0, [r2, #8]
	mov sb, r1
	cmpne r0, #0
	addne r7, r2, r0
	ldr r0, _020C5630 @ =_02110A14
	add r1, sl, #0x1a
	ldr r3, [r0]
	mov r0, #0
	str r3, [sl, #0xc]
	ldrb r2, [r2, #0x18]
	moveq r7, #0
	strb r2, [sl, #0x19]
	lsl r2, r2, #1
	bl FUN_020D4790
	ldrb r0, [sb, #9]
	mov r6, #0
	cmp r0, #0
	popls {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r8, r6
	add r5, sb, #8
	mov fp, r6
	mvn r4, #0
_020C55C4:
	cmp r5, #0
	beq _020C55F0
	ldrb r0, [sb, #9]
	cmp r6, r0
	bhs _020C55F0
	ldrh r0, [sb, #0xe]
	add r1, r5, r0
	ldrh r0, [r1, #2]
	add r0, r1, r0
	add r1, r0, r8
	b _020C55F4
_020C55F0:
	mov r1, fp
_020C55F4:
	cmp r7, #0
	moveq r0, r4
	beq _020C5608
	add r0, r7, #4
	bl FUN_020C39D8
_020C5608:
	cmp r0, #0
	orrge r1, r6, #0x100
	addge r0, sl, r0, lsl #1
	strhge r1, [r0, #0x1a]
	ldrb r0, [sb, #9]
	add r6, r6, #1
	add r8, r8, #0x10
	cmp r6, r0
	blo _020C55C4
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020C5630: .4byte _02110A14
	arm_func_end FUN_020C5560

	arm_func_start FUN_020C5634
FUN_020C5634: @ 0x020C5634
	push {r4, r5, r6, r7, r8, lr}
	ldr r4, [r1, #8]
	ldr r1, [r1]
	mov r7, r0
	asr r5, r1, #0xc
	adds r3, r4, #8
	beq _020C567C
	ldrb r1, [r4, #9]
	lsl r0, r2, #0x10
	lsr r2, r0, #0x10
	cmp r1, r0, lsr #16
	bls _020C567C
	ldrh r1, [r4, #0xe]
	ldrh r0, [r3, r1]
	add r1, r3, r1
	add r1, r1, #4
	mla r6, r0, r2, r1
	b _020C5680
_020C567C:
	mov r6, #0
_020C5680:
	ldr r1, [r6]
	mov r0, r4
	mov r2, r5
	bl FUN_020C530C
	mov r8, r0
	ldr r1, [r6, #4]
	mov r0, r4
	mov r2, r5
	bl FUN_020C530C
	ldr r1, [r7, #4]
	orr r0, r8, r0, lsl #16
	tst r1, #0x8000
	movne r1, #1
	moveq r1, #0
	orr r0, r0, r1, lsl #15
	str r0, [r7, #4]
	ldr r1, [r6, #0xc]
	mov r0, r4
	mov r2, r5
	bl FUN_020C530C
	mov r8, r0
	ldr r1, [r6, #8]
	mov r0, r4
	mov r2, r5
	bl FUN_020C530C
	ldr r1, [r7, #8]
	orr r0, r0, r8, lsl #16
	tst r1, #0x8000
	movne r1, #1
	moveq r1, #0
	orr r0, r0, r1, lsl #15
	str r0, [r7, #8]
	ldr r1, [r6, #0x10]
	mov r0, r4
	mov r2, r5
	bl FUN_020C5474
	ldr r1, [r7, #0xc]
	bic r1, r1, #0x1f0000
	orr r0, r1, r0, lsl #16
	str r0, [r7, #0xc]
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020C5634

	arm_func_start FUN_020C5724
FUN_020C5724: @ 0x020C5724
	tst r1, #0x20000000
	movne r0, r2
	bxne lr
	tst r1, #0xc0000000
	add r0, r0, r2
	beq _020C57E0
	lsl r2, r1, #0x10
	tst r1, #0x40000000
	lsr ip, r2, #0x10
	beq _020C5774
	tst r3, #1
	beq _020C576C
	cmp r3, ip
	lsrhi r2, ip, #1
	addhi r3, r2, #1
	bhi _020C57E0
	lsr r3, r3, #1
	b _020C57F4
_020C576C:
	lsr r3, r3, #1
	b _020C57E0
_020C5774:
	ands r2, r3, #3
	beq _020C57DC
	cmp r3, ip
	addhi r3, r2, ip, lsr #2
	bhi _020C57E0
	tst r3, #1
	beq _020C57D4
	tst r3, #2
	lsrne r3, r3, #2
	addne r2, r3, #1
	lsreq r2, r3, #2
	addeq r3, r2, #1
	tst r1, #0x10000000
	ldreq r2, [r0, r2, lsl #2]
	ldreq r1, [r0, r3, lsl #2]
	beq _020C57C4
	lsl r2, r2, #1
	lsl r1, r3, #1
	ldrsh r2, [r0, r2]
	ldrsh r1, [r0, r1]
_020C57C4:
	add r0, r2, r2, lsl #1
	add r0, r0, r1
	asr r0, r0, #2
	bx lr
_020C57D4:
	lsr r3, r3, #2
	b _020C57F4
_020C57DC:
	lsr r3, r3, #2
_020C57E0:
	tst r1, #0x10000000
	lslne r1, r3, #1
	ldrshne r0, [r0, r1]
	ldreq r0, [r0, r3, lsl #2]
	bx lr
_020C57F4:
	tst r1, #0x10000000
	addeq r1, r0, r3, lsl #2
	ldreq r0, [r0, r3, lsl #2]
	ldreq r1, [r1, #4]
	beq _020C5818
	add r1, r0, r3, lsl #1
	lsl r2, r3, #1
	ldrsh r0, [r0, r2]
	ldrsh r1, [r1, #2]
_020C5818:
	add r0, r0, r1
	asr r0, r0, #1
	bx lr
	arm_func_end FUN_020C5724

	arm_func_start FUN_020C5824
FUN_020C5824: @ 0x020C5824
	tst r1, #0x20000000
	movne r0, r2
	bxne lr
	tst r1, #0xc0000000
	add r0, r0, r2
	beq _020C58F4
	lsl r2, r1, #0x10
	tst r1, #0x40000000
	lsr r2, r2, #0x10
	beq _020C5874
	tst r3, #1
	beq _020C586C
	cmp r3, r2
	lsrhi r1, r2, #1
	addhi r3, r1, #1
	bhi _020C58F4
	lsr r1, r3, #1
	b _020C58FC
_020C586C:
	lsr r3, r3, #1
	b _020C58F4
_020C5874:
	ands r1, r3, #3
	beq _020C58F0
	cmp r3, r2
	addhi r3, r1, r2, lsr #2
	bhi _020C58F4
	tst r3, #1
	beq _020C58E8
	tst r3, #2
	lsrne r3, r3, #2
	addne r1, r3, #1
	lsreq r1, r3, #2
	add r2, r0, r1, lsl #2
	lsl ip, r1, #2
	addeq r3, r1, #1
	add r1, r0, r3, lsl #2
	ldrsh r2, [r2, #2]
	lsl r3, r3, #2
	ldrsh ip, [r0, ip]
	ldrsh r1, [r1, #2]
	ldrsh r3, [r0, r3]
	add r2, r2, r2, lsl #1
	add r0, r2, r1
	add ip, ip, ip, lsl #1
	asr r1, r0, #2
	add r2, ip, r3
	lsl r0, r2, #0xe
	lsl r1, r1, #0x10
	orr r0, r1, r0, lsr #16
	bx lr
_020C58E8:
	lsr r1, r3, #2
	b _020C58FC
_020C58F0:
	lsr r3, r3, #2
_020C58F4:
	ldr r0, [r0, r3, lsl #2]
	bx lr
_020C58FC:
	add r3, r0, r1, lsl #2
	lsl ip, r1, #2
	ldrsh r2, [r3, #2]
	ldrsh r1, [r3, #6]
	ldrsh ip, [r0, ip]
	ldrsh r3, [r3, #4]
	add r0, r2, r1
	asr r1, r0, #1
	add r0, ip, r3
	lsl r0, r0, #0xf
	lsl r1, r1, #0x10
	orr r0, r1, r0, lsr #16
	bx lr
	arm_func_end FUN_020C5824

	arm_func_start FUN_020C5930
FUN_020C5930: @ 0x020C5930
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r7, r0
	mov r6, r2
	mov r5, r3
	adds r3, r7, #8
	beq _020C596C
	ldrb r0, [r7, #9]
	cmp r1, r0
	bhs _020C596C
	ldrh r2, [r7, #0xe]
	ldrh r0, [r3, r2]
	add r2, r3, r2
	add r2, r2, #4
	mla r4, r0, r1, r2
	b _020C5970
_020C596C:
	mov r4, #0
_020C5970:
	ldr r1, [r4, #0x18]
	ldr r2, [r4, #0x1c]
	mov r0, r7
	mov r3, r6
	ldr r8, [r5]
	bl FUN_020C5724
	mov sb, r0
	ldr r1, [r4, #0x20]
	ldr r2, [r4, #0x24]
	mov r0, r7
	mov r3, r6
	bl FUN_020C5724
	cmp sb, #0
	cmpeq r0, #0
	strne sb, [r5, #0x24]
	strne r0, [r5, #0x28]
	orreq r8, r8, #4
	ldr r1, [r4, #0x10]
	ldr r2, [r4, #0x14]
	bicne r8, r8, #4
	mov r0, r7
	mov r3, r6
	bl FUN_020C5824
	cmp r0, #0x10000000
	orreq r8, r8, #2
	beq _020C59E8
	strh r0, [r5, #0x20]
	lsr r0, r0, #0x10
	strh r0, [r5, #0x22]
	bic r8, r8, #2
_020C59E8:
	mov r0, r7
	mov r3, r6
	ldm r4, {r1, r2}
	bl FUN_020C5724
	mov sb, r0
	ldr r1, [r4, #8]
	ldr r2, [r4, #0xc]
	mov r0, r7
	mov r3, r6
	bl FUN_020C5724
	cmp sb, #0x1000
	cmpeq r0, #0x1000
	orreq r8, r8, #1
	strne sb, [r5, #0x18]
	strne r0, [r5, #0x1c]
	bicne r8, r8, #1
	str r8, [r5]
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	arm_func_end FUN_020C5930

	arm_func_start FUN_020C5A30
FUN_020C5A30: @ 0x020C5A30
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sl, r0
	cmp r2, #0
	ldrne r0, [r2, #8]
	mov sb, r1
	cmpne r0, #0
	addne r7, r2, r0
	ldr r0, _020C5B00 @ =_02110A0C
	add r1, sl, #0x1a
	ldr r3, [r0]
	mov r0, #0
	str r3, [sl, #0xc]
	ldrb r2, [r2, #0x18]
	moveq r7, #0
	strb r2, [sl, #0x19]
	lsl r2, r2, #1
	bl FUN_020D4790
	ldrb r0, [sb, #9]
	mov r6, #0
	cmp r0, #0
	popls {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r8, r6
	add r5, sb, #8
	mov fp, r6
	mvn r4, #0
_020C5A94:
	cmp r5, #0
	beq _020C5AC0
	ldrb r0, [sb, #9]
	cmp r6, r0
	bhs _020C5AC0
	ldrh r0, [sb, #0xe]
	add r1, r5, r0
	ldrh r0, [r1, #2]
	add r0, r1, r0
	add r1, r0, r8
	b _020C5AC4
_020C5AC0:
	mov r1, fp
_020C5AC4:
	cmp r7, #0
	moveq r0, r4
	beq _020C5AD8
	add r0, r7, #4
	bl FUN_020C39D8
_020C5AD8:
	cmp r0, #0
	orrge r1, r6, #0x100
	addge r0, sl, r0, lsl #1
	strhge r1, [r0, #0x1a]
	ldrb r0, [sb, #9]
	add r6, r6, #1
	add r8, r8, #0x10
	cmp r6, r0
	blo _020C5A94
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020C5B00: .4byte _02110A0C
	arm_func_end FUN_020C5A30

	arm_func_start FUN_020C5B04
FUN_020C5B04: @ 0x020C5B04
	push {r4, lr}
	ldr ip, [r1]
	mov r4, r0
	lsl r2, r2, #0x10
	ldr r0, [r1, #8]
	lsr r1, r2, #0x10
	mov r3, r4
	asr r2, ip, #0xc
	bl FUN_020C5930
	ldr r0, [r4, #0x10]
	bic r0, r0, #0xc0000000
	orr r0, r0, #0x40000000
	str r0, [r4, #0x10]
	ldr r0, [r4]
	orr r0, r0, #8
	str r0, [r4]
	pop {r4, pc}
	arm_func_end FUN_020C5B04

	arm_func_start FUN_020C5B48
FUN_020C5B48: @ 0x020C5B48
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sl, r0
	cmp r2, #0
	ldrne r0, [r2, #8]
	mov sb, r1
	cmpne r0, #0
	addne r7, r2, r0
	ldr r0, _020C5C20 @ =_02110A10
	add r1, sl, #0x1a
	ldr r3, [r0]
	mov r0, #0
	str r3, [sl, #0xc]
	ldrb r2, [r2, #0x18]
	moveq r7, #0
	strb r2, [sl, #0x19]
	str sb, [sl, #8]
	ldrb r2, [sl, #0x19]
	lsl r2, r2, #1
	bl FUN_020D4790
	ldrb r0, [sb, #0xd]
	mov r6, #0
	cmp r0, #0
	popls {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r8, r6
	add r5, sb, #0xc
	mov fp, r6
	mvn r4, #0
_020C5BB4:
	cmp r5, #0
	beq _020C5BE0
	ldrb r0, [sb, #0xd]
	cmp r6, r0
	bhs _020C5BE0
	ldrh r0, [sb, #0x12]
	add r1, r5, r0
	ldrh r0, [r1, #2]
	add r0, r1, r0
	add r1, r0, r8
	b _020C5BE4
_020C5BE0:
	mov r1, fp
_020C5BE4:
	cmp r7, #0
	moveq r0, r4
	beq _020C5BF8
	add r0, r7, #4
	bl FUN_020C39D8
_020C5BF8:
	cmp r0, #0
	orrge r1, r6, #0x100
	addge r0, sl, r0, lsl #1
	strhge r1, [r0, #0x1a]
	ldrb r0, [sb, #0xd]
	add r6, r6, #1
	add r8, r8, #0x10
	cmp r6, r0
	blo _020C5BB4
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020C5C20: .4byte _02110A10
	arm_func_end FUN_020C5B48

	arm_func_start FUN_020C5C24
FUN_020C5C24: @ 0x020C5C24
	push {r3, r4, r5, lr}
	movs r5, r0
	mov r4, r2
	moveq r0, #0
	beq _020C5C40
	add r0, r5, #0x3c
	bl FUN_020C3818
_020C5C40:
	ldr r1, [r0]
	ldr r3, [r4, #0x10]
	and r1, r1, #0x1c000000
	cmp r1, #0x14000000
	ldrne r1, [r5, #8]
	ldr r2, _020C5CF4 @ =0x000007FF
	ldreq r1, [r5, #0x18]
	lsl r1, r1, #0x10
	lsr r1, r1, #0x10
	bic r5, r1, #0xe0000000
	ldr r1, _020C5CF8 @ =0xC00F0000
	and r3, r3, r1
	str r3, [r4, #0x10]
	ldr r1, [r0]
	add r1, r1, r5
	orr r1, r3, r1
	str r1, [r4, #0x10]
	ldr r1, [r0, #4]
	and r1, r1, r2
	strh r1, [r4, #0x2c]
	ldr r1, [r0, #4]
	and r1, r1, r2, lsl #11
	lsr r1, r1, #0xb
	strh r1, [r4, #0x2e]
	ldr r0, [r0, #4]
	ldrh r1, [r4, #0x2c]
	and r3, r0, r2
	and r0, r0, r2, lsl #11
	cmp r3, r1
	lsr r5, r0, #0xb
	moveq r0, #0x1000
	beq _020C5CCC
	lsl r0, r3, #0xc
	lsl r1, r1, #0xc
	bl FUN_020CCBA0
_020C5CCC:
	str r0, [r4, #0x30]
	ldrh r1, [r4, #0x2e]
	cmp r5, r1
	moveq r0, #0x1000
	beq _020C5CEC
	lsl r0, r5, #0xc
	lsl r1, r1, #0xc
	bl FUN_020CCBA0
_020C5CEC:
	str r0, [r4, #0x34]
	pop {r3, r4, r5, pc}
	.align 2, 0
_020C5CF4: .4byte 0x000007FF
_020C5CF8: .4byte 0xC00F0000
	arm_func_end FUN_020C5C24

	arm_func_start FUN_020C5CFC
FUN_020C5CFC: @ 0x020C5CFC
	push {r3, r4, r5, lr}
	movs r5, r0
	ldrhne r0, [r5, #0x34]
	mov r4, r2
	cmpne r0, #0
	moveq r0, #0
	beq _020C5D20
	add r0, r5, r0
	bl FUN_020C3818
_020C5D20:
	ldr r1, [r5, #0x2c]
	ldrh r2, [r0, #2]
	lsl r1, r1, #0x10
	lsr r1, r1, #0x10
	bic r1, r1, #0xe0000000
	lsl r1, r1, #0x10
	tst r2, #1
	lsr r1, r1, #0x10
	ldrh r0, [r0]
	bne _020C5D58
	lsl r0, r0, #0xf
	lsl r1, r1, #0xf
	lsr r0, r0, #0x10
	lsr r1, r1, #0x10
_020C5D58:
	add r0, r0, r1
	str r0, [r4, #0x14]
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020C5CFC

	arm_func_start FUN_020C5D64
FUN_020C5D64: @ 0x020C5D64
	push {r3, r4, r5, r6, r7, lr}
	mov r6, r1
	ldr r3, [r6]
	ldr r5, [r6, #8]
	lsl r1, r2, #0x10
	lsl r2, r3, #4
	mov r7, r0
	mov r0, r5
	lsr r1, r1, #0x10
	lsr r2, r2, #0x10
	bl FUN_020C3C44
	mov r4, r0
	ldrb r1, [r4, #2]
	mov r0, r5
	bl FUN_020C3BEC
	mov r1, r0
	ldr r0, [r6, #0x14]
	mov r2, r7
	bl FUN_020C5C24
	ldrb r1, [r4, #3]
	cmp r1, #0xff
	popeq {r3, r4, r5, r6, r7, pc}
	mov r0, r5
	bl FUN_020C3C18
	mov r1, r0
	ldr r0, [r6, #0x14]
	mov r2, r7
	bl FUN_020C5CFC
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020C5D64

	arm_func_start FUN_020C5DD8
FUN_020C5DD8: @ 0x020C5DD8
	ldr r3, _020C5E20 @ =_02110A04
	mov ip, #0
	ldr r3, [r3]
	str r3, [r0, #0xc]
	ldrb r2, [r2, #0x17]
	strb r2, [r0, #0x19]
	str r1, [r0, #8]
	ldrb r1, [r0, #0x19]
	cmp r1, #0
	bxls lr
_020C5E00:
	orr r2, ip, #0x100
	add r1, r0, ip, lsl #1
	strh r2, [r1, #0x1a]
	ldrb r1, [r0, #0x19]
	add ip, ip, #1
	cmp ip, r1
	blo _020C5E00
	bx lr
	.align 2, 0
_020C5E20: .4byte _02110A04
	arm_func_end FUN_020C5DD8

	arm_func_start FUN_020C5E24
FUN_020C5E24: @ 0x020C5E24
	push {r3, lr}
	ldr lr, [r1, #8]
	ldr r3, [r1]
	ldrh r1, [lr, #6]
	asr ip, r3, #0xc
	mov r3, #1
	mla r2, ip, r1, r2
	lsr r1, r2, #5
	add r1, lr, r1, lsl #2
	ldr r1, [r1, #0xc]
	and r2, r2, #0x1f
	and r1, r1, r3, lsl r2
	str r1, [r0]
	pop {r3, pc}
	arm_func_end FUN_020C5E24

	arm_func_start FUN_020C5E5C
FUN_020C5E5C: @ 0x020C5E5C
	push {r4, lr}
	mov r4, r0
	ldr r0, [r4]
	tst r0, #4
	bne _020C5EA0
	tst r0, #2
	bne _020C5E8C
	add r1, r4, #0x28
	mov r0, #0x19
	mov r2, #0xc
	bl FUN_020C2528
	b _020C5EB8
_020C5E8C:
	add r1, r4, #0x4c
	mov r0, #0x1c
	mov r2, #3
	bl FUN_020C2528
	b _020C5EB8
_020C5EA0:
	tst r0, #2
	bne _020C5EB8
	add r1, r4, #0x28
	mov r0, #0x1a
	mov r2, #9
	bl FUN_020C2528
_020C5EB8:
	ldr r0, [r4]
	tst r0, #1
	popne {r4, pc}
	add r1, r4, #4
	mov r0, #0x1b
	mov r2, #3
	bl FUN_020C2528
	pop {r4, pc}
	arm_func_end FUN_020C5E5C

	arm_func_start FUN_020C5ED8
FUN_020C5ED8: @ 0x020C5ED8
	tst r3, #4
	beq _020C5EF0
	ldr r1, [r0]
	orr r1, r1, #1
	str r1, [r0]
	b _020C5F08
_020C5EF0:
	ldr r2, [r1]
	str r2, [r0, #4]
	ldr r2, [r1, #4]
	str r2, [r0, #8]
	ldr r1, [r1, #8]
	str r1, [r0, #0xc]
_020C5F08:
	ldr r1, [r0]
	orr r1, r1, #0x18
	str r1, [r0]
	bx lr
	arm_func_end FUN_020C5ED8

	arm_func_start FUN_020C5F18
FUN_020C5F18: @ 0x020C5F18
	push {r3, r4, r5, lr}
	mov r5, r0
	ldr r0, [r5]
	mov r4, #0
	tst r0, #4
	moveq r4, #1
	tst r0, #0x20
	beq _020C5F6C
	tst r0, #8
	bne _020C5F6C
	cmp r4, #0
	beq _020C5F5C
	add r1, r5, #0x4c
	mov r0, #0x1c
	mov r2, #3
	bl FUN_020C2528
	mov r4, #0
_020C5F5C:
	add r1, r5, #0x10
	mov r0, #0x1b
	mov r2, #3
	bl FUN_020C2528
_020C5F6C:
	ldr r0, [r5]
	tst r0, #2
	bne _020C5FA4
	cmp r4, #0
	add r1, r5, #0x28
	beq _020C5F94
	mov r0, #0x19
	mov r2, #0xc
	bl FUN_020C2528
	b _020C5FBC
_020C5F94:
	mov r0, #0x1a
	mov r2, #9
	bl FUN_020C2528
	b _020C5FBC
_020C5FA4:
	cmp r4, #0
	beq _020C5FBC
	add r1, r5, #0x4c
	mov r0, #0x1c
	mov r2, #3
	bl FUN_020C2528
_020C5FBC:
	ldr r0, [r5]
	tst r0, #1
	popne {r3, r4, r5, pc}
	add r1, r5, #4
	mov r0, #0x1b
	mov r2, #3
	bl FUN_020C2528
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020C5F18

	arm_func_start FUN_020C5FDC
FUN_020C5FDC: @ 0x020C5FDC
	push {r4, r5, r6, r7, r8, lr}
	mov ip, r0
	tst r3, #4
	ldrb r0, [r2, #3]
	beq _020C6030
	ldr r1, [ip]
	tst r0, #2
	orr r1, r1, #1
	str r1, [ip]
	beq _020C60A8
	ldr r1, _020C611C @ =0x021DA700
	ldrb r7, [r2, #1]
	ldr r1, [r1]
	mov r3, #1
	add r6, r1, #0xc4
	lsr r5, r7, #5
	ldr r4, [r6, r5, lsl #2]
	and r1, r7, #0x1f
	orr r1, r4, r3, lsl r1
	str r1, [r6, r5, lsl #2]
	b _020C60A8
_020C6030:
	ldr r3, [r1]
	tst r0, #2
	str r3, [ip, #4]
	ldr r3, [r1, #4]
	str r3, [ip, #8]
	ldr r3, [r1, #8]
	str r3, [ip, #0xc]
	beq _020C60A8
	ldr r3, _020C611C @ =0x021DA700
	ldrb r8, [r2, #1]
	ldr r4, [r3]
	mov r3, #0x18
	add r7, r4, #0xc4
	lsr r6, r8, #5
	and r4, r8, #0x1f
	mov r5, #1
	mvn r4, r5, lsl r4
	ldr lr, [r7, r6, lsl #2]
	smulbb r5, r8, r3
	and r3, lr, r4
	str r3, [r7, r6, lsl #2]
	ldr r4, [r1, #0xc]
	ldr r3, _020C6120 @ =0x021DB510
	ldr lr, _020C6124 @ =0x021DB514
	str r4, [r3, r5]
	ldr r4, [r1, #0x10]
	ldr r3, _020C6128 @ =0x021DB518
	str r4, [lr, r5]
	ldr r1, [r1, #0x14]
	str r1, [r3, r5]
_020C60A8:
	tst r0, #1
	beq _020C610C
	ldrb r3, [r2, #2]
	ldr r1, [ip]
	ldr r0, _020C611C @ =0x021DA700
	orr r1, r1, #0x20
	str r1, [ip]
	ldr r1, [r0]
	lsr r0, r3, #5
	add r0, r1, r0, lsl #2
	ldr r0, [r0, #0xc4]
	and r1, r3, #0x1f
	mov r2, #1
	tst r0, r2, lsl r1
	beq _020C60F4
	ldr r0, [ip]
	orr r0, r0, #8
	str r0, [ip]
	b _020C610C
_020C60F4:
	ldr r1, _020C6120 @ =0x021DB510
	mov r0, #0x18
	mla r0, r3, r0, r1
	add r3, ip, #0x10
	ldm r0, {r0, r1, r2}
	stm r3, {r0, r1, r2}
_020C610C:
	ldr r0, [ip]
	orr r0, r0, #0x10
	str r0, [ip]
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0
_020C611C: .4byte 0x021DA700
_020C6120: .4byte 0x021DB510
_020C6124: .4byte 0x021DB514
_020C6128: .4byte 0x021DB518
	arm_func_end FUN_020C5FDC

	arm_func_start FUN_020C612C
FUN_020C612C: @ 0x020C612C
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sb, r1
	ldrh r2, [sb, #0x2c]
	ldrh r1, [sb, #0x2e]
	mov sl, r0
	lsl r8, r2, #0xc
	lsl fp, r1, #0xc
	mov r0, fp
	mov r1, r8
	bl FUN_020CCCD8
	ldrsh r5, [sb, #0x22]
	ldr r3, [sb, #0x18]
	ldrsh r0, [sb, #0x20]
	ldr r4, [sb, #0x1c]
	smull r2, r1, r3, r5
	lsr r6, r2, #0xc
	orr r6, r6, r1, lsl #20
	smull r2, r1, r3, r0
	lsr r7, r2, #0xc
	orr r7, r7, r1, lsl #20
	smull r3, r2, r4, r0
	smull r1, r0, r4, r5
	lsr r5, r3, #0xc
	orr r5, r5, r2, lsl #20
	lsr r4, r1, #0xc
	orr r4, r4, r0, lsl #20
	str r6, [sl]
	str r4, [sl, #0x14]
	bl FUN_020CCC44
	mov r1, fp
	rsb r2, r5, #0
	mul r0, r2, r0
	asr r0, r0, #0xc
	str r0, [sl, #4]
	mov r0, r8
	bl FUN_020CCCD8
	sub r0, r5, r4
	add r1, r7, r6
	ldr r5, [sb, #0x18]
	ldrh r4, [sb, #0x2c]
	sub r2, r5, r1
	ldr r1, [sb, #0x24]
	mul r3, r4, r2
	smull r2, r1, r5, r1
	lsr r2, r2, #8
	orr r2, r2, r1, lsl #24
	mul r1, r4, r2
	rsb r1, r1, r3, lsl #3
	str r1, [sl, #0x30]
	ldr r4, [sb, #0x1c]
	ldrh r3, [sb, #0x2e]
	sub r0, r0, r4
	add r0, r0, #0x2000
	mul r2, r3, r0
	ldr r0, [sb, #0x28]
	smull r1, r0, r4, r0
	lsr r1, r1, #8
	orr r1, r1, r0, lsl #24
	mul r0, r3, r1
	add r0, r0, r2, lsl #3
	str r0, [sl, #0x34]
	bl FUN_020CCC44
	mul r0, r7, r0
	asr r0, r0, #0xc
	str r0, [sl, #0x10]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_020C612C

	arm_func_start FUN_020C6234
FUN_020C6234: @ 0x020C6234
	push {r3, r4, r5, r6, r7, lr}
	mov r5, r1
	ldrh r2, [r5, #0x2c]
	ldrh r1, [r5, #0x2e]
	mov r6, r0
	lsl r4, r2, #0xc
	lsl r7, r1, #0xc
	mov r0, r7
	mov r1, r4
	bl FUN_020CCCD8
	ldrsh r0, [r5, #0x22]
	str r0, [r6]
	ldrsh r0, [r5, #0x22]
	str r0, [r6, #0x14]
	bl FUN_020CCC44
	ldrsh r2, [r5, #0x20]
	mov r1, r7
	rsb r2, r2, #0
	mul r0, r2, r0
	asr r2, r0, #0xc
	mov r0, r4
	str r2, [r6, #4]
	bl FUN_020CCCD8
	ldrsh r2, [r5, #0x20]
	ldrsh r1, [r5, #0x22]
	ldrh r3, [r5, #0x2c]
	ldr r0, [r5, #0x24]
	add r1, r2, r1
	rsb r1, r1, #0
	add r2, r1, #0x1000
	mul r1, r0, r3
	mul r2, r3, r2
	lsl r0, r1, #4
	rsb r0, r0, r2, lsl #3
	str r0, [r6, #0x30]
	ldrsh r2, [r5, #0x20]
	ldrsh r1, [r5, #0x22]
	ldrh r3, [r5, #0x2e]
	ldr r0, [r5, #0x28]
	sub r1, r2, r1
	add r2, r1, #0x1000
	mul r1, r0, r3
	mul r2, r3, r2
	lsl r0, r1, #4
	add r0, r0, r2, lsl #3
	str r0, [r6, #0x34]
	bl FUN_020CCC44
	ldrsh r1, [r5, #0x20]
	mul r0, r1, r0
	asr r0, r0, #0xc
	str r0, [r6, #0x10]
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020C6234

	arm_func_start FUN_020C6304
FUN_020C6304: @ 0x020C6304
	push {r4, lr}
	ldr r3, [r1, #0x18]
	mov r2, #0
	str r3, [r0]
	ldr r3, [r1, #0x1c]
	str r3, [r0, #0x14]
	str r2, [r0, #4]
	ldr r4, [r1, #0x18]
	ldr r3, [r1, #0x24]
	ldrh lr, [r1, #0x2c]
	smull ip, r3, r4, r3
	lsr r4, ip, #8
	orr r4, r4, r3, lsl #24
	rsb r3, r4, #0
	mul r3, lr, r3
	str r3, [r0, #0x30]
	ldr r4, [r1, #0x1c]
	ldr ip, [r1, #0x28]
	lsl r3, r4, #1
	smull lr, ip, r4, ip
	rsb r4, r3, #0
	lsr r3, lr, #8
	ldrh lr, [r1, #0x2e]
	add r1, r4, #0x2000
	orr r3, r3, ip, lsl #24
	mul r4, lr, r1
	mul r1, lr, r3
	add r1, r1, r4, lsl #3
	str r1, [r0, #0x34]
	str r2, [r0, #0x10]
	pop {r4, pc}
	arm_func_end FUN_020C6304

	arm_func_start FUN_020C6380
FUN_020C6380: @ 0x020C6380
	mov r2, #0x1000
	str r2, [r0]
	str r2, [r0, #0x14]
	mov ip, #0
	str ip, [r0, #4]
	ldrh r2, [r1, #0x2c]
	ldr r3, [r1, #0x24]
	mul r2, r3, r2
	rsb r2, r2, #0
	lsl r2, r2, #4
	str r2, [r0, #0x30]
	ldrh r2, [r1, #0x2e]
	ldr r1, [r1, #0x28]
	mul r2, r1, r2
	lsl r1, r2, #4
	str r1, [r0, #0x34]
	str ip, [r0, #0x10]
	bx lr
	arm_func_end FUN_020C6380

	arm_func_start FUN_020C63C8
FUN_020C63C8: @ 0x020C63C8
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sb, r1
	ldrh r2, [sb, #0x2c]
	ldrh r1, [sb, #0x2e]
	mov sl, r0
	lsl r8, r2, #0xc
	lsl fp, r1, #0xc
	mov r0, fp
	mov r1, r8
	bl FUN_020CCCD8
	ldrsh r5, [sb, #0x22]
	ldr r3, [sb, #0x18]
	ldrsh r0, [sb, #0x20]
	ldr r4, [sb, #0x1c]
	smull r2, r1, r3, r5
	lsr r6, r2, #0xc
	orr r6, r6, r1, lsl #20
	smull r2, r1, r3, r0
	lsr r7, r2, #0xc
	orr r7, r7, r1, lsl #20
	smull r3, r2, r4, r0
	smull r1, r0, r4, r5
	lsr r5, r3, #0xc
	orr r5, r5, r2, lsl #20
	lsr r4, r1, #0xc
	orr r4, r4, r0, lsl #20
	str r6, [sl]
	str r4, [sl, #0x14]
	bl FUN_020CCC44
	mov r1, fp
	rsb r2, r5, #0
	mul r0, r2, r0
	asr r0, r0, #0xc
	str r0, [sl, #4]
	mov r0, r8
	bl FUN_020CCCD8
	sub r1, r5, r4
	add r0, r7, r6
	ldrh r3, [sb, #0x2c]
	ldr r2, [sb, #0x18]
	sub r0, r2, r0
	mul r0, r3, r0
	lsl r0, r0, #3
	str r0, [sl, #0x30]
	ldrh r2, [sb, #0x2e]
	ldr r0, [sb, #0x1c]
	sub r0, r1, r0
	add r0, r0, #0x2000
	mul r0, r2, r0
	lsl r0, r0, #3
	str r0, [sl, #0x34]
	bl FUN_020CCC44
	mul r0, r7, r0
	asr r0, r0, #0xc
	str r0, [sl, #0x10]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_020C63C8

	arm_func_start FUN_020C64A8
FUN_020C64A8: @ 0x020C64A8
	push {r3, r4, r5, r6, r7, lr}
	mov r5, r1
	ldrh r2, [r5, #0x2c]
	ldrh r1, [r5, #0x2e]
	mov r6, r0
	lsl r4, r2, #0xc
	lsl r7, r1, #0xc
	mov r0, r7
	mov r1, r4
	bl FUN_020CCCD8
	ldrsh r0, [r5, #0x22]
	str r0, [r6]
	ldrsh r0, [r5, #0x22]
	str r0, [r6, #0x14]
	bl FUN_020CCC44
	ldrsh r2, [r5, #0x20]
	mov r1, r7
	rsb r2, r2, #0
	mul r0, r2, r0
	asr r2, r0, #0xc
	mov r0, r4
	str r2, [r6, #4]
	bl FUN_020CCCD8
	ldrsh r1, [r5, #0x20]
	ldrsh r0, [r5, #0x22]
	ldrh r2, [r5, #0x2c]
	add r0, r1, r0
	rsb r0, r0, #0
	add r0, r0, #0x1000
	mul r0, r2, r0
	lsl r0, r0, #3
	str r0, [r6, #0x30]
	ldrsh r1, [r5, #0x20]
	ldrsh r0, [r5, #0x22]
	ldrh r2, [r5, #0x2e]
	sub r0, r1, r0
	add r0, r0, #0x1000
	mul r0, r2, r0
	lsl r0, r0, #3
	str r0, [r6, #0x34]
	bl FUN_020CCC44
	ldrsh r1, [r5, #0x20]
	mul r0, r1, r0
	asr r0, r0, #0xc
	str r0, [r6, #0x10]
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020C64A8

	arm_func_start FUN_020C6560
FUN_020C6560: @ 0x020C6560
	ldr r2, [r1, #0x18]
	mov ip, #0
	str r2, [r0]
	ldr r2, [r1, #0x1c]
	str r2, [r0, #0x14]
	str ip, [r0, #4]
	str ip, [r0, #0x30]
	ldr r2, [r1, #0x1c]
	ldrh r3, [r1, #0x2e]
	lsl r1, r2, #1
	rsb r1, r1, #0
	add r1, r1, #0x2000
	mul r1, r3, r1
	lsl r1, r1, #3
	str r1, [r0, #0x34]
	str ip, [r0, #0x10]
	bx lr
	arm_func_end FUN_020C6560

	arm_func_start FUN_020C65A4
FUN_020C65A4: @ 0x020C65A4
	mov r2, #0x1000
	str r2, [r0]
	mov r1, #0
	str r1, [r0, #4]
	str r1, [r0, #0x10]
	str r2, [r0, #0x14]
	str r1, [r0, #0x30]
	str r1, [r0, #0x34]
	bx lr
	arm_func_end FUN_020C65A4

	arm_func_start FUN_020C65C8
FUN_020C65C8: @ 0x020C65C8
	push {r3, r4, lr}
	sub sp, sp, #0x4c
	mov r4, r0
	ldr r0, [r4]
	mov r1, #0
	tst r0, #8
	ldrne r0, _020C6704 @ =0x00101610
	mov r3, #3
	strne r0, [sp]
	ldreq r0, _020C6708 @ =0x00101810
	mov r2, #2
	streq r0, [sp]
	mov r0, #0x1000
	str r0, [sp, #0x44]
	str r3, [sp, #4]
	str r2, [sp, #0x48]
	str r1, [sp, #0x40]
	str r1, [sp, #0x34]
	str r1, [sp, #0x30]
	str r1, [sp, #0x2c]
	str r1, [sp, #0x28]
	str r1, [sp, #0x24]
	str r1, [sp, #0x20]
	str r1, [sp, #0x14]
	str r1, [sp, #0x10]
	ldr r1, [r4]
	ldr r0, _020C670C @ =_02110C1C
	and r1, r1, #7
	ldr r2, [r0, r1, lsl #2]
	add r0, sp, #8
	mov r1, r4
	blx r2
	ldr r3, [r4, #0x30]
	cmp r3, #0x1000
	beq _020C6698
	ldr r0, [sp, #8]
	ldr r1, [sp, #0xc]
	smull r2, r0, r3, r0
	lsr r2, r2, #0xc
	orr r2, r2, r0, lsl #20
	str r2, [sp, #8]
	ldr r2, [r4, #0x30]
	ldr r0, [sp, #0x38]
	smull r3, r1, r2, r1
	lsr r2, r3, #0xc
	orr r2, r2, r1, lsl #20
	str r2, [sp, #0xc]
	ldr r1, [r4, #0x30]
	smull r2, r0, r1, r0
	lsr r1, r2, #0xc
	orr r1, r1, r0, lsl #20
	str r1, [sp, #0x38]
_020C6698:
	ldr r3, [r4, #0x34]
	cmp r3, #0x1000
	beq _020C66E8
	ldr r0, [sp, #0x18]
	ldr r1, [sp, #0x1c]
	smull r2, r0, r3, r0
	lsr r2, r2, #0xc
	orr r2, r2, r0, lsl #20
	str r2, [sp, #0x18]
	ldr r2, [r4, #0x34]
	ldr r0, [sp, #0x3c]
	smull r3, r1, r2, r1
	lsr r2, r3, #0xc
	orr r2, r2, r1, lsl #20
	str r2, [sp, #0x1c]
	ldr r1, [r4, #0x34]
	smull r2, r0, r1, r0
	lsr r1, r2, #0xc
	orr r1, r1, r0, lsl #20
	str r1, [sp, #0x3c]
_020C66E8:
	add r1, sp, #0
	ldr r0, [sp]
	add r1, r1, #4
	mov r2, #0x12
	bl FUN_020C2528
	add sp, sp, #0x4c
	pop {r3, r4, pc}
	.align 2, 0
_020C6704: .4byte 0x00101610
_020C6708: .4byte 0x00101810
_020C670C: .4byte _02110C1C
	arm_func_end FUN_020C65C8

	arm_func_start FUN_020C6710
FUN_020C6710: @ 0x020C6710
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #0xc
	mov r6, r0
	ldr r0, [r6]
	mov r4, #0
	ands r5, r0, #0x18
	bne _020C673C
	add r1, r6, #0x1c
	mov r0, #0x1b
	mov r2, #3
	bl FUN_020C2528
_020C673C:
	ldr r0, [r6]
	tst r0, #4
	bne _020C67AC
	cmp r5, #0
	movne r4, #1
	bne _020C67AC
	ldr r2, [r6, #0x4c]
	ldr r0, [r6, #0x10]
	add r1, sp, #0
	smull r3, r0, r2, r0
	lsr r2, r3, #0xc
	orr r2, r2, r0, lsl #20
	str r2, [sp]
	ldr r3, [r6, #0x50]
	ldr r2, [r6, #0x14]
	mov r0, #0x1c
	smull ip, r2, r3, r2
	lsr r3, ip, #0xc
	orr r3, r3, r2, lsl #20
	str r3, [sp, #4]
	ldr ip, [r6, #0x54]
	ldr r3, [r6, #0x18]
	mov r2, #3
	smull lr, r3, ip, r3
	lsr ip, lr, #0xc
	orr ip, ip, r3, lsl #20
	str ip, [sp, #8]
	bl FUN_020C2528
_020C67AC:
	ldr r0, [r6]
	tst r0, #2
	bne _020C67E4
	cmp r4, #0
	add r1, r6, #0x28
	beq _020C67D4
	mov r0, #0x19
	mov r2, #0xc
	bl FUN_020C2528
	b _020C67FC
_020C67D4:
	mov r0, #0x1a
	mov r2, #9
	bl FUN_020C2528
	b _020C67FC
_020C67E4:
	cmp r4, #0
	beq _020C67FC
	add r1, r6, #0x4c
	mov r0, #0x1c
	mov r2, #3
	bl FUN_020C2528
_020C67FC:
	cmp r5, #0
	bne _020C6814
	add r1, r6, #0x10
	mov r0, #0x1b
	mov r2, #3
	bl FUN_020C2528
_020C6814:
	ldr r0, [r6]
	tst r0, #1
	addne sp, sp, #0xc
	popne {r3, r4, r5, r6, pc}
	add r1, r6, #4
	mov r0, #0x1b
	mov r2, #3
	bl FUN_020C2528
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, pc}
	arm_func_end FUN_020C6710

	arm_func_start FUN_020C683C
FUN_020C683C: @ 0x020C683C
	push {r4, r5, r6, r7, r8, lr}
	mov r5, r0
	tst r3, #4
	ldrb r4, [r2, #1]
	ldrb r0, [r2, #2]
	beq _020C68D8
	ldr r2, [r5]
	ldr r1, _020C6A3C @ =0x021DA700
	orr r2, r2, #1
	str r2, [r5]
	ldr r3, [r1]
	lsr r1, r0, #5
	add r1, r3, r1, lsl #2
	ldr r1, [r1, #0xc4]
	and r2, r0, #0x1f
	mov r6, #1
	tst r1, r6, lsl r2
	beq _020C68AC
	add r3, r3, #0xc4
	lsr r2, r4, #5
	ldr r1, [r3, r2, lsl #2]
	and r0, r4, #0x1f
	orr r0, r1, r6, lsl r0
	str r0, [r3, r2, lsl #2]
	ldr r0, [r5]
	orr r0, r0, #0x18
	str r0, [r5]
	pop {r4, r5, r6, r7, r8, pc}
_020C68AC:
	mov r2, #0x18
	ldr r7, _020C6A40 @ =0x021DB504
	mul r6, r0, r2
	mla r1, r4, r2, r7
	add r0, r7, r6
	bl FUN_020D4808
	add r0, r7, r6
	add r1, r5, #0x10
	mov r2, #0x18
	bl FUN_020D4808
	pop {r4, r5, r6, r7, r8, pc}
_020C68D8:
	ldr r3, [r1]
	ldr r2, _020C6A3C @ =0x021DA700
	str r3, [r5, #4]
	ldr r3, [r1, #4]
	lsr r7, r0, #5
	str r3, [r5, #8]
	ldr r3, [r1, #8]
	and r8, r0, #0x1f
	str r3, [r5, #0xc]
	ldr r6, [r2]
	mov r3, #1
	add r2, r6, r7, lsl #2
	ldr r2, [r2, #0xc4]
	tst r2, r3, lsl r8
	mov r2, #0x18
	beq _020C6960
	ldr r3, _020C6A40 @ =0x021DB504
	mov r0, r1
	mla r1, r4, r2, r3
	bl FUN_020D4808
	ldr r0, _020C6A3C @ =0x021DA700
	lsr r2, r4, #5
	ldr r1, [r0]
	and r0, r4, #0x1f
	add r3, r1, #0xc4
	mov r1, #1
	mvn r0, r1, lsl r0
	ldr r1, [r3, r2, lsl #2]
	and r0, r1, r0
	str r0, [r3, r2, lsl #2]
	ldr r0, [r5]
	orr r0, r0, #0x18
	str r0, [r5]
	pop {r4, r5, r6, r7, r8, pc}
_020C6960:
	mul ip, r0, r2
	and r7, r4, #0x1f
	mvn r7, r3, lsl r7
	add r6, r6, #0xc4
	lsr lr, r4, #5
	ldr r8, [r6, lr, lsl #2]
	mul r3, r4, r2
	and r4, r8, r7
	str r4, [r6, lr, lsl #2]
	ldr r0, _020C6A40 @ =0x021DB504
	ldr r7, [r1]
	ldr r4, [r0, ip]
	ldr r6, _020C6A44 @ =0x021DB508
	smull r8, r4, r7, r4
	lsr r7, r8, #0xc
	orr r7, r7, r4, lsl #20
	str r7, [r0, r3]
	ldr r8, [r1, #4]
	ldr r4, [r6, ip]
	ldr r7, _020C6A48 @ =0x021DB50C
	smull lr, r4, r8, r4
	lsr r8, lr, #0xc
	orr r8, r8, r4, lsl #20
	str r8, [r6, r3]
	ldr r8, [r1, #8]
	ldr r4, [r7, ip]
	ldr r6, _020C6A4C @ =0x021DB510
	smull lr, r4, r8, r4
	lsr r8, lr, #0xc
	orr r8, r8, r4, lsl #20
	str r8, [r7, r3]
	ldr r7, [r1, #0xc]
	ldr r4, [r6, ip]
	ldr lr, _020C6A50 @ =0x021DB514
	smull r8, r4, r7, r4
	lsr r7, r8, #0xc
	orr r7, r7, r4, lsl #20
	str r7, [r6, r3]
	ldr r7, [r1, #0x10]
	ldr r6, [lr, ip]
	ldr r4, _020C6A54 @ =0x021DB518
	smull r8, r6, r7, r6
	lsr r7, r8, #0xc
	orr r7, r7, r6, lsl #20
	str r7, [lr, r3]
	ldr r6, [r1, #0x14]
	ldr r1, [r4, ip]
	add r0, r0, ip
	smull ip, r1, r6, r1
	lsr r6, ip, #0xc
	orr r6, r6, r1, lsl #20
	add r1, r5, #0x10
	str r6, [r4, r3]
	bl FUN_020D4808
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0
_020C6A3C: .4byte 0x021DA700
_020C6A40: .4byte 0x021DB504
_020C6A44: .4byte 0x021DB508
_020C6A48: .4byte 0x021DB50C
_020C6A4C: .4byte 0x021DB510
_020C6A50: .4byte 0x021DB514
_020C6A54: .4byte 0x021DB518
	arm_func_end FUN_020C683C

	arm_func_start FUN_020C6A58
FUN_020C6A58: @ 0x020C6A58
	stmdb sp!, {lr}
	sub sp, sp, #0x3c
	ldr r1, [r0]
	mov r2, #0
	tst r1, #8
	ldrne r1, _020C6C1C @ =0x00101710
	mov r3, #3
	strne r1, [sp]
	ldreq r1, _020C6C20 @ =0x00101910
	str r3, [sp, #4]
	streq r1, [sp]
	mov r1, #2
	str r2, [sp, #0x34]
	str r2, [sp, #0x28]
	str r2, [sp, #0x24]
	str r2, [sp, #0x20]
	str r2, [sp, #0x1c]
	str r2, [sp, #0x14]
	str r2, [sp, #0x10]
	str r2, [sp, #0xc]
	str r1, [sp, #0x38]
	ldr r1, [r0]
	tst r1, #4
	beq _020C6AF0
	str r2, [sp, #0x2c]
	str r2, [sp, #0x30]
	ldr r1, [r0]
	tst r1, #1
	beq _020C6ADC
	mov r1, #0x1000
	str r1, [sp, #8]
	str r1, [sp, #0x18]
	b _020C6B90
_020C6ADC:
	ldr r1, [r0, #0x18]
	str r1, [sp, #8]
	ldr r1, [r0, #0x1c]
	str r1, [sp, #0x18]
	b _020C6B90
_020C6AF0:
	tst r1, #1
	beq _020C6B38
	ldr r2, [r0, #0x24]
	ldrh r1, [r0, #0x2c]
	lsl r2, r2, #4
	rsb r2, r2, #0
	mul r1, r2, r1
	str r1, [sp, #0x2c]
	ldr r2, [r0, #0x28]
	ldrh r1, [r0, #0x2e]
	lsl r2, r2, #4
	rsb r2, r2, #0
	mul r3, r2, r1
	mov r1, #0x1000
	str r3, [sp, #0x30]
	str r1, [sp, #8]
	str r1, [sp, #0x18]
	b _020C6B90
_020C6B38:
	ldr r2, [r0, #0x18]
	ldr r1, [r0, #0x24]
	ldrh ip, [r0, #0x2c]
	smull r3, r1, r2, r1
	lsr r2, r3, #8
	orr r2, r2, r1, lsl #24
	rsb r1, r2, #0
	mul r1, ip, r1
	str r1, [sp, #0x2c]
	ldr r2, [r0, #0x1c]
	ldr r1, [r0, #0x28]
	ldrh ip, [r0, #0x2e]
	smull r3, r1, r2, r1
	lsr r2, r3, #8
	orr r2, r2, r1, lsl #24
	rsb r1, r2, #0
	mul r1, ip, r1
	str r1, [sp, #0x30]
	ldr r1, [r0, #0x18]
	str r1, [sp, #8]
	ldr r1, [r0, #0x1c]
	str r1, [sp, #0x18]
_020C6B90:
	ldr ip, [r0, #0x30]
	cmp ip, #0x1000
	beq _020C6BC8
	ldr r2, [sp, #8]
	ldr r1, [sp, #0x2c]
	smull r3, r2, ip, r2
	lsr r3, r3, #0xc
	orr r3, r3, r2, lsl #20
	str r3, [sp, #8]
	ldr r2, [r0, #0x30]
	smull r3, r1, r2, r1
	lsr r2, r3, #0xc
	orr r2, r2, r1, lsl #20
	str r2, [sp, #0x2c]
_020C6BC8:
	ldr ip, [r0, #0x34]
	cmp ip, #0x1000
	beq _020C6C00
	ldr r2, [sp, #0x18]
	ldr r1, [sp, #0x30]
	smull r3, r2, ip, r2
	lsr r3, r3, #0xc
	orr r3, r3, r2, lsl #20
	str r3, [sp, #0x18]
	ldr r0, [r0, #0x34]
	smull r2, r1, r0, r1
	lsr r0, r2, #0xc
	orr r0, r0, r1, lsl #20
	str r0, [sp, #0x30]
_020C6C00:
	add r1, sp, #0
	ldr r0, [sp]
	add r1, r1, #4
	mov r2, #0xe
	bl FUN_020C2528
	add sp, sp, #0x3c
	ldm sp!, {pc}
	.align 2, 0
_020C6C1C: .4byte 0x00101710
_020C6C20: .4byte 0x00101910
	arm_func_end FUN_020C6A58

	arm_func_start FUN_020C6C24
FUN_020C6C24: @ 0x020C6C24
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sb, r1
	ldrh r2, [sb, #0x2c]
	ldrh r1, [sb, #0x2e]
	mov sl, r0
	lsl r8, r2, #0xc
	lsl fp, r1, #0xc
	mov r0, fp
	mov r1, r8
	bl FUN_020CCCD8
	ldrsh r0, [sb, #0x22]
	ldr r3, [sb, #0x18]
	ldrsh r5, [sb, #0x20]
	ldr r4, [sb, #0x1c]
	smull r2, r1, r3, r0
	lsr r7, r2, #0xc
	orr r7, r7, r1, lsl #20
	smull r2, r1, r3, r5
	lsr r6, r2, #0xc
	orr r6, r6, r1, lsl #20
	smull r3, r2, r4, r0
	smull r1, r0, r4, r5
	lsr r5, r3, #0xc
	orr r5, r5, r2, lsl #20
	lsr r4, r1, #0xc
	orr r4, r4, r0, lsl #20
	str r7, [sl]
	str r5, [sl, #0x14]
	bl FUN_020CCC44
	mov r1, fp
	mul r0, r4, r0
	asr r0, r0, #0xc
	str r0, [sl, #4]
	mov r0, r8
	bl FUN_020CCCD8
	ldrh r1, [sb, #0x2c]
	ldrh r8, [sb, #0x2e]
	ldr r2, [sb, #0x28]
	rsb r0, r1, #0
	mul r3, r2, r8
	rsb r2, r8, #0
	add r8, r3, r2, lsl #11
	smull r3, r2, r5, r8
	smull r8, r5, r6, r8
	ldr fp, [sb, #0x24]
	mul ip, fp, r1
	rsb r0, ip, r0, lsl #11
	smlal r3, r2, r4, r0
	smull r4, r0, r7, r0
	subs r4, r4, r8
	sbc r0, r0, r5
	lsr r4, r4, #8
	orr r4, r4, r0, lsl #24
	add r0, r4, r1, lsl #15
	str r0, [sl, #0x30]
	ldrh r1, [sb, #0x2e]
	lsr r0, r3, #8
	orr r0, r0, r2, lsl #24
	add r0, r0, r1, lsl #15
	str r0, [sl, #0x34]
	bl FUN_020CCC44
	rsb r1, r6, #0
	mul r0, r1, r0
	asr r0, r0, #0xc
	str r0, [sl, #0x10]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_020C6C24

	arm_func_start FUN_020C6D2C
FUN_020C6D2C: @ 0x020C6D2C
	push {r3, r4, r5, r6, r7, lr}
	mov r5, r1
	ldrh r2, [r5, #0x2c]
	ldrh r1, [r5, #0x2e]
	mov r6, r0
	lsl r4, r2, #0xc
	lsl r7, r1, #0xc
	mov r0, r7
	mov r1, r4
	bl FUN_020CCCD8
	ldrsh r0, [r5, #0x22]
	str r0, [r6]
	ldrsh r0, [r5, #0x22]
	str r0, [r6, #0x14]
	bl FUN_020CCC44
	ldrsh r2, [r5, #0x20]
	mov r1, r7
	mul r0, r2, r0
	asr r2, r0, #0xc
	mov r0, r4
	str r2, [r6, #4]
	bl FUN_020CCCD8
	ldrh r2, [r5, #0x2c]
	ldrh r4, [r5, #0x2e]
	ldr r1, [r5, #0x28]
	ldr r0, [r5, #0x24]
	mul r3, r1, r4
	rsb r1, r4, #0
	mul r4, r0, r2
	rsb r0, r2, #0
	add r1, r3, r1, lsl #11
	ldrsh r3, [r5, #0x20]
	rsb r0, r4, r0, lsl #11
	ldrsh lr, [r5, #0x22]
	smull ip, r4, r3, r1
	smull r7, r3, lr, r0
	subs r7, r7, ip
	sbc r3, r3, r4
	lsr r4, r7, #8
	orr r4, r4, r3, lsl #24
	add r2, r4, r2, lsl #15
	str r2, [r6, #0x30]
	ldrsh r2, [r5, #0x22]
	ldrsh r3, [r5, #0x20]
	ldrh ip, [r5, #0x2e]
	smull r4, r1, r2, r1
	smlal r4, r1, r3, r0
	lsr r0, r4, #8
	orr r0, r0, r1, lsl #24
	add r0, r0, ip, lsl #15
	str r0, [r6, #0x34]
	bl FUN_020CCC44
	ldrsh r1, [r5, #0x20]
	rsb r1, r1, #0
	mul r0, r1, r0
	asr r0, r0, #0xc
	str r0, [r6, #0x10]
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020C6D2C

	arm_func_start FUN_020C6E14
FUN_020C6E14: @ 0x020C6E14
	push {r4, r5, r6, lr}
	ldr r2, [r1, #0x18]
	mov r3, #0
	str r2, [r0]
	ldr r2, [r1, #0x1c]
	str r2, [r0, #0x14]
	str r3, [r0, #4]
	ldrh r5, [r1, #0x2c]
	ldr ip, [r1, #0x24]
	ldrh r2, [r1, #0x2e]
	mul lr, ip, r5
	rsb ip, r5, #0
	ldr r4, [r1, #0x18]
	rsb ip, lr, ip, lsl #11
	smull lr, ip, r4, ip
	ldr r6, [r1, #0x28]
	lsr r4, lr, #8
	orr r4, r4, ip, lsl #24
	add r4, r4, r5, lsl #15
	str r4, [r0, #0x30]
	mul r4, r6, r2
	rsb r5, r2, #0
	ldr r2, [r1, #0x1c]
	add r4, r4, r5, lsl #11
	smull lr, ip, r2, r4
	lsr r2, lr, #8
	ldrh r1, [r1, #0x2e]
	orr r2, r2, ip, lsl #24
	add r1, r2, r1, lsl #15
	str r1, [r0, #0x34]
	str r3, [r0, #0x10]
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020C6E14

	arm_func_start FUN_020C6E94
FUN_020C6E94: @ 0x020C6E94
	mov r2, #0x1000
	str r2, [r0]
	str r2, [r0, #0x14]
	mov ip, #0
	str ip, [r0, #4]
	ldr r3, [r1, #0x24]
	ldrh r2, [r1, #0x2c]
	rsb r3, r3, #0
	mul r2, r3, r2
	lsl r2, r2, #4
	str r2, [r0, #0x30]
	ldrh r2, [r1, #0x2e]
	ldr r1, [r1, #0x28]
	mul r2, r1, r2
	lsl r1, r2, #4
	str r1, [r0, #0x34]
	str ip, [r0, #0x10]
	bx lr
	arm_func_end FUN_020C6E94

	arm_func_start FUN_020C6EDC
FUN_020C6EDC: @ 0x020C6EDC
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sb, r1
	ldrh r2, [sb, #0x2c]
	ldrh r1, [sb, #0x2e]
	mov sl, r0
	lsl r8, r2, #0xc
	lsl fp, r1, #0xc
	mov r0, fp
	mov r1, r8
	bl FUN_020CCCD8
	ldrsh r0, [sb, #0x22]
	ldr r3, [sb, #0x18]
	ldrsh r5, [sb, #0x20]
	ldr r4, [sb, #0x1c]
	smull r2, r1, r3, r0
	lsr r7, r2, #0xc
	orr r7, r7, r1, lsl #20
	smull r2, r1, r3, r5
	lsr r6, r2, #0xc
	orr r6, r6, r1, lsl #20
	smull r3, r2, r4, r0
	smull r1, r0, r4, r5
	lsr r5, r3, #0xc
	orr r5, r5, r2, lsl #20
	lsr r4, r1, #0xc
	orr r4, r4, r0, lsl #20
	str r7, [sl]
	str r5, [sl, #0x14]
	bl FUN_020CCC44
	mov r1, fp
	mul r0, r4, r0
	asr r0, r0, #0xc
	str r0, [sl, #4]
	mov r0, r8
	bl FUN_020CCCD8
	ldrh r3, [sb, #0x2c]
	ldrh r1, [sb, #0x2e]
	rsb r0, r3, #0
	rsb r1, r1, #0
	lsl r2, r1, #0xb
	lsl fp, r0, #0xb
	smull r1, r0, r7, fp
	smull r8, r7, r5, r2
	smlal r8, r7, r4, fp
	lsr r4, r8, #8
	orr r4, r4, r7, lsl #24
	smull r5, r2, r6, r2
	subs r1, r1, r5
	sbc r0, r0, r2
	lsr r1, r1, #8
	orr r1, r1, r0, lsl #24
	add r0, r1, r3, lsl #15
	str r0, [sl, #0x30]
	ldrh r0, [sb, #0x2e]
	add r0, r4, r0, lsl #15
	str r0, [sl, #0x34]
	bl FUN_020CCC44
	rsb r1, r6, #0
	mul r0, r1, r0
	asr r0, r0, #0xc
	str r0, [sl, #0x10]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_020C6EDC

	arm_func_start FUN_020C6FD4
FUN_020C6FD4: @ 0x020C6FD4
	push {r3, r4, r5, r6, r7, lr}
	mov r5, r1
	ldrh r2, [r5, #0x2c]
	ldrh r1, [r5, #0x2e]
	mov r6, r0
	lsl r4, r2, #0xc
	lsl r7, r1, #0xc
	mov r0, r7
	mov r1, r4
	bl FUN_020CCCD8
	ldrsh r0, [r5, #0x22]
	str r0, [r6]
	ldrsh r0, [r5, #0x22]
	str r0, [r6, #0x14]
	bl FUN_020CCC44
	ldrsh r2, [r5, #0x20]
	mov r1, r7
	mul r0, r2, r0
	asr r2, r0, #0xc
	mov r0, r4
	str r2, [r6, #4]
	bl FUN_020CCCD8
	ldrh r2, [r5, #0x2c]
	ldrh r1, [r5, #0x2e]
	ldrsh r4, [r5, #0x22]
	rsb r0, r2, #0
	rsb r1, r1, #0
	lsl r0, r0, #0xb
	ldrsh r3, [r5, #0x20]
	lsl r1, r1, #0xb
	smull r7, lr, r4, r0
	smull ip, r4, r3, r1
	subs r7, r7, ip
	sbc r3, lr, r4
	lsr r4, r7, #8
	orr r4, r4, r3, lsl #24
	add r2, r4, r2, lsl #15
	str r2, [r6, #0x30]
	ldrsh r2, [r5, #0x22]
	ldrsh r3, [r5, #0x20]
	ldrh ip, [r5, #0x2e]
	smull r4, r1, r2, r1
	smlal r4, r1, r3, r0
	lsr r0, r4, #8
	orr r0, r0, r1, lsl #24
	add r0, r0, ip, lsl #15
	str r0, [r6, #0x34]
	bl FUN_020CCC44
	ldrsh r1, [r5, #0x20]
	rsb r1, r1, #0
	mul r0, r1, r0
	asr r0, r0, #0xc
	str r0, [r6, #0x10]
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020C6FD4

	arm_func_start FUN_020C70AC
FUN_020C70AC: @ 0x020C70AC
	ldr r2, [r1, #0x18]
	mov ip, #0
	str r2, [r0]
	ldr r2, [r1, #0x1c]
	str r2, [r0, #0x14]
	str ip, [r0, #4]
	ldr r3, [r1, #0x18]
	ldrh r2, [r1, #0x2c]
	rsb r3, r3, #0x1000
	mul r2, r3, r2
	lsl r2, r2, #3
	str r2, [r0, #0x30]
	ldr r2, [r1, #0x1c]
	ldrh r1, [r1, #0x2e]
	rsb r2, r2, #0x1000
	mul r1, r2, r1
	lsl r1, r1, #3
	str r1, [r0, #0x34]
	str ip, [r0, #0x10]
	bx lr
	arm_func_end FUN_020C70AC

	arm_func_start FUN_020C70FC
FUN_020C70FC: @ 0x020C70FC
	mov r2, #0x1000
	str r2, [r0]
	mov r1, #0
	str r1, [r0, #4]
	str r1, [r0, #0x10]
	str r2, [r0, #0x14]
	str r1, [r0, #0x30]
	str r1, [r0, #0x34]
	bx lr
	arm_func_end FUN_020C70FC

	arm_func_start FUN_020C7120
FUN_020C7120: @ 0x020C7120
	push {r3, r4, lr}
	sub sp, sp, #0x4c
	mov r4, r0
	ldr r0, [r4]
	mov r1, #0
	tst r0, #8
	ldrne r0, _020C725C @ =0x00101610
	mov r3, #3
	strne r0, [sp]
	ldreq r0, _020C7260 @ =0x00101810
	mov r2, #2
	streq r0, [sp]
	mov r0, #0x1000
	str r0, [sp, #0x44]
	str r3, [sp, #4]
	str r2, [sp, #0x48]
	str r1, [sp, #0x40]
	str r1, [sp, #0x34]
	str r1, [sp, #0x30]
	str r1, [sp, #0x2c]
	str r1, [sp, #0x28]
	str r1, [sp, #0x24]
	str r1, [sp, #0x20]
	str r1, [sp, #0x14]
	str r1, [sp, #0x10]
	ldr r1, [r4]
	ldr r0, _020C7264 @ =_02110C3C
	and r1, r1, #7
	ldr r2, [r0, r1, lsl #2]
	add r0, sp, #8
	mov r1, r4
	blx r2
	ldr r3, [r4, #0x30]
	cmp r3, #0x1000
	beq _020C71F0
	ldr r0, [sp, #8]
	ldr r1, [sp, #0xc]
	smull r2, r0, r3, r0
	lsr r2, r2, #0xc
	orr r2, r2, r0, lsl #20
	str r2, [sp, #8]
	ldr r2, [r4, #0x30]
	ldr r0, [sp, #0x38]
	smull r3, r1, r2, r1
	lsr r2, r3, #0xc
	orr r2, r2, r1, lsl #20
	str r2, [sp, #0xc]
	ldr r1, [r4, #0x30]
	smull r2, r0, r1, r0
	lsr r1, r2, #0xc
	orr r1, r1, r0, lsl #20
	str r1, [sp, #0x38]
_020C71F0:
	ldr r3, [r4, #0x34]
	cmp r3, #0x1000
	beq _020C7240
	ldr r0, [sp, #0x18]
	ldr r1, [sp, #0x1c]
	smull r2, r0, r3, r0
	lsr r2, r2, #0xc
	orr r2, r2, r0, lsl #20
	str r2, [sp, #0x18]
	ldr r2, [r4, #0x34]
	ldr r0, [sp, #0x3c]
	smull r3, r1, r2, r1
	lsr r2, r3, #0xc
	orr r2, r2, r1, lsl #20
	str r2, [sp, #0x1c]
	ldr r1, [r4, #0x34]
	smull r2, r0, r1, r0
	lsr r1, r2, #0xc
	orr r1, r1, r0, lsl #20
	str r1, [sp, #0x3c]
_020C7240:
	add r1, sp, #0
	ldr r0, [sp]
	add r1, r1, #4
	mov r2, #0x12
	bl FUN_020C2528
	add sp, sp, #0x4c
	pop {r3, r4, pc}
	.align 2, 0
_020C725C: .4byte 0x00101610
_020C7260: .4byte 0x00101810
_020C7264: .4byte _02110C3C
	arm_func_end FUN_020C7120

	arm_func_start FUN_020C7268
FUN_020C7268: @ 0x020C7268
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov r6, r1
	ldrh r2, [r6, #0x2c]
	ldrh r1, [r6, #0x2e]
	mov r7, r0
	lsl sl, r2, #0xc
	lsl fp, r1, #0xc
	mov r0, fp
	mov r1, sl
	bl FUN_020CCCD8
	ldrsh r3, [r6, #0x22]
	ldr r0, [r6, #0x18]
	ldrsh sb, [r6, #0x20]
	smull r2, r1, r0, r3
	lsr r2, r2, #0xc
	ldr r8, [r6, #0x1c]
	orr r2, r2, r1, lsl #20
	str r2, [r7]
	smull r2, r1, r8, r3
	lsr r4, r2, #0xc
	orr r4, r4, r1, lsl #20
	smull r2, r1, r0, sb
	lsr r5, r2, #0xc
	orr r5, r5, r1, lsl #20
	str r4, [r7, #0x14]
	bl FUN_020CCC44
	smull r2, r1, r8, sb
	lsr r2, r2, #0xc
	orr r2, r2, r1, lsl #20
	mul r0, r2, r0
	asr r0, r0, #0xc
	str r0, [r7, #4]
	mov r0, sl
	mov r1, fp
	bl FUN_020CCCD8
	ldr lr, [r6, #0x1c]
	ldrsh r2, [r6, #0x20]
	ldr r8, [r6, #0x24]
	ldr r0, [r6, #0x28]
	smull sl, sb, r8, r2
	ldrh r1, [r6, #0x2c]
	smull r3, r2, r0, r2
	ldrsh ip, [r6, #0x22]
	str r1, [sp]
	asr fp, lr, #0x1f
	smlal r3, r2, r8, ip
	smull r8, ip, r0, ip
	subs r8, sl, r8
	sbc r0, sb, ip
	lsr sb, r8, #0xc
	lsr ip, r3, #0xc
	orr sb, sb, r0, lsl #20
	asr r3, r2, #0xc
	orr ip, ip, r2, lsl #20
	umull sl, r2, sb, lr
	mla r2, sb, fp, r2
	asr r8, r0, #0xc
	mla r2, r8, lr, r2
	ldr r1, [r6, #0x18]
	lsr r8, sl, #0xc
	orr r8, r8, r2, lsl #20
	add r2, r4, r8
	asr r0, r1, #0x1f
	umull r8, r4, ip, r1
	mla r4, ip, r0, r4
	mla r4, r3, r1, r4
	lsr r0, r8, #0xc
	orr r0, r0, r4, lsl #20
	sub r1, r5, r0
	ldr r0, [sp]
	sub r2, r2, #0x1000
	mul r1, r0, r1
	lsl r0, r1, #4
	str r0, [r7, #0x30]
	ldrh r0, [r6, #0x2e]
	rsb r0, r0, #0
	mul r1, r0, r2
	lsl r0, r1, #4
	str r0, [r7, #0x34]
	bl FUN_020CCC44
	rsb r1, r5, #0
	mul r0, r1, r0
	asr r0, r0, #0xc
	str r0, [r7, #0x10]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_020C7268

	arm_func_start FUN_020C73BC
FUN_020C73BC: @ 0x020C73BC
	push {r3, r4, r5, r6, r7, lr}
	mov r5, r1
	ldrh r2, [r5, #0x2c]
	ldrh r1, [r5, #0x2e]
	mov r6, r0
	lsl r4, r2, #0xc
	lsl r7, r1, #0xc
	mov r0, r7
	mov r1, r4
	bl FUN_020CCCD8
	ldrsh r0, [r5, #0x22]
	str r0, [r6]
	ldrsh r0, [r5, #0x22]
	str r0, [r6, #0x14]
	bl FUN_020CCC44
	ldrsh r2, [r5, #0x20]
	mov r1, r7
	mul r0, r2, r0
	asr r2, r0, #0xc
	mov r0, r4
	str r2, [r6, #4]
	bl FUN_020CCCD8
	ldrsh lr, [r5, #0x20]
	ldr r4, [r5, #0x28]
	ldrsh r0, [r5, #0x22]
	ldr ip, [r5, #0x24]
	smull r3, r2, r4, lr
	smlal r3, r2, ip, r0
	smull r1, r0, r4, r0
	lsr r3, r3, #0xc
	orr r3, r3, r2, lsl #20
	sub r4, lr, r3
	smull r3, r2, ip, lr
	subs r1, r3, r1
	sbc r0, r2, r0
	ldrh r2, [r5, #0x2c]
	lsr r1, r1, #0xc
	orr r1, r1, r0, lsl #20
	mul r0, r2, r4
	lsl r0, r0, #4
	str r0, [r6, #0x30]
	ldrsh r0, [r5, #0x22]
	ldrh r2, [r5, #0x2e]
	add r0, r0, r1
	rsb r1, r2, #0
	sub r0, r0, #0x1000
	mul r0, r1, r0
	lsl r0, r0, #4
	str r0, [r6, #0x34]
	bl FUN_020CCC44
	ldrsh r1, [r5, #0x20]
	rsb r1, r1, #0
	mul r0, r1, r0
	asr r0, r0, #0xc
	str r0, [r6, #0x10]
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020C73BC

	arm_func_start FUN_020C749C
FUN_020C749C: @ 0x020C749C
	push {r4, lr}
	ldr r3, [r1, #0x18]
	mov r2, #0
	str r3, [r0]
	ldr r3, [r1, #0x1c]
	str r3, [r0, #0x14]
	str r2, [r0, #4]
	ldr ip, [r1, #0x24]
	ldr r3, [r1, #0x18]
	ldr r4, [r1, #0x28]
	smull lr, r3, ip, r3
	lsr ip, lr, #0xc
	orr ip, ip, r3, lsl #20
	ldrh lr, [r1, #0x2c]
	rsb r3, ip, #0
	ldr ip, [r1, #0x1c]
	rsb r4, r4, #0
	mul r3, lr, r3
	smull lr, ip, r4, ip
	lsl r3, r3, #4
	str r3, [r0, #0x30]
	lsr r4, lr, #0xc
	ldrh r3, [r1, #0x2e]
	ldr r1, [r1, #0x1c]
	orr r4, r4, ip, lsl #20
	add r1, r1, r4
	rsb r3, r3, #0
	sub r1, r1, #0x1000
	mul r1, r3, r1
	lsl r1, r1, #4
	str r1, [r0, #0x34]
	str r2, [r0, #0x10]
	pop {r4, pc}
	arm_func_end FUN_020C749C

	arm_func_start FUN_020C7520
FUN_020C7520: @ 0x020C7520
	push {r3, lr}
	mov r2, #0x1000
	str r2, [r0]
	str r2, [r0, #0x14]
	mov lr, #0
	str lr, [r0, #4]
	ldr r2, [r1, #0x24]
	ldrh r3, [r1, #0x2c]
	rsb r2, r2, #0
	ldr ip, [r1, #0x28]
	mul r2, r3, r2
	lsl r2, r2, #4
	str r2, [r0, #0x30]
	ldrh r1, [r1, #0x2e]
	rsb r2, ip, #0
	rsb r1, r1, #0
	mul r2, r1, r2
	lsl r1, r2, #4
	str r1, [r0, #0x34]
	str lr, [r0, #0x10]
	pop {r3, pc}
	arm_func_end FUN_020C7520

	arm_func_start FUN_020C7574
FUN_020C7574: @ 0x020C7574
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sb, r1
	ldrh r2, [sb, #0x2c]
	ldrh r1, [sb, #0x2e]
	mov sl, r0
	lsl r8, r2, #0xc
	lsl fp, r1, #0xc
	mov r0, fp
	mov r1, r8
	bl FUN_020CCCD8
	ldrsh r3, [sb, #0x22]
	ldr r0, [sb, #0x18]
	ldrsh r7, [sb, #0x20]
	ldr r5, [sb, #0x1c]
	smull r2, r1, r0, r3
	lsr r2, r2, #0xc
	orr r2, r2, r1, lsl #20
	str r2, [sl]
	smull r2, r1, r5, r3
	lsr r4, r2, #0xc
	orr r4, r4, r1, lsl #20
	smull r2, r1, r0, r7
	lsr r6, r2, #0xc
	orr r6, r6, r1, lsl #20
	str r4, [sl, #0x14]
	bl FUN_020CCC44
	smull r2, r1, r5, r7
	lsr r2, r2, #0xc
	orr r2, r2, r1, lsl #20
	mul r0, r2, r0
	asr r0, r0, #0xc
	str r0, [sl, #4]
	mov r0, r8
	mov r1, fp
	bl FUN_020CCCD8
	sub r0, r4, #0x1000
	ldrh r1, [sb, #0x2c]
	mul r2, r1, r6
	lsl r1, r2, #4
	str r1, [sl, #0x30]
	ldrh r1, [sb, #0x2e]
	rsb r1, r1, #0
	mul r0, r1, r0
	lsl r0, r0, #4
	str r0, [sl, #0x34]
	bl FUN_020CCC44
	rsb r1, r6, #0
	mul r0, r1, r0
	asr r0, r0, #0xc
	str r0, [sl, #0x10]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_020C7574

	arm_func_start FUN_020C7640
FUN_020C7640: @ 0x020C7640
	push {r3, r4, r5, r6, r7, lr}
	mov r5, r1
	ldrh r2, [r5, #0x2c]
	ldrh r1, [r5, #0x2e]
	mov r6, r0
	lsl r4, r2, #0xc
	lsl r7, r1, #0xc
	mov r0, r7
	mov r1, r4
	bl FUN_020CCCD8
	ldrsh r0, [r5, #0x22]
	str r0, [r6]
	ldrsh r0, [r5, #0x22]
	str r0, [r6, #0x14]
	bl FUN_020CCC44
	ldrsh r2, [r5, #0x20]
	mov r1, r7
	mul r0, r2, r0
	asr r2, r0, #0xc
	mov r0, r4
	str r2, [r6, #4]
	bl FUN_020CCCD8
	ldrh r1, [r5, #0x2c]
	ldrsh r0, [r5, #0x20]
	mul r0, r1, r0
	lsl r0, r0, #4
	str r0, [r6, #0x30]
	ldrh r1, [r5, #0x2e]
	ldrsh r0, [r5, #0x22]
	rsb r1, r1, #0
	sub r0, r0, #0x1000
	mul r0, r1, r0
	lsl r0, r0, #4
	str r0, [r6, #0x34]
	bl FUN_020CCC44
	ldrsh r1, [r5, #0x20]
	rsb r1, r1, #0
	mul r0, r1, r0
	asr r0, r0, #0xc
	str r0, [r6, #0x10]
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020C7640

	arm_func_start FUN_020C76E4
FUN_020C76E4: @ 0x020C76E4
	ldr r2, [r1, #0x18]
	mov r3, #0
	str r2, [r0]
	ldr r2, [r1, #0x1c]
	str r2, [r0, #0x14]
	str r3, [r0, #4]
	str r3, [r0, #0x30]
	ldrh r2, [r1, #0x2e]
	ldr r1, [r1, #0x1c]
	rsb r2, r2, #0
	sub r1, r1, #0x1000
	mul r1, r2, r1
	lsl r1, r1, #4
	str r1, [r0, #0x34]
	str r3, [r0, #0x10]
	bx lr
	arm_func_end FUN_020C76E4

	arm_func_start FUN_020C7724
FUN_020C7724: @ 0x020C7724
	mov r2, #0x1000
	str r2, [r0]
	mov r1, #0
	str r1, [r0, #4]
	str r1, [r0, #0x10]
	str r2, [r0, #0x14]
	str r1, [r0, #0x30]
	str r1, [r0, #0x34]
	bx lr
	arm_func_end FUN_020C7724

	arm_func_start FUN_020C7748
FUN_020C7748: @ 0x020C7748
	push {r3, r4, lr}
	sub sp, sp, #0x4c
	mov r4, r0
	ldr r0, [r4]
	mov r3, #3
	tst r0, #8
	ldrne r0, _020C78C4 @ =0x00101610
	mov r2, #2
	strne r0, [sp]
	ldreq r0, _020C78C8 @ =0x00101810
	mov r1, #0x1000
	streq r0, [sp]
	mov r0, #0
	str r3, [sp, #4]
	str r2, [sp, #0x48]
	str r1, [sp, #0x44]
	str r0, [sp, #0x40]
	str r0, [sp, #0x34]
	str r0, [sp, #0x30]
	str r0, [sp, #0x2c]
	str r0, [sp, #0x28]
	str r0, [sp, #0x24]
	str r0, [sp, #0x20]
	str r0, [sp, #0x14]
	str r0, [sp, #0x10]
	ldr r0, [r4]
	tst r0, #1
	strne r1, [r4, #0x1c]
	strne r1, [r4, #0x18]
	ldr r0, [r4]
	tst r0, #2
	beq _020C77D8
	mov r0, #0x1000
	strh r0, [r4, #0x22]
	mov r0, #0
	strh r0, [r4, #0x20]
_020C77D8:
	ldr r0, [r4]
	tst r0, #4
	movne r0, #0
	strne r0, [r4, #0x28]
	strne r0, [r4, #0x24]
	ldr r1, [r4]
	ldr r0, _020C78CC @ =_02110C5C
	and r1, r1, #7
	ldr r2, [r0, r1, lsl #2]
	add r0, sp, #8
	mov r1, r4
	blx r2
	ldr r3, [r4, #0x30]
	cmp r3, #0x1000
	beq _020C7858
	ldr r0, [sp, #8]
	ldr r1, [sp, #0xc]
	smull r2, r0, r3, r0
	lsr r2, r2, #0xc
	orr r2, r2, r0, lsl #20
	str r2, [sp, #8]
	ldr r2, [r4, #0x30]
	ldr r0, [sp, #0x38]
	smull r3, r1, r2, r1
	lsr r2, r3, #0xc
	orr r2, r2, r1, lsl #20
	str r2, [sp, #0xc]
	ldr r1, [r4, #0x30]
	smull r2, r0, r1, r0
	lsr r1, r2, #0xc
	orr r1, r1, r0, lsl #20
	str r1, [sp, #0x38]
_020C7858:
	ldr r3, [r4, #0x34]
	cmp r3, #0x1000
	beq _020C78A8
	ldr r0, [sp, #0x18]
	ldr r1, [sp, #0x1c]
	smull r2, r0, r3, r0
	lsr r2, r2, #0xc
	orr r2, r2, r0, lsl #20
	str r2, [sp, #0x18]
	ldr r2, [r4, #0x34]
	ldr r0, [sp, #0x3c]
	smull r3, r1, r2, r1
	lsr r2, r3, #0xc
	orr r2, r2, r1, lsl #20
	str r2, [sp, #0x1c]
	ldr r1, [r4, #0x34]
	smull r2, r0, r1, r0
	lsr r1, r2, #0xc
	orr r1, r1, r0, lsl #20
	str r1, [sp, #0x3c]
_020C78A8:
	add r1, sp, #0
	ldr r0, [sp]
	add r1, r1, #4
	mov r2, #0x12
	bl FUN_020C2528
	add sp, sp, #0x4c
	pop {r3, r4, pc}
	.align 2, 0
_020C78C4: .4byte 0x00101610
_020C78C8: .4byte 0x00101810
_020C78CC: .4byte _02110C5C
	arm_func_end FUN_020C7748

	arm_func_start FUN_020C78D0
FUN_020C78D0: @ 0x020C78D0
	push {r3, lr}
	ldr r0, _020C7944 @ =0x021DD420
	ldr r1, [r0, #0xc]
	cmp r1, #0
	popne {r3, pc}
	mov r1, #1
	str r1, [r0, #0xc]
	bl FUN_020D54D0
	ldr r0, _020C7948 @ =FUN_020C7B34
	ldr r1, _020C7944 @ =0x021DD420
	mov r2, #0
	str r0, [r1, #0x10]
	ldr r0, _020C794C @ =FUN_020C7B6C
	str r2, [r1, #0x14]
	str r0, [r1, #0x1c]
	ldr r0, _020C7950 @ =0x021DD430
	str r2, [r1, #0x20]
	bl FUN_020DB960
	ldr r0, _020C7954 @ =0x021DD43C
	bl FUN_020DB978
	bl FUN_020C7C74
	bl FUN_020C908C
	bl FUN_020C83E4
	ldr r0, _020C7944 @ =0x021DD420
	mvn r1, #0
	strb r1, [r0]
	mov r1, #1
	str r1, [r0, #4]
	pop {r3, pc}
	.align 2, 0
_020C7944: .4byte 0x021DD420
_020C7948: .4byte FUN_020C7B34
_020C794C: .4byte FUN_020C7B6C
_020C7950: .4byte 0x021DD430
_020C7954: .4byte 0x021DD43C
	arm_func_end FUN_020C78D0

	arm_func_start FUN_020C7958
FUN_020C7958: @ 0x020C7958
	push {r4, lr}
	mov r4, #0
_020C7960:
	mov r0, r4
	bl FUN_020D5604
	cmp r0, #0
	bne _020C7960
	bl FUN_020C8498
	bl FUN_020C90A4
	bl FUN_020CAB94
	mov r0, #0
	bl FUN_020D57D4
	pop {r4, pc}
	arm_func_end FUN_020C7958

	arm_func_start FUN_020C7988
FUN_020C7988: @ 0x020C7988
	ldr ip, _020C7990 @ =FUN_020D5394
	bx ip
	.align 2, 0
_020C7990: .4byte FUN_020D5394
	arm_func_end FUN_020C7988

	arm_func_start FUN_020C7994
FUN_020C7994: @ 0x020C7994
	push {r3, lr}
	cmp r0, #0
	beq _020C79AC
	mov r0, #0x40
	bl FUN_020D53DC
	pop {r3, pc}
_020C79AC:
	bl FUN_020D53FC
	pop {r3, pc}
	arm_func_end FUN_020C7994

	arm_func_start FUN_020C79B4
FUN_020C79B4: @ 0x020C79B4
	push {r4, lr}
	ldr r0, _020C7A88 @ =0x021DD420
	ldr r0, [r0, #4]
	cmp r0, #0
	bne _020C7A68
	mov r4, #0
_020C79CC:
	mov r0, r4
	bl FUN_020D5604
	cmp r0, #0
	bne _020C79CC
	ldr r0, _020C7A88 @ =0x021DD420
	ldr r0, [r0, #8]
	bl FUN_020D5A28
	cmp r0, #0
	moveq r0, #0
	popeq {r4, pc}
	ldr r0, _020C7A88 @ =0x021DD420
	ldr r2, _020C7A8C @ =0x021DD460
	ldrsb r1, [r0]
	cmp r1, #0
	movlt r1, #1
	strblt r1, [r0]
	ldr r0, _020C7A88 @ =0x021DD420
	ldrsb r1, [r0]
	ldr r0, _020C7A90 @ =0x000011E0
	mla r0, r1, r0, r2
	bl FUN_020D541C
	bl FUN_020D59FC
	ldr r1, _020C7A88 @ =0x021DD420
	ldr r3, _020C7A8C @ =0x021DD460
	str r0, [r1, #8]
	ldrsb r0, [r1]
	cmp r0, #0
	moveq r0, #1
	movne r0, #0
	strb r0, [r1]
	ldr r0, _020C7A88 @ =0x021DD420
	ldr r1, _020C7A90 @ =0x000011E0
	ldrsb r2, [r0]
	mla r0, r2, r1, r3
	bl FUN_020D285C
	mov r0, #0
	bl FUN_020D57D4
	mov r0, #1
	pop {r4, pc}
_020C7A68:
	ldr r0, _020C7A8C @ =0x021DD460
	bl FUN_020D541C
	bl FUN_020D59FC
	ldr r1, _020C7A88 @ =0x021DD420
	str r0, [r1, #8]
	mov r0, #0
	str r0, [r1, #4]
	pop {r4, pc}
	.align 2, 0
_020C7A88: .4byte 0x021DD420
_020C7A8C: .4byte 0x021DD460
_020C7A90: .4byte 0x000011E0
	arm_func_end FUN_020C79B4

	arm_func_start FUN_020C7A94
FUN_020C7A94: @ 0x020C7A94
	push {r3, lr}
	ldr r2, _020C7AD4 @ =0x021DD420
	mov ip, r0
	ldrsb r3, [r2]
	mov r2, r1
	cmp r3, #0
	movlt r0, #0
	ldrge r1, _020C7AD8 @ =0x021DD460
	ldrge r0, _020C7ADC @ =0x000011E0
	mlage r0, r3, r0, r1
	cmp r0, #0
	moveq r0, #0
	popeq {r3, pc}
	mov r1, ip
	bl FUN_020D5DA4
	pop {r3, pc}
	.align 2, 0
_020C7AD4: .4byte 0x021DD420
_020C7AD8: .4byte 0x021DD460
_020C7ADC: .4byte 0x000011E0
	arm_func_end FUN_020C7A94

	arm_func_start FUN_020C7AE0
FUN_020C7AE0: @ 0x020C7AE0
	push {r4, lr}
	ldr r3, _020C7B28 @ =0x021DD420
	mov r4, r0
	ldrsb ip, [r3]
	mov lr, r1
	mov r3, r2
	cmp ip, #0
	movlt r0, #0
	ldrge r1, _020C7B2C @ =0x021DD460
	ldrge r0, _020C7B30 @ =0x000011E0
	mlage r0, ip, r0, r1
	cmp r0, #0
	moveq r0, #0
	popeq {r4, pc}
	mov r1, r4
	mov r2, lr
	bl FUN_020D5F34
	pop {r4, pc}
	.align 2, 0
_020C7B28: .4byte 0x021DD420
_020C7B2C: .4byte 0x021DD460
_020C7B30: .4byte 0x000011E0
	arm_func_end FUN_020C7AE0

	arm_func_start FUN_020C7B34
FUN_020C7B34: @ 0x020C7B34
	push {r4, lr}
	bl FUN_020C921C
	mov r0, #0
	mov r1, r0
	mov r2, r0
	mov r3, r0
	bl FUN_020D519C
	bl FUN_020D59FC
	mov r4, r0
	mov r0, #1
	bl FUN_020D57D4
	mov r0, r4
	bl FUN_020D5990
	pop {r4, pc}
	arm_func_end FUN_020C7B34

	arm_func_start FUN_020C7B6C
FUN_020C7B6C: @ 0x020C7B6C
	ldr ip, _020C7B74 @ =FUN_020C927C
	bx ip
	.align 2, 0
_020C7B74: .4byte FUN_020C927C
	arm_func_end FUN_020C7B6C

	arm_func_start FUN_020C7B78
FUN_020C7B78: @ 0x020C7B78
	push {r4, lr}
	movs r4, r0
	moveq r0, #1
	popeq {r4, pc}
	ldr r1, _020C7BBC @ =0x021DF820
	ldr r1, [r1, #8]
	tst r4, r1
	movne r0, #0
	popne {r4, pc}
	mov r1, #0
	bl FUN_020D5240
	ldr r1, _020C7BBC @ =0x021DF820
	mov r0, #1
	ldr r2, [r1, #8]
	orr r2, r2, r4
	str r2, [r1, #8]
	pop {r4, pc}
	.align 2, 0
_020C7BBC: .4byte 0x021DF820
	arm_func_end FUN_020C7B78

	arm_func_start FUN_020C7BC0
FUN_020C7BC0: @ 0x020C7BC0
	push {r4, lr}
	movs r4, r0
	popeq {r4, pc}
	mov r1, #0
	bl FUN_020D5260
	ldr r0, _020C7BEC @ =0x021DF820
	mvn r1, r4
	ldr r2, [r0, #8]
	and r1, r2, r1
	str r1, [r0, #8]
	pop {r4, pc}
	.align 2, 0
_020C7BEC: .4byte 0x021DF820
	arm_func_end FUN_020C7BC0

	arm_func_start FUN_020C7BF0
FUN_020C7BF0: @ 0x020C7BF0
	ldr r1, _020C7C08 @ =0x021DF820
	mvn r0, r0
	ldr r2, [r1]
	and r0, r2, r0
	str r0, [r1]
	bx lr
	.align 2, 0
_020C7C08: .4byte 0x021DF820
	arm_func_end FUN_020C7BF0

	arm_func_start FUN_020C7C0C
FUN_020C7C0C: @ 0x020C7C0C
	ldr r0, _020C7C50 @ =0x021DF820
	mov r3, #1
	ldr r1, [r0, #4]
	mov r0, #0
_020C7C1C:
	tst r1, r3
	bne _020C7C38
	ldr r1, _020C7C50 @ =0x021DF820
	ldr r2, [r1, #4]
	orr r2, r2, r3
	str r2, [r1, #4]
	bx lr
_020C7C38:
	add r0, r0, #1
	cmp r0, #8
	lsl r3, r3, #1
	blt _020C7C1C
	mvn r0, #0
	bx lr
	.align 2, 0
_020C7C50: .4byte 0x021DF820
	arm_func_end FUN_020C7C0C

	arm_func_start FUN_020C7C54
FUN_020C7C54: @ 0x020C7C54
	ldr r1, _020C7C70 @ =0x021DF820
	mov r2, #1
	mvn r0, r2, lsl r0
	ldr r2, [r1, #4]
	and r0, r2, r0
	str r0, [r1, #4]
	bx lr
	.align 2, 0
_020C7C70: .4byte 0x021DF820
	arm_func_end FUN_020C7C54

	arm_func_start FUN_020C7C74
FUN_020C7C74: @ 0x020C7C74
	ldr r0, _020C7C8C @ =0x021DF820
	mov r1, #0
	str r1, [r0, #8]
	str r1, [r0]
	str r1, [r0, #4]
	bx lr
	.align 2, 0
_020C7C8C: .4byte 0x021DF820
	arm_func_end FUN_020C7C74

	arm_func_start FUN_020C7C90
FUN_020C7C90: @ 0x020C7C90
	push {r4, lr}
	mov r4, r0
	mov r0, #1
	lsl r0, r0, r4
	bl FUN_020C7B78
	cmp r0, #0
	moveq r0, #0
	popeq {r4, pc}
	mov r0, #0x14
	mul r0, r4, r0
	ldr r2, _020C7CD0 @ =0x021DF82C
	mov r1, #0
	str r4, [r2, r0]
	add r0, r2, r0
	str r1, [r0, #8]
	pop {r4, pc}
	.align 2, 0
_020C7CD0: .4byte 0x021DF82C
	arm_func_end FUN_020C7C90

	arm_func_start FUN_020C7CD4
FUN_020C7CD4: @ 0x020C7CD4
	ldr r0, [r0]
	mov r1, #1
	ldr ip, _020C7CE8 @ =FUN_020C7BC0
	lsl r0, r1, r0
	bx ip
	.align 2, 0
_020C7CE8: .4byte FUN_020C7BC0
	arm_func_end FUN_020C7CD4

	arm_func_start FUN_020C7CEC
FUN_020C7CEC: @ 0x020C7CEC
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #0x18
	movs r8, r1
	mov sb, r0
	mov r7, r2
	mov r6, r3
	beq _020C7D14
	cmp r8, #1
	beq _020C7D28
	b _020C7D38
_020C7D14:
	ldr r1, [sp, #0x38]
	ldr r0, [sp, #0x3c]
	asr r4, r1, #2
	rsb r5, r4, r0, asr #2
	b _020C7D38
_020C7D28:
	ldr r1, [sp, #0x38]
	ldr r0, [sp, #0x3c]
	asr r4, r1, #1
	rsb r5, r4, r0, asr #1
_020C7D38:
	ldr r2, [sp, #0x40]
	ldr r0, _020C7E04 @ =0xD87F8000
	asr r3, r2, #0x1f
	mov r1, #0x7f
	bl FUN_020F2900
	ldr r2, [sp, #0x48]
	asr r3, r2, #0x1f
	bl FUN_020F2900
	cmp r1, #0
	mov r2, #0x10
	cmpeq r0, #0x10
	mov r3, #0
	movlo r0, r2
	blo _020C7D80
	ldr r2, _020C7E08 @ =0x0000FFFF
	cmp r1, r3
	cmpeq r0, r2
	movhi r0, r2
_020C7D80:
	ldr r1, [sp, #0x44]
	stm sp, {r4, r5}
	str r1, [sp, #8]
	mov r1, #0
	str r1, [sp, #0xc]
	cmp r6, #0
	movne r3, #1
	ldr r1, [sp, #0x4c]
	str r0, [sp, #0x10]
	str r1, [sp, #0x14]
	ldr r0, [sb]
	moveq r3, #2
	mov r1, r8
	mov r2, r7
	bl FUN_020D52E8
	mov r1, #0
	ldr r0, [sb]
	mov r2, #1
	lsl r0, r2, r0
	mov r2, r1
	mov r3, r1
	bl FUN_020D5174
	mov r0, #1
	str r0, [sb, #8]
	mov r0, #0
	str r0, [sb, #0xc]
	bl FUN_020D59FC
	str r0, [sb, #0x10]
	ldr r1, [sp, #0x40]
	mov r0, #1
	str r1, [sb, #4]
	add sp, sp, #0x18
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0
_020C7E04: .4byte 0xD87F8000
_020C7E08: .4byte 0x0000FFFF
	arm_func_end FUN_020C7CEC

	arm_func_start FUN_020C7E0C
FUN_020C7E0C: @ 0x020C7E0C
	push {r4, lr}
	mov r4, r0
	ldr r0, [r4, #8]
	cmp r0, #0
	popeq {r4, pc}
	ldr r0, [r4]
	mov r2, #1
	mov r1, #0
	lsl r0, r2, r0
	mov r2, r1
	mov r3, r1
	bl FUN_020D519C
	mov r0, #0
	str r0, [r4, #8]
	pop {r4, pc}
	arm_func_end FUN_020C7E0C

	arm_func_start FUN_020C7E48
FUN_020C7E48: @ 0x020C7E48
	push {r3, lr}
	ldr r2, [r0, #8]
	cmp r2, #0
	popeq {r3, pc}
	ldr r0, [r0]
	mov r2, #1
	lsl r0, r2, r0
	mov r2, #0
	bl FUN_020D52A0
	pop {r3, pc}
	arm_func_end FUN_020C7E48

	arm_func_start FUN_020C7E70
FUN_020C7E70: @ 0x020C7E70
	push {r3, r4, r5, lr}
	mov r5, r0
	ldr r0, [r5, #8]
	mov r4, r1
	cmp r0, #0
	popeq {r3, r4, r5, pc}
	ldr r2, [r5, #4]
	ldr r0, _020C7EEC @ =0xD87F8000
	asr r3, r2, #0x1f
	mov r1, #0x7f
	bl FUN_020F2900
	mov r2, r4
	asr r3, r4, #0x1f
	bl FUN_020F2900
	mov r3, r0
	cmp r1, #0
	mov r0, #0x10
	cmpeq r3, #0x10
	mov r2, #0
	movlo r3, r0
	blo _020C7ED4
	ldr r0, _020C7EF0 @ =0x0000FFFF
	cmp r1, r2
	cmpeq r3, r0
	movhi r3, r0
_020C7ED4:
	ldr r0, [r5]
	mov r1, #1
	lsl r0, r1, r0
	mov r1, r3
	bl FUN_020D5280
	pop {r3, r4, r5, pc}
	.align 2, 0
_020C7EEC: .4byte 0xD87F8000
_020C7EF0: .4byte 0x0000FFFF
	arm_func_end FUN_020C7E70

	arm_func_start FUN_020C7EF4
FUN_020C7EF4: @ 0x020C7EF4
	push {r3, lr}
	ldr r2, [r0, #8]
	cmp r2, #0
	popeq {r3, pc}
	ldr r0, [r0]
	mov r2, #1
	lsl r0, r2, r0
	bl FUN_020D52C8
	pop {r3, pc}
	arm_func_end FUN_020C7EF4

	arm_func_start FUN_020C7F18
FUN_020C7F18: @ 0x020C7F18
	push {r4, lr}
	mov r4, r0
	ldr r0, [r4, #8]
	cmp r0, #0
	moveq r0, #0
	popeq {r4, pc}
	ldr r0, [r4, #0xc]
	cmp r0, #0
	bne _020C7F54
	ldr r0, [r4, #0x10]
	bl FUN_020D5A28
	cmp r0, #0
	mov r0, #1
	popeq {r4, pc}
	str r0, [r4, #0xc]
_020C7F54:
	bl FUN_020D5D30
	ldr r1, [r4]
	mov r2, #1
	tst r0, r2, lsl r1
	movne r0, r2
	moveq r0, #0
	streq r0, [r4, #8]
	pop {r4, pc}
	arm_func_end FUN_020C7F18

	arm_func_start FUN_020C7F74
FUN_020C7F74: @ 0x020C7F74
	mov r2, #0x24
	mul r2, r0, r2
	ldr r0, _020C7F88 @ =0x021DFDE4
	strb r1, [r0, r2]
	bx lr
	.align 2, 0
_020C7F88: .4byte 0x021DFDE4
	arm_func_end FUN_020C7F74

	arm_func_start FUN_020C7F8C
FUN_020C7F8C: @ 0x020C7F8C
	mov r2, #0x24
	mul r2, r0, r2
	lsl r0, r1, #0x10
	ldr r1, _020C7FA8 @ =0x021DFDDC
	lsr r0, r0, #0x10
	str r0, [r1, r2]
	bx lr
	.align 2, 0
_020C7FA8: .4byte 0x021DFDDC
	arm_func_end FUN_020C7F8C

	arm_func_start FUN_020C7FAC
FUN_020C7FAC: @ 0x020C7FAC
	mov r2, #0x24
	mul r2, r0, r2
	ldr r0, _020C7FC0 @ =0x021DFDE0
	str r1, [r0, r2]
	bx lr
	.align 2, 0
_020C7FC0: .4byte 0x021DFDE0
	arm_func_end FUN_020C7FAC

	arm_func_start FUN_020C7FC4
FUN_020C7FC4: @ 0x020C7FC4
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #4
	mov r5, r2
	mov r6, r0
	mov r0, r1
	mov r3, #0
	ldr r2, _020C8050 @ =FUN_020C89C8
	add r1, r5, #0x14
	str r3, [sp]
	bl FUN_020C9B50
	movs r4, r0
	addeq sp, sp, #4
	moveq r0, #0
	popeq {r3, r4, r5, r6, pc}
	mov r2, #0
	str r2, [r4, #0xc]
	str r6, [r4, #0x10]
	mov r1, r5
	add r0, r4, #0x14
	str r2, [r4, #8]
	bl FUN_020C9A0C
	cmp r0, #0
	addeq sp, sp, #4
	moveq r0, #0
	popeq {r3, r4, r5, r6, pc}
	ldr r2, _020C8054 @ =0x021DFDC4
	mov r1, #0x24
	mla r2, r6, r1, r2
	str r0, [r4, #8]
	mov r1, r4
	add r0, r2, #0xc
	bl FUN_020B4BAC
	mov r0, #1
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
	.align 2, 0
_020C8050: .4byte FUN_020C89C8
_020C8054: .4byte 0x021DFDC4
	arm_func_end FUN_020C7FC4

	arm_func_start FUN_020C8058
FUN_020C8058: @ 0x020C8058
	ldr ip, _020C8064 @ =FUN_020C86F0
	ldr r0, [r0]
	bx ip
	.align 2, 0
_020C8064: .4byte FUN_020C86F0
	arm_func_end FUN_020C8058

	arm_func_start FUN_020C8068
FUN_020C8068: @ 0x020C8068
	push {r3, r4, r5, r6, r7, lr}
	ldr r3, _020C80BC @ =0x021DFDC4
	mov r2, #0x24
	mla r6, r0, r2, r3
	ldr r5, _020C80C0 @ =0x021DF984
	mov r7, r1
	mov r4, #0
_020C8084:
	ldrb r0, [r5, #0x2c]
	cmp r0, #0
	beq _020C80A8
	ldr r0, [r5, #4]
	cmp r0, r6
	bne _020C80A8
	mov r0, r5
	mov r1, r7
	bl FUN_020C86F0
_020C80A8:
	add r4, r4, #1
	cmp r4, #0x10
	add r5, r5, #0x44
	blt _020C8084
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020C80BC: .4byte 0x021DFDC4
_020C80C0: .4byte 0x021DF984
	arm_func_end FUN_020C8068

	arm_func_start FUN_020C80C4
FUN_020C80C4: @ 0x020C80C4
	push {r3, r4, r5, r6, r7, lr}
	ldr r5, _020C8118 @ =0x021DF984
	mov r7, r0
	mov r6, r1
	mov r4, #0
_020C80D8:
	ldrb r0, [r5, #0x2c]
	cmp r0, #0
	beq _020C8104
	ldrh r0, [r5, #0x34]
	cmp r0, #1
	ldrheq r0, [r5, #0x38]
	cmpeq r0, r7
	bne _020C8104
	mov r0, r5
	mov r1, r6
	bl FUN_020C86F0
_020C8104:
	add r4, r4, #1
	cmp r4, #0x10
	add r5, r5, #0x44
	blt _020C80D8
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020C8118: .4byte 0x021DF984
	arm_func_end FUN_020C80C4

	arm_func_start FUN_020C811C
FUN_020C811C: @ 0x020C811C
	push {r4, r5, r6, lr}
	ldr r5, _020C8158 @ =0x021DF984
	mov r6, r0
	mov r4, #0
_020C812C:
	ldrb r0, [r5, #0x2c]
	cmp r0, #0
	beq _020C8144
	mov r0, r5
	mov r1, r6
	bl FUN_020C86F0
_020C8144:
	add r4, r4, #1
	cmp r4, #0x10
	add r5, r5, #0x44
	blt _020C812C
	pop {r4, r5, r6, pc}
	.align 2, 0
_020C8158: .4byte 0x021DF984
	arm_func_end FUN_020C811C

	arm_func_start FUN_020C815C
FUN_020C815C: @ 0x020C815C
	ldr ip, _020C8168 @ =FUN_020C873C
	ldr r0, [r0]
	bx ip
	.align 2, 0
_020C8168: .4byte FUN_020C873C
	arm_func_end FUN_020C815C

	arm_func_start FUN_020C816C
FUN_020C816C: @ 0x020C816C
	push {r4, r5, r6, r7, r8, lr}
	mov r2, #0x24
	mul r6, r0, r2
	ldr r5, _020C81C0 @ =0x021DFDC4
	mov r8, r1
	add r0, r5, r6
	mov r1, #0
	bl FUN_020B4D14
	movs r7, r0
	popeq {r4, r5, r6, r7, r8, pc}
_020C8194:
	mov r1, r7
	add r0, r5, r6
	bl FUN_020B4D14
	mov r4, r0
	mov r0, r7
	mov r1, r8
	bl FUN_020C873C
	mov r7, r4
	cmp r4, #0
	bne _020C8194
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0
_020C81C0: .4byte 0x021DFDC4
	arm_func_end FUN_020C816C

	arm_func_start FUN_020C81C4
FUN_020C81C4: @ 0x020C81C4
	mov r1, #0
	str r1, [r0]
	bx lr
	arm_func_end FUN_020C81C4

	arm_func_start FUN_020C81D0
FUN_020C81D0: @ 0x020C81D0
	ldr r1, [r0]
	cmp r1, #0
	bxeq lr
	ldr r1, [r0]
	mov r2, #0
	str r2, [r1]
	str r2, [r0]
	bx lr
	arm_func_end FUN_020C81D0

	arm_func_start FUN_020C81F0
FUN_020C81F0: @ 0x020C81F0
	mov r1, #0x24
	mul r1, r0, r1
	ldr r0, _020C8204 @ =0x021DFDCC
	ldrh r0, [r0, r1]
	bx lr
	.align 2, 0
_020C8204: .4byte 0x021DFDCC
	arm_func_end FUN_020C81F0

	arm_func_start FUN_020C8208
FUN_020C8208: @ 0x020C8208
	ldr r2, [r0]
	cmp r2, #0
	ldrne r0, [r0]
	strbne r1, [r0, #0x41]
	bx lr
	arm_func_end FUN_020C8208

	arm_func_start FUN_020C821C
FUN_020C821C: @ 0x020C821C
	ldr r2, [r0]
	cmp r2, #0
	ldrne r0, [r0]
	strbne r1, [r0, #0x40]
	bx lr
	arm_func_end FUN_020C821C

	arm_func_start FUN_020C8230
FUN_020C8230: @ 0x020C8230
	push {r3, lr}
	ldr r3, [r0]
	cmp r3, #0
	ldrne r3, [r0]
	ldrbne r0, [r3, #0x2c]
	cmpne r0, #2
	popeq {r3, pc}
	add r0, r3, #0x1c
	lsl r1, r1, #8
	bl FUN_020CAEE4
	pop {r3, pc}
	arm_func_end FUN_020C8230

	arm_func_start FUN_020C825C
FUN_020C825C: @ 0x020C825C
	push {r3, lr}
	ldr r2, [r0]
	cmp r2, #0
	popeq {r3, pc}
	ldr r0, [r0]
	ldrb r0, [r0, #0x3c]
	bl FUN_020D50FC
	pop {r3, pc}
	arm_func_end FUN_020C825C

	arm_func_start FUN_020C827C
FUN_020C827C: @ 0x020C827C
	push {r3, lr}
	ldr r3, [r0]
	cmp r3, #0
	popeq {r3, pc}
	ldr r0, [r0]
	ldrb r0, [r0, #0x3c]
	bl FUN_020D5114
	pop {r3, pc}
	arm_func_end FUN_020C827C

	arm_func_start FUN_020C829C
FUN_020C829C: @ 0x020C829C
	push {r3, lr}
	ldr r3, [r0]
	cmp r3, #0
	popeq {r3, pc}
	ldr r0, [r0]
	ldrb r0, [r0, #0x3c]
	bl FUN_020D5130
	pop {r3, pc}
	arm_func_end FUN_020C829C

	arm_func_start FUN_020C82BC
FUN_020C82BC: @ 0x020C82BC
	push {r3, lr}
	ldr r3, [r0]
	cmp r3, #0
	popeq {r3, pc}
	ldr r0, [r0]
	ldrb r0, [r0, #0x3c]
	bl FUN_020D514C
	pop {r3, pc}
	arm_func_end FUN_020C82BC

	arm_func_start FUN_020C82DC
FUN_020C82DC: @ 0x020C82DC
	push {r3, lr}
	ldr r2, [r0]
	cmp r2, #0
	popeq {r3, pc}
	ldr r0, [r0]
	ldrb r0, [r0, #0x3c]
	bl FUN_020D50CC
	pop {r3, pc}
	arm_func_end FUN_020C82DC

	arm_func_start FUN_020C82FC
FUN_020C82FC: @ 0x020C82FC
	ldr r2, [r0]
	cmp r2, #0
	bxeq lr
	ldr r2, [r0]
	mov r3, #1
	strh r3, [r2, #0x34]
	ldr r0, [r0]
	strh r1, [r0, #0x38]
	bx lr
	arm_func_end FUN_020C82FC

	arm_func_start FUN_020C8320
FUN_020C8320: @ 0x020C8320
	ldr r3, [r0]
	cmp r3, #0
	bxeq lr
	ldr r3, [r0]
	mov ip, #2
	strh ip, [r3, #0x34]
	ldr r3, [r0]
	strh r1, [r3, #0x38]
	ldr r0, [r0]
	strh r2, [r0, #0x3a]
	bx lr
	arm_func_end FUN_020C8320

	arm_func_start FUN_020C834C
FUN_020C834C: @ 0x020C834C
	ldr r1, [r0]
	cmp r1, #0
	mvneq r0, #0
	bxeq lr
	ldr r1, [r0]
	ldrh r0, [r1, #0x34]
	cmp r0, #1
	mvnne r0, #0
	ldrheq r0, [r1, #0x38]
	bx lr
	arm_func_end FUN_020C834C

	arm_func_start FUN_020C8374
FUN_020C8374: @ 0x020C8374
	push {r4, lr}
	ldr r3, [r0]
	mov r4, r2
	cmp r3, #0
	moveq r0, #0
	popeq {r4, pc}
	ldr r2, [r0]
	ldrb r0, [r2, #0x2d]
	cmp r0, #0
	bne _020C83AC
	mvn r0, #0
	strh r0, [r4]
	mov r0, #1
	pop {r4, pc}
_020C83AC:
	ldrb r0, [r2, #0x3c]
	bl FUN_020D5D5C
	strh r0, [r4]
	mov r0, #1
	pop {r4, pc}
	arm_func_end FUN_020C8374

	arm_func_start FUN_020C83C0
FUN_020C83C0: @ 0x020C83C0
	push {r3, lr}
	ldr r3, [r0]
	cmp r3, #0
	moveq r0, #0
	popeq {r3, pc}
	ldr r0, [r0]
	ldrb r0, [r0, #0x3c]
	bl FUN_020C7AE0
	pop {r3, pc}
	arm_func_end FUN_020C83C0

	arm_func_start FUN_020C83E4
FUN_020C83E4: @ 0x020C83E4
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	ldr r0, _020C8488 @ =0x021DF978
	mov r1, #0x14
	bl FUN_020B4B68
	ldr r0, _020C848C @ =0x021DF96C
	mov r1, #0x14
	bl FUN_020B4B68
	mov r6, #0
	ldr r7, _020C8490 @ =0x021DF984
	ldr r4, _020C848C @ =0x021DF96C
	mov r5, r6
_020C8410:
	strb r5, [r7, #0x2c]
	mov r0, r4
	mov r1, r7
	strb r6, [r7, #0x3c]
	bl FUN_020B4BAC
	add r6, r6, #1
	cmp r6, #0x10
	add r7, r7, #0x44
	blt _020C8410
	mov sl, #0
	ldr sb, _020C8494 @ =0x021DFDC4
	mov r8, #0xc
	mov r7, sl
	mov r6, #0x7f
	mov r5, #1
	mov r4, sl
_020C8450:
	mov r0, sb
	mov r1, r8
	bl FUN_020B4B68
	mov r1, r7
	add r0, sb, #0xc
	bl FUN_020B4B68
	strb r6, [sb, #0x20]
	str r5, [sb, #0x18]
	add sl, sl, #1
	str r4, [sb, #0x1c]
	cmp sl, #0x20
	add sb, sb, #0x24
	blt _020C8450
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0
_020C8488: .4byte 0x021DF978
_020C848C: .4byte 0x021DF96C
_020C8490: .4byte 0x021DF984
_020C8494: .4byte 0x021DFDC4
	arm_func_end FUN_020C83E4

	arm_func_start FUN_020C8498
FUN_020C8498: @ 0x020C8498
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	bl FUN_020D5D04
	mov fp, r0
	ldr r0, _020C85F0 @ =0x021DF978
	mov r1, #0
	bl FUN_020B4D14
	movs r6, r0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r4, #0x8000
	ldr r5, _020C85F4 @ =0x0210D750
	rsb r4, r4, #0
_020C84C4:
	ldr r0, _020C85F0 @ =0x021DF978
	mov r1, r6
	bl FUN_020B4D14
	ldrb r1, [r6, #0x2d]
	mov r7, r0
	cmp r1, #0
	bne _020C84F4
	ldr r0, [r6, #0x30]
	bl FUN_020D5A28
	cmp r0, #0
	movne r0, #1
	strbne r0, [r6, #0x2d]
_020C84F4:
	ldrb r0, [r6, #0x2d]
	cmp r0, #0
	beq _020C851C
	ldrb r1, [r6, #0x3c]
	mov r0, #1
	tst fp, r0, lsl r1
	bne _020C851C
	mov r0, r6
	bl FUN_020C8944
	b _020C85E0
_020C851C:
	add r0, r6, #0x1c
	bl FUN_020CAF40
	ldr r0, [r6, #4]
	ldrb r2, [r6, #0x41]
	ldrb r0, [r0, #0x20]
	ldrb r1, [r6, #0x40]
	lsl r2, r2, #1
	lsl r0, r0, #1
	lsl r1, r1, #1
	ldrsh sl, [r5, r0]
	add r0, r6, #0x1c
	ldrsh r8, [r5, r2]
	ldrsh sb, [r5, r1]
	bl FUN_020CAF0C
	asr r0, r0, #8
	lsl r0, r0, #1
	add r1, sb, r8
	ldrsh r0, [r5, r0]
	add r1, sl, r1
	add r8, r0, r1
	cmp r8, r4
	movlt r8, r4
	blt _020C8584
	ldr r0, _020C85F8 @ =0x00007FFF
	cmp r8, r0
	movgt r8, r0
_020C8584:
	ldrsh r0, [r6, #0x3e]
	cmp r8, r0
	beq _020C85A0
	ldrb r0, [r6, #0x3c]
	mov r1, r8
	bl FUN_020D50E4
	strh r8, [r6, #0x3e]
_020C85A0:
	ldrb r0, [r6, #0x2c]
	cmp r0, #2
	bne _020C85C4
	add r0, r6, #0x1c
	bl FUN_020CAF58
	cmp r0, #0
	beq _020C85C4
	mov r0, r6
	bl FUN_020C88A4
_020C85C4:
	ldrb r0, [r6, #0x2f]
	cmp r0, #0
	beq _020C85E0
	ldrb r0, [r6, #0x3c]
	bl FUN_020D508C
	mov r0, #0
	strb r0, [r6, #0x2f]
_020C85E0:
	mov r6, r7
	cmp r7, #0
	bne _020C84C4
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020C85F0: .4byte 0x021DF978
_020C85F4: .4byte 0x0210D750
_020C85F8: .4byte 0x00007FFF
	arm_func_end FUN_020C8498

	arm_func_start FUN_020C85FC
FUN_020C85FC: @ 0x020C85FC
	push {r3, r4, r5, r6, r7, lr}
	ldr ip, _020C8690 @ =0x021DFDC4
	mov r3, #0x24
	mov r4, r0
	ldr r5, [r4]
	mla r6, r1, r3, ip
	mov r7, r2
	cmp r5, #0
	beq _020C8624
	bl FUN_020C81D0
_020C8624:
	ldrh r1, [r6, #8]
	ldr r0, [r6, #0x18]
	cmp r1, r0
	blo _020C8660
	mov r0, r6
	mov r1, #0
	bl FUN_020B4D14
	cmp r0, #0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	ldrb r1, [r0, #0x3d]
	cmp r7, r1
	movlt r0, #0
	poplt {r3, r4, r5, r6, r7, pc}
	bl FUN_020C88A4
_020C8660:
	mov r0, r7
	bl FUN_020C88DC
	movs r5, r0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	mov r0, r6
	mov r1, r5
	bl FUN_020C8800
	str r4, [r5]
	mov r0, r5
	str r5, [r4]
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020C8690: .4byte 0x021DFDC4
	arm_func_end FUN_020C85FC

	arm_func_start FUN_020C8694
FUN_020C8694: @ 0x020C8694
	ldr ip, _020C869C @ =FUN_020C8944
	bx ip
	.align 2, 0
_020C869C: .4byte FUN_020C8944
	arm_func_end FUN_020C8694

	arm_func_start FUN_020C86A0
FUN_020C86A0: @ 0x020C86A0
	push {r3, r4, r5, lr}
	mov r5, r0
	ldrb r0, [r5, #0x3c]
	ldr r4, [r5, #4]
	bl FUN_020D5064
	ldr r2, [r4, #0x1c]
	cmp r2, #0
	beq _020C86CC
	ldrb r0, [r5, #0x3c]
	ldr r1, _020C86EC @ =0x0000FFFF
	bl FUN_020D514C
_020C86CC:
	mov r0, r5
	bl FUN_020C87B8
	bl FUN_020D59FC
	str r0, [r5, #0x30]
	mov r0, #1
	strb r0, [r5, #0x2f]
	strb r0, [r5, #0x2c]
	pop {r3, r4, r5, pc}
	.align 2, 0
_020C86EC: .4byte 0x0000FFFF
	arm_func_end FUN_020C86A0

	arm_func_start FUN_020C86F0
FUN_020C86F0: @ 0x020C86F0
	push {r4, lr}
	movs r4, r0
	mov r2, r1
	ldrbne r1, [r4, #0x2c]
	cmpne r1, #0
	popeq {r4, pc}
	cmp r2, #0
	bne _020C8718
	bl FUN_020C88A4
	pop {r4, pc}
_020C8718:
	add r0, r4, #0x1c
	mov r1, #0
	bl FUN_020CAEE4
	mov r0, r4
	mov r1, #0
	bl FUN_020C8A18
	mov r0, #2
	strb r0, [r4, #0x2c]
	pop {r4, pc}
	arm_func_end FUN_020C86F0

	arm_func_start FUN_020C873C
FUN_020C873C: @ 0x020C873C
	push {r3, r4, r5, lr}
	movs r5, r0
	ldrbne r0, [r5, #0x2e]
	mov r4, r1
	cmpne r4, r0
	popeq {r3, r4, r5, pc}
	ldrb r0, [r5, #0x3c]
	bl FUN_020D50AC
	strb r4, [r5, #0x2e]
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020C873C

	arm_func_start FUN_020C8764
FUN_020C8764: @ 0x020C8764
	push {r4, r5, r6, lr}
	ldr r3, _020C87B4 @ =0x021DFDC4
	mov r2, #0x24
	mla r5, r0, r2, r3
	mov r6, r1
	add r0, r5, #0xc
	mov r1, #0
	bl FUN_020B4D14
	movs r4, r0
	moveq r0, #0
	popeq {r4, r5, r6, pc}
	mov r1, r4
	add r0, r5, #0xc
	bl FUN_020B4CB4
	str r6, [r4, #0xc]
	str r4, [r6, #8]
	ldr r0, [r4, #8]
	bl FUN_020C9A94
	ldr r0, [r4, #8]
	pop {r4, r5, r6, pc}
	.align 2, 0
_020C87B4: .4byte 0x021DFDC4
	arm_func_end FUN_020C8764

	arm_func_start FUN_020C87B8
FUN_020C87B8: @ 0x020C87B8
	push {r4, lr}
	mov r4, r0
	mov r0, #0
	strb r0, [r4, #0x2e]
	strb r0, [r4, #0x2d]
	strb r0, [r4, #0x2f]
	strh r0, [r4, #0x34]
	strh r0, [r4, #0x3e]
	mov r1, #0x7f
	strb r1, [r4, #0x40]
	add r0, r4, #0x1c
	strb r1, [r4, #0x41]
	bl FUN_020CAECC
	add r0, r4, #0x1c
	mov r1, #0x7f00
	mov r2, #1
	bl FUN_020CAEE4
	pop {r4, pc}
	arm_func_end FUN_020C87B8

	arm_func_start FUN_020C8800
FUN_020C8800: @ 0x020C8800
	push {r3, r4, r5, lr}
	mov r4, r1
	mov r1, #0
	mov r5, r0
	bl FUN_020B4D14
	movs r1, r0
	beq _020C883C
_020C881C:
	ldrb r2, [r4, #0x3d]
	ldrb r0, [r1, #0x3d]
	cmp r2, r0
	blo _020C883C
	mov r0, r5
	bl FUN_020B4D14
	movs r1, r0
	bne _020C881C
_020C883C:
	mov r0, r5
	mov r2, r4
	bl FUN_020B4C50
	str r5, [r4, #4]
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020C8800

	arm_func_start FUN_020C8850
FUN_020C8850: @ 0x020C8850
	push {r3, r4, r5, lr}
	mov r5, r0
	ldr r0, _020C88A0 @ =0x021DF978
	mov r1, #0
	bl FUN_020B4D14
	movs r1, r0
	beq _020C8890
	ldr r4, _020C88A0 @ =0x021DF978
_020C8870:
	ldrb r2, [r5, #0x3d]
	ldrb r0, [r1, #0x3d]
	cmp r2, r0
	blo _020C8890
	mov r0, r4
	bl FUN_020B4D14
	movs r1, r0
	bne _020C8870
_020C8890:
	ldr r0, _020C88A0 @ =0x021DF978
	mov r2, r5
	bl FUN_020B4C50
	pop {r3, r4, r5, pc}
	.align 2, 0
_020C88A0: .4byte 0x021DF978
	arm_func_end FUN_020C8850

	arm_func_start FUN_020C88A4
FUN_020C88A4: @ 0x020C88A4
	push {r4, lr}
	mov r4, r0
	ldrb r0, [r4, #0x2c]
	cmp r0, #2
	bne _020C88C4
	ldrb r0, [r4, #0x3c]
	ldr r1, _020C88D8 @ =0xFFFFFD2D
	bl FUN_020D50E4
_020C88C4:
	ldrb r0, [r4, #0x3c]
	bl FUN_020D5044
	mov r0, r4
	bl FUN_020C8944
	pop {r4, pc}
	.align 2, 0
_020C88D8: .4byte 0xFFFFFD2D
	arm_func_end FUN_020C88A4

	arm_func_start FUN_020C88DC
FUN_020C88DC: @ 0x020C88DC
	push {r3, r4, r5, lr}
	mov r5, r0
	ldr r0, _020C893C @ =0x021DF96C
	mov r1, #0
	bl FUN_020B4D14
	movs r4, r0
	bne _020C891C
	ldr r0, _020C8940 @ =0x021DF978
	mov r1, #0
	bl FUN_020B4D14
	mov r4, r0
	ldrb r1, [r4, #0x3d]
	cmp r5, r1
	movlt r0, #0
	poplt {r3, r4, r5, pc}
	bl FUN_020C88A4
_020C891C:
	ldr r0, _020C893C @ =0x021DF96C
	mov r1, r4
	bl FUN_020B4CB4
	mov r0, r4
	strb r5, [r4, #0x3d]
	bl FUN_020C8850
	mov r0, r4
	pop {r3, r4, r5, pc}
	.align 2, 0
_020C893C: .4byte 0x021DF96C
_020C8940: .4byte 0x021DF978
	arm_func_end FUN_020C88DC

	arm_func_start FUN_020C8944
FUN_020C8944: @ 0x020C8944
	push {r3, r4, r5, lr}
	mov r4, r0
	ldr r1, [r4]
	cmp r1, #0
	movne r0, #0
	strne r0, [r1]
	strne r0, [r4]
	ldr r5, [r4, #4]
	mov r1, r4
	mov r0, r5
	bl FUN_020B4CB4
	mov r0, #0
	str r0, [r4, #4]
	ldr r1, [r4, #8]
	cmp r1, #0
	beq _020C899C
	add r0, r5, #0xc
	bl FUN_020B4BAC
	ldr r0, [r4, #8]
	mov r1, #0
	str r1, [r0, #0xc]
	str r1, [r4, #8]
_020C899C:
	ldr r0, _020C89C0 @ =0x021DF978
	mov r1, r4
	bl FUN_020B4CB4
	ldr r0, _020C89C4 @ =0x021DF96C
	mov r1, r4
	bl FUN_020B4BAC
	mov r0, #0
	strb r0, [r4, #0x2c]
	pop {r3, r4, r5, pc}
	.align 2, 0
_020C89C0: .4byte 0x021DF978
_020C89C4: .4byte 0x021DF96C
	arm_func_end FUN_020C8944

	arm_func_start FUN_020C89C8
FUN_020C89C8: @ 0x020C89C8
	push {r4, lr}
	mov r4, r0
	ldr r0, [r4, #8]
	cmp r0, #0
	popeq {r4, pc}
	bl FUN_020C9A7C
	ldr r1, [r4, #0xc]
	cmp r1, #0
	movne r0, #0
	strne r0, [r1, #8]
	popne {r4, pc}
	ldr r1, [r4, #0x10]
	ldr r2, _020C8A14 @ =0x021DFDC4
	mov r0, #0x24
	mla r0, r1, r0, r2
	mov r1, r4
	add r0, r0, #0xc
	bl FUN_020B4CB4
	pop {r4, pc}
	.align 2, 0
_020C8A14: .4byte 0x021DFDC4
	arm_func_end FUN_020C89C8

	arm_func_start FUN_020C8A18
FUN_020C8A18: @ 0x020C8A18
	push {r4, r5, r6, lr}
	mov r6, r0
	ldr r4, [r6, #4]
	mov r5, r1
	cmp r4, #0
	beq _020C8A44
	mov r0, r4
	mov r1, r6
	bl FUN_020B4CB4
	mov r0, #0
	str r0, [r6, #4]
_020C8A44:
	ldr r0, _020C8A74 @ =0x021DF978
	mov r1, r6
	bl FUN_020B4CB4
	strb r5, [r6, #0x3d]
	cmp r4, #0
	beq _020C8A68
	mov r0, r4
	mov r1, r6
	bl FUN_020C8800
_020C8A68:
	mov r0, r6
	bl FUN_020C8850
	pop {r4, r5, r6, pc}
	.align 2, 0
_020C8A74: .4byte 0x021DF978
	arm_func_end FUN_020C8A18

	arm_func_start FUN_020C8A78
FUN_020C8A78: @ 0x020C8A78
	push {r4, lr}
	ldr r1, _020C8AE0 @ =0x021E0244
	mov r4, r0
	ldr r0, [r1]
	cmp r0, #0
	bne _020C8AA8
	ldr r0, _020C8AE4 @ =0x021E0248
	mov r1, #0
	bl FUN_020B4B68
	ldr r0, _020C8AE0 @ =0x021E0244
	mov r1, #1
	str r1, [r0]
_020C8AA8:
	ldr r1, _020C8AE8 @ =FUN_020C8F58
	ldr r0, _020C8AEC @ =FUN_020C8FA4
	str r1, [r4, #8]
	str r4, [r4, #0xc]
	str r0, [r4, #0x14]
	str r4, [r4, #0x18]
	mov r0, #0
	str r0, [r4, #0x44]
	str r0, [r4, #0x48]
	ldr r0, [r4, #0x24]
	bic r0, r0, #1
	bic r0, r0, #2
	str r0, [r4, #0x24]
	pop {r4, pc}
	.align 2, 0
_020C8AE0: .4byte 0x021E0244
_020C8AE4: .4byte 0x021E0248
_020C8AE8: .4byte FUN_020C8F58
_020C8AEC: .4byte FUN_020C8FA4
	arm_func_end FUN_020C8A78

	arm_func_start FUN_020C8AF0
FUN_020C8AF0: @ 0x020C8AF0
	push {r4, r5, r6, lr}
	mov r4, r1
	mov r6, #0
	mov r5, r0
	mov ip, r6
	cmp r4, #0
	ble _020C8B30
	mov r1, #1
_020C8B10:
	ldrb r3, [r2, ip]
	add r0, r5, ip
	strb r3, [r0, #0x4c]
	ldrb r0, [r2, ip]
	add ip, ip, #1
	cmp ip, r4
	orr r6, r6, r1, lsl r0
	blt _020C8B10
_020C8B30:
	mov r0, r6
	bl FUN_020C7B78
	cmp r0, #0
	moveq r0, #0
	strne r4, [r5, #0x48]
	strne r6, [r5, #0x44]
	movne r0, #1
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020C8AF0

	arm_func_start FUN_020C8B50
FUN_020C8B50: @ 0x020C8B50
	push {r4, lr}
	mov r4, r0
	ldr r0, [r4, #0x44]
	cmp r0, #0
	popeq {r4, pc}
	bl FUN_020C7BC0
	mov r0, #0
	str r0, [r4, #0x44]
	str r0, [r4, #0x48]
	pop {r4, pc}
	arm_func_end FUN_020C8B50

	arm_func_start FUN_020C8B78
FUN_020C8B78: @ 0x020C8B78
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x1c
	mov sl, r0
	ldr r4, [sl, #0x24]
	mov sb, r1
	lsl r1, r4, #0x1f
	mov r8, r2
	mov r4, r3
	asrs r1, r1, #0x1f
	ldr fp, [sp, #0x44]
	beq _020C8BA8
	bl FUN_020C8D6C
_020C8BA8:
	ldr r2, [sl, #0x48]
	lsl r0, fp, #5
	mul r1, r2, r0
	mov r0, r4
	bl FUN_020F2BA4
	mul r1, r0, fp
	lsl r0, r1, #5
	ldr r2, [sp, #0x40]
	str r0, [sl, #0x28]
	cmp sb, #1
	lsreq r0, r0, #1
	mul r0, r2, r0
	mov r1, fp
	bl FUN_020F2BA4
	str r0, [sp, #0x18]
	bl FUN_020C7C0C
	cmp r0, #0
	str r0, [sl, #0x40]
	addlt sp, sp, #0x1c
	movlt r0, #0
	poplt {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, [sl, #0x48]
	mov r6, #0
	cmp r0, #0
	ble _020C8C80
	ldr r0, [sp, #0x40]
	ldr r5, _020C8D0C @ =0x021E0294
	lsl r7, r0, #5
	mov r4, r6
_020C8C1C:
	ldr r1, [sl, #0x28]
	add r0, sl, r6
	mla r2, r1, r6, r8
	ldrb r0, [r0, #0x4c]
	mov r3, #1
	str r2, [r5, r0, lsl #3]
	add r1, r5, r0, lsl #3
	str r4, [r1, #4]
	str r4, [sp]
	ldr r2, [sl, #0x28]
	mov r1, sb
	lsr r2, r2, #2
	str r2, [sp, #4]
	mov r2, #0x7f
	str r2, [sp, #8]
	str r4, [sp, #0xc]
	str r7, [sp, #0x10]
	mov r2, #0x40
	str r2, [sp, #0x14]
	ldr r2, [r5, r0, lsl #3]
	bl FUN_020D52E8
	ldr r0, [sl, #0x48]
	add r6, r6, #1
	cmp r6, r0
	blt _020C8C1C
_020C8C80:
	str sl, [sp]
	ldr r1, [sp, #0x18]
	ldr r0, [sl, #0x40]
	ldr r3, _020C8D10 @ =FUN_020C8E98
	mov r2, r1
	bl FUN_020D5200
	ldr r0, _020C8D14 @ =0x021E0248
	mov r1, sl
	bl FUN_020B4BAC
	str sb, [sl, #0x20]
	ldr r1, [sp, #0x48]
	str fp, [sl, #0x2c]
	ldr r0, [sp, #0x4c]
	str r1, [sl, #0x30]
	str r0, [sl, #0x34]
	mov r0, #0
	str r0, [sl, #0x38]
	str r0, [sl, #0x3c]
	ldr r0, [sl, #0x24]
	bic r0, r0, #1
	orr r0, r0, #1
	str r0, [sl, #0x24]
	bl FUN_020D3A38
	mov r4, r0
	mov r2, #1
	mov r0, sl
	mov r1, #0
	str r2, [sl, #0x2c]
	bl FUN_020C8EA8
	mov r0, r4
	str fp, [sl, #0x2c]
	bl FUN_020D3A4C
	mov r0, #1
	add sp, sp, #0x1c
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020C8D0C: .4byte 0x021E0294
_020C8D10: .4byte FUN_020C8E98
_020C8D14: .4byte 0x021E0248
	arm_func_end FUN_020C8B78

	arm_func_start FUN_020C8D18
FUN_020C8D18: @ 0x020C8D18
	push {r4, lr}
	mov r4, r0
	ldr r0, [r4, #0x40]
	mov r2, #1
	mov r1, #0
	lsl r2, r2, r0
	ldr r0, [r4, #0x44]
	mov r3, r1
	bl FUN_020D5174
	ldr r0, [r4, #0x24]
	lsl r0, r0, #0x1e
	asrs r0, r0, #0x1f
	popne {r4, pc}
	add r0, r4, #8
	bl FUN_020DB960
	add r0, r4, #0x14
	bl FUN_020DB978
	ldr r0, [r4, #0x24]
	orr r0, r0, #2
	str r0, [r4, #0x24]
	pop {r4, pc}
	arm_func_end FUN_020C8D18

	arm_func_start FUN_020C8D6C
FUN_020C8D6C: @ 0x020C8D6C
	push {r3, lr}
	ldr r1, [r0, #0x24]
	lsl r1, r1, #0x1f
	asrs r1, r1, #0x1f
	popeq {r3, pc}
	bl FUN_020C8DF4
	pop {r3, pc}
	arm_func_end FUN_020C8D6C

	arm_func_start FUN_020C8D88
FUN_020C8D88: @ 0x020C8D88
	push {r4, r5, r6, r7, r8, lr}
	mov r7, r0
	str r1, [r7, #0x3c]
	ldr r0, [r7, #0x48]
	mov r6, #0
	cmp r0, #0
	pople {r4, r5, r6, r7, r8, pc}
	ldr r4, _020C8DF0 @ =0x021E0294
	mov r8, #1
_020C8DAC:
	add r0, r7, r6
	ldrb r5, [r0, #0x4c]
	ldr r1, [r7, #0x3c]
	add r0, r4, r5, lsl #3
	ldr r0, [r0, #4]
	add r0, r1, r0
	bl FUN_020D60E4
	mov r2, r0
	lsl r0, r8, r5
	and r1, r2, #0xff
	asr r2, r2, #8
	bl FUN_020D52A0
	ldr r0, [r7, #0x48]
	add r6, r6, #1
	cmp r6, r0
	blt _020C8DAC
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0
_020C8DF0: .4byte 0x021E0294
	arm_func_end FUN_020C8D88

	arm_func_start FUN_020C8DF4
FUN_020C8DF4: @ 0x020C8DF4
	push {r3, r4, r5, lr}
	mov r4, r0
	ldr r0, [r4, #0x24]
	lsl r0, r0, #0x1e
	asrs r0, r0, #0x1f
	beq _020C8E5C
	ldr r0, [r4, #0x40]
	mov r2, #1
	mov r1, #0
	lsl r2, r2, r0
	ldr r0, [r4, #0x44]
	mov r3, r1
	bl FUN_020D519C
	add r0, r4, #8
	bl FUN_020DB990
	add r0, r4, #0x14
	bl FUN_020DB9A8
	ldr r0, [r4, #0x24]
	bic r0, r0, #2
	str r0, [r4, #0x24]
	bl FUN_020D59FC
	mov r5, r0
	mov r0, #1
	bl FUN_020D57D4
	mov r0, r5
	bl FUN_020D5990
_020C8E5C:
	mov r0, r4
	bl FUN_020C8E68
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020C8DF4

	arm_func_start FUN_020C8E68
FUN_020C8E68: @ 0x020C8E68
	push {r4, lr}
	mov r4, r0
	ldr r0, [r4, #0x40]
	bl FUN_020C7C54
	ldr r0, _020C8E94 @ =0x021E0248
	mov r1, r4
	bl FUN_020B4CB4
	ldr r0, [r4, #0x24]
	bic r0, r0, #1
	str r0, [r4, #0x24]
	pop {r4, pc}
	.align 2, 0
_020C8E94: .4byte 0x021E0248
	arm_func_end FUN_020C8E68

	arm_func_start FUN_020C8E98
FUN_020C8E98: @ 0x020C8E98
	ldr ip, _020C8EA4 @ =FUN_020C8EA8
	mov r1, #1
	bx ip
	.align 2, 0
_020C8EA4: .4byte FUN_020C8EA8
	arm_func_end FUN_020C8E98

	arm_func_start FUN_020C8EA8
FUN_020C8EA8: @ 0x020C8EA8
	push {r3, r4, r5, lr}
	sub sp, sp, #8
	mov r5, r0
	mov r4, r1
	ldr r0, [r5, #0x28]
	ldr r1, [r5, #0x2c]
	bl FUN_020F2BA4
	ldr r1, [r5, #0x48]
	ldr r2, [r5, #0x38]
	mov r3, r0
	mul ip, r3, r2
	cmp r1, #0
	mov lr, #0
	ble _020C8F0C
	ldr r2, _020C8F50 @ =0x021E0294
	ldr r0, _020C8F54 @ =0x021E0254
_020C8EE8:
	add r1, r5, lr
	ldrb r1, [r1, #0x4c]
	ldr r1, [r2, r1, lsl #3]
	add r1, r1, ip
	str r1, [r0, lr, lsl #2]
	ldr r1, [r5, #0x48]
	add lr, lr, #1
	cmp lr, r1
	blt _020C8EE8
_020C8F0C:
	ldr r0, [r5, #0x20]
	ldr r2, _020C8F54 @ =0x021E0254
	str r0, [sp]
	ldr ip, [r5, #0x34]
	mov r0, r4
	str ip, [sp, #4]
	ldr r4, [r5, #0x30]
	blx r4
	ldr r0, [r5, #0x38]
	add r1, r0, #1
	str r1, [r5, #0x38]
	ldr r0, [r5, #0x2c]
	cmp r1, r0
	movge r0, #0
	strge r0, [r5, #0x38]
	add sp, sp, #8
	pop {r3, r4, r5, pc}
	.align 2, 0
_020C8F50: .4byte 0x021E0294
_020C8F54: .4byte 0x021E0254
	arm_func_end FUN_020C8EA8

	arm_func_start FUN_020C8F58
FUN_020C8F58: @ 0x020C8F58
	push {r4, lr}
	ldr r1, [r0, #0x24]
	lsl r1, r1, #0x1e
	asrs r1, r1, #0x1f
	popeq {r4, pc}
	ldr r2, [r0, #0x40]
	mov r3, #1
	mov r1, #0
	lsl r2, r3, r2
	ldr r0, [r0, #0x44]
	mov r3, r1
	bl FUN_020D519C
	bl FUN_020D59FC
	mov r4, r0
	mov r0, #1
	bl FUN_020D57D4
	mov r0, r4
	bl FUN_020D5990
	pop {r4, pc}
	arm_func_end FUN_020C8F58

	arm_func_start FUN_020C8FA4
FUN_020C8FA4: @ 0x020C8FA4
	push {r4, r5, r6, lr}
	mov r4, r0
	ldr r0, [r4, #0x24]
	lsl r0, r0, #0x1e
	asrs r0, r0, #0x1f
	popeq {r4, r5, r6, pc}
	ldr r0, [r4, #0x38]
	cmp r0, #0
	beq _020C8FF4
	mov r5, #1
_020C8FCC:
	bl FUN_020D3A38
	mov r6, r0
	mov r0, r4
	mov r1, r5
	bl FUN_020C8EA8
	mov r0, r6
	bl FUN_020D3A4C
	ldr r0, [r4, #0x38]
	cmp r0, #0
	bne _020C8FCC
_020C8FF4:
	ldr r0, [r4, #0x40]
	mov r2, #1
	mov r1, #0
	lsl r2, r2, r0
	ldr r0, [r4, #0x44]
	mov r3, r1
	bl FUN_020D5174
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020C8FA4

	arm_func_start FUN_020C9014
FUN_020C9014: @ 0x020C9014
	push {r4, lr}
	ldr r1, _020C9064 @ =0x021E0314
	mov r2, r0
	ldr r0, [r1, #0x48]
	ldr r4, _020C9068 @ =0x021E035C
	cmp r0, #0
	popeq {r4, pc}
	ldr r0, [r4, #4]
	cmp r0, #0
	popne {r4, pc}
	cmp r2, #0
	bne _020C904C
	bl FUN_020C912C
	pop {r4, pc}
_020C904C:
	add r0, r4, #0x3c
	mov r1, #0
	bl FUN_020CAEE4
	mov r0, #1
	str r0, [r4, #0x4c]
	pop {r4, pc}
	.align 2, 0
_020C9064: .4byte 0x021E0314
_020C9068: .4byte 0x021E035C
	arm_func_end FUN_020C9014

	arm_func_start FUN_020C906C
FUN_020C906C: @ 0x020C906C
	ldr r0, _020C9078 @ =0x021E0314
	ldr r0, [r0, #0x48]
	bx lr
	.align 2, 0
_020C9078: .4byte 0x021E0314
	arm_func_end FUN_020C906C

	arm_func_start FUN_020C907C
FUN_020C907C: @ 0x020C907C
	ldr r0, _020C9088 @ =0x021E0314
	ldr r0, [r0, #0x4c]
	bx lr
	.align 2, 0
_020C9088: .4byte 0x021E0314
	arm_func_end FUN_020C907C

	arm_func_start FUN_020C908C
FUN_020C908C: @ 0x020C908C
	ldr r0, _020C90A0 @ =0x021E0314
	mov r1, #0
	str r1, [r0]
	str r1, [r0, #0x48]
	bx lr
	.align 2, 0
_020C90A0: .4byte 0x021E0314
	arm_func_end FUN_020C908C

	arm_func_start FUN_020C90A4
FUN_020C90A4: @ 0x020C90A4
	push {r3, r4, r5, lr}
	ldr r0, _020C9124 @ =0x021E0314
	ldr r4, _020C9128 @ =0x021E035C
	ldr r0, [r0, #0x48]
	cmp r0, #0
	popeq {r3, r4, r5, pc}
	ldr r0, [r4, #4]
	cmp r0, #0
	popne {r3, r4, r5, pc}
	add r0, r4, #0x3c
	bl FUN_020CAF40
	ldr r0, [r4, #0x4c]
	cmp r0, #0
	beq _020C90F4
	add r0, r4, #0x3c
	bl FUN_020CAF58
	cmp r0, #0
	beq _020C90F4
	bl FUN_020C912C
	pop {r3, r4, r5, pc}
_020C90F4:
	add r0, r4, #0x3c
	bl FUN_020CAF0C
	ldr r1, [r4, #0x50]
	asr r5, r0, #8
	cmp r5, r1
	popeq {r3, r4, r5, pc}
	ldr r0, [r4, #0x24]
	mov r1, r5
	mov r2, #0
	bl FUN_020D52A0
	str r5, [r4, #0x50]
	pop {r3, r4, r5, pc}
	.align 2, 0
_020C9124: .4byte 0x021E0314
_020C9128: .4byte 0x021E035C
	arm_func_end FUN_020C90A4

	arm_func_start FUN_020C912C
FUN_020C912C: @ 0x020C912C
	push {r3, r4, r5, r6, r7, lr}
	ldr r0, _020C9210 @ =0x021E0314
	ldr r4, _020C9214 @ =0x021E035C
	ldr r0, [r0, #0x48]
	cmp r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	ldr r1, [r4, #0x2c]
	mov r3, #0
	cmp r1, #0
	movge r7, #1
	movlt r7, #0
	cmp r7, #0
	movne r0, #1
	lslne r2, r0, r1
	ldr r0, [r4, #0x24]
	ldr r1, [r4, #0x28]
	moveq r2, #0
	bl FUN_020D519C
	cmp r7, #0
	beq _020C91B4
	bl FUN_020D59FC
	mov r5, r0
	mov r0, #1
	bl FUN_020D57D4
	mov r0, r5
	bl FUN_020D5990
	ldr r6, _020C9218 @ =0x021E031C
	mov r5, #0
_020C919C:
	mov r0, r6
	mov r1, r5
	mov r2, r5
	bl FUN_020D2444
	cmp r0, #0
	bne _020C919C
_020C91B4:
	ldr r0, [r4, #0x28]
	cmp r0, #0
	beq _020C91C4
	bl FUN_020C7BF0
_020C91C4:
	ldr r0, [r4, #0x20]
	cmp r0, #0
	beq _020C91D4
	bl FUN_020C7BC0
_020C91D4:
	cmp r7, #0
	beq _020C91E4
	ldr r0, [r4, #0x2c]
	bl FUN_020C7C54
_020C91E4:
	ldr r0, [r4, #4]
	cmp r0, #1
	bne _020C9204
	mov r0, #0
	mov r1, r0
	mov r2, r0
	mov r3, r0
	bl FUN_020D53B4
_020C9204:
	mov r0, #0
	str r0, [r4]
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020C9210: .4byte 0x021E0314
_020C9214: .4byte 0x021E035C
_020C9218: .4byte 0x021E031C
	arm_func_end FUN_020C912C

	arm_func_start FUN_020C921C
FUN_020C921C: @ 0x020C921C
	push {r4, lr}
	ldr r0, _020C9274 @ =0x021E0314
	ldr r3, _020C9278 @ =0x021E035C
	ldr r0, [r0, #0x48]
	cmp r0, #0
	popeq {r4, pc}
	ldr r1, [r3, #0x2c]
	cmp r1, #0
	movge r0, #1
	lslge r2, r0, r1
	ldr r0, [r3, #0x24]
	ldr r1, [r3, #0x28]
	movlt r2, #0
	mov r3, #0
	bl FUN_020D519C
	bl FUN_020D59FC
	mov r4, r0
	mov r0, #1
	bl FUN_020D57D4
	mov r0, r4
	bl FUN_020D5990
	pop {r4, pc}
	.align 2, 0
_020C9274: .4byte 0x021E0314
_020C9278: .4byte 0x021E035C
	arm_func_end FUN_020C921C

	arm_func_start FUN_020C927C
FUN_020C927C: @ 0x020C927C
	push {r4, lr}
	ldr r0, _020C92F8 @ =0x021E0314
	ldr r4, _020C92FC @ =0x021E035C
	ldr r0, [r0, #0x48]
	cmp r0, #0
	popeq {r4, pc}
	ldr r1, [r4, #0xc]
	mov r0, #0
	ldr r2, [r4, #0x14]
	str r0, [r4, #0x1c]
	bl FUN_020D47EC
	ldr r1, [r4, #0x10]
	ldr r2, [r4, #0x14]
	mov r0, #0
	bl FUN_020D47EC
	ldr r0, [r4, #0xc]
	ldr r1, [r4, #0x14]
	bl FUN_020D2894
	ldr r0, [r4, #0x10]
	ldr r1, [r4, #0x14]
	bl FUN_020D2894
	ldr r1, [r4, #0x2c]
	mov r3, #0
	cmp r1, #0
	movge r0, #1
	lslge r2, r0, r1
	ldr r0, [r4, #0x24]
	ldr r1, [r4, #0x28]
	movlt r2, #0
	bl FUN_020D5174
	pop {r4, pc}
	.align 2, 0
_020C92F8: .4byte 0x021E0314
_020C92FC: .4byte 0x021E035C
	arm_func_end FUN_020C927C

	arm_func_start FUN_020C9300
FUN_020C9300: @ 0x020C9300
	push {r4, r5, r6, lr}
	mov r6, r0
	mov ip, #0
	str ip, [r6, #0x8c]
	str ip, [r6, #0x84]
	str ip, [r6, #0x88]
	add r0, r6, #0x7c
	mov r5, r2
	mov r4, r3
	str ip, [r6, #0x90]
	bl FUN_020D8180
	cmp r0, #0
	popeq {r4, r5, r6, pc}
	add r0, r6, #0x34
	bl FUN_020D7F98
	add r1, r6, #0x7c
	add r0, r6, #0x34
	ldm r1, {r1, r2}
	bl FUN_020D8208
	cmp r0, #0
	popeq {r4, r5, r6, pc}
	mov r3, #1
	mov r0, r6
	mov r1, r5
	mov r2, r4
	str r3, [r6, #0x30]
	bl FUN_020C9380
	cmp r0, #0
	ldrne r0, _020C937C @ =0x021E0910
	strne r6, [r0]
	pop {r4, r5, r6, pc}
	.align 2, 0
_020C937C: .4byte 0x021E0910
	arm_func_end FUN_020C9300

	arm_func_start FUN_020C9380
FUN_020C9380: @ 0x020C9380
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #4
	mov r5, r0
	mov r4, r1
	mov r1, #0
	mov r6, r2
	mov r2, r1
	add r0, r5, #0x34
	bl FUN_020D83DC
	cmp r0, #0
	addeq sp, sp, #4
	moveq r0, #0
	popeq {r3, r4, r5, r6, pc}
	mov r1, r5
	add r0, r5, #0x34
	mov r2, #0x30
	bl FUN_020D83CC
	cmp r0, #0x30
	addne sp, sp, #4
	movne r0, #0
	popne {r3, r4, r5, r6, pc}
	cmp r4, #0
	beq _020C9540
	mov r0, #0
	str r0, [sp]
	ldr r1, [r5, #0x1c]
	ldr r2, _020C954C @ =FUN_020C99E8
	mov r0, r4
	mov r3, r5
	bl FUN_020C9B50
	cmp r0, #0
	str r0, [r5, #0x8c]
	addeq sp, sp, #4
	moveq r0, #0
	popeq {r3, r4, r5, r6, pc}
	ldr r1, [r5, #0x18]
	add r0, r5, #0x34
	mov r2, #0
	bl FUN_020D83DC
	cmp r0, #0
	addeq sp, sp, #4
	moveq r0, #0
	popeq {r3, r4, r5, r6, pc}
	ldr r1, [r5, #0x8c]
	ldr r2, [r5, #0x1c]
	add r0, r5, #0x34
	bl FUN_020D83CC
	ldr r1, [r5, #0x1c]
	cmp r0, r1
	addne sp, sp, #4
	mov r0, #0
	popne {r3, r4, r5, r6, pc}
	str r0, [sp]
	ldr r1, [r5, #0x24]
	ldr r2, _020C9550 @ =FUN_020C99F4
	mov r0, r4
	mov r3, r5
	bl FUN_020C9B50
	cmp r0, #0
	str r0, [r5, #0x84]
	addeq sp, sp, #4
	moveq r0, #0
	popeq {r3, r4, r5, r6, pc}
	ldr r1, [r5, #0x20]
	add r0, r5, #0x34
	mov r2, #0
	bl FUN_020D83DC
	cmp r0, #0
	addeq sp, sp, #4
	moveq r0, #0
	popeq {r3, r4, r5, r6, pc}
	ldr r1, [r5, #0x84]
	ldr r2, [r5, #0x24]
	add r0, r5, #0x34
	bl FUN_020D83CC
	ldr r1, [r5, #0x24]
	cmp r0, r1
	addne sp, sp, #4
	movne r0, #0
	popne {r3, r4, r5, r6, pc}
	cmp r6, #0
	ldrne r1, [r5, #0x14]
	cmpne r1, #0
	beq _020C9540
	ldr r2, _020C9554 @ =FUN_020C9A00
	mov ip, #0
	mov r0, r4
	mov r3, r5
	str ip, [sp]
	bl FUN_020C9B50
	cmp r0, #0
	str r0, [r5, #0x88]
	addeq sp, sp, #4
	moveq r0, #0
	popeq {r3, r4, r5, r6, pc}
	ldr r1, [r5, #0x10]
	add r0, r5, #0x34
	mov r2, #0
	bl FUN_020D83DC
	cmp r0, #0
	addeq sp, sp, #4
	moveq r0, #0
	popeq {r3, r4, r5, r6, pc}
	ldr r1, [r5, #0x88]
	ldr r2, [r5, #0x14]
	add r0, r5, #0x34
	bl FUN_020D83CC
	ldr r1, [r5, #0x14]
	cmp r0, r1
	addne sp, sp, #4
	movne r0, #0
	popne {r3, r4, r5, r6, pc}
_020C9540:
	mov r0, #1
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
	.align 2, 0
_020C954C: .4byte FUN_020C99E8
_020C9550: .4byte FUN_020C99F4
_020C9554: .4byte FUN_020C9A00
	arm_func_end FUN_020C9380

	arm_func_start FUN_020C9558
FUN_020C9558: @ 0x020C9558
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	mov r0, r4
	mov r1, r5
	mov r2, #0x30
	bl FUN_020D4808
	ldr r0, [r5, #0x18]
	mov r3, #0
	cmp r0, #0
	moveq r0, #0
	addne r0, r4, r0
	str r0, [r5, #0x8c]
	ldr r0, [r5, #0x20]
	cmp r0, #0
	moveq r0, #0
	addne r0, r4, r0
	str r0, [r5, #0x84]
	ldr r0, [r5, #0x10]
	cmp r0, #0
	moveq r0, #0
	addne r0, r4, r0
	str r0, [r5, #0x88]
	str r3, [r5, #0x90]
	ldr r2, [r5, #0x84]
	ldr r0, [r2, #8]
	cmp r0, #0
	bls _020C9604
	mov ip, r3
	mov r1, r3
_020C95D0:
	add r2, r2, #0xc
	ldr r0, [r2, ip]
	add r2, r2, ip
	cmp r0, #0
	moveq r0, r1
	addne r0, r4, r0
	str r0, [r2, #8]
	ldr r2, [r5, #0x84]
	add r3, r3, #1
	ldr r0, [r2, #8]
	add ip, ip, #0x10
	cmp r3, r0
	blo _020C95D0
_020C9604:
	mov r1, #0
	ldr r0, _020C9618 @ =0x021E0910
	str r1, [r5, #0x30]
	str r5, [r0]
	pop {r3, r4, r5, pc}
	.align 2, 0
_020C9618: .4byte 0x021E0910
	arm_func_end FUN_020C9558

	arm_func_start FUN_020C961C
FUN_020C961C: @ 0x020C961C
	ldr r1, _020C9630 @ =0x021E0910
	ldr r2, [r1]
	str r0, [r1]
	mov r0, r2
	bx lr
	.align 2, 0
_020C9630: .4byte 0x021E0910
	arm_func_end FUN_020C961C

	arm_func_start FUN_020C9634
FUN_020C9634: @ 0x020C9634
	ldr r0, _020C9640 @ =0x021E0910
	ldr r0, [r0]
	bx lr
	.align 2, 0
_020C9640: .4byte 0x021E0910
	arm_func_end FUN_020C9634

	arm_func_start FUN_020C9644
FUN_020C9644: @ 0x020C9644
	push {r3, lr}
	bl FUN_020C965C
	cmp r0, #0
	moveq r0, #0
	addne r0, r0, #4
	pop {r3, pc}
	arm_func_end FUN_020C9644

	arm_func_start FUN_020C965C
FUN_020C965C: @ 0x020C965C
	ldr r1, _020C96BC @ =0x021E0910
	ldr r3, [r1]
	ldr r2, [r3, #0x8c]
	ldr r1, [r2, #8]
	cmp r1, #0
	moveq r2, #0
	addne r2, r2, r1
	cmp r2, #0
	moveq r0, #0
	bxeq lr
	cmp r0, #0
	movlt r0, #0
	bxlt lr
	ldr r1, [r2]
	cmp r0, r1
	movhs r0, #0
	bxhs lr
	add r0, r2, r0, lsl #2
	ldr r1, [r0, #4]
	ldr r0, [r3, #0x8c]
	cmp r1, #0
	moveq r0, #0
	addne r0, r0, r1
	bx lr
	.align 2, 0
_020C96BC: .4byte 0x021E0910
	arm_func_end FUN_020C965C

	arm_func_start FUN_020C96C0
FUN_020C96C0: @ 0x020C96C0
	ldr r1, _020C9720 @ =0x021E0910
	ldr r3, [r1]
	ldr r2, [r3, #0x8c]
	ldr r1, [r2, #0xc]
	cmp r1, #0
	moveq r2, #0
	addne r2, r2, r1
	cmp r2, #0
	moveq r0, #0
	bxeq lr
	cmp r0, #0
	movlt r0, #0
	bxlt lr
	ldr r1, [r2]
	cmp r0, r1
	movhs r0, #0
	bxhs lr
	add r0, r2, r0, lsl #2
	ldr r1, [r0, #4]
	ldr r0, [r3, #0x8c]
	cmp r1, #0
	moveq r0, #0
	addne r0, r0, r1
	bx lr
	.align 2, 0
_020C9720: .4byte 0x021E0910
	arm_func_end FUN_020C96C0

	arm_func_start FUN_020C9724
FUN_020C9724: @ 0x020C9724
	ldr r1, _020C9784 @ =0x021E0910
	ldr r3, [r1]
	ldr r2, [r3, #0x8c]
	ldr r1, [r2, #0x10]
	cmp r1, #0
	moveq r2, #0
	addne r2, r2, r1
	cmp r2, #0
	moveq r0, #0
	bxeq lr
	cmp r0, #0
	movlt r0, #0
	bxlt lr
	ldr r1, [r2]
	cmp r0, r1
	movhs r0, #0
	bxhs lr
	add r0, r2, r0, lsl #2
	ldr r1, [r0, #4]
	ldr r0, [r3, #0x8c]
	cmp r1, #0
	moveq r0, #0
	addne r0, r0, r1
	bx lr
	.align 2, 0
_020C9784: .4byte 0x021E0910
	arm_func_end FUN_020C9724

	arm_func_start FUN_020C9788
FUN_020C9788: @ 0x020C9788
	ldr r1, _020C97E8 @ =0x021E0910
	ldr r3, [r1]
	ldr r2, [r3, #0x8c]
	ldr r1, [r2, #0x14]
	cmp r1, #0
	moveq r2, #0
	addne r2, r2, r1
	cmp r2, #0
	moveq r0, #0
	bxeq lr
	cmp r0, #0
	movlt r0, #0
	bxlt lr
	ldr r1, [r2]
	cmp r0, r1
	movhs r0, #0
	bxhs lr
	add r0, r2, r0, lsl #2
	ldr r1, [r0, #4]
	ldr r0, [r3, #0x8c]
	cmp r1, #0
	moveq r0, #0
	addne r0, r0, r1
	bx lr
	.align 2, 0
_020C97E8: .4byte 0x021E0910
	arm_func_end FUN_020C9788

	arm_func_start FUN_020C97EC
FUN_020C97EC: @ 0x020C97EC
	ldr r1, _020C984C @ =0x021E0910
	ldr r3, [r1]
	ldr r2, [r3, #0x8c]
	ldr r1, [r2, #0x18]
	cmp r1, #0
	moveq r2, #0
	addne r2, r2, r1
	cmp r2, #0
	moveq r0, #0
	bxeq lr
	cmp r0, #0
	movlt r0, #0
	bxlt lr
	ldr r1, [r2]
	cmp r0, r1
	movhs r0, #0
	bxhs lr
	add r0, r2, r0, lsl #2
	ldr r1, [r0, #4]
	ldr r0, [r3, #0x8c]
	cmp r1, #0
	moveq r0, #0
	addne r0, r0, r1
	bx lr
	.align 2, 0
_020C984C: .4byte 0x021E0910
	arm_func_end FUN_020C97EC

	arm_func_start FUN_020C9850
FUN_020C9850: @ 0x020C9850
	ldr r1, _020C98B0 @ =0x021E0910
	ldr r3, [r1]
	ldr r2, [r3, #0x8c]
	ldr r1, [r2, #0x1c]
	cmp r1, #0
	moveq r2, #0
	addne r2, r2, r1
	cmp r2, #0
	moveq r0, #0
	bxeq lr
	cmp r0, #0
	movlt r0, #0
	bxlt lr
	ldr r1, [r2]
	cmp r0, r1
	movhs r0, #0
	bxhs lr
	add r0, r2, r0, lsl #2
	ldr r1, [r0, #4]
	ldr r0, [r3, #0x8c]
	cmp r1, #0
	moveq r0, #0
	addne r0, r0, r1
	bx lr
	.align 2, 0
_020C98B0: .4byte 0x021E0910
	arm_func_end FUN_020C9850

	arm_func_start FUN_020C98B4
FUN_020C98B4: @ 0x020C98B4
	ldr r1, _020C98D8 @ =0x021E0910
	ldr r1, [r1]
	ldr r2, [r1, #0x84]
	ldr r1, [r2, #8]
	cmp r0, r1
	movhs r0, #0
	addlo r0, r2, r0, lsl #4
	ldrlo r0, [r0, #0x10]
	bx lr
	.align 2, 0
_020C98D8: .4byte 0x021E0910
	arm_func_end FUN_020C98B4

	arm_func_start FUN_020C98DC
FUN_020C98DC: @ 0x020C98DC
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	ldr r4, _020C99A0 @ =0x021E0910
	mov sb, r2
	ldr r7, [r4]
	mov sl, r1
	ldr r2, [r7, #0x84]
	mov r8, r3
	ldr r1, [r2, #8]
	cmp r0, r1
	mvnhs r0, #0
	pophs {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r5, [r7, #0x90]
	add r1, r2, #0xc
	cmp r5, #0
	moveq r5, sb
	add fp, r1, r0, lsl #4
	cmp sb, #0
	mov r4, #0
	ble _020C9998
_020C9928:
	ldr r0, [fp, #4]
	sub r6, sb, r4
	cmp r6, r5
	movgt r6, r5
	sub r0, r0, r8
	cmp r6, r0
	movhi r6, r0
	cmp r6, #0
	beq _020C9998
	ldr r1, [fp]
	mov r2, #0
	add r0, r7, #0x34
	add r1, r1, r8
	bl FUN_020D83DC
	cmp r0, #0
	mvneq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r1, sl
	mov r2, r6
	add r0, r7, #0x34
	bl FUN_020D83CC
	cmp r0, #0
	poplt {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	add r4, r4, r0
	cmp r4, sb
	add r8, r8, r0
	add sl, sl, r0
	blt _020C9928
_020C9998:
	mov r0, r4
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020C99A0: .4byte 0x021E0910
	arm_func_end FUN_020C98DC

	arm_func_start FUN_020C99A4
FUN_020C99A4: @ 0x020C99A4
	ldr r1, _020C99C8 @ =0x021E0910
	ldr r1, [r1]
	ldr r2, [r1, #0x84]
	ldr r1, [r2, #8]
	cmp r0, r1
	movhs r0, #0
	addlo r0, r2, r0, lsl #4
	ldrlo r0, [r0, #0x14]
	bx lr
	.align 2, 0
_020C99C8: .4byte 0x021E0910
	arm_func_end FUN_020C99A4

	arm_func_start FUN_020C99CC
FUN_020C99CC: @ 0x020C99CC
	ldr r2, _020C99E4 @ =0x021E0910
	ldr r2, [r2]
	ldr r2, [r2, #0x84]
	add r0, r2, r0, lsl #4
	str r1, [r0, #0x14]
	bx lr
	.align 2, 0
_020C99E4: .4byte 0x021E0910
	arm_func_end FUN_020C99CC

	arm_func_start FUN_020C99E8
FUN_020C99E8: @ 0x020C99E8
	mov r0, #0
	str r0, [r2, #0x8c]
	bx lr
	arm_func_end FUN_020C99E8

	arm_func_start FUN_020C99F4
FUN_020C99F4: @ 0x020C99F4
	mov r0, #0
	str r0, [r2, #0x84]
	bx lr
	arm_func_end FUN_020C99F4

	arm_func_start FUN_020C9A00
FUN_020C9A00: @ 0x020C9A00
	mov r0, #0
	str r0, [r2, #0x88]
	bx lr
	arm_func_end FUN_020C9A00

	arm_func_start FUN_020C9A0C
FUN_020C9A0C: @ 0x020C9A0C
	push {r3, r4, r5, lr}
	add r2, r0, #3
	add r0, r0, r1
	bic r5, r2, #3
	cmp r5, r0
	movhi r0, #0
	pophi {r3, r4, r5, pc}
	sub r1, r0, r5
	cmp r1, #0x10
	movlo r0, #0
	poplo {r3, r4, r5, pc}
	add r0, r5, #0x10
	sub r1, r1, #0x10
	mov r2, #0
	bl FUN_020B56F4
	movs r4, r0
	moveq r0, #0
	popeq {r3, r4, r5, pc}
	mov r0, r5
	mov r1, r4
	bl FUN_020C9D1C
	cmp r0, #0
	movne r0, r5
	popne {r3, r4, r5, pc}
	mov r0, r4
	bl FUN_020B572C
	mov r0, #0
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020C9A0C

	arm_func_start FUN_020C9A7C
FUN_020C9A7C: @ 0x020C9A7C
	push {r4, lr}
	mov r4, r0
	bl FUN_020C9A94
	ldr r0, [r4]
	bl FUN_020B572C
	pop {r4, pc}
	arm_func_end FUN_020C9A7C

	arm_func_start FUN_020C9A94
FUN_020C9A94: @ 0x020C9A94
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	mov r8, r0
	mov r6, #0
	mov r1, r6
	add r0, r8, #4
	bl FUN_020B4D2C
	movs r5, r0
	beq _020C9B2C
	mov sl, #1
	mov sb, r6
	mov r4, r6
_020C9AC0:
	mov r0, r5
	mov r1, r4
	bl FUN_020B4D2C
	movs r7, r0
	beq _020C9B0C
_020C9AD4:
	ldr ip, [r7, #0xc]
	cmp ip, #0
	beq _020C9AF8
	ldr r1, [r7, #8]
	ldr r2, [r7, #0x10]
	ldr r3, [r7, #0x14]
	add r0, r7, #0x20
	blx ip
	mov r6, sl
_020C9AF8:
	mov r0, r5
	mov r1, r7
	bl FUN_020B4D2C
	movs r7, r0
	bne _020C9AD4
_020C9B0C:
	mov r1, r5
	add r0, r8, #4
	bl FUN_020B4CB4
	mov r1, sb
	add r0, r8, #4
	bl FUN_020B4D2C
	movs r5, r0
	bne _020C9AC0
_020C9B2C:
	ldr r0, [r8]
	mov r1, #3
	bl FUN_020B576C
	cmp r6, #0
	beq _020C9B44
	bl FUN_020C9D8C
_020C9B44:
	mov r0, r8
	bl FUN_020C9D50
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	arm_func_end FUN_020C9A94

	arm_func_start FUN_020C9B50
FUN_020C9B50: @ 0x020C9B50
	push {r4, r5, r6, r7, r8, lr}
	mov r7, r1
	mov r8, r0
	add r0, r7, #0x1f
	bic r1, r0, #0x1f
	mov r6, r2
	ldr r0, [r8]
	add r1, r1, #0x20
	mov r2, #0x20
	mov r5, r3
	bl FUN_020B5738
	movs r4, r0
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, pc}
	add r0, r8, #4
	mov r1, #0
	bl FUN_020B4D2C
	str r7, [r4, #8]
	str r6, [r4, #0xc]
	ldr r2, [sp, #0x18]
	str r5, [r4, #0x10]
	mov r1, r4
	str r2, [r4, #0x14]
	bl FUN_020B4BAC
	add r0, r4, #0x20
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020C9B50

	arm_func_start FUN_020C9BB8
FUN_020C9BB8: @ 0x020C9BB8
	push {r4, lr}
	mov r4, r0
	ldrh r1, [r4, #0xc]
	ldr r0, [r4]
	bl FUN_020B57D0
	cmp r0, #0
	mvneq r0, #0
	popeq {r4, pc}
	mov r0, r4
	bl FUN_020C9D50
	cmp r0, #0
	ldrhne r0, [r4, #0xc]
	subne r0, r0, #1
	popne {r4, pc}
	ldr r0, [r4]
	mov r1, #0
	bl FUN_020B5820
	mvn r0, #0
	pop {r4, pc}
	arm_func_end FUN_020C9BB8

	arm_func_start FUN_020C9C04
FUN_020C9C04: @ 0x020C9C04
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	mov r8, #0
	movs sb, r1
	mov sl, r0
	mov r7, r8
	bne _020C9C24
	bl FUN_020C9A94
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_020C9C24:
	ldrh r0, [sl, #0xc]
	cmp sb, r0
	bge _020C9CA8
	mov r4, #1
	mov r5, r8
_020C9C38:
	mov r1, r5
	add r0, sl, #4
	bl FUN_020B4D2C
	mov r1, r8
	mov r6, r0
	bl FUN_020B4D2C
	movs r8, r0
	beq _020C9C90
_020C9C58:
	ldr ip, [r8, #0xc]
	cmp ip, #0
	beq _020C9C7C
	ldr r1, [r8, #8]
	ldr r2, [r8, #0x10]
	ldr r3, [r8, #0x14]
	add r0, r8, #0x20
	blx ip
	mov r7, r4
_020C9C7C:
	mov r0, r6
	mov r1, r8
	bl FUN_020B4D2C
	movs r8, r0
	bne _020C9C58
_020C9C90:
	mov r1, r6
	add r0, sl, #4
	bl FUN_020B4CB4
	ldrh r0, [sl, #0xc]
	cmp sb, r0
	blt _020C9C38
_020C9CA8:
	ldr r0, [sl]
	mov r1, sb
	bl FUN_020B5820
	cmp r7, #0
	beq _020C9CC0
	bl FUN_020C9D8C
_020C9CC0:
	ldrh r1, [sl, #0xc]
	ldr r0, [sl]
	bl FUN_020B57D0
	mov r0, sl
	bl FUN_020C9D50
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	arm_func_end FUN_020C9C04

	arm_func_start FUN_020C9CD8
FUN_020C9CD8: @ 0x020C9CD8
	ldr r1, [r0]
	ldr r0, [r1, #0x1c]
	sub r0, r0, r1
	bx lr
	arm_func_end FUN_020C9CD8

	arm_func_start FUN_020C9CE8
FUN_020C9CE8: @ 0x020C9CE8
	push {r3, lr}
	ldr r0, [r0]
	mov r1, #0x20
	bl FUN_020B5798
	cmp r0, #0x20
	movlo r0, #0
	subhs r0, r0, #0x20
	bichs r0, r0, #0x1f
	pop {r3, pc}
	arm_func_end FUN_020C9CE8

	arm_func_start FUN_020C9D0C
FUN_020C9D0C: @ 0x020C9D0C
	ldr ip, _020C9D18 @ =FUN_020B4B68
	mov r1, #0
	bx ip
	.align 2, 0
_020C9D18: .4byte FUN_020B4B68
	arm_func_end FUN_020C9D0C

	arm_func_start FUN_020C9D1C
FUN_020C9D1C: @ 0x020C9D1C
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	add r0, r5, #4
	mov r1, #0xc
	bl FUN_020B4B68
	mov r0, r5
	str r4, [r5]
	bl FUN_020C9D50
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020C9D1C

	arm_func_start FUN_020C9D50
FUN_020C9D50: @ 0x020C9D50
	push {r3, r4, r5, lr}
	mov r5, r0
	ldr r0, [r5]
	mov r1, #0x14
	mov r2, #4
	bl FUN_020B5738
	movs r4, r0
	moveq r0, #0
	popeq {r3, r4, r5, pc}
	bl FUN_020C9D0C
	mov r1, r4
	add r0, r5, #4
	bl FUN_020B4BAC
	mov r0, #1
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020C9D50

	arm_func_start FUN_020C9D8C
FUN_020C9D8C: @ 0x020C9D8C
	push {r4, lr}
	bl FUN_020D59FC
	mov r4, r0
	mov r0, #1
	bl FUN_020D57D4
	mov r0, r4
	bl FUN_020D5990
	pop {r4, pc}
	arm_func_end FUN_020C9D8C

	arm_func_start FUN_020C9DAC
FUN_020C9DAC: @ 0x020C9DAC
	push {r3, lr}
	bl FUN_020C9E6C
	cmp r0, #0
	moveq r0, #1
	movne r0, #0
	pop {r3, pc}
	arm_func_end FUN_020C9DAC

	arm_func_start FUN_020C9DC4
FUN_020C9DC4: @ 0x020C9DC4
	push {r3, lr}
	mov r2, r1
	mov ip, #0
	mov r1, #0xff
	mov r3, #1
	str ip, [sp]
	bl FUN_020C9F70
	cmp r0, #0
	moveq r0, #1
	movne r0, #0
	pop {r3, pc}
	arm_func_end FUN_020C9DC4

	arm_func_start FUN_020C9DF0
FUN_020C9DF0: @ 0x020C9DF0
	push {r3, lr}
	mov r2, r1
	mov ip, #0
	mov r1, #0xff
	mov r3, #1
	str ip, [sp]
	bl FUN_020CA054
	cmp r0, #0
	moveq r0, #1
	movne r0, #0
	pop {r3, pc}
	arm_func_end FUN_020C9DF0

	arm_func_start FUN_020C9E1C
FUN_020C9E1C: @ 0x020C9E1C
	push {r3, lr}
	mov r2, r1
	mov ip, #0
	mov r1, #0xff
	mov r3, #1
	str ip, [sp]
	bl FUN_020CA194
	cmp r0, #0
	moveq r0, #1
	movne r0, #0
	pop {r3, pc}
	arm_func_end FUN_020C9E1C

	arm_func_start FUN_020C9E48
FUN_020C9E48: @ 0x020C9E48
	push {r3, lr}
	mov ip, #0
	mov r3, #1
	str ip, [sp]
	bl FUN_020C9F70
	cmp r0, #0
	moveq r0, #1
	movne r0, #0
	pop {r3, pc}
	arm_func_end FUN_020C9E48

	arm_func_start FUN_020C9E6C
FUN_020C9E6C: @ 0x020C9E6C
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sb, r1
	bl FUN_020C9850
	movs r6, r0
	moveq r0, #1
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, [r6]
	mov r7, #0
	cmp r0, #0
	bls _020C9F68
	add r8, r6, #4
	mov fp, r7
	mov sl, r7
	mov r4, r7
	mov r5, r7
_020C9EA8:
	ldrb r0, [r8]
	cmp r0, #3
	addls pc, pc, r0, lsl #2
	b _020C9F54
_020C9EB8: @ jump table
	b _020C9EC8 @ case 0
	b _020C9F10 @ case 1
	b _020C9F34 @ case 2
	b _020C9EEC @ case 3
_020C9EC8:
	str r5, [sp]
	ldrb r1, [r8, #1]
	ldr r0, [r8, #4]
	mov r2, sb
	mov r3, #1
	bl FUN_020C9F70
	cmp r0, #0
	beq _020C9F54
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020C9EEC:
	str r4, [sp]
	ldrb r1, [r8, #1]
	ldr r0, [r8, #4]
	mov r2, sb
	mov r3, #1
	bl FUN_020C9FF4
	cmp r0, #0
	beq _020C9F54
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020C9F10:
	str sl, [sp]
	ldrb r1, [r8, #1]
	ldr r0, [r8, #4]
	mov r2, sb
	mov r3, #1
	bl FUN_020CA054
	cmp r0, #0
	beq _020C9F54
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020C9F34:
	str fp, [sp]
	ldrb r1, [r8, #1]
	ldr r0, [r8, #4]
	mov r2, sb
	mov r3, #1
	bl FUN_020CA194
	cmp r0, #0
	popne {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020C9F54:
	ldr r0, [r6]
	add r7, r7, #1
	cmp r7, r0
	add r8, r8, #8
	blo _020C9EA8
_020C9F68:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_020C9E6C

	arm_func_start FUN_020C9F70
FUN_020C9F70: @ 0x020C9F70
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r1
	mov r6, r2
	mov r5, r3
	bl FUN_020C965C
	movs r4, r0
	moveq r0, #2
	popeq {r3, r4, r5, r6, r7, pc}
	mov r0, #0
	str r0, [sp]
	ldrh r0, [r4, #4]
	mov r1, r7
	mov r2, r6
	mov r3, r5
	bl FUN_020CA054
	cmp r0, #0
	popne {r3, r4, r5, r6, r7, pc}
	tst r7, #1
	ldr r0, [r4]
	beq _020C9FDC
	mov r1, r6
	mov r2, r5
	bl FUN_020CA2C0
	cmp r0, #0
	bne _020C9FE0
	mov r0, #6
	pop {r3, r4, r5, r6, r7, pc}
_020C9FDC:
	bl FUN_020C99A4
_020C9FE0:
	ldr r1, [sp, #0x18]
	cmp r1, #0
	strne r0, [r1]
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020C9F70

	arm_func_start FUN_020C9FF4
FUN_020C9FF4: @ 0x020C9FF4
	push {r4, r5, r6, lr}
	mov r6, r1
	mov r5, r2
	mov r4, r3
	bl FUN_020C96C0
	cmp r0, #0
	moveq r0, #3
	popeq {r4, r5, r6, pc}
	tst r6, #8
	ldr r0, [r0]
	beq _020CA03C
	mov r1, r5
	mov r2, r4
	bl FUN_020CA32C
	cmp r0, #0
	bne _020CA040
	mov r0, #7
	pop {r4, r5, r6, pc}
_020CA03C:
	bl FUN_020C99A4
_020CA040:
	ldr r1, [sp, #0x10]
	cmp r1, #0
	strne r0, [r1]
	mov r0, #0
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020C9FF4

	arm_func_start FUN_020CA054
FUN_020CA054: @ 0x020CA054
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #8
	mov sl, r1
	mov sb, r2
	mov fp, r3
	bl FUN_020C9724
	movs r5, r0
	addeq sp, sp, #8
	moveq r0, #4
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	tst sl, #2
	ldr r0, [r5]
	beq _020CA0A8
	mov r1, sb
	mov r2, fp
	bl FUN_020CA398
	movs r6, r0
	bne _020CA0B0
	add sp, sp, #8
	mov r0, #8
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020CA0A8:
	bl FUN_020C99A4
	mov r6, r0
_020CA0B0:
	and r8, sl, #4
	mov r7, #0
_020CA0B8:
	add r0, r5, r7, lsl #1
	ldrh r0, [r0, #4]
	ldr r1, _020CA190 @ =0x0000FFFF
	cmp r0, r1
	beq _020CA16C
	bl FUN_020C9788
	movs r4, r0
	addeq sp, sp, #8
	moveq r0, #5
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	add r0, sp, #4
	str r0, [sp]
	add r0, r5, r7, lsl #1
	ldrh r0, [r0, #4]
	mov r1, sl
	mov r2, sb
	mov r3, fp
	bl FUN_020CA194
	cmp r0, #0
	addne sp, sp, #8
	popne {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, [r4]
	lsr r0, r0, #0x18
	tst r0, #1
	cmpne r8, #0
	beq _020CA150
	str sb, [sp]
	ldr r1, [r4]
	ldr r0, [sp, #4]
	lsl r3, r1, #8
	mov r1, r6
	mov r2, r7
	lsr r3, r3, #8
	bl FUN_020CA788
	cmp r0, #0
	addeq sp, sp, #8
	moveq r0, #9
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020CA150:
	cmp r6, #0
	ldrne r2, [sp, #4]
	cmpne r2, #0
	beq _020CA16C
	mov r0, r6
	mov r1, r7
	bl FUN_020D6154
_020CA16C:
	add r7, r7, #1
	cmp r7, #4
	blt _020CA0B8
	ldr r0, [sp, #0x30]
	cmp r0, #0
	strne r6, [r0]
	mov r0, #0
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020CA190: .4byte 0x0000FFFF
	arm_func_end FUN_020CA054

	arm_func_start FUN_020CA194
FUN_020CA194: @ 0x020CA194
	push {r4, r5, r6, lr}
	mov r6, r1
	mov r5, r2
	mov r4, r3
	bl FUN_020C9788
	cmp r0, #0
	moveq r0, #5
	popeq {r4, r5, r6, pc}
	tst r6, #4
	ldr r0, [r0]
	beq _020CA200
	lsr r1, r0, #0x18
	tst r1, #1
	lsl r0, r0, #8
	mov r1, r5
	beq _020CA1E4
	mov r2, r4
	lsr r0, r0, #8
	bl FUN_020CA470
	b _020CA1F0
_020CA1E4:
	mov r2, r4
	lsr r0, r0, #8
	bl FUN_020CA404
_020CA1F0:
	cmp r0, #0
	bne _020CA20C
	mov r0, #9
	pop {r4, r5, r6, pc}
_020CA200:
	lsl r0, r0, #8
	lsr r0, r0, #8
	bl FUN_020C99A4
_020CA20C:
	ldr r1, [sp, #0x10]
	cmp r1, #0
	strne r0, [r1]
	mov r0, #0
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020CA194

	arm_func_start FUN_020CA220
FUN_020CA220: @ 0x020CA220
	push {r3, r4, r5, r6, r7, r8, lr}
	sub sp, sp, #4
	mov r8, r0
	mov r7, r1
	mov r6, r2
	mov r4, r3
	bl FUN_020C98B4
	movs r5, r0
	addeq sp, sp, #4
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, pc}
	ldr r0, [sp, #0x20]
	cmp r0, #0
	addeq sp, sp, #4
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, pc}
	mov r2, r7
	mov r3, r6
	add r1, r5, #0x20
	str r4, [sp]
	bl FUN_020C9B50
	movs r4, r0
	addeq sp, sp, #4
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, pc}
	mov r0, r8
	mov r1, r4
	mov r2, r5
	mov r3, #0
	bl FUN_020C98DC
	cmp r5, r0
	addne sp, sp, #4
	movne r0, #0
	popne {r3, r4, r5, r6, r7, r8, pc}
	mov r0, r4
	mov r1, r5
	bl FUN_020D2878
	mov r0, r4
	add sp, sp, #4
	pop {r3, r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020CA220

	arm_func_start FUN_020CA2C0
FUN_020CA2C0: @ 0x020CA2C0
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	mov r6, r1
	mov r5, r2
	bl FUN_020C99A4
	movs r4, r0
	bne _020CA320
	cmp r5, #0
	moveq r2, #0
	beq _020CA2F0
	bl FUN_020C9634
	mov r2, r0
_020CA2F0:
	ldr r1, _020CA328 @ =FUN_020CA5D0
	mov r0, r7
	mov r3, r7
	str r6, [sp]
	bl FUN_020CA220
	mov r4, r0
	cmp r5, #0
	cmpne r4, #0
	beq _020CA320
	mov r0, r7
	mov r1, r4
	bl FUN_020C99CC
_020CA320:
	mov r0, r4
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020CA328: .4byte FUN_020CA5D0
	arm_func_end FUN_020CA2C0

	arm_func_start FUN_020CA32C
FUN_020CA32C: @ 0x020CA32C
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	mov r6, r1
	mov r5, r2
	bl FUN_020C99A4
	movs r4, r0
	bne _020CA38C
	cmp r5, #0
	moveq r2, #0
	beq _020CA35C
	bl FUN_020C9634
	mov r2, r0
_020CA35C:
	ldr r1, _020CA394 @ =FUN_020CA5D0
	mov r0, r7
	mov r3, r7
	str r6, [sp]
	bl FUN_020CA220
	mov r4, r0
	cmp r5, #0
	cmpne r4, #0
	beq _020CA38C
	mov r0, r7
	mov r1, r4
	bl FUN_020C99CC
_020CA38C:
	mov r0, r4
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020CA394: .4byte FUN_020CA5D0
	arm_func_end FUN_020CA32C

	arm_func_start FUN_020CA398
FUN_020CA398: @ 0x020CA398
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	mov r6, r1
	mov r5, r2
	bl FUN_020C99A4
	movs r4, r0
	bne _020CA3F8
	cmp r5, #0
	moveq r2, #0
	beq _020CA3C8
	bl FUN_020C9634
	mov r2, r0
_020CA3C8:
	ldr r1, _020CA400 @ =FUN_020CA5F8
	mov r0, r7
	mov r3, r7
	str r6, [sp]
	bl FUN_020CA220
	mov r4, r0
	cmp r5, #0
	cmpne r4, #0
	beq _020CA3F8
	mov r0, r7
	mov r1, r4
	bl FUN_020C99CC
_020CA3F8:
	mov r0, r4
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020CA400: .4byte FUN_020CA5F8
	arm_func_end FUN_020CA398

	arm_func_start FUN_020CA404
FUN_020CA404: @ 0x020CA404
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	mov r6, r1
	mov r5, r2
	bl FUN_020C99A4
	movs r4, r0
	bne _020CA464
	cmp r5, #0
	moveq r2, #0
	beq _020CA434
	bl FUN_020C9634
	mov r2, r0
_020CA434:
	ldr r1, _020CA46C @ =FUN_020CA628
	mov r0, r7
	mov r3, r7
	str r6, [sp]
	bl FUN_020CA220
	mov r4, r0
	cmp r5, #0
	cmpne r4, #0
	beq _020CA464
	mov r0, r7
	mov r1, r4
	bl FUN_020C99CC
_020CA464:
	mov r0, r4
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020CA46C: .4byte FUN_020CA628
	arm_func_end FUN_020CA404

	arm_func_start FUN_020CA470
FUN_020CA470: @ 0x020CA470
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov sb, r0
	mov r8, r1
	mov r7, r2
	bl FUN_020C99A4
	movs r5, r0
	bne _020CA564
	ldr r1, _020CA56C @ =0x021E0914
	mov r0, sb
	mov r2, #0x3c
	mov r3, #0
	bl FUN_020C98DC
	cmp r0, #0x3c
	movne r0, #0
	popne {r3, r4, r5, r6, r7, r8, sb, pc}
	ldr r0, _020CA570 @ =0x021E0914
	cmp r8, #0
	ldr r0, [r0, #0x38]
	lsl r6, r0, #2
	lsl r4, r6, #1
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	cmp r7, #0
	moveq r3, #0
	beq _020CA4DC
	bl FUN_020C9634
	mov r3, r0
_020CA4DC:
	ldr r2, _020CA574 @ =FUN_020CA658
	mov r0, r8
	add r1, r4, #0x5c
	str sb, [sp]
	bl FUN_020C9B50
	movs r5, r0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	mov r0, sb
	mov r1, r5
	add r2, r6, #0x3c
	mov r3, #0
	bl FUN_020C98DC
	add r1, r6, #0x3c
	cmp r0, r1
	movne r0, #0
	popne {r3, r4, r5, r6, r7, r8, sb, pc}
	ldr r1, [r5, #0x38]
	add r0, r5, #0x3c
	mov r2, r6
	add r1, r0, r1, lsl #2
	bl FUN_020D4A50
	mov r2, r6
	add r0, r5, #0x3c
	mov r1, #0
	bl FUN_020D4994
	mov r0, r5
	add r1, r4, #0x3c
	bl FUN_020D2878
	cmp r7, #0
	beq _020CA564
	mov r0, sb
	mov r1, r5
	bl FUN_020C99CC
_020CA564:
	mov r0, r5
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0
_020CA56C: .4byte 0x021E0914
_020CA570: .4byte 0x021E0914
_020CA574: .4byte FUN_020CA658
	arm_func_end FUN_020CA470

	arm_func_start FUN_020CA578
FUN_020CA578: @ 0x020CA578
	push {r3, r4, r5, r6, r7, lr}
	movs r4, r1
	mov r7, r0
	mov r6, r2
	popeq {r3, r4, r5, r6, r7, pc}
	bl FUN_020D3A38
	mov r5, r0
	mov r0, r4
	bl FUN_020C961C
	mov r4, r0
	mov r0, r6
	bl FUN_020C99A4
	cmp r7, r0
	bne _020CA5BC
	mov r0, r6
	mov r1, #0
	bl FUN_020C99CC
_020CA5BC:
	mov r0, r4
	bl FUN_020C961C
	mov r0, r5
	bl FUN_020D3A4C
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020CA578

	arm_func_start FUN_020CA5D0
FUN_020CA5D0: @ 0x020CA5D0
	push {r3, r4, r5, lr}
	mov r4, r1
	mov r1, r2
	mov r5, r0
	mov r2, r3
	bl FUN_020CA578
	mov r0, r5
	add r1, r5, r4
	bl FUN_020D5334
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020CA5D0

	arm_func_start FUN_020CA5F8
FUN_020CA5F8: @ 0x020CA5F8
	push {r3, r4, r5, lr}
	mov r4, r1
	mov r1, r2
	mov r5, r0
	mov r2, r3
	bl FUN_020CA578
	mov r0, r5
	add r1, r5, r4
	bl FUN_020D5354
	mov r0, r5
	bl FUN_020D6220
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020CA5F8

	arm_func_start FUN_020CA628
FUN_020CA628: @ 0x020CA628
	push {r3, r4, r5, lr}
	mov r4, r1
	mov r1, r2
	mov r5, r0
	mov r2, r3
	bl FUN_020CA578
	mov r0, r5
	add r1, r5, r4
	bl FUN_020D5374
	mov r0, r5
	bl FUN_020D62B8
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020CA628

	arm_func_start FUN_020CA658
FUN_020CA658: @ 0x020CA658
	push {r4, lr}
	mov r1, r2
	mov r4, r0
	mov r2, r3
	bl FUN_020CA578
	mov r0, r4
	bl FUN_020D62B8
	pop {r4, pc}
	arm_func_end FUN_020CA658

	arm_func_start FUN_020CA678
FUN_020CA678: @ 0x020CA678
	push {r3, r4, r5, r6, r7, lr}
	mov r5, r2
	mov r7, r0
	mov r4, r3
	mov r6, r1
	mov r0, r5
	mov r1, r4
	bl FUN_020D650C
	cmp r7, r0
	bne _020CA6B0
	mov r0, r5
	mov r1, r4
	mov r2, #0
	bl FUN_020D64D8
_020CA6B0:
	mov r0, r7
	add r1, r7, r6
	bl FUN_020D5374
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020CA678

	arm_func_start FUN_020CA6C0
FUN_020CA6C0: @ 0x020CA6C0
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r8, r0
	mov r7, r1
	mov r6, r2
	mov r5, r3
	bl FUN_020D650C
	cmp r0, #0
	movne r0, #1
	popne {r3, r4, r5, r6, r7, r8, sb, pc}
	mov r0, r8
	bl FUN_020D64D0
	ldr r1, [r8, #0x38]
	sub r0, r0, #1
	add r1, r1, r7
	add r1, r8, r1, lsl #2
	cmp r7, r0
	ldrlo r0, [r1, #0x40]
	ldr r4, [r1, #0x3c]
	ldrhs r0, [r8, #8]
	cmp r5, #0
	sub sb, r0, r4
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	ldr r2, _020CA784 @ =FUN_020CA678
	mov r0, r5
	mov r3, r8
	add r1, sb, #0x20
	str r7, [sp]
	bl FUN_020C9B50
	movs r5, r0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	mov r0, r6
	mov r1, r5
	mov r2, sb
	mov r3, r4
	bl FUN_020C98DC
	cmp sb, r0
	movne r0, #0
	popne {r3, r4, r5, r6, r7, r8, sb, pc}
	mov r0, r5
	mov r1, sb
	bl FUN_020D2878
	mov r0, r8
	mov r1, r7
	mov r2, r5
	bl FUN_020D64D8
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0
_020CA784: .4byte FUN_020CA678
	arm_func_end FUN_020CA6C0

	arm_func_start FUN_020CA788
FUN_020CA788: @ 0x020CA788
	push {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0x1c
	mov r8, r0
	add r0, sp, #0
	mov r7, r1
	mov r6, r2
	mov r5, r3
	ldr r4, [sp, #0x40]
	bl FUN_020D6300
	ldr r1, [sp]
	ldr r0, [sp, #4]
	str r1, [sp, #8]
	str r0, [sp, #0xc]
	cmp r7, #0
	add r2, sp, #8
	addeq sp, sp, #0x1c
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	add r1, sp, #0x10
	mov r0, r7
	bl FUN_020D6320
	cmp r0, #0
	beq _020CA83C
	add sl, sp, #0x10
	add sb, sp, #8
_020CA7EC:
	ldrb r0, [sp, #0x10]
	cmp r0, #1
	ldrheq r0, [sp, #0x14]
	cmpeq r6, r0
	bne _020CA824
	ldrh r1, [sp, #0x12]
	mov r0, r8
	mov r2, r5
	mov r3, r4
	bl FUN_020CA6C0
	cmp r0, #0
	addeq sp, sp, #0x1c
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, pc}
_020CA824:
	mov r0, r7
	mov r1, sl
	mov r2, sb
	bl FUN_020D6320
	cmp r0, #0
	bne _020CA7EC
_020CA83C:
	mov r0, #1
	add sp, sp, #0x1c
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	arm_func_end FUN_020CA788

	arm_func_start FUN_020CA848
FUN_020CA848: @ 0x020CA848
	push {r4, r5, r6, r7, r8, lr}
	mov r4, r0
	bl FUN_020C9634
	mov r6, #0
	mov r5, r6
_020CA85C:
	mov r0, r6
	bl FUN_020C97EC
	movs r7, r0
	beq _020CA8D0
	ldrb r1, [r7]
	mov r0, r6
	bl FUN_020C7F8C
	ldrh r1, [r7, #2]
	mov r0, r6
	bl FUN_020C7FAC
	ldr r0, [r7, #4]
	cmp r0, #0
	cmpne r4, #0
	beq _020CA8D0
	ldrb r0, [r7]
	mov r8, r5
	cmp r0, #0
	ble _020CA8D0
_020CA8A4:
	ldr r2, [r7, #4]
	mov r0, r6
	mov r1, r4
	bl FUN_020C7FC4
	cmp r0, #0
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, pc}
	ldrb r0, [r7]
	add r8, r8, #1
	cmp r8, r0
	blt _020CA8A4
_020CA8D0:
	add r6, r6, #1
	cmp r6, #0x20
	blt _020CA85C
	mov r0, #1
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020CA848

	arm_func_start FUN_020CA8E4
FUN_020CA8E4: @ 0x020CA8E4
	push {r3, r4, r5, r6, r7, lr}
	sub sp, sp, #8
	mov r7, r0
	ldr r0, [sp, #0x20]
	mov r6, r1
	mov r5, r2
	mov r4, r3
	bl FUN_020C965C
	cmp r0, #0
	addeq sp, sp, #8
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	cmp r4, #0
	ldrblt r4, [r0, #8]
	cmp r5, #0
	ldrhlt r5, [r0, #4]
	cmp r6, #0
	ldrblt r6, [r0, #9]
	ldr ip, [sp, #0x20]
	mov r2, r5
	str r0, [sp]
	mov r0, r7
	mov r1, r6
	mov r3, r4
	str ip, [sp, #4]
	bl FUN_020CA9D4
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020CA8E4

	arm_func_start FUN_020CA954
FUN_020CA954: @ 0x020CA954
	push {r3, r4, r5, r6, r7, lr}
	sub sp, sp, #0x10
	mov r6, r1
	mov r7, r0
	mov r0, r6
	mov r5, r2
	bl FUN_020C96C0
	cmp r0, #0
	addeq sp, sp, #0x10
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	ldr r0, [r0]
	bl FUN_020C99A4
	movs r4, r0
	addeq sp, sp, #0x10
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	mov r1, r5
	bl FUN_020CAE8C
	cmp r0, #0
	addeq sp, sp, #0x10
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	stm sp, {r0, r4, r6}
	str r5, [sp, #0xc]
	ldrb r1, [r0, #9]
	ldrh r2, [r0, #4]
	ldrb r3, [r0, #8]
	mov r0, r7
	bl FUN_020CAAD0
	add sp, sp, #0x10
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020CA954

	arm_func_start FUN_020CA9D4
FUN_020CA9D4: @ 0x020CA9D4
	push {r3, r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0xc
	mov r8, r2
	mov r2, r3
	ldr r5, [sp, #0x28]
	mov r6, r0
	mov r7, r1
	bl FUN_020C85FC
	movs r4, r0
	addeq sp, sp, #0xc
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, pc}
	mov r0, r7
	mov r1, r4
	bl FUN_020C8764
	mov r7, r0
	add ip, sp, #4
	mov r0, r8
	mov r2, r7
	mov r1, #6
	mov r3, #0
	str ip, [sp]
	bl FUN_020CA054
	cmp r0, #0
	beq _020CAA4C
	mov r0, r4
	bl FUN_020C8694
	add sp, sp, #0xc
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, pc}
_020CAA4C:
	ldr r0, [sp, #0x2c]
	add ip, sp, #8
	mov r2, r7
	mov r1, #1
	mov r3, #0
	str ip, [sp]
	bl FUN_020C9F70
	cmp r0, #0
	beq _020CAA84
	mov r0, r4
	bl FUN_020C8694
	add sp, sp, #0xc
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, pc}
_020CAA84:
	ldr r2, [sp, #8]
	ldr r3, [sp, #4]
	ldr r1, [r2, #0x18]
	mov r0, r4
	add r1, r2, r1
	mov r2, #0
	bl FUN_020C86A0
	ldrb r1, [r5, #6]
	mov r0, r6
	bl FUN_020C821C
	ldrb r1, [r5, #7]
	mov r0, r6
	bl FUN_020C825C
	ldr r1, [sp, #0x2c]
	mov r0, r6
	bl FUN_020C82FC
	mov r0, #1
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020CA9D4

	arm_func_start FUN_020CAAD0
FUN_020CAAD0: @ 0x020CAAD0
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #8
	mov r7, r2
	mov r2, r3
	ldr r6, [sp, #0x20]
	mov r4, r0
	mov r8, r1
	bl FUN_020C85FC
	movs r5, r0
	addeq sp, sp, #8
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, pc}
	mov r0, r8
	mov r1, r5
	bl FUN_020C8764
	add ip, sp, #4
	mov r2, r0
	mov r0, r7
	mov r1, #6
	mov r3, #0
	str ip, [sp]
	bl FUN_020CA054
	cmp r0, #0
	beq _020CAB44
	mov r0, r5
	bl FUN_020C8694
	add sp, sp, #8
	mov r0, #0
	pop {r4, r5, r6, r7, r8, pc}
_020CAB44:
	ldr ip, [sp, #0x24]
	ldr r2, [r6]
	ldr r1, [ip, #0x18]
	ldr r3, [sp, #4]
	mov r0, r5
	add r1, ip, r1
	bl FUN_020C86A0
	ldrb r1, [r6, #6]
	mov r0, r4
	bl FUN_020C821C
	ldrb r1, [r6, #7]
	mov r0, r4
	bl FUN_020C825C
	ldr r1, [sp, #0x28]
	ldr r2, [sp, #0x2c]
	mov r0, r4
	bl FUN_020C8320
	mov r0, #1
	add sp, sp, #8
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020CAAD0

	arm_func_start FUN_020CAB94
FUN_020CAB94: @ 0x020CAB94
	push {r3, r4, r5, r6, r7, lr}
	ldr r7, _020CAC9C @ =0x021E0FEC
	ldr r4, _020CACA0 @ =0x0210D750
	mov r5, #0
_020CABA4:
	ldr r1, [r7, #0x110]
	lsl r0, r1, #0x1f
	asrs r0, r0, #0x1f
	beq _020CAC88
	ldr r0, [r7, #0x114]
	cmp r0, #0
	bne _020CABCC
	mov r0, r7
	bl FUN_020CACD0
	b _020CAC88
_020CABCC:
	lsl r0, r1, #0x1d
	asrs r0, r0, #0x1f
	ldrne r0, [r7, #0x118]
	cmpne r0, #0
	beq _020CABF8
	mov r0, r7
	bl FUN_020C8D18
	ldr r0, [r7, #0x110]
	orr r0, r0, #2
	bic r0, r0, #4
	str r0, [r7, #0x110]
_020CABF8:
	ldr r0, [r7, #0x110]
	lsl r0, r0, #0x1e
	asrs r0, r0, #0x1f
	beq _020CAC88
	add r0, r7, #0xe8
	bl FUN_020CAF40
	ldr r1, [r7, #0x154]
	add r0, r7, #0xe8
	lsl r1, r1, #1
	ldrsh r6, [r4, r1]
	bl FUN_020CAF0C
	asr r0, r0, #8
	ldr r1, [r7, #0x158]
	lsl r0, r0, #1
	lsl r2, r1, #1
	ldrsh r1, [r4, r0]
	ldrsh r2, [r4, r2]
	ldr r0, [r7, #0x15c]
	add r1, r1, r6
	add r6, r2, r1
	cmp r6, r0
	beq _020CAC60
	mov r0, r7
	mov r1, r6
	bl FUN_020C8D88
	str r6, [r7, #0x15c]
_020CAC60:
	ldr r0, [r7, #0x110]
	lsl r0, r0, #0x1c
	asrs r0, r0, #0x1f
	beq _020CAC88
	add r0, r7, #0xe8
	bl FUN_020CAF58
	cmp r0, #0
	beq _020CAC88
	mov r0, r7
	bl FUN_020CACD0
_020CAC88:
	add r5, r5, #1
	cmp r5, #4
	add r7, r7, #0x174
	blt _020CABA4
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020CAC9C: .4byte 0x021E0FEC
_020CACA0: .4byte 0x0210D750
	arm_func_end FUN_020CAB94

	arm_func_start FUN_020CACA4
FUN_020CACA4: @ 0x020CACA4
	ldr r2, [r0, #0x14c]
	cmp r2, #0
	movne r1, #0
	strne r1, [r2]
	strne r1, [r0, #0x14c]
	ldr r1, [r0, #0x110]
	bic r2, r1, #1
	bic r1, r2, #4
	bic r1, r1, #2
	str r1, [r0, #0x110]
	bx lr
	arm_func_end FUN_020CACA4

	arm_func_start FUN_020CACD0
FUN_020CACD0: @ 0x020CACD0
	push {r4, lr}
	mov r4, r0
	ldr r0, _020CAD60 @ =0x021E0FC8
	bl FUN_020D2618
	ldr r0, _020CAD64 @ =0x021E0950
	ldr r0, [r0, #4]
	cmp r0, #0
	beq _020CACFC
	add r0, r0, #0xc8
	add r0, r0, #0x400
	bl FUN_020D2618
_020CACFC:
	ldr r0, [r4, #0x110]
	lsl r0, r0, #0x1e
	asrs r0, r0, #0x1f
	beq _020CAD14
	mov r0, r4
	bl FUN_020C8D6C
_020CAD14:
	ldr r0, [r4, #0x110]
	lsl r0, r0, #0x1f
	asrs r0, r0, #0x1f
	beq _020CAD30
	ldr r1, [r4, #0x170]
	mov r0, r4
	blx r1
_020CAD30:
	mov r0, r4
	bl FUN_020CAD68
	ldr r0, _020CAD60 @ =0x021E0FC8
	bl FUN_020D269C
	ldr r0, _020CAD64 @ =0x021E0950
	ldr r0, [r0, #4]
	cmp r0, #0
	popeq {r4, pc}
	add r0, r0, #0xc8
	add r0, r0, #0x400
	bl FUN_020D269C
	pop {r4, pc}
	.align 2, 0
_020CAD60: .4byte 0x021E0FC8
_020CAD64: .4byte 0x021E0950
	arm_func_end FUN_020CACD0

	arm_func_start FUN_020CAD68
FUN_020CAD68: @ 0x020CAD68
	push {r4, lr}
	mov r4, r0
	ldr r1, [r4, #0x110]
	lsl r1, r1, #0x1f
	asrs r1, r1, #0x1f
	popeq {r4, pc}
	bl FUN_020CADCC
	ldr r1, [r4, #0x168]
	mov r0, r4
	blx r1
	ldr r0, _020CADC4 @ =0x021E0FE0
	mov r1, r4
	bl FUN_020CADF0
	ldr r0, _020CADC8 @ =0x021E0950
	ldr r0, [r0, #4]
	cmp r0, #0
	beq _020CADB8
	mov r1, r4
	add r0, r0, #0x4e0
	bl FUN_020CADF0
_020CADB8:
	mov r0, r4
	bl FUN_020CACA4
	pop {r4, pc}
	.align 2, 0
_020CADC4: .4byte 0x021E0FE0
_020CADC8: .4byte 0x021E0950
	arm_func_end FUN_020CAD68

	arm_func_start FUN_020CADCC
FUN_020CADCC: @ 0x020CADCC
	push {r3, lr}
	ldr r1, [r0, #0x120]
	cmp r1, #0
	popeq {r3, pc}
	subs r1, r1, #1
	str r1, [r0, #0x120]
	popne {r3, pc}
	bl FUN_020C8B50
	pop {r3, pc}
	arm_func_end FUN_020CADCC

	arm_func_start FUN_020CADF0
FUN_020CADF0: @ 0x020CADF0
	push {r4, r5, r6, r7, r8, lr}
	mov r8, r0
	mov r7, r1
	bl FUN_020D3A38
	mov r4, r0
	mov r0, r8
	mov r1, #0
	bl FUN_020B4D14
	movs r5, r0
	beq _020CAE54
_020CAE18:
	mov r0, r8
	mov r1, r5
	bl FUN_020B4D14
	ldr r1, [r5, #8]
	mov r6, r0
	cmp r1, r7
	bne _020CAE48
	mov r0, r8
	mov r1, r5
	bl FUN_020B4CB4
	mov r0, r5
	bl FUN_020CAE60
_020CAE48:
	mov r5, r6
	cmp r6, #0
	bne _020CAE18
_020CAE54:
	mov r0, r4
	bl FUN_020D3A4C
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020CADF0

	arm_func_start FUN_020CAE60
FUN_020CAE60: @ 0x020CAE60
	push {r3, r4, r5, lr}
	mov r5, r0
	bl FUN_020D3A38
	mov r4, r0
	ldr r0, _020CAE88 @ =0x021E095C
	mov r1, r5
	bl FUN_020B4BAC
	mov r0, r4
	bl FUN_020D3A4C
	pop {r3, r4, r5, pc}
	.align 2, 0
_020CAE88: .4byte 0x021E095C
	arm_func_end FUN_020CAE60

	arm_func_start FUN_020CAE8C
FUN_020CAE8C: @ 0x020CAE8C
	cmp r1, #0
	movlt r0, #0
	bxlt lr
	ldr r2, [r0, #0x1c]
	cmp r1, r2
	movhs r0, #0
	bxhs lr
	mov r2, #0xc
	mul r3, r1, r2
	add ip, r0, #0x20
	ldr r1, [ip, r3]
	sub r0, r2, #0xd
	cmp r1, r0
	add r0, ip, r3
	moveq r0, #0
	bx lr
	arm_func_end FUN_020CAE8C

	arm_func_start FUN_020CAECC
FUN_020CAECC: @ 0x020CAECC
	mov r1, #0
	str r1, [r0, #4]
	str r1, [r0]
	str r1, [r0, #0xc]
	str r1, [r0, #8]
	bx lr
	arm_func_end FUN_020CAECC

	arm_func_start FUN_020CAEE4
FUN_020CAEE4: @ 0x020CAEE4
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_020CAF0C
	stm r6, {r0, r5}
	str r4, [r6, #0xc]
	mov r0, #0
	str r0, [r6, #8]
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020CAEE4

	arm_func_start FUN_020CAF0C
FUN_020CAF0C: @ 0x020CAF0C
	push {r4, lr}
	ldr r1, [r0, #0xc]
	ldr r2, [r0, #8]
	cmp r2, r1
	ldrge r0, [r0, #4]
	popge {r4, pc}
	ldr r4, [r0]
	ldr r0, [r0, #4]
	sub r0, r0, r4
	mul r0, r2, r0
	bl FUN_020F2998
	add r0, r4, r0
	pop {r4, pc}
	arm_func_end FUN_020CAF0C

	arm_func_start FUN_020CAF40
FUN_020CAF40: @ 0x020CAF40
	ldr r2, [r0, #8]
	ldr r1, [r0, #0xc]
	cmp r2, r1
	addlt r1, r2, #1
	strlt r1, [r0, #8]
	bx lr
	arm_func_end FUN_020CAF40

	arm_func_start FUN_020CAF58
FUN_020CAF58: @ 0x020CAF58
	ldr r1, [r0, #8]
	ldr r0, [r0, #0xc]
	cmp r1, r0
	movge r0, #1
	movlt r0, #0
	bx lr
	arm_func_end FUN_020CAF58

	arm_func_start FUN_020CAF70
FUN_020CAF70: @ 0x020CAF70
	mov r1, #0
	mov r2, #0x1000
	mov r3, #0
	stm r0!, {r2, r3}
	stm r0!, {r1, r2}
	bx lr
	arm_func_end FUN_020CAF70

	thumb_func_start FUN_020CAF88
FUN_020CAF88: @ 0x020CAF88
	str r2, [r0]
	str r1, [r0, #4]
	rsbs r1, r1, #0
	str r1, [r0, #8]
	str r2, [r0, #0xc]
	bx lr
	thumb_func_end FUN_020CAF88

	arm_func_start FUN_020CAF94
FUN_020CAF94: @ 0x020CAF94
	push {r3, lr}
	ldr ip, [r0]
	smull lr, ip, r2, ip
	lsr lr, lr, #0xc
	orr lr, lr, ip, lsl #20
	str lr, [r1]
	ldr ip, [r0, #4]
	smull lr, ip, r2, ip
	lsr r2, lr, #0xc
	orr r2, r2, ip, lsl #20
	str r2, [r1, #4]
	ldr r2, [r0, #8]
	smull ip, r2, r3, r2
	lsr ip, ip, #0xc
	orr ip, ip, r2, lsl #20
	str ip, [r1, #8]
	ldr r0, [r0, #0xc]
	smull r2, r0, r3, r0
	lsr r2, r2, #0xc
	orr r2, r2, r0, lsl #20
	str r2, [r1, #0xc]
	pop {r3, pc}
	arm_func_end FUN_020CAF94

	arm_func_start FUN_020CAFEC
FUN_020CAFEC: @ 0x020CAFEC
	mov r2, #0x1000
	str r2, [r0, #0x20]
	mov r3, #0
	stm r0!, {r2, r3}
	mov r1, #0
	stm r0!, {r1, r3}
	stm r0!, {r2, r3}
	stm r0!, {r1, r3}
	bx lr
	arm_func_end FUN_020CAFEC

	arm_func_start FUN_020CB010
FUN_020CB010: @ 0x020CB010
	push {r4, lr}
	ldr r4, [r0]
	ldr ip, [sp, #8]
	smull lr, r4, r2, r4
	lsr lr, lr, #0xc
	orr lr, lr, r4, lsl #20
	str lr, [r1]
	ldr r4, [r0, #4]
	smull lr, r4, r2, r4
	lsr lr, lr, #0xc
	orr lr, lr, r4, lsl #20
	str lr, [r1, #4]
	ldr lr, [r0, #8]
	smull r4, lr, r2, lr
	lsr r2, r4, #0xc
	orr r2, r2, lr, lsl #20
	str r2, [r1, #8]
	ldr r2, [r0, #0xc]
	smull lr, r2, r3, r2
	lsr lr, lr, #0xc
	orr lr, lr, r2, lsl #20
	str lr, [r1, #0xc]
	ldr r2, [r0, #0x10]
	smull lr, r2, r3, r2
	lsr lr, lr, #0xc
	orr lr, lr, r2, lsl #20
	str lr, [r1, #0x10]
	ldr r2, [r0, #0x14]
	smull lr, r2, r3, r2
	lsr r3, lr, #0xc
	orr r3, r3, r2, lsl #20
	str r3, [r1, #0x14]
	ldr r2, [r0, #0x18]
	smull r3, r2, ip, r2
	lsr r3, r3, #0xc
	orr r3, r3, r2, lsl #20
	str r3, [r1, #0x18]
	ldr r2, [r0, #0x1c]
	smull r3, r2, ip, r2
	lsr r3, r3, #0xc
	orr r3, r3, r2, lsl #20
	str r3, [r1, #0x1c]
	ldr r0, [r0, #0x20]
	smull r2, r0, ip, r0
	lsr r2, r2, #0xc
	orr r2, r2, r0, lsl #20
	str r2, [r1, #0x20]
	pop {r4, pc}
	arm_func_end FUN_020CB010

	thumb_func_start FUN_020CB0D0
FUN_020CB0D0: @ 0x020CB0D0
	movs r3, #1
	lsls r3, r3, #0xc
	str r3, [r0]
	movs r3, #0
	str r3, [r0, #4]
	str r3, [r0, #8]
	str r3, [r0, #0xc]
	str r2, [r0, #0x10]
	str r1, [r0, #0x14]
	str r3, [r0, #0x18]
	rsbs r1, r1, #0
	str r1, [r0, #0x1c]
	str r2, [r0, #0x20]
	bx lr
	thumb_func_end FUN_020CB0D0

	thumb_func_start FUN_020CB0EC
FUN_020CB0EC: @ 0x020CB0EC
	str r2, [r0]
	str r2, [r0, #0x20]
	movs r3, #0
	str r3, [r0, #4]
	str r3, [r0, #0xc]
	str r3, [r0, #0x14]
	str r3, [r0, #0x1c]
	rsbs r2, r1, #0
	movs r3, #1
	lsls r3, r3, #0xc
	str r1, [r0, #0x18]
	str r2, [r0, #8]
	str r3, [r0, #0x10]
	bx lr
	thumb_func_end FUN_020CB0EC

	thumb_func_start FUN_020CB108
FUN_020CB108: @ 0x020CB108
	stm r0!, {r2}
	movs r3, #0
	stm r0!, {r1, r3}
	rsbs r1, r1, #0
	stm r0!, {r1, r2}
	movs r1, #1
	lsls r1, r1, #0xc
	str r3, [r0]
	str r3, [r0, #4]
	str r3, [r0, #8]
	str r1, [r0, #0xc]
	bx lr
	thumb_func_end FUN_020CB108

	arm_func_start FUN_020CB120
FUN_020CB120: @ 0x020CB120
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x50
	mov sl, r0
	ldr r0, [sl, #0x14]
	cmp sl, r1
	addeq sb, sp, #0x2c
	ldr r3, [sl, #0x18]
	ldr r2, [sl, #0xc]
	ldr r6, [sl, #0x20]
	str r1, [sp]
	movne sb, r1
	smull fp, r8, r2, r6
	smull r7, r1, r0, r3
	subs r7, fp, r7
	sbc ip, r8, r1
	ldr r4, [sl, #0x10]
	ldr r5, [sl, #0x1c]
	adds r1, r7, #0x800
	smull fp, r8, r4, r6
	smull r7, r6, r0, r5
	adc r0, ip, #0
	subs r7, fp, r7
	sbc r6, r8, r6
	lsr r8, r1, #0xc
	orr r8, r8, r0, lsl #20
	smull r1, r0, r2, r5
	adds r7, r7, #0x800
	smull r5, r3, r4, r3
	adc r2, r6, #0
	lsr r7, r7, #0xc
	orr r7, r7, r2, lsl #20
	subs r1, r1, r5
	sbc r5, r0, r3
	ldr r2, [sl]
	adds r6, r1, #0x800
	ldr fp, [sl, #4]
	smull r4, r3, r2, r7
	smull r1, r0, fp, r8
	adc r2, r5, #0
	lsr r6, r6, #0xc
	orr r6, r6, r2, lsl #20
	subs r2, r4, r1
	ldr r1, [sl, #8]
	sbc r0, r3, r0
	smlal r2, r0, r1, r6
	adds r1, r2, #0x800
	adc r2, r0, #0
	lsr r0, r1, #0xc
	asr r1, r8, #0x1f
	str r1, [sp, #4]
	asr r1, r7, #0x1f
	str r1, [sp, #8]
	asr r1, r6, #0x1f
	str r1, [sp, #0xc]
	orrs r0, r0, r2, lsl #20
	mov r1, #0
	addeq sp, sp, #0x50
	subeq r0, r1, #1
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	bl FUN_020CCC7C
	ldr r1, [sl, #8]
	ldr r2, [sl, #0x1c]
	ldr fp, [sl, #0x10]
	smull r0, r4, r2, r1
	smull r3, r2, fp, r1
	ldr r5, [sl, #0x18]
	str r2, [sp, #0x18]
	str r3, [sp, #0x14]
	smull r3, r2, r5, r1
	str r2, [sp, #0x20]
	ldr r2, [sl, #0x20]
	str r3, [sp, #0x1c]
	str r2, [sp, #0x10]
	ldr r5, [sp, #0x10]
	ldm sl, {r3, lr}
	smull ip, r5, lr, r5
	subs r0, ip, r0
	ldr r2, [sl, #0xc]
	sbc r4, r5, r4
	smull r1, r5, r2, r1
	str r5, [sp, #0x28]
	lsr r5, r0, #0xc
	ldr fp, [sl, #0x14]
	orr r5, r5, r4, lsl #20
	smull r4, r2, lr, fp
	ldr r0, [sp, #0x14]
	subs r4, r4, r0
	ldr r0, [sp, #0x18]
	lsr r4, r4, #0xc
	sbc r0, r2, r0
	orr r4, r4, r0, lsl #20
	ldr r0, [sp, #0x10]
	ldr r2, [sp, #0x1c]
	smull ip, r0, r3, r0
	subs r2, ip, r2
	ldr ip, [sp, #0x20]
	sbc r0, r0, ip
	smull ip, fp, r3, fp
	ldr r3, [sp, #0x28]
	subs r1, ip, r1
	sbc r3, fp, r3
	lsr fp, r2, #0xc
	orr fp, fp, r0, lsl #20
	lsr r0, r1, #0xc
	orr r0, r0, r3, lsl #20
	str r0, [sp, #0x24]
	bl FUN_020CCC44
	smull r2, r1, r0, r5
	lsr r2, r2, #0xc
	orr r2, r2, r1, lsl #20
	rsb lr, r2, #0
	smull r2, r1, r0, r4
	lsr r4, r2, #0xc
	orr r4, r4, r1, lsl #20
	smull r2, r1, r0, fp
	lsr r3, r2, #0xc
	orr r3, r3, r1, lsl #20
	ldr r1, [sp, #0x24]
	umull fp, r5, r0, r7
	smull r2, r1, r0, r1
	lsr r2, r2, #0xc
	orr r2, r2, r1, lsl #20
	ldr r1, [sp, #8]
	asr ip, r0, #0x1f
	mla r5, r0, r1, r5
	mla r5, ip, r7, r5
	lsr r1, fp, #0xc
	orr r1, r1, r5, lsl #20
	stm sb, {r1, lr}
	str r4, [sb, #8]
	ldr r1, [sp, #4]
	umull r5, r4, r0, r8
	mla r4, r0, r1, r4
	mla r4, ip, r8, r4
	lsr r1, r5, #0xc
	orr r1, r1, r4, lsl #20
	rsb r1, r1, #0
	str r1, [sb, #0xc]
	ldr r1, [sp, #0xc]
	rsb r2, r2, #0
	str r3, [sb, #0x10]
	str r2, [sb, #0x14]
	umull r3, r2, r0, r6
	mla r2, r0, r1, r2
	mla r2, ip, r6, r2
	lsr r1, r3, #0xc
	orr r1, r1, r2, lsl #20
	str r1, [sb, #0x18]
	ldr r3, [sl]
	ldr r1, [sl, #0x1c]
	ldr r2, [sl, #0x18]
	smull r5, r4, r3, r1
	ldr r1, [sl, #4]
	smull r3, r1, r2, r1
	subs r2, r5, r3
	sbc r1, r4, r1
	lsr r2, r2, #0xc
	orr r2, r2, r1, lsl #20
	smull r2, r1, r0, r2
	lsr r2, r2, #0xc
	orr r2, r2, r1, lsl #20
	rsb r1, r2, #0
	str r1, [sb, #0x1c]
	ldr r4, [sl]
	ldr r3, [sl, #0x10]
	ldr r2, [sl, #0xc]
	ldr r1, [sl, #4]
	smull r6, r5, r4, r3
	smull r3, r1, r2, r1
	subs r2, r6, r3
	sbc r1, r5, r1
	lsr r2, r2, #0xc
	orr r2, r2, r1, lsl #20
	asr r1, r2, #0x1f
	umull r4, r3, r0, r2
	mla r3, r0, r1, r3
	add r0, sp, #0x2c
	mla r3, ip, r2, r3
	lsr r1, r4, #0xc
	orr r1, r1, r3, lsl #20
	str r1, [sb, #0x20]
	cmp sb, r0
	bne _020CB404
	ldr r1, [sp]
	bl FUN_020D4928
_020CB404:
	mov r0, #0
	add sp, sp, #0x50
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_020CB120

	arm_func_start FUN_020CB410
FUN_020CB410: @ 0x020CB410
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x40
	mov ip, r2
	ldr r3, [r0, #4]
	ldr r2, [r1, #0xc]
	cmp ip, r1
	smull r7, r5, r3, r2
	ldr r6, [r0]
	ldr r4, [r1]
	addeq sl, sp, #0x1c
	smlal r7, r5, r6, r4
	ldr r2, [r0, #8]
	ldr r4, [r1, #0x18]
	movne sl, ip
	smlal r7, r5, r2, r4
	lsr r4, r7, #0xc
	orr r4, r4, r5, lsl #20
	str r4, [sl]
	ldr r4, [r1, #0x10]
	ldr r5, [r1, #4]
	smull r8, r7, r3, r4
	smlal r8, r7, r6, r5
	ldr r4, [r1, #0x1c]
	smlal r8, r7, r2, r4
	lsr r4, r8, #0xc
	orr r4, r4, r7, lsl #20
	str r4, [sl, #4]
	ldr r4, [r1, #0x14]
	ldr r5, [r1, #8]
	smull r8, r7, r3, r4
	smlal r8, r7, r6, r5
	ldr r3, [r1, #0x20]
	smlal r8, r7, r2, r3
	lsr r2, r8, #0xc
	orr r2, r2, r7, lsl #20
	str r2, [sl, #8]
	ldr sb, [r0, #0x10]
	ldr r2, [r0, #0xc]
	smull r7, r6, sb, r4
	smlal r7, r6, r2, r5
	ldr r4, [r0, #0x14]
	smlal r7, r6, r4, r3
	lsr r3, r7, #0xc
	orr r3, r3, r6, lsl #20
	str r3, [sl, #0x14]
	ldr r3, [r1, #0x10]
	ldr r5, [r1, #4]
	smull r7, r6, sb, r3
	smlal r7, r6, r2, r5
	ldr r5, [r1, #0x1c]
	asr r3, sb, #0x1f
	smlal r7, r6, r4, r5
	str r3, [sp]
	lsr r3, r7, #0xc
	orr r3, r3, r6, lsl #20
	str r3, [sl, #0x10]
	asr r3, r2, #0x1f
	str r3, [sp, #4]
	asr r3, r4, #0x1f
	ldr r8, [r1, #0xc]
	str r3, [sp, #8]
	asr r3, r8, #0x1f
	str r3, [sp, #0x18]
	ldr r7, [r1]
	ldr r6, [r1, #0x18]
	asr r3, r7, #0x1f
	str r3, [sp, #0xc]
	umull r3, r5, r4, r6
	asr fp, r6, #0x1f
	str r3, [sp, #0x10]
	mla r5, r4, fp, r5
	ldr r3, [sp, #8]
	add lr, sp, #0x1c
	mla r5, r3, r6, r5
	umull r3, r4, r2, r7
	str r3, [sp, #0x14]
	ldr r3, [sp, #0xc]
	mla r4, r2, r3, r4
	ldr r2, [sp, #4]
	umull r3, fp, sb, r8
	mla r4, r2, r7, r4
	ldr r2, [sp, #0x14]
	adds r3, r2, r3
	ldr r2, [sp, #0x18]
	mla fp, sb, r2, fp
	ldr r2, [sp]
	mla fp, r2, r8, fp
	adc r4, r4, fp
	ldr r2, [sp, #0x10]
	ldr fp, [sp, #0x18]
	adds r3, r2, r3
	adc r2, r5, r4
	lsr r3, r3, #0xc
	orr r3, r3, r2, lsl #20
	str r3, [sl, #0xc]
	ldr r2, [r0, #0x1c]
	ldr r5, [r0, #0x18]
	ldr r4, [r0, #0x20]
	umull r3, r0, r2, r8
	mla r0, r2, fp, r0
	asr sb, r2, #0x1f
	mla r0, sb, r8, r0
	smlal r3, r0, r5, r7
	smlal r3, r0, r4, r6
	lsr r3, r3, #0xc
	orr r3, r3, r0, lsl #20
	str r3, [sl, #0x18]
	ldr r0, [r1, #0x10]
	ldr r3, [r1, #4]
	smull r7, r0, r2, r0
	cmp sl, lr
	smlal r7, r0, r5, r3
	ldr r6, [r1, #0x1c]
	addne sp, sp, #0x40
	smlal r7, r0, r4, r6
	lsr r3, r7, #0xc
	orr r3, r3, r0, lsl #20
	str r3, [sl, #0x1c]
	ldr r0, [r1, #0x14]
	ldr r6, [r1, #0x20]
	ldr r3, [r1, #8]
	smull r1, r0, r2, r0
	smlal r1, r0, r5, r3
	smlal r1, r0, r4, r6
	lsr r1, r1, #0xc
	orr r1, r1, r0, lsl #20
	str r1, [sl, #0x20]
	popne {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldm lr!, {r0, r1, r2, r3}
	stm ip!, {r0, r1, r2, r3}
	ldm lr!, {r0, r1, r2, r3}
	stm ip!, {r0, r1, r2, r3}
	ldr r0, [lr]
	str r0, [ip]
	add sp, sp, #0x40
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_020CB410

	arm_func_start FUN_020CB630
FUN_020CB630: @ 0x020CB630
	push {r4, r5, r6, lr}
	ldr r4, [r1, #0xc]
	ldm r0, {r3, ip}
	smull r6, r5, ip, r4
	ldr r4, [r1]
	ldr r0, [r0, #8]
	smlal r6, r5, r3, r4
	ldr r4, [r1, #0x18]
	smlal r6, r5, r0, r4
	lsr r4, r6, #0xc
	orr r4, r4, r5, lsl #20
	str r4, [r2]
	ldr r4, [r1, #0x10]
	ldr r5, [r1, #4]
	smull r6, lr, ip, r4
	smlal r6, lr, r3, r5
	ldr r4, [r1, #0x1c]
	smlal r6, lr, r0, r4
	lsr r4, r6, #0xc
	orr r4, r4, lr, lsl #20
	str r4, [r2, #4]
	ldr lr, [r1, #0x14]
	ldr r4, [r1, #8]
	smull r5, lr, ip, lr
	smlal r5, lr, r3, r4
	ldr r1, [r1, #0x20]
	smlal r5, lr, r0, r1
	lsr r0, r5, #0xc
	orr r0, r0, lr, lsl #20
	str r0, [r2, #8]
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020CB630

	arm_func_start FUN_020CB6AC
FUN_020CB6AC: @ 0x020CB6AC
	mov r2, #0x1000
	mov r3, #0
	stm r0!, {r2, r3}
	mov r1, #0
	stm r0!, {r1, r3}
	stm r0!, {r2, r3}
	stm r0!, {r1, r3}
	stm r0!, {r2, r3}
	stm r0!, {r1, r3}
	bx lr
	arm_func_end FUN_020CB6AC

	arm_func_start FUN_020CB6D4
FUN_020CB6D4: @ 0x020CB6D4
	stmdb sp!, {r4}
	mov ip, #0
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4, ip}
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4, ip}
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4, ip}
	mov ip, #0x1000
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4, ip}
	ldm sp!, {r4}
	bx lr
	arm_func_end FUN_020CB6D4

	arm_func_start FUN_020CB708
FUN_020CB708: @ 0x020CB708
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	mov r6, r1
	mov r5, r2
	mov r4, r3
	cmp r7, r6
	beq _020CB728
	bl FUN_020D4928
_020CB728:
	ldr r0, [r7, #0xc]
	ldr r1, [r7]
	smull r3, r2, r4, r0
	smlal r3, r2, r5, r1
	ldr r0, [sp, #0x18]
	ldr r1, [r7, #0x18]
	ldr ip, [r7, #0x24]
	smlal r3, r2, r0, r1
	lsr r1, r3, #0xc
	orr r1, r1, r2, lsl #20
	add r1, ip, r1
	str r1, [r6, #0x24]
	ldr r1, [r7, #0x10]
	ldr r2, [r7, #4]
	smull ip, r3, r4, r1
	smlal ip, r3, r5, r2
	ldr r1, [r7, #0x1c]
	ldr r2, [r7, #0x28]
	smlal ip, r3, r0, r1
	lsr r1, ip, #0xc
	orr r1, r1, r3, lsl #20
	add r1, r2, r1
	str r1, [r6, #0x28]
	ldr r1, [r7, #0x14]
	ldr r2, [r7, #8]
	smull ip, r3, r4, r1
	smlal ip, r3, r5, r2
	ldr r1, [r7, #0x20]
	ldr r2, [r7, #0x2c]
	smlal ip, r3, r0, r1
	lsr r0, ip, #0xc
	orr r0, r0, r3, lsl #20
	add r0, r2, r0
	str r0, [r6, #0x2c]
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020CB708

	thumb_func_start FUN_020CB7B4
FUN_020CB7B4: @ 0x020CB7B4
	stm r0!, {r1}
	movs r1, #0
	str r3, [r0, #0x1c]
	movs r3, #0
	stm r0!, {r1, r3}
	stm r0!, {r1, r2, r3}
	movs r2, #0
	stm r0!, {r1, r3}
	adds r0, #4
	stm r0!, {r1, r2, r3}
	bx lr
	.align 2, 0
	thumb_func_end FUN_020CB7B4

	arm_func_start FUN_020CB7CC
FUN_020CB7CC: @ 0x020CB7CC
	push {r3, r4, r5, lr}
	ldr ip, [sp, #0x10]
	mov r5, r0
	str ip, [sp]
	mov r4, r1
	bl FUN_020CB010
	ldr r0, [r5, #0x24]
	str r0, [r4, #0x24]
	ldr r0, [r5, #0x28]
	str r0, [r4, #0x28]
	ldr r0, [r5, #0x2c]
	str r0, [r4, #0x2c]
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020CB7CC

	thumb_func_start FUN_020CB800
FUN_020CB800: @ 0x020CB800
	str r1, [r0, #0x14]
	rsbs r1, r1, #0
	str r1, [r0, #0x1c]
	movs r1, #1
	lsls r1, r1, #0xc
	stm r0!, {r1}
	movs r3, #0
	movs r1, #0
	stm r0!, {r1, r3}
	stm r0!, {r1, r2}
	str r1, [r0, #4]
	adds r0, #0xc
	stm r0!, {r2, r3}
	stm r0!, {r1, r3}
	bx lr
	.align 2, 0
	thumb_func_end FUN_020CB800

	thumb_func_start FUN_020CB820
FUN_020CB820: @ 0x020CB820
	str r1, [r0, #0x18]
	movs r3, #0
	stm r0!, {r2, r3}
	rsbs r1, r1, #0
	stm r0!, {r1, r3}
	movs r1, #1
	lsls r1, r1, #0xc
	stm r0!, {r1, r3}
	adds r0, #4
	movs r1, #0
	stm r0!, {r1, r2, r3}
	stm r0!, {r1, r3}
	bx lr
	.align 2, 0
	thumb_func_end FUN_020CB820

	arm_func_start FUN_020CB83C
FUN_020CB83C: @ 0x020CB83C
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x5c
	mov sl, r0
	ldr r0, [sl, #0x14]
	cmp sl, r1
	addeq sb, sp, #0x2c
	ldr r3, [sl, #0x18]
	ldr r2, [sl, #0xc]
	ldr r6, [sl, #0x20]
	str r1, [sp]
	movne sb, r1
	smull fp, r8, r2, r6
	smull r7, r1, r0, r3
	subs r7, fp, r7
	sbc ip, r8, r1
	ldr r4, [sl, #0x10]
	ldr r5, [sl, #0x1c]
	adds r1, r7, #0x800
	smull fp, r8, r4, r6
	smull r7, r6, r0, r5
	adc r0, ip, #0
	subs r7, fp, r7
	sbc r6, r8, r6
	lsr r8, r1, #0xc
	orr r8, r8, r0, lsl #20
	smull r1, r0, r2, r5
	adds r7, r7, #0x800
	smull r5, r3, r4, r3
	adc r2, r6, #0
	lsr r7, r7, #0xc
	orr r7, r7, r2, lsl #20
	subs r1, r1, r5
	sbc r5, r0, r3
	ldr r2, [sl]
	adds r6, r1, #0x800
	ldr fp, [sl, #4]
	smull r4, r3, r2, r7
	smull r1, r0, fp, r8
	adc r2, r5, #0
	lsr r6, r6, #0xc
	orr r6, r6, r2, lsl #20
	subs r2, r4, r1
	ldr r1, [sl, #8]
	sbc r0, r3, r0
	smlal r2, r0, r1, r6
	adds r1, r2, #0x800
	adc r2, r0, #0
	lsr r0, r1, #0xc
	asr r1, r8, #0x1f
	str r1, [sp, #4]
	asr r1, r7, #0x1f
	str r1, [sp, #8]
	asr r1, r6, #0x1f
	str r1, [sp, #0xc]
	orrs r0, r0, r2, lsl #20
	mov r1, #0
	addeq sp, sp, #0x5c
	subeq r0, r1, #1
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	bl FUN_020CCC7C
	ldr r1, [sl, #8]
	ldr r2, [sl, #0x1c]
	ldr fp, [sl, #0x10]
	smull r0, r4, r2, r1
	smull r3, r2, fp, r1
	ldr r5, [sl, #0x18]
	str r2, [sp, #0x18]
	str r3, [sp, #0x14]
	smull r3, r2, r5, r1
	str r2, [sp, #0x20]
	ldr r2, [sl, #0x20]
	str r3, [sp, #0x1c]
	str r2, [sp, #0x10]
	ldr r5, [sp, #0x10]
	ldm sl, {r3, lr}
	smull ip, r5, lr, r5
	subs r0, ip, r0
	ldr r2, [sl, #0xc]
	sbc r4, r5, r4
	smull r1, r5, r2, r1
	str r5, [sp, #0x28]
	lsr r5, r0, #0xc
	ldr fp, [sl, #0x14]
	orr r5, r5, r4, lsl #20
	smull r4, r2, lr, fp
	ldr r0, [sp, #0x14]
	subs r4, r4, r0
	ldr r0, [sp, #0x18]
	lsr r4, r4, #0xc
	sbc r0, r2, r0
	orr r4, r4, r0, lsl #20
	ldr r0, [sp, #0x10]
	ldr r2, [sp, #0x1c]
	smull ip, r0, r3, r0
	subs r2, ip, r2
	ldr ip, [sp, #0x20]
	sbc r0, r0, ip
	smull ip, fp, r3, fp
	ldr r3, [sp, #0x28]
	subs r1, ip, r1
	sbc r3, fp, r3
	lsr fp, r2, #0xc
	orr fp, fp, r0, lsl #20
	lsr r0, r1, #0xc
	orr r0, r0, r3, lsl #20
	str r0, [sp, #0x24]
	bl FUN_020CCC44
	smull r2, r1, r0, r5
	lsr r2, r2, #0xc
	orr r2, r2, r1, lsl #20
	rsb lr, r2, #0
	smull r2, r1, r0, r4
	lsr r4, r2, #0xc
	orr r4, r4, r1, lsl #20
	smull r2, r1, r0, fp
	lsr r3, r2, #0xc
	orr r3, r3, r1, lsl #20
	ldr r1, [sp, #0x24]
	umull fp, r5, r0, r7
	smull r2, r1, r0, r1
	lsr r2, r2, #0xc
	orr r2, r2, r1, lsl #20
	ldr r1, [sp, #8]
	asr ip, r0, #0x1f
	mla r5, r0, r1, r5
	mla r5, ip, r7, r5
	lsr r1, fp, #0xc
	orr r1, r1, r5, lsl #20
	stm sb, {r1, lr}
	str r4, [sb, #8]
	ldr r1, [sp, #4]
	umull r5, r4, r0, r8
	mla r4, r0, r1, r4
	mla r4, ip, r8, r4
	lsr r1, r5, #0xc
	orr r1, r1, r4, lsl #20
	rsb r1, r1, #0
	str r1, [sb, #0xc]
	ldr r1, [sp, #0xc]
	rsb r2, r2, #0
	str r3, [sb, #0x10]
	str r2, [sb, #0x14]
	umull r3, r2, r0, r6
	mla r2, r0, r1, r2
	mla r2, ip, r6, r2
	lsr r1, r3, #0xc
	orr r1, r1, r2, lsl #20
	str r1, [sb, #0x18]
	ldr r3, [sl]
	ldr r1, [sl, #0x1c]
	ldr r2, [sl, #0x18]
	smull r5, r4, r3, r1
	ldr r1, [sl, #4]
	smull r3, r1, r2, r1
	subs r2, r5, r3
	sbc r1, r4, r1
	lsr r2, r2, #0xc
	orr r2, r2, r1, lsl #20
	smull r2, r1, r0, r2
	lsr r2, r2, #0xc
	orr r2, r2, r1, lsl #20
	rsb r1, r2, #0
	str r1, [sb, #0x1c]
	ldr r4, [sl]
	ldr r3, [sl, #0x10]
	ldr r2, [sl, #0xc]
	ldr r1, [sl, #4]
	smull r6, r5, r4, r3
	smull r3, r1, r2, r1
	subs r2, r6, r3
	sbc r1, r5, r1
	lsr r2, r2, #0xc
	orr r2, r2, r1, lsl #20
	asr r1, r2, #0x1f
	umull r4, r3, r0, r2
	mla r3, r0, r1, r3
	mla r3, ip, r2, r3
	lsr r0, r4, #0xc
	orr r0, r0, r3, lsl #20
	str r0, [sb, #0x20]
	ldr r1, [sb, #0xc]
	ldr r0, [sl, #0x28]
	ldr r2, [sb]
	smull r5, r4, r1, r0
	ldr r0, [sl, #0x24]
	ldr r3, [sb, #0x18]
	smlal r5, r4, r2, r0
	ldr r1, [sl, #0x2c]
	add r0, sp, #0x2c
	smlal r5, r4, r3, r1
	lsr r1, r5, #0xc
	orr r1, r1, r4, lsl #20
	rsb r1, r1, #0
	str r1, [sb, #0x24]
	ldr r2, [sb, #0x10]
	ldr r1, [sl, #0x28]
	ldr r3, [sb, #4]
	smull r5, r4, r2, r1
	ldr r1, [sl, #0x24]
	ldr r2, [sb, #0x1c]
	smlal r5, r4, r3, r1
	ldr r1, [sl, #0x2c]
	cmp sb, r0
	smlal r5, r4, r2, r1
	lsr r1, r5, #0xc
	orr r1, r1, r4, lsl #20
	rsb r1, r1, #0
	str r1, [sb, #0x28]
	ldr r2, [sb, #0x14]
	ldr r1, [sl, #0x28]
	ldr r3, [sb, #8]
	smull r6, r5, r2, r1
	ldr r1, [sl, #0x24]
	ldr r4, [sb, #0x20]
	smlal r6, r5, r3, r1
	ldr r2, [sl, #0x2c]
	smlal r6, r5, r4, r2
	lsr r1, r6, #0xc
	orr r1, r1, r5, lsl #20
	rsb r1, r1, #0
	str r1, [sb, #0x2c]
	bne _020CBBBC
	ldr r1, [sp]
	bl FUN_020D4944
_020CBBBC:
	mov r0, #0
	add sp, sp, #0x5c
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_020CB83C

	arm_func_start FUN_020CBBC8
FUN_020CBBC8: @ 0x020CBBC8
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x4c
	mov ip, r2
	ldr r2, [r0, #4]
	ldr r3, [r1, #0xc]
	cmp ip, r1
	smull r7, r4, r2, r3
	ldr r6, [r0]
	ldr r3, [r1]
	addeq sl, sp, #0x1c
	smlal r7, r4, r6, r3
	ldr r5, [r0, #8]
	ldr r3, [r1, #0x18]
	movne sl, ip
	smlal r7, r4, r5, r3
	lsr r3, r7, #0xc
	orr r3, r3, r4, lsl #20
	str r3, [sl]
	ldr r3, [r1, #0x10]
	ldr r4, [r1, #4]
	smull r8, r7, r2, r3
	smlal r8, r7, r6, r4
	ldr r3, [r1, #0x1c]
	smlal r8, r7, r5, r3
	lsr r3, r8, #0xc
	orr r3, r3, r7, lsl #20
	str r3, [sl, #4]
	ldr r3, [r1, #0x14]
	ldr r4, [r1, #8]
	smull r8, r7, r2, r3
	smlal r8, r7, r6, r4
	ldr r2, [r1, #0x20]
	smlal r8, r7, r5, r2
	lsr r5, r8, #0xc
	orr r5, r5, r7, lsl #20
	str r5, [sl, #8]
	ldr r8, [r0, #0x10]
	ldr sb, [r0, #0xc]
	smull r5, r3, r8, r3
	smlal r5, r3, sb, r4
	ldr r7, [r0, #0x14]
	asr r6, sb, #0x1f
	smlal r5, r3, r7, r2
	lsr r2, r5, #0xc
	orr r2, r2, r3, lsl #20
	str r2, [sl, #0x14]
	ldr r2, [r1, #0x10]
	ldr r3, [r1, #4]
	smull r5, r4, r8, r2
	smlal r5, r4, sb, r3
	ldr r3, [r1, #0x1c]
	asr r2, r8, #0x1f
	smlal r5, r4, r7, r3
	str r2, [sp, #0x14]
	lsr r2, r5, #0xc
	orr r2, r2, r4, lsl #20
	str r2, [sl, #0x10]
	asr r2, r7, #0x1f
	ldr r5, [r1]
	str r2, [sp]
	ldr r4, [r1, #0xc]
	ldr lr, [r1, #0x18]
	asr r2, r4, #0x1f
	str r2, [sp, #4]
	asr r2, r5, #0x1f
	str r2, [sp, #8]
	umull r2, r3, r7, lr
	asr fp, lr, #0x1f
	mla r3, r7, fp, r3
	str r2, [sp, #0xc]
	ldr r2, [sp]
	ldr r7, [sp, #8]
	mla r3, r2, lr, r3
	umull fp, r2, sb, r5
	mla r2, sb, r7, r2
	mla r2, r6, r5, r2
	ldr r6, [sp, #4]
	umull sb, r7, r8, r4
	mla r7, r8, r6, r7
	ldr r8, [sp, #0x14]
	adds r6, fp, sb
	mla r7, r8, r4, r7
	adc r7, r2, r7
	ldr r2, [sp, #0xc]
	adds r6, r2, r6
	adc r2, r3, r7
	lsr r3, r6, #0xc
	orr r3, r3, r2, lsl #20
	str r3, [sl, #0xc]
	ldr r3, [r0, #0x1c]
	ldr r6, [r0, #0x18]
	smull r7, r4, r3, r4
	smlal r7, r4, r6, r5
	ldr r2, [r0, #0x20]
	smlal r7, r4, r2, lr
	lsr r5, r7, #0xc
	orr r5, r5, r4, lsl #20
	str r5, [sl, #0x18]
	ldr r4, [r1, #0x10]
	ldr r5, [r1, #4]
	smull r8, r4, r3, r4
	smlal r8, r4, r6, r5
	ldr r7, [r1, #0x1c]
	smlal r8, r4, r2, r7
	lsr r5, r8, #0xc
	orr r5, r5, r4, lsl #20
	str r5, [sl, #0x1c]
	ldr r5, [r1, #0x14]
	ldr r4, [r1, #8]
	smull r8, r7, r3, r5
	smlal r8, r7, r6, r4
	ldr r3, [r1, #0x20]
	smlal r8, r7, r2, r3
	lsr r2, r8, #0xc
	orr r2, r2, r7, lsl #20
	str r2, [sl, #0x20]
	ldr r2, [r0, #0x28]
	ldr sb, [r0, #0x24]
	ldr r7, [r0, #0x2c]
	smull r5, r0, r2, r5
	smlal r5, r0, sb, r4
	smlal r5, r0, r7, r3
	lsr r3, r5, #0xc
	orr r3, r3, r0, lsl #20
	asr r0, r7, #0x1f
	str r0, [sp, #0x18]
	ldr r0, [r1, #0x2c]
	asr fp, r2, #0x1f
	adds r0, r0, r3
	str r0, [sl, #0x2c]
	ldr r3, [r1, #0x10]
	ldr r4, [r1, #4]
	smull r6, r3, r2, r3
	smlal r6, r3, sb, r4
	ldr r5, [r1, #0x1c]
	ldr r0, [r1, #0x28]
	smlal r6, r3, r7, r5
	lsr r4, r6, #0xc
	orr r4, r4, r3, lsl #20
	adds r0, r0, r4
	asr r8, sb, #0x1f
	str r0, [sl, #0x28]
	ldr r4, [r1]
	ldr r3, [r1, #0xc]
	umull r0, r5, sb, r4
	asr lr, r4, #0x1f
	mla r5, sb, lr, r5
	asr sb, r3, #0x1f
	str r0, [sp, #0x10]
	mla r5, r8, r4, r5
	umull r8, r0, r2, r3
	mla r0, r2, sb, r0
	ldr r4, [sp, #0x10]
	mla r0, fp, r3, r0
	adds r4, r4, r8
	adc r2, r5, r0
	ldr r6, [r1, #0x18]
	ldr r8, [r1, #0x24]
	asr r1, r6, #0x1f
	umull r5, r3, r7, r6
	mla r3, r7, r1, r3
	adds r1, r5, r4
	ldr r0, [sp, #0x18]
	lsr r1, r1, #0xc
	mla r3, r0, r6, r3
	adc r0, r3, r2
	orr r1, r1, r0, lsl #20
	adds r0, r8, r1
	add r4, sp, #0x1c
	cmp sl, r4
	addne sp, sp, #0x4c
	str r0, [sl, #0x24]
	popne {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldm r4!, {r0, r1, r2, r3}
	stm ip!, {r0, r1, r2, r3}
	ldm r4!, {r0, r1, r2, r3}
	stm ip!, {r0, r1, r2, r3}
	ldm r4, {r0, r1, r2, r3}
	stm ip, {r0, r1, r2, r3}
	add sp, sp, #0x4c
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_020CBBC8

	arm_func_start FUN_020CBE9C
FUN_020CBE9C: @ 0x020CBE9C
	push {r4, r5, r6, lr}
	ldr r4, [r1, #0xc]
	ldm r0, {r3, ip}
	smull r6, r5, ip, r4
	ldr r4, [r1]
	ldr r0, [r0, #8]
	smlal r6, r5, r3, r4
	ldr r4, [r1, #0x18]
	smlal r6, r5, r0, r4
	lsr r6, r6, #0xc
	orr r6, r6, r5, lsl #20
	str r6, [r2]
	ldr r4, [r1, #0x24]
	add r4, r6, r4
	str r4, [r2]
	ldr r4, [r1, #0x10]
	ldr r5, [r1, #4]
	smull r6, lr, ip, r4
	smlal r6, lr, r3, r5
	ldr r4, [r1, #0x1c]
	smlal r6, lr, r0, r4
	lsr r5, r6, #0xc
	orr r5, r5, lr, lsl #20
	str r5, [r2, #4]
	ldr r4, [r1, #0x28]
	add r4, r5, r4
	str r4, [r2, #4]
	ldr lr, [r1, #0x14]
	ldr r4, [r1, #8]
	smull r5, lr, ip, lr
	smlal r5, lr, r3, r4
	ldr r3, [r1, #0x20]
	smlal r5, lr, r0, r3
	lsr r3, r5, #0xc
	orr r3, r3, lr, lsl #20
	str r3, [r2, #8]
	ldr r0, [r1, #0x2c]
	add r0, r3, r0
	str r0, [r2, #8]
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020CBE9C

	arm_func_start FUN_020CBF3C
FUN_020CBF3C: @ 0x020CBF3C
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #0x24
	mov r6, r0
	ldr r5, [r6]
	ldr r4, [r2]
	add r0, sp, #0x18
	sub r4, r5, r4
	str r4, [sp, #0x18]
	ldr ip, [r6, #4]
	ldr r4, [r2, #4]
	mov r5, r1
	sub r1, ip, r4
	str r1, [sp, #0x1c]
	ldr r4, [r6, #8]
	ldr r2, [r2, #8]
	mov r1, r0
	sub r2, r4, r2
	mov r4, r3
	str r2, [sp, #0x20]
	bl FUN_020CCFE0
	add r1, sp, #0x18
	add r2, sp, #0xc
	mov r0, r5
	bl FUN_020CCE94
	add r0, sp, #0xc
	mov r1, r0
	bl FUN_020CCFE0
	add r0, sp, #0x18
	add r1, sp, #0xc
	add r2, sp, #0
	bl FUN_020CCE94
	ldr r1, [sp, #0xc]
	mov r0, r6
	str r1, [r4]
	ldr r2, [sp]
	add r1, sp, #0xc
	str r2, [r4, #4]
	ldr r2, [sp, #0x18]
	str r2, [r4, #8]
	ldr r2, [sp, #0x10]
	str r2, [r4, #0xc]
	ldr r2, [sp, #4]
	str r2, [r4, #0x10]
	ldr r2, [sp, #0x1c]
	str r2, [r4, #0x14]
	ldr r2, [sp, #0x14]
	str r2, [r4, #0x18]
	ldr r2, [sp, #8]
	str r2, [r4, #0x1c]
	ldr r2, [sp, #0x20]
	str r2, [r4, #0x20]
	bl FUN_020CCE14
	rsb r0, r0, #0
	str r0, [r4, #0x24]
	mov r0, r6
	add r1, sp, #0
	bl FUN_020CCE14
	rsb r0, r0, #0
	str r0, [r4, #0x28]
	mov r0, r6
	add r1, sp, #0x18
	bl FUN_020CCE14
	rsb r0, r0, #0
	str r0, [r4, #0x2c]
	add sp, sp, #0x24
	pop {r3, r4, r5, r6, pc}
	arm_func_end FUN_020CBF3C

	arm_func_start FUN_020CC044
FUN_020CC044: @ 0x020CC044
	mov r2, #0x1000
	mov r3, #0
	stm r0!, {r2, r3}
	mov r1, #0
	stm r0!, {r1, r3}
	stm r0!, {r1, r2, r3}
	stm r0!, {r1, r3}
	stm r0!, {r1, r2, r3}
	stm r0!, {r1, r3}
	stm r0!, {r1, r2}
	bx lr
	arm_func_end FUN_020CC044

	arm_func_start FUN_020CC070
FUN_020CC070: @ 0x020CC070
	ldm r0!, {r2, r3, ip}
	add r0, r0, #4
	stm r1!, {r2, r3, ip}
	ldm r0!, {r2, r3, ip}
	add r0, r0, #4
	stm r1!, {r2, r3, ip}
	ldm r0!, {r2, r3, ip}
	add r0, r0, #4
	stm r1!, {r2, r3, ip}
	ldm r0!, {r2, r3, ip}
	add r0, r0, #4
	stm r1!, {r2, r3, ip}
	bx lr
	arm_func_end FUN_020CC070

	arm_func_start FUN_020CC0A4
FUN_020CC0A4: @ 0x020CC0A4
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	mov r6, r1
	mov r5, r2
	mov r4, r3
	cmp r7, r6
	beq _020CC0C4
	bl FUN_020D4944
_020CC0C4:
	ldr r0, [r7, #0x10]
	ldr r1, [r7]
	smull r3, r2, r4, r0
	smlal r3, r2, r5, r1
	ldr r0, [sp, #0x18]
	ldr r1, [r7, #0x20]
	ldr ip, [r7, #0x30]
	smlal r3, r2, r0, r1
	lsr r1, r3, #0xc
	orr r1, r1, r2, lsl #20
	add r1, ip, r1
	str r1, [r6, #0x30]
	ldr r1, [r7, #0x14]
	ldr r2, [r7, #4]
	smull ip, r3, r4, r1
	smlal ip, r3, r5, r2
	ldr r1, [r7, #0x24]
	ldr r2, [r7, #0x34]
	smlal ip, r3, r0, r1
	lsr r1, ip, #0xc
	orr r1, r1, r3, lsl #20
	add r1, r2, r1
	str r1, [r6, #0x34]
	ldr r1, [r7, #0x18]
	ldr r2, [r7, #8]
	smull ip, r3, r4, r1
	smlal ip, r3, r5, r2
	ldr r1, [r7, #0x28]
	ldr r2, [r7, #0x38]
	smlal ip, r3, r0, r1
	lsr r1, ip, #0xc
	orr r1, r1, r3, lsl #20
	add r1, r2, r1
	str r1, [r6, #0x38]
	ldr r1, [r7, #0x1c]
	ldr r2, [r7, #0xc]
	smull ip, r3, r4, r1
	smlal ip, r3, r5, r2
	ldr r1, [r7, #0x2c]
	ldr r2, [r7, #0x3c]
	smlal ip, r3, r0, r1
	lsr r0, ip, #0xc
	orr r0, r0, r3, lsl #20
	add r0, r2, r0
	str r0, [r6, #0x3c]
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020CC0A4

	thumb_func_start FUN_020CC17C
FUN_020CC17C: @ 0x020CC17C
	str r2, [r0, #0x14]
	str r2, [r0, #0x28]
	str r1, [r0, #0x18]
	rsbs r1, r1, #0
	str r1, [r0, #0x24]
	movs r1, #1
	movs r2, #0
	lsls r1, r1, #0xc
	movs r3, #0
	stm r0!, {r1, r2, r3}
	stm r0!, {r2, r3}
	adds r0, #8
	stm r0!, {r2, r3}
	adds r0, #8
	stm r0!, {r2, r3}
	stm r0!, {r2, r3}
	str r1, [r0]
	bx lr
	thumb_func_end FUN_020CC17C

	thumb_func_start FUN_020CC1A0
FUN_020CC1A0: @ 0x020CC1A0
	str r2, [r0]
	str r2, [r0, #0x28]
	str r1, [r0, #0x20]
	rsbs r1, r1, #0
	str r1, [r0, #8]
	movs r3, #1
	movs r1, #0
	lsls r3, r3, #0xc
	movs r2, #0
	str r2, [r0, #4]
	adds r0, #0xc
	stm r0!, {r1, r2, r3}
	stm r0!, {r1, r2}
	str r2, [r0, #4]
	adds r0, #0xc
	stm r0!, {r1, r2}
	stm r0!, {r1, r2, r3}
	bx lr
	thumb_func_end FUN_020CC1A0

	thumb_func_start FUN_020CC1C4
FUN_020CC1C4: @ 0x020CC1C4
	str r2, [r0]
	str r2, [r0, #0x14]
	str r1, [r0, #4]
	rsbs r1, r1, #0
	str r1, [r0, #0x10]
	movs r3, #1
	movs r1, #0
	lsls r3, r3, #0xc
	movs r2, #0
	adds r0, #8
	stm r0!, {r1, r2}
	adds r0, #8
	stm r0!, {r1, r2}
	stm r0!, {r1, r2, r3}
	stm r0!, {r1, r2}
	stm r0!, {r1, r2, r3}
	bx lr
	.align 2, 0
	thumb_func_end FUN_020CC1C4

	arm_func_start FUN_020CC1E8
FUN_020CC1E8: @ 0x020CC1E8
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0xe8
	cmp r2, r1
	addeq sl, sp, #0xa8
	str r2, [sp]
	movne sl, r2
	ldr r4, [r0, #4]
	ldr r2, [r1, #0x10]
	ldr r5, [r0]
	smull r8, r7, r4, r2
	ldr r2, [r1]
	ldr r3, [r0, #8]
	smlal r8, r7, r5, r2
	ldr r6, [r1, #0x20]
	ldr r2, [r0, #0xc]
	smlal r8, r7, r3, r6
	ldr r6, [r1, #0x30]
	smlal r8, r7, r2, r6
	lsr r6, r8, #0xc
	orr r6, r6, r7, lsl #20
	str r6, [sl]
	ldr r6, [r1, #0x14]
	ldr r7, [r1, #4]
	smull sb, r8, r4, r6
	smlal sb, r8, r5, r7
	ldr r6, [r1, #0x24]
	ldr r7, [r1, #0x34]
	smlal sb, r8, r3, r6
	smlal sb, r8, r2, r7
	lsr r6, sb, #0xc
	orr r6, r6, r8, lsl #20
	str r6, [sl, #4]
	ldr r6, [r1, #0x1c]
	ldr r7, [r1, #0xc]
	smull sb, r8, r4, r6
	smlal sb, r8, r5, r7
	ldr r6, [r1, #0x2c]
	ldr r7, [r1, #0x3c]
	smlal sb, r8, r3, r6
	smlal sb, r8, r2, r7
	lsr r6, sb, #0xc
	orr r6, r6, r8, lsl #20
	str r6, [sl, #0xc]
	ldr fp, [r1, #0x18]
	ldr ip, [r1, #8]
	smull r7, r6, r4, fp
	ldr r8, [r1, #0x38]
	smlal r7, r6, r5, ip
	ldr sb, [r1, #0x28]
	asr lr, r8, #0x1f
	smlal r7, r6, r3, sb
	smlal r7, r6, r2, r8
	lsr r2, r7, #0xc
	orr r2, r2, r6, lsl #20
	str r2, [sl, #8]
	asr r2, fp, #0x1f
	str r2, [sp, #4]
	asr r2, ip, #0x1f
	str r2, [sp, #8]
	asr r2, sb, #0x1f
	str r2, [sp, #0x8c]
	ldr r6, [r0, #0x14]
	ldr r7, [r0, #0x10]
	asr r2, r6, #0x1f
	str r2, [sp, #0xc]
	asr r2, r7, #0x1f
	ldr r5, [r0, #0x18]
	str r2, [sp, #0x10]
	asr r2, r5, #0x1f
	ldr r4, [r0, #0x1c]
	str r2, [sp, #0x14]
	asr r2, r4, #0x1f
	str r2, [sp, #0x18]
	umull r2, r3, r4, r8
	str r2, [sp, #0x1c]
	mla r3, r4, lr, r3
	ldr r2, [sp, #0x18]
	mla r3, r2, r8, r3
	umull r8, r2, r5, sb
	str r8, [sp, #0x20]
	ldr r8, [sp, #0x8c]
	mla r2, r5, r8, r2
	ldr r8, [sp, #0x14]
	mla r2, r8, sb, r2
	ldr r8, [sp, #8]
	umull lr, sb, r7, ip
	mla sb, r7, r8, sb
	ldr r8, [sp, #0x10]
	mla sb, r8, ip, sb
	umull ip, r8, r6, fp
	adds lr, lr, ip
	ldr ip, [sp, #4]
	mla r8, r6, ip, r8
	ldr ip, [sp, #0xc]
	mla r8, ip, fp, r8
	adc sb, sb, r8
	ldr r8, [sp, #0x20]
	adds fp, r8, lr
	adc r8, r2, sb
	ldr r2, [sp, #0x1c]
	adds sb, r2, fp
	adc r2, r3, r8
	lsr r3, sb, #0xc
	orr r3, r3, r2, lsl #20
	str r3, [sl, #0x18]
	ldr r2, [r1, #0x14]
	ldr r3, [r1, #4]
	smull fp, r2, r6, r2
	smlal fp, r2, r7, r3
	ldr r8, [r1, #0x24]
	ldr sb, [r1, #0x34]
	smlal fp, r2, r5, r8
	smlal fp, r2, r4, sb
	lsr r3, fp, #0xc
	orr r3, r3, r2, lsl #20
	str r3, [sl, #0x14]
	ldr r2, [r1, #0x1c]
	ldr r3, [r1, #0xc]
	smull fp, r2, r6, r2
	smlal fp, r2, r7, r3
	ldr r8, [r1, #0x2c]
	ldr sb, [r1, #0x3c]
	smlal fp, r2, r5, r8
	smlal fp, r2, r4, sb
	lsr r3, fp, #0xc
	orr r3, r3, r2, lsl #20
	str r3, [sl, #0x1c]
	ldr sb, [r1, #0x10]
	ldr fp, [r1, #0x30]
	smull ip, r8, r6, sb
	ldr r3, [r1]
	ldr r2, [r1, #0x20]
	smlal ip, r8, r7, r3
	smlal ip, r8, r5, r2
	smlal ip, r8, r4, fp
	lsr r4, ip, #0xc
	orr r4, r4, r8, lsl #20
	str r4, [sl, #0x10]
	asr r4, r3, #0x1f
	asr r5, sb, #0x1f
	str r4, [sp, #0x28]
	asr r4, r2, #0x1f
	str r5, [sp, #0x24]
	ldr r7, [r0, #0x24]
	str r4, [sp, #0x2c]
	asr r4, r7, #0x1f
	ldr r8, [r0, #0x20]
	ldr r6, [r0, #0x28]
	ldr r5, [r0, #0x2c]
	asr lr, fp, #0x1f
	str r4, [sp, #0x90]
	asr r4, r8, #0x1f
	str r4, [sp, #0x30]
	asr r4, r6, #0x1f
	str r4, [sp, #0x34]
	asr r4, r5, #0x1f
	str r4, [sp, #0x38]
	umull ip, r4, r5, fp
	str ip, [sp, #0x3c]
	mla r4, r5, lr, r4
	ldr ip, [sp, #0x38]
	mla r4, ip, fp, r4
	umull fp, lr, r6, r2
	str fp, [sp, #0x40]
	ldr fp, [sp, #0x2c]
	mla lr, r6, fp, lr
	ldr fp, [sp, #0x34]
	mla lr, fp, r2, lr
	umull r2, ip, r8, r3
	str r2, [sp, #0x44]
	ldr r2, [sp, #0x28]
	mla ip, r8, r2, ip
	ldr r2, [sp, #0x30]
	mla ip, r2, r3, ip
	umull r3, fp, r7, sb
	ldr r2, [sp, #0x44]
	adds r3, r2, r3
	ldr r2, [sp, #0x24]
	mla fp, r7, r2, fp
	ldr r2, [sp, #0x90]
	mla fp, r2, sb, fp
	ldr r2, [sp, #0x40]
	adc sb, ip, fp
	adds fp, r2, r3
	ldr r2, [sp, #0x3c]
	adc r3, lr, sb
	adds sb, r2, fp
	adc r2, r4, r3
	lsr r3, sb, #0xc
	orr r3, r3, r2, lsl #20
	str r3, [sl, #0x20]
	ldr r2, [r1, #0x14]
	ldr lr, [r1, #4]
	str r2, [sp, #0x48]
	ldr r3, [sp, #0x48]
	asr r2, r2, #0x1f
	umull ip, fp, r7, r3
	mla fp, r7, r2, fp
	ldr r2, [sp, #0x90]
	ldr r4, [r1, #0x24]
	mla fp, r2, r3, fp
	smlal ip, fp, r8, lr
	smlal ip, fp, r6, r4
	ldr sb, [r1, #0x34]
	smlal ip, fp, r5, sb
	lsr r2, ip, #0xc
	orr r2, r2, fp, lsl #20
	str r2, [sl, #0x24]
	ldr r2, [r1, #0x1c]
	ldr lr, [r1, #0xc]
	str r2, [sp, #0x4c]
	ldr r3, [sp, #0x4c]
	asr r2, r2, #0x1f
	umull ip, fp, r7, r3
	mla fp, r7, r2, fp
	ldr r2, [sp, #0x90]
	ldr r4, [r1, #0x2c]
	mla fp, r2, r3, fp
	smlal ip, fp, r8, lr
	smlal ip, fp, r6, r4
	ldr sb, [r1, #0x3c]
	smlal ip, fp, r5, sb
	lsr r2, ip, #0xc
	orr r2, r2, fp, lsl #20
	str r2, [sl, #0x2c]
	ldr fp, [r1, #0x18]
	ldr r3, [r1, #0x38]
	asr ip, fp, #0x1f
	str r3, [sp, #0x50]
	umull r4, r3, r7, fp
	mla r3, r7, ip, r3
	ldr r7, [sp, #0x90]
	ldr r2, [r1, #8]
	mla r3, r7, fp, r3
	smlal r4, r3, r8, r2
	ldr sb, [r1, #0x28]
	smlal r4, r3, r6, sb
	ldr r6, [sp, #0x50]
	smlal r4, r3, r5, r6
	lsr r4, r4, #0xc
	orr r4, r4, r3, lsl #20
	str r4, [sl, #0x28]
	ldr r4, [r0, #0x34]
	ldr r3, [r0, #0x30]
	smull r6, r5, r4, fp
	smlal r6, r5, r3, r2
	asr r2, r4, #0x1f
	str r2, [sp, #0x54]
	asr r2, r3, #0x1f
	str r2, [sp, #0x58]
	ldr r2, [r0, #0x38]
	ldr ip, [r0, #0x3c]
	smlal r6, r5, r2, sb
	ldr r0, [sp, #0x50]
	smlal r6, r5, ip, r0
	lsr r0, r6, #0xc
	orr r0, r0, r5, lsl #20
	str r0, [sl, #0x38]
	asr r0, r2, #0x1f
	str r0, [sp, #0x5c]
	asr r0, ip, #0x1f
	str r0, [sp, #0x60]
	ldr r8, [r1, #0x24]
	ldr r7, [r1, #4]
	asr r0, r8, #0x1f
	ldr sb, [r1, #0x34]
	str r0, [sp, #0x98]
	asr r0, r7, #0x1f
	ldr r6, [r1, #0x14]
	str r0, [sp, #0x6c]
	asr r0, r6, #0x1f
	str r0, [sp, #0x70]
	umull r0, fp, ip, sb
	asr lr, sb, #0x1f
	str r0, [sp, #0x64]
	mla fp, ip, lr, fp
	ldr r0, [sp, #0x60]
	add r5, sp, #0xa8
	mla fp, r0, sb, fp
	umull r0, sb, r2, r8
	str r0, [sp, #0x94]
	ldr r0, [sp, #0x98]
	mla sb, r2, r0, sb
	ldr r0, [sp, #0x5c]
	mla sb, r0, r8, sb
	umull r0, r8, r3, r7
	str r0, [sp, #0x68]
	ldr r0, [sp, #0x6c]
	mla r8, r3, r0, r8
	ldr r0, [sp, #0x58]
	mla r8, r0, r7, r8
	umull r7, lr, r4, r6
	ldr r0, [sp, #0x68]
	adds r7, r0, r7
	ldr r0, [sp, #0x70]
	mla lr, r4, r0, lr
	ldr r0, [sp, #0x54]
	mla lr, r0, r6, lr
	ldr r0, [sp, #0x94]
	adc r6, r8, lr
	adds r7, r0, r7
	ldr r0, [sp, #0x64]
	adc r6, sb, r6
	adds r7, r0, r7
	adc r0, fp, r6
	lsr r6, r7, #0xc
	orr r6, r6, r0, lsl #20
	str r6, [sl, #0x34]
	ldr r8, [r1, #0x20]
	ldr sb, [r1, #0x30]
	asr r0, r8, #0x1f
	ldr r7, [r1]
	str r0, [sp, #0xa0]
	asr r0, r7, #0x1f
	ldr r6, [r1, #0x10]
	str r0, [sp, #0x7c]
	asr r0, r6, #0x1f
	str r0, [sp, #0x80]
	umull r0, fp, ip, sb
	asr lr, sb, #0x1f
	str r0, [sp, #0x74]
	mla fp, ip, lr, fp
	ldr r0, [sp, #0x60]
	mla fp, r0, sb, fp
	umull r0, sb, r2, r8
	str r0, [sp, #0x9c]
	ldr r0, [sp, #0xa0]
	mla sb, r2, r0, sb
	ldr r0, [sp, #0x5c]
	mla sb, r0, r8, sb
	umull r0, r8, r3, r7
	str r0, [sp, #0x78]
	ldr r0, [sp, #0x7c]
	mla r8, r3, r0, r8
	ldr r0, [sp, #0x58]
	mla r8, r0, r7, r8
	umull r7, lr, r4, r6
	ldr r0, [sp, #0x78]
	adds r7, r0, r7
	ldr r0, [sp, #0x80]
	mla lr, r4, r0, lr
	ldr r0, [sp, #0x54]
	mla lr, r0, r6, lr
	ldr r0, [sp, #0x9c]
	adc r6, r8, lr
	adds r7, r0, r7
	ldr r0, [sp, #0x74]
	adc r6, sb, r6
	adds r7, r0, r7
	adc r0, fp, r6
	lsr r6, r7, #0xc
	orr r6, r6, r0, lsl #20
	str r6, [sl, #0x30]
	ldr r8, [r1, #0x3c]
	ldr r6, [r1, #0xc]
	asr r0, r8, #0x1f
	str r0, [sp, #0x84]
	ldr r7, [r1, #0x2c]
	ldr fp, [sp, #0x84]
	asr r0, r7, #0x1f
	str r0, [sp, #0x88]
	ldr r0, [r1, #0x1c]
	asr lr, r6, #0x1f
	asr r1, r0, #0x1f
	str r1, [sp, #0xa4]
	umull sb, r1, ip, r8
	mla r1, ip, fp, r1
	ldr fp, [sp, #0x60]
	mla r1, fp, r8, r1
	ldr r8, [sp, #0x88]
	umull ip, fp, r2, r7
	mla fp, r2, r8, fp
	ldr r2, [sp, #0x5c]
	ldr r8, [sp, #0xa4]
	mla fp, r2, r7, fp
	umull r7, r2, r3, r6
	mla r2, r3, lr, r2
	ldr r3, [sp, #0x58]
	mla r2, r3, r6, r2
	umull r6, r3, r4, r0
	mla r3, r4, r8, r3
	ldr r4, [sp, #0x54]
	mla r3, r4, r0, r3
	adds r4, r7, r6
	adc r0, r2, r3
	adds r2, ip, r4
	adc r0, fp, r0
	adds r2, sb, r2
	adc r0, r1, r0
	lsr r1, r2, #0xc
	orr r1, r1, r0, lsl #20
	cmp sl, r5
	addne sp, sp, #0xe8
	str r1, [sl, #0x3c]
	popne {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r4, [sp]
	ldm r5!, {r0, r1, r2, r3}
	stm r4!, {r0, r1, r2, r3}
	str r4, [sp]
	ldm r5!, {r0, r1, r2, r3}
	stm r4!, {r0, r1, r2, r3}
	str r4, [sp]
	ldm r5!, {r0, r1, r2, r3}
	stm r4!, {r0, r1, r2, r3}
	ldm r5, {r0, r1, r2, r3}
	stm r4, {r0, r1, r2, r3}
	str r4, [sp]
	add sp, sp, #0xe8
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_020CC1E8

	arm_func_start FUN_020CC84C
FUN_020CC84C: @ 0x020CC84C
	push {r4, r5, r6, r7, r8, lr}
	mov r4, r0
	mov r0, r1
	mov r1, r4
	mov r8, r2
	mov r7, r3
	ldr r6, [sp, #0x1c]
	ldr r5, [sp, #0x20]
	bl FUN_020CCBA0
	ldr r1, [sp, #0x18]
	ldr r2, _020CC994 @ =0x04000290
	mov r3, #0
	str r3, [r2]
	mov r3, #0x1000
	str r3, [r2, #4]
	sub r1, r7, r1
	str r1, [r2, #8]
	mov r1, #0
	mov r4, r0
	str r1, [r2, #0xc]
	cmp r6, #0x1000
	beq _020CC8B4
	mul r1, r4, r6
	asr r0, r1, #0xb
	add r0, r1, r0, lsr #20
	asr r4, r0, #0xc
_020CC8B4:
	mov r1, #0
	str r1, [r5, #4]
	str r1, [r5, #8]
	str r1, [r5, #0xc]
	str r1, [r5, #0x10]
	str r4, [r5, #0x14]
	str r1, [r5, #0x18]
	str r1, [r5, #0x1c]
	str r1, [r5, #0x20]
	str r1, [r5, #0x24]
	rsb r0, r6, #0
	str r0, [r5, #0x2c]
	str r1, [r5, #0x30]
	str r1, [r5, #0x34]
	str r1, [r5, #0x3c]
	bl FUN_020CCC20
	ldr r2, _020CC994 @ =0x04000290
	mov r3, #0
	stm r2, {r3, r4, r8}
	str r3, [r2, #0xc]
	cmp r6, #0x1000
	beq _020CC930
	asr r2, r6, #0x1f
	umull r4, r3, r0, r6
	mla r3, r0, r2, r3
	mla r3, r1, r6, r3
	mov r0, r4
	mov r1, r3
	mov r2, #0x1000
	mov r3, #0
	bl FUN_020F2750
_020CC930:
	ldr r4, [sp, #0x18]
	lsl r2, r7, #1
	add r6, r4, r7
	asr r3, r6, #0x1f
	umull r8, r7, r0, r6
	mla r7, r0, r3, r7
	smull r4, r3, r2, r4
	mla r7, r1, r6, r7
	adds r2, r8, #0x80000000
	adc r7, r7, #0
	adds r4, r4, #0x800
	adc r2, r3, #0
	lsr r3, r4, #0xc
	orr r3, r3, r2, lsl #20
	umull r6, r4, r0, r3
	asr r2, r3, #0x1f
	mla r4, r0, r2, r4
	mla r4, r1, r3, r4
	adds r0, r6, #0x80000000
	str r7, [r5, #0x28]
	adc r0, r4, #0
	str r0, [r5, #0x38]
	bl FUN_020CCC44
	str r0, [r5]
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0
_020CC994: .4byte 0x04000290
	arm_func_end FUN_020CC84C

	arm_func_start FUN_020CC998
FUN_020CC998: @ 0x020CC998
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #8
	str r2, [sp]
	mov sl, r0
	ldr r0, [sp]
	mov r2, r3
	sub r0, r2, r0
	ldr r8, [sp, #0x3c]
	str r3, [sp, #4]
	mov fp, r1
	ldr sb, [sp, #0x38]
	bl FUN_020CCC7C
	mov r0, #0
	str r0, [r8, #4]
	str r0, [r8, #8]
	str r0, [r8, #0xc]
	str r0, [r8, #0x10]
	str r0, [r8, #0x18]
	str r0, [r8, #0x1c]
	str r0, [r8, #0x20]
	str r0, [r8, #0x24]
	str r0, [r8, #0x2c]
	str sb, [r8, #0x3c]
	bl FUN_020CCC20
	mov r6, r1
	mov r4, r0
	ldr r1, _020CCB9C @ =0x04000290
	mov r3, #0
	mov r2, #0x1000
	str r3, [r1]
	sub r0, sl, fp
	str r2, [r1, #4]
	str r0, [r1, #8]
	mov r0, r3
	cmp sb, #0x1000
	str r0, [r1, #0xc]
	beq _020CCA48
	asr r5, sb, #0x1f
	umull r0, r1, r4, sb
	mla r1, r4, r5, r1
	mla r1, r6, sb, r1
	bl FUN_020F2750
	mov r4, r0
	mov r6, r1
_020CCA48:
	lsl r1, r6, #0xd
	mov r0, #0x80000000
	orr r1, r1, r4, lsr #19
	adds r0, r0, r4, lsl #13
	adc r0, r1, #0
	str r0, [r8]
	bl FUN_020CCC20
	mov r5, r0
	mov r7, r1
	mov r3, #0
	ldr ip, _020CCB9C @ =0x04000290
	ldr r1, [sp, #0x30]
	ldr r0, [sp, #0x34]
	str r3, [ip]
	mov r2, #0x1000
	str r2, [ip, #4]
	sub r0, r1, r0
	mov lr, r3
	str r0, [ip, #8]
	cmp sb, #0x1000
	str lr, [ip, #0xc]
	beq _020CCABC
	asr ip, sb, #0x1f
	umull r0, r1, r5, sb
	mla r1, r5, ip, r1
	mla r1, r7, sb, r1
	bl FUN_020F2750
	mov r5, r0
	mov r7, r1
_020CCABC:
	lsl r1, r7, #0xd
	mov r0, #0x80000000
	orr r1, r1, r5, lsr #19
	adds r0, r0, r5, lsl #13
	adc r0, r1, #0
	str r0, [r8, #0x14]
	bl FUN_020CCC20
	cmp sb, #0x1000
	beq _020CCB04
	asr r2, sb, #0x1f
	umull ip, r3, r0, sb
	mla r3, r0, r2, r3
	mla r3, r1, sb, r3
	mov r0, ip
	mov r1, r3
	mov r2, #0x1000
	mov r3, #0
	bl FUN_020F2750
_020CCB04:
	ldr r3, [sp, #4]
	ldr r2, [sp]
	add r2, r3, r2
	rsb ip, r2, #0
	add r2, sl, fp
	rsb r3, r2, #0
	ldr sl, [sp, #0x34]
	ldr r2, [sp, #0x30]
	asr sb, ip, #0x1f
	add r2, sl, r2
	umull fp, sl, r4, ip
	mla sl, r4, sb, sl
	mov r4, #0x80000000
	mla sl, r6, ip, sl
	adds r4, r4, r0, lsl #13
	lsl sb, r1, #0xd
	asr r6, r3, #0x1f
	umull ip, r4, r5, r3
	mla r4, r5, r6, r4
	orr sb, sb, r0, lsr #19
	mla r4, r7, r3, r4
	adc r3, sb, #0
	str r3, [r8, #0x28]
	adds r3, fp, #0x80000000
	adc r7, sl, #0
	adds r3, ip, #0x80000000
	asr r3, r2, #0x1f
	umull r6, r5, r0, r2
	mla r5, r0, r3, r5
	adc r3, r4, #0
	str r7, [r8, #0x30]
	mla r5, r1, r2, r5
	adds r0, r6, #0x80000000
	str r3, [r8, #0x34]
	adc r0, r5, #0
	str r0, [r8, #0x38]
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020CCB9C: .4byte 0x04000290
	arm_func_end FUN_020CC998

	arm_func_start FUN_020CCBA0
FUN_020CCBA0: @ 0x020CCBA0
	push {r3, lr}
	bl FUN_020CCCD8
	bl FUN_020CCC44
	pop {r3, pc}
	arm_func_end FUN_020CCBA0

	arm_func_start FUN_020CCBB0
FUN_020CCBB0: @ 0x020CCBB0
	push {r3, lr}
	bl FUN_020CCC7C
	bl FUN_020CCC44
	pop {r3, pc}
	arm_func_end FUN_020CCBB0

	arm_func_start FUN_020CCBC0
FUN_020CCBC0: @ 0x020CCBC0
	push {r3, lr}
	bl FUN_020CCC7C
	ldr r1, _020CCBE4 @ =0x04000280
_020CCBCC:
	ldrh r0, [r1]
	tst r0, #0x8000
	bne _020CCBCC
	ldr r1, _020CCBE8 @ =0x040002A0
	ldm r1, {r0, r1}
	pop {r3, pc}
	.align 2, 0
_020CCBE4: .4byte 0x04000280
_020CCBE8: .4byte 0x040002A0
	arm_func_end FUN_020CCBC0

	arm_func_start FUN_020CCBEC
FUN_020CCBEC: @ 0x020CCBEC
	push {r3, lr}
	cmp r0, #0
	movle r0, #0
	pople {r3, pc}
	ldr r2, _020CCC1C @ =0x040002B0
	mov r1, #1
	strh r1, [r2]
	mov r1, #0
	str r1, [r2, #8]
	str r0, [r2, #0xc]
	bl FUN_020CCCAC
	pop {r3, pc}
	.align 2, 0
_020CCC1C: .4byte 0x040002B0
	arm_func_end FUN_020CCBEC

	arm_func_start FUN_020CCC20
FUN_020CCC20: @ 0x020CCC20
	ldr r1, _020CCC3C @ =0x04000280
_020CCC24:
	ldrh r0, [r1]
	tst r0, #0x8000
	bne _020CCC24
	ldr r1, _020CCC40 @ =0x040002A0
	ldm r1, {r0, r1}
	bx lr
	.align 2, 0
_020CCC3C: .4byte 0x04000280
_020CCC40: .4byte 0x040002A0
	arm_func_end FUN_020CCC20

	arm_func_start FUN_020CCC44
FUN_020CCC44: @ 0x020CCC44
	ldr r1, _020CCC74 @ =0x04000280
_020CCC48:
	ldrh r0, [r1]
	tst r0, #0x8000
	bne _020CCC48
	ldr r0, _020CCC78 @ =0x040002A0
	ldr r1, [r0]
	ldr r0, [r0, #4]
	adds r2, r1, #0x80000
	adc r1, r0, #0
	lsr r0, r2, #0x14
	orr r0, r0, r1, lsl #12
	bx lr
	.align 2, 0
_020CCC74: .4byte 0x04000280
_020CCC78: .4byte 0x040002A0
	arm_func_end FUN_020CCC44

	arm_func_start FUN_020CCC7C
FUN_020CCC7C: @ 0x020CCC7C
	ldr r2, _020CCCA8 @ =0x04000280
	mov r1, #1
	strh r1, [r2]
	mov r1, #0
	str r1, [r2, #0x10]
	mov r1, #0x1000
	str r1, [r2, #0x14]
	str r0, [r2, #0x18]
	mov r0, #0
	str r0, [r2, #0x1c]
	bx lr
	.align 2, 0
_020CCCA8: .4byte 0x04000280
	arm_func_end FUN_020CCC7C

	arm_func_start FUN_020CCCAC
FUN_020CCCAC: @ 0x020CCCAC
	ldr r1, _020CCCD0 @ =0x040002B0
_020CCCB0:
	ldrh r0, [r1]
	tst r0, #0x8000
	bne _020CCCB0
	ldr r0, _020CCCD4 @ =0x040002B4
	ldr r0, [r0]
	add r0, r0, #0x200
	lsr r0, r0, #0xa
	bx lr
	.align 2, 0
_020CCCD0: .4byte 0x040002B0
_020CCCD4: .4byte 0x040002B4
	arm_func_end FUN_020CCCAC

	arm_func_start FUN_020CCCD8
FUN_020CCCD8: @ 0x020CCCD8
	ldr r3, _020CCCFC @ =0x04000280
	mov r2, #1
	strh r2, [r3]
	mov r2, #0
	str r2, [r3, #0x10]
	str r0, [r3, #0x14]
	str r1, [r3, #0x18]
	str r2, [r3, #0x1c]
	bx lr
	.align 2, 0
_020CCCFC: .4byte 0x04000280
	arm_func_end FUN_020CCCD8

	arm_func_start FUN_020CCD00
FUN_020CCD00: @ 0x020CCD00
	ldr r2, _020CCD34 @ =0x04000280
	mov r3, #0
	strh r3, [r2]
	str r0, [r2, #0x10]
	str r1, [r2, #0x18]
	mov r0, r3
	str r0, [r2, #0x1c]
_020CCD1C:
	ldrh r0, [r2]
	tst r0, #0x8000
	bne _020CCD1C
	ldr r0, _020CCD38 @ =0x040002A0
	ldr r0, [r0]
	bx lr
	.align 2, 0
_020CCD34: .4byte 0x04000280
_020CCD38: .4byte 0x040002A0
	arm_func_end FUN_020CCD00

	arm_func_start FUN_020CCD3C
FUN_020CCD3C: @ 0x020CCD3C
	ldr r2, _020CCD70 @ =0x04000280
	mov r3, #0
	strh r3, [r2]
	str r0, [r2, #0x10]
	str r1, [r2, #0x18]
	mov r0, r3
	str r0, [r2, #0x1c]
_020CCD58:
	ldrh r0, [r2]
	tst r0, #0x8000
	bne _020CCD58
	ldr r0, _020CCD74 @ =0x040002A8
	ldr r0, [r0]
	bx lr
	.align 2, 0
_020CCD70: .4byte 0x04000280
_020CCD74: .4byte 0x040002A8
	arm_func_end FUN_020CCD3C

	arm_func_start FUN_020CCD78
FUN_020CCD78: @ 0x020CCD78
	ldr ip, [r0]
	ldr r3, [r1]
	add r3, ip, r3
	str r3, [r2]
	ldr ip, [r0, #4]
	ldr r3, [r1, #4]
	add r3, ip, r3
	str r3, [r2, #4]
	ldr r3, [r0, #8]
	ldr r0, [r1, #8]
	add r0, r3, r0
	str r0, [r2, #8]
	bx lr
	arm_func_end FUN_020CCD78

	arm_func_start FUN_020CCDAC
FUN_020CCDAC: @ 0x020CCDAC
	ldr ip, [r0]
	ldr r3, [r1]
	sub r3, ip, r3
	str r3, [r2]
	ldr ip, [r0, #4]
	ldr r3, [r1, #4]
	sub r3, ip, r3
	str r3, [r2, #4]
	ldr r3, [r0, #8]
	ldr r0, [r1, #8]
	sub r0, r3, r0
	str r0, [r2, #8]
	bx lr
	arm_func_end FUN_020CCDAC

	arm_func_start FUN_020CCDE0
FUN_020CCDE0: @ 0x020CCDE0
	ldrsh ip, [r0]
	ldrsh r3, [r1]
	add r3, ip, r3
	strh r3, [r2]
	ldrsh ip, [r0, #2]
	ldrsh r3, [r1, #2]
	add r3, ip, r3
	strh r3, [r2, #2]
	ldrsh r3, [r0, #4]
	ldrsh r0, [r1, #4]
	add r0, r3, r0
	strh r0, [r2, #4]
	bx lr
	arm_func_end FUN_020CCDE0

	arm_func_start FUN_020CCE14
FUN_020CCE14: @ 0x020CCE14
	push {r4, lr}
	ldr r3, [r0, #4]
	ldr r2, [r1, #4]
	ldr ip, [r0]
	smull r4, lr, r3, r2
	ldr r2, [r1]
	ldr r3, [r0, #8]
	smlal r4, lr, ip, r2
	ldr r0, [r1, #8]
	smlal r4, lr, r3, r0
	adds r0, r4, #0x800
	adc r1, lr, #0
	lsr r0, r0, #0xc
	orr r0, r0, r1, lsl #20
	pop {r4, pc}
	arm_func_end FUN_020CCE14

	arm_func_start FUN_020CCE50
FUN_020CCE50: @ 0x020CCE50
	push {r3, r4, r5, lr}
	ldrsh lr, [r0, #2]
	ldrsh ip, [r1, #2]
	ldrsh r3, [r0, #4]
	ldrsh r2, [r1, #4]
	ldrsh r5, [r0]
	ldrsh r4, [r1]
	smulbb r1, lr, ip
	smulbb r0, r3, r2
	add r0, r0, #0x800
	smlabb r1, r5, r4, r1
	adds r2, r1, r0
	asr r0, r0, #0x1f
	adc r1, r0, r1, asr #31
	lsr r0, r2, #0xc
	orr r0, r0, r1, lsl #20
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020CCE50

	arm_func_start FUN_020CCE94
FUN_020CCE94: @ 0x020CCE94
	push {r4, r5, r6, r7, r8, lr}
	ldm r0, {r5, lr}
	ldr r6, [r1, #8]
	ldr r0, [r0, #8]
	ldm r1, {r4, ip}
	smull r8, r7, lr, r6
	smull r3, r1, r0, ip
	subs r3, r8, r3
	sbc r1, r7, r1
	adds r3, r3, #0x800
	smull r8, r7, r0, r4
	smull r6, r0, r5, r6
	adc r1, r1, #0
	subs r6, r8, r6
	lsr r3, r3, #0xc
	orr r3, r3, r1, lsl #20
	sbc r7, r7, r0
	adds r0, r6, #0x800
	smull ip, r6, r5, ip
	adc r5, r7, #0
	smull r4, r1, lr, r4
	lsr r7, r0, #0xc
	subs r4, ip, r4
	sbc r0, r6, r1
	adds r1, r4, #0x800
	str r3, [r2]
	orr r7, r7, r5, lsl #20
	adc r0, r0, #0
	lsr r1, r1, #0xc
	str r7, [r2, #4]
	orr r1, r1, r0, lsl #20
	str r1, [r2, #8]
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020CCE94

	arm_func_start FUN_020CCF18
FUN_020CCF18: @ 0x020CCF18
	push {r4, r5, r6, lr}
	ldrsh r4, [r1, #4]
	ldrsh ip, [r0, #2]
	ldrsh lr, [r0]
	ldrsh r3, [r1, #2]
	ldrsh r6, [r0, #4]
	ldrsh r1, [r1]
	smulbb r5, ip, r4
	smulbb r0, r6, r3
	sub r0, r5, r0
	add r0, r0, #0x800
	asr r0, r0, #0xc
	smulbb r5, r6, r1
	smulbb r4, lr, r4
	sub r4, r5, r4
	add r4, r4, #0x800
	smulbb r3, lr, r3
	smulbb r1, ip, r1
	sub r1, r3, r1
	add r1, r1, #0x800
	strh r0, [r2]
	asr r0, r4, #0xc
	strh r0, [r2, #2]
	asr r0, r1, #0xc
	strh r0, [r2, #4]
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020CCF18

	arm_func_start FUN_020CCF80
FUN_020CCF80: @ 0x020CCF80
	ldr r1, [r0, #4]
	ldr r2, [r0]
	smull ip, r3, r1, r1
	smlal ip, r3, r2, r2
	ldr r0, [r0, #8]
	ldr r2, _020CCFD8 @ =0x040002B0
	smlal ip, r3, r0, r0
	mov r1, #1
	lsl r0, r3, #2
	strh r1, [r2]
	lsl r1, ip, #2
	str r1, [r2, #8]
	orr r0, r0, ip, lsr #30
	str r0, [r2, #0xc]
_020CCFB8:
	ldrh r0, [r2]
	tst r0, #0x8000
	bne _020CCFB8
	ldr r0, _020CCFDC @ =0x040002B4
	ldr r0, [r0]
	add r0, r0, #1
	asr r0, r0, #1
	bx lr
	.align 2, 0
_020CCFD8: .4byte 0x040002B0
_020CCFDC: .4byte 0x040002B4
	arm_func_end FUN_020CCF80

	arm_func_start FUN_020CCFE0
FUN_020CCFE0: @ 0x020CCFE0
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	ldr r2, [r0, #4]
	ldr r3, [r0]
	smull r6, r5, r2, r2
	smlal r6, r5, r3, r3
	ldr r2, [r0, #8]
	ldr r4, _020CD0EC @ =0x04000280
	smlal r6, r5, r2, r2
	mov r3, #2
	strh r3, [r4]
	mov r3, #0
	str r3, [r4, #0x10]
	mov r3, #0x1000000
	str r3, [r4, #0x14]
	str r6, [r4, #0x18]
	lsl r2, r5, #2
	str r5, [r4, #0x1c]
	mov r3, #1
	strh r3, [r4, #0x30]
	lsl r3, r6, #2
	str r3, [r4, #0x38]
	orr r2, r2, r6, lsr #30
	str r2, [r4, #0x3c]
_020CD03C:
	ldrh r2, [r4, #0x30]
	tst r2, #0x8000
	bne _020CD03C
	ldr r2, _020CD0F0 @ =0x040002B4
	ldr ip, [r2]
	sub r3, r2, #0x34
_020CD054:
	ldrh r2, [r3]
	tst r2, #0x8000
	bne _020CD054
	ldr sb, _020CD0F4 @ =0x040002A0
	ldr r5, [r0]
	ldr r8, [sb]
	asr r7, ip, #0x1f
	umull r3, r2, r8, ip
	umull r6, lr, r3, r5
	asr r4, r5, #0x1f
	mla r2, r8, r7, r2
	ldr r7, [sb, #4]
	mla lr, r3, r4, lr
	mla r2, r7, ip, r2
	mla lr, r2, r5, lr
	adds r4, r6, #0
	adc r4, lr, #0x1000
	asr r4, r4, #0xd
	str r4, [r1]
	ldr ip, [r0, #4]
	umull r5, lr, r3, ip
	asr r4, ip, #0x1f
	mla lr, r3, r4, lr
	mla lr, r2, ip, lr
	adds r4, r5, #0
	adc r4, lr, #0x1000
	asr r4, r4, #0xd
	str r4, [r1, #4]
	ldr ip, [r0, #8]
	umull r4, lr, r3, ip
	asr r0, ip, #0x1f
	mla lr, r3, r0, lr
	mla lr, r2, ip, lr
	adds r0, r4, #0
	adc r0, lr, #0x1000
	asr r0, r0, #0xd
	str r0, [r1, #8]
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0
_020CD0EC: .4byte 0x04000280
_020CD0F0: .4byte 0x040002B4
_020CD0F4: .4byte 0x040002A0
	arm_func_end FUN_020CCFE0

	arm_func_start FUN_020CD0F8
FUN_020CD0F8: @ 0x020CD0F8
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	ldrsh r5, [r0]
	ldrsh r2, [r0, #2]
	ldrsh r3, [r0, #4]
	ldr r4, _020CD218 @ =0x04000280
	smulbb r6, r2, r2
	smulbb r8, r5, r5
	mov r2, #2
	strh r2, [r4]
	mov r2, #0
	str r2, [r4, #0x10]
	mov r2, #0x1000000
	smulbb r3, r3, r3
	asr r5, r6, #0x1f
	adds r7, r8, r6
	adc r6, r5, r8, asr #31
	adds r5, r7, r3
	str r2, [r4, #0x14]
	adc r3, r6, r3, asr #31
	str r5, [r4, #0x18]
	lsl r2, r3, #2
	str r3, [r4, #0x1c]
	mov r3, #1
	strh r3, [r4, #0x30]
	lsl r3, r5, #2
	str r3, [r4, #0x38]
	orr r2, r2, r5, lsr #30
	str r2, [r4, #0x3c]
_020CD168:
	ldrh r2, [r4, #0x30]
	tst r2, #0x8000
	bne _020CD168
	ldr r2, _020CD21C @ =0x040002B4
	ldr ip, [r2]
	sub r3, r2, #0x34
_020CD180:
	ldrh r2, [r3]
	tst r2, #0x8000
	bne _020CD180
	ldr sb, _020CD220 @ =0x040002A0
	ldrsh r5, [r0]
	ldr r8, [sb]
	asr r7, ip, #0x1f
	umull r3, r2, r8, ip
	umull r6, lr, r3, r5
	asr r4, r5, #0x1f
	mla r2, r8, r7, r2
	ldr r7, [sb, #4]
	mla lr, r3, r4, lr
	mla r2, r7, ip, r2
	mla lr, r2, r5, lr
	adds r4, r6, #0
	adc r4, lr, #0x1000
	asr r4, r4, #0xd
	strh r4, [r1]
	ldrsh ip, [r0, #2]
	umull r5, lr, r3, ip
	asr r4, ip, #0x1f
	mla lr, r3, r4, lr
	mla lr, r2, ip, lr
	adds r4, r5, #0
	adc r4, lr, #0x1000
	asr r4, r4, #0xd
	strh r4, [r1, #2]
	ldrsh ip, [r0, #4]
	umull r4, lr, r3, ip
	asr r0, ip, #0x1f
	mla lr, r3, r0, lr
	mla lr, r2, ip, lr
	adds r0, r4, #0
	adc r0, lr, #0x1000
	asr r0, r0, #0xd
	strh r0, [r1, #4]
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0
_020CD218: .4byte 0x04000280
_020CD21C: .4byte 0x040002B4
_020CD220: .4byte 0x040002A0
	arm_func_end FUN_020CD0F8

	arm_func_start FUN_020CD224
FUN_020CD224: @ 0x020CD224
	push {r4, lr}
	ldr r4, [r1]
	ldr lr, [r2]
	smull ip, r4, r0, r4
	lsr ip, ip, #0xc
	orr ip, ip, r4, lsl #20
	add r4, lr, ip
	str r4, [r3]
	ldr ip, [r1, #4]
	ldr r4, [r2, #4]
	smull lr, ip, r0, ip
	lsr lr, lr, #0xc
	orr lr, lr, ip, lsl #20
	add r4, r4, lr
	str r4, [r3, #4]
	ldr r1, [r1, #8]
	ldr ip, [r2, #8]
	smull r2, r1, r0, r1
	lsr r0, r2, #0xc
	orr r0, r0, r1, lsl #20
	add r0, ip, r0
	str r0, [r3, #8]
	pop {r4, pc}
	arm_func_end FUN_020CD224

	arm_func_start FUN_020CD280
FUN_020CD280: @ 0x020CD280
	push {r4, lr}
	ldr r3, [r0, #4]
	ldr r2, [r1, #4]
	ldr r4, [r0]
	sub r2, r3, r2
	smull ip, r3, r2, r2
	ldr lr, [r1]
	ldr r2, [r0, #8]
	sub r4, r4, lr
	ldr r0, [r1, #8]
	smlal ip, r3, r4, r4
	sub r0, r2, r0
	smlal ip, r3, r0, r0
	lsl r0, r3, #2
	ldr r2, _020CD2F4 @ =0x040002B0
	mov r1, #1
	strh r1, [r2]
	lsl r1, ip, #2
	str r1, [r2, #8]
	orr r0, r0, ip, lsr #30
	str r0, [r2, #0xc]
_020CD2D4:
	ldrh r0, [r2]
	tst r0, #0x8000
	bne _020CD2D4
	ldr r0, _020CD2F8 @ =0x040002B4
	ldr r0, [r0]
	add r0, r0, #1
	asr r0, r0, #1
	pop {r4, pc}
	.align 2, 0
_020CD2F4: .4byte 0x040002B0
_020CD2F8: .4byte 0x040002B4
	arm_func_end FUN_020CD280

	arm_func_start FUN_020CD2FC
FUN_020CD2FC: @ 0x020CD2FC
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov lr, #0
	cmp r1, #1
	cmpeq r0, #0
	mov r2, #1
	moveq r1, lr
	ldreq r0, _020CD3CC @ =0xB504F334
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	umull r3, ip, r0, r0
	mla ip, r0, r1, ip
	mla ip, r1, r0, ip
	ldr r4, _020CD3D0 @ =0x02317888
	ldr r5, _020CD3D4 @ =0x03C2857C
	umull r3, r8, ip, r4
	umull r3, r7, ip, r5
	mla r8, ip, lr, r8
	mov r3, lr
	mla r7, ip, lr, r7
	mla r8, r3, r4, r8
	subs sb, lr, r8
	mla r7, r3, r5, r7
	umull r4, r5, sb, r7
	mla r5, sb, r3, r5
	sbc r8, r2, #0
	mla r5, r8, r7, r5
	subs r8, lr, r5
	ldr r6, _020CD3D8 @ =0x07E54B84
	sbc r7, r2, #0
	umull r4, r5, ip, r6
	mla r5, ip, lr, r5
	mla r5, r3, r6, r5
	umull r4, r6, r8, r5
	mla r6, r8, r3, r6
	mla r6, r7, r5, r6
	subs r8, lr, r6
	sbc r7, r2, #0
	ldr r2, _020CD3DC @ =0x14ABBCE6
	ldr r6, _020CD3E0 @ =0xC90FDAA2
	umull r4, r5, ip, r2
	mla r5, ip, lr, r5
	mla r5, r3, r2, r5
	umull r2, r4, r8, r5
	mla r4, r8, r3, r4
	mla r4, r7, r5, r4
	subs r6, r6, r4
	umull r2, r4, r6, r0
	mla r4, r6, r1, r4
	sbc r5, lr, #0
	mla r4, r5, r0, r4
	mov r0, r4
	mov r1, r3
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0
_020CD3CC: .4byte 0xB504F334
_020CD3D0: .4byte 0x02317888
_020CD3D4: .4byte 0x03C2857C
_020CD3D8: .4byte 0x07E54B84
_020CD3DC: .4byte 0x14ABBCE6
_020CD3E0: .4byte 0xC90FDAA2
	arm_func_end FUN_020CD2FC

	arm_func_start FUN_020CD3E4
FUN_020CD3E4: @ 0x020CD3E4
	push {r4, r5, r6, r7, r8, lr}
	mov ip, #0
	cmp r1, #1
	cmpeq r0, #0
	mov r2, #1
	moveq r1, ip
	ldreq r0, _020CD49C @ =0xB504F334
	popeq {r4, r5, r6, r7, r8, pc}
	umull r4, r3, r0, r0
	mla r3, r0, r1, r3
	mla r3, r1, r0, r3
	ldr r1, _020CD4A0 @ =0x02D1E41D
	ldr lr, _020CD4A4 @ =0x054387AD
	umull r0, r6, r3, r1
	umull r0, r5, r3, lr
	mla r6, r3, ip, r6
	mov r0, ip
	mla r5, r3, ip, r5
	mla r6, r0, r1, r6
	subs r8, ip, r6
	mla r5, r0, lr, r5
	umull r1, r6, r8, r5
	ldr r4, _020CD4A8 @ =0x0D28D331
	mla r6, r8, r0, r6
	umull r1, lr, r3, r4
	mla lr, r3, ip, lr
	sbc r7, r2, #0
	mla r6, r7, r5, r6
	subs r6, ip, r6
	mla lr, r0, r4, lr
	umull r1, r4, r6, lr
	mla r4, r6, r0, r4
	sbc r5, r2, #0
	mla r4, r5, lr, r4
	subs r6, ip, r4
	ldr r1, _020CD4AC @ =0x4EF4F327
	sbc r5, r2, #0
	umull r4, lr, r3, r1
	mla lr, r3, ip, lr
	mla lr, r0, r1, lr
	umull r1, r3, r6, lr
	mla r3, r6, r0, r3
	mla r3, r5, lr, r3
	subs r0, ip, r3
	sbc r1, r2, #0
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0
_020CD49C: .4byte 0xB504F334
_020CD4A0: .4byte 0x02D1E41D
_020CD4A4: .4byte 0x054387AD
_020CD4A8: .4byte 0x0D28D331
_020CD4AC: .4byte 0x4EF4F327
	arm_func_end FUN_020CD3E4

	arm_func_start FUN_020CD4B0
FUN_020CD4B0: @ 0x020CD4B0
	push {r4, lr}
	cmp r0, #0
	bge _020CD4D0
	rsb r0, r0, #0
	bl FUN_020CD4B0
	rsbs r0, r0, #0
	rsc r1, r1, #0
	pop {r4, pc}
_020CD4D0:
	ldr r1, _020CD544 @ =0x45F306DD
	mov r2, #1
	umull ip, lr, r0, r1
	mla lr, r0, r2, lr
	asr r0, r0, #0x1f
	mla lr, r0, r1, lr
	mov r3, #0
	lsr ip, ip, #0xc
	asr r4, lr, #0xc
	orr ip, ip, lr, lsl #20
	sub r0, r3, #1
	tst r4, #1
	and r1, r3, lr, asr #12
	and r0, ip, r0
	beq _020CD514
	subs r0, r3, r0
	sbc r1, r2, r1
_020CD514:
	add r2, r4, #1
	tst r2, #2
	beq _020CD528
	bl FUN_020CD3E4
	b _020CD52C
_020CD528:
	bl FUN_020CD2FC
_020CD52C:
	and r2, r4, #7
	cmp r2, #3
	pople {r4, pc}
	rsbs r0, r0, #0
	rsc r1, r1, #0
	pop {r4, pc}
	.align 2, 0
_020CD544: .4byte 0x45F306DD
	arm_func_end FUN_020CD4B0

	arm_func_start FUN_020CD548
FUN_020CD548: @ 0x020CD548
	push {r4, lr}
	cmp r0, #0
	bge _020CD560
	rsb r0, r0, #0
	bl FUN_020CD548
	pop {r4, pc}
_020CD560:
	ldr r1, _020CD5D8 @ =0x45F306DD
	mov r2, #1
	umull ip, lr, r0, r1
	mla lr, r0, r2, lr
	asr r0, r0, #0x1f
	mla lr, r0, r1, lr
	mov r3, #0
	lsr ip, ip, #0xc
	asr r4, lr, #0xc
	orr ip, ip, lr, lsl #20
	sub r0, r3, #1
	tst r4, #1
	and r1, r3, lr, asr #12
	and r0, ip, r0
	beq _020CD5A4
	subs r0, r3, r0
	sbc r1, r2, r1
_020CD5A4:
	add r2, r4, #1
	tst r2, #2
	beq _020CD5B8
	bl FUN_020CD2FC
	b _020CD5BC
_020CD5B8:
	bl FUN_020CD3E4
_020CD5BC:
	add r2, r4, #2
	and r2, r2, #7
	cmp r2, #3
	pople {r4, pc}
	rsbs r0, r0, #0
	rsc r1, r1, #0
	pop {r4, pc}
	.align 2, 0
_020CD5D8: .4byte 0x45F306DD
	arm_func_end FUN_020CD548

	arm_func_start FUN_020CD5DC
FUN_020CD5DC: @ 0x020CD5DC
	push {r4, lr}
	cmp r0, #0
	ble _020CD670
	cmp r1, #0
	ble _020CD628
	cmp r1, r0
	ble _020CD608
	mov r2, r0
	mov r4, #0
	mov r0, #1
	b _020CD720
_020CD608:
	bge _020CD620
	mov r2, r1
	mov r1, r0
	mov r4, #0x4000
	mov r0, #0
	b _020CD720
_020CD620:
	mov r0, #0x2000
	pop {r4, pc}
_020CD628:
	bge _020CD668
	rsb r1, r1, #0
	cmp r1, r0
	bge _020CD64C
	mov r2, r1
	mov r1, r0
	mov r4, #0x4000
	mov r0, #1
	b _020CD720
_020CD64C:
	ble _020CD660
	mov r2, r0
	mov r4, #0x8000
	mov r0, #0
	b _020CD720
_020CD660:
	mov r0, #0x6000
	pop {r4, pc}
_020CD668:
	mov r0, #0x4000
	pop {r4, pc}
_020CD670:
	bge _020CD710
	cmp r1, #0
	rsb r0, r0, #0
	bge _020CD6C4
	rsb r1, r1, #0
	cmp r1, r0
	ble _020CD6A0
	mov r4, #0x8000
	mov r2, r0
	rsb r4, r4, #0
	mov r0, #1
	b _020CD720
_020CD6A0:
	bge _020CD6BC
	mov r4, #0x4000
	mov r2, r1
	mov r1, r0
	rsb r4, r4, #0
	mov r0, #0
	b _020CD720
_020CD6BC:
	mov r0, #0xa000
	pop {r4, pc}
_020CD6C4:
	cmp r1, #0
	ble _020CD708
	cmp r1, r0
	bge _020CD6EC
	mov r4, #0x4000
	mov r2, r1
	mov r1, r0
	rsb r4, r4, #0
	mov r0, #1
	b _020CD720
_020CD6EC:
	ble _020CD700
	mov r4, #0
	mov r2, r0
	mov r0, r4
	b _020CD720
_020CD700:
	mov r0, #0xe000
	pop {r4, pc}
_020CD708:
	mov r0, #0xc000
	pop {r4, pc}
_020CD710:
	cmp r1, #0
	movge r0, #0
	movlt r0, #0x8000
	pop {r4, pc}
_020CD720:
	cmp r1, #0
	moveq r0, #0
	popeq {r4, pc}
	cmp r0, #0
	mov r0, r2
	beq _020CD75C
	bl FUN_020CCBA0
	asr r1, r0, #5
	ldr r0, _020CD780 @ =0x0210D4DC
	lsl r1, r1, #1
	ldrsh r0, [r0, r1]
	add r0, r4, r0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	pop {r4, pc}
_020CD75C:
	bl FUN_020CCBA0
	asr r1, r0, #5
	ldr r0, _020CD780 @ =0x0210D4DC
	lsl r1, r1, #1
	ldrsh r0, [r0, r1]
	sub r0, r4, r0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	pop {r4, pc}
	.align 2, 0
_020CD780: .4byte 0x0210D4DC
	arm_func_end FUN_020CD5DC

	arm_func_start FUN_020CD784
FUN_020CD784: @ 0x020CD784
	bx lr
	arm_func_end FUN_020CD784

	arm_func_start FUN_020CD788
FUN_020CD788: @ 0x020CD788
	cmp r0, #0
	ldr r2, _020CD7C0 @ =0x7FFFF000
	blt _020CD7A4
	and r3, r0, r2
	str r3, [r1]
	and r0, r0, r2, lsr #19
	bx lr
_020CD7A4:
	rsb ip, r0, #0
	and r0, ip, r2
	rsb r3, r0, #0
	and r0, ip, r2, lsr #19
	str r3, [r1]
	rsb r0, r0, #0
	bx lr
	.align 2, 0
_020CD7C0: .4byte 0x7FFFF000
	arm_func_end FUN_020CD788

	arm_func_start FUN_020CD7C4
FUN_020CD7C4: @ 0x020CD7C4
	push {r4, r5, r6, lr}
	ldr r2, _020CD8EC @ =0x04000304
	ldr r0, _020CD8F0 @ =0xFFFFFDF1
	ldrh r1, [r2]
	orr r1, r1, #0x8000
	strh r1, [r2]
	ldrh r1, [r2]
	and r0, r1, r0
	orr r0, r0, #0xe
	orr r0, r0, #0x200
	strh r0, [r2]
	ldrh r0, [r2]
	orr r0, r0, #1
	strh r0, [r2]
	bl FUN_020CDAEC
	ldr r5, _020CD8F4 @ =0x021E15BC
	ldrh r0, [r5, #2]
	cmp r0, #0
	bne _020CD838
	mvn r4, #2
_020CD814:
	bl FUN_020D15C4
	mov r6, r0
	cmp r6, r4
	bne _020CD828
	bl FUN_020D3F48
_020CD828:
	strh r6, [r5, #2]
	ldrh r0, [r5, #2]
	cmp r0, #0
	beq _020CD814
_020CD838:
	ldr r0, _020CD8F8 @ =0x04000004
	mov r2, #0
	mov r3, #0x4000000
	strh r2, [r0]
	ldr r0, _020CD8FC @ =_02110C7C
	str r2, [r3]
	ldr r0, [r0, #4]
	sub r1, r3, #0x4000001
	cmp r0, r1
	beq _020CD890
	add r1, r3, #8
	mov r3, #0x60
	bl FUN_020D3F74
	ldr r1, _020CD900 @ =0x0400006C
	mov r2, #0
	ldr r0, _020CD8FC @ =_02110C7C
	strh r2, [r1]
	ldr r0, [r0, #4]
	ldr r1, _020CD904 @ =0x04001000
	mov r3, #0x70
	bl FUN_020D3F74
	b _020CD8B8
_020CD890:
	mov r0, r2
	add r1, r3, #8
	mov r2, #0x60
	bl FUN_020D47EC
	ldr r3, _020CD900 @ =0x0400006C
	mov r0, #0
	ldr r1, _020CD904 @ =0x04001000
	mov r2, #0x70
	strh r0, [r3]
	bl FUN_020D47EC
_020CD8B8:
	ldr r0, _020CD908 @ =0x04000020
	mov r2, #0x100
	strh r2, [r0]
	strh r2, [r0, #6]
	strh r2, [r0, #0x10]
	strh r2, [r0, #0x16]
	add r1, r0, #0x1000
	ldr r0, _020CD90C @ =0x04001026
	strh r2, [r1]
	strh r2, [r0]
	strh r2, [r0, #0xa]
	strh r2, [r0, #0x10]
	pop {r4, r5, r6, pc}
	.align 2, 0
_020CD8EC: .4byte 0x04000304
_020CD8F0: .4byte 0xFFFFFDF1
_020CD8F4: .4byte 0x021E15BC
_020CD8F8: .4byte 0x04000004
_020CD8FC: .4byte _02110C7C
_020CD900: .4byte 0x0400006C
_020CD904: .4byte 0x04001000
_020CD908: .4byte 0x04000020
_020CD90C: .4byte 0x04001026
	arm_func_end FUN_020CD7C4

	arm_func_start FUN_020CD910
FUN_020CD910: @ 0x020CD910
	ldr r2, _020CD940 @ =0x04000004
	cmp r0, #0
	ldrh r0, [r2]
	ldrheq r1, [r2]
	and r0, r0, #0x10
	biceq r1, r1, #0x10
	strheq r1, [r2]
	bxeq lr
	ldrh r1, [r2]
	orr r1, r1, #0x10
	strh r1, [r2]
	bx lr
	.align 2, 0
_020CD940: .4byte 0x04000004
	arm_func_end FUN_020CD910

	arm_func_start FUN_020CD944
FUN_020CD944: @ 0x020CD944
	ldr r2, _020CD974 @ =0x04000004
	cmp r0, #0
	ldrh r0, [r2]
	ldrheq r1, [r2]
	and r0, r0, #8
	biceq r1, r1, #8
	strheq r1, [r2]
	bxeq lr
	ldrh r1, [r2]
	orr r1, r1, #8
	strh r1, [r2]
	bx lr
	.align 2, 0
_020CD974: .4byte 0x04000004
	arm_func_end FUN_020CD944

	arm_func_start FUN_020CD978
FUN_020CD978: @ 0x020CD978
	push {r3, lr}
	mov lr, #0x4000000
	ldr ip, [lr]
	ldr r1, _020CD9AC @ =_02110C7C
	and r2, ip, #0x30000
	mov r3, #0
	ldr r0, _020CD9B0 @ =0x021E15BC
	lsr r2, r2, #0x10
	strh r3, [r1]
	strh r2, [r0]
	bic r0, ip, #0x30000
	str r0, [lr]
	pop {r3, pc}
	.align 2, 0
_020CD9AC: .4byte _02110C7C
_020CD9B0: .4byte 0x021E15BC
	arm_func_end FUN_020CD978

	arm_func_start FUN_020CD9B4
FUN_020CD9B4: @ 0x020CD9B4
	ldr r0, _020CD9F4 @ =0x021E15BC
	ldr r1, _020CD9F8 @ =_02110C7C
	ldrh r2, [r0]
	mov r0, #1
	strh r0, [r1]
	mov r1, #0x4000000
	cmp r2, #0
	ldreq r0, [r1]
	orreq r0, r0, #0x10000
	streq r0, [r1]
	bxeq lr
	ldr r0, [r1]
	bic r0, r0, #0x30000
	orr r0, r0, r2, lsl #16
	str r0, [r1]
	bx lr
	.align 2, 0
_020CD9F4: .4byte 0x021E15BC
_020CD9F8: .4byte _02110C7C
	arm_func_end FUN_020CD9B4

	arm_func_start FUN_020CD9FC
FUN_020CD9FC: @ 0x020CD9FC
	push {r3, lr}
	ldr r3, _020CDA58 @ =_02110C7C
	mov lr, #0x4000000
	ldrh ip, [r3]
	ldr lr, [lr]
	ldr r3, _020CDA5C @ =0x021E15BC
	cmp ip, #0
	strh r0, [r3]
	ldr r3, _020CDA60 @ =0xFFF0FFF0
	moveq r0, #0
	and r3, lr, r3
	orr r0, r3, r0, lsl #16
	orr r0, r1, r0
	orr r1, r0, r2, lsl #3
	mov ip, #0x4000000
	ldr r0, _020CDA5C @ =0x021E15BC
	str r1, [ip]
	ldrh r0, [r0]
	cmp r0, #0
	ldreq r0, _020CDA58 @ =_02110C7C
	moveq r1, #0
	strheq r1, [r0]
	pop {r3, pc}
	.align 2, 0
_020CDA58: .4byte _02110C7C
_020CDA5C: .4byte 0x021E15BC
_020CDA60: .4byte 0xFFF0FFF0
	arm_func_end FUN_020CD9FC

	arm_func_start FUN_020CDA64
FUN_020CDA64: @ 0x020CDA64
	ldr r2, _020CDA7C @ =0x04001000
	ldr r1, [r2]
	bic r1, r1, #7
	orr r0, r1, r0
	str r0, [r2]
	bx lr
	.align 2, 0
_020CDA7C: .4byte 0x04001000
	arm_func_end FUN_020CDA64

	arm_func_start FUN_020CDA80
FUN_020CDA80: @ 0x020CDA80
	cmp r1, #0
	moveq r1, #0
	strheq r1, [r0]
	bxeq lr
	orrgt r1, r1, #0x4000
	strhgt r1, [r0]
	rsble r1, r1, #0
	orrle r1, r1, #0x8000
	strhle r1, [r0]
	bx lr
	arm_func_end FUN_020CDA80

	arm_func_start FUN_020CDAA8
FUN_020CDAA8: @ 0x020CDAA8
	ldrh r1, [r0]
	and r1, r1, #0xc000
	lsl r1, r1, #0x10
	lsrs r1, r1, #0x10
	moveq r0, #0
	bxeq lr
	cmp r1, #0x4000
	ldrheq r0, [r0]
	andeq r0, r0, #0x1f
	bxeq lr
	cmp r1, #0x8000
	movne r0, #0
	bxne lr
	ldrh r0, [r0]
	and r0, r0, #0x1f
	rsb r0, r0, #0
	bx lr
	arm_func_end FUN_020CDAA8

	arm_func_start FUN_020CDAEC
FUN_020CDAEC: @ 0x020CDAEC
	ldr r0, _020CDB44 @ =0x021E15C0
	mov r2, #0
	strh r2, [r0]
	strh r2, [r0, #2]
	strh r2, [r0, #4]
	strh r2, [r0, #6]
	strh r2, [r0, #8]
	strh r2, [r0, #0xa]
	strh r2, [r0, #0xc]
	strh r2, [r0, #0xe]
	strh r2, [r0, #0x10]
	strh r2, [r0, #0x12]
	strh r2, [r0, #0x14]
	strh r2, [r0, #0x16]
	ldr r1, _020CDB48 @ =0x04000240
	strh r2, [r0, #0x18]
	str r2, [r1]
	strb r2, [r1, #4]
	strb r2, [r1, #5]
	strb r2, [r1, #6]
	strh r2, [r1, #8]
	bx lr
	.align 2, 0
_020CDB44: .4byte 0x021E15C0
_020CDB48: .4byte 0x04000240
	arm_func_end FUN_020CDAEC

	arm_func_start FUN_020CDB4C
FUN_020CDB4C: @ 0x020CDB4C
	tst r0, #1
	ldrne r1, _020CDBE0 @ =0x04000240
	movne r2, #0x80
	strbne r2, [r1]
	tst r0, #2
	ldrne r1, _020CDBE4 @ =0x04000241
	movne r2, #0x80
	strbne r2, [r1]
	tst r0, #4
	ldrne r1, _020CDBE8 @ =0x04000242
	movne r2, #0x80
	strbne r2, [r1]
	tst r0, #8
	ldrne r1, _020CDBEC @ =0x04000243
	movne r2, #0x80
	strbne r2, [r1]
	tst r0, #0x10
	ldrne r1, _020CDBF0 @ =0x04000244
	movne r2, #0x80
	strbne r2, [r1]
	tst r0, #0x20
	ldrne r1, _020CDBF4 @ =0x04000245
	movne r2, #0x80
	strbne r2, [r1]
	tst r0, #0x40
	ldrne r1, _020CDBF8 @ =0x04000246
	movne r2, #0x80
	strbne r2, [r1]
	tst r0, #0x80
	ldrne r1, _020CDBFC @ =0x04000248
	movne r2, #0x80
	strbne r2, [r1]
	tst r0, #0x100
	ldrne r0, _020CDC00 @ =0x04000249
	movne r1, #0x80
	strbne r1, [r0]
	bx lr
	.align 2, 0
_020CDBE0: .4byte 0x04000240
_020CDBE4: .4byte 0x04000241
_020CDBE8: .4byte 0x04000242
_020CDBEC: .4byte 0x04000243
_020CDBF0: .4byte 0x04000244
_020CDBF4: .4byte 0x04000245
_020CDBF8: .4byte 0x04000246
_020CDBFC: .4byte 0x04000248
_020CDC00: .4byte 0x04000249
	arm_func_end FUN_020CDB4C

	arm_func_start FUN_020CDC04
FUN_020CDC04: @ 0x020CDC04
	push {r3, lr}
	ldr r1, _020CDE74 @ =0x021E15C0
	mvn ip, r0
	ldrh r3, [r1]
	ldrh r2, [r1, #2]
	cmp r0, #0x40
	orr r2, r3, r2
	and r2, ip, r2
	strh r2, [r1]
	strh r0, [r1, #2]
	bgt _020CDCDC
	cmp r0, #0x40
	bge _020CDE58
	cmp r0, #0x20
	bgt _020CDCD0
	cmp r0, #0
	addge pc, pc, r0, lsl #2
	b _020CDE64
_020CDC4C: @ jump table
	b _020CDE64 @ case 0
	b _020CDD78 @ case 1
	b _020CDD44 @ case 2
	b _020CDD6C @ case 3
	b _020CDD1C @ case 4
	b _020CDDB4 @ case 5
	b _020CDD38 @ case 6
	b _020CDD60 @ case 7
	b _020CDD00 @ case 8
	b _020CDDCC @ case 9
	b _020CDDE4 @ case 10
	b _020CDD88 @ case 11
	b _020CDD10 @ case 12
	b _020CDDA8 @ case 13
	b _020CDD2C @ case 14
	b _020CDD54 @ case 15
	b _020CDE14 @ case 16
	b _020CDE64 @ case 17
	b _020CDE64 @ case 18
	b _020CDE64 @ case 19
	b _020CDE64 @ case 20
	b _020CDE64 @ case 21
	b _020CDE64 @ case 22
	b _020CDE64 @ case 23
	b _020CDE64 @ case 24
	b _020CDE64 @ case 25
	b _020CDE64 @ case 26
	b _020CDE64 @ case 27
	b _020CDE64 @ case 28
	b _020CDE64 @ case 29
	b _020CDE64 @ case 30
	b _020CDE64 @ case 31
	b _020CDE48 @ case 32
_020CDCD0:
	cmp r0, #0x30
	beq _020CDE08
	b _020CDE64
_020CDCDC:
	cmp r0, #0x60
	bgt _020CDCF4
	bge _020CDE3C
	cmp r0, #0x50
	beq _020CDE24
	b _020CDE64
_020CDCF4:
	cmp r0, #0x70
	beq _020CDDFC
	b _020CDE64
_020CDD00:
	ldr r0, _020CDE78 @ =0x04000243
	mov r1, #0x81
	strb r1, [r0]
	b _020CDE64
_020CDD10:
	ldr r0, _020CDE78 @ =0x04000243
	mov r1, #0x89
	strb r1, [r0]
_020CDD1C:
	ldr r0, _020CDE7C @ =0x04000242
	mov r1, #0x81
	strb r1, [r0]
	b _020CDE64
_020CDD2C:
	ldr r0, _020CDE78 @ =0x04000243
	mov r1, #0x91
	strb r1, [r0]
_020CDD38:
	ldr r0, _020CDE7C @ =0x04000242
	mov r1, #0x89
	strb r1, [r0]
_020CDD44:
	ldr r0, _020CDE80 @ =0x04000241
	mov r1, #0x81
	strb r1, [r0]
	b _020CDE64
_020CDD54:
	ldr r0, _020CDE78 @ =0x04000243
	mov r1, #0x99
	strb r1, [r0]
_020CDD60:
	ldr r0, _020CDE7C @ =0x04000242
	mov r1, #0x91
	strb r1, [r0]
_020CDD6C:
	ldr r0, _020CDE80 @ =0x04000241
	mov r1, #0x89
	strb r1, [r0]
_020CDD78:
	ldr r0, _020CDE84 @ =0x04000240
	mov r1, #0x81
	strb r1, [r0]
	b _020CDE64
_020CDD88:
	ldr r1, _020CDE84 @ =0x04000240
	mov r0, #0x81
	strb r0, [r1]
	mov r0, #0x89
	strb r0, [r1, #1]
	mov r0, #0x91
	strb r0, [r1, #3]
	b _020CDE64
_020CDDA8:
	ldr r0, _020CDE78 @ =0x04000243
	mov r1, #0x91
	strb r1, [r0]
_020CDDB4:
	ldr r1, _020CDE84 @ =0x04000240
	mov r0, #0x81
	strb r0, [r1]
	mov r0, #0x89
	strb r0, [r1, #2]
	b _020CDE64
_020CDDCC:
	ldr r1, _020CDE84 @ =0x04000240
	mov r0, #0x81
	strb r0, [r1]
	mov r0, #0x89
	strb r0, [r1, #3]
	b _020CDE64
_020CDDE4:
	ldr r1, _020CDE80 @ =0x04000241
	mov r0, #0x81
	strb r0, [r1]
	mov r0, #0x89
	strb r0, [r1, #2]
	b _020CDE64
_020CDDFC:
	ldr r0, _020CDE88 @ =0x04000246
	mov r1, #0x99
	strb r1, [r0]
_020CDE08:
	ldr r0, _020CDE8C @ =0x04000245
	mov r1, #0x91
	strb r1, [r0]
_020CDE14:
	ldr r0, _020CDE90 @ =0x04000244
	mov r1, #0x81
	strb r1, [r0]
	b _020CDE64
_020CDE24:
	ldr r1, _020CDE88 @ =0x04000246
	mov r0, #0x91
	strb r0, [r1]
	mov r0, #0x81
	strb r0, [r1, #-2]
	b _020CDE64
_020CDE3C:
	ldr r0, _020CDE88 @ =0x04000246
	mov r1, #0x89
	strb r1, [r0]
_020CDE48:
	ldr r0, _020CDE8C @ =0x04000245
	mov r1, #0x81
	strb r1, [r0]
	b _020CDE64
_020CDE58:
	ldr r0, _020CDE88 @ =0x04000246
	mov r1, #0x81
	strb r1, [r0]
_020CDE64:
	ldr r0, _020CDE74 @ =0x021E15C0
	ldrh r0, [r0]
	bl FUN_020CDB4C
	pop {r3, pc}
	.align 2, 0
_020CDE74: .4byte 0x021E15C0
_020CDE78: .4byte 0x04000243
_020CDE7C: .4byte 0x04000242
_020CDE80: .4byte 0x04000241
_020CDE84: .4byte 0x04000240
_020CDE88: .4byte 0x04000246
_020CDE8C: .4byte 0x04000245
_020CDE90: .4byte 0x04000244
	arm_func_end FUN_020CDC04

	arm_func_start FUN_020CDE94
FUN_020CDE94: @ 0x020CDE94
	push {r3, lr}
	ldr r1, _020CDFCC @ =0x021E15C0
	mvn ip, r0
	ldrh r3, [r1]
	ldrh r2, [r1, #4]
	cmp r0, #0x30
	orr r2, r3, r2
	and r2, ip, r2
	strh r2, [r1]
	strh r0, [r1, #4]
	bgt _020CDEFC
	cmp r0, #0x30
	bge _020CDF70
	cmp r0, #0x10
	bgt _020CDEF0
	bge _020CDF7C
	cmp r0, #3
	addls pc, pc, r0, lsl #2
	b _020CDFBC
_020CDEE0: @ jump table
	b _020CDFBC @ case 0
	b _020CDF44 @ case 1
	b _020CDF54 @ case 2
	b _020CDF38 @ case 3
_020CDEF0:
	cmp r0, #0x20
	beq _020CDFB0
	b _020CDFBC
_020CDEFC:
	cmp r0, #0x50
	bgt _020CDF1C
	bge _020CDF8C
	cmp r0, #0x40
	ldreq r0, _020CDFD0 @ =0x04000246
	moveq r1, #0x82
	strbeq r1, [r0]
	b _020CDFBC
_020CDF1C:
	cmp r0, #0x60
	bgt _020CDF2C
	beq _020CDFA4
	b _020CDFBC
_020CDF2C:
	cmp r0, #0x70
	beq _020CDF64
	b _020CDFBC
_020CDF38:
	ldr r0, _020CDFD4 @ =0x04000241
	mov r1, #0x8a
	strb r1, [r0]
_020CDF44:
	ldr r0, _020CDFD8 @ =0x04000240
	mov r1, #0x82
	strb r1, [r0]
	b _020CDFBC
_020CDF54:
	ldr r0, _020CDFD4 @ =0x04000241
	mov r1, #0x82
	strb r1, [r0]
	b _020CDFBC
_020CDF64:
	ldr r0, _020CDFD0 @ =0x04000246
	mov r1, #0x9a
	strb r1, [r0]
_020CDF70:
	ldr r0, _020CDFDC @ =0x04000245
	mov r1, #0x92
	strb r1, [r0]
_020CDF7C:
	ldr r0, _020CDFE0 @ =0x04000244
	mov r1, #0x82
	strb r1, [r0]
	b _020CDFBC
_020CDF8C:
	ldr r1, _020CDFD0 @ =0x04000246
	mov r0, #0x92
	strb r0, [r1]
	mov r0, #0x82
	strb r0, [r1, #-2]
	b _020CDFBC
_020CDFA4:
	ldr r0, _020CDFD0 @ =0x04000246
	mov r1, #0x8a
	strb r1, [r0]
_020CDFB0:
	ldr r0, _020CDFDC @ =0x04000245
	mov r1, #0x82
	strb r1, [r0]
_020CDFBC:
	ldr r0, _020CDFCC @ =0x021E15C0
	ldrh r0, [r0]
	bl FUN_020CDB4C
	pop {r3, pc}
	.align 2, 0
_020CDFCC: .4byte 0x021E15C0
_020CDFD0: .4byte 0x04000246
_020CDFD4: .4byte 0x04000241
_020CDFD8: .4byte 0x04000240
_020CDFDC: .4byte 0x04000245
_020CDFE0: .4byte 0x04000244
	arm_func_end FUN_020CDE94

	arm_func_start FUN_020CDFE4
FUN_020CDFE4: @ 0x020CDFE4
	push {r3, lr}
	ldr r1, _020CE0D8 @ =0x021E15C0
	mvn ip, r0
	ldrh r3, [r1]
	ldrh r2, [r1, #0xe]
	cmp r0, #0x20
	orr r2, r3, r2
	and r2, ip, r2
	strh r2, [r1]
	strh r0, [r1, #0xe]
	bgt _020CE034
	cmp r0, #0x20
	bge _020CE098
	cmp r0, #0
	bgt _020CE028
	beq _020CE0B8
	b _020CE0C8
_020CE028:
	cmp r0, #0x10
	beq _020CE050
	b _020CE0C8
_020CE034:
	cmp r0, #0x40
	bgt _020CE044
	beq _020CE06C
	b _020CE0C8
_020CE044:
	cmp r0, #0x60
	beq _020CE08C
	b _020CE0C8
_020CE050:
	mov r2, #0x4000000
	ldr r1, [r2]
	mov r0, #0x84
	orr r1, r1, #0x40000000
	str r1, [r2]
	strb r0, [r2, #0x244]
	b _020CE0C8
_020CE06C:
	mov r2, #0x4000000
	ldr r1, [r2]
	ldr r0, _020CE0DC @ =0x04000246
	orr r1, r1, #0x40000000
	str r1, [r2]
	mov r1, #0x8c
	strb r1, [r0]
	b _020CE0C8
_020CE08C:
	ldr r0, _020CE0DC @ =0x04000246
	mov r1, #0x8c
	strb r1, [r0]
_020CE098:
	ldr r0, _020CE0E0 @ =0x04000245
	mov r1, #0x84
	strb r1, [r0]
	mov r1, #0x4000000
	ldr r0, [r1]
	orr r0, r0, #0x40000000
	str r0, [r1]
	b _020CE0C8
_020CE0B8:
	mov r1, #0x4000000
	ldr r0, [r1]
	bic r0, r0, #0x40000000
	str r0, [r1]
_020CE0C8:
	ldr r0, _020CE0D8 @ =0x021E15C0
	ldrh r0, [r0]
	bl FUN_020CDB4C
	pop {r3, pc}
	.align 2, 0
_020CE0D8: .4byte 0x021E15C0
_020CE0DC: .4byte 0x04000246
_020CE0E0: .4byte 0x04000245
	arm_func_end FUN_020CDFE4

	arm_func_start FUN_020CE0E4
FUN_020CE0E4: @ 0x020CE0E4
	push {r3, lr}
	ldr r1, _020CE184 @ =0x021E15C0
	mvn ip, r0
	ldrh r3, [r1]
	ldrh r2, [r1, #0x10]
	cmp r0, #0
	orr r2, r3, r2
	and r2, ip, r2
	strh r2, [r1]
	strh r0, [r1, #0x10]
	beq _020CE164
	cmp r0, #0x20
	beq _020CE124
	cmp r0, #0x40
	beq _020CE144
	b _020CE174
_020CE124:
	mov r2, #0x4000000
	ldr r1, [r2]
	ldr r0, _020CE188 @ =0x04000245
	orr r1, r1, #0x80000000
	str r1, [r2]
	mov r1, #0x85
	strb r1, [r0]
	b _020CE174
_020CE144:
	mov r2, #0x4000000
	ldr r1, [r2]
	ldr r0, _020CE18C @ =0x04000246
	orr r1, r1, #0x80000000
	str r1, [r2]
	mov r1, #0x85
	strb r1, [r0]
	b _020CE174
_020CE164:
	mov r1, #0x4000000
	ldr r0, [r1]
	bic r0, r0, #0x80000000
	str r0, [r1]
_020CE174:
	ldr r0, _020CE184 @ =0x021E15C0
	ldrh r0, [r0]
	bl FUN_020CDB4C
	pop {r3, pc}
	.align 2, 0
_020CE184: .4byte 0x021E15C0
_020CE188: .4byte 0x04000245
_020CE18C: .4byte 0x04000246
	arm_func_end FUN_020CE0E4

	arm_func_start FUN_020CE190
FUN_020CE190: @ 0x020CE190
	push {r3, lr}
	ldr r1, _020CE34C @ =0x021E15C0
	mvn ip, r0
	ldrh r3, [r1]
	ldrh r2, [r1, #8]
	cmp r0, #0
	orr r2, r3, r2
	and r2, ip, r2
	strh r2, [r1]
	strh r0, [r1, #8]
	ldr r2, _020CE350 @ =0x04000060
	bne _020CE1D4
	ldrh r1, [r2]
	ldr r0, _020CE354 @ =0x0000CFFE
	and r0, r1, r0
	strh r0, [r2]
	b _020CE33C
_020CE1D4:
	ldrh r1, [r2]
	cmp r0, #0xf
	bic r1, r1, #0x3000
	orr r1, r1, #1
	strh r1, [r2]
	addls pc, pc, r0, lsl #2
	b _020CE33C
_020CE1F0: @ jump table
	b _020CE33C @ case 0
	b _020CE330 @ case 1
	b _020CE2FC @ case 2
	b _020CE324 @ case 3
	b _020CE2D4 @ case 4
	b _020CE230 @ case 5
	b _020CE2F0 @ case 6
	b _020CE318 @ case 7
	b _020CE2B8 @ case 8
	b _020CE248 @ case 9
	b _020CE260 @ case 10
	b _020CE278 @ case 11
	b _020CE2C8 @ case 12
	b _020CE298 @ case 13
	b _020CE2E4 @ case 14
	b _020CE30C @ case 15
_020CE230:
	mov r1, #0x83
	ldr r0, _020CE358 @ =0x04000242
	strb r1, [r2, #0x1e0]
	mov r1, #0x8b
	strb r1, [r0]
	b _020CE33C
_020CE248:
	mov r1, #0x83
	ldr r0, _020CE35C @ =0x04000243
	strb r1, [r2, #0x1e0]
	mov r1, #0x8b
	strb r1, [r0]
	b _020CE33C
_020CE260:
	ldr r1, _020CE360 @ =0x04000241
	mov r0, #0x83
	strb r0, [r1]
	mov r0, #0x8b
	strb r0, [r1, #2]
	b _020CE33C
_020CE278:
	mov r0, #0x83
	ldr r1, _020CE360 @ =0x04000241
	strb r0, [r2, #0x1e0]
	mov r0, #0x8b
	strb r0, [r1]
	mov r0, #0x93
	strb r0, [r1, #2]
	b _020CE33C
_020CE298:
	mov r0, #0x83
	ldr r1, _020CE358 @ =0x04000242
	strb r0, [r2, #0x1e0]
	mov r0, #0x8b
	strb r0, [r1]
	mov r0, #0x93
	strb r0, [r1, #1]
	b _020CE33C
_020CE2B8:
	ldr r0, _020CE35C @ =0x04000243
	mov r1, #0x83
	strb r1, [r0]
	b _020CE33C
_020CE2C8:
	ldr r0, _020CE35C @ =0x04000243
	mov r1, #0x8b
	strb r1, [r0]
_020CE2D4:
	ldr r0, _020CE358 @ =0x04000242
	mov r1, #0x83
	strb r1, [r0]
	b _020CE33C
_020CE2E4:
	ldr r0, _020CE35C @ =0x04000243
	mov r1, #0x93
	strb r1, [r0]
_020CE2F0:
	ldr r0, _020CE358 @ =0x04000242
	mov r1, #0x8b
	strb r1, [r0]
_020CE2FC:
	ldr r0, _020CE360 @ =0x04000241
	mov r1, #0x83
	strb r1, [r0]
	b _020CE33C
_020CE30C:
	ldr r0, _020CE35C @ =0x04000243
	mov r1, #0x9b
	strb r1, [r0]
_020CE318:
	ldr r0, _020CE358 @ =0x04000242
	mov r1, #0x93
	strb r1, [r0]
_020CE324:
	ldr r0, _020CE360 @ =0x04000241
	mov r1, #0x8b
	strb r1, [r0]
_020CE330:
	ldr r0, _020CE364 @ =0x04000240
	mov r1, #0x83
	strb r1, [r0]
_020CE33C:
	ldr r0, _020CE34C @ =0x021E15C0
	ldrh r0, [r0]
	bl FUN_020CDB4C
	pop {r3, pc}
	.align 2, 0
_020CE34C: .4byte 0x021E15C0
_020CE350: .4byte 0x04000060
_020CE354: .4byte 0x0000CFFE
_020CE358: .4byte 0x04000242
_020CE35C: .4byte 0x04000243
_020CE360: .4byte 0x04000241
_020CE364: .4byte 0x04000240
	arm_func_end FUN_020CE190

	arm_func_start FUN_020CE368
FUN_020CE368: @ 0x020CE368
	push {r3, lr}
	ldr r1, _020CE440 @ =0x021E15C0
	mvn ip, r0
	ldrh r3, [r1]
	ldrh r2, [r1, #0xa]
	cmp r0, #0x30
	orr r2, r3, r2
	and r2, ip, r2
	strh r2, [r1]
	strh r0, [r1, #0xa]
	bgt _020CE3BC
	cmp r0, #0x30
	bge _020CE418
	cmp r0, #0x10
	bgt _020CE3B0
	bge _020CE424
	cmp r0, #0
	b _020CE430
_020CE3B0:
	cmp r0, #0x20
	beq _020CE3EC
	b _020CE430
_020CE3BC:
	cmp r0, #0x60
	bgt _020CE3D4
	bge _020CE3E0
	cmp r0, #0x40
	beq _020CE3FC
	b _020CE430
_020CE3D4:
	cmp r0, #0x70
	beq _020CE40C
	b _020CE430
_020CE3E0:
	ldr r0, _020CE444 @ =0x04000246
	mov r1, #0x8b
	strb r1, [r0]
_020CE3EC:
	ldr r0, _020CE448 @ =0x04000245
	mov r1, #0x83
	strb r1, [r0]
	b _020CE430
_020CE3FC:
	ldr r0, _020CE444 @ =0x04000246
	mov r1, #0x83
	strb r1, [r0]
	b _020CE430
_020CE40C:
	ldr r0, _020CE444 @ =0x04000246
	mov r1, #0x9b
	strb r1, [r0]
_020CE418:
	ldr r0, _020CE448 @ =0x04000245
	mov r1, #0x93
	strb r1, [r0]
_020CE424:
	ldr r0, _020CE44C @ =0x04000244
	mov r1, #0x83
	strb r1, [r0]
_020CE430:
	ldr r0, _020CE440 @ =0x021E15C0
	ldrh r0, [r0]
	bl FUN_020CDB4C
	pop {r3, pc}
	.align 2, 0
_020CE440: .4byte 0x021E15C0
_020CE444: .4byte 0x04000246
_020CE448: .4byte 0x04000245
_020CE44C: .4byte 0x04000244
	arm_func_end FUN_020CE368

	arm_func_start FUN_020CE450
FUN_020CE450: @ 0x020CE450
	push {r3, lr}
	ldr r1, _020CE56C @ =0x021E15C0
	mvn ip, r0
	ldrh r3, [r1]
	ldrh r2, [r1, #0xc]
	cmp r0, #0xc
	orr r2, r3, r2
	and r2, ip, r2
	strh r2, [r1]
	strh r0, [r1, #0xc]
	addls pc, pc, r0, lsl #2
	b _020CE55C
_020CE480: @ jump table
	b _020CE50C @ case 0
	b _020CE520 @ case 1
	b _020CE4C0 @ case 2
	b _020CE4B4 @ case 3
	b _020CE540 @ case 4
	b _020CE55C @ case 5
	b _020CE55C @ case 6
	b _020CE55C @ case 7
	b _020CE4EC @ case 8
	b _020CE55C @ case 9
	b _020CE55C @ case 10
	b _020CE55C @ case 11
	b _020CE4E0 @ case 12
_020CE4B4:
	ldr r0, _020CE570 @ =0x04000240
	mov r1, #0x93
	strb r1, [r0]
_020CE4C0:
	ldr r0, _020CE574 @ =0x04000241
	mov r2, #0x9b
	ldr r1, _020CE578 @ =0x04000060
	strb r2, [r0]
	ldrh r0, [r1]
	orr r0, r0, #0x4000
	strh r0, [r1]
	b _020CE55C
_020CE4E0:
	ldr r0, _020CE57C @ =0x04000242
	mov r1, #0x93
	strb r1, [r0]
_020CE4EC:
	ldr r0, _020CE580 @ =0x04000243
	mov r2, #0x9b
	ldr r1, _020CE578 @ =0x04000060
	strb r2, [r0]
	ldrh r0, [r1]
	orr r0, r0, #0x4000
	strh r0, [r1]
	b _020CE55C
_020CE50C:
	ldr r1, _020CE578 @ =0x04000060
	ldrh r0, [r1]
	bic r0, r0, #0x4000
	strh r0, [r1]
	b _020CE55C
_020CE520:
	ldr r0, _020CE570 @ =0x04000240
	mov r1, #0x9b
	strb r1, [r0]
	sub r1, r0, #0x1e0
	ldrh r0, [r1]
	orr r0, r0, #0x4000
	strh r0, [r1]
	b _020CE55C
_020CE540:
	ldr r0, _020CE57C @ =0x04000242
	mov r2, #0x9b
	ldr r1, _020CE578 @ =0x04000060
	strb r2, [r0]
	ldrh r0, [r1]
	orr r0, r0, #0x4000
	strh r0, [r1]
_020CE55C:
	ldr r0, _020CE56C @ =0x021E15C0
	ldrh r0, [r0]
	bl FUN_020CDB4C
	pop {r3, pc}
	.align 2, 0
_020CE56C: .4byte 0x021E15C0
_020CE570: .4byte 0x04000240
_020CE574: .4byte 0x04000241
_020CE578: .4byte 0x04000060
_020CE57C: .4byte 0x04000242
_020CE580: .4byte 0x04000243
	arm_func_end FUN_020CE450

	arm_func_start FUN_020CE584
FUN_020CE584: @ 0x020CE584
	push {r3, lr}
	ldr r1, _020CE624 @ =0x021E15C0
	mvn ip, r0
	ldrh r3, [r1]
	ldrh r2, [r1, #6]
	cmp r0, #8
	orr r2, r3, r2
	and r2, ip, r2
	strh r2, [r1]
	strh r0, [r1, #6]
	bgt _020CE5D8
	cmp r0, #8
	bge _020CE608
	cmp r0, #4
	bgt _020CE614
	cmp r0, #0
	blt _020CE614
	beq _020CE614
	cmp r0, #4
	beq _020CE5F8
	b _020CE614
_020CE5D8:
	cmp r0, #0xc
	bne _020CE614
	ldr r1, _020CE628 @ =0x04000243
	mov r0, #0x8a
	strb r0, [r1]
	mov r0, #0x82
	strb r0, [r1, #-1]
	b _020CE614
_020CE5F8:
	ldr r0, _020CE62C @ =0x04000242
	mov r1, #0x82
	strb r1, [r0]
	b _020CE614
_020CE608:
	ldr r0, _020CE628 @ =0x04000243
	mov r1, #0x82
	strb r1, [r0]
_020CE614:
	ldr r0, _020CE624 @ =0x021E15C0
	ldrh r0, [r0]
	bl FUN_020CDB4C
	pop {r3, pc}
	.align 2, 0
_020CE624: .4byte 0x021E15C0
_020CE628: .4byte 0x04000243
_020CE62C: .4byte 0x04000242
	arm_func_end FUN_020CE584

	arm_func_start FUN_020CE630
FUN_020CE630: @ 0x020CE630
	ldr r1, _020CE648 @ =0x021E15C0
	ldr ip, _020CE64C @ =FUN_020CDB4C
	ldrh r2, [r1]
	orr r2, r2, r0
	strh r2, [r1]
	bx ip
	.align 2, 0
_020CE648: .4byte 0x021E15C0
_020CE64C: .4byte FUN_020CDB4C
	arm_func_end FUN_020CE630

	arm_func_start FUN_020CE650
FUN_020CE650: @ 0x020CE650
	push {r3, lr}
	ldr r1, _020CE6E8 @ =0x021E15C0
	mvn ip, r0
	ldrh r3, [r1]
	ldrh r2, [r1, #0x12]
	cmp r0, #0x80
	orr r2, r3, r2
	and r2, ip, r2
	strh r2, [r1]
	strh r0, [r1, #0x12]
	bgt _020CE6A4
	cmp r0, #0x80
	bge _020CE6CC
	cmp r0, #4
	bgt _020CE6D8
	cmp r0, #0
	blt _020CE6D8
	beq _020CE6D8
	cmp r0, #4
	beq _020CE6B0
	b _020CE6D8
_020CE6A4:
	cmp r0, #0x180
	beq _020CE6C0
	b _020CE6D8
_020CE6B0:
	ldr r0, _020CE6EC @ =0x04000242
	mov r1, #0x84
	strb r1, [r0]
	b _020CE6D8
_020CE6C0:
	ldr r0, _020CE6F0 @ =0x04000249
	mov r1, #0x81
	strb r1, [r0]
_020CE6CC:
	ldr r0, _020CE6F4 @ =0x04000248
	mov r1, #0x81
	strb r1, [r0]
_020CE6D8:
	ldr r0, _020CE6E8 @ =0x021E15C0
	ldrh r0, [r0]
	bl FUN_020CDB4C
	pop {r3, pc}
	.align 2, 0
_020CE6E8: .4byte 0x021E15C0
_020CE6EC: .4byte 0x04000242
_020CE6F0: .4byte 0x04000249
_020CE6F4: .4byte 0x04000248
	arm_func_end FUN_020CE650

	arm_func_start FUN_020CE6F8
FUN_020CE6F8: @ 0x020CE6F8
	push {r3, lr}
	ldr r1, _020CE75C @ =0x021E15C0
	mvn ip, r0
	ldrh r3, [r1]
	ldrh r2, [r1, #0x14]
	cmp r0, #0
	orr r2, r3, r2
	and r2, ip, r2
	strh r2, [r1]
	strh r0, [r1, #0x14]
	beq _020CE74C
	cmp r0, #8
	beq _020CE740
	cmp r0, #0x100
	ldreq r0, _020CE760 @ =0x04000249
	moveq r1, #0x82
	strbeq r1, [r0]
	b _020CE74C
_020CE740:
	ldr r0, _020CE764 @ =0x04000243
	mov r1, #0x84
	strb r1, [r0]
_020CE74C:
	ldr r0, _020CE75C @ =0x021E15C0
	ldrh r0, [r0]
	bl FUN_020CDB4C
	pop {r3, pc}
	.align 2, 0
_020CE75C: .4byte 0x021E15C0
_020CE760: .4byte 0x04000249
_020CE764: .4byte 0x04000243
	arm_func_end FUN_020CE6F8

	arm_func_start FUN_020CE768
FUN_020CE768: @ 0x020CE768
	push {r3, lr}
	ldr r1, _020CE7DC @ =0x021E15C0
	mvn ip, r0
	ldrh r3, [r1]
	ldrh r2, [r1, #0x16]
	cmp r0, #0
	orr r2, r3, r2
	and r2, ip, r2
	strh r2, [r1]
	strh r0, [r1, #0x16]
	beq _020CE7BC
	cmp r0, #0x80
	bne _020CE7CC
	ldr r3, _020CE7E0 @ =0x04001000
	ldr r0, _020CE7E4 @ =0x04000248
	ldr r2, [r3]
	mov r1, #0x82
	orr r2, r2, #0x40000000
	str r2, [r3]
	strb r1, [r0]
	b _020CE7CC
_020CE7BC:
	ldr r1, _020CE7E0 @ =0x04001000
	ldr r0, [r1]
	bic r0, r0, #0x40000000
	str r0, [r1]
_020CE7CC:
	ldr r0, _020CE7DC @ =0x021E15C0
	ldrh r0, [r0]
	bl FUN_020CDB4C
	pop {r3, pc}
	.align 2, 0
_020CE7DC: .4byte 0x021E15C0
_020CE7E0: .4byte 0x04001000
_020CE7E4: .4byte 0x04000248
	arm_func_end FUN_020CE768

	arm_func_start FUN_020CE7E8
FUN_020CE7E8: @ 0x020CE7E8
	push {r3, lr}
	ldr r1, _020CE85C @ =0x021E15C0
	mvn ip, r0
	ldrh r3, [r1]
	ldrh r2, [r1, #0x18]
	cmp r0, #0
	orr r2, r3, r2
	and r2, ip, r2
	strh r2, [r1]
	strh r0, [r1, #0x18]
	beq _020CE83C
	cmp r0, #0x100
	bne _020CE84C
	ldr r3, _020CE860 @ =0x04001000
	ldr r0, _020CE864 @ =0x04000249
	ldr r2, [r3]
	mov r1, #0x83
	orr r2, r2, #0x80000000
	str r2, [r3]
	strb r1, [r0]
	b _020CE84C
_020CE83C:
	ldr r1, _020CE860 @ =0x04001000
	ldr r0, [r1]
	bic r0, r0, #0x80000000
	str r0, [r1]
_020CE84C:
	ldr r0, _020CE85C @ =0x021E15C0
	ldrh r0, [r0]
	bl FUN_020CDB4C
	pop {r3, pc}
	.align 2, 0
_020CE85C: .4byte 0x021E15C0
_020CE860: .4byte 0x04001000
_020CE864: .4byte 0x04000249
	arm_func_end FUN_020CE7E8

	arm_func_start FUN_020CE868
FUN_020CE868: @ 0x020CE868
	push {r4, lr}
	ldrh r4, [r0]
	mov r2, #0
	ldr r1, _020CE898 @ =0x021E15C0
	strh r2, [r0]
	ldrh r2, [r1]
	mov r0, r4
	orr r2, r2, r4
	strh r2, [r1]
	bl FUN_020CDB4C
	mov r0, r4
	pop {r4, pc}
	.align 2, 0
_020CE898: .4byte 0x021E15C0
	arm_func_end FUN_020CE868

	arm_func_start FUN_020CE89C
FUN_020CE89C: @ 0x020CE89C
	ldr ip, _020CE8A8 @ =FUN_020CE868
	ldr r0, _020CE8AC @ =0x021E15C2
	bx ip
	.align 2, 0
_020CE8A8: .4byte FUN_020CE868
_020CE8AC: .4byte 0x021E15C2
	arm_func_end FUN_020CE89C

	arm_func_start FUN_020CE8B0
FUN_020CE8B0: @ 0x020CE8B0
	ldr ip, _020CE8BC @ =FUN_020CE868
	ldr r0, _020CE8C0 @ =0x021E15C4
	bx ip
	.align 2, 0
_020CE8BC: .4byte FUN_020CE868
_020CE8C0: .4byte 0x021E15C4
	arm_func_end FUN_020CE8B0

	arm_func_start FUN_020CE8C4
FUN_020CE8C4: @ 0x020CE8C4
	mov r2, #0x4000000
	ldr r1, [r2]
	ldr ip, _020CE8E0 @ =FUN_020CE868
	bic r1, r1, #0x40000000
	ldr r0, _020CE8E4 @ =0x021E15CE
	str r1, [r2]
	bx ip
	.align 2, 0
_020CE8E0: .4byte FUN_020CE868
_020CE8E4: .4byte 0x021E15CE
	arm_func_end FUN_020CE8C4

	arm_func_start FUN_020CE8E8
FUN_020CE8E8: @ 0x020CE8E8
	mov r2, #0x4000000
	ldr r1, [r2]
	ldr ip, _020CE904 @ =FUN_020CE868
	bic r1, r1, #0x80000000
	ldr r0, _020CE908 @ =0x021E15D0
	str r1, [r2]
	bx ip
	.align 2, 0
_020CE904: .4byte FUN_020CE868
_020CE908: .4byte 0x021E15D0
	arm_func_end FUN_020CE8E8

	arm_func_start FUN_020CE90C
FUN_020CE90C: @ 0x020CE90C
	ldr ip, _020CE918 @ =FUN_020CE868
	ldr r0, _020CE91C @ =0x021E15C8
	bx ip
	.align 2, 0
_020CE918: .4byte FUN_020CE868
_020CE91C: .4byte 0x021E15C8
	arm_func_end FUN_020CE90C

	arm_func_start FUN_020CE920
FUN_020CE920: @ 0x020CE920
	ldr ip, _020CE92C @ =FUN_020CE868
	ldr r0, _020CE930 @ =0x021E15CA
	bx ip
	.align 2, 0
_020CE92C: .4byte FUN_020CE868
_020CE930: .4byte 0x021E15CA
	arm_func_end FUN_020CE920

	arm_func_start FUN_020CE934
FUN_020CE934: @ 0x020CE934
	ldr ip, _020CE940 @ =FUN_020CE868
	ldr r0, _020CE944 @ =0x021E15CC
	bx ip
	.align 2, 0
_020CE940: .4byte FUN_020CE868
_020CE944: .4byte 0x021E15CC
	arm_func_end FUN_020CE934

	arm_func_start FUN_020CE948
FUN_020CE948: @ 0x020CE948
	ldr ip, _020CE954 @ =FUN_020CE868
	ldr r0, _020CE958 @ =0x021E15D2
	bx ip
	.align 2, 0
_020CE954: .4byte FUN_020CE868
_020CE958: .4byte 0x021E15D2
	arm_func_end FUN_020CE948

	arm_func_start FUN_020CE95C
FUN_020CE95C: @ 0x020CE95C
	ldr ip, _020CE968 @ =FUN_020CE868
	ldr r0, _020CE96C @ =0x021E15D4
	bx ip
	.align 2, 0
_020CE968: .4byte FUN_020CE868
_020CE96C: .4byte 0x021E15D4
	arm_func_end FUN_020CE95C

	arm_func_start FUN_020CE970
FUN_020CE970: @ 0x020CE970
	ldr r2, _020CE98C @ =0x04001000
	ldr ip, _020CE990 @ =FUN_020CE868
	ldr r1, [r2]
	ldr r0, _020CE994 @ =0x021E15D6
	bic r1, r1, #0x40000000
	str r1, [r2]
	bx ip
	.align 2, 0
_020CE98C: .4byte 0x04001000
_020CE990: .4byte FUN_020CE868
_020CE994: .4byte 0x021E15D6
	arm_func_end FUN_020CE970

	arm_func_start FUN_020CE998
FUN_020CE998: @ 0x020CE998
	ldr r2, _020CE9B4 @ =0x04001000
	ldr ip, _020CE9B8 @ =FUN_020CE868
	ldr r1, [r2]
	ldr r0, _020CE9BC @ =0x021E15D8
	bic r1, r1, #0x80000000
	str r1, [r2]
	bx ip
	.align 2, 0
_020CE9B4: .4byte 0x04001000
_020CE9B8: .4byte FUN_020CE868
_020CE9BC: .4byte 0x021E15D8
	arm_func_end FUN_020CE998

	arm_func_start FUN_020CE9C0
FUN_020CE9C0: @ 0x020CE9C0
	push {r4, lr}
	ldrh r4, [r0]
	mov r1, #0
	strh r1, [r0]
	tst r4, #1
	ldrne r0, _020CEA78 @ =0x04000240
	strbne r1, [r0]
	tst r4, #2
	ldrne r0, _020CEA7C @ =0x04000241
	movne r1, #0
	strbne r1, [r0]
	tst r4, #4
	ldrne r0, _020CEA80 @ =0x04000242
	movne r1, #0
	strbne r1, [r0]
	tst r4, #8
	ldrne r0, _020CEA84 @ =0x04000243
	movne r1, #0
	strbne r1, [r0]
	tst r4, #0x10
	ldrne r0, _020CEA88 @ =0x04000244
	movne r1, #0
	strbne r1, [r0]
	tst r4, #0x20
	ldrne r0, _020CEA8C @ =0x04000245
	movne r1, #0
	strbne r1, [r0]
	tst r4, #0x40
	ldrne r0, _020CEA90 @ =0x04000246
	movne r1, #0
	strbne r1, [r0]
	tst r4, #0x80
	ldrne r0, _020CEA94 @ =0x04000248
	movne r1, #0
	strbne r1, [r0]
	tst r4, #0x100
	ldrne r0, _020CEA98 @ =0x04000249
	movne r1, #0
	strbne r1, [r0]
	ldr r1, _020CEA9C @ =0x021E15BE
	lsl r0, r4, #0x10
	ldrh r1, [r1]
	lsr r0, r0, #0x10
	bl FUN_020D3DF0
	mov r0, r4
	pop {r4, pc}
	.align 2, 0
_020CEA78: .4byte 0x04000240
_020CEA7C: .4byte 0x04000241
_020CEA80: .4byte 0x04000242
_020CEA84: .4byte 0x04000243
_020CEA88: .4byte 0x04000244
_020CEA8C: .4byte 0x04000245
_020CEA90: .4byte 0x04000246
_020CEA94: .4byte 0x04000248
_020CEA98: .4byte 0x04000249
_020CEA9C: .4byte 0x021E15BE
	arm_func_end FUN_020CE9C0

	arm_func_start FUN_020CEAA0
FUN_020CEAA0: @ 0x020CEAA0
	ldr ip, _020CEAAC @ =FUN_020CE9C0
	ldr r0, _020CEAB0 @ =0x021E15C2
	bx ip
	.align 2, 0
_020CEAAC: .4byte FUN_020CE9C0
_020CEAB0: .4byte 0x021E15C2
	arm_func_end FUN_020CEAA0

	arm_func_start FUN_020CEAB4
FUN_020CEAB4: @ 0x020CEAB4
	ldr ip, _020CEAC0 @ =FUN_020CE9C0
	ldr r0, _020CEAC4 @ =0x021E15C4
	bx ip
	.align 2, 0
_020CEAC0: .4byte FUN_020CE9C0
_020CEAC4: .4byte 0x021E15C4
	arm_func_end FUN_020CEAB4

	arm_func_start FUN_020CEAC8
FUN_020CEAC8: @ 0x020CEAC8
	mov r2, #0x4000000
	ldr r1, [r2]
	ldr ip, _020CEAE4 @ =FUN_020CE9C0
	bic r1, r1, #0x40000000
	ldr r0, _020CEAE8 @ =0x021E15CE
	str r1, [r2]
	bx ip
	.align 2, 0
_020CEAE4: .4byte FUN_020CE9C0
_020CEAE8: .4byte 0x021E15CE
	arm_func_end FUN_020CEAC8

	arm_func_start FUN_020CEAEC
FUN_020CEAEC: @ 0x020CEAEC
	mov r2, #0x4000000
	ldr r1, [r2]
	ldr ip, _020CEB08 @ =FUN_020CE9C0
	bic r1, r1, #0x80000000
	ldr r0, _020CEB0C @ =0x021E15D0
	str r1, [r2]
	bx ip
	.align 2, 0
_020CEB08: .4byte FUN_020CE9C0
_020CEB0C: .4byte 0x021E15D0
	arm_func_end FUN_020CEAEC

	arm_func_start FUN_020CEB10
FUN_020CEB10: @ 0x020CEB10
	ldr ip, _020CEB1C @ =FUN_020CE9C0
	ldr r0, _020CEB20 @ =0x021E15C8
	bx ip
	.align 2, 0
_020CEB1C: .4byte FUN_020CE9C0
_020CEB20: .4byte 0x021E15C8
	arm_func_end FUN_020CEB10

	arm_func_start FUN_020CEB24
FUN_020CEB24: @ 0x020CEB24
	ldr ip, _020CEB30 @ =FUN_020CE9C0
	ldr r0, _020CEB34 @ =0x021E15CA
	bx ip
	.align 2, 0
_020CEB30: .4byte FUN_020CE9C0
_020CEB34: .4byte 0x021E15CA
	arm_func_end FUN_020CEB24

	arm_func_start FUN_020CEB38
FUN_020CEB38: @ 0x020CEB38
	ldr ip, _020CEB44 @ =FUN_020CE9C0
	ldr r0, _020CEB48 @ =0x021E15CC
	bx ip
	.align 2, 0
_020CEB44: .4byte FUN_020CE9C0
_020CEB48: .4byte 0x021E15CC
	arm_func_end FUN_020CEB38

	arm_func_start FUN_020CEB4C
FUN_020CEB4C: @ 0x020CEB4C
	ldr ip, _020CEB58 @ =FUN_020CE9C0
	ldr r0, _020CEB5C @ =0x021E15C6
	bx ip
	.align 2, 0
_020CEB58: .4byte FUN_020CE9C0
_020CEB5C: .4byte 0x021E15C6
	arm_func_end FUN_020CEB4C

	arm_func_start FUN_020CEB60
FUN_020CEB60: @ 0x020CEB60
	ldr ip, _020CEB6C @ =FUN_020CE9C0
	ldr r0, _020CEB70 @ =0x021E15C0
	bx ip
	.align 2, 0
_020CEB6C: .4byte FUN_020CE9C0
_020CEB70: .4byte 0x021E15C0
	arm_func_end FUN_020CEB60

	arm_func_start FUN_020CEB74
FUN_020CEB74: @ 0x020CEB74
	ldr ip, _020CEB80 @ =FUN_020CE9C0
	ldr r0, _020CEB84 @ =0x021E15D2
	bx ip
	.align 2, 0
_020CEB80: .4byte FUN_020CE9C0
_020CEB84: .4byte 0x021E15D2
	arm_func_end FUN_020CEB74

	arm_func_start FUN_020CEB88
FUN_020CEB88: @ 0x020CEB88
	ldr ip, _020CEB94 @ =FUN_020CE9C0
	ldr r0, _020CEB98 @ =0x021E15D4
	bx ip
	.align 2, 0
_020CEB94: .4byte FUN_020CE9C0
_020CEB98: .4byte 0x021E15D4
	arm_func_end FUN_020CEB88

	arm_func_start FUN_020CEB9C
FUN_020CEB9C: @ 0x020CEB9C
	ldr r2, _020CEBB8 @ =0x04001000
	ldr ip, _020CEBBC @ =FUN_020CE9C0
	ldr r1, [r2]
	ldr r0, _020CEBC0 @ =0x021E15D6
	bic r1, r1, #0x40000000
	str r1, [r2]
	bx ip
	.align 2, 0
_020CEBB8: .4byte 0x04001000
_020CEBBC: .4byte FUN_020CE9C0
_020CEBC0: .4byte 0x021E15D6
	arm_func_end FUN_020CEB9C

	arm_func_start FUN_020CEBC4
FUN_020CEBC4: @ 0x020CEBC4
	ldr r2, _020CEBE0 @ =0x04001000
	ldr ip, _020CEBE4 @ =FUN_020CE9C0
	ldr r1, [r2]
	ldr r0, _020CEBE8 @ =0x021E15D8
	bic r1, r1, #0x80000000
	str r1, [r2]
	bx ip
	.align 2, 0
_020CEBE0: .4byte 0x04001000
_020CEBE4: .4byte FUN_020CE9C0
_020CEBE8: .4byte 0x021E15D8
	arm_func_end FUN_020CEBC4

	arm_func_start FUN_020CEBEC
FUN_020CEBEC: @ 0x020CEBEC
	ldr r0, _020CEBF8 @ =0x021E15C0
	ldrh r0, [r0, #4]
	bx lr
	.align 2, 0
_020CEBF8: .4byte 0x021E15C0
	arm_func_end FUN_020CEBEC

	arm_func_start FUN_020CEBFC
FUN_020CEBFC: @ 0x020CEBFC
	ldr r0, _020CEC08 @ =0x021E15C0
	ldrh r0, [r0, #0x10]
	bx lr
	.align 2, 0
_020CEC08: .4byte 0x021E15C0
	arm_func_end FUN_020CEBFC

	arm_func_start FUN_020CEC0C
FUN_020CEC0C: @ 0x020CEC0C
	ldr r0, _020CEC18 @ =0x021E15C0
	ldrh r0, [r0]
	bx lr
	.align 2, 0
_020CEC18: .4byte 0x021E15C0
	arm_func_end FUN_020CEC0C

	arm_func_start FUN_020CEC1C
FUN_020CEC1C: @ 0x020CEC1C
	ldr r0, _020CEC28 @ =0x021E15C0
	ldrh r0, [r0, #0x14]
	bx lr
	.align 2, 0
_020CEC28: .4byte 0x021E15C0
	arm_func_end FUN_020CEC1C

	arm_func_start FUN_020CEC2C
FUN_020CEC2C: @ 0x020CEC2C
	ldr r0, _020CEC38 @ =0x021E15C0
	ldrh r0, [r0, #0x18]
	bx lr
	.align 2, 0
_020CEC38: .4byte 0x021E15C0
	arm_func_end FUN_020CEC2C

	arm_func_start FUN_020CEC3C
FUN_020CEC3C: @ 0x020CEC3C
	ldr r1, _020CEC6C @ =0x04000008
	mov r0, #0x4000000
	ldrh r1, [r1]
	ldr r0, [r0]
	and r0, r0, #0x38000000
	lsr r0, r0, #0x1b
	and r1, r1, #0x1f00
	lsl r0, r0, #0x10
	asr r1, r1, #8
	add r0, r0, #0x6000000
	add r0, r0, r1, lsl #11
	bx lr
	.align 2, 0
_020CEC6C: .4byte 0x04000008
	arm_func_end FUN_020CEC3C

	arm_func_start FUN_020CEC70
FUN_020CEC70: @ 0x020CEC70
	ldr r0, _020CEC8C @ =0x04001008
	ldrh r0, [r0]
	and r0, r0, #0x1f00
	asr r0, r0, #8
	lsl r0, r0, #0xb
	add r0, r0, #0x6200000
	bx lr
	.align 2, 0
_020CEC8C: .4byte 0x04001008
	arm_func_end FUN_020CEC70

	arm_func_start FUN_020CEC90
FUN_020CEC90: @ 0x020CEC90
	ldr r1, _020CECC0 @ =0x0400000A
	mov r0, #0x4000000
	ldrh r1, [r1]
	ldr r0, [r0]
	and r0, r0, #0x38000000
	lsr r0, r0, #0x1b
	and r1, r1, #0x1f00
	lsl r0, r0, #0x10
	asr r1, r1, #8
	add r0, r0, #0x6000000
	add r0, r0, r1, lsl #11
	bx lr
	.align 2, 0
_020CECC0: .4byte 0x0400000A
	arm_func_end FUN_020CEC90

	arm_func_start FUN_020CECC4
FUN_020CECC4: @ 0x020CECC4
	ldr r0, _020CECE0 @ =0x0400100A
	ldrh r0, [r0]
	and r0, r0, #0x1f00
	asr r0, r0, #8
	lsl r0, r0, #0xb
	add r0, r0, #0x6200000
	bx lr
	.align 2, 0
_020CECE0: .4byte 0x0400100A
	arm_func_end FUN_020CECC4

	arm_func_start FUN_020CECE4
FUN_020CECE4: @ 0x020CECE4
	mov r0, #0x4000000
	ldr r1, [r0]
	ldrh r3, [r0, #0xc]
	ldr r0, [r0]
	and ip, r1, #7
	and r0, r0, #0x38000000
	lsr r1, r0, #0x1b
	and r0, r3, #0x1f00
	lsl r2, r1, #0x10
	cmp ip, #6
	lsr r1, r0, #8
	addls pc, pc, ip, lsl #2
	b _020CED60
_020CED18: @ jump table
	b _020CED34 @ case 0
	b _020CED34 @ case 1
	b _020CED34 @ case 2
	b _020CED34 @ case 3
	b _020CED34 @ case 4
	b _020CED40 @ case 5
	b _020CED58 @ case 6
_020CED34:
	add r0, r2, #0x6000000
	add r0, r0, r1, lsl #11
	bx lr
_020CED40:
	tst r3, #0x80
	lslne r0, r1, #0xe
	addne r0, r0, #0x6000000
	addeq r0, r2, #0x6000000
	addeq r0, r0, r1, lsl #11
	bx lr
_020CED58:
	mov r0, #0x6000000
	bx lr
_020CED60:
	mov r0, #0
	bx lr
	arm_func_end FUN_020CECE4

	arm_func_start FUN_020CED68
FUN_020CED68: @ 0x020CED68
	ldr r1, _020CEDD8 @ =0x04001000
	ldr r0, [r1]
	ldrh r1, [r1, #0xc]
	and r2, r0, #7
	cmp r2, #6
	and r0, r1, #0x1f00
	lsr r0, r0, #8
	addls pc, pc, r2, lsl #2
	b _020CEDD0
_020CED8C: @ jump table
	b _020CEDA8 @ case 0
	b _020CEDA8 @ case 1
	b _020CEDA8 @ case 2
	b _020CEDA8 @ case 3
	b _020CEDA8 @ case 4
	b _020CEDB4 @ case 5
	b _020CEDC8 @ case 6
_020CEDA8:
	lsl r0, r0, #0xb
	add r0, r0, #0x6200000
	bx lr
_020CEDB4:
	tst r1, #0x80
	lslne r0, r0, #0xe
	lsleq r0, r0, #0xb
	add r0, r0, #0x6200000
	bx lr
_020CEDC8:
	mov r0, #0
	bx lr
_020CEDD0:
	mov r0, #0
	bx lr
	.align 2, 0
_020CEDD8: .4byte 0x04001000
	arm_func_end FUN_020CED68

	arm_func_start FUN_020CEDDC
FUN_020CEDDC: @ 0x020CEDDC
	mov r0, #0x4000000
	ldr r1, [r0]
	ldrh r3, [r0, #0xe]
	ldr r0, [r0]
	and ip, r1, #7
	and r0, r0, #0x38000000
	lsr r1, r0, #0x1b
	and r0, r3, #0x1f00
	lsl r2, r1, #0x10
	cmp ip, #6
	lsr r1, r0, #8
	addls pc, pc, ip, lsl #2
	b _020CEE58
_020CEE10: @ jump table
	b _020CEE2C @ case 0
	b _020CEE2C @ case 1
	b _020CEE2C @ case 2
	b _020CEE38 @ case 3
	b _020CEE38 @ case 4
	b _020CEE38 @ case 5
	b _020CEE50 @ case 6
_020CEE2C:
	add r0, r2, #0x6000000
	add r0, r0, r1, lsl #11
	bx lr
_020CEE38:
	tst r3, #0x80
	lslne r0, r1, #0xe
	addne r0, r0, #0x6000000
	addeq r0, r2, #0x6000000
	addeq r0, r0, r1, lsl #11
	bx lr
_020CEE50:
	mov r0, #0
	bx lr
_020CEE58:
	mov r0, #0
	bx lr
	arm_func_end FUN_020CEDDC

	arm_func_start FUN_020CEE60
FUN_020CEE60: @ 0x020CEE60
	ldr r1, _020CEED0 @ =0x04001000
	ldr r0, [r1]
	ldrh r1, [r1, #0xe]
	and r2, r0, #7
	cmp r2, #6
	and r0, r1, #0x1f00
	lsr r0, r0, #8
	addls pc, pc, r2, lsl #2
	b _020CEEC8
_020CEE84: @ jump table
	b _020CEEA0 @ case 0
	b _020CEEA0 @ case 1
	b _020CEEA0 @ case 2
	b _020CEEAC @ case 3
	b _020CEEAC @ case 4
	b _020CEEAC @ case 5
	b _020CEEC0 @ case 6
_020CEEA0:
	lsl r0, r0, #0xb
	add r0, r0, #0x6200000
	bx lr
_020CEEAC:
	tst r1, #0x80
	lslne r0, r0, #0xe
	lsleq r0, r0, #0xb
	add r0, r0, #0x6200000
	bx lr
_020CEEC0:
	mov r0, #0
	bx lr
_020CEEC8:
	mov r0, #0
	bx lr
	.align 2, 0
_020CEED0: .4byte 0x04001000
	arm_func_end FUN_020CEE60

	arm_func_start FUN_020CEED4
FUN_020CEED4: @ 0x020CEED4
	ldr r1, _020CEF04 @ =0x04000008
	mov r0, #0x4000000
	ldrh r1, [r1]
	ldr r0, [r0]
	and r0, r0, #0x7000000
	lsr r0, r0, #0x18
	and r1, r1, #0x3c
	lsl r0, r0, #0x10
	asr r1, r1, #2
	add r0, r0, #0x6000000
	add r0, r0, r1, lsl #14
	bx lr
	.align 2, 0
_020CEF04: .4byte 0x04000008
	arm_func_end FUN_020CEED4

	arm_func_start FUN_020CEF08
FUN_020CEF08: @ 0x020CEF08
	ldr r0, _020CEF24 @ =0x04001008
	ldrh r0, [r0]
	and r0, r0, #0x3c
	asr r0, r0, #2
	lsl r0, r0, #0xe
	add r0, r0, #0x6200000
	bx lr
	.align 2, 0
_020CEF24: .4byte 0x04001008
	arm_func_end FUN_020CEF08

	arm_func_start FUN_020CEF28
FUN_020CEF28: @ 0x020CEF28
	ldr r1, _020CEF58 @ =0x0400000A
	mov r0, #0x4000000
	ldrh r1, [r1]
	ldr r0, [r0]
	and r0, r0, #0x7000000
	lsr r0, r0, #0x18
	and r1, r1, #0x3c
	lsl r0, r0, #0x10
	asr r1, r1, #2
	add r0, r0, #0x6000000
	add r0, r0, r1, lsl #14
	bx lr
	.align 2, 0
_020CEF58: .4byte 0x0400000A
	arm_func_end FUN_020CEF28

	arm_func_start FUN_020CEF5C
FUN_020CEF5C: @ 0x020CEF5C
	ldr r0, _020CEF78 @ =0x0400100A
	ldrh r0, [r0]
	and r0, r0, #0x3c
	asr r0, r0, #2
	lsl r0, r0, #0xe
	add r0, r0, #0x6200000
	bx lr
	.align 2, 0
_020CEF78: .4byte 0x0400100A
	arm_func_end FUN_020CEF5C

	arm_func_start FUN_020CEF7C
FUN_020CEF7C: @ 0x020CEF7C
	mov r1, #0x4000000
	ldr r0, [r1]
	ldrh r2, [r1, #0xc]
	and r0, r0, #7
	cmp r0, #5
	blt _020CEF9C
	tst r2, #0x80
	bne _020CEFC4
_020CEF9C:
	mov r0, #0x4000000
	ldr r1, [r0]
	and r0, r2, #0x3c
	and r1, r1, #0x7000000
	lsr r1, r1, #0x18
	lsl r1, r1, #0x10
	add r1, r1, #0x6000000
	lsr r0, r0, #2
	add r0, r1, r0, lsl #14
	bx lr
_020CEFC4:
	mov r0, #0
	bx lr
	arm_func_end FUN_020CEF7C

	arm_func_start FUN_020CEFCC
FUN_020CEFCC: @ 0x020CEFCC
	ldr r1, _020CF008 @ =0x04001000
	ldr r0, [r1]
	ldrh r1, [r1, #0xc]
	and r0, r0, #7
	cmp r0, #5
	blt _020CEFEC
	tst r1, #0x80
	bne _020CF000
_020CEFEC:
	and r0, r1, #0x3c
	lsr r0, r0, #2
	lsl r0, r0, #0xe
	add r0, r0, #0x6200000
	bx lr
_020CF000:
	mov r0, #0
	bx lr
	.align 2, 0
_020CF008: .4byte 0x04001000
	arm_func_end FUN_020CEFCC

	arm_func_start FUN_020CF00C
FUN_020CF00C: @ 0x020CF00C
	mov r1, #0x4000000
	ldr r0, [r1]
	ldrh r2, [r1, #0xe]
	and r0, r0, #7
	cmp r0, #3
	blt _020CF034
	cmp r0, #6
	bge _020CF05C
	tst r2, #0x80
	bne _020CF05C
_020CF034:
	mov r0, #0x4000000
	ldr r1, [r0]
	and r0, r2, #0x3c
	and r1, r1, #0x7000000
	lsr r1, r1, #0x18
	lsl r1, r1, #0x10
	add r1, r1, #0x6000000
	lsr r0, r0, #2
	add r0, r1, r0, lsl #14
	bx lr
_020CF05C:
	mov r0, #0
	bx lr
	arm_func_end FUN_020CF00C

	arm_func_start FUN_020CF064
FUN_020CF064: @ 0x020CF064
	ldr r1, _020CF0A8 @ =0x04001000
	ldr r0, [r1]
	ldrh r1, [r1, #0xe]
	and r0, r0, #7
	cmp r0, #3
	blt _020CF08C
	cmp r0, #6
	bge _020CF0A0
	tst r1, #0x80
	bne _020CF0A0
_020CF08C:
	and r0, r1, #0x3c
	lsr r0, r0, #2
	lsl r0, r0, #0xe
	add r0, r0, #0x6200000
	bx lr
_020CF0A0:
	mov r0, #0
	bx lr
	.align 2, 0
_020CF0A8: .4byte 0x04001000
	arm_func_end FUN_020CF064

	arm_func_start FUN_020CF0AC
FUN_020CF0AC: @ 0x020CF0AC
	push {r4, r5, r6, lr}
	ldr r4, [r1, #4]
	ldr r5, [r1]
	lsl ip, r4, #0xc
	asr r4, ip, #0x10
	lsl ip, r5, #0xc
	lsl lr, r4, #0x10
	asr r5, ip, #0x10
	lsr r4, lr, #0x10
	lsl ip, r5, #0x10
	lsl r4, r4, #0x10
	orr r4, r4, ip, lsr #16
	str r4, [r0]
	ldr r4, [r1, #0xc]
	ldr r5, [r1, #8]
	lsl ip, r4, #0xc
	asr r4, ip, #0x10
	lsl ip, r5, #0xc
	lsl lr, r4, #0x10
	asr r6, ip, #0x10
	lsr r5, lr, #0x10
	ldr r4, [sp, #0x14]
	lsl ip, r6, #0x10
	lsl r5, r5, #0x10
	orr r5, r5, ip, lsr #16
	str r5, [r0, #4]
	ldr r6, [sp, #0x10]
	ldr ip, [r1, #4]
	sub r5, r4, r3
	ldr r4, [r1, #0xc]
	mul lr, ip, r5
	mul r5, r4, r5
	ldr ip, [r1]
	sub r6, r6, r2
	ldr r4, [r1, #8]
	mla r1, ip, r6, lr
	mla r5, r4, r6, r5
	add r1, r1, r2, lsl #12
	add r2, r5, r3, lsl #12
	asr r1, r1, #4
	str r1, [r0, #8]
	asr r1, r2, #4
	str r1, [r0, #0xc]
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020CF0AC

	arm_func_start FUN_020CF15C
FUN_020CF15C: @ 0x020CF15C
	ldr ip, [sp]
	orr r1, r1, #0x40
	orr r2, r1, r2, lsl #8
	orr r1, r3, ip, lsl #8
	orr r1, r2, r1, lsl #16
	str r1, [r0]
	bx lr
	arm_func_end FUN_020CF15C

	arm_func_start FUN_020CF178
FUN_020CF178: @ 0x020CF178
	cmp r2, #0
	orrge r1, r1, #0x80
	strhge r1, [r0]
	strhge r2, [r0, #4]
	bxge lr
	orr r1, r1, #0xc0
	strh r1, [r0]
	rsb r1, r2, #0
	strh r1, [r0, #4]
	bx lr
	arm_func_end FUN_020CF178

	arm_func_start FUN_020CF1A0
FUN_020CF1A0: @ 0x020CF1A0
	ldrh r3, [r0]
	cmp r1, #0
	and r2, r3, #0xc0
	bge _020CF1CC
	cmp r2, #0x80
	biceq r2, r3, #0xc0
	orreq r2, r2, #0xc0
	strheq r2, [r0]
	rsb r1, r1, #0
	strh r1, [r0, #4]
	bx lr
_020CF1CC:
	cmp r2, #0xc0
	biceq r2, r3, #0xc0
	orreq r2, r2, #0x80
	strheq r2, [r0]
	strh r1, [r0, #4]
	bx lr
	arm_func_end FUN_020CF1A0

	arm_func_start FUN_020CF1E4
FUN_020CF1E4: @ 0x020CF1E4
	mov r3, r0
	ldr r0, [r3]
	mov r2, #0x16
	str r2, [r0]
	mov r0, r1
	ldr ip, _020CF204 @ =FUN_020D4968
	ldr r1, [r3, #4]
	bx ip
	.align 2, 0
_020CF204: .4byte FUN_020D4968
	arm_func_end FUN_020CF1E4

	arm_func_start FUN_020CF208
FUN_020CF208: @ 0x020CF208
	ldr r1, [r0]
	mov r2, #0x11
	str r2, [r1]
	ldr r1, [r0, #4]
	str r1, [r0]
	add r1, r1, #4
	str r1, [r0, #4]
	bx lr
	arm_func_end FUN_020CF208

	arm_func_start FUN_020CF228
FUN_020CF228: @ 0x020CF228
	ldr r2, [r0]
	mov r3, #0x12
	str r3, [r2]
	ldr r2, [r0, #4]
	str r1, [r2]
	ldr r1, [r0, #4]
	add r1, r1, #4
	str r1, [r0]
	add r1, r1, #4
	str r1, [r0, #4]
	bx lr
	arm_func_end FUN_020CF228

	arm_func_start FUN_020CF254
FUN_020CF254: @ 0x020CF254
	push {r4, lr}
	mov r4, r0
	bl FUN_020CF1E4
	ldr r0, [r4, #4]
	add r0, r0, #0x40
	str r0, [r4]
	add r0, r0, #4
	str r0, [r4, #4]
	pop {r4, pc}
	arm_func_end FUN_020CF254

	arm_func_start FUN_020CF278
FUN_020CF278: @ 0x020CF278
	ldr r2, [r0]
	mov r3, #0x20
	str r3, [r2]
	ldr r2, [r0, #4]
	str r1, [r2]
	ldr r1, [r0, #4]
	add r1, r1, #4
	str r1, [r0]
	add r1, r1, #4
	str r1, [r0, #4]
	bx lr
	arm_func_end FUN_020CF278

	arm_func_start FUN_020CF2A4
FUN_020CF2A4: @ 0x020CF2A4
	push {r4, lr}
	mov r4, #0x21
	ldr lr, [r0]
	rsb ip, r4, #0x420
	str r4, [lr]
	asr lr, r3, #3
	and r3, ip, r1, asr #3
	asr r2, r2, #3
	lsl r1, r2, #0x16
	orr r2, r3, r1, lsr #12
	lsl ip, lr, #0x16
	ldr r1, [r0, #4]
	orr r2, r2, ip, lsr #2
	str r2, [r1]
	ldr r1, [r0, #4]
	add r1, r1, #4
	str r1, [r0]
	add r1, r1, #4
	str r1, [r0, #4]
	pop {r4, pc}
	arm_func_end FUN_020CF2A4

	arm_func_start FUN_020CF2F4
FUN_020CF2F4: @ 0x020CF2F4
	push {r3, lr}
	ldr ip, [r0]
	lsl r2, r2, #0x10
	mov lr, #0x23
	str lr, [ip]
	lsr r2, r2, #0x10
	lsl ip, r2, #0x10
	lsl r2, r3, #0x10
	lsl r1, r1, #0x10
	ldr r3, [r0, #4]
	orr r1, ip, r1, lsr #16
	str r1, [r3]
	ldr r1, [r0, #4]
	lsr r2, r2, #0x10
	str r2, [r1, #4]
	ldr r1, [r0, #4]
	add r1, r1, #8
	str r1, [r0]
	add r1, r1, #4
	str r1, [r0, #4]
	pop {r3, pc}
	arm_func_end FUN_020CF2F4

	arm_func_start FUN_020CF348
FUN_020CF348: @ 0x020CF348
	orr r1, r1, r2, lsl #4
	ldr r2, [r0]
	mov ip, #0x29
	str ip, [r2]
	orr r1, r1, r3, lsl #6
	ldr r2, [sp, #8]
	ldr r3, [sp]
	orr r1, r2, r1
	orr r2, r1, r3, lsl #24
	ldr ip, [sp, #4]
	ldr r1, [r0, #4]
	orr r2, r2, ip, lsl #16
	str r2, [r1]
	ldr r1, [r0, #4]
	add r1, r1, #4
	str r1, [r0]
	add r1, r1, #4
	str r1, [r0, #4]
	bx lr
	arm_func_end FUN_020CF348

	arm_func_start FUN_020CF394
FUN_020CF394: @ 0x020CF394
	push {r3, lr}
	ldr ip, [r0]
	mov lr, #0x30
	cmp r3, #0
	movne r3, #1
	str lr, [ip]
	orr r2, r1, r2, lsl #16
	moveq r3, #0
	ldr r1, [r0, #4]
	orr r2, r2, r3, lsl #15
	str r2, [r1]
	ldr r1, [r0, #4]
	add r1, r1, #4
	str r1, [r0]
	add r1, r1, #4
	str r1, [r0, #4]
	pop {r3, pc}
	arm_func_end FUN_020CF394

	arm_func_start FUN_020CF3D8
FUN_020CF3D8: @ 0x020CF3D8
	push {r3, lr}
	ldr ip, [r0]
	mov lr, #0x31
	cmp r3, #0
	movne r3, #1
	str lr, [ip]
	orr r2, r1, r2, lsl #16
	moveq r3, #0
	ldr r1, [r0, #4]
	orr r2, r2, r3, lsl #15
	str r2, [r1]
	ldr r1, [r0, #4]
	add r1, r1, #4
	str r1, [r0]
	add r1, r1, #4
	str r1, [r0, #4]
	pop {r3, pc}
	arm_func_end FUN_020CF3D8

	arm_func_start FUN_020CF41C
FUN_020CF41C: @ 0x020CF41C
	push {r3, r4, r5, lr}
	ldrsh lr, [sp, #0x10]
	ldr ip, _020CF474 @ =0x000003FF
	asr r3, r3, #3
	and ip, ip, r2, asr #3
	lsl r2, r3, #0x16
	asr lr, lr, #3
	ldr r4, [r0]
	mov r5, #0x32
	str r5, [r4]
	lsl r3, lr, #0x16
	orr r2, ip, r2, lsr #12
	orr r3, r2, r3, lsr #2
	ldr r2, [r0, #4]
	orr r1, r3, r1, lsl #30
	str r1, [r2]
	ldr r1, [r0, #4]
	add r1, r1, #4
	str r1, [r0]
	add r1, r1, #4
	str r1, [r0, #4]
	pop {r3, r4, r5, pc}
	.align 2, 0
_020CF474: .4byte 0x000003FF
	arm_func_end FUN_020CF41C

	arm_func_start FUN_020CF478
FUN_020CF478: @ 0x020CF478
	ldr r3, [r0]
	mov ip, #0x33
	str ip, [r3]
	ldr r3, [r0, #4]
	orr r1, r2, r1, lsl #30
	str r1, [r3]
	ldr r1, [r0, #4]
	add r1, r1, #4
	str r1, [r0]
	add r1, r1, #4
	str r1, [r0, #4]
	bx lr
	arm_func_end FUN_020CF478

	arm_func_start FUN_020CF4A8
FUN_020CF4A8: @ 0x020CF4A8
	ldr r2, [r0]
	mov r3, #0x40
	str r3, [r2]
	ldr r2, [r0, #4]
	str r1, [r2]
	ldr r1, [r0, #4]
	add r1, r1, #4
	str r1, [r0]
	add r1, r1, #4
	str r1, [r0, #4]
	bx lr
	arm_func_end FUN_020CF4A8

	arm_func_start FUN_020CF4D4
FUN_020CF4D4: @ 0x020CF4D4
	ldr r1, [r0]
	mov r2, #0x41
	str r2, [r1]
	ldr r1, [r0, #4]
	str r1, [r0]
	add r1, r1, #4
	str r1, [r0, #4]
	bx lr
	arm_func_end FUN_020CF4D4

	arm_func_start FUN_020CF4F4
FUN_020CF4F4: @ 0x020CF4F4
	ldr r1, _020CF508 @ =0x04000400
	mov r2, #0x16
	ldr ip, _020CF50C @ =FUN_020D0E50
	str r2, [r1]
	bx ip
	.align 2, 0
_020CF508: .4byte 0x04000400
_020CF50C: .4byte FUN_020D0E50
	arm_func_end FUN_020CF4F4

	arm_func_start FUN_020CF510
FUN_020CF510: @ 0x020CF510
	ldr r1, _020CF524 @ =0x04000400
	mov r2, #0x17
	ldr ip, _020CF528 @ =FUN_020D0E2C
	str r2, [r1]
	bx ip
	.align 2, 0
_020CF524: .4byte 0x04000400
_020CF528: .4byte FUN_020D0E2C
	arm_func_end FUN_020CF510

	arm_func_start FUN_020CF52C
FUN_020CF52C: @ 0x020CF52C
	ldr r1, _020CF540 @ =0x04000400
	mov r2, #0x19
	ldr ip, _020CF544 @ =FUN_020D0E2C
	str r2, [r1]
	bx ip
	.align 2, 0
_020CF540: .4byte 0x04000400
_020CF544: .4byte FUN_020D0E2C
	arm_func_end FUN_020CF52C

	arm_func_start FUN_020CF548
FUN_020CF548: @ 0x020CF548
	ldr r1, _020CF55C @ =0x04000400
	mov r2, #0x1a
	ldr ip, _020CF560 @ =FUN_020D4928
	str r2, [r1]
	bx ip
	.align 2, 0
_020CF55C: .4byte 0x04000400
_020CF560: .4byte FUN_020D4928
	arm_func_end FUN_020CF548

	arm_func_start FUN_020CF564
FUN_020CF564: @ 0x020CF564
	push {r3, lr}
	bl FUN_020CF6DC
	ldr r1, _020CF650 @ =0x04000504
	mov r0, #0
	str r0, [r1]
_020CF578:
	ldr r0, [r1, #0xfc]
	tst r0, #0x8000000
	bne _020CF578
	ldr r0, _020CF654 @ =0x04000060
	mov r2, #0
	strh r2, [r0]
	str r2, [r1, #0xfc]
	str r2, [r0, #-0x50]
	ldrh ip, [r0]
	ldr r2, _020CF658 @ =0xFFFFCFFD
	ldr r3, _020CF65C @ =0x0000CFFB
	orr ip, ip, #0x2000
	strh ip, [r0]
	ldrh ip, [r0]
	orr ip, ip, #0x1000
	strh ip, [r0]
	ldrh ip, [r0]
	and r2, ip, r2
	strh r2, [r0]
	ldrh r2, [r0]
	bic r2, r2, #0x3000
	orr r2, r2, #0x10
	strh r2, [r0]
	ldrh r2, [r0]
	and r2, r2, r3
	strh r2, [r0]
	ldr r0, [r1, #0xfc]
	orr r0, r0, #0x8000
	str r0, [r1, #0xfc]
	ldr r0, [r1, #0xfc]
	bic r0, r0, #0xc0000000
	orr r0, r0, #0x80000000
	str r0, [r1, #0xfc]
	bl FUN_020CF704
	ldr r1, _020CF660 @ =0x04000350
	mov r2, #0
	ldr r0, _020CF664 @ =0x00007FFF
	str r2, [r1]
	strh r0, [r1, #4]
	strh r2, [r1, #6]
	str r2, [r1, #8]
	strh r2, [r1, #0xc]
	sub r1, r1, #0x348
	ldrh r0, [r1]
	bic r0, r0, #3
	strh r0, [r1]
	bl FUN_020CF938
	ldr r2, _020CF668 @ =0x001F0080
	ldr r1, _020CF66C @ =0x040004A4
	mov r0, #0
	str r2, [r1]
	str r0, [r1, #4]
	str r0, [r1, #8]
	pop {r3, pc}
	.align 2, 0
_020CF650: .4byte 0x04000504
_020CF654: .4byte 0x04000060
_020CF658: .4byte 0xFFFFCFFD
_020CF65C: .4byte 0x0000CFFB
_020CF660: .4byte 0x04000350
_020CF664: .4byte 0x00007FFF
_020CF668: .4byte 0x001F0080
_020CF66C: .4byte 0x040004A4
	arm_func_end FUN_020CF564

	arm_func_start FUN_020CF670
FUN_020CF670: @ 0x020CF670
	push {r3, lr}
	ldr r2, _020CF6CC @ =0x04000600
_020CF678:
	ldr r0, [r2]
	tst r0, #0x8000000
	bne _020CF678
	ldr r0, [r2]
	ldr r1, _020CF6D0 @ =0x04000060
	orr r0, r0, #0x8000
	str r0, [r2]
	ldrh r0, [r1]
	orr r0, r0, #0x2000
	strh r0, [r1]
	ldrh r0, [r1]
	orr r0, r0, #0x1000
	strh r0, [r1]
	bl FUN_020CF79C
	ldr r2, _020CF6D4 @ =0x001F0080
	ldr r1, _020CF6D8 @ =0x040004A4
	mov r0, #0
	str r2, [r1]
	str r0, [r1, #4]
	str r0, [r1, #8]
	pop {r3, pc}
	.align 2, 0
_020CF6CC: .4byte 0x04000600
_020CF6D0: .4byte 0x04000060
_020CF6D4: .4byte 0x001F0080
_020CF6D8: .4byte 0x040004A4
	arm_func_end FUN_020CF670

	arm_func_start FUN_020CF6DC
FUN_020CF6DC: @ 0x020CF6DC
	push {r3, lr}
	ldr r0, _020CF6FC @ =0x04000400
	bl FUN_020CFA74
	ldr r1, _020CF700 @ =0x04000600
_020CF6EC:
	ldr r0, [r1]
	tst r0, #0x8000000
	bne _020CF6EC
	pop {r3, pc}
	.align 2, 0
_020CF6FC: .4byte 0x04000400
_020CF700: .4byte 0x04000600
	arm_func_end FUN_020CF6DC

	arm_func_start FUN_020CF704
FUN_020CF704: @ 0x020CF704
	push {r4, lr}
	sub sp, sp, #8
	ldr r1, _020CF790 @ =0x04000600
	ldr r0, [r1]
	orr r0, r0, #0x8000
	str r0, [r1]
	add r4, sp, #4
_020CF720:
	mov r0, r4
	bl FUN_020CF9D8
	cmp r0, #0
	bne _020CF720
	add r4, sp, #0
_020CF734:
	mov r0, r4
	bl FUN_020CFA08
	cmp r0, #0
	bne _020CF734
	ldr r1, _020CF794 @ =0x04000440
	mov r0, #3
	str r0, [r1]
	mov r0, #0
	str r0, [r1, #0x14]
	str r0, [r1]
	ldr r0, [sp]
	mov r2, #0
	cmp r0, #0
	strne r0, [r1, #8]
	ldr r1, _020CF798 @ =0x04000454
	mov r0, #2
	str r2, [r1]
	str r0, [r1, #-0x14]
	ldr r0, [sp, #4]
	str r0, [r1, #-0xc]
	str r2, [r1]
	add sp, sp, #8
	pop {r4, pc}
	.align 2, 0
_020CF790: .4byte 0x04000600
_020CF794: .4byte 0x04000440
_020CF798: .4byte 0x04000454
	arm_func_end FUN_020CF704

	arm_func_start FUN_020CF79C
FUN_020CF79C: @ 0x020CF79C
	push {r4, lr}
	sub sp, sp, #8
	ldr r1, _020CF824 @ =0x04000600
	ldr r0, [r1]
	orr r0, r0, #0x8000
	str r0, [r1]
	add r4, sp, #4
_020CF7B8:
	mov r0, r4
	bl FUN_020CF9D8
	cmp r0, #0
	bne _020CF7B8
	add r4, sp, #0
_020CF7CC:
	mov r0, r4
	bl FUN_020CFA08
	cmp r0, #0
	bne _020CF7CC
	ldr r1, _020CF828 @ =0x04000440
	mov r0, #3
	str r0, [r1]
	mov r0, #0
	str r0, [r1, #0x14]
	str r0, [r1]
	ldr r0, [sp]
	ldr r2, _020CF828 @ =0x04000440
	cmp r0, #0
	strne r0, [r1, #8]
	mov r0, #2
	str r0, [r2]
	ldr r1, [sp, #4]
	mov r0, #0
	str r1, [r2, #8]
	str r0, [r2, #0x14]
	add sp, sp, #8
	pop {r4, pc}
	.align 2, 0
_020CF824: .4byte 0x04000600
_020CF828: .4byte 0x04000440
	arm_func_end FUN_020CF79C

	arm_func_start FUN_020CF82C
FUN_020CF82C: @ 0x020CF82C
	cmp r0, #0
	beq _020CF860
	ldr ip, _020CF878 @ =0x0400035C
	lsl r0, r1, #6
	strh r3, [ip]
	sub r3, ip, #0x2fc
	ldrh r1, [r3]
	orr r0, r0, r2, lsl #8
	orr r0, r0, #0x80
	bic r1, r1, #0x3f40
	orr r0, r1, r0
	strh r0, [r3]
	bx lr
_020CF860:
	ldr r2, _020CF87C @ =0x04000060
	ldr r0, _020CF880 @ =0x0000CF7F
	ldrh r1, [r2]
	and r0, r1, r0
	strh r0, [r2]
	bx lr
	.align 2, 0
_020CF878: .4byte 0x0400035C
_020CF87C: .4byte 0x04000060
_020CF880: .4byte 0x0000CF7F
	arm_func_end FUN_020CF82C

	arm_func_start FUN_020CF884
FUN_020CF884: @ 0x020CF884
	push {r3, lr}
	ldr r2, _020CF8B0 @ =0x04000600
	mov r1, r0
	ldr r0, [r2]
	tst r0, #0x8000000
	mvnne r0, #0
	popne {r3, pc}
	add r0, r2, #0x40
	bl FUN_020D4968
	mov r0, #0
	pop {r3, pc}
	.align 2, 0
_020CF8B0: .4byte 0x04000600
	arm_func_end FUN_020CF884

	arm_func_start FUN_020CF8B4
FUN_020CF8B4: @ 0x020CF8B4
	push {r3, lr}
	ldr r2, _020CF8E0 @ =0x04000600
	mov r1, r0
	ldr r0, [r2]
	tst r0, #0x8000000
	mvnne r0, #0
	popne {r3, pc}
	add r0, r2, #0x80
	bl FUN_020D4928
	mov r0, #0
	pop {r3, pc}
	.align 2, 0
_020CF8E0: .4byte 0x04000600
	arm_func_end FUN_020CF8B4

	arm_func_start FUN_020CF8E4
FUN_020CF8E4: @ 0x020CF8E4
	ldr ip, _020CF8F4 @ =FUN_020D47B8
	ldr r1, _020CF8F8 @ =0x04000330
	mov r2, #0x10
	bx ip
	.align 2, 0
_020CF8F4: .4byte FUN_020D47B8
_020CF8F8: .4byte 0x04000330
	arm_func_end FUN_020CF8E4

	arm_func_start FUN_020CF8FC
FUN_020CF8FC: @ 0x020CF8FC
	ldr ip, _020CF908 @ =FUN_020D490C
	ldr r1, _020CF90C @ =0x04000360
	bx ip
	.align 2, 0
_020CF908: .4byte FUN_020D490C
_020CF90C: .4byte 0x04000360
	arm_func_end FUN_020CF8FC

	arm_func_start FUN_020CF910
FUN_020CF910: @ 0x020CF910
	ldr ip, [sp]
	orr r0, r0, r1, lsl #16
	orr r1, r0, r3, lsl #24
	cmp ip, #0
	ldr r0, _020CF934 @ =0x04000350
	orrne r1, r1, #0x8000
	str r1, [r0]
	strh r2, [r0, #4]
	bx lr
	.align 2, 0
_020CF934: .4byte 0x04000350
	arm_func_end FUN_020CF910

	arm_func_start FUN_020CF938
FUN_020CF938: @ 0x020CF938
	push {r3, lr}
	sub sp, sp, #8
	ldr r0, _020CF9C8 @ =_02110C80
	mvn r1, #0
	ldr r0, [r0]
	cmp r0, r1
	ldr r1, _020CF9CC @ =0x04000330
	beq _020CF988
	mov r2, #0
	str r2, [sp]
	mov r3, #0x10
	str r2, [sp, #4]
	bl FUN_020D40D0
	ldr r0, _020CF9C8 @ =_02110C80
	ldr r1, _020CF9D0 @ =0x04000360
	ldr r0, [r0]
	mov r2, #0
	mov r3, #0x60
	bl FUN_020D3F74
	b _020CF9A4
_020CF988:
	mov r0, #0
	mov r2, #0x10
	bl FUN_020D47EC
	ldr r1, _020CF9D0 @ =0x04000360
	mov r0, #0
	mov r2, #0x60
	bl FUN_020D47EC
_020CF9A4:
	mov r2, #0
	ldr r0, _020CF9D4 @ =0x040004D0
	mov r1, r2
_020CF9B0:
	add r2, r2, #1
	str r1, [r0]
	cmp r2, #0x20
	blt _020CF9B0
	add sp, sp, #8
	pop {r3, pc}
	.align 2, 0
_020CF9C8: .4byte _02110C80
_020CF9CC: .4byte 0x04000330
_020CF9D0: .4byte 0x04000360
_020CF9D4: .4byte 0x040004D0
	arm_func_end FUN_020CF938

	arm_func_start FUN_020CF9D8
FUN_020CF9D8: @ 0x020CF9D8
	ldr r2, _020CFA04 @ =0x04000600
	ldr r1, [r2]
	tst r1, #0x4000
	mvnne r0, #0
	bxne lr
	ldr r1, [r2]
	and r1, r1, #0x1f00
	lsr r1, r1, #8
	str r1, [r0]
	mov r0, #0
	bx lr
	.align 2, 0
_020CFA04: .4byte 0x04000600
	arm_func_end FUN_020CF9D8

	arm_func_start FUN_020CFA08
FUN_020CFA08: @ 0x020CFA08
	ldr r2, _020CFA34 @ =0x04000600
	ldr r1, [r2]
	tst r1, #0x4000
	mvnne r0, #0
	bxne lr
	ldr r1, [r2]
	and r1, r1, #0x2000
	lsr r1, r1, #0xd
	str r1, [r0]
	mov r0, #0
	bx lr
	.align 2, 0
_020CFA34: .4byte 0x04000600
	arm_func_end FUN_020CFA08

	arm_func_start FUN_020CFA38
FUN_020CFA38: @ 0x020CFA38
	ldr r2, _020CFA60 @ =0x04000600
	ldr r1, [r2]
	tst r1, #1
	mvnne r0, #0
	bxne lr
	ldr r1, [r2]
	and r1, r1, #2
	str r1, [r0]
	mov r0, #0
	bx lr
	.align 2, 0
_020CFA60: .4byte 0x04000600
	arm_func_end FUN_020CFA38

	arm_func_start FUN_020CFA64
FUN_020CFA64: @ 0x020CFA64
	ldr r1, _020CFA70 @ =0x04000010
	str r0, [r1]
	bx lr
	.align 2, 0
_020CFA70: .4byte 0x04000010
	arm_func_end FUN_020CFA64

	arm_func_start FUN_020CFA74
FUN_020CFA74: @ 0x020CFA74
	mov r1, #0
	mov r2, #0
	mov r3, #0
	mov ip, #0
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	bx lr
	arm_func_end FUN_020CFA74

	arm_func_start FUN_020CFB08
FUN_020CFB08: @ 0x020CFB08
	push {r4, lr}
	sub sp, sp, #0x50
	ldr ip, [sp, #0x58]
	ldr lr, [sp, #0x5c]
	str ip, [sp]
	ldr r4, [sp, #0x68]
	ldr ip, [sp, #0x60]
	str lr, [sp, #4]
	cmp r4, #0
	addeq r4, sp, #0x10
	str ip, [sp, #8]
	str r4, [sp, #0xc]
	bl FUN_020CC998
	ldr r0, [sp, #0x64]
	cmp r0, #0
	addeq sp, sp, #0x50
	popeq {r4, pc}
	ldr r1, _020CFB68 @ =0x04000440
	mov r2, #0
	mov r0, r4
	str r2, [r1]
	bl FUN_020CF4F4
	add sp, sp, #0x50
	pop {r4, pc}
	.align 2, 0
_020CFB68: .4byte 0x04000440
	arm_func_end FUN_020CFB08

	arm_func_start FUN_020CFB6C
FUN_020CFB6C: @ 0x020CFB6C
	push {r3, r4, r5, lr}
	sub sp, sp, #0x30
	ldr r4, [sp, #0x40]
	mov r5, r3
	cmp r4, #0
	addeq r4, sp, #0
	mov r3, r4
	bl FUN_020CBF3C
	cmp r5, #0
	addeq sp, sp, #0x30
	popeq {r3, r4, r5, pc}
	ldr r1, _020CFBB4 @ =0x04000440
	mov r2, #2
	mov r0, r4
	str r2, [r1]
	bl FUN_020CF510
	add sp, sp, #0x30
	pop {r3, r4, r5, pc}
	.align 2, 0
_020CFBB4: .4byte 0x04000440
	arm_func_end FUN_020CFB6C

	arm_func_start FUN_020CFBB8
FUN_020CFBB8: @ 0x020CFBB8
	ldr r3, _020CFBF0 @ =0x04000468
	mov r2, #0x1000
	str r2, [r3]
	mov r2, #0
	str r2, [r3]
	str r2, [r3]
	str r2, [r3]
	str r1, [r3]
	str r0, [r3]
	str r2, [r3]
	rsb r0, r0, #0
	str r0, [r3]
	str r1, [r3]
	bx lr
	.align 2, 0
_020CFBF0: .4byte 0x04000468
	arm_func_end FUN_020CFBB8

	arm_func_start FUN_020CFBF4
FUN_020CFBF4: @ 0x020CFBF4
	ldr ip, _020CFC2C @ =0x04000468
	mov r3, #0
	str r1, [ip]
	str r3, [ip]
	rsb r2, r0, #0
	str r2, [ip]
	str r3, [ip]
	mov r2, #0x1000
	str r2, [ip]
	str r3, [ip]
	str r0, [ip]
	str r3, [ip]
	str r1, [ip]
	bx lr
	.align 2, 0
_020CFC2C: .4byte 0x04000468
	arm_func_end FUN_020CFBF4

	arm_func_start FUN_020CFC30
FUN_020CFC30: @ 0x020CFC30
	ldr r3, _020CFC68 @ =0x04000468
	mov r2, #0
	str r1, [r3]
	str r0, [r3]
	str r2, [r3]
	rsb r0, r0, #0
	str r0, [r3]
	str r1, [r3]
	str r2, [r3]
	str r2, [r3]
	str r2, [r3]
	mov r0, #0x1000
	str r0, [r3]
	bx lr
	.align 2, 0
_020CFC68: .4byte 0x04000468
	arm_func_end FUN_020CFC30

	arm_func_start FUN_020CFC6C
FUN_020CFC6C: @ 0x020CFC6C
	push {r4, lr}
	ldr r3, _020CFCBC @ =_02110C80
	mov r4, r0
	ldr r0, [r3]
	mvn ip, #0
	mov lr, r1
	mov r3, r2
	cmp r0, ip
	beq _020CFCA8
	cmp r3, #0x1c
	bls _020CFCA8
	mov r1, r4
	add r2, lr, #0x5000000
	bl FUN_020D4064
	pop {r4, pc}
_020CFCA8:
	mov r0, r4
	mov r2, r3
	add r1, lr, #0x5000000
	bl FUN_020D47B8
	pop {r4, pc}
	.align 2, 0
_020CFCBC: .4byte _02110C80
	arm_func_end FUN_020CFC6C

	arm_func_start FUN_020CFCC0
FUN_020CFCC0: @ 0x020CFCC0
	push {r3, lr}
	ldr r3, _020CFD14 @ =_02110C80
	mov lr, r0
	ldr r0, [r3]
	mvn ip, #0
	mov r3, r2
	cmp r0, ip
	beq _020CFCFC
	cmp r3, #0x1c
	bls _020CFCFC
	add r2, r1, #0x400
	mov r1, lr
	add r2, r2, #0x5000000
	bl FUN_020D4064
	pop {r3, pc}
_020CFCFC:
	add r1, r1, #0x400
	mov r0, lr
	mov r2, r3
	add r1, r1, #0x5000000
	bl FUN_020D47B8
	pop {r3, pc}
	.align 2, 0
_020CFD14: .4byte _02110C80
	arm_func_end FUN_020CFCC0

	arm_func_start FUN_020CFD18
FUN_020CFD18: @ 0x020CFD18
	push {r3, lr}
	ldr r3, _020CFD6C @ =_02110C80
	mov lr, r0
	ldr r0, [r3]
	mvn ip, #0
	mov r3, r2
	cmp r0, ip
	beq _020CFD54
	cmp r3, #0x1c
	bls _020CFD54
	add r2, r1, #0x200
	mov r1, lr
	add r2, r2, #0x5000000
	bl FUN_020D4064
	pop {r3, pc}
_020CFD54:
	add r1, r1, #0x200
	mov r0, lr
	mov r2, r3
	add r1, r1, #0x5000000
	bl FUN_020D47B8
	pop {r3, pc}
	.align 2, 0
_020CFD6C: .4byte _02110C80
	arm_func_end FUN_020CFD18

	arm_func_start FUN_020CFD70
FUN_020CFD70: @ 0x020CFD70
	push {r3, lr}
	ldr r3, _020CFDC4 @ =_02110C80
	mov lr, r0
	ldr r0, [r3]
	mvn ip, #0
	mov r3, r2
	cmp r0, ip
	beq _020CFDAC
	cmp r3, #0x1c
	bls _020CFDAC
	add r2, r1, #0x600
	mov r1, lr
	add r2, r2, #0x5000000
	bl FUN_020D4064
	pop {r3, pc}
_020CFDAC:
	add r1, r1, #0x600
	mov r0, lr
	mov r2, r3
	add r1, r1, #0x5000000
	bl FUN_020D47B8
	pop {r3, pc}
	.align 2, 0
_020CFDC4: .4byte _02110C80
	arm_func_end FUN_020CFD70

	arm_func_start FUN_020CFDC8
FUN_020CFDC8: @ 0x020CFDC8
	push {r4, lr}
	ldr r3, _020CFE18 @ =_02110C80
	mov r4, r0
	ldr r0, [r3]
	mvn ip, #0
	mov lr, r1
	mov r3, r2
	cmp r0, ip
	beq _020CFE04
	cmp r3, #0x30
	bls _020CFE04
	mov r1, r4
	add r2, lr, #0x7000000
	bl FUN_020D3FF4
	pop {r4, pc}
_020CFE04:
	mov r0, r4
	mov r2, r3
	add r1, lr, #0x7000000
	bl FUN_020D4808
	pop {r4, pc}
	.align 2, 0
_020CFE18: .4byte _02110C80
	arm_func_end FUN_020CFDC8

	arm_func_start FUN_020CFE1C
FUN_020CFE1C: @ 0x020CFE1C
	push {r3, lr}
	ldr r3, _020CFE70 @ =_02110C80
	mov lr, r0
	ldr r0, [r3]
	mvn ip, #0
	mov r3, r2
	cmp r0, ip
	beq _020CFE58
	cmp r3, #0x30
	bls _020CFE58
	add r2, r1, #0x400
	mov r1, lr
	add r2, r2, #0x7000000
	bl FUN_020D3FF4
	pop {r3, pc}
_020CFE58:
	add r1, r1, #0x400
	mov r0, lr
	mov r2, r3
	add r1, r1, #0x7000000
	bl FUN_020D4808
	pop {r3, pc}
	.align 2, 0
_020CFE70: .4byte _02110C80
	arm_func_end FUN_020CFE1C

	arm_func_start FUN_020CFE74
FUN_020CFE74: @ 0x020CFE74
	push {r4, lr}
	ldr r3, _020CFEC8 @ =_02110C80
	mov r4, r0
	ldr r0, [r3]
	mvn ip, #0
	mov lr, r1
	mov r3, r2
	cmp r0, ip
	mov ip, #0x6400000
	beq _020CFEB4
	cmp r3, #0x30
	bls _020CFEB4
	mov r1, r4
	add r2, ip, lr
	bl FUN_020D3FF4
	pop {r4, pc}
_020CFEB4:
	mov r0, r4
	mov r2, r3
	add r1, ip, lr
	bl FUN_020D4808
	pop {r4, pc}
	.align 2, 0
_020CFEC8: .4byte _02110C80
	arm_func_end FUN_020CFE74

	arm_func_start FUN_020CFECC
FUN_020CFECC: @ 0x020CFECC
	push {r4, lr}
	ldr r3, _020CFF20 @ =_02110C80
	mov r4, r0
	ldr r0, [r3]
	mvn ip, #0
	mov lr, r1
	mov r3, r2
	cmp r0, ip
	mov ip, #0x6600000
	beq _020CFF0C
	cmp r3, #0x30
	bls _020CFF0C
	mov r1, r4
	add r2, ip, lr
	bl FUN_020D3FF4
	pop {r4, pc}
_020CFF0C:
	mov r0, r4
	mov r2, r3
	add r1, ip, lr
	bl FUN_020D4808
	pop {r4, pc}
	.align 2, 0
_020CFF20: .4byte _02110C80
	arm_func_end FUN_020CFECC

	arm_func_start FUN_020CFF24
FUN_020CFF24: @ 0x020CFF24
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_020CEC3C
	ldr r1, _020CFF80 @ =_02110C80
	mov ip, r0
	ldr r0, [r1]
	mvn r1, #0
	cmp r0, r1
	beq _020CFF6C
	cmp r4, #0x1c
	bls _020CFF6C
	mov r1, r6
	mov r3, r4
	add r2, ip, r5
	bl FUN_020D4064
	pop {r4, r5, r6, pc}
_020CFF6C:
	mov r0, r6
	mov r2, r4
	add r1, ip, r5
	bl FUN_020D47B8
	pop {r4, r5, r6, pc}
	.align 2, 0
_020CFF80: .4byte _02110C80
	arm_func_end FUN_020CFF24

	arm_func_start FUN_020CFF84
FUN_020CFF84: @ 0x020CFF84
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_020CEC70
	ldr r1, _020CFFE0 @ =_02110C80
	mov ip, r0
	ldr r0, [r1]
	mvn r1, #0
	cmp r0, r1
	beq _020CFFCC
	cmp r4, #0x1c
	bls _020CFFCC
	mov r1, r6
	mov r3, r4
	add r2, ip, r5
	bl FUN_020D4064
	pop {r4, r5, r6, pc}
_020CFFCC:
	mov r0, r6
	mov r2, r4
	add r1, ip, r5
	bl FUN_020D47B8
	pop {r4, r5, r6, pc}
	.align 2, 0
_020CFFE0: .4byte _02110C80
	arm_func_end FUN_020CFF84

	arm_func_start FUN_020CFFE4
FUN_020CFFE4: @ 0x020CFFE4
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_020CEC90
	ldr r1, _020D0040 @ =_02110C80
	mov ip, r0
	ldr r0, [r1]
	mvn r1, #0
	cmp r0, r1
	beq _020D002C
	cmp r4, #0x1c
	bls _020D002C
	mov r1, r6
	mov r3, r4
	add r2, ip, r5
	bl FUN_020D4064
	pop {r4, r5, r6, pc}
_020D002C:
	mov r0, r6
	mov r2, r4
	add r1, ip, r5
	bl FUN_020D47B8
	pop {r4, r5, r6, pc}
	.align 2, 0
_020D0040: .4byte _02110C80
	arm_func_end FUN_020CFFE4

	arm_func_start FUN_020D0044
FUN_020D0044: @ 0x020D0044
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_020CECC4
	ldr r1, _020D00A0 @ =_02110C80
	mov ip, r0
	ldr r0, [r1]
	mvn r1, #0
	cmp r0, r1
	beq _020D008C
	cmp r4, #0x1c
	bls _020D008C
	mov r1, r6
	mov r3, r4
	add r2, ip, r5
	bl FUN_020D4064
	pop {r4, r5, r6, pc}
_020D008C:
	mov r0, r6
	mov r2, r4
	add r1, ip, r5
	bl FUN_020D47B8
	pop {r4, r5, r6, pc}
	.align 2, 0
_020D00A0: .4byte _02110C80
	arm_func_end FUN_020D0044

	arm_func_start FUN_020D00A4
FUN_020D00A4: @ 0x020D00A4
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_020CECE4
	ldr r1, _020D0100 @ =_02110C80
	mov ip, r0
	ldr r0, [r1]
	mvn r1, #0
	cmp r0, r1
	beq _020D00EC
	cmp r4, #0x1c
	bls _020D00EC
	mov r1, r6
	mov r3, r4
	add r2, ip, r5
	bl FUN_020D4064
	pop {r4, r5, r6, pc}
_020D00EC:
	mov r0, r6
	mov r2, r4
	add r1, ip, r5
	bl FUN_020D47B8
	pop {r4, r5, r6, pc}
	.align 2, 0
_020D0100: .4byte _02110C80
	arm_func_end FUN_020D00A4

	arm_func_start FUN_020D0104
FUN_020D0104: @ 0x020D0104
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_020CED68
	ldr r1, _020D0160 @ =_02110C80
	mov ip, r0
	ldr r0, [r1]
	mvn r1, #0
	cmp r0, r1
	beq _020D014C
	cmp r4, #0x1c
	bls _020D014C
	mov r1, r6
	mov r3, r4
	add r2, ip, r5
	bl FUN_020D4064
	pop {r4, r5, r6, pc}
_020D014C:
	mov r0, r6
	mov r2, r4
	add r1, ip, r5
	bl FUN_020D47B8
	pop {r4, r5, r6, pc}
	.align 2, 0
_020D0160: .4byte _02110C80
	arm_func_end FUN_020D0104

	arm_func_start FUN_020D0164
FUN_020D0164: @ 0x020D0164
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_020CEDDC
	ldr r1, _020D01C0 @ =_02110C80
	mov ip, r0
	ldr r0, [r1]
	mvn r1, #0
	cmp r0, r1
	beq _020D01AC
	cmp r4, #0x1c
	bls _020D01AC
	mov r1, r6
	mov r3, r4
	add r2, ip, r5
	bl FUN_020D4064
	pop {r4, r5, r6, pc}
_020D01AC:
	mov r0, r6
	mov r2, r4
	add r1, ip, r5
	bl FUN_020D47B8
	pop {r4, r5, r6, pc}
	.align 2, 0
_020D01C0: .4byte _02110C80
	arm_func_end FUN_020D0164

	arm_func_start FUN_020D01C4
FUN_020D01C4: @ 0x020D01C4
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_020CEE60
	ldr r1, _020D0220 @ =_02110C80
	mov ip, r0
	ldr r0, [r1]
	mvn r1, #0
	cmp r0, r1
	beq _020D020C
	cmp r4, #0x1c
	bls _020D020C
	mov r1, r6
	mov r3, r4
	add r2, ip, r5
	bl FUN_020D4064
	pop {r4, r5, r6, pc}
_020D020C:
	mov r0, r6
	mov r2, r4
	add r1, ip, r5
	bl FUN_020D47B8
	pop {r4, r5, r6, pc}
	.align 2, 0
_020D0220: .4byte _02110C80
	arm_func_end FUN_020D01C4

	arm_func_start FUN_020D0224
FUN_020D0224: @ 0x020D0224
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_020CEED4
	ldr r1, _020D0280 @ =_02110C80
	mov ip, r0
	ldr r0, [r1]
	mvn r1, #0
	cmp r0, r1
	beq _020D026C
	cmp r4, #0x30
	bls _020D026C
	mov r1, r6
	mov r3, r4
	add r2, ip, r5
	bl FUN_020D3FF4
	pop {r4, r5, r6, pc}
_020D026C:
	mov r0, r6
	mov r2, r4
	add r1, ip, r5
	bl FUN_020D4808
	pop {r4, r5, r6, pc}
	.align 2, 0
_020D0280: .4byte _02110C80
	arm_func_end FUN_020D0224

	arm_func_start FUN_020D0284
FUN_020D0284: @ 0x020D0284
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_020CEF08
	ldr r1, _020D02E0 @ =_02110C80
	mov ip, r0
	ldr r0, [r1]
	mvn r1, #0
	cmp r0, r1
	beq _020D02CC
	cmp r4, #0x30
	bls _020D02CC
	mov r1, r6
	mov r3, r4
	add r2, ip, r5
	bl FUN_020D3FF4
	pop {r4, r5, r6, pc}
_020D02CC:
	mov r0, r6
	mov r2, r4
	add r1, ip, r5
	bl FUN_020D4808
	pop {r4, r5, r6, pc}
	.align 2, 0
_020D02E0: .4byte _02110C80
	arm_func_end FUN_020D0284

	arm_func_start FUN_020D02E4
FUN_020D02E4: @ 0x020D02E4
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_020CEF28
	ldr r1, _020D0340 @ =_02110C80
	mov ip, r0
	ldr r0, [r1]
	mvn r1, #0
	cmp r0, r1
	beq _020D032C
	cmp r4, #0x30
	bls _020D032C
	mov r1, r6
	mov r3, r4
	add r2, ip, r5
	bl FUN_020D3FF4
	pop {r4, r5, r6, pc}
_020D032C:
	mov r0, r6
	mov r2, r4
	add r1, ip, r5
	bl FUN_020D4808
	pop {r4, r5, r6, pc}
	.align 2, 0
_020D0340: .4byte _02110C80
	arm_func_end FUN_020D02E4

	arm_func_start FUN_020D0344
FUN_020D0344: @ 0x020D0344
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_020CEF5C
	ldr r1, _020D03A0 @ =_02110C80
	mov ip, r0
	ldr r0, [r1]
	mvn r1, #0
	cmp r0, r1
	beq _020D038C
	cmp r4, #0x30
	bls _020D038C
	mov r1, r6
	mov r3, r4
	add r2, ip, r5
	bl FUN_020D3FF4
	pop {r4, r5, r6, pc}
_020D038C:
	mov r0, r6
	mov r2, r4
	add r1, ip, r5
	bl FUN_020D4808
	pop {r4, r5, r6, pc}
	.align 2, 0
_020D03A0: .4byte _02110C80
	arm_func_end FUN_020D0344

	arm_func_start FUN_020D03A4
FUN_020D03A4: @ 0x020D03A4
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_020CEF7C
	ldr r1, _020D0400 @ =_02110C80
	mov ip, r0
	ldr r0, [r1]
	mvn r1, #0
	cmp r0, r1
	beq _020D03EC
	cmp r4, #0x30
	bls _020D03EC
	mov r1, r6
	mov r3, r4
	add r2, ip, r5
	bl FUN_020D3FF4
	pop {r4, r5, r6, pc}
_020D03EC:
	mov r0, r6
	mov r2, r4
	add r1, ip, r5
	bl FUN_020D4808
	pop {r4, r5, r6, pc}
	.align 2, 0
_020D0400: .4byte _02110C80
	arm_func_end FUN_020D03A4

	arm_func_start FUN_020D0404
FUN_020D0404: @ 0x020D0404
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_020CEFCC
	ldr r1, _020D0460 @ =_02110C80
	mov ip, r0
	ldr r0, [r1]
	mvn r1, #0
	cmp r0, r1
	beq _020D044C
	cmp r4, #0x30
	bls _020D044C
	mov r1, r6
	mov r3, r4
	add r2, ip, r5
	bl FUN_020D3FF4
	pop {r4, r5, r6, pc}
_020D044C:
	mov r0, r6
	mov r2, r4
	add r1, ip, r5
	bl FUN_020D4808
	pop {r4, r5, r6, pc}
	.align 2, 0
_020D0460: .4byte _02110C80
	arm_func_end FUN_020D0404

	arm_func_start FUN_020D0464
FUN_020D0464: @ 0x020D0464
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_020CF00C
	ldr r1, _020D04C0 @ =_02110C80
	mov ip, r0
	ldr r0, [r1]
	mvn r1, #0
	cmp r0, r1
	beq _020D04AC
	cmp r4, #0x30
	bls _020D04AC
	mov r1, r6
	mov r3, r4
	add r2, ip, r5
	bl FUN_020D3FF4
	pop {r4, r5, r6, pc}
_020D04AC:
	mov r0, r6
	mov r2, r4
	add r1, ip, r5
	bl FUN_020D4808
	pop {r4, r5, r6, pc}
	.align 2, 0
_020D04C0: .4byte _02110C80
	arm_func_end FUN_020D0464

	arm_func_start FUN_020D04C4
FUN_020D04C4: @ 0x020D04C4
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_020CF064
	ldr r1, _020D0520 @ =_02110C80
	mov ip, r0
	ldr r0, [r1]
	mvn r1, #0
	cmp r0, r1
	beq _020D050C
	cmp r4, #0x30
	bls _020D050C
	mov r1, r6
	mov r3, r4
	add r2, ip, r5
	bl FUN_020D3FF4
	pop {r4, r5, r6, pc}
_020D050C:
	mov r0, r6
	mov r2, r4
	add r1, ip, r5
	bl FUN_020D4808
	pop {r4, r5, r6, pc}
	.align 2, 0
_020D0520: .4byte _02110C80
	arm_func_end FUN_020D04C4

	arm_func_start FUN_020D0524
FUN_020D0524: @ 0x020D0524
	push {r3, lr}
	bl FUN_020CE8C4
	ldr r1, _020D05B4 @ =0x021E15DC
	cmp r0, #0x20
	str r0, [r1, #0x14]
	bgt _020D0558
	cmp r0, #0x20
	bge _020D059C
	cmp r0, #0
	pople {r3, pc}
	cmp r0, #0x10
	beq _020D0574
	pop {r3, pc}
_020D0558:
	cmp r0, #0x40
	bgt _020D0568
	beq _020D0588
	pop {r3, pc}
_020D0568:
	cmp r0, #0x60
	beq _020D059C
	pop {r3, pc}
_020D0574:
	ldr r2, _020D05B8 @ =0x06880000
	mov r0, #0
	str r2, [r1, #0x10]
	str r0, [r1, #0xc]
	pop {r3, pc}
_020D0588:
	ldr r2, _020D05BC @ =0x06894000
	mov r0, #0x4000
	str r2, [r1, #0x10]
	str r0, [r1, #0xc]
	pop {r3, pc}
_020D059C:
	ldr r2, _020D05C0 @ =0x06890000
	ldr r0, _020D05B4 @ =0x021E15DC
	mov r1, #0
	str r2, [r0, #0x10]
	str r1, [r0, #0xc]
	pop {r3, pc}
	.align 2, 0
_020D05B4: .4byte 0x021E15DC
_020D05B8: .4byte 0x06880000
_020D05BC: .4byte 0x06894000
_020D05C0: .4byte 0x06890000
	arm_func_end FUN_020D0524

	arm_func_start FUN_020D05C4
FUN_020D05C4: @ 0x020D05C4
	push {r3, r4, r5, lr}
	sub sp, sp, #8
	ldr ip, _020D062C @ =0x021E15DC
	ldr r3, _020D0630 @ =_02110C80
	ldr lr, [ip, #0x10]
	ldr r4, [ip, #0xc]
	add r5, lr, r1
	ldr lr, [r3]
	mvn ip, #0
	mov r1, r0
	mov r3, r2
	cmp lr, ip
	sub r4, r5, r4
	beq _020D061C
	mov ip, #0
	str ip, [sp]
	mov r0, lr
	mov r2, r4
	str ip, [sp, #4]
	bl FUN_020D4194
	add sp, sp, #8
	pop {r3, r4, r5, pc}
_020D061C:
	mov r1, r4
	bl FUN_020D4808
	add sp, sp, #8
	pop {r3, r4, r5, pc}
	.align 2, 0
_020D062C: .4byte 0x021E15DC
_020D0630: .4byte _02110C80
	arm_func_end FUN_020D05C4

	arm_func_start FUN_020D0634
FUN_020D0634: @ 0x020D0634
	push {r3, lr}
	ldr r0, _020D0674 @ =_02110C80
	mvn r1, #0
	ldr r0, [r0]
	cmp r0, r1
	beq _020D0650
	bl FUN_020D422C
_020D0650:
	ldr r0, _020D0678 @ =0x021E15DC
	ldr r0, [r0, #0x14]
	bl FUN_020CDFE4
	ldr r0, _020D0678 @ =0x021E15DC
	mov r1, #0
	str r1, [r0, #0x14]
	str r1, [r0, #0x10]
	str r1, [r0, #0xc]
	pop {r3, pc}
	.align 2, 0
_020D0674: .4byte _02110C80
_020D0678: .4byte 0x021E15DC
	arm_func_end FUN_020D0634

	arm_func_start FUN_020D067C
FUN_020D067C: @ 0x020D067C
	push {r3, lr}
	bl FUN_020CE8E8
	ldr r1, _020D06B8 @ =0x021E15DC
	cmp r0, #0
	str r0, [r1, #8]
	popeq {r3, pc}
	cmp r0, #0x20
	beq _020D06AC
	cmp r0, #0x40
	ldreq r0, _020D06BC @ =0x06894000
	streq r0, [r1, #4]
	pop {r3, pc}
_020D06AC:
	ldr r0, _020D06C0 @ =0x06890000
	str r0, [r1, #4]
	pop {r3, pc}
	.align 2, 0
_020D06B8: .4byte 0x021E15DC
_020D06BC: .4byte 0x06894000
_020D06C0: .4byte 0x06890000
	arm_func_end FUN_020D067C

	arm_func_start FUN_020D06C4
FUN_020D06C4: @ 0x020D06C4
	push {r4, r5, r6, lr}
	sub sp, sp, #8
	ldr r3, _020D0728 @ =_02110C80
	ldr lr, _020D072C @ =0x021E15DC
	ldr r4, [r3]
	mvn ip, #0
	mov r6, r0
	mov r5, r1
	mov r3, r2
	cmp r4, ip
	ldr lr, [lr, #4]
	beq _020D0718
	mov ip, #0
	str ip, [sp]
	mov r0, r4
	mov r1, r6
	add r2, lr, r5
	str ip, [sp, #4]
	bl FUN_020D4194
	add sp, sp, #8
	pop {r4, r5, r6, pc}
_020D0718:
	add r1, lr, r5
	bl FUN_020D4808
	add sp, sp, #8
	pop {r4, r5, r6, pc}
	.align 2, 0
_020D0728: .4byte _02110C80
_020D072C: .4byte 0x021E15DC
	arm_func_end FUN_020D06C4

	arm_func_start FUN_020D0730
FUN_020D0730: @ 0x020D0730
	push {r3, lr}
	ldr r0, _020D076C @ =_02110C80
	mvn r1, #0
	ldr r0, [r0]
	cmp r0, r1
	beq _020D074C
	bl FUN_020D422C
_020D074C:
	ldr r0, _020D0770 @ =0x021E15DC
	ldr r0, [r0, #8]
	bl FUN_020CE0E4
	ldr r0, _020D0770 @ =0x021E15DC
	mov r1, #0
	str r1, [r0, #8]
	str r1, [r0, #4]
	pop {r3, pc}
	.align 2, 0
_020D076C: .4byte _02110C80
_020D0770: .4byte 0x021E15DC
	arm_func_end FUN_020D0730

	arm_func_start FUN_020D0774
FUN_020D0774: @ 0x020D0774
	push {r3, lr}
	bl FUN_020CE970
	ldr r1, _020D0788 @ =0x021E15DC
	str r0, [r1]
	pop {r3, pc}
	.align 2, 0
_020D0788: .4byte 0x021E15DC
	arm_func_end FUN_020D0774

	arm_func_start FUN_020D078C
FUN_020D078C: @ 0x020D078C
	push {r4, lr}
	sub sp, sp, #8
	ldr r3, _020D07EC @ =_02110C80
	mvn ip, #0
	ldr lr, [r3]
	mov r4, r0
	mov r3, r2
	cmp lr, ip
	beq _020D07D8
	add r2, r1, #0x98000
	mov ip, #0
	str ip, [sp]
	mov r0, lr
	mov r1, r4
	add r2, r2, #0x6800000
	str ip, [sp, #4]
	bl FUN_020D4194
	add sp, sp, #8
	pop {r4, pc}
_020D07D8:
	add r1, r1, #0x98000
	add r1, r1, #0x6800000
	bl FUN_020D4808
	add sp, sp, #8
	pop {r4, pc}
	.align 2, 0
_020D07EC: .4byte _02110C80
	arm_func_end FUN_020D078C

	arm_func_start FUN_020D07F0
FUN_020D07F0: @ 0x020D07F0
	push {r3, lr}
	ldr r0, _020D0828 @ =_02110C80
	mvn r1, #0
	ldr r0, [r0]
	cmp r0, r1
	beq _020D080C
	bl FUN_020D422C
_020D080C:
	ldr r0, _020D082C @ =0x021E15DC
	ldr r0, [r0]
	bl FUN_020CE768
	ldr r0, _020D082C @ =0x021E15DC
	mov r1, #0
	str r1, [r0]
	pop {r3, pc}
	.align 2, 0
_020D0828: .4byte _02110C80
_020D082C: .4byte 0x021E15DC
	arm_func_end FUN_020D07F0

	arm_func_start FUN_020D0830
FUN_020D0830: @ 0x020D0830
	push {r3, lr}
	bl FUN_020CE998
	ldr r1, _020D0844 @ =0x021E15DC
	str r0, [r1, #0x18]
	pop {r3, pc}
	.align 2, 0
_020D0844: .4byte 0x021E15DC
	arm_func_end FUN_020D0830

	arm_func_start FUN_020D0848
FUN_020D0848: @ 0x020D0848
	push {r4, lr}
	sub sp, sp, #8
	ldr r3, _020D08A8 @ =_02110C80
	mvn ip, #0
	ldr lr, [r3]
	mov r4, r0
	mov r3, r2
	cmp lr, ip
	beq _020D0894
	add r2, r1, #0x8a0000
	mov ip, #0
	str ip, [sp]
	mov r0, lr
	mov r1, r4
	add r2, r2, #0x6000000
	str ip, [sp, #4]
	bl FUN_020D4194
	add sp, sp, #8
	pop {r4, pc}
_020D0894:
	add r1, r1, #0x8a0000
	add r1, r1, #0x6000000
	bl FUN_020D4808
	add sp, sp, #8
	pop {r4, pc}
	.align 2, 0
_020D08A8: .4byte _02110C80
	arm_func_end FUN_020D0848

	arm_func_start FUN_020D08AC
FUN_020D08AC: @ 0x020D08AC
	push {r3, lr}
	ldr r0, _020D08E4 @ =_02110C80
	mvn r1, #0
	ldr r0, [r0]
	cmp r0, r1
	beq _020D08C8
	bl FUN_020D422C
_020D08C8:
	ldr r0, _020D08E8 @ =0x021E15DC
	ldr r0, [r0, #0x18]
	bl FUN_020CE7E8
	ldr r0, _020D08E8 @ =0x021E15DC
	mov r1, #0
	str r1, [r0, #0x18]
	pop {r3, pc}
	.align 2, 0
_020D08E4: .4byte _02110C80
_020D08E8: .4byte 0x021E15DC
	arm_func_end FUN_020D08AC

	arm_func_start FUN_020D08EC
FUN_020D08EC: @ 0x020D08EC
	push {r3, lr}
	bl FUN_020CE90C
	mov r1, #6
	mul lr, r0, r1
	ldr r2, _020D0938 @ =0x0210D5F0
	ldr r1, _020D093C @ =0x0210D5F2
	ldrh ip, [r2, lr]
	ldr r2, _020D0940 @ =0x0210D5F4
	ldrh r3, [r1, lr]
	ldr r1, _020D0944 @ =0x021E15F8
	ldrh r2, [r2, lr]
	str r0, [r1, #0x14]
	lsl r0, ip, #0xc
	str r0, [r1, #4]
	lsl r0, r3, #0xc
	str r0, [r1, #0x18]
	lsl r0, r2, #0xc
	str r0, [r1, #0x1c]
	pop {r3, pc}
	.align 2, 0
_020D0938: .4byte 0x0210D5F0
_020D093C: .4byte 0x0210D5F2
_020D0940: .4byte 0x0210D5F4
_020D0944: .4byte 0x021E15F8
	arm_func_end FUN_020D08EC

	arm_func_start FUN_020D0948
FUN_020D0948: @ 0x020D0948
	push {r3, r4, r5, r6, r7, lr}
	sub sp, sp, #8
	ldr r3, _020D0A80 @ =0x021E15F8
	mov r7, r0
	ldr r4, [r3, #0x18]
	mov ip, r1
	cmp r4, #0
	ldreq r0, [r3, #4]
	mov r6, r2
	addeq r2, r0, ip
	beq _020D0A34
	ldr r2, [r3, #0x1c]
	add r0, ip, r6
	cmp r0, r2
	ldrlo r0, [r3, #4]
	addlo r2, r0, ip
	blo _020D0A34
	cmp ip, r2
	addhs r0, r4, ip
	subhs r2, r0, r2
	bhs _020D0A34
	ldr r0, _020D0A84 @ =_02110C80
	mvn r1, #0
	ldr r0, [r0]
	sub r5, r2, ip
	cmp r0, r1
	ldr lr, [r3, #4]
	beq _020D09D4
	cmp r5, #0x30
	bls _020D09D4
	mov r1, r7
	mov r3, r5
	add r2, lr, ip
	bl FUN_020D3FF4
	b _020D09E4
_020D09D4:
	mov r0, r7
	mov r2, r5
	add r1, lr, ip
	bl FUN_020D4808
_020D09E4:
	ldr r0, _020D0A84 @ =_02110C80
	mvn r1, #0
	ldr r0, [r0]
	cmp r0, r1
	beq _020D0A1C
	mov ip, #0
	str ip, [sp]
	mov r2, r4
	add r1, r7, r5
	sub r3, r6, r5
	str ip, [sp, #4]
	bl FUN_020D4194
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, pc}
_020D0A1C:
	mov r1, r4
	add r0, r7, r5
	sub r2, r6, r5
	bl FUN_020D4808
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, pc}
_020D0A34:
	ldr r0, _020D0A84 @ =_02110C80
	mvn r1, #0
	ldr r0, [r0]
	cmp r0, r1
	beq _020D0A68
	mov r4, #0
	str r4, [sp]
	mov r1, r7
	mov r3, r6
	str r4, [sp, #4]
	bl FUN_020D4194
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, pc}
_020D0A68:
	mov r1, r2
	mov r0, r7
	mov r2, r6
	bl FUN_020D4808
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020D0A80: .4byte 0x021E15F8
_020D0A84: .4byte _02110C80
	arm_func_end FUN_020D0948

	arm_func_start FUN_020D0A88
FUN_020D0A88: @ 0x020D0A88
	push {r3, lr}
	ldr r0, _020D0ACC @ =_02110C80
	mvn r1, #0
	ldr r0, [r0]
	cmp r0, r1
	beq _020D0AA4
	bl FUN_020D422C
_020D0AA4:
	ldr r0, _020D0AD0 @ =0x021E15F8
	ldr r0, [r0, #0x14]
	bl FUN_020CE190
	ldr r0, _020D0AD0 @ =0x021E15F8
	mov r1, #0
	str r1, [r0, #0x1c]
	str r1, [r0, #0x18]
	str r1, [r0, #4]
	str r1, [r0, #0x14]
	pop {r3, pc}
	.align 2, 0
_020D0ACC: .4byte _02110C80
_020D0AD0: .4byte 0x021E15F8
	arm_func_end FUN_020D0A88

	arm_func_start FUN_020D0AD4
FUN_020D0AD4: @ 0x020D0AD4
	push {r3, lr}
	bl FUN_020CE920
	asr r3, r0, #4
	ldr r1, _020D0B00 @ =0x021E15F8
	ldr r2, _020D0B04 @ =0x0210D5E0
	lsl r3, r3, #1
	ldrh r2, [r2, r3]
	str r0, [r1, #0xc]
	lsl r0, r2, #0xc
	str r0, [r1, #8]
	pop {r3, pc}
	.align 2, 0
_020D0B00: .4byte 0x021E15F8
_020D0B04: .4byte 0x0210D5E0
	arm_func_end FUN_020D0AD4

	arm_func_start FUN_020D0B08
FUN_020D0B08: @ 0x020D0B08
	push {r4, r5, r6, lr}
	sub sp, sp, #8
	ldr r3, _020D0B6C @ =_02110C80
	ldr lr, _020D0B70 @ =0x021E15F8
	ldr r4, [r3]
	mvn ip, #0
	mov r6, r0
	mov r5, r1
	mov r3, r2
	cmp r4, ip
	ldr lr, [lr, #8]
	beq _020D0B5C
	mov ip, #0
	str ip, [sp]
	mov r0, r4
	mov r1, r6
	add r2, lr, r5
	str ip, [sp, #4]
	bl FUN_020D4194
	add sp, sp, #8
	pop {r4, r5, r6, pc}
_020D0B5C:
	add r1, lr, r5
	bl FUN_020D4808
	add sp, sp, #8
	pop {r4, r5, r6, pc}
	.align 2, 0
_020D0B6C: .4byte _02110C80
_020D0B70: .4byte 0x021E15F8
	arm_func_end FUN_020D0B08

	arm_func_start FUN_020D0B74
FUN_020D0B74: @ 0x020D0B74
	push {r3, lr}
	ldr r0, _020D0BB0 @ =_02110C80
	mvn r1, #0
	ldr r0, [r0]
	cmp r0, r1
	beq _020D0B90
	bl FUN_020D422C
_020D0B90:
	ldr r0, _020D0BB4 @ =0x021E15F8
	ldr r0, [r0, #0xc]
	bl FUN_020CE368
	ldr r0, _020D0BB4 @ =0x021E15F8
	mov r1, #0
	str r1, [r0, #0xc]
	str r1, [r0, #8]
	pop {r3, pc}
	.align 2, 0
_020D0BB0: .4byte _02110C80
_020D0BB4: .4byte 0x021E15F8
	arm_func_end FUN_020D0B74

	arm_func_start FUN_020D0BB8
FUN_020D0BB8: @ 0x020D0BB8
	push {r3, lr}
	bl FUN_020CE934
	ldr r1, _020D0C38 @ =0x021E15F8
	cmp r0, #0xc
	str r0, [r1]
	addls pc, pc, r0, lsl #2
	pop {r3, pc}
_020D0BD4: @ jump table
	pop {r3, pc} @ case 0
	b _020D0C20 @ case 1
	b _020D0C08 @ case 2
	b _020D0C08 @ case 3
	b _020D0C2C @ case 4
	pop {r3, pc} @ case 5
	pop {r3, pc} @ case 6
	pop {r3, pc} @ case 7
	b _020D0C14 @ case 8
	pop {r3, pc} @ case 9
	pop {r3, pc} @ case 10
	pop {r3, pc} @ case 11
	b _020D0C14 @ case 12
_020D0C08:
	mov r0, #0x6800000
	str r0, [r1, #0x10]
	pop {r3, pc}
_020D0C14:
	ldr r0, _020D0C3C @ =0x06840000
	str r0, [r1, #0x10]
	pop {r3, pc}
_020D0C20:
	ldr r0, _020D0C40 @ =0x067E0000
	str r0, [r1, #0x10]
	pop {r3, pc}
_020D0C2C:
	ldr r0, _020D0C44 @ =0x06820000
	str r0, [r1, #0x10]
	pop {r3, pc}
	.align 2, 0
_020D0C38: .4byte 0x021E15F8
_020D0C3C: .4byte 0x06840000
_020D0C40: .4byte 0x067E0000
_020D0C44: .4byte 0x06820000
	arm_func_end FUN_020D0BB8

	arm_func_start FUN_020D0C48
FUN_020D0C48: @ 0x020D0C48
	push {r4, lr}
	sub sp, sp, #8
	ldr r2, _020D0CA8 @ =_02110C80
	ldr ip, _020D0CAC @ =0x021E15F8
	ldr lr, [r2]
	mvn r2, #0
	mov r4, r0
	mov r3, r1
	cmp lr, r2
	ldr r2, [ip, #0x10]
	beq _020D0C94
	mov ip, #0
	str ip, [sp]
	mov r0, lr
	mov r1, r4
	str ip, [sp, #4]
	bl FUN_020D4194
	add sp, sp, #8
	pop {r4, pc}
_020D0C94:
	mov r1, r2
	mov r2, r3
	bl FUN_020D4808
	add sp, sp, #8
	pop {r4, pc}
	.align 2, 0
_020D0CA8: .4byte _02110C80
_020D0CAC: .4byte 0x021E15F8
	arm_func_end FUN_020D0C48

	arm_func_start FUN_020D0CB0
FUN_020D0CB0: @ 0x020D0CB0
	push {r3, r4, r5, lr}
	sub sp, sp, #8
	ldr r2, _020D0D14 @ =_02110C80
	ldr ip, _020D0D18 @ =0x021E15F8
	ldr lr, [r2]
	mvn r2, #0
	mov r5, r0
	mov r3, r1
	cmp lr, r2
	ldr r4, [ip, #0x10]
	beq _020D0D00
	mov ip, #0
	str ip, [sp]
	mov r0, lr
	mov r1, r5
	add r2, r4, #0x20000
	str ip, [sp, #4]
	bl FUN_020D4194
	add sp, sp, #8
	pop {r3, r4, r5, pc}
_020D0D00:
	mov r2, r3
	add r1, r4, #0x20000
	bl FUN_020D4808
	add sp, sp, #8
	pop {r3, r4, r5, pc}
	.align 2, 0
_020D0D14: .4byte _02110C80
_020D0D18: .4byte 0x021E15F8
	arm_func_end FUN_020D0CB0

	arm_func_start FUN_020D0D1C
FUN_020D0D1C: @ 0x020D0D1C
	push {r3, lr}
	ldr r0, _020D0D58 @ =_02110C80
	mvn r1, #0
	ldr r0, [r0]
	cmp r0, r1
	beq _020D0D38
	bl FUN_020D422C
_020D0D38:
	ldr r0, _020D0D5C @ =0x021E15F8
	ldr r0, [r0]
	bl FUN_020CE450
	ldr r0, _020D0D5C @ =0x021E15F8
	mov r1, #0
	str r1, [r0]
	str r1, [r0, #0x10]
	pop {r3, pc}
	.align 2, 0
_020D0D58: .4byte _02110C80
_020D0D5C: .4byte 0x021E15F8
	arm_func_end FUN_020D0D1C

	arm_func_start FUN_020D0D60
FUN_020D0D60: @ 0x020D0D60
	str r2, [r0, #0xc]
	str r1, [r0, #8]
	str r1, [r0]
	add r1, r1, #4
	str r1, [r0, #4]
	mov r1, #0
	str r1, [r0, #0x10]
	bx lr
	arm_func_end FUN_020D0D60

	arm_func_start FUN_020D0D80
FUN_020D0D80: @ 0x020D0D80
	ldr r3, [r0]
	ldr r2, [r0, #8]
	cmp r2, r3
	moveq r0, #0
	bxeq lr
	and r1, r3, #3
	cmp r1, #3
	addls pc, pc, r1, lsl #2
	b _020D0DF4
_020D0DA4: @ jump table
	b _020D0DB4 @ case 0
	b _020D0DBC @ case 1
	b _020D0DCC @ case 2
	b _020D0DE0 @ case 3
_020D0DB4:
	sub r0, r3, r2
	bx lr
_020D0DBC:
	add r1, r3, #1
	str r1, [r0]
	mov r1, #0
	strb r1, [r3]
_020D0DCC:
	ldr r3, [r0]
	mov r1, #0
	add r2, r3, #1
	str r2, [r0]
	strb r1, [r3]
_020D0DE0:
	ldr r3, [r0]
	mov r1, #0
	add r2, r3, #1
	str r2, [r0]
	strb r1, [r3]
_020D0DF4:
	ldr r1, [r0, #0x10]
	cmp r1, #0
	beq _020D0E18
	ldr r3, [r0, #4]
	mov r1, #0
	add r2, r3, #4
	str r2, [r0, #4]
	str r1, [r3]
	str r1, [r0, #0x10]
_020D0E18:
	ldr r1, [r0, #4]
	str r1, [r0]
	ldr r0, [r0, #8]
	sub r0, r1, r0
	bx lr
	arm_func_end FUN_020D0D80

	arm_func_start FUN_020D0E2C
FUN_020D0E2C: @ 0x020D0E2C
	ldm r0!, {r2, r3, ip}
	stm r1, {r2, r3, ip}
	ldm r0!, {r2, r3, ip}
	stm r1, {r2, r3, ip}
	ldm r0!, {r2, r3, ip}
	stm r1, {r2, r3, ip}
	ldm r0!, {r2, r3, ip}
	stm r1, {r2, r3, ip}
	bx lr
	arm_func_end FUN_020D0E2C

	arm_func_start FUN_020D0E50
FUN_020D0E50: @ 0x020D0E50
	push {r4, r5, r6, r7, r8}
	ldm r0!, {r2, r3, r4, r5, r6, r7, r8, ip}
	stm r1, {r2, r3, r4, r5, r6, r7, r8, ip}
	ldm r0!, {r2, r3, r4, r5, r6, r7, r8, ip}
	stm r1, {r2, r3, r4, r5, r6, r7, r8, ip}
	pop {r4, r5, r6, r7, r8}
	bx lr
	arm_func_end FUN_020D0E50

	arm_func_start FUN_020D0E6C
FUN_020D0E6C: @ 0x020D0E6C
	push {r4, r5, r6, lr}
	mov r5, r0
	mov r4, r1
	bl FUN_020D3A38
	cmp r5, #0
	beq _020D0E9C
	ldr r1, _020D0ED8 @ =OSi_IntrTable
	mvn r2, r4
	add r1, r1, #0x3000
	ldr r3, [r1, #0xff8]
	and r2, r3, r2
	str r2, [r1, #0xff8]
_020D0E9C:
	bl FUN_020D3A4C
	ldr r1, _020D0ED8 @ =OSi_IntrTable
	add r0, r1, #0x3000
	ldr r0, [r0, #0xff8]
	tst r4, r0
	popne {r4, r5, r6, pc}
	add r0, r1, #0x3f8
	ldr r5, _020D0EDC @ =0x027E0060
	add r6, r0, #0x3c00
_020D0EC0:
	mov r0, r5
	bl FUN_020D1E7C
	ldr r0, [r6]
	tst r4, r0
	beq _020D0EC0
	pop {r4, r5, r6, pc}
	.align 2, 0
_020D0ED8: .4byte OSi_IntrTable
_020D0EDC: .4byte 0x027E0060
	arm_func_end FUN_020D0E6C

	arm_func_start FUN_020D0EE0
FUN_020D0EE0: @ 0x020D0EE0
	bx lr
	arm_func_end FUN_020D0EE0

	arm_func_start FUN_020D0EE4
FUN_020D0EE4: @ 0x020D0EE4
	push {r3, r4, r5, lr}
	mov r1, #0xc
	mul r5, r0, r1
	ldr r2, _020D0F58 @ =0x021E1618
	ldr r3, _020D0F5C @ =_02110C84
	lsl r4, r0, #1
	ldr r1, [r2, r5]
	mov r0, #0
	ldrh r3, [r3, r4]
	mov r4, #1
	str r0, [r2, r5]
	cmp r1, #0
	lsl r4, r4, r3
	beq _020D0F28
	ldr r0, _020D0F60 @ =0x021E1620
	ldr r0, [r0, r5]
	blx r1
_020D0F28:
	ldr r0, _020D0F64 @ =OSi_IntrTable
	ldr r1, _020D0F68 @ =0x021E161C
	add r0, r0, #0x3000
	ldr r2, [r0, #0xff8]
	ldr r1, [r1, r5]
	orr r2, r2, r4
	str r2, [r0, #0xff8]
	cmp r1, #0
	popne {r3, r4, r5, pc}
	mov r0, r4
	bl FUN_020D1204
	pop {r3, r4, r5, pc}
	.align 2, 0
_020D0F58: .4byte 0x021E1618
_020D0F5C: .4byte _02110C84
_020D0F60: .4byte 0x021E1620
_020D0F64: .4byte OSi_IntrTable
_020D0F68: .4byte 0x021E161C
	arm_func_end FUN_020D0EE4

	arm_func_start FUN_020D0F6C
FUN_020D0F6C: @ 0x020D0F6C
	ldr ip, _020D0F78 @ =FUN_020D0EE4
	mov r0, #0
	bx ip
	.align 2, 0
_020D0F78: .4byte FUN_020D0EE4
	arm_func_end FUN_020D0F6C

	arm_func_start FUN_020D0F7C
FUN_020D0F7C: @ 0x020D0F7C
	ldr ip, _020D0F88 @ =FUN_020D0EE4
	mov r0, #1
	bx ip
	.align 2, 0
_020D0F88: .4byte FUN_020D0EE4
	arm_func_end FUN_020D0F7C

	arm_func_start FUN_020D0F8C
FUN_020D0F8C: @ 0x020D0F8C
	ldr ip, _020D0F98 @ =FUN_020D0EE4
	mov r0, #2
	bx ip
	.align 2, 0
_020D0F98: .4byte FUN_020D0EE4
	arm_func_end FUN_020D0F8C

	arm_func_start FUN_020D0F9C
FUN_020D0F9C: @ 0x020D0F9C
	ldr ip, _020D0FA8 @ =FUN_020D0EE4
	mov r0, #3
	bx ip
	.align 2, 0
_020D0FA8: .4byte FUN_020D0EE4
	arm_func_end FUN_020D0F9C

	arm_func_start FUN_020D0FAC
FUN_020D0FAC: @ 0x020D0FAC
	ldr ip, _020D0FB8 @ =FUN_020D0EE4
	mov r0, #4
	bx ip
	.align 2, 0
_020D0FB8: .4byte FUN_020D0EE4
	arm_func_end FUN_020D0FAC

	arm_func_start FUN_020D0FBC
FUN_020D0FBC: @ 0x020D0FBC
	ldr ip, _020D0FC8 @ =FUN_020D0EE4
	mov r0, #5
	bx ip
	.align 2, 0
_020D0FC8: .4byte FUN_020D0EE4
	arm_func_end FUN_020D0FBC

	arm_func_start FUN_020D0FCC
FUN_020D0FCC: @ 0x020D0FCC
	ldr ip, _020D0FD8 @ =FUN_020D0EE4
	mov r0, #6
	bx ip
	.align 2, 0
_020D0FD8: .4byte FUN_020D0EE4
	arm_func_end FUN_020D0FCC

	arm_func_start FUN_020D0FDC
FUN_020D0FDC: @ 0x020D0FDC
	ldr ip, _020D0FE8 @ =FUN_020D0EE4
	mov r0, #7
	bx ip
	.align 2, 0
_020D0FE8: .4byte FUN_020D0EE4
	arm_func_end FUN_020D0FDC

	arm_func_start FUN_020D0FEC
FUN_020D0FEC: @ 0x020D0FEC
	ldr r0, _020D1000 @ =0x027E0060
	mov r1, #0
	str r1, [r0, #4]
	str r1, [r0]
	bx lr
	.align 2, 0
_020D1000: .4byte 0x027E0060
	arm_func_end FUN_020D0FEC

	arm_func_start FUN_020D1004
FUN_020D1004: @ 0x020D1004
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r8, #0
	mov r2, #0xc
	ldr r4, _020D1084 @ =OSi_IntrTable
	ldr r6, _020D1088 @ =0x021E1618
	mov r7, r8
	mov lr, r8
	mov ip, #1
	mov r3, r2
_020D1028:
	tst r0, #1
	beq _020D1070
	mov sb, r7
	cmp r8, #8
	blt _020D104C
	cmp r8, #0xb
	suble r5, r8, #8
	mlale sb, r5, r3, r6
	ble _020D1068
_020D104C:
	cmp r8, #3
	blt _020D1064
	cmp r8, #6
	addle r5, r8, #1
	mlale sb, r5, r2, r6
	ble _020D1068
_020D1064:
	str r1, [r4, r8, lsl #2]
_020D1068:
	cmp sb, #0
	stmne sb, {r1, ip, lr}
_020D1070:
	add r8, r8, #1
	cmp r8, #0x16
	lsr r0, r0, #1
	blt _020D1028
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0
_020D1084: .4byte OSi_IntrTable
_020D1088: .4byte 0x021E1618
	arm_func_end FUN_020D1004

	arm_func_start FUN_020D108C
FUN_020D108C: @ 0x020D108C
	ldr r2, _020D1110 @ =OSi_IntrTable
	mov r1, #0
_020D1094:
	tst r0, #1
	beq _020D10F4
	cmp r1, #8
	blt _020D10C4
	cmp r1, #0xb
	bgt _020D10C4
	sub r1, r1, #8
	mov r0, #0xc
	mul r2, r1, r0
	ldr r0, _020D1114 @ =0x021E1618
	ldr r0, [r0, r2]
	bx lr
_020D10C4:
	cmp r1, #3
	blt _020D10EC
	cmp r1, #6
	bgt _020D10EC
	add r1, r1, #1
	mov r0, #0xc
	mul r2, r1, r0
	ldr r0, _020D1114 @ =0x021E1618
	ldr r0, [r0, r2]
	bx lr
_020D10EC:
	ldr r0, [r2]
	bx lr
_020D10F4:
	add r1, r1, #1
	cmp r1, #0x16
	lsr r0, r0, #1
	add r2, r2, #4
	blt _020D1094
	mov r0, #0
	bx lr
	.align 2, 0
_020D1110: .4byte OSi_IntrTable
_020D1114: .4byte 0x021E1618
	arm_func_end FUN_020D108C

	arm_func_start FUN_020D1118
FUN_020D1118: @ 0x020D1118
	push {r4, r5, r6, lr}
	mov r3, #0xc
	mul r6, r0, r3
	ldr ip, _020D1154 @ =0x021E1618
	add r4, r0, #8
	mov r5, #1
	lsl r0, r5, r4
	ldr r3, _020D1158 @ =0x021E1620
	str r1, [ip, r6]
	str r2, [r3, r6]
	bl FUN_020D11D4
	and r1, r0, r5, lsl r4
	ldr r0, _020D115C @ =0x021E161C
	str r1, [r0, r6]
	pop {r4, r5, r6, pc}
	.align 2, 0
_020D1154: .4byte 0x021E1618
_020D1158: .4byte 0x021E1620
_020D115C: .4byte 0x021E161C
	arm_func_end FUN_020D1118

	arm_func_start FUN_020D1160
FUN_020D1160: @ 0x020D1160
	push {r4, lr}
	mov r3, #0xc
	mul r4, r0, r3
	ldr ip, _020D119C @ =0x021E1648
	add r0, r0, #3
	mov r3, #1
	lsl r0, r3, r0
	ldr r3, _020D11A0 @ =0x021E1650
	str r1, [ip, r4]
	str r2, [r3, r4]
	bl FUN_020D11D4
	ldr r0, _020D11A4 @ =0x021E164C
	mov r1, #1
	str r1, [r0, r4]
	pop {r4, pc}
	.align 2, 0
_020D119C: .4byte 0x021E1648
_020D11A0: .4byte 0x021E1650
_020D11A4: .4byte 0x021E164C
	arm_func_end FUN_020D1160

	arm_func_start FUN_020D11A8
FUN_020D11A8: @ 0x020D11A8
	ldr r3, _020D11D0 @ =0x04000208
	mov r1, #0
	ldrh r2, [r3]
	strh r1, [r3]
	ldr r1, [r3, #8]
	str r0, [r3, #8]
	ldrh r0, [r3]
	mov r0, r1
	strh r2, [r3]
	bx lr
	.align 2, 0
_020D11D0: .4byte 0x04000208
	arm_func_end FUN_020D11A8

	arm_func_start FUN_020D11D4
FUN_020D11D4: @ 0x020D11D4
	ldr r3, _020D1200 @ =0x04000208
	mov r1, #0
	ldrh r2, [r3]
	strh r1, [r3]
	ldr r1, [r3, #8]
	orr r0, r1, r0
	str r0, [r3, #8]
	ldrh r0, [r3]
	mov r0, r1
	strh r2, [r3]
	bx lr
	.align 2, 0
_020D1200: .4byte 0x04000208
	arm_func_end FUN_020D11D4

	arm_func_start FUN_020D1204
FUN_020D1204: @ 0x020D1204
	ldr ip, _020D1230 @ =0x04000208
	mov r2, #0
	ldrh r3, [ip]
	mvn r1, r0
	strh r2, [ip]
	ldr r0, [ip, #8]
	and r1, r0, r1
	str r1, [ip, #8]
	ldrh r1, [ip]
	strh r3, [ip]
	bx lr
	.align 2, 0
_020D1230: .4byte 0x04000208
	arm_func_end FUN_020D1204

	arm_func_start FUN_020D1234
FUN_020D1234: @ 0x020D1234
	ldr r3, _020D125C @ =0x04000208
	mov r1, #0
	ldrh r2, [r3]
	strh r1, [r3]
	ldr r1, [r3, #0xc]
	str r0, [r3, #0xc]
	ldrh r0, [r3]
	mov r0, r1
	strh r2, [r3]
	bx lr
	.align 2, 0
_020D125C: .4byte 0x04000208
	arm_func_end FUN_020D1234

	arm_func_start FUN_020D1260
FUN_020D1260: @ 0x020D1260
	ldr ip, _020D1284 @ =OSi_IntrTable
	ldr r3, _020D1288 @ =0xFDDB597D
	add r0, ip, #0x3000
	ldr r2, _020D128C @ =0x7BF9DD5B
	ldr r1, _020D1290 @ =0x00000800
	str r3, [r0, #0xf7c]
	add r0, ip, #0x3f80
	str r2, [r0, -r1]
	bx lr
	.align 2, 0
_020D1284: .4byte OSi_IntrTable
_020D1288: .4byte 0xFDDB597D
_020D128C: .4byte 0x7BF9DD5B
_020D1290: .4byte 0x00000800
	arm_func_end FUN_020D1260

	arm_func_start FUN_020D1294
FUN_020D1294: @ 0x020D1294
	push {r3, r4, r5, lr}
	ldr r3, _020D1350 @ =0x021E1678
	ldr r0, [r3]
	cmp r0, #0
	popne {r3, r4, r5, pc}
	ldr r1, _020D1354 @ =0x027FFFF0
	mov r4, #1
	mov r2, #0
	mov r0, #0x7e
	str r4, [r3]
	str r2, [r1]
	bl FUN_020D13AC
	ldr r5, _020D1354 @ =0x027FFFF0
	ldrh r0, [r5, #6]
	cmp r0, #0
	beq _020D12EC
	mov r4, #0x400
_020D12D8:
	mov r0, r4
	blx SVC_WaitByLoop
	ldrh r0, [r5, #6]
	cmp r0, #0
	bne _020D12D8
_020D12EC:
	ldr ip, _020D1358 @ =0x027FFFB0
	mvn r0, #0
	str r0, [ip]
	lsl r3, r0, #0x10
	add r1, ip, #0x10
	mov r0, #0
	mov r2, #0x28
	str r3, [ip, #4]
	bl FUN_020D47EC
	ldr ip, _020D135C @ =0x04000204
	ldr r1, _020D1354 @ =0x027FFFF0
	ldrh r3, [ip]
	mov r0, #0x7e
	mov r2, #0
	orr r3, r3, #0x800
	strh r3, [ip]
	ldrh r3, [ip]
	orr r3, r3, #0x80
	strh r3, [ip]
	bl FUN_020D1430
	ldr r1, _020D1354 @ =0x027FFFF0
	mov r0, #0x7f
	mov r2, #0
	bl FUN_020D13AC
	pop {r3, r4, r5, pc}
	.align 2, 0
_020D1350: .4byte 0x021E1678
_020D1354: .4byte 0x027FFFF0
_020D1358: .4byte 0x027FFFB0
_020D135C: .4byte 0x04000204
	arm_func_end FUN_020D1294

	arm_func_start FUN_020D1360
FUN_020D1360: @ 0x020D1360
	push {r4, r5, r6, r7, r8, lr}
	mov r8, r0
	mov r7, r1
	mov r6, r2
	mov r5, r3
	bl FUN_020D1440
	cmp r0, #0
	pople {r4, r5, r6, r7, r8, pc}
	mov r4, #0x400
_020D1384:
	mov r0, r4
	blx SVC_WaitByLoop
	mov r0, r8
	mov r1, r7
	mov r2, r6
	mov r3, r5
	bl FUN_020D1440
	cmp r0, #0
	bgt _020D1384
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020D1360

	arm_func_start FUN_020D13AC
FUN_020D13AC: @ 0x020D13AC
	ldr ip, _020D13B8 @ =FUN_020D1360
	mov r3, #0
	bx ip
	.align 2, 0
_020D13B8: .4byte FUN_020D1360
	arm_func_end FUN_020D13AC

	arm_func_start FUN_020D13BC
FUN_020D13BC: @ 0x020D13BC
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r1
	ldrh r1, [r7, #4]
	mov r6, r2
	mov r5, r3
	cmp r0, r1
	mvnne r0, #1
	popne {r3, r4, r5, r6, r7, pc}
	cmp r5, #0
	beq _020D13EC
	bl FUN_020D3A64
	b _020D13F0
_020D13EC:
	bl FUN_020D3A38
_020D13F0:
	mov r4, r0
	mov r0, #0
	strh r0, [r7, #4]
	cmp r6, #0
	beq _020D1408
	blx r6
_020D1408:
	mov r0, #0
	str r0, [r7]
	cmp r5, #0
	mov r0, r4
	beq _020D1424
	bl FUN_020D3A78
	b _020D1428
_020D1424:
	bl FUN_020D3A4C
_020D1428:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020D13BC

	arm_func_start FUN_020D1430
FUN_020D1430: @ 0x020D1430
	ldr ip, _020D143C @ =FUN_020D13BC
	mov r3, #0
	bx ip
	.align 2, 0
_020D143C: .4byte FUN_020D13BC
	arm_func_end FUN_020D1430

	arm_func_start FUN_020D1440
FUN_020D1440: @ 0x020D1440
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	movs r6, r3
	mov sb, r0
	mov r8, r1
	mov r7, r2
	beq _020D1460
	bl FUN_020D3A64
	b _020D1464
_020D1460:
	bl FUN_020D3A38
_020D1464:
	mov r5, r0
	mov r0, sb
	mov r1, r8
	bl FUN_020D4BE0
	movs r4, r0
	bne _020D148C
	cmp r7, #0
	beq _020D1488
	blx r7
_020D1488:
	strh sb, [r8, #4]
_020D148C:
	cmp r6, #0
	mov r0, r5
	beq _020D14A0
	bl FUN_020D3A78
	b _020D14A4
_020D14A0:
	bl FUN_020D3A4C
_020D14A4:
	mov r0, r4
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	arm_func_end FUN_020D1440

	arm_func_start FUN_020D14AC
FUN_020D14AC: @ 0x020D14AC
	ldr ip, _020D14C0 @ =FUN_020D1360
	ldr r1, _020D14C4 @ =0x027FFFE8
	ldr r2, _020D14C8 @ =FUN_020D1518
	mov r3, #1
	bx ip
	.align 2, 0
_020D14C0: .4byte FUN_020D1360
_020D14C4: .4byte 0x027FFFE8
_020D14C8: .4byte FUN_020D1518
	arm_func_end FUN_020D14AC

	arm_func_start FUN_020D14CC
FUN_020D14CC: @ 0x020D14CC
	ldr ip, _020D14E0 @ =FUN_020D13BC
	ldr r1, _020D14E4 @ =0x027FFFE8
	ldr r2, _020D14E8 @ =FUN_020D1530
	mov r3, #1
	bx ip
	.align 2, 0
_020D14E0: .4byte FUN_020D13BC
_020D14E4: .4byte 0x027FFFE8
_020D14E8: .4byte FUN_020D1530
	arm_func_end FUN_020D14CC

	arm_func_start FUN_020D14EC
FUN_020D14EC: @ 0x020D14EC
	ldr r1, _020D14F4 @ =FUN_020D14CC
	bx r1
	.align 2, 0
_020D14F4: .4byte FUN_020D14CC
	arm_func_end FUN_020D14EC

	arm_func_start FUN_020D14F8
FUN_020D14F8: @ 0x020D14F8
	ldr ip, _020D150C @ =FUN_020D1440
	ldr r1, _020D1510 @ =0x027FFFE8
	ldr r2, _020D1514 @ =FUN_020D1518
	mov r3, #1
	bx ip
	.align 2, 0
_020D150C: .4byte FUN_020D1440
_020D1510: .4byte 0x027FFFE8
_020D1514: .4byte FUN_020D1518
	arm_func_end FUN_020D14F8

	arm_func_start FUN_020D1518
FUN_020D1518: @ 0x020D1518
	ldr r1, _020D152C @ =0x04000204
	ldrh r0, [r1]
	bic r0, r0, #0x80
	strh r0, [r1]
	bx lr
	.align 2, 0
_020D152C: .4byte 0x04000204
	arm_func_end FUN_020D1518

	arm_func_start FUN_020D1530
FUN_020D1530: @ 0x020D1530
	ldr r1, _020D1544 @ =0x04000204
	ldrh r0, [r1]
	orr r0, r0, #0x80
	strh r0, [r1]
	bx lr
	.align 2, 0
_020D1544: .4byte 0x04000204
	arm_func_end FUN_020D1530

	arm_func_start FUN_020D1548
FUN_020D1548: @ 0x020D1548
	ldr ip, _020D1558 @ =FUN_020D13AC
	ldr r1, _020D155C @ =0x027FFFE0
	ldr r2, _020D1560 @ =FUN_020D158C
	bx ip
	.align 2, 0
_020D1558: .4byte FUN_020D13AC
_020D155C: .4byte 0x027FFFE0
_020D1560: .4byte FUN_020D158C
	arm_func_end FUN_020D1548

	arm_func_start FUN_020D1564
FUN_020D1564: @ 0x020D1564
	ldr ip, _020D1574 @ =FUN_020D1430
	ldr r1, _020D1578 @ =0x027FFFE0
	ldr r2, _020D157C @ =FUN_020D15A4
	bx ip
	.align 2, 0
_020D1574: .4byte FUN_020D1430
_020D1578: .4byte 0x027FFFE0
_020D157C: .4byte FUN_020D15A4
	arm_func_end FUN_020D1564

	arm_func_start FUN_020D1580
FUN_020D1580: @ 0x020D1580
	ldr r1, _020D1588 @ =FUN_020D1564
	bx r1
	.align 2, 0
_020D1588: .4byte FUN_020D1564
	arm_func_end FUN_020D1580

	arm_func_start FUN_020D158C
FUN_020D158C: @ 0x020D158C
	ldr r1, _020D15A0 @ =0x04000204
	ldrh r0, [r1]
	bic r0, r0, #0x800
	strh r0, [r1]
	bx lr
	.align 2, 0
_020D15A0: .4byte 0x04000204
	arm_func_end FUN_020D158C

	arm_func_start FUN_020D15A4
FUN_020D15A4: @ 0x020D15A4
	ldr r1, _020D15B8 @ =0x04000204
	ldrh r0, [r1]
	orr r0, r0, #0x800
	strh r0, [r1]
	bx lr
	.align 2, 0
_020D15B8: .4byte 0x04000204
	arm_func_end FUN_020D15A4

	arm_func_start FUN_020D15BC
FUN_020D15BC: @ 0x020D15BC
	ldrh r0, [r0, #4]
	bx lr
	arm_func_end FUN_020D15BC

	arm_func_start FUN_020D15C4
FUN_020D15C4: @ 0x020D15C4
	ldr r3, _020D1614 @ =0x027FFFB0
	ldr r1, [r3]
	clz r2, r1
	cmp r2, #0x20
	movne r0, #0x40
	bne _020D15F8
	add r3, r3, #4
	ldr r1, [r3]
	clz r2, r1
	cmp r2, #0x20
	ldr r0, _020D1618 @ =0xFFFFFFFD
	bxeq lr
	mov r0, #0x60
_020D15F8:
	add r0, r0, r2
	mov r1, #0x80000000
	lsr r1, r1, r2
	ldr r2, [r3]
	bic r2, r2, r1
	str r2, [r3]
	bx lr
	.align 2, 0
_020D1614: .4byte 0x027FFFB0
_020D1618: .4byte 0xFFFFFFFD
	arm_func_end FUN_020D15C4

	arm_func_start FUN_020D161C
FUN_020D161C: @ 0x020D161C
	ldr r3, _020D1648 @ =0x027FFFB0
	cmp r0, #0x60
	addpl r3, r3, #4
	subpl r0, r0, #0x60
	submi r0, r0, #0x40
	mov r1, #0x80000000
	lsr r1, r1, r0
	ldr r2, [r3]
	orr r2, r2, r1
	str r2, [r3]
	bx lr
	.align 2, 0
_020D1648: .4byte 0x027FFFB0
	arm_func_end FUN_020D161C

	arm_func_start FUN_020D164C
FUN_020D164C: @ 0x020D164C
	push {r0, r1, r2, r3}
	push {r3, lr}
	add r2, sp, #0xc
	bic r2, r2, #3
	ldr r1, [sp, #0xc]
	add r2, r2, #4
	bl FUN_020D1674
	pop {r3, lr}
	add sp, sp, #0x10
	bx lr
	arm_func_end FUN_020D164C

	arm_func_start FUN_020D1674
FUN_020D1674: @ 0x020D1674
	ldr ip, _020D1688 @ =FUN_020D16B4
	mov r3, r2
	mov r2, r1
	mvn r1, #0x80000000
	bx ip
	.align 2, 0
_020D1688: .4byte FUN_020D16B4
	arm_func_end FUN_020D1674

	arm_func_start FUN_020D168C
FUN_020D168C: @ 0x020D168C
	push {r0, r1, r2, r3}
	push {r3, lr}
	add r3, sp, #0x10
	bic r3, r3, #3
	ldr r2, [sp, #0x10]
	add r3, r3, #4
	bl FUN_020D16B4
	pop {r3, lr}
	add sp, sp, #0x10
	bx lr
	arm_func_end FUN_020D168C

	arm_func_start FUN_020D16B4
FUN_020D16B4: @ 0x020D16B4
	ldr ip, _020D16BC @ =FUN_020E3F44
	bx ip
	.align 2, 0
_020D16BC: .4byte FUN_020E3F44
	arm_func_end FUN_020D16B4

	arm_func_start FUN_020D16C0
FUN_020D16C0: @ 0x020D16C0
	ldr r1, _020D16D4 @ =0x021E167C
	ldr r0, [r1, #0x20]
	add r0, r0, #1
	str r0, [r1, #0x20]
	bx lr
	.align 2, 0
_020D16D4: .4byte 0x021E167C
	arm_func_end FUN_020D16C0

	arm_func_start FUN_020D16D8
FUN_020D16D8: @ 0x020D16D8
	ldr ip, [r0]
	b _020D16EC
_020D16E0:
	cmp ip, r1
	bxeq lr
	ldr ip, [ip, #0x80]
_020D16EC:
	cmp ip, #0
	beq _020D1704
	ldr r3, [ip, #0x70]
	ldr r2, [r1, #0x70]
	cmp r3, r2
	bls _020D16E0
_020D1704:
	cmp ip, #0
	bne _020D1730
	ldr r2, [r0, #4]
	cmp r2, #0
	streq r1, [r0]
	strne r1, [r2, #0x80]
	str r2, [r1, #0x7c]
	mov r2, #0
	str r2, [r1, #0x80]
	str r1, [r0, #4]
	bx lr
_020D1730:
	ldr r2, [ip, #0x7c]
	cmp r2, #0
	streq r1, [r0]
	strne r1, [r2, #0x80]
	str r2, [r1, #0x7c]
	str ip, [r1, #0x80]
	str r1, [ip, #0x7c]
	bx lr
	arm_func_end FUN_020D16D8

	arm_func_start FUN_020D1750
FUN_020D1750: @ 0x020D1750
	ldr r2, [r0]
	cmp r2, #0
	beq _020D177C
	ldr r1, [r2, #0x80]
	str r1, [r0]
	cmp r1, #0
	movne r0, #0
	strne r0, [r1, #0x7c]
	moveq r1, #0
	streq r1, [r0, #4]
	streq r1, [r2, #0x78]
_020D177C:
	mov r0, r2
	bx lr
	arm_func_end FUN_020D1750

	arm_func_start FUN_020D1784
FUN_020D1784: @ 0x020D1784
	ldr ip, [r0]
	mov r2, ip
	cmp ip, #0
	beq _020D17D0
_020D1794:
	cmp r2, r1
	ldr r3, [r2, #0x80]
	bne _020D17C4
	cmp ip, r2
	ldr ip, [r2, #0x7c]
	streq r3, [r0]
	strne r3, [ip, #0x80]
	ldr r1, [r0, #4]
	cmp r1, r2
	streq ip, [r0, #4]
	strne ip, [r3, #0x7c]
	b _020D17D0
_020D17C4:
	mov r2, r3
	cmp r3, #0
	bne _020D1794
_020D17D0:
	mov r0, r2
	bx lr
	arm_func_end FUN_020D1784

	arm_func_start FUN_020D17D8
FUN_020D17D8: @ 0x020D17D8
	ldr r2, [r0]
	cmp r2, #0
	beq _020D1800
	ldr r1, [r2, #0x10]
	str r1, [r0]
	cmp r1, #0
	movne r0, #0
	strne r0, [r1, #0x14]
	moveq r1, #0
	streq r1, [r0, #4]
_020D1800:
	mov r0, r2
	bx lr
	arm_func_end FUN_020D17D8

	arm_func_start FUN_020D1808
FUN_020D1808: @ 0x020D1808
	push {r3, lr}
	ldr r1, _020D1864 @ =0x021E167C
	mov ip, #0
	ldr lr, [r1, #0x2c]
	mov r3, lr
	b _020D1828
_020D1820:
	mov ip, r3
	ldr r3, [r3, #0x68]
_020D1828:
	cmp r3, #0
	beq _020D1840
	ldr r2, [r3, #0x70]
	ldr r1, [r0, #0x70]
	cmp r2, r1
	blo _020D1820
_020D1840:
	cmp ip, #0
	ldrne r1, [ip, #0x68]
	strne r1, [r0, #0x68]
	strne r0, [ip, #0x68]
	popne {r3, pc}
	ldr r1, _020D1864 @ =0x021E167C
	str lr, [r0, #0x68]
	str r0, [r1, #0x2c]
	pop {r3, pc}
	.align 2, 0
_020D1864: .4byte 0x021E167C
	arm_func_end FUN_020D1808

	arm_func_start FUN_020D1868
FUN_020D1868: @ 0x020D1868
	ldr r1, _020D18AC @ =0x021E167C
	mov r2, #0
	ldr r1, [r1, #0x2c]
	b _020D1880
_020D1878:
	mov r2, r1
	ldr r1, [r1, #0x68]
_020D1880:
	cmp r1, #0
	cmpne r1, r0
	bne _020D1878
	cmp r2, #0
	ldrne r0, [r0, #0x68]
	strne r0, [r2, #0x68]
	bxne lr
	ldr r1, [r0, #0x68]
	ldr r0, _020D18AC @ =0x021E167C
	str r1, [r0, #0x2c]
	bx lr
	.align 2, 0
_020D18AC: .4byte 0x021E167C
	arm_func_end FUN_020D1868

	arm_func_start FUN_020D18B0
FUN_020D18B0: @ 0x020D18B0
	push {r4, r5, r6, lr}
	ldr r0, _020D1970 @ =0x021E167C
	ldr r1, [r0, #4]
	cmp r1, #0
	popne {r4, r5, r6, pc}
	ldrh r0, [r0, #0x26]
	ldr r4, _020D1974 @ =0x021E16A0
	cmp r0, #0
	bne _020D18E0
	bl FUN_020D3A9C
	cmp r0, #0x12
	bne _020D18EC
_020D18E0:
	mov r0, #1
	strh r0, [r4]
	pop {r4, r5, r6, pc}
_020D18EC:
	ldr r0, _020D1970 @ =0x021E167C
	ldr r0, [r0, #8]
	ldr r6, [r0]
	bl FUN_020D1F5C
	mov r5, r0
	cmp r6, r5
	cmpne r5, #0
	popeq {r4, r5, r6, pc}
	ldr r0, [r6, #0x64]
	cmp r0, #2
	beq _020D1928
	mov r0, r6
	bl FUN_020D22D8
	cmp r0, #0
	popne {r4, r5, r6, pc}
_020D1928:
	ldr r0, _020D1970 @ =0x021E167C
	ldr r2, [r0]
	cmp r2, #0
	beq _020D1944
	mov r0, r6
	mov r1, r5
	blx r2
_020D1944:
	ldr r2, [r4, #0xc]
	cmp r2, #0
	beq _020D195C
	mov r0, r6
	mov r1, r5
	blx r2
_020D195C:
	ldr r1, _020D1970 @ =0x021E167C
	mov r0, r5
	str r5, [r1, #0x28]
	bl FUN_020D2324
	pop {r4, r5, r6, pc}
	.align 2, 0
_020D1970: .4byte 0x021E167C
_020D1974: .4byte 0x021E16A0
	arm_func_end FUN_020D18B0

	arm_func_start FUN_020D1978
FUN_020D1978: @ 0x020D1978
	push {r3, lr}
	sub sp, sp, #8
	ldr r0, _020D1A8C @ =0x021E167C
	ldr r1, [r0, #0xc]
	cmp r1, #0
	addne sp, sp, #8
	popne {r3, pc}
	mov r3, #1
	ldr r2, _020D1A90 @ =0x021E16A4
	str r3, [r0, #0xc]
	str r2, [r0, #8]
	ldr r1, _020D1A94 @ =0x021E1770
	mov r2, #0x10
	str r2, [r1, #0x70]
	mov r2, #0
	str r2, [r1, #0x6c]
	str r3, [r1, #0x64]
	str r2, [r1, #0x68]
	str r2, [r1, #0x74]
	ldr r2, _020D1A98 @ =0x00000000
	str r1, [r0, #0x2c]
	str r1, [r0, #0x28]
	cmp r2, #0
	ldrle r0, _020D1A9C @ =0x027E0080
	ble _020D19EC
	ldr r1, _020D1AA0 @ =OSi_IntrTable
	ldr r0, _020D1AA4 @ =0x00000800
	add r1, r1, #0x3f80
	sub r0, r1, r0
_020D19EC:
	ldr r1, _020D1AA0 @ =OSi_IntrTable
	sub ip, r0, r2
	ldr r0, _020D1AA4 @ =0x00000800
	add r1, r1, #0x3f80
	sub r3, r1, r0
	ldr r2, _020D1A94 @ =0x021E1770
	mov r0, #0
	str r3, [r2, #0x94]
	str ip, [r2, #0x90]
	ldr r1, _020D1AA8 @ =0xFDDB597D
	str r0, [r2, #0x98]
	str r1, [r3, #-4]
	ldr r3, [r2, #0x90]
	ldr ip, _020D1AAC @ =0x7BF9DD5B
	ldr r1, _020D1A8C @ =0x021E167C
	str ip, [r3]
	str r0, [r2, #0xa0]
	str r0, [r2, #0x9c]
	strh r0, [r1, #0x24]
	ldr r3, _020D1AB0 @ =0x021E16A0
	ldr r2, _020D1AB4 @ =0x027FFFA0
	strh r0, [r1, #0x26]
	str r3, [r2]
	bl FUN_020D21C4
	mov r2, #0xc8
	str r2, [sp]
	mov ip, #0x1f
	ldr r0, _020D1AB8 @ =0x021E16B0
	ldr r1, _020D1ABC @ =FUN_020D21EC
	ldr r3, _020D1AC0 @ =0x021E18F8
	mov r2, #0
	str ip, [sp, #4]
	bl FUN_020D1AD4
	ldr r0, _020D1AB8 @ =0x021E16B0
	mov r1, #0x20
	str r1, [r0, #0x70]
	mov r1, #1
	str r1, [r0, #0x64]
	add sp, sp, #8
	pop {r3, pc}
	.align 2, 0
_020D1A8C: .4byte 0x021E167C
_020D1A90: .4byte 0x021E16A4
_020D1A94: .4byte 0x021E1770
_020D1A98: .4byte 0x00000000
_020D1A9C: .4byte 0x027E0080
_020D1AA0: .4byte OSi_IntrTable
_020D1AA4: .4byte 0x00000800
_020D1AA8: .4byte 0xFDDB597D
_020D1AAC: .4byte 0x7BF9DD5B
_020D1AB0: .4byte 0x021E16A0
_020D1AB4: .4byte 0x027FFFA0
_020D1AB8: .4byte 0x021E16B0
_020D1ABC: .4byte FUN_020D21EC
_020D1AC0: .4byte 0x021E18F8
	arm_func_end FUN_020D1978

	arm_func_start FUN_020D1AC4
FUN_020D1AC4: @ 0x020D1AC4
	ldr r0, _020D1AD0 @ =0x021E1688
	ldr r0, [r0]
	bx lr
	.align 2, 0
_020D1AD0: .4byte 0x021E1688
	arm_func_end FUN_020D1AC4

	arm_func_start FUN_020D1AD4
FUN_020D1AD4: @ 0x020D1AD4
	push {r4, r5, r6, r7, r8, lr}
	mov r8, r0
	mov r5, r1
	mov r7, r2
	mov r6, r3
	bl FUN_020D3A38
	mov r4, r0
	bl FUN_020D16C0
	ldr r2, [sp, #0x1c]
	mov r1, #0
	str r2, [r8, #0x70]
	str r0, [r8, #0x6c]
	str r1, [r8, #0x64]
	mov r0, r8
	str r1, [r8, #0x74]
	bl FUN_020D1808
	ldr r0, [sp, #0x18]
	mov r1, r5
	str r6, [r8, #0x94]
	sub r5, r6, r0
	sub r2, r6, #4
	mov ip, #0
	str r5, [r8, #0x90]
	str ip, [r8, #0x98]
	ldr r6, _020D1BC4 @ =0xFDDB597D
	ldr r0, [r8, #0x94]
	ldr r3, _020D1BC8 @ =0x7BF9DD5B
	str r6, [r0, #-4]
	ldr r0, [r8, #0x90]
	str r3, [r0]
	str ip, [r8, #0xa0]
	mov r0, r8
	str ip, [r8, #0x9c]
	bl FUN_020D226C
	ldr r2, _020D1BCC @ =FUN_020D1BD0
	str r7, [r8, #4]
	str r2, [r8, #0x3c]
	ldr r2, [sp, #0x18]
	add r1, r5, #4
	mov r0, #0
	sub r2, r2, #8
	bl FUN_020D47EC
	mov r1, #0
	str r1, [r8, #0x84]
	str r1, [r8, #0x88]
	mov r0, r8
	str r1, [r8, #0x8c]
	bl FUN_020D2264
	mov r0, #0
	str r0, [r8, #0x78]
	str r0, [r8, #0x80]
	add r1, r8, #0xa4
	mov r2, #0xc
	str r0, [r8, #0x7c]
	bl FUN_020D47EC
	mov r1, #0
	mov r0, r4
	str r1, [r8, #0xb0]
	bl FUN_020D3A4C
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0
_020D1BC4: .4byte 0xFDDB597D
_020D1BC8: .4byte 0x7BF9DD5B
_020D1BCC: .4byte FUN_020D1BD0
	arm_func_end FUN_020D1AD4

	arm_func_start FUN_020D1BD0
FUN_020D1BD0: @ 0x020D1BD0
	push {r3, lr}
	bl FUN_020D3A38
	ldr r0, _020D1BEC @ =0x021E167C
	mov r1, #0
	ldr r0, [r0, #0x28]
	bl FUN_020D1BF0
	pop {r3, pc}
	.align 2, 0
_020D1BEC: .4byte 0x021E167C
	arm_func_end FUN_020D1BD0

	arm_func_start FUN_020D1BF0
FUN_020D1BF0: @ 0x020D1BF0
	push {r3, r4, r5, lr}
	ldr r2, _020D1C44 @ =0x021E167C
	mov r5, r0
	ldr r2, [r2, #0x1c]
	mov r4, r1
	cmp r2, #0
	beq _020D1C38
	ldr r1, _020D1C48 @ =FUN_020D1C4C
	bl FUN_020D226C
	str r4, [r5, #4]
	ldr r1, [r5]
	mov r0, r5
	orr r1, r1, #0x80
	str r1, [r5]
	mov r1, #1
	str r1, [r5, #0x64]
	bl FUN_020D2324
	pop {r3, r4, r5, pc}
_020D1C38:
	mov r0, r4
	bl FUN_020D1C4C
	pop {r3, r4, r5, pc}
	.align 2, 0
_020D1C44: .4byte 0x021E167C
_020D1C48: .4byte FUN_020D1C4C
	arm_func_end FUN_020D1BF0

	arm_func_start FUN_020D1C4C
FUN_020D1C4C: @ 0x020D1C4C
	push {r3, lr}
	ldr r1, _020D1C80 @ =0x021E167C
	ldr r1, [r1, #8]
	ldr r3, [r1]
	ldr r2, [r3, #0xb4]
	cmp r2, #0
	beq _020D1C78
	mov r1, #0
	str r1, [r3, #0xb4]
	blx r2
	bl FUN_020D3A38
_020D1C78:
	bl FUN_020D1C84
	pop {r3, pc}
	.align 2, 0
_020D1C80: .4byte 0x021E167C
	arm_func_end FUN_020D1C4C

	arm_func_start FUN_020D1C84
FUN_020D1C84: @ 0x020D1C84
	push {r4, lr}
	ldr r0, _020D1CDC @ =0x021E167C
	ldr r0, [r0, #8]
	ldr r4, [r0]
	bl FUN_020D21FC
	mov r0, r4
	bl FUN_020D26F8
	ldr r0, [r4, #0x78]
	cmp r0, #0
	beq _020D1CB4
	mov r1, r4
	bl FUN_020D1784
_020D1CB4:
	mov r0, r4
	bl FUN_020D1868
	mov r1, #2
	add r0, r4, #0x9c
	str r1, [r4, #0x64]
	bl FUN_020D1ECC
	bl FUN_020D2230
	bl FUN_020D1F84
	bl FUN_020D3F48
	pop {r4, pc}
	.align 2, 0
_020D1CDC: .4byte 0x021E167C
	arm_func_end FUN_020D1C84

	arm_func_start FUN_020D1CE0
FUN_020D1CE0: @ 0x020D1CE0
	push {r3, r4, r5, lr}
	mov r5, r0
	bl FUN_020D3A38
	ldr r1, _020D1D58 @ =0x021E167C
	mov r4, r0
	ldr r0, [r1, #0x28]
	cmp r0, r5
	bne _020D1D04
	bl FUN_020D1C84
_020D1D04:
	bl FUN_020D21FC
	mov r0, r5
	bl FUN_020D26F8
	mov r0, r5
	bl FUN_020D1E20
	ldr r0, [r5, #0x78]
	cmp r0, #0
	beq _020D1D2C
	mov r1, r5
	bl FUN_020D1784
_020D1D2C:
	mov r0, r5
	bl FUN_020D1868
	mov r1, #2
	add r0, r5, #0x9c
	str r1, [r5, #0x64]
	bl FUN_020D1ECC
	bl FUN_020D2230
	mov r0, r4
	bl FUN_020D3A4C
	bl FUN_020D1F84
	pop {r3, r4, r5, pc}
	.align 2, 0
_020D1D58: .4byte 0x021E167C
	arm_func_end FUN_020D1CE0

	arm_func_start FUN_020D1D5C
FUN_020D1D5C: @ 0x020D1D5C
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	bl FUN_020D2100
	mov r2, r0
	mov r0, r5
	mov r1, r4
	bl FUN_020D1D80
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020D1D5C

	arm_func_start FUN_020D1D80
FUN_020D1D80: @ 0x020D1D80
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	mov r6, r1
	mov r5, r2
	bl FUN_020D3A38
	ldr r1, _020D1E18 @ =0x021E167C
	mov r4, r0
	ldr r0, [r1, #0x28]
	cmp r7, r0
	bne _020D1DB4
	mov r0, r7
	mov r1, r6
	bl FUN_020D1BF0
_020D1DB4:
	mov r0, r7
	bl FUN_020D1E20
	ldr r0, _020D1E18 @ =0x021E167C
	ldr r1, _020D1E1C @ =FUN_020D1C4C
	ldr r2, [r0, #0x1c]
	cmp r2, #0
	ldreq r0, [r7, #0x94]
	subeq r2, r0, #4
	mov r0, r7
	bl FUN_020D226C
	str r6, [r7, #4]
	ldr r1, [r7]
	mov r0, #1
	orr r1, r1, #0x80
	str r1, [r7]
	str r0, [r7, #0x64]
	bl FUN_020D21FC
	mov r0, r7
	mov r1, r5
	bl FUN_020D2058
	bl FUN_020D2230
	bl FUN_020D18B0
	mov r0, r4
	bl FUN_020D3A4C
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020D1E18: .4byte 0x021E167C
_020D1E1C: .4byte FUN_020D1C4C
	arm_func_end FUN_020D1D80

	arm_func_start FUN_020D1E20
FUN_020D1E20: @ 0x020D1E20
	push {r3, lr}
	ldr r0, [r0, #0xb0]
	cmp r0, #0
	popeq {r3, pc}
	bl FUN_020D3854
	pop {r3, pc}
	arm_func_end FUN_020D1E20

	arm_func_start FUN_020D1E38
FUN_020D1E38: @ 0x020D1E38
	push {r3, r4, r5, lr}
	mov r5, r0
	bl FUN_020D3A38
	ldr r1, [r5, #0x64]
	mov r4, r0
	cmp r1, #2
	beq _020D1E5C
	add r0, r5, #0x9c
	bl FUN_020D1E7C
_020D1E5C:
	mov r0, r4
	bl FUN_020D3A4C
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020D1E38

	arm_func_start FUN_020D1E68
FUN_020D1E68: @ 0x020D1E68
	ldr r0, [r0, #0x64]
	cmp r0, #2
	moveq r0, #1
	movne r0, #0
	bx lr
	arm_func_end FUN_020D1E68

	arm_func_start FUN_020D1E7C
FUN_020D1E7C: @ 0x020D1E7C
	push {r4, r5, r6, lr}
	mov r6, r0
	bl FUN_020D3A38
	ldr r1, _020D1EC8 @ =0x021E167C
	mov r4, r0
	ldr r0, [r1, #8]
	cmp r6, #0
	ldr r5, [r0]
	beq _020D1EB0
	mov r0, r6
	mov r1, r5
	str r6, [r5, #0x78]
	bl FUN_020D16D8
_020D1EB0:
	mov r0, #0
	str r0, [r5, #0x64]
	bl FUN_020D18B0
	mov r0, r4
	bl FUN_020D3A4C
	pop {r4, r5, r6, pc}
	.align 2, 0
_020D1EC8: .4byte 0x021E167C
	arm_func_end FUN_020D1E7C

	arm_func_start FUN_020D1ECC
FUN_020D1ECC: @ 0x020D1ECC
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	bl FUN_020D3A38
	ldr r1, [r7]
	mov r6, r0
	cmp r1, #0
	beq _020D1F28
	beq _020D1F18
	mov r5, #1
	mov r4, #0
_020D1EF4:
	mov r0, r7
	bl FUN_020D1750
	str r5, [r0, #0x64]
	str r4, [r0, #0x78]
	str r4, [r0, #0x80]
	str r4, [r0, #0x7c]
	ldr r0, [r7]
	cmp r0, #0
	bne _020D1EF4
_020D1F18:
	mov r0, #0
	str r0, [r7, #4]
	str r0, [r7]
	bl FUN_020D18B0
_020D1F28:
	mov r0, r6
	bl FUN_020D3A4C
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020D1ECC

	arm_func_start FUN_020D1F34
FUN_020D1F34: @ 0x020D1F34
	push {r3, r4, r5, lr}
	mov r5, r0
	bl FUN_020D3A38
	mov r1, #1
	mov r4, r0
	str r1, [r5, #0x64]
	bl FUN_020D18B0
	mov r0, r4
	bl FUN_020D3A4C
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020D1F34

	arm_func_start FUN_020D1F5C
FUN_020D1F5C: @ 0x020D1F5C
	ldr r0, _020D1F80 @ =0x021E167C
	ldr r0, [r0, #0x2c]
	b _020D1F6C
_020D1F68:
	ldr r0, [r0, #0x68]
_020D1F6C:
	cmp r0, #0
	ldrne r1, [r0, #0x64]
	cmpne r1, #1
	bne _020D1F68
	bx lr
	.align 2, 0
_020D1F80: .4byte 0x021E167C
	arm_func_end FUN_020D1F5C

	arm_func_start FUN_020D1F84
FUN_020D1F84: @ 0x020D1F84
	push {r4, lr}
	bl FUN_020D3A38
	mov r4, r0
	bl FUN_020D18B0
	mov r0, r4
	bl FUN_020D3A4C
	pop {r4, pc}
	arm_func_end FUN_020D1F84

	arm_func_start FUN_020D1FA0
FUN_020D1FA0: @ 0x020D1FA0
	push {r4, r5, r6, r7, r8, lr}
	ldr r0, _020D2054 @ =0x021E167C
	mov r4, #0
	mov r5, r4
	mov r6, r4
	ldr r8, [r0, #0x28]
	bl FUN_020D3A38
	ldr r1, _020D2054 @ =0x021E167C
	mov r7, r0
	ldr r1, [r1, #0x2c]
	mov r0, r4
	cmp r1, #0
	beq _020D2000
	ldr r2, [r8, #0x70]
_020D1FD8:
	cmp r1, r8
	moveq r4, r0
	ldr r0, [r1, #0x70]
	cmp r2, r0
	moveq r5, r1
	mov r0, r1
	ldr r1, [r1, #0x68]
	addeq r6, r6, #1
	cmp r1, #0
	bne _020D1FD8
_020D2000:
	cmp r6, #1
	ble _020D2010
	cmp r5, r8
	bne _020D201C
_020D2010:
	mov r0, r7
	bl FUN_020D3A4C
	pop {r4, r5, r6, r7, r8, pc}
_020D201C:
	cmp r4, #0
	ldrne r0, [r8, #0x68]
	strne r0, [r4, #0x68]
	bne _020D2038
	ldr r1, [r8, #0x68]
	ldr r0, _020D2054 @ =0x021E167C
	str r1, [r0, #0x2c]
_020D2038:
	ldr r0, [r5, #0x68]
	str r0, [r8, #0x68]
	str r8, [r5, #0x68]
	bl FUN_020D18B0
	mov r0, r7
	bl FUN_020D3A4C
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0
_020D2054: .4byte 0x021E167C
	arm_func_end FUN_020D1FA0

	arm_func_start FUN_020D2058
FUN_020D2058: @ 0x020D2058
	push {r4, r5, r6, r7, r8, lr}
	ldr r2, _020D20F8 @ =0x021E167C
	mov r7, r0
	mov r6, r1
	ldr r8, [r2, #0x2c]
	mov r4, #0
	bl FUN_020D3A38
	mov r5, r0
	b _020D2084
_020D207C:
	mov r4, r8
	ldr r8, [r8, #0x68]
_020D2084:
	cmp r8, #0
	cmpne r8, r7
	bne _020D207C
	cmp r8, #0
	ldrne r0, _020D20FC @ =0x021E16B0
	cmpne r8, r0
	bne _020D20B0
	mov r0, r5
	bl FUN_020D3A4C
	mov r0, #0
	pop {r4, r5, r6, r7, r8, pc}
_020D20B0:
	ldr r0, [r8, #0x70]
	cmp r0, r6
	beq _020D20E8
	cmp r4, #0
	ldrne r0, [r7, #0x68]
	strne r0, [r4, #0x68]
	bne _020D20D8
	ldr r1, [r7, #0x68]
	ldr r0, _020D20F8 @ =0x021E167C
	str r1, [r0, #0x2c]
_020D20D8:
	mov r0, r7
	str r6, [r7, #0x70]
	bl FUN_020D1808
	bl FUN_020D18B0
_020D20E8:
	mov r0, r5
	bl FUN_020D3A4C
	mov r0, #1
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0
_020D20F8: .4byte 0x021E167C
_020D20FC: .4byte 0x021E16B0
	arm_func_end FUN_020D2058

	arm_func_start FUN_020D2100
FUN_020D2100: @ 0x020D2100
	ldr r0, [r0, #0x70]
	bx lr
	arm_func_end FUN_020D2100

	arm_func_start FUN_020D2108
FUN_020D2108: @ 0x020D2108
	push {r4, r5, lr}
	sub sp, sp, #0x34
	mov r5, r0
	add r0, sp, #8
	bl FUN_020D36AC
	ldr r0, _020D2198 @ =0x021E167C
	ldr r0, [r0, #8]
	ldr r0, [r0]
	str r0, [sp, #4]
	bl FUN_020D3A38
	ldr r1, _020D219C @ =0x000082EA
	mov r4, r0
	umull r0, ip, r5, r1
	lsr r1, r0, #6
	ldr r3, [sp, #4]
	add r0, sp, #8
	str r0, [r3, #0xb0]
	add r2, sp, #4
	str r2, [sp]
	ldr r3, _020D21A0 @ =FUN_020D21A4
	lsr r2, ip, #6
	orr r1, r1, ip, lsl #26
	bl FUN_020D37E8
	ldr r0, [sp, #4]
	cmp r0, #0
	beq _020D2188
	mov r5, #0
_020D2174:
	mov r0, r5
	bl FUN_020D1E7C
	ldr r0, [sp, #4]
	cmp r0, #0
	bne _020D2174
_020D2188:
	mov r0, r4
	bl FUN_020D3A4C
	add sp, sp, #0x34
	pop {r4, r5, pc}
	.align 2, 0
_020D2198: .4byte 0x021E167C
_020D219C: .4byte 0x000082EA
_020D21A0: .4byte FUN_020D21A4
	arm_func_end FUN_020D2108

	arm_func_start FUN_020D21A4
FUN_020D21A4: @ 0x020D21A4
	ldr r2, [r0]
	mov r1, #0
	str r1, [r0]
	ldr ip, _020D21C0 @ =FUN_020D1F34
	mov r0, r2
	str r1, [r2, #0xb0]
	bx ip
	.align 2, 0
_020D21C0: .4byte FUN_020D1F34
	arm_func_end FUN_020D21A4

	arm_func_start FUN_020D21C4
FUN_020D21C4: @ 0x020D21C4
	push {r3, r4, r5, lr}
	mov r5, r0
	bl FUN_020D3A38
	ldr r1, _020D21E8 @ =0x021E167C
	ldr r4, [r1, #0x30]
	str r5, [r1, #0x30]
	bl FUN_020D3A4C
	mov r0, r4
	pop {r3, r4, r5, pc}
	.align 2, 0
_020D21E8: .4byte 0x021E167C
	arm_func_end FUN_020D21C4

	arm_func_start FUN_020D21EC
FUN_020D21EC: @ 0x020D21EC
	push {r3, lr}
	bl FUN_020D3A24
_020D21F4:
	bl FUN_020D3F58
	b _020D21F4
	arm_func_end FUN_020D21EC

	arm_func_start FUN_020D21FC
FUN_020D21FC: @ 0x020D21FC
	push {r4, lr}
	bl FUN_020D3A38
	ldr r2, _020D222C @ =0x021E167C
	mvn r1, #0
	ldr r3, [r2, #4]
	cmp r3, r1
	addlo r1, r3, #1
	movlo r4, r3
	strlo r1, [r2, #4]
	bl FUN_020D3A4C
	mov r0, r4
	pop {r4, pc}
	.align 2, 0
_020D222C: .4byte 0x021E167C
	arm_func_end FUN_020D21FC

	arm_func_start FUN_020D2230
FUN_020D2230: @ 0x020D2230
	push {r4, lr}
	bl FUN_020D3A38
	ldr r1, _020D2260 @ =0x021E167C
	mov r4, #0
	ldr r3, [r1, #4]
	cmp r3, #0
	subne r2, r3, #1
	movne r4, r3
	strne r2, [r1, #4]
	bl FUN_020D3A4C
	mov r0, r4
	pop {r4, pc}
	.align 2, 0
_020D2260: .4byte 0x021E167C
	arm_func_end FUN_020D2230

	arm_func_start FUN_020D2264
FUN_020D2264: @ 0x020D2264
	str r1, [r0, #0xb4]
	bx lr
	arm_func_end FUN_020D2264

	arm_func_start FUN_020D226C
FUN_020D226C: @ 0x020D226C
	add r1, r1, #4
	str r1, [r0, #0x40]
	str r2, [r0, #0x44]
	sub r2, r2, #0x40
	tst r2, #4
	subne r2, r2, #4
	str r2, [r0, #0x38]
	ands r1, r1, #1
	movne r1, #0x3f
	moveq r1, #0x1f
	str r1, [r0]
	mov r1, #0
	str r1, [r0, #4]
	str r1, [r0, #8]
	str r1, [r0, #0xc]
	str r1, [r0, #0x10]
	str r1, [r0, #0x14]
	str r1, [r0, #0x18]
	str r1, [r0, #0x1c]
	str r1, [r0, #0x20]
	str r1, [r0, #0x24]
	str r1, [r0, #0x28]
	str r1, [r0, #0x2c]
	str r1, [r0, #0x30]
	str r1, [r0, #0x34]
	str r1, [r0, #0x3c]
	bx lr
	arm_func_end FUN_020D226C

	arm_func_start FUN_020D22D8
FUN_020D22D8: @ 0x020D22D8
	push {r0, lr}
	add r0, r0, #0x48
	ldr r1, _020D2320 @ =FUN_020D9BF4
	blx r1
	pop {r0, lr}
	add r1, r0, #0
	mrs r2, apsr
	str r2, [r1], #4
	mov r0, #0xd3
	msr cpsr_c, r0
	str sp, [r1, #0x40]
	msr cpsr_c, r2
	mov r0, #1
	stm r1, {r0, r1, r2, r3, r4, r5, r6, r7, r8, sb, sl, fp, ip, sp, lr}
	add r0, pc, #0x8 @ =_020D2320
	str r0, [r1, #0x3c]
	mov r0, #0
	bx lr
	.align 2, 0
_020D2320: .4byte FUN_020D9BF4
	arm_func_end FUN_020D22D8

	arm_func_start FUN_020D2324
FUN_020D2324: @ 0x020D2324
	push {r0, lr}
	add r0, r0, #0x48
	ldr r1, _020D2364 @ =FUN_020D9C34
	blx r1
	pop {r0, lr}
	mrs r1, apsr
	bic r1, r1, #0x1f
	orr r1, r1, #0xd3
	msr cpsr_c, r1
	ldr r1, [r0], #4
	msr spsr_fsxc, r1
	ldr sp, [r0, #0x40]
	ldr lr, [r0, #0x3c]
	ldm r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, sb, sl, fp, ip, sp, lr} ^
	nop
	subs pc, lr, #4
	.align 2, 0
_020D2364: .4byte FUN_020D9C34
	arm_func_end FUN_020D2324

	arm_func_start FUN_020D2368
FUN_020D2368: @ 0x020D2368
	mov r0, #0
	bx lr
	arm_func_end FUN_020D2368

	arm_func_start FUN_020D2370
FUN_020D2370: @ 0x020D2370
	ldr r0, _020D2380 @ =0x82000001
	ldr r1, _020D2384 @ =_02110C94
	str r0, [r1]
	bx lr
	.align 2, 0
_020D2380: .4byte 0x82000001
_020D2384: .4byte _02110C94
	arm_func_end FUN_020D2370

	arm_func_start FUN_020D2388
FUN_020D2388: @ 0x020D2388
	mov r3, #0
	str r3, [r0, #4]
	str r3, [r0]
	str r3, [r0, #0xc]
	str r3, [r0, #8]
	str r1, [r0, #0x10]
	str r2, [r0, #0x14]
	str r3, [r0, #0x18]
	str r3, [r0, #0x1c]
	bx lr
	arm_func_end FUN_020D2388

	arm_func_start FUN_020D23B0
FUN_020D23B0: @ 0x020D23B0
	push {r3, r4, r5, r6, r7, lr}
	mov r5, r0
	mov r4, r1
	mov r7, r2
	bl FUN_020D3A38
	ldr r2, [r5, #0x1c]
	ldr r1, [r5, #0x14]
	mov r6, r0
	cmp r1, r2
	bgt _020D240C
	and r7, r7, #1
_020D23DC:
	cmp r7, #0
	bne _020D23F4
	mov r0, r6
	bl FUN_020D3A4C
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_020D23F4:
	mov r0, r5
	bl FUN_020D1E7C
	ldr r2, [r5, #0x1c]
	ldr r1, [r5, #0x14]
	cmp r1, r2
	ble _020D23DC
_020D240C:
	ldr r0, [r5, #0x18]
	add r0, r0, r2
	bl FUN_020F2998
	ldr r2, [r5, #0x10]
	add r0, r5, #8
	str r4, [r2, r1, lsl #2]
	ldr r1, [r5, #0x1c]
	add r1, r1, #1
	str r1, [r5, #0x1c]
	bl FUN_020D1ECC
	mov r0, r6
	bl FUN_020D3A4C
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020D23B0

	arm_func_start FUN_020D2444
FUN_020D2444: @ 0x020D2444
	push {r3, r4, r5, r6, r7, lr}
	mov r6, r0
	mov r5, r1
	mov r7, r2
	bl FUN_020D3A38
	ldr r1, [r6, #0x1c]
	mov r4, r0
	cmp r1, #0
	bne _020D2498
	and r7, r7, #1
_020D246C:
	cmp r7, #0
	bne _020D2484
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_020D2484:
	add r0, r6, #8
	bl FUN_020D1E7C
	ldr r0, [r6, #0x1c]
	cmp r0, #0
	beq _020D246C
_020D2498:
	cmp r5, #0
	beq _020D24B0
	ldr r1, [r6, #0x10]
	ldr r0, [r6, #0x18]
	ldr r0, [r1, r0, lsl #2]
	str r0, [r5]
_020D24B0:
	ldr r0, [r6, #0x18]
	ldr r1, [r6, #0x14]
	add r0, r0, #1
	bl FUN_020F2998
	str r1, [r6, #0x18]
	ldr r1, [r6, #0x1c]
	mov r0, r6
	sub r1, r1, #1
	str r1, [r6, #0x1c]
	bl FUN_020D1ECC
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020D2444

	arm_func_start FUN_020D24E8
FUN_020D24E8: @ 0x020D24E8
	push {r3, r4, r5, r6, r7, lr}
	mov r6, r0
	mov r5, r1
	mov r7, r2
	bl FUN_020D3A38
	ldr r1, [r6, #0x14]
	ldr r2, [r6, #0x1c]
	mov r4, r0
	cmp r1, r2
	bgt _020D2544
	and r7, r7, #1
_020D2514:
	cmp r7, #0
	bne _020D252C
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_020D252C:
	mov r0, r6
	bl FUN_020D1E7C
	ldr r1, [r6, #0x14]
	ldr r0, [r6, #0x1c]
	cmp r1, r0
	ble _020D2514
_020D2544:
	ldr r0, [r6, #0x18]
	add r0, r0, r1
	sub r0, r0, #1
	bl FUN_020F2998
	str r1, [r6, #0x18]
	ldr r0, [r6, #0x10]
	str r5, [r0, r1, lsl #2]
	ldr r1, [r6, #0x1c]
	add r0, r6, #8
	add r1, r1, #1
	str r1, [r6, #0x1c]
	bl FUN_020D1ECC
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020D24E8

	arm_func_start FUN_020D2584
FUN_020D2584: @ 0x020D2584
	push {r3, r4, r5, r6, r7, lr}
	mov r6, r0
	mov r5, r1
	mov r7, r2
	bl FUN_020D3A38
	ldr r1, [r6, #0x1c]
	mov r4, r0
	cmp r1, #0
	bne _020D25D8
	and r7, r7, #1
_020D25AC:
	cmp r7, #0
	bne _020D25C4
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_020D25C4:
	add r0, r6, #8
	bl FUN_020D1E7C
	ldr r0, [r6, #0x1c]
	cmp r0, #0
	beq _020D25AC
_020D25D8:
	cmp r5, #0
	beq _020D25F0
	ldr r1, [r6, #0x10]
	ldr r0, [r6, #0x18]
	ldr r0, [r1, r0, lsl #2]
	str r0, [r5]
_020D25F0:
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020D2584

	arm_func_start FUN_020D2600
FUN_020D2600: @ 0x020D2600
	mov r1, #0
	str r1, [r0, #4]
	str r1, [r0]
	str r1, [r0, #8]
	str r1, [r0, #0xc]
	bx lr
	arm_func_end FUN_020D2600

	arm_func_start FUN_020D2618
FUN_020D2618: @ 0x020D2618
	push {r3, r4, r5, r6, r7, lr}
	mov r5, r0
	bl FUN_020D3A38
	ldr r1, _020D2698 @ =0x021E16A0
	mov r4, r0
	ldr r7, [r1, #4]
	mov r6, #0
_020D2634:
	ldr r0, [r5, #8]
	cmp r0, #0
	bne _020D2660
	str r7, [r5, #8]
	ldr r1, [r5, #0xc]
	mov r0, r7
	add r2, r1, #1
	mov r1, r5
	str r2, [r5, #0xc]
	bl FUN_020D27A8
	b _020D268C
_020D2660:
	cmp r0, r7
	bne _020D2678
	ldr r0, [r5, #0xc]
	add r0, r0, #1
	str r0, [r5, #0xc]
	b _020D268C
_020D2678:
	mov r0, r5
	str r5, [r7, #0x84]
	bl FUN_020D1E7C
	str r6, [r7, #0x84]
	b _020D2634
_020D268C:
	mov r0, r4
	bl FUN_020D3A4C
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020D2698: .4byte 0x021E16A0
	arm_func_end FUN_020D2618

	arm_func_start FUN_020D269C
FUN_020D269C: @ 0x020D269C
	push {r3, r4, r5, lr}
	mov r5, r0
	bl FUN_020D3A38
	ldr r1, _020D26F4 @ =0x021E16A0
	mov r4, r0
	ldr r0, [r1, #4]
	ldr r1, [r5, #8]
	cmp r1, r0
	bne _020D26E8
	ldr r1, [r5, #0xc]
	subs r1, r1, #1
	str r1, [r5, #0xc]
	bne _020D26E8
	mov r1, r5
	bl FUN_020D27CC
	mov r1, #0
	mov r0, r5
	str r1, [r5, #8]
	bl FUN_020D1ECC
_020D26E8:
	mov r0, r4
	bl FUN_020D3A4C
	pop {r3, r4, r5, pc}
	.align 2, 0
_020D26F4: .4byte 0x021E16A0
	arm_func_end FUN_020D269C

	arm_func_start FUN_020D26F8
FUN_020D26F8: @ 0x020D26F8
	push {r3, r4, r5, lr}
	mov r5, r0
	ldr r0, [r5, #0x88]
	cmp r0, #0
	popeq {r3, r4, r5, pc}
	mov r4, #0
_020D2710:
	add r0, r5, #0x88
	bl FUN_020D17D8
	str r4, [r0, #0xc]
	str r4, [r0, #8]
	bl FUN_020D1ECC
	ldr r0, [r5, #0x88]
	cmp r0, #0
	bne _020D2710
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020D26F8

	arm_func_start FUN_020D2734
FUN_020D2734: @ 0x020D2734
	push {r4, r5, r6, lr}
	mov r5, r0
	bl FUN_020D3A38
	ldr r2, [r5, #8]
	ldr r1, _020D27A4 @ =0x021E16A0
	mov r4, r0
	cmp r2, #0
	ldr r0, [r1, #4]
	bne _020D2778
	str r0, [r5, #8]
	ldr r2, [r5, #0xc]
	mov r1, r5
	add r2, r2, #1
	str r2, [r5, #0xc]
	bl FUN_020D27A8
	mov r6, #1
	b _020D2794
_020D2778:
	cmp r2, r0
	movne r6, #0
	bne _020D2794
	ldr r0, [r5, #0xc]
	mov r6, #1
	add r0, r0, #1
	str r0, [r5, #0xc]
_020D2794:
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, r6
	pop {r4, r5, r6, pc}
	.align 2, 0
_020D27A4: .4byte 0x021E16A0
	arm_func_end FUN_020D2734

	arm_func_start FUN_020D27A8
FUN_020D27A8: @ 0x020D27A8
	ldr r2, [r0, #0x8c]
	cmp r2, #0
	streq r1, [r0, #0x88]
	strne r1, [r2, #0x10]
	str r2, [r1, #0x14]
	mov r2, #0
	str r2, [r1, #0x10]
	str r1, [r0, #0x8c]
	bx lr
	arm_func_end FUN_020D27A8

	arm_func_start FUN_020D27CC
FUN_020D27CC: @ 0x020D27CC
	ldr r2, [r1, #0x10]
	ldr r1, [r1, #0x14]
	cmp r2, #0
	streq r1, [r0, #0x8c]
	strne r1, [r2, #0x14]
	cmp r1, #0
	streq r2, [r0, #0x88]
	strne r2, [r1, #0x10]
	bx lr
	arm_func_end FUN_020D27CC

	arm_func_start FUN_020D27F0
FUN_020D27F0: @ 0x020D27F0
	mov r0, #0
	mcr p15, #0, r0, c7, c6, #0
	bx lr
	arm_func_end FUN_020D27F0

	arm_func_start FUN_020D27FC
FUN_020D27FC: @ 0x020D27FC
	mov r1, #0
_020D2800:
	mov r0, #0
_020D2804:
	orr r2, r1, r0
	mcr p15, #0, r2, c7, c10, #2
	add r0, r0, #0x20
	cmp r0, #0x400
	blt _020D2804
	add r1, r1, #0x40000000
	cmp r1, #0
	bne _020D2800
	bx lr
	arm_func_end FUN_020D27FC

	arm_func_start FUN_020D2828
FUN_020D2828: @ 0x020D2828
	mov ip, #0
	mov r1, #0
_020D2830:
	mov r0, #0
_020D2834:
	orr r2, r1, r0
	mcr p15, #0, ip, c7, c10, #4
	mcr p15, #0, r2, c7, c14, #2
	add r0, r0, #0x20
	cmp r0, #0x400
	blt _020D2834
	add r1, r1, #0x40000000
	cmp r1, #0
	bne _020D2830
	bx lr
	arm_func_end FUN_020D2828

	arm_func_start FUN_020D285C
FUN_020D285C: @ 0x020D285C
	add r1, r1, r0
	bic r0, r0, #0x1f
_020D2864:
	mcr p15, #0, r0, c7, c6, #1
	add r0, r0, #0x20
	cmp r0, r1
	blt _020D2864
	bx lr
	arm_func_end FUN_020D285C

	arm_func_start FUN_020D2878
FUN_020D2878: @ 0x020D2878
	add r1, r1, r0
	bic r0, r0, #0x1f
_020D2880:
	mcr p15, #0, r0, c7, c10, #1
	add r0, r0, #0x20
	cmp r0, r1
	blt _020D2880
	bx lr
	arm_func_end FUN_020D2878

	arm_func_start FUN_020D2894
FUN_020D2894: @ 0x020D2894
	mov ip, #0
	add r1, r1, r0
	bic r0, r0, #0x1f
_020D28A0:
	mcr p15, #0, ip, c7, c10, #4
	mcr p15, #0, r0, c7, c14, #1
	add r0, r0, #0x20
	cmp r0, r1
	blt _020D28A0
	bx lr
	arm_func_end FUN_020D2894

	arm_func_start FUN_020D28B8
FUN_020D28B8: @ 0x020D28B8
	mov r0, #0
	mcr p15, #0, r0, c7, c10, #4
	bx lr
	arm_func_end FUN_020D28B8

	arm_func_start FUN_020D28C4
FUN_020D28C4: @ 0x020D28C4
	mov r0, #0
	mcr p15, #0, r0, c7, c5, #0
	bx lr
	arm_func_end FUN_020D28C4

	arm_func_start FUN_020D28D0
FUN_020D28D0: @ 0x020D28D0
	add r1, r1, r0
	bic r0, r0, #0x1f
_020D28D8:
	mcr p15, #0, r0, c7, c5, #1
	add r0, r0, #0x20
	cmp r0, r1
	blt _020D28D8
	bx lr
	arm_func_end FUN_020D28D0

	arm_func_start FUN_020D28EC
FUN_020D28EC: @ 0x020D28EC
	mov ip, #0x4000000
	ldr r1, [ip, #0x208]
	str ip, [ip, #0x208]
_020D28F8:
	ldrh r0, [ip, #6]
	cmp r0, #0
	bne _020D28F8
	str r1, [ip, #0x208]
	bx lr
	arm_func_end FUN_020D28EC

	arm_func_start FUN_020D290C
FUN_020D290C: @ 0x020D290C
	push {r3, lr}
	bl FUN_020D2954
	bl FUN_020D6548
	bl FUN_020D1294
	bl FUN_020D2A58
	bl FUN_020D0FEC
	bl FUN_020D1260
	bl FUN_020D31A0
	bl FUN_020D502C
	bl FUN_020D39DC
	bl FUN_020D3CFC
	bl FUN_020D1978
	bl FUN_020D3AD0
	bl FUN_020E16E4
	bl FUN_020DD84C
	bl FUN_020DADE8
	bl FUN_020D28EC
	pop {r3, pc}
	arm_func_end FUN_020D290C

	arm_func_start FUN_020D2954
FUN_020D2954: @ 0x020D2954
	push {r3, lr}
	ldr r1, _020D2A54 @ =0x021E18F8
	ldr r0, [r1]
	cmp r0, #0
	popne {r3, pc}
	mov r2, #1
	mov r0, #0
	str r2, [r1]
	bl FUN_020D2AEC
	mov r1, r0
	mov r0, #0
	bl FUN_020D2C78
	mov r0, #0
	bl FUN_020D2BD0
	mov r1, r0
	mov r0, #0
	bl FUN_020D2C8C
	mov r0, #2
	mov r1, #0
	bl FUN_020D2C8C
	mov r0, #2
	mov r1, #0
	bl FUN_020D2C78
	mov r0, #3
	bl FUN_020D2AEC
	mov r1, r0
	mov r0, #3
	bl FUN_020D2C78
	mov r0, #3
	bl FUN_020D2BD0
	mov r1, r0
	mov r0, #3
	bl FUN_020D2C8C
	mov r0, #4
	bl FUN_020D2AEC
	mov r1, r0
	mov r0, #4
	bl FUN_020D2C78
	mov r0, #4
	bl FUN_020D2BD0
	mov r1, r0
	mov r0, #4
	bl FUN_020D2C8C
	mov r0, #5
	bl FUN_020D2AEC
	mov r1, r0
	mov r0, #5
	bl FUN_020D2C78
	mov r0, #5
	bl FUN_020D2BD0
	mov r1, r0
	mov r0, #5
	bl FUN_020D2C8C
	mov r0, #6
	bl FUN_020D2AEC
	mov r1, r0
	mov r0, #6
	bl FUN_020D2C78
	mov r0, #6
	bl FUN_020D2BD0
	mov r1, r0
	mov r0, #6
	bl FUN_020D2C8C
	pop {r3, pc}
	.align 2, 0
_020D2A54: .4byte 0x021E18F8
	arm_func_end FUN_020D2954

	arm_func_start FUN_020D2A58
FUN_020D2A58: @ 0x020D2A58
	push {r3, lr}
	mov r0, #2
	bl FUN_020D2AEC
	mov r1, r0
	mov r0, #2
	bl FUN_020D2C78
	mov r0, #2
	bl FUN_020D2BD0
	mov r1, r0
	mov r0, #2
	bl FUN_020D2C8C
	ldr r0, _020D2AB8 @ =0x021E18F8
	ldr r0, [r0, #4]
	cmp r0, #0
	beq _020D2AA4
	bl FUN_020D2370
	and r0, r0, #3
	cmp r0, #1
	popne {r3, pc}
_020D2AA4:
	ldr r0, _020D2ABC @ =0x0200002B
	bl FUN_020D3190
	ldr r0, _020D2AC0 @ =0x023E0021
	bl FUN_020D3198
	pop {r3, pc}
	.align 2, 0
_020D2AB8: .4byte 0x021E18F8
_020D2ABC: .4byte 0x0200002B
_020D2AC0: .4byte 0x023E0021
	arm_func_end FUN_020D2A58

	arm_func_start FUN_020D2AC4
FUN_020D2AC4: @ 0x020D2AC4
	lsl r0, r0, #2
	add r0, r0, #0x2700000
	add r0, r0, #0xff000
	ldr r0, [r0, #0xdc4]
	bx lr
	arm_func_end FUN_020D2AC4

	arm_func_start FUN_020D2AD8
FUN_020D2AD8: @ 0x020D2AD8
	lsl r0, r0, #2
	add r0, r0, #0x2700000
	add r0, r0, #0xff000
	ldr r0, [r0, #0xda0]
	bx lr
	arm_func_end FUN_020D2AD8

	arm_func_start FUN_020D2AEC
FUN_020D2AEC: @ 0x020D2AEC
	push {r3, lr}
	cmp r0, #6
	addls pc, pc, r0, lsl #2
	b _020D2BA8
_020D2AFC: @ jump table
	b _020D2B18 @ case 0
	b _020D2BA8 @ case 1
	b _020D2B20 @ case 2
	b _020D2B50 @ case 3
	b _020D2B58 @ case 4
	b _020D2B98 @ case 5
	b _020D2BA0 @ case 6
_020D2B18:
	ldr r0, _020D2BB0 @ =0x023E0000
	pop {r3, pc}
_020D2B20:
	ldr r0, _020D2BB4 @ =0x021E18F8
	ldr r0, [r0, #4]
	cmp r0, #0
	beq _020D2B40
	bl FUN_020D2370
	and r0, r0, #3
	cmp r0, #1
	bne _020D2B48
_020D2B40:
	mov r0, #0
	pop {r3, pc}
_020D2B48:
	mov r0, #0x2700000
	pop {r3, pc}
_020D2B50:
	mov r0, #0x2000000
	pop {r3, pc}
_020D2B58:
	ldr r0, _020D2BB8 @ =OSi_IntrTable
	ldr r1, _020D2BBC @ =0x00000000
	ldr r2, _020D2BC0 @ =0x00000800
	add r3, r0, #0x3f80
	cmp r1, #0
	sub r2, r3, r2
	bne _020D2B84
	ldr r1, _020D2BC4 @ =0x027E0080
	cmp r0, r1
	movlo r0, r1
	pop {r3, pc}
_020D2B84:
	cmp r1, #0
	ldrlt r0, _020D2BC4 @ =0x027E0080
	sublt r0, r0, r1
	subge r0, r2, r1
	pop {r3, pc}
_020D2B98:
	ldr r0, _020D2BC8 @ =0x027FF680
	pop {r3, pc}
_020D2BA0:
	ldr r0, _020D2BCC @ =0x037F8000
	pop {r3, pc}
_020D2BA8:
	mov r0, #0
	pop {r3, pc}
	.align 2, 0
_020D2BB0: .4byte 0x023E0000
_020D2BB4: .4byte 0x021E18F8
_020D2BB8: .4byte OSi_IntrTable
_020D2BBC: .4byte 0x00000000
_020D2BC0: .4byte 0x00000800
_020D2BC4: .4byte 0x027E0080
_020D2BC8: .4byte 0x027FF680
_020D2BCC: .4byte 0x037F8000
	arm_func_end FUN_020D2AEC

	arm_func_start FUN_020D2BD0
FUN_020D2BD0: @ 0x020D2BD0
	push {r3, lr}
	cmp r0, #6
	addls pc, pc, r0, lsl #2
	b _020D2C54
_020D2BE0: @ jump table
	b _020D2BFC @ case 0
	b _020D2C54 @ case 1
	b _020D2C04 @ case 2
	b _020D2C34 @ case 3
	b _020D2C3C @ case 4
	b _020D2C44 @ case 5
	b _020D2C4C @ case 6
_020D2BFC:
	ldr r0, _020D2C5C @ =0x0226EC40
	pop {r3, pc}
_020D2C04:
	ldr r0, _020D2C60 @ =0x021E18F8
	ldr r0, [r0, #4]
	cmp r0, #0
	beq _020D2C24
	bl FUN_020D2370
	and r0, r0, #3
	cmp r0, #1
	bne _020D2C2C
_020D2C24:
	mov r0, #0
	pop {r3, pc}
_020D2C2C:
	ldr r0, _020D2C64 @ =0x023E0000
	pop {r3, pc}
_020D2C34:
	ldr r0, _020D2C68 @ =0x01FF8620
	pop {r3, pc}
_020D2C3C:
	ldr r0, _020D2C6C @ =0x027E0080
	pop {r3, pc}
_020D2C44:
	ldr r0, _020D2C70 @ =0x027FF000
	pop {r3, pc}
_020D2C4C:
	ldr r0, _020D2C74 @ =0x037F8000
	pop {r3, pc}
_020D2C54:
	mov r0, #0
	pop {r3, pc}
	.align 2, 0
_020D2C5C: .4byte 0x0226EC40
_020D2C60: .4byte 0x021E18F8
_020D2C64: .4byte 0x023E0000
_020D2C68: .4byte 0x01FF8620
_020D2C6C: .4byte 0x027E0080
_020D2C70: .4byte 0x027FF000
_020D2C74: .4byte 0x037F8000
	arm_func_end FUN_020D2BD0

	arm_func_start FUN_020D2C78
FUN_020D2C78: @ 0x020D2C78
	lsl r0, r0, #2
	add r0, r0, #0x2700000
	add r0, r0, #0xff000
	str r1, [r0, #0xdc4]
	bx lr
	arm_func_end FUN_020D2C78

	arm_func_start FUN_020D2C8C
FUN_020D2C8C: @ 0x020D2C8C
	lsl r0, r0, #2
	add r0, r0, #0x2700000
	add r0, r0, #0xff000
	str r1, [r0, #0xda0]
	bx lr
	arm_func_end FUN_020D2C8C

	arm_func_start FUN_020D2CA0
FUN_020D2CA0: @ 0x020D2CA0
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	mov r6, r1
	mov r5, r2
	bl FUN_020D2AD8
	cmp r0, #0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	add r0, r0, r5
	sub r1, r5, #1
	mvn r2, r1
	sub r0, r0, #1
	and r4, r2, r0
	add r0, r4, r6
	add r0, r0, r5
	sub r1, r0, #1
	mov r0, r7
	and r5, r2, r1
	bl FUN_020D2AC4
	cmp r5, r0
	movhi r0, #0
	pophi {r3, r4, r5, r6, r7, pc}
	mov r0, r7
	mov r1, r5
	bl FUN_020D2C8C
	mov r0, r4
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020D2CA0

	arm_func_start FUN_020D2D0C
FUN_020D2D0C: @ 0x020D2D0C
	push {r4, r5, r6, lr}
	mov r4, r0
	mov r6, r1
	mov r5, r2
	bl FUN_020D2AC4
	cmp r0, #0
	moveq r0, #0
	popeq {r4, r5, r6, pc}
	sub r1, r5, #1
	mvn r2, r1
	and r0, r0, r2
	sub r1, r0, r6
	mov r0, r4
	and r5, r1, r2
	bl FUN_020D2AD8
	cmp r5, r0
	movlo r0, #0
	poplo {r4, r5, r6, pc}
	mov r0, r4
	mov r1, r5
	bl FUN_020D2C78
	mov r0, r5
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020D2D0C

	arm_func_start FUN_020D2D68
FUN_020D2D68: @ 0x020D2D68
	str r0, [r1, #4]
	mov r2, #0
	str r2, [r1]
	cmp r0, #0
	strne r1, [r0]
	mov r0, r1
	bx lr
	arm_func_end FUN_020D2D68

	arm_func_start FUN_020D2D84
FUN_020D2D84: @ 0x020D2D84
	ldr r3, [r1, #4]
	cmp r3, #0
	ldrne r2, [r1]
	strne r2, [r3]
	ldr r2, [r1]
	cmp r2, #0
	ldreq r0, [r1, #4]
	ldrne r1, [r1, #4]
	strne r1, [r2, #4]
	bx lr
	arm_func_end FUN_020D2D84

	arm_func_start FUN_020D2DAC
FUN_020D2DAC: @ 0x020D2DAC
	push {r3, lr}
	mov lr, r0
	cmp r0, #0
	mov ip, #0
	beq _020D2DD8
_020D2DC0:
	cmp r1, lr
	bls _020D2DD8
	mov ip, lr
	ldr lr, [lr, #4]
	cmp lr, #0
	bne _020D2DC0
_020D2DD8:
	stm r1, {ip, lr}
	cmp lr, #0
	beq _020D2E14
	str r1, [lr]
	ldr r3, [r1, #8]
	add r2, r1, r3
	cmp r2, lr
	bne _020D2E14
	ldr r2, [lr, #8]
	add r2, r3, r2
	str r2, [r1, #8]
	ldr lr, [lr, #4]
	str lr, [r1, #4]
	cmp lr, #0
	strne r1, [lr]
_020D2E14:
	cmp ip, #0
	beq _020D2E4C
	str r1, [ip, #4]
	ldr r2, [ip, #8]
	add r3, ip, r2
	cmp r3, r1
	popne {r3, pc}
	ldr r1, [r1, #8]
	cmp lr, #0
	add r1, r2, r1
	str r1, [ip, #8]
	str lr, [ip, #4]
	strne ip, [lr]
	pop {r3, pc}
_020D2E4C:
	mov r0, r1
	pop {r3, pc}
	arm_func_end FUN_020D2DAC

	arm_func_start FUN_020D2E54
FUN_020D2E54: @ 0x020D2E54
	push {r3, r4, r5, r6, r7, lr}
	mov r4, r0
	mov r5, r1
	mov r7, r2
	bl FUN_020D3A38
	ldr r1, _020D2F58 @ =0x021E1900
	mov r6, r0
	ldr r1, [r1, r4, lsl #2]
	cmp r1, #0
	bne _020D2E88
	bl FUN_020D3A4C
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_020D2E88:
	cmp r5, #0
	ldrlt r5, [r1]
	ldr r1, [r1, #0x10]
	mov r0, #0xc
	mla r4, r5, r0, r1
	ldr r0, [r4, #4]
	add r1, r7, #0x3f
	mov r5, r0
	cmp r0, #0
	bic r7, r1, #0x1f
	beq _020D2ECC
_020D2EB4:
	ldr r1, [r5, #8]
	cmp r7, r1
	ble _020D2ECC
	ldr r5, [r5, #4]
	cmp r5, #0
	bne _020D2EB4
_020D2ECC:
	cmp r5, #0
	bne _020D2EE4
	mov r0, r6
	bl FUN_020D3A4C
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_020D2EE4:
	ldr r1, [r5, #8]
	sub r1, r1, r7
	cmp r1, #0x40
	bhs _020D2F04
	mov r1, r5
	bl FUN_020D2D84
	str r0, [r4, #4]
	b _020D2F38
_020D2F04:
	str r7, [r5, #8]
	add r2, r5, r7
	str r1, [r2, #8]
	ldr r0, [r5]
	str r0, [r5, r7]
	ldr r0, [r5, #4]
	str r0, [r2, #4]
	cmp r0, #0
	strne r2, [r0]
	ldr r0, [r2]
	cmp r0, #0
	strne r2, [r0, #4]
	streq r2, [r4, #4]
_020D2F38:
	ldr r0, [r4, #8]
	mov r1, r5
	bl FUN_020D2D68
	str r0, [r4, #8]
	mov r0, r6
	bl FUN_020D3A4C
	add r0, r5, #0x20
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020D2F58: .4byte 0x021E1900
	arm_func_end FUN_020D2E54

	arm_func_start FUN_020D2F5C
FUN_020D2F5C: @ 0x020D2F5C
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	mov r6, r1
	mov r5, r2
	bl FUN_020D3A38
	ldr r1, _020D2FC0 @ =0x021E1900
	mov r4, r0
	ldr r0, [r1, r7, lsl #2]
	cmp r6, #0
	ldrlt r6, [r0]
	ldr r1, [r0, #0x10]
	mov r0, #0xc
	mla r7, r6, r0, r1
	sub r5, r5, #0x20
	ldr r0, [r7, #8]
	mov r1, r5
	bl FUN_020D2D84
	str r0, [r7, #8]
	ldr r0, [r7, #4]
	mov r1, r5
	bl FUN_020D2DAC
	str r0, [r7, #4]
	mov r0, r4
	bl FUN_020D3A4C
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020D2FC0: .4byte 0x021E1900
	arm_func_end FUN_020D2F5C

	arm_func_start FUN_020D2FC4
FUN_020D2FC4: @ 0x020D2FC4
	push {r3, r4, r5, lr}
	mov r4, r0
	mov r5, r1
	bl FUN_020D3A38
	ldr r1, _020D2FF0 @ =0x021E1900
	ldr r1, [r1, r4, lsl #2]
	ldr r4, [r1]
	str r5, [r1]
	bl FUN_020D3A4C
	mov r0, r4
	pop {r3, r4, r5, pc}
	.align 2, 0
_020D2FF0: .4byte 0x021E1900
	arm_func_end FUN_020D2FC4

	arm_func_start FUN_020D2FF4
FUN_020D2FF4: @ 0x020D2FF4
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	mov r5, r1
	mov r4, r2
	mov r6, r3
	bl FUN_020D3A38
	ldr r2, _020D3098 @ =0x021E1900
	mov r1, #0xc
	str r5, [r2, r7, lsl #2]
	add r2, r5, #0x14
	str r2, [r5, #0x10]
	mul r1, r6, r1
	str r6, [r5, #4]
	cmp r6, #0
	mov lr, #0
	ble _020D3068
	mov r6, lr
	mvn ip, #0
	mov r3, lr
_020D3040:
	ldr r2, [r5, #0x10]
	add lr, lr, #1
	str ip, [r2, r6]
	add r2, r2, r6
	str r3, [r2, #8]
	str r3, [r2, #4]
	ldr r2, [r5, #4]
	add r6, r6, #0xc
	cmp lr, r2
	blt _020D3040
_020D3068:
	mvn r2, #0
	str r2, [r5]
	ldr r3, [r5, #0x10]
	bic r2, r4, #0x1f
	add r1, r3, r1
	add r1, r1, #0x1f
	bic r1, r1, #0x1f
	str r1, [r5, #8]
	str r2, [r5, #0xc]
	bl FUN_020D3A4C
	ldr r0, [r5, #8]
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020D3098: .4byte 0x021E1900
	arm_func_end FUN_020D2FF4

	arm_func_start FUN_020D309C
FUN_020D309C: @ 0x020D309C
	ldr r1, _020D30AC @ =0x021E1900
	mov r2, #0
	str r2, [r1, r0, lsl #2]
	bx lr
	.align 2, 0
_020D30AC: .4byte 0x021E1900
	arm_func_end FUN_020D309C

	arm_func_start FUN_020D30B0
FUN_020D30B0: @ 0x020D30B0
	push {r4, r5, r6, lr}
	mov r4, r0
	mov r6, r1
	mov r5, r2
	bl FUN_020D3A38
	ldr r2, _020D3144 @ =0x021E1900
	add r1, r6, #0x1f
	ldr r2, [r2, r4, lsl #2]
	bic r6, r1, #0x1f
	ldr ip, [r2, #4]
	bic r5, r5, #0x1f
	cmp ip, #0
	mov r4, #0
	ble _020D3138
	ldr r3, [r2, #0x10]
_020D30EC:
	ldr r1, [r3]
	cmp r1, #0
	bge _020D3128
	sub r1, r5, r6
	str r1, [r3]
	mov r2, #0
	str r2, [r6]
	str r2, [r6, #4]
	ldr r1, [r3]
	str r1, [r6, #8]
	str r6, [r3, #4]
	str r2, [r3, #8]
	bl FUN_020D3A4C
	mov r0, r4
	pop {r4, r5, r6, pc}
_020D3128:
	add r4, r4, #1
	cmp r4, ip
	add r3, r3, #0xc
	blt _020D30EC
_020D3138:
	bl FUN_020D3A4C
	mvn r0, #0
	pop {r4, r5, r6, pc}
	.align 2, 0
_020D3144: .4byte 0x021E1900
	arm_func_end FUN_020D30B0

	arm_func_start FUN_020D3148
FUN_020D3148: @ 0x020D3148
	mrc p15, #0, r0, c9, c1, #0
	ldr r1, _020D3158 @ =0xFFFFF000
	and r0, r0, r1
	bx lr
	.align 2, 0
_020D3158: .4byte 0xFFFFF000
	arm_func_end FUN_020D3148

	arm_func_start FUN_020D315C
FUN_020D315C: @ 0x020D315C
	mrc p15, #0, r0, c1, c0, #0
	orr r0, r0, #1
	mcr p15, #0, r0, c1, c0, #0
	bx lr
	arm_func_end FUN_020D315C

	arm_func_start FUN_020D316C
FUN_020D316C: @ 0x020D316C
	mrc p15, #0, r0, c1, c0, #0
	bic r0, r0, #1
	mcr p15, #0, r0, c1, c0, #0
	bx lr
	arm_func_end FUN_020D316C

	arm_func_start FUN_020D317C
FUN_020D317C: @ 0x020D317C
	mrc p15, #0, r2, c5, c0, #2
	bic r2, r2, r0
	orr r2, r2, r1
	mcr p15, #0, r2, c5, c0, #2
	bx lr
	arm_func_end FUN_020D317C

	arm_func_start FUN_020D3190
FUN_020D3190: @ 0x020D3190
	mcr p15, #0, r0, c6, c1, #0
	bx lr
	arm_func_end FUN_020D3190

	arm_func_start FUN_020D3198
FUN_020D3198: @ 0x020D3198
	mcr p15, #0, r0, c6, c2, #0
	bx lr
	arm_func_end FUN_020D3198

	arm_func_start FUN_020D31A0
FUN_020D31A0: @ 0x020D31A0
	ldr r0, _020D3200 @ =0x027FFD9C
	ldr r1, [r0]
	cmp r1, #0x2600000
	blo _020D31C0
	cmp r1, #0x2800000
	ldrlo r0, _020D3204 @ =0x021E1924
	strlo r1, [r0]
	blo _020D31CC
_020D31C0:
	ldr r0, _020D3204 @ =0x021E1924
	mov r1, #0
	str r1, [r0]
_020D31CC:
	ldr r0, _020D3204 @ =0x021E1924
	ldr r0, [r0]
	cmp r0, #0
	bne _020D31F0
	ldr r2, _020D3208 @ =FUN_020D3210
	ldr r1, _020D3200 @ =0x027FFD9C
	ldr r0, _020D320C @ =0x027E3000
	str r2, [r1]
	str r2, [r0, #0xfdc]
_020D31F0:
	ldr r0, _020D3204 @ =0x021E1924
	mov r1, #0
	str r1, [r0, #8]
	bx lr
	.align 2, 0
_020D3200: .4byte 0x027FFD9C
_020D3204: .4byte 0x021E1924
_020D3208: .4byte FUN_020D3210
_020D320C: .4byte 0x027E3000
	arm_func_end FUN_020D31A0

	arm_func_start FUN_020D3210
FUN_020D3210: @ 0x020D3210
	ldr ip, _020D327C @ =0x021E1924
	ldr ip, [ip]
	cmp ip, #0
	movne lr, pc
	bxne ip
	ldr ip, _020D3280 @ =_secure
	stmdb ip!, {r0, r1, r2, r3, sp, lr}
	and r0, sp, #1
	mov sp, ip
	mrs r1, apsr
	and r1, r1, #0x1f
	teq r1, #0x17
	bne _020D324C
	bl FUN_020D3284
	b _020D3258
_020D324C:
	teq r1, #0x1b
	bne _020D3258
	bl FUN_020D3284
_020D3258:
	ldr ip, _020D327C @ =0x021E1924
	ldr ip, [ip]
	cmp ip, #0
_020D3264:
	beq _020D3264
_020D3268:
	nop
	b _020D3268
	arm_func_end FUN_020D3210

	arm_func_start FUN_020D3270
FUN_020D3270: @ 0x020D3270
	pop {r0, r1, r2, r3, ip, lr}
	mov sp, ip
	bx lr
	.align 2, 0
_020D327C: .4byte 0x021E1924
_020D3280: .4byte _secure
	arm_func_end FUN_020D3270

	arm_func_start FUN_020D3284
FUN_020D3284: @ 0x020D3284
	push {r0, lr}
	bl FUN_020D3298
	bl FUN_020D3328
	pop {r0, lr}
	bx lr
	arm_func_end FUN_020D3284

	arm_func_start FUN_020D3298
FUN_020D3298: @ 0x020D3298
	ldr r1, _020D3324 @ =0x021E1950
	mrs r2, apsr
	str r2, [r1, #0x74]
	str r0, [r1, #0x6c]
	ldr r0, [ip]
	str r0, [r1, #4]
	ldr r0, [ip, #4]
	str r0, [r1, #8]
	ldr r0, [ip, #8]
	str r0, [r1, #0xc]
	ldr r0, [ip, #0xc]
	str r0, [r1, #0x10]
	ldr r2, [ip, #0x10]
	bic r2, r2, #1
	add r0, r1, #0x14
	stm r0, {r4, r5, r6, r7, r8, sb, sl, fp}
	str ip, [r1, #0x70]
	ldr r0, [r2]
	str r0, [r1, #0x64]
	ldr r3, [r2, #4]
	str r3, [r1]
	ldr r0, [r2, #8]
	str r0, [r1, #0x34]
	ldr r0, [r2, #0xc]
	str r0, [r1, #0x40]
	mrs r0, apsr
	orr r3, r3, #0x80
	bic r3, r3, #0x20
	msr cpsr_fsxc, r3
	str sp, [r1, #0x38]
	str lr, [r1, #0x3c]
	mrs r2, spsr
	str r2, [r1, #0x7c]
	msr cpsr_fsxc, r0
	bx lr
	.align 2, 0
_020D3324: .4byte 0x021E1950
	arm_func_end FUN_020D3298

	arm_func_start FUN_020D3328
FUN_020D3328: @ 0x020D3328
	push {r3, lr}
	ldr r0, _020D338C @ =0x021E1924
	ldr r0, [r0, #8]
	cmp r0, #0
	popeq {r3, pc}
	mrs r2, apsr
	mov r0, sp
	ldr r1, _020D3390 @ =0x0000009F
	msr cpsr_fsxc, r1
	mov r1, sp
	mov sp, r0
	push {r1, r2}
	bl FUN_020D315C
	ldr r0, _020D3394 @ =0x021E1950
	ldr r1, _020D3398 @ =0x021E1928
	ldr r1, [r1]
	ldr ip, _020D339C @ =0x021E192C
	ldr ip, [ip]
	ldr lr, _020D33A0 @ =FUN_020D3378
	bx ip
	arm_func_end FUN_020D3328

	arm_func_start FUN_020D3378
FUN_020D3378: @ 0x020D3378
	bl FUN_020D316C
	pop {r1, r2}
	mov sp, r1
	msr cpsr_fsxc, r2
	pop {r3, pc}
	.align 2, 0
_020D338C: .4byte 0x021E1924
_020D3390: .4byte 0x0000009F
_020D3394: .4byte 0x021E1950
_020D3398: .4byte 0x021E1928
_020D339C: .4byte 0x021E192C
_020D33A0: .4byte FUN_020D3378
	arm_func_end FUN_020D3378

	arm_func_start FUN_020D33A4
FUN_020D33A4: @ 0x020D33A4
	ldr r1, _020D33BC @ =0x021E19D0
	mov r2, #1
	ldrh r3, [r1]
	orr r0, r3, r2, lsl r0
	strh r0, [r1]
	bx lr
	.align 2, 0
_020D33BC: .4byte 0x021E19D0
	arm_func_end FUN_020D33A4

	arm_func_start FUN_020D33C0
FUN_020D33C0: @ 0x020D33C0
	push {r3, lr}
	ldr r1, _020D342C @ =0x021E19D4
	ldrh r0, [r1]
	cmp r0, #0
	popne {r3, pc}
	mov r2, #1
	mov r0, #0
	strh r2, [r1]
	bl FUN_020D33A4
	ldr r0, _020D342C @ =0x021E19D4
	mov r2, #0
	str r2, [r0, #8]
	ldr r3, _020D3430 @ =0x04000102
	str r2, [r0, #0xc]
	strh r2, [r3]
	ldr r1, _020D3434 @ =FUN_020D3448
	strh r2, [r3, #-2]
	mov r2, #0xc1
	mov r0, #8
	strh r2, [r3]
	bl FUN_020D1004
	mov r0, #8
	bl FUN_020D11D4
	ldr r0, _020D342C @ =0x021E19D4
	mov r1, #0
	str r1, [r0, #4]
	pop {r3, pc}
	.align 2, 0
_020D342C: .4byte 0x021E19D4
_020D3430: .4byte 0x04000102
_020D3434: .4byte FUN_020D3448
	arm_func_end FUN_020D33C0

	arm_func_start FUN_020D3438
FUN_020D3438: @ 0x020D3438
	ldr r0, _020D3444 @ =0x021E19D4
	ldrh r0, [r0]
	bx lr
	.align 2, 0
_020D3444: .4byte 0x021E19D4
	arm_func_end FUN_020D3438

	arm_func_start FUN_020D3448
FUN_020D3448: @ 0x020D3448
	ldr r0, _020D34A0 @ =0x021E19D4
	mov r3, #0
	ldr r2, [r0, #8]
	ldr r1, [r0, #0xc]
	adds r2, r2, #1
	str r2, [r0, #8]
	adc r1, r1, #0
	str r1, [r0, #0xc]
	ldr r1, [r0, #4]
	cmp r1, #0
	beq _020D348C
	ldr r2, _020D34A4 @ =0x04000102
	mov r1, #0xc1
	strh r3, [r2]
	strh r3, [r2, #-2]
	strh r1, [r2]
	str r3, [r0, #4]
_020D348C:
	ldr ip, _020D34A8 @ =FUN_020D1160
	mov r0, #0
	ldr r1, _020D34AC @ =FUN_020D3448
	mov r2, r0
	bx ip
	.align 2, 0
_020D34A0: .4byte 0x021E19D4
_020D34A4: .4byte 0x04000102
_020D34A8: .4byte FUN_020D1160
_020D34AC: .4byte FUN_020D3448
	arm_func_end FUN_020D3448

	arm_func_start FUN_020D34B0
FUN_020D34B0: @ 0x020D34B0
	stmdb sp!, {lr}
	sub sp, sp, #0xc
	bl FUN_020D3A38
	ldr lr, _020D3544 @ =0x04000100
	ldr r2, _020D3548 @ =0x0000FFFF
	ldrh ip, [lr]
	ldr r3, _020D354C @ =0x021E19D4
	sub r1, r2, #0x10000
	strh ip, [sp]
	ldr ip, [r3, #8]
	ldr r3, [r3, #0xc]
	and ip, ip, r1
	and r1, r3, r2
	str ip, [sp, #4]
	str r1, [sp, #8]
	ldr r1, [lr, #0x114]
	tst r1, #8
	beq _020D351C
	ldrh r1, [sp]
	tst r1, #0x8000
	bne _020D351C
	ldr r2, [sp, #4]
	ldr r1, [sp, #8]
	adds r2, r2, #1
	adc r1, r1, #0
	str r2, [sp, #4]
	str r1, [sp, #8]
_020D351C:
	bl FUN_020D3A4C
	ldr r2, [sp, #4]
	ldr r1, [sp, #8]
	ldrh r0, [sp]
	lsl r1, r1, #0x10
	orr r1, r1, r2, lsr #16
	orr r1, r1, r0, asr #31
	orr r0, r0, r2, lsl #16
	add sp, sp, #0xc
	ldm sp!, {pc}
	.align 2, 0
_020D3544: .4byte 0x04000100
_020D3548: .4byte 0x0000FFFF
_020D354C: .4byte 0x021E19D4
	arm_func_end FUN_020D34B0

	arm_func_start FUN_020D3550
FUN_020D3550: @ 0x020D3550
	ldr r0, _020D355C @ =0x04000100
	ldrh r0, [r0]
	bx lr
	.align 2, 0
_020D355C: .4byte 0x04000100
	arm_func_end FUN_020D3550

	arm_func_start FUN_020D3560
FUN_020D3560: @ 0x020D3560
	push {r4, r5, r6, lr}
	mov r5, r0
	mov r4, r1
	bl FUN_020D3A38
	lsr r3, r5, #0x10
	mov ip, #1
	rsb r1, ip, #0x10000
	ldr lr, _020D35C4 @ =0x04000214
	mov r6, #8
	ldr r2, _020D35C8 @ =0x021E19D4
	str r6, [lr]
	str ip, [r2, #4]
	orr r3, r3, r4, lsl #16
	str r3, [r2, #8]
	lsr r4, r4, #0x10
	ldr r3, _020D35CC @ =0x04000102
	str r4, [r2, #0xc]
	mov r2, #0
	strh r2, [r3]
	and r1, r5, r1
	strh r1, [r3, #-2]
	mov r1, #0xc1
	strh r1, [r3]
	bl FUN_020D3A4C
	pop {r4, r5, r6, pc}
	.align 2, 0
_020D35C4: .4byte 0x04000214
_020D35C8: .4byte 0x021E19D4
_020D35CC: .4byte 0x04000102
	arm_func_end FUN_020D3560

	arm_func_start FUN_020D35D0
FUN_020D35D0: @ 0x020D35D0
	push {r3, r4, r5, lr}
	mov r4, r0
	bl FUN_020D34B0
	ldr r3, _020D364C @ =0x04000106
	mov r2, #0
	strh r2, [r3]
	ldr ip, [r4, #0xc]
	ldr r3, [r4, #0x10]
	subs r5, ip, r0
	sbc r4, r3, r1
	ldr r1, _020D3650 @ =FUN_020D38DC
	mov r0, #1
	bl FUN_020D1160
	subs r0, r5, #0
	mov r3, #0
	sbcs r0, r4, #0
	ldrlt r3, _020D3654 @ =0x0000FFFE
	blt _020D3630
	subs r0, r5, #0x10000
	sbcs r0, r4, r3
	bge _020D3630
	mvn r0, r5
	lsl r0, r0, #0x10
	lsr r3, r0, #0x10
_020D3630:
	ldr r2, _020D3658 @ =0x04000104
	mov r1, #0xc1
	strh r3, [r2]
	mov r0, #0x10
	strh r1, [r2, #2]
	bl FUN_020D11D4
	pop {r3, r4, r5, pc}
	.align 2, 0
_020D364C: .4byte 0x04000106
_020D3650: .4byte FUN_020D38DC
_020D3654: .4byte 0x0000FFFE
_020D3658: .4byte 0x04000104
	arm_func_end FUN_020D35D0

	arm_func_start FUN_020D365C
FUN_020D365C: @ 0x020D365C
	push {r3, lr}
	ldr r1, _020D3698 @ =0x021E19E4
	ldrh r0, [r1]
	cmp r0, #0
	popne {r3, pc}
	mov r0, #1
	strh r0, [r1]
	bl FUN_020D33A4
	ldr r1, _020D3698 @ =0x021E19E4
	mov r2, #0
	str r2, [r1, #4]
	mov r0, #0x10
	str r2, [r1, #8]
	bl FUN_020D1204
	pop {r3, pc}
	.align 2, 0
_020D3698: .4byte 0x021E19E4
	arm_func_end FUN_020D365C

	arm_func_start FUN_020D369C
FUN_020D369C: @ 0x020D369C
	ldr r0, _020D36A8 @ =0x021E19E4
	ldrh r0, [r0]
	bx lr
	.align 2, 0
_020D36A8: .4byte 0x021E19E4
	arm_func_end FUN_020D369C

	arm_func_start FUN_020D36AC
FUN_020D36AC: @ 0x020D36AC
	mov r1, #0
	str r1, [r0]
	str r1, [r0, #8]
	bx lr
	arm_func_end FUN_020D36AC

	arm_func_start FUN_020D36BC
FUN_020D36BC: @ 0x020D36BC
	push {r4, r5, r6, r7, r8, lr}
	mov r8, r0
	ldr r0, [r8, #0x20]
	ldr r3, [r8, #0x1c]
	cmp r0, #0
	mov r7, r1
	mov r6, r2
	cmpeq r3, #0
	beq _020D3730
	bl FUN_020D34B0
	ldr r6, [r8, #0x28]
	ldr r7, [r8, #0x24]
	cmp r6, r1
	cmpeq r7, r0
	bhs _020D3730
	ldr r5, [r8, #0x1c]
	ldr r4, [r8, #0x20]
	subs r0, r0, r7
	mov r2, r5
	mov r3, r4
	sbc r1, r1, r6
	bl FUN_020F2900
	adds r2, r0, #1
	adc r0, r1, #0
	umull r3, r1, r5, r2
	mla r1, r5, r0, r1
	mla r1, r4, r2, r1
	adds r7, r7, r3
	adc r6, r6, r1
_020D3730:
	str r7, [r8, #0xc]
	ldr r0, _020D37E4 @ =0x021E19E4
	str r6, [r8, #0x10]
	ldr r5, [r0, #4]
	cmp r5, #0
	beq _020D37AC
	mov r2, #0
	mov r1, r2
_020D3750:
	ldr r3, [r5, #0xc]
	ldr r0, [r5, #0x10]
	subs r4, r7, r3
	sbc r3, r6, r0
	subs r0, r4, r1
	sbcs r0, r3, r2
	bge _020D37A0
	ldr r0, [r5, #0x14]
	str r0, [r8, #0x14]
	str r8, [r5, #0x14]
	str r5, [r8, #0x18]
	ldr r0, [r8, #0x14]
	cmp r0, #0
	strne r8, [r0, #0x18]
	popne {r4, r5, r6, r7, r8, pc}
	ldr r1, _020D37E4 @ =0x021E19E4
	mov r0, r8
	str r8, [r1, #4]
	bl FUN_020D35D0
	pop {r4, r5, r6, r7, r8, pc}
_020D37A0:
	ldr r5, [r5, #0x18]
	cmp r5, #0
	bne _020D3750
_020D37AC:
	ldr r1, _020D37E4 @ =0x021E19E4
	mov r0, #0
	str r0, [r8, #0x18]
	ldr r0, [r1, #8]
	str r8, [r1, #8]
	str r0, [r8, #0x14]
	cmp r0, #0
	strne r8, [r0, #0x18]
	popne {r4, r5, r6, r7, r8, pc}
	str r8, [r1, #8]
	mov r0, r8
	str r8, [r1, #4]
	bl FUN_020D35D0
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0
_020D37E4: .4byte 0x021E19E4
	arm_func_end FUN_020D36BC

	arm_func_start FUN_020D37E8
FUN_020D37E8: @ 0x020D37E8
	push {r3, r4, r5, r6, r7, lr}
	movs r6, r0
	mov r5, r1
	mov r4, r2
	mov r7, r3
	beq _020D380C
	ldr r0, [r6]
	cmp r0, #0
	beq _020D3810
_020D380C:
	bl FUN_020D3F48
_020D3810:
	bl FUN_020D3A38
	mov r1, #0
	str r1, [r6, #0x1c]
	str r1, [r6, #0x20]
	str r7, [r6]
	ldr r1, [sp, #0x18]
	mov r7, r0
	str r1, [r6, #4]
	bl FUN_020D34B0
	adds r3, r5, r0
	adc r2, r4, r1
	mov r0, r6
	mov r1, r3
	bl FUN_020D36BC
	mov r0, r7
	bl FUN_020D3A4C
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020D37E8

	arm_func_start FUN_020D3854
FUN_020D3854: @ 0x020D3854
	push {r3, r4, r5, lr}
	mov r5, r0
	bl FUN_020D3A38
	ldr r1, [r5]
	mov r4, r0
	cmp r1, #0
	bne _020D3878
	bl FUN_020D3A4C
	pop {r3, r4, r5, pc}
_020D3878:
	ldr r0, [r5, #0x18]
	cmp r0, #0
	ldrne r1, [r5, #0x14]
	strne r1, [r0, #0x14]
	bne _020D3898
	ldr r2, [r5, #0x14]
	ldr r1, _020D38D8 @ =0x021E19E4
	str r2, [r1, #8]
_020D3898:
	ldr r1, [r5, #0x14]
	cmp r1, #0
	strne r0, [r1, #0x18]
	bne _020D38BC
	ldr r1, _020D38D8 @ =0x021E19E4
	cmp r0, #0
	str r0, [r1, #4]
	beq _020D38BC
	bl FUN_020D35D0
_020D38BC:
	mov r1, #0
	str r1, [r5]
	str r1, [r5, #0x1c]
	mov r0, r4
	str r1, [r5, #0x20]
	bl FUN_020D3A4C
	pop {r3, r4, r5, pc}
	.align 2, 0
_020D38D8: .4byte 0x021E19E4
	arm_func_end FUN_020D3854

	arm_func_start FUN_020D38DC
FUN_020D38DC: @ 0x020D38DC
	push {r0, lr}
	bl FUN_020D38EC
	pop {r0, lr}
	bx lr
	arm_func_end FUN_020D38DC

	arm_func_start FUN_020D38EC
FUN_020D38EC: @ 0x020D38EC
	push {r3, r4, r5, lr}
	ldr r1, _020D39D0 @ =0x04000106
	mov r2, #0
	mov r0, #0x10
	strh r2, [r1]
	bl FUN_020D1204
	ldr r0, _020D39D4 @ =OSi_IntrTable
	add r0, r0, #0x3000
	ldr r1, [r0, #0xff8]
	orr r1, r1, #0x10
	str r1, [r0, #0xff8]
	bl FUN_020D34B0
	ldr r2, _020D39D8 @ =0x021E19E4
	ldr r4, [r2, #4]
	cmp r4, #0
	popeq {r3, r4, r5, pc}
	ldr r3, [r4, #0x10]
	ldr ip, [r4, #0xc]
	cmp r1, r3
	cmpeq r0, ip
	bhs _020D394C
	mov r0, r4
	bl FUN_020D35D0
	pop {r3, r4, r5, pc}
_020D394C:
	ldr r1, [r4, #0x18]
	mov r0, #0
	str r1, [r2, #4]
	cmp r1, #0
	streq r0, [r2, #8]
	strne r0, [r1, #0x14]
	ldr r0, [r4, #0x20]
	ldr r1, [r4, #0x1c]
	cmp r0, #0
	ldr r5, [r4]
	mov r0, #0
	cmpeq r1, #0
	streq r0, [r4]
	cmp r5, #0
	beq _020D3990
	ldr r0, [r4, #4]
	blx r5
_020D3990:
	ldr r0, [r4, #0x20]
	ldr r1, [r4, #0x1c]
	cmp r0, #0
	cmpeq r1, #0
	mov r1, #0
	beq _020D39B8
	mov r0, r4
	mov r2, r1
	str r5, [r4]
	bl FUN_020D36BC
_020D39B8:
	ldr r0, _020D39D8 @ =0x021E19E4
	ldr r0, [r0, #4]
	cmp r0, #0
	popeq {r3, r4, r5, pc}
	bl FUN_020D35D0
	pop {r3, r4, r5, pc}
	.align 2, 0
_020D39D0: .4byte 0x04000106
_020D39D4: .4byte OSi_IntrTable
_020D39D8: .4byte 0x021E19E4
	arm_func_end FUN_020D38EC

	arm_func_start FUN_020D39DC
FUN_020D39DC: @ 0x020D39DC
	push {r3, lr}
	ldr r1, _020D3A20 @ =0x021E19F0
	ldrh r0, [r1]
	cmp r0, #0
	popne {r3, pc}
	mov r0, #1
	strh r0, [r1]
	mov r2, #0
	str r2, [r1, #0xc]
	mov r0, #4
	str r2, [r1, #0x10]
	bl FUN_020D1204
	ldr r0, _020D3A20 @ =0x021E19F0
	mov r1, #0
	str r1, [r0, #8]
	str r1, [r0, #4]
	pop {r3, pc}
	.align 2, 0
_020D3A20: .4byte 0x021E19F0
	arm_func_end FUN_020D39DC

	arm_func_start FUN_020D3A24
FUN_020D3A24: @ 0x020D3A24
	mrs r0, apsr
	bic r1, r0, #0x80
	msr cpsr_c, r1
	and r0, r0, #0x80
	bx lr
	arm_func_end FUN_020D3A24

	arm_func_start FUN_020D3A38
FUN_020D3A38: @ 0x020D3A38
	mrs r0, apsr
	orr r1, r0, #0x80
	msr cpsr_c, r1
	and r0, r0, #0x80
	bx lr
	arm_func_end FUN_020D3A38

	arm_func_start FUN_020D3A4C
FUN_020D3A4C: @ 0x020D3A4C
	mrs r1, apsr
	bic r2, r1, #0x80
	orr r2, r2, r0
	msr cpsr_c, r2
	and r0, r1, #0x80
	bx lr
	arm_func_end FUN_020D3A4C

	arm_func_start FUN_020D3A64
FUN_020D3A64: @ 0x020D3A64
	mrs r0, apsr
	orr r1, r0, #0xc0
	msr cpsr_c, r1
	and r0, r0, #0xc0
	bx lr
	arm_func_end FUN_020D3A64

	arm_func_start FUN_020D3A78
FUN_020D3A78: @ 0x020D3A78
	mrs r1, apsr
	bic r2, r1, #0xc0
	orr r2, r2, r0
	msr cpsr_c, r2
	and r0, r1, #0xc0
	bx lr
	arm_func_end FUN_020D3A78

	arm_func_start FUN_020D3A90
FUN_020D3A90: @ 0x020D3A90
	mrs r0, apsr
	and r0, r0, #0x80
	bx lr
	arm_func_end FUN_020D3A90

	arm_func_start FUN_020D3A9C
FUN_020D3A9C: @ 0x020D3A9C
	mrs r0, apsr
	and r0, r0, #0x1f
	bx lr
_020D3AA8:
	subs r0, r0, #4
	bhs _020D3AA8
	bx lr
	arm_func_end FUN_020D3A9C

	arm_func_start FUN_020D3AB4
FUN_020D3AB4: @ 0x020D3AB4
	push {r3, lr}
	mov r0, #1
	blx SVC_WaitByLoop
	mov r0, #1
	mov r1, r0
	bl FUN_020D0E6C
	pop {r3, pc}
	arm_func_end FUN_020D3AB4

	arm_func_start FUN_020D3AD0
FUN_020D3AD0: @ 0x020D3AD0
	push {r3, r4, r5, lr}
	ldr r0, _020D3B1C @ =0x021E1A04
	ldrh r1, [r0, #2]
	cmp r1, #0
	popne {r3, r4, r5, pc}
	mov r1, #1
	strh r1, [r0, #2]
	bl FUN_020D6548
	mov r5, #0xc
	mov r4, #1
_020D3AF8:
	mov r0, r5
	mov r1, r4
	bl FUN_020D66A0
	cmp r0, #0
	beq _020D3AF8
	ldr r1, _020D3B20 @ =FUN_020D3B24
	mov r0, #0xc
	bl FUN_020D6654
	pop {r3, r4, r5, pc}
	.align 2, 0
_020D3B1C: .4byte 0x021E1A04
_020D3B20: .4byte FUN_020D3B24
	arm_func_end FUN_020D3AD0

	arm_func_start FUN_020D3B24
FUN_020D3B24: @ 0x020D3B24
	push {r3, lr}
	and r0, r1, #0x7f00
	lsl r0, r0, #8
	lsr r0, r0, #0x10
	cmp r0, #0x10
	bne _020D3B4C
	ldr r0, _020D3B54 @ =0x021E1A04
	mov r1, #1
	strh r1, [r0]
	pop {r3, pc}
_020D3B4C:
	bl FUN_020D3F48
	pop {r3, pc}
	.align 2, 0
_020D3B54: .4byte 0x021E1A04
	arm_func_end FUN_020D3B24

	arm_func_start FUN_020D3B58
FUN_020D3B58: @ 0x020D3B58
	push {r4, r5, r6, lr}
	lsl r6, r0, #8
	mov r5, #0xc
	mov r4, #0
_020D3B68:
	mov r0, r5
	mov r1, r6
	mov r2, r4
	bl FUN_020D66C4
	cmp r0, #0
	bne _020D3B68
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020D3B58

	arm_func_start FUN_020D3B84
FUN_020D3B84: @ 0x020D3B84
	push {r4, lr}
	ldr r1, _020D3C14 @ =0x027FFC40
	mov r4, r0
	ldrh r0, [r1]
	cmp r0, #2
	moveq r0, #1
	movne r0, #0
	cmp r0, #0
	beq _020D3BAC
	bl FUN_020D3F48
_020D3BAC:
	bl FUN_020D15C4
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	bl FUN_020DC96C
	ldr r0, _020D3C18 @ =0x00000000
	bl FUN_020D4294
	ldr r0, _020D3C1C @ =0x00000001
	bl FUN_020D4294
	ldr r0, _020D3C20 @ =0x00000002
	bl FUN_020D4294
	ldr r0, _020D3C24 @ =0x00000003
	bl FUN_020D4294
	ldr r0, _020D3C28 @ =0x00040000
	bl FUN_020D11A8
	ldr r0, _020D3C2C @ =0xFFFBFFFF
	bl FUN_020D1234
	ldr r1, _020D3C30 @ =0x027FFC20
	ldr r0, _020D3C34 @ =0x00000010
	str r4, [r1]
	bl FUN_020D3B58
	ldr r0, _020D3C38 @ =0x027E3F80
	ldr r1, _020D3C3C @ =0x00000800
	sub r0, r0, r1
	mov sp, r0
	bl FUN_01FF81B4
	pop {r4, pc}
	.align 2, 0
_020D3C14: .4byte 0x027FFC40
_020D3C18: .4byte 0x00000000
_020D3C1C: .4byte 0x00000001
_020D3C20: .4byte 0x00000002
_020D3C24: .4byte 0x00000003
_020D3C28: .4byte 0x00040000
_020D3C2C: .4byte 0xFFFBFFFF
_020D3C30: .4byte 0x027FFC20
_020D3C34: .4byte 0x00000010
_020D3C38: .4byte 0x027E3F80
_020D3C3C: .4byte 0x00000800
	arm_func_end FUN_020D3B84

	arm_func_start FUN_020D3C40
FUN_020D3C40: @ 0x020D3C40
	ldr ip, _020D3C54 @ =FUN_020D4A50
	mov r1, r0
	ldr r0, _020D3C58 @ =0x027FFCF4
	mov r2, #6
	bx ip
	.align 2, 0
_020D3C54: .4byte FUN_020D4A50
_020D3C58: .4byte 0x027FFCF4
	arm_func_end FUN_020D3C40

	arm_func_start FUN_020D3C5C
FUN_020D3C5C: @ 0x020D3C5C
	push {r4, lr}
	ldr ip, _020D3CDC @ =0x027FFC80
	mov r4, r0
	ldrh r2, [ip, #0x64]
	add r0, ip, #6
	add r1, r4, #4
	lsl r2, r2, #0x1d
	lsr r2, r2, #0x1d
	strb r2, [r4]
	ldrb r3, [ip, #2]
	mov r2, #0x14
	lsl r3, r3, #0x1c
	lsr r3, r3, #0x1c
	strb r3, [r4, #1]
	ldrb r3, [ip, #3]
	strb r3, [r4, #2]
	ldrb r3, [ip, #4]
	strb r3, [r4, #3]
	ldrb r3, [ip, #0x1a]
	strh r3, [r4, #0x1a]
	ldrb r3, [ip, #0x50]
	strh r3, [r4, #0x52]
	bl FUN_020D47B8
	ldr r0, _020D3CDC @ =0x027FFC80
	add r1, r4, #0x1c
	add r0, r0, #0x1c
	mov r2, #0x34
	bl FUN_020D47B8
	mov r0, #0
	strh r0, [r4, #0x18]
	strh r0, [r4, #0x50]
	pop {r4, pc}
	.align 2, 0
_020D3CDC: .4byte 0x027FFC80
	arm_func_end FUN_020D3C5C

	arm_func_start FUN_020D3CE0
FUN_020D3CE0: @ 0x020D3CE0
	ldr r1, _020D3CF0 @ =0x027FFC80
	ldr r0, [r1, #0x68]
	ldr r1, [r1, #0x6c]
	bx lr
	.align 2, 0
_020D3CF0: .4byte 0x027FFC80
	arm_func_end FUN_020D3CE0

	arm_func_start FUN_020D3CF4
FUN_020D3CF4: @ 0x020D3CF4
	clz r0, r0
	bx lr
	arm_func_end FUN_020D3CF4

	arm_func_start FUN_020D3CFC
FUN_020D3CFC: @ 0x020D3CFC
	ldr r0, _020D3D28 @ =0x021E1A08
	mov r3, #0
	str r3, [r0]
	ldr r0, _020D3D2C @ =0x021E1A0C
	mov r2, r3
_020D3D10:
	lsl r1, r3, #1
	add r3, r3, #1
	strh r2, [r0, r1]
	cmp r3, #9
	blt _020D3D10
	bx lr
	.align 2, 0
_020D3D28: .4byte 0x021E1A08
_020D3D2C: .4byte 0x021E1A0C
	arm_func_end FUN_020D3CFC

	arm_func_start FUN_020D3D30
FUN_020D3D30: @ 0x020D3D30
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r7, r0
	mov r8, r1
	bl FUN_020D3A38
	ldr r1, _020D3DE4 @ =0x021E1A08
	mov r6, r0
	ldr r0, [r1]
	ldr sb, _020D3DE8 @ =0x021E1A0C
	and r5, r7, r0
	mov r4, #1
_020D3D58:
	mov r0, r5
	bl FUN_020D3CF4
	rsbs r1, r0, #0x1f
	bmi _020D3D90
	lsl r0, r1, #1
	ldrh r0, [sb, r0]
	mvn r1, r4, lsl r1
	cmp r8, r0
	and r5, r5, r1
	beq _020D3D58
	mov r0, r6
	bl FUN_020D3A4C
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_020D3D90:
	ldr r0, _020D3DEC @ =0x000001FF
	ldr r4, _020D3DE8 @ =0x021E1A0C
	ldr sb, _020D3DE4 @ =0x021E1A08
	and r7, r7, r0
	mov r5, #1
_020D3DA4:
	mov r0, r7
	bl FUN_020D3CF4
	rsbs r1, r0, #0x1f
	bmi _020D3DD4
	ldr r0, [sb]
	mvn r2, r5, lsl r1
	orr r0, r0, r5, lsl r1
	lsl r1, r1, #1
	strh r8, [r4, r1]
	str r0, [sb]
	and r7, r7, r2
	b _020D3DA4
_020D3DD4:
	mov r0, r6
	bl FUN_020D3A4C
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0
_020D3DE4: .4byte 0x021E1A08
_020D3DE8: .4byte 0x021E1A0C
_020D3DEC: .4byte 0x000001FF
	arm_func_end FUN_020D3D30

	arm_func_start FUN_020D3DF0
FUN_020D3DF0: @ 0x020D3DF0
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	mov r5, r0
	mov sl, r1
	bl FUN_020D3A38
	ldr r4, _020D3E6C @ =0x021E1A08
	ldr r1, _020D3E70 @ =0x000001FF
	ldr r2, [r4]
	mov sb, r0
	and r0, r5, r2
	ldr r6, _020D3E74 @ =0x021E1A0C
	and r8, r0, r1
	mov r7, #1
	mov r5, #0
_020D3E24:
	mov r0, r8
	bl FUN_020D3CF4
	rsbs r2, r0, #0x1f
	bmi _020D3E60
	lsl r1, r2, #1
	ldrh r0, [r6, r1]
	mvn r2, r7, lsl r2
	cmp sl, r0
	and r8, r8, r2
	bne _020D3E24
	ldr r0, [r4]
	strh r5, [r6, r1]
	and r0, r0, r2
	str r0, [r4]
	b _020D3E24
_020D3E60:
	mov r0, sb
	bl FUN_020D3A4C
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0
_020D3E6C: .4byte 0x021E1A08
_020D3E70: .4byte 0x000001FF
_020D3E74: .4byte 0x021E1A0C
	arm_func_end FUN_020D3DF0

	arm_func_start FUN_020D3E78
FUN_020D3E78: @ 0x020D3E78
	push {r4, r5, r6, lr}
	ldr r1, _020D3F38 @ =0x04000006
	mov r5, r0
	ldrh r6, [r1]
	ldr r4, _020D3F3C @ =0x027FFC00
	bl FUN_020D3550
	orr r0, r0, r6, lsl #16
	str r0, [r5]
	ldr r1, _020D3F40 @ =0x021E19DC
	ldrh ip, [r4, #0xf8]
	ldr r3, [r1]
	ldr r2, [r1, #4]
	mov r0, r4
	eor r2, r3, ip, lsl #16
	str r2, [r5, #4]
	ldr r2, [r1]
	ldr r3, [r0, #0x3c]
	ldr r2, [r1, #4]
	ldr r1, [r4, #0xf4]
	ldr ip, _020D3F44 @ =0x04000600
	eor r1, r2, r1
	eor r2, r3, r1
	str r2, [r5, #8]
	ldr r1, [ip]
	eor r1, r2, r1
	str r1, [r5, #8]
	ldr r2, [r0, #0x1e8]
	add r1, r0, #0x300
	str r2, [r5, #0xc]
	ldr r3, [r0, #0x1ec]
	sub r2, ip, #0x4d0
	str r3, [r5, #0x10]
	ldr r3, [r0, #0x390]
	ldrh r4, [r1, #0x94]
	add r0, r0, #0x3a8
	eor r3, r3, r4, lsl #16
	str r3, [r5, #0x14]
	ldrh r4, [r1, #0xaa]
	ldrh r3, [r1, #0xac]
	orr r3, r3, r4, lsl #16
	str r3, [r5, #0x18]
	ldrh r2, [r2]
	ldrh r0, [r0]
	ldrh r1, [r1, #0x98]
	orr r0, r2, r0
	orr r0, r0, r1, lsl #16
	str r0, [r5, #0x1c]
	pop {r4, r5, r6, pc}
	.align 2, 0
_020D3F38: .4byte 0x04000006
_020D3F3C: .4byte 0x027FFC00
_020D3F40: .4byte 0x021E19DC
_020D3F44: .4byte 0x04000600
	arm_func_end FUN_020D3E78

	arm_func_start FUN_020D3F48
FUN_020D3F48: @ 0x020D3F48
	push {r3, lr}
_020D3F4C:
	bl FUN_020D3A38
	bl FUN_020D3F58
	b _020D3F4C
	arm_func_end FUN_020D3F48

	arm_func_start FUN_020D3F58
FUN_020D3F58: @ 0x020D3F58
	mov r0, #0
	mcr p15, #0, r0, c7, c0, #4
	bx lr
	arm_func_end FUN_020D3F58

	arm_func_start FUN_020D3F64
FUN_020D3F64: @ 0x020D3F64
	ldr r1, _020D3F70 @ =0x04000247
	strb r0, [r1]
	bx lr
	.align 2, 0
_020D3F70: .4byte 0x04000247
	arm_func_end FUN_020D3F64

	arm_func_start FUN_020D3F74
FUN_020D3F74: @ 0x020D3F74
	push {r4, r5, r6, r7, r8, lr}
	movs r4, r3
	mov r8, r0
	mov r7, r1
	mov r6, r2
	popeq {r4, r5, r6, r7, r8, pc}
	add r0, r8, r8, lsl #1
	add r0, r0, #2
	lsl r0, r0, #2
	add r0, r0, #0xb0
	add r5, r0, #0x4000000
_020D3FA0:
	ldr r0, [r5]
	tst r0, #0x80000000
	bne _020D3FA0
	bl FUN_020D3A38
	lsl r2, r8, #2
	add r1, r2, #0xe0
	lsr r3, r4, #2
	mov r4, r0
	add ip, r2, #0x4000000
	mov r0, r8
	mov r2, r7
	add r1, r1, #0x4000000
	orr r3, r3, #0x85000000
	str r6, [ip, #0xe0]
	bl FUN_01FF851C
	mov r0, r4
	bl FUN_020D3A4C
_020D3FE4:
	ldr r0, [r5]
	tst r0, #0x80000000
	bne _020D3FE4
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020D3F74

	arm_func_start FUN_020D3FF4
FUN_020D3FF4: @ 0x020D3FF4
	push {r4, r5, r6, r7, r8, lr}
	mov r5, r3
	mov r6, r2
	mov r2, r5
	mov r3, #0
	mov r8, r0
	mov r7, r1
	bl FUN_020D4394
	cmp r5, #0
	popeq {r4, r5, r6, r7, r8, pc}
	add r0, r8, r8, lsl #1
	add r0, r0, #2
	lsl r0, r0, #2
	add r0, r0, #0xb0
	add r4, r0, #0x4000000
_020D4030:
	ldr r0, [r4]
	tst r0, #0x80000000
	bne _020D4030
	lsr r3, r5, #2
	mov r0, r8
	mov r1, r7
	mov r2, r6
	orr r3, r3, #0x84000000
	bl FUN_01FF8488
_020D4054:
	ldr r0, [r4]
	tst r0, #0x80000000
	bne _020D4054
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020D3FF4

	arm_func_start FUN_020D4064
FUN_020D4064: @ 0x020D4064
	push {r4, r5, r6, r7, r8, lr}
	movs r5, r3
	mov r8, r0
	mov r7, r1
	mov r6, r2
	popeq {r4, r5, r6, r7, r8, pc}
	mov r2, r5
	mov r3, #0
	bl FUN_020D4394
	add r0, r8, r8, lsl #1
	add r0, r0, #2
	lsl r0, r0, #2
	add r0, r0, #0xb0
	add r4, r0, #0x4000000
_020D409C:
	ldr r0, [r4]
	tst r0, #0x80000000
	bne _020D409C
	lsr r3, r5, #1
	mov r0, r8
	mov r1, r7
	mov r2, r6
	orr r3, r3, #0x80000000
	bl FUN_01FF8488
_020D40C0:
	ldr r0, [r4]
	tst r0, #0x80000000
	bne _020D40C0
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020D4064

	arm_func_start FUN_020D40D0
FUN_020D40D0: @ 0x020D40D0
	push {r4, r5, r6, r7, r8, lr}
	movs r4, r3
	mov r7, r0
	mov r6, r1
	mov r5, r2
	ldr r8, [sp, #0x18]
	bne _020D4100
	cmp r8, #0
	popeq {r4, r5, r6, r7, r8, pc}
	ldr r0, [sp, #0x1c]
	blx r8
	pop {r4, r5, r6, r7, r8, pc}
_020D4100:
	bl FUN_020D422C
	cmp r8, #0
	beq _020D4158
	ldr r2, [sp, #0x1c]
	mov r0, r7
	mov r1, r8
	bl FUN_020D1118
	bl FUN_020D3A38
	lsr r3, r4, #2
	lsl r2, r7, #2
	add r1, r2, #0xe0
	add r2, r2, #0x4000000
	str r5, [r2, #0xe0]
	mov r4, r0
	mov r0, r7
	mov r2, r6
	add r1, r1, #0x4000000
	orr r3, r3, #0xc5000000
	bl FUN_01FF84F8
	mov r0, r4
	bl FUN_020D3A4C
	pop {r4, r5, r6, r7, r8, pc}
_020D4158:
	bl FUN_020D3A38
	lsl r2, r7, #2
	add r1, r2, #0xe0
	lsr r3, r4, #2
	mov r4, r0
	add ip, r2, #0x4000000
	mov r0, r7
	mov r2, r6
	add r1, r1, #0x4000000
	orr r3, r3, #0x85000000
	str r5, [ip, #0xe0]
	bl FUN_01FF84F8
	mov r0, r4
	bl FUN_020D3A4C
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020D40D0

	arm_func_start FUN_020D4194
FUN_020D4194: @ 0x020D4194
	push {r4, r5, r6, r7, r8, lr}
	mov r5, r3
	mov r6, r2
	mov r2, r5
	mov r3, #0
	mov r8, r0
	mov r7, r1
	ldr r4, [sp, #0x18]
	bl FUN_020D4394
	cmp r5, #0
	bne _020D41D4
	cmp r4, #0
	popeq {r4, r5, r6, r7, r8, pc}
	ldr r0, [sp, #0x1c]
	blx r4
	pop {r4, r5, r6, r7, r8, pc}
_020D41D4:
	mov r0, r8
	bl FUN_020D422C
	cmp r4, #0
	beq _020D4210
	ldr r2, [sp, #0x1c]
	mov r0, r8
	mov r1, r4
	bl FUN_020D1118
	lsr r3, r5, #2
	mov r0, r8
	mov r1, r7
	mov r2, r6
	orr r3, r3, #0xc4000000
	bl FUN_01FF8448
	pop {r4, r5, r6, r7, r8, pc}
_020D4210:
	lsr r3, r5, #2
	mov r0, r8
	mov r1, r7
	mov r2, r6
	orr r3, r3, #0x84000000
	bl FUN_01FF8448
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020D4194

	arm_func_start FUN_020D422C
FUN_020D422C: @ 0x020D422C
	push {r4, lr}
	mov r4, r0
	bl FUN_020D3A38
	add r1, r4, r4, lsl #1
	add r1, r1, #2
	lsl r1, r1, #2
	add r1, r1, #0xb0
	add r2, r1, #0x4000000
_020D424C:
	ldr r1, [r2]
	tst r1, #0x80000000
	bne _020D424C
	cmp r4, #0
	bne _020D4288
	mov r1, #0xc
	mul r2, r4, r1
	add r1, r2, #0xb0
	add r2, r2, #0x4000000
	mov r3, #0
	str r3, [r2, #0xb0]
	add r2, r1, #0x4000000
	ldr r1, _020D4290 @ =0x81400001
	str r3, [r2, #4]
	str r1, [r2, #8]
_020D4288:
	bl FUN_020D3A4C
	pop {r4, pc}
	.align 2, 0
_020D4290: .4byte 0x81400001
	arm_func_end FUN_020D422C

	arm_func_start FUN_020D4294
FUN_020D4294: @ 0x020D4294
	push {r4, lr}
	mov r4, r0
	bl FUN_020D3A38
	mov r1, #6
	mul r1, r4, r1
	add r1, r1, #5
	lsl r1, r1, #1
	add r1, r1, #0x4000000
	ldrh r2, [r1, #0xb0]
	cmp r4, #0
	bic r2, r2, #0x3a00
	strh r2, [r1, #0xb0]
	ldrh r2, [r1, #0xb0]
	bic r2, r2, #0x8000
	strh r2, [r1, #0xb0]
	ldrh r2, [r1, #0xb0]
	ldrh r1, [r1, #0xb0]
	bne _020D4304
	mov r1, #0xc
	mul r2, r4, r1
	add r1, r2, #0xb0
	add r2, r2, #0x4000000
	mov r3, #0
	str r3, [r2, #0xb0]
	add r2, r1, #0x4000000
	ldr r1, _020D430C @ =0x81400001
	str r3, [r2, #4]
	str r1, [r2, #8]
_020D4304:
	bl FUN_020D3A4C
	pop {r4, pc}
	.align 2, 0
_020D430C: .4byte 0x81400001
	arm_func_end FUN_020D4294

	arm_func_start FUN_020D4310
FUN_020D4310: @ 0x020D4310
	push {r3, r4, r5, r6, r7, lr}
	ldr r5, _020D4390 @ =0x040000B8
	mov r7, r0
	mov r6, r1
	mov r4, #0
_020D4324:
	cmp r4, r7
	beq _020D437C
	ldr r0, [r5]
	tst r0, #0x80000000
	andne r0, r0, #0x38000000
	cmpne r0, r6
	beq _020D437C
	cmp r0, #0x8000000
	cmpeq r6, #0x10000000
	beq _020D437C
	cmp r0, #0x10000000
	cmpeq r6, #0x8000000
	beq _020D437C
	cmp r0, #0x18000000
	cmpne r0, #0x20000000
	cmpne r0, #0x28000000
	cmpne r0, #0x30000000
	cmpne r0, #0x38000000
	cmpne r0, #0x8000000
	cmpne r0, #0x10000000
	bne _020D437C
	bl FUN_020D3F48
_020D437C:
	add r4, r4, #1
	cmp r4, #3
	add r5, r5, #0xc
	blt _020D4324
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020D4390: .4byte 0x040000B8
	arm_func_end FUN_020D4310

	arm_func_start FUN_020D4394
FUN_020D4394: @ 0x020D4394
	push {r3, lr}
	cmp r0, #0
	popne {r3, pc}
	cmp r3, #0
	and ip, r1, #0xff000000
	beq _020D43B8
	cmp r3, #0x800000
	subeq r1, r1, r2
	b _020D43BC
_020D43B8:
	add r1, r1, r2
_020D43BC:
	cmp ip, #0x4000000
	and r0, r1, #0xff000000
	beq _020D43E0
	cmp ip, #0x8000000
	bhs _020D43E0
	cmp r0, #0x4000000
	beq _020D43E0
	cmp r0, #0x8000000
	poplo {r3, pc}
_020D43E0:
	bl FUN_020D3F48
	pop {r3, pc}
	arm_func_end FUN_020D4394

	arm_func_start FUN_020D43E8
FUN_020D43E8: @ 0x020D43E8
	push {r3, r4, r5, r6, r7, lr}
	mov r6, r1
	mov r7, r0
	mov r4, r3
	mov r1, #0x10000000
	mov r5, r2
	bl FUN_020D4310
	mov r0, r7
	mov r1, r6
	mov r2, r4
	mov r3, #0
	bl FUN_020D4394
	cmp r4, #0
	popeq {r3, r4, r5, r6, r7, pc}
	mov r0, r7
	bl FUN_020D422C
	ldr r3, _020D4444 @ =0x96600000
	mov r0, r7
	mov r1, r6
	mov r2, r5
	orr r3, r3, r4, lsr #2
	bl FUN_01FF8448
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020D4444: .4byte 0x96600000
	arm_func_end FUN_020D43E8

	arm_func_start FUN_020D4448
FUN_020D4448: @ 0x020D4448
	push {r3, r4, r5, r6, r7, lr}
	mov r6, r1
	mov r7, r0
	mov r4, r3
	mov r1, #0x10000000
	mov r5, r2
	bl FUN_020D4310
	mov r0, r7
	mov r1, r6
	mov r2, r4
	mov r3, #0
	bl FUN_020D4394
	cmp r4, #0
	popeq {r3, r4, r5, r6, r7, pc}
	mov r0, r7
	bl FUN_020D422C
	ldr r3, _020D44A4 @ =0x92600000
	mov r0, r7
	mov r1, r6
	mov r2, r5
	orr r3, r3, r4, lsr #1
	bl FUN_01FF8448
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020D44A4: .4byte 0x92600000
	arm_func_end FUN_020D4448

	arm_func_start FUN_020D44A8
FUN_020D44A8: @ 0x020D44A8
	push {r4, lr}
	mov r4, r0
	cmp r2, #0
	bne _020D44CC
	cmp r3, #0
	popeq {r4, pc}
	ldr r0, [sp, #8]
	blx r3
	pop {r4, pc}
_020D44CC:
	ldr r0, _020D4594 @ =0x021E1A20
_020D44D0:
	ldr ip, [r0]
	cmp ip, #0
	bne _020D44D0
	ldr ip, _020D4598 @ =0x04000600
_020D44E0:
	ldr r0, [ip]
	and r0, r0, #0x7000000
	lsr r0, r0, #0x18
	tst r0, #2
	beq _020D44E0
	ldr ip, _020D4594 @ =0x021E1A20
	mov r0, #1
	str r0, [ip]
	str r4, [ip, #4]
	str r1, [ip, #8]
	str r2, [ip, #0xc]
	str r3, [ip, #0x10]
	ldr lr, [sp, #8]
	mov r0, r4
	mov r3, #0
	str lr, [ip, #0x14]
	bl FUN_020D4394
	mov r0, r4
	bl FUN_020D422C
	bl FUN_020D3A38
	ldr r1, _020D4598 @ =0x04000600
	mov r4, r0
	ldr r0, [r1]
	ldr r1, _020D4594 @ =0x021E1A20
	and r0, r0, #0xc0000000
	lsr r2, r0, #0x1e
	mov r0, #0x200000
	str r2, [r1, #0x18]
	bl FUN_020D108C
	ldr r1, _020D4594 @ =0x021E1A20
	ldr r2, _020D4598 @ =0x04000600
	str r0, [r1, #0x1c]
	ldr r0, [r2]
	ldr r1, _020D459C @ =FUN_020D45A0
	bic r0, r0, #0xc0000000
	orr r3, r0, #0x40000000
	mov r0, #0x200000
	str r3, [r2]
	bl FUN_020D1004
	mov r0, #0x200000
	bl FUN_020D11D4
	bl FUN_020D45A0
	mov r0, r4
	bl FUN_020D3A4C
	pop {r4, pc}
	.align 2, 0
_020D4594: .4byte 0x021E1A20
_020D4598: .4byte 0x04000600
_020D459C: .4byte FUN_020D45A0
	arm_func_end FUN_020D44A8

	arm_func_start FUN_020D45A0
FUN_020D45A0: @ 0x020D45A0
	push {r3, r4, r5, lr}
	ldr r0, _020D463C @ =0x021E1A20
	ldr r5, [r0, #0xc]
	cmp r5, #0
	popeq {r3, r4, r5, pc}
	ldr r0, _020D463C @ =0x021E1A20
	cmp r5, #0x1d8
	ldr r1, [r0, #0xc]
	movhs r5, #0x1d8
	ldr r4, [r0, #8]
	subs r1, r1, r5
	str r1, [r0, #0xc]
	add r1, r4, r5
	str r1, [r0, #8]
	bne _020D4618
	ldr r0, [r0, #4]
	ldr r1, _020D4640 @ =FUN_020D464C
	mov r2, #0
	bl FUN_020D1118
	ldr r0, _020D463C @ =0x021E1A20
	mov r3, #0x3bc00000
	rsb r3, r3, #0
	ldr r0, [r0, #4]
	ldr r2, _020D4644 @ =0x04000400
	mov r1, r4
	orr r3, r3, r5, lsr #2
	bl FUN_01FF8448
	mov r0, #0x200000
	bl FUN_020D1234
	pop {r3, r4, r5, pc}
_020D4618:
	ldr r3, _020D4648 @ =0x84400000
	ldr r0, [r0, #4]
	ldr r2, _020D4644 @ =0x04000400
	mov r1, r4
	orr r3, r3, r5, lsr #2
	bl FUN_01FF8448
	mov r0, #0x200000
	bl FUN_020D1234
	pop {r3, r4, r5, pc}
	.align 2, 0
_020D463C: .4byte 0x021E1A20
_020D4640: .4byte FUN_020D464C
_020D4644: .4byte 0x04000400
_020D4648: .4byte 0x84400000
	arm_func_end FUN_020D45A0

	arm_func_start FUN_020D464C
FUN_020D464C: @ 0x020D464C
	push {r3, lr}
	mov r0, #0x200000
	bl FUN_020D1204
	ldr r2, _020D46A4 @ =0x04000600
	ldr r0, _020D46A8 @ =0x021E1A20
	ldr r1, [r2]
	ldr r3, [r0, #0x18]
	bic r1, r1, #0xc0000000
	orr r1, r1, r3, lsl #30
	str r1, [r2]
	ldr r1, [r0, #0x1c]
	mov r0, #0x200000
	bl FUN_020D1004
	ldr r0, _020D46A8 @ =0x021E1A20
	mov r1, #0
	str r1, [r0]
	ldr r1, [r0, #0x10]
	ldr r0, [r0, #0x14]
	cmp r1, #0
	popeq {r3, pc}
	blx r1
	pop {r3, pc}
	.align 2, 0
_020D46A4: .4byte 0x04000600
_020D46A8: .4byte 0x021E1A20
	arm_func_end FUN_020D464C

	arm_func_start FUN_020D46AC
FUN_020D46AC: @ 0x020D46AC
	push {r4, r5, r6, lr}
	movs r4, r2
	mov r6, r0
	mov r5, r1
	bne _020D46D4
	cmp r3, #0
	popeq {r4, r5, r6, pc}
	ldr r0, [sp, #0x10]
	blx r3
	pop {r4, r5, r6, pc}
_020D46D4:
	ldr r0, _020D4758 @ =0x021E1A20
_020D46D8:
	ldr r1, [r0]
	cmp r1, #0
	bne _020D46D8
	ldr r2, _020D4758 @ =0x021E1A20
	mov r0, #1
	str r0, [r2]
	str r6, [r2, #4]
	ldr ip, [sp, #0x10]
	str r3, [r2, #0x10]
	mov r0, r6
	mov r1, #0x38000000
	str ip, [r2, #0x14]
	bl FUN_020D4310
	mov r0, r6
	mov r1, r5
	mov r2, r4
	mov r3, #0
	bl FUN_020D4394
	mov r0, r6
	bl FUN_020D422C
	mov r0, r6
	ldr r1, _020D475C @ =FUN_020D4764
	mov r2, #0
	bl FUN_020D1118
	mov r0, r6
	mov r1, r5
	ldr r2, _020D4760 @ =0x04000400
	mov r3, #0x3c00000
	rsb r3, r3, #0
	orr r3, r3, r4, lsr #2
	bl FUN_01FF8448
	pop {r4, r5, r6, pc}
	.align 2, 0
_020D4758: .4byte 0x021E1A20
_020D475C: .4byte FUN_020D4764
_020D4760: .4byte 0x04000400
	arm_func_end FUN_020D46AC

	arm_func_start FUN_020D4764
FUN_020D4764: @ 0x020D4764
	push {r3, lr}
	ldr r0, _020D478C @ =0x021E1A20
	mov r1, #0
	str r1, [r0]
	ldr r1, [r0, #0x10]
	ldr r0, [r0, #0x14]
	cmp r1, #0
	popeq {r3, pc}
	blx r1
	pop {r3, pc}
	.align 2, 0
_020D478C: .4byte 0x021E1A20
	arm_func_end FUN_020D4764

	arm_func_start FUN_020D4790
FUN_020D4790: @ 0x020D4790
	mov r3, #0
_020D4794:
	cmp r3, r2
	blt _020D47A0
	b _020D47A4
_020D47A0:
	strh r0, [r1, r3]
_020D47A4:
	blt _020D47AC
	b _020D47B0
_020D47AC:
	add r3, r3, #2
_020D47B0:
	blt _020D4794
	bx lr
	arm_func_end FUN_020D4790

	arm_func_start FUN_020D47B8
FUN_020D47B8: @ 0x020D47B8
	mov ip, #0
_020D47BC:
	cmp ip, r2
	blt _020D47C8
	b _020D47CC
_020D47C8:
	ldrh r3, [r0, ip]
_020D47CC:
	blt _020D47D4
	b _020D47D8
_020D47D4:
	strh r3, [r1, ip]
_020D47D8:
	blt _020D47E0
	b _020D47E4
_020D47E0:
	add ip, ip, #2
_020D47E4:
	blt _020D47BC
	bx lr
	arm_func_end FUN_020D47B8

	arm_func_start FUN_020D47EC
FUN_020D47EC: @ 0x020D47EC
	add ip, r1, r2
_020D47F0:
	cmp r1, ip
	blt _020D47FC
	b _020D4800
_020D47FC:
	stm r1!, {r0}
_020D4800:
	blt _020D47F0
	bx lr
	arm_func_end FUN_020D47EC

	arm_func_start FUN_020D4808
FUN_020D4808: @ 0x020D4808
	add ip, r1, r2
_020D480C:
	cmp r1, ip
	blt _020D4818
	b _020D481C
_020D4818:
	ldm r0!, {r2}
_020D481C:
	blt _020D4824
	b _020D4828
_020D4824:
	stm r1!, {r2}
_020D4828:
	blt _020D480C
	bx lr
	arm_func_end FUN_020D4808

	arm_func_start FUN_020D4830
FUN_020D4830: @ 0x020D4830
	add ip, r0, r2
_020D4834:
	cmp r0, ip
	blt _020D4840
	b _020D4844
_020D4840:
	ldm r0!, {r2}
_020D4844:
	blt _020D484C
	b _020D4850
_020D484C:
	str r2, [r1]
_020D4850:
	blt _020D4834
	bx lr
	arm_func_end FUN_020D4830

	arm_func_start FUN_020D4858
FUN_020D4858: @ 0x020D4858
	push {r4, r5, r6, r7, r8, sb}
	add sb, r1, r2
	lsr ip, r2, #5
	add ip, r1, ip, lsl #5
	mov r2, r0
	mov r3, r2
	mov r4, r2
	mov r5, r2
	mov r6, r2
	mov r7, r2
	mov r8, r2
_020D4884:
	cmp r1, ip
	blt _020D4890
	b _020D4894
_020D4890:
	stm r1!, {r0, r2, r3, r4, r5, r6, r7, r8}
_020D4894:
	blt _020D4884
_020D4898:
	cmp r1, sb
	blt _020D48A4
	b _020D48A8
_020D48A4:
	stm r1!, {r0}
_020D48A8:
	blt _020D4898
	pop {r4, r5, r6, r7, r8, sb}
	bx lr
	arm_func_end FUN_020D4858

	arm_func_start FUN_020D48B4
FUN_020D48B4: @ 0x020D48B4
	push {r4, r5, r6, r7, r8, sb, sl}
	add sl, r1, r2
	lsr ip, r2, #5
	add ip, r1, ip, lsl #5
_020D48C4:
	cmp r1, ip
	blt _020D48D0
	b _020D48D4
_020D48D0:
	ldm r0!, {r2, r3, r4, r5, r6, r7, r8, sb}
_020D48D4:
	blt _020D48DC
	b _020D48E0
_020D48DC:
	stm r1!, {r2, r3, r4, r5, r6, r7, r8, sb}
_020D48E0:
	blt _020D48C4
_020D48E4:
	cmp r1, sl
	blt _020D48F0
	b _020D48F4
_020D48F0:
	ldm r0!, {r2}
_020D48F4:
	blt _020D48FC
	b _020D4900
_020D48FC:
	stm r1!, {r2}
_020D4900:
	blt _020D48E4
	pop {r4, r5, r6, r7, r8, sb, sl}
	bx lr
	arm_func_end FUN_020D48B4

	arm_func_start FUN_020D490C
FUN_020D490C: @ 0x020D490C
	ldm r0!, {r2, r3, ip}
	stm r1!, {r2, r3, ip}
	ldm r0!, {r2, r3, ip}
	stm r1!, {r2, r3, ip}
	ldm r0!, {r2, r3}
	stm r1!, {r2, r3}
	bx lr
	arm_func_end FUN_020D490C

	arm_func_start FUN_020D4928
FUN_020D4928: @ 0x020D4928
	ldm r0!, {r2, r3, ip}
	stm r1!, {r2, r3, ip}
	ldm r0!, {r2, r3, ip}
	stm r1!, {r2, r3, ip}
	ldm r0!, {r2, r3, ip}
	stm r1!, {r2, r3, ip}
	bx lr
	arm_func_end FUN_020D4928

	arm_func_start FUN_020D4944
FUN_020D4944: @ 0x020D4944
	ldm r0!, {r2, r3, ip}
	stm r1!, {r2, r3, ip}
	ldm r0!, {r2, r3, ip}
	stm r1!, {r2, r3, ip}
	ldm r0!, {r2, r3, ip}
	stm r1!, {r2, r3, ip}
	ldm r0!, {r2, r3, ip}
	stm r1!, {r2, r3, ip}
	bx lr
	arm_func_end FUN_020D4944

	arm_func_start FUN_020D4968
FUN_020D4968: @ 0x020D4968
	ldm r0!, {r2, r3, ip}
	stm r1!, {r2, r3, ip}
	ldm r0!, {r2, r3, ip}
	stm r1!, {r2, r3, ip}
	ldm r0!, {r2, r3, ip}
	stm r1!, {r2, r3, ip}
	ldm r0!, {r2, r3, ip}
	stm r1!, {r2, r3, ip}
	ldm r0, {r0, r2, r3, ip}
	stm r1!, {r0, r2, r3, ip}
	bx lr
	arm_func_end FUN_020D4968

	arm_func_start FUN_020D4994
FUN_020D4994: @ 0x020D4994
	cmp r2, #0
	beq _020D49A0
	b _020D49A4
_020D49A0:
	bx lr
_020D49A4:
	tst r0, #1
	beq _020D49D0
	ldrh ip, [r0, #-1]
	and ip, ip, #0xff
	orr r3, ip, r1, lsl #8
	strh r3, [r0, #-1]
	add r0, r0, #1
	subs r2, r2, #1
	beq _020D49CC
	b _020D49D0
_020D49CC:
	bx lr
_020D49D0:
	cmp r2, #2
	blo _020D4A28
	orr r1, r1, r1, lsl #8
	tst r0, #2
	beq _020D49F8
	strh r1, [r0], #2
	subs r2, r2, #2
	beq _020D49F4
	b _020D49F8
_020D49F4:
	bx lr
_020D49F8:
	orr r1, r1, r1, lsl #16
	bics r3, r2, #3
	beq _020D4A18
	sub r2, r2, r3
	add ip, r3, r0
_020D4A0C:
	str r1, [r0], #4
	cmp r0, ip
	blo _020D4A0C
_020D4A18:
	tst r2, #2
	bne _020D4A24
	b _020D4A28
_020D4A24:
	strh r1, [r0], #2
_020D4A28:
	tst r2, #1
	beq _020D4A34
	b _020D4A38
_020D4A34:
	bx lr
_020D4A38:
	ldrh r3, [r0]
	and r3, r3, #0xff00
	and r1, r1, #0xff
	orr r1, r1, r3
	strh r1, [r0]
	bx lr
	arm_func_end FUN_020D4994

	arm_func_start FUN_020D4A50
FUN_020D4A50: @ 0x020D4A50
	cmp r2, #0
	beq _020D4A5C
	b _020D4A60
_020D4A5C:
	bx lr
_020D4A60:
	tst r1, #1
	beq _020D4AB8
	ldrh ip, [r1, #-1]
	and ip, ip, #0xff
	tst r0, #1
	bne _020D4A7C
	b _020D4A80
_020D4A7C:
	ldrh r3, [r0, #-1]
_020D4A80:
	bne _020D4A88
	b _020D4A8C
_020D4A88:
	lsr r3, r3, #8
_020D4A8C:
	beq _020D4A94
	b _020D4A98
_020D4A94:
	ldrh r3, [r0]
_020D4A98:
	orr r3, ip, r3, lsl #8
	strh r3, [r1, #-1]
	add r0, r0, #1
	add r1, r1, #1
	subs r2, r2, #1
	beq _020D4AB4
	b _020D4AB8
_020D4AB4:
	bx lr
_020D4AB8:
	eor ip, r1, r0
	tst ip, #1
	beq _020D4B14
	bic r0, r0, #1
	ldrh ip, [r0], #2
	lsr r3, ip, #8
	subs r2, r2, #2
	blo _020D4AF0
_020D4AD8:
	ldrh ip, [r0], #2
	orr ip, r3, ip, lsl #8
	strh ip, [r1], #2
	lsr r3, ip, #0x10
	subs r2, r2, #2
	bhs _020D4AD8
_020D4AF0:
	tst r2, #1
	beq _020D4AFC
	b _020D4B00
_020D4AFC:
	bx lr
_020D4B00:
	ldrh ip, [r1]
	and ip, ip, #0xff00
	orr ip, ip, r3
	strh ip, [r1]
	bx lr
_020D4B14:
	tst ip, #2
	beq _020D4B40
	bics r3, r2, #1
	beq _020D4BA4
	sub r2, r2, r3
	add ip, r3, r1
_020D4B2C:
	ldrh r3, [r0], #2
	strh r3, [r1], #2
	cmp r1, ip
	blo _020D4B2C
	b _020D4BA4
_020D4B40:
	cmp r2, #2
	blo _020D4BA4
	tst r1, #2
	beq _020D4B68
	ldrh r3, [r0], #2
	strh r3, [r1], #2
	subs r2, r2, #2
	beq _020D4B64
	b _020D4B68
_020D4B64:
	bx lr
_020D4B68:
	bics r3, r2, #3
	beq _020D4B88
	sub r2, r2, r3
	add ip, r3, r1
_020D4B78:
	ldr r3, [r0], #4
	str r3, [r1], #4
	cmp r1, ip
	blo _020D4B78
_020D4B88:
	tst r2, #2
	bne _020D4B94
	b _020D4B98
_020D4B94:
	ldrh r3, [r0], #2
_020D4B98:
	bne _020D4BA0
	b _020D4BA4
_020D4BA0:
	strh r3, [r1], #2
_020D4BA4:
	tst r2, #1
	beq _020D4BB0
	b _020D4BB4
_020D4BB0:
	bx lr
_020D4BB4:
	ldrh r2, [r1]
	ldrh r0, [r0]
	and r2, r2, #0xff00
	and r0, r0, #0xff
	orr r0, r2, r0
	strh r0, [r1]
	bx lr
	arm_func_end FUN_020D4A50

	thumb_func_start FUN_020D4BD0
FUN_020D4BD0: @ 0x020D4BD0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	stm r0!, {r1, r2, r3}
	stm r0!, {r1, r2, r3}
	stm r0!, {r1, r2, r3}
	bx lr
	thumb_func_end FUN_020D4BD0

	.balign 4, 0

	arm_func_start FUN_020D4BE0
FUN_020D4BE0: @ 0x020D4BE0
	swp r0, r0, [r1]
	bx lr
	arm_func_end FUN_020D4BE0

	arm_func_start FUN_020D4BE8
FUN_020D4BE8: @ 0x020D4BE8
	push {r4, r5, r6, r7, lr}
	ldr r5, [r0], #4
	lsr r2, r5, #8
	mov r7, #0
	tst r5, #0xf
	bne _020D4C04
	b _020D4C08
_020D4C04:
	mov r7, #1
_020D4C08:
	cmp r2, #0
	ble _020D4CE0
	ldrb lr, [r0], #1
	mov r4, #8
_020D4C18:
	subs r4, r4, #1
	blt _020D4C08
	tst lr, #0x80
	bne _020D4C3C
	ldrb r6, [r0], #1
	swpb r6, r6, [r1]
	add r1, r1, #1
	sub r2, r2, #1
	b _020D4CC8
_020D4C3C:
	ldrb r5, [r0]
	cmp r7, #0
	beq _020D4C4C
	b _020D4C50
_020D4C4C:
	mov r6, #3
_020D4C50:
	beq _020D4C94
	tst r5, #0xe0
	bne _020D4C60
	b _020D4C64
_020D4C60:
	mov r6, #1
_020D4C64:
	bne _020D4C94
	add r0, r0, #1
	and r6, r5, #0xf
	lsl r6, r6, #4
	tst r5, #0x10
	beq _020D4C8C
	lsl r6, r6, #8
	ldrb r5, [r0], #1
	add r6, r6, r5, lsl #4
	add r6, r6, #0x100
_020D4C8C:
	add r6, r6, #0x11
	ldrb r5, [r0]
_020D4C94:
	add r3, r6, r5, asr #4
	add r0, r0, #1
	and r5, r5, #0xf
	lsl ip, r5, #8
	ldrb r6, [r0], #1
	orr r5, r6, ip
	add ip, r5, #1
	sub r2, r2, r3
_020D4CB4:
	ldrb r5, [r1, -ip]
	swpb r5, r5, [r1]
	add r1, r1, #1
	subs r3, r3, #1
	bgt _020D4CB4
_020D4CC8:
	cmp r2, #0
	bgt _020D4CD4
	b _020D4CD8
_020D4CD4:
	lsl lr, lr, #1
_020D4CD8:
	bgt _020D4C18
	b _020D4C08
_020D4CE0:
	pop {r4, r5, r6, r7, lr}
	bx lr
	arm_func_end FUN_020D4BE8

	arm_func_start FUN_020D4CE8
FUN_020D4CE8: @ 0x020D4CE8
	push {r3, r4, r5, r6, r7, lr}
	mov r5, r1
	mov r6, r0
	mov r7, r3
	mvn r1, #0
	mov r4, r2
	bl FUN_020D4310
	mov r0, r6
	mov r1, r5
	mov r2, r7
	mov r3, #0x1000000
	bl FUN_020D4394
	cmp r7, #0
	popeq {r3, r4, r5, r6, r7, pc}
	add r0, r6, r6, lsl #1
	add r0, r0, #2
	lsl r0, r0, #2
	add r0, r0, #0xb0
	add r1, r0, #0x4000000
_020D4D34:
	ldr r0, [r1]
	tst r0, #0x80000000
	bne _020D4D34
	ldr r3, _020D4D58 @ =0xAF000001
	mov r0, r6
	mov r1, r5
	mov r2, r4
	bl FUN_01FF8448
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020D4D58: .4byte 0xAF000001
	arm_func_end FUN_020D4CE8

	arm_func_start FUN_020D4D5C
FUN_020D4D5C: @ 0x020D4D5C
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x18
	mov sl, r0
	movs r0, r3
	ldrne r0, _020D4F30 @ =0x00010110
	str r3, [sp, #4]
	strne r0, [sp, #8]
	moveq r0, #0x12
	streq r0, [sp, #8]
	ldr r0, [sp, #4]
	mov sb, r1
	cmp r0, #0
	movne r1, #1
	lsl r0, sb, #8
	moveq r1, #0
	orr r0, r0, #0x10
	mov r8, r2
	orr r0, r0, r1
	str sl, [sp, #0x10]
	mov r7, sb
	cmp sb, #0
	str r0, [r8], #4
	mov r4, #4
	beq _020D4EFC
_020D4DBC:
	ldr r0, _020D4F34 @ =0x00000111
	mov r5, #0
	str r8, [sp, #0xc]
	mov r6, r5
	add r8, r8, #1
	add r4, r4, #1
	rsb fp, r0, #0
_020D4DD8:
	cmp sb, #0
	lsl r0, r5, #1
	and r5, r0, #0xff
	beq _020D4EDC
	ldr r0, [sp, #8]
	mov r1, sl
	str r0, [sp]
	ldr r0, [sp, #0x10]
	mov r2, sb
	add r3, sp, #0x14
	bl FUN_020D4F38
	cmp r0, #0
	beq _020D4EBC
	orr r1, r5, #1
	add r2, r4, #2
	cmp r2, r7
	and r5, r1, #0xff
	addhs sp, sp, #0x18
	movhs r0, #0
	pophs {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r1, [sp, #4]
	cmp r1, #0
	beq _020D4E84
	ldr r1, _020D4F34 @ =0x00000111
	cmp r0, r1
	blo _020D4E64
	mov r4, r2
	add r1, r0, fp
	lsr r2, r1, #0xc
	orr r2, r2, #0x10
	strb r2, [r8]
	lsr r2, r1, #4
	strb r2, [r8, #1]
	add r8, r8, #2
	b _020D4E88
_020D4E64:
	cmp r0, #0x11
	sublo r1, r0, #1
	blo _020D4E88
	sub r1, r0, #0x11
	lsr r2, r1, #4
	strb r2, [r8], #1
	add r4, r4, #1
	b _020D4E88
_020D4E84:
	sub r1, r0, #3
_020D4E88:
	ldrh r2, [sp, #0x14]
	add r4, r4, #2
	add sl, sl, r0
	sub r2, r2, #1
	asr r2, r2, #8
	orr r1, r2, r1, lsl #4
	strb r1, [r8]
	sub sb, sb, r0
	ldrh r0, [sp, #0x14]
	sub r0, r0, #1
	strb r0, [r8, #1]
	add r8, r8, #2
	b _020D4EDC
_020D4EBC:
	add r4, r4, #1
	cmp r4, r7
	addhs sp, sp, #0x18
	movhs r0, #0
	pophs {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldrb r0, [sl], #1
	sub sb, sb, #1
	strb r0, [r8], #1
_020D4EDC:
	add r0, r6, #1
	and r6, r0, #0xff
	cmp r6, #8
	blo _020D4DD8
	ldr r0, [sp, #0xc]
	cmp sb, #0
	strb r5, [r0]
	bne _020D4DBC
_020D4EFC:
	tst r4, #3
	mov r2, #0
	beq _020D4F24
	mov r1, r2
_020D4F0C:
	add r0, r2, #1
	and r2, r0, #0xff
	add r0, r4, r2
	tst r0, #3
	strb r1, [r8], #1
	bne _020D4F0C
_020D4F24:
	mov r0, r4
	add sp, sp, #0x18
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020D4F30: .4byte 0x00010110
_020D4F34: .4byte 0x00000111
	arm_func_end FUN_020D4D5C

	arm_func_start FUN_020D4F38
FUN_020D4F38: @ 0x020D4F38
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	ldr r7, [sp, #0x20]
	mov r4, #2
	cmp r2, #3
	movlo r0, #0
	poplo {r4, r5, r6, r7, r8, sb, sl, pc}
	sub ip, r1, #0x1000
	cmp ip, r0
	movlo ip, r0
	sub r6, r1, ip
	cmp r6, #2
	blt _020D5018
_020D4F68:
	mov r0, r1
	ldrb r5, [r1]
	b _020D4F84
_020D4F74:
	add ip, ip, #1
	sub r6, r1, ip
	cmp r6, #2
	blt _020D5018
_020D4F84:
	ldrb r8, [ip]
	cmp r5, r8
	ldrbeq sb, [r1, #1]
	ldrbeq r8, [ip, #1]
	cmpeq sb, r8
	ldrbeq sb, [r1, #2]
	ldrbeq r8, [ip, #2]
	cmpeq sb, r8
	bne _020D4F74
	add sl, ip, #3
	add r0, r0, #3
	mov r5, #3
	b _020D4FCC
_020D4FB8:
	add r5, r5, #1
	cmp r5, r7
	add r0, r0, #1
	add sl, sl, #1
	beq _020D4FE8
_020D4FCC:
	sub r8, r0, r1
	cmp r8, r2
	bhs _020D4FE8
	ldrb sb, [r0]
	ldrb r8, [sl]
	cmp sb, r8
	beq _020D4FB8
_020D4FE8:
	cmp r5, r4
	bls _020D5008
	lsl r0, r6, #0x10
	cmp r5, r7
	mov r4, r5
	lsr lr, r0, #0x10
	cmpne r5, r2
	beq _020D5018
_020D5008:
	add ip, ip, #1
	sub r6, r1, ip
	cmp r6, #2
	bge _020D4F68
_020D5018:
	cmp r4, #3
	movlo r0, #0
	movhs r0, r4
	strhhs lr, [r3]
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	arm_func_end FUN_020D4F38

	arm_func_start FUN_020D502C
FUN_020D502C: @ 0x020D502C
	push {r3, lr}
	mov r0, #3
	bl FUN_020D3F64
	mov r0, #0
	bl FUN_020D4294
	pop {r3, pc}
	arm_func_end FUN_020D502C

	arm_func_start FUN_020D5044
FUN_020D5044: @ 0x020D5044
	push {r3, lr}
	mov r2, #0
	mov r1, r0
	mov r3, r2
	mov r0, #1
	str r2, [sp]
	bl FUN_020D548C
	pop {r3, pc}
	arm_func_end FUN_020D5044

	arm_func_start FUN_020D5064
FUN_020D5064: @ 0x020D5064
	push {r3, lr}
	mov lr, r1
	mov ip, r2
	str r3, [sp]
	mov r1, r0
	mov r2, lr
	mov r3, ip
	mov r0, #2
	bl FUN_020D548C
	pop {r3, pc}
	arm_func_end FUN_020D5064

	arm_func_start FUN_020D508C
FUN_020D508C: @ 0x020D508C
	push {r3, lr}
	mov r2, #0
	mov r1, r0
	mov r3, r2
	mov r0, #3
	str r2, [sp]
	bl FUN_020D548C
	pop {r3, pc}
	arm_func_end FUN_020D508C

	arm_func_start FUN_020D50AC
FUN_020D50AC: @ 0x020D50AC
	push {r3, lr}
	mov r2, r1
	mov r3, #0
	mov r1, r0
	mov r0, #4
	str r3, [sp]
	bl FUN_020D548C
	pop {r3, pc}
	arm_func_end FUN_020D50AC

	arm_func_start FUN_020D50CC
FUN_020D50CC: @ 0x020D50CC
	ldr ip, _020D50E0 @ =FUN_020D543C
	mov r2, r1
	mov r1, #0x1a
	mov r3, #2
	bx ip
	.align 2, 0
_020D50E0: .4byte FUN_020D543C
	arm_func_end FUN_020D50CC

	arm_func_start FUN_020D50E4
FUN_020D50E4: @ 0x020D50E4
	ldr ip, _020D50F8 @ =FUN_020D543C
	mov r2, r1
	mov r1, #6
	mov r3, #2
	bx ip
	.align 2, 0
_020D50F8: .4byte FUN_020D543C
	arm_func_end FUN_020D50E4

	arm_func_start FUN_020D50FC
FUN_020D50FC: @ 0x020D50FC
	ldr ip, _020D5110 @ =FUN_020D543C
	mov r2, r1
	mov r1, #4
	mov r3, #1
	bx ip
	.align 2, 0
_020D5110: .4byte FUN_020D543C
	arm_func_end FUN_020D50FC

	arm_func_start FUN_020D5114
FUN_020D5114: @ 0x020D5114
	push {r3, lr}
	mov r3, r2
	mov ip, #2
	mov r2, #0xc
	str ip, [sp]
	bl FUN_020D5464
	pop {r3, pc}
	arm_func_end FUN_020D5114

	arm_func_start FUN_020D5130
FUN_020D5130: @ 0x020D5130
	push {r3, lr}
	mov r3, r2
	mov ip, #1
	mov r2, #9
	str ip, [sp]
	bl FUN_020D5464
	pop {r3, pc}
	arm_func_end FUN_020D5130

	arm_func_start FUN_020D514C
FUN_020D514C: @ 0x020D514C
	push {r3, lr}
	mov lr, r1
	mov r3, r2
	mov ip, #0
	mov r1, r0
	mov r2, lr
	mov r0, #9
	str ip, [sp]
	bl FUN_020D548C
	pop {r3, pc}
	arm_func_end FUN_020D514C

	arm_func_start FUN_020D5174
FUN_020D5174: @ 0x020D5174
	push {r3, lr}
	mov lr, r1
	mov ip, r2
	str r3, [sp]
	mov r1, r0
	mov r2, lr
	mov r3, ip
	mov r0, #0xc
	bl FUN_020D548C
	pop {r3, pc}
	arm_func_end FUN_020D5174

	arm_func_start FUN_020D519C
FUN_020D519C: @ 0x020D519C
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r7, r2
	mov sb, r0
	mov r8, r1
	mov r6, r3
	mov r5, r7
	mov r4, #0
	b _020D51D4
_020D51BC:
	tst r5, #1
	beq _020D51CC
	mov r0, r4
	bl FUN_020D5C70
_020D51CC:
	add r4, r4, #1
	lsr r5, r5, #1
_020D51D4:
	cmp r4, #8
	bge _020D51E4
	cmp r5, #0
	bne _020D51BC
_020D51E4:
	mov r1, sb
	mov r2, r8
	mov r3, r7
	mov r0, #0xd
	str r6, [sp]
	bl FUN_020D548C
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	arm_func_end FUN_020D519C

	arm_func_start FUN_020D5200
FUN_020D5200: @ 0x020D5200
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #4
	mov r4, r2
	mov r5, r1
	ldr r2, [sp, #0x18]
	mov r6, r0
	mov r1, r3
	bl FUN_020D5C90
	str r0, [sp]
	mov r1, r6
	mov r2, r5
	mov r3, r4
	mov r0, #0x12
	bl FUN_020D548C
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
	arm_func_end FUN_020D5200

	arm_func_start FUN_020D5240
FUN_020D5240: @ 0x020D5240
	push {r3, lr}
	mov r2, r1
	mov r3, #0
	mov r1, r0
	mov r0, #0x1a
	str r3, [sp]
	bl FUN_020D548C
	pop {r3, pc}
	arm_func_end FUN_020D5240

	arm_func_start FUN_020D5260
FUN_020D5260: @ 0x020D5260
	push {r3, lr}
	mov r2, r1
	mov r3, #0
	mov r1, r0
	mov r0, #0x1b
	str r3, [sp]
	bl FUN_020D548C
	pop {r3, pc}
	arm_func_end FUN_020D5260

	arm_func_start FUN_020D5280
FUN_020D5280: @ 0x020D5280
	push {r3, lr}
	mov r2, r1
	mov r3, #0
	mov r1, r0
	mov r0, #0x13
	str r3, [sp]
	bl FUN_020D548C
	pop {r3, pc}
	arm_func_end FUN_020D5280

	arm_func_start FUN_020D52A0
FUN_020D52A0: @ 0x020D52A0
	push {r3, lr}
	mov lr, r1
	mov r3, r2
	mov ip, #0
	mov r1, r0
	mov r2, lr
	mov r0, #0x14
	str ip, [sp]
	bl FUN_020D548C
	pop {r3, pc}
	arm_func_end FUN_020D52A0

	arm_func_start FUN_020D52C8
FUN_020D52C8: @ 0x020D52C8
	push {r3, lr}
	mov r2, r1
	mov r3, #0
	mov r1, r0
	mov r0, #0x15
	str r3, [sp]
	bl FUN_020D548C
	pop {r3, pc}
	arm_func_end FUN_020D52C8

	arm_func_start FUN_020D52E8
FUN_020D52E8: @ 0x020D52E8
	push {r3, r4, r5, lr}
	ldr ip, [sp, #0x1c]
	lsl r1, r1, #0x18
	orr r4, r1, r3, lsl #26
	ldr r5, [sp, #0x24]
	lsl r1, ip, #0x16
	ldr r3, [sp, #0x18]
	ldr ip, [sp, #0x10]
	orr r4, r4, r5, lsl #16
	orr r4, ip, r4
	ldr lr, [sp, #0x20]
	orr r3, r1, r3, lsl #24
	ldr ip, [sp, #0x14]
	orr r1, r0, lr, lsl #16
	orr r3, ip, r3
	mov r0, #0xe
	str r4, [sp]
	bl FUN_020D548C
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020D52E8

	arm_func_start FUN_020D5334
FUN_020D5334: @ 0x020D5334
	push {r3, lr}
	mov r2, r1
	mov r3, #0
	mov r1, r0
	mov r0, #0x1e
	str r3, [sp]
	bl FUN_020D548C
	pop {r3, pc}
	arm_func_end FUN_020D5334

	arm_func_start FUN_020D5354
FUN_020D5354: @ 0x020D5354
	push {r3, lr}
	mov r2, r1
	mov r3, #0
	mov r1, r0
	mov r0, #0x1f
	str r3, [sp]
	bl FUN_020D548C
	pop {r3, pc}
	arm_func_end FUN_020D5354

	arm_func_start FUN_020D5374
FUN_020D5374: @ 0x020D5374
	push {r3, lr}
	mov r2, r1
	mov r3, #0
	mov r1, r0
	mov r0, #0x20
	str r3, [sp]
	bl FUN_020D548C
	pop {r3, pc}
	arm_func_end FUN_020D5374

	arm_func_start FUN_020D5394
FUN_020D5394: @ 0x020D5394
	push {r3, lr}
	mov r2, #0
	mov r1, r0
	mov r3, r2
	mov r0, #0x17
	str r2, [sp]
	bl FUN_020D548C
	pop {r3, pc}
	arm_func_end FUN_020D5394

	arm_func_start FUN_020D53B4
FUN_020D53B4: @ 0x020D53B4
	push {r3, lr}
	mov lr, r1
	mov ip, r2
	str r3, [sp]
	mov r1, r0
	mov r2, lr
	mov r3, ip
	mov r0, #0x19
	bl FUN_020D548C
	pop {r3, pc}
	arm_func_end FUN_020D53B4

	arm_func_start FUN_020D53DC
FUN_020D53DC: @ 0x020D53DC
	push {r3, lr}
	mov r2, #0
	mov r1, r0
	mov r3, r2
	mov r0, #0x18
	str r2, [sp]
	bl FUN_020D548C
	pop {r3, pc}
	arm_func_end FUN_020D53DC

	arm_func_start FUN_020D53FC
FUN_020D53FC: @ 0x020D53FC
	push {r3, lr}
	mov r2, #0
	mov r0, #0x18
	mov r3, r2
	sub r1, r0, #0x19
	str r2, [sp]
	bl FUN_020D548C
	pop {r3, pc}
	arm_func_end FUN_020D53FC

	arm_func_start FUN_020D541C
FUN_020D541C: @ 0x020D541C
	push {r3, lr}
	mov r2, #0
	mov r1, r0
	mov r3, r2
	mov r0, #0x21
	str r2, [sp]
	bl FUN_020D548C
	pop {r3, pc}
	arm_func_end FUN_020D541C

	arm_func_start FUN_020D543C
FUN_020D543C: @ 0x020D543C
	push {r3, lr}
	mov lr, r1
	mov ip, r2
	str r3, [sp]
	mov r1, r0
	mov r2, lr
	mov r3, ip
	mov r0, #6
	bl FUN_020D548C
	pop {r3, pc}
	arm_func_end FUN_020D543C

	arm_func_start FUN_020D5464
FUN_020D5464: @ 0x020D5464
	push {r3, lr}
	ldr ip, [sp, #8]
	mov lr, r2
	str r3, [sp]
	mov r2, r1
	orr r1, r0, ip, lsl #24
	mov r3, lr
	mov r0, #7
	bl FUN_020D548C
	pop {r3, pc}
	arm_func_end FUN_020D5464

	arm_func_start FUN_020D548C
FUN_020D548C: @ 0x020D548C
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	mov r0, #1
	mov r6, r1
	mov r5, r2
	mov r4, r3
	bl FUN_020D5714
	cmp r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	str r7, [r0, #4]
	str r6, [r0, #8]
	str r5, [r0, #0xc]
	ldr r1, [sp, #0x18]
	str r4, [r0, #0x10]
	str r1, [r0, #0x14]
	bl FUN_020D579C
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020D548C

	arm_func_start FUN_020D54D0
FUN_020D54D0: @ 0x020D54D0
	push {r3, lr}
	ldr r1, _020D5500 @ =0x021E1A40
	ldr r0, [r1]
	cmp r0, #0
	popne {r3, pc}
	ldr r0, _020D5504 @ =0x021E1A44
	mov r2, #1
	str r2, [r1]
	bl FUN_020D2600
	bl FUN_020D5530
	bl FUN_020D5C40
	pop {r3, pc}
	.align 2, 0
_020D5500: .4byte 0x021E1A40
_020D5504: .4byte 0x021E1A44
	arm_func_end FUN_020D54D0

	arm_func_start FUN_020D5508
FUN_020D5508: @ 0x020D5508
	ldr ip, _020D5514 @ =FUN_020D2618
	ldr r0, _020D5518 @ =0x021E1A44
	bx ip
	.align 2, 0
_020D5514: .4byte FUN_020D2618
_020D5518: .4byte 0x021E1A44
	arm_func_end FUN_020D5508

	arm_func_start FUN_020D551C
FUN_020D551C: @ 0x020D551C
	ldr ip, _020D5528 @ =FUN_020D269C
	ldr r0, _020D552C @ =0x021E1A44
	bx ip
	.align 2, 0
_020D5528: .4byte FUN_020D269C
_020D552C: .4byte 0x021E1A44
	arm_func_end FUN_020D551C

	arm_func_start FUN_020D5530
FUN_020D5530: @ 0x020D5530
	push {r4, lr}
	bl FUN_020D5B30
	ldr lr, _020D55EC @ =0x021E1D40
	ldr r0, _020D55F0 @ =0x021E1A60
	mov r4, #0
	str lr, [r0]
	mov r0, #0x18
	mov r1, r0
	b _020D5568
_020D5554:
	add r3, r4, #1
	mul r2, r4, r1
	mla ip, r3, r0, lr
	mov r4, r3
	str ip, [lr, r2]
_020D5568:
	cmp r4, #0xff
	blt _020D5554
	ldr r0, _020D55F4 @ =0x021E2A60
	mov r3, #0
	str r3, [r0, #0xac8]
	ldr r1, _020D55F8 @ =0x021E3528
	ldr r2, _020D55F0 @ =0x021E1A60
	mov r0, #1
	str r1, [r2, #0x10]
	str r3, [r2, #8]
	str r3, [r2, #0xc]
	str r3, [r2, #0x1c]
	str r3, [r2, #0x14]
	str r3, [r2, #0x18]
	str r0, [r2, #0x20]
	ldr r0, _020D55FC @ =0x021E1AC0
	ldr r1, _020D5600 @ =0x021E35A0
	str r3, [r2, #4]
	str r0, [r1]
	bl FUN_020D6068
	mov r0, #1
	bl FUN_020D5714
	cmp r0, #0
	popeq {r4, pc}
	mov r2, #0x1d
	ldr r1, _020D5600 @ =0x021E35A0
	str r2, [r0, #4]
	ldr r1, [r1]
	str r1, [r0, #8]
	bl FUN_020D579C
	mov r0, #1
	bl FUN_020D57D4
	pop {r4, pc}
	.align 2, 0
_020D55EC: .4byte 0x021E1D40
_020D55F0: .4byte 0x021E1A60
_020D55F4: .4byte 0x021E2A60
_020D55F8: .4byte 0x021E3528
_020D55FC: .4byte 0x021E1AC0
_020D5600: .4byte 0x021E35A0
	arm_func_end FUN_020D5530

	arm_func_start FUN_020D5604
FUN_020D5604: @ 0x020D5604
	push {r4, r5, r6, lr}
	mov r5, r0
	bl FUN_020D3A38
	mov r4, r0
	tst r5, #1
	beq _020D5660
	bl FUN_020D6040
	ldr r5, _020D570C @ =0x021E1A60
	ldr r1, [r5, #4]
	cmp r1, r0
	bne _020D5684
	mov r6, #0x64
_020D5634:
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, r6
	bl _020D3AA8
	bl FUN_020D3A38
	mov r4, r0
	bl FUN_020D6040
	ldr r1, [r5, #4]
	cmp r1, r0
	beq _020D5634
	b _020D5684
_020D5660:
	bl FUN_020D6040
	ldr r1, _020D570C @ =0x021E1A60
	ldr r1, [r1, #4]
	cmp r1, r0
	bne _020D5684
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, #0
	pop {r4, r5, r6, pc}
_020D5684:
	ldr r0, _020D570C @ =0x021E1A60
	ldr r2, _020D5710 @ =0x021E1A84
	ldr r3, [r0, #0x14]
	add r1, r3, #1
	ldr r5, [r2, r3, lsl #2]
	str r1, [r0, #0x14]
	cmp r1, #8
	movgt r1, #0
	strgt r1, [r0, #0x14]
	ldr r0, [r5]
	mov r2, r5
	cmp r0, #0
	beq _020D56C8
_020D56B8:
	ldr r2, [r2]
	ldr r0, [r2]
	cmp r0, #0
	bne _020D56B8
_020D56C8:
	ldr r0, _020D570C @ =0x021E1A60
	ldr r1, [r0, #0x10]
	cmp r1, #0
	strne r5, [r1]
	streq r5, [r0]
	ldr r1, _020D570C @ =0x021E1A60
	mov r0, r4
	str r2, [r1, #0x10]
	ldr r2, [r1, #0x1c]
	sub r2, r2, #1
	str r2, [r1, #0x1c]
	ldr r2, [r1, #4]
	add r2, r2, #1
	str r2, [r1, #4]
	bl FUN_020D3A4C
	mov r0, r5
	pop {r4, r5, r6, pc}
	.align 2, 0
_020D570C: .4byte 0x021E1A60
_020D5710: .4byte 0x021E1A84
	arm_func_end FUN_020D5604

	arm_func_start FUN_020D5714
FUN_020D5714: @ 0x020D5714
	push {r4, lr}
	mov r4, r0
	bl FUN_020D5C00
	cmp r0, #0
	moveq r0, #0
	popeq {r4, pc}
	bl FUN_020D5BB8
	cmp r0, #0
	popne {r4, pc}
	tst r4, #1
	moveq r0, #0
	popeq {r4, pc}
	bl FUN_020D5AF0
	cmp r0, #0
	ble _020D5774
	mov r4, #0
_020D5754:
	mov r0, r4
	bl FUN_020D5604
	cmp r0, #0
	bne _020D5754
	bl FUN_020D5BB8
	cmp r0, #0
	beq _020D577C
	pop {r4, pc}
_020D5774:
	mov r0, #1
	bl FUN_020D57D4
_020D577C:
	bl FUN_020D5B90
	mov r4, #1
_020D5784:
	mov r0, r4
	bl FUN_020D5604
	bl FUN_020D5BB8
	cmp r0, #0
	beq _020D5784
	pop {r4, pc}
	arm_func_end FUN_020D5714

	arm_func_start FUN_020D579C
FUN_020D579C: @ 0x020D579C
	push {r4, lr}
	mov r4, r0
	bl FUN_020D3A38
	ldr r1, _020D57D0 @ =0x021E1A60
	ldr r2, [r1, #0xc]
	cmp r2, #0
	streq r4, [r1, #8]
	strne r4, [r2]
	str r4, [r1, #0xc]
	mov r1, #0
	str r1, [r4]
	bl FUN_020D3A4C
	pop {r4, pc}
	.align 2, 0
_020D57D0: .4byte 0x021E1A60
	arm_func_end FUN_020D579C

	arm_func_start FUN_020D57D4
FUN_020D57D4: @ 0x020D57D4
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sl, r0
	bl FUN_020D3A38
	ldr r4, _020D5984 @ =0x021E1A60
	mov sb, r0
	ldr r1, [r4, #8]
	cmp r1, #0
	bne _020D5800
	bl FUN_020D3A4C
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020D5800:
	ldr r1, [r4, #0x1c]
	cmp r1, #8
	blt _020D5858
	tst sl, #1
	bne _020D5820
	bl FUN_020D3A4C
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020D5820:
	mov r5, #1
_020D5824:
	mov r0, r5
	bl FUN_020D5604
	ldr r0, [r4, #0x1c]
	cmp r0, #8
	bge _020D5824
	ldr r0, _020D5984 @ =0x021E1A60
	ldr r0, [r0, #8]
	cmp r0, #0
	bne _020D5858
	mov r0, sb
	bl FUN_020D3A4C
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020D5858:
	ldr r0, _020D5988 @ =0x021E1D40
	mov r1, #0x1800
	bl FUN_020D2894
	ldr r1, _020D5984 @ =0x021E1A60
	mov r0, #7
	ldr r1, [r1, #8]
	mov r2, #0
	bl FUN_020D66C4
	cmp r0, #0
	bge _020D5918
	tst sl, #1
	bne _020D5898
	mov r0, sb
	bl FUN_020D3A4C
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020D5898:
	mov fp, #0
	mov r5, #7
	mov r8, fp
	ldr r7, _020D5988 @ =0x021E1D40
	mov r6, #0x1800
	ldr r4, _020D5984 @ =0x021E1A60
	b _020D58F4
_020D58B4:
	mov r0, sb
	bl FUN_020D3A4C
	mov r0, r8
	bl FUN_020D5604
	bl FUN_020D3A38
	mov sb, r0
	mov r0, r7
	mov r1, r6
	bl FUN_020D2894
	ldr r0, [r4, #8]
	cmp r0, #0
	bne _020D58F4
	mov r0, sb
	bl FUN_020D3A4C
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020D58F4:
	ldr r0, [r4, #0x1c]
	cmp r0, #8
	bge _020D58B4
	ldr r1, [r4, #8]
	mov r0, r5
	mov r2, fp
	bl FUN_020D66C4
	cmp r0, #0
	blt _020D58B4
_020D5918:
	ldr r0, _020D5984 @ =0x021E1A60
	ldr r2, _020D598C @ =0x021E1A84
	ldr r3, [r0, #0x18]
	ldr r4, [r0, #8]
	add r1, r3, #1
	str r4, [r2, r3, lsl #2]
	str r1, [r0, #0x18]
	cmp r1, #8
	movgt r1, #0
	strgt r1, [r0, #0x18]
	ldr r1, _020D5984 @ =0x021E1A60
	mov r0, #0
	str r0, [r1, #8]
	str r0, [r1, #0xc]
	ldr r2, [r1, #0x1c]
	mov r0, sb
	add r2, r2, #1
	str r2, [r1, #0x1c]
	ldr r2, [r1, #0x20]
	add r2, r2, #1
	str r2, [r1, #0x20]
	bl FUN_020D3A4C
	tst sl, #2
	beq _020D597C
	bl FUN_020D5B90
_020D597C:
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020D5984: .4byte 0x021E1A60
_020D5988: .4byte 0x021E1D40
_020D598C: .4byte 0x021E1A84
	arm_func_end FUN_020D57D4

	arm_func_start FUN_020D5990
FUN_020D5990: @ 0x020D5990
	push {r3, r4, r5, lr}
	mov r5, r0
	bl FUN_020D5A28
	cmp r0, #0
	popne {r3, r4, r5, pc}
	mov r4, #0
_020D59A8:
	mov r0, r4
	bl FUN_020D5604
	cmp r0, #0
	bne _020D59A8
	mov r0, r5
	bl FUN_020D5A28
	cmp r0, #0
	popne {r3, r4, r5, pc}
	bl FUN_020D5B90
	mov r0, r5
	bl FUN_020D5A28
	cmp r0, #0
	popne {r3, r4, r5, pc}
	mov r4, #1
_020D59E0:
	mov r0, r4
	bl FUN_020D5604
	mov r0, r5
	bl FUN_020D5A28
	cmp r0, #0
	beq _020D59E0
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020D5990

	arm_func_start FUN_020D59FC
FUN_020D59FC: @ 0x020D59FC
	push {r4, lr}
	bl FUN_020D3A38
	ldr r1, _020D5A24 @ =0x021E1A60
	ldr r2, [r1, #8]
	cmp r2, #0
	ldreq r4, [r1, #4]
	ldrne r4, [r1, #0x20]
	bl FUN_020D3A4C
	mov r0, r4
	pop {r4, pc}
	.align 2, 0
_020D5A24: .4byte 0x021E1A60
	arm_func_end FUN_020D59FC

	arm_func_start FUN_020D5A28
FUN_020D5A28: @ 0x020D5A28
	push {r4, lr}
	mov r4, r0
	bl FUN_020D3A38
	ldr r1, _020D5A74 @ =0x021E1A60
	ldr r1, [r1, #4]
	cmp r4, r1
	bls _020D5A58
	sub r1, r4, r1
	cmp r1, #0x80000000
	movlo r4, #0
	movhs r4, #1
	b _020D5A68
_020D5A58:
	sub r1, r1, r4
	cmp r1, #0x80000000
	movlo r4, #1
	movhs r4, #0
_020D5A68:
	bl FUN_020D3A4C
	mov r0, r4
	pop {r4, pc}
	.align 2, 0
_020D5A74: .4byte 0x021E1A60
	arm_func_end FUN_020D5A28

	arm_func_start FUN_020D5A78
FUN_020D5A78: @ 0x020D5A78
	push {r4, lr}
	bl FUN_020D3A38
	ldr r1, _020D5AB0 @ =0x021E1A60
	mov r4, #0
	ldr r1, [r1]
	cmp r1, #0
	beq _020D5AA4
_020D5A94:
	ldr r1, [r1]
	add r4, r4, #1
	cmp r1, #0
	bne _020D5A94
_020D5AA4:
	bl FUN_020D3A4C
	mov r0, r4
	pop {r4, pc}
	.align 2, 0
_020D5AB0: .4byte 0x021E1A60
	arm_func_end FUN_020D5A78

	arm_func_start FUN_020D5AB4
FUN_020D5AB4: @ 0x020D5AB4
	push {r4, lr}
	bl FUN_020D3A38
	ldr r1, _020D5AEC @ =0x021E1A60
	mov r4, #0
	ldr r1, [r1, #8]
	cmp r1, #0
	beq _020D5AE0
_020D5AD0:
	ldr r1, [r1]
	add r4, r4, #1
	cmp r1, #0
	bne _020D5AD0
_020D5AE0:
	bl FUN_020D3A4C
	mov r0, r4
	pop {r4, pc}
	.align 2, 0
_020D5AEC: .4byte 0x021E1A60
	arm_func_end FUN_020D5AB4

	arm_func_start FUN_020D5AF0
FUN_020D5AF0: @ 0x020D5AF0
	push {r4, lr}
	bl FUN_020D5A78
	mov r4, r0
	bl FUN_020D5AB4
	rsb r1, r4, #0x100
	sub r0, r1, r0
	pop {r4, pc}
	arm_func_end FUN_020D5AF0

	arm_func_start FUN_020D5B0C
FUN_020D5B0C: @ 0x020D5B0C
	push {r3, r4, r5, lr}
	mov r5, r1
	bl FUN_020D3A38
	mov r4, r0
	mov r0, r5
	bl FUN_020D5CC0
	mov r0, r4
	bl FUN_020D3A4C
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020D5B0C

	arm_func_start FUN_020D5B30
FUN_020D5B30: @ 0x020D5B30
	push {r4, r5, r6, lr}
	ldr r1, _020D5B8C @ =FUN_020D5B0C
	mov r0, #7
	bl FUN_020D6654
	bl FUN_020D5C00
	cmp r0, #0
	popeq {r4, r5, r6, pc}
	mov r0, #7
	mov r1, #1
	bl FUN_020D66A0
	cmp r0, #0
	popne {r4, r5, r6, pc}
	mov r6, #0x64
	mov r5, #7
	mov r4, #1
_020D5B6C:
	mov r0, r6
	bl _020D3AA8
	mov r0, r5
	mov r1, r4
	bl FUN_020D66A0
	cmp r0, #0
	beq _020D5B6C
	pop {r4, r5, r6, pc}
	.align 2, 0
_020D5B8C: .4byte FUN_020D5B0C
	arm_func_end FUN_020D5B30

	arm_func_start FUN_020D5B90
FUN_020D5B90: @ 0x020D5B90
	push {r3, r4, r5, lr}
	mov r5, #7
	mov r4, #0
_020D5B9C:
	mov r0, r5
	mov r1, r4
	mov r2, r4
	bl FUN_020D66C4
	cmp r0, #0
	blt _020D5B9C
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020D5B90

	arm_func_start FUN_020D5BB8
FUN_020D5BB8: @ 0x020D5BB8
	push {r4, lr}
	bl FUN_020D3A38
	ldr r1, _020D5BFC @ =0x021E1A60
	ldr r4, [r1]
	cmp r4, #0
	bne _020D5BDC
	bl FUN_020D3A4C
	mov r0, #0
	pop {r4, pc}
_020D5BDC:
	ldr r2, [r4]
	str r2, [r1]
	cmp r2, #0
	moveq r2, #0
	streq r2, [r1, #0x10]
	bl FUN_020D3A4C
	mov r0, r4
	pop {r4, pc}
	.align 2, 0
_020D5BFC: .4byte 0x021E1A60
	arm_func_end FUN_020D5BB8

	arm_func_start FUN_020D5C00
FUN_020D5C00: @ 0x020D5C00
	push {r4, lr}
	bl FUN_020D2368
	cmp r0, #0
	moveq r0, #1
	popeq {r4, pc}
	bl FUN_020D3A38
	ldr r1, _020D5C3C @ =0x04FFF200
	mov r2, #0x10
	str r2, [r1]
	ldr r4, [r1]
	bl FUN_020D3A4C
	cmp r4, #0
	movne r0, #1
	moveq r0, #0
	pop {r4, pc}
	.align 2, 0
_020D5C3C: .4byte 0x04FFF200
	arm_func_end FUN_020D5C00

	arm_func_start FUN_020D5C40
FUN_020D5C40: @ 0x020D5C40
	mov r1, #0
	ldr r2, _020D5C6C @ =0x021E3540
	mov r0, r1
_020D5C4C:
	str r0, [r2]
	str r0, [r2, #4]
	add r1, r1, #1
	strb r0, [r2, #8]
	cmp r1, #8
	add r2, r2, #0xc
	blt _020D5C4C
	bx lr
	.align 2, 0
_020D5C6C: .4byte 0x021E3540
	arm_func_end FUN_020D5C40

	arm_func_start FUN_020D5C70
FUN_020D5C70: @ 0x020D5C70
	ldr r2, _020D5C8C @ =0x021E3540
	mov r1, #0xc
	mla r1, r0, r1, r2
	ldrb r0, [r1, #8]
	add r0, r0, #1
	strb r0, [r1, #8]
	bx lr
	.align 2, 0
_020D5C8C: .4byte 0x021E3540
	arm_func_end FUN_020D5C70

	arm_func_start FUN_020D5C90
FUN_020D5C90: @ 0x020D5C90
	mov r3, #0xc
	mul r3, r0, r3
	ldr r0, _020D5CBC @ =0x021E3540
	str r1, [r0, r3]
	add r1, r0, r3
	str r2, [r1, #4]
	ldrb r0, [r1, #8]
	add r0, r0, #1
	strb r0, [r1, #8]
	and r0, r0, #0xff
	bx lr
	.align 2, 0
_020D5CBC: .4byte 0x021E3540
	arm_func_end FUN_020D5C90

	arm_func_start FUN_020D5CC0
FUN_020D5CC0: @ 0x020D5CC0
	push {r3, lr}
	ldr r3, _020D5D00 @ =0x021E3540
	and r2, r0, #0xff
	mov r1, #0xc
	mla r3, r2, r1, r3
	asr r1, r0, #8
	ldrb r0, [r3, #8]
	and r1, r1, #0xff
	cmp r1, r0
	popne {r3, pc}
	ldr r1, [r3]
	cmp r1, #0
	popeq {r3, pc}
	ldr r0, [r3, #4]
	blx r1
	pop {r3, pc}
	.align 2, 0
_020D5D00: .4byte 0x021E3540
	arm_func_end FUN_020D5CC0

	arm_func_start FUN_020D5D04
FUN_020D5D04: @ 0x020D5D04
	push {r3, lr}
	ldr r0, _020D5D2C @ =0x021E35A0
	mov r1, #4
	ldr r0, [r0]
	add r0, r0, #4
	bl FUN_020D285C
	ldr r0, _020D5D2C @ =0x021E35A0
	ldr r0, [r0]
	ldr r0, [r0, #4]
	pop {r3, pc}
	.align 2, 0
_020D5D2C: .4byte 0x021E35A0
	arm_func_end FUN_020D5D04

	arm_func_start FUN_020D5D30
FUN_020D5D30: @ 0x020D5D30
	push {r3, lr}
	ldr r0, _020D5D58 @ =0x021E35A0
	mov r1, #2
	ldr r0, [r0]
	add r0, r0, #8
	bl FUN_020D285C
	ldr r0, _020D5D58 @ =0x021E35A0
	ldr r0, [r0]
	ldrh r0, [r0, #8]
	pop {r3, pc}
	.align 2, 0
_020D5D58: .4byte 0x021E35A0
	arm_func_end FUN_020D5D30

	arm_func_start FUN_020D5D5C
FUN_020D5D5C: @ 0x020D5D5C
	push {r3, r4, r5, lr}
	mov r2, #0x24
	mul r4, r0, r2
	ldr r0, _020D5DA0 @ =0x021E35A0
	mov r5, r1
	ldr r0, [r0]
	mov r1, #2
	add r0, r0, #0x20
	add r0, r0, r4
	add r0, r0, r5, lsl #1
	bl FUN_020D285C
	ldr r0, _020D5DA0 @ =0x021E35A0
	ldr r0, [r0]
	add r0, r0, r4
	add r0, r0, r5, lsl #1
	ldrsh r0, [r0, #0x20]
	pop {r3, r4, r5, pc}
	.align 2, 0
_020D5DA0: .4byte 0x021E35A0
	arm_func_end FUN_020D5D5C

	arm_func_start FUN_020D5DA4
FUN_020D5DA4: @ 0x020D5DA4
	push {r3, lr}
	cmp r1, #0
	blt _020D5DB8
	cmp r1, #0xf
	ble _020D5DC0
_020D5DB8:
	mov r0, #0
	pop {r3, pc}
_020D5DC0:
	add r3, r0, #0x1000
	ldr r3, [r3, #0x1c4]
	mov lr, #1
	ldr ip, [r2]
	tst r3, lr, lsl r1
	moveq lr, #0
	lsl r3, lr, #0x1f
	bic ip, ip, #2
	orr ip, ip, r3, lsr #30
	lsl r3, ip, #0x1e
	str ip, [r2]
	asrs r3, r3, #0x1f
	beq _020D5E94
	add r0, r0, r1, lsl #2
	add r0, r0, #0x1000
	ldr r0, [r0, #0x180]
	ldr r3, [r2]
	tst r0, #0x80000000
	movne lr, #1
	moveq lr, #0
	bic ip, r3, #1
	and r3, lr, #1
	orr r3, ip, r3
	str r3, [r2]
	and r1, r0, #0x7f
	strh r1, [r2, #4]
	ldrh r1, [r2, #4]
	and r3, r0, #0x300
	lsr r3, r3, #8
	lsl r1, r1, #4
	strh r1, [r2, #4]
	cmp r3, #3
	addls pc, pc, r3, lsl #2
	b _020D5E84
_020D5E48: @ jump table
	b _020D5E84 @ case 0
	b _020D5E58 @ case 1
	b _020D5E68 @ case 2
	b _020D5E78 @ case 3
_020D5E58:
	ldrh r1, [r2, #4]
	asr r1, r1, #1
	strh r1, [r2, #4]
	b _020D5E84
_020D5E68:
	ldrh r1, [r2, #4]
	asr r1, r1, #2
	strh r1, [r2, #4]
	b _020D5E84
_020D5E78:
	ldrh r1, [r2, #4]
	asr r1, r1, #4
	strh r1, [r2, #4]
_020D5E84:
	and r0, r0, #0x7f0000
	lsr r0, r0, #0x10
	strb r0, [r2, #6]
	b _020D5F2C
_020D5E94:
	mov r3, #0x54
	mla r0, r1, r3, r0
	ldrb r1, [r0, #3]
	bic r3, ip, #1
	lsl r1, r1, #0x1f
	lsr r1, r1, #0x1f
	and r1, r1, #1
	orr r1, r3, r1
	str r1, [r2]
	ldrb r1, [r0, #2]
	str r1, [r2, #8]
	ldrh r3, [r0, #0x24]
	and r1, r3, #0xff
	strh r1, [r2, #4]
	ldrh r1, [r2, #4]
	asr r3, r3, #8
	cmp r3, #3
	lsl r1, r1, #4
	strh r1, [r2, #4]
	addls pc, pc, r3, lsl #2
	b _020D5F24
_020D5EE8: @ jump table
	b _020D5F24 @ case 0
	b _020D5EF8 @ case 1
	b _020D5F08 @ case 2
	b _020D5F18 @ case 3
_020D5EF8:
	ldrh r1, [r2, #4]
	asr r1, r1, #1
	strh r1, [r2, #4]
	b _020D5F24
_020D5F08:
	ldrh r1, [r2, #4]
	asr r1, r1, #2
	strh r1, [r2, #4]
	b _020D5F24
_020D5F18:
	ldrh r1, [r2, #4]
	asr r1, r1, #4
	strh r1, [r2, #4]
_020D5F24:
	ldrb r0, [r0, #0x23]
	strb r0, [r2, #6]
_020D5F2C:
	mov r0, #1
	pop {r3, pc}
	arm_func_end FUN_020D5DA4

	arm_func_start FUN_020D5F34
FUN_020D5F34: @ 0x020D5F34
	push {r4, lr}
	cmp r1, #0
	blt _020D5F48
	cmp r1, #0xf
	ble _020D5F50
_020D5F48:
	mov r0, #0
	pop {r4, pc}
_020D5F50:
	cmp r2, #0
	blt _020D5F60
	cmp r2, #0xf
	ble _020D5F68
_020D5F60:
	mov r0, #0
	pop {r4, pc}
_020D5F68:
	mov ip, #0x24
	mla ip, r1, ip, r0
	add r1, ip, r2
	ldrb r2, [r1, #0x548]
	cmp r2, #0xff
	moveq r0, #0
	popeq {r4, pc}
	add r1, r0, #0x780
	add ip, r1, r2, lsl #6
	ldrh r2, [ip, #2]
	add r1, r0, #0x1000
	strh r2, [r3]
	ldrb r2, [ip, #4]
	strb r2, [r3, #2]
	ldrb r2, [ip, #5]
	strb r2, [r3, #3]
	ldrsb r2, [ip, #6]
	strb r2, [r3, #4]
	ldrb r2, [ip, #7]
	strb r2, [r3, #5]
	ldrsb r2, [ip, #8]
	add r2, r2, #0x40
	strb r2, [r3, #6]
	ldrsb r2, [ip, #0x13]
	strb r2, [r3, #7]
	ldr r2, [ip, #0x3c]
	ldr r1, [r1, #0x1c0]
	cmp r2, #0
	moveq r4, #0
	subne r1, r2, r1
	addne r4, r0, r1
	mov r1, #0
	strb r1, [r3, #9]
	cmp r4, #0
	beq _020D6038
	add r1, r0, #0x1000
	mov ip, #0
_020D5FFC:
	ldrb r2, [r3, #9]
	ldrb lr, [r4]
	add r2, r3, r2
	strb lr, [r2, #0xa]
	ldrb r2, [r3, #9]
	add r2, r2, #1
	strb r2, [r3, #9]
	ldr r2, [r4, #0x50]
	ldr lr, [r1, #0x1c0]
	cmp r2, #0
	moveq r4, ip
	subne r2, r2, lr
	addne r4, r0, r2
	cmp r4, #0
	bne _020D5FFC
_020D6038:
	mov r0, #1
	pop {r4, pc}
	arm_func_end FUN_020D5F34

	arm_func_start FUN_020D6040
FUN_020D6040: @ 0x020D6040
	push {r3, lr}
	ldr r0, _020D6064 @ =0x021E35A0
	mov r1, #4
	ldr r0, [r0]
	bl FUN_020D285C
	ldr r0, _020D6064 @ =0x021E35A0
	ldr r0, [r0]
	ldr r0, [r0]
	pop {r3, pc}
	.align 2, 0
_020D6064: .4byte 0x021E35A0
	arm_func_end FUN_020D6040

	arm_func_start FUN_020D6068
FUN_020D6068: @ 0x020D6068
	push {r4, lr}
	mov ip, #0
	str ip, [r0, #4]
	strh ip, [r0, #8]
	strh ip, [r0, #0xa]
	mov r4, r0
	str ip, [r0]
	mvn r2, #0
	mov r3, ip
_020D608C:
	mov lr, r3
	str r3, [r4, #0x40]
_020D6094:
	add r1, r4, lr, lsl #1
	add lr, lr, #1
	strh r2, [r1, #0x20]
	cmp lr, #0x10
	blt _020D6094
	add ip, ip, #1
	cmp ip, #0x10
	add r4, r4, #0x24
	blt _020D608C
	mov r3, #0
	mvn r2, #0
_020D60C0:
	add r1, r0, r3, lsl #1
	add r1, r1, #0x200
	add r3, r3, #1
	strh r2, [r1, #0x60]
	cmp r3, #0x10
	blt _020D60C0
	mov r1, #0x280
	bl FUN_020D2894
	pop {r4, pc}
	arm_func_end FUN_020D6068

	arm_func_start FUN_020D60E4
FUN_020D60E4: @ 0x020D60E4
	ldr r1, _020D614C @ =0xFFFFFD2D
	cmp r0, r1
	movlt r0, r1
	blt _020D60FC
	cmp r0, #0
	movgt r0, #0
_020D60FC:
	add r1, r0, #0xd3
	mvn r2, #0xef
	cmp r0, r2
	ldr r3, _020D6150 @ =0x0210DE50
	add r1, r1, #0x200
	ldrb r3, [r3, r1]
	movlt r0, #3
	blt _020D613C
	add r1, r2, #0x78
	cmp r0, r1
	movlt r0, #2
	blt _020D613C
	add r1, r2, #0xb4
	cmp r0, r1
	movlt r0, #1
	movge r0, #0
_020D613C:
	orr r0, r3, r0, lsl #8
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	bx lr
	.align 2, 0
_020D614C: .4byte 0xFFFFFD2D
_020D6150: .4byte 0x0210DE50
	arm_func_end FUN_020D60E4

	arm_func_start FUN_020D6154
FUN_020D6154: @ 0x020D6154
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_020D5508
	add r3, r6, r5, lsl #3
	ldr r2, [r3, #0x18]
	cmp r2, #0
	beq _020D61E4
	cmp r4, r2
	bne _020D6188
	bl FUN_020D551C
	pop {r4, r5, r6, pc}
_020D6188:
	add r1, r6, #0x18
	ldr r0, [r2, #0x18]
	add ip, r1, r5, lsl #3
	cmp ip, r0
	bne _020D61B4
	ldr r0, [r3, #0x1c]
	mov r1, #0x3c
	str r0, [r2, #0x18]
	ldr r0, [r3, #0x18]
	bl FUN_020D2878
	b _020D61E4
_020D61B4:
	cmp r0, #0
	beq _020D61D0
_020D61BC:
	ldr r1, [r0, #4]
	cmp ip, r1
	movne r0, r1
	cmpne r1, #0
	bne _020D61BC
_020D61D0:
	add r1, r6, r5, lsl #3
	ldr r2, [r1, #0x1c]
	mov r1, #8
	str r2, [r0, #4]
	bl FUN_020D2878
_020D61E4:
	add r0, r6, #0x18
	ldr r1, [r4, #0x18]
	add r0, r0, r5, lsl #3
	str r0, [r4, #0x18]
	add r0, r6, r5, lsl #3
	str r1, [r0, #0x1c]
	str r4, [r0, #0x18]
	bl FUN_020D551C
	mov r0, r6
	mov r1, #0x3c
	bl FUN_020D2878
	mov r0, r4
	mov r1, #0x3c
	bl FUN_020D2878
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020D6154

	arm_func_start FUN_020D6220
FUN_020D6220: @ 0x020D6220
	push {r4, r5, r6, r7, r8, lr}
	mov r7, r0
	bl FUN_020D5508
	add r5, r7, #0x18
	mov r6, #0
	mov r8, #8
	mov r4, #0x3c
_020D623C:
	add r1, r7, r6, lsl #3
	ldr r0, [r1, #0x18]
	cmp r0, #0
	beq _020D62A0
	ldr r3, [r0, #0x18]
	cmp r5, r3
	bne _020D626C
	ldr r2, [r1, #0x1c]
	mov r1, r4
	str r2, [r0, #0x18]
	bl FUN_020D2878
	b _020D62A0
_020D626C:
	cmp r3, #0
	beq _020D6288
_020D6274:
	ldr r0, [r3, #4]
	cmp r5, r0
	movne r3, r0
	cmpne r0, #0
	bne _020D6274
_020D6288:
	add r0, r7, r6, lsl #3
	ldr r2, [r0, #0x1c]
	mov r0, r3
	mov r1, r8
	str r2, [r3, #4]
	bl FUN_020D2878
_020D62A0:
	add r6, r6, #1
	cmp r6, #4
	add r5, r5, #8
	blt _020D623C
	bl FUN_020D551C
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020D6220

	arm_func_start FUN_020D62B8
FUN_020D62B8: @ 0x020D62B8
	push {r4, r5, r6, lr}
	mov r4, r0
	bl FUN_020D5508
	ldr r0, [r4, #0x18]
	cmp r0, #0
	beq _020D62F8
	mov r5, #0
	mov r4, #8
_020D62D8:
	ldr r6, [r0, #4]
	mov r1, r4
	str r5, [r0]
	str r5, [r0, #4]
	bl FUN_020D2878
	mov r0, r6
	cmp r6, #0
	bne _020D62D8
_020D62F8:
	bl FUN_020D551C
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020D62B8

	arm_func_start FUN_020D6300
FUN_020D6300: @ 0x020D6300
	sub sp, sp, #8
	mov r1, #0
	str r1, [r0]
	str r1, [sp]
	str r1, [sp, #4]
	str r1, [r0, #4]
	add sp, sp, #8
	bx lr
	arm_func_end FUN_020D6300

	arm_func_start FUN_020D6320
FUN_020D6320: @ 0x020D6320
	push {r3, r4, r5, lr}
	ldr r4, [r2]
	ldr r3, [r0, #0x38]
	cmp r4, r3
	bhs _020D64C8
	mov ip, #0
_020D6338:
	add r3, r0, r4, lsl #2
	ldr r4, [r3, #0x3c]
	and r3, r4, #0xff
	strb r4, [r1]
	cmp r3, #0x10
	lsr r4, r4, #8
	bgt _020D6380
	cmp r3, #0x10
	bge _020D63CC
	cmp r3, #5
	addls pc, pc, r3, lsl #2
	b _020D64AC
_020D6368: @ jump table
	b _020D64AC @ case 0
	b _020D638C @ case 1
	b _020D638C @ case 2
	b _020D638C @ case 3
	b _020D638C @ case 4
	b _020D638C @ case 5
_020D6380:
	cmp r3, #0x11
	beq _020D6440
	b _020D64AC
_020D638C:
	add r5, r0, r4
	ldrh r4, [r0, r4]
	ldrh r3, [r5, #2]
	mov r0, #1
	strh r4, [r1, #2]
	strh r3, [r1, #4]
	ldrh r4, [r5, #4]
	ldrh r3, [r5, #6]
	strh r4, [r1, #6]
	strh r3, [r1, #8]
	ldrh r3, [r5, #8]
	strh r3, [r1, #0xa]
	ldr r1, [r2]
	add r1, r1, #1
	str r1, [r2]
	pop {r3, r4, r5, pc}
_020D63CC:
	add r5, r0, r4
	b _020D6420
_020D63D4:
	mov r0, #0xc
	mla ip, lr, r0, r5
	ldrh r4, [ip, #2]
	ldrh r3, [ip, #4]
	mov r0, #1
	strh r4, [r1]
	strh r3, [r1, #2]
	ldrh r4, [ip, #6]
	ldrh r3, [ip, #8]
	strh r4, [r1, #4]
	strh r3, [r1, #6]
	ldrh r4, [ip, #0xa]
	ldrh r3, [ip, #0xc]
	strh r4, [r1, #8]
	strh r3, [r1, #0xa]
	ldr r1, [r2, #4]
	add r1, r1, #1
	str r1, [r2, #4]
	pop {r3, r4, r5, pc}
_020D6420:
	ldrb r4, [r5, #1]
	ldrb r3, [r5]
	ldr lr, [r2, #4]
	sub r3, r4, r3
	add r3, r3, #1
	cmp lr, r3
	blo _020D63D4
	b _020D64AC
_020D6440:
	add r4, r0, r4
	b _020D64A0
_020D6448:
	ldrb lr, [r4, r3]
	cmp lr, #0
	beq _020D64AC
	mov r0, #0xc
	mla lr, r3, r0, r4
	ldrh ip, [lr, #8]
	ldrh r3, [lr, #0xa]
	mov r0, #1
	strh ip, [r1]
	strh r3, [r1, #2]
	ldrh ip, [lr, #0xc]
	ldrh r3, [lr, #0xe]
	strh ip, [r1, #4]
	strh r3, [r1, #6]
	ldrh ip, [lr, #0x10]
	ldrh r3, [lr, #0x12]
	strh ip, [r1, #8]
	strh r3, [r1, #0xa]
	ldr r1, [r2, #4]
	add r1, r1, #1
	str r1, [r2, #4]
	pop {r3, r4, r5, pc}
_020D64A0:
	ldr r3, [r2, #4]
	cmp r3, #8
	blo _020D6448
_020D64AC:
	ldr r3, [r2]
	add r3, r3, #1
	stm r2, {r3, ip}
	ldr r4, [r2]
	ldr r3, [r0, #0x38]
	cmp r4, r3
	blo _020D6338
_020D64C8:
	mov r0, #0
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020D6320

	arm_func_start FUN_020D64D0
FUN_020D64D0: @ 0x020D64D0
	ldr r0, [r0, #0x38]
	bx lr
	arm_func_end FUN_020D64D0

	arm_func_start FUN_020D64D8
FUN_020D64D8: @ 0x020D64D8
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_020D5508
	add r0, r6, #0x3c
	add r2, r6, r5, lsl #2
	add r0, r0, r5, lsl #2
	mov r1, #4
	str r4, [r2, #0x3c]
	bl FUN_020D2878
	bl FUN_020D551C
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020D64D8

	arm_func_start FUN_020D650C
FUN_020D650C: @ 0x020D650C
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	bl FUN_020D5508
	add r0, r5, r4, lsl #2
	ldr r4, [r0, #0x3c]
	cmp r4, #0
	beq _020D6538
	cmp r4, #0x2000000
	addlo r4, r5, r4
	b _020D653C
_020D6538:
	mov r4, #0
_020D653C:
	bl FUN_020D551C
	mov r0, r4
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020D650C

	arm_func_start FUN_020D6548
FUN_020D6548: @ 0x020D6548
	ldr ip, _020D6550 @ =FUN_020D6554
	bx ip
	.align 2, 0
_020D6550: .4byte FUN_020D6554
	arm_func_end FUN_020D6548

	arm_func_start FUN_020D6554
FUN_020D6554: @ 0x020D6554
	push {r3, r4, r5, lr}
	bl FUN_020D3A38
	ldr r1, _020D6638 @ =0x021E35A4
	mov r4, r0
	ldrh r0, [r1]
	cmp r0, #0
	bne _020D662C
	mov r2, #1
	strh r2, [r1]
	mov r2, #0
	ldr r0, _020D663C @ =0x027FFC00
	mov r1, r2
	str r2, [r0, #0x388]
	ldr r0, _020D6640 @ =0x021E35A8
_020D658C:
	str r1, [r0, r2, lsl #2]
	add r2, r2, #1
	cmp r2, #0x20
	blt _020D658C
	ldr r2, _020D6644 @ =0x0000C408
	ldr r1, _020D6648 @ =0x04000184
	mov r0, #0x40000
	strh r2, [r1]
	bl FUN_020D1234
	ldr r1, _020D664C @ =FUN_020D674C
	mov r0, #0x40000
	bl FUN_020D1004
	mov r0, #0x40000
	bl FUN_020D11D4
	mov r5, #0
	ldr r3, _020D6650 @ =0x04000180
	mov r1, r5
	mov r2, #0x3e8
_020D65D4:
	ldrh r0, [r3]
	ands lr, r0, #0xf
	lsl r0, lr, #8
	strh r0, [r3]
	bne _020D65F0
	cmp r5, #4
	bgt _020D662C
_020D65F0:
	ldrh r0, [r3]
	mov ip, r2
	and r0, r0, #0xf
	cmp r0, lr
	bne _020D6624
_020D6604:
	cmp ip, #0
	movle r5, r1
	ble _020D6624
	ldrh r0, [r3]
	sub ip, ip, #1
	and r0, r0, #0xf
	cmp r0, lr
	beq _020D6604
_020D6624:
	add r5, r5, #1
	b _020D65D4
_020D662C:
	mov r0, r4
	bl FUN_020D3A4C
	pop {r3, r4, r5, pc}
	.align 2, 0
_020D6638: .4byte 0x021E35A4
_020D663C: .4byte 0x027FFC00
_020D6640: .4byte 0x021E35A8
_020D6644: .4byte 0x0000C408
_020D6648: .4byte 0x04000184
_020D664C: .4byte FUN_020D674C
_020D6650: .4byte 0x04000180
	arm_func_end FUN_020D6554

	arm_func_start FUN_020D6654
FUN_020D6654: @ 0x020D6654
	push {r3, r4, r5, lr}
	mov r4, r0
	mov r5, r1
	bl FUN_020D3A38
	ldr r1, _020D6698 @ =0x021E35A8
	ldr r3, _020D669C @ =0x027FFC00
	str r5, [r1, r4, lsl #2]
	cmp r5, #0
	ldrne r2, [r3, #0x388]
	mov r1, #1
	orrne r1, r2, r1, lsl r4
	mvneq r1, r1, lsl r4
	ldreq r2, [r3, #0x388]
	andeq r1, r2, r1
	str r1, [r3, #0x388]
	bl FUN_020D3A4C
	pop {r3, r4, r5, pc}
	.align 2, 0
_020D6698: .4byte 0x021E35A8
_020D669C: .4byte 0x027FFC00
	arm_func_end FUN_020D6654

	arm_func_start FUN_020D66A0
FUN_020D66A0: @ 0x020D66A0
	ldr r2, _020D66C0 @ =0x027FFC00
	mov r3, #1
	add r1, r2, r1, lsl #2
	ldr r1, [r1, #0x388]
	tst r1, r3, lsl r0
	moveq r3, #0
	mov r0, r3
	bx lr
	.align 2, 0
_020D66C0: .4byte 0x027FFC00
	arm_func_end FUN_020D66A0

	arm_func_start FUN_020D66C4
FUN_020D66C4: @ 0x020D66C4
	push {r3, lr}
	ldr ip, [sp]
	ldr r3, _020D6748 @ =0x04000184
	bic ip, ip, #0x1f
	and r0, r0, #0x1f
	orr ip, ip, r0
	ldrh r0, [r3]
	bic ip, ip, #0x20
	lsl r2, r2, #0x1f
	orr r2, ip, r2, lsr #26
	and r2, r2, #0x3f
	orr r1, r2, r1, lsl #6
	str r1, [sp]
	tst r0, #0x4000
	beq _020D6714
	ldrh r1, [r3]
	mvn r0, #0
	orr r1, r1, #0xc000
	strh r1, [r3]
	pop {r3, pc}
_020D6714:
	bl FUN_020D3A38
	ldr r2, _020D6748 @ =0x04000184
	ldrh r1, [r2]
	tst r1, #2
	beq _020D6734
	bl FUN_020D3A4C
	mvn r0, #1
	pop {r3, pc}
_020D6734:
	ldr r1, [sp]
	str r1, [r2, #4]
	bl FUN_020D3A4C
	mov r0, #0
	pop {r3, pc}
	.align 2, 0
_020D6748: .4byte 0x04000184
	arm_func_end FUN_020D66C4

	arm_func_start FUN_020D674C
FUN_020D674C: @ 0x020D674C
	push {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #4
	mvn r8, #3
	ldr r6, [sp]
	ldr sb, _020D685C @ =0x04000184
	ldr r4, _020D6860 @ =0x021E35A8
	add sl, r8, #1
	mov r7, #0x4100000
	mov r5, #0
_020D6770:
	ldrh r0, [sb]
	tst r0, #0x4000
	beq _020D6790
	ldrh r0, [sb]
	add r1, r8, #1
	orr r0, r0, #0xc000
	strh r0, [sb]
	b _020D67BC
_020D6790:
	bl FUN_020D3A38
	ldrh r1, [sb]
	tst r1, #0x100
	beq _020D67AC
	bl FUN_020D3A4C
	mov r1, r8
	b _020D67BC
_020D67AC:
	ldr r6, [r7]
	str r6, [sp]
	bl FUN_020D3A4C
	mov r1, r5
_020D67BC:
	cmp r1, r8
	addeq sp, sp, #4
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	cmp r1, sl
	beq _020D6770
	lsl r0, r6, #0x1b
	lsrs r0, r0, #0x1b
	beq _020D6770
	ldr r3, [r4, r0, lsl #2]
	cmp r3, #0
	beq _020D67FC
	lsl r2, r6, #0x1a
	lsr r1, r6, #6
	lsr r2, r2, #0x1f
	blx r3
	b _020D6770
_020D67FC:
	lsl r0, r6, #0x1a
	lsrs r0, r0, #0x1f
	bne _020D6770
	ldrh r0, [sb]
	orr r6, r6, #0x20
	str r6, [sp]
	tst r0, #0x4000
	beq _020D682C
	ldrh r0, [sb]
	orr r0, r0, #0xc000
	strh r0, [sb]
	b _020D6770
_020D682C:
	bl FUN_020D3A38
	ldrh r1, [sb]
	tst r1, #2
	beq _020D6844
	bl FUN_020D3A4C
	b _020D6770
_020D6844:
	mov r1, r6
	str r1, [sb, #4]
	bl FUN_020D3A4C
	b _020D6770
	arm_func_end FUN_020D674C

	arm_func_start FUN_020D6854
FUN_020D6854: @ 0x020D6854
	add sp, sp, #4
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0
_020D685C: .4byte 0x04000184
_020D6860: .4byte 0x021E35A8
	arm_func_end FUN_020D6854

	arm_func_start FUN_020D6864
FUN_020D6864: @ 0x020D6864
	push {r4, r5, r6, lr}
	mov r5, r0
	mov r4, r1
	bl FUN_020D3A38
	ldr r1, [r5]
	mov r6, r0
	ldr r0, [r5, #4]
	cmp r1, #0
	strne r0, [r1, #4]
	cmp r0, #0
	strne r1, [r0]
	mov r0, #0
	str r0, [r5]
	str r0, [r5, #4]
	ldr r1, [r5, #0xc]
	add r0, r5, #0x18
	bic r1, r1, #0x4f
	str r1, [r5, #0xc]
	str r4, [r5, #0x14]
	bl FUN_020D1ECC
	mov r0, r6
	bl FUN_020D3A4C
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020D6864

	arm_func_start FUN_020D68C0
FUN_020D68C0: @ 0x020D68C0
	push {r4, r5, r6, r7, r8, lr}
	mov r8, r0
	ldr r0, [r8, #0xc]
	ldr r5, [r8, #8]
	mov r7, r1
	mov r1, #1
	tst r0, #4
	lsl r6, r1, r7
	moveq r1, #0
	ldr r0, [r5, #0x1c]
	cmp r1, #0
	orrne r0, r0, #0x200
	orreq r0, r0, #0x100
	str r0, [r5, #0x1c]
	ldr r0, [r5, #0x58]
	tst r0, r6
	beq _020D6968
	ldr r2, [r5, #0x54]
	mov r0, r8
	mov r1, r7
	blx r2
	mov r4, r0
	cmp r4, #8
	addls pc, pc, r4, lsl #2
	b _020D696C
_020D6924: @ jump table
	b _020D6948 @ case 0
	b _020D6948 @ case 1
	b _020D696C @ case 2
	b _020D696C @ case 3
	b _020D6948 @ case 4
	b _020D696C @ case 5
	b _020D696C @ case 6
	b _020D696C @ case 7
	b _020D6950 @ case 8
_020D6948:
	str r4, [r8, #0x14]
	b _020D696C
_020D6950:
	ldr r1, [r5, #0x58]
	mvn r0, r6
	and r0, r1, r0
	str r0, [r5, #0x58]
	mov r4, #7
	b _020D696C
_020D6968:
	mov r4, #7
_020D696C:
	cmp r4, #7
	bne _020D6988
	ldr r1, _020D6A4C @ =0x0210E124
	mov r0, r8
	ldr r1, [r1, r7, lsl #2]
	blx r1
	mov r4, r0
_020D6988:
	cmp r4, #6
	bne _020D6A00
	ldr r0, [r8, #0xc]
	tst r0, #4
	movne r0, #1
	moveq r0, #0
	cmp r0, #0
	beq _020D6A44
	bl FUN_020D3A38
	ldr r1, [r5, #0x1c]
	mov r7, r0
	tst r1, #0x200
	movne r0, #1
	moveq r0, #0
	cmp r0, #0
	beq _020D69F0
	mov r4, #0
	mov r6, #1
_020D69D0:
	add r0, r5, #0xc
	bl FUN_020D1E7C
	ldr r0, [r5, #0x1c]
	tst r0, #0x200
	movne r0, r6
	moveq r0, r4
	cmp r0, #0
	bne _020D69D0
_020D69F0:
	mov r0, r7
	ldr r4, [r8, #0x14]
	bl FUN_020D3A4C
	b _020D6A44
_020D6A00:
	ldr r0, [r8, #0xc]
	tst r0, #4
	movne r0, #1
	moveq r0, #0
	cmp r0, #0
	bne _020D6A34
	ldr r1, [r5, #0x1c]
	mov r0, r8
	bic r2, r1, #0x100
	mov r1, r4
	str r2, [r5, #0x1c]
	bl FUN_020D6864
	b _020D6A44
_020D6A34:
	ldr r0, [r5, #0x1c]
	bic r0, r0, #0x200
	str r0, [r5, #0x1c]
	str r4, [r8, #0x14]
_020D6A44:
	mov r0, r4
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0
_020D6A4C: .4byte 0x0210E124
	arm_func_end FUN_020D68C0

	arm_func_start FUN_020D6A50
FUN_020D6A50: @ 0x020D6A50
	push {r3, lr}
	cmp r2, #0
	mov lr, #0
	bls _020D6A98
_020D6A60:
	ldrb ip, [r0, lr]
	ldrb r3, [r1, lr]
	sub ip, ip, #0x41
	cmp ip, #0x19
	sub r3, r3, #0x41
	addls ip, ip, #0x20
	cmp r3, #0x19
	addls r3, r3, #0x20
	cmp ip, r3
	subne r0, ip, r3
	popne {r3, pc}
	add lr, lr, #1
	cmp lr, r2
	blo _020D6A60
_020D6A98:
	mov r0, #0
	pop {r3, pc}
	arm_func_end FUN_020D6A50

	arm_func_start FUN_020D6AA0
FUN_020D6AA0: @ 0x020D6AA0
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r7, r0
	ldr r4, [r7]
	mov r6, r2
	ldr r2, [r4, #0x1c]
	mov r0, r4
	orr r2, r2, #0x200
	str r2, [r4, #0x1c]
	ldr r2, [r7, #4]
	ldr r5, [r4, #0x50]
	mov r3, r6
	blx r5
	cmp r0, #0
	cmpne r0, #1
	beq _020D6AE8
	cmp r0, #6
	beq _020D6AF8
	b _020D6B50
_020D6AE8:
	ldr r1, [r4, #0x1c]
	bic r1, r1, #0x200
	str r1, [r4, #0x1c]
	b _020D6B50
_020D6AF8:
	bl FUN_020D3A38
	ldr r1, [r4, #0x1c]
	mov r5, r0
	tst r1, #0x200
	movne r0, #1
	moveq r0, #0
	cmp r0, #0
	beq _020D6B40
	mov r8, #0
	mov sb, #1
_020D6B20:
	add r0, r4, #0xc
	bl FUN_020D1E7C
	ldr r0, [r4, #0x1c]
	tst r0, #0x200
	movne r0, sb
	moveq r0, r8
	cmp r0, #0
	bne _020D6B20
_020D6B40:
	mov r0, r5
	bl FUN_020D3A4C
	ldr r0, [r4, #0x24]
	ldr r0, [r0, #0x14]
_020D6B50:
	ldr r1, [r7, #4]
	add r1, r1, r6
	str r1, [r7, #4]
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	arm_func_end FUN_020D6AA0

	arm_func_start FUN_020D6B60
FUN_020D6B60: @ 0x020D6B60
	ldr r3, [r0, #0xc]
	mov r2, #0
	orr r3, r3, #4
	str r3, [r0, #0xc]
	ldr r3, [r0, #8]
	ldr ip, _020D6B90 @ =FUN_020D68C0
	str r3, [r0, #0x30]
	str r2, [r0, #0x38]
	strh r2, [r0, #0x36]
	strh r1, [r0, #0x34]
	mov r1, #2
	bx ip
	.align 2, 0
_020D6B90: .4byte FUN_020D68C0
	arm_func_end FUN_020D6B60

	arm_func_start FUN_020D6B94
FUN_020D6B94: @ 0x020D6B94
	push {r3, lr}
	ldr r2, [r0, #0x2c]
	ldr r3, [r0, #0x38]
	ldr lr, [r0, #8]
	ldr r1, [r0, #0x30]
	add ip, r2, r3
	str ip, [r0, #0x2c]
	ldr ip, [lr, #0x48]
	mov r0, lr
	blx ip
	pop {r3, pc}
	arm_func_end FUN_020D6B94

	arm_func_start FUN_020D6BC0
FUN_020D6BC0: @ 0x020D6BC0
	push {r3, lr}
	ldr r2, [r0, #0x2c]
	ldr r3, [r0, #0x38]
	ldr lr, [r0, #8]
	ldr r1, [r0, #0x30]
	add ip, r2, r3
	str ip, [r0, #0x2c]
	ldr ip, [lr, #0x4c]
	mov r0, lr
	blx ip
	pop {r3, pc}
	arm_func_end FUN_020D6BC0

	arm_func_start FUN_020D6BEC
FUN_020D6BEC: @ 0x020D6BEC
	push {r4, r5, r6, lr}
	sub sp, sp, #0x10
	mov r6, r0
	ldr r4, [r6, #8]
	add r5, r6, #0x30
	str r4, [sp]
	ldrh r1, [r5, #4]
	ldr r2, [r4, #0x34]
	add r0, sp, #0
	add r3, r2, r1, lsl #3
	add r1, sp, #8
	mov r2, #8
	str r3, [sp, #4]
	bl FUN_020D6AA0
	movs r3, r0
	bne _020D6C74
	add ip, r6, #0x20
	ldm r5, {r0, r1, r2}
	stm ip, {r0, r1, r2}
	ldrh r0, [r5, #6]
	cmp r0, #0
	ldreq r0, [r5, #8]
	cmpeq r0, #0
	bne _020D6C64
	ldrh r0, [sp, #0xc]
	strh r0, [r6, #0x26]
	ldr r1, [r4, #0x34]
	ldr r0, [sp, #8]
	add r0, r1, r0
	str r0, [r6, #0x28]
_020D6C64:
	ldrh r1, [sp, #0xe]
	ldr r0, _020D6C80 @ =0x00000FFF
	and r0, r1, r0
	str r0, [r6, #0x2c]
_020D6C74:
	mov r0, r3
	add sp, sp, #0x10
	pop {r4, r5, r6, pc}
	.align 2, 0
_020D6C80: .4byte 0x00000FFF
	arm_func_end FUN_020D6BEC

	arm_func_start FUN_020D6C84
FUN_020D6C84: @ 0x020D6C84
	push {r4, r5, lr}
	sub sp, sp, #0xc
	mov r5, r0
	ldr r4, [r5, #0x30]
	ldr r1, [r5, #8]
	add r0, sp, #4
	str r1, [sp, #4]
	ldr r3, [r5, #0x28]
	add r1, sp, #0
	mov r2, #1
	str r3, [sp, #8]
	bl FUN_020D6AA0
	cmp r0, #0
	addne sp, sp, #0xc
	popne {r4, r5, pc}
	ldrb r1, [sp]
	and r2, r1, #0x7f
	asr r1, r1, #7
	str r2, [r4, #0x10]
	and r1, r1, #1
	str r1, [r4, #0xc]
	ldr r2, [r4, #0x10]
	cmp r2, #0
	addeq sp, sp, #0xc
	moveq r0, #1
	popeq {r4, r5, pc}
	ldr r1, [r5, #0x34]
	cmp r1, #0
	bne _020D6D24
	add r0, sp, #4
	add r1, r4, #0x14
	bl FUN_020D6AA0
	cmp r0, #0
	addne sp, sp, #0xc
	popne {r4, r5, pc}
	ldr r1, [r4, #0x10]
	mov r2, #0
	add r1, r4, r1
	strb r2, [r1, #0x14]
	b _020D6D30
_020D6D24:
	ldr r1, [sp, #8]
	add r1, r1, r2
	str r1, [sp, #8]
_020D6D30:
	ldr r1, [r4, #0xc]
	cmp r1, #0
	beq _020D6D80
	add r0, sp, #4
	add r1, sp, #2
	mov r2, #2
	bl FUN_020D6AA0
	cmp r0, #0
	addne sp, sp, #0xc
	popne {r4, r5, pc}
	ldr r2, [r5, #8]
	ldr r1, _020D6DAC @ =0x00000FFF
	str r2, [r4]
	ldrh r3, [sp, #2]
	mov r2, #0
	and r1, r3, r1
	strh r1, [r4, #4]
	strh r2, [r4, #6]
	str r2, [r4, #8]
	b _020D6D9C
_020D6D80:
	ldr r1, [r5, #8]
	str r1, [r4]
	ldrh r1, [r5, #0x26]
	str r1, [r4, #4]
	ldrh r1, [r5, #0x26]
	add r1, r1, #1
	strh r1, [r5, #0x26]
_020D6D9C:
	ldr r1, [sp, #8]
	str r1, [r5, #0x28]
	add sp, sp, #0xc
	pop {r4, r5, pc}
	.align 2, 0
_020D6DAC: .4byte 0x00000FFF
	arm_func_end FUN_020D6C84

	arm_func_start FUN_020D6DB0
FUN_020D6DB0: @ 0x020D6DB0
	push {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0x94
	mov sb, r0
	ldr r5, [sb, #0x3c]
	mov r1, #2
	ldr r6, [sb, #0x40]
	bl FUN_020D68C0
	ldrb r3, [r5]
	cmp r3, #0
	beq _020D6F68
_020D6DD8:
	mov r8, #0
	mov r0, #1
	mov r1, r8
	b _020D6DEC
_020D6DE8:
	add r8, r8, #1
_020D6DEC:
	ldrb r7, [r5, r8]
	mov r2, r1
	cmp r7, #0
	cmpne r7, #0x2f
	cmpne r7, #0x5c
	movne r2, r0
	cmp r2, #0
	bne _020D6DE8
	cmp r7, #0
	cmpeq r6, #0
	movne r7, #1
	cmp r8, #0
	addeq sp, sp, #0x94
	moveq r0, #1
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	cmp r3, #0x2e
	bne _020D6E80
	cmp r8, #1
	addeq r5, r5, #1
	beq _020D6F4C
	ldrb r0, [r5, #1]
	cmp r8, #2
	moveq r1, #1
	movne r1, #0
	cmp r0, #0x2e
	moveq r0, #1
	movne r0, #0
	tst r1, r0
	beq _020D6E80
	ldrh r0, [sb, #0x24]
	cmp r0, #0
	beq _020D6E78
	ldr r1, [sb, #0x2c]
	mov r0, sb
	bl FUN_020D6B60
_020D6E78:
	add r5, r5, #2
	b _020D6F4C
_020D6E80:
	cmp r8, #0x7f
	addgt sp, sp, #0x94
	movgt r0, #1
	popgt {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	add r1, sp, #0
	mov r0, #0
	str r1, [sb, #0x30]
	str r0, [sb, #0x34]
	add sl, sp, #0x14
	mov r4, #3
_020D6EA8:
	mov r0, sb
	mov r1, r4
	bl FUN_020D68C0
	cmp r0, #0
	addne sp, sp, #0x94
	movne r0, #1
	popne {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	ldr r0, [sp, #0xc]
	cmp r7, r0
	ldreq r0, [sp, #0x10]
	cmpeq r8, r0
	bne _020D6EA8
	mov r0, r5
	mov r1, sl
	mov r2, r8
	bl FUN_020D6A50
	cmp r0, #0
	bne _020D6EA8
	cmp r7, #0
	beq _020D6F1C
	add r0, sp, #0
	add r3, sb, #0x30
	ldm r0, {r0, r1, r2}
	stm r3, {r0, r1, r2}
	mov r0, sb
	mov r1, #2
	add r5, r5, r8
	bl FUN_020D68C0
	b _020D6F4C
_020D6F1C:
	cmp r6, #0
	addne sp, sp, #0x94
	movne r0, #1
	popne {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	ldr r3, [sb, #0x44]
	ldr r2, [sp]
	ldr r1, [sp, #4]
	add sp, sp, #0x94
	str r2, [r3]
	mov r0, #0
	str r1, [r3, #4]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
_020D6F4C:
	ldrb r0, [r5]
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	ldrb r3, [r5, r0]!
	cmp r3, #0
	bne _020D6DD8
_020D6F68:
	cmp r6, #0
	addeq sp, sp, #0x94
	moveq r0, #1
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	ldr r3, [sb, #0x44]
	add r0, sb, #0x20
	ldm r0, {r0, r1, r2}
	stm r3, {r0, r1, r2}
	mov r0, #0
	add sp, sp, #0x94
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	arm_func_end FUN_020D6DB0

	arm_func_start FUN_020D6F94
FUN_020D6F94: @ 0x020D6F94
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0xe0
	mov sl, r0
	ldr r1, [sl, #8]
	add r0, sp, #4
	str r1, [sp]
	bl FUN_020D7F98
	ldr r0, [sl, #8]
	str r0, [sp, #0xc]
	ldr r0, [sl, #0xc]
	tst r0, #0x20
	movne r0, #1
	moveq r0, #0
	cmp r0, #0
	ldrhne sb, [sl, #0x24]
	movne r6, #0x10000
	bne _020D7078
	ldrh r0, [sl, #0x38]
	ldr r6, [sl, #0x20]
	cmp r0, #0
	ldrhne sb, [sl, #0x3a]
	bne _020D7078
	mov r7, #0
	mov r8, r7
	mov sb, #0x10000
	add r5, sp, #4
	mov r4, #3
	add fp, sp, #0x4c
_020D7004:
	mov r0, r5
	mov r1, r7
	bl FUN_020D6B60
	mov r2, #1
	cmp r7, #0
	mov r0, r5
	mov r1, #3
	ldreq r8, [sp, #0x30]
	str fp, [sp, #0x34]
	str r2, [sp, #0x38]
	bl FUN_020D68C0
	cmp r0, #0
	bne _020D7064
_020D7038:
	ldr r0, [sp, #0x58]
	cmp r0, #0
	ldreq r0, [sp, #0x50]
	cmpeq r0, r6
	ldrheq sb, [sp, #0x28]
	beq _020D7064
	mov r0, r5
	mov r1, r4
	bl FUN_020D68C0
	cmp r0, #0
	beq _020D7038
_020D7064:
	cmp sb, #0x10000
	bne _020D7078
	add r7, r7, #1
	cmp r7, r8
	blo _020D7004
_020D7078:
	cmp sb, #0x10000
	bne _020D7094
	mov r0, #0
	strh r0, [sl, #0x38]
	add sp, sp, #0xe0
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020D7094:
	ldrh r0, [sl, #0x38]
	cmp r0, #0
	bne _020D7178
	ldr r0, [sp]
	mov r1, #0
	ldr r0, [r0]
	cmp r0, #0xff
	addls r8, r1, #1
	bls _020D70C4
	cmp r0, #0xff00
	addls r8, r1, #2
	addhi r8, r1, #3
_020D70C4:
	cmp r6, #0x10000
	ldrne r0, [sp, #0x5c]
	add r8, r8, #2
	addne r8, r8, r0
	mov r7, sb
	cmp sb, #0
	beq _020D716C
	add r0, sp, #4
	mov r1, sb
	bl FUN_020D6B60
	add r5, sp, #4
	mov r4, #3
	add fp, sp, #0x4c
_020D70F8:
	ldr r1, [sp, #0x30]
	mov r0, r5
	bl FUN_020D6B60
	mov r1, #1
	str r1, [sp, #0x38]
	mov r0, r5
	mov r1, #3
	str fp, [sp, #0x34]
	bl FUN_020D68C0
	cmp r0, #0
	bne _020D7160
_020D7124:
	ldr r0, [sp, #0x58]
	cmp r0, #0
	beq _020D714C
	ldrh r0, [sp, #0x50]
	cmp r0, r7
	bne _020D714C
	ldr r0, [sp, #0x5c]
	add r0, r0, #1
	add r8, r8, r0
	b _020D7160
_020D714C:
	mov r0, r5
	mov r1, r4
	bl FUN_020D68C0
	cmp r0, #0
	beq _020D7124
_020D7160:
	ldrh r7, [sp, #0x28]
	cmp r7, #0
	bne _020D70F8
_020D716C:
	add r0, r8, #1
	strh r0, [sl, #0x38]
	strh sb, [sl, #0x3a]
_020D7178:
	ldr r5, [sl, #0x30]
	cmp r5, #0
	addeq sp, sp, #0xe0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldrh r4, [sl, #0x38]
	ldr r0, [sl, #0x34]
	cmp r0, r4
	addlo sp, sp, #0xe0
	movlo r0, #1
	poplo {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, [sp]
	mov r7, #0
	ldr r0, [r0]
	cmp r0, #0xff
	movls r8, #1
	bls _020D71C8
	cmp r0, #0xff00
	movls r8, #2
	movhi r8, #3
_020D71C8:
	ldr r0, [sp]
	mov r1, r5
	mov r2, r8
	bl FUN_020D4A50
	add r1, r7, r8
	ldr r0, _020D733C @ =_02110C98
	add r1, r5, r1
	mov r2, #2
	bl FUN_020D4A50
	add r0, sp, #4
	mov r1, sb
	bl FUN_020D6B60
	cmp r6, #0x10000
	beq _020D7278
	add r3, sp, #0x4c
	mov r2, #0
	add r0, sp, #4
	mov r1, #3
	str r3, [sp, #0x34]
	str r2, [sp, #0x38]
	bl FUN_020D68C0
	cmp r0, #0
	bne _020D7254
	add r8, sp, #4
	mov r7, #3
_020D722C:
	ldr r0, [sp, #0x58]
	cmp r0, #0
	ldreq r0, [sp, #0x50]
	cmpeq r0, r6
	beq _020D7254
	mov r0, r8
	mov r1, r7
	bl FUN_020D68C0
	cmp r0, #0
	beq _020D722C
_020D7254:
	ldr r0, [sp, #0x5c]
	add r1, r5, r4
	add r6, r0, #1
	add r0, sp, #0x60
	mov r2, r6
	sub r1, r1, r6
	bl FUN_020D4A50
	sub r4, r4, r6
	b _020D7288
_020D7278:
	add r0, r5, r4
	mov r1, #0
	strb r1, [r0, #-1]
	sub r4, r4, #1
_020D7288:
	cmp sb, #0
	beq _020D7330
	add sl, sp, #4
	mov r6, #3
	add r8, sp, #0x4c
	mov r7, #0
	mov fp, #0x2f
_020D72A4:
	ldr r1, [sp, #0x30]
	mov r0, sl
	bl FUN_020D6B60
	add r1, r5, r4
	str r8, [sp, #0x34]
	str r7, [sp, #0x38]
	strb fp, [r1, #-1]
	mov r0, sl
	mov r1, #3
	sub r4, r4, #1
	bl FUN_020D68C0
	cmp r0, #0
	bne _020D7324
_020D72D8:
	ldr r0, [sp, #0x58]
	cmp r0, #0
	beq _020D7310
	ldrh r0, [sp, #0x50]
	cmp r0, sb
	bne _020D7310
	ldr sb, [sp, #0x5c]
	add r1, r5, r4
	add r0, sp, #0x60
	mov r2, sb
	sub r1, r1, sb
	bl FUN_020D4A50
	sub r4, r4, sb
	b _020D7324
_020D7310:
	mov r0, sl
	mov r1, r6
	bl FUN_020D68C0
	cmp r0, #0
	beq _020D72D8
_020D7324:
	ldrh sb, [sp, #0x28]
	cmp sb, #0
	bne _020D72A4
_020D7330:
	mov r0, #0
	add sp, sp, #0xe0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020D733C: .4byte _02110C98
	arm_func_end FUN_020D6F94

	arm_func_start FUN_020D7340
FUN_020D7340: @ 0x020D7340
	push {r3, r4, r5, lr}
	sub sp, sp, #0x10
	mov r5, r0
	ldr r1, [r5, #8]
	ldr r4, [r5, #0x34]
	ldr r0, [r1, #0x30]
	lsl r2, r4, #3
	cmp r0, r4, lsl #3
	addls sp, sp, #0x10
	movls r0, #1
	popls {r3, r4, r5, pc}
	str r1, [sp]
	ldr r1, [r1, #0x2c]
	add r0, sp, #0
	add r3, r1, r2
	add r1, sp, #8
	mov r2, #8
	str r3, [sp, #4]
	bl FUN_020D6AA0
	cmp r0, #0
	addne sp, sp, #0x10
	popne {r3, r4, r5, pc}
	ldr r1, [sp, #8]
	mov r0, r5
	str r1, [r5, #0x30]
	ldr r2, [sp, #0xc]
	mov r1, #7
	str r2, [r5, #0x34]
	str r4, [r5, #0x38]
	bl FUN_020D68C0
	add sp, sp, #0x10
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020D7340

	arm_func_start FUN_020D73C0
FUN_020D73C0: @ 0x020D73C0
	ldr r1, [r0, #0x30]
	str r1, [r0, #0x24]
	ldr r1, [r0, #0x30]
	str r1, [r0, #0x2c]
	ldr r1, [r0, #0x34]
	str r1, [r0, #0x28]
	ldr r1, [r0, #0x38]
	str r1, [r0, #0x20]
	mov r0, #0
	bx lr
	arm_func_end FUN_020D73C0

	arm_func_start FUN_020D73E8
FUN_020D73E8: @ 0x020D73E8
	mov r0, #0
	bx lr
	arm_func_end FUN_020D73E8

	arm_func_start FUN_020D73F0
FUN_020D73F0: @ 0x020D73F0
	push {r3, lr}
	cmp r1, #3
	mov r3, #0
	bgt _020D7440
	mov ip, r3
	cmp r1, #0
	ble _020D7440
	mov lr, r3
_020D7410:
	ldrb r2, [r0, ip]
	cmp r2, #0
	beq _020D7440
	sub r2, r2, #0x41
	cmp r2, #0x19
	addls r2, r2, #0x61
	addhi r2, r2, #0x41
	add ip, ip, #1
	orr r3, r3, r2, lsl lr
	cmp ip, r1
	add lr, lr, #8
	blt _020D7410
_020D7440:
	mov r0, r3
	pop {r3, pc}
	arm_func_end FUN_020D73F0

	arm_func_start FUN_020D7448
FUN_020D7448: @ 0x020D7448
	push {r3, lr}
	ldr r0, [r0, #0x28]
	add r0, r0, r2
	mov r2, r3
	bl FUN_020D4A50
	mov r0, #0
	pop {r3, pc}
	arm_func_end FUN_020D7448

	arm_func_start FUN_020D7464
FUN_020D7464: @ 0x020D7464
	push {r3, lr}
	ldr ip, [r0, #0x28]
	mov r0, r1
	add r1, ip, r2
	mov r2, r3
	bl FUN_020D4A50
	mov r0, #0
	pop {r3, pc}
	arm_func_end FUN_020D7464

	arm_func_start FUN_020D7484
FUN_020D7484: @ 0x020D7484
	push {r3, lr}
	mov r0, r2
	mov r2, r3
	bl FUN_020D4A50
	mov r0, #0
	pop {r3, pc}
	arm_func_end FUN_020D7484

	arm_func_start FUN_020D749C
FUN_020D749C: @ 0x020D749C
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #0x48
	mov r6, r0
	bl FUN_020D3A38
	ldr r1, [r6, #0x1c]
	mov r4, r0
	tst r1, #0x20
	movne r0, #1
	moveq r0, #0
	cmp r0, #0
	beq _020D7530
	ldr r0, [r6, #0x1c]
	bic r0, r0, #0x20
	str r0, [r6, #0x1c]
	ldr r0, [r6, #0x24]
	cmp r0, #0
	beq _020D7530
	mov r8, #0
	mov sb, #1
	mov r7, #3
_020D74EC:
	ldr r1, [r0, #0xc]
	ldr r5, [r0, #4]
	tst r1, #2
	movne r1, sb
	moveq r1, r8
	cmp r1, #0
	beq _020D7524
	ldr r1, [r6, #0x24]
	cmp r1, r0
	mov r1, r7
	streq r5, [r6, #0x24]
	bl FUN_020D6864
	cmp r5, #0
	ldreq r5, [r6, #0x24]
_020D7524:
	mov r0, r5
	cmp r5, #0
	bne _020D74EC
_020D7530:
	ldr r0, [r6, #0x1c]
	tst r0, #0x40
	movne r0, #1
	moveq r0, #0
	cmp r0, #0
	bne _020D7620
	ldr r0, [r6, #0x1c]
	tst r0, #8
	movne r0, #1
	moveq r0, #0
	cmp r0, #0
	bne _020D7620
	ldr r5, [r6, #0x24]
	cmp r5, #0
	beq _020D7620
	ldr r0, [r6, #0x1c]
	tst r0, #0x10
	movne r0, #1
	moveq r0, #0
	cmp r0, #0
	moveq r7, #1
	movne r7, #0
	cmp r7, #0
	ldrne r0, [r6, #0x1c]
	orrne r0, r0, #0x10
	strne r0, [r6, #0x1c]
	mov r0, r4
	bl FUN_020D3A4C
	cmp r7, #0
	beq _020D75C4
	ldr r0, [r6, #0x58]
	tst r0, #0x200
	beq _020D75C4
	ldr r2, [r6, #0x54]
	mov r0, r5
	mov r1, #9
	blx r2
_020D75C4:
	bl FUN_020D3A38
	ldr r1, [r5, #0xc]
	mov r4, r0
	orr r0, r1, #0x40
	str r0, [r5, #0xc]
	ldr r0, [r5, #0xc]
	tst r0, #4
	movne r0, #1
	moveq r0, #0
	cmp r0, #0
	beq _020D760C
	add r0, r5, #0x18
	bl FUN_020D1ECC
	mov r0, r4
	bl FUN_020D3A4C
	add sp, sp, #0x48
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_020D760C:
	mov r0, r4
	bl FUN_020D3A4C
	add sp, sp, #0x48
	mov r0, r5
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_020D7620:
	ldr r0, [r6, #0x1c]
	tst r0, #0x10
	movne r0, #1
	moveq r0, #0
	cmp r0, #0
	beq _020D766C
	ldr r0, [r6, #0x1c]
	bic r0, r0, #0x10
	str r0, [r6, #0x1c]
	ldr r0, [r6, #0x58]
	tst r0, #0x400
	beq _020D766C
	add r0, sp, #0
	bl FUN_020D7F98
	str r6, [sp, #8]
	ldr r2, [r6, #0x54]
	add r0, sp, #0
	mov r1, #0xa
	blx r2
_020D766C:
	ldr r0, [r6, #0x1c]
	tst r0, #0x40
	movne r0, #1
	moveq r0, #0
	cmp r0, #0
	beq _020D769C
	ldr r1, [r6, #0x1c]
	add r0, r6, #0x14
	bic r1, r1, #0x40
	orr r1, r1, #8
	str r1, [r6, #0x1c]
	bl FUN_020D1ECC
_020D769C:
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, #0
	add sp, sp, #0x48
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	arm_func_end FUN_020D749C

	arm_func_start FUN_020D76B0
FUN_020D76B0: @ 0x020D76B0
	push {r4, r5, r6, r7, r8, lr}
	movs r6, r0
	ldr r4, [r6, #8]
	popeq {r4, r5, r6, r7, r8, pc}
	mov r7, #0
	mov r8, #1
_020D76C8:
	bl FUN_020D3A38
	ldr r1, [r6, #0xc]
	mov r5, r0
	orr r0, r1, #0x40
	str r0, [r6, #0xc]
	ldr r0, [r6, #0xc]
	tst r0, #4
	movne r0, r8
	moveq r0, r7
	cmp r0, #0
	beq _020D7708
	add r0, r6, #0x18
	bl FUN_020D1ECC
	mov r0, r5
	bl FUN_020D3A4C
	pop {r4, r5, r6, r7, r8, pc}
_020D7708:
	ldr r1, [r6, #0xc]
	mov r0, r5
	orr r1, r1, #8
	str r1, [r6, #0xc]
	bl FUN_020D3A4C
	ldr r1, [r6, #0x10]
	mov r0, r6
	bl FUN_020D68C0
	cmp r0, #6
	popeq {r4, r5, r6, r7, r8, pc}
	mov r0, r4
	bl FUN_020D749C
	movs r6, r0
	bne _020D76C8
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020D76B0

	arm_func_start FUN_020D7744
FUN_020D7744: @ 0x020D7744
	push {r4, lr}
	mov r4, r0
	ldr r1, [r4, #0x10]
	bl FUN_020D68C0
	mov r1, r0
	mov r0, r4
	bl FUN_020D6864
	ldr r0, [r4, #8]
	bl FUN_020D749C
	cmp r0, #0
	beq _020D7774
	bl FUN_020D76B0
_020D7774:
	ldr r0, [r4, #0x14]
	cmp r0, #0
	moveq r0, #1
	movne r0, #0
	pop {r4, pc}
	arm_func_end FUN_020D7744

	arm_func_start FUN_020D7788
FUN_020D7788: @ 0x020D7788
	push {r3, r4, r5, r6, r7, lr}
	mov r6, r0
	ldr r4, [r6, #8]
	mov r2, #1
	str r1, [r6, #0x10]
	mov r0, #2
	str r0, [r6, #0x14]
	ldr r0, [r6, #0xc]
	lsl r7, r2, r1
	orr r0, r0, #1
	str r0, [r6, #0xc]
	bl FUN_020D3A38
	ldr r1, [r4, #0x1c]
	mov r5, r0
	tst r1, #0x80
	beq _020D77E4
	mov r0, r6
	mov r1, #3
	bl FUN_020D6864
	mov r0, r5
	bl FUN_020D3A4C
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_020D77E4:
	tst r7, #0x1fc
	ldrne r0, [r6, #0xc]
	orrne r0, r0, #4
	strne r0, [r6, #0xc]
	ldr r1, [r6]
	ldr r2, [r6, #4]
	cmp r1, #0
	strne r2, [r1, #4]
	cmp r2, #0
	add r0, r4, #0x20
	strne r1, [r2]
	ldr r1, [r0, #4]
	cmp r1, #0
	beq _020D782C
_020D781C:
	mov r0, r1
	ldr r1, [r1, #4]
	cmp r1, #0
	bne _020D781C
_020D782C:
	str r6, [r0, #4]
	str r0, [r6]
	mov r1, #0
	str r1, [r6, #4]
	ldr r0, [r4, #0x1c]
	tst r0, #8
	movne r1, #1
	cmp r1, #0
	bne _020D78DC
	ldr r0, [r4, #0x1c]
	tst r0, #0x10
	movne r0, #1
	moveq r0, #0
	cmp r0, #0
	bne _020D78DC
	ldr r1, [r4, #0x1c]
	mov r0, r5
	orr r1, r1, #0x10
	str r1, [r4, #0x1c]
	bl FUN_020D3A4C
	ldr r0, [r4, #0x58]
	tst r0, #0x200
	beq _020D7898
	ldr r2, [r4, #0x54]
	mov r0, r6
	mov r1, #9
	blx r2
_020D7898:
	bl FUN_020D3A38
	ldr r1, [r6, #0xc]
	orr r1, r1, #0x40
	str r1, [r6, #0xc]
	ldr r1, [r6, #0xc]
	tst r1, #4
	movne r1, #1
	moveq r1, #0
	cmp r1, #0
	bne _020D78D4
	bl FUN_020D3A4C
	mov r0, r6
	bl FUN_020D76B0
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_020D78D4:
	bl FUN_020D3A4C
	b _020D7920
_020D78DC:
	ldr r0, [r6, #0xc]
	tst r0, #4
	movne r0, #1
	moveq r0, #0
	cmp r0, #0
	bne _020D7904
	mov r0, r5
	bl FUN_020D3A4C
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_020D7904:
	add r0, r6, #0x18
	bl FUN_020D1E7C
	ldr r0, [r6, #0xc]
	tst r0, #0x40
	beq _020D7904
	mov r0, r5
	bl FUN_020D3A4C
_020D7920:
	mov r0, r6
	bl FUN_020D7744
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020D7788

	arm_func_start FUN_020D792C
FUN_020D792C: @ 0x020D792C
	push {r4, lr}
	mov r1, #0
	mov r2, #0x5c
	mov r4, r0
	bl FUN_020D4994
	mov r0, #0
	str r0, [r4, #0x10]
	str r0, [r4, #0xc]
	str r0, [r4, #0x18]
	str r0, [r4, #0x14]
	pop {r4, pc}
	arm_func_end FUN_020D792C

	arm_func_start FUN_020D7958
FUN_020D7958: @ 0x020D7958
	push {r3, r4, r5, lr}
	bl FUN_020D73F0
	mov r4, r0
	bl FUN_020D3A38
	ldr r1, _020D7994 @ =0x021E3628
	ldr r5, [r1]
	b _020D7978
_020D7974:
	ldr r5, [r5, #4]
_020D7978:
	cmp r5, #0
	ldrne r1, [r5]
	cmpne r1, r4
	bne _020D7974
	bl FUN_020D3A4C
	mov r0, r5
	pop {r3, r4, r5, pc}
	.align 2, 0
_020D7994: .4byte 0x021E3628
	arm_func_end FUN_020D7958

	arm_func_start FUN_020D7998
FUN_020D7998: @ 0x020D7998
	push {r4, r5, r6, r7, r8, lr}
	mov r6, r1
	mov r5, r2
	mov r7, r0
	mov r8, #0
	bl FUN_020D3A38
	mov r4, r0
	mov r0, r6
	mov r1, r5
	bl FUN_020D7958
	cmp r0, #0
	bne _020D7A38
	ldr r0, _020D7A48 @ =0x021E3628
	ldr r1, [r0]
	cmp r1, #0
	bne _020D79F4
	str r7, [r0]
	str r7, [r0, #4]
	mov r1, r8
	str r1, [r0, #0xc]
	strh r1, [r0, #0xa]
	strh r1, [r0, #8]
	b _020D7A18
_020D79F4:
	ldr r0, [r1, #4]
	cmp r0, #0
	beq _020D7A10
_020D7A00:
	mov r1, r0
	ldr r0, [r0, #4]
	cmp r0, #0
	bne _020D7A00
_020D7A10:
	str r7, [r1, #4]
	str r1, [r7, #8]
_020D7A18:
	mov r0, r6
	mov r1, r5
	bl FUN_020D73F0
	str r0, [r7]
	ldr r0, [r7, #0x1c]
	mov r8, #1
	orr r0, r0, #1
	str r0, [r7, #0x1c]
_020D7A38:
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, r8
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0
_020D7A48: .4byte 0x021E3628
	arm_func_end FUN_020D7998

	arm_func_start FUN_020D7A4C
FUN_020D7A4C: @ 0x020D7A4C
	push {r4, lr}
	mov r4, r0
	ldr r0, [r4]
	cmp r0, #0
	popeq {r4, pc}
	bl FUN_020D3A38
	ldr r2, [r4, #4]
	mov r3, #0
	cmp r2, #0
	ldrne r1, [r4, #8]
	strne r1, [r2, #8]
	ldr r2, [r4, #8]
	cmp r2, #0
	ldrne r1, [r4, #4]
	strne r1, [r2, #4]
	str r3, [r4]
	str r3, [r4, #8]
	str r3, [r4, #4]
	ldr r2, [r4, #0x1c]
	ldr r1, _020D7ACC @ =0x021E3628
	bic r2, r2, #1
	str r2, [r4, #0x1c]
	ldr r2, [r1, #4]
	cmp r2, r4
	bne _020D7AC4
	ldr r2, [r1]
	str r2, [r1, #4]
	str r3, [r1, #0xc]
	strh r3, [r1, #0xa]
	strh r3, [r1, #8]
_020D7AC4:
	bl FUN_020D3A4C
	pop {r4, pc}
	.align 2, 0
_020D7ACC: .4byte 0x021E3628
	arm_func_end FUN_020D7A4C

	arm_func_start FUN_020D7AD0
FUN_020D7AD0: @ 0x020D7AD0
	str r1, [r0, #0x28]
	str r3, [r0, #0x30]
	str r2, [r0, #0x3c]
	ldr r3, [sp, #4]
	str r2, [r0, #0x2c]
	ldr ip, [sp, #8]
	ldr r1, [sp]
	str r3, [r0, #0x38]
	str r1, [r0, #0x40]
	str r1, [r0, #0x34]
	cmp ip, #0
	ldreq ip, _020D7B38 @ =FUN_020D7448
	ldr r1, [sp, #0xc]
	str ip, [r0, #0x48]
	cmp r1, #0
	ldreq r1, _020D7B3C @ =FUN_020D7464
	str r1, [r0, #0x4c]
	ldr r2, [r0, #0x48]
	mov r1, #0
	str r2, [r0, #0x50]
	str r1, [r0, #0x44]
	ldr r1, [r0, #0x1c]
	orr r1, r1, #2
	str r1, [r0, #0x1c]
	mov r0, #1
	bx lr
	.align 2, 0
_020D7B38: .4byte FUN_020D7448
_020D7B3C: .4byte FUN_020D7464
	arm_func_end FUN_020D7AD0

	arm_func_start FUN_020D7B40
FUN_020D7B40: @ 0x020D7B40
	push {r4, r5, r6, r7, r8, lr}
	mov r6, r0
	bl FUN_020D3A38
	ldr r1, [r6, #0x1c]
	mov r4, r0
	tst r1, #2
	movne r0, #1
	moveq r0, #0
	cmp r0, #0
	beq _020D7BF0
	mov r0, r6
	ldr r1, [r6, #0x1c]
	bl FUN_020D7DB0
	ldr r1, [r6, #0x1c]
	mov r5, r0
	orr r0, r1, #0x80
	str r0, [r6, #0x1c]
	ldr r0, [r6, #0x24]
	cmp r0, #0
	beq _020D7BAC
	mov r7, #3
_020D7B94:
	ldr r8, [r0, #4]
	mov r1, r7
	bl FUN_020D6864
	mov r0, r8
	cmp r8, #0
	bne _020D7B94
_020D7BAC:
	mov r0, #0
	str r0, [r6, #0x24]
	cmp r5, #0
	beq _020D7BC4
	mov r0, r6
	bl FUN_020D7E4C
_020D7BC4:
	mov r0, #0
	str r0, [r6, #0x28]
	str r0, [r6, #0x2c]
	str r0, [r6, #0x30]
	str r0, [r6, #0x34]
	str r0, [r6, #0x38]
	str r0, [r6, #0x40]
	str r0, [r6, #0x3c]
	ldr r0, [r6, #0x1c]
	bic r0, r0, #0xa2
	str r0, [r6, #0x1c]
_020D7BF0:
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, #1
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020D7B40

	arm_func_start FUN_020D7C00
FUN_020D7C00: @ 0x020D7C00
	push {r4, r5, r6, r7, lr}
	sub sp, sp, #0x4c
	mov r7, r0
	ldr r3, [r7, #0x30]
	ldr r0, [r7, #0x38]
	mov r6, r1
	add r0, r3, r0
	add r0, r0, #0x3f
	bic r4, r0, #0x1f
	cmp r4, r2
	bhi _020D7D14
	add r1, r6, #0x1f
	add r0, sp, #4
	bic r5, r1, #0x1f
	bl FUN_020D7F98
	ldr r2, [r7, #0x2c]
	mvn r0, #0
	str r0, [sp]
	ldr r3, [r7, #0x30]
	add r0, sp, #4
	mov r1, r7
	add r3, r2, r3
	bl FUN_020D81C0
	cmp r0, #0
	beq _020D7C94
	ldr r2, [r7, #0x30]
	add r0, sp, #4
	mov r1, r5
	bl FUN_020D83CC
	cmp r0, #0
	bge _020D7C8C
	ldr r2, [r7, #0x30]
	mov r0, r5
	mov r1, #0
	bl FUN_020D4994
_020D7C8C:
	add r0, sp, #4
	bl FUN_020D82C0
_020D7C94:
	str r5, [r7, #0x2c]
	ldr ip, [r7, #0x30]
	ldr r2, [r7, #0x34]
	mvn r0, #0
	str r0, [sp]
	ldr r3, [r7, #0x38]
	add r0, sp, #4
	mov r1, r7
	add r3, r2, r3
	add r5, r5, ip
	bl FUN_020D81C0
	cmp r0, #0
	beq _020D7CF8
	ldr r2, [r7, #0x38]
	add r0, sp, #4
	mov r1, r5
	bl FUN_020D83CC
	cmp r0, #0
	bge _020D7CF0
	ldr r2, [r7, #0x38]
	mov r0, r5
	mov r1, #0
	bl FUN_020D4994
_020D7CF0:
	add r0, sp, #4
	bl FUN_020D82C0
_020D7CF8:
	str r5, [r7, #0x34]
	ldr r0, _020D7D20 @ =FUN_020D7484
	str r6, [r7, #0x44]
	str r0, [r7, #0x50]
	ldr r0, [r7, #0x1c]
	orr r0, r0, #4
	str r0, [r7, #0x1c]
_020D7D14:
	mov r0, r4
	add sp, sp, #0x4c
	pop {r4, r5, r6, r7, pc}
	.align 2, 0
_020D7D20: .4byte FUN_020D7484
	arm_func_end FUN_020D7C00

	arm_func_start FUN_020D7D24
FUN_020D7D24: @ 0x020D7D24
	push {r3, r4, r5, lr}
	mov r5, r0
	ldr r0, [r5, #0x1c]
	mov r4, #0
	tst r0, #2
	movne r0, #1
	moveq r0, r4
	cmp r0, #0
	beq _020D7DA8
	mov r0, r5
	bl FUN_020D7DB0
	ldr r1, [r5, #0x1c]
	tst r1, #4
	movne r1, #1
	moveq r1, #0
	cmp r1, #0
	beq _020D7D98
	ldr r2, [r5, #0x1c]
	mov r1, #0
	bic r2, r2, #4
	str r2, [r5, #0x1c]
	ldr r4, [r5, #0x44]
	str r1, [r5, #0x44]
	ldr r1, [r5, #0x3c]
	str r1, [r5, #0x2c]
	ldr r1, [r5, #0x40]
	str r1, [r5, #0x34]
	ldr r1, [r5, #0x48]
	str r1, [r5, #0x50]
_020D7D98:
	cmp r0, #0
	beq _020D7DA8
	mov r0, r5
	bl FUN_020D7E4C
_020D7DA8:
	mov r0, r4
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020D7D24

	arm_func_start FUN_020D7DB0
FUN_020D7DB0: @ 0x020D7DB0
	push {r4, r5, r6, r7, r8, lr}
	mov r6, r0
	bl FUN_020D3A38
	ldr r1, [r6, #0x1c]
	mov r4, r0
	tst r1, #8
	movne r0, #1
	moveq r0, #0
	cmp r0, #0
	moveq r5, #1
	movne r5, #0
	cmp r5, #0
	beq _020D7E3C
	ldr r0, [r6, #0x1c]
	tst r0, #0x10
	movne r0, #1
	moveq r0, #0
	cmp r0, #0
	ldr r0, [r6, #0x1c]
	beq _020D7E34
	orr r0, r0, #0x40
	str r0, [r6, #0x1c]
	mov r7, #0
	mov r8, #1
_020D7E10:
	add r0, r6, #0x14
	bl FUN_020D1E7C
	ldr r0, [r6, #0x1c]
	tst r0, #0x40
	movne r0, r8
	moveq r0, r7
	cmp r0, #0
	bne _020D7E10
	b _020D7E3C
_020D7E34:
	orr r0, r0, #8
	str r0, [r6, #0x1c]
_020D7E3C:
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, r5
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020D7DB0

	arm_func_start FUN_020D7E4C
FUN_020D7E4C: @ 0x020D7E4C
	push {r3, r4, r5, r6, r7, lr}
	mov r4, r0
	mov r5, #0
	bl FUN_020D3A38
	ldr r1, [r4, #0x1c]
	mov r6, r0
	tst r1, #8
	movne r0, #1
	moveq r0, r5
	cmp r0, #0
	moveq r7, #1
	movne r7, #0
	cmp r7, #0
	bne _020D7E9C
	ldr r1, [r4, #0x1c]
	mov r0, r4
	bic r1, r1, #8
	str r1, [r4, #0x1c]
	bl FUN_020D749C
	mov r5, r0
_020D7E9C:
	mov r0, r6
	bl FUN_020D3A4C
	cmp r5, #0
	beq _020D7EB4
	mov r0, r5
	bl FUN_020D76B0
_020D7EB4:
	mov r0, r7
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020D7E4C

	arm_func_start FUN_020D7EBC
FUN_020D7EBC: @ 0x020D7EBC
	cmp r2, #0
	moveq r1, #0
	beq _020D7ED0
	cmp r1, #0
	moveq r2, #0
_020D7ED0:
	str r1, [r0, #0x54]
	str r2, [r0, #0x58]
	bx lr
	arm_func_end FUN_020D7EBC

	arm_func_start FUN_020D7EDC
FUN_020D7EDC: @ 0x020D7EDC
	push {r4, r5, r6, lr}
	mov r4, r0
	ldr r0, [r4, #0x1c]
	mov r6, r1
	tst r0, #0x100
	movne r0, #1
	moveq r0, #0
	cmp r0, #0
	beq _020D7F30
	ldr r1, [r4, #0x1c]
	ldr r0, [r4, #0x24]
	bic r2, r1, #0x100
	mov r1, r6
	str r2, [r4, #0x1c]
	bl FUN_020D6864
	mov r0, r4
	bl FUN_020D749C
	cmp r0, #0
	popeq {r4, r5, r6, pc}
	bl FUN_020D76B0
	pop {r4, r5, r6, pc}
_020D7F30:
	ldr r5, [r4, #0x24]
	bl FUN_020D3A38
	str r6, [r5, #0x14]
	ldr r1, [r4, #0x1c]
	mov r5, r0
	bic r1, r1, #0x200
	add r0, r4, #0xc
	str r1, [r4, #0x1c]
	bl FUN_020D1ECC
	mov r0, r5
	bl FUN_020D3A4C
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020D7EDC

	arm_func_start FUN_020D7F60
FUN_020D7F60: @ 0x020D7F60
	push {r3, lr}
	ldr r1, _020D7F84 @ =0x021E3638
	ldr r2, [r1]
	cmp r2, #0
	popne {r3, pc}
	mov r2, #1
	str r2, [r1]
	bl FUN_020D8590
	pop {r3, pc}
	.align 2, 0
_020D7F84: .4byte 0x021E3638
	arm_func_end FUN_020D7F60

	arm_func_start FUN_020D7F88
FUN_020D7F88: @ 0x020D7F88
	ldr r0, _020D7F94 @ =0x021E3638
	ldr r0, [r0]
	bx lr
	.align 2, 0
_020D7F94: .4byte 0x021E3638
	arm_func_end FUN_020D7F88

	arm_func_start FUN_020D7F98
FUN_020D7F98: @ 0x020D7F98
	mov r2, #0
	str r2, [r0]
	str r2, [r0, #4]
	str r2, [r0, #0x1c]
	str r2, [r0, #0x18]
	str r2, [r0, #8]
	mov r1, #0xe
	str r1, [r0, #0x10]
	str r2, [r0, #0xc]
	bx lr
	arm_func_end FUN_020D7F98

	arm_func_start FUN_020D7FC0
FUN_020D7FC0: @ 0x020D7FC0
	push {r3, r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0xc
	mov r7, r1
	ldrb r1, [r7]
	mov r8, r0
	mov r6, r2
	cmp r1, #0x2f
	mov r5, r3
	cmpne r1, #0x5c
	bne _020D800C
	ldr r0, _020D8100 @ =0x021E362C
	mov r1, #0
	ldr r0, [r0]
	strh r1, [sp, #4]
	str r0, [sp]
	str r1, [sp, #8]
	strh r1, [sp, #6]
	add r7, r7, #1
	b _020D80B0
_020D800C:
	ldr r0, _020D8100 @ =0x021E362C
	add r3, sp, #0
	ldm r0, {r0, r1, r2}
	stm r3, {r0, r1, r2}
	mov r4, #0
_020D8020:
	ldrb r0, [r7, r4]
	cmp r0, #0
	cmpne r0, #0x2f
	cmpne r0, #0x5c
	beq _020D80B0
	cmp r0, #0x3a
	bne _020D80A4
	mov r0, r7
	mov r1, r4
	bl FUN_020D7958
	cmp r0, #0
	addeq sp, sp, #0xc
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, pc}
	ldr r1, [r0, #0x1c]
	tst r1, #2
	movne r1, #1
	moveq r1, #0
	cmp r1, #0
	addeq sp, sp, #0xc
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, pc}
	mov r1, #0
	str r0, [sp]
	str r1, [sp, #8]
	strh r1, [sp, #6]
	strh r1, [sp, #4]
	add r0, r4, #1
	ldrb r0, [r7, r0]!
	cmp r0, #0x2f
	cmpne r0, #0x5c
	addeq r7, r7, #1
	b _020D80B0
_020D80A4:
	add r4, r4, #1
	cmp r4, #3
	ble _020D8020
_020D80B0:
	ldr r1, [sp]
	add r0, sp, #0
	str r1, [r8, #8]
	str r7, [r8, #0x3c]
	add r3, r8, #0x30
	ldm r0, {r0, r1, r2}
	stm r3, {r0, r1, r2}
	cmp r5, #0
	moveq r0, #0
	streq r0, [r8, #0x40]
	streq r6, [r8, #0x44]
	beq _020D80EC
	mov r0, #1
	str r0, [r8, #0x40]
	str r5, [r8, #0x44]
_020D80EC:
	mov r0, r8
	mov r1, #4
	bl FUN_020D7788
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, pc}
	.align 2, 0
_020D8100: .4byte 0x021E362C
	arm_func_end FUN_020D7FC0

	arm_func_start FUN_020D8104
FUN_020D8104: @ 0x020D8104
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	ldr r4, [r7, #0x2c]
	ldr r0, [r7, #0x28]
	mov r6, r2
	str r1, [r7, #0x30]
	sub r0, r0, r4
	cmp r6, r0
	movgt r6, r0
	cmp r6, #0
	movlt r6, #0
	str r2, [r7, #0x34]
	mov r5, r3
	str r6, [r7, #0x38]
	cmp r5, #0
	ldreq r0, [r7, #0xc]
	mov r1, #0
	orreq r0, r0, #4
	streq r0, [r7, #0xc]
	mov r0, r7
	bl FUN_020D7788
	cmp r5, #0
	bne _020D8178
	mov r0, r7
	bl FUN_020D82FC
	cmp r0, #0
	ldrne r0, [r7, #0x2c]
	subne r6, r0, r4
	mvneq r6, #0
_020D8178:
	mov r0, r6
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020D8104

	arm_func_start FUN_020D8180
FUN_020D8180: @ 0x020D8180
	push {r3, r4, r5, lr}
	sub sp, sp, #0x48
	mov r5, r0
	add r0, sp, #0
	mov r4, r1
	bl FUN_020D7F98
	add r0, sp, #0
	mov r1, r4
	mov r2, r5
	mov r3, #0
	bl FUN_020D7FC0
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	add sp, sp, #0x48
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020D8180

	arm_func_start FUN_020D81C0
FUN_020D81C0: @ 0x020D81C0
	push {r4, lr}
	mov r4, r0
	str r1, [r4, #8]
	ldr ip, [sp, #8]
	mov r1, #7
	str ip, [r4, #0x38]
	str r2, [r4, #0x30]
	str r3, [r4, #0x34]
	bl FUN_020D7788
	cmp r0, #0
	moveq r0, #0
	popeq {r4, pc}
	ldr r1, [r4, #0xc]
	mov r0, #1
	orr r1, r1, #0x10
	bic r1, r1, #0x20
	str r1, [r4, #0xc]
	pop {r4, pc}
	arm_func_end FUN_020D81C0

	arm_func_start FUN_020D8208
FUN_020D8208: @ 0x020D8208
	push {r0, r1, r2, r3}
	push {r4, lr}
	ldr r1, [sp, #0xc]
	mov r4, r0
	cmp r1, #0
	moveq r0, #0
	popeq {r4, lr}
	addeq sp, sp, #0x10
	bxeq lr
	str r1, [r4, #8]
	str r1, [r4, #0x30]
	ldr r2, [sp, #0x10]
	mov r1, #6
	str r2, [r4, #0x34]
	bl FUN_020D7788
	cmp r0, #0
	moveq r0, #0
	popeq {r4, lr}
	addeq sp, sp, #0x10
	bxeq lr
	ldr r1, [r4, #0xc]
	mov r0, #1
	orr r1, r1, #0x10
	bic r1, r1, #0x20
	str r1, [r4, #0xc]
	pop {r4, lr}
	add sp, sp, #0x10
	bx lr
	arm_func_end FUN_020D8208

	arm_func_start FUN_020D8278
FUN_020D8278: @ 0x020D8278
	push {r4, lr}
	sub sp, sp, #8
	mov r4, r0
	add r0, sp, #0
	bl FUN_020D8180
	cmp r0, #0
	beq _020D82B4
	add r1, sp, #0
	mov r0, r4
	ldm r1, {r1, r2}
	bl FUN_020D8208
	cmp r0, #0
	addne sp, sp, #8
	movne r0, #1
	popne {r4, pc}
_020D82B4:
	mov r0, #0
	add sp, sp, #8
	pop {r4, pc}
	arm_func_end FUN_020D8278

	arm_func_start FUN_020D82C0
FUN_020D82C0: @ 0x020D82C0
	push {r4, lr}
	mov r1, #8
	mov r4, r0
	bl FUN_020D7788
	cmp r0, #0
	mov r0, #0
	popeq {r4, pc}
	str r0, [r4, #8]
	mov r0, #0xe
	str r0, [r4, #0x10]
	ldr r1, [r4, #0xc]
	mov r0, #1
	bic r1, r1, #0x30
	str r1, [r4, #0xc]
	pop {r4, pc}
	arm_func_end FUN_020D82C0

	arm_func_start FUN_020D82FC
FUN_020D82FC: @ 0x020D82FC
	push {r4, r5, r6, r7, r8, lr}
	mov r6, r0
	mov r5, #0
	bl FUN_020D3A38
	ldr r1, [r6, #0xc]
	mov r4, r0
	tst r1, #1
	movne r0, #1
	moveq r0, r5
	cmp r0, #0
	beq _020D838C
	ldr r0, [r6, #0xc]
	tst r0, #0x44
	moveq r5, #1
	movne r5, #0
	cmp r5, #0
	beq _020D8364
	ldr r0, [r6, #0xc]
	orr r0, r0, #4
	str r0, [r6, #0xc]
_020D834C:
	add r0, r6, #0x18
	bl FUN_020D1E7C
	ldr r0, [r6, #0xc]
	tst r0, #0x40
	beq _020D834C
	b _020D838C
_020D8364:
	mov r7, #0
	mov r8, #1
_020D836C:
	add r0, r6, #0x18
	bl FUN_020D1E7C
	ldr r0, [r6, #0xc]
	tst r0, #1
	movne r0, r8
	moveq r0, r7
	cmp r0, #0
	bne _020D836C
_020D838C:
	mov r0, r4
	bl FUN_020D3A4C
	cmp r5, #0
	beq _020D83A8
	mov r0, r6
	bl FUN_020D7744
	pop {r4, r5, r6, r7, r8, pc}
_020D83A8:
	ldr r0, [r6, #0x14]
	cmp r0, #0
	moveq r0, #1
	movne r0, #0
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020D82FC

	arm_func_start FUN_020D83BC
FUN_020D83BC: @ 0x020D83BC
	ldr ip, _020D83C8 @ =FUN_020D8104
	mov r3, #1
	bx ip
	.align 2, 0
_020D83C8: .4byte FUN_020D8104
	arm_func_end FUN_020D83BC

	arm_func_start FUN_020D83CC
FUN_020D83CC: @ 0x020D83CC
	ldr ip, _020D83D8 @ =FUN_020D8104
	mov r3, #0
	bx ip
	.align 2, 0
_020D83D8: .4byte FUN_020D8104
	arm_func_end FUN_020D83CC

	arm_func_start FUN_020D83DC
FUN_020D83DC: @ 0x020D83DC
	cmp r2, #0
	beq _020D83F8
	cmp r2, #1
	beq _020D8404
	cmp r2, #2
	beq _020D8410
	b _020D841C
_020D83F8:
	ldr r2, [r0, #0x24]
	add r1, r1, r2
	b _020D8424
_020D8404:
	ldr r2, [r0, #0x2c]
	add r1, r1, r2
	b _020D8424
_020D8410:
	ldr r2, [r0, #0x28]
	add r1, r1, r2
	b _020D8424
_020D841C:
	mov r0, #0
	bx lr
_020D8424:
	ldr r2, [r0, #0x24]
	cmp r1, r2
	movlt r1, r2
	ldr r2, [r0, #0x28]
	cmp r1, r2
	movgt r1, r2
	str r1, [r0, #0x2c]
	mov r0, #1
	bx lr
	arm_func_end FUN_020D83DC

	arm_func_start FUN_020D8448
FUN_020D8448: @ 0x020D8448
	push {r3, r4, lr}
	sub sp, sp, #0x54
	mov r4, r0
	add r0, sp, #0xc
	bl FUN_020D7F98
	add r0, sp, #0xc
	add r3, sp, #0
	mov r1, r4
	mov r2, #0
	bl FUN_020D7FC0
	cmp r0, #0
	addeq sp, sp, #0x54
	moveq r0, #0
	popeq {r3, r4, pc}
	ldr r3, _020D849C @ =0x021E362C
	add r0, sp, #0
	ldm r0, {r0, r1, r2}
	stm r3, {r0, r1, r2}
	mov r0, #1
	add sp, sp, #0x54
	pop {r3, r4, pc}
	.align 2, 0
_020D849C: .4byte 0x021E362C
	arm_func_end FUN_020D8448

	arm_func_start FUN_020D84A0
FUN_020D84A0: @ 0x020D84A0
	push {r4, lr}
	mov r4, r0
	bl FUN_020DDB24
	cmp r0, #0
	movne r1, #5
	moveq r1, #0
	mov r0, r4
	bl FUN_020D7EDC
	pop {r4, pc}
	arm_func_end FUN_020D84A0

	arm_func_start FUN_020D84C4
FUN_020D84C4: @ 0x020D84C4
	stmdb sp!, {lr}
	sub sp, sp, #0xc
	ldr ip, _020D8504 @ =FUN_020D84A0
	mov lr, r1
	str ip, [sp]
	str r0, [sp, #4]
	mov r1, #1
	ldr r0, _020D8508 @ =0x021E363C
	str r1, [sp, #8]
	mov r1, r2
	ldr r0, [r0, #4]
	mov r2, lr
	bl FUN_020DD754
	mov r0, #6
	add sp, sp, #0xc
	ldm sp!, {pc}
	.align 2, 0
_020D8504: .4byte FUN_020D84A0
_020D8508: .4byte 0x021E363C
	arm_func_end FUN_020D84C4

	arm_func_start FUN_020D850C
FUN_020D850C: @ 0x020D850C
	mov r0, #1
	bx lr
	arm_func_end FUN_020D850C

	arm_func_start FUN_020D8514
FUN_020D8514: @ 0x020D8514
	push {r3, lr}
	cmp r1, #1
	beq _020D856C
	cmp r1, #9
	beq _020D8534
	cmp r1, #0xa
	beq _020D8550
	b _020D8574
_020D8534:
	ldr r0, _020D857C @ =0x021E363C
	ldr r0, [r0]
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	bl FUN_020DC96C
	mov r0, #0
	pop {r3, pc}
_020D8550:
	ldr r0, _020D857C @ =0x021E363C
	ldr r0, [r0]
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	bl FUN_020DC988
	mov r0, #0
	pop {r3, pc}
_020D856C:
	mov r0, #4
	pop {r3, pc}
_020D8574:
	mov r0, #8
	pop {r3, pc}
	.align 2, 0
_020D857C: .4byte 0x021E363C
	arm_func_end FUN_020D8514

	arm_func_start FUN_020D8580
FUN_020D8580: @ 0x020D8580
	mov r0, #1
	bx lr
	arm_func_end FUN_020D8580

	arm_func_start FUN_020D8588
FUN_020D8588: @ 0x020D8588
	mov r0, #4
	bx lr
	arm_func_end FUN_020D8588

	arm_func_start FUN_020D8590
FUN_020D8590: @ 0x020D8590
	push {r4, lr}
	sub sp, sp, #0x10
	ldr r1, _020D86B0 @ =0x021E363C
	str r0, [r1, #4]
	bl FUN_020D15C4
	ldr r1, _020D86B0 @ =0x021E363C
	mov r2, #0
	str r0, [r1]
	str r2, [r1, #8]
	str r2, [r1, #0xc]
	str r2, [r1, #0x10]
	str r2, [r1, #0x14]
	bl FUN_020DD84C
	ldr r0, _020D86B4 @ =0x021E3654
	bl FUN_020D792C
	ldr r0, _020D86B4 @ =0x021E3654
	ldr r1, _020D86B8 @ =_02110C9C
	mov r2, #3
	bl FUN_020D7998
	ldr r4, _020D86BC @ =0x027FFC40
	ldrh r0, [r4]
	cmp r0, #2
	bne _020D8648
	ldr r3, _020D86B0 @ =0x021E363C
	mvn r2, #0
	str r2, [r3, #8]
	mov ip, #0
	str ip, [r3, #0xc]
	str r2, [r3, #0x10]
	ldr r0, _020D86B4 @ =0x021E3654
	ldr r1, _020D86C0 @ =FUN_020D8588
	str ip, [r3, #0x14]
	bl FUN_020D7EBC
	mov r1, #0
	str r1, [sp]
	ldr r0, _020D86C4 @ =FUN_020D8580
	str r1, [sp, #4]
	str r0, [sp, #8]
	ldr ip, _020D86C8 @ =FUN_020D850C
	ldr r0, _020D86B4 @ =0x021E3654
	mov r2, r1
	mov r3, r1
	str ip, [sp, #0xc]
	bl FUN_020D7AD0
	add sp, sp, #0x10
	pop {r4, pc}
_020D8648:
	ldr r0, _020D86B4 @ =0x021E3654
	ldr r1, _020D86CC @ =FUN_020D8514
	ldr r2, _020D86D0 @ =0x00000602
	bl FUN_020D7EBC
	ldr r1, [r4, #0x200]
	mvn r0, #0
	cmp r1, r0
	cmpne r1, #0
	ldrne r2, [r4, #0x208]
	cmpne r2, r0
	cmpne r2, #0
	addeq sp, sp, #0x10
	popeq {r4, pc}
	str r1, [sp]
	ldr r0, [r4, #0x204]
	ldr r1, _020D86D4 @ =FUN_020D84C4
	str r0, [sp, #4]
	ldr r0, _020D86C8 @ =FUN_020D850C
	str r1, [sp, #8]
	str r0, [sp, #0xc]
	ldr r3, [r4, #0x20c]
	ldr r0, _020D86B4 @ =0x021E3654
	mov r1, #0
	bl FUN_020D7AD0
	add sp, sp, #0x10
	pop {r4, pc}
	.align 2, 0
_020D86B0: .4byte 0x021E363C
_020D86B4: .4byte 0x021E3654
_020D86B8: .4byte _02110C9C
_020D86BC: .4byte 0x027FFC40
_020D86C0: .4byte FUN_020D8588
_020D86C4: .4byte FUN_020D8580
_020D86C8: .4byte FUN_020D850C
_020D86CC: .4byte FUN_020D8514
_020D86D0: .4byte 0x00000602
_020D86D4: .4byte FUN_020D84C4
	arm_func_end FUN_020D8590

	arm_func_start FUN_020D86D8
FUN_020D86D8: @ 0x020D86D8
	push {r4, r5, r6, lr}
	mov r6, r0
	bl FUN_020D3A38
	mov r4, r0
	ldr r1, _020D8720 @ =0x021E363C
	ldr r0, _020D8724 @ =0x021E3654
	ldr r5, [r1, #4]
	bl FUN_020D7DB0
	ldr r1, _020D8720 @ =0x021E363C
	cmp r0, #0
	str r6, [r1, #4]
	beq _020D8710
	ldr r0, _020D8724 @ =0x021E3654
	bl FUN_020D7E4C
_020D8710:
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, r5
	pop {r4, r5, r6, pc}
	.align 2, 0
_020D8720: .4byte 0x021E363C
_020D8724: .4byte 0x021E3654
	arm_func_end FUN_020D86D8

	arm_func_start FUN_020D8728
FUN_020D8728: @ 0x020D8728
	ldr ip, _020D8740 @ =FUN_020D7C00
	mov r3, r0
	mov r2, r1
	ldr r0, _020D8744 @ =0x021E3654
	mov r1, r3
	bx ip
	.align 2, 0
_020D8740: .4byte FUN_020D7C00
_020D8744: .4byte 0x021E3654
	arm_func_end FUN_020D8728

	arm_func_start FUN_020D8748
FUN_020D8748: @ 0x020D8748
	ldr r1, [r0, #0x1c]
	lsr r2, r1, #0x18
	tst r2, #1
	lslne r0, r1, #8
	lsrne r0, r0, #8
	ldreq r0, [r0, #8]
	bx lr
	arm_func_end FUN_020D8748

	arm_func_start FUN_020D8764
FUN_020D8764: @ 0x020D8764
	push {r4, r5, r6, lr}
	ldr r1, [r0, #0xc]
	ldmib r0, {r4, r5}
	add r6, r5, r1
	mov r0, r4
	mov r1, r6
	bl FUN_020D28D0
	mov r0, r4
	mov r1, r6
	bl FUN_020D285C
	add r0, r4, r5
	sub r2, r6, r5
	mov r1, #0
	bl FUN_020D4994
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020D8764

	arm_func_start FUN_020D87A0
FUN_020D87A0: @ 0x020D87A0
	sub sp, sp, #8
	ldr r1, [r1, #0x18]
	ldr r2, _020D87C4 @ =0x021E3654
	str r1, [sp, #4]
	str r2, [r0]
	str r2, [sp]
	str r1, [r0, #4]
	add sp, sp, #8
	bx lr
	.align 2, 0
_020D87C4: .4byte 0x021E3654
	arm_func_end FUN_020D87A0

	arm_func_start FUN_020D87C8
FUN_020D87C8: @ 0x020D87C8
	push {r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #0x54
	movs sb, r1
	ldreq r7, [sp, #0x74]
	ldreq r6, [sp, #0x70]
	ldrne r7, [sp, #0x7c]
	ldrne r6, [sp, #0x78]
	cmp r7, r2, lsl #5
	mov r4, r0
	mov r8, r3
	lsl r5, r2, #5
	addls sp, sp, #0x54
	movls r0, #0
	popls {r4, r5, r6, r7, r8, sb, pc}
	add r0, sp, #0xc
	bl FUN_020D7F98
	mvn ip, #0
	add r0, sp, #0xc
	mov r1, r8
	add r2, r6, r5
	add r3, r6, r7
	str ip, [sp]
	bl FUN_020D81C0
	cmp r0, #0
	addeq sp, sp, #0x54
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, pc}
	add r0, sp, #0xc
	mov r1, r4
	mov r2, #0x20
	bl FUN_020D83CC
	cmp r0, #0x20
	add r0, sp, #0xc
	beq _020D8860
	bl FUN_020D82C0
	add sp, sp, #0x54
	mov r0, #0
	pop {r4, r5, r6, r7, r8, sb, pc}
_020D8860:
	bl FUN_020D82C0
	add r0, sp, #4
	mov r1, r4
	str sb, [r4, #0x20]
	bl FUN_020D87A0
	add r1, sp, #4
	add r0, sp, #0xc
	ldm r1, {r1, r2}
	bl FUN_020D8208
	cmp r0, #0
	addeq sp, sp, #0x54
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, pc}
	ldr r1, [sp, #0x30]
	add r0, sp, #0xc
	str r1, [r4, #0x24]
	ldr r2, [sp, #0x34]
	ldr r1, [sp, #0x30]
	sub r1, r2, r1
	str r1, [r4, #0x28]
	bl FUN_020D82C0
	mov r0, #1
	add sp, sp, #0x54
	pop {r4, r5, r6, r7, r8, sb, pc}
	arm_func_end FUN_020D87C8

	arm_func_start FUN_020D88C0
FUN_020D88C0: @ 0x020D88C0
	push {r3, r4, r5, lr}
	sub sp, sp, #0x60
	movs r4, r1
	mov r5, r0
	ldreq r0, _020D89AC @ =0x021E3644
	ldrne r0, _020D89B0 @ =0x021E364C
	ldr ip, [r0]
	cmp ip, #0
	beq _020D8970
	ldr r0, [r0, #4]
	lsl r3, r2, #5
	cmp r0, r2, lsl #5
	addls sp, sp, #0x60
	movls r0, #0
	popls {r3, r4, r5, pc}
	mov r1, r5
	add r0, ip, r3
	mov r2, #0x20
	bl FUN_020D4A50
	add r0, sp, #0x18
	str r4, [r5, #0x20]
	bl FUN_020D7F98
	add r0, sp, #0x10
	mov r1, r5
	bl FUN_020D87A0
	add r1, sp, #0x10
	add r0, sp, #0x18
	ldm r1, {r1, r2}
	bl FUN_020D8208
	cmp r0, #0
	addeq sp, sp, #0x60
	moveq r0, #0
	popeq {r3, r4, r5, pc}
	ldr r1, [sp, #0x3c]
	add r0, sp, #0x18
	str r1, [r5, #0x24]
	ldr r2, [sp, #0x40]
	ldr r1, [sp, #0x3c]
	sub r1, r2, r1
	str r1, [r5, #0x28]
	bl FUN_020D82C0
	add sp, sp, #0x60
	mov r0, #1
	pop {r3, r4, r5, pc}
_020D8970:
	ldr ip, _020D89B4 @ =0x027FFE50
	ldr r3, _020D89B8 @ =0x021E3654
	ldr r1, [ip]
	mov r0, r5
	str r1, [sp]
	ldr r5, [ip, #4]
	mov r1, r4
	str r5, [sp, #4]
	ldr r4, [ip, #8]
	str r4, [sp, #8]
	ldr r4, [ip, #0xc]
	str r4, [sp, #0xc]
	bl FUN_020D87C8
	add sp, sp, #0x60
	pop {r3, r4, r5, pc}
	.align 2, 0
_020D89AC: .4byte 0x021E3644
_020D89B0: .4byte 0x021E364C
_020D89B4: .4byte 0x027FFE50
_020D89B8: .4byte 0x021E3654
	arm_func_end FUN_020D88C0

	arm_func_start FUN_020D89BC
FUN_020D89BC: @ 0x020D89BC
	push {r4, r5, r6, lr}
	sub sp, sp, #8
	mov r5, r1
	mov r6, r0
	mov r0, r5
	bl FUN_020D7F98
	add r0, sp, #0
	mov r1, r6
	bl FUN_020D87A0
	add r1, sp, #0
	mov r0, r5
	ldm r1, {r1, r2}
	bl FUN_020D8208
	cmp r0, #0
	addeq sp, sp, #8
	moveq r0, #0
	popeq {r4, r5, r6, pc}
	mov r0, r6
	bl FUN_020D8748
	mov r4, r0
	mov r0, r6
	bl FUN_020D8764
	ldr r1, [r6, #4]
	mov r0, r5
	mov r2, r4
	bl FUN_020D83BC
	cmp r4, r0
	addeq sp, sp, #8
	moveq r0, #1
	popeq {r4, r5, r6, pc}
	mov r0, r5
	bl FUN_020D82C0
	mov r0, #0
	add sp, sp, #8
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020D89BC

	arm_func_start FUN_020D8A48
FUN_020D8A48: @ 0x020D8A48
	push {r3, r4, r5, lr}
	sub sp, sp, #0x50
	mov r5, r0
	add r0, sp, #8
	bl FUN_020D7F98
	add r0, sp, #0
	mov r1, r5
	bl FUN_020D87A0
	add r1, sp, #0
	add r0, sp, #8
	ldm r1, {r1, r2}
	bl FUN_020D8208
	cmp r0, #0
	addeq sp, sp, #0x50
	moveq r0, #0
	popeq {r3, r4, r5, pc}
	mov r0, r5
	bl FUN_020D8748
	mov r4, r0
	mov r0, r5
	bl FUN_020D8764
	ldr r1, [r5, #4]
	add r0, sp, #8
	mov r2, r4
	bl FUN_020D83CC
	cmp r4, r0
	add r0, sp, #8
	beq _020D8AC8
	bl FUN_020D82C0
	add sp, sp, #0x50
	mov r0, #0
	pop {r3, r4, r5, pc}
_020D8AC8:
	bl FUN_020D82C0
	mov r0, #1
	add sp, sp, #0x50
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020D8A48

	arm_func_start FUN_020D8AD8
FUN_020D8AD8: @ 0x020D8AD8
	push {r4, r5, r6, lr}
	sub sp, sp, #0x58
	mov r4, r0
	mov r6, r1
	mov r5, r2
	add r0, sp, #0x44
	mov r1, #0
	mov r2, #0x14
	bl FUN_020D4994
	ldr r2, _020D8B68 @ =_02110CA0
	add r1, sp, #4
	ldm r2, {r0, r2}
	bl FUN_020D4A50
	ldr r3, _020D8B68 @ =_02110CA0
	mov r1, r6
	ldr ip, [r3, #4]
	mov r2, r5
	add r0, sp, #0x44
	add r3, sp, #4
	str ip, [sp]
	bl FUN_020D9714
	add r3, sp, #0x44
	mov r2, #0
_020D8B34:
	ldr r1, [r3]
	ldr r0, [r4, r2]
	cmp r1, r0
	bne _020D8B54
	add r2, r2, #4
	cmp r2, #0x14
	add r3, r3, #4
	blo _020D8B34
_020D8B54:
	cmp r2, #0x14
	moveq r0, #1
	movne r0, #0
	add sp, sp, #0x58
	pop {r4, r5, r6, pc}
	.align 2, 0
_020D8B68: .4byte _02110CA0
	arm_func_end FUN_020D8AD8

	arm_func_start FUN_020D8B6C
FUN_020D8B6C: @ 0x020D8B6C
	push {r3, r4, r5, lr}
	mov r5, r0
	bl FUN_020D8748
	ldr r1, _020D8C50 @ =0x027FFC40
	mov r4, r0
	ldrh r0, [r1]
	cmp r0, #2
	bne _020D8BFC
	ldr r1, [r5, #0x1c]
	mov r0, #0
	lsr r1, r1, #0x18
	tst r1, #2
	beq _020D8BDC
	ldr r1, _020D8C54 @ =SDK_STATIC_TEXT_END
	ldr r3, _020D8C58 @ =SDK_STATIC_TEXT_END
	ldr r2, _020D8C5C @ =0x66666667
	sub ip, r1, r3
	smull r1, lr, r2, ip
	lsr r1, ip, #0x1f
	ldr r2, [r5]
	add lr, r1, lr, asr #3
	cmp r2, lr
	bhs _020D8BDC
	mov r0, #0x14
	mla r0, r2, r0, r3
	ldr r1, [r5, #4]
	mov r2, r4
	bl FUN_020D8AD8
_020D8BDC:
	cmp r0, #0
	bne _020D8BFC
	ldr r0, [r5, #4]
	mov r2, r4
	mov r1, #0
	bl FUN_020D4994
	bl FUN_020D3F48
	pop {r3, r4, r5, pc}
_020D8BFC:
	ldr r0, [r5, #0x1c]
	lsr r0, r0, #0x18
	tst r0, #1
	beq _020D8C18
	ldr r0, [r5, #4]
	add r0, r0, r4
	bl MIi_UncompressBackward
_020D8C18:
	ldmib r5, {r0, r1}
	bl FUN_020D2894
	ldr r4, [r5, #0x10]
	ldr r5, [r5, #0x14]
	cmp r4, r5
	pophs {r3, r4, r5, pc}
_020D8C30:
	ldr r0, [r4]
	cmp r0, #0
	beq _020D8C40
	blx r0
_020D8C40:
	add r4, r4, #4
	cmp r4, r5
	blo _020D8C30
	pop {r3, r4, r5, pc}
	.align 2, 0
_020D8C50: .4byte 0x027FFC40
_020D8C54: .4byte SDK_STATIC_TEXT_END
_020D8C58: .4byte SDK_STATIC_TEXT_END
_020D8C5C: .4byte 0x66666667
	arm_func_end FUN_020D8B6C

	arm_func_start FUN_020D8C60
FUN_020D8C60: @ 0x020D8C60
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov fp, r0
_020D8C68:
	ldr r1, [fp, #8]
	ldr r0, [fp, #0xc]
	mov r4, #0
	ldr r6, [fp, #4]
	add r0, r1, r0
	mov r5, r4
	add r7, r6, r0
	bl FUN_020D3A38
	ldr r1, _020D8D4C @ =0x021E58E8
	mov ip, r4
	ldr lr, [r1]
	mov r8, lr
	cmp lr, #0
	beq _020D8D14
	mov r2, r4
_020D8CA4:
	ldr sl, [r8, #8]
	ldr sb, [r8]
	cmp sl, #0
	ldr r3, [r8, #4]
	bne _020D8CC8
	cmp r3, r6
	blo _020D8CC8
	cmp r3, r7
	blo _020D8CD8
_020D8CC8:
	cmp sl, r6
	blo _020D8D04
	cmp sl, r7
	bhs _020D8D04
_020D8CD8:
	cmp r5, #0
	strne r8, [r5]
	moveq r4, r8
	cmp lr, r8
	streq sb, [r1]
	moveq lr, sb
	str r2, [r8]
	cmp ip, #0
	mov r5, r8
	strne sb, [ip]
	b _020D8D08
_020D8D04:
	mov ip, r8
_020D8D08:
	mov r8, sb
	cmp sb, #0
	bne _020D8CA4
_020D8D14:
	bl FUN_020D3A4C
	cmp r4, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020D8D20:
	ldr r1, [r4, #4]
	ldr r5, [r4]
	cmp r1, #0
	beq _020D8D38
	ldr r0, [r4, #8]
	blx r1
_020D8D38:
	mov r4, r5
	cmp r5, #0
	bne _020D8D20
	b _020D8C68
	arm_func_end FUN_020D8C60

	arm_func_start FUN_020D8D48
FUN_020D8D48: @ 0x020D8D48
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020D8D4C: .4byte 0x021E58E8
	arm_func_end FUN_020D8D48

	arm_func_start FUN_020D8D50
FUN_020D8D50: @ 0x020D8D50
	push {r3, lr}
	bl FUN_020D8C60
	mov r0, #1
	pop {r3, pc}
	arm_func_end FUN_020D8D50

	arm_func_start FUN_020D8D60
FUN_020D8D60: @ 0x020D8D60
	stmdb sp!, {lr}
	sub sp, sp, #0x2c
	mov r3, r0
	mov r2, r1
	add r0, sp, #0
	mov r1, r3
	bl FUN_020D88C0
	cmp r0, #0
	beq _020D8D94
	add r0, sp, #0
	bl FUN_020D8A48
	cmp r0, #0
	bne _020D8DA0
_020D8D94:
	add sp, sp, #0x2c
	mov r0, #0
	ldm sp!, {pc}
_020D8DA0:
	add r0, sp, #0
	bl FUN_020D8B6C
	mov r0, #1
	add sp, sp, #0x2c
	ldm sp!, {pc}
	arm_func_end FUN_020D8D60

	arm_func_start FUN_020D8DB4
FUN_020D8DB4: @ 0x020D8DB4
	stmdb sp!, {lr}
	sub sp, sp, #0x2c
	mov r3, r0
	mov r2, r1
	add r0, sp, #0
	mov r1, r3
	bl FUN_020D88C0
	cmp r0, #0
	beq _020D8DE8
	add r0, sp, #0
	bl FUN_020D8D50
	cmp r0, #0
	bne _020D8DF4
_020D8DE8:
	add sp, sp, #0x2c
	mov r0, #0
	ldm sp!, {pc}
_020D8DF4:
	mov r0, #1
	add sp, sp, #0x2c
	ldm sp!, {pc}
	arm_func_end FUN_020D8DB4

	arm_func_start FUN_020D8E00
FUN_020D8E00: @ 0x020D8E00
	ldr r2, _020D8E30 @ =0x67452301
	ldr r1, _020D8E34 @ =0xEFCDAB89
	str r2, [r0]
	ldr r2, _020D8E38 @ =0x98BADCFE
	str r1, [r0, #4]
	ldr r1, _020D8E3C @ =0x10325476
	str r2, [r0, #8]
	str r1, [r0, #0xc]
	mov r1, #0
	str r1, [r0, #0x10]
	str r1, [r0, #0x14]
	bx lr
	.align 2, 0
_020D8E30: .4byte 0x67452301
_020D8E34: .4byte 0xEFCDAB89
_020D8E38: .4byte 0x98BADCFE
_020D8E3C: .4byte 0x10325476
	arm_func_end FUN_020D8E00

	arm_func_start FUN_020D8E40
FUN_020D8E40: @ 0x020D8E40
	push {r4, r5, r6, r7, r8, lr}
	mov r6, r0
	ldr r3, [r6, #0x10]
	mov r4, r2
	and ip, r3, #0x3f
	ldr r0, [r6, #0x14]
	adds r3, r3, r4
	str r3, [r6, #0x10]
	adc r0, r0, #0
	rsb r7, ip, #0x40
	mov r5, r1
	str r0, [r6, #0x14]
	cmp r7, r4
	bls _020D8E94
	cmp r4, #0
	popeq {r4, r5, r6, r7, r8, pc}
	add r1, r6, #0x18
	mov r0, r5
	add r1, r1, ip
	bl FUN_020D4A50
	pop {r4, r5, r6, r7, r8, pc}
_020D8E94:
	add r1, r6, #0x18
	mov r0, r5
	mov r2, r7
	add r1, r1, ip
	bl FUN_020D4A50
	mov r0, r6
	bl FUN_020D8FC0
	sub r4, r4, r7
	lsr r8, r4, #6
	cmp r8, #0
	add r7, r5, r7
	ble _020D8EF0
	mov r5, #0x40
_020D8EC8:
	mov r0, r7
	mov r2, r5
	add r1, r6, #0x18
	bl FUN_020D4A50
	mov r0, r6
	add r7, r7, #0x40
	bl FUN_020D8FC0
	sub r8, r8, #1
	cmp r8, #0
	bgt _020D8EC8
_020D8EF0:
	ands r2, r4, #0x3f
	popeq {r4, r5, r6, r7, r8, pc}
	mov r0, r7
	add r1, r6, #0x18
	bl FUN_020D4A50
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020D8E40

	arm_func_start FUN_020D8F08
FUN_020D8F08: @ 0x020D8F08
	push {r3, r4, r5, r6, r7, lr}
	mov r4, r1
	ldr r1, [r4, #0x14]
	ldr r3, [r4, #0x10]
	mov r5, r0
	lsl r6, r1, #3
	ldr r1, _020D8FBC @ =_02110CA8
	mov r0, r4
	mov r2, #1
	orr r6, r6, r3, lsr #29
	lsl r7, r3, #3
	bl FUN_020D8E40
	ldr r0, [r4, #0x10]
	mov r1, #0
	and r3, r0, #0x3f
	rsb r2, r3, #0x40
	cmp r2, #8
	bhs _020D8F6C
	add r0, r4, #0x18
	add r0, r0, r3
	bl FUN_020D4994
	mov r0, r4
	bl FUN_020D8FC0
	mov r3, #0
	mov r2, #0x40
_020D8F6C:
	cmp r2, #8
	bls _020D8F88
	add r0, r4, #0x18
	add r0, r0, r3
	sub r2, r2, #8
	mov r1, #0
	bl FUN_020D4994
_020D8F88:
	str r7, [r4, #0x50]
	mov r0, r4
	str r6, [r4, #0x54]
	bl FUN_020D8FC0
	mov r0, r4
	mov r1, r5
	mov r2, #0x10
	bl FUN_020D4A50
	mov r0, r4
	mov r1, #0
	mov r2, #0x58
	bl FUN_020D4994
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020D8FBC: .4byte _02110CA8
	arm_func_end FUN_020D8F08

	arm_func_start FUN_020D8FC0
FUN_020D8FC0: @ 0x020D8FC0
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	ldm r0, {r2, r3, ip, lr}
	add r4, r0, #0x18
	ldr r5, _020D936C @ =_02110D6C
	mov r7, r4
	mov r8, #0
_020D8FD8:
	mvn r1, r3
	and r6, r3, ip
	and r1, r1, lr
	orr r1, r6, r1
	ldr r6, [r7]
	add r1, r2, r1
	ldr r2, [r5]
	add r1, r6, r1
	add r2, r2, r1
	lsr r1, r2, #0x19
	orr r1, r1, r2, lsl #7
	add r2, r3, r1
	mvn r1, r2
	and r6, r2, r3
	and r1, r1, ip
	orr r1, r6, r1
	ldr r6, [r7, #4]
	add r1, lr, r1
	ldr sb, [r5, #4]
	add r1, r6, r1
	add r6, sb, r1
	lsr r1, r6, #0x14
	orr r1, r1, r6, lsl #12
	add lr, r2, r1
	mvn r1, lr
	and r6, lr, r2
	and r1, r1, r3
	orr r1, r6, r1
	ldr sb, [r7, #8]
	add r6, ip, r1
	ldr r1, [r7, #0xc]
	add sb, sb, r6
	ldr sl, [r5, #8]
	ldr r6, [r5, #0xc]
	add sl, sl, sb
	lsr sb, sl, #0xf
	orr sb, sb, sl, lsl #17
	add ip, lr, sb
	add r5, r5, #0x10
	add r7, r7, #0x10
	and sl, ip, lr
	mvn sb, ip
	and sb, sb, r2
	orr sb, sl, sb
	add r3, r3, sb
	add r1, r1, r3
	add r3, r6, r1
	lsr r1, r3, #0xa
	orr r1, r1, r3, lsl #22
	add r3, ip, r1
	add r8, r8, #1
	cmp r8, #4
	blt _020D8FD8
	ldr r1, _020D9370 @ =_02110CAC
	mov r6, #0
_020D90B4:
	mvn r7, lr
	ldr sb, [r1]
	and r8, r3, lr
	and r7, ip, r7
	orr r7, r8, r7
	ldr r8, [r4, sb, lsl #2]
	add r2, r2, r7
	ldr r7, [r5]
	add r2, r8, r2
	add r7, r7, r2
	lsr r2, r7, #0x1b
	orr r2, r2, r7, lsl #5
	add r2, r3, r2
	mvn r8, ip
	ldr r7, [r1, #4]
	and sb, r2, ip
	and r8, r3, r8
	orr sl, sb, r8
	mvn r8, r3
	ldr sb, [r1, #8]
	ldr fp, [r4, r7, lsl #2]
	add r7, lr, sl
	add r7, fp, r7
	ldr sl, [r5, #4]
	ldr sb, [r4, sb, lsl #2]
	add sl, sl, r7
	ldr r7, [r1, #0xc]
	and r8, r2, r8
	ldr r7, [r4, r7, lsl #2]
	lsr fp, sl, #0x17
	orr sl, fp, sl, lsl #9
	add lr, r2, sl
	ldr sl, [r5, #8]
	and fp, lr, r3
	orr r8, fp, r8
	add r8, ip, r8
	add r8, sb, r8
	add sb, sl, r8
	lsr r8, sb, #0x12
	orr r8, r8, sb, lsl #14
	add ip, lr, r8
	mvn r8, r2
	and sb, lr, r8
	ldr r8, [r5, #0xc]
	add r5, r5, #0x10
	add r1, r1, #0x10
	and sl, ip, r2
	orr sb, sl, sb
	add r3, r3, sb
	add r3, r7, r3
	add r7, r8, r3
	lsr r3, r7, #0xc
	orr r3, r3, r7, lsl #20
	add r3, ip, r3
	add r6, r6, #1
	cmp r6, #4
	blt _020D90B4
	mov r6, #0
_020D919C:
	ldr r8, [r1]
	eor r7, r3, ip
	eor r7, lr, r7
	ldr r8, [r4, r8, lsl #2]
	add r2, r2, r7
	ldr r7, [r5]
	add r2, r8, r2
	add r7, r7, r2
	lsr r2, r7, #0x1c
	orr r2, r2, r7, lsl #4
	add r2, r3, r2
	ldr r8, [r1, #4]
	eor r7, r2, r3
	eor r7, ip, r7
	ldr r8, [r4, r8, lsl #2]
	add r7, lr, r7
	ldr sb, [r1, #8]
	ldr sl, [r5, #4]
	add r7, r8, r7
	add r8, sl, r7
	lsr r7, r8, #0x15
	orr r7, r7, r8, lsl #11
	add lr, r2, r7
	eor r8, lr, r2
	ldr r7, [r1, #0xc]
	ldr sb, [r4, sb, lsl #2]
	eor r8, r3, r8
	add r8, ip, r8
	add sb, sb, r8
	ldr sl, [r5, #8]
	ldr r8, [r4, r7, lsl #2]
	add sb, sl, sb
	lsr r7, sb, #0x10
	orr r7, r7, sb, lsl #16
	add ip, lr, r7
	eor r7, ip, lr
	eor r7, r2, r7
	add r3, r3, r7
	add r3, r8, r3
	ldr r7, [r5, #0xc]
	add r5, r5, #0x10
	add r7, r7, r3
	add r1, r1, #0x10
	lsr r3, r7, #9
	orr r3, r3, r7, lsl #23
	add r3, ip, r3
	add r6, r6, #1
	cmp r6, #4
	blt _020D919C
	mov r8, #0
_020D9264:
	mvn r6, lr
	ldr r7, [r1]
	orr r6, r3, r6
	eor r6, ip, r6
	ldr r7, [r4, r7, lsl #2]
	add r2, r2, r6
	ldr r6, [r5]
	add r2, r7, r2
	add r6, r6, r2
	lsr r2, r6, #0x1a
	orr r2, r2, r6, lsl #6
	add r2, r3, r2
	mvn r6, ip
	ldr sb, [r1, #4]
	orr r6, r2, r6
	eor r7, r3, r6
	ldr r6, [r1, #8]
	ldr sb, [r4, sb, lsl #2]
	add r7, lr, r7
	ldr sl, [r5, #4]
	add r7, sb, r7
	add sb, sl, r7
	lsr r7, sb, #0x16
	orr sb, r7, sb, lsl #10
	ldr r7, [r1, #0xc]
	add lr, r2, sb
	mvn sb, r3
	ldr r6, [r4, r6, lsl #2]
	orr sb, lr, sb
	eor sb, r2, sb
	add sb, ip, sb
	add sb, r6, sb
	ldr sl, [r5, #8]
	ldr r6, [r4, r7, lsl #2]
	add sb, sl, sb
	lsr r7, sb, #0x11
	orr sb, r7, sb, lsl #15
	ldr r7, [r5, #0xc]
	add ip, lr, sb
	add r5, r5, #0x10
	add r1, r1, #0x10
	mvn sb, r2
	orr sb, ip, sb
	eor sb, lr, sb
	add r3, r3, sb
	add r3, r6, r3
	add r6, r7, r3
	lsr r3, r6, #0xb
	orr r3, r3, r6, lsl #21
	add r3, ip, r3
	add r8, r8, #1
	cmp r8, #4
	blt _020D9264
	ldr r1, [r0]
	add r1, r1, r2
	str r1, [r0]
	ldr r1, [r0, #4]
	add r1, r1, r3
	str r1, [r0, #4]
	ldr r1, [r0, #8]
	add r1, r1, ip
	str r1, [r0, #8]
	ldr r1, [r0, #0xc]
	add r1, r1, lr
	str r1, [r0, #0xc]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020D936C: .4byte _02110D6C
_020D9370: .4byte _02110CAC
	arm_func_end FUN_020D8FC0

	arm_func_start FUN_020D9374
FUN_020D9374: @ 0x020D9374
	ldr r1, _020D93B0 @ =0x67452301
	ldr r2, _020D93B4 @ =0xEFCDAB89
	str r1, [r0]
	ldr r1, _020D93B8 @ =0x98BADCFE
	str r2, [r0, #4]
	ldr r2, _020D93BC @ =0x10325476
	str r1, [r0, #8]
	ldr r1, _020D93C0 @ =0xC3D2E1F0
	str r2, [r0, #0xc]
	str r1, [r0, #0x10]
	mov r1, #0
	str r1, [r0, #0x14]
	str r1, [r0, #0x18]
	str r1, [r0, #0x1c]
	bx lr
	.align 2, 0
_020D93B0: .4byte 0x67452301
_020D93B4: .4byte 0xEFCDAB89
_020D93B8: .4byte 0x98BADCFE
_020D93BC: .4byte 0x10325476
_020D93C0: .4byte 0xC3D2E1F0
	arm_func_end FUN_020D9374

	arm_func_start FUN_020D93C4
FUN_020D93C4: @ 0x020D93C4
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sl, r0
	movs r8, r2
	mov sb, r1
	add r6, sl, #0x20
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, [sl, #0x14]
	add r1, r0, r8, lsl #3
	cmp r1, r0
	ldrlo r0, [sl, #0x18]
	addlo r0, r0, #1
	strlo r0, [sl, #0x18]
	ldr r0, [sl, #0x18]
	add r0, r0, r8, lsr #29
	str r0, [sl, #0x18]
	str r1, [sl, #0x14]
	ldr r1, [sl, #0x1c]
	cmp r1, #0
	beq _020D947C
	add r0, r1, r8
	cmp r0, #0x40
	blo _020D945C
	rsb r4, r1, #0x40
	mov r0, sb
	mov r2, r4
	add r1, r6, r1
	bl FUN_020D4A50
	ldr r1, _020D9514 @ =_02110E70
	mov r0, sl
	ldr r3, [r1]
	mov r1, r6
	mov r2, #0x40
	sub r8, r8, r4
	add sb, sb, r4
	blx r3
	mov r0, #0
	str r0, [sl, #0x1c]
	b _020D947C
_020D945C:
	mov r0, sb
	mov r2, r8
	add r1, r6, r1
	bl FUN_020D4A50
	ldr r0, [sl, #0x1c]
	add r0, r0, r8
	str r0, [sl, #0x1c]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020D947C:
	cmp r8, #0x40
	blo _020D94F4
	bic r7, r8, #0x3f
	tst sb, #3
	sub r8, r8, r7
	bne _020D94B4
	ldr r1, _020D9514 @ =_02110E70
	mov r0, sl
	ldr r3, [r1]
	mov r1, sb
	mov r2, r7
	blx r3
	add sb, sb, r7
	b _020D94F4
_020D94B4:
	mov r5, #0x40
	ldr r4, _020D9514 @ =_02110E70
	mov fp, r5
_020D94C0:
	mov r0, sb
	mov r1, r6
	mov r2, r5
	bl FUN_020D4A50
	ldr r3, [r4]
	mov r0, sl
	mov r1, r6
	add sb, sb, #0x40
	mov r2, fp
	blx r3
	sub r7, r7, #0x40
	cmp r7, #0
	bgt _020D94C0
_020D94F4:
	str r8, [sl, #0x1c]
	cmp r8, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r0, sb
	mov r1, r6
	mov r2, r8
	bl FUN_020D4A50
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020D9514: .4byte _02110E70
	arm_func_end FUN_020D93C4

	arm_func_start FUN_020D9518
FUN_020D9518: @ 0x020D9518
	push {r0, r1, r2, r3}
	push {r4, r5, r6, lr}
	ldr r0, [sp, #0x10]
	mov r6, r1
	ldr r3, [r0, #0x1c]
	add r4, r0, #0x20
	tst r3, #3
	asr r2, r3, #2
	moveq r0, #0
	streq r0, [r4, r2, lsl #2]
	ldr r1, [sp, #0x10]
	mov r0, #0x80
	add r5, r1, #0x20
	strb r0, [r5, r3]
	add r3, r3, #1
	tst r3, #3
	beq _020D9570
	mov r0, #0
_020D9560:
	strb r0, [r5, r3]
	add r3, r3, #1
	tst r3, #3
	bne _020D9560
_020D9570:
	ldr r0, [sp, #0x10]
	add r2, r2, #1
	ldr r0, [r0, #0x1c]
	cmp r0, #0x38
	blt _020D95BC
	cmp r2, #0x10
	bge _020D95A0
	mov r0, #0
_020D9590:
	str r0, [r4, r2, lsl #2]
	add r2, r2, #1
	cmp r2, #0x10
	blt _020D9590
_020D95A0:
	ldr r1, _020D9710 @ =_02110E70
	ldr r0, [sp, #0x10]
	ldr r3, [r1]
	mov r1, r4
	mov r2, #0x40
	blx r3
	mov r2, #0
_020D95BC:
	cmp r2, #0xe
	bge _020D95D8
	mov r0, #0
_020D95C8:
	str r0, [r4, r2, lsl #2]
	add r2, r2, #1
	cmp r2, #0xe
	blt _020D95C8
_020D95D8:
	ldr r0, [sp, #0x10]
	ldr r3, _020D9710 @ =_02110E70
	ldr r2, [r0, #0x14]
	mov r1, r4
	strb r2, [r5, #0x3f]
	lsr r0, r2, #8
	strb r0, [r5, #0x3e]
	lsr r0, r2, #0x10
	strb r0, [r5, #0x3d]
	lsr r0, r2, #0x18
	strb r0, [r5, #0x3c]
	ldr r0, [sp, #0x10]
	mov r2, #0x40
	ldr r4, [r0, #0x18]
	strb r4, [r5, #0x3b]
	lsr r0, r4, #8
	strb r0, [r5, #0x3a]
	lsr r0, r4, #0x10
	strb r0, [r5, #0x39]
	lsr r0, r4, #0x18
	strb r0, [r5, #0x38]
	ldr r0, [sp, #0x10]
	ldr r3, [r3]
	blx r3
	ldr r0, [sp, #0x10]
	ldr r1, [r0]
	lsr r0, r1, #0x18
	strb r0, [r6]
	lsr r0, r1, #0x10
	strb r0, [r6, #1]
	lsr r0, r1, #8
	strb r0, [r6, #2]
	strb r1, [r6, #3]
	ldr r0, [sp, #0x10]
	ldr r1, [r0, #4]
	lsr r0, r1, #0x18
	strb r0, [r6, #4]
	lsr r0, r1, #0x10
	strb r0, [r6, #5]
	lsr r0, r1, #8
	strb r0, [r6, #6]
	strb r1, [r6, #7]
	ldr r0, [sp, #0x10]
	ldr r1, [r0, #8]
	lsr r0, r1, #0x18
	strb r0, [r6, #8]
	lsr r0, r1, #0x10
	strb r0, [r6, #9]
	lsr r0, r1, #8
	strb r0, [r6, #0xa]
	strb r1, [r6, #0xb]
	ldr r0, [sp, #0x10]
	ldr r1, [r0, #0xc]
	lsr r0, r1, #0x18
	strb r0, [r6, #0xc]
	lsr r0, r1, #0x10
	strb r0, [r6, #0xd]
	lsr r0, r1, #8
	strb r0, [r6, #0xe]
	strb r1, [r6, #0xf]
	ldr r0, [sp, #0x10]
	ldr r1, [r0, #0x10]
	lsr r0, r1, #0x18
	strb r0, [r6, #0x10]
	lsr r0, r1, #0x10
	strb r0, [r6, #0x11]
	lsr r0, r1, #8
	strb r0, [r6, #0x12]
	strb r1, [r6, #0x13]
	ldr r3, [sp, #0x10]
	mov r0, #0
	add r1, sp, #0x10
	mov r2, #4
	str r0, [r3, #0x1c]
	bl FUN_020D47EC
	pop {r4, r5, r6, lr}
	add sp, sp, #0x10
	bx lr
	.align 2, 0
_020D9710: .4byte _02110E70
	arm_func_end FUN_020D9518

	arm_func_start FUN_020D9714
FUN_020D9714: @ 0x020D9714
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0xa0
	ldr lr, _020D9798 @ =0x0210E188
	add ip, sp, #8
	mov r8, r0
	mov r7, r1
	mov r6, r2
	mov r5, r3
	mov r4, ip
	ldm lr!, {r0, r1, r2, r3}
	stm ip!, {r0, r1, r2, r3}
	ldm lr, {r0, r1, r2}
	stm ip, {r0, r1, r2}
	add lr, sp, #0x38
	add ip, sp, #0x24
	str lr, [sp, #0x10]
	ldr lr, _020D979C @ =FUN_020D9374
	str ip, [sp, #0x14]
	ldr ip, _020D97A0 @ =FUN_020D93C4
	str lr, [sp, #0x18]
	ldr lr, _020D97A4 @ =FUN_020D9518
	str ip, [sp, #0x1c]
	ldr ip, [sp, #0xb8]
	str lr, [sp, #0x20]
	str ip, [sp]
	mov r3, r5
	mov r0, r8
	mov r1, r7
	mov r2, r6
	str r4, [sp, #4]
	bl FUN_020D97A8
	add sp, sp, #0xa0
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0
_020D9798: .4byte 0x0210E188
_020D979C: .4byte FUN_020D9374
_020D97A0: .4byte FUN_020D93C4
_020D97A4: .4byte FUN_020D9518
	arm_func_end FUN_020D9714

	arm_func_start FUN_020D97A8
FUN_020D97A8: @ 0x020D97A8
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #0xc0
	ldr r5, [sp, #0xe0]
	ldr r4, [sp, #0xe4]
	mov r8, r1
	movs sb, r0
	mov r7, r2
	cmpne r8, #0
	mov r6, r3
	cmpne r7, #0
	cmpne r6, #0
	cmpne r5, #0
	cmpne r4, #0
	addeq sp, sp, #0xc0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	ldr r0, [r4, #4]
	cmp r5, r0
	ble _020D9828
	ldr r0, [r4, #8]
	ldr r1, [r4, #0x10]
	blx r1
	ldr r0, [r4, #8]
	ldr r3, [r4, #0x14]
	mov r1, r6
	mov r2, r5
	blx r3
	ldr r0, [r4, #8]
	ldr r2, [r4, #0x18]
	add r1, sp, #0x80
	blx r2
	ldr r5, [r4]
	add r6, sp, #0x80
_020D9828:
	cmp r5, #0
	mov r2, #0
	ble _020D9850
	add r1, sp, #0x40
_020D9838:
	ldrb r0, [r6, r2]
	add r2, r2, #1
	cmp r2, r5
	eor r0, r0, #0x36
	strb r0, [r1], #1
	blt _020D9838
_020D9850:
	ldr r0, [r4, #4]
	cmp r2, r0
	bge _020D987C
	add r0, sp, #0x40
	add r3, r0, r2
	mov r1, #0x36
_020D9868:
	strb r1, [r3], #1
	ldr r0, [r4, #4]
	add r2, r2, #1
	cmp r2, r0
	blt _020D9868
_020D987C:
	ldr r0, [r4, #8]
	ldr r1, [r4, #0x10]
	blx r1
	ldr r0, [r4, #8]
	ldr r2, [r4, #4]
	ldr r3, [r4, #0x14]
	add r1, sp, #0x40
	blx r3
	ldr r0, [r4, #8]
	ldr r3, [r4, #0x14]
	mov r1, r8
	mov r2, r7
	blx r3
	ldr r0, [r4, #8]
	ldr r1, [r4, #0xc]
	ldr r2, [r4, #0x18]
	blx r2
	cmp r5, #0
	mov r3, #0
	ble _020D98E8
	add r1, sp, #0
_020D98D0:
	ldrb r0, [r6, r3]
	add r3, r3, #1
	cmp r3, r5
	eor r0, r0, #0x5c
	strb r0, [r1], #1
	blt _020D98D0
_020D98E8:
	ldr r0, [r4, #4]
	cmp r3, r0
	bge _020D9914
	add r0, sp, #0
	add r2, r0, r3
	mov r1, #0x5c
_020D9900:
	strb r1, [r2], #1
	ldr r0, [r4, #4]
	add r3, r3, #1
	cmp r3, r0
	blt _020D9900
_020D9914:
	ldr r0, [r4, #8]
	ldr r1, [r4, #0x10]
	blx r1
	ldr r0, [r4, #8]
	ldr r2, [r4, #4]
	ldr r3, [r4, #0x14]
	add r1, sp, #0
	blx r3
	ldr r0, [r4, #8]
	ldr r1, [r4, #0xc]
	ldr r2, [r4]
	ldr r3, [r4, #0x14]
	blx r3
	ldr r0, [r4, #8]
	ldr r2, [r4, #0x18]
	mov r1, sb
	blx r2
	add sp, sp, #0xc0
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0
	arm_func_end FUN_020D97A8
_020D9960: .4byte 0x00FF00FF
_020D9964: .4byte 0x5A827999
_020D9968: .4byte 0x6ED9EBA1
_020D996C: .4byte 0x8F1BBCDC
_020D9970: .4byte 0xCA62C1D6
	arm_func_end FUN_020D97A8

	arm_func_start FUN_020D9974
FUN_020D9974: @ 0x020D9974
	push {r4, r5, r6, r7, r8, sb, sl, fp, ip, lr}
	ldm r0, {r3, sb, sl, fp, ip}
	sub sp, sp, #0x84
	str r2, [sp, #0x80]
_020D9984:
	ldr r8, _020D9964 @ =0x5A827999
	ldr r7, _020D9960 @ =0x00FF00FF
	mov r6, sp
	mov r5, #0
_020D9994:
	ldr r4, [r1], #4
	add r2, r8, ip
	add r2, r2, r3, ror #27
	and lr, r4, r7
	and r4, r7, r4, ror #24
	orr r4, r4, lr, ror #8
	str r4, [r6, #0x40]
	str r4, [r6], #4
	add r2, r2, r4
	eor r4, sl, fp
	and r4, r4, sb
	eor r4, r4, fp
	add r2, r2, r4
	ror sb, sb, #2
	mov ip, fp
	mov fp, sl
	mov sl, sb
	mov sb, r3
	mov r3, r2
	add r5, r5, #4
	cmp r5, #0x40
	blt _020D9994
	mov r7, #0
	mov r6, sp
_020D99F4:
	ldr r2, [r6]
	ldr r5, [r6, #8]
	ldr r4, [r6, #0x20]
	ldr lr, [r6, #0x34]
	eor r2, r2, r5
	eor r4, r4, lr
	eor r2, r2, r4
	ror r2, r2, #0x1f
	str r2, [r6, #0x40]
	str r2, [r6], #4
	add r2, r2, ip
	add r2, r2, r8
	add r2, r2, r3, ror #27
	eor r4, sl, fp
	and r4, r4, sb
	eor r4, r4, fp
	add r2, r2, r4
	ror sb, sb, #2
	mov ip, fp
	mov fp, sl
	mov sl, sb
	mov sb, r3
	mov r3, r2
	add r7, r7, #4
	cmp r7, #0x10
	blt _020D99F4
	ldr r8, _020D9968 @ =0x6ED9EBA1
	mov r7, #0
_020D9A64:
	ldr r2, [r6]
	ldr r4, [r6, #8]
	ldr lr, [r6, #0x20]
	ldr r5, [r6, #0x34]
	eor r2, r2, r4
	eor lr, lr, r5
	eor r2, r2, lr
	ror r2, r2, #0x1f
	str r2, [r6, #0x40]
	str r2, [r6], #4
	add r2, r2, ip
	add r2, r2, r8
	add r2, r2, r3, ror #27
	eor lr, sb, sl
	eor lr, lr, fp
	add r2, r2, lr
	ror sb, sb, #2
	mov ip, fp
	mov fp, sl
	mov sl, sb
	mov sb, r3
	mov r3, r2
	add r7, r7, #1
	cmp r7, #0xc
	moveq r6, sp
	cmp r7, #0x14
	blt _020D9A64
	ldr r8, _020D996C @ =0x8F1BBCDC
	mov r7, #0
_020D9AD8:
	ldr r2, [r6]
	ldr lr, [r6, #8]
	ldr r5, [r6, #0x20]
	ldr r4, [r6, #0x34]
	eor r2, r2, lr
	eor r5, r5, r4
	eor r2, r2, r5
	ror r2, r2, #0x1f
	str r2, [r6, #0x40]
	str r2, [r6], #4
	add r2, r2, ip
	add r2, r2, r8
	add r2, r2, r3, ror #27
	orr r5, sb, sl
	and r5, r5, fp
	and r4, sb, sl
	orr r5, r5, r4
	add r2, r2, r5
	ror sb, sb, #2
	mov ip, fp
	mov fp, sl
	mov sl, sb
	mov sb, r3
	mov r3, r2
	add r7, r7, #1
	cmp r7, #8
	moveq r6, sp
	cmp r7, #0x14
	blt _020D9AD8
	ldr r8, _020D9970 @ =0xCA62C1D6
	mov r7, #0
_020D9B54:
	ldr r2, [r6]
	ldr r5, [r6, #8]
	ldr r4, [r6, #0x20]
	ldr lr, [r6, #0x34]
	eor r2, r2, r5
	eor r4, r4, lr
	eor r2, r2, r4
	ror r2, r2, #0x1f
	str r2, [r6, #0x40]
	str r2, [r6], #4
	add r2, r2, ip
	add r2, r2, r8
	add r2, r2, r3, ror #27
	eor r4, sb, sl
	eor r4, r4, fp
	add r2, r2, r4
	ror sb, sb, #2
	mov ip, fp
	mov fp, sl
	mov sl, sb
	mov sb, r3
	mov r3, r2
	add r7, r7, #1
	cmp r7, #4
	moveq r6, sp
	cmp r7, #0x14
	blt _020D9B54
	ldm r0, {r2, r4, r6, r7, lr}
	add r3, r3, r2
	add sb, sb, r4
	add sl, sl, r6
	add fp, fp, r7
	add ip, ip, lr
	stm r0, {r3, sb, sl, fp, ip}
	ldr lr, [sp, #0x80]
	subs lr, lr, #0x40
	str lr, [sp, #0x80]
	bgt _020D9984
	add sp, sp, #0x84
	pop {r4, r5, r6, r7, r8, sb, sl, fp, ip, pc}
	arm_func_end FUN_020D9974

	arm_func_start FUN_020D9BF4
FUN_020D9BF4: @ 0x020D9BF4
	ldr r1, _020D9C30 @ =0x04000290
	stmdb sp!, {r4}
	ldm r1, {r2, r3, r4, ip}
	stm r0!, {r2, r3, r4, ip}
	ldrh ip, [r1, #-0x10]
	add r1, r1, #0x28
	ldm r1, {r2, r3}
	stm r0!, {r2, r3}
	and ip, ip, #3
	ldrh r2, [r1, #-8]
	strh ip, [r0]
	and r2, r2, #1
	strh r2, [r0, #2]
	ldm sp!, {r4}
	bx lr
	.align 2, 0
_020D9C30: .4byte 0x04000290
	arm_func_end FUN_020D9BF4

	arm_func_start FUN_020D9C34
FUN_020D9C34: @ 0x020D9C34
	stmdb sp!, {r4}
	ldr r1, _020D9C6C @ =0x04000290
	ldm r0, {r2, r3, r4, ip}
	stm r1, {r2, r3, r4, ip}
	ldrh r2, [r0, #0x18]
	ldrh r3, [r0, #0x1a]
	strh r2, [r1, #-0x10]
	strh r3, [r1, #0x20]
	add r0, r0, #0x10
	add r1, r1, #0x28
	ldm r0, {r2, r3}
	stm r1, {r2, r3}
	ldm sp!, {r4}
	bx lr
	.align 2, 0
_020D9C6C: .4byte 0x04000290
	arm_func_end FUN_020D9C34

	arm_func_start FUN_020D9C70
FUN_020D9C70: @ 0x020D9C70
	push {r3, r4, r5, r6, r7, lr}
	sub sp, sp, #8
	lsl r0, r1, #0x10
	lsr r3, r0, #0x10
	and r0, r3, #0x7f00
	lsl r0, r0, #8
	cmp r2, #0
	lsr r0, r0, #0x10
	beq _020D9CCC
	ldr r1, _020D9EE8 @ =0x021E36B0
	mov r2, #1
	ldrh r3, [r1, #0x38]
	orr r2, r3, r2, lsl r0
	strh r2, [r1, #0x38]
	ldr r3, [r1, #4]
	cmp r3, #0
	addeq sp, sp, #8
	popeq {r3, r4, r5, r6, r7, pc}
	mov r1, #4
	mov r2, #0
	blx r3
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, pc}
_020D9CCC:
	cmp r0, #0x10
	bne _020D9D84
	ldr r1, _020D9EE8 @ =0x021E36B0
	ldrh r2, [r1, #0x10]
	add r2, r2, #1
	strh r2, [r1, #0x10]
	ldrh r3, [r1, #0x10]
	ldrh r2, [r1, #0x18]
	cmp r3, r2
	movhs r2, #0
	strhhs r2, [r1, #0x10]
	ldr r2, _020D9EEC @ =0x027FFFAA
	ldr r1, _020D9EE8 @ =0x021E36B0
	ldrh r3, [r2]
	ldrh r2, [r2, #2]
	ldrh lr, [r1, #0x10]
	strh r3, [sp, #4]
	strh r2, [sp, #6]
	ldr r5, [sp, #4]
	ldr r7, [r1, #0x14]
	lsl r2, r5, #7
	lsr r3, r2, #0x1f
	lsl r4, r5, #8
	lsl r2, r5, #5
	lsl ip, r5, #0x14
	lsr r2, r2, #0x1e
	lsl r6, lr, #3
	lsr r5, ip, #0x14
	strh r5, [r7, r6]
	add r5, r7, lr, lsl #3
	lsr r4, r4, #0x14
	strh r4, [r5, #2]
	and r3, r3, #0xff
	strh r3, [r5, #4]
	and r2, r2, #0xff
	strh r2, [r5, #6]
	ldr r3, [r1, #4]
	cmp r3, #0
	addeq sp, sp, #8
	popeq {r3, r4, r5, r6, r7, pc}
	ldrh r2, [r1, #0x10]
	mov r1, #0
	and r2, r2, #0xff
	blx r3
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, pc}
_020D9D84:
	tst r1, #0x1000000
	addeq sp, sp, #8
	popeq {r3, r4, r5, r6, r7, pc}
	and r1, r3, #0xff
	cmp r1, #4
	addls pc, pc, r1, lsl #2
	b _020D9EDC
_020D9DA0: @ jump table
	b _020D9DB4 @ case 0
	b _020D9EDC @ case 1
	b _020D9E88 @ case 2
	b _020D9E90 @ case 3
	b _020D9E80 @ case 4
_020D9DB4:
	cmp r0, #0
	beq _020D9DD8
	cmp r0, #1
	beq _020D9E38
	cmp r0, #2
	ldreq r1, _020D9EE8 @ =0x021E36B0
	moveq r2, #0
	strheq r2, [r1, #0x36]
	b _020D9E44
_020D9DD8:
	ldr r2, _020D9EEC @ =0x027FFFAA
	ldr r1, _020D9EE8 @ =0x021E36B0
	ldrh r4, [r2]
	ldrh r3, [r2, #2]
	mov r2, #0
	strh r4, [sp]
	strh r3, [sp, #2]
	ldr r4, [sp]
	lsl r3, r4, #0x14
	lsr r5, r3, #0x14
	lsl lr, r4, #8
	lsl r3, r4, #7
	lsr ip, r3, #0x1f
	lsl r3, r4, #5
	lsr r3, r3, #0x1e
	strh r5, [r1, #8]
	lsr lr, lr, #0x14
	strh lr, [r1, #0xa]
	and ip, ip, #0xff
	strh ip, [r1, #0xc]
	and r3, r3, #0xff
	strh r3, [r1, #0xe]
	strh r2, [r1, #0x36]
	b _020D9E44
_020D9E38:
	ldr r1, _020D9EE8 @ =0x021E36B0
	mov r2, #2
	strh r2, [r1, #0x36]
_020D9E44:
	ldr r1, _020D9EE8 @ =0x021E36B0
	mov r2, #1
	ldrh r3, [r1, #0x3a]
	mvn r2, r2, lsl r0
	and r2, r3, r2
	strh r2, [r1, #0x3a]
	ldr r3, [r1, #4]
	cmp r3, #0
	addeq sp, sp, #8
	popeq {r3, r4, r5, r6, r7, pc}
	mov r1, #0
	mov r2, r1
	blx r3
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, pc}
_020D9E80:
	mov r4, #3
	b _020D9E94
_020D9E88:
	mov r4, #1
	b _020D9E94
_020D9E90:
	mov r4, #2
_020D9E94:
	ldr r1, _020D9EE8 @ =0x021E36B0
	mov ip, #1
	ldrh r3, [r1, #0x38]
	mvn r2, ip, lsl r0
	orr r3, r3, ip, lsl r0
	strh r3, [r1, #0x38]
	ldrh r3, [r1, #0x3a]
	and r2, r3, r2
	strh r2, [r1, #0x3a]
	ldr r3, [r1, #4]
	cmp r3, #0
	addeq sp, sp, #8
	popeq {r3, r4, r5, r6, r7, pc}
	and r1, r4, #0xff
	mov r2, #0
	blx r3
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, pc}
_020D9EDC:
	bl FUN_020D3F48
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020D9EE8: .4byte 0x021E36B0
_020D9EEC: .4byte 0x027FFFAA
	arm_func_end FUN_020D9C70

	arm_func_start FUN_020D9EF0
FUN_020D9EF0: @ 0x020D9EF0
	push {r3, r4, r5, lr}
	ldr r0, _020D9F60 @ =0x021E36B0
	ldrh r1, [r0]
	cmp r1, #0
	popne {r3, r4, r5, pc}
	mov r1, #1
	strh r1, [r0]
	bl FUN_020D6548
	ldr r0, _020D9F60 @ =0x021E36B0
	mov r1, #0
	strh r1, [r0, #0x10]
	str r1, [r0, #4]
	str r1, [r0, #0x14]
	strh r1, [r0, #0x36]
	strh r1, [r0, #0x34]
	strh r1, [r0, #0x3a]
	strh r1, [r0, #0x38]
	mov r5, #6
	mov r4, #1
_020D9F3C:
	mov r0, r5
	mov r1, r4
	bl FUN_020D66A0
	cmp r0, #0
	beq _020D9F3C
	ldr r1, _020D9F64 @ =FUN_020D9C70
	mov r0, #6
	bl FUN_020D6654
	pop {r3, r4, r5, pc}
	.align 2, 0
_020D9F60: .4byte 0x021E36B0
_020D9F64: .4byte FUN_020D9C70
	arm_func_end FUN_020D9EF0

	arm_func_start FUN_020D9F68
FUN_020D9F68: @ 0x020D9F68
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #0x14
	ldr ip, _020D9FF8 @ =0x027FFC80
	mov r4, r0
	ldrh r1, [ip, #0x58]
	ldrh r2, [ip, #0x5a]
	ldrh r0, [ip, #0x5e]
	cmp r1, #0
	ldrh lr, [ip, #0x60]
	cmpeq r0, #0
	cmpeq r2, #0
	ldrb r3, [ip, #0x5c]
	ldrb r5, [ip, #0x5d]
	ldrb r6, [ip, #0x62]
	ldrb ip, [ip, #0x63]
	cmpeq lr, #0
	beq _020D9FCC
	str r5, [sp]
	stmib sp, {r0, lr}
	str r6, [sp, #0xc]
	mov r0, r4
	str ip, [sp, #0x10]
	bl FUN_020DA4F4
	cmp r0, #0
	beq _020D9FEC
_020D9FCC:
	mov r0, #0
	strh r0, [r4]
	strh r0, [r4, #2]
	strh r0, [r4, #4]
	strh r0, [r4, #6]
	add sp, sp, #0x14
	mov r0, #1
	pop {r3, r4, r5, r6, pc}
_020D9FEC:
	mov r0, #1
	add sp, sp, #0x14
	pop {r3, r4, r5, r6, pc}
	.align 2, 0
_020D9FF8: .4byte 0x027FFC80
	arm_func_end FUN_020D9F68

	arm_func_start FUN_020D9FFC
FUN_020D9FFC: @ 0x020D9FFC
	push {r4, lr}
	movs r4, r0
	bne _020DA018
	ldr r0, _020DA118 @ =0x021E36B0
	mov r1, #0
	strh r1, [r0, #0x34]
	pop {r4, pc}
_020DA018:
	bl FUN_020D3A38
	ldrsh r2, [r4, #4]
	cmp r2, #0
	beq _020DA07C
	ldr r3, _020DA11C @ =0x04000280
	mov r1, #0
	strh r1, [r3]
	mov r1, #0x10000000
	str r1, [r3, #0x10]
	str r2, [r3, #0x18]
	mov r1, #0
	str r1, [r3, #0x1c]
	ldrsh r2, [r4]
	ldr r1, _020DA118 @ =0x021E36B0
	str r2, [r1, #0x1c]
	ldrsh r2, [r4, #4]
	str r2, [r1, #0x20]
_020DA05C:
	ldrh r1, [r3]
	tst r1, #0x8000
	bne _020DA05C
	ldr r2, _020DA120 @ =0x040002A0
	ldr r1, _020DA118 @ =0x021E36B0
	ldr r2, [r2]
	str r2, [r1, #0x24]
	b _020DA090
_020DA07C:
	ldr r1, _020DA118 @ =0x021E36B0
	mov r2, #0
	str r2, [r1, #0x1c]
	str r2, [r1, #0x20]
	str r2, [r1, #0x24]
_020DA090:
	ldrsh r2, [r4, #6]
	cmp r2, #0
	beq _020DA0F0
	ldr r3, _020DA11C @ =0x04000280
	mov r1, #0
	strh r1, [r3]
	mov r1, #0x10000000
	str r1, [r3, #0x10]
	str r2, [r3, #0x18]
	mov r1, #0
	str r1, [r3, #0x1c]
	ldrsh r2, [r4, #2]
	ldr r1, _020DA118 @ =0x021E36B0
	str r2, [r1, #0x28]
	ldrsh r2, [r4, #6]
	str r2, [r1, #0x2c]
_020DA0D0:
	ldrh r1, [r3]
	tst r1, #0x8000
	bne _020DA0D0
	ldr r2, _020DA120 @ =0x040002A0
	ldr r1, _020DA118 @ =0x021E36B0
	ldr r2, [r2]
	str r2, [r1, #0x30]
	b _020DA104
_020DA0F0:
	ldr r1, _020DA118 @ =0x021E36B0
	mov r2, #0
	str r2, [r1, #0x28]
	str r2, [r1, #0x2c]
	str r2, [r1, #0x30]
_020DA104:
	bl FUN_020D3A4C
	ldr r0, _020DA118 @ =0x021E36B0
	mov r1, #1
	strh r1, [r0, #0x34]
	pop {r4, pc}
	.align 2, 0
_020DA118: .4byte 0x021E36B0
_020DA11C: .4byte 0x04000280
_020DA120: .4byte 0x040002A0
	arm_func_end FUN_020D9FFC

	arm_func_start FUN_020DA124
FUN_020DA124: @ 0x020DA124
	push {r4, lr}
	bl FUN_020D3A38
	mov r4, r0
	mov r0, #6
	mov r1, #0x3000000
	mov r2, #0
	bl FUN_020D66C4
	cmp r0, #0
	movge r0, #1
	movlt r0, #0
	cmp r0, #0
	bne _020DA18C
	mov r0, r4
	bl FUN_020D3A4C
	ldr r0, _020DA1B4 @ =0x021E36B0
	ldrh r1, [r0, #0x38]
	orr r1, r1, #1
	strh r1, [r0, #0x38]
	ldr r3, [r0, #4]
	cmp r3, #0
	popeq {r4, pc}
	mov r0, #0
	mov r2, r0
	mov r1, #4
	blx r3
	pop {r4, pc}
_020DA18C:
	ldr r1, _020DA1B4 @ =0x021E36B0
	mov r0, r4
	ldrh r2, [r1, #0x3a]
	orr r2, r2, #1
	strh r2, [r1, #0x3a]
	ldrh r2, [r1, #0x38]
	bic r2, r2, #1
	strh r2, [r1, #0x38]
	bl FUN_020D3A4C
	pop {r4, pc}
	.align 2, 0
_020DA1B4: .4byte 0x021E36B0
	arm_func_end FUN_020DA124

	arm_func_start FUN_020DA1B8
FUN_020DA1B8: @ 0x020DA1B8
	push {r4, lr}
	mov r4, r0
	mov r0, #1
	bl FUN_020DA804
	ldr r1, _020DA204 @ =0x021E36B0
	ldrh r0, [r1, #0x38]
	tst r0, #1
	movne r0, #1
	popne {r4, pc}
	ldrh r3, [r1, #8]
	ldrh r2, [r1, #0xa]
	mov r0, #0
	strh r3, [r4]
	strh r2, [r4, #2]
	ldrh r2, [r1, #0xc]
	ldrh r1, [r1, #0xe]
	strh r2, [r4, #4]
	strh r1, [r4, #6]
	pop {r4, pc}
	.align 2, 0
_020DA204: .4byte 0x021E36B0
	arm_func_end FUN_020DA1B8

	arm_func_start FUN_020DA208
FUN_020DA208: @ 0x020DA208
	push {r3, r4, r5, lr}
	ldr ip, _020DA304 @ =0x021E36B0
	mov lr, #0
	str r2, [ip, #0x14]
	mov r5, r1
	strh lr, [ip, #0x10]
	strh r5, [ip, #0x12]
	mov r4, r0
	strh r3, [ip, #0x18]
	cmp r3, #0
	bls _020DA250
	mov r1, lr
_020DA238:
	ldr r0, [ip, #0x14]
	add r0, r0, lr, lsl #3
	add lr, lr, #1
	strh r1, [r0, #4]
	cmp lr, r3
	blo _020DA238
_020DA250:
	bl FUN_020D3A38
	and r1, r5, #0xff
	orr r1, r1, #0x100
	mov r5, r0
	orr r1, r1, #0x2000000
	mov r0, #6
	mov r2, #0
	bl FUN_020D66C4
	cmp r0, #0
	movlt r0, #0
	blt _020DA29C
	orr r1, r4, #0x10000
	orr r1, r1, #0x1000000
	mov r0, #6
	mov r2, #0
	bl FUN_020D66C4
	cmp r0, #0
	movlt r0, #0
	movge r0, #1
_020DA29C:
	tst r0, #0xff
	bne _020DA2DC
	mov r0, r5
	bl FUN_020D3A4C
	ldr r0, _020DA304 @ =0x021E36B0
	ldrh r1, [r0, #0x38]
	orr r1, r1, #2
	strh r1, [r0, #0x38]
	ldr r3, [r0, #4]
	cmp r3, #0
	popeq {r3, r4, r5, pc}
	mov r0, #1
	mov r1, #4
	mov r2, #0
	blx r3
	pop {r3, r4, r5, pc}
_020DA2DC:
	ldr r1, _020DA304 @ =0x021E36B0
	mov r0, r5
	ldrh r2, [r1, #0x3a]
	orr r2, r2, #2
	strh r2, [r1, #0x3a]
	ldrh r2, [r1, #0x38]
	bic r2, r2, #2
	strh r2, [r1, #0x38]
	bl FUN_020D3A4C
	pop {r3, r4, r5, pc}
	.align 2, 0
_020DA304: .4byte 0x021E36B0
	arm_func_end FUN_020DA208

	arm_func_start FUN_020DA308
FUN_020DA308: @ 0x020DA308
	push {r4, lr}
	bl FUN_020D3A38
	mov r4, r0
	ldr r1, _020DA398 @ =0x03000200
	mov r0, #6
	mov r2, #0
	bl FUN_020D66C4
	cmp r0, #0
	movge r0, #1
	movlt r0, #0
	cmp r0, #0
	bne _020DA370
	mov r0, r4
	bl FUN_020D3A4C
	ldr r0, _020DA39C @ =0x021E36B0
	ldrh r1, [r0, #0x38]
	orr r1, r1, #4
	strh r1, [r0, #0x38]
	ldr r3, [r0, #4]
	cmp r3, #0
	popeq {r4, pc}
	mov r0, #2
	mov r1, #4
	mov r2, #0
	blx r3
	pop {r4, pc}
_020DA370:
	ldr r1, _020DA39C @ =0x021E36B0
	mov r0, r4
	ldrh r2, [r1, #0x3a]
	orr r2, r2, #4
	strh r2, [r1, #0x3a]
	ldrh r2, [r1, #0x38]
	bic r2, r2, #4
	strh r2, [r1, #0x38]
	bl FUN_020D3A4C
	pop {r4, pc}
	.align 2, 0
_020DA398: .4byte 0x03000200
_020DA39C: .4byte 0x021E36B0
	arm_func_end FUN_020DA308

	arm_func_start FUN_020DA3A0
FUN_020DA3A0: @ 0x020DA3A0
	push {r4, lr}
	ldr ip, _020DA4E0 @ =0x021E36B0
	mov r1, #3
	strh r1, [r0, #6]
	ldrh r1, [ip, #0x12]
	ldrh r2, [ip, #0x10]
	cmp r1, #1
	ldrhne r1, [ip, #0x18]
	cmpne r1, #1
	bne _020DA3FC
	ldr r1, _020DA4E0 @ =0x021E36B0
	lsl ip, r2, #3
	ldr r1, [r1, #0x14]
	add r3, r1, r2, lsl #3
	ldrh r2, [r1, ip]
	ldrh r1, [r3, #2]
	strh r2, [r0]
	strh r1, [r0, #2]
	ldrh r2, [r3, #4]
	ldrh r1, [r3, #6]
	strh r2, [r0, #4]
	strh r1, [r0, #6]
	pop {r4, pc}
_020DA3FC:
	mov r1, #0
	b _020DA4BC
_020DA404:
	subs lr, r2, r1
	ldr r3, [ip, #0x14]
	addmi lr, lr, r4
	add r3, r3, lr, lsl #3
	ldrh lr, [r3, #4]
	cmp lr, #0
	bne _020DA444
	ldrh r2, [r3]
	ldrh r1, [r3, #2]
	strh r2, [r0]
	strh r1, [r0, #2]
	ldrh r2, [r3, #4]
	ldrh r1, [r3, #6]
	strh r2, [r0, #4]
	strh r1, [r0, #6]
	pop {r4, pc}
_020DA444:
	ldrh lr, [r0, #6]
	tst lr, #1
	beq _020DA474
	ldrh lr, [r3, #6]
	tst lr, #1
	bne _020DA474
	ldrh lr, [r3]
	cmp r1, #0
	strh lr, [r0]
	ldrhne lr, [r0, #6]
	bicne lr, lr, #1
	strhne lr, [r0, #6]
_020DA474:
	ldrh lr, [r0, #6]
	tst lr, #2
	beq _020DA4A4
	ldrh lr, [r3, #6]
	tst lr, #2
	bne _020DA4A4
	ldrh r3, [r3, #2]
	cmp r1, #0
	strh r3, [r0, #2]
	ldrhne r3, [r0, #6]
	bicne r3, r3, #2
	strhne r3, [r0, #6]
_020DA4A4:
	ldrh r3, [r0, #6]
	cmp r3, #0
	moveq r1, #1
	strheq r1, [r0, #4]
	popeq {r4, pc}
	add r1, r1, #1
_020DA4BC:
	ldrh r3, [ip, #0x12]
	cmp r1, r3
	ldrhlt r4, [ip, #0x18]
	sublt r3, r4, #1
	cmplt r1, r3
	blt _020DA404
	mov r1, #1
	strh r1, [r0, #4]
	pop {r4, pc}
	.align 2, 0
_020DA4E0: .4byte 0x021E36B0
	arm_func_end FUN_020DA3A0

	arm_func_start FUN_020DA4E4
FUN_020DA4E4: @ 0x020DA4E4
	ldr r0, _020DA4F0 @ =0x021E36B0
	ldrh r0, [r0, #0x10]
	bx lr
	.align 2, 0
_020DA4F0: .4byte 0x021E36B0
	arm_func_end FUN_020DA4E4

	arm_func_start FUN_020DA4F4
FUN_020DA4F4: @ 0x020DA4F4
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sb, r1
	mov r8, r2
	cmp sb, #0x1000
	cmplo r8, #0x1000
	ldrhlo r4, [sp, #0x2c]
	mov r7, r3
	mov sl, r0
	cmplo r4, #0x1000
	ldrhlo r3, [sp, #0x30]
	cmplo r3, #0x1000
	movhs r0, #1
	pophs {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp r7, #0x100
	ldrhlo r2, [sp, #0x34]
	cmplo r2, #0x100
	ldrhlo r1, [sp, #0x28]
	cmplo r1, #0xc0
	ldrhlo r0, [sp, #0x38]
	cmplo r0, #0xc0
	movhs r0, #1
	pophs {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp r7, r2
	cmpne r1, r0
	cmpne sb, r4
	cmpne r8, r3
	moveq r0, #1
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	bl FUN_020D3A38
	ldrh lr, [sp, #0x2c]
	ldrh ip, [sp, #0x34]
	ldr r3, _020DA6D8 @ =0x04000280
	sub r1, sb, lr
	mov r2, #0
	ldrh r4, [sp, #0x38]
	ldrh r5, [sp, #0x28]
	ldrh r6, [sp, #0x30]
	strh r2, [r3]
	lsl r1, r1, #8
	str r1, [r3, #0x10]
	sub r1, r7, ip
	str r1, [r3, #0x18]
	mov r1, r2
	sub r2, r5, r4
	str r1, [r3, #0x1c]
	sub r1, r8, r6
	str r2, [sp]
_020DA5B0:
	ldrh r2, [r3]
	tst r2, #0x8000
	bne _020DA5B0
	lsl fp, r1, #8
	ldr r1, _020DA6DC @ =0x040002A0
	ldr r2, [r1]
	mov r1, #0
	strh r1, [r3]
	ldr r1, _020DA6DC @ =0x040002A0
	cmp r2, #0x8000
	str fp, [r1, #-0x10]
	sub r3, r1, #8
	ldr r1, [sp]
	mov fp, #0
	stm r3, {r1, fp}
	bge _020DA600
	mov r1, fp
	sub r1, r1, #0x8000
	cmp r2, r1
	bge _020DA60C
_020DA600:
	bl FUN_020D3A4C
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020DA60C:
	strh r2, [sl, #4]
	ldrsh r2, [sl, #4]
	add r1, r7, ip
	add r3, sb, lr
	mul r1, r2, r1
	rsb r1, r1, r3, lsl #8
	lsl r1, r1, #9
	asr r2, r1, #0x10
	cmp r2, #0x8000
	bge _020DA644
	mov r1, fp
	sub r1, r1, #0x8000
	cmp r2, r1
	bge _020DA650
_020DA644:
	bl FUN_020D3A4C
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020DA650:
	ldr r1, _020DA6DC @ =0x040002A0
	strh r2, [sl]
	sub r2, r1, #0x20
_020DA65C:
	ldrh r1, [r2]
	tst r1, #0x8000
	bne _020DA65C
	ldr r1, _020DA6DC @ =0x040002A0
	ldr r7, [r1]
	bl FUN_020D3A4C
	cmp r7, #0x8000
	bge _020DA68C
	mov r1, #0x8000
	rsb r1, r1, #0
	cmp r7, r1
	bge _020DA694
_020DA68C:
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020DA694:
	strh r7, [sl, #6]
	ldrsh r2, [sl, #6]
	add r0, r5, r4
	add r3, r8, r6
	mul r0, r2, r0
	rsb r0, r0, r3, lsl #8
	lsl r0, r0, #9
	asr r0, r0, #0x10
	cmp r0, #0x8000
	bge _020DA6C4
	cmp r0, r1
	bge _020DA6CC
_020DA6C4:
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020DA6CC:
	strh r0, [sl, #2]
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020DA6D8: .4byte 0x04000280
_020DA6DC: .4byte 0x040002A0
	arm_func_end FUN_020DA4F4

	arm_func_start FUN_020DA6E0
FUN_020DA6E0: @ 0x020DA6E0
	push {r4, r5, r6, lr}
	ldr r2, _020DA7FC @ =0x021E36B0
	ldrh r2, [r2, #0x34]
	cmp r2, #0
	bne _020DA718
	ldrh r3, [r1]
	ldrh r2, [r1, #2]
	strh r3, [r0]
	strh r2, [r0, #2]
	ldrh r2, [r1, #4]
	ldrh r1, [r1, #6]
	strh r2, [r0, #4]
	strh r1, [r0, #6]
	pop {r4, r5, r6, pc}
_020DA718:
	ldrh r3, [r1, #4]
	ldr r2, _020DA800 @ =0x021E36CC
	strh r3, [r0, #4]
	ldrh r3, [r1, #6]
	strh r3, [r0, #6]
	ldrh r3, [r1, #4]
	cmp r3, #0
	bne _020DA748
	mov r1, #0
	strh r1, [r0]
	strh r1, [r0, #2]
	pop {r4, r5, r6, pc}
_020DA748:
	ldrh r4, [r1]
	ldr r3, [r2]
	ldr lr, [r2, #8]
	lsl r4, r4, #2
	subs ip, r4, r3
	asr r3, r3, #0x1f
	rsc r3, r3, r4, asr #31
	umull r6, r5, lr, ip
	mla r5, lr, r3, r5
	asr r3, lr, #0x1f
	mla r5, r3, ip, r5
	lsr r3, r6, #0x16
	orr r3, r3, r5, lsl #10
	strh r3, [r0]
	ldrsh r3, [r0]
	cmp r3, #0
	movlt r3, #0
	strhlt r3, [r0]
	blt _020DA7A0
	cmp r3, #0xff
	movgt r3, #0xff
	strhgt r3, [r0]
_020DA7A0:
	ldrh r3, [r1, #2]
	ldr r1, [r2, #0xc]
	ldr ip, [r2, #0x14]
	lsl r2, r3, #2
	subs r3, r2, r1
	asr r1, r1, #0x1f
	rsc r1, r1, r2, asr #31
	umull r4, lr, ip, r3
	mla lr, ip, r1, lr
	asr r1, ip, #0x1f
	mla lr, r1, r3, lr
	lsr r1, r4, #0x16
	orr r1, r1, lr, lsl #10
	strh r1, [r0, #2]
	ldrsh r1, [r0, #2]
	cmp r1, #0
	movlt r1, #0
	strhlt r1, [r0, #2]
	poplt {r4, r5, r6, pc}
	cmp r1, #0xbf
	movgt r1, #0xbf
	strhgt r1, [r0, #2]
	pop {r4, r5, r6, pc}
	.align 2, 0
_020DA7FC: .4byte 0x021E36B0
_020DA800: .4byte 0x021E36CC
	arm_func_end FUN_020DA6E0

	arm_func_start FUN_020DA804
FUN_020DA804: @ 0x020DA804
	ldr r1, _020DA818 @ =0x021E36B0
_020DA808:
	ldrh r2, [r1, #0x3a]
	tst r2, r0
	bne _020DA808
	bx lr
	.align 2, 0
_020DA818: .4byte 0x021E36B0
	arm_func_end FUN_020DA804

	arm_func_start FUN_020DA81C
FUN_020DA81C: @ 0x020DA81C
	ldr r1, _020DA82C @ =0x021E36B0
	ldrh r1, [r1, #0x38]
	and r0, r1, r0
	bx lr
	.align 2, 0
_020DA82C: .4byte 0x021E36B0
	arm_func_end FUN_020DA81C

	arm_func_start FUN_020DA830
FUN_020DA830: @ 0x020DA830
	push {r3, r4, r5, lr}
	ldr r0, _020DA894 @ =0x021E36EC
	ldrh r1, [r0]
	cmp r1, #0
	popne {r3, r4, r5, pc}
	mov r1, #1
	strh r1, [r0]
	mov r1, #0
	str r1, [r0, #4]
	str r1, [r0, #8]
	bl FUN_020D6548
	mov r5, #9
	mov r4, #1
_020DA864:
	mov r0, r5
	mov r1, r4
	bl FUN_020D66A0
	cmp r0, #0
	beq _020DA864
	ldr r2, _020DA898 @ =0x027FFF90
	mov r3, #0
	ldr r1, _020DA89C @ =FUN_020DAAA8
	mov r0, #9
	str r3, [r2]
	bl FUN_020D6654
	pop {r3, r4, r5, pc}
	.align 2, 0
_020DA894: .4byte 0x021E36EC
_020DA898: .4byte 0x027FFF90
_020DA89C: .4byte FUN_020DAAA8
	arm_func_end FUN_020DA830

	arm_func_start FUN_020DA8A0
FUN_020DA8A0: @ 0x020DA8A0
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	ldr r0, [r7, #4]
	mov r6, r1
	tst r0, #0x1f
	mov r5, r2
	movne r0, #2
	popne {r3, r4, r5, r6, r7, pc}
	ldr r0, [r7, #8]
	tst r0, #0x1f
	movne r0, #2
	popne {r3, r4, r5, r6, r7, pc}
	cmp r0, #0
	moveq r0, #2
	popeq {r3, r4, r5, r6, r7, pc}
	ldr r0, [r7, #0xc]
	cmp r0, #0x400
	movlo r0, #2
	poplo {r3, r4, r5, r6, r7, pc}
	ldr r0, [r7]
	cmp r0, #5
	addls pc, pc, r0, lsl #2
	b _020DA944
_020DA8FC: @ jump table
	b _020DA914 @ case 0
	b _020DA91C @ case 1
	b _020DA924 @ case 2
	b _020DA92C @ case 3
	b _020DA934 @ case 4
	b _020DA93C @ case 5
_020DA914:
	mov r1, #0
	b _020DA94C
_020DA91C:
	mov r1, #1
	b _020DA94C
_020DA924:
	mov r1, #2
	b _020DA94C
_020DA92C:
	mov r1, #3
	b _020DA94C
_020DA934:
	mov r1, #5
	b _020DA94C
_020DA93C:
	mov r1, #7
	b _020DA94C
_020DA944:
	mov r0, #2
	pop {r3, r4, r5, r6, r7, pc}
_020DA94C:
	ldr r0, [r7, #0x10]
	cmp r0, #0
	orrne r0, r1, #0x10
	andne r0, r0, #0xff
	andeq r0, r1, #0xff
	and r4, r0, #0xff
	bl FUN_020D3A38
	ldr r1, _020DA9C8 @ =0x021E36EC
	ldr r2, [r1, #4]
	cmp r2, #0
	beq _020DA984
	bl FUN_020D3A4C
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_020DA984:
	mov r2, #1
	str r2, [r1, #4]
	bl FUN_020D3A4C
	ldr r0, _020DA9C8 @ =0x021E36EC
	mov r3, r4
	str r6, [r0, #8]
	str r5, [r0, #0xc]
	ldr r1, [r7, #0x14]
	str r1, [r0, #0x14]
	ldr r1, [r7, #0x18]
	str r1, [r0, #0x18]
	ldmib r7, {r0, r1, r2}
	bl FUN_020DABD0
	cmp r0, #0
	movne r0, #0
	moveq r0, #3
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020DA9C8: .4byte 0x021E36EC
	arm_func_end FUN_020DA8A0

	arm_func_start FUN_020DA9CC
FUN_020DA9CC: @ 0x020DA9CC
	push {r3, lr}
	ldr r1, _020DA9FC @ =FUN_020DACFC
	mov r2, #0
	bl FUN_020DA8A0
	ldr r1, _020DAA00 @ =0x021E36EC
	cmp r0, #0
	str r0, [r1, #0x10]
	bne _020DA9F0
	bl FUN_020DAD0C
_020DA9F0:
	ldr r0, _020DAA00 @ =0x021E36EC
	ldr r0, [r0, #0x10]
	pop {r3, pc}
	.align 2, 0
_020DA9FC: .4byte FUN_020DACFC
_020DAA00: .4byte 0x021E36EC
	arm_func_end FUN_020DA9CC

	arm_func_start FUN_020DAA04
FUN_020DAA04: @ 0x020DAA04
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	bl FUN_020D3A38
	ldr r1, _020DAA5C @ =0x021E36EC
	ldr r2, [r1, #4]
	cmp r2, #0
	beq _020DAA30
	bl FUN_020D3A4C
	mov r0, #1
	pop {r3, r4, r5, pc}
_020DAA30:
	mov r2, #1
	str r2, [r1, #4]
	bl FUN_020D3A4C
	ldr r0, _020DAA5C @ =0x021E36EC
	str r5, [r0, #8]
	str r4, [r0, #0xc]
	bl FUN_020DACD4
	cmp r0, #0
	movne r0, #0
	moveq r0, #3
	pop {r3, r4, r5, pc}
	.align 2, 0
_020DAA5C: .4byte 0x021E36EC
	arm_func_end FUN_020DAA04

	arm_func_start FUN_020DAA60
FUN_020DAA60: @ 0x020DAA60
	push {r3, lr}
	ldr r0, _020DAA90 @ =FUN_020DACFC
	mov r1, #0
	bl FUN_020DAA04
	ldr r1, _020DAA94 @ =0x021E36EC
	cmp r0, #0
	str r0, [r1, #0x10]
	bne _020DAA84
	bl FUN_020DAD0C
_020DAA84:
	ldr r0, _020DAA94 @ =0x021E36EC
	ldr r0, [r0, #0x10]
	pop {r3, pc}
	.align 2, 0
_020DAA90: .4byte FUN_020DACFC
_020DAA94: .4byte 0x021E36EC
	arm_func_end FUN_020DAA60

	arm_func_start FUN_020DAA98
FUN_020DAA98: @ 0x020DAA98
	ldr r0, _020DAAA4 @ =0x027FFF90
	ldr r0, [r0]
	bx lr
	.align 2, 0
_020DAAA4: .4byte 0x027FFF90
	arm_func_end FUN_020DAA98

	arm_func_start FUN_020DAAA8
FUN_020DAAA8: @ 0x020DAAA8
	push {r4, lr}
	mov r4, r1
	cmp r2, #0
	beq _020DAAF0
	ldr r0, _020DABC8 @ =0x021E36EC
	ldr r1, [r0, #4]
	cmp r1, #0
	movne r1, #0
	strne r1, [r0, #4]
	ldr r0, _020DABC8 @ =0x021E36EC
	ldr r2, [r0, #8]
	cmp r2, #0
	beq _020DAAF0
	mov r1, #0
	str r1, [r0, #8]
	ldr r1, [r0, #0xc]
	mov r0, #6
	blx r2
_020DAAF0:
	and r0, r4, #0x7f00
	and r1, r4, #0xff
	lsl r0, r0, #8
	cmp r1, #4
	lsr r2, r0, #0x10
	addls pc, pc, r1, lsl #2
	b _020DAB48
_020DAB0C: @ jump table
	b _020DAB20 @ case 0
	b _020DAB28 @ case 1
	b _020DAB30 @ case 2
	b _020DAB38 @ case 3
	b _020DAB40 @ case 4
_020DAB20:
	mov r0, #0
	b _020DAB4C
_020DAB28:
	mov r0, #4
	b _020DAB4C
_020DAB30:
	mov r0, #2
	b _020DAB4C
_020DAB38:
	mov r0, #5
	b _020DAB4C
_020DAB40:
	mov r0, #1
	b _020DAB4C
_020DAB48:
	mov r0, #6
_020DAB4C:
	cmp r2, #0x51
	bne _020DAB70
	ldr r1, _020DABC8 @ =0x021E36EC
	ldr r2, [r1, #0x14]
	cmp r2, #0
	popeq {r4, pc}
	ldr r1, [r1, #0x18]
	blx r2
	pop {r4, pc}
_020DAB70:
	cmp r2, #0x40
	bne _020DAB90
	ldr r1, _020DABC8 @ =0x021E36EC
	ldr r2, [r1, #0x1c]
	cmp r2, #0
	ldrne r1, _020DABCC @ =0x027FFF94
	ldrhne r1, [r1]
	strhne r1, [r2]
_020DAB90:
	ldr r1, _020DABC8 @ =0x021E36EC
	ldr r2, [r1, #4]
	cmp r2, #0
	movne r2, #0
	strne r2, [r1, #4]
	ldr r1, _020DABC8 @ =0x021E36EC
	ldr r3, [r1, #8]
	cmp r3, #0
	popeq {r4, pc}
	mov r2, #0
	str r2, [r1, #8]
	ldr r1, [r1, #0xc]
	blx r3
	pop {r4, pc}
	.align 2, 0
_020DABC8: .4byte 0x021E36EC
_020DABCC: .4byte 0x027FFF94
	arm_func_end FUN_020DAAA8

	arm_func_start FUN_020DABD0
FUN_020DABD0: @ 0x020DABD0
	push {r4, r5, r6, lr}
	mov r5, r1
	orr r1, r3, #0x4100
	mov r6, r0
	mov r4, r2
	orr r1, r1, #0x2000000
	mov r0, #9
	mov r2, #0
	bl FUN_020D66C4
	cmp r0, #0
	movlt r0, #0
	poplt {r4, r5, r6, pc}
	lsr r0, r6, #0x10
	orr r1, r0, #0x10000
	mov r0, #9
	mov r2, #0
	bl FUN_020D66C4
	cmp r0, #0
	movlt r0, #0
	poplt {r4, r5, r6, pc}
	lsl r0, r6, #0x10
	lsr r0, r0, #0x10
	orr r1, r0, #0x20000
	mov r0, #9
	mov r2, #0
	bl FUN_020D66C4
	cmp r0, #0
	movlt r0, #0
	poplt {r4, r5, r6, pc}
	lsr r0, r5, #0x10
	orr r1, r0, #0x30000
	mov r0, #9
	mov r2, #0
	bl FUN_020D66C4
	cmp r0, #0
	movlt r0, #0
	poplt {r4, r5, r6, pc}
	lsl r0, r5, #0x10
	lsr r0, r0, #0x10
	orr r1, r0, #0x40000
	mov r0, #9
	mov r2, #0
	bl FUN_020D66C4
	cmp r0, #0
	movlt r0, #0
	poplt {r4, r5, r6, pc}
	lsr r0, r4, #0x10
	orr r1, r0, #0x50000
	mov r0, #9
	mov r2, #0
	bl FUN_020D66C4
	cmp r0, #0
	movlt r0, #0
	poplt {r4, r5, r6, pc}
	ldr r1, _020DACD0 @ =0x01060000
	lsl r0, r4, #0x10
	orr r1, r1, r0, lsr #16
	mov r0, #9
	mov r2, #0
	bl FUN_020D66C4
	cmp r0, #0
	movge r0, #1
	movlt r0, #0
	pop {r4, r5, r6, pc}
	.align 2, 0
_020DACD0: .4byte 0x01060000
	arm_func_end FUN_020DABD0

	arm_func_start FUN_020DACD4
FUN_020DACD4: @ 0x020DACD4
	push {r3, lr}
	ldr r1, _020DACF8 @ =0x03004200
	mov r0, #9
	mov r2, #0
	bl FUN_020D66C4
	cmp r0, #0
	movge r0, #1
	movlt r0, #0
	pop {r3, pc}
	.align 2, 0
_020DACF8: .4byte 0x03004200
	arm_func_end FUN_020DACD4

	arm_func_start FUN_020DACFC
FUN_020DACFC: @ 0x020DACFC
	ldr r1, _020DAD08 @ =0x021E36EC
	str r0, [r1, #0x10]
	bx lr
	.align 2, 0
_020DAD08: .4byte 0x021E36EC
	arm_func_end FUN_020DACFC

	arm_func_start FUN_020DAD0C
FUN_020DAD0C: @ 0x020DAD0C
	ldr ip, _020DAD20 @ =0x021E36F0
_020DAD10:
	ldr r0, [ip]
	cmp r0, #1
	beq _020DAD10
	bx lr
	.align 2, 0
_020DAD20: .4byte 0x021E36F0
	arm_func_end FUN_020DAD0C

	arm_func_start FUN_020DAD24
FUN_020DAD24: @ 0x020DAD24
	push {r3, lr}
	bl FUN_020D3A38
	ldr r1, _020DAD5C @ =0x021E370C
	ldr r2, [r1, #0x1c]
	cmp r2, #0
	beq _020DAD48
	bl FUN_020D3A4C
	mov r0, #0
	pop {r3, pc}
_020DAD48:
	mov r2, #1
	str r2, [r1, #0x1c]
	bl FUN_020D3A4C
	mov r0, #1
	pop {r3, pc}
	.align 2, 0
_020DAD5C: .4byte 0x021E370C
	arm_func_end FUN_020DAD24

	arm_func_start FUN_020DAD60
FUN_020DAD60: @ 0x020DAD60
	push {r4, lr}
	ldr r0, _020DAD98 @ =0x021E370C
	ldr r4, _020DAD9C @ =0x021E3728
	ldr r0, [r0, #0x1c]
	cmp r0, #0
	popeq {r4, pc}
_020DAD78:
	bl FUN_020D3A90
	cmp r0, #0x80
	bne _020DAD88
	bl FUN_020D674C
_020DAD88:
	ldr r0, [r4]
	cmp r0, #0
	bne _020DAD78
	pop {r4, pc}
	.align 2, 0
_020DAD98: .4byte 0x021E370C
_020DAD9C: .4byte 0x021E3728
	arm_func_end FUN_020DAD60

	arm_func_start FUN_020DADA0
FUN_020DADA0: @ 0x020DADA0
	str r0, [r1]
	bx lr
	arm_func_end FUN_020DADA0

	arm_func_start FUN_020DADA8
FUN_020DADA8: @ 0x020DADA8
	push {r3, lr}
	ldr r2, _020DADE4 @ =0x021E370C
	ldr r1, [r2, #0x1c]
	ldr ip, [r2, #0x20]
	cmp r1, #0
	ldr r1, [r2, #0x24]
	movne r3, #0
	strne r3, [r2, #0x1c]
	cmp ip, #0
	popeq {r3, pc}
	ldr r2, _020DADE4 @ =0x021E370C
	mov r3, #0
	str r3, [r2, #0x20]
	blx ip
	pop {r3, pc}
	.align 2, 0
_020DADE4: .4byte 0x021E370C
	arm_func_end FUN_020DADA8

	arm_func_start FUN_020DADE8
FUN_020DADE8: @ 0x020DADE8
	push {r3, r4, r5, lr}
	ldr r0, _020DAE78 @ =0x021E370C
	ldrh r1, [r0]
	cmp r1, #0
	popne {r3, r4, r5, pc}
	mov r1, #1
	strh r1, [r0]
	mov r1, #0
	str r1, [r0, #0x1c]
	str r1, [r0, #0x20]
	bl FUN_020D6548
	mov r5, #8
	mov r4, #1
_020DAE1C:
	mov r0, r5
	mov r1, r4
	bl FUN_020D66A0
	cmp r0, #0
	beq _020DAE1C
	ldr r1, _020DAE7C @ =FUN_020DAE8C
	mov r0, #8
	bl FUN_020D6654
	mov r3, #0
	ldr r0, _020DAE80 @ =0x021E3750
	mov r2, r3
_020DAE48:
	lsl r1, r3, #3
	add r3, r3, #1
	strh r2, [r0, r1]
	cmp r3, #5
	blt _020DAE48
	ldr r0, _020DAE84 @ =0x021E3738
	bl FUN_020D2600
	ldr r1, _020DAE88 @ =0x027FFC3C
	ldr r0, _020DAE78 @ =0x021E370C
	ldr r1, [r1]
	str r1, [r0, #0x10]
	pop {r3, r4, r5, pc}
	.align 2, 0
_020DAE78: .4byte 0x021E370C
_020DAE7C: .4byte FUN_020DAE8C
_020DAE80: .4byte 0x021E3750
_020DAE84: .4byte 0x021E3738
_020DAE88: .4byte 0x027FFC3C
	arm_func_end FUN_020DADE8

	arm_func_start FUN_020DAE8C
FUN_020DAE8C: @ 0x020DAE8C
	push {r3, lr}
	cmp r2, #0
	beq _020DAEA4
	mov r0, #2
	bl FUN_020DADA8
	pop {r3, pc}
_020DAEA4:
	and r0, r1, #0x7f00
	lsl r0, r0, #8
	lsr r2, r0, #0x10
	and r0, r1, #0xff
	cmp r2, #0x70
	blo _020DAEF4
	cmp r2, #0x74
	bhi _020DAEF4
	ldr r1, _020DAF48 @ =0x021E3754
	sub r2, r2, #0x70
	ldr r1, [r1, r2, lsl #3]
	and r0, r0, #0xff
	cmp r1, #0
	strhne r0, [r1]
	lsl r1, r2, #3
	ldr r0, _020DAF4C @ =0x021E3750
	mov r2, #1
	strh r2, [r0, r1]
	mov r0, #0
	b _020DAF40
_020DAEF4:
	cmp r2, #0x60
	bne _020DAF0C
	ldr r1, _020DAF50 @ =0x021E370C
	mov r2, #1
	str r2, [r1, #4]
	b _020DAF40
_020DAF0C:
	cmp r2, #0x62
	bne _020DAF24
	ldr r1, _020DAF50 @ =0x021E370C
	mov r2, #1
	str r2, [r1, #8]
	b _020DAF40
_020DAF24:
	cmp r2, #0x67
	bne _020DAF40
	ldr r1, _020DAF50 @ =0x021E370C
	ldr r1, [r1, #0x28]
	cmp r1, #0
	strne r0, [r1]
	mov r0, #0
_020DAF40:
	bl FUN_020DADA8
	pop {r3, pc}
	.align 2, 0
_020DAF48: .4byte 0x021E3754
_020DAF4C: .4byte 0x021E3750
_020DAF50: .4byte 0x021E370C
	arm_func_end FUN_020DAE8C

	arm_func_start FUN_020DAF54
FUN_020DAF54: @ 0x020DAF54
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	bl FUN_020DAD24
	cmp r0, #0
	moveq r0, #1
	popeq {r3, r4, r5, pc}
	ldr r1, _020DAFDC @ =0x021E370C
	mov r2, #0
	ldr r0, _020DAFE0 @ =0x03006000
	str r2, [r1, #4]
	bl FUN_020DB410
	ldr r0, _020DAFDC @ =0x021E370C
_020DAF88:
	ldr r1, [r0, #4]
	cmp r1, #0
	beq _020DAF88
	ldr ip, _020DAFDC @ =0x021E370C
	mov r0, #0
	str r0, [ip, #4]
	mov r2, r0
	mov r1, #2
	mov r3, #1
	str r0, [ip, #8]
	bl FUN_020DB67C
	and r0, r5, #0xff
	orr r0, r0, #0x6100
	orr r0, r0, #0x2000000
	bl FUN_020DB410
	ldr r1, _020DAFE4 @ =0x01010000
	lsl r0, r4, #0x10
	orr r0, r1, r0, lsr #16
	bl FUN_020DB410
	mov r0, #0
	pop {r3, r4, r5, pc}
	.align 2, 0
_020DAFDC: .4byte 0x021E370C
_020DAFE0: .4byte 0x03006000
_020DAFE4: .4byte 0x01010000
	arm_func_end FUN_020DAF54

	arm_func_start FUN_020DAFE8
FUN_020DAFE8: @ 0x020DAFE8
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_020DAD24
	cmp r0, #0
	moveq r0, #1
	popeq {r4, r5, r6, pc}
	lsr r0, r6, #0x10
	and r0, r0, #0xff
	ldr r1, _020DB040 @ =0x021E370C
	orr r0, r0, #0x6300
	str r5, [r1, #0x20]
	orr r0, r0, #0x2000000
	str r4, [r1, #0x24]
	bl FUN_020DB410
	ldr r1, _020DB044 @ =0x01010000
	lsl r0, r6, #0x10
	orr r0, r1, r0, lsr #16
	bl FUN_020DB410
	mov r0, #0
	pop {r4, r5, r6, pc}
	.align 2, 0
_020DB040: .4byte 0x021E370C
_020DB044: .4byte 0x01010000
	arm_func_end FUN_020DAFE8

	arm_func_start FUN_020DB048
FUN_020DB048: @ 0x020DB048
	push {r3, r4, r5, r6, r7, lr}
	mov r5, r0
	mov r4, r1
	mov r7, r2
	mov r6, r3
	bl FUN_020DAD24
	cmp r0, #0
	moveq r0, #1
	popeq {r3, r4, r5, r6, r7, pc}
	ldr r1, _020DB0A8 @ =0x021E370C
	and r0, r5, #0xff
	str r7, [r1, #0x20]
	orr r0, r0, #0x6500
	ldr r2, _020DB0AC @ =0x021E3750
	str r6, [r1, #0x24]
	lsl r3, r5, #3
	mov ip, #0
	ldr r1, _020DB0B0 @ =0x021E3754
	strh ip, [r2, r3]
	orr r0, r0, #0x3000000
	str r4, [r1, r5, lsl #3]
	bl FUN_020DB410
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020DB0A8: .4byte 0x021E370C
_020DB0AC: .4byte 0x021E3750
_020DB0B0: .4byte 0x021E3754
	arm_func_end FUN_020DB048

	arm_func_start FUN_020DB0B4
FUN_020DB0B4: @ 0x020DB0B4
	push {r3, lr}
	ldr r2, _020DB0D8 @ =FUN_020DADA0
	add r3, sp, #0
	bl FUN_020DB048
	cmp r0, #0
	popne {r3, pc}
	bl FUN_020DAD60
	ldr r0, [sp]
	pop {r3, pc}
	.align 2, 0
_020DB0D8: .4byte FUN_020DADA0
	arm_func_end FUN_020DB0B4

	arm_func_start FUN_020DB0DC
FUN_020DB0DC: @ 0x020DB0DC
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	mov r6, r1
	mov r5, r2
	mov r4, r3
	bl FUN_020DAD24
	cmp r0, #0
	moveq r0, #1
	popeq {r3, r4, r5, r6, r7, pc}
	and r0, r7, #0xff
	ldr r1, _020DB134 @ =0x021E370C
	orr r0, r0, #0x6400
	str r5, [r1, #0x20]
	orr r0, r0, #0x2000000
	str r4, [r1, #0x24]
	bl FUN_020DB410
	ldr r1, _020DB138 @ =0x01010000
	lsl r0, r6, #0x10
	orr r0, r1, r0, lsr #16
	bl FUN_020DB410
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020DB134: .4byte 0x021E370C
_020DB138: .4byte 0x01010000
	arm_func_end FUN_020DB0DC

	arm_func_start FUN_020DB13C
FUN_020DB13C: @ 0x020DB13C
	push {r3, lr}
	ldr r2, _020DB160 @ =FUN_020DADA0
	add r3, sp, #0
	bl FUN_020DB0DC
	cmp r0, #0
	popne {r3, pc}
	bl FUN_020DAD60
	ldr r0, [sp]
	pop {r3, pc}
	.align 2, 0
_020DB160: .4byte FUN_020DADA0
	arm_func_end FUN_020DB13C

	arm_func_start FUN_020DB164
FUN_020DB164: @ 0x020DB164
	push {r3, lr}
	cmp r0, #1
	beq _020DB184
	cmp r0, #2
	beq _020DB194
	cmp r0, #3
	beq _020DB18C
	b _020DB19C
_020DB184:
	mov r0, #1
	b _020DB1A0
_020DB18C:
	mov r0, #2
	b _020DB1A0
_020DB194:
	mov r0, #3
	b _020DB1A0
_020DB19C:
	mov r0, #0
_020DB1A0:
	cmp r0, #0
	ldreq r0, _020DB1B4 @ =0x0000FFFF
	popeq {r3, pc}
	bl FUN_020DAFE8
	pop {r3, pc}
	.align 2, 0
_020DB1B4: .4byte 0x0000FFFF
	arm_func_end FUN_020DB164

	arm_func_start FUN_020DB1B8
FUN_020DB1B8: @ 0x020DB1B8
	push {r3, lr}
	ldr r1, _020DB1DC @ =FUN_020DADA0
	add r2, sp, #0
	bl FUN_020DB164
	cmp r0, #0
	popne {r3, pc}
	bl FUN_020DAD60
	ldr r0, [sp]
	pop {r3, pc}
	.align 2, 0
_020DB1DC: .4byte FUN_020DADA0
	arm_func_end FUN_020DB1B8

	arm_func_start FUN_020DB1E0
FUN_020DB1E0: @ 0x020DB1E0
	push {r3, lr}
	cmp r0, #0
	mov ip, #0
	bne _020DB204
	cmp r1, #1
	moveq ip, #6
	cmp r1, #0
	moveq ip, #7
	b _020DB238
_020DB204:
	cmp r0, #1
	bne _020DB220
	cmp r1, #1
	moveq ip, #4
	cmp r1, #0
	moveq ip, #5
	b _020DB238
_020DB220:
	cmp r0, #2
	bne _020DB238
	cmp r1, #1
	moveq ip, #8
	cmp r1, #0
	moveq ip, #9
_020DB238:
	cmp ip, #0
	ldreq r0, _020DB258 @ =0x0000FFFF
	popeq {r3, pc}
	mov r1, r2
	mov r0, ip
	mov r2, r3
	bl FUN_020DAFE8
	pop {r3, pc}
	.align 2, 0
_020DB258: .4byte 0x0000FFFF
	arm_func_end FUN_020DB1E0

	arm_func_start FUN_020DB25C
FUN_020DB25C: @ 0x020DB25C
	push {r3, lr}
	ldr r2, _020DB280 @ =FUN_020DADA0
	add r3, sp, #0
	bl FUN_020DB1E0
	cmp r0, #0
	popne {r3, pc}
	bl FUN_020DAD60
	ldr r0, [sp]
	pop {r3, pc}
	.align 2, 0
_020DB280: .4byte FUN_020DADA0
	arm_func_end FUN_020DB25C

	arm_func_start FUN_020DB284
FUN_020DB284: @ 0x020DB284
	push {r3, r4, r5, r6, r7, lr}
	sub sp, sp, #8
	mov r7, r0
	ldr r0, _020DB32C @ =0x00996A00
	mov r6, r1
	bl _020D3AA8
	bl FUN_020DB794
	cmp r0, #1
	beq _020DB314
	add r0, sp, #4
	add r1, sp, #0
	bl FUN_020DB3B4
	ldr r0, [sp, #4]
	cmp r0, #0
	beq _020DB2CC
	mov r0, #0
	mov r1, r0
	bl FUN_020DB25C
_020DB2CC:
	ldr r0, [sp]
	cmp r0, #0
	beq _020DB2E4
	mov r0, #1
	mov r1, #0
	bl FUN_020DB25C
_020DB2E4:
	mov r0, #1
	bl FUN_020DB774
	cmp r0, #0
	bne _020DB314
	ldr r5, _020DB32C @ =0x00996A00
	mov r4, #1
_020DB2FC:
	mov r0, r5
	bl _020D3AA8
	mov r0, r4
	bl FUN_020DB774
	cmp r0, #0
	beq _020DB2FC
_020DB314:
	mov r1, r7
	mov r2, r6
	mov r0, #0xe
	bl FUN_020DAFE8
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020DB32C: .4byte 0x00996A00
	arm_func_end FUN_020DB284

	arm_func_start FUN_020DB330
FUN_020DB330: @ 0x020DB330
	push {r3, lr}
	ldr r0, _020DB354 @ =FUN_020DADA0
	add r1, sp, #0
	bl FUN_020DB284
	cmp r0, #0
	popne {r3, pc}
	bl FUN_020DAD60
	ldr r0, [sp]
	pop {r3, pc}
	.align 2, 0
_020DB354: .4byte FUN_020DADA0
	arm_func_end FUN_020DB330

	arm_func_start FUN_020DB358
FUN_020DB358: @ 0x020DB358
	ldr r1, _020DB368 @ =0x021E370C
	ldr ip, _020DB36C @ =FUN_020DB370
	str r0, [r1, #0x14]
	bx ip
	.align 2, 0
_020DB368: .4byte 0x021E370C
_020DB36C: .4byte FUN_020DB370
	arm_func_end FUN_020DB358

	arm_func_start FUN_020DB370
FUN_020DB370: @ 0x020DB370
	push {r4, lr}
	mov r4, r0
	bl FUN_020DB794
	cmp r0, #0
	moveq r0, #0
	popeq {r4, pc}
	lsl r0, r4, #0x10
	lsr r1, r0, #0x10
	mov r0, #2
	bl FUN_020DB13C
	pop {r4, pc}
	arm_func_end FUN_020DB370

	arm_func_start FUN_020DB39C
FUN_020DB39C: @ 0x020DB39C
	ldr ip, _020DB3B0 @ =FUN_020DB13C
	lsl r0, r0, #0x10
	lsr r1, r0, #0x10
	mov r0, #3
	bx ip
	.align 2, 0
_020DB3B0: .4byte FUN_020DB13C
	arm_func_end FUN_020DB39C

	arm_func_start FUN_020DB3B4
FUN_020DB3B4: @ 0x020DB3B4
	push {r3, r4, r5, lr}
	mov r4, r1
	mov r5, r0
	add r1, sp, #0
	mov r0, #0
	bl FUN_020DB0B4
	cmp r0, #0
	popne {r3, r4, r5, pc}
	cmp r5, #0
	beq _020DB3F0
	ldrh r1, [sp]
	tst r1, #8
	movne r1, #1
	moveq r1, #0
	str r1, [r5]
_020DB3F0:
	cmp r4, #0
	popeq {r3, r4, r5, pc}
	ldrh r1, [sp]
	tst r1, #4
	movne r1, #1
	moveq r1, #0
	str r1, [r4]
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020DB3B4

	arm_func_start FUN_020DB410
FUN_020DB410: @ 0x020DB410
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, #8
	mov r4, #0
_020DB420:
	mov r0, r5
	mov r1, r6
	mov r2, r4
	bl FUN_020D66C4
	cmp r0, #0
	bne _020DB420
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020DB410

	arm_func_start FUN_020DB43C
FUN_020DB43C: @ 0x020DB43C
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x18
	ldr r3, _020DB660 @ =0x021E370C
	mov sl, r0
	ldr r0, [r3, #0xc]
	mov sb, r1
	mov fp, r2
	mov r4, #0
	bl FUN_020DB938
	ldr r1, _020DB664 @ =0x04000208
	mov r0, r4
	ldrh r8, [r1]
	strh r0, [r1]
	bl FUN_020D3A38
	str r0, [sp, #8]
	ldr r0, _020DB668 @ =0x003FFFFF
	bl FUN_020D1204
	str r0, [sp, #4]
	bl FUN_020D3438
	cmp r0, #0
	movne r0, #8
	moveq r0, r4
	orr r0, r0, #0x40000
	bl FUN_020D11A8
	ldr r0, [sp, #8]
	bl FUN_020D3A4C
	ldr r2, _020DB664 @ =0x04000208
	mov r0, #1
	ldrh r1, [r2]
	tst sl, #8
	strh r0, [r2]
	beq _020DB4CC
	ldr r0, _020DB66C @ =0x027FFC40
	ldrh r0, [r0]
	cmp r0, #2
	biceq sl, sl, #8
_020DB4CC:
	tst sl, #0x10
	beq _020DB4E0
	bl FUN_020E1134
	cmp r0, #0
	biceq sl, sl, #0x10
_020DB4E0:
	mov r1, #0x4000000
	add r0, r1, #0x1000
	ldr r5, [r1]
	ldr r6, [r0]
	bl FUN_020DB794
	str r0, [sp]
	add r0, sp, #0x14
	add r1, sp, #0x10
	bl FUN_020DB3B4
	mov r0, #2
	mov r1, #0
	bl FUN_020DB25C
	ldr r2, _020DB670 @ =0x027FFC3C
	ldr r0, [r2]
	str r0, [sp, #0xc]
_020DB51C:
	ldr r1, [r2]
	ldr r0, [sp, #0xc]
	cmp r0, r1
	beq _020DB51C
	ldr r0, [r2]
	mov r2, #0x4000000
	str r0, [sp, #0xc]
	ldr r0, [r2]
	add r1, r2, #0x1000
	bic r0, r0, #0x30000
	str r0, [r2]
	ldr r0, [r1]
	bic r0, r0, #0x10000
	str r0, [r1]
	ldr r2, _020DB670 @ =0x027FFC3C
_020DB558:
	ldr r1, [r2]
	ldr r0, [sp, #0xc]
	cmp r0, r1
	beq _020DB558
	ldr r0, [r2]
	str r0, [sp, #0xc]
	ldr r2, _020DB670 @ =0x027FFC3C
_020DB574:
	ldr r1, [r2]
	ldr r0, [sp, #0xc]
	cmp r0, r1
	beq _020DB574
	ldr r0, [sp, #0x14]
	ldr r1, [sp, #0x10]
	orr r0, sl, r0, lsl #5
	orr r0, r0, r1, lsl #6
	lsl r0, r0, #0x10
	lsr r7, r0, #0x10
	orr r0, sb, fp
	lsl r0, r0, #0x10
	lsr sb, r0, #0x10
_020DB5A8:
	mov r0, r7
	mov r1, sb
	bl FUN_020DAF54
	cmp r0, #0
	bne _020DB5A8
	bl FUN_020D3F58
	tst sl, #8
	beq _020DB5D8
	ldr r0, _020DB674 @ =0x04000214
	ldr r0, [r0]
	tst r0, #0x100000
	movne r4, #1
_020DB5D8:
	cmp r4, #0
	bne _020DB618
	ldr r0, [sp]
	cmp r0, #1
	mov r0, #1
	bne _020DB604
	mov r1, r0
	mov r2, r0
	mov r3, r0
	bl FUN_020DB67C
	b _020DB608
_020DB604:
	bl FUN_020DB1B8
_020DB608:
	mov r0, #0x4000000
	str r5, [r0]
	add r0, r0, #0x1000
	str r6, [r0]
_020DB618:
	ldr r0, _020DB678 @ =0x00708100
	bl _020D3AA8
	bl FUN_020D3A38
	ldr r0, [sp, #4]
	bl FUN_020D11A8
	ldr r0, [sp, #8]
	bl FUN_020D3A4C
	ldr r1, _020DB664 @ =0x04000208
	cmp r4, #0
	ldrh r0, [r1]
	strh r8, [r1]
	beq _020DB64C
	bl FUN_020DB330
_020DB64C:
	ldr r0, _020DB660 @ =0x021E370C
	ldr r0, [r0, #0x18]
	bl FUN_020DB938
	add sp, sp, #0x18
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020DB660: .4byte 0x021E370C
_020DB664: .4byte 0x04000208
_020DB668: .4byte 0x003FFFFF
_020DB66C: .4byte 0x027FFC40
_020DB670: .4byte 0x027FFC3C
_020DB674: .4byte 0x04000214
_020DB678: .4byte 0x00708100
	arm_func_end FUN_020DB43C

	arm_func_start FUN_020DB67C
FUN_020DB67C: @ 0x020DB67C
	push {r3, r4, r5, lr}
	mov r5, r1
	mov r4, r3
	cmp r0, #0
	beq _020DB70C
	cmp r0, #1
	bne _020DB760
	cmp r2, #0
	bne _020DB6C0
	ldr r1, _020DB768 @ =0x027FFC3C
	ldr r0, _020DB76C @ =0x021E370C
	ldr r1, [r1]
	ldr r0, [r0, #0x10]
	sub r0, r1, r0
	cmp r0, #7
	movls r0, #0
	popls {r3, r4, r5, pc}
_020DB6C0:
	cmp r5, #0
	beq _020DB6EC
	cmp r4, #0
	beq _020DB6DC
	mov r0, r5
	bl FUN_020DB1B8
	b _020DB6EC
_020DB6DC:
	mov r1, #0
	mov r0, r5
	mov r2, r1
	bl FUN_020DB164
_020DB6EC:
	ldr r2, _020DB770 @ =0x04000304
	ldr r0, _020DB76C @ =0x021E370C
	ldrh r1, [r2]
	orr r1, r1, #1
	strh r1, [r2]
	ldr r0, [r0, #0x14]
	bl FUN_020DB370
	b _020DB760
_020DB70C:
	mov r0, #0
	bl FUN_020DB370
	ldr r3, _020DB770 @ =0x04000304
	ldr r1, _020DB768 @ =0x027FFC3C
	ldrh r2, [r3]
	ldr r0, _020DB76C @ =0x021E370C
	cmp r5, #0
	bic r2, r2, #1
	strh r2, [r3]
	ldr r1, [r1]
	str r1, [r0, #0x10]
	beq _020DB760
	cmp r4, #0
	beq _020DB750
	mov r0, r5
	bl FUN_020DB1B8
	b _020DB760
_020DB750:
	mov r1, #0
	mov r0, r5
	mov r2, r1
	bl FUN_020DB164
_020DB760:
	mov r0, #1
	pop {r3, r4, r5, pc}
	.align 2, 0
_020DB768: .4byte 0x027FFC3C
_020DB76C: .4byte 0x021E370C
_020DB770: .4byte 0x04000304
	arm_func_end FUN_020DB67C

	arm_func_start FUN_020DB774
FUN_020DB774: @ 0x020DB774
	ldr ip, _020DB790 @ =FUN_020DB67C
	mov r1, #0
	cmp r0, #1
	movne r0, #0
	mov r2, r1
	mov r3, #1
	bx ip
	.align 2, 0
_020DB790: .4byte FUN_020DB67C
	arm_func_end FUN_020DB774

	arm_func_start FUN_020DB794
FUN_020DB794: @ 0x020DB794
	ldr r0, _020DB7AC @ =0x04000304
	ldrh r0, [r0]
	tst r0, #1
	movne r0, #1
	moveq r0, #0
	bx lr
	.align 2, 0
_020DB7AC: .4byte 0x04000304
	arm_func_end FUN_020DB794

	arm_func_start FUN_020DB7B0
FUN_020DB7B0: @ 0x020DB7B0
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_020DAD24
	cmp r0, #0
	moveq r0, #1
	popeq {r4, r5, r6, pc}
	and r0, r6, #0xff
	ldr r1, _020DB7F4 @ =0x021E370C
	orr r0, r0, #0x6600
	str r5, [r1, #0x20]
	orr r0, r0, #0x3000000
	str r4, [r1, #0x24]
	bl FUN_020DB410
	mov r0, #0
	pop {r4, r5, r6, pc}
	.align 2, 0
_020DB7F4: .4byte 0x021E370C
	arm_func_end FUN_020DB7B0

	arm_func_start FUN_020DB7F8
FUN_020DB7F8: @ 0x020DB7F8
	push {r3, lr}
	ldr r1, _020DB81C @ =FUN_020DADA0
	add r2, sp, #0
	bl FUN_020DB7B0
	cmp r0, #0
	popne {r3, pc}
	bl FUN_020DAD60
	ldr r0, [sp]
	pop {r3, pc}
	.align 2, 0
_020DB81C: .4byte FUN_020DADA0
	arm_func_end FUN_020DB7F8

	arm_func_start FUN_020DB820
FUN_020DB820: @ 0x020DB820
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_020DAD24
	cmp r0, #0
	moveq r0, #1
	popeq {r4, r5, r6, pc}
	ldr r1, _020DB860 @ =0x021E370C
	ldr r0, _020DB864 @ =0x03006700
	str r5, [r1, #0x20]
	str r4, [r1, #0x24]
	str r6, [r1, #0x28]
	bl FUN_020DB410
	mov r0, #0
	pop {r4, r5, r6, pc}
	.align 2, 0
_020DB860: .4byte 0x021E370C
_020DB864: .4byte 0x03006700
	arm_func_end FUN_020DB820

	arm_func_start FUN_020DB868
FUN_020DB868: @ 0x020DB868
	push {r3, lr}
	ldr r1, _020DB88C @ =FUN_020DADA0
	add r2, sp, #0
	bl FUN_020DB820
	cmp r0, #0
	popne {r3, pc}
	bl FUN_020DAD60
	ldr r0, [sp]
	pop {r3, pc}
	.align 2, 0
_020DB88C: .4byte FUN_020DADA0
	arm_func_end FUN_020DB868

	arm_func_start FUN_020DB890
FUN_020DB890: @ 0x020DB890
	cmp r0, #0
	ldrne r2, [r0]
	strne r2, [r1, #8]
	strne r1, [r0]
	bx lr
	arm_func_end FUN_020DB890

	arm_func_start FUN_020DB8A4
FUN_020DB8A4: @ 0x020DB8A4
	cmp r0, #0
	bxeq lr
	ldr r2, [r0]
	cmp r2, #0
	bne _020DB8C8
	mov r2, #0
	str r2, [r1, #8]
	str r1, [r0]
	bx lr
_020DB8C8:
	ldr r0, [r2, #8]
	cmp r0, #0
	beq _020DB8E4
_020DB8D4:
	mov r2, r0
	ldr r0, [r0, #8]
	cmp r0, #0
	bne _020DB8D4
_020DB8E4:
	str r0, [r1, #8]
	str r1, [r2, #8]
	bx lr
	arm_func_end FUN_020DB8A4

	arm_func_start FUN_020DB8F0
FUN_020DB8F0: @ 0x020DB8F0
	cmp r0, #0
	ldrne r2, [r0]
	movne r3, r2
	cmpne r2, #0
	bxeq lr
_020DB904:
	cmp r2, r1
	bne _020DB924
	cmp r2, r3
	ldreq r1, [r2, #8]
	streq r1, [r0]
	ldrne r0, [r2, #8]
	strne r0, [r3, #8]
	bx lr
_020DB924:
	mov r3, r2
	ldr r2, [r2, #8]
	cmp r2, #0
	bne _020DB904
	bx lr
	arm_func_end FUN_020DB8F0

	arm_func_start FUN_020DB938
FUN_020DB938: @ 0x020DB938
	push {r4, lr}
	movs r4, r0
	popeq {r4, pc}
_020DB944:
	ldr r0, [r4, #4]
	ldr r1, [r4]
	blx r1
	ldr r4, [r4, #8]
	cmp r4, #0
	bne _020DB944
	pop {r4, pc}
	arm_func_end FUN_020DB938

	arm_func_start FUN_020DB960
FUN_020DB960: @ 0x020DB960
	ldr ip, _020DB970 @ =FUN_020DB890
	mov r1, r0
	ldr r0, _020DB974 @ =0x021E3718
	bx ip
	.align 2, 0
_020DB970: .4byte FUN_020DB890
_020DB974: .4byte 0x021E3718
	arm_func_end FUN_020DB960

	arm_func_start FUN_020DB978
FUN_020DB978: @ 0x020DB978
	ldr ip, _020DB988 @ =FUN_020DB8A4
	mov r1, r0
	ldr r0, _020DB98C @ =0x021E3724
	bx ip
	.align 2, 0
_020DB988: .4byte FUN_020DB8A4
_020DB98C: .4byte 0x021E3724
	arm_func_end FUN_020DB978

	arm_func_start FUN_020DB990
FUN_020DB990: @ 0x020DB990
	ldr ip, _020DB9A0 @ =FUN_020DB8F0
	mov r1, r0
	ldr r0, _020DB9A4 @ =0x021E3718
	bx ip
	.align 2, 0
_020DB9A0: .4byte FUN_020DB8F0
_020DB9A4: .4byte 0x021E3718
	arm_func_end FUN_020DB990

	arm_func_start FUN_020DB9A8
FUN_020DB9A8: @ 0x020DB9A8
	ldr ip, _020DB9B8 @ =FUN_020DB8F0
	mov r1, r0
	ldr r0, _020DB9BC @ =0x021E3724
	bx ip
	.align 2, 0
_020DB9B8: .4byte FUN_020DB8F0
_020DB9BC: .4byte 0x021E3724
	arm_func_end FUN_020DB9A8

	arm_func_start FUN_020DB9C0
FUN_020DB9C0: @ 0x020DB9C0
	push {r3, r4, r5, lr}
	ldr r0, _020DBA24 @ =0x021E3778
	ldrh r1, [r0]
	cmp r1, #0
	popne {r3, r4, r5, pc}
	mov r1, #1
	strh r1, [r0]
	mov r1, #0
	str r1, [r0, #0xc]
	str r1, [r0, #0x10]
	str r1, [r0, #0x28]
	str r1, [r0, #0x14]
	str r1, [r0, #0x18]
	bl FUN_020D6548
	mov r5, #5
	mov r4, #1
_020DBA00:
	mov r0, r5
	mov r1, r4
	bl FUN_020D66A0
	cmp r0, #0
	beq _020DBA00
	ldr r1, _020DBA28 @ =FUN_020DBC34
	mov r0, #5
	bl FUN_020D6654
	pop {r3, r4, r5, pc}
	.align 2, 0
_020DBA24: .4byte 0x021E3778
_020DBA28: .4byte FUN_020DBC34
	arm_func_end FUN_020DB9C0

	arm_func_start FUN_020DBA2C
FUN_020DBA2C: @ 0x020DBA2C
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_020D3A38
	ldr r1, _020DBA98 @ =0x021E3778
	ldr r2, [r1, #0xc]
	cmp r2, #0
	beq _020DBA5C
	bl FUN_020D3A4C
	mov r0, #1
	pop {r4, r5, r6, pc}
_020DBA5C:
	mov r2, #1
	str r2, [r1, #0xc]
	bl FUN_020D3A4C
	ldr r0, _020DBA98 @ =0x021E3778
	mov r1, #0
	str r1, [r0, #0x20]
	str r1, [r0, #0x24]
	str r6, [r0, #0x14]
	str r5, [r0, #0x10]
	str r4, [r0, #0x1c]
	bl FUN_020DC22C
	cmp r0, #0
	movne r0, #0
	moveq r0, #3
	pop {r4, r5, r6, pc}
	.align 2, 0
_020DBA98: .4byte 0x021E3778
	arm_func_end FUN_020DBA2C

	arm_func_start FUN_020DBA9C
FUN_020DBA9C: @ 0x020DBA9C
	push {r3, lr}
	ldr r1, _020DBACC @ =FUN_020DC1F4
	mov r2, #0
	bl FUN_020DBA2C
	ldr r1, _020DBAD0 @ =0x021E3778
	cmp r0, #0
	str r0, [r1, #0x2c]
	bne _020DBAC0
	bl FUN_020DC204
_020DBAC0:
	ldr r0, _020DBAD0 @ =0x021E3778
	ldr r0, [r0, #0x2c]
	pop {r3, pc}
	.align 2, 0
_020DBACC: .4byte FUN_020DC1F4
_020DBAD0: .4byte 0x021E3778
	arm_func_end FUN_020DBA9C

	arm_func_start FUN_020DBAD4
FUN_020DBAD4: @ 0x020DBAD4
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_020D3A38
	ldr r1, _020DBB44 @ =0x021E3778
	ldr r2, [r1, #0xc]
	cmp r2, #0
	beq _020DBB04
	bl FUN_020D3A4C
	mov r0, #1
	pop {r4, r5, r6, pc}
_020DBB04:
	mov r2, #1
	str r2, [r1, #0xc]
	bl FUN_020D3A4C
	ldr r0, _020DBB44 @ =0x021E3778
	mov r1, #1
	str r1, [r0, #0x20]
	mov r1, #0
	str r1, [r0, #0x24]
	str r6, [r0, #0x14]
	str r5, [r0, #0x10]
	str r4, [r0, #0x1c]
	bl FUN_020DC23C
	cmp r0, #0
	movne r0, #0
	moveq r0, #3
	pop {r4, r5, r6, pc}
	.align 2, 0
_020DBB44: .4byte 0x021E3778
	arm_func_end FUN_020DBAD4

	arm_func_start FUN_020DBB48
FUN_020DBB48: @ 0x020DBB48
	push {r3, lr}
	ldr r1, _020DBB78 @ =FUN_020DC1F4
	mov r2, #0
	bl FUN_020DBAD4
	ldr r1, _020DBB7C @ =0x021E3778
	cmp r0, #0
	str r0, [r1, #0x2c]
	bne _020DBB6C
	bl FUN_020DC204
_020DBB6C:
	ldr r0, _020DBB7C @ =0x021E3778
	ldr r0, [r0, #0x2c]
	pop {r3, pc}
	.align 2, 0
_020DBB78: .4byte FUN_020DC1F4
_020DBB7C: .4byte 0x021E3778
	arm_func_end FUN_020DBB48

	arm_func_start FUN_020DBB80
FUN_020DBB80: @ 0x020DBB80
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	mov r6, r1
	mov r5, r2
	mov r4, r3
	bl FUN_020D3A38
	ldr r1, _020DBBF8 @ =0x021E3778
	ldr r2, [r1, #0xc]
	cmp r2, #0
	beq _020DBBB4
	bl FUN_020D3A4C
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_020DBBB4:
	mov r2, #1
	str r2, [r1, #0xc]
	bl FUN_020D3A4C
	ldr r0, _020DBBF8 @ =0x021E3778
	mov r1, #2
	str r1, [r0, #0x20]
	mov r1, #0
	str r1, [r0, #0x24]
	str r7, [r0, #0x14]
	str r6, [r0, #0x18]
	str r5, [r0, #0x10]
	str r4, [r0, #0x1c]
	bl FUN_020DC21C
	cmp r0, #0
	movne r0, #0
	moveq r0, #3
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020DBBF8: .4byte 0x021E3778
	arm_func_end FUN_020DBB80

	arm_func_start FUN_020DBBFC
FUN_020DBBFC: @ 0x020DBBFC
	push {r3, lr}
	ldr r2, _020DBC2C @ =FUN_020DC1F4
	mov r3, #0
	bl FUN_020DBB80
	ldr r1, _020DBC30 @ =0x021E3778
	cmp r0, #0
	str r0, [r1, #0x2c]
	bne _020DBC20
	bl FUN_020DC204
_020DBC20:
	ldr r0, _020DBC30 @ =0x021E3778
	ldr r0, [r0, #0x2c]
	pop {r3, pc}
	.align 2, 0
_020DBC2C: .4byte FUN_020DC1F4
_020DBC30: .4byte 0x021E3778
	arm_func_end FUN_020DBBFC

	arm_func_start FUN_020DBC34
FUN_020DBC34: @ 0x020DBC34
	push {r3, r4, r5, lr}
	cmp r2, #0
	beq _020DBC90
	ldr r0, _020DC174 @ =0x021E3778
	ldr r1, [r0, #0x24]
	cmp r1, #0
	movne r1, #0
	strne r1, [r0, #0x24]
	ldr r0, _020DC174 @ =0x021E3778
	ldr r1, [r0, #0xc]
	cmp r1, #0
	movne r1, #0
	strne r1, [r0, #0xc]
	ldr r0, _020DC174 @ =0x021E3778
	ldr r2, [r0, #0x10]
	cmp r2, #0
	popeq {r3, r4, r5, pc}
	mov r1, #0
	str r1, [r0, #0x10]
	ldr r1, [r0, #0x1c]
	mov r0, #6
	blx r2
	pop {r3, r4, r5, pc}
_020DBC90:
	and r0, r1, #0x7f00
	lsr r0, r0, #8
	and r0, r0, #0xff
	cmp r0, #0x30
	and r2, r1, #0xff
	bne _020DBCC0
	ldr r0, _020DC174 @ =0x021E3778
	ldr r0, [r0, #0x28]
	cmp r0, #0
	popeq {r3, r4, r5, pc}
	blx r0
	pop {r3, r4, r5, pc}
_020DBCC0:
	cmp r2, #0
	bne _020DC0E4
	ldr r0, _020DC174 @ =0x021E3778
	mov r4, #0
	ldr r1, [r0, #0x20]
	cmp r1, #0xf
	addls pc, pc, r1, lsl #2
	b _020DC0D0
_020DBCE0: @ jump table
	b _020DBD20 @ case 0
	b _020DBD7C @ case 1
	b _020DBDCC @ case 2
	b _020DC12C @ case 3
	b _020DC12C @ case 4
	b _020DC12C @ case 5
	b _020DBE74 @ case 6
	b _020DBEA4 @ case 7
	b _020DBEC8 @ case 8
	b _020DBF70 @ case 9
	b _020DC024 @ case 10
	b _020DC12C @ case 11
	b _020DC12C @ case 12
	b _020DC12C @ case 13
	b _020DC12C @ case 14
	b _020DC12C @ case 15
_020DBD20:
	ldr r1, _020DC178 @ =0x027FFDE8
	ldr r5, [r0, #0x14]
	ldr r0, [r1]
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	bl FUN_020DC184
	ldr r1, _020DC178 @ =0x027FFDE8
	str r0, [r5]
	ldr r0, [r1]
	lsl r0, r0, #0x13
	lsr r0, r0, #0x1b
	bl FUN_020DC184
	ldr r1, _020DC178 @ =0x027FFDE8
	str r0, [r5, #4]
	ldr r0, [r1]
	lsl r0, r0, #0xa
	lsr r0, r0, #0x1a
	bl FUN_020DC184
	str r0, [r5, #8]
	mov r0, r5
	bl FUN_020DC5A0
	str r0, [r5, #0xc]
	b _020DC12C
_020DBD7C:
	ldr r1, _020DC17C @ =0x027FFDEC
	ldr r5, [r0, #0x14]
	ldr r0, [r1]
	lsl r0, r0, #0x1a
	lsr r0, r0, #0x1a
	bl FUN_020DC184
	ldr r1, _020DC17C @ =0x027FFDEC
	str r0, [r5]
	ldr r0, [r1]
	lsl r0, r0, #0x11
	lsr r0, r0, #0x19
	bl FUN_020DC184
	ldr r1, _020DC17C @ =0x027FFDEC
	str r0, [r5, #4]
	ldr r0, [r1]
	lsl r0, r0, #9
	lsr r0, r0, #0x19
	bl FUN_020DC184
	str r0, [r5, #8]
	b _020DC12C
_020DBDCC:
	ldr r1, _020DC178 @ =0x027FFDE8
	ldr r5, [r0, #0x14]
	ldr r0, [r1]
	and r0, r0, #0xff
	bl FUN_020DC184
	ldr r1, _020DC178 @ =0x027FFDE8
	str r0, [r5]
	ldr r0, [r1]
	lsl r0, r0, #0x13
	lsr r0, r0, #0x1b
	bl FUN_020DC184
	ldr r1, _020DC178 @ =0x027FFDE8
	str r0, [r5, #4]
	ldr r0, [r1]
	lsl r0, r0, #0xa
	lsr r0, r0, #0x1a
	bl FUN_020DC184
	str r0, [r5, #8]
	mov r0, r5
	bl FUN_020DC5A0
	ldr r1, _020DC17C @ =0x027FFDEC
	str r0, [r5, #0xc]
	ldr r0, [r1]
	ldr r1, _020DC174 @ =0x021E3778
	lsl r0, r0, #0x1a
	lsr r0, r0, #0x1a
	ldr r5, [r1, #0x18]
	bl FUN_020DC184
	ldr r1, _020DC17C @ =0x027FFDEC
	str r0, [r5]
	ldr r0, [r1]
	lsl r0, r0, #0x11
	lsr r0, r0, #0x19
	bl FUN_020DC184
	ldr r1, _020DC17C @ =0x027FFDEC
	str r0, [r5, #4]
	ldr r0, [r1]
	lsl r0, r0, #9
	lsr r0, r0, #0x19
	bl FUN_020DC184
	str r0, [r5, #8]
	b _020DC12C
_020DBE74:
	ldr r1, _020DC180 @ =0x027FFDEA
	ldr r2, [r0, #0x14]
	ldrh r0, [r1]
	lsl r0, r0, #0x1c
	lsr r0, r0, #0x1c
	cmp r0, #4
	bne _020DBE9C
	mov r0, #1
	str r0, [r2]
	b _020DC12C
_020DBE9C:
	str r4, [r2]
	b _020DC12C
_020DBEA4:
	ldr r1, _020DC180 @ =0x027FFDEA
	ldr r2, [r0, #0x14]
	ldrh r0, [r1]
	lsl r0, r0, #0x19
	lsrs r0, r0, #0x1f
	movne r0, #1
	strne r0, [r2]
	streq r4, [r2]
	b _020DC12C
_020DBEC8:
	ldr r1, _020DC17C @ =0x027FFDEC
	ldr r5, [r0, #0x14]
	ldr r0, [r1]
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	str r0, [r5]
	ldr r0, [r1]
	lsl r0, r0, #0x12
	lsr r0, r0, #0x1a
	bl FUN_020DC184
	ldr r1, _020DC17C @ =0x027FFDEC
	str r0, [r5, #4]
	ldr r0, [r1]
	lsl r0, r0, #9
	lsr r0, r0, #0x19
	bl FUN_020DC184
	str r0, [r5, #8]
	mov r1, r4
	ldr r0, _020DC17C @ =0x027FFDEC
	str r1, [r5, #0xc]
	ldr r0, [r0]
	lsl r0, r0, #0x18
	lsrs r0, r0, #0x1f
	ldrne r0, [r5, #0xc]
	addne r0, r0, #1
	strne r0, [r5, #0xc]
	ldr r0, _020DC17C @ =0x027FFDEC
	ldr r0, [r0]
	lsl r0, r0, #0x10
	lsrs r0, r0, #0x1f
	ldrne r0, [r5, #0xc]
	addne r0, r0, #2
	strne r0, [r5, #0xc]
	ldr r0, _020DC17C @ =0x027FFDEC
	ldr r0, [r0]
	lsl r0, r0, #8
	lsrs r0, r0, #0x1f
	beq _020DC12C
	ldr r0, [r5, #0xc]
	add r0, r0, #4
	str r0, [r5, #0xc]
	b _020DC12C
_020DBF70:
	ldr r3, [r0, #0x24]
	cmp r3, #0
	bne _020DC01C
	ldr r1, [r0, #0x14]
	ldr r2, _020DC180 @ =0x027FFDEA
	ldr r1, [r1]
	cmp r1, #1
	ldrh r1, [r2]
	bne _020DBFDC
	lsl r1, r1, #0x1c
	lsr r1, r1, #0x1c
	cmp r1, #4
	beq _020DC12C
	add r1, r3, #1
	str r1, [r0, #0x24]
	ldrh r0, [r2]
	bic r0, r0, #0xf
	orr r0, r0, #4
	strh r0, [r2]
	bl FUN_020DC24C
	cmp r0, #0
	bne _020DC12C
	ldr r0, _020DC174 @ =0x021E3778
	mov r1, r4
	str r1, [r0, #0x24]
	mov r4, #3
	b _020DC12C
_020DBFDC:
	lsl r1, r1, #0x1c
	lsrs r1, r1, #0x1c
	beq _020DC12C
	add r1, r3, #1
	str r1, [r0, #0x24]
	ldrh r0, [r2]
	bic r0, r0, #0xf
	strh r0, [r2]
	bl FUN_020DC24C
	cmp r0, #0
	bne _020DC12C
	ldr r0, _020DC174 @ =0x021E3778
	mov r1, r4
	str r1, [r0, #0x24]
	mov r4, #3
	b _020DC12C
_020DC01C:
	str r4, [r0, #0x24]
	b _020DC12C
_020DC024:
	ldr r3, [r0, #0x24]
	cmp r3, #0
	bne _020DC0C8
	ldr r1, [r0, #0x14]
	ldr r2, _020DC180 @ =0x027FFDEA
	ldr r1, [r1]
	cmp r1, #1
	ldrh r1, [r2]
	bne _020DC088
	lsl r1, r1, #0x19
	lsrs r1, r1, #0x1f
	bne _020DC12C
	add r1, r3, #1
	str r1, [r0, #0x24]
	ldrh r0, [r2]
	orr r0, r0, #0x40
	strh r0, [r2]
	bl FUN_020DC24C
	cmp r0, #0
	bne _020DC12C
	ldr r0, _020DC174 @ =0x021E3778
	mov r1, r4
	str r1, [r0, #0x24]
	mov r4, #3
	b _020DC12C
_020DC088:
	lsl r1, r1, #0x19
	lsrs r1, r1, #0x1f
	beq _020DC12C
	add r1, r3, #1
	str r1, [r0, #0x24]
	ldrh r0, [r2]
	bic r0, r0, #0x40
	strh r0, [r2]
	bl FUN_020DC24C
	cmp r0, #0
	bne _020DC12C
	ldr r0, _020DC174 @ =0x021E3778
	mov r1, r4
	str r1, [r0, #0x24]
	mov r4, #3
	b _020DC12C
_020DC0C8:
	str r4, [r0, #0x24]
	b _020DC12C
_020DC0D0:
	ldr r0, _020DC174 @ =0x021E3778
	mov r1, #0
	str r1, [r0, #0x24]
	mov r4, #4
	b _020DC12C
_020DC0E4:
	ldr r0, _020DC174 @ =0x021E3778
	mov r1, #0
	str r1, [r0, #0x24]
	cmp r2, #4
	addls pc, pc, r2, lsl #2
	b _020DC128
_020DC0FC: @ jump table
	b _020DC128 @ case 0
	b _020DC110 @ case 1
	b _020DC118 @ case 2
	b _020DC120 @ case 3
	b _020DC128 @ case 4
_020DC110:
	mov r4, #4
	b _020DC12C
_020DC118:
	mov r4, #5
	b _020DC12C
_020DC120:
	mov r4, #1
	b _020DC12C
_020DC128:
	mov r4, #6
_020DC12C:
	ldr r0, _020DC174 @ =0x021E3778
	ldr r1, [r0, #0x24]
	cmp r1, #0
	popne {r3, r4, r5, pc}
	ldr r1, [r0, #0xc]
	cmp r1, #0
	movne r1, #0
	strne r1, [r0, #0xc]
	ldr r0, _020DC174 @ =0x021E3778
	ldr r2, [r0, #0x10]
	cmp r2, #0
	popeq {r3, r4, r5, pc}
	mov r1, #0
	str r1, [r0, #0x10]
	ldr r1, [r0, #0x1c]
	mov r0, r4
	blx r2
	pop {r3, r4, r5, pc}
	.align 2, 0
_020DC174: .4byte 0x021E3778
_020DC178: .4byte 0x027FFDE8
_020DC17C: .4byte 0x027FFDEC
_020DC180: .4byte 0x027FFDEA
	arm_func_end FUN_020DBC34

	arm_func_start FUN_020DC184
FUN_020DC184: @ 0x020DC184
	push {r3, r4, r5, lr}
	mov ip, #0
	mov r2, ip
	mov r3, ip
_020DC194:
	lsr r1, r0, r3
	and r1, r1, #0xf
	cmp r1, #0xa
	movhs r0, #0
	pophs {r3, r4, r5, pc}
	add r2, r2, #1
	cmp r2, #8
	add r3, r3, #4
	blt _020DC194
	mov r5, #0
	mov r4, r5
	mov lr, #1
	mov r2, #0xa
_020DC1C8:
	lsr r1, r0, r4
	and r3, r1, #0xf
	mul r1, lr, r2
	mla ip, lr, r3, ip
	add r5, r5, #1
	mov lr, r1
	cmp r5, #8
	add r4, r4, #4
	blt _020DC1C8
	mov r0, ip
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020DC184

	arm_func_start FUN_020DC1F4
FUN_020DC1F4: @ 0x020DC1F4
	ldr r1, _020DC200 @ =0x021E3778
	str r0, [r1, #0x2c]
	bx lr
	.align 2, 0
_020DC200: .4byte 0x021E3778
	arm_func_end FUN_020DC1F4

	arm_func_start FUN_020DC204
FUN_020DC204: @ 0x020DC204
	ldr ip, _020DC218 @ =0x021E3784
_020DC208:
	ldr r0, [ip]
	cmp r0, #1
	beq _020DC208
	bx lr
	.align 2, 0
_020DC218: .4byte 0x021E3784
	arm_func_end FUN_020DC204

	arm_func_start FUN_020DC21C
FUN_020DC21C: @ 0x020DC21C
	ldr ip, _020DC228 @ =FUN_020DC25C
	mov r0, #0x10
	bx ip
	.align 2, 0
_020DC228: .4byte FUN_020DC25C
	arm_func_end FUN_020DC21C

	arm_func_start FUN_020DC22C
FUN_020DC22C: @ 0x020DC22C
	ldr ip, _020DC238 @ =FUN_020DC25C
	mov r0, #0x11
	bx ip
	.align 2, 0
_020DC238: .4byte FUN_020DC25C
	arm_func_end FUN_020DC22C

	arm_func_start FUN_020DC23C
FUN_020DC23C: @ 0x020DC23C
	ldr ip, _020DC248 @ =FUN_020DC25C
	mov r0, #0x12
	bx ip
	.align 2, 0
_020DC248: .4byte FUN_020DC25C
	arm_func_end FUN_020DC23C

	arm_func_start FUN_020DC24C
FUN_020DC24C: @ 0x020DC24C
	ldr ip, _020DC258 @ =FUN_020DC25C
	mov r0, #0x27
	bx ip
	.align 2, 0
_020DC258: .4byte FUN_020DC25C
	arm_func_end FUN_020DC24C

	arm_func_start FUN_020DC25C
FUN_020DC25C: @ 0x020DC25C
	push {r3, lr}
	lsl r0, r0, #8
	and r1, r0, #0x7f00
	mov r0, #5
	mov r2, #0
	bl FUN_020D66C4
	cmp r0, #0
	movge r0, #1
	movlt r0, #0
	pop {r3, pc}
	arm_func_end FUN_020DC25C

	arm_func_start FUN_020DC284
FUN_020DC284: @ 0x020DC284
	ldr r3, [r0]
	cmp r3, #0x64
	bhs _020DC2D4
	ldr r2, [r0, #4]
	cmp r2, #1
	blo _020DC2D4
	cmp r2, #0xc
	bhi _020DC2D4
	ldr r1, [r0, #8]
	cmp r1, #1
	blo _020DC2D4
	cmp r1, #0x1f
	bhi _020DC2D4
	ldr r0, [r0, #0xc]
	cmp r0, #7
	bge _020DC2D4
	cmp r2, #1
	blo _020DC2D4
	cmp r2, #0xc
	bls _020DC2DC
_020DC2D4:
	mvn r0, #0
	bx lr
_020DC2DC:
	ldr r0, _020DC310 @ =_02110F84
	sub r1, r1, #1
	ldr r0, [r0, r2, lsl #2]
	cmp r2, #3
	add r2, r1, r0
	blo _020DC2FC
	tst r3, #3
	addeq r2, r2, #1
_020DC2FC:
	ldr r0, _020DC314 @ =0x0000016D
	add r1, r3, #3
	mla r0, r3, r0, r2
	add r0, r0, r1, lsr #2
	bx lr
	.align 2, 0
_020DC310: .4byte _02110F84
_020DC314: .4byte 0x0000016D
	arm_func_end FUN_020DC284

	arm_func_start FUN_020DC318
FUN_020DC318: @ 0x020DC318
	mov r1, #0x3c
	ldm r0, {r2, r3}
	mla r3, r2, r1, r3
	ldr r0, [r0, #8]
	mla r0, r3, r1, r0
	bx lr
	arm_func_end FUN_020DC318

	arm_func_start FUN_020DC330
FUN_020DC330: @ 0x020DC330
	push {r3, r4, r5, lr}
	mov r5, r1
	bl FUN_020DC284
	mov r4, r0
	mvn r0, #0
	cmp r4, r0
	moveq r1, r0
	popeq {r3, r4, r5, pc}
	mov r0, r5
	bl FUN_020DC318
	mvn r2, #0
	cmp r0, r2
	moveq r1, r2
	beq _020DC388
	ldr r1, _020DC390 @ =0x00015180
	mov r2, #0
	umull ip, r3, r4, r1
	mla r3, r4, r2, r3
	asr r2, r4, #0x1f
	mla r3, r2, r1, r3
	adds r2, r0, ip
	adc r1, r3, r0, asr #31
_020DC388:
	mov r0, r2
	pop {r3, r4, r5, pc}
	.align 2, 0
_020DC390: .4byte 0x00015180
	arm_func_end FUN_020DC330

	arm_func_start FUN_020DC394
FUN_020DC394: @ 0x020DC394
	push {r4, lr}
	ldr r2, _020DC484 @ =0x00008EAC
	cmp r1, #0
	movlt r1, #0
	cmp r1, r2
	movgt r1, r2
	ldr r3, _020DC488 @ =0x92492493
	add lr, r1, #6
	smull r2, r4, r3, lr
	add r4, lr, r4
	lsr r2, lr, #0x1f
	add r4, r2, r4, asr #2
	mov ip, #7
	smull r2, r3, ip, r4
	sub r4, lr, r2
	ldr r2, _020DC48C @ =0x0000016D
	str r4, [r0, #0xc]
	mov r3, #0
_020DC3DC:
	tst r3, #3
	addeq ip, r2, #1
	movne ip, r2
	mov r4, r1
	subs r1, r1, ip
	movmi r1, r4
	bmi _020DC404
	add r3, r3, #1
	cmp r3, #0x63
	blo _020DC3DC
_020DC404:
	ldr r2, _020DC48C @ =0x0000016D
	str r3, [r0]
	cmp r1, r2
	movgt r1, r2
	tst r3, #3
	bne _020DC448
	cmp r1, #0x3c
	bge _020DC444
	cmp r1, #0x1f
	movlt r2, #1
	subge r1, r1, #0x1f
	movge r2, #2
	str r2, [r0, #4]
	add r1, r1, #1
	str r1, [r0, #8]
	pop {r4, pc}
_020DC444:
	sub r1, r1, #1
_020DC448:
	ldr r3, _020DC490 @ =_02110F88
	mov r4, #0xb
_020DC450:
	ldr r2, [r3, r4, lsl #2]
	cmp r1, r2
	blt _020DC478
	add r2, r4, #1
	str r2, [r0, #4]
	ldr r2, [r3, r4, lsl #2]
	sub r1, r1, r2
	add r1, r1, #1
	str r1, [r0, #8]
	pop {r4, pc}
_020DC478:
	subs r4, r4, #1
	bpl _020DC450
	pop {r4, pc}
	.align 2, 0
_020DC484: .4byte 0x00008EAC
_020DC488: .4byte 0x92492493
_020DC48C: .4byte 0x0000016D
_020DC490: .4byte _02110F88
	arm_func_end FUN_020DC394

	arm_func_start FUN_020DC494
FUN_020DC494: @ 0x020DC494
	push {r4, r5, r6, lr}
	ldr r2, _020DC50C @ =0x0001517F
	cmp r1, #0
	movlt r1, #0
	cmp r1, r2
	movgt r1, r2
	ldr lr, _020DC510 @ =0x88888889
	lsr ip, r1, #0x1f
	smull r3, r2, lr, r1
	smull r3, r6, lr, r1
	add r2, r1, r2
	add r2, ip, r2, asr #5
	smull r3, r5, lr, r2
	smull r3, r4, lr, r2
	add r6, r1, r6
	add r6, ip, r6, asr #5
	mov lr, #0x3c
	smull r3, ip, lr, r6
	sub r6, r1, r3
	add r5, r2, r5
	lsr ip, r2, #0x1f
	add r5, ip, r5, asr #5
	smull r1, r3, lr, r5
	add r4, r2, r4
	str r6, [r0, #8]
	sub r5, r2, r1
	str r5, [r0, #4]
	add r4, ip, r4, asr #5
	str r4, [r0]
	pop {r4, r5, r6, pc}
	.align 2, 0
_020DC50C: .4byte 0x0001517F
_020DC510: .4byte 0x88888889
	arm_func_end FUN_020DC494

	arm_func_start FUN_020DC514
FUN_020DC514: @ 0x020DC514
	push {r3, r4, r5, r6, r7, lr}
	mov r5, r2
	mov r4, r3
	subs r2, r5, #0
	sbcs r2, r4, #0
	mov r2, #0
	mov r7, r0
	mov r6, r1
	movlt r5, r2
	movlt r4, r2
	blt _020DC554
	ldr r1, _020DC598 @ =0xBC19137F
	subs r0, r1, r5
	sbcs r0, r2, r4
	movlt r5, r1
	movlt r4, r2
_020DC554:
	ldr r2, _020DC59C @ =0x00015180
	mov r0, r5
	mov r1, r4
	mov r3, #0
	bl FUN_020F2740
	mov r1, r0
	mov r0, r6
	bl FUN_020DC494
	ldr r2, _020DC59C @ =0x00015180
	mov r0, r5
	mov r1, r4
	mov r3, #0
	bl FUN_020F2750
	mov r1, r0
	mov r0, r7
	bl FUN_020DC394
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020DC598: .4byte 0xBC19137F
_020DC59C: .4byte 0x00015180
	arm_func_end FUN_020DC514

	arm_func_start FUN_020DC5A0
FUN_020DC5A0: @ 0x020DC5A0
	push {r4, r5, r6, lr}
	ldr r1, [r0, #4]
	ldr r2, [r0]
	sub r1, r1, #2
	cmp r1, #1
	add ip, r2, #0x7d0
	sublt ip, ip, #1
	ldr r6, _020DC650 @ =0x51EB851F
	ldr lr, [r0, #8]
	smull r3, r2, r6, ip
	smull r4, r3, r6, ip
	lsr r5, ip, #0x1f
	add r3, r5, r3, asr #5
	add r2, r5, r2, asr #5
	mov r5, #0x64
	smull r2, r4, r5, r2
	sub r2, ip, r2
	addlt r1, r1, #0xc
	mov r0, #0x1a
	mul r0, r1, r0
	sub r1, r0, #2
	ldr r0, _020DC654 @ =0x66666667
	lsr r5, r1, #0x1f
	smull r1, ip, r0, r1
	add ip, r5, ip, asr #2
	asr r4, r2, #1
	add r0, lr, ip
	add r1, r2, r4, lsr #30
	add r2, r2, r0
	asr r6, r3, #1
	add r0, r3, r6, lsr #30
	add r1, r2, r1, asr #2
	add r1, r1, r0, asr #2
	add r0, r3, r3, lsl #2
	add r4, r1, r0
	ldr r3, _020DC658 @ =0x92492493
	lsr r1, r4, #0x1f
	smull r2, r0, r3, r4
	add r0, r4, r0
	add r0, r1, r0, asr #2
	mov r2, #7
	smull r0, r1, r2, r0
	sub r0, r4, r0
	pop {r4, r5, r6, pc}
	.align 2, 0
_020DC650: .4byte 0x51EB851F
_020DC654: .4byte 0x66666667
_020DC658: .4byte 0x92492493
	arm_func_end FUN_020DC5A0

	arm_func_start FUN_020DC65C
FUN_020DC65C: @ 0x020DC65C
	push {r3, r4, r5, lr}
	ldr r4, _020DC694 @ =0x021E3820
	mov r5, r0
	ldr r1, [r4, #0x108]
	add r0, r4, #0x44
	bl FUN_020D2058
	ldr r1, [r4, #0x114]
	add r0, r4, #0x44
	orr r1, r1, #8
	str r0, [r4, #0x104]
	str r5, [r4, #0x40]
	str r1, [r4, #0x114]
	bl FUN_020D1F34
	pop {r3, r4, r5, pc}
	.align 2, 0
_020DC694: .4byte 0x021E3820
	arm_func_end FUN_020DC65C

	arm_func_start FUN_020DC698
FUN_020DC698: @ 0x020DC698
	push {r4, r5, r6, r7, r8, lr}
	ldr r4, _020DC718 @ =0x021E3820
	mov r8, r0
	mov r7, r1
	bl FUN_020D3A38
	ldr r1, [r4, #8]
	mov r5, r0
	cmp r1, r8
	bne _020DC6D0
	ldr r0, [r4, #0x18]
	cmp r0, r7
	beq _020DC6F4
	bl FUN_020D3F48
	b _020DC6F4
_020DC6D0:
	mvn r6, #2
	b _020DC6E0
_020DC6D8:
	add r0, r4, #0x10
	bl FUN_020D1E7C
_020DC6E0:
	ldr r0, [r4, #8]
	cmp r0, r6
	bne _020DC6D8
	str r8, [r4, #8]
	str r7, [r4, #0x18]
_020DC6F4:
	ldr r0, [r4, #0xc]
	ldr r1, [r4]
	add r2, r0, #1
	mov r0, r5
	str r2, [r4, #0xc]
	mov r2, #0
	str r2, [r1]
	bl FUN_020D3A4C
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0
_020DC718: .4byte 0x021E3820
	arm_func_end FUN_020DC698

	arm_func_start FUN_020DC71C
FUN_020DC71C: @ 0x020DC71C
	push {r3, r4, r5, r6, r7, lr}
	ldr r4, _020DC7A4 @ =0x021E3820
	mov r7, r0
	mov r6, r1
	bl FUN_020D3A38
	ldr r1, [r4, #8]
	mov r5, r0
	cmp r1, r7
	bne _020DC74C
	ldr r0, [r4, #0xc]
	cmp r0, #0
	bne _020DC754
_020DC74C:
	bl FUN_020D3F48
	b _020DC78C
_020DC754:
	ldr r0, [r4, #0x18]
	cmp r0, r6
	beq _020DC764
	bl FUN_020D3F48
_020DC764:
	ldr r0, [r4, #0xc]
	subs r0, r0, #1
	str r0, [r4, #0xc]
	bne _020DC78C
	mvn r2, #2
	mov r1, #0
	add r0, r4, #0x10
	str r2, [r4, #8]
	str r1, [r4, #0x18]
	bl FUN_020D1ECC
_020DC78C:
	ldr r1, [r4]
	mov r2, #0
	mov r0, r5
	str r2, [r1]
	bl FUN_020D3A4C
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020DC7A4: .4byte 0x021E3820
	arm_func_end FUN_020DC71C

	arm_func_start FUN_020DC7A8
FUN_020DC7A8: @ 0x020DC7A8
	push {r4, lr}
	sub sp, sp, #8
	ldr r4, _020DC89C @ =0x021E3820
	ldr r1, _020DC8A0 @ =0x021E37C0
	mvn r2, #2
	mov r0, #0
	str r2, [r4, #8]
	mov r2, #0x60
	str r0, [r4, #0xc]
	str r0, [r4, #0x18]
	str r1, [r4]
	bl FUN_020D4858
	ldr r0, _020DC8A0 @ =0x021E37C0
	mov r1, #0x60
	bl FUN_020D2894
	mvn r1, #0
	ldr r0, _020DC8A4 @ =0x027FFC40
	str r1, [r4, #0x118]
	str r1, [r4, #0x11c]
	ldrh r0, [r0]
	cmp r0, #2
	moveq r0, #1
	movne r0, #0
	cmp r0, #0
	bne _020DC81C
	ldr r0, _020DC8A8 @ =0x027FFE00
	mov r2, #0x160
	sub r1, r0, #0x380
	bl FUN_020D4A50
_020DC81C:
	mov r2, #0
	mov r0, #4
	str r0, [r4, #0x108]
	str r2, [r4, #0x14]
	str r2, [r4, #0x10]
	str r2, [r4, #0x110]
	str r2, [r4, #0x10c]
	mov r0, #0x400
	str r0, [sp]
	ldr ip, [r4, #0x108]
	ldr r1, _020DC8AC @ =FUN_020DD900
	ldr r3, _020DC8B0 @ =0x021E3E40
	add r0, r4, #0x44
	str ip, [sp, #4]
	bl FUN_020D1AD4
	add r0, r4, #0x44
	bl FUN_020D1F34
	ldr r1, _020DC8B4 @ =FUN_020DD8CC
	mov r0, #0xb
	bl FUN_020D6654
	ldr r0, _020DC8A4 @ =0x027FFC40
	ldrh r0, [r0]
	cmp r0, #2
	moveq r0, #1
	movne r0, #0
	cmp r0, #0
	addne sp, sp, #8
	popne {r4, pc}
	mov r0, #1
	bl FUN_020DC8E0
	add sp, sp, #8
	pop {r4, pc}
	.align 2, 0
_020DC89C: .4byte 0x021E3820
_020DC8A0: .4byte 0x021E37C0
_020DC8A4: .4byte 0x027FFC40
_020DC8A8: .4byte 0x027FFE00
_020DC8AC: .4byte FUN_020DD900
_020DC8B0: .4byte 0x021E3E40
_020DC8B4: .4byte FUN_020DD8CC
	arm_func_end FUN_020DC7A8

	arm_func_start FUN_020DC8B8
FUN_020DC8B8: @ 0x020DC8B8
	ldr r0, _020DC8C4 @ =0x021E37A8
	ldr r0, [r0]
	bx lr
	.align 2, 0
_020DC8C4: .4byte 0x021E37A8
	arm_func_end FUN_020DC8B8

	arm_func_start FUN_020DC8C8
FUN_020DC8C8: @ 0x020DC8C8
	push {r3, lr}
	bl FUN_020DC8B8
	cmp r0, #0
	popne {r3, pc}
	bl FUN_020D3F48
	pop {r3, pc}
	arm_func_end FUN_020DC8C8

	arm_func_start FUN_020DC8E0
FUN_020DC8E0: @ 0x020DC8E0
	ldr r1, _020DC8EC @ =0x021E37A8
	str r0, [r1]
	bx lr
	.align 2, 0
_020DC8EC: .4byte 0x021E37A8
	arm_func_end FUN_020DC8E0

	arm_func_start FUN_020DC8F0
FUN_020DC8F0: @ 0x020DC8F0
	push {r3, r4, r5, lr}
	ldr r4, _020DC938 @ =0x021E3820
	bl FUN_020D3A38
	mov r5, r0
	b _020DC90C
_020DC904:
	add r0, r4, #0x10c
	bl FUN_020D1E7C
_020DC90C:
	ldr r0, [r4, #0x114]
	tst r0, #4
	bne _020DC904
	mov r0, r5
	bl FUN_020D3A4C
	ldr r0, [r4]
	ldr r0, [r0]
	cmp r0, #0
	moveq r0, #1
	movne r0, #0
	pop {r3, r4, r5, pc}
	.align 2, 0
_020DC938: .4byte 0x021E3820
	arm_func_end FUN_020DC8F0

	arm_func_start FUN_020DC93C
FUN_020DC93C: @ 0x020DC93C
	ldr r0, _020DC954 @ =0x021E3820
	ldr r0, [r0, #0x114]
	tst r0, #4
	moveq r0, #1
	movne r0, #0
	bx lr
	.align 2, 0
_020DC954: .4byte 0x021E3820
	arm_func_end FUN_020DC93C

	arm_func_start FUN_020DC958
FUN_020DC958: @ 0x020DC958
	ldr r0, _020DC968 @ =0x021E3820
	ldr r0, [r0]
	ldr r0, [r0]
	bx lr
	.align 2, 0
_020DC968: .4byte 0x021E3820
	arm_func_end FUN_020DC958

	arm_func_start FUN_020DC96C
FUN_020DC96C: @ 0x020DC96C
	push {r4, lr}
	mov r4, r0
	mov r1, #1
	bl FUN_020DC698
	mov r0, r4
	bl FUN_020D1548
	pop {r4, pc}
	arm_func_end FUN_020DC96C

	arm_func_start FUN_020DC988
FUN_020DC988: @ 0x020DC988
	push {r4, lr}
	mov r4, r0
	bl FUN_020D1564
	mov r0, r4
	mov r1, #1
	bl FUN_020DC71C
	pop {r4, pc}
	arm_func_end FUN_020DC988

	arm_func_start FUN_020DC9A4
FUN_020DC9A4: @ 0x020DC9A4
	ldr ip, _020DC9B0 @ =FUN_020DC698
	mov r1, #2
	bx ip
	.align 2, 0
_020DC9B0: .4byte FUN_020DC698
	arm_func_end FUN_020DC9A4

	arm_func_start FUN_020DC9B4
FUN_020DC9B4: @ 0x020DC9B4
	push {r4, lr}
	mov r4, r0
	bl FUN_020DD1A4
	cmp r0, #0
	bne _020DC9CC
	bl FUN_020DD198
_020DC9CC:
	mov r0, r4
	mov r1, #2
	bl FUN_020DC71C
	pop {r4, pc}
	arm_func_end FUN_020DC9B4

	arm_func_start FUN_020DC9DC
FUN_020DC9DC: @ 0x020DC9DC
	ldr r2, _020DC9EC @ =0x021E3820
	str r0, [r2, #0x118]
	str r1, [r2, #0x11c]
	bx lr
	.align 2, 0
_020DC9EC: .4byte 0x021E3820
	arm_func_end FUN_020DC9DC

	arm_func_start FUN_020DC9F0
FUN_020DC9F0: @ 0x020DC9F0
	push {r3, r4, r5, lr}
	ldr r1, _020DCD54 @ =0x021E3820
	mov r5, r0
	ldr r4, [r1]
	mov r1, #0
	add r0, r4, #0x18
	mov r2, #0x48
	bl FUN_020D4994
	ldr r0, _020DCD58 @ =0x0000203F
	str r5, [r4, #4]
	str r0, [r4, #0x58]
	cmp r5, #0
	popeq {r3, r4, r5, pc}
	asr r0, r5, #8
	and r0, r0, #0xff
	mov r3, #1
	lsl ip, r3, r0
	and r2, r5, #0xff
	asr r1, r5, #0x10
	str ip, [r4, #0x18]
	mov r0, #0xff
	strb r0, [r4, #0x54]
	cmp r2, #1
	and r0, r1, #0xff
	bne _020DCB2C
	cmp ip, #0x2000
	bhi _020DCA6C
	bhs _020DCAA8
	cmp ip, #0x200
	beq _020DCA88
	b _020DCD34
_020DCA6C:
	cmp ip, #0x10000
	bhi _020DCA7C
	beq _020DCACC
	b _020DCD34
_020DCA7C:
	cmp ip, #0x20000
	beq _020DCAF0
	b _020DCD34
_020DCA88:
	mov r0, #0x10
	str r0, [r4, #0x24]
	str r3, [r4, #0x28]
	mov r0, #5
	str r0, [r4, #0x2c]
	mov r0, #0xf0
	strb r0, [r4, #0x54]
	b _020DCB10
_020DCAA8:
	mov r0, #0x20
	str r0, [r4, #0x24]
	mov r0, #2
	str r0, [r4, #0x28]
	mov r0, #5
	str r0, [r4, #0x2c]
	mov r0, #0
	strb r0, [r4, #0x54]
	b _020DCB10
_020DCACC:
	mov r0, #0x80
	str r0, [r4, #0x24]
	mov r0, #2
	str r0, [r4, #0x28]
	mov r0, #0xa
	str r0, [r4, #0x2c]
	mov r0, #0
	strb r0, [r4, #0x54]
	b _020DCB10
_020DCAF0:
	mov r0, #0x100
	str r0, [r4, #0x24]
	mov r0, #3
	str r0, [r4, #0x28]
	mov r0, #5
	str r0, [r4, #0x2c]
	mov r0, #0
	strb r0, [r4, #0x54]
_020DCB10:
	ldr r0, [r4, #0x24]
	str r0, [r4, #0x1c]
	ldr r0, [r4, #0x58]
	orr r0, r0, #0x40
	orr r0, r0, #0x4300
	str r0, [r4, #0x58]
	pop {r3, r4, r5, pc}
_020DCB2C:
	cmp r2, #2
	bne _020DCCF4
	cmp ip, #0x100000
	bhi _020DCB5C
	bhs _020DCB80
	cmp ip, #0x40000
	bhi _020DCB50
	beq _020DCB80
	b _020DCD34
_020DCB50:
	cmp ip, #0x80000
	beq _020DCB80
	b _020DCD34
_020DCB5C:
	cmp ip, #0x400000
	bhi _020DCB74
	bhs _020DCBF8
	cmp ip, #0x200000
	beq _020DCBAC
	b _020DCD34
_020DCB74:
	cmp ip, #0x800000
	beq _020DCC48
	b _020DCD34
_020DCB80:
	mov r0, #0x19
	str r0, [r4, #0x30]
	mov r1, #0x12c
	str r1, [r4, #0x34]
	ldr r0, _020DCD5C @ =0x00001388
	str r1, [r4, #0x50]
	str r0, [r4, #0x40]
	ldr r0, [r4, #0x58]
	orr r0, r0, #0x480
	str r0, [r4, #0x58]
	b _020DCCC4
_020DCBAC:
	mov r0, #0x17
	str r0, [r4, #0x30]
	mov r1, #0x12c
	str r1, [r4, #0x34]
	mov r1, #0x1f4
	ldr r0, _020DCD5C @ =0x00001388
	str r1, [r4, #0x40]
	str r0, [r4, #0x44]
	lsl r1, r0, #1
	ldr r0, _020DCD60 @ =0x0000EA60
	str r1, [r4, #0x38]
	str r0, [r4, #0x3c]
	mov r0, #0
	strb r0, [r4, #0x54]
	ldr r0, [r4, #0x58]
	orr r0, r0, #0x80
	orr r0, r0, #0x5400
	str r0, [r4, #0x58]
	b _020DCCC4
_020DCBF8:
	mov r0, #0x258
	str r0, [r4, #0x40]
	add r0, r0, #0x960
	str r0, [r4, #0x44]
	mov r0, #0x46
	str r0, [r4, #0x48]
	mov r0, #0x96
	str r0, [r4, #0x4c]
	ldr r1, _020DCD64 @ =0x000059D8
	ldr r0, _020DCD68 @ =0x000C3500
	str r1, [r4, #0x38]
	str r0, [r4, #0x3c]
	mov r0, #0
	strb r0, [r4, #0x54]
	mov r0, #0x1000
	str r0, [r4, #0x20]
	ldr r0, [r4, #0x58]
	orr r0, r0, #0xd000
	str r0, [r4, #0x58]
	b _020DCCC4
_020DCC48:
	cmp r0, #0
	bne _020DCC88
	mov r0, #0x3e8
	str r0, [r4, #0x40]
	add r0, r0, #0x7d0
	str r0, [r4, #0x44]
	ldr r1, _020DCD6C @ =0x000109A0
	ldr r0, _020DCD70 @ =0x00027100
	str r1, [r4, #0x38]
	str r0, [r4, #0x3c]
	mov r0, #0
	strb r0, [r4, #0x54]
	ldr r0, [r4, #0x58]
	orr r0, r0, #0x5000
	str r0, [r4, #0x58]
	b _020DCCC4
_020DCC88:
	cmp r0, #1
	bne _020DCCC4
	mov r0, #0x3e8
	str r0, [r4, #0x40]
	add r0, r0, #0x7d0
	str r0, [r4, #0x44]
	ldr r1, _020DCD6C @ =0x000109A0
	ldr r0, _020DCD70 @ =0x00027100
	str r1, [r4, #0x38]
	str r0, [r4, #0x3c]
	mov r0, #0x84
	strb r0, [r4, #0x54]
	ldr r0, [r4, #0x58]
	orr r0, r0, #0x5000
	str r0, [r4, #0x58]
_020DCCC4:
	mov r0, #0x10000
	str r0, [r4, #0x1c]
	mov r0, #0x100
	str r0, [r4, #0x24]
	mov r0, #3
	str r0, [r4, #0x28]
	mov r0, #5
	str r0, [r4, #0x2c]
	ldr r0, [r4, #0x58]
	orr r0, r0, #0xb40
	str r0, [r4, #0x58]
	pop {r3, r4, r5, pc}
_020DCCF4:
	cmp r2, #3
	bne _020DCD34
	cmp ip, #0x2000
	cmpne ip, #0x8000
	bne _020DCD34
	str ip, [r4, #0x24]
	str ip, [r4, #0x1c]
	mov r0, #2
	str r0, [r4, #0x28]
	mov r0, #0
	strb r0, [r4, #0x54]
	ldr r0, [r4, #0x58]
	orr r0, r0, #0x40
	orr r0, r0, #0x4300
	str r0, [r4, #0x58]
	pop {r3, r4, r5, pc}
_020DCD34:
	mov r1, #0
	str r1, [r4, #4]
	str r1, [r4, #0x18]
	ldr r0, _020DCD54 @ =0x021E3820
	mov r1, #3
	ldr r0, [r0]
	str r1, [r0]
	pop {r3, r4, r5, pc}
	.align 2, 0
_020DCD54: .4byte 0x021E3820
_020DCD58: .4byte 0x0000203F
_020DCD5C: .4byte 0x00001388
_020DCD60: .4byte 0x0000EA60
_020DCD64: .4byte 0x000059D8
_020DCD68: .4byte 0x000C3500
_020DCD6C: .4byte 0x000109A0
_020DCD70: .4byte 0x00027100
	arm_func_end FUN_020DC9F0

	arm_func_start FUN_020DCD74
FUN_020DCD74: @ 0x020DCD74
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sb, r0
	ldr r7, [sb, #0x2c]
	ldr r0, _020DCF5C @ =_version_NINTENDO_BACKUP
	ldr r4, [sb, #0x34]
	ldr sl, [sb, #0x30]
	mov r5, #0x100
	bl OSi_ReferSymbol
	cmp r7, #0xb
	bne _020DCDA8
	bl FUN_020DD04C
	mov r5, r0
	b _020DCDB8
_020DCDA8:
	cmp r7, #0xf
	ldreq r0, _020DCF60 @ =0x021E3820
	ldreq r0, [r0]
	ldreq r5, [r0, #0x20]
_020DCDB8:
	add r6, sb, #0x120
	mov fp, #9
_020DCDC0:
	ldr r8, [sb, #0x24]
	ldr r0, [sb]
	cmp r5, r8
	movlo r8, r5
	str r8, [r0, #0x14]
	ldr r0, [sb, #0x114]
	tst r0, #0x40
	beq _020DCDFC
	ldr r0, [sb, #0x114]
	mov r1, #7
	bic r0, r0, #0x40
	str r0, [sb, #0x114]
	ldr r0, [sb]
	str r1, [r0]
	b _020DCF08
_020DCDFC:
	cmp r4, #3
	addls pc, pc, r4, lsl #2
	b _020DCE8C
_020DCE08: @ jump table
	b _020DCE18 @ case 0
	b _020DCE3C @ case 1
	b _020DCE3C @ case 2
	b _020DCE74 @ case 3
_020DCE18:
	mov r0, r6
	mov r1, r8
	bl FUN_020D285C
	ldr r1, [sb, #0x1c]
	ldr r0, [sb]
	str r1, [r0, #0xc]
	ldr r0, [sb]
	str r6, [r0, #0x10]
	b _020DCE8C
_020DCE3C:
	ldr r0, [sb, #0x1c]
	mov r1, r6
	mov r2, r8
	bl FUN_020D4A50
	mov r0, r6
	mov r1, r8
	bl FUN_020D2894
	bl FUN_020D28B8
	ldr r0, [sb]
	str r6, [r0, #0xc]
	ldr r1, [sb, #0x20]
	ldr r0, [sb]
	str r1, [r0, #0x10]
	b _020DCE8C
_020DCE74:
	ldr r1, [sb, #0x1c]
	ldr r0, [sb]
	str r1, [r0, #0xc]
	ldr r1, [sb, #0x20]
	ldr r0, [sb]
	str r1, [r0, #0x10]
_020DCE8C:
	mov r0, sb
	mov r1, r7
	mov r2, sl
	bl FUN_020DD950
	cmp r0, #0
	beq _020DCF08
	cmp r4, #2
	bne _020DCEC8
	mov r0, sb
	mov r1, fp
	mov r2, #1
	bl FUN_020DD950
	cmp r0, #0
	beq _020DCF08
	b _020DCEE0
_020DCEC8:
	cmp r4, #0
	bne _020DCEE0
	ldr r1, [sb, #0x20]
	mov r0, r6
	mov r2, r8
	bl FUN_020D4A50
_020DCEE0:
	ldr r0, [sb, #0x1c]
	add r0, r0, r8
	str r0, [sb, #0x1c]
	ldr r0, [sb, #0x20]
	add r0, r0, r8
	str r0, [sb, #0x20]
	ldr r0, [sb, #0x24]
	subs r0, r0, r8
	str r0, [sb, #0x24]
	bne _020DCDC0
_020DCF08:
	ldr r6, [sb, #0x38]
	ldr r5, [sb, #0x3c]
	bl FUN_020D3A38
	ldr r1, [sb, #0x114]
	mov r4, r0
	bic r0, r1, #0x4c
	str r0, [sb, #0x114]
	add r0, sb, #0x10c
	bl FUN_020D1ECC
	ldr r0, [sb, #0x114]
	tst r0, #0x10
	beq _020DCF40
	add r0, sb, #0x44
	bl FUN_020D1F34
_020DCF40:
	mov r0, r4
	bl FUN_020D3A4C
	cmp r6, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r0, r5
	blx r6
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020DCF5C: .4byte _version_NINTENDO_BACKUP
_020DCF60: .4byte 0x021E3820
	arm_func_end FUN_020DCD74

	arm_func_start FUN_020DCF64
FUN_020DCF64: @ 0x020DCF64
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov sb, r0
	ldr r4, _020DD03C @ =0x021E3820
	ldr r0, _020DD040 @ =_version_NINTENDO_BACKUP
	mov r8, r1
	mov r7, r2
	mov r6, r3
	bl OSi_ReferSymbol
	bl FUN_020D3A38
	ldr r1, [r4, #0x114]
	mov r5, r0
	tst r1, #4
	beq _020DCFAC
_020DCF98:
	add r0, r4, #0x10c
	bl FUN_020D1E7C
	ldr r0, [r4, #0x114]
	tst r0, #4
	bne _020DCF98
_020DCFAC:
	ldr r0, [r4, #0x114]
	ldr r1, [sp, #0x20]
	orr r2, r0, #4
	mov r0, r5
	str r2, [r4, #0x114]
	str r6, [r4, #0x38]
	str r1, [r4, #0x3c]
	bl FUN_020D3A4C
	ldr r3, [sp, #0x28]
	ldr r2, [sp, #0x2c]
	ldr r1, [sp, #0x30]
	ldr r0, [sp, #0x24]
	str sb, [r4, #0x1c]
	str r8, [r4, #0x20]
	str r7, [r4, #0x24]
	str r3, [r4, #0x2c]
	str r2, [r4, #0x30]
	str r1, [r4, #0x34]
	cmp r0, #0
	beq _020DD00C
	ldr r0, _020DD044 @ =FUN_020DCD74
	bl FUN_020DC65C
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_020DD00C:
	ldr r0, _020DD048 @ =0x021E16A0
	ldr r1, _020DD03C @ =0x021E3820
	ldr r2, [r0, #4]
	mov r0, r4
	str r2, [r1, #0x104]
	bl FUN_020DCD74
	ldr r0, [r4]
	ldr r0, [r0]
	cmp r0, #0
	moveq r0, #1
	movne r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0
_020DD03C: .4byte 0x021E3820
_020DD040: .4byte _version_NINTENDO_BACKUP
_020DD044: .4byte FUN_020DCD74
_020DD048: .4byte 0x021E16A0
	arm_func_end FUN_020DCF64

	arm_func_start FUN_020DD04C
FUN_020DD04C: @ 0x020DD04C
	ldr r0, _020DD05C @ =0x021E3820
	ldr r0, [r0]
	ldr r0, [r0, #0x1c]
	bx lr
	.align 2, 0
_020DD05C: .4byte 0x021E3820
	arm_func_end FUN_020DD04C

	arm_func_start FUN_020DD060
FUN_020DD060: @ 0x020DD060
	push {r3, r4, r5, r6, r7, lr}
	mov r6, r0
	ldr r0, _020DD18C @ =_version_NINTENDO_BACKUP
	ldr r4, _020DD190 @ =0x021E3820
	bl OSi_ReferSymbol
	cmp r6, #0
	bne _020DD080
	bl FUN_020D3F48
_020DD080:
	bl FUN_020DC8C8
	bl FUN_020D3A38
	ldr r1, [r4, #0x114]
	mov r5, r0
	tst r1, #4
	beq _020DD0AC
_020DD098:
	add r0, r4, #0x10c
	bl FUN_020D1E7C
	ldr r0, [r4, #0x114]
	tst r0, #4
	bne _020DD098
_020DD0AC:
	ldr r0, [r4, #0x114]
	mov r1, #0
	orr r2, r0, #4
	mov r0, r5
	str r2, [r4, #0x114]
	str r1, [r4, #0x38]
	str r1, [r4, #0x3c]
	bl FUN_020D3A4C
	mov r0, r6
	bl FUN_020DC9F0
	ldr r0, _020DD194 @ =0x021E16A0
	ldr r1, _020DD190 @ =0x021E3820
	ldr r2, [r0, #4]
	mov r0, r4
	str r2, [r1, #0x104]
	mov r1, #2
	mov r2, #1
	bl FUN_020DD950
	ldr r0, [r4]
	mov r1, #0
	str r1, [r0, #0xc]
	ldr r0, [r4]
	add r1, r4, #0x120
	str r1, [r0, #0x10]
	ldr r1, [r4]
	mov r2, #1
	mov r0, r4
	str r2, [r1, #0x14]
	mov r1, #6
	bl FUN_020DD950
	ldr r7, [r4, #0x38]
	ldr r6, [r4, #0x3c]
	bl FUN_020D3A38
	mov r5, r0
	ldr r1, [r4, #0x114]
	add r0, r4, #0x10c
	bic r1, r1, #0x4c
	str r1, [r4, #0x114]
	bl FUN_020D1ECC
	ldr r0, [r4, #0x114]
	tst r0, #0x10
	beq _020DD15C
	add r0, r4, #0x44
	bl FUN_020D1F34
_020DD15C:
	mov r0, r5
	bl FUN_020D3A4C
	cmp r7, #0
	beq _020DD174
	mov r0, r6
	blx r7
_020DD174:
	ldr r0, [r4]
	ldr r0, [r0]
	cmp r0, #0
	moveq r0, #1
	movne r0, #0
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020DD18C: .4byte _version_NINTENDO_BACKUP
_020DD190: .4byte 0x021E3820
_020DD194: .4byte 0x021E16A0
	arm_func_end FUN_020DD060

	arm_func_start FUN_020DD198
FUN_020DD198: @ 0x020DD198
	ldr ip, _020DD1A0 @ =FUN_020DC8F0
	bx ip
	.align 2, 0
_020DD1A0: .4byte FUN_020DC8F0
	arm_func_end FUN_020DD198

	arm_func_start FUN_020DD1A4
FUN_020DD1A4: @ 0x020DD1A4
	ldr ip, _020DD1AC @ =FUN_020DC93C
	bx ip
	.align 2, 0
_020DD1AC: .4byte FUN_020DC93C
	arm_func_end FUN_020DD1A4

	arm_func_start FUN_020DD1B0
FUN_020DD1B0: @ 0x020DD1B0
	push {r3, lr}
	bl FUN_020D3A38
	ldr r1, _020DD1D0 @ =0x021E3820
	ldr r2, [r1, #0x114]
	orr r2, r2, #0x40
	str r2, [r1, #0x114]
	bl FUN_020D3A4C
	pop {r3, pc}
	.align 2, 0
_020DD1D0: .4byte 0x021E3820
	arm_func_end FUN_020DD1B0

	arm_func_start FUN_020DD1D4
FUN_020DD1D4: @ 0x020DD1D4
	push {r3, r4, r5, lr}
	ldr r4, _020DD25C @ =0x021E3820
	mov r1, #0x200
	ldr r3, [r4, #0x1c]
	rsb r1, r1, #0
	ldr r2, [r0, #8]
	and r3, r3, r1
	cmp r3, r2
	bne _020DD248
	ldr r2, [r4, #0x1c]
	ldr r1, [r4, #0x24]
	sub r3, r2, r3
	rsb r5, r3, #0x200
	cmp r5, r1
	movhi r5, r1
	add r0, r0, #0x20
	ldr r1, [r4, #0x20]
	mov r2, r5
	add r0, r0, r3
	bl FUN_020D4A50
	ldr r2, [r4, #0x1c]
	ldr r1, [r4, #0x20]
	ldr r0, [r4, #0x24]
	add r2, r2, r5
	add r1, r1, r5
	sub r0, r0, r5
	str r2, [r4, #0x1c]
	str r1, [r4, #0x20]
	str r0, [r4, #0x24]
_020DD248:
	ldr r0, [r4, #0x24]
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	pop {r3, r4, r5, pc}
	.align 2, 0
_020DD25C: .4byte 0x021E3820
	arm_func_end FUN_020DD1D4

	arm_func_start FUN_020DD260
FUN_020DD260: @ 0x020DD260
	ldr r3, _020DD2B8 @ =0x040001A4
_020DD264:
	ldr r2, [r3]
	tst r2, #0x80000000
	bne _020DD264
	ldr r3, _020DD2BC @ =0x040001A1
	mov r2, #0xc0
	strb r2, [r3]
	lsr r2, r0, #0x18
	strb r2, [r3, #7]
	lsr r2, r0, #0x10
	strb r2, [r3, #8]
	lsr r2, r0, #8
	strb r2, [r3, #9]
	strb r0, [r3, #0xa]
	lsr r0, r1, #0x18
	strb r0, [r3, #0xb]
	lsr r0, r1, #0x10
	strb r0, [r3, #0xc]
	lsr r0, r1, #8
	strb r0, [r3, #0xd]
	strb r1, [r3, #0xe]
	bx lr
	.align 2, 0
_020DD2B8: .4byte 0x040001A4
_020DD2BC: .4byte 0x040001A1
	arm_func_end FUN_020DD260

	arm_func_start FUN_020DD2C0
FUN_020DD2C0: @ 0x020DD2C0
	push {r3, r4, r5, lr}
	ldr r4, _020DD304 @ =0x021E3820
	ldr r1, _020DD308 @ =0x04100010
	ldr r0, [r4, #0x28]
	ldr r2, [r4, #0x20]
	mov r3, #0x200
	ldr r5, _020DD30C @ =0x021E3E60
	bl FUN_020D4CE8
	ldr r1, [r4, #0x1c]
	lsr r0, r1, #8
	orr r0, r0, #0xb7000000
	lsl r1, r1, #0x18
	bl FUN_020DD260
	ldr r1, [r5, #4]
	ldr r0, _020DD310 @ =0x040001A4
	str r1, [r0]
	pop {r3, r4, r5, pc}
	.align 2, 0
_020DD304: .4byte 0x021E3820
_020DD308: .4byte 0x04100010
_020DD30C: .4byte 0x021E3E60
_020DD310: .4byte 0x040001A4
	arm_func_end FUN_020DD2C0

	arm_func_start FUN_020DD314
FUN_020DD314: @ 0x020DD314
	push {r3, r4, r5, r6, r7, lr}
	ldr r0, _020DD3E0 @ =0x021E3820
	ldr r0, [r0, #0x28]
	bl FUN_020D4294
	ldr r3, _020DD3E0 @ =0x021E3820
	ldr r0, [r3, #0x24]
	ldr r2, [r3, #0x1c]
	ldr r1, [r3, #0x20]
	subs r0, r0, #0x200
	str r0, [r3, #0x24]
	movne r0, #1
	add r2, r2, #0x200
	add r1, r1, #0x200
	moveq r0, #0
	str r2, [r3, #0x1c]
	str r1, [r3, #0x20]
	cmp r0, #0
	bne _020DD3D8
	mov r0, #0x80000
	bl FUN_020D1204
	mov r0, #0x80000
	bl FUN_020D1234
	ldr r4, _020DD3E0 @ =0x021E3820
	bl FUN_020DD660
	bl FUN_020DDBC0
	ldr r0, [r4]
	mov r1, #0
	str r1, [r0]
	ldr r5, [r4, #0x38]
	ldr r6, [r4, #0x3c]
	bl FUN_020D3A38
	ldr r1, [r4, #0x114]
	mov r7, r0
	bic r0, r1, #0x4c
	str r0, [r4, #0x114]
	add r0, r4, #0x10c
	bl FUN_020D1ECC
	ldr r0, [r4, #0x114]
	tst r0, #0x10
	beq _020DD3BC
	add r0, r4, #0x44
	bl FUN_020D1F34
_020DD3BC:
	mov r0, r7
	bl FUN_020D3A4C
	cmp r5, #0
	popeq {r3, r4, r5, r6, r7, pc}
	mov r0, r6
	blx r5
	pop {r3, r4, r5, r6, r7, pc}
_020DD3D8:
	bl FUN_020DD2C0
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020DD3E0: .4byte 0x021E3820
	arm_func_end FUN_020DD314

	arm_func_start FUN_020DD3E4
FUN_020DD3E4: @ 0x020DD3E4
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	ldr r4, _020DD55C @ =0x021E3820
	mov r6, #0
	ldr sb, [r4, #0x20]
	mov fp, r0
	mov r7, r6
	mov r8, r6
	mov r1, r6
	ands sl, sb, #0x1f
	ldr r5, [r4, #0x24]
	bne _020DD41C
	ldr r0, [r4, #0x28]
	cmp r0, #3
	movls r1, #1
_020DD41C:
	cmp r1, #0
	beq _020DD470
	bl FUN_020D3148
	ldr r1, _020DD560 @ =FUN_01FF8000
	add r3, sb, r5
	cmp r3, r1
	mov r1, #1
	mov r2, #0
	bls _020DD448
	cmp sb, #0x2000000
	movlo r2, r1
_020DD448:
	cmp r2, #0
	bne _020DD468
	cmp r0, r3
	bhs _020DD464
	add r0, r0, #0x4000
	cmp r0, sb
	bhi _020DD468
_020DD464:
	mov r1, #0
_020DD468:
	cmp r1, #0
	moveq r8, #1
_020DD470:
	cmp r8, #0
	beq _020DD48C
	ldr r1, [r4, #0x1c]
	ldr r0, _020DD564 @ =0x000001FF
	orr r1, r1, r5
	tst r1, r0
	moveq r7, #1
_020DD48C:
	ldr r0, _020DD568 @ =_02110FB8
	cmp r7, #0
	ldr r0, [r0]
	cmpne r5, #0
	ldr r0, [r0, #0x60]
	movne r6, #1
	bic r0, r0, #0x7000000
	orr r0, r0, #0xa1000000
	cmp r6, #0
	str r0, [fp, #4]
	beq _020DD554
	bl FUN_020D3A38
	ldr r1, [r4, #0x118]
	mov r7, r0
	cmp r5, r1
	bhs _020DD4DC
	mov r0, sb
	mov r1, r5
	bl FUN_020D28D0
	b _020DD4E0
_020DD4DC:
	bl FUN_020D28C4
_020DD4E0:
	ldr r0, [r4, #0x11c]
	cmp r5, r0
	bhs _020DD528
	cmp sl, #0
	beq _020DD514
	sub sb, sb, sl
	mov r0, sb
	mov r1, #0x20
	bl FUN_020D2878
	add r0, sb, r5
	mov r1, #0x20
	bl FUN_020D2878
	add r5, r5, #0x20
_020DD514:
	mov r0, sb
	mov r1, r5
	bl FUN_020D285C
	bl FUN_020D28B8
	b _020DD52C
_020DD528:
	bl FUN_020D2828
_020DD52C:
	ldr r1, _020DD56C @ =FUN_020DD314
	mov r0, #0x80000
	bl FUN_020D1004
	mov r0, #0x80000
	bl FUN_020D1234
	mov r0, #0x80000
	bl FUN_020D11D4
	mov r0, r7
	bl FUN_020D3A4C
	bl FUN_020DD2C0
_020DD554:
	mov r0, r6
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020DD55C: .4byte 0x021E3820
_020DD560: .4byte FUN_01FF8000
_020DD564: .4byte 0x000001FF
_020DD568: .4byte _02110FB8
_020DD56C: .4byte FUN_020DD314
	arm_func_end FUN_020DD3E4

	arm_func_start FUN_020DD570
FUN_020DD570: @ 0x020DD570
	push {r4, r5, r6, lr}
	ldr r4, _020DD654 @ =0x021E3820
	mov r6, r0
_020DD57C:
	mov r0, #0x200
	ldr r1, [r4, #0x1c]
	rsb r0, r0, #0
	and r2, r1, r0
	cmp r2, r1
	bne _020DD5AC
	ldr r5, [r4, #0x20]
	tst r5, #3
	bne _020DD5AC
	ldr r0, [r4, #0x24]
	cmp r0, #0x200
	bhs _020DD5B4
_020DD5AC:
	str r2, [r6, #8]
	add r5, r6, #0x20
_020DD5B4:
	lsr r0, r2, #8
	orr r0, r0, #0xb7000000
	lsl r1, r2, #0x18
	bl FUN_020DD260
	mov ip, #0
	ldr r0, [r6, #4]
	ldr r2, _020DD658 @ =0x040001A4
	mov lr, ip
	str r0, [r2]
	ldr r1, _020DD65C @ =0x04100010
_020DD5DC:
	ldr r3, [r2]
	tst r3, #0x800000
	beq _020DD5FC
	ldr r0, [r1]
	cmp lr, #0x200
	strlo r0, [r5, ip, lsl #2]
	addlo lr, lr, #4
	addlo ip, ip, #1
_020DD5FC:
	tst r3, #0x80000000
	bne _020DD5DC
	ldr r0, [r4, #0x20]
	cmp r5, r0
	bne _020DD640
	ldr r0, _020DD654 @ =0x021E3820
	ldr r1, [r0, #0x1c]
	add r1, r1, #0x200
	str r1, [r0, #0x1c]
	ldr r1, [r0, #0x20]
	add r1, r1, #0x200
	str r1, [r0, #0x20]
	ldr r1, [r0, #0x24]
	subs r1, r1, #0x200
	str r1, [r0, #0x24]
	popeq {r4, r5, r6, pc}
	b _020DD57C
_020DD640:
	mov r0, r6
	bl FUN_020DD1D4
	cmp r0, #0
	bne _020DD57C
	pop {r4, r5, r6, pc}
	.align 2, 0
_020DD654: .4byte 0x021E3820
_020DD658: .4byte 0x040001A4
_020DD65C: .4byte 0x04100010
	arm_func_end FUN_020DD570

	arm_func_start FUN_020DD660
FUN_020DD660: @ 0x020DD660
	push {r3, lr}
	mov r0, #0xb8000000
	mov r1, #0
	bl FUN_020DD260
	ldr r1, _020DD6B0 @ =_02110FB8
	mov r0, #0x2000
	ldr r1, [r1]
	rsb r0, r0, #0
	ldr r2, [r1, #0x60]
	ldr r1, _020DD6B4 @ =0x040001A4
	bic r2, r2, #0x7000000
	orr r2, r2, #0xa7000000
	and r0, r2, r0
	str r0, [r1]
_020DD698:
	ldr r0, [r1]
	tst r0, #0x800000
	beq _020DD698
	ldr r0, _020DD6B8 @ =0x04100010
	ldr r0, [r0]
	pop {r3, pc}
	.align 2, 0
_020DD6B0: .4byte _02110FB8
_020DD6B4: .4byte 0x040001A4
_020DD6B8: .4byte 0x04100010
	arm_func_end FUN_020DD660

	arm_func_start FUN_020DD6BC
FUN_020DD6BC: @ 0x020DD6BC
	push {r3, r4, r5, r6, r7, lr}
	ldr r4, _020DD74C @ =0x021E3E60
	mov r0, r4
	bl FUN_020DD1D4
	cmp r0, #0
	beq _020DD6E0
	ldr r1, [r4]
	mov r0, r4
	blx r1
_020DD6E0:
	ldr r4, _020DD750 @ =0x021E3820
	bl FUN_020DD660
	bl FUN_020DDBC0
	ldr r0, [r4]
	mov r1, #0
	str r1, [r0]
	ldr r5, [r4, #0x38]
	ldr r6, [r4, #0x3c]
	bl FUN_020D3A38
	ldr r1, [r4, #0x114]
	mov r7, r0
	bic r0, r1, #0x4c
	str r0, [r4, #0x114]
	add r0, r4, #0x10c
	bl FUN_020D1ECC
	ldr r0, [r4, #0x114]
	tst r0, #0x10
	beq _020DD730
	add r0, r4, #0x44
	bl FUN_020D1F34
_020DD730:
	mov r0, r7
	bl FUN_020D3A4C
	cmp r5, #0
	popeq {r3, r4, r5, r6, r7, pc}
	mov r0, r6
	blx r5
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020DD74C: .4byte 0x021E3E60
_020DD750: .4byte 0x021E3820
	arm_func_end FUN_020DD6BC

	arm_func_start FUN_020DD754
FUN_020DD754: @ 0x020DD754
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	mov sl, r0
	mov sb, r1
	mov r8, r2
	mov r7, r3
	ldr r4, _020DD838 @ =0x021E3E60
	ldr r5, _020DD83C @ =0x021E3820
	bl FUN_020DC8C8
	bl FUN_020D3A38
	mov r6, r0
	b _020DD788
_020DD780:
	add r0, r5, #0x10c
	bl FUN_020D1E7C
_020DD788:
	ldr r0, [r5, #0x114]
	tst r0, #4
	bne _020DD780
	ldr r0, [r5, #0x114]
	ldr r2, [sp, #0x20]
	ldr r1, [sp, #0x24]
	orr r3, r0, #4
	mov r0, r6
	str r3, [r5, #0x114]
	str r2, [r5, #0x38]
	str r1, [r5, #0x3c]
	bl FUN_020D3A4C
	ldr r0, _020DD840 @ =0x021E3E40
	str sl, [r5, #0x28]
	ldr r0, [r0]
	str r8, [r5, #0x20]
	add r0, sb, r0
	str r0, [r5, #0x1c]
	str r7, [r5, #0x24]
	cmp sl, #3
	bhi _020DD7E4
	mov r0, sl
	bl FUN_020D4294
_020DD7E4:
	mov r0, r4
	bl FUN_020DD3E4
	cmp r0, #0
	beq _020DD808
	ldr r0, [sp, #0x28]
	cmp r0, #0
	popne {r4, r5, r6, r7, r8, sb, sl, pc}
	bl FUN_020DD8B4
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_020DD808:
	ldr r0, [sp, #0x28]
	cmp r0, #0
	beq _020DD820
	ldr r0, _020DD844 @ =FUN_020DD6BC
	bl FUN_020DC65C
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_020DD820:
	ldr r1, _020DD848 @ =0x021E16A0
	mov r0, r5
	ldr r1, [r1, #4]
	str r1, [r5, #0x104]
	bl FUN_020DD6BC
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0
_020DD838: .4byte 0x021E3E60
_020DD83C: .4byte 0x021E3820
_020DD840: .4byte 0x021E3E40
_020DD844: .4byte FUN_020DD6BC
_020DD848: .4byte 0x021E16A0
	arm_func_end FUN_020DD754

	arm_func_start FUN_020DD84C
FUN_020DD84C: @ 0x020DD84C
	push {r3, lr}
	ldr ip, _020DD8A8 @ =0x021E3820
	ldr r0, [ip, #0x114]
	cmp r0, #0
	popne {r3, pc}
	mov r2, #0
	ldr r0, _020DD8AC @ =0x021E3E40
	sub r1, r2, #1
	mov r3, #1
	str r3, [ip, #0x114]
	str r2, [ip, #0x24]
	str r2, [ip, #0x20]
	str r2, [ip, #0x1c]
	str r1, [ip, #0x28]
	str r2, [ip, #0x38]
	str r2, [ip, #0x3c]
	str r2, [r0]
	bl FUN_020DC7A8
	bl FUN_020DD8C0
	ldr r1, _020DD8B0 @ =0x021E3E60
	str r0, [r1]
	bl FUN_020DDAA4
	pop {r3, pc}
	.align 2, 0
_020DD8A8: .4byte 0x021E3820
_020DD8AC: .4byte 0x021E3E40
_020DD8B0: .4byte 0x021E3E60
	arm_func_end FUN_020DD84C

	arm_func_start FUN_020DD8B4
FUN_020DD8B4: @ 0x020DD8B4
	ldr ip, _020DD8BC @ =FUN_020DC8F0
	bx ip
	.align 2, 0
_020DD8BC: .4byte FUN_020DC8F0
	arm_func_end FUN_020DD8B4

	arm_func_start FUN_020DD8C0
FUN_020DD8C0: @ 0x020DD8C0
	ldr r0, _020DD8C8 @ =FUN_020DD570
	bx lr
	.align 2, 0
_020DD8C8: .4byte FUN_020DD570
	arm_func_end FUN_020DD8C0

	arm_func_start FUN_020DD8CC
FUN_020DD8CC: @ 0x020DD8CC
	push {r3, lr}
	cmp r0, #0xb
	popne {r3, pc}
	cmp r2, #0
	popeq {r3, pc}
	ldr r2, _020DD8FC @ =0x021E3820
	ldr r1, [r2, #0x114]
	ldr r0, [r2, #0x104]
	bic r1, r1, #0x20
	str r1, [r2, #0x114]
	bl FUN_020D1F34
	pop {r3, pc}
	.align 2, 0
_020DD8FC: .4byte 0x021E3820
	arm_func_end FUN_020DD8CC

	arm_func_start FUN_020DD900
FUN_020DD900: @ 0x020DD900
	push {r4, r5, r6, lr}
	ldr r5, _020DD94C @ =0x021E3820
	mov r4, #0
_020DD90C:
	bl FUN_020D3A38
	ldr r1, [r5, #0x114]
	mov r6, r0
	tst r1, #8
	bne _020DD934
_020DD920:
	mov r0, r4
	bl FUN_020D1E7C
	ldr r0, [r5, #0x114]
	tst r0, #8
	beq _020DD920
_020DD934:
	mov r0, r6
	bl FUN_020D3A4C
	ldr r1, [r5, #0x40]
	mov r0, r5
	blx r1
	b _020DD90C
	.align 2, 0
_020DD94C: .4byte 0x021E3820
	arm_func_end FUN_020DD900

	arm_func_start FUN_020DD950
FUN_020DD950: @ 0x020DD950
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sl, r0
	ldr r0, [sl, #0x114]
	mov sb, r1
	str r2, [sp]
	tst r0, #2
	bne _020DD9C4
	ldr r1, [sl, #0x114]
	mov r0, #0xb
	orr r2, r1, #2
	mov r1, #1
	str r2, [sl, #0x114]
	bl FUN_020D66A0
	cmp r0, #0
	bne _020DD9B4
	mov r6, #0x64
	mov r5, #0xb
	mov r4, #1
_020DD998:
	mov r0, r6
	bl _020D3AA8
	mov r0, r5
	mov r1, r4
	bl FUN_020D66A0
	cmp r0, #0
	beq _020DD998
_020DD9B4:
	mov r0, sl
	mov r1, #0
	mov r2, #1
	bl FUN_020DD950
_020DD9C4:
	ldr r0, [sl]
	mov r1, #0x60
	bl FUN_020D2894
	bl FUN_020D28B8
	mov r7, #0xb
	mov r6, #1
	mov r5, r7
	mov r4, r6
	mov fp, #0
_020DD9E8:
	str sb, [sl, #4]
	ldr r0, [sl, #0x114]
	orr r0, r0, #0x20
	str r0, [sl, #0x114]
_020DD9F8:
	mov r0, r7
	mov r1, sb
	mov r2, r6
	bl FUN_020D66C4
	cmp r0, #0
	blt _020DD9F8
	cmp sb, #0
	bne _020DDA34
	ldr r8, [sl]
_020DDA1C:
	mov r0, r5
	mov r1, r8
	mov r2, r4
	bl FUN_020D66C4
	cmp r0, #0
	blt _020DDA1C
_020DDA34:
	bl FUN_020D3A38
	ldr r1, [sl, #0x114]
	mov r8, r0
	tst r1, #0x20
	beq _020DDA5C
_020DDA48:
	mov r0, fp
	bl FUN_020D1E7C
	ldr r0, [sl, #0x114]
	tst r0, #0x20
	bne _020DDA48
_020DDA5C:
	mov r0, r8
	bl FUN_020D3A4C
	ldr r0, [sl]
	mov r1, #0x60
	bl FUN_020D285C
	ldr r0, [sl]
	ldr r1, [r0]
	cmp r1, #4
	bne _020DDA94
	ldr r0, [sp]
	sub r0, r0, #1
	str r0, [sp]
	cmp r0, #0
	bgt _020DD9E8
_020DDA94:
	cmp r1, #0
	moveq r0, #1
	movne r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_020DD950

	arm_func_start FUN_020DDAA4
FUN_020DDAA4: @ 0x020DDAA4
	push {r3, lr}
	bl FUN_020D6548
	ldr r1, _020DDAC8 @ =FUN_020DDAD0
	mov r0, #0xe
	bl FUN_020D6654
	ldr r0, _020DDACC @ =0x021E4080
	mov r1, #0
	str r1, [r0, #4]
	pop {r3, pc}
	.align 2, 0
_020DDAC8: .4byte FUN_020DDAD0
_020DDACC: .4byte 0x021E4080
	arm_func_end FUN_020DDAA4

	arm_func_start FUN_020DDAD0
FUN_020DDAD0: @ 0x020DDAD0
	push {r3, lr}
	and r0, r1, #0x3f
	cmp r0, #0x11
	bne _020DDB18
	ldr r1, _020DDB20 @ =0x021E4080
	ldr r0, [r1]
	cmp r0, #0
	popne {r3, pc}
	mov r0, #1
	str r0, [r1]
	ldr r1, [r1, #4]
	cmp r1, #0
	beq _020DDB08
	blx r1
_020DDB08:
	cmp r0, #0
	popeq {r3, pc}
	bl FUN_020DDB34
	pop {r3, pc}
_020DDB18:
	bl FUN_020D3F48
	pop {r3, pc}
	.align 2, 0
_020DDB20: .4byte 0x021E4080
	arm_func_end FUN_020DDAD0

	arm_func_start FUN_020DDB24
FUN_020DDB24: @ 0x020DDB24
	ldr r0, _020DDB30 @ =0x021E4080
	ldr r0, [r0]
	bx lr
	.align 2, 0
_020DDB30: .4byte 0x021E4080
	arm_func_end FUN_020DDB24

	arm_func_start FUN_020DDB34
FUN_020DDB34: @ 0x020DDB34
	push {r3, r4, r5, lr}
	mov r0, #0
	mov r5, #1
	bl FUN_020D4294
	mov r0, r5
	bl FUN_020D4294
	mov r0, #2
	bl FUN_020D4294
	mov r0, #3
	bl FUN_020D4294
	ldr r0, _020DDBB8 @ =0x027FFFA8
	ldrh r0, [r0]
	and r0, r0, #0x8000
	asrs r0, r0, #0xf
	beq _020DDB9C
	bl FUN_020DB330
	cmp r0, #4
	bne _020DDB94
	ldr r4, _020DDBBC @ =0x000A3A47
_020DDB80:
	mov r0, r4
	bl _020D3AA8
	bl FUN_020DB330
	cmp r0, #4
	beq _020DDB80
_020DDB94:
	cmp r0, #0
	moveq r5, #0
_020DDB9C:
	cmp r5, #0
	beq _020DDBB0
	mov r0, #1
	mov r1, r0
	bl FUN_020DDC20
_020DDBB0:
	bl FUN_020D3F48
	pop {r3, r4, r5, pc}
	.align 2, 0
_020DDBB8: .4byte 0x027FFFA8
_020DDBBC: .4byte 0x000A3A47
	arm_func_end FUN_020DDB34

	arm_func_start FUN_020DDBC0
FUN_020DDBC0: @ 0x020DDBC0
	push {r3, r4, lr}
	sub sp, sp, #4
	ldr r2, _020DDC1C @ =0x027FFC10
	ldrh r1, [r2]
	cmp r1, #0
	subeq r1, r2, #0x410
	subne r1, r2, #0x10
	ldr r1, [r1]
	str r1, [sp]
	ldr r1, [sp]
	cmp r0, r1
	addeq sp, sp, #4
	popeq {r3, r4, pc}
	bl FUN_020D3A38
	mov r4, r0
	mov r0, #0xe
	mov r1, #0x11
	mov r2, #0
	bl FUN_020DDAD0
	mov r0, r4
	bl FUN_020D3A4C
	add sp, sp, #4
	pop {r3, r4, pc}
	.align 2, 0
_020DDC1C: .4byte 0x027FFC10
	arm_func_end FUN_020DDBC0

	arm_func_start FUN_020DDC20
FUN_020DDC20: @ 0x020DDC20
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	mov r6, r1
	mov r1, r7
	mov r0, #0xe
	mov r2, #0
	bl FUN_020D66C4
	cmp r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	mov r5, #0xe
	mov r4, #0
_020DDC4C:
	mov r0, r6
	blx SVC_WaitByLoop
	mov r0, r5
	mov r1, r7
	mov r2, r4
	bl FUN_020D66C4
	cmp r0, #0
	bne _020DDC4C
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020DDC20

	arm_func_start FUN_020DDC70
FUN_020DDC70: @ 0x020DDC70
	ldr r1, _020DDC7C @ =0x021E4088
	strb r0, [r1, #2]
	bx lr
	.align 2, 0
_020DDC7C: .4byte 0x021E4088
	arm_func_end FUN_020DDC70

	arm_func_start FUN_020DDC80
FUN_020DDC80: @ 0x020DDC80
	ldr r1, _020DDC8C @ =0x021E4088
	strb r0, [r1, #1]
	bx lr
	.align 2, 0
_020DDC8C: .4byte 0x021E4088
	arm_func_end FUN_020DDC80

	arm_func_start FUN_020DDC90
FUN_020DDC90: @ 0x020DDC90
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	bl FUN_020D34B0
	mov r4, #0
	ldr r5, _020DDCEC @ =0x000082EA
	ldr sl, _020DDCF0 @ =0x021E4088
	mov r6, r0
	mov r7, r1
	mov sb, r4
	mov r8, #0xfa00
_020DDCB4:
	bl FUN_020D34B0
	subs r3, r0, r6
	sbc r2, r1, r7
	umull r0, r1, r3, r8
	mla r1, r3, sb, r1
	mla r1, r2, r8, r1
	mov r2, r5
	mov r3, r4
	bl FUN_020F2900
	ldrb r2, [sl]
	cmp r1, r2, asr #31
	cmpeq r0, r2
	blo _020DDCB4
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0
_020DDCEC: .4byte 0x000082EA
_020DDCF0: .4byte 0x021E4088
	arm_func_end FUN_020DDC90

	arm_func_start FUN_020DDCF4
FUN_020DDCF4: @ 0x020DDCF4
	push {r3, lr}
	ldr r1, _020DDD38 @ =0x021E4088
	mov r0, #0x32
	strb r0, [r1, #2]
	strb r0, [r1, #1]
	strb r0, [r1]
	mov r2, #1
	ldr r0, _020DDD3C @ =_02110FBC
	str r2, [r1, #4]
	ldrh r1, [r0]
	ldr r0, _020DDD40 @ =0x0000FFFD
	cmp r1, r0
	popne {r3, pc}
	bl FUN_020D15C4
	ldr r1, _020DDD3C @ =_02110FBC
	strh r0, [r1]
	pop {r3, pc}
	.align 2, 0
_020DDD38: .4byte 0x021E4088
_020DDD3C: .4byte _02110FBC
_020DDD40: .4byte 0x0000FFFD
	arm_func_end FUN_020DDCF4

	arm_func_start FUN_020DDD44
FUN_020DDD44: @ 0x020DDD44
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov r6, r0
	bl FUN_020D34B0
	mov fp, #0
	ldr sl, _020DDDE4 @ =0x000082EA
	ldr sb, _020DDDE8 @ =0x021E4088
	mov r4, r0
	mov r5, r1
	mov r8, fp
	mov r7, #0xfa00
_020DDD6C:
	bl FUN_020D34B0
	subs lr, r0, r4
	sbc ip, r1, r5
	mov r2, sl
	mov r3, fp
	umull r0, r1, lr, r7
	mla r1, lr, r8, r1
	mla r1, ip, r7, r1
	bl FUN_020F2900
	ldrb r2, [sb, #1]
	cmp r1, r2, asr #31
	cmpeq r0, r2
	blo _020DDD6C
	ldr r0, [r6, #4]
	ldr r1, _020DDDEC @ =0x040001A2
	ldrb r0, [r0]
	strh r0, [r1]
	ldr r0, [r6, #4]
	sub r1, r1, #2
	add r0, r0, #1
	str r0, [r6, #4]
_020DDDC0:
	ldrh r0, [r1]
	tst r0, #0x80
	bne _020DDDC0
	ldr r0, _020DDDEC @ =0x040001A2
	ldrh r0, [r0]
	strh r0, [sp]
	ldrh r0, [sp]
	and r0, r0, #0xff
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020DDDE4: .4byte 0x000082EA
_020DDDE8: .4byte 0x021E4088
_020DDDEC: .4byte 0x040001A2
	arm_func_end FUN_020DDD44

	arm_func_start FUN_020DDDF0
FUN_020DDDF0: @ 0x020DDDF0
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov r6, r0
	bl FUN_020D34B0
	mov fp, #0
	ldr sl, _020DDE88 @ =0x000082EA
	ldr sb, _020DDE8C @ =0x021E4088
	mov r4, r0
	mov r5, r1
	mov r8, fp
	mov r7, #0xfa00
_020DDE18:
	bl FUN_020D34B0
	subs lr, r0, r4
	sbc ip, r1, r5
	mov r2, sl
	mov r3, fp
	umull r0, r1, lr, r7
	mla r1, lr, r8, r1
	mla r1, ip, r7, r1
	bl FUN_020F2900
	ldrb r2, [sb, #2]
	cmp r1, r2, asr #31
	cmpeq r0, r2
	blo _020DDE18
	ldr r0, _020DDE90 @ =0x040001A2
	mov r1, #0
	strh r1, [r0]
	sub r1, r0, #2
_020DDE5C:
	ldrh r0, [r1]
	tst r0, #0x80
	bne _020DDE5C
	ldr r1, _020DDE90 @ =0x040001A2
	ldr r0, [r6, #8]
	ldrh r1, [r1]
	strb r1, [r0]
	ldr r0, [r6, #8]
	add r0, r0, #1
	str r0, [r6, #8]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020DDE88: .4byte 0x000082EA
_020DDE8C: .4byte 0x021E4088
_020DDE90: .4byte 0x040001A2
	arm_func_end FUN_020DDDF0

	arm_func_start FUN_020DDE94
FUN_020DDE94: @ 0x020DDE94
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	ldr r2, _020DDFC4 @ =0x021E409C
	ldr r1, _020DDFC8 @ =0x021E4088
	mov r6, r0
	str r2, [r1, #8]
	str r6, [r1, #0xc]
	mov r0, #1
	strb r0, [r2]
	mov r1, #0
	ldr r0, _020DDFCC @ =_02110FBC
	strb r1, [r6]
	ldrh r0, [r0]
	bl FUN_020DC9A4
	ldr r0, _020DDFCC @ =_02110FBC
	ldrh r0, [r0]
	bl FUN_020D1548
	ldr r2, _020DDFD0 @ =0x040001A0
_020DDED8:
	ldrh r0, [r2]
	tst r0, #0x80
	bne _020DDED8
	ldr r1, _020DDFD4 @ =0x0000A042
	ldr r0, _020DDFD8 @ =0x021E408C
	strh r1, [r2]
	bl FUN_020DDD44
	bl FUN_020DDC90
	ldr r0, _020DDFD8 @ =0x021E408C
	bl FUN_020DDDF0
	bl FUN_020DDC90
	ldrb r4, [r6]
	ldr r0, _020DDFC8 @ =0x021E4088
	mov r5, #0
	str r5, [r0, #8]
	cmp r4, #0xb9
	movhi r4, #0
	str r6, [r0, #0xc]
	strb r5, [r6]
	cmp r4, #0
	beq _020DDF60
	sub sl, r4, #1
	ldr sb, _020DDFDC @ =0x0000A002
	ldr r8, _020DDFD0 @ =0x040001A0
	ldr r7, _020DDFD8 @ =0x021E408C
	b _020DDF54
_020DDF40:
	mov r0, r7
	cmp r5, sl
	strheq sb, [r8]
	bl FUN_020DDDF0
	add r5, r5, #1
_020DDF54:
	cmp r5, r4
	blt _020DDF40
	b _020DDF74
_020DDF60:
	ldr r2, _020DDFDC @ =0x0000A002
	ldr r1, _020DDFD0 @ =0x040001A0
	ldr r0, _020DDFD8 @ =0x021E408C
	strh r2, [r1]
	bl FUN_020DDDF0
_020DDF74:
	mov r5, #0
	b _020DDF8C
_020DDF7C:
	ldrb r0, [r6, r5]
	eor r0, r0, #0xaa
	strb r0, [r6, r5]
	add r5, r5, #1
_020DDF8C:
	cmp r5, r4
	blt _020DDF7C
	ldr r1, _020DDFD0 @ =0x040001A0
_020DDF98:
	ldrh r0, [r1]
	tst r0, #0x80
	bne _020DDF98
	ldr r0, _020DDFCC @ =_02110FBC
	ldrh r0, [r0]
	bl FUN_020D1580
	ldr r0, _020DDFCC @ =_02110FBC
	ldrh r0, [r0]
	bl FUN_020DC9B4
	mov r0, r4
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0
_020DDFC4: .4byte 0x021E409C
_020DDFC8: .4byte 0x021E4088
_020DDFCC: .4byte _02110FBC
_020DDFD0: .4byte 0x040001A0
_020DDFD4: .4byte 0x0000A042
_020DDFD8: .4byte 0x021E408C
_020DDFDC: .4byte 0x0000A002
	arm_func_end FUN_020DDE94

	arm_func_start FUN_020DDFE0
FUN_020DDFE0: @ 0x020DDFE0
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	ldr r7, _020DE0AC @ =0x021E4158
	ldr r3, _020DE0B0 @ =0x021E4088
	mov r4, #0
	str r7, [r3, #8]
	ldr r2, _020DE0B4 @ =_02110FBC
	str r4, [r3, #0xc]
	mov r6, r0
	mov r3, #2
	ldrh r0, [r2]
	mov r5, r1
	strb r3, [r7]
	bl FUN_020DC9A4
	ldr r0, _020DE0B4 @ =_02110FBC
	ldrh r0, [r0]
	bl FUN_020D1548
	ldr r2, _020DE0B8 @ =0x040001A0
_020DE024:
	ldrh r0, [r2]
	tst r0, #0x80
	bne _020DE024
	ldr r1, _020DE0BC @ =0x0000A042
	ldr r0, _020DE0C0 @ =0x021E408C
	strh r1, [r2]
	bl FUN_020DDD44
	bl FUN_020DDC90
	ldr r0, _020DE0B0 @ =0x021E4088
	mov r4, #0
	str r6, [r0, #8]
	sub sb, r5, #1
	ldr r8, _020DE0C4 @ =0x0000A002
	ldr r7, _020DE0B8 @ =0x040001A0
	ldr r6, _020DE0C0 @ =0x021E408C
	b _020DE078
_020DE064:
	mov r0, r6
	cmp r4, sb
	strheq r8, [r7]
	bl FUN_020DDD44
	add r4, r4, #1
_020DE078:
	cmp r4, r5
	blt _020DE064
	ldr r1, _020DE0B8 @ =0x040001A0
_020DE084:
	ldrh r0, [r1]
	tst r0, #0x80
	bne _020DE084
	ldr r0, _020DE0B4 @ =_02110FBC
	ldrh r0, [r0]
	bl FUN_020D1580
	ldr r0, _020DE0B4 @ =_02110FBC
	ldrh r0, [r0]
	bl FUN_020DC9B4
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0
_020DE0AC: .4byte 0x021E4158
_020DE0B0: .4byte 0x021E4088
_020DE0B4: .4byte _02110FBC
_020DE0B8: .4byte 0x040001A0
_020DE0BC: .4byte 0x0000A042
_020DE0C0: .4byte 0x021E408C
_020DE0C4: .4byte 0x0000A002
	arm_func_end FUN_020DDFE0

	arm_func_start FUN_020DE0C8
FUN_020DE0C8: @ 0x020DE0C8
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	ldr r3, _020DE228 @ =0x021E409C
	ldr r1, _020DE22C @ =0x021E4088
	add r2, sp, #0
	str r3, [r1, #8]
	str r2, [r1, #0xc]
	ldr r0, _020DE230 @ =_02110FBC
	mov r1, #8
	ldrh r0, [r0]
	strb r1, [r3]
	bl FUN_020DC9A4
	ldr r0, _020DE230 @ =_02110FBC
	ldrh r0, [r0]
	bl FUN_020D1548
	bl FUN_020D34B0
	mov fp, #0
	mov r4, r0
	mov r5, r1
	mov r6, #0x40
	mov r8, fp
	mov r7, #0x3e8
	mov sl, fp
	mov sb, #0x3c
_020DE124:
	bl FUN_020D34B0
	subs r0, r0, r4
	umull lr, ip, r0, r6
	mla ip, r0, fp, ip
	sbc r1, r1, r5
	mla ip, r1, r6, ip
	umull r0, r1, lr, r7
	mla r1, lr, r8, r1
	mla r1, ip, r7, r1
	ldr r2, _020DE234 @ =0x000082EA
	mov r3, #0
	bl FUN_020F2900
	cmp r1, sl
	cmpeq r0, sb
	blo _020DE124
	ldr r2, _020DE238 @ =0x040001A0
_020DE164:
	ldrh r0, [r2]
	tst r0, #0x80
	bne _020DE164
	ldr r1, _020DE23C @ =0x0000A042
	ldr r0, _020DE240 @ =0x021E408C
	strh r1, [r2]
	bl FUN_020DDD44
	strb r0, [sp]
	bl FUN_020D34B0
	mov r4, r0
	mov r5, r1
	mov r6, #0x40
	mov r7, #0x3e8
	mov sb, #0
	mov r8, #0x32
_020DE1A0:
	bl FUN_020D34B0
	subs r0, r0, r4
	mov r3, #0
	sbc ip, r1, r5
	mov r1, r3
	umull fp, sl, r0, r6
	mla sl, r0, r1, sl
	mla sl, ip, r6, sl
	mov ip, r3
	umull r0, r1, fp, r7
	mla r1, fp, ip, r1
	mla r1, sl, r7, r1
	ldr r2, _020DE234 @ =0x000082EA
	bl FUN_020F2900
	cmp r1, sb
	cmpeq r0, r8
	blo _020DE1A0
	ldr r2, _020DE244 @ =0x0000A002
	ldr r1, _020DE238 @ =0x040001A0
	ldr r0, _020DE240 @ =0x021E408C
	strh r2, [r1]
	bl FUN_020DDDF0
	ldr r1, _020DE238 @ =0x040001A0
_020DE1FC:
	ldrh r0, [r1]
	tst r0, #0x80
	bne _020DE1FC
	ldr r0, _020DE230 @ =_02110FBC
	ldrh r0, [r0]
	bl FUN_020D1580
	ldr r0, _020DE230 @ =_02110FBC
	ldrh r0, [r0]
	bl FUN_020DC9B4
	ldrb r0, [sp]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020DE228: .4byte 0x021E409C
_020DE22C: .4byte 0x021E4088
_020DE230: .4byte _02110FBC
_020DE234: .4byte 0x000082EA
_020DE238: .4byte 0x040001A0
_020DE23C: .4byte 0x0000A042
_020DE240: .4byte 0x021E408C
_020DE244: .4byte 0x0000A002
	arm_func_end FUN_020DE0C8

	arm_func_start FUN_020DE248
FUN_020DE248: @ 0x020DE248
	push {r3, lr}
	mov r2, #0xf00
	bl FUN_020DE274
	cmp r0, #0
	popne {r3, pc}
	ldr r1, _020DE270 @ =0x021E4220
	mov r2, #0
	ldr r1, [r1, #4]
	strh r2, [r1, #0x16]
	pop {r3, pc}
	.align 2, 0
_020DE270: .4byte 0x021E4220
	arm_func_end FUN_020DE248

	arm_func_start FUN_020DE274
FUN_020DE274: @ 0x020DE274
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	mov r6, r0
	mov r4, r1
	mov r7, r2
	bl FUN_020D3A38
	ldr r1, _020DE444 @ =0x021E4220
	mov r5, r0
	ldrh r1, [r1]
	cmp r1, #0
	beq _020DE2A8
	bl FUN_020D3A4C
	mov r0, #3
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_020DE2A8:
	cmp r6, #0
	bne _020DE2BC
	bl FUN_020D3A4C
	mov r0, #6
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_020DE2BC:
	cmp r4, #3
	bls _020DE2D0
	bl FUN_020D3A4C
	mov r0, #6
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_020DE2D0:
	tst r6, #0x1f
	beq _020DE2E4
	bl FUN_020D3A4C
	mov r0, #6
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_020DE2E4:
	bl FUN_020D6548
	mov r0, #0xa
	mov r1, #1
	bl FUN_020D66A0
	cmp r0, #0
	bne _020DE30C
	mov r0, r5
	bl FUN_020D3A4C
	mov r0, #4
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_020DE30C:
	mov r0, r6
	mov r1, r7
	bl FUN_020D285C
	mov r0, r4
	mov r1, r6
	mov r3, r7
	mov r2, #0
	bl FUN_020D3F74
	ldr r0, _020DE444 @ =0x021E4220
	add r1, r6, #0x200
	str r6, [r0, #4]
	str r1, [r6]
	ldr r2, [r0, #4]
	ldr r1, [r2]
	add r1, r1, #0x300
	str r1, [r2, #4]
	ldr r2, [r0, #4]
	ldr r1, [r2, #4]
	add r1, r1, #0x800
	str r1, [r2, #0xc]
	ldr r1, [r0, #4]
	ldr r0, [r1, #0xc]
	add r0, r0, #0x100
	str r0, [r1, #0x10]
	bl FUN_020DEB08
	ldr r1, _020DE444 @ =0x021E4220
	mov r3, #0
	ldr r0, [r1, #4]
	mov r2, r3
	strh r4, [r0, #0x14]
	ldr r0, [r1, #4]
	str r3, [r0, #0x14c]
	ldr r0, [r1, #4]
	add r0, r0, #0x100
	strh r3, [r0, #0x50]
	b _020DE3B8
_020DE39C:
	ldr r0, [r1, #4]
	add r0, r0, r3, lsl #2
	str r2, [r0, #0xcc]
	ldr r0, [r1, #4]
	add r0, r0, r3, lsl #2
	str r2, [r0, #0x10c]
	add r3, r3, #1
_020DE3B8:
	cmp r3, #0x10
	blt _020DE39C
	ldr r0, _020DE448 @ =0x021E4228
	ldr r1, _020DE44C @ =0x021E4248
	mov r2, #0xa
	bl FUN_020D2388
	mov r6, #0
	mov r4, #0x8000
	ldr sl, _020DE450 @ =0x021E42C0
	mov sb, #2
	ldr r8, _020DE448 @ =0x021E4228
	mov r7, #1
	b _020DE414
_020DE3EC:
	lsl r2, r6, #8
	mov r1, sb
	add r0, sl, r6, lsl #8
	strh r4, [sl, r2]
	bl FUN_020D2878
	mov r0, r8
	mov r2, r7
	add r1, sl, r6, lsl #8
	bl FUN_020D23B0
	add r6, r6, #1
_020DE414:
	cmp r6, #0xa
	blt _020DE3EC
	ldr r1, _020DE454 @ =FUN_020DE75C
	mov r0, #0xa
	bl FUN_020D6654
	ldr r1, _020DE444 @ =0x021E4220
	mov r2, #1
	mov r0, r5
	strh r2, [r1]
	bl FUN_020D3A4C
	mov r0, #0
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0
_020DE444: .4byte 0x021E4220
_020DE448: .4byte 0x021E4228
_020DE44C: .4byte 0x021E4248
_020DE450: .4byte 0x021E42C0
_020DE454: .4byte FUN_020DE75C
	arm_func_end FUN_020DE274

	arm_func_start FUN_020DE458
FUN_020DE458: @ 0x020DE458
	push {r4, lr}
	bl FUN_020D3A38
	mov r4, r0
	bl FUN_020DE664
	cmp r0, #0
	beq _020DE480
	mov r0, r4
	bl FUN_020D3A4C
	mov r0, #3
	pop {r4, pc}
_020DE480:
	mov r0, #1
	mov r1, #0
	bl FUN_020DE6C8
	cmp r0, #0
	popne {r4, pc}
	bl FUN_020DEB08
	mov r0, #0xa
	mov r1, #0
	bl FUN_020D6654
	ldr r1, _020DE4C4 @ =0x021E4220
	mov r2, #0
	str r2, [r1, #4]
	mov r0, r4
	strh r2, [r1]
	bl FUN_020D3A4C
	mov r0, #0
	pop {r4, pc}
	.align 2, 0
_020DE4C4: .4byte 0x021E4220
	arm_func_end FUN_020DE458

	arm_func_start FUN_020DE4C8
FUN_020DE4C8: @ 0x020DE4C8
	ldr r2, _020DE4DC @ =0x021E4220
	ldr r2, [r2, #4]
	add r0, r2, r0, lsl #2
	str r1, [r0, #0x18]
	bx lr
	.align 2, 0
_020DE4DC: .4byte 0x021E4220
	arm_func_end FUN_020DE4C8

	arm_func_start FUN_020DE4E0
FUN_020DE4E0: @ 0x020DE4E0
	push {r3, lr}
	ldr r0, _020DE534 @ =0x021E4228
	add r1, sp, #0
	mov r2, #0
	bl FUN_020D2444
	cmp r0, #0
	moveq r0, #0
	popeq {r3, pc}
	ldr r0, [sp]
	mov r1, #2
	bl FUN_020D285C
	ldr r1, [sp]
	ldrh r0, [r1]
	tst r0, #0x8000
	movne r0, r1
	popne {r3, pc}
	ldr r0, _020DE534 @ =0x021E4228
	mov r2, #1
	bl FUN_020D24E8
	mov r0, #0
	pop {r3, pc}
	.align 2, 0
_020DE534: .4byte 0x021E4228
	arm_func_end FUN_020DE4E0

	arm_func_start FUN_020DE538
FUN_020DE538: @ 0x020DE538
	push {r0, r1, r2, r3}
	push {r3, r4, r5, lr}
	mov r5, r0
	bl FUN_020DE4E0
	movs r4, r0
	moveq r0, #8
	popeq {r3, r4, r5, lr}
	addeq sp, sp, #0x10
	bxeq lr
	strh r5, [r4]
	ldrh r5, [sp, #0x14]
	add r0, sp, #0x14
	bic r0, r0, #3
	mov r3, #0
	cmp r5, #0
	add r2, r0, #4
	ble _020DE598
_020DE57C:
	add r2, r2, #4
	ldr r1, [r2, #-4]
	add r0, r4, r3, lsl #2
	add r3, r3, #1
	str r1, [r0, #4]
	cmp r3, r5
	blt _020DE57C
_020DE598:
	mov r0, r4
	mov r1, #0x100
	bl FUN_020D2878
	mov r1, r4
	mov r0, #0xa
	mov r2, #0
	bl FUN_020D66C4
	mov r5, r0
	ldr r0, _020DE5E0 @ =0x021E4228
	mov r1, r4
	mov r2, #1
	bl FUN_020D23B0
	cmp r5, #0
	movlt r0, #8
	movge r0, #2
	pop {r3, r4, r5, lr}
	add sp, sp, #0x10
	bx lr
	.align 2, 0
_020DE5E0: .4byte 0x021E4228
	arm_func_end FUN_020DE538

	arm_func_start FUN_020DE5E4
FUN_020DE5E4: @ 0x020DE5E4
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r4, r1
	bl FUN_020DE4E0
	movs r5, r0
	moveq r0, #8
	popeq {r4, r5, r6, pc}
	mov r0, r6
	mov r1, r5
	mov r2, r4
	bl FUN_020D4A50
	mov r0, r5
	mov r1, r4
	bl FUN_020D2878
	mov r1, r5
	mov r0, #0xa
	mov r2, #0
	bl FUN_020D66C4
	mov r4, r0
	ldr r0, _020DE650 @ =0x021E4228
	mov r1, r5
	mov r2, #1
	bl FUN_020D23B0
	cmp r4, #0
	movlt r0, #8
	movge r0, #2
	pop {r4, r5, r6, pc}
	.align 2, 0
_020DE650: .4byte 0x021E4228
	arm_func_end FUN_020DE5E4

	arm_func_start FUN_020DE654
FUN_020DE654: @ 0x020DE654
	ldr r0, _020DE660 @ =0x021E4220
	ldr r0, [r0, #4]
	bx lr
	.align 2, 0
_020DE660: .4byte 0x021E4220
	arm_func_end FUN_020DE654

	arm_func_start FUN_020DE664
FUN_020DE664: @ 0x020DE664
	ldr r0, _020DE67C @ =0x021E4220
	ldrh r0, [r0]
	cmp r0, #0
	movne r0, #0
	moveq r0, #3
	bx lr
	.align 2, 0
_020DE67C: .4byte 0x021E4220
	arm_func_end FUN_020DE664

	arm_func_start FUN_020DE680
FUN_020DE680: @ 0x020DE680
	push {r3, lr}
	bl FUN_020DE664
	cmp r0, #0
	popne {r3, pc}
	ldr r0, _020DE6C4 @ =0x021E4220
	mov r1, #2
	ldr r0, [r0, #4]
	ldr r0, [r0, #4]
	bl FUN_020D285C
	ldr r0, _020DE6C4 @ =0x021E4220
	ldr r0, [r0, #4]
	ldr r0, [r0, #4]
	ldrh r0, [r0]
	cmp r0, #1
	movls r0, #3
	movhi r0, #0
	pop {r3, pc}
	.align 2, 0
_020DE6C4: .4byte 0x021E4220
	arm_func_end FUN_020DE680

	arm_func_start FUN_020DE6C8
FUN_020DE6C8: @ 0x020DE6C8
	push {r0, r1, r2, r3}
	push {r3, lr}
	bl FUN_020DE664
	cmp r0, #0
	popne {r3, lr}
	addne sp, sp, #0x10
	bxne lr
	ldr r0, _020DE758 @ =0x021E4220
	mov r1, #2
	ldr r0, [r0, #4]
	ldr r0, [r0, #4]
	bl FUN_020D285C
	ldr r0, _020DE758 @ =0x021E4220
	ldr r3, [sp, #8]
	ldr r0, [r0, #4]
	add r1, sp, #8
	ldr r2, [r0, #4]
	bic r0, r1, #3
	add ip, r0, #4
	ldrh lr, [r2]
	cmp r3, #0
	mov r0, #3
	popeq {r3, lr}
	addeq sp, sp, #0x10
	bxeq lr
	mov r1, #0
_020DE730:
	add ip, ip, #4
	ldr r2, [ip, #-4]
	cmp r2, lr
	moveq r0, r1
	subs r3, r3, #1
	str r3, [sp, #8]
	bne _020DE730
	pop {r3, lr}
	add sp, sp, #0x10
	bx lr
	.align 2, 0
_020DE758: .4byte 0x021E4220
	arm_func_end FUN_020DE6C8

	arm_func_start FUN_020DE75C
FUN_020DE75C: @ 0x020DE75C
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #8
	ldr r0, _020DEAF4 @ =0x021E4220
	cmp r2, #0
	ldr r4, [r0, #4]
	mov sl, r1
	addne sp, sp, #8
	popne {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, [r4, #0x10]
	mov r1, #0x100
	bl FUN_020D285C
	ldrh r0, [r4, #0x16]
	cmp r0, #0
	bne _020DE7A0
	ldr r0, [r4, #4]
	mov r1, #0x800
	bl FUN_020D285C
_020DE7A0:
	ldr r0, [r4, #0x10]
	cmp sl, r0
	beq _020DE7B8
	mov r0, sl
	mov r1, #0x100
	bl FUN_020D285C
_020DE7B8:
	ldrh r0, [sl]
	cmp r0, #0x2c
	blo _020DE870
	cmp r0, #0x80
	bne _020DE7F4
	ldrh r0, [sl, #2]
	cmp r0, #0x13
	bne _020DE7DC
	bl FUN_020D3F48
_020DE7DC:
	ldr r1, [r4, #0xc8]
	cmp r1, #0
	beq _020DEAB4
	mov r0, sl
	blx r1
	b _020DEAB4
_020DE7F4:
	cmp r0, #0x82
	bne _020DE848
	ldrh r0, [sl, #6]
	add r1, r4, r0, lsl #2
	ldr r0, [r1, #0xcc]
	cmp r0, #0
	beq _020DEAB4
	ldr r0, [r1, #0x10c]
	str r0, [sl, #0x1c]
	ldr r0, [r4, #0x14c]
	strh r0, [sl, #0x22]
	ldr r1, [r4, #4]
	ldr r0, [sl, #8]
	ldrh r1, [r1, #0x72]
	bl FUN_020D285C
	ldrh r1, [sl, #6]
	mov r0, sl
	add r1, r4, r1, lsl #2
	ldr r1, [r1, #0xcc]
	blx r1
	b _020DEAB4
_020DE848:
	cmp r0, #0x81
	bne _020DEAB4
	mov r0, #0xf
	strh r0, [sl]
	ldr r1, [sl, #0x1c]
	cmp r1, #0
	beq _020DEAB4
	mov r0, sl
	blx r1
	b _020DEAB4
_020DE870:
	cmp r0, #0xe
	bne _020DE8B0
	ldrh r0, [sl, #4]
	add r0, r0, #0xf5
	add r0, r0, #0xff00
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	cmp r0, #1
	bhi _020DE8B0
	ldrh r0, [sl, #2]
	cmp r0, #0
	bne _020DE8B0
	ldr r1, [r4, #4]
	ldr r0, [sl, #8]
	ldrh r1, [r1, #0x72]
	bl FUN_020D285C
_020DE8B0:
	ldrh r1, [sl]
	cmp r1, #2
	ldrheq r0, [sl, #2]
	cmpeq r0, #0
	add r0, r4, r1, lsl #2
	bne _020DE8EC
	ldr r4, [r0, #0x18]
	bl FUN_020DE458
	cmp r4, #0
	addeq sp, sp, #8
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r0, sl
	blx r4
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020DE8EC:
	ldr r1, [r0, #0x18]
	cmp r1, #0
	beq _020DE914
	mov r0, sl
	blx r1
	ldr r0, _020DEAF4 @ =0x021E4220
	ldrh r0, [r0]
	cmp r0, #0
	addeq sp, sp, #8
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020DE914:
	ldrh r0, [sl]
	cmp r0, #8
	cmpne r0, #0xc
	bne _020DEAB4
	cmp r0, #8
	bne _020DE958
	add r0, sl, #0xa
	str r0, [sp]
	ldrh r5, [sl, #8]
	ldrh r6, [sl, #0x10]
	ldrh r0, [sl, #0x12]
	add fp, sl, #0x14
	mov r7, #0
	str r0, [sp, #4]
	ldrh r8, [sl, #0x2c]
	ldrh sb, [sl, #0x2e]
	b _020DE988
_020DE958:
	cmp r0, #0xc
	bne _020DE988
	ldrh r5, [sl, #8]
	ldrh r7, [sl, #0xa]
	ldrh r0, [sl, #0xc]
	mov r6, #0
	mov fp, r6
	str r0, [sp, #4]
	add r0, sl, #0x10
	ldrh r8, [sl, #0x16]
	ldrh sb, [sl, #0x18]
	str r0, [sp]
_020DE988:
	cmp r5, #7
	cmpne r5, #9
	cmpne r5, #0x1a
	bne _020DEAB4
	cmp r5, #7
	ldreq r1, [r4, #0x14c]
	mov r0, #1
	orreq r0, r1, r0, lsl r6
	mvnne r0, r0, lsl r6
	ldrne r1, [r4, #0x14c]
	add r3, r4, #0x100
	andne r0, r1, r0
	str r0, [r4, #0x14c]
	ldr r0, _020DEAF8 @ =0x021E4270
	mov r1, #0
	mov r2, #0x44
	strh r7, [r3, #0x50]
	bl FUN_020D4994
	ldr ip, _020DEAF4 @ =0x021E4220
	mov r1, #0x82
	strh r1, [ip, #0x50]
	mov r1, #0
	strh r1, [ip, #0x52]
	strh r5, [ip, #0x54]
	str r1, [ip, #0x58]
	str r1, [ip, #0x5c]
	strh r1, [ip, #0x60]
	strh r6, [ip, #0x62]
	strh r7, [ip, #0x70]
	ldr r2, [r4, #0x14c]
	ldr r1, _020DEAFC @ =0x0000FFFF
	strh r2, [ip, #0x72]
	strh r1, [ip, #0x6a]
	ldr r3, [sp, #4]
	ldr r0, [sp]
	ldr r1, _020DEB00 @ =0x021E4284
	mov r2, #6
	strh r3, [ip, #0x8c]
	bl FUN_020D4A50
	cmp fp, #0
	mov r2, #0x18
	beq _020DEA40
	ldr r1, _020DEB04 @ =0x021E4294
	mov r0, fp
	bl FUN_020D47B8
	b _020DEA4C
_020DEA40:
	ldr r1, _020DEB04 @ =0x021E4294
	mov r0, #0
	bl FUN_020D4790
_020DEA4C:
	cmp r7, #0
	moveq r1, r8
	movne r1, sb
	cmp r7, #0
	ldr r0, _020DEAF4 @ =0x021E4220
	ldr r7, _020DEAF4 @ =0x021E4220
	strh r1, [r0, #0x90]
	movne sb, r8
	ldr r5, _020DEAF8 @ =0x021E4270
	mov r6, #0
	strh sb, [r7, #0x92]
_020DEA78:
	strh r6, [r7, #0x56]
	add r2, r4, r6, lsl #2
	ldr r0, [r2, #0xcc]
	cmp r0, #0
	beq _020DEAA0
	ldr r1, [r2, #0x10c]
	mov r0, r5
	str r1, [r7, #0x6c]
	ldr r1, [r2, #0xcc]
	blx r1
_020DEAA0:
	add r0, r6, #1
	lsl r0, r0, #0x10
	lsr r6, r0, #0x10
	cmp r6, #0x10
	blo _020DEA78
_020DEAB4:
	ldr r0, [r4, #0x10]
	mov r1, #0x100
	bl FUN_020D285C
	bl FUN_020DEB08
	ldr r0, [r4, #0x10]
	cmp sl, r0
	addeq sp, sp, #8
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldrh r2, [sl]
	mov r0, sl
	mov r1, #0x100
	orr r2, r2, #0x8000
	strh r2, [sl]
	bl FUN_020D2878
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020DEAF4: .4byte 0x021E4220
_020DEAF8: .4byte 0x021E4270
_020DEAFC: .4byte 0x0000FFFF
_020DEB00: .4byte 0x021E4284
_020DEB04: .4byte 0x021E4294
	arm_func_end FUN_020DE75C

	arm_func_start FUN_020DEB08
FUN_020DEB08: @ 0x020DEB08
	ldr r1, _020DEB20 @ =0x027FFF96
	ldrh r0, [r1]
	tst r0, #1
	bicne r0, r0, #1
	strhne r0, [r1]
	bx lr
	.align 2, 0
_020DEB20: .4byte 0x027FFF96
	arm_func_end FUN_020DEB08

	arm_func_start FUN_020DEB24
FUN_020DEB24: @ 0x020DEB24
	push {r3, lr}
	bl FUN_020DE664
	cmp r0, #0
	movne r0, #0
	ldreq r0, _020DEB44 @ =0x021E4220
	ldreq r0, [r0, #4]
	ldreq r0, [r0, #4]
	pop {r3, pc}
	.align 2, 0
_020DEB44: .4byte 0x021E4220
	arm_func_end FUN_020DEB24

	arm_func_start FUN_020DEB48
FUN_020DEB48: @ 0x020DEB48
	push {r4, lr}
	bl FUN_020D3A38
	ldr r1, _020DEB74 @ =0x021E4220
	ldr r1, [r1, #4]
	cmp r1, #0
	addne r1, r1, #0x100
	ldrhne r4, [r1, #0x50]
	moveq r4, #0
	bl FUN_020D3A4C
	mov r0, r4
	pop {r4, pc}
	.align 2, 0
_020DEB74: .4byte 0x021E4220
	arm_func_end FUN_020DEB48

	arm_func_start FUN_020DEB78
FUN_020DEB78: @ 0x020DEB78
	push {r4, lr}
	bl FUN_020D3A38
	ldr r1, _020DEBA4 @ =0x021E4220
	ldr r1, [r1, #4]
	cmp r1, #0
	ldrne r4, [r1, #0x14c]
	moveq r4, #0
	bl FUN_020D3A4C
	lsl r0, r4, #0x10
	lsr r0, r0, #0x10
	pop {r4, pc}
	.align 2, 0
_020DEBA4: .4byte 0x021E4220
	arm_func_end FUN_020DEB78

	arm_func_start FUN_020DEBA8
FUN_020DEBA8: @ 0x020DEBA8
	push {r4, r5, r6, lr}
	mov r6, r0
	bl FUN_020D3A38
	mov r5, r0
	bl FUN_020DE664
	movs r4, r0
	beq _020DEBD4
	mov r0, r5
	bl FUN_020D3A4C
	mov r0, r4
	pop {r4, r5, r6, pc}
_020DEBD4:
	bl FUN_020DE654
	str r6, [r0, #0xc8]
	mov r0, r5
	bl FUN_020D3A4C
	mov r0, #0
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020DEBA8

	arm_func_start FUN_020DEBEC
FUN_020DEBEC: @ 0x020DEBEC
	push {r3, r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x44
	movs r5, r1
	mov r6, r0
	mov r4, r2
	beq _020DEC54
	add r0, sp, #0
	mov r1, #0
	mov r2, #0x44
	bl FUN_020D4994
	mov r3, #0
	ldr r1, _020DECC0 @ =0x0000FFFF
	mov r7, #0x82
	mov r2, #0x19
	add r0, sp, #0x14
	strh r7, [sp]
	strh r3, [sp, #2]
	strh r2, [sp, #4]
	strh r6, [sp, #6]
	str r3, [sp, #8]
	str r3, [sp, #0xc]
	strh r3, [sp, #0x10]
	strh r1, [sp, #0x1a]
	str r4, [sp, #0x1c]
	strh r3, [sp, #0x12]
	bl FUN_020D3C40
_020DEC54:
	bl FUN_020D3A38
	mov r8, r0
	bl FUN_020DE664
	movs r7, r0
	beq _020DEC7C
	mov r0, r8
	bl FUN_020D3A4C
	add sp, sp, #0x44
	mov r0, r7
	pop {r3, r4, r5, r6, r7, r8, pc}
_020DEC7C:
	bl FUN_020DE654
	add r0, r0, r6, lsl #2
	str r5, [r0, #0xcc]
	str r4, [r0, #0x10c]
	cmp r5, #0
	beq _020DECAC
	bl FUN_020DEB78
	strh r0, [sp, #0x22]
	bl FUN_020DEB48
	strh r0, [sp, #0x20]
	add r0, sp, #0
	blx r5
_020DECAC:
	mov r0, r8
	bl FUN_020D3A4C
	mov r0, #0
	add sp, sp, #0x44
	pop {r3, r4, r5, r6, r7, r8, pc}
	.align 2, 0
_020DECC0: .4byte 0x0000FFFF
	arm_func_end FUN_020DEBEC

	arm_func_start FUN_020DECC4
FUN_020DECC4: @ 0x020DECC4
	push {r3, r4, r5, lr}
	mov r5, r0
	bl FUN_020DE654
	mov r4, r0
	bl FUN_020DE664
	cmp r0, #0
	popne {r3, r4, r5, pc}
	cmp r5, #0
	moveq r0, #6
	popeq {r3, r4, r5, pc}
	ldr r0, [r4, #4]
	mov r1, #0x7d0
	bl FUN_020D285C
	ldr r0, [r4, #4]
	mov r1, r5
	mov r2, #0x7d0
	bl FUN_020D48B4
	mov r0, #0
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020DECC4

	arm_func_start FUN_020DED10
FUN_020DED10: @ 0x020DED10
	push {r4, lr}
	bl FUN_020DE654
	mov r4, r0
	mov r0, #2
	mov r1, #7
	mov r2, #8
	bl FUN_020DE6C8
	cmp r0, #0
	movne r0, #0
	popne {r4, pc}
	ldr r0, [r4, #4]
	mov r1, #4
	add r0, r0, #0xc
	bl FUN_020D285C
	ldr r1, [r4, #4]
	ldr r0, [r1, #0xc]
	cmp r0, #1
	moveq r0, #0
	popeq {r4, pc}
	add r0, r1, #0x3c
	mov r1, #4
	bl FUN_020D285C
	ldr r0, [r4, #4]
	ldrh r0, [r0, #0x3c]
	add r0, r0, #0x1f
	bic r0, r0, #0x1f
	pop {r4, pc}
	arm_func_end FUN_020DED10

	arm_func_start FUN_020DED7C
FUN_020DED7C: @ 0x020DED7C
	push {r3, r4, r5, lr}
	bl FUN_020DE654
	mov r4, r0
	mov r0, #2
	mov r1, #7
	mov r2, #8
	bl FUN_020DE6C8
	cmp r0, #0
	movne r0, #0
	popne {r3, r4, r5, pc}
	ldr r0, [r4, #4]
	mov r1, #4
	add r0, r0, #0xc
	bl FUN_020D285C
	ldr r1, [r4, #4]
	ldr r0, [r1, #0xc]
	cmp r0, #1
	moveq r0, #0
	popeq {r3, r4, r5, pc}
	add r0, r1, #0x188
	mov r1, #2
	bl FUN_020D285C
	ldr r1, [r4, #4]
	add r0, r1, #0x100
	ldrh r0, [r0, #0x88]
	cmp r0, #0
	moveq r5, #1
	add r0, r1, #0x3e
	mov r1, #2
	movne r5, #0
	bl FUN_020D285C
	ldr r0, [r4, #4]
	cmp r5, #1
	ldrh r5, [r0, #0x3e]
	addne r0, r5, #0x51
	bicne r0, r0, #0x1f
	lslne r0, r0, #1
	popne {r3, r4, r5, pc}
	add r0, r0, #0xf8
	mov r1, #2
	bl FUN_020D285C
	ldr r0, [r4, #4]
	add r1, r5, #0xc
	ldrh r0, [r0, #0xf8]
	mul r0, r1, r0
	add r0, r0, #0x29
	bic r0, r0, #0x1f
	lsl r0, r0, #1
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020DED7C

	arm_func_start FUN_020DEE40
FUN_020DEE40: @ 0x020DEE40
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #0x3c
	mov r5, r0
	mov r4, r1
	bl FUN_020DE654
	mov r6, r0
	bl FUN_020DE664
	cmp r0, #0
	addne sp, sp, #0x3c
	movne r0, #0
	popne {r3, r4, r5, r6, pc}
	cmp r4, #1
	blo _020DEE7C
	cmp r4, #0xf
	bls _020DEE88
_020DEE7C:
	add sp, sp, #0x3c
	mov r0, #0
	pop {r3, r4, r5, r6, pc}
_020DEE88:
	ldr r0, [r6, #4]
	mov r1, #2
	add r0, r0, #0x82
	add r0, r0, #0x100
	bl FUN_020D285C
	ldr r0, [r6, #4]
	mov r1, #1
	add r0, r0, #0x100
	ldrh r0, [r0, #0x82]
	tst r0, r1, lsl r4
	addeq sp, sp, #0x3c
	moveq r0, #0
	popeq {r3, r4, r5, r6, pc}
	ldrh r0, [r5, #4]
	cmp r0, #0
	addeq sp, sp, #0x3c
	moveq r0, #0
	popeq {r3, r4, r5, r6, pc}
	add r0, r5, #0xa
	str r0, [sp]
	mov r3, #0
	add r2, sp, #0
_020DEEE0:
	ldr r0, [r2, r3, lsl #2]
	ldrh r1, [r0, #4]
	cmp r4, r1
	addeq sp, sp, #0x3c
	popeq {r3, r4, r5, r6, pc}
	add r3, r3, #1
	add r0, r2, r3, lsl #2
	ldrh r1, [r5, #6]
	ldr r0, [r0, #-4]
	add r0, r1, r0
	str r0, [r2, r3, lsl #2]
	ldrh r0, [r5, #4]
	cmp r3, r0
	blt _020DEEE0
	mov r0, #0
	add sp, sp, #0x3c
	pop {r3, r4, r5, r6, pc}
	arm_func_end FUN_020DEE40

	arm_func_start FUN_020DEF24
FUN_020DEF24: @ 0x020DEF24
	push {r3, lr}
	bl FUN_020DE664
	cmp r0, #0
	movne r0, #0x8000
	ldreq r0, _020DEF40 @ =0x027FFCFA
	ldrheq r0, [r0]
	pop {r3, pc}
	.align 2, 0
_020DEF40: .4byte 0x027FFCFA
	arm_func_end FUN_020DEF24

	arm_func_start FUN_020DEF44
FUN_020DEF44: @ 0x020DEF44
	push {r4, lr}
	bl FUN_020DE654
	mov r4, r0
	bl FUN_020DE664
	cmp r0, #0
	movne r0, #0
	popne {r4, pc}
	ldr r0, [r4, #4]
	mov r1, #2
	bl FUN_020D285C
	ldr r1, [r4, #4]
	ldrh r0, [r1]
	cmp r0, #9
	beq _020DEF8C
	cmp r0, #0xa
	cmpne r0, #0xb
	beq _020DEFB4
	b _020DEFCC
_020DEF8C:
	add r0, r1, #0x82
	add r0, r0, #0x100
	mov r1, #2
	bl FUN_020D285C
	ldr r1, [r4, #4]
	add r0, r1, #0x100
	ldrh r0, [r0, #0x82]
	cmp r0, #0
	moveq r0, #0
	popeq {r4, pc}
_020DEFB4:
	add r0, r1, #0xbc
	mov r1, #2
	bl FUN_020D285C
	ldr r0, [r4, #4]
	ldrh r0, [r0, #0xbc]
	pop {r4, pc}
_020DEFCC:
	mov r0, #0
	pop {r4, pc}
	arm_func_end FUN_020DEF44

	arm_func_start FUN_020DEFD4
FUN_020DEFD4: @ 0x020DEFD4
	push {r3, lr}
	sub sp, sp, #8
	add r0, sp, #0
	bl FUN_020D3C40
	mov r2, #0
	add r3, sp, #0
	mov r1, r2
_020DEFF0:
	ldrb r0, [r3], #1
	add r2, r2, #1
	cmp r2, #6
	add r0, r1, r0
	lsl r0, r0, #0x10
	lsr r1, r0, #0x10
	blt _020DEFF0
	ldr r0, _020DF05C @ =0x027FFC3C
	ldr ip, _020DF060 @ =0x66666667
	ldr r0, [r0]
	mov r3, #0x14
	add r0, r1, r0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	rsb r0, r0, r0, lsl #3
	lsl r0, r0, #0x10
	lsr r2, r0, #0x10
	lsr r1, r2, #0x1f
	smull r2, lr, ip, r2
	add lr, r1, lr, asr #3
	smull r1, r2, r3, lr
	rsb lr, r1, r0, lsr #16
	add r0, lr, #0xc8
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	add sp, sp, #8
	pop {r3, pc}
	.align 2, 0
_020DF05C: .4byte 0x027FFC3C
_020DF060: .4byte 0x66666667
	arm_func_end FUN_020DEFD4

	arm_func_start FUN_020DF064
FUN_020DF064: @ 0x020DF064
	push {r3, lr}
	sub sp, sp, #8
	add r0, sp, #0
	bl FUN_020D3C40
	mov r1, #0
	add r3, sp, #0
	mov r2, r1
_020DF080:
	ldrb r0, [r3], #1
	add r1, r1, #1
	cmp r1, #6
	add r0, r2, r0
	lsl r0, r0, #0x10
	lsr r2, r0, #0x10
	blt _020DF080
	ldr r0, _020DF0F0 @ =0x027FFC3C
	mov r1, #0xd
	ldr r0, [r0]
	ldr r3, _020DF0F4 @ =0x66666667
	add r0, r2, r0
	lsl r0, r0, #0x10
	lsr r2, r0, #0x10
	mul r0, r2, r1
	lsl r0, r0, #0x10
	lsr r2, r0, #0x10
	lsr r1, r2, #0x1f
	smull r2, ip, r3, r2
	add ip, r1, ip, asr #2
	mov r3, #0xa
	smull r1, r2, r3, ip
	rsb ip, r1, r0, lsr #16
	add r0, ip, #0x1e
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	add sp, sp, #8
	pop {r3, pc}
	.align 2, 0
_020DF0F0: .4byte 0x027FFC3C
_020DF0F4: .4byte 0x66666667
	arm_func_end FUN_020DF064

	arm_func_start FUN_020DF0F8
FUN_020DF0F8: @ 0x020DF0F8
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #0x84
	ldrh r2, [r1, #0x3c]
	mov lr, r0
	cmp r2, #0
	beq _020DF140
	mov r0, #0
	add r5, sp, #0
	strb r0, [sp]
	mov r4, #8
_020DF120:
	ldm r5!, {r0, r1, r2, r3}
	stm lr!, {r0, r1, r2, r3}
	subs r4, r4, #1
	bne _020DF120
	ldr r0, [r5]
	add sp, sp, #0x84
	str r0, [lr]
	pop {r3, r4, r5, r6, pc}
_020DF140:
	ldrh r0, [r1, #0x3e]
	strb r0, [sp]
	ands r0, r0, #0xff
	bne _020DF178
	add r5, sp, #0
	mov r4, #8
_020DF158:
	ldm r5!, {r0, r1, r2, r3}
	stm lr!, {r0, r1, r2, r3}
	subs r4, r4, #1
	bne _020DF158
	ldr r0, [r5]
	add sp, sp, #0x84
	str r0, [lr]
	pop {r3, r4, r5, r6, pc}
_020DF178:
	cmp r0, #0x10
	movhi r0, #0x10
	strbhi r0, [sp]
	ldrh r2, [r1]
	ldrb r0, [sp]
	mov r3, #0
	lsl r2, r2, #1
	sub r4, r2, #0x40
	cmp r0, #0
	add r0, r1, #0x40
	mov r2, r3
	and r1, r4, #0xff
	ble _020DF228
	add ip, sp, #0
_020DF1B0:
	ldrb r5, [r0]
	add r6, ip, r2, lsl #3
	add r4, r0, #2
	strb r5, [r6, #4]
	ldrb r5, [r0, #1]
	strb r5, [r6, #5]
	str r4, [r6, #8]
	ldrb r4, [r6, #5]
	add r4, r4, #2
	and r5, r4, #0xff
	add r3, r3, r5
	and r3, r3, #0xff
	cmp r3, r1
	bls _020DF214
	mov r0, #0
	strb r0, [sp]
	mov r4, #8
_020DF1F4:
	ldm ip!, {r0, r1, r2, r3}
	stm lr!, {r0, r1, r2, r3}
	subs r4, r4, #1
	bne _020DF1F4
	ldr r0, [ip]
	add sp, sp, #0x84
	str r0, [lr]
	pop {r3, r4, r5, r6, pc}
_020DF214:
	ldrb r4, [sp]
	add r2, r2, #1
	add r0, r0, r5
	cmp r2, r4
	blt _020DF1B0
_020DF228:
	add r4, sp, #0
	mov ip, #8
_020DF230:
	ldm r4!, {r0, r1, r2, r3}
	stm lr!, {r0, r1, r2, r3}
	subs ip, ip, #1
	bne _020DF230
	ldr r0, [r4]
	str r0, [lr]
	add sp, sp, #0x84
	pop {r3, r4, r5, r6, pc}
	arm_func_end FUN_020DF0F8

	arm_func_start FUN_020DF250
FUN_020DF250: @ 0x020DF250
	stmdb sp!, {lr}
	sub sp, sp, #0xc
	ldr r0, _020DF2C0 @ =_02110FC0
	ldr r0, [r0]
	cmp r0, #0x10000
	bne _020DF298
	bl FUN_020DB9C0
	add r0, sp, #0
	bl FUN_020DBB48
	cmp r0, #0
	bne _020DF298
	ldr r2, [sp, #8]
	ldr r0, [sp, #4]
	ldr r1, _020DF2C0 @ =_02110FC0
	add r0, r2, r0, lsl #8
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	str r0, [r1]
_020DF298:
	ldr r1, _020DF2C0 @ =_02110FC0
	ldr r0, [r1]
	add r0, r0, #1
	lsl r0, r0, #0x10
	lsr r2, r0, #0x10
	lsl r0, r2, #0x10
	str r2, [r1]
	lsr r0, r0, #0x10
	add sp, sp, #0xc
	ldm sp!, {pc}
	.align 2, 0
_020DF2C0: .4byte _02110FC0
	arm_func_end FUN_020DF250

	arm_func_start FUN_020DF2C4
FUN_020DF2C4: @ 0x020DF2C4
	ldr ip, _020DF2D0 @ =FUN_020DF2D4
	mov r1, #0
	bx ip
	.align 2, 0
_020DF2D0: .4byte FUN_020DF2D4
	arm_func_end FUN_020DF2C4

	arm_func_start FUN_020DF2D4
FUN_020DF2D4: @ 0x020DF2D4
	push {r3, r4, r5, lr}
	sub sp, sp, #8
	mov r5, r0
	mov r4, r1
	mov r0, #1
	mov r1, #0
	bl FUN_020DE6C8
	cmp r0, #0
	addne sp, sp, #8
	popne {r3, r4, r5, pc}
	mov r1, r5
	mov r0, #3
	bl FUN_020DE4C8
	bl FUN_020DE654
	mov r3, r0
	ldr r1, [r3, #0x10]
	mov r0, #3
	stm sp, {r1, r4}
	mov r1, #4
	ldm r3, {r2, r3}
	bl FUN_020DE538
	cmp r0, #0
	moveq r0, #2
	add sp, sp, #8
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020DF2D4

	arm_func_start FUN_020DF338
FUN_020DF338: @ 0x020DF338
	push {r4, lr}
	mov r4, r0
	mov r0, #1
	mov r1, r0
	bl FUN_020DE6C8
	cmp r0, #0
	popne {r4, pc}
	mov r1, r4
	mov r0, #4
	bl FUN_020DE4C8
	mov r0, #4
	mov r1, #0
	bl FUN_020DE538
	cmp r0, #0
	moveq r0, #2
	pop {r4, pc}
	arm_func_end FUN_020DF338

	arm_func_start FUN_020DF378
FUN_020DF378: @ 0x020DF378
	push {r4, lr}
	mov r4, r0
	mov r0, #1
	mov r1, r0
	bl FUN_020DE6C8
	cmp r0, #0
	popne {r4, pc}
	mov r1, r4
	mov r0, #5
	bl FUN_020DE4C8
	mov r0, #5
	mov r1, #0
	bl FUN_020DE538
	cmp r0, #0
	moveq r0, #2
	pop {r4, pc}
	arm_func_end FUN_020DF378

	arm_func_start FUN_020DF3B8
FUN_020DF3B8: @ 0x020DF3B8
	push {r4, lr}
	mov r4, r0
	mov r0, #1
	mov r1, #2
	bl FUN_020DE6C8
	cmp r0, #0
	popne {r4, pc}
	mov r1, r4
	mov r0, #6
	bl FUN_020DE4C8
	mov r0, #6
	mov r1, #0
	bl FUN_020DE538
	cmp r0, #0
	moveq r0, #2
	pop {r4, pc}
	arm_func_end FUN_020DF3B8

	arm_func_start FUN_020DF3F8
FUN_020DF3F8: @ 0x020DF3F8
	ldr ip, _020DF404 @ =FUN_020DF420
	mov r3, #0
	bx ip
	.align 2, 0
_020DF404: .4byte FUN_020DF420
	arm_func_end FUN_020DF3F8

	arm_func_start FUN_020DF408
FUN_020DF408: @ 0x020DF408
	ldr ip, _020DF41C @ =FUN_020DF420
	cmp r3, #0
	mov r3, #1
	orreq r3, r3, #2
	bx ip
	.align 2, 0
_020DF41C: .4byte FUN_020DF420
	arm_func_end FUN_020DF408

	arm_func_start FUN_020DF420
FUN_020DF420: @ 0x020DF420
	push {r3, r4, r5, lr}
	sub sp, sp, #8
	mov r5, r1
	mov r1, r2
	mov r4, r3
	bl FUN_020DE248
	cmp r0, #0
	addne sp, sp, #8
	popne {r3, r4, r5, pc}
	mov r1, r5
	mov r0, #0
	bl FUN_020DE4C8
	bl FUN_020DE654
	mov r3, r0
	ldr r1, [r3, #0x10]
	mov r0, #0
	stm sp, {r1, r4}
	mov r1, #4
	ldm r3, {r2, r3}
	bl FUN_020DE538
	cmp r0, #0
	moveq r0, #2
	add sp, sp, #8
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020DF420

	arm_func_start FUN_020DF480
FUN_020DF480: @ 0x020DF480
	push {r4, lr}
	mov r4, r0
	bl FUN_020DE680
	cmp r0, #0
	popne {r4, pc}
	mov r1, r4
	mov r0, #1
	bl FUN_020DE4C8
	mov r0, #1
	mov r1, #0
	bl FUN_020DE538
	cmp r0, #0
	moveq r0, #2
	pop {r4, pc}
	arm_func_end FUN_020DF480

	arm_func_start FUN_020DF4B8
FUN_020DF4B8: @ 0x020DF4B8
	push {r4, lr}
	mov r4, r0
	mov r0, #1
	mov r1, #2
	bl FUN_020DE6C8
	cmp r0, #0
	popne {r4, pc}
	mov r1, r4
	mov r0, #2
	bl FUN_020DE4C8
	mov r0, #2
	mov r1, #0
	bl FUN_020DE538
	cmp r0, #0
	moveq r0, #2
	pop {r4, pc}
	arm_func_end FUN_020DF4B8

	arm_func_start FUN_020DF4F8
FUN_020DF4F8: @ 0x020DF4F8
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	mov r0, #1
	mov r1, #2
	bl FUN_020DE6C8
	cmp r0, #0
	popne {r3, r4, r5, pc}
	cmp r4, #0
	moveq r0, #6
	popeq {r3, r4, r5, pc}
	ldrh r0, [r4, #4]
	cmp r0, #0
	beq _020DF540
	ldr r0, [r4]
	cmp r0, #0
	moveq r0, #6
	popeq {r3, r4, r5, pc}
_020DF540:
	ldrh r1, [r4, #0x14]
	ldrh r0, [r4, #0x34]
	cmp r1, #0
	movne r2, #0x2a
	moveq r2, #0
	add r0, r0, r2
	cmp r0, #0x200
	bgt _020DF57C
	ldrh r0, [r4, #0x36]
	cmp r1, #0
	movne r1, #6
	moveq r1, #0
	add r0, r0, r1
	cmp r0, #0x200
	ble _020DF584
_020DF57C:
	mov r0, #6
	pop {r3, r4, r5, pc}
_020DF584:
	mov r0, r4
	bl FUN_020DF5D4
	mov r1, r5
	mov r0, #7
	bl FUN_020DE4C8
	mov r0, r4
	mov r1, #0x40
	bl FUN_020D2878
	ldrh r1, [r4, #4]
	cmp r1, #0
	beq _020DF5B8
	ldr r0, [r4]
	bl FUN_020D2878
_020DF5B8:
	mov r2, r4
	mov r0, #7
	mov r1, #1
	bl FUN_020DE538
	cmp r0, #0
	moveq r0, #2
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020DF4F8

	arm_func_start FUN_020DF5D4
FUN_020DF5D4: @ 0x020DF5D4
	ldrh r1, [r0, #4]
	cmp r1, #0x70
	movhi r0, #0
	bxhi lr
	ldrh r1, [r0, #0x18]
	cmp r1, #0xa
	blo _020DF5F8
	cmp r1, #0x3e8
	bls _020DF600
_020DF5F8:
	mov r0, #0
	bx lr
_020DF600:
	ldrh r0, [r0, #0x32]
	cmp r0, #1
	blo _020DF614
	cmp r0, #0xe
	bls _020DF61C
_020DF614:
	mov r0, #0
	bx lr
_020DF61C:
	mov r0, #1
	bx lr
	arm_func_end FUN_020DF5D4

	arm_func_start FUN_020DF624
FUN_020DF624: @ 0x020DF624
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	mov r0, #1
	mov r1, #2
	bl FUN_020DE6C8
	cmp r0, #0
	popne {r3, r4, r5, pc}
	bl FUN_020DE654
	add r1, r0, #0x100
	mov r2, #0
	strh r2, [r1, #0x50]
	str r2, [r0, #0x14c]
	mov r1, r5
	mov r0, #8
	bl FUN_020DE4C8
	mov r2, r4
	mov r0, #8
	mov r1, #1
	bl FUN_020DE538
	cmp r0, #0
	moveq r0, #2
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020DF624

	arm_func_start FUN_020DF680
FUN_020DF680: @ 0x020DF680
	ldr ip, _020DF68C @ =FUN_020DF624
	mov r1, #1
	bx ip
	.align 2, 0
_020DF68C: .4byte FUN_020DF624
	arm_func_end FUN_020DF680

	arm_func_start FUN_020DF690
FUN_020DF690: @ 0x020DF690
	push {r4, lr}
	mov r4, r0
	mov r0, #1
	mov r1, #7
	bl FUN_020DE6C8
	cmp r0, #0
	popne {r4, pc}
	mov r1, r4
	mov r0, #9
	bl FUN_020DE4C8
	mov r0, #9
	mov r1, #0
	bl FUN_020DE538
	cmp r0, #0
	moveq r0, #2
	pop {r4, pc}
	arm_func_end FUN_020DF690

	arm_func_start FUN_020DF6D0
FUN_020DF6D0: @ 0x020DF6D0
	push {r3, r4, r5, lr}
	sub sp, sp, #0x10
	mov r5, r0
	mov r0, #3
	mov r4, r1
	mov r2, r0
	mov r1, #2
	mov r3, #5
	bl FUN_020DE6C8
	cmp r0, #0
	addne sp, sp, #0x10
	popne {r3, r4, r5, pc}
	cmp r4, #0
	addeq sp, sp, #0x10
	moveq r0, #6
	popeq {r3, r4, r5, pc}
	ldr r0, [r4]
	cmp r0, #0
	addeq sp, sp, #0x10
	moveq r0, #6
	popeq {r3, r4, r5, pc}
	ldrh r0, [r4, #4]
	cmp r0, #1
	blo _020DF738
	cmp r0, #0xe
	bls _020DF744
_020DF738:
	add sp, sp, #0x10
	mov r0, #6
	pop {r3, r4, r5, pc}
_020DF744:
	mov r1, r5
	mov r0, #0xa
	bl FUN_020DE4C8
	mov r0, #0xa
	strh r0, [sp]
	ldrh r2, [r4, #4]
	add r0, sp, #0
	mov r1, #0x10
	strh r2, [sp, #2]
	ldr r2, [r4]
	str r2, [sp, #4]
	ldrh r2, [r4, #6]
	strh r2, [sp, #8]
	ldrb r2, [r4, #8]
	strb r2, [sp, #0xa]
	ldrb r2, [r4, #9]
	strb r2, [sp, #0xb]
	ldrb r2, [r4, #0xa]
	strb r2, [sp, #0xc]
	ldrb r2, [r4, #0xb]
	strb r2, [sp, #0xd]
	ldrb r2, [r4, #0xc]
	strb r2, [sp, #0xe]
	ldrb r2, [r4, #0xd]
	strb r2, [sp, #0xf]
	bl FUN_020DE5E4
	cmp r0, #0
	moveq r0, #2
	add sp, sp, #0x10
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020DF6D0

	arm_func_start FUN_020DF7BC
FUN_020DF7BC: @ 0x020DF7BC
	push {r4, r5, lr}
	sub sp, sp, #0x3c
	mov r5, r0
	mov r0, #3
	mov r4, r1
	mov r2, r0
	mov r1, #2
	mov r3, #5
	bl FUN_020DE6C8
	cmp r0, #0
	addne sp, sp, #0x3c
	popne {r4, r5, pc}
	cmp r4, #0
	addeq sp, sp, #0x3c
	moveq r0, #6
	popeq {r4, r5, pc}
	ldr r0, [r4]
	cmp r0, #0
	addeq sp, sp, #0x3c
	moveq r0, #6
	popeq {r4, r5, pc}
	ldrh r0, [r4, #4]
	cmp r0, #0x400
	addhi sp, sp, #0x3c
	movhi r0, #6
	pophi {r4, r5, pc}
	ldrh r0, [r4, #0x12]
	cmp r0, #0x20
	addhi sp, sp, #0x3c
	movhi r0, #6
	pophi {r4, r5, pc}
	ldrh r0, [r4, #0x10]
	cmp r0, #0
	cmpne r0, #1
	cmpne r0, #2
	cmpne r0, #3
	addne sp, sp, #0x3c
	movne r0, #6
	popne {r4, r5, pc}
	add r0, r0, #0xfe
	add r0, r0, #0xff00
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	cmp r0, #1
	bhi _020DF884
	ldrh r0, [r4, #0x34]
	cmp r0, #0x20
	addhi sp, sp, #0x3c
	movhi r0, #6
	pophi {r4, r5, pc}
_020DF884:
	mov r1, r5
	mov r0, #0x26
	bl FUN_020DE4C8
	mov r0, #0x26
	strh r0, [sp]
	ldrh r2, [r4, #6]
	add r1, sp, #0xc
	add r0, r4, #0xa
	strh r2, [sp, #2]
	ldr r3, [r4]
	mov r2, #6
	str r3, [sp, #4]
	ldrh r3, [r4, #4]
	strh r3, [sp, #8]
	ldrh r3, [r4, #8]
	strh r3, [sp, #0xa]
	bl FUN_020D4A50
	ldrh r2, [r4, #0x10]
	add r1, sp, #0x16
	add r0, r4, #0x14
	strh r2, [sp, #0x12]
	ldrh r3, [r4, #0x34]
	mov r2, #0x20
	strh r3, [sp, #0x36]
	ldrh r3, [r4, #0x12]
	strh r3, [sp, #0x14]
	bl FUN_020D4A50
	add r0, sp, #0
	mov r1, #0x3c
	bl FUN_020DE5E4
	cmp r0, #0
	moveq r0, #2
	add sp, sp, #0x3c
	pop {r4, r5, pc}
	arm_func_end FUN_020DF7BC

	arm_func_start FUN_020DF90C
FUN_020DF90C: @ 0x020DF90C
	push {r4, lr}
	mov r4, r0
	mov r0, #1
	mov r1, #5
	bl FUN_020DE6C8
	cmp r0, #0
	popne {r4, pc}
	mov r1, r4
	mov r0, #0xb
	bl FUN_020DE4C8
	mov r0, #0xb
	mov r1, #0
	bl FUN_020DE538
	cmp r0, #0
	moveq r0, #2
	pop {r4, pc}
	arm_func_end FUN_020DF90C

	arm_func_start FUN_020DF94C
FUN_020DF94C: @ 0x020DF94C
	push {r3, r4, r5, r6, r7, lr}
	sub sp, sp, #0x28
	mov r7, r0
	mov r6, r1
	mov r0, #1
	mov r1, #2
	mov r5, r2
	mov r4, r3
	bl FUN_020DE6C8
	cmp r0, #0
	addne sp, sp, #0x28
	popne {r3, r4, r5, r6, r7, pc}
	cmp r6, #0
	addeq sp, sp, #0x28
	moveq r0, #6
	popeq {r3, r4, r5, r6, r7, pc}
	ldrh r1, [r6]
	mov r0, r6
	lsl r1, r1, #1
	bl FUN_020D2878
	bl FUN_020DE654
	add r1, r0, #0x100
	mov r2, #0
	strh r2, [r1, #0x50]
	str r2, [r0, #0x14c]
	mov r1, r7
	mov r0, #0xc
	bl FUN_020DE4C8
	mov r0, #0xc
	strh r0, [sp]
	str r6, [sp, #4]
	cmp r5, #0
	mov r2, #0x18
	beq _020DF9E4
	add r1, sp, #8
	mov r0, r5
	bl FUN_020D4A50
	b _020DF9F0
_020DF9E4:
	add r0, sp, #8
	mov r1, #0
	bl FUN_020D4994
_020DF9F0:
	ldrh r2, [sp, #0x40]
	add r0, sp, #0
	mov r1, #0x28
	str r4, [sp, #0x20]
	strh r2, [sp, #0x26]
	bl FUN_020DE5E4
	cmp r0, #0
	moveq r0, #2
	add sp, sp, #0x28
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020DF94C

	arm_func_start FUN_020DFA18
FUN_020DFA18: @ 0x020DFA18
	push {r4, r5, r6, lr}
	sub sp, sp, #8
	mov r5, r0
	mov r4, r1
	bl FUN_020DE654
	mov r1, #0xa
	mov r6, r0
	str r1, [sp]
	mov ip, #0xb
	mov r0, #5
	mov r1, #7
	mov r2, #9
	mov r3, #8
	str ip, [sp, #4]
	bl FUN_020DE6C8
	cmp r0, #0
	addne sp, sp, #8
	popne {r4, r5, r6, pc}
	ldr r1, [r6, #4]
	ldrh r0, [r1]
	cmp r0, #7
	cmpne r0, #9
	bne _020DFAC4
	cmp r4, #1
	blo _020DFA84
	cmp r4, #0xf
	bls _020DFA90
_020DFA84:
	add sp, sp, #8
	mov r0, #6
	pop {r4, r5, r6, pc}
_020DFA90:
	add r0, r1, #0x82
	add r0, r0, #0x100
	mov r1, #2
	bl FUN_020D285C
	ldr r0, [r6, #4]
	mov r1, #1
	add r0, r0, #0x100
	ldrh r0, [r0, #0x82]
	tst r0, r1, lsl r4
	bne _020DFAD4
	add sp, sp, #8
	mov r0, #7
	pop {r4, r5, r6, pc}
_020DFAC4:
	cmp r4, #0
	addne sp, sp, #8
	movne r0, #6
	popne {r4, r5, r6, pc}
_020DFAD4:
	mov r1, r5
	mov r0, #0xd
	bl FUN_020DE4C8
	mov r1, #1
	lsl r2, r1, r4
	mov r0, #0xd
	bl FUN_020DE538
	cmp r0, #0
	moveq r0, #2
	add sp, sp, #8
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020DFA18

	arm_func_start FUN_020DFB00
FUN_020DFB00: @ 0x020DFB00
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #0x40
	mov r8, r0
	mov r7, r1
	mov r6, r2
	mov r5, r3
	bl FUN_020DE654
	ldr r4, [r0, #4]
	mov r0, #2
	mov r1, #7
	mov r2, #8
	bl FUN_020DE6C8
	cmp r0, #0
	addne sp, sp, #0x40
	popne {r3, r4, r5, r6, r7, r8, sb, pc}
	add r0, r4, #0x188
	mov r1, #2
	bl FUN_020D285C
	add r0, r4, #0xc6
	mov r1, #2
	bl FUN_020D285C
	add r0, r4, #0x100
	ldrh r0, [r0, #0x88]
	cmp r0, #0
	ldrhne r0, [r4, #0xc6]
	cmpne r0, #1
	addne sp, sp, #0x40
	movne r0, #3
	popne {r3, r4, r5, r6, r7, r8, sb, pc}
	add r0, r4, #0xc
	mov r1, #4
	bl FUN_020D285C
	ldr r0, [r4, #0xc]
	cmp r0, #1
	addeq sp, sp, #0x40
	moveq r0, #3
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	tst r6, #0x3f
	addne sp, sp, #0x40
	movne r0, #6
	popne {r3, r4, r5, r6, r7, r8, sb, pc}
	ldrh sb, [sp, #0x60]
	tst sb, #0x1f
	addne sp, sp, #0x40
	movne r0, #6
	popne {r3, r4, r5, r6, r7, r8, sb, pc}
	add r0, r4, #0x9c
	mov r1, #2
	bl FUN_020D285C
	ldrh r0, [r4, #0x9c]
	cmp r0, #0
	bne _020DFBF8
	bl FUN_020DED7C
	cmp r6, r0
	addlt sp, sp, #0x40
	movlt r0, #6
	poplt {r3, r4, r5, r6, r7, r8, sb, pc}
	bl FUN_020DED10
	cmp sb, r0
	addlt sp, sp, #0x40
	movlt r0, #6
	poplt {r3, r4, r5, r6, r7, r8, sb, pc}
_020DFBF8:
	mov r1, r8
	mov r0, #0xe
	bl FUN_020DE4C8
	add r1, sp, #0
	mov r0, #0
	mov r2, #0x40
	bl FUN_020D47EC
	lsr r4, r6, #1
	ldrh r3, [sp, #0x60]
	mov r6, #0xe
	add r1, sp, #0x14
	mov r0, #0
	mov r2, #0x1c
	strh r6, [sp]
	str r7, [sp, #4]
	str r4, [sp, #8]
	str r5, [sp, #0xc]
	str r3, [sp, #0x10]
	bl FUN_020D47EC
	ldr r0, [sp, #0x64]
	add r1, sp, #0x30
	mov r2, #0x10
	bl FUN_020D4808
	add r0, sp, #0
	mov r1, #0x40
	bl FUN_020DE5E4
	cmp r0, #0
	moveq r0, #2
	add sp, sp, #0x40
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	arm_func_end FUN_020DFB00

	arm_func_start FUN_020DFC70
FUN_020DFC70: @ 0x020DFC70
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x18
	mov r7, r1
	mov r8, r0
	mov r6, r2
	add r1, sp, #8
	mov r0, #0
	mov r2, #0x10
	mov r5, r3
	ldr r4, [sp, #0x34]
	bl FUN_020D47EC
	ldr r1, [sp, #0x48]
	ldrh ip, [sp, #0x38]
	ldr r0, [sp, #0x44]
	ldr lr, _020DFD10 @ =0x00001E03
	ldr r3, [sp, #0x3c]
	ldr r2, [sp, #0x40]
	strb r1, [sp, #0x16]
	cmp r0, #0
	cmpne r4, #0
	strb r3, [sp, #0x14]
	strb r2, [sp, #0x15]
	ldrh r1, [sp, #0x30]
	str lr, [sp, #8]
	orrne r0, lr, #4
	strne r0, [sp, #8]
	strh ip, [sp, #0x12]
	strh r4, [sp, #0xc]
	strh r4, [sp, #0xe]
	strhne r4, [sp, #0x10]
	str r1, [sp]
	add r4, sp, #8
	mov r0, r8
	mov r1, r7
	mov r2, r6
	mov r3, r5
	str r4, [sp, #4]
	bl FUN_020DFB00
	add sp, sp, #0x18
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0
_020DFD10: .4byte 0x00001E03
	arm_func_end FUN_020DFC70

	arm_func_start FUN_020DFD14
FUN_020DFD14: @ 0x020DFD14
	push {r3, r4, r5, r6, r7, lr}
	sub sp, sp, #0x18
	mov r6, r1
	mov r7, r0
	mov r5, r2
	add r1, sp, #8
	mov r0, #0
	mov r2, #0x10
	mov r4, r3
	bl FUN_020D47EC
	ldrh ip, [sp, #0x34]
	mov r0, #3
	str r0, [sp, #8]
	ldrh lr, [sp, #0x30]
	strh ip, [sp, #0xc]
	strh ip, [sp, #0xe]
	mov r0, r7
	mov r1, r6
	mov r2, r5
	mov r3, r4
	add ip, sp, #8
	str lr, [sp]
	str ip, [sp, #4]
	bl FUN_020DFB00
	add sp, sp, #0x18
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020DFD14

	arm_func_start FUN_020DFD7C
FUN_020DFD7C: @ 0x020DFD7C
	push {r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #0x14
	mov sb, r0
	mov r8, r1
	mov r7, r2
	mov r6, r3
	mov r4, #1
	bl FUN_020DE654
	ldr r5, [r0, #4]
	mov r0, #2
	mov r1, #9
	mov r2, #0xa
	bl FUN_020DE6C8
	cmp r0, #0
	addne sp, sp, #0x14
	popne {r4, r5, r6, r7, r8, sb, pc}
	add r0, r5, #0x188
	mov r1, #2
	bl FUN_020D285C
	add r0, r5, #0x100
	ldrh r0, [r0, #0x88]
	cmp r0, #0
	bne _020DFDFC
	add r0, r5, #0x82
	add r0, r0, #0x100
	mov r1, #2
	bl FUN_020D285C
	add r2, r5, #0x100
	add r0, r5, #0x86
	mov r1, #2
	ldrh r4, [r2, #0x82]
	bl FUN_020D285C
_020DFDFC:
	cmp r7, #0
	addeq sp, sp, #0x14
	moveq r0, #6
	popeq {r4, r5, r6, r7, r8, sb, pc}
	cmp r4, #0
	addeq sp, sp, #0x14
	moveq r0, #7
	popeq {r4, r5, r6, r7, r8, sb, pc}
	add r0, r5, #0x7c
	mov r1, #2
	bl FUN_020D285C
	ldr r0, [r5, #0x7c]
	cmp r7, r0
	addeq sp, sp, #0x14
	moveq r0, #6
	popeq {r4, r5, r6, r7, r8, sb, pc}
	cmp r6, #0x200
	addhi sp, sp, #0x14
	movhi r0, #6
	pophi {r4, r5, r6, r7, r8, sb, pc}
	cmp r6, #0
	addeq sp, sp, #0x14
	moveq r0, #6
	popeq {r4, r5, r6, r7, r8, sb, pc}
	mov r0, r7
	mov r1, r6
	bl FUN_020D2878
	ldrh r2, [sp, #0x30]
	ldrh r1, [sp, #0x34]
	ldrh r0, [sp, #0x38]
	str r2, [sp]
	str r1, [sp, #4]
	str r0, [sp, #8]
	str sb, [sp, #0xc]
	mov r2, r7
	mov r3, r6
	mov r0, #0xf
	mov r1, #7
	str r8, [sp, #0x10]
	bl FUN_020DE538
	cmp r0, #0
	moveq r0, #2
	add sp, sp, #0x14
	pop {r4, r5, r6, r7, r8, sb, pc}
	arm_func_end FUN_020DFD7C

	arm_func_start FUN_020DFEAC
FUN_020DFEAC: @ 0x020DFEAC
	push {r3, r4, r5, lr}
	mov r5, r0
	bl FUN_020DE654
	mov r4, r0
	mov r0, #2
	mov r1, #9
	mov r2, #0xa
	bl FUN_020DE6C8
	cmp r0, #0
	popne {r3, r4, r5, pc}
	ldr r0, [r4, #4]
	mov r1, #4
	add r0, r0, #0xc
	bl FUN_020D285C
	ldr r0, [r4, #4]
	ldr r0, [r0, #0xc]
	cmp r0, #0
	moveq r0, #3
	popeq {r3, r4, r5, pc}
	mov r1, r5
	mov r0, #0x10
	bl FUN_020DE4C8
	mov r0, #0x10
	mov r1, #0
	bl FUN_020DE538
	cmp r0, #0
	moveq r0, #2
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020DFEAC

	arm_func_start FUN_020DFF1C
FUN_020DFF1C: @ 0x020DFF1C
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	mov r6, r1
	mov r5, r2
	bl FUN_020DE654
	mov r4, r0
	mov r0, #1
	mov r1, #8
	bl FUN_020DE6C8
	cmp r0, #0
	popne {r3, r4, r5, r6, r7, pc}
	ldr r0, [r4, #4]
	mov r1, #4
	add r0, r0, #0x10
	bl FUN_020D285C
	ldr r0, [r4, #4]
	ldr r0, [r0, #0x10]
	cmp r0, #1
	moveq r0, #3
	popeq {r3, r4, r5, r6, r7, pc}
	cmp r5, #0x10
	movlo r0, #6
	poplo {r3, r4, r5, r6, r7, pc}
	cmp r6, #0
	moveq r0, #6
	popeq {r3, r4, r5, r6, r7, pc}
	mov r0, r6
	mov r1, r5
	bl FUN_020D2878
	mov r1, r7
	mov r0, #0x11
	bl FUN_020DE4C8
	mov r2, r6
	mov r3, r5
	mov r0, #0x11
	mov r1, #2
	bl FUN_020DE538
	cmp r0, #0
	moveq r0, #2
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020DFF1C

	arm_func_start FUN_020DFFBC
FUN_020DFFBC: @ 0x020DFFBC
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x10
	mov r7, r0
	mov r6, r1
	mov r5, r2
	mov r4, r3
	bl FUN_020DE654
	mov r8, r0
	mov r0, #1
	mov r1, #0xb
	bl FUN_020DE6C8
	cmp r0, #0
	addne sp, sp, #0x10
	popne {r4, r5, r6, r7, r8, pc}
	ldr r0, [r8, #4]
	mov r1, #4
	add r0, r0, #0x10
	bl FUN_020D285C
	ldr r0, [r8, #4]
	ldr r0, [r0, #0x10]
	cmp r0, #0
	addeq sp, sp, #0x10
	moveq r0, #3
	popeq {r4, r5, r6, r7, r8, pc}
	ldr r0, _020E0084 @ =0x000005E4
	cmp r4, r0
	addhi sp, sp, #0x10
	movhi r0, #6
	pophi {r4, r5, r6, r7, r8, pc}
	mov r0, r5
	mov r1, r4
	bl FUN_020D2878
	mov r1, r7
	mov r0, #0x12
	bl FUN_020DE4C8
	add r1, sp, #8
	mov r0, r6
	mov r2, #6
	bl FUN_020D4A50
	str r5, [sp]
	str r4, [sp, #4]
	ldr r2, [sp, #8]
	ldr r3, [sp, #0xc]
	mov r0, #0x12
	mov r1, #4
	bl FUN_020DE538
	cmp r0, #0
	moveq r0, #2
	add sp, sp, #0x10
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0
_020E0084: .4byte 0x000005E4
	arm_func_end FUN_020DFFBC

	arm_func_start FUN_020E0088
FUN_020E0088: @ 0x020E0088
	push {r3, r4, r5, lr}
	mov r5, r0
	bl FUN_020DE654
	mov r4, r0
	mov r0, #1
	mov r1, #0xb
	bl FUN_020DE6C8
	cmp r0, #0
	popne {r3, r4, r5, pc}
	ldr r0, [r4, #4]
	mov r1, #4
	add r0, r0, #0x10
	bl FUN_020D285C
	ldr r0, [r4, #4]
	ldr r0, [r0, #0x10]
	cmp r0, #0
	moveq r0, #3
	popeq {r3, r4, r5, pc}
	mov r1, r5
	mov r0, #0x13
	bl FUN_020DE4C8
	mov r0, #0x13
	mov r1, #0
	bl FUN_020DE538
	cmp r0, #0
	moveq r0, #2
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020E0088

	arm_func_start FUN_020E00F4
FUN_020E00F4: @ 0x020E00F4
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0xc
	mov sl, r0
	mov r7, r1
	mov r6, r2
	mov r0, #2
	mov r1, #9
	mov r2, #0xa
	mov r5, r3
	mov r8, #1
	bl FUN_020DE6C8
	cmp r0, #0
	addne sp, sp, #0xc
	popne {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp sl, #0
	addeq sp, sp, #0xc
	moveq r0, #6
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp r7, #0x10
	addhs sp, sp, #0xc
	movhs r0, #6
	pophs {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp r6, #0
	addeq sp, sp, #0xc
	moveq r0, #6
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	bl FUN_020DEB48
	movs r4, r0
	bne _020E0170
	bl FUN_020DEB78
	mov r8, r0
_020E0170:
	mov r1, sl
	mov r0, #0
	mov r2, #0x820
	bl FUN_020D4858
	add r0, sl, #0x800
	mov r2, #0
	strh r2, [r0, #8]
	strh r2, [r0, #0xa]
	strh r2, [r0, #0xc]
	strh r5, [r0, #0x10]
	strh r7, [r0, #0x16]
	strh r2, [r0, #0xe]
	mov r0, #1
	ldr r1, [sp, #0x30]
	orr r0, r6, r0, lsl r4
	cmp r1, #0
	lsl r0, r0, #0x10
	movne r2, #1
	add r1, sl, #0x800
	strh r2, [r1, #0x18]
	lsr r0, r0, #0x10
	strh r0, [r1, #0xe]
	bl FUN_020E3714
	add r3, sl, #0x800
	mul r1, r5, r0
	strh r0, [r3, #0x12]
	strh r1, [r3, #0x14]
	ldrh r0, [r3, #0x14]
	cmp r0, #0x1fc
	bls _020E01FC
	mov r0, #0
	strh r0, [r3, #0xe]
	add sp, sp, #0xc
	mov r0, #6
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020E01FC:
	add r0, r0, #4
	strh r0, [r3, #0x14]
	mov r0, #1
	strh r0, [r3, #0x1c]
	cmp r4, #0
	bne _020E0314
	orr r4, r8, #1
	mov r2, #0
_020E021C:
	ldrh r1, [r3, #0xe]
	lsl r0, r2, #9
	add r2, r2, #1
	and r1, r1, r4
	strh r1, [sl, r0]
	cmp r2, #4
	blt _020E021C
	ldr r1, _020E0338 @ =FUN_020E07B0
	mov r0, r7
	mov r2, sl
	bl FUN_020DEBEC
	mov r7, sl
	mov sb, #0
	add r4, sl, #0x800
	mov r6, #1
	ldr fp, _020E033C @ =FUN_020E06D8
	ldr r5, _020E0340 @ =0x0000FFFF
	b _020E02F8
_020E0264:
	ldrh r2, [r4, #8]
	mov r0, fp
	mov r1, sl
	add r2, r2, #1
	and r2, r2, #3
	strh r2, [r4, #8]
	ldrh r3, [r4, #0xe]
	mov r2, r7
	and r3, r3, r8
	lsl r3, r3, #0x10
	lsr r3, r3, #0x10
	str r3, [sp]
	ldrh r3, [r4, #0x16]
	stmib sp, {r3, r6}
	ldrh r3, [r4, #0x14]
	bl FUN_020DFD7C
	cmp r0, #7
	bne _020E02CC
	add r0, sl, sb, lsl #1
	add r0, r0, #0x800
	strh r5, [r0]
	ldrh r0, [r4, #0xa]
	add r0, r0, #1
	and r0, r0, #3
	strh r0, [r4, #0xa]
	b _020E02F0
_020E02CC:
	cmp r0, #0
	cmpne r0, #2
	beq _020E02F0
	add r0, sl, #0x800
	mov r1, #5
	strh r1, [r0, #0x1c]
	add sp, sp, #0xc
	mov r0, #1
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020E02F0:
	add r7, r7, #0x200
	add sb, sb, #1
_020E02F8:
	ldrh r0, [r4, #0x18]
	cmp r0, #1
	movne r0, #1
	moveq r0, #2
	cmp sb, r0
	blt _020E0264
	b _020E032C
_020E0314:
	ldr r1, _020E0344 @ =FUN_020E08DC
	mov r4, #3
	mov r0, r7
	mov r2, sl
	strh r4, [r3, #0xa]
	bl FUN_020DEBEC
_020E032C:
	mov r0, #0
	add sp, sp, #0xc
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020E0338: .4byte FUN_020E07B0
_020E033C: .4byte FUN_020E06D8
_020E0340: .4byte 0x0000FFFF
_020E0344: .4byte FUN_020E08DC
	arm_func_end FUN_020E00F4

	arm_func_start FUN_020E0348
FUN_020E0348: @ 0x020E0348
	push {r4, lr}
	movs r4, r0
	moveq r0, #6
	popeq {r4, pc}
	add r0, r4, #0x800
	ldrh r1, [r0, #0xe]
	cmp r1, #0
	moveq r0, #3
	popeq {r4, pc}
	ldrh r0, [r0, #0x16]
	mov r1, #0
	mov r2, r1
	bl FUN_020DEBEC
	add r1, r4, #0x800
	mov r0, #0
	strh r0, [r1, #0xe]
	strh r0, [r1, #0x1c]
	pop {r4, pc}
	arm_func_end FUN_020E0348

	arm_func_start FUN_020E0390
FUN_020E0390: @ 0x020E0390
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0xc
	mov sl, r0
	mov sb, r1
	mov r8, r2
	mov r0, #2
	mov r1, #9
	mov r2, #0xa
	bl FUN_020DE6C8
	cmp r0, #0
	addne sp, sp, #0xc
	popne {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp sl, #0
	addeq sp, sp, #0xc
	moveq r0, #6
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp sb, #0
	addeq sp, sp, #0xc
	moveq r0, #6
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp r8, #0
	addeq sp, sp, #0xc
	moveq r0, #6
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	bl FUN_020DEB48
	movs r5, r0
	bne _020E0404
	bl FUN_020DEB78
	mov r4, r0
_020E0404:
	add r0, sl, #0x800
	ldrh r0, [r0, #0x1c]
	cmp r0, #5
	addeq sp, sp, #0xc
	moveq r0, #1
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp r0, #1
	cmpne r0, #4
	addne sp, sp, #0xc
	movne r0, #3
	popne {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp r5, #0
	mov r7, #5
	bne _020E05C8
	mov r5, #0
	mov fp, r5
	cmp r0, #4
	bne _020E04EC
	add ip, sl, #0x800
	mov r2, #1
	strh r2, [ip, #0x1c]
	ldrh r3, [ip, #0xe]
	ldrh r1, [ip, #8]
	ldr r0, _020E06D0 @ =FUN_020E06D8
	and r3, r3, r4
	lsl r3, r3, #0x10
	lsr r3, r3, #0x10
	str r3, [sp]
	ldrh r3, [ip, #0x16]
	add r1, r1, #3
	and r6, r1, #3
	str r3, [sp, #4]
	str r2, [sp, #8]
	ldrh r3, [ip, #0x14]
	mov r1, sl
	add r2, sl, r6, lsl #9
	bl FUN_020DFD7C
	cmp r0, #7
	bne _020E04C8
	add r0, sl, r6, lsl #1
	ldr r1, _020E06D4 @ =0x0000FFFF
	add r0, r0, #0x800
	strh r1, [r0]
	add r0, sl, #0x800
	ldrh r1, [r0, #0xa]
	add r1, r1, #1
	and r1, r1, #3
	strh r1, [r0, #0xa]
	b _020E04EC
_020E04C8:
	cmp r0, #0
	cmpne r0, #2
	beq _020E04EC
	add r0, sl, #0x800
	mov r1, r7
	strh r1, [r0, #0x1c]
	add sp, sp, #0xc
	mov r0, #1
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020E04EC:
	add r0, sl, #0x800
	ldrh r2, [r0, #0xc]
	ldrh r1, [r0, #0xa]
	cmp r2, r1
	beq _020E0584
	lsl r5, r2, #9
	ldrh r3, [sl, r5]
	mov r1, r8
	mov r2, #0x200
	orr r3, r3, #1
	strh r3, [sl, r5]
	ldrh r0, [r0, #0xc]
	add r0, sl, r0, lsl #9
	bl FUN_020D47B8
	add r1, sl, #0x800
	ldrh r0, [r1, #0xc]
	mov r5, #1
	mov r7, #0
	add r0, sl, r0, lsl #1
	add r0, r0, #0x800
	ldrh r0, [r0]
	strh r0, [r1, #0x1a]
	ldrh r0, [r1, #0xc]
	add r0, r0, #1
	and r0, r0, #3
	strh r0, [r1, #0xc]
	ldrh r0, [r1, #0x18]
	cmp r0, #0
	bne _020E0580
	cmp r4, #0
	beq _020E0580
	ldrh r0, [r1, #8]
	lsl r0, r0, #9
	ldrh r0, [sl, r0]
	cmp r0, #1
	moveq fp, r5
	beq _020E0584
_020E0580:
	mov fp, #0
_020E0584:
	mov r0, sl
	mov r1, #0
	bl FUN_020E0A9C
	cmp r5, #0
	beq _020E06C4
	mov r0, sl
	mov r2, sb
	mov r1, #0
	bl FUN_020E09D0
	add r0, sl, #0x800
	ldrh r0, [r0, #0x18]
	cmp r0, #0
	bne _020E06C4
	mov r0, sl
	mov r1, fp
	bl FUN_020E0A9C
	b _020E06C4
_020E05C8:
	cmp r0, #4
	mov r0, #0
	add r1, sl, #0x800
	moveq r0, #1
	strheq r0, [r1, #0x1c]
	beq _020E0648
	ldrh r2, [r1, #0xc]
	ldrh r1, [r1, #8]
	cmp r2, r1
	beq _020E0648
	lsl r2, r2, #9
	ldrh r1, [sl, r2]
	tst r1, #1
	orreq r1, r1, #1
	strheq r1, [sl, r2]
	beq _020E0648
	mov r1, r8
	add r0, sl, r2
	mov r2, #0x200
	bl FUN_020D47B8
	add r2, sl, #0x800
	ldrh r1, [r2, #0xc]
	mov r0, #1
	mov r7, #0
	add r1, sl, r1, lsl #1
	add r1, r1, #0x800
	ldrh r1, [r1]
	strh r1, [r2, #0x1a]
	ldrh r1, [r2, #0xc]
	add r1, r1, #1
	and r1, r1, #3
	strh r1, [r2, #0xc]
_020E0648:
	cmp r0, #0
	beq _020E06C4
	add r0, sl, #0x800
	ldrh r1, [r0, #0xa]
	ldrh r2, [r0, #0x10]
	mov r0, sb
	add r6, sl, r1, lsl #9
	add r1, r6, #0x20
	bl FUN_020D47B8
	add r3, sl, #0x800
	ldrh r1, [r3, #0xe]
	mov r4, #1
	ldr r0, _020E06D0 @ =FUN_020E06D8
	str r1, [sp]
	ldrh r5, [r3, #0x16]
	mov r1, sl
	add r2, r6, #0x20
	str r5, [sp, #4]
	str r4, [sp, #8]
	ldrh r3, [r3, #0x10]
	bl FUN_020DFD7C
	add r1, sl, #0x800
	ldrh r2, [r1, #0xa]
	cmp r0, #2
	cmpne r0, #0
	add r2, r2, #1
	and r2, r2, #3
	strh r2, [r1, #0xa]
	movne r0, #5
	strhne r0, [r1, #0x1c]
	movne r7, r4
_020E06C4:
	mov r0, r7
	add sp, sp, #0xc
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020E06D0: .4byte FUN_020E06D8
_020E06D4: .4byte 0x0000FFFF
	arm_func_end FUN_020E0390

	arm_func_start FUN_020E06D8
FUN_020E06D8: @ 0x020E06D8
	push {r3, r4, r5, lr}
	mov r5, r0
	bl FUN_020DE654
	ldrh r2, [r5, #0xa]
	ldr r1, _020E07A8 @ =FUN_020E07B0
	add r0, r0, r2, lsl #2
	ldr r2, [r0, #0xcc]
	ldr r4, [r0, #0x10c]
	cmp r2, r1
	ldrne r0, _020E07AC @ =FUN_020E08DC
	cmpne r2, r0
	popne {r3, r4, r5, pc}
	cmp r4, #0
	popeq {r3, r4, r5, pc}
	ldr r0, [r5, #0x20]
	cmp r4, r0
	popne {r3, r4, r5, pc}
	bl FUN_020DEB48
	ldrh r1, [r5, #2]
	cmp r1, #0
	bne _020E0764
	cmp r0, #0
	popne {r3, r4, r5, pc}
	add r1, r4, #0x800
	ldrh r0, [r1, #0xa]
	ldrh r2, [r5, #0x1a]
	add r0, r4, r0, lsl #1
	asr r2, r2, #1
	add r0, r0, #0x800
	strh r2, [r0]
	ldrh r0, [r1, #0xa]
	add r0, r0, #1
	and r0, r0, #3
	strh r0, [r1, #0xa]
	pop {r3, r4, r5, pc}
_020E0764:
	cmp r1, #0xa
	bne _020E0798
	cmp r0, #0
	beq _020E0788
	add r0, r4, #0x800
	ldrh r1, [r0, #0xa]
	add r1, r1, #3
	and r1, r1, #3
	strh r1, [r0, #0xa]
_020E0788:
	add r0, r4, #0x800
	mov r1, #4
	strh r1, [r0, #0x1c]
	pop {r3, r4, r5, pc}
_020E0798:
	add r0, r4, #0x800
	mov r1, #5
	strh r1, [r0, #0x1c]
	pop {r3, r4, r5, pc}
	.align 2, 0
_020E07A8: .4byte FUN_020E07B0
_020E07AC: .4byte FUN_020E08DC
	arm_func_end FUN_020E06D8

	arm_func_start FUN_020E07B0
FUN_020E07B0: @ 0x020E07B0
	push {r4, r5, r6, lr}
	ldr r4, [r0, #0x1c]
	cmp r4, #0
	popeq {r4, r5, r6, pc}
	ldrh r1, [r0, #2]
	cmp r1, #0
	bne _020E08CC
	ldrh r1, [r0, #4]
	cmp r1, #0x15
	bgt _020E07FC
	bge _020E081C
	cmp r1, #9
	popgt {r4, r5, r6, pc}
	cmp r1, #7
	poplt {r4, r5, r6, pc}
	beq _020E083C
	cmp r1, #9
	beq _020E084C
	pop {r4, r5, r6, pc}
_020E07FC:
	cmp r1, #0x1a
	popgt {r4, r5, r6, pc}
	cmp r1, #0x19
	poplt {r4, r5, r6, pc}
	popeq {r4, r5, r6, pc}
	cmp r1, #0x1a
	beq _020E084C
	pop {r4, r5, r6, pc}
_020E081C:
	ldrh r1, [r0, #0x12]
	ldr r2, [r0, #0xc]
	mov r0, r4
	bl FUN_020E09D0
	mov r0, r4
	mov r1, #0
	bl FUN_020E0A9C
	pop {r4, r5, r6, pc}
_020E083C:
	mov r0, r4
	mov r1, #0
	bl FUN_020E0A9C
	pop {r4, r5, r6, pc}
_020E084C:
	ldrh r5, [r0, #0x12]
	mov r6, #1
	bl FUN_020D3A38
	add r1, r4, #0x800
	ldrh lr, [r1, #8]
	mvn ip, r6, lsl r5
	lsl r3, lr, #9
	ldrh r2, [r4, r3]
	and r2, r2, ip
	strh r2, [r4, r3]
	ldrh r1, [r1, #0x18]
	cmp r1, #1
	bne _020E089C
	add r1, lr, #1
	and r1, r1, #3
	lsl r1, r1, #0x10
	lsr r2, r1, #7
	ldrh r1, [r4, r2]
	and r1, r1, ip
	strh r1, [r4, r2]
_020E089C:
	bl FUN_020D3A4C
	mov r0, r4
	mov r1, #0
	bl FUN_020E0A9C
	add r0, r4, #0x800
	ldrh r0, [r0, #0x18]
	cmp r0, #1
	popne {r4, r5, r6, pc}
	mov r0, r4
	mov r1, #0
	bl FUN_020E0A9C
	pop {r4, r5, r6, pc}
_020E08CC:
	add r0, r4, #0x800
	mov r1, #5
	strh r1, [r0, #0x1c]
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020E07B0

	arm_func_start FUN_020E08DC
FUN_020E08DC: @ 0x020E08DC
	push {r4, r5, r6, r7, r8, lr}
	mov r8, r0
	ldr r4, [r8, #0x1c]
	cmp r4, #0
	popeq {r4, r5, r6, r7, r8, pc}
	ldrh r0, [r8, #2]
	cmp r0, #0
	bne _020E09C0
	ldrh r0, [r8, #4]
	cmp r0, #0x15
	bgt _020E0924
	bge _020E093C
	cmp r0, #9
	popgt {r4, r5, r6, r7, r8, pc}
	cmp r0, #7
	poplt {r4, r5, r6, r7, r8, pc}
	cmpne r0, #9
	pop {r4, r5, r6, r7, r8, pc}
_020E0924:
	cmp r0, #0x1a
	popgt {r4, r5, r6, r7, r8, pc}
	cmp r0, #0x19
	poplt {r4, r5, r6, r7, r8, pc}
	cmpne r0, #0x1a
	pop {r4, r5, r6, r7, r8, pc}
_020E093C:
	ldr r7, [r8, #0xc]
	ldrh r5, [r8, #0x10]
	ldrh r6, [r7]
	bl FUN_020DEB48
	add r1, r4, #0x800
	ldrh r1, [r1, #0x14]
	cmp r5, r1
	beq _020E0964
	cmp r5, #0x200
	movhi r5, #0x200
_020E0964:
	cmp r5, #4
	poplo {r4, r5, r6, r7, r8, pc}
	mov r1, #1
	tst r6, r1, lsl r0
	popeq {r4, r5, r6, r7, r8, pc}
	add r0, r4, #0x800
	ldrh r1, [r0, #8]
	mov r0, r7
	mov r2, r5
	add r1, r4, r1, lsl #9
	bl FUN_020D47B8
	add r1, r4, #0x800
	ldrh r0, [r1, #8]
	ldrh r2, [r8, #0x1a]
	add r0, r4, r0, lsl #1
	asr r2, r2, #1
	add r0, r0, #0x800
	strh r2, [r0]
	ldrh r0, [r1, #8]
	add r0, r0, #1
	and r0, r0, #3
	strh r0, [r1, #8]
	pop {r4, r5, r6, r7, r8, pc}
_020E09C0:
	add r0, r4, #0x800
	mov r1, #5
	strh r1, [r0, #0x1c]
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020E08DC

	arm_func_start FUN_020E09D0
FUN_020E09D0: @ 0x020E09D0
	push {r3, r4, r5, r6, r7, lr}
	mov r6, r0
	mov r3, r1
	mov r1, #1
	lsl r4, r1, r3
	add r0, r6, #0x800
	ldrh r1, [r0, #0xe]
	lsl r7, r4, #0x10
	mov r5, r2
	tst r1, r7, lsr #16
	popeq {r3, r4, r5, r6, r7, pc}
	ldrh r4, [r0, #8]
	lsl r2, r4, #9
	ldrh r2, [r6, r2]
	tst r2, r7, lsr #16
	bne _020E0A34
	ldrh r0, [r0, #0x18]
	cmp r0, #1
	popne {r3, r4, r5, r6, r7, pc}
	add r0, r4, #1
	and r4, r0, #3
	lsl r0, r4, #9
	ldrh r0, [r6, r0]
	tst r0, r7, lsr #16
	popeq {r3, r4, r5, r6, r7, pc}
_020E0A34:
	add r2, r6, r4, lsl #9
	mov r0, r6
	add r2, r2, #4
	bl FUN_020E0C44
	mov r1, r0
	add r0, r6, #0x800
	cmp r5, #0
	ldrh r2, [r0, #0x10]
	beq _020E0A64
	mov r0, r5
	bl FUN_020D47B8
	b _020E0A6C
_020E0A64:
	mov r0, #0
	bl FUN_020D4790
_020E0A6C:
	bl FUN_020D3A38
	lsl r4, r4, #9
	ldrh r3, [r6, r4]
	mvn r1, r7, lsr #16
	add r2, r6, #2
	and r1, r3, r1
	strh r1, [r6, r4]
	ldrh r1, [r2, r4]
	orr r1, r1, r7, lsr #16
	strh r1, [r2, r4]
	bl FUN_020D3A4C
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020E09D0

	arm_func_start FUN_020E0A9C
FUN_020E0A9C: @ 0x020E0A9C
	push {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0xc
	mov sl, r0
	mov sb, r1
	bl FUN_020D3A38
	add r1, sl, #0x800
	ldrh r1, [r1, #8]
	mov r4, r0
	lsl r1, r1, #9
	ldrh r1, [sl, r1]
	cmp r1, #0
	bne _020E0BDC
	bl FUN_020DEB78
	add r1, sl, #0x800
	ldrh r6, [r1, #8]
	ldrh r1, [r1, #0x18]
	mov r7, r0
	add r0, r6, #1
	and r5, r0, #3
	cmp r1, #1
	addeq r0, r5, #1
	andeq r8, r0, #3
	movne r8, r5
	add r1, sl, r8, lsl #9
	mov r0, #0
	mov r2, #0x200
	bl FUN_020D4790
	add r0, sl, #0x800
	ldrh r3, [r0, #0xe]
	orr r2, r7, #1
	lsl r1, r8, #9
	and r2, r3, r2
	strh r2, [sl, r1]
	strh r5, [r0, #8]
	ldrh r0, [r0, #0xe]
	lsl r1, r6, #9
	cmp sb, #1
	strh r0, [sl, r1]
	ldrheq r0, [sl, r1]
	biceq r0, r0, #1
	strheq r0, [sl, r1]
	mov r0, r4
	bl FUN_020D3A4C
	add r3, sl, #0x800
	ldrh r1, [r3, #0xe]
	mov r4, #1
	ldr r0, _020E0BE8 @ =FUN_020E06D8
	and r1, r1, r7
	lsl r1, r1, #0x10
	lsr r1, r1, #0x10
	str r1, [sp]
	ldrh r5, [r3, #0x16]
	mov r1, sl
	add r2, sl, r6, lsl #9
	str r5, [sp, #4]
	str r4, [sp, #8]
	ldrh r3, [r3, #0x14]
	bl FUN_020DFD7C
	cmp r0, #7
	bne _020E0BB8
	add r0, sl, r6, lsl #1
	ldr r1, _020E0BEC @ =0x0000FFFF
	add r0, r0, #0x800
	strh r1, [r0]
	add r0, sl, #0x800
	ldrh r1, [r0, #0xa]
	add sp, sp, #0xc
	add r1, r1, #1
	and r1, r1, #3
	strh r1, [r0, #0xa]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
_020E0BB8:
	cmp r0, #0
	cmpne r0, #2
	addeq sp, sp, #0xc
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	add r0, sl, #0x800
	mov r1, #5
	strh r1, [r0, #0x1c]
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
_020E0BDC:
	bl FUN_020D3A4C
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0
_020E0BE8: .4byte FUN_020E06D8
_020E0BEC: .4byte 0x0000FFFF
	arm_func_end FUN_020E0A9C

	arm_func_start FUN_020E0BF0
FUN_020E0BF0: @ 0x020E0BF0
	push {r3, lr}
	mov lr, r1
	mov r3, r2
	cmp r0, #0
	ldrh r1, [lr]
	ldrh ip, [lr, #2]
	mov r2, #1
	moveq r0, #0
	popeq {r3, pc}
	cmp lr, #0
	moveq r0, #0
	popeq {r3, pc}
	tst r1, r2, lsl r3
	moveq r0, #0
	popeq {r3, pc}
	tst ip, r2, lsl r3
	moveq r0, #0
	popeq {r3, pc}
	add r2, lr, #4
	bl FUN_020E0C44
	pop {r3, pc}
	arm_func_end FUN_020E0BF0

	arm_func_start FUN_020E0C44
FUN_020E0C44: @ 0x020E0C44
	push {r3, r4, r5, lr}
	mov ip, #1
	lsl r3, ip, r3
	sub r3, r3, #1
	mov r5, r0
	and r0, r1, r3
	mov r4, r2
	bl FUN_020E3714
	add r1, r5, #0x800
	ldrh r1, [r1, #0x10]
	mla r0, r1, r0, r4
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020E0C44

	arm_func_start FUN_020E0C74
FUN_020E0C74: @ 0x020E0C74
	push {r3, lr}
	mov ip, #1
	rsb r2, ip, #0x10000
	mov r3, #2
	str ip, [sp]
	bl FUN_020E00F4
	pop {r3, pc}
	arm_func_end FUN_020E0C74

	arm_func_start FUN_020E0C90
FUN_020E0C90: @ 0x020E0C90
	ldr ip, _020E0C98 @ =FUN_020E0348
	bx ip
	.align 2, 0
_020E0C98: .4byte FUN_020E0348
	arm_func_end FUN_020E0C90

	arm_func_start FUN_020E0C9C
FUN_020E0C9C: @ 0x020E0C9C
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_020DE680
	cmp r0, #0
	popne {r4, r5, r6, pc}
	cmp r5, #3
	movhi r0, #6
	pophi {r4, r5, r6, pc}
	cmp r5, #0
	beq _020E0CE4
	cmp r4, #0
	moveq r0, #6
	popeq {r4, r5, r6, pc}
	mov r0, r4
	mov r1, #0x50
	bl FUN_020D2878
_020E0CE4:
	mov r1, r6
	mov r0, #0x14
	bl FUN_020DE4C8
	mov r2, r5
	mov r3, r4
	mov r0, #0x14
	mov r1, #2
	bl FUN_020DE538
	cmp r0, #0
	moveq r0, #2
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020E0C9C

	arm_func_start FUN_020E0D10
FUN_020E0D10: @ 0x020E0D10
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	mov r6, r1
	mov r5, r2
	mov r4, r3
	bl FUN_020DE680
	cmp r0, #0
	popne {r3, r4, r5, r6, r7, pc}
	cmp r6, #3
	movhi r0, #6
	pophi {r3, r4, r5, r6, r7, pc}
	cmp r6, #0
	beq _020E0D5C
	cmp r4, #0
	moveq r0, #6
	popeq {r3, r4, r5, r6, r7, pc}
	mov r0, r4
	mov r1, #0x50
	bl FUN_020D2878
_020E0D5C:
	mov r1, r7
	mov r0, #0x27
	bl FUN_020DE4C8
	mov r2, r6
	mov r3, r4
	mov r0, #0x27
	mov r1, #3
	str r5, [sp]
	bl FUN_020DE538
	cmp r0, #0
	moveq r0, #2
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020E0D10

	arm_func_start FUN_020E0D8C
FUN_020E0D8C: @ 0x020E0D8C
	push {r4, r5, r6, r7, lr}
	sub sp, sp, #0xc
	mov r7, r0
	mov r6, r1
	mov r5, r2
	mov r0, #2
	mov r1, #7
	mov r2, #9
	mov r4, r3
	bl FUN_020DE6C8
	cmp r0, #0
	addne sp, sp, #0xc
	popne {r4, r5, r6, r7, pc}
	cmp r6, #0
	addeq sp, sp, #0xc
	moveq r0, #6
	popeq {r4, r5, r6, r7, pc}
	cmp r5, #0x70
	addhi sp, sp, #0xc
	movhi r0, #6
	pophi {r4, r5, r6, r7, pc}
	ldr r1, _020E0E40 @ =0x021E4CC0
	mov r0, r6
	mov r2, r5
	bl FUN_020D47B8
	ldr r0, _020E0E40 @ =0x021E4CC0
	mov r1, r5
	bl FUN_020D2878
	mov r1, r7
	mov r0, #0x18
	bl FUN_020DE4C8
	ldrh r0, [sp, #0x20]
	str r4, [sp]
	ldrb r1, [sp, #0x24]
	str r0, [sp, #4]
	ldr r2, _020E0E40 @ =0x021E4CC0
	str r1, [sp, #8]
	mov r3, r5
	mov r0, #0x18
	mov r1, #5
	bl FUN_020DE538
	cmp r0, #0
	moveq r0, #2
	add sp, sp, #0xc
	pop {r4, r5, r6, r7, pc}
	.align 2, 0
_020E0E40: .4byte 0x021E4CC0
	arm_func_end FUN_020E0D8C

	arm_func_start FUN_020E0E44
FUN_020E0E44: @ 0x020E0E44
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	bl FUN_020DE680
	cmp r0, #0
	popne {r3, r4, r5, pc}
	cmp r4, #0
	cmpne r4, #1
	movne r0, #6
	popne {r3, r4, r5, pc}
	mov r1, r5
	mov r0, #0x19
	bl FUN_020DE4C8
	mov r2, r4
	mov r0, #0x19
	mov r1, #1
	bl FUN_020DE538
	cmp r0, #0
	moveq r0, #2
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020E0E44

	arm_func_start FUN_020E0E94
FUN_020E0E94: @ 0x020E0E94
	push {r3, r4, r5, r6, r7, lr}
	sub sp, sp, #8
	mov r7, r0
	mov r6, r1
	mov r5, r2
	mov r4, r3
	bl FUN_020DE680
	cmp r0, #0
	addne sp, sp, #8
	popne {r3, r4, r5, r6, r7, pc}
	mov r1, r7
	mov r0, #0x1d
	bl FUN_020DE4C8
	ldrh ip, [sp, #0x20]
	mov r2, r6
	mov r3, r5
	mov r0, #0x1d
	mov r1, #4
	stm sp, {r4, ip}
	bl FUN_020DE538
	cmp r0, #0
	moveq r0, #2
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020E0E94

	arm_func_start FUN_020E0EF4
FUN_020E0EF4: @ 0x020E0EF4
	push {r4, r5, r6, r7, lr}
	sub sp, sp, #0xc
	mov r7, r0
	mov r6, r1
	mov r5, r2
	mov r4, r3
	bl FUN_020DE654
	mov r0, #1
	mov r1, #2
	bl FUN_020DE6C8
	cmp r0, #0
	addne sp, sp, #0xc
	popne {r4, r5, r6, r7, pc}
	mov r1, r7
	mov r0, #0x1e
	bl FUN_020DE4C8
	ldrh r2, [sp, #0x20]
	mov r3, #0x1e
	add r0, sp, #0
	mov r1, #0xa
	strh r3, [sp]
	strh r6, [sp, #2]
	strh r5, [sp, #4]
	strh r4, [sp, #6]
	strh r2, [sp, #8]
	bl FUN_020DE5E4
	cmp r0, #0
	moveq r0, #2
	add sp, sp, #0xc
	pop {r4, r5, r6, r7, pc}
	arm_func_end FUN_020E0EF4

	arm_func_start FUN_020E0F6C
FUN_020E0F6C: @ 0x020E0F6C
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	mov r0, #2
	mov r1, #7
	mov r2, #9
	bl FUN_020DE6C8
	cmp r0, #0
	popne {r3, r4, r5, pc}
	mov r1, r5
	mov r0, #0x21
	bl FUN_020DE4C8
	mov r2, r4
	mov r0, #0x21
	mov r1, #1
	bl FUN_020DE538
	cmp r0, #0
	moveq r0, #2
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020E0F6C

	arm_func_start FUN_020E0FB8
FUN_020E0FB8: @ 0x020E0FB8
	push {r3, lr}
	ldr r1, _020E0FE4 @ =0x021E4D44
	mov r3, #0
	ldr r2, _020E0FE8 @ =0x05000001
	add r0, sp, #0
	str r3, [sp]
	blx SVC_CpuSet
	bl FUN_020D15C4
	ldr r1, _020E0FEC @ =0x021E4D40
	strh r0, [r1, #6]
	pop {r3, pc}
	.align 2, 0
_020E0FE4: .4byte 0x021E4D44
_020E0FE8: .4byte 0x05000001
_020E0FEC: .4byte 0x021E4D40
	arm_func_end FUN_020E0FB8

	arm_func_start FUN_020E0FF0
FUN_020E0FF0: @ 0x020E0FF0
	push {r3, lr}
	bl FUN_020E1134
	cmp r0, #0
	beq _020E1010
	bl FUN_020E1040
	cmp r0, #0
	movne r0, #1
	popne {r3, pc}
_020E1010:
	mov r0, #0
	pop {r3, pc}
	arm_func_end FUN_020E0FF0

	arm_func_start FUN_020E1018
FUN_020E1018: @ 0x020E1018
	push {r3, lr}
	bl FUN_020E1134
	cmp r0, #0
	beq _020E1038
	bl FUN_020E1040
	cmp r0, #0
	moveq r0, #1
	popeq {r3, pc}
_020E1038:
	mov r0, #0
	pop {r3, pc}
	arm_func_end FUN_020E1018

	arm_func_start FUN_020E1040
FUN_020E1040: @ 0x020E1040
	ldr r0, _020E1054 @ =0x027FFC30
	ldrb r0, [r0, #5]
	lsl r0, r0, #0x1f
	lsr r0, r0, #0x1f
	bx lr
	.align 2, 0
_020E1054: .4byte 0x027FFC30
	arm_func_end FUN_020E1040

	arm_func_start FUN_020E1058
FUN_020E1058: @ 0x020E1058
	push {r4, lr}
	mov r4, #0
	bl FUN_020E1134
	cmp r0, #0
	beq _020E1074
	bl FUN_020E107C
	mov r4, r0
_020E1074:
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_020E1058

	arm_func_start FUN_020E107C
FUN_020E107C: @ 0x020E107C
	push {r4, lr}
	mov r4, #0
	bl FUN_020E1040
	cmp r0, #0
	ldrne r0, _020E109C @ =0x027FFC30
	ldrne r4, [r0, #8]
	mov r0, r4
	pop {r4, pc}
	.align 2, 0
_020E109C: .4byte 0x027FFC30
	arm_func_end FUN_020E107C

	arm_func_start FUN_020E10A0
FUN_020E10A0: @ 0x020E10A0
	push {r4, lr}
	mov r4, #0
	bl FUN_020E1134
	cmp r0, #0
	beq _020E10BC
	bl FUN_020E10C4
	mov r4, r0
_020E10BC:
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_020E10A0

	arm_func_start FUN_020E10C4
FUN_020E10C4: @ 0x020E10C4
	push {r4, lr}
	mov r4, #0
	bl FUN_020E1040
	cmp r0, #0
	ldrne r0, _020E10E4 @ =0x027FFC30
	ldrhne r4, [r0, #6]
	mov r0, r4
	pop {r4, pc}
	.align 2, 0
_020E10E4: .4byte 0x027FFC30
	arm_func_end FUN_020E10C4

	arm_func_start FUN_020E10E8
FUN_020E10E8: @ 0x020E10E8
	push {r3, lr}
	ldr r2, _020E112C @ =0x027FFC30
	ldr r0, _020E1130 @ =0x0000FFFF
	ldrh r1, [r2]
	cmp r1, r0
	moveq r0, #0
	popeq {r3, pc}
	ldrb r0, [r2, #5]
	lsl r0, r0, #0x1e
	lsrs r0, r0, #0x1f
	bne _020E1118
	bl FUN_020E1134
_020E1118:
	ldr r0, _020E112C @ =0x027FFC30
	ldrb r0, [r0, #5]
	lsl r0, r0, #0x1e
	lsr r0, r0, #0x1f
	pop {r3, pc}
	.align 2, 0
_020E112C: .4byte 0x027FFC30
_020E1130: .4byte 0x0000FFFF
	arm_func_end FUN_020E10E8

	arm_func_start FUN_020E1134
FUN_020E1134: @ 0x020E1134
	push {r4, lr}
	sub sp, sp, #0x10
	ldr r2, _020E1234 @ =0x027FFC30
	mov r4, #1
	ldrh r1, [r2]
	rsb r0, r4, #0x10000
	cmp r1, r0
	addeq sp, sp, #0x10
	moveq r0, #0
	popeq {r4, pc}
	ldrb r0, [r2, #5]
	lsl r0, r0, #0x1e
	lsr r0, r0, #0x1f
	cmp r0, #1
	addeq sp, sp, #0x10
	moveq r0, #0
	popeq {r4, pc}
	ldr r0, _020E1238 @ =0x021E4D40
	add r1, sp, #8
	ldrh r0, [r0, #6]
	bl FUN_020E12BC
	add r0, sp, #0
	bl FUN_020E1240
	mov r0, #0x8000000
	ldrb r2, [r0, #0xb2]
	cmp r2, #0x96
	bne _020E11B4
	ldr r1, _020E1234 @ =0x027FFC30
	ldrh r0, [r0, #0xbe]
	ldrh r1, [r1]
	cmp r1, r0
	bne _020E11FC
_020E11B4:
	cmp r2, #0x96
	beq _020E11D4
	ldr r1, _020E1234 @ =0x027FFC30
	ldr r0, _020E123C @ =0x0801FFFE
	ldrh r1, [r1]
	ldrh r0, [r0]
	cmp r1, r0
	bne _020E11FC
_020E11D4:
	ldr r2, _020E1234 @ =0x027FFC30
	mov r0, #0x8000000
	ldr r1, [r2, #8]
	ldr r0, [r0, #0xac]
	cmp r1, r0
	beq _020E1210
	ldrb r0, [r2, #5]
	lsl r0, r0, #0x1f
	lsrs r0, r0, #0x1f
	beq _020E1210
_020E11FC:
	ldr r1, _020E1234 @ =0x027FFC30
	mov r4, #0
	ldrb r0, [r1, #5]
	orr r0, r0, #2
	strb r0, [r1, #5]
_020E1210:
	add r0, sp, #0
	bl FUN_020E1288
	ldr r0, _020E1238 @ =0x021E4D40
	add r1, sp, #8
	ldrh r0, [r0, #6]
	bl FUN_020E1318
	mov r0, r4
	add sp, sp, #0x10
	pop {r4, pc}
	.align 2, 0
_020E1234: .4byte 0x027FFC30
_020E1238: .4byte 0x021E4D40
_020E123C: .4byte 0x0801FFFE
	arm_func_end FUN_020E1134

	arm_func_start FUN_020E1240
FUN_020E1240: @ 0x020E1240
	ldr r2, _020E1284 @ =0x04000204
	ldrh r1, [r2]
	and r1, r1, #0xc
	asr r1, r1, #2
	str r1, [r0]
	ldrh r1, [r2]
	and r1, r1, #0x10
	asr r1, r1, #4
	str r1, [r0, #4]
	ldrh r0, [r2]
	bic r0, r0, #0xc
	orr r0, r0, #0xc
	strh r0, [r2]
	ldrh r0, [r2]
	bic r0, r0, #0x10
	strh r0, [r2]
	bx lr
	.align 2, 0
_020E1284: .4byte 0x04000204
	arm_func_end FUN_020E1240

	arm_func_start FUN_020E1288
FUN_020E1288: @ 0x020E1288
	ldr r3, _020E12B8 @ =0x04000204
	ldr r2, [r0]
	ldrh r1, [r3]
	bic r1, r1, #0xc
	orr r1, r1, r2, lsl #2
	strh r1, [r3]
	ldrh r1, [r3]
	ldr r2, [r0, #4]
	bic r0, r1, #0x10
	orr r0, r0, r2, lsl #4
	strh r0, [r3]
	bx lr
	.align 2, 0
_020E12B8: .4byte 0x04000204
	arm_func_end FUN_020E1288

	arm_func_start FUN_020E12BC
FUN_020E12BC: @ 0x020E12BC
	push {r3, r4, r5, r6, r7, lr}
	ldr r5, _020E1314 @ =0x027FFFE8
	mov r7, r0
	mov r6, r1
	mov r4, #1
_020E12D0:
	bl FUN_020D3A38
	str r0, [r6, #4]
	mov r0, r5
	bl FUN_020D15BC
	ands r0, r0, #0x40
	str r0, [r6]
	popne {r3, r4, r5, r6, r7, pc}
	mov r0, r7
	bl FUN_020D14F8
	cmp r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	ldr r0, [r6, #4]
	bl FUN_020D3A4C
	mov r0, r4
	blx SVC_WaitByLoop
	b _020E12D0
	arm_func_end FUN_020E12BC

	arm_func_start FUN_020E1310
FUN_020E1310: @ 0x020E1310
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020E1314: .4byte 0x027FFFE8
	arm_func_end FUN_020E1310

	arm_func_start FUN_020E1318
FUN_020E1318: @ 0x020E1318
	push {r4, lr}
	mov r4, r1
	ldr r1, [r4]
	cmp r1, #0
	bne _020E1330
	bl FUN_020D14EC
_020E1330:
	ldr r0, [r4, #4]
	bl FUN_020D3A4C
	pop {r4, pc}
	arm_func_end FUN_020E1318

	arm_func_start FUN_020E133C
FUN_020E133C: @ 0x020E133C
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	mov r1, r7
	mov r0, #0xd
	mov r2, #0
	bl FUN_020D66C4
	cmp r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	mov r6, #1
	mov r5, #0xd
	mov r4, #0
_020E1368:
	mov r0, r6
	blx SVC_WaitByLoop
	mov r0, r5
	mov r1, r7
	mov r2, r4
	bl FUN_020D66C4
	cmp r0, #0
	bne _020E1368
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020E133C

	arm_func_start FUN_020E138C
FUN_020E138C: @ 0x020E138C
	push {r3, lr}
	mov lr, r1
	mov r3, r2
	cmp lr, #0x8000000
	blo _020E13C4
	ldr r2, _020E13E0 @ =0x0A010000
	cmp lr, r2
	bhs _020E13C4
	mov ip, #1
	mov r2, r0
	mov r0, #0
	str ip, [sp]
	bl FUN_020E1434
	pop {r3, pc}
_020E13C4:
	mov ip, #1
	mov r1, r0
	mov r2, lr
	mov r0, #0
	str ip, [sp]
	bl FUN_020E1434
	pop {r3, pc}
	.align 2, 0
_020E13E0: .4byte 0x0A010000
	arm_func_end FUN_020E138C

	arm_func_start FUN_020E13E4
FUN_020E13E4: @ 0x020E13E4
	push {r3, lr}
	mov lr, r1
	mov r3, r2
	mov ip, #0x11
	mov r1, r0
	mov r2, lr
	mov r0, #0
	str ip, [sp]
	bl FUN_020E1434
	pop {r3, pc}
	arm_func_end FUN_020E13E4

	arm_func_start FUN_020E140C
FUN_020E140C: @ 0x020E140C
	push {r3, lr}
	mov lr, r1
	mov r3, r2
	mov ip, #0x21
	mov r1, r0
	mov r2, lr
	mov r0, #0
	str ip, [sp]
	bl FUN_020E1434
	pop {r3, pc}
	arm_func_end FUN_020E140C

	arm_func_start FUN_020E1434
FUN_020E1434: @ 0x020E1434
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	mov r6, r1
	mov r5, r2
	mov r4, r3
	bl FUN_020E1134
	cmp r0, #0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	bl FUN_020E16C0
	ldr r0, _020E156C @ =0x021E4D40
	ldrh r0, [r0, #6]
	bl FUN_020D14AC
	ldr r0, [sp, #0x18]
	tst r0, #1
	bne _020E1488
	mov r0, r7
	bl FUN_020D4294
	mov r0, r5
	mov r1, r4
	bl FUN_020D2894
_020E1488:
	ldr r0, [sp, #0x18]
	cmp r0, #0x11
	bhi _020E14B8
	cmp r0, #0x10
	blo _020E14AC
	beq _020E14D4
	cmp r0, #0x11
	beq _020E1504
	b _020E154C
_020E14AC:
	cmp r0, #1
	beq _020E152C
	b _020E154C
_020E14B8:
	cmp r0, #0x20
	bhi _020E14C8
	beq _020E14EC
	b _020E154C
_020E14C8:
	cmp r0, #0x21
	beq _020E1518
	b _020E154C
_020E14D4:
	mov r0, r7
	mov r1, r6
	mov r2, r5
	mov r3, r4
	bl FUN_020D4064
	b _020E154C
_020E14EC:
	mov r0, r7
	mov r1, r6
	mov r2, r5
	mov r3, r4
	bl FUN_020D3FF4
	b _020E154C
_020E1504:
	mov r0, r6
	mov r1, r5
	mov r2, r4
	bl FUN_020D47B8
	b _020E154C
_020E1518:
	mov r0, r6
	mov r1, r5
	mov r2, r4
	bl FUN_020D4808
	b _020E154C
_020E152C:
	cmp r4, #0
	mov r1, #0
	bls _020E154C
_020E1538:
	ldrb r0, [r6], #1
	add r1, r1, #1
	cmp r1, r4
	strb r0, [r5], #1
	blo _020E1538
_020E154C:
	ldr r0, _020E156C @ =0x021E4D40
	ldrh r0, [r0, #6]
	bl FUN_020D14EC
	bl FUN_020E1134
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020E156C: .4byte 0x021E4D40
	arm_func_end FUN_020E1434

	arm_func_start FUN_020E1570
FUN_020E1570: @ 0x020E1570
	ldr ip, _020E1584 @ =FUN_020E1588
	mov r2, r1
	mov r1, #0
	mov r3, #0x41
	bx ip
	.align 2, 0
_020E1584: .4byte FUN_020E1588
	arm_func_end FUN_020E1570

	arm_func_start FUN_020E1588
FUN_020E1588: @ 0x020E1588
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	mov r6, r1
	mov r5, r2
	mov r4, r3
	bl FUN_020E1134
	cmp r0, #0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	bl FUN_020E16C0
	ldr r0, _020E1664 @ =0x021E4D40
	ldrh r0, [r0, #6]
	bl FUN_020D14AC
	cmp r4, #0x21
	bhi _020E15F4
	bhs _020E1620
	cmp r4, #0x11
	bhi _020E15E8
	cmp r4, #0x10
	blo _020E1644
	beq _020E1640
	cmp r4, #0x11
	beq _020E1610
	b _020E1644
_020E15E8:
	cmp r4, #0x20
	strheq r6, [r7]
	b _020E1644
_020E15F4:
	cmp r4, #0x40
	bhi _020E1604
	streq r6, [r7]
	b _020E1644
_020E1604:
	cmp r4, #0x41
	beq _020E1630
	b _020E1644
_020E1610:
	cmp r5, #0
	ldrbne r0, [r7]
	strbne r0, [r5]
	b _020E1644
_020E1620:
	cmp r5, #0
	ldrhne r0, [r7]
	strhne r0, [r5]
	b _020E1644
_020E1630:
	cmp r5, #0
	ldrne r0, [r7]
	strne r0, [r5]
	b _020E1644
_020E1640:
	strb r6, [r7]
_020E1644:
	ldr r0, _020E1664 @ =0x021E4D40
	ldrh r0, [r0, #6]
	bl FUN_020D14EC
	bl FUN_020E1134
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020E1664: .4byte 0x021E4D40
	arm_func_end FUN_020E1588

	arm_func_start FUN_020E1668
FUN_020E1668: @ 0x020E1668
	ldr r0, _020E1674 @ =0x021E4D40
	ldr r0, [r0]
	bx lr
	.align 2, 0
_020E1674: .4byte 0x021E4D40
	arm_func_end FUN_020E1668

	arm_func_start FUN_020E1678
FUN_020E1678: @ 0x020E1678
	push {r3, r4, r5, lr}
	mov r5, r0
	bl FUN_020D3A38
	ldr r1, _020E16BC @ =0x021E4D40
	mov r4, r0
	str r5, [r1]
	bl FUN_020E1018
	cmp r0, #0
	bne _020E16B0
	cmp r5, #0
	movne r1, #0x1000
	moveq r1, #0x5000
	mov r0, #0xf000
	bl FUN_020D317C
_020E16B0:
	mov r0, r4
	bl FUN_020D3A4C
	pop {r3, r4, r5, pc}
	.align 2, 0
_020E16BC: .4byte 0x021E4D40
	arm_func_end FUN_020E1678

	arm_func_start FUN_020E16C0
FUN_020E16C0: @ 0x020E16C0
	push {r3, lr}
	bl FUN_020E1018
	cmp r0, #0
	popne {r3, pc}
	bl FUN_020E1668
	cmp r0, #0
	popne {r3, pc}
	bl FUN_020D3F48
	pop {r3, pc}
	arm_func_end FUN_020E16C0

	arm_func_start FUN_020E16E4
FUN_020E16E4: @ 0x020E16E4
	push {r3, r4, r5, lr}
	ldr r0, _020E1784 @ =0x021E4D60
	ldr r1, [r0, #8]
	cmp r1, #0
	popne {r3, r4, r5, pc}
	mov r1, #1
	str r1, [r0, #8]
	bl FUN_020E0FB8
	ldr r0, _020E1784 @ =0x021E4D60
	mov r1, #0
	str r1, [r0, #0xc]
	bl FUN_020D6548
	mov r5, #0xd
	mov r4, #1
_020E171C:
	mov r0, r5
	mov r1, r4
	bl FUN_020D66A0
	cmp r0, #0
	beq _020E171C
	ldr r1, _020E1788 @ =FUN_020E198C
	mov r0, #0xd
	bl FUN_020D6654
	bl FUN_020E1798
	mov r0, #0xd
	mov r1, #0
	bl FUN_020D6654
	ldr r1, _020E178C @ =FUN_020E19B8
	mov r0, #0xd
	bl FUN_020D6654
	ldr r1, _020E1784 @ =0x021E4D60
	mov r2, #0
	ldr r0, _020E1790 @ =0x021E4E40
	str r2, [r1, #0x18]
	bl FUN_020E34C0
	ldr r1, _020E1794 @ =FUN_020E1A28
	mov r0, #0x11
	bl FUN_020D6654
	mov r0, #0
	bl FUN_020E1678
	pop {r3, r4, r5, pc}
	.align 2, 0
_020E1784: .4byte 0x021E4D60
_020E1788: .4byte FUN_020E198C
_020E178C: .4byte FUN_020E19B8
_020E1790: .4byte 0x021E4E40
_020E1794: .4byte FUN_020E1A28
	arm_func_end FUN_020E16E4

	arm_func_start FUN_020E1798
FUN_020E1798: @ 0x020E1798
	push {r3, r4, r5, r6, r7, lr}
	sub sp, sp, #0x10
	ldr r0, _020E1960 @ =0x021E4D60
	ldr r1, [r0]
	cmp r1, #0
	addne sp, sp, #0x10
	popne {r3, r4, r5, r6, r7, pc}
	ldr r1, _020E1964 @ =0x04000300
	mov r2, #1
	ldrh r1, [r1]
	str r2, [r0]
	tst r1, #1
	addeq sp, sp, #0x10
	popeq {r3, r4, r5, r6, r7, pc}
	mov r0, #0x40000
	bl FUN_020D11A8
	ldr r3, _020E1968 @ =0x04000208
	mov r2, #1
	ldrh r5, [r3]
	ldr r1, _020E196C @ =0x021E4D44
	mov r4, r0
	strh r2, [r3]
	ldrh r0, [r1, #2]
	add r1, sp, #8
	bl FUN_020E12BC
	ldr r1, _020E1970 @ =0x04000204
	add r0, sp, #0
	ldrh r1, [r1]
	and r1, r1, #0x8000
	asr r6, r1, #0xf
	bl FUN_020E1240
	ldr r3, _020E1970 @ =0x04000204
	ldr r0, _020E1974 @ =0x021E4D80
	ldrh r2, [r3]
	add r0, r0, #0x80
	mov r1, #0x40
	bic r2, r2, #0x8000
	strh r2, [r3]
	bl FUN_020D285C
	ldr r2, _020E1974 @ =0x021E4D80
	ldr r1, _020E1978 @ =0x08000080
	mov r0, #1
	mov r3, #0x40
	add r2, r2, #0x80
	bl FUN_020D4064
	ldr r2, _020E1970 @ =0x04000204
	add r0, sp, #0
	ldrh r1, [r2]
	bic r1, r1, #0x8000
	orr r1, r1, r6, lsl #15
	strh r1, [r2]
	bl FUN_020E1288
	ldr r0, _020E196C @ =0x021E4D44
	add r1, sp, #8
	ldrh r0, [r0, #2]
	bl FUN_020E1318
	ldr r1, _020E197C @ =0x027FFF9B
	ldrb r0, [r1]
	cmp r0, #0
	bne _020E1894
	ldrb r0, [r1, #-1]
	cmp r0, #0
	bne _020E18F8
_020E1894:
	ldr r3, _020E1974 @ =0x021E4D80
	ldr r6, _020E1980 @ =0x027FFC30
	ldrh r0, [r3, #0xbe]
	mov r2, #0
	strh r0, [r6]
	b _020E18C0
_020E18AC:
	add r0, r3, r2
	ldrb r1, [r0, #0xb5]
	add r0, r6, r2
	add r2, r2, #1
	strb r1, [r0, #2]
_020E18C0:
	cmp r2, #3
	blt _020E18AC
	ldrh r0, [r3, #0xb0]
	strh r0, [r6, #6]
	ldr r0, [r3, #0xac]
	str r0, [r6, #8]
	bl FUN_020E1134
	cmp r0, #0
	movne r2, #1
	ldr r1, _020E197C @ =0x027FFF9B
	moveq r2, #0
	mov r0, #1
	strb r2, [r1]
	strb r0, [r1, #-1]
_020E18F8:
	ldr r0, _020E1984 @ =0xFFFF0020
	ldr r1, _020E1988 @ =0x021E4D84
	mov r2, #0x9c
	bl FUN_020D4808
	bl FUN_020D2828
	ldr r0, _020E1974 @ =0x021E4D80
	add r0, r0, #0xfe000000
	lsr r0, r0, #5
	lsl r0, r0, #6
	orr r0, r0, #1
	bl FUN_020E133C
	mov r7, #1
	ldr r6, _020E196C @ =0x021E4D44
	b _020E1938
_020E1930:
	mov r0, r7
	blx SVC_WaitByLoop
_020E1938:
	ldrh r0, [r6]
	cmp r0, #1
	bne _020E1930
	ldr r2, _020E1968 @ =0x04000208
	mov r0, r4
	ldrh r1, [r2]
	strh r5, [r2]
	bl FUN_020D11A8
	add sp, sp, #0x10
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020E1960: .4byte 0x021E4D60
_020E1964: .4byte 0x04000300
_020E1968: .4byte 0x04000208
_020E196C: .4byte 0x021E4D44
_020E1970: .4byte 0x04000204
_020E1974: .4byte 0x021E4D80
_020E1978: .4byte 0x08000080
_020E197C: .4byte 0x027FFF9B
_020E1980: .4byte 0x027FFC30
_020E1984: .4byte 0xFFFF0020
_020E1988: .4byte 0x021E4D84
	arm_func_end FUN_020E1798

	arm_func_start FUN_020E198C
FUN_020E198C: @ 0x020E198C
	push {r3, lr}
	and r0, r1, #0x3f
	cmp r0, #1
	bne _020E19AC
	ldr r0, _020E19B4 @ =0x021E4D44
	mov r1, #1
	strh r1, [r0]
	pop {r3, pc}
_020E19AC:
	bl FUN_020D3F48
	pop {r3, pc}
	.align 2, 0
_020E19B4: .4byte 0x021E4D44
	arm_func_end FUN_020E198C

	arm_func_start FUN_020E19B8
FUN_020E19B8: @ 0x020E19B8
	push {r3, lr}
	and r0, r1, #0x3f
	cmp r0, #0x11
	bne _020E1A08
	ldr r0, _020E1A10 @ =0x021E4D60
	ldr r1, [r0, #0xc]
	cmp r1, #0
	popne {r3, pc}
	ldr r1, [r0, #0x18]
	mov r0, #0
	cmp r1, #0
	beq _020E19EC
	blx r1
_020E19EC:
	cmp r0, #0
	beq _020E19F8
	bl FUN_020E1A14
_020E19F8:
	ldr r0, _020E1A10 @ =0x021E4D60
	mov r1, #1
	str r1, [r0, #0xc]
	pop {r3, pc}
_020E1A08:
	bl FUN_020D3F48
	pop {r3, pc}
	.align 2, 0
_020E1A10: .4byte 0x021E4D60
	arm_func_end FUN_020E19B8

	arm_func_start FUN_020E1A14
FUN_020E1A14: @ 0x020E1A14
	push {r3, lr}
	mov r0, #2
	bl FUN_020E133C
	bl FUN_020D3F48
	pop {r3, pc}
	arm_func_end FUN_020E1A14

	arm_func_start FUN_020E1A28
FUN_020E1A28: @ 0x020E1A28
	ldr r0, _020E1A38 @ =0x021E4D60
	mov r1, #0
	str r1, [r0, #4]
	bx lr
	.align 2, 0
_020E1A38: .4byte 0x021E4D60
	arm_func_end FUN_020E1A28

	arm_func_start FUN_020E1A3C
FUN_020E1A3C: @ 0x020E1A3C
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	cmp r7, #1
	mov r0, #1
	bhi _020E1B8C
	bl FUN_020D15C4
	ldr r1, _020E1BA8 @ =0x021E4F2C
	strh r0, [r1]
	ldrh r0, [r1]
	bl FUN_020D14AC
	ldr r4, _020E1BAC @ =0x04000204
	ldr r1, _020E1BB0 @ =0x0210E1DC
	ldrh r3, [r4]
	ldrh r2, [r4]
	ldr r0, _020E1BB4 @ =_02110FC8
	and r6, r3, #3
	bic r2, r2, #3
	orr r2, r2, #3
	strh r2, [r4]
	str r1, [r0]
	bl FUN_020E1C18
	ldr r2, _020E1BAC @ =0x04000204
	mov r4, r0
	ldrh r1, [r2]
	cmp r7, #0
	ldreq r5, _020E1BB8 @ =0x0210E1EC
	bic r1, r1, #3
	orr r1, r1, r6
	cmp r7, #1
	ldr r0, _020E1BA8 @ =0x021E4F2C
	strh r1, [r2]
	ldrh r0, [r0]
	ldreq r5, _020E1BBC @ =0x0210E1E0
	bl FUN_020D14CC
	ldr r3, [r5]
	mov r0, #1
	ldrh r1, [r3, #0x38]
	cmp r1, #0
	beq _020E1AFC
	and r2, r4, #0xff
_020E1ADC:
	ldrh r1, [r3, #0x38]
	cmp r2, r1
	moveq r0, #0
	beq _020E1AFC
	ldr r3, [r5, #4]!
	ldrh r1, [r3, #0x38]
	cmp r1, #0
	bne _020E1ADC
_020E1AFC:
	ldr r2, [r3]
	ldr r1, _020E1BC0 @ =0x021E4F30
	ldr r3, _020E1BC4 @ =0x021E4F44
	str r2, [r1]
	ldr r1, [r5]
	ldr r2, _020E1BC8 @ =0x021E4F3C
	ldr r4, [r1, #4]
	ldr r1, _020E1BCC @ =0x021E4F34
	str r4, [r3]
	ldr r3, [r5]
	ldr r6, _020E1BD0 @ =0x021E4F38
	ldr r3, [r3, #8]
	ldr r4, _020E1BD4 @ =0x021E4F40
	str r3, [r2]
	ldr r2, [r5]
	ldr r3, _020E1BD8 @ =0x021E4F5C
	ldr r7, [r2, #0xc]
	ldr r2, _020E1BB4 @ =_02110FC8
	str r7, [r1]
	ldr r7, [r5]
	ldr r1, _020E1BDC @ =_02110FC4
	ldr r7, [r7, #0x10]
	str r7, [r6]
	ldr r6, [r5]
	ldr r6, [r6, #0x14]
	str r6, [r4]
	ldr r4, [r5]
	ldr r4, [r4, #0x18]
	str r4, [r3]
	ldr r3, [r5]
	ldr r3, [r3, #0x1c]
	str r3, [r2]
	ldr r2, [r5]
	add r2, r2, #0x20
	str r2, [r1]
	pop {r3, r4, r5, r6, r7, pc}
_020E1B8C:
	cmp r7, #2
	popne {r3, r4, r5, r6, r7, pc}
	bl FUN_020D15C4
	ldr r1, _020E1BE0 @ =0x021E4F60
	strh r0, [r1]
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020E1BA8: .4byte 0x021E4F2C
_020E1BAC: .4byte 0x04000204
_020E1BB0: .4byte 0x0210E1DC
_020E1BB4: .4byte _02110FC8
_020E1BB8: .4byte 0x0210E1EC
_020E1BBC: .4byte 0x0210E1E0
_020E1BC0: .4byte 0x021E4F30
_020E1BC4: .4byte 0x021E4F44
_020E1BC8: .4byte 0x021E4F3C
_020E1BCC: .4byte 0x021E4F34
_020E1BD0: .4byte 0x021E4F38
_020E1BD4: .4byte 0x021E4F40
_020E1BD8: .4byte 0x021E4F5C
_020E1BDC: .4byte _02110FC4
_020E1BE0: .4byte 0x021E4F60
	arm_func_end FUN_020E1A3C

	arm_func_start FUN_020E1BE4
FUN_020E1BE4: @ 0x020E1BE4
	ldr r3, _020E1C10 @ =0x0A005555
	mov r2, #0xaa
	ldr r1, _020E1C14 @ =0x0A002AAA
	strb r2, [r3]
	mov r2, #0x55
	strb r2, [r1]
	mov r1, #0xb0
	strb r1, [r3]
	mov r1, #0xa000000
	strb r0, [r1]
	bx lr
	.align 2, 0
_020E1C10: .4byte 0x0A005555
_020E1C14: .4byte 0x0A002AAA
	arm_func_end FUN_020E1BE4

	arm_func_start FUN_020E1C18
FUN_020E1C18: @ 0x020E1C18
	push {r3, r4, r5, lr}
	ldr r5, _020E1D10 @ =0x04000208
	mov r0, #0
	ldrh r2, [r5]
	ldr r1, _020E1D14 @ =0x021E4F2C
	ldr r4, _020E1D18 @ =0x0A005555
	strh r0, [r5]
	str r2, [r1, #0x1c]
	mov r3, #0xaa
	ldr r2, _020E1D1C @ =0x0A002AAA
	strb r3, [r4]
	mov r3, #0x55
	strb r3, [r2]
	mov r2, #0x90
	strb r2, [r4]
	ldrh r2, [r5]
	ldr r1, [r1, #0x1c]
	strh r1, [r5]
	bl FUN_020E1D24
	ldr r4, _020E1D14 @ =0x021E4F2C
	ldrh r0, [r4, #2]
	cmp r0, #0
	bne _020E1C84
_020E1C74:
	bl FUN_020E1D6C
	ldrh r0, [r4, #2]
	cmp r0, #0
	beq _020E1C74
_020E1C84:
	ldr r0, _020E1D20 @ =0x0A000001
	bl FUN_020E1DC8
	lsl r4, r0, #0x18
	mov r0, #0xa000000
	bl FUN_020E1DC8
	ldr ip, _020E1D10 @ =0x04000208
	orr r4, r0, r4, lsr #16
	ldrh r2, [ip]
	mov r0, #0
	ldr r1, _020E1D14 @ =0x021E4F2C
	strh r0, [ip]
	ldr r5, _020E1D18 @ =0x0A005555
	str r2, [r1, #0x1c]
	mov r3, #0xaa
	ldr r2, _020E1D1C @ =0x0A002AAA
	strb r3, [r5]
	mov r3, #0x55
	strb r3, [r2]
	mov r2, #0xf0
	strb r2, [r5]
	strb r2, [r5]
	ldrh r2, [ip]
	ldr r1, [r1, #0x1c]
	strh r1, [ip]
	bl FUN_020E1D24
	ldr r5, _020E1D14 @ =0x021E4F2C
	ldrh r0, [r5, #2]
	cmp r0, #0
	bne _020E1D08
_020E1CF8:
	bl FUN_020E1D6C
	ldrh r0, [r5, #2]
	cmp r0, #0
	beq _020E1CF8
_020E1D08:
	mov r0, r4
	pop {r3, r4, r5, pc}
	.align 2, 0
_020E1D10: .4byte 0x04000208
_020E1D14: .4byte 0x021E4F2C
_020E1D18: .4byte 0x0A005555
_020E1D1C: .4byte 0x0A002AAA
_020E1D20: .4byte 0x0A000001
	arm_func_end FUN_020E1C18

	arm_func_start FUN_020E1D24
FUN_020E1D24: @ 0x020E1D24
	push {r3, lr}
	ldr r1, _020E1D64 @ =_02110FC4
	ldr r2, _020E1D68 @ =0x021E4F2C
	mov r3, #0
	ldr r1, [r1, #4]
	strh r3, [r2, #2]
	lsl r0, r0, #1
	ldrh r1, [r1, r0]
	mov r0, r3
	str r1, [r2, #0x20]
	str r0, [r2, #0x24]
	bl FUN_020D34B0
	ldr r2, _020E1D68 @ =0x021E4F2C
	str r0, [r2, #0x28]
	str r1, [r2, #0x2c]
	pop {r3, pc}
	.align 2, 0
_020E1D64: .4byte _02110FC4
_020E1D68: .4byte 0x021E4F2C
	arm_func_end FUN_020E1D24

	arm_func_start FUN_020E1D6C
FUN_020E1D6C: @ 0x020E1D6C
	push {r3, lr}
	bl FUN_020D34B0
	ldr r3, _020E1DC0 @ =0x021E4F2C
	ldr r2, _020E1DC4 @ =0x000082EA
	ldr ip, [r3, #0x28]
	ldr r3, [r3, #0x2c]
	subs ip, r0, ip
	sbc r0, r1, r3
	lsl r1, r0, #6
	orr r1, r1, ip, lsr #26
	lsl r0, ip, #6
	mov r3, #0
	bl FUN_020F2900
	ldr r2, _020E1DC0 @ =0x021E4F2C
	ldr r3, [r2, #0x24]
	ldr ip, [r2, #0x20]
	cmp r3, r1
	cmpeq ip, r0
	movls r0, #1
	strhls r0, [r2, #2]
	pop {r3, pc}
	.align 2, 0
_020E1DC0: .4byte 0x021E4F2C
_020E1DC4: .4byte 0x000082EA
	arm_func_end FUN_020E1D6C

	arm_func_start FUN_020E1DC8
FUN_020E1DC8: @ 0x020E1DC8
	ldrb r0, [r0]
	bx lr
	arm_func_end FUN_020E1DC8

	arm_func_start FUN_020E1DD0
FUN_020E1DD0: @ 0x020E1DD0
	push {r4, r5, r6, r7, r8, lr}
	mov r4, r0
	mov r8, r1
	mov r7, r2
	mov r6, #0
	bl FUN_020E1D24
	ldr r5, _020E1E54 @ =0x021E4F2C
_020E1DEC:
	mov r0, r8
	bl FUN_020E1DC8
	cmp r0, r7
	beq _020E1E40
	ldrh r0, [r5, #2]
	cmp r0, #0
	beq _020E1DEC
	mov r0, r8
	bl FUN_020E1DC8
	cmp r7, r0
	beq _020E1E40
	ldr r0, _020E1E58 @ =_02110FC4
	ldr r0, [r0]
	ldrh r0, [r0, #0x18]
	cmp r0, #0xc2
	ldreq r0, _020E1E5C @ =0x0A005555
	moveq r1, #0xf0
	strbeq r1, [r0]
	orr r0, r4, #0xc000
	lsl r0, r0, #0x10
	lsr r6, r0, #0x10
_020E1E40:
	bl FUN_020E1134
	cmp r0, #0
	moveq r6, #0x1000
	mov r0, r6
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0
_020E1E54: .4byte 0x021E4F2C
_020E1E58: .4byte _02110FC4
_020E1E5C: .4byte 0x0A005555
	arm_func_end FUN_020E1DD0

	arm_func_start FUN_020E1E60
FUN_020E1E60: @ 0x020E1E60
	push {r4, r5, r6, r7, r8, lr}
	mov r8, r0
	mov r7, r1
	mov r6, r2
	mov r5, #0
	bl FUN_020E1D24
	ldr r4, _020E1F0C @ =0x021E4F2C
_020E1E7C:
	bl FUN_020E1D6C
	mov r0, r7
	bl FUN_020E1DC8
	cmp r0, r6
	beq _020E1EF8
	tst r0, #0x20
	beq _020E1EC4
	mov r0, r7
	bl FUN_020E1DC8
	cmp r6, r0
	beq _020E1EF8
	orr r0, r8, #0xa000
	lsl r0, r0, #0x10
	ldr r1, _020E1F10 @ =0x0A005555
	mov r2, #0xf0
	strb r2, [r1]
	lsr r5, r0, #0x10
	b _020E1EF8
_020E1EC4:
	ldrh r0, [r4, #2]
	cmp r0, #0
	beq _020E1E7C
	mov r0, r7
	bl FUN_020E1DC8
	cmp r6, r0
	beq _020E1EF8
	orr r0, r8, #0xc000
	lsl r0, r0, #0x10
	ldr r1, _020E1F10 @ =0x0A005555
	mov r2, #0xf0
	strb r2, [r1]
	lsr r5, r0, #0x10
_020E1EF8:
	bl FUN_020E1134
	cmp r0, #0
	moveq r5, #0x1000
	mov r0, r5
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0
_020E1F0C: .4byte 0x021E4F2C
_020E1F10: .4byte 0x0A005555
	arm_func_end FUN_020E1E60

	arm_func_start FUN_020E1F14
FUN_020E1F14: @ 0x020E1F14
	push {r3, r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x24
	mov r5, r0
	ldm r5!, {r0, r1, r2, r3}
	add r4, sp, #0
	stm r4!, {r0, r1, r2, r3}
	ldm r5!, {r0, r1, r2, r3}
	stm r4!, {r0, r1, r2, r3}
	ldr r0, _020E1FFC @ =0x021E4F2C
	ldr r1, [r5]
	ldrh r0, [r0]
	str r1, [r4]
	ldrh r5, [sp, #0x20]
	ldr r6, [sp, #0x14]
	ldr r7, [sp, #0x1c]
	ldr r8, [sp, #0x18]
	bl FUN_020D14AC
	ldr r3, _020E2000 @ =0x04000204
	ldr r0, _020E2004 @ =_02110FC4
	ldrh r2, [r3]
	ldrh r1, [r3]
	and r4, r2, #3
	bic r1, r1, #3
	orr r1, r1, #3
	strh r1, [r3]
	ldr r0, [r0]
	ldr r0, [r0]
	cmp r0, #0x20000
	bne _020E1F98
	lsl r0, r5, #0xc
	lsr r0, r0, #0x10
	bl FUN_020E1BE4
	and r5, r5, #0xf
_020E1F98:
	ldr r0, _020E2004 @ =_02110FC4
	cmp r8, #0
	ldr r0, [r0]
	sub r8, r8, #1
	ldrh r0, [r0, #8]
	lsl r0, r5, r0
	add r0, r0, #0xa000000
	add r1, r6, r0
	beq _020E1FD0
_020E1FBC:
	ldrb r0, [r1], #1
	cmp r8, #0
	sub r8, r8, #1
	strb r0, [r7], #1
	bne _020E1FBC
_020E1FD0:
	ldr r2, _020E2000 @ =0x04000204
	ldr r0, _020E1FFC @ =0x021E4F2C
	ldrh r1, [r2]
	bic r1, r1, #3
	orr r1, r1, r4
	strh r1, [r2]
	ldrh r0, [r0]
	bl FUN_020D14CC
	mov r0, #0
	add sp, sp, #0x24
	pop {r3, r4, r5, r6, r7, r8, pc}
	.align 2, 0
_020E1FFC: .4byte 0x021E4F2C
_020E2000: .4byte 0x04000204
_020E2004: .4byte _02110FC4
	arm_func_end FUN_020E1F14

	arm_func_start FUN_020E2008
FUN_020E2008: @ 0x020E2008
	cmp r2, #0
	sub r2, r2, #1
	beq _020E2034
_020E2014:
	ldrb ip, [r1], #1
	ldrb r3, [r0], #1
	cmp ip, r3
	subne r0, r1, #1
	bxne lr
	cmp r2, #0
	sub r2, r2, #1
	bne _020E2014
_020E2034:
	mov r0, #0
	bx lr
	arm_func_end FUN_020E2008

	arm_func_start FUN_020E203C
FUN_020E203C: @ 0x020E203C
	push {r4, r5, r6, r7, lr}
	sub sp, sp, #0x24
	mov r5, r0
	ldm r5!, {r0, r1, r2, r3}
	add r4, sp, #0
	stm r4!, {r0, r1, r2, r3}
	ldm r5!, {r0, r1, r2, r3}
	stm r4!, {r0, r1, r2, r3}
	ldr r0, _020E210C @ =0x021E4F2C
	ldr r1, [r5]
	ldrh r0, [r0]
	str r1, [r4]
	ldrh r5, [sp, #0x20]
	ldr r6, [sp, #0xc]
	ldr r7, [sp, #0x18]
	bl FUN_020D14AC
	ldr r3, _020E2110 @ =0x04000204
	ldr r0, _020E2114 @ =_02110FC4
	ldrh r2, [r3]
	ldrh r1, [r3]
	and r4, r2, #3
	bic r1, r1, #3
	orr r1, r1, #3
	strh r1, [r3]
	ldr r0, [r0]
	ldr r0, [r0]
	cmp r0, #0x20000
	bne _020E20BC
	lsl r0, r5, #0xc
	lsr r0, r0, #0x10
	bl FUN_020E1BE4
	and r5, r5, #0xf
_020E20BC:
	ldr r1, _020E2114 @ =_02110FC4
	mov r0, r6
	ldr r1, [r1]
	mov r2, r7
	ldrh r1, [r1, #8]
	lsl r1, r5, r1
	add r1, r1, #0xa000000
	bl FUN_020E2008
	ldr r3, _020E2110 @ =0x04000204
	ldr r1, _020E210C @ =0x021E4F2C
	ldrh r2, [r3]
	mov r5, r0
	bic r0, r2, #3
	orr r0, r0, r4
	strh r0, [r3]
	ldrh r0, [r1]
	bl FUN_020D14CC
	mov r0, r5
	add sp, sp, #0x24
	pop {r4, r5, r6, r7, pc}
	.align 2, 0
_020E210C: .4byte 0x021E4F2C
_020E2110: .4byte 0x04000204
_020E2114: .4byte _02110FC4
	arm_func_end FUN_020E203C

	arm_func_start FUN_020E2118
FUN_020E2118: @ 0x020E2118
	push {r4, r5, r6, r7, lr}
	sub sp, sp, #0x24
	mov r4, r0
	ldm r4!, {r0, r1, r2, r3}
	add ip, sp, #0
	stm ip!, {r0, r1, r2, r3}
	ldm r4!, {r0, r1, r2, r3}
	stm ip!, {r0, r1, r2, r3}
	ldr r0, [r4]
	mov r4, #0
	str r0, [ip]
	ldrh r5, [sp, #0x20]
	ldr r6, [sp, #0xc]
	ldr r7, [sp, #0x18]
_020E2150:
	mov r0, r5
	mov r1, r6
	bl FUN_020E21C4
	cmp r0, #0
	bne _020E2180
	mov r0, r5
	mov r1, r6
	mov r2, r7
	bl FUN_020E21DC
	cmp r0, #0
	addeq sp, sp, #0x24
	popeq {r4, r5, r6, r7, pc}
_020E2180:
	add r1, r4, #1
	lsl r1, r1, #0x10
	lsr r4, r1, #0x10
	cmp r4, #3
	blo _020E2150
	add sp, sp, #0x24
	pop {r4, r5, r6, r7, pc}
	arm_func_end FUN_020E2118

	arm_func_start FUN_020E219C
FUN_020E219C: @ 0x020E219C
	stmdb sp!, {lr}
	sub sp, sp, #0x24
	strh r0, [sp, #0x20]
	add r0, sp, #0
	str r1, [sp, #0x14]
	str r2, [sp, #0x1c]
	str r3, [sp, #0x18]
	bl FUN_020E1F14
	add sp, sp, #0x24
	ldm sp!, {pc}
	arm_func_end FUN_020E219C

	arm_func_start FUN_020E21C4
FUN_020E21C4: @ 0x020E21C4
	push {r3, lr}
	ldr r2, _020E21D8 @ =0x021E4F2C
	ldr r2, [r2, #4]
	blx r2
	pop {r3, pc}
	.align 2, 0
_020E21D8: .4byte 0x021E4F2C
	arm_func_end FUN_020E21C4

	arm_func_start FUN_020E21DC
FUN_020E21DC: @ 0x020E21DC
	stmdb sp!, {lr}
	sub sp, sp, #0x24
	strh r0, [sp, #0x20]
	add r0, sp, #0
	str r1, [sp, #0xc]
	str r2, [sp, #0x18]
	bl FUN_020E203C
	add sp, sp, #0x24
	ldm sp!, {pc}
	stmdb sp!, {lr}
	sub sp, sp, #0x24
	str r1, [sp, #0xc]
	strh r0, [sp, #0x20]
	str r2, [sp, #0x18]
	ldr r1, _020E222C @ =FUN_020E2118
	add r0, sp, #0
	mov r2, r3
	bl FUN_020E366C
	add sp, sp, #0x24
	ldm sp!, {pc}
	.align 2, 0
_020E222C: .4byte FUN_020E2118
	arm_func_end FUN_020E21DC

	arm_func_start FUN_020E2230
FUN_020E2230: @ 0x020E2230
	push {r3, r4, r5, lr}
	ldr r0, _020E22FC @ =0x021E4F2C
	ldrh r0, [r0]
	bl FUN_020D14AC
	ldr r0, _020E2300 @ =0x04000204
	ldr r1, _020E2304 @ =_02110FC4
	ldrh r3, [r0]
	ldr r2, [r1]
	ldrh r1, [r0]
	ldr r4, [r2, #0x10]
	mov r2, #0
	bic r1, r1, #3
	orr r1, r1, r4
	strh r1, [r0]
	ldrh r4, [r0, #4]
	ldr r1, _020E2308 @ =0x021E4F48
	ldr lr, _020E230C @ =0x0A005555
	strh r2, [r0, #4]
	str r4, [r1]
	mov r5, #0xaa
	ldr r4, _020E2310 @ =0x0A002AAA
	strb r5, [lr]
	mov ip, #0x55
	strb ip, [r4]
	mov r2, #0x80
	strb r2, [lr]
	strb r5, [lr]
	strb ip, [r4]
	mov r2, #0x10
	strb r2, [lr]
	ldrh r2, [r0, #4]
	ldr r2, [r1]
	ldr r1, _020E2314 @ =0x021E4F5C
	strh r2, [r0, #4]
	ldr r4, [r1]
	mov r0, #3
	mov r1, #0xa000000
	mov r2, #0xff
	and r5, r3, #3
	blx r4
	ldr r3, _020E2300 @ =0x04000204
	ldr r1, _020E22FC @ =0x021E4F2C
	ldrh r2, [r3]
	mov r4, r0
	bic r0, r2, #3
	orr r0, r0, r5
	strh r0, [r3]
	ldrh r0, [r1]
	bl FUN_020D14CC
	mov r0, r4
	pop {r3, r4, r5, pc}
	.align 2, 0
_020E22FC: .4byte 0x021E4F2C
_020E2300: .4byte 0x04000204
_020E2304: .4byte _02110FC4
_020E2308: .4byte 0x021E4F48
_020E230C: .4byte 0x0A005555
_020E2310: .4byte 0x0A002AAA
_020E2314: .4byte 0x021E4F5C
	arm_func_end FUN_020E2230

	arm_func_start FUN_020E2318
FUN_020E2318: @ 0x020E2318
	push {r4, r5, lr}
	sub sp, sp, #0x24
	mov r5, r0
	ldm r5!, {r0, r1, r2, r3}
	add r4, sp, #0
	stm r4!, {r0, r1, r2, r3}
	ldm r5!, {r0, r1, r2, r3}
	stm r4!, {r0, r1, r2, r3}
	ldr r1, [r5]
	ldr r0, _020E2424 @ =0x021E4F2C
	str r1, [r4]
	ldrh r1, [sp, #0x20]
	ldrh r0, [r0]
	lsl r1, r1, #7
	add r5, r1, #0xa000000
	bl FUN_020D14AC
	ldr ip, _020E2428 @ =0x04000204
	ldr r1, _020E242C @ =_02110FC4
	ldrh r0, [ip]
	ldr r1, [r1]
	ldrh r2, [ip]
	ldr r3, [r1, #0x10]
	mov r1, #0
	bic r2, r2, #3
	orr r2, r2, r3
	strh r2, [ip]
	ldrh r3, [ip, #4]
	ldr r4, _020E2430 @ =0x0A005555
	mov r2, #0xaa
	strh r1, [ip, #4]
	strb r2, [r4]
	ldr r1, _020E2434 @ =0x0A002AAA
	mov r2, #0x55
	strb r2, [r1]
	mov r1, #0xa0
	strb r1, [r4]
	and r4, r0, #3
	mov r0, #0x80
	mov r2, #0xff
_020E23B4:
	strb r2, [r5], #1
	subs r0, r0, #1
	bne _020E23B4
	ldr lr, _020E2438 @ =0x04000208
	ldr ip, _020E243C @ =0x021E4F5C
	ldrh r0, [lr]
	sub r1, r5, #1
	strh r3, [lr]
	ldr r3, [ip]
	mov r0, #1
	blx r3
	movs r5, r0
	beq _020E23F8
	and r0, r5, #0xff00
	orr r0, r0, #2
	lsl r0, r0, #0x10
	lsr r5, r0, #0x10
_020E23F8:
	ldr r2, _020E2428 @ =0x04000204
	ldr r0, _020E2424 @ =0x021E4F2C
	ldrh r1, [r2]
	bic r1, r1, #3
	orr r1, r1, r4
	strh r1, [r2]
	ldrh r0, [r0]
	bl FUN_020D14CC
	mov r0, r5
	add sp, sp, #0x24
	pop {r4, r5, pc}
	.align 2, 0
_020E2424: .4byte 0x021E4F2C
_020E2428: .4byte 0x04000204
_020E242C: .4byte _02110FC4
_020E2430: .4byte 0x0A005555
_020E2434: .4byte 0x0A002AAA
_020E2438: .4byte 0x04000208
_020E243C: .4byte 0x021E4F5C
	arm_func_end FUN_020E2318

	arm_func_start FUN_020E2440
FUN_020E2440: @ 0x020E2440
	push {r4, r5, r6, r7, lr}
	sub sp, sp, #0x24
	mov r5, r0
	ldm r5!, {r0, r1, r2, r3}
	add r4, sp, #0
	stm r4!, {r0, r1, r2, r3}
	ldm r5!, {r0, r1, r2, r3}
	stm r4!, {r0, r1, r2, r3}
	ldr r0, [r5]
	str r0, [r4]
	ldrh r0, [sp, #0x20]
	cmp r0, #0x10
	addhs sp, sp, #0x24
	ldrhs r0, _020E24E4 @ =0x000080FF
	pophs {r4, r5, r6, r7, pc}
	lsl r0, r0, #0x15
	lsr r6, r0, #0x10
	mov r5, #0
	mov r4, #2
_020E248C:
	mov r7, r4
_020E2490:
	mov r0, r6
	bl FUN_020E27A8
	cmp r0, #0
	beq _020E24B0
	sub r1, r7, #1
	lsl r1, r1, #0x10
	lsrs r7, r1, #0x10
	bne _020E2490
_020E24B0:
	add r1, r6, #1
	lsl r1, r1, #0x10
	cmp r0, #0
	lsr r6, r1, #0x10
	addne sp, sp, #0x24
	popne {r4, r5, r6, r7, pc}
	add r1, r5, #1
	lsl r1, r1, #0x10
	lsr r5, r1, #0x10
	cmp r5, #0x20
	blo _020E248C
	add sp, sp, #0x24
	pop {r4, r5, r6, r7, pc}
	.align 2, 0
_020E24E4: .4byte 0x000080FF
	arm_func_end FUN_020E2440

	arm_func_start FUN_020E24E8
FUN_020E24E8: @ 0x020E24E8
	push {r4, r5, lr}
	sub sp, sp, #0x24
	mov r5, r0
	ldm r5!, {r0, r1, r2, r3}
	add r4, sp, #0
	stm r4!, {r0, r1, r2, r3}
	ldm r5!, {r0, r1, r2, r3}
	stm r4!, {r0, r1, r2, r3}
	ldr r0, _020E25E8 @ =0x021E4F2C
	ldr r1, [r5]
	ldrh r0, [r0]
	str r1, [r4]
	ldr r5, [sp, #0xc]
	bl FUN_020D14AC
	ldr r1, _020E25EC @ =0x04000204
	ldr r2, _020E25F0 @ =_02110FC4
	ldrh r0, [r1]
	ldr r3, [r2]
	ldrh r2, [r1]
	ldr r4, [r3, #0x10]
	mov r3, #0
	bic r2, r2, #3
	orr r2, r2, r4
	strh r2, [r1]
	ldrh ip, [sp, #0x20]
	ldrh r2, [r1, #4]
	ldr r4, _020E25F4 @ =0x0A005555
	lsl ip, ip, #7
	strh r3, [r1, #4]
	mov r3, #0xaa
	strb r3, [r4]
	ldr r1, _020E25F8 @ =0x0A002AAA
	mov r3, #0x55
	strb r3, [r1]
	mov r1, #0xa0
	strb r1, [r4]
	and r4, r0, #3
	add lr, ip, #0xa000000
	mov r1, #0x80
_020E2584:
	ldrb r0, [r5], #1
	subs r1, r1, #1
	strb r0, [lr], #1
	bne _020E2584
	ldr ip, _020E25FC @ =0x04000208
	ldr r3, _020E2600 @ =0x021E4F5C
	ldrh r0, [ip]
	sub r1, lr, #1
	mov r0, #1
	strh r2, [ip]
	ldrb r2, [r5, #-1]
	ldr r3, [r3]
	blx r3
	ldr r3, _020E25EC @ =0x04000204
	ldr r1, _020E25E8 @ =0x021E4F2C
	ldrh r2, [r3]
	mov r5, r0
	bic r0, r2, #3
	orr r0, r0, r4
	strh r0, [r3]
	ldrh r0, [r1]
	bl FUN_020D14CC
	mov r0, r5
	add sp, sp, #0x24
	pop {r4, r5, pc}
	.align 2, 0
_020E25E8: .4byte 0x021E4F2C
_020E25EC: .4byte 0x04000204
_020E25F0: .4byte _02110FC4
_020E25F4: .4byte 0x0A005555
_020E25F8: .4byte 0x0A002AAA
_020E25FC: .4byte 0x04000208
_020E2600: .4byte 0x021E4F5C
	arm_func_end FUN_020E24E8

	arm_func_start FUN_020E2604
FUN_020E2604: @ 0x020E2604
	push {r3, r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x24
	mov r5, r0
	ldm r5!, {r0, r1, r2, r3}
	add r4, sp, #0
	stm r4!, {r0, r1, r2, r3}
	ldm r5!, {r0, r1, r2, r3}
	stm r4!, {r0, r1, r2, r3}
	ldr r0, [r5]
	str r0, [r4]
	ldrh r0, [sp, #0x20]
	ldr r6, [sp, #0xc]
	cmp r0, #0x10
	addhs sp, sp, #0x24
	ldrhs r0, _020E26C0 @ =0x000080FF
	pophs {r3, r4, r5, r6, r7, r8, pc}
	ldr r7, _020E26C4 @ =0x021E4F28
	lsl r0, r0, #0x15
	mov r1, #0x1000
	strh r1, [r7]
	lsr r5, r0, #0x10
	mov r4, #2
_020E265C:
	mov r8, r4
_020E2660:
	mov r0, r5
	mov r1, r6
	bl FUN_020E27CC
	cmp r0, #0
	beq _020E2684
	sub r1, r8, #1
	lsl r1, r1, #0x10
	lsrs r8, r1, #0x10
	bne _020E2660
_020E2684:
	cmp r0, #0
	addne sp, sp, #0x24
	popne {r3, r4, r5, r6, r7, r8, pc}
	ldrh r2, [r7]
	add r1, r5, #1
	lsl r1, r1, #0x10
	sub r2, r2, #0x80
	strh r2, [r7]
	ldrh r2, [r7]
	add r6, r6, #0x80
	lsr r5, r1, #0x10
	cmp r2, #0
	bne _020E265C
	add sp, sp, #0x24
	pop {r3, r4, r5, r6, r7, r8, pc}
	.align 2, 0
_020E26C0: .4byte 0x000080FF
_020E26C4: .4byte 0x021E4F28
	arm_func_end FUN_020E2604

	arm_func_start FUN_020E26C8
FUN_020E26C8: @ 0x020E26C8
	stmdb sp!, {lr}
	sub sp, sp, #0x24
	add r0, sp, #0
	bl FUN_020E2230
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	add sp, sp, #0x24
	ldm sp!, {pc}
	stmdb sp!, {lr}
	sub sp, sp, #0x24
	strh r0, [sp, #0x20]
	add r0, sp, #0
	bl FUN_020E2440
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	add sp, sp, #0x24
	ldm sp!, {pc}
	stmdb sp!, {lr}
	sub sp, sp, #0x24
	strh r0, [sp, #0x20]
	add r0, sp, #0
	str r1, [sp, #0xc]
	bl FUN_020E2604
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	add sp, sp, #0x24
	ldm sp!, {pc}
	stmdb sp!, {lr}
	sub sp, sp, #0x24
	ldr r1, _020E2754 @ =FUN_020E2230
	mov r2, r0
	add r0, sp, #0
	bl FUN_020E366C
	add sp, sp, #0x24
	ldm sp!, {pc}
	.align 2, 0
_020E2754: .4byte FUN_020E2230
	arm_func_end FUN_020E26C8

	arm_func_start FUN_020E2758
FUN_020E2758: @ 0x020E2758
	stmdb sp!, {lr}
	sub sp, sp, #0x24
	mov r2, r1
	strh r0, [sp, #0x20]
	ldr r1, _020E277C @ =FUN_020E2440
	add r0, sp, #0
	bl FUN_020E366C
	add sp, sp, #0x24
	ldm sp!, {pc}
	.align 2, 0
_020E277C: .4byte FUN_020E2440
	arm_func_end FUN_020E2758

	arm_func_start FUN_020E2780
FUN_020E2780: @ 0x020E2780
	stmdb sp!, {lr}
	sub sp, sp, #0x24
	str r1, [sp, #0xc]
	strh r0, [sp, #0x20]
	ldr r1, _020E27A4 @ =FUN_020E2604
	add r0, sp, #0
	bl FUN_020E366C
	add sp, sp, #0x24
	ldm sp!, {pc}
	.align 2, 0
_020E27A4: .4byte FUN_020E2604
	arm_func_end FUN_020E2780

	arm_func_start FUN_020E27A8
FUN_020E27A8: @ 0x020E27A8
	stmdb sp!, {lr}
	sub sp, sp, #0x24
	strh r0, [sp, #0x20]
	add r0, sp, #0
	bl FUN_020E2318
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	add sp, sp, #0x24
	ldm sp!, {pc}
	arm_func_end FUN_020E27A8

	arm_func_start FUN_020E27CC
FUN_020E27CC: @ 0x020E27CC
	stmdb sp!, {lr}
	sub sp, sp, #0x24
	strh r0, [sp, #0x20]
	add r0, sp, #0
	str r1, [sp, #0xc]
	bl FUN_020E24E8
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	add sp, sp, #0x24
	ldm sp!, {pc}
	stmdb sp!, {lr}
	sub sp, sp, #0x24
	mov r2, r1
	strh r0, [sp, #0x20]
	ldr r1, _020E2818 @ =FUN_020E2318
	add r0, sp, #0
	bl FUN_020E366C
	add sp, sp, #0x24
	ldm sp!, {pc}
	.align 2, 0
_020E2818: .4byte FUN_020E2318
	arm_func_end FUN_020E27CC

	arm_func_start FUN_020E281C
FUN_020E281C: @ 0x020E281C
	stmdb sp!, {lr}
	sub sp, sp, #0x24
	str r1, [sp, #0xc]
	strh r0, [sp, #0x20]
	ldr r1, _020E2840 @ =FUN_020E24E8
	add r0, sp, #0
	bl FUN_020E366C
	add sp, sp, #0x24
	ldm sp!, {pc}
	.align 2, 0
_020E2840: .4byte FUN_020E24E8
	arm_func_end FUN_020E281C

	arm_func_start FUN_020E2844
FUN_020E2844: @ 0x020E2844
	push {r3, r4, r5, lr}
	ldr r0, _020E2910 @ =0x021E4F2C
	ldrh r0, [r0]
	bl FUN_020D14AC
	ldr r0, _020E2914 @ =0x04000204
	ldr r1, _020E2918 @ =_02110FC4
	ldrh r3, [r0]
	ldr r2, [r1]
	ldrh r1, [r0]
	ldr r4, [r2, #0x10]
	mov r2, #0
	bic r1, r1, #3
	orr r1, r1, r4
	strh r1, [r0]
	ldrh r4, [r0, #4]
	ldr r1, _020E291C @ =0x021E4F48
	ldr lr, _020E2920 @ =0x0A005555
	strh r2, [r0, #4]
	str r4, [r1]
	mov r5, #0xaa
	ldr r4, _020E2924 @ =0x0A002AAA
	strb r5, [lr]
	mov ip, #0x55
	strb ip, [r4]
	mov r2, #0x80
	strb r2, [lr]
	strb r5, [lr]
	strb ip, [r4]
	mov r2, #0x10
	strb r2, [lr]
	ldrh r2, [r0, #4]
	ldr r2, [r1]
	ldr r1, _020E2928 @ =0x021E4F5C
	strh r2, [r0, #4]
	ldr r4, [r1]
	mov r0, #3
	mov r1, #0xa000000
	mov r2, #0xff
	and r5, r3, #3
	blx r4
	ldr r3, _020E2914 @ =0x04000204
	ldr r1, _020E2910 @ =0x021E4F2C
	ldrh r2, [r3]
	mov r4, r0
	bic r0, r2, #3
	orr r0, r0, r5
	strh r0, [r3]
	ldrh r0, [r1]
	bl FUN_020D14CC
	mov r0, r4
	pop {r3, r4, r5, pc}
	.align 2, 0
_020E2910: .4byte 0x021E4F2C
_020E2914: .4byte 0x04000204
_020E2918: .4byte _02110FC4
_020E291C: .4byte 0x021E4F48
_020E2920: .4byte 0x0A005555
_020E2924: .4byte 0x0A002AAA
_020E2928: .4byte 0x021E4F5C
	arm_func_end FUN_020E2844

	arm_func_start FUN_020E292C
FUN_020E292C: @ 0x020E292C
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #0x24
	mov r5, r0
	ldm r5!, {r0, r1, r2, r3}
	add r4, sp, #0
	stm r4!, {r0, r1, r2, r3}
	ldm r5!, {r0, r1, r2, r3}
	stm r4!, {r0, r1, r2, r3}
	ldr r0, [r5]
	str r0, [r4]
	ldrh r4, [sp, #0x20]
	cmp r4, #0x10
	addhs sp, sp, #0x24
	ldrhs r0, _020E2A40 @ =0x000080FF
	pophs {r3, r4, r5, r6, pc}
	ldr r0, _020E2A44 @ =0x021E4F2C
	ldrh r0, [r0]
	bl FUN_020D14AC
	ldr r0, _020E2A48 @ =0x04000204
	ldr r1, _020E2A4C @ =_02110FC4
	ldrh r3, [r0]
	ldr r5, [r1]
	ldrh r2, [r0]
	ldr r6, [r5, #0x10]
	mov r5, #0
	bic r2, r2, #3
	orr r2, r2, r6
	strh r2, [r0]
	ldr r2, [r1]
	ldrh r1, [r0, #4]
	ldrh ip, [r2, #8]
	ldr r2, _020E2A50 @ =0x021E4F48
	ldr lr, _020E2A54 @ =0x0A005555
	strh r5, [r0, #4]
	lsl r6, r4, ip
	str r1, [r2]
	mov r5, #0xaa
	ldr r4, _020E2A58 @ =0x0A002AAA
	strb r5, [lr]
	mov ip, #0x55
	strb ip, [r4]
	mov r1, #0x80
	strb r1, [lr]
	strb r5, [lr]
	strb ip, [r4]
	add r1, r6, #0xa000000
	mov r4, #0x30
	strb r4, [r1]
	ldrh r4, [r0, #4]
	ldr r4, [r2]
	ldr r2, _020E2A5C @ =0x021E4F5C
	strh r4, [r0, #4]
	ldr r4, [r2]
	mov r0, #2
	mov r2, #0xff
	and r5, r3, #3
	blx r4
	ldr r3, _020E2A48 @ =0x04000204
	ldr r1, _020E2A44 @ =0x021E4F2C
	ldrh r2, [r3]
	mov r4, r0
	bic r0, r2, #3
	orr r0, r0, r5
	strh r0, [r3]
	ldrh r0, [r1]
	bl FUN_020D14CC
	mov r0, r4
	add sp, sp, #0x24
	pop {r3, r4, r5, r6, pc}
	.align 2, 0
_020E2A40: .4byte 0x000080FF
_020E2A44: .4byte 0x021E4F2C
_020E2A48: .4byte 0x04000204
_020E2A4C: .4byte _02110FC4
_020E2A50: .4byte 0x021E4F48
_020E2A54: .4byte 0x0A005555
_020E2A58: .4byte 0x0A002AAA
_020E2A5C: .4byte 0x021E4F5C
	arm_func_end FUN_020E292C

	arm_func_start FUN_020E2A60
FUN_020E2A60: @ 0x020E2A60
	push {r3, lr}
	ldr ip, _020E2AA8 @ =0x0A005555
	mov r3, #0xaa
	ldr r2, _020E2AAC @ =0x0A002AAA
	strb r3, [ip]
	mov r3, #0x55
	mov lr, r0
	strb r3, [r2]
	mov r0, #0xa0
	strb r0, [ip]
	ldrb r2, [lr]
	ldr r3, _020E2AB0 @ =0x021E4F5C
	mov r0, #1
	strb r2, [r1]
	ldrb r2, [lr]
	ldr r3, [r3]
	blx r3
	pop {r3, pc}
	.align 2, 0
_020E2AA8: .4byte 0x0A005555
_020E2AAC: .4byte 0x0A002AAA
_020E2AB0: .4byte 0x021E4F5C
	arm_func_end FUN_020E2A60

	arm_func_start FUN_020E2AB4
FUN_020E2AB4: @ 0x020E2AB4
	push {r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #0x24
	mov r5, r0
	ldm r5!, {r0, r1, r2, r3}
	add r4, sp, #0
	stm r4!, {r0, r1, r2, r3}
	ldm r5!, {r0, r1, r2, r3}
	stm r4!, {r0, r1, r2, r3}
	ldr r0, [r5]
	str r0, [r4]
	ldrh r8, [sp, #0x20]
	ldr r5, [sp, #0xc]
	cmp r8, #0x10
	addhs sp, sp, #0x24
	ldrhs r0, _020E2C64 @ =0x000080FF
	pophs {r4, r5, r6, r7, r8, sb, pc}
	ldr r0, _020E2C68 @ =_02110FC4
	ldr r6, _020E2C6C @ =FUN_020E2C84
	ldr r0, [r0]
	mov sb, #0
	ldrh r0, [r0, #8]
	lsl r0, r8, r0
	add r7, r0, #0xa000000
_020E2B10:
	mov r0, r8
	bl FUN_020E2D64
	movs r4, r0
	bne _020E2B38
	mov r0, r7
	mov r1, r6
	bl FUN_020E2CB8
	lsl r0, r0, #0x10
	lsrs r4, r0, #0x10
	beq _020E2B58
_020E2B38:
	add r0, sb, #1
	lsl r0, r0, #0x10
	cmp sb, #0x50
	lsr sb, r0, #0x10
	bne _020E2B10
	add sp, sp, #0x24
	mov r0, r4
	pop {r4, r5, r6, r7, r8, sb, pc}
_020E2B58:
	mov r6, #1
	cmp sb, #0
	movne r6, #6
	cmp r6, #1
	mov sb, #1
	blo _020E2B8C
_020E2B70:
	mov r0, r8
	bl FUN_020E2D64
	add r0, sb, #1
	lsl r0, r0, #0x10
	cmp r6, r0, lsr #16
	lsr sb, r0, #0x10
	bhs _020E2B70
_020E2B8C:
	ldr r0, _020E2C70 @ =0x021E4F2C
	ldrh r0, [r0]
	bl FUN_020D14AC
	ldr r1, _020E2C74 @ =0x04000204
	ldr r2, _020E2C68 @ =_02110FC4
	ldrh r0, [r1]
	ldr r6, [r2]
	ldrh r3, [r1]
	ldr r8, [r6, #0x10]
	ldr r6, _020E2C78 @ =0x021E4F28
	bic r3, r3, #3
	orr r3, r3, r8
	strh r3, [r1]
	ldr r2, [r2]
	mov r3, #0
	ldr r8, [r2, #4]
	ldr r2, _020E2C7C @ =0x021E4F48
	strh r8, [r6]
	ldrh sb, [r1, #4]
	and r8, r0, #3
	strh r3, [r1, #4]
	ldrh r0, [r6]
	str sb, [r2]
	cmp r0, #0
	beq _020E2C24
_020E2BF0:
	mov r0, r5
	mov r1, r7
	bl FUN_020E2A60
	movs r4, r0
	bne _020E2C24
	ldrh r0, [r6]
	add r5, r5, #1
	add r7, r7, #1
	sub r0, r0, #1
	strh r0, [r6]
	ldrh r0, [r6]
	cmp r0, #0
	bne _020E2BF0
_020E2C24:
	ldr r3, _020E2C80 @ =0x04000208
	ldr r0, _020E2C7C @ =0x021E4F48
	ldrh r1, [r3]
	ldr r0, [r0]
	sub r2, r3, #4
	strh r0, [r3]
	ldrh r1, [r2]
	ldr r0, _020E2C70 @ =0x021E4F2C
	bic r1, r1, #3
	orr r1, r1, r8
	strh r1, [r2]
	ldrh r0, [r0]
	bl FUN_020D14CC
	mov r0, r4
	add sp, sp, #0x24
	pop {r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0
_020E2C64: .4byte 0x000080FF
_020E2C68: .4byte _02110FC4
_020E2C6C: .4byte FUN_020E2C84
_020E2C70: .4byte 0x021E4F2C
_020E2C74: .4byte 0x04000204
_020E2C78: .4byte 0x021E4F28
_020E2C7C: .4byte 0x021E4F48
_020E2C80: .4byte 0x04000208
	arm_func_end FUN_020E2AB4

	arm_func_start FUN_020E2C84
FUN_020E2C84: @ 0x020E2C84
	ldr r1, _020E2CB4 @ =_02110FC4
	ldr r1, [r1]
	ldr r2, [r1, #4]
	cmp r2, #0
	beq _020E2CAC
_020E2C98:
	ldrb r1, [r0], #1
	cmp r1, #0xff
	bne _020E2CAC
	subs r2, r2, #1
	bne _020E2C98
_020E2CAC:
	mov r0, r2
	bx lr
	.align 2, 0
_020E2CB4: .4byte _02110FC4
	arm_func_end FUN_020E2C84

	arm_func_start FUN_020E2CB8
FUN_020E2CB8: @ 0x020E2CB8
	push {r4, r5, r6, lr}
	ldr r2, _020E2D34 @ =0x021E4F2C
	mov r5, r0
	ldrh r0, [r2]
	mov r4, r1
	bl FUN_020D14AC
	ldr ip, _020E2D38 @ =0x04000204
	ldr r0, _020E2D3C @ =_02110FC4
	ldrh r3, [ip]
	ldr r0, [r0]
	ldrh r1, [ip]
	ldr r2, [r0, #0x10]
	mov r0, r5
	bic r1, r1, #3
	orr r1, r1, r2
	strh r1, [ip]
	and r6, r3, #3
	mov r5, #0
	blx r4
	cmp r0, #0
	ldr r2, _020E2D38 @ =0x04000204
	ldr r0, _020E2D34 @ =0x021E4F2C
	ldrh r1, [r2]
	ldrne r5, _020E2D40 @ =0x00008004
	bic r1, r1, #3
	orr r1, r1, r6
	strh r1, [r2]
	ldrh r0, [r0]
	bl FUN_020D14CC
	mov r0, r5
	pop {r4, r5, r6, pc}
	.align 2, 0
_020E2D34: .4byte 0x021E4F2C
_020E2D38: .4byte 0x04000204
_020E2D3C: .4byte _02110FC4
_020E2D40: .4byte 0x00008004
	arm_func_end FUN_020E2CB8

	arm_func_start FUN_020E2D44
FUN_020E2D44: @ 0x020E2D44
	stmdb sp!, {lr}
	sub sp, sp, #0x24
	add r0, sp, #0
	bl FUN_020E2844
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	add sp, sp, #0x24
	ldm sp!, {pc}
	arm_func_end FUN_020E2D44

	arm_func_start FUN_020E2D64
FUN_020E2D64: @ 0x020E2D64
	stmdb sp!, {lr}
	sub sp, sp, #0x24
	strh r0, [sp, #0x20]
	add r0, sp, #0
	bl FUN_020E292C
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	add sp, sp, #0x24
	ldm sp!, {pc}
	stmdb sp!, {lr}
	sub sp, sp, #0x24
	strh r0, [sp, #0x20]
	add r0, sp, #0
	str r1, [sp, #0xc]
	bl FUN_020E2AB4
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	add sp, sp, #0x24
	ldm sp!, {pc}
	stmdb sp!, {lr}
	sub sp, sp, #0x24
	ldr r1, _020E2DD0 @ =FUN_020E2844
	mov r2, r0
	add r0, sp, #0
	bl FUN_020E366C
	add sp, sp, #0x24
	ldm sp!, {pc}
	.align 2, 0
_020E2DD0: .4byte FUN_020E2844
	arm_func_end FUN_020E2D64

	arm_func_start FUN_020E2DD4
FUN_020E2DD4: @ 0x020E2DD4
	stmdb sp!, {lr}
	sub sp, sp, #0x24
	mov r2, r1
	strh r0, [sp, #0x20]
	ldr r1, _020E2DF8 @ =FUN_020E292C
	add r0, sp, #0
	bl FUN_020E366C
	add sp, sp, #0x24
	ldm sp!, {pc}
	.align 2, 0
_020E2DF8: .4byte FUN_020E292C
	arm_func_end FUN_020E2DD4

	arm_func_start FUN_020E2DFC
FUN_020E2DFC: @ 0x020E2DFC
	stmdb sp!, {lr}
	sub sp, sp, #0x24
	str r1, [sp, #0xc]
	strh r0, [sp, #0x20]
	ldr r1, _020E2E20 @ =FUN_020E2AB4
	add r0, sp, #0
	bl FUN_020E366C
	add sp, sp, #0x24
	ldm sp!, {pc}
	.align 2, 0
_020E2E20: .4byte FUN_020E2AB4
	arm_func_end FUN_020E2DFC

	arm_func_start FUN_020E2E24
FUN_020E2E24: @ 0x020E2E24
	push {r3, r4, r5, lr}
	ldr r0, _020E2EF0 @ =0x021E4F2C
	ldrh r0, [r0]
	bl FUN_020D14AC
	ldr r0, _020E2EF4 @ =0x04000204
	ldr r1, _020E2EF8 @ =_02110FC4
	ldrh r3, [r0]
	ldr r2, [r1]
	ldrh r1, [r0]
	ldr r4, [r2, #0x10]
	mov r2, #0
	bic r1, r1, #3
	orr r1, r1, r4
	strh r1, [r0]
	ldrh r4, [r0, #4]
	ldr r1, _020E2EFC @ =0x021E4F48
	ldr lr, _020E2F00 @ =0x0A005555
	strh r2, [r0, #4]
	str r4, [r1]
	mov r5, #0xaa
	ldr r4, _020E2F04 @ =0x0A002AAA
	strb r5, [lr]
	mov ip, #0x55
	strb ip, [r4]
	mov r2, #0x80
	strb r2, [lr]
	strb r5, [lr]
	strb ip, [r4]
	mov r2, #0x10
	strb r2, [lr]
	ldrh r2, [r0, #4]
	ldr r2, [r1]
	ldr r1, _020E2F08 @ =0x021E4F5C
	strh r2, [r0, #4]
	ldr r4, [r1]
	mov r0, #3
	mov r1, #0xa000000
	mov r2, #0xff
	and r5, r3, #3
	blx r4
	ldr r3, _020E2EF4 @ =0x04000204
	ldr r1, _020E2EF0 @ =0x021E4F2C
	ldrh r2, [r3]
	mov r4, r0
	bic r0, r2, #3
	orr r0, r0, r5
	strh r0, [r3]
	ldrh r0, [r1]
	bl FUN_020D14CC
	mov r0, r4
	pop {r3, r4, r5, pc}
	.align 2, 0
_020E2EF0: .4byte 0x021E4F2C
_020E2EF4: .4byte 0x04000204
_020E2EF8: .4byte _02110FC4
_020E2EFC: .4byte 0x021E4F48
_020E2F00: .4byte 0x0A005555
_020E2F04: .4byte 0x0A002AAA
_020E2F08: .4byte 0x021E4F5C
	arm_func_end FUN_020E2E24

	arm_func_start FUN_020E2F0C
FUN_020E2F0C: @ 0x020E2F0C
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x28
	mov r5, r0
	ldm r5!, {r0, r1, r2, r3}
	add r4, sp, #4
	stm r4!, {r0, r1, r2, r3}
	ldm r5!, {r0, r1, r2, r3}
	stm r4!, {r0, r1, r2, r3}
	ldr r0, _020E3074 @ =_02110FC4
	ldr r1, [r5]
	ldr r0, [r0]
	str r1, [r4]
	ldrh r4, [sp, #0x24]
	ldrh r0, [r0, #0xa]
	cmp r4, r0
	addhs sp, sp, #0x28
	ldrhs r0, _020E3078 @ =0x000080FF
	pophs {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, _020E307C @ =0x021E4F2C
	ldrh r0, [r0]
	bl FUN_020D14AC
	ldr r5, _020E3080 @ =0x04000204
	ldr r0, _020E3074 @ =_02110FC4
	ldrh r3, [r5]
	ldr r2, [r0]
	ldrh r1, [r5]
	lsl r0, r4, #0xc
	ldr r2, [r2, #0x10]
	bic r1, r1, #3
	orr r1, r1, r2
	strh r1, [r5]
	and r1, r3, #3
	lsr r0, r0, #0x10
	str r1, [sp]
	bl FUN_020E1BE4
	and sl, r4, #0xf
	mov r8, #0
	add r7, r5, #4
	ldr r5, _020E3084 @ =0x0A005555
	ldr r4, _020E3088 @ =0x021E4F48
	mov fp, r8
	mov r6, #0xaa
_020E2FB4:
	ldr r0, _020E3074 @ =_02110FC4
	ldrh r3, [r7]
	ldr r0, [r0]
	mov sb, #0x55
	ldrh r1, [r0, #8]
	mov r0, #2
	mov r2, #0xff
	strh fp, [r7]
	str r3, [r4]
	ldr r3, _020E308C @ =0x0A002AAA
	strb r6, [r5]
	strb sb, [r3]
	mov r3, #0x80
	strb r3, [r5]
	lsl r1, sl, r1
	ldr r3, _020E308C @ =0x0A002AAA
	strb r6, [r5]
	strb sb, [r3]
	add r1, r1, #0xa000000
	mov r3, #0x30
	strb r3, [r1]
	ldrh r3, [r7]
	ldr r3, [r4]
	strh r3, [r7]
	ldr r3, _020E3090 @ =0x021E4F5C
	ldr r3, [r3]
	blx r3
	mov sb, r0
	tst sb, #0xa000
	beq _020E3044
	cmp r8, #0
	bne _020E3044
	add r0, r8, #1
	lsl r0, r0, #0x10
	lsr r8, r0, #0x10
	b _020E2FB4
_020E3044:
	ldr r2, _020E3080 @ =0x04000204
	ldr r1, _020E307C @ =0x021E4F2C
	ldrh r0, [r2]
	bic r3, r0, #3
	ldr r0, [sp]
	orr r0, r3, r0
	strh r0, [r2]
	ldrh r0, [r1]
	bl FUN_020D14CC
	mov r0, sb
	add sp, sp, #0x28
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020E3074: .4byte _02110FC4
_020E3078: .4byte 0x000080FF
_020E307C: .4byte 0x021E4F2C
_020E3080: .4byte 0x04000204
_020E3084: .4byte 0x0A005555
_020E3088: .4byte 0x021E4F48
_020E308C: .4byte 0x0A002AAA
_020E3090: .4byte 0x021E4F5C
	arm_func_end FUN_020E2F0C

	arm_func_start FUN_020E3094
FUN_020E3094: @ 0x020E3094
	push {r3, lr}
	ldr ip, _020E30DC @ =0x0A005555
	mov r3, #0xaa
	ldr r2, _020E30E0 @ =0x0A002AAA
	strb r3, [ip]
	mov r3, #0x55
	mov lr, r0
	strb r3, [r2]
	mov r0, #0xa0
	strb r0, [ip]
	ldrb r2, [lr]
	ldr r3, _020E30E4 @ =0x021E4F5C
	mov r0, #1
	strb r2, [r1]
	ldrb r2, [lr]
	ldr r3, [r3]
	blx r3
	pop {r3, pc}
	.align 2, 0
_020E30DC: .4byte 0x0A005555
_020E30E0: .4byte 0x0A002AAA
_020E30E4: .4byte 0x021E4F5C
	arm_func_end FUN_020E3094

	arm_func_start FUN_020E30E8
FUN_020E30E8: @ 0x020E30E8
	push {r3, r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x24
	mov r5, r0
	ldm r5!, {r0, r1, r2, r3}
	add r4, sp, #0
	stm r4!, {r0, r1, r2, r3}
	ldm r5!, {r0, r1, r2, r3}
	stm r4!, {r0, r1, r2, r3}
	ldr r0, _020E3244 @ =_02110FC4
	ldr r1, [r5]
	ldr r0, [r0]
	str r1, [r4]
	ldrh r4, [sp, #0x20]
	ldrh r0, [r0, #0xa]
	ldr r7, [sp, #0xc]
	cmp r4, r0
	addhs sp, sp, #0x24
	ldrhs r0, _020E3248 @ =0x000080FF
	pophs {r3, r4, r5, r6, r7, r8, pc}
	mov r0, r4
	bl FUN_020E3280
	movs r6, r0
	addne sp, sp, #0x24
	popne {r3, r4, r5, r6, r7, r8, pc}
	ldr r0, _020E324C @ =0x021E4F2C
	ldrh r0, [r0]
	bl FUN_020D14AC
	ldr r5, _020E3250 @ =0x04000204
	ldr r0, _020E3244 @ =_02110FC4
	ldrh r3, [r5]
	ldr r2, [r0]
	ldrh r1, [r5]
	lsl r0, r4, #0xc
	ldr r2, [r2, #0x10]
	bic r1, r1, #3
	orr r1, r1, r2
	strh r1, [r5]
	lsr r0, r0, #0x10
	and r5, r3, #3
	bl FUN_020E1BE4
	ldr r0, _020E3244 @ =_02110FC4
	ldr r8, _020E3254 @ =0x021E4F28
	ldr r2, [r0]
	ldr r1, _020E3258 @ =0x04000208
	ldr r0, [r2, #4]
	and r4, r4, #0xf
	strh r0, [r8]
	ldrh r3, [r2, #8]
	ldrh r2, [r1]
	mov r0, #0
	lsl r3, r4, r3
	strh r0, [r1]
	ldrh r1, [r8]
	ldr r0, _020E325C @ =0x021E4F48
	add r4, r3, #0xa000000
	str r2, [r0]
	cmp r1, #0
	beq _020E3204
_020E31D0:
	mov r0, r7
	mov r1, r4
	bl FUN_020E3094
	movs r6, r0
	bne _020E3204
	ldrh r0, [r8]
	add r7, r7, #1
	add r4, r4, #1
	sub r0, r0, #1
	strh r0, [r8]
	ldrh r0, [r8]
	cmp r0, #0
	bne _020E31D0
_020E3204:
	ldr r3, _020E3258 @ =0x04000208
	ldr r0, _020E325C @ =0x021E4F48
	ldrh r1, [r3]
	ldr r0, [r0]
	sub r2, r3, #4
	strh r0, [r3]
	ldrh r1, [r2]
	ldr r0, _020E324C @ =0x021E4F2C
	bic r1, r1, #3
	orr r1, r1, r5
	strh r1, [r2]
	ldrh r0, [r0]
	bl FUN_020D14CC
	mov r0, r6
	add sp, sp, #0x24
	pop {r3, r4, r5, r6, r7, r8, pc}
	.align 2, 0
_020E3244: .4byte _02110FC4
_020E3248: .4byte 0x000080FF
_020E324C: .4byte 0x021E4F2C
_020E3250: .4byte 0x04000204
_020E3254: .4byte 0x021E4F28
_020E3258: .4byte 0x04000208
_020E325C: .4byte 0x021E4F48
	arm_func_end FUN_020E30E8

	arm_func_start FUN_020E3260
FUN_020E3260: @ 0x020E3260
	stmdb sp!, {lr}
	sub sp, sp, #0x24
	add r0, sp, #0
	bl FUN_020E2E24
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	add sp, sp, #0x24
	ldm sp!, {pc}
	arm_func_end FUN_020E3260

	arm_func_start FUN_020E3280
FUN_020E3280: @ 0x020E3280
	stmdb sp!, {lr}
	sub sp, sp, #0x24
	strh r0, [sp, #0x20]
	add r0, sp, #0
	bl FUN_020E2F0C
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	add sp, sp, #0x24
	ldm sp!, {pc}
	stmdb sp!, {lr}
	sub sp, sp, #0x24
	strh r0, [sp, #0x20]
	add r0, sp, #0
	str r1, [sp, #0xc]
	bl FUN_020E30E8
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	add sp, sp, #0x24
	ldm sp!, {pc}
	stmdb sp!, {lr}
	sub sp, sp, #0x24
	ldr r1, _020E32EC @ =FUN_020E2E24
	mov r2, r0
	add r0, sp, #0
	bl FUN_020E366C
	add sp, sp, #0x24
	ldm sp!, {pc}
	.align 2, 0
_020E32EC: .4byte FUN_020E2E24
	arm_func_end FUN_020E3280

	arm_func_start FUN_020E32F0
FUN_020E32F0: @ 0x020E32F0
	stmdb sp!, {lr}
	sub sp, sp, #0x24
	mov r2, r1
	strh r0, [sp, #0x20]
	ldr r1, _020E3314 @ =FUN_020E2F0C
	add r0, sp, #0
	bl FUN_020E366C
	add sp, sp, #0x24
	ldm sp!, {pc}
	.align 2, 0
_020E3314: .4byte FUN_020E2F0C
	arm_func_end FUN_020E32F0

	arm_func_start FUN_020E3318
FUN_020E3318: @ 0x020E3318
	stmdb sp!, {lr}
	sub sp, sp, #0x24
	str r1, [sp, #0xc]
	strh r0, [sp, #0x20]
	ldr r1, _020E333C @ =FUN_020E30E8
	add r0, sp, #0
	bl FUN_020E366C
	add sp, sp, #0x24
	ldm sp!, {pc}
	.align 2, 0
_020E333C: .4byte FUN_020E30E8
	arm_func_end FUN_020E3318

	arm_func_start FUN_020E3340
FUN_020E3340: @ 0x020E3340
	push {r3, r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x24
	mov r5, r0
	ldm r5!, {r0, r1, r2, r3}
	add r4, sp, #0
	stm r4!, {r0, r1, r2, r3}
	ldm r5!, {r0, r1, r2, r3}
	stm r4!, {r0, r1, r2, r3}
	ldr r0, _020E345C @ =_02110FC4
	ldr r1, [r5]
	ldr r0, [r0]
	str r1, [r4]
	ldrh r4, [sp, #0x20]
	ldrh r0, [r0, #0xa]
	ldr r7, [sp, #0xc]
	cmp r4, r0
	addhs sp, sp, #0x24
	ldrhs r0, _020E3460 @ =0x000080FF
	pophs {r3, r4, r5, r6, r7, r8, pc}
	mov r0, r4
	bl FUN_020E2D64
	movs r6, r0
	addne sp, sp, #0x24
	popne {r3, r4, r5, r6, r7, r8, pc}
	ldr r0, _020E3464 @ =0x021E4F2C
	ldrh r0, [r0]
	bl FUN_020D14AC
	ldr r5, _020E3468 @ =0x04000204
	ldr r0, _020E345C @ =_02110FC4
	ldrh r3, [r5]
	ldr r2, [r0]
	ldrh r1, [r5]
	ldr r2, [r2, #0x10]
	ldr r8, _020E346C @ =0x021E4F28
	bic r1, r1, #3
	orr r1, r1, r2
	strh r1, [r5]
	ldr r1, [r0]
	and r5, r3, #3
	ldr r0, [r1, #4]
	strh r0, [r8]
	ldrh r1, [r1, #8]
	ldrh r0, [r8]
	lsl r1, r4, r1
	cmp r0, #0
	add r4, r1, #0xa000000
	beq _020E3430
_020E33FC:
	mov r0, r7
	mov r1, r4
	bl FUN_020E2A60
	movs r6, r0
	bne _020E3430
	ldrh r0, [r8]
	add r7, r7, #1
	add r4, r4, #1
	sub r0, r0, #1
	strh r0, [r8]
	ldrh r0, [r8]
	cmp r0, #0
	bne _020E33FC
_020E3430:
	ldr r2, _020E3468 @ =0x04000204
	ldr r0, _020E3464 @ =0x021E4F2C
	ldrh r1, [r2]
	bic r1, r1, #3
	orr r1, r1, r5
	strh r1, [r2]
	ldrh r0, [r0]
	bl FUN_020D14CC
	mov r0, r6
	add sp, sp, #0x24
	pop {r3, r4, r5, r6, r7, r8, pc}
	.align 2, 0
_020E345C: .4byte _02110FC4
_020E3460: .4byte 0x000080FF
_020E3464: .4byte 0x021E4F2C
_020E3468: .4byte 0x04000204
_020E346C: .4byte 0x021E4F28
	arm_func_end FUN_020E3340

	arm_func_start FUN_020E3470
FUN_020E3470: @ 0x020E3470
	stmdb sp!, {lr}
	sub sp, sp, #0x24
	strh r0, [sp, #0x20]
	add r0, sp, #0
	str r1, [sp, #0xc]
	bl FUN_020E3340
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	add sp, sp, #0x24
	ldm sp!, {pc}
	stmdb sp!, {lr}
	sub sp, sp, #0x24
	str r1, [sp, #0xc]
	strh r0, [sp, #0x20]
	ldr r1, _020E34BC @ =FUN_020E3340
	add r0, sp, #0
	bl FUN_020E366C
	add sp, sp, #0x24
	ldm sp!, {pc}
	.align 2, 0
_020E34BC: .4byte FUN_020E3340
	arm_func_end FUN_020E3470

	arm_func_start FUN_020E34C0
FUN_020E34C0: @ 0x020E34C0
	push {r3, r4, r5, lr}
	sub sp, sp, #8
	mov r5, r0
	bl FUN_020D3A38
	ldr r1, _020E353C @ =0x021E4F68
	mov r4, r0
	ldr r0, [r1]
	cmp r0, #0
	bne _020E352C
	add r0, r5, #0xc4
	str r5, [r1]
	bl FUN_020E3568
	ldr r0, _020E3540 @ =0x021E4F6C
	bl FUN_020E3568
	mov r0, #0
	str r0, [r5, #0xc0]
	mov r2, #0x400
	ldr r1, _020E3544 @ =FUN_020E357C
	ldr r3, _020E3548 @ =0x021E5390
	mov r0, r5
	str r2, [sp]
	mov r2, #0x14
	str r2, [sp, #4]
	mov r2, r5
	bl FUN_020D1AD4
	mov r0, r5
	bl FUN_020D1F34
_020E352C:
	mov r0, r4
	bl FUN_020D3A4C
	add sp, sp, #8
	pop {r3, r4, r5, pc}
	.align 2, 0
_020E353C: .4byte 0x021E4F68
_020E3540: .4byte 0x021E4F6C
_020E3544: .4byte FUN_020E357C
_020E3548: .4byte 0x021E5390
	arm_func_end FUN_020E34C0

	arm_func_start FUN_020E354C
FUN_020E354C: @ 0x020E354C
	ldr r0, _020E3564 @ =0x021E4F68
	ldr r0, [r0]
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	bx lr
	.align 2, 0
_020E3564: .4byte 0x021E4F68
	arm_func_end FUN_020E354C

	arm_func_start FUN_020E3568
FUN_020E3568: @ 0x020E3568
	ldr ip, _020E3578 @ =FUN_020D4994
	mov r1, #0
	mov r2, #0x24
	bx ip
	.align 2, 0
_020E3578: .4byte FUN_020D4994
	arm_func_end FUN_020E3568

	arm_func_start FUN_020E357C
FUN_020E357C: @ 0x020E357C
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x24
	mov r4, #0
	mov r8, r0
	add r6, sp, #0
	mov sl, r4
	mov sb, r4
	mov r5, r4
	mov fp, #0x24
_020E35A0:
	mov r0, r6
	mov r1, r5
	mov r2, fp
	bl FUN_020D4994
	bl FUN_020D3A38
	ldr r1, [r8, #0xc0]
	mov r7, r0
	cmp r1, #0
	bne _020E35D8
_020E35C4:
	mov r0, r4
	bl FUN_020D1E7C
	ldr r0, [r8, #0xc0]
	cmp r0, #0
	beq _020E35C4
_020E35D8:
	ldr lr, [r8, #0xc0]
	add ip, sp, #0
	ldm lr!, {r0, r1, r2, r3}
	stm ip!, {r0, r1, r2, r3}
	ldm lr!, {r0, r1, r2, r3}
	stm ip!, {r0, r1, r2, r3}
	ldr r1, [lr]
	mov r0, r7
	str r1, [ip]
	bl FUN_020D3A4C
	ldr r1, [sp]
	cmp r1, #0
	beq _020E3618
	mov r0, r6
	blx r1
	str r0, [sp, #8]
_020E3618:
	bl FUN_020D3A38
	ldr r2, [sp, #4]
	ldr r1, _020E3668 @ =0x021E4F68
	mov r7, r0
	strb sl, [r1, #0x26]
	cmp r2, #0
	beq _020E363C
	mov r0, r6
	blx r2
_020E363C:
	ldr r0, _020E3668 @ =0x021E4F68
	ldr r0, [r0]
	cmp r0, #0
	beq _020E365C
	mov r0, r7
	str sb, [r8, #0xc0]
	bl FUN_020D3A4C
	b _020E35A0
_020E365C:
	bl FUN_020D1BD0
	add sp, sp, #0x24
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020E3668: .4byte 0x021E4F68
	arm_func_end FUN_020E357C

	arm_func_start FUN_020E366C
FUN_020E366C: @ 0x020E366C
	push {r3, r4, r5, r6, r7, lr}
	ldr r3, _020E370C @ =0x021E4F68
	mov r7, r0
	mov r5, r1
	mov r6, r2
	ldr r4, [r3]
	bl FUN_020E354C
	cmp r0, #0
	bne _020E3694
	bl FUN_020D3F48
_020E3694:
	ldr r0, _020E370C @ =0x021E4F68
	ldrb r0, [r0, #0x26]
	cmp r0, #0
	beq _020E36A8
	bl FUN_020D3F48
_020E36A8:
	bl FUN_020D3A38
	mov r1, #1
	strb r1, [r7, #0x22]
	str r5, [r7]
	add r1, r4, #0xc4
	cmp r7, r1
	mov r5, r0
	ldreq r0, _020E370C @ =0x021E4F68
	str r6, [r7, #4]
	moveq r1, #0
	streq r1, [r0]
	ldr ip, _020E3710 @ =0x021E4F6C
	ldm r7!, {r0, r1, r2, r3}
	mov r6, ip
	stm ip!, {r0, r1, r2, r3}
	ldm r7!, {r0, r1, r2, r3}
	stm ip!, {r0, r1, r2, r3}
	ldr r1, [r7]
	mov r0, r4
	str r1, [ip]
	str r6, [r4, #0xc0]
	bl FUN_020D1F34
	mov r0, r5
	bl FUN_020D3A4C
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020E370C: .4byte 0x021E4F68
_020E3710: .4byte 0x021E4F6C
	arm_func_end FUN_020E366C

	arm_func_start FUN_020E3714
FUN_020E3714: @ 0x020E3714
	ldr r1, _020E374C @ =0x55555555
	ldr r2, _020E3750 @ =0x33333333
	and r1, r1, r0, lsr #1
	sub r0, r0, r1
	and r1, r0, r2
	and r0, r2, r0, lsr #2
	add r1, r1, r0
	ldr r0, _020E3754 @ =0x0F0F0F0F
	add r1, r1, r1, lsr #4
	and r0, r1, r0
	add r0, r0, r0, lsr #8
	add r0, r0, r0, lsr #16
	and r0, r0, #0xff
	bx lr
	.align 2, 0
_020E374C: .4byte 0x55555555
_020E3750: .4byte 0x33333333
_020E3754: .4byte 0x0F0F0F0F
	arm_func_end FUN_020E3714

	arm_func_start FUN_020E3758
FUN_020E3758: @ 0x020E3758
	push {r4, r5, r6, lr}
	sub sp, sp, #0x58
	mov r6, r0
	add r0, sp, #0
	mov r5, r1
	mov r4, r2
	bl FUN_020D8E00
	add r0, sp, #0
	mov r1, r5
	mov r2, r4
	bl FUN_020D8E40
	add r1, sp, #0
	mov r0, r6
	bl FUN_020D8F08
	add sp, sp, #0x58
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020E3758

	arm_func_start FUN_020E3798
FUN_020E3798: @ 0x020E3798
	push {r4, r5, r6, lr}
	sub sp, sp, #0x68
	mov r6, r0
	add r0, sp, #0
	mov r5, r1
	mov r4, r2
	bl FUN_020D9374
	add r0, sp, #0
	mov r1, r5
	mov r2, r4
	bl FUN_020D93C4
	add r0, sp, #0
	mov r1, r6
	bl FUN_020D9518
	add sp, sp, #0x68
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020E3798

	arm_func_start FUN_020E37D8
FUN_020E37D8: @ 0x020E37D8
	push {r3, lr}
	mov ip, #0
	mov r2, ip
_020E37E4:
	mov r3, ip
	mov lr, r2
_020E37EC:
	tst r3, #0x80
	eorne r3, r1, r3, lsl #1
	add lr, lr, #1
	lsleq r3, r3, #1
	cmp lr, #8
	blo _020E37EC
	strb r3, [r0, ip]
	add ip, ip, #1
	cmp ip, #0x100
	blo _020E37E4
	pop {r3, pc}
	arm_func_end FUN_020E37D8

	arm_func_start FUN_020E3818
FUN_020E3818: @ 0x020E3818
	push {r4, lr}
	cmp r3, #0
	ldrb lr, [r1]
	mov r4, #0
	bls _020E3848
_020E382C:
	ldrb ip, [r2], #1
	add r4, r4, #1
	cmp r4, r3
	eor ip, lr, ip
	and ip, ip, #0xff
	ldrb lr, [r0, ip]
	blo _020E382C
_020E3848:
	strb lr, [r1]
	pop {r4, pc}
	arm_func_end FUN_020E3818

	arm_func_start FUN_020E3850
FUN_020E3850: @ 0x020E3850
	push {r4, lr}
	mov lr, #0
	mov r4, lr
	mov r3, lr
_020E3860:
	mov ip, r4
	mov r2, r3
_020E3868:
	tst ip, #0x8000
	eorne ip, r1, ip, lsl #1
	add r2, r2, #1
	lsleq ip, ip, #1
	cmp r2, #8
	blo _020E3868
	lsl r2, lr, #1
	add lr, lr, #1
	strh ip, [r0, r2]
	cmp lr, #0x100
	add r4, r4, #0x100
	blo _020E3860
	pop {r4, pc}
	arm_func_end FUN_020E3850

	arm_func_start FUN_020E389C
FUN_020E389C: @ 0x020E389C
	push {r3, lr}
	mov lr, #0
	mov r3, lr
_020E38A8:
	mov ip, lr
	mov r2, r3
_020E38B0:
	tst ip, #1
	eorne ip, r1, ip, lsr #1
	add r2, r2, #1
	lsreq ip, ip, #1
	cmp r2, #8
	blo _020E38B0
	lsl r2, lr, #1
	add lr, lr, #1
	strh ip, [r0, r2]
	cmp lr, #0x100
	blo _020E38A8
	pop {r3, pc}
	arm_func_end FUN_020E389C

	arm_func_start FUN_020E38E0
FUN_020E38E0: @ 0x020E38E0
	push {r4, lr}
	cmp r3, #0
	ldrh lr, [r1]
	mov r4, #0
	bls _020E3918
_020E38F4:
	ldrb ip, [r2], #1
	add r4, r4, #1
	cmp r4, r3
	eor ip, ip, lr, lsr #8
	lsl ip, ip, #0x18
	lsr ip, ip, #0x17
	ldrh ip, [r0, ip]
	eor lr, ip, lr, lsl #8
	blo _020E38F4
_020E3918:
	strh lr, [r1]
	pop {r4, pc}
	arm_func_end FUN_020E38E0

	arm_func_start FUN_020E3920
FUN_020E3920: @ 0x020E3920
	push {r4, lr}
	cmp r3, #0
	ldrh lr, [r1]
	mov r4, #0
	bls _020E3958
_020E3934:
	ldrb ip, [r2], #1
	add r4, r4, #1
	cmp r4, r3
	eor ip, lr, ip
	lsl ip, ip, #0x18
	lsr ip, ip, #0x17
	ldrh ip, [r0, ip]
	eor lr, ip, lr, lsr #8
	blo _020E3934
_020E3958:
	strh lr, [r1]
	pop {r4, pc}
	arm_func_end FUN_020E3920

	arm_func_start FUN_020E3960
FUN_020E3960: @ 0x020E3960
	push {r3, lr}
	mov ip, #0
	mov r2, ip
_020E396C:
	mov r3, ip
	mov lr, r2
_020E3974:
	tst r3, #1
	eorne r3, r1, r3, lsr #1
	add lr, lr, #1
	lsreq r3, r3, #1
	cmp lr, #8
	blo _020E3974
	str r3, [r0, ip, lsl #2]
	add ip, ip, #1
	cmp ip, #0x100
	blo _020E396C
	pop {r3, pc}
	arm_func_end FUN_020E3960

	arm_func_start FUN_020E39A0
FUN_020E39A0: @ 0x020E39A0
	push {r4, lr}
	cmp r3, #0
	ldr lr, [r1]
	mov r4, #0
	bls _020E39D4
_020E39B4:
	ldrb ip, [r2], #1
	add r4, r4, #1
	cmp r4, r3
	eor ip, lr, ip
	and ip, ip, #0xff
	ldr ip, [r0, ip, lsl #2]
	eor lr, ip, lr, lsr #8
	blo _020E39B4
_020E39D4:
	str lr, [r1]
	pop {r4, pc}
	arm_func_end FUN_020E39A0

	arm_func_start FUN_020E39DC
FUN_020E39DC: @ 0x020E39DC
	push {r3, lr}
	mov lr, r1
	mov ip, #0
	mov r3, r2
	add r1, sp, #0
	mov r2, lr
	strb ip, [sp]
	bl FUN_020E3818
	ldrb r0, [sp]
	pop {r3, pc}
	arm_func_end FUN_020E39DC

	arm_func_start FUN_020E3A04
FUN_020E3A04: @ 0x020E3A04
	push {r3, lr}
	mov lr, r1
	mov ip, #0
	mov r3, r2
	add r1, sp, #0
	mov r2, lr
	strh ip, [sp]
	bl FUN_020E3920
	ldrh r0, [sp]
	pop {r3, pc}
	arm_func_end FUN_020E3A04

	arm_func_start FUN_020E3A2C
FUN_020E3A2C: @ 0x020E3A2C
	push {r3, lr}
	ldr ip, _020E3A54 @ =0x0000FFFF
	mov lr, r1
	mov r3, r2
	add r1, sp, #0
	mov r2, lr
	strh ip, [sp]
	bl FUN_020E38E0
	ldrh r0, [sp]
	pop {r3, pc}
	.align 2, 0
_020E3A54: .4byte 0x0000FFFF
	arm_func_end FUN_020E3A2C

	arm_func_start FUN_020E3A58
FUN_020E3A58: @ 0x020E3A58
	push {r3, lr}
	mov lr, r1
	mvn ip, #0
	mov r3, r2
	add r1, sp, #0
	mov r2, lr
	str ip, [sp]
	bl FUN_020E39A0
	ldr r0, [sp]
	mvn r0, r0
	pop {r3, pc}
	arm_func_end FUN_020E3A58

	arm_func_start FUN_020E3A84
FUN_020E3A84: @ 0x020E3A84
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	cmp r1, #1
	ble _020E3D6C
	ldr r4, [sp, #0x24]
	mov fp, r3
	mov r8, r2
	cmp r4, #0
	bne _020E3ABC
	clz r2, r1
	rsb r2, r2, #0x20
	lsl r2, r2, #3
	sub sp, sp, r2
	mov r4, sp
	str r2, [sp, #-4]!
_020E3ABC:
	sub r1, r1, #1
	mla r1, r1, r8, r0
	mov r5, r4
	str r0, [r4], #4
	str r1, [r4], #4
	clz r2, r8
	rsb r2, r2, #0x20
	str r2, [sp, #-4]!
_020E3ADC:
	cmp r4, r5
	beq _020E3D3C
	ldr r7, [r4, #-4]
	ldr r6, [r4, #-8]!
	sub r2, r7, r6
	cmp r2, r8
	bne _020E3B50
	mov r0, r6
	mov r1, r7
	blx fp
	cmp r0, #0
	ble _020E3ADC
	mov r0, r8
	tst r0, #3
	beq _020E3B34
_020E3B18:
	ldrb r1, [r6]
	subs r0, r0, #1
	swpb r1, r1, [r7]
	add r7, r7, #1
	strb r1, [r6], #1
	bne _020E3B18
	b _020E3ADC
_020E3B34:
	ldr r1, [r6]
	subs r0, r0, #4
	swp r1, r1, [r7]
	add r7, r7, #4
	str r1, [r6], #4
	bne _020E3B34
	b _020E3ADC
_020E3B50:
	ldr r3, [sp]
	sub r2, r7, r6
	lsr r2, r2, r3
	mla r2, r2, r8, r6
	mov r3, r6
	mov r0, r8
	mov r2, r2
	tst r0, #3
	beq _020E3B90
_020E3B74:
	ldrb r1, [r2]
	subs r0, r0, #1
	swpb r1, r1, [r3]
	add r3, r3, #1
	strb r1, [r2], #1
	bne _020E3B74
	b _020E3BA8
_020E3B90:
	ldr r1, [r2]
	subs r0, r0, #4
	swp r1, r1, [r3]
	add r3, r3, #4
	str r1, [r2], #4
	bne _020E3B90
_020E3BA8:
	mov sb, r6
	mov sl, r7
	add sb, sb, r8
_020E3BB4:
	cmp sb, r7
	bge _020E3BDC
	mov r1, r6
	mov r0, sb
	blx fp
	cmp r0, #0
	blt _020E3BD4
	b _020E3BD8
_020E3BD4:
	add sb, sb, r8
_020E3BD8:
	blt _020E3BB4
_020E3BDC:
	mov r1, r6
	mov r0, sl
	blx fp
	cmp r0, #0
	bgt _020E3BF4
	b _020E3BF8
_020E3BF4:
	sub sl, sl, r8
_020E3BF8:
	bgt _020E3BDC
	cmp sb, sl
	bge _020E3C5C
	mov r2, sb
	mov r3, sl
	mov r0, r8
	tst r0, #3
	beq _020E3C34
_020E3C18:
	ldrb r1, [r2]
	subs r0, r0, #1
	swpb r1, r1, [r3]
	add r3, r3, #1
	strb r1, [r2], #1
	bne _020E3C18
	b _020E3C4C
_020E3C34:
	ldr r1, [r2]
	subs r0, r0, #4
	swp r1, r1, [r3]
	add r3, r3, #4
	str r1, [r2], #4
	bne _020E3C34
_020E3C4C:
	add sb, sb, r8
	sub sl, sl, r8
	cmp sb, sl
	ble _020E3BB4
_020E3C5C:
	mov r2, r6
	mov r3, sl
	mov r0, r8
	tst r0, #3
	beq _020E3C8C
_020E3C70:
	ldrb r1, [r2]
	subs r0, r0, #1
	swpb r1, r1, [r3]
	add r3, r3, #1
	strb r1, [r2], #1
	bne _020E3C70
	b _020E3CA4
_020E3C8C:
	ldr r1, [r2]
	subs r0, r0, #4
	swp r1, r1, [r3]
	add r3, r3, #4
	str r1, [r2], #4
	bne _020E3C8C
_020E3CA4:
	sub r2, sl, r6
	sub r3, r7, sl
	cmp r2, r3
	ble _020E3CF8
	sub r2, sl, r8
	cmp r6, r2
	blt _020E3CC4
	b _020E3CC8
_020E3CC4:
	str r6, [r4], #4
_020E3CC8:
	blt _020E3CD0
	b _020E3CD4
_020E3CD0:
	str r2, [r4], #4
_020E3CD4:
	add r2, sl, r8
	cmp r2, r7
	blt _020E3CE4
	b _020E3CE8
_020E3CE4:
	str r2, [r4], #4
_020E3CE8:
	blt _020E3CF0
	b _020E3CF4
_020E3CF0:
	str r7, [r4], #4
_020E3CF4:
	b _020E3ADC
_020E3CF8:
	add r2, sl, r8
	cmp r2, r7
	blt _020E3D08
	b _020E3D0C
_020E3D08:
	str r2, [r4], #4
_020E3D0C:
	blt _020E3D14
	b _020E3D18
_020E3D14:
	str r7, [r4], #4
_020E3D18:
	sub r2, sl, r8
	cmp r6, r2
	blt _020E3D28
	b _020E3D2C
_020E3D28:
	str r6, [r4], #4
_020E3D2C:
	blt _020E3D34
	b _020E3D38
_020E3D34:
	str r2, [r4], #4
_020E3D38:
	b _020E3ADC
_020E3D3C:
	add sp, sp, #4
	sub r4, r4, #4
	cmp r4, sp
	beq _020E3D50
	b _020E3D54
_020E3D50:
	ldr r0, [sp]
_020E3D54:
	beq _020E3D5C
	b _020E3D60
_020E3D5C:
	add r0, r0, #4
_020E3D60:
	beq _020E3D68
	b _020E3D6C
_020E3D68:
	add sp, sp
_020E3D6C:
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	bx lr
	arm_func_end FUN_020E3A84

	arm_func_start FUN_020E3D74
FUN_020E3D74: @ 0x020E3D74
	push {r4, lr}
	sub ip, r2, #1
	mov r4, r1
	cmp ip, #0
	mov lr, #0
	ble _020E3DB0
_020E3D8C:
	ldrsb r3, [r4]
	strb r3, [r0, lr]
	ldrsb r3, [r4]
	cmp r3, #0
	beq _020E3DB0
	add lr, lr, #1
	cmp lr, ip
	add r4, r4, #1
	blt _020E3D8C
_020E3DB0:
	sub r3, r2, #1
	cmp lr, r3
	blt _020E3DC8
	cmp r2, #0
	movne r2, #0
	strbne r2, [r0, lr]
_020E3DC8:
	mov r0, r1
	bl FUN_020E3DD4
	pop {r4, pc}
	arm_func_end FUN_020E3D74

	arm_func_start FUN_020E3DD4
FUN_020E3DD4: @ 0x020E3DD4
	ldrsb r1, [r0]
	mov r2, #0
	cmp r1, #0
	beq _020E3DF4
_020E3DE4:
	add r2, r2, #1
	ldrsb r1, [r0, r2]
	cmp r1, #0
	bne _020E3DE4
_020E3DF4:
	mov r0, r2
	bx lr
	arm_func_end FUN_020E3DD4

	arm_func_start FUN_020E3DFC
FUN_020E3DFC: @ 0x020E3DFC
	b _020E3E08
_020E3E00:
	add r0, r0, #1
	add r1, r1, #1
_020E3E08:
	ldrsb r3, [r1]
	ldrsb r2, [r0]
	cmp r2, r3
	bne _020E3E20
	cmp r2, #0
	bne _020E3E00
_020E3E20:
	sub r0, r2, r3
	bx lr
	arm_func_end FUN_020E3DFC

	arm_func_start FUN_020E3E28
FUN_020E3E28: @ 0x020E3E28
	push {r3, lr}
	cmp r2, #0
	beq _020E3E60
	cmp r2, #0
	mov lr, #0
	ble _020E3E60
_020E3E40:
	ldrb ip, [r0, lr]
	ldrb r3, [r1, lr]
	cmp ip, r3
	subne r0, ip, r3
	popne {r3, pc}
	add lr, lr, #1
	cmp lr, r2
	blt _020E3E40
_020E3E60:
	mov r0, #0
	pop {r3, pc}
	arm_func_end FUN_020E3E28

	arm_func_start FUN_020E3E68
FUN_020E3E68: @ 0x020E3E68
	ldr r2, [r0]
	cmp r2, #0
	beq _020E3E88
	ldr r2, [r0, #4]
	strb r1, [r2]
	ldr r1, [r0]
	sub r1, r1, #1
	str r1, [r0]
_020E3E88:
	ldr r1, [r0, #4]
	add r1, r1, #1
	str r1, [r0, #4]
	bx lr
	arm_func_end FUN_020E3E68

	arm_func_start FUN_020E3E98
FUN_020E3E98: @ 0x020E3E98
	push {r3, lr}
	cmp r2, #0
	pople {r3, pc}
	ldr lr, [r0]
	mov ip, #0
	cmp lr, r2
	movhi lr, r2
	cmp lr, #0
	bls _020E3ED0
_020E3EBC:
	ldr r3, [r0, #4]
	strb r1, [r3, ip]
	add ip, ip, #1
	cmp ip, lr
	blo _020E3EBC
_020E3ED0:
	ldr r1, [r0]
	sub r1, r1, lr
	str r1, [r0]
	ldr r1, [r0, #4]
	add r1, r1, r2
	str r1, [r0, #4]
	pop {r3, pc}
	arm_func_end FUN_020E3E98

	arm_func_start FUN_020E3EEC
FUN_020E3EEC: @ 0x020E3EEC
	push {r4, lr}
	cmp r2, #0
	pople {r4, pc}
	ldr r4, [r0]
	mov lr, #0
	cmp r4, r2
	movhi r4, r2
	cmp r4, #0
	bls _020E3F28
_020E3F10:
	ldrsb ip, [r1, lr]
	ldr r3, [r0, #4]
	strb ip, [r3, lr]
	add lr, lr, #1
	cmp lr, r4
	blo _020E3F10
_020E3F28:
	ldr r1, [r0]
	sub r1, r1, r4
	str r1, [r0]
	ldr r1, [r0, #4]
	add r1, r1, r2
	str r1, [r0, #4]
	pop {r4, pc}
	arm_func_end FUN_020E3EEC

	arm_func_start FUN_020E3F44
FUN_020E3F44: @ 0x020E3F44
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x30
	mov sb, r2
	str r1, [sp, #0xc]
	str r0, [sp, #0x14]
	str r0, [sp, #0x10]
	ldrsb r0, [sb]
	str r1, [sp]
	mov fp, r3
	cmp r0, #0
	beq _020E4770
_020E3F70:
	ldrsb r1, [sb]
	and r0, r1, #0xff
	eor r0, r0, #0x20
	sub r0, r0, #0xa1
	cmp r0, #0x3c
	bhs _020E3FAC
	add r0, sp, #0xc
	bl FUN_020E3E68
	ldrsb r1, [sb, #1]!
	cmp r1, #0
	beq _020E4764
	add r0, sp, #0xc
	add sb, sb, #1
	bl FUN_020E3E68
	b _020E4764
_020E3FAC:
	cmp r1, #0x25
	beq _020E3FC4
	add r0, sp, #0xc
	add sb, sb, #1
	bl FUN_020E3E68
	b _020E4764
_020E3FC4:
	mov r5, #0
	mov sl, r5
	mov r2, sb
	sub r6, r5, #1
	mov r0, #0xa
	mov r3, #0x57
_020E3FDC:
	ldrsb r4, [sb, #1]!
	cmp r4, #0x20
	bgt _020E3FF0
	beq _020E402C
	b _020E4044
_020E3FF0:
	cmp r4, #0x30
	bgt _020E4044
	cmp r4, #0x2b
	blt _020E4044
	beq _020E4018
	cmp r4, #0x2d
	beq _020E4034
	cmp r4, #0x30
	beq _020E403C
	b _020E4044
_020E4018:
	ldrsb r1, [sb, #-1]
	cmp r1, #0x20
	bne _020E4044
	orr r5, r5, #2
	b _020E3FDC
_020E402C:
	orr r5, r5, #1
	b _020E3FDC
_020E4034:
	orr r5, r5, #8
	b _020E3FDC
_020E403C:
	orr r5, r5, #0x10
	b _020E3FDC
_020E4044:
	cmp r4, #0x2a
	bne _020E4068
	add fp, fp, #4
	ldr sl, [fp, #-4]
	add sb, sb, #1
	cmp sl, #0
	rsblt sl, sl, #0
	orrlt r5, r5, #8
	b _020E4090
_020E4068:
	mov r1, #0xa
	b _020E407C
_020E4070:
	ldrsb r4, [sb], #1
	mla r4, sl, r1, r4
	sub sl, r4, #0x30
_020E407C:
	ldrsb r4, [sb]
	cmp r4, #0x30
	blt _020E4090
	cmp r4, #0x39
	ble _020E4070
_020E4090:
	ldrsb r1, [sb]
	cmp r1, #0x2e
	bne _020E40EC
	ldrsb r1, [sb, #1]!
	mov r6, #0
	cmp r1, #0x2a
	bne _020E40C4
	add fp, fp, #4
	ldr r6, [fp, #-4]
	add sb, sb, #1
	cmp r6, #0
	mvnlt r6, #0
	b _020E40EC
_020E40C4:
	mov r1, #0xa
	b _020E40D8
_020E40CC:
	ldrsb r4, [sb], #1
	mla r4, r6, r1, r4
	sub r6, r4, #0x30
_020E40D8:
	ldrsb r4, [sb]
	cmp r4, #0x30
	blt _020E40EC
	cmp r4, #0x39
	ble _020E40CC
_020E40EC:
	ldrsb r1, [sb]
	cmp r1, #0x68
	beq _020E4104
	cmp r1, #0x6c
	beq _020E411C
	b _020E4130
_020E4104:
	ldrsb r1, [sb, #1]!
	cmp r1, #0x68
	orrne r5, r5, #0x40
	addeq sb, sb, #1
	orreq r5, r5, #0x100
	b _020E4130
_020E411C:
	ldrsb r1, [sb, #1]!
	cmp r1, #0x6c
	orrne r5, r5, #0x20
	addeq sb, sb, #1
	orreq r5, r5, #0x80
_020E4130:
	ldrsb r1, [sb]
	cmp r1, #0x69
	bgt _020E4174
	cmp r1, #0x63
	blt _020E4158
	beq _020E41E4
	cmp r1, #0x64
	cmpne r1, #0x69
	beq _020E439C
	b _020E4380
_020E4158:
	cmp r1, #0x25
	bgt _020E4168
	beq _020E4364
	b _020E4380
_020E4168:
	cmp r1, #0x58
	beq _020E41D0
	b _020E4380
_020E4174:
	cmp r1, #0x6e
	bgt _020E4184
	beq _020E430C
	b _020E4380
_020E4184:
	sub r1, r1, #0x6f
	cmp r1, #9
	addls pc, pc, r1, lsl #2
	b _020E4380
_020E4194: @ jump table
	b _020E41BC @ case 0
	b _020E41D8 @ case 1
	b _020E4380 @ case 2
	b _020E4380 @ case 3
	b _020E4258 @ case 4
	b _020E4380 @ case 5
	b _020E41C8 @ case 6
	b _020E4380 @ case 7
	b _020E4380 @ case 8
	b _020E4394 @ case 9
_020E41BC:
	orr r5, r5, #0x1000
	mov r0, #8
	b _020E439C
_020E41C8:
	orr r5, r5, #0x1000
	b _020E439C
_020E41D0:
	mov r3, #0x37
	b _020E4394
_020E41D8:
	orr r5, r5, #4
	mov r6, #8
	b _020E4394
_020E41E4:
	cmp r6, #0
	bge _020E4380
	add fp, fp, #4
	tst r5, #8
	ldr r4, [fp, #-4]
	beq _020E4220
	lsl r1, r4, #0x18
	add r0, sp, #0xc
	asr r1, r1, #0x18
	bl FUN_020E3E68
	add r0, sp, #0xc
	sub r2, sl, #1
	mov r1, #0x20
	bl FUN_020E3E98
	b _020E4250
_020E4220:
	tst r5, #0x10
	movne r0, #0x30
	moveq r0, #0x20
	lsl r1, r0, #0x18
	add r0, sp, #0xc
	asr r1, r1, #0x18
	sub r2, sl, #1
	bl FUN_020E3E98
	lsl r1, r4, #0x18
	add r0, sp, #0xc
	asr r1, r1, #0x18
	bl FUN_020E3E68
_020E4250:
	add sb, sb, #1
	b _020E4764
_020E4258:
	add fp, fp, #4
	cmp r6, #0
	ldr r7, [fp, #-4]
	mov r4, #0
	bge _020E4290
	ldrsb r0, [r7]
	cmp r0, #0
	beq _020E42A4
_020E4278:
	add r4, r4, #1
	ldrsb r0, [r7, r4]
	cmp r0, #0
	bne _020E4278
	b _020E42A4
_020E428C:
	add r4, r4, #1
_020E4290:
	cmp r4, r6
	bge _020E42A4
	ldrsb r0, [r7, r4]
	cmp r0, #0
	bne _020E428C
_020E42A4:
	tst r5, #8
	sub sl, sl, r4
	beq _020E42D4
	add r0, sp, #0xc
	mov r1, r7
	mov r2, r4
	bl FUN_020E3EEC
	add r0, sp, #0xc
	mov r2, sl
	mov r1, #0x20
	bl FUN_020E3E98
	b _020E4304
_020E42D4:
	tst r5, #0x10
	movne r0, #0x30
	moveq r0, #0x20
	lsl r1, r0, #0x18
	add r0, sp, #0xc
	mov r2, sl
	asr r1, r1, #0x18
	bl FUN_020E3E98
	add r0, sp, #0xc
	mov r1, r7
	mov r2, r4
	bl FUN_020E3EEC
_020E4304:
	add sb, sb, #1
	b _020E4764
_020E430C:
	ldr r1, [sp, #0x10]
	ldr r0, [sp, #0x14]
	tst r5, #0x100
	sub r2, r1, r0
	bne _020E435C
	tst r5, #0x40
	beq _020E4338
	add fp, fp, #4
	ldr r0, [fp, #-4]
	strh r2, [r0]
	b _020E435C
_020E4338:
	add fp, fp, #4
	tst r5, #0x80
	ldreq r0, [fp, #-4]
	streq r2, [r0]
	beq _020E435C
	ldr r0, [fp, #-4]
	asr r1, r2, #0x1f
	str r2, [r0]
	str r1, [r0, #4]
_020E435C:
	add sb, sb, #1
	b _020E4764
_020E4364:
	add r0, r2, #1
	cmp r0, sb
	bne _020E4380
	add r0, sp, #0xc
	add sb, sb, #1
	bl FUN_020E3E68
	b _020E4764
_020E4380:
	mov r1, r2
	add r0, sp, #0xc
	sub r2, sb, r2
	bl FUN_020E3EEC
	b _020E4764
_020E4394:
	orr r5, r5, #0x1000
	mov r0, #0x10
_020E439C:
	tst r5, #8
	bicne r5, r5, #0x10
	cmp r6, #0
	bicge r5, r5, #0x10
	movlt r6, #1
	mov r4, #0
	tst r5, #0x1000
	beq _020E445C
	tst r5, #0x100
	beq _020E43D4
	add fp, fp, #4
	ldrb r7, [fp, #-4]
	mov r1, #0
	b _020E440C
_020E43D4:
	tst r5, #0x40
	beq _020E43EC
	add fp, fp, #4
	ldrh r7, [fp, #-4]
	mov r1, #0
	b _020E440C
_020E43EC:
	tst r5, #0x80
	addeq fp, fp, #4
	ldreq r7, [fp, #-4]
	moveq r1, #0
	beq _020E440C
	add fp, fp, #8
	ldr r7, [fp, #-8]
	ldr r1, [fp, #-4]
_020E440C:
	bic r5, r5, #3
	tst r5, #4
	beq _020E451C
	cmp r0, #0x10
	bne _020E4444
	cmp r1, #0
	cmpeq r7, #0
	beq _020E451C
	add r4, r3, #0x21
	mov r2, #0x30
	strb r4, [sp, #8]
	strb r2, [sp, #9]
	mov r4, #2
	b _020E451C
_020E4444:
	cmp r0, #8
	bne _020E451C
	mov r2, #0x30
	strb r2, [sp, #8]
	mov r4, #1
	b _020E451C
_020E445C:
	tst r5, #0x100
	beq _020E4474
	add fp, fp, #4
	ldrsb r7, [fp, #-4]
	asr r1, r7, #0x1f
	b _020E44AC
_020E4474:
	tst r5, #0x40
	beq _020E448C
	add fp, fp, #4
	ldrsh r7, [fp, #-4]
	asr r1, r7, #0x1f
	b _020E44AC
_020E448C:
	tst r5, #0x80
	addeq fp, fp, #4
	ldreq r7, [fp, #-4]
	asreq r1, r7, #0x1f
	beq _020E44AC
	add fp, fp, #8
	ldr r7, [fp, #-8]
	ldr r1, [fp, #-4]
_020E44AC:
	mov ip, #0
	and r2, ip, #0
	and r8, r1, #0x80000000
	cmp r2, #0
	cmpeq r8, #0
	beq _020E44E4
	mvn r4, r7
	mov r2, #0x2d
	mvn r1, r1
	strb r2, [sp, #8]
	adds r7, r4, #1
	adc r1, r1, ip
	mov r4, #1
	b _020E451C
_020E44E4:
	cmp r1, ip
	cmpeq r7, ip
	cmpeq r6, #0
	beq _020E451C
	tst r5, #2
	beq _020E450C
	mov r2, #0x2b
	strb r2, [sp, #8]
	mov r4, #1
	b _020E451C
_020E450C:
	tst r5, #1
	movne r2, #0x20
	strbne r2, [sp, #8]
	movne r4, #1
_020E451C:
	cmp r0, #8
	mov r8, #0
	beq _020E453C
	cmp r0, #0xa
	beq _020E4588
	cmp r0, #0x10
	beq _020E4620
	b _020E466C
_020E453C:
	cmp r1, r8
	cmpeq r7, r8
	beq _020E466C
	add r2, sp, #0x18
	mov r0, r8
	mov lr, #7
	mov ip, r8
_020E4558:
	and r3, r7, lr
	add r3, r3, #0x30
	strb r3, [r2, r8]
	lsr r3, r1, #3
	cmp r3, r0
	lsr r7, r7, #3
	orr r7, r7, r1, lsl #29
	mov r1, r3
	cmpeq r7, ip
	add r8, r8, #1
	bne _020E4558
	b _020E466C
_020E4588:
	mov r0, r8
	cmp r0, r8
	cmpeq r1, r8
	bne _020E45D4
	cmp r7, #0
	beq _020E466C
	ldr ip, _020E47BC @ =0xCCCCCCCD
	add r3, sp, #0x18
	mov r2, #0xa
_020E45AC:
	umull r1, r0, r7, ip
	lsrs r0, r0, #3
	mul r1, r0, r2
	sub r1, r7, r1
	mov r7, r0
	add r0, r1, #0x30
	strb r0, [r3, r8]
	add r8, r8, #1
	bne _020E45AC
	b _020E466C
_020E45D4:
	cmp r1, r8
	cmpeq r7, r8
	beq _020E466C
_020E45E0:
	mov r0, r7
	mov r2, #0xa
	mov r3, #0
	bl FUN_020F2900
	mov r2, #0xa
	umull r3, r2, r0, r2
	subs r2, r7, r3
	add r3, r2, #0x30
	add r2, sp, #0x18
	strb r3, [r2, r8]
	cmp r1, #0
	cmpeq r0, #0
	mov r7, r0
	add r8, r8, #1
	bne _020E45E0
	b _020E466C
_020E4620:
	cmp r1, r8
	cmpeq r7, r8
	beq _020E466C
	add ip, sp, #0x18
	mov lr, #0xf
_020E4634:
	and r2, r7, lr
	lsr r7, r7, #4
	lsr r0, r1, #4
	orr r7, r7, r1, lsl #28
	cmp r2, #0xa
	mov r1, r0
	addlt r0, r2, #0x30
	addge r0, r2, r3
	strb r0, [ip, r8]
	mov r0, #0
	cmp r1, r0
	cmpeq r7, r0
	add r8, r8, #1
	bne _020E4634
_020E466C:
	cmp r4, #0
	ble _020E4694
	ldrsb r0, [sp, #8]
	cmp r0, #0x30
	bne _020E4694
	add r0, sp, #0x18
	mov r1, #0x30
	strb r1, [r0, r8]
	add r8, r8, #1
	mov r4, #0
_020E4694:
	tst r5, #0x10
	sub r6, r6, r8
	beq _020E46B0
	sub r0, sl, r8
	sub r0, r0, r4
	cmp r6, r0
	movlt r6, r0
_020E46B0:
	cmp r6, #0
	subgt sl, sl, r6
	add r0, r4, r8
	sub sl, sl, r0
	ands r0, r5, #8
	str r0, [sp, #4]
	bne _020E46DC
	add r0, sp, #0xc
	mov r2, sl
	mov r1, #0x20
	bl FUN_020E3E98
_020E46DC:
	cmp r4, #0
	ble _020E4708
	add r0, sp, #8
	add r5, r0, r4
	add r7, sp, #0xc
_020E46F0:
	ldrsb r1, [r5, #-1]!
	mov r0, r7
	sub r4, r4, #1
	bl FUN_020E3E68
	cmp r4, #0
	bgt _020E46F0
_020E4708:
	add r0, sp, #0xc
	mov r2, r6
	mov r1, #0x30
	bl FUN_020E3E98
	cmp r8, #0
	ble _020E4744
	add r0, sp, #0x18
	add r5, r0, r8
	add r4, sp, #0xc
_020E472C:
	ldrsb r1, [r5, #-1]!
	mov r0, r4
	sub r8, r8, #1
	bl FUN_020E3E68
	cmp r8, #0
	bgt _020E472C
_020E4744:
	ldr r0, [sp, #4]
	cmp r0, #0
	beq _020E4760
	add r0, sp, #0xc
	mov r2, sl
	mov r1, #0x20
	bl FUN_020E3E98
_020E4760:
	add sb, sb, #1
_020E4764:
	ldrsb r0, [sb]
	cmp r0, #0
	bne _020E3F70
_020E4770:
	ldr r0, [sp, #0xc]
	cmp r0, #0
	beq _020E478C
	ldr r0, [sp, #0x10]
	mov r1, #0
	strb r1, [r0]
	b _020E47A8
_020E478C:
	ldr r0, [sp]
	cmp r0, #0
	beq _020E47A8
	ldr r1, [sp, #0x14]
	mov r2, #0
	add r0, r1, r0
	strb r2, [r0, #-1]
_020E47A8:
	ldr r1, [sp, #0x10]
	ldr r0, [sp, #0x14]
	sub r0, r1, r0
	add sp, sp, #0x30
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020E47BC: .4byte 0xCCCCCCCD
	arm_func_end FUN_020E3F44

	arm_func_start FUN_020E47C0
FUN_020E47C0: @ 0x020E47C0
	push {r3, lr}
	mov r0, #1
	bl FUN_020E9450
	ldr r1, _020E47E0 @ =0x021E5390
	mov r0, #1
	str r0, [r1, #0xc]
	bl FUN_020E47E4
	pop {r3, pc}
	.align 2, 0
_020E47E0: .4byte 0x021E5390
	arm_func_end FUN_020E47C0

	arm_func_start FUN_020E47E4
FUN_020E47E4: @ 0x020E47E4
	push {r4, lr}
	ldr r1, _020E482C @ =0x021E5390
	mov r4, r0
	ldr r0, [r1, #0xc]
	cmp r0, #0
	bne _020E4820
	bl FUN_020F4A84
	ldr r0, _020E482C @ =0x021E5390
	ldr r0, [r0, #4]
	cmp r0, #0
	beq _020E4820
	blx r0
	ldr r0, _020E482C @ =0x021E5390
	mov r1, #0
	str r1, [r0, #4]
_020E4820:
	mov r0, r4
	bl FUN_020E4830
	pop {r4, pc}
	.align 2, 0
_020E482C: .4byte 0x021E5390
	arm_func_end FUN_020E47E4

	arm_func_start FUN_020E4830
FUN_020E4830: @ 0x020E4830
	push {r3, r4, r5, lr}
	ldr r0, _020E4940 @ =0x021E54E8
	bl FUN_020D2734
	cmp r0, #0
	bne _020E4868
	ldr r0, _020E4944 @ =0x021E16A0
	ldr r1, _020E4948 @ =0x021E54A0
	ldr r2, [r0, #4]
	ldr r0, _020E494C @ =0x021E54C4
	ldr r3, [r2, #0x6c]
	mov r2, #1
	str r3, [r1]
	str r2, [r0]
	b _020E48C0
_020E4868:
	ldr r0, _020E4944 @ =0x021E16A0
	ldr r1, _020E4948 @ =0x021E54A0
	ldr r0, [r0, #4]
	ldr r1, [r1]
	ldr r0, [r0, #0x6c]
	cmp r1, r0
	bne _020E4898
	ldr r0, _020E494C @ =0x021E54C4
	ldr r1, [r0]
	add r1, r1, #1
	str r1, [r0]
	b _020E48C0
_020E4898:
	ldr r0, _020E4940 @ =0x021E54E8
	bl FUN_020D2618
	ldr r0, _020E4944 @ =0x021E16A0
	ldr r1, _020E4948 @ =0x021E54A0
	ldr r2, [r0, #4]
	ldr r0, _020E494C @ =0x021E54C4
	ldr r3, [r2, #0x6c]
	mov r2, #1
	str r3, [r1]
	str r2, [r0]
_020E48C0:
	ldr r4, _020E4950 @ =0x021E5390
	ldr r0, [r4, #8]
	cmp r0, #0
	ble _020E48F4
	ldr r5, _020E4954 @ =0x021E53A0
_020E48D4:
	ldr r0, [r4, #8]
	sub r1, r0, #1
	ldr r0, [r5, r1, lsl #2]
	str r1, [r4, #8]
	blx r0
	ldr r0, [r4, #8]
	cmp r0, #0
	bgt _020E48D4
_020E48F4:
	ldr r0, _020E494C @ =0x021E54C4
	ldr r1, [r0]
	subs r1, r1, #1
	str r1, [r0]
	bne _020E4910
	ldr r0, _020E4940 @ =0x021E54E8
	bl FUN_020D269C
_020E4910:
	ldr r0, _020E4950 @ =0x021E5390
	ldr r0, [r0]
	cmp r0, #0
	beq _020E4930
	blx r0
	ldr r0, _020E4950 @ =0x021E5390
	mov r1, #0
	str r1, [r0]
_020E4930:
	mov r0, #0
	bl FUN_020E539C
	bl FUN_020F4F78
	pop {r3, r4, r5, pc}
	.align 2, 0
_020E4940: .4byte 0x021E54E8
_020E4944: .4byte 0x021E16A0
_020E4948: .4byte 0x021E54A0
_020E494C: .4byte 0x021E54C4
_020E4950: .4byte 0x021E5390
_020E4954: .4byte 0x021E53A0
	arm_func_end FUN_020E4830

	arm_func_start FUN_020E4958
FUN_020E4958: @ 0x020E4958
	ldr r0, _020E4968 @ =_021110EC
	ldr ip, _020E496C @ =FUN_020F2080
	ldr r0, [r0]
	bx ip
	.align 2, 0
_020E4968: .4byte _021110EC
_020E496C: .4byte FUN_020F2080
	arm_func_end FUN_020E4958

	arm_func_start FUN_020E4970
FUN_020E4970: @ 0x020E4970
	push {r3, lr}
	cmp r0, #0
	moveq r0, #0
	popeq {r3, pc}
	bl FUN_020F0338
	pop {r3, pc}
	arm_func_end FUN_020E4970

	arm_func_start FUN_020E4988
FUN_020E4988: @ 0x020E4988
	push {r3, lr}
	cmp r0, #0
	popeq {r3, pc}
	bl FUN_020F0350
	pop {r3, pc}
	arm_func_end FUN_020E4988

	arm_func_start FUN_020E499C
FUN_020E499C: @ 0x020E499C
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	ldr r0, _020E4A24 @ =_02110FCC
	mov r4, #0
	mov r5, #1
	mov r8, r0
	mvn sb, #0
	mov r7, r4
	mov r6, #0x4c
_020E49BC:
	ldr r1, [r0, #4]
	lsl r2, r1, #0x16
	lsrs r2, r2, #0x1d
	beq _020E49FC
	lsl r1, r1, #0x19
	lsr r1, r1, #0x1e
	tst r1, #1
	beq _020E49FC
	ldr r1, [r0, #8]
	lsl r1, r1, #0x1d
	lsr r1, r1, #0x1d
	cmp r1, #1
	bne _020E49FC
	bl FUN_020E539C
	cmp r0, #0
	movne r4, sb
_020E49FC:
	cmp r5, #3
	movge r0, r7
	bge _020E4A14
	mul r0, r5, r6
	add r5, r5, #1
	add r0, r8, r0
_020E4A14:
	cmp r0, #0
	bne _020E49BC
	mov r0, r4
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0
_020E4A24: .4byte _02110FCC
	arm_func_end FUN_020E499C

	arm_func_start FUN_020E4A28
FUN_020E4A28: @ 0x020E4A28
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	ldr r0, _020E4A8C @ =_02110FCC
	mov r4, #0
	mov r5, #1
	mov r8, r0
	mvn sb, #0
	mov r7, r4
	mov r6, #0x4c
_020E4A48:
	ldr r1, [r0, #4]
	lsl r1, r1, #0x16
	lsrs r1, r1, #0x1d
	beq _020E4A64
	bl FUN_020E539C
	cmp r0, #0
	movne r4, sb
_020E4A64:
	cmp r5, #3
	movge r0, r7
	bge _020E4A7C
	mul r0, r5, r6
	add r5, r5, #1
	add r0, r8, r0
_020E4A7C:
	cmp r0, #0
	bne _020E4A48
	mov r0, r4
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0
_020E4A8C: .4byte _02110FCC
	arm_func_end FUN_020E4A28

	arm_func_start FUN_020E4A90
FUN_020E4A90: @ 0x020E4A90
	cmp r0, #0
	rsblt r0, r0, #0
	bx lr
	arm_func_end FUN_020E4A90

	arm_func_start FUN_020E4A9C
FUN_020E4A9C: @ 0x020E4A9C
	push {r3, r4, lr}
	sub sp, sp, #4
	mov r4, r0
	mov lr, r1
	mov ip, r2
	str r3, [sp]
	ldr r0, _020E4AD4 @ =_021110B0
	mov r1, r4
	mov r2, lr
	mov r3, ip
	bl FUN_020E7D70
	bl FUN_020E47C0
	add sp, sp, #4
	pop {r3, r4, pc}
	.align 2, 0
_020E4AD4: .4byte _021110B0
	arm_func_end FUN_020E4A9C

	arm_func_start FUN_020E4AD8
FUN_020E4AD8: @ 0x020E4AD8
	bx lr
	arm_func_end FUN_020E4AD8

	arm_func_start FUN_020E4ADC
FUN_020E4ADC: @ 0x020E4ADC
	bx lr
	arm_func_end FUN_020E4ADC

	arm_func_start FUN_020E4AE0
FUN_020E4AE0: @ 0x020E4AE0
	ldr r1, [r0, #0x1c]
	str r1, [r0, #0x24]
	ldr r3, [r0, #0x20]
	str r3, [r0, #0x28]
	ldr r2, [r0, #0x18]
	ldr r1, [r0, #0x2c]
	and r1, r2, r1
	sub r1, r3, r1
	str r1, [r0, #0x28]
	ldr r1, [r0, #0x18]
	str r1, [r0, #0x34]
	bx lr
	arm_func_end FUN_020E4AE0

	arm_func_start FUN_020E4B10
FUN_020E4B10: @ 0x020E4B10
	push {r4, r5, r6, lr}
	mov r5, r2
	mov r4, r0
	mov r6, r1
	bl FUN_020E4AE0
	cmp r5, #1
	ldreq r0, [r4, #0x20]
	add r2, r4, #0x28
	streq r0, [r4, #0x28]
	ldr r0, [r4]
	ldr r1, [r4, #0x1c]
	ldr r3, [r4, #0x48]
	ldr ip, [r4, #0x3c]
	blx ip
	cmp r0, #2
	moveq r1, #0
	streq r1, [r4, #0x28]
	cmp r6, #0
	ldrne r1, [r4, #0x28]
	strne r1, [r6]
	cmp r0, #0
	popne {r4, r5, r6, pc}
	ldr r1, [r4, #0x18]
	ldr r0, [r4, #0x28]
	add r0, r1, r0
	str r0, [r4, #0x18]
	ldr r0, [r4, #4]
	lsl r0, r0, #0x13
	lsrs r0, r0, #0x1f
	bne _020E4B94
	ldr r0, [r4, #0x1c]
	add r1, r4, #0x28
	bl FUN_020E4ADC
_020E4B94:
	mov r0, #0
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020E4B10

	arm_func_start FUN_020E4B9C
FUN_020E4B9C: @ 0x020E4B9C
	push {r3, r4, r5, lr}
	mov r5, r0
	ldr r2, [r5, #0x24]
	ldr r0, [r5, #0x1c]
	mov r4, r1
	subs r0, r2, r0
	beq _020E4C14
	str r0, [r5, #0x28]
	ldr r0, [r5, #4]
	lsl r0, r0, #0x13
	lsrs r0, r0, #0x1f
	bne _020E4BD8
	ldr r0, [r5, #0x1c]
	add r1, r5, #0x28
	bl FUN_020E4AD8
_020E4BD8:
	ldr r0, [r5]
	ldr r1, [r5, #0x1c]
	ldr r3, [r5, #0x48]
	ldr ip, [r5, #0x40]
	add r2, r5, #0x28
	blx ip
	cmp r4, #0
	ldrne r1, [r5, #0x28]
	strne r1, [r4]
	cmp r0, #0
	popne {r3, r4, r5, pc}
	ldr r1, [r5, #0x18]
	ldr r0, [r5, #0x28]
	add r0, r1, r0
	str r0, [r5, #0x18]
_020E4C14:
	mov r0, r5
	bl FUN_020E4AE0
	mov r0, #0
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020E4B9C

	arm_func_start FUN_020E4C24
FUN_020E4C24: @ 0x020E4C24
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	ldr r4, _020E4D1C @ =_02110FCC
	mov r7, r3
	cmp r7, r4
	moveq r6, #2
	mov sl, r0
	movne r6, #5
	mov r0, #0x18
	mul r4, r6, r0
	ldr r5, _020E4D20 @ =0x021E54E8
	mov sb, r1
	add r0, r5, r4
	mov r8, r2
	bl FUN_020D2734
	cmp r0, #0
	bne _020E4C88
	ldr r0, _020E4D24 @ =0x021E16A0
	ldr r2, _020E4D28 @ =0x021E54A0
	ldr r1, [r0, #4]
	ldr r0, _020E4D2C @ =0x021E54C4
	ldr r3, [r1, #0x6c]
	mov r1, #1
	str r3, [r2, r6, lsl #2]
	str r1, [r0, r6, lsl #2]
	b _020E4CE0
_020E4C88:
	ldr r0, _020E4D24 @ =0x021E16A0
	ldr r1, _020E4D28 @ =0x021E54A0
	ldr r0, [r0, #4]
	ldr r1, [r1, r6, lsl #2]
	ldr r0, [r0, #0x6c]
	cmp r1, r0
	bne _020E4CB8
	ldr r1, _020E4D2C @ =0x021E54C4
	ldr r0, [r1, r6, lsl #2]
	add r0, r0, #1
	str r0, [r1, r6, lsl #2]
	b _020E4CE0
_020E4CB8:
	add r0, r5, r4
	bl FUN_020D2618
	ldr r0, _020E4D24 @ =0x021E16A0
	ldr r2, _020E4D28 @ =0x021E54A0
	ldr r1, [r0, #4]
	ldr r0, _020E4D2C @ =0x021E54C4
	ldr r3, [r1, #0x6c]
	mov r1, #1
	str r3, [r2, r6, lsl #2]
	str r1, [r0, r6, lsl #2]
_020E4CE0:
	mov r0, sl
	mov r1, sb
	mov r2, r8
	mov r3, r7
	bl FUN_020E4D30
	ldr r1, _020E4D2C @ =0x021E54C4
	mov r7, r0
	ldr r0, [r1, r6, lsl #2]
	subs r0, r0, #1
	str r0, [r1, r6, lsl #2]
	bne _020E4D14
	add r0, r5, r4
	bl FUN_020D269C
_020E4D14:
	mov r0, r7
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0
_020E4D1C: .4byte _02110FCC
_020E4D20: .4byte 0x021E54E8
_020E4D24: .4byte 0x021E16A0
_020E4D28: .4byte 0x021E54A0
_020E4D2C: .4byte 0x021E54C4
	arm_func_end FUN_020E4C24

	arm_func_start FUN_020E4D30
FUN_020E4D30: @ 0x020E4D30
	push {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #4
	mov r7, r3
	mov sb, r0
	mov r8, r1
	mov r0, r7
	mov r1, #0
	mov r4, r2
	bl FUN_020EB840
	cmp r0, #0
	bne _020E4D68
	mov r0, r7
	mvn r1, #0
	bl FUN_020EB840
_020E4D68:
	muls r4, r8, r4
	beq _020E4D8C
	ldrb r0, [r7, #0xd]
	cmp r0, #0
	bne _020E4D8C
	ldr r1, [r7, #4]
	lsl r0, r1, #0x16
	lsrs r0, r0, #0x1d
	bne _020E4D98
_020E4D8C:
	add sp, sp, #4
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
_020E4D98:
	lsl r0, r1, #0x13
	lsrs r0, r0, #0x1f
	lslne r0, r1, #0x19
	lsrne r0, r0, #0x1e
	ldr r1, [r7, #8]
	cmpne r0, #2
	mov r6, #1
	lsl r0, r1, #0x1d
	movne r6, #0
	lsrs r0, r0, #0x1d
	bne _020E4DEC
	ldr r0, [r7, #4]
	lsl r0, r0, #0x1b
	lsr r0, r0, #0x1d
	tst r0, #1
	beq _020E4DEC
	bic r0, r1, #7
	orr r0, r0, #2
	str r0, [r7, #8]
	mov r0, #0
	str r0, [r7, #0x28]
_020E4DEC:
	ldr r0, [r7, #8]
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	cmp r0, #2
	bhs _020E4E18
	mov r0, #1
	strb r0, [r7, #0xd]
	mov r0, #0
	add sp, sp, #4
	str r0, [r7, #0x28]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
_020E4E18:
	ldr r0, [r7, #4]
	lsl r0, r0, #0x19
	lsr r0, r0, #0x1e
	tst r0, #1
	beq _020E4E50
	bl FUN_020E499C
	cmp r0, #0
	beq _020E4E50
	mov r0, #1
	strb r0, [r7, #0xd]
	mov r0, #0
	add sp, sp, #4
	str r0, [r7, #0x28]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
_020E4E50:
	cmp r4, #0
	mov r5, #0
	beq _020E4F14
	ldr r0, [r7, #8]
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	cmp r0, #3
	blo _020E4F14
	mov sl, r5
_020E4E74:
	mov r0, r7
	mov r1, sl
	bl FUN_020EB840
	cmp r0, #1
	ldr r0, [r7, #8]
	bne _020E4EA8
	lsl r0, r0, #0x1d
	add r0, r7, r0, lsr #28
	ldrh r0, [r0, #0xe]
	add r5, r5, #2
	sub r4, r4, #2
	strh r0, [sb], #2
	b _020E4EC0
_020E4EA8:
	lsl r0, r0, #0x1d
	add r0, r7, r0, lsr #29
	ldrb r0, [r0, #0xf]
	add r5, r5, #1
	sub r4, r4, #1
	strb r0, [sb], #1
_020E4EC0:
	ldr r1, [r7, #8]
	cmp r4, #0
	lsl r0, r1, #0x1d
	lsr r0, r0, #0x1d
	sub r0, r0, #1
	bic r1, r1, #7
	and r0, r0, #7
	orr r0, r1, r0
	str r0, [r7, #8]
	beq _020E4EFC
	ldr r0, [r7, #8]
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	cmp r0, #3
	bhs _020E4E74
_020E4EFC:
	ldr r0, [r7, #8]
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	cmp r0, #2
	ldreq r0, [r7, #0x30]
	streq r0, [r7, #0x28]
_020E4F14:
	cmp r4, #0
	beq _020E4FD8
	ldr r0, [r7, #0x28]
	cmp r0, #0
	cmpeq r6, #0
	beq _020E4FD8
	mov sl, #0
_020E4F30:
	ldr r0, [r7, #0x28]
	cmp r0, #0
	bne _020E4F84
	mov r0, r7
	mov r1, sl
	mov r2, sl
	bl FUN_020E4B10
	cmp r0, #0
	beq _020E4F84
	cmp r0, #1
	mov r0, #1
	strbeq r0, [r7, #0xd]
	beq _020E4F74
	ldr r1, [r7, #8]
	bic r1, r1, #7
	str r1, [r7, #8]
	strb r0, [r7, #0xc]
_020E4F74:
	mov r0, #0
	str r0, [r7, #0x28]
	mov r4, #0
	b _020E4FD8
_020E4F84:
	ldr r0, [r7, #0x28]
	str r0, [sp]
	cmp r0, r4
	strhi r4, [sp]
	ldr r1, [r7, #0x24]
	ldr r2, [sp]
	mov r0, sb
	bl FUN_020E5AD8
	ldr r2, [sp]
	ldr r0, [r7, #0x24]
	subs r4, r4, r2
	add r0, r0, r2
	str r0, [r7, #0x24]
	ldr r1, [r7, #0x28]
	ldr r0, [sp]
	add sb, sb, r2
	sub r0, r1, r0
	add r5, r5, r2
	str r0, [r7, #0x28]
	cmpne r6, #0
	bne _020E4F30
_020E4FD8:
	cmp r4, #0
	beq _020E5064
	cmp r6, #0
	bne _020E5064
	ldr r6, [r7, #0x1c]
	ldr sl, [r7, #0x20]
	add r1, sp, #0
	str sb, [r7, #0x1c]
	mov r0, r7
	mov r2, #1
	str r4, [r7, #0x20]
	bl FUN_020E4B10
	cmp r0, #0
	beq _020E5044
	cmp r0, #1
	mov r0, #1
	bne _020E502C
	strb r0, [r7, #0xd]
	mov r0, #0
	str r0, [r7, #0x28]
	b _020E5044
_020E502C:
	ldr r1, [r7, #8]
	bic r1, r1, #7
	str r1, [r7, #8]
	strb r0, [r7, #0xc]
	mov r0, #0
	str r0, [r7, #0x28]
_020E5044:
	ldr r1, [sp]
	mov r0, r7
	str r6, [r7, #0x1c]
	str sl, [r7, #0x20]
	add r5, r5, r1
	bl FUN_020E4AE0
	mov r0, #0
	str r0, [r7, #0x28]
_020E5064:
	mov r0, r5
	mov r1, r8
	bl FUN_020F2BA4
	add sp, sp, #4
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	arm_func_end FUN_020E4D30

	arm_func_start FUN_020E5078
FUN_020E5078: @ 0x020E5078
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #8
	mov sb, r3
	mov sl, r0
	str r1, [sp]
	mov r0, sb
	mov r1, #0
	mov r4, r2
	bl FUN_020EB840
	cmp r0, #0
	bne _020E50B0
	mov r0, sb
	mvn r1, #0
	bl FUN_020EB840
_020E50B0:
	ldr r0, [sp]
	muls r5, r0, r4
	beq _020E50D8
	ldrb r0, [sb, #0xd]
	cmp r0, #0
	bne _020E50D8
	ldr r1, [sb, #4]
	lsl r0, r1, #0x16
	lsrs r0, r0, #0x1d
	bne _020E50E4
_020E50D8:
	add sp, sp, #8
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020E50E4:
	lsl r0, r1, #0x13
	lsrs r0, r0, #0x1f
	lslne r0, r1, #0x19
	lsrne r0, r0, #0x1e
	cmpne r0, #2
	ldr r1, [sb, #8]
	cmpne r0, #1
	mov r8, #1
	lsl r0, r1, #0x1d
	movne r8, #0
	lsrs r0, r0, #0x1d
	bne _020E513C
	ldr r0, [sb, #4]
	lsl r0, r0, #0x1b
	lsr r0, r0, #0x1d
	tst r0, #2
	beq _020E513C
	bic r0, r1, #7
	orr r1, r0, #1
	mov r0, sb
	str r1, [sb, #8]
	bl FUN_020E4AE0
_020E513C:
	ldr r0, [sb, #8]
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	cmp r0, #1
	beq _020E5168
	mov r0, #1
	strb r0, [sb, #0xd]
	mov r0, #0
	add sp, sp, #8
	str r0, [sb, #0x28]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020E5168:
	cmp r5, #0
	mov r6, #0
	beq _020E5290
	ldr r0, [sb, #0x1c]
	ldr r2, [sb, #0x24]
	cmp r2, r0
	cmpeq r8, #0
	beq _020E5290
	ldr r1, [sb, #0x20]
	sub r0, r2, r0
	sub r0, r1, r0
	str r0, [sb, #0x28]
	mov fp, #0xa
	mov r4, #0
_020E51A0:
	ldr r0, [sb, #0x28]
	mov r7, r4
	str r0, [sp, #4]
	cmp r0, r5
	strhi r5, [sp, #4]
	ldr r0, [sb, #4]
	lsl r0, r0, #0x19
	lsr r0, r0, #0x1e
	cmp r0, #1
	bne _020E51F0
	ldr r2, [sp, #4]
	cmp r2, #0
	beq _020E51F0
	mov r0, sl
	mov r1, fp
	bl FUN_020E5B84
	movs r7, r0
	addne r0, r7, #1
	subne r0, r0, sl
	strne r0, [sp, #4]
_020E51F0:
	ldr r2, [sp, #4]
	cmp r2, #0
	beq _020E5230
	ldr r0, [sb, #0x24]
	mov r1, sl
	bl FUN_020E5AD8
	ldr r2, [sp, #4]
	ldr r0, [sb, #0x24]
	add sl, sl, r2
	add r0, r0, r2
	str r0, [sb, #0x24]
	ldr r1, [sb, #0x28]
	ldr r0, [sp, #4]
	sub r5, r5, r2
	sub r0, r1, r0
	str r0, [sb, #0x28]
_020E5230:
	ldr r0, [sb, #0x28]
	cmp r0, #0
	beq _020E5254
	cmp r7, #0
	bne _020E5254
	ldr r0, [sb, #4]
	lsl r0, r0, #0x19
	lsrs r0, r0, #0x1e
	bne _020E527C
_020E5254:
	mov r0, sb
	mov r1, #0
	bl FUN_020E4B9C
	cmp r0, #0
	beq _020E527C
	mov r0, #1
	strb r0, [sb, #0xd]
	mov r5, #0
	str r5, [sb, #0x28]
	b _020E5290
_020E527C:
	ldr r0, [sp, #4]
	cmp r5, #0
	add r6, r6, r0
	cmpne r8, #0
	bne _020E51A0
_020E5290:
	cmp r5, #0
	beq _020E52FC
	cmp r8, #0
	bne _020E52FC
	ldr r4, [sb, #0x1c]
	ldr r7, [sb, #0x20]
	add r2, sl, r5
	str sl, [sb, #0x1c]
	str r5, [sb, #0x20]
	add r1, sp, #4
	mov r0, sb
	str r2, [sb, #0x24]
	bl FUN_020E4B9C
	cmp r0, #0
	ldreq r0, [sp, #4]
	addeq r6, r6, r0
	beq _020E52E4
	mov r0, #1
	strb r0, [sb, #0xd]
	mov r0, #0
	str r0, [sb, #0x28]
_020E52E4:
	str r4, [sb, #0x1c]
	mov r0, sb
	str r7, [sb, #0x20]
	bl FUN_020E4AE0
	mov r0, #0
	str r0, [sb, #0x28]
_020E52FC:
	ldr r0, [sb, #4]
	ldr r1, [sp]
	lsl r0, r0, #0x19
	lsr r0, r0, #0x1e
	cmp r0, #2
	movne r0, #0
	strne r0, [sb, #0x28]
	mov r0, r6
	bl FUN_020F2BA4
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_020E5078

	arm_func_start FUN_020E5328
FUN_020E5328: @ 0x020E5328
	push {r3, r4, r5, lr}
	movs r5, r0
	mvneq r0, #0
	popeq {r3, r4, r5, pc}
	ldr r1, [r5, #4]
	lsl r1, r1, #0x16
	lsrs r1, r1, #0x1d
	moveq r0, #0
	popeq {r3, r4, r5, pc}
	bl FUN_020E539C
	mov r4, r0
	ldr r0, [r5]
	ldr r1, [r5, #0x44]
	blx r1
	ldr r1, [r5, #4]
	mov r2, #0
	bic r1, r1, #0x380
	str r1, [r5, #4]
	str r2, [r5]
	ldr r1, [r5, #8]
	lsl r1, r1, #0x1c
	lsrs r1, r1, #0x1f
	subne r0, r2, #1
	popne {r3, r4, r5, pc}
	cmp r4, #0
	cmpeq r0, #0
	movne r2, #1
	rsb r0, r2, #0
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020E5328

	arm_func_start FUN_020E539C
FUN_020E539C: @ 0x020E539C
	push {r4, lr}
	movs r4, r0
	bne _020E53B0
	bl FUN_020E4A28
	pop {r4, pc}
_020E53B0:
	ldrb r0, [r4, #0xd]
	cmp r0, #0
	bne _020E53CC
	ldr r0, [r4, #4]
	lsl r1, r0, #0x16
	lsrs r1, r1, #0x1d
	bne _020E53D4
_020E53CC:
	mvn r0, #0
	pop {r4, pc}
_020E53D4:
	lsl r0, r0, #0x1b
	lsr r0, r0, #0x1d
	cmp r0, #1
	moveq r0, #0
	popeq {r4, pc}
	ldr r0, [r4, #8]
	lsl r1, r0, #0x1d
	lsr r1, r1, #0x1d
	cmp r1, #3
	bichs r0, r0, #7
	orrhs r0, r0, #2
	strhs r0, [r4, #8]
	ldr r0, [r4, #8]
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	cmp r0, #2
	moveq r0, #0
	streq r0, [r4, #0x28]
	ldr r0, [r4, #8]
	lsl r1, r0, #0x1d
	lsr r1, r1, #0x1d
	cmp r1, #1
	beq _020E5440
	bic r0, r0, #7
	str r0, [r4, #8]
	mov r0, #0
	pop {r4, pc}
_020E5440:
	mov r0, r4
	mov r1, #0
	bl FUN_020E4B9C
	cmp r0, #0
	mov r0, #0
	beq _020E546C
	mov r1, #1
	strb r1, [r4, #0xd]
	str r0, [r4, #0x28]
	sub r0, r0, #1
	pop {r4, pc}
_020E546C:
	ldr r1, [r4, #8]
	bic r1, r1, #7
	str r1, [r4, #8]
	str r0, [r4, #0x18]
	str r0, [r4, #0x28]
	pop {r4, pc}
	arm_func_end FUN_020E539C

	arm_func_start FUN_020E5484
FUN_020E5484: @ 0x020E5484
	ldr r1, [r0, #4]
	lsl r1, r1, #0x16
	lsr r1, r1, #0x1d
	and r1, r1, #0xff
	add r1, r1, #0xff
	and r1, r1, #0xff
	cmp r1, #1
	bhi _020E54B0
	ldrb r1, [r0, #0xd]
	cmp r1, #0
	beq _020E54C4
_020E54B0:
	ldr r0, _020E54FC @ =0x021E58C0
	mov r1, #0x28
	str r1, [r0]
	sub r0, r1, #0x29
	bx lr
_020E54C4:
	ldr r1, [r0, #8]
	lsl r1, r1, #0x1d
	lsrs ip, r1, #0x1d
	ldreq r0, [r0, #0x18]
	bxeq lr
	ldr r2, [r0, #0x24]
	ldr r1, [r0, #0x1c]
	ldr r3, [r0, #0x34]
	sub r0, r2, r1
	cmp ip, #3
	add r0, r3, r0
	subhs r1, ip, #2
	subhs r0, r0, r1
	bx lr
	.align 2, 0
_020E54FC: .4byte 0x021E58C0
	arm_func_end FUN_020E5484

	arm_func_start FUN_020E5500
FUN_020E5500: @ 0x020E5500
	push {r3, r4, r5, r6, r7, lr}
	ldr r1, _020E5600 @ =_02110FCC
	mov r7, r0
	cmp r7, r1
	moveq r6, #2
	beq _020E5538
	ldr r0, _020E5604 @ =_02111018
	cmp r7, r0
	moveq r6, #3
	beq _020E5538
	ldr r0, _020E5608 @ =_02111064
	cmp r7, r0
	moveq r6, #4
	movne r6, #5
_020E5538:
	mov r0, #0x18
	mul r4, r6, r0
	ldr r5, _020E560C @ =0x021E54E8
	add r0, r5, r4
	bl FUN_020D2734
	cmp r0, #0
	bne _020E5578
	ldr r0, _020E5610 @ =0x021E16A0
	ldr r2, _020E5614 @ =0x021E54A0
	ldr r1, [r0, #4]
	ldr r0, _020E5618 @ =0x021E54C4
	ldr r3, [r1, #0x6c]
	mov r1, #1
	str r3, [r2, r6, lsl #2]
	str r1, [r0, r6, lsl #2]
	b _020E55D0
_020E5578:
	ldr r0, _020E5610 @ =0x021E16A0
	ldr r1, _020E5614 @ =0x021E54A0
	ldr r0, [r0, #4]
	ldr r1, [r1, r6, lsl #2]
	ldr r0, [r0, #0x6c]
	cmp r1, r0
	bne _020E55A8
	ldr r1, _020E5618 @ =0x021E54C4
	ldr r0, [r1, r6, lsl #2]
	add r0, r0, #1
	str r0, [r1, r6, lsl #2]
	b _020E55D0
_020E55A8:
	add r0, r5, r4
	bl FUN_020D2618
	ldr r0, _020E5610 @ =0x021E16A0
	ldr r2, _020E5614 @ =0x021E54A0
	ldr r1, [r0, #4]
	ldr r0, _020E5618 @ =0x021E54C4
	ldr r3, [r1, #0x6c]
	mov r1, #1
	str r3, [r2, r6, lsl #2]
	str r1, [r0, r6, lsl #2]
_020E55D0:
	mov r0, r7
	bl FUN_020E5484
	ldr r1, _020E5618 @ =0x021E54C4
	mov r7, r0
	ldr r0, [r1, r6, lsl #2]
	subs r0, r0, #1
	str r0, [r1, r6, lsl #2]
	bne _020E55F8
	add r0, r5, r4
	bl FUN_020D269C
_020E55F8:
	mov r0, r7
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020E5600: .4byte _02110FCC
_020E5604: .4byte _02111018
_020E5608: .4byte _02111064
_020E560C: .4byte 0x021E54E8
_020E5610: .4byte 0x021E16A0
_020E5614: .4byte 0x021E54A0
_020E5618: .4byte 0x021E54C4
	arm_func_end FUN_020E5500

	arm_func_start FUN_020E561C
FUN_020E561C: @ 0x020E561C
	push {r0, r1, r2, r3}
	push {r3, r4, r5, lr}
	mov r5, r0
	ldr r1, [r5, #4]
	mov r4, r2
	lsl r1, r1, #0x16
	lsr r1, r1, #0x1d
	and r1, r1, #0xff
	cmp r1, #1
	ldrbeq r1, [r5, #0xd]
	cmpeq r1, #0
	beq _020E5668
	ldr r0, _020E5800 @ =0x021E58C0
	mov r1, #0x28
	str r1, [r0]
	sub r0, r1, #0x29
	pop {r3, r4, r5, lr}
	add sp, sp, #0x10
	bx lr
_020E5668:
	ldr r1, [r5, #8]
	lsl r1, r1, #0x1d
	lsr r1, r1, #0x1d
	cmp r1, #1
	bne _020E56B8
	mov r1, #0
	bl FUN_020E4B9C
	cmp r0, #0
	beq _020E56B8
	mov r0, #1
	strb r0, [r5, #0xd]
	mov r2, #0
	ldr r0, _020E5800 @ =0x021E58C0
	mov r1, #0x28
	str r2, [r5, #0x28]
	str r1, [r0]
	sub r0, r1, #0x29
	pop {r3, r4, r5, lr}
	add sp, sp, #0x10
	bx lr
_020E56B8:
	cmp r4, #1
	bne _020E56D8
	mov r0, r5
	mov r4, #0
	bl FUN_020E5484
	ldr r1, [sp, #0x14]
	add r0, r1, r0
	str r0, [sp, #0x14]
_020E56D8:
	cmp r4, #2
	beq _020E576C
	ldr r0, [r5, #4]
	lsl r0, r0, #0x1b
	lsr r0, r0, #0x1d
	cmp r0, #3
	beq _020E576C
	ldr r0, [r5, #8]
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	sub r0, r0, #2
	cmp r0, #1
	bhi _020E576C
	ldr r2, [sp, #0x14]
	ldr r0, [r5, #0x18]
	cmp r2, r0
	bhs _020E5728
	ldr r0, [r5, #0x34]
	cmp r2, r0
	bhs _020E5738
_020E5728:
	ldr r0, [r5, #8]
	bic r0, r0, #7
	str r0, [r5, #8]
	b _020E5778
_020E5738:
	ldr r1, [r5, #0x1c]
	sub r0, r2, r0
	add r0, r1, r0
	str r0, [r5, #0x24]
	ldr r1, [r5, #0x18]
	ldr r0, [sp, #0x14]
	sub r0, r1, r0
	str r0, [r5, #0x28]
	ldr r0, [r5, #8]
	bic r0, r0, #7
	orr r0, r0, #2
	str r0, [r5, #8]
	b _020E5778
_020E576C:
	ldr r0, [r5, #8]
	bic r0, r0, #7
	str r0, [r5, #8]
_020E5778:
	ldr r0, [r5, #8]
	lsl r0, r0, #0x1d
	lsrs r0, r0, #0x1d
	bne _020E57F0
	ldr ip, [r5, #0x38]
	cmp ip, #0
	beq _020E57DC
	ldr r0, [r5]
	ldr r3, [r5, #0x48]
	add r1, sp, #0x14
	mov r2, r4
	blx ip
	cmp r0, #0
	beq _020E57DC
	mov r0, #1
	strb r0, [r5, #0xd]
	mov r2, #0
	ldr r0, _020E5800 @ =0x021E58C0
	mov r1, #0x28
	str r2, [r5, #0x28]
	str r1, [r0]
	sub r0, r1, #0x29
	pop {r3, r4, r5, lr}
	add sp, sp, #0x10
	bx lr
_020E57DC:
	mov r1, #0
	strb r1, [r5, #0xc]
	ldr r0, [sp, #0x14]
	str r0, [r5, #0x18]
	str r1, [r5, #0x28]
_020E57F0:
	mov r0, #0
	pop {r3, r4, r5, lr}
	add sp, sp, #0x10
	bx lr
	.align 2, 0
_020E5800: .4byte 0x021E58C0
	arm_func_end FUN_020E561C

	arm_func_start FUN_020E5804
FUN_020E5804: @ 0x020E5804
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	ldr r3, _020E5914 @ =_02110FCC
	mov sb, r0
	cmp sb, r3
	mov r8, r1
	mov r7, r2
	moveq r6, #2
	beq _020E5844
	ldr r0, _020E5918 @ =_02111018
	cmp sb, r0
	moveq r6, #3
	beq _020E5844
	ldr r0, _020E591C @ =_02111064
	cmp sb, r0
	moveq r6, #4
	movne r6, #5
_020E5844:
	mov r0, #0x18
	mul r4, r6, r0
	ldr r5, _020E5920 @ =0x021E54E8
	add r0, r5, r4
	bl FUN_020D2734
	cmp r0, #0
	bne _020E5884
	ldr r0, _020E5924 @ =0x021E16A0
	ldr r2, _020E5928 @ =0x021E54A0
	ldr r1, [r0, #4]
	ldr r0, _020E592C @ =0x021E54C4
	ldr r3, [r1, #0x6c]
	mov r1, #1
	str r3, [r2, r6, lsl #2]
	str r1, [r0, r6, lsl #2]
	b _020E58DC
_020E5884:
	ldr r0, _020E5924 @ =0x021E16A0
	ldr r1, _020E5928 @ =0x021E54A0
	ldr r0, [r0, #4]
	ldr r1, [r1, r6, lsl #2]
	ldr r0, [r0, #0x6c]
	cmp r1, r0
	bne _020E58B4
	ldr r1, _020E592C @ =0x021E54C4
	ldr r0, [r1, r6, lsl #2]
	add r0, r0, #1
	str r0, [r1, r6, lsl #2]
	b _020E58DC
_020E58B4:
	add r0, r5, r4
	bl FUN_020D2618
	ldr r0, _020E5924 @ =0x021E16A0
	ldr r2, _020E5928 @ =0x021E54A0
	ldr r1, [r0, #4]
	ldr r0, _020E592C @ =0x021E54C4
	ldr r3, [r1, #0x6c]
	mov r1, #1
	str r3, [r2, r6, lsl #2]
	str r1, [r0, r6, lsl #2]
_020E58DC:
	mov r0, sb
	mov r1, r8
	mov r2, r7
	bl FUN_020E561C
	ldr r1, _020E592C @ =0x021E54C4
	mov r7, r0
	ldr r0, [r1, r6, lsl #2]
	subs r0, r0, #1
	str r0, [r1, r6, lsl #2]
	bne _020E590C
	add r0, r5, r4
	bl FUN_020D269C
_020E590C:
	mov r0, r7
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0
_020E5914: .4byte _02110FCC
_020E5918: .4byte _02111018
_020E591C: .4byte _02111064
_020E5920: .4byte 0x021E54E8
_020E5924: .4byte 0x021E16A0
_020E5928: .4byte 0x021E54A0
_020E592C: .4byte 0x021E54C4
	arm_func_end FUN_020E5804

	arm_func_start FUN_020E5930
FUN_020E5930: @ 0x020E5930
	push {r4, lr}
	mov r1, #0
	mov r4, r0
	mov r2, r1
	strb r1, [r4, #0xd]
	bl FUN_020E5804
	mov r0, #0
	strb r0, [r4, #0xd]
	pop {r4, pc}
	arm_func_end FUN_020E5930

	arm_func_start FUN_020E5954
FUN_020E5954: @ 0x020E5954
	push {r3, lr}
	ldr r3, _020E596C @ =_0211120C
	ldr r3, [r3, #8]
	ldr r3, [r3]
	blx r3
	pop {r3, pc}
	.align 2, 0
_020E596C: .4byte _0211120C
	arm_func_end FUN_020E5954

	arm_func_start FUN_020E5970
FUN_020E5970: @ 0x020E5970
	cmp r1, #0
	moveq r0, #0
	bxeq lr
	cmp r2, #0
	mvneq r0, #0
	bxeq lr
	cmp r0, #0
	ldrbne r2, [r1]
	strhne r2, [r0]
	ldrsb r0, [r1]
	cmp r0, #0
	moveq r0, #0
	movne r0, #1
	bx lr
	arm_func_end FUN_020E5970

	arm_func_start FUN_020E59A8
FUN_020E59A8: @ 0x020E59A8
	cmp r0, #0
	moveq r0, #0
	strbne r1, [r0]
	movne r0, #1
	bx lr
	arm_func_end FUN_020E59A8

	arm_func_start FUN_020E59BC
FUN_020E59BC: @ 0x020E59BC
	push {r3, lr}
	ldr r2, _020E59D4 @ =_0211120C
	ldr r2, [r2, #8]
	ldr r2, [r2, #4]
	blx r2
	pop {r3, pc}
	.align 2, 0
_020E59D4: .4byte _0211120C
	arm_func_end FUN_020E59BC

	arm_func_start FUN_020E59D8
FUN_020E59D8: @ 0x020E59D8
	push {r4, r5, r6, r7, r8, lr}
	mov r7, r1
	mov r8, r0
	mov r0, r7
	mov r6, r2
	bl FUN_020E9580
	mov r5, r0
	cmp r8, #0
	mov r4, #0
	beq _020E5A58
	cmp r6, #0
	bls _020E5A58
_020E5A08:
	ldrsb r0, [r7]
	cmp r0, #0
	beq _020E5A40
	mov r0, r8
	mov r1, r7
	mov r2, r5
	bl FUN_020E5954
	cmp r0, #0
	add r8, r8, #2
	addgt r7, r7, r0
	subgt r5, r5, r0
	bgt _020E5A4C
	mvn r0, #0
	pop {r4, r5, r6, r7, r8, pc}
_020E5A40:
	mov r0, #0
	strh r0, [r8]
	b _020E5A58
_020E5A4C:
	add r4, r4, #1
	cmp r4, r6
	blo _020E5A08
_020E5A58:
	mov r0, r4
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020E59D8

	arm_func_start FUN_020E5A60
FUN_020E5A60: @ 0x020E5A60
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	movs r4, r0
	mov sb, r1
	cmpne sb, #0
	mov r8, r2
	mov r7, #0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	add r6, sp, #0
_020E5A84:
	ldrh r1, [sb]
	cmp r1, #0
	moveq r0, #0
	strbeq r0, [r4, r7]
	beq _020E5AD0
	mov r0, r6
	add sb, sb, #2
	bl FUN_020E59BC
	mov r5, r0
	add r0, r7, r5
	cmp r0, r8
	bhi _020E5AD0
	mov r1, r6
	mov r2, r5
	add r0, r4, r7
	bl FUN_020E9664
	add r7, r7, r5
	cmp r7, r8
	bls _020E5A84
_020E5AD0:
	mov r0, r7
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	arm_func_end FUN_020E5A60

	arm_func_start FUN_020E5AD8
FUN_020E5AD8: @ 0x020E5AD8
	mov ip, r0
	cmp r2, #0
	bxeq lr
_020E5AE4:
	ldrsb r3, [r1], #1
	subs r2, r2, #1
	strb r3, [ip], #1
	bne _020E5AE4
	bx lr
	arm_func_end FUN_020E5AD8

	arm_func_start FUN_020E5AF8
FUN_020E5AF8: @ 0x020E5AF8
	cmp r1, r0
	blo _020E5B20
	mov ip, r0
	cmp r2, #0
	bxeq lr
_020E5B0C:
	ldrsb r3, [r1], #1
	subs r2, r2, #1
	strb r3, [ip], #1
	bne _020E5B0C
	bx lr
_020E5B20:
	cmp r2, #0
	add r3, r1, r2
	add ip, r0, r2
	bxeq lr
_020E5B30:
	ldrsb r1, [r3, #-1]!
	subs r2, r2, #1
	strb r1, [ip, #-1]!
	bne _020E5B30
	bx lr
	arm_func_end FUN_020E5AF8

	arm_func_start FUN_020E5B44
FUN_020E5B44: @ 0x020E5B44
	push {r4, lr}
	mov r4, r0
	bl FUN_020E5BF0
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_020E5B44

	arm_func_start FUN_020E5B58
FUN_020E5B58: @ 0x020E5B58
	cmp r2, #0
	and r3, r1, #0xff
	beq _020E5B7C
_020E5B64:
	ldrb r1, [r0], #1
	cmp r1, r3
	subeq r0, r0, #1
	bxeq lr
	subs r2, r2, #1
	bne _020E5B64
_020E5B7C:
	mov r0, #0
	bx lr
	arm_func_end FUN_020E5B58

	arm_func_start FUN_020E5B84
FUN_020E5B84: @ 0x020E5B84
	cmp r2, #0
	and r3, r1, #0xff
	add r0, r0, r2
	beq _020E5BA8
_020E5B94:
	ldrb r1, [r0, #-1]!
	cmp r1, r3
	bxeq lr
	subs r2, r2, #1
	bne _020E5B94
_020E5BA8:
	mov r0, #0
	bx lr
	arm_func_end FUN_020E5B84

	arm_func_start FUN_020E5BB0
FUN_020E5BB0: @ 0x020E5BB0
	cmp r2, #0
	beq _020E5BE8
_020E5BB8:
	ldrb ip, [r0], #1
	ldrb r3, [r1], #1
	cmp ip, r3
	beq _020E5BE0
	ldrb r2, [r0, #-1]
	ldrb r0, [r1, #-1]
	cmp r2, r0
	mvnlo r0, #0
	movhs r0, #1
	bx lr
_020E5BE0:
	subs r2, r2, #1
	bne _020E5BB8
_020E5BE8:
	mov r0, #0
	bx lr
	arm_func_end FUN_020E5BB0

	arm_func_start FUN_020E5BF0
FUN_020E5BF0: @ 0x020E5BF0
	cmp r2, #0x20
	and r3, r1, #0xff
	blo _020E5C84
	rsb r1, r0, #0
	ands ip, r1, #3
	beq _020E5C1C
	sub r2, r2, ip
	and r1, r3, #0xff
_020E5C10:
	strb r1, [r0], #1
	subs ip, ip, #1
	bne _020E5C10
_020E5C1C:
	cmp r3, #0
	beq _020E5C34
	lsl r1, r3, #0x10
	orr r1, r1, r3, lsl #24
	orr r1, r1, r3, lsl #8
	orr r3, r3, r1
_020E5C34:
	lsrs r1, r2, #5
	beq _020E5C68
_020E5C3C:
	str r3, [r0]
	str r3, [r0, #4]
	str r3, [r0, #8]
	str r3, [r0, #0xc]
	str r3, [r0, #0x10]
	str r3, [r0, #0x14]
	str r3, [r0, #0x18]
	str r3, [r0, #0x1c]
	add r0, r0, #0x20
	subs r1, r1, #1
	bne _020E5C3C
_020E5C68:
	and r1, r2, #0x1f
	lsrs r1, r1, #2
	beq _020E5C80
_020E5C74:
	str r3, [r0], #4
	subs r1, r1, #1
	bne _020E5C74
_020E5C80:
	and r2, r2, #3
_020E5C84:
	cmp r2, #0
	bxeq lr
	and r1, r3, #0xff
_020E5C90:
	strb r1, [r0], #1
	subs r2, r2, #1
	bne _020E5C90
	bx lr
	arm_func_end FUN_020E5BF0

	arm_func_start FUN_020E5CA0
FUN_020E5CA0: @ 0x020E5CA0
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x10
	ldrsb r3, [r0, #1]
	mov r4, #0
	mov r5, #1
	mov lr, r2
	strb r5, [sp]
	strb r4, [sp, #1]
	strb r4, [sp, #2]
	strb r4, [sp, #3]
	strb r4, [sp, #4]
	str r4, [sp, #8]
	str r4, [sp, #0xc]
	cmp r3, #0x25
	add ip, r0, #1
	bne _020E5CFC
	add r0, sp, #0
	strb r3, [sp, #5]
	ldm r0, {r0, r1, r2, r3}
	stm lr, {r0, r1, r2, r3}
	add sp, sp, #0x10
	add r0, ip, #1
	pop {r4, r5, r6, r7, r8, pc}
_020E5CFC:
	mov r2, #2
	mov r0, r4
	mov r5, r2
	mov r6, r4
	mov r7, #1
_020E5D10:
	mov r8, r7
	cmp r3, #0x2b
	bgt _020E5D40
	bge _020E5D68
	cmp r3, #0x23
	bgt _020E5D98
	cmp r3, #0x20
	blt _020E5D98
	beq _020E5D70
	cmp r3, #0x23
	beq _020E5D80
	b _020E5D98
_020E5D40:
	cmp r3, #0x30
	bgt _020E5D98
	cmp r3, #0x2d
	blt _020E5D98
	beq _020E5D60
	cmp r3, #0x30
	beq _020E5D88
	b _020E5D98
_020E5D60:
	strb r6, [sp]
	b _020E5D9C
_020E5D68:
	strb r7, [sp, #1]
	b _020E5D9C
_020E5D70:
	ldrb r4, [sp, #1]
	cmp r4, #1
	strbne r5, [sp, #1]
	b _020E5D9C
_020E5D80:
	strb r7, [sp, #3]
	b _020E5D9C
_020E5D88:
	ldrb r4, [sp]
	cmp r4, #0
	strbne r2, [sp]
	b _020E5D9C
_020E5D98:
	mov r8, r0
_020E5D9C:
	cmp r8, #0
	ldrsbne r3, [ip, #1]!
	bne _020E5D10
	cmp r3, #0x2a
	bne _020E5DE4
	ldr r0, [r1]
	add r0, r0, #4
	str r0, [r1]
	ldr r0, [r0, #-4]
	str r0, [sp, #8]
	cmp r0, #0
	bge _020E5DDC
	rsb r0, r0, #0
	mov r2, #0
	strb r2, [sp]
	str r0, [sp, #8]
_020E5DDC:
	ldrsb r3, [ip, #1]!
	b _020E5E34
_020E5DE4:
	ldr r4, _020E6228 @ =0x0210E504
	mov r5, #0
	mov r0, #0xa
	b _020E5E08
_020E5DF4:
	ldr r2, [sp, #8]
	sub r3, r3, #0x30
	mla r6, r2, r0, r3
	ldrsb r3, [ip, #1]!
	str r6, [sp, #8]
_020E5E08:
	cmp r3, #0
	blt _020E5E18
	cmp r3, #0x80
	blt _020E5E20
_020E5E18:
	mov r2, r5
	b _020E5E2C
_020E5E20:
	lsl r2, r3, #1
	ldrh r2, [r4, r2]
	and r2, r2, #8
_020E5E2C:
	cmp r2, #0
	bne _020E5DF4
_020E5E34:
	ldr r2, [sp, #8]
	ldr r0, _020E622C @ =0x000001FD
	cmp r2, r0
	ble _020E5E64
	mov r1, #0xff
	add r0, sp, #0
	strb r1, [sp, #5]
	ldm r0, {r0, r1, r2, r3}
	stm lr, {r0, r1, r2, r3}
	add sp, sp, #0x10
	add r0, ip, #1
	pop {r4, r5, r6, r7, r8, pc}
_020E5E64:
	cmp r3, #0x2e
	bne _020E5EF8
	ldrsb r3, [ip, #1]!
	mov r0, #1
	strb r0, [sp, #2]
	cmp r3, #0x2a
	bne _020E5EA8
	ldr r0, [r1]
	add r0, r0, #4
	str r0, [r1]
	ldr r0, [r0, #-4]
	ldrsb r3, [ip, #1]!
	str r0, [sp, #0xc]
	cmp r0, #0
	movlt r0, #0
	strblt r0, [sp, #2]
	b _020E5EF8
_020E5EA8:
	ldr r2, _020E6228 @ =0x0210E504
	mov r4, #0
	mov r0, #0xa
	b _020E5ECC
_020E5EB8:
	ldr r1, [sp, #0xc]
	sub r3, r3, #0x30
	mla r5, r1, r0, r3
	ldrsb r3, [ip, #1]!
	str r5, [sp, #0xc]
_020E5ECC:
	cmp r3, #0
	blt _020E5EDC
	cmp r3, #0x80
	blt _020E5EE4
_020E5EDC:
	mov r1, r4
	b _020E5EF0
_020E5EE4:
	lsl r1, r3, #1
	ldrh r1, [r2, r1]
	and r1, r1, #8
_020E5EF0:
	cmp r1, #0
	bne _020E5EB8
_020E5EF8:
	cmp r3, #0x6c
	mov r0, #1
	bgt _020E5F30
	cmp r3, #0x68
	blt _020E5F24
	beq _020E5F4C
	cmp r3, #0x6a
	beq _020E5F98
	cmp r3, #0x6c
	beq _020E5F68
	b _020E5FBC
_020E5F24:
	cmp r3, #0x4c
	beq _020E5F8C
	b _020E5FBC
_020E5F30:
	cmp r3, #0x74
	bgt _020E5F40
	beq _020E5FA4
	b _020E5FBC
_020E5F40:
	cmp r3, #0x7a
	beq _020E5FB0
	b _020E5FBC
_020E5F4C:
	ldrsb r1, [ip, #1]
	mov r2, #2
	strb r2, [sp, #4]
	cmp r1, #0x68
	strbeq r0, [sp, #4]
	ldrsbeq r3, [ip, #1]!
	b _020E5FC0
_020E5F68:
	ldrsb r1, [ip, #1]
	mov r2, #3
	strb r2, [sp, #4]
	cmp r1, #0x6c
	bne _020E5FC0
	mov r1, #4
	strb r1, [sp, #4]
	ldrsb r3, [ip, #1]!
	b _020E5FC0
_020E5F8C:
	mov r1, #9
	strb r1, [sp, #4]
	b _020E5FC0
_020E5F98:
	mov r1, #6
	strb r1, [sp, #4]
	b _020E5FC0
_020E5FA4:
	mov r1, #8
	strb r1, [sp, #4]
	b _020E5FC0
_020E5FB0:
	mov r1, #7
	strb r1, [sp, #4]
	b _020E5FC0
_020E5FBC:
	mov r0, #0
_020E5FC0:
	cmp r0, #0
	ldrsbne r3, [ip, #1]!
	strb r3, [sp, #5]
	cmp r3, #0x61
	bgt _020E6014
	bge _020E60FC
	cmp r3, #0x47
	bgt _020E6008
	subs r0, r3, #0x41
	addpl pc, pc, r0, lsl #2
	b _020E6208
_020E5FEC: @ jump table
	b _020E60FC @ case 0
	b _020E6208 @ case 1
	b _020E6208 @ case 2
	b _020E6208 @ case 3
	b _020E6144 @ case 4
	b _020E60C4 @ case 5
	b _020E6134 @ case 6
_020E6008:
	cmp r3, #0x58
	beq _020E6088
	b _020E6208
_020E6014:
	cmp r3, #0x63
	bgt _020E6024
	beq _020E61A4
	b _020E6208
_020E6024:
	sub r0, r3, #0x64
	cmp r0, #0x14
	addls pc, pc, r0, lsl #2
	b _020E6208
_020E6034: @ jump table
	b _020E6088 @ case 0
	b _020E6144 @ case 1
	b _020E60C4 @ case 2
	b _020E6134 @ case 3
	b _020E6208 @ case 4
	b _020E6088 @ case 5
	b _020E6208 @ case 6
	b _020E6208 @ case 7
	b _020E6208 @ case 8
	b _020E6208 @ case 9
	b _020E61F4 @ case 10
	b _020E6088 @ case 11
	b _020E6180 @ case 12
	b _020E6208 @ case 13
	b _020E6208 @ case 14
	b _020E61D0 @ case 15
	b _020E6208 @ case 16
	b _020E6088 @ case 17
	b _020E6208 @ case 18
	b _020E6208 @ case 19
	b _020E6088 @ case 20
_020E6088:
	ldrb r0, [sp, #4]
	cmp r0, #9
	moveq r0, #0xff
	strbeq r0, [sp, #5]
	beq _020E6210
	ldrb r0, [sp, #2]
	cmp r0, #0
	moveq r0, #1
	streq r0, [sp, #0xc]
	beq _020E6210
	ldrb r0, [sp]
	cmp r0, #2
	moveq r0, #1
	strbeq r0, [sp]
	b _020E6210
_020E60C4:
	ldrb r0, [sp, #4]
	cmp r0, #2
	cmpne r0, #6
	cmpne r0, #7
	cmpne r0, #8
	cmpne r0, #4
	moveq r0, #0xff
	strbeq r0, [sp, #5]
	beq _020E6210
	ldrb r0, [sp, #2]
	cmp r0, #0
	moveq r0, #6
	streq r0, [sp, #0xc]
	b _020E6210
_020E60FC:
	ldrb r0, [sp, #2]
	cmp r0, #0
	moveq r0, #0xd
	streq r0, [sp, #0xc]
	ldrb r0, [sp, #4]
	cmp r0, #2
	cmpne r0, #6
	cmpne r0, #7
	cmpne r0, #8
	cmpne r0, #4
	cmpne r0, #1
	moveq r0, #0xff
	strbeq r0, [sp, #5]
	b _020E6210
_020E6134:
	ldr r0, [sp, #0xc]
	cmp r0, #0
	moveq r0, #1
	streq r0, [sp, #0xc]
_020E6144:
	ldrb r0, [sp, #4]
	cmp r0, #2
	cmpne r0, #6
	cmpne r0, #7
	cmpne r0, #8
	cmpne r0, #4
	cmpne r0, #1
	moveq r0, #0xff
	strbeq r0, [sp, #5]
	beq _020E6210
	ldrb r0, [sp, #2]
	cmp r0, #0
	moveq r0, #6
	streq r0, [sp, #0xc]
	b _020E6210
_020E6180:
	mov r3, #0x78
	mov r2, #1
	mov r1, #3
	mov r0, #8
	strb r3, [sp, #5]
	strb r2, [sp, #3]
	strb r1, [sp, #4]
	str r0, [sp, #0xc]
	b _020E6210
_020E61A4:
	ldrb r1, [sp, #4]
	cmp r1, #3
	moveq r0, #5
	strbeq r0, [sp, #4]
	beq _020E6210
	ldrb r0, [sp, #2]
	cmp r0, #0
	cmpeq r1, #0
	movne r0, #0xff
	strbne r0, [sp, #5]
	b _020E6210
_020E61D0:
	ldrb r0, [sp, #4]
	cmp r0, #3
	moveq r0, #5
	strbeq r0, [sp, #4]
	beq _020E6210
	cmp r0, #0
	movne r0, #0xff
	strbne r0, [sp, #5]
	b _020E6210
_020E61F4:
	ldrb r0, [sp, #4]
	cmp r0, #9
	moveq r0, #0xff
	strbeq r0, [sp, #5]
	b _020E6210
_020E6208:
	mov r0, #0xff
	strb r0, [sp, #5]
_020E6210:
	add r0, sp, #0
	ldm r0, {r0, r1, r2, r3}
	stm lr, {r0, r1, r2, r3}
	add r0, ip, #1
	add sp, sp, #0x10
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0
_020E6228: .4byte 0x0210E504
_020E622C: .4byte 0x000001FD
	arm_func_end FUN_020E5CA0

	arm_func_start FUN_020E6230
FUN_020E6230: @ 0x020E6230
	push {r0, r1, r2, r3}
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x10
	movs sl, r0
	mov r0, #0
	mov r5, r1
	str r0, [sp, #0xc]
	ldr r7, [sp, #0x4c]
	mov r6, r0
	strb r0, [r5, #-1]!
	ldrb r0, [sp, #0x43]
	str r1, [sp]
	ldrb r8, [sp, #0x45]
	str r0, [sp, #4]
	ldr r0, [sp, #0x48]
	ldrb fp, [sp, #0x41]
	str r0, [sp, #8]
	cmpeq r7, #0
	bne _020E62A4
	ldr r0, [sp, #4]
	cmp r0, #0
	beq _020E6290
	cmp r8, #0x6f
	beq _020E62A4
_020E6290:
	add sp, sp, #0x10
	mov r0, r5
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_020E62A4:
	cmp r8, #0x69
	bgt _020E62CC
	bge _020E6300
	cmp r8, #0x58
	bgt _020E62C0
	beq _020E632C
	b _020E6334
_020E62C0:
	cmp r8, #0x64
	beq _020E6300
	b _020E6334
_020E62CC:
	cmp r8, #0x6f
	bgt _020E62E0
	moveq r4, #8
	moveq fp, #0
	b _020E6334
_020E62E0:
	cmp r8, #0x78
	bgt _020E6334
	cmp r8, #0x75
	blt _020E6334
	beq _020E6320
	cmp r8, #0x78
	beq _020E632C
	b _020E6334
_020E6300:
	cmp sl, #0
	mov r4, #0xa
	bge _020E6334
	mov r0, #1
	cmp sl, #0x80000000
	rsbne sl, sl, #0
	str r0, [sp, #0xc]
	b _020E6334
_020E6320:
	mov r4, #0xa
	mov fp, #0
	b _020E6334
_020E632C:
	mov r4, #0x10
	mov fp, #0
_020E6334:
	mov r0, sl
	mov r1, r4
	bl FUN_020F2BA4
	mov sb, r1
	mov r0, sl
	mov r1, r4
	bl FUN_020F2BA4
	cmp sb, #0xa
	mov sl, r0
	addlt sb, sb, #0x30
	blt _020E636C
	cmp r8, #0x78
	addeq sb, sb, #0x57
	addne sb, sb, #0x37
_020E636C:
	cmp sl, #0
	strb sb, [r5, #-1]!
	add r6, r6, #1
	bne _020E6334
	cmp r4, #8
	bne _020E63A0
	ldr r0, [sp, #4]
	cmp r0, #0
	ldrsbne r0, [r5]
	cmpne r0, #0x30
	movne r0, #0x30
	strbne r0, [r5, #-1]!
	addne r6, r6, #1
_020E63A0:
	ldrb r0, [sp, #0x40]
	cmp r0, #2
	bne _020E63D4
	ldr r0, [sp, #0xc]
	ldr r7, [sp, #8]
	cmp r0, #0
	cmpeq fp, #0
	subne r7, r7, #1
	cmp r4, #0x10
	bne _020E63D4
	ldr r0, [sp, #4]
	cmp r0, #0
	subne r7, r7, #2
_020E63D4:
	ldr r0, [sp]
	sub r1, r0, r5
	ldr r0, _020E6478 @ =0x000001FD
	add r1, r7, r1
	cmp r1, r0
	addgt sp, sp, #0x10
	movgt r0, #0
	popgt {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	addgt sp, sp, #0x10
	bxgt lr
	cmp r6, r7
	bge _020E6418
	mov r0, #0x30
_020E6408:
	add r6, r6, #1
	cmp r6, r7
	strb r0, [r5, #-1]!
	blt _020E6408
_020E6418:
	cmp r4, #0x10
	bne _020E6434
	ldr r0, [sp, #4]
	cmp r0, #0
	movne r0, #0x30
	strbne r8, [r5, #-1]
	strbne r0, [r5, #-2]!
_020E6434:
	ldr r0, [sp, #0xc]
	cmp r0, #0
	movne r0, #0x2d
	strbne r0, [r5, #-1]!
	bne _020E6464
	cmp fp, #1
	moveq r0, #0x2b
	strbeq r0, [r5, #-1]!
	beq _020E6464
	cmp fp, #2
	moveq r0, #0x20
	strbeq r0, [r5, #-1]!
_020E6464:
	mov r0, r5
	add sp, sp, #0x10
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
	.align 2, 0
_020E6478: .4byte 0x000001FD
	arm_func_end FUN_020E6230

	arm_func_start FUN_020E647C
FUN_020E647C: @ 0x020E647C
	push {r0, r1, r2, r3}
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x1c
	mov sb, r1
	mov r1, #0
	mov sl, r0
	mov r8, r2
	mov r0, r1
	strb r0, [r8, #-1]!
	ldr r0, [sp, #0x58]
	cmp sb, #0
	str r0, [sp, #0x14]
	ldrb r0, [sp, #0x4f]
	cmpeq sl, #0
	str r2, [sp]
	str r0, [sp, #4]
	ldrb r0, [sp, #0x51]
	str r1, [sp, #0x18]
	mov fp, r1
	str r0, [sp, #8]
	ldr r0, [sp, #0x54]
	str r0, [sp, #0xc]
	ldrb r0, [sp, #0x4d]
	str r0, [sp, #0x10]
	ldreq r0, [sp, #0x14]
	cmpeq r0, #0
	bne _020E6514
	ldr r0, [sp, #4]
	cmp r0, #0
	beq _020E6500
	ldr r0, [sp, #8]
	cmp r0, #0x6f
	beq _020E6514
_020E6500:
	add sp, sp, #0x1c
	mov r0, r8
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_020E6514:
	ldr r0, [sp, #8]
	cmp r0, #0x69
	bgt _020E6540
	bge _020E6570
	cmp r0, #0x58
	bgt _020E6534
	beq _020E65C4
	b _020E65D0
_020E6534:
	cmp r0, #0x64
	beq _020E6570
	b _020E65D0
_020E6540:
	cmp r0, #0x6f
	bgt _020E6550
	beq _020E65A4
	b _020E65D0
_020E6550:
	cmp r0, #0x78
	bgt _020E65D0
	cmp r0, #0x75
	blt _020E65D0
	beq _020E65B4
	cmp r0, #0x78
	beq _020E65C4
	b _020E65D0
_020E6570:
	subs r0, sl, #0
	sbcs r0, sb, #0
	mov r7, #0xa
	mov r6, #0
	bge _020E65D0
	cmp sb, #0x80000000
	cmpeq sl, r6
	beq _020E6598
	rsbs sl, sl, #0
	rsc sb, sb, #0
_020E6598:
	mov r0, #1
	str r0, [sp, #0x18]
	b _020E65D0
_020E65A4:
	mov r6, #0
	str r6, [sp, #0x10]
	mov r7, #8
	b _020E65D0
_020E65B4:
	mov r6, #0
	str r6, [sp, #0x10]
	mov r7, #0xa
	b _020E65D0
_020E65C4:
	mov r6, #0
	str r6, [sp, #0x10]
	mov r7, #0x10
_020E65D0:
	mov r4, #0
_020E65D4:
	mov r0, sl
	mov r1, sb
	mov r2, r7
	mov r3, r6
	bl FUN_020F290C
	mov r5, r0
	mov r0, sl
	mov r1, sb
	mov r2, r7
	mov r3, r6
	bl FUN_020F2900
	mov sl, r0
	cmp r5, #0xa
	mov sb, r1
	addlt r0, r5, #0x30
	blt _020E6624
	ldr r0, [sp, #8]
	cmp r0, #0x78
	addeq r0, r5, #0x57
	addne r0, r5, #0x37
_020E6624:
	strb r0, [r8, #-1]!
	mov r0, #0
	cmp sb, r0
	cmpeq sl, r4
	add fp, fp, #1
	bne _020E65D4
	cmp r6, #0
	cmpeq r7, #8
	bne _020E6664
	ldr r0, [sp, #4]
	cmp r0, #0
	ldrsbne r0, [r8]
	cmpne r0, #0x30
	movne r0, #0x30
	strbne r0, [r8, #-1]!
	addne fp, fp, #1
_020E6664:
	ldrb r0, [sp, #0x4c]
	cmp r0, #2
	bne _020E66B4
	ldr r0, [sp, #0xc]
	str r0, [sp, #0x14]
	ldr r0, [sp, #0x18]
	cmp r0, #0
	ldreq r0, [sp, #0x10]
	cmpeq r0, #0
	ldrne r0, [sp, #0x14]
	subne r0, r0, #1
	strne r0, [sp, #0x14]
	cmp r6, #0
	cmpeq r7, #0x10
	bne _020E66B4
	ldr r0, [sp, #4]
	cmp r0, #0
	ldrne r0, [sp, #0x14]
	subne r0, r0, #2
	strne r0, [sp, #0x14]
_020E66B4:
	ldr r0, [sp]
	ldr r1, _020E6774 @ =0x000001FD
	sub r2, r0, r8
	ldr r0, [sp, #0x14]
	add r0, r0, r2
	cmp r0, r1
	addgt sp, sp, #0x1c
	movgt r0, #0
	popgt {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	addgt sp, sp, #0x10
	bxgt lr
	ldr r0, [sp, #0x14]
	cmp fp, r0
	bge _020E6704
	mov r1, #0x30
_020E66F0:
	ldr r0, [sp, #0x14]
	add fp, fp, #1
	cmp fp, r0
	strb r1, [r8, #-1]!
	blt _020E66F0
_020E6704:
	cmp r6, #0
	cmpeq r7, #0x10
	bne _020E672C
	ldr r0, [sp, #4]
	cmp r0, #0
	beq _020E672C
	ldr r0, [sp, #8]
	mov r1, #0x30
	strb r0, [r8, #-1]
	strb r1, [r8, #-2]!
_020E672C:
	ldr r0, [sp, #0x18]
	cmp r0, #0
	movne r0, #0x2d
	strbne r0, [r8, #-1]!
	bne _020E6760
	ldr r0, [sp, #0x10]
	cmp r0, #1
	moveq r0, #0x2b
	strbeq r0, [r8, #-1]!
	beq _020E6760
	cmp r0, #2
	moveq r0, #0x20
	strbeq r0, [r8, #-1]!
_020E6760:
	mov r0, r8
	add sp, sp, #0x1c
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
	.align 2, 0
_020E6774: .4byte 0x000001FD
	arm_func_end FUN_020E647C

	arm_func_start FUN_020E6778
FUN_020E6778: @ 0x020E6778
	push {r0, r1, r2, r3}
	push {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0x44
	ldr r7, [sp, #0x80]
	ldr r0, _020E6C28 @ =0x000001FD
	mov r8, r2
	cmp r7, r0
	ldrb r6, [sp, #0x79]
	ldrb r5, [sp, #0x77]
	ldrb r4, [sp, #0x75]
	ldr r1, [sp, #0x68]
	ldr r2, [sp, #0x6c]
	addgt sp, sp, #0x44
	movgt r0, #0
	popgt {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	addgt sp, sp, #0x10
	bxgt lr
	mov sl, #0
	mov sb, #0x20
	add r0, sp, #8
	add r3, sp, #0xc
	strb sl, [sp, #8]
	strh sb, [sp, #0xa]
	bl FUN_020EFB28
	ldr r0, [sp, #0x68]
	ldr r1, [sp, #0x6c]
	bl FUN_020EEAA4
	mov r2, r0
	mov r0, sl
	mov r3, r1
	mov r1, r0
	bl FUN_020F19B4
	bne _020E6844
	ldr r3, _020E6C2C @ =_02111314
	sub r0, r8, #6
	ldrb r2, [r3]
	ldrb r1, [r3, #1]
	add sp, sp, #0x44
	strb r2, [r8, #-6]
	strb r1, [r0, #1]
	ldrb r2, [r3, #2]
	ldrb r1, [r3, #3]
	strb r2, [r0, #2]
	strb r1, [r0, #3]
	ldrb r2, [r3, #4]
	ldrb r1, [r3, #5]
	strb r2, [r0, #4]
	strb r1, [r0, #5]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	add sp, sp, #0x10
	bx lr
_020E6844:
	ldrb r0, [sp, #0x11]
	cmp r0, #0x49
	bne _020E6954
	ldrsb r0, [sp, #0xc]
	cmp r0, #0
	beq _020E68E0
	cmp r6, #0x41
	sub r0, r8, #5
	bne _020E68A4
	ldr r3, _020E6C30 @ =_0211131C
	add sp, sp, #0x44
	ldrb r2, [r3]
	ldrb r1, [r3, #1]
	strb r2, [r0]
	strb r1, [r0, #1]
	ldrb r2, [r3, #2]
	ldrb r1, [r3, #3]
	strb r2, [r0, #2]
	strb r1, [r0, #3]
	ldrb r1, [r3, #4]
	strb r1, [r0, #4]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	add sp, sp, #0x10
	bx lr
_020E68A4:
	ldr r3, _020E6C34 @ =_02111324
	add sp, sp, #0x44
	ldrb r2, [r3]
	ldrb r1, [r3, #1]
	strb r2, [r0]
	strb r1, [r0, #1]
	ldrb r2, [r3, #2]
	ldrb r1, [r3, #3]
	strb r2, [r0, #2]
	strb r1, [r0, #3]
	ldrb r1, [r3, #4]
	strb r1, [r0, #4]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	add sp, sp, #0x10
	bx lr
_020E68E0:
	cmp r6, #0x41
	sub r0, r8, #4
	bne _020E6920
	ldr r3, _020E6C38 @ =_0211132C
	add sp, sp, #0x44
	ldrb r2, [r3]
	ldrb r1, [r3, #1]
	strb r2, [r0]
	strb r1, [r0, #1]
	ldrb r2, [r3, #2]
	ldrb r1, [r3, #3]
	strb r2, [r0, #2]
	strb r1, [r0, #3]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	add sp, sp, #0x10
	bx lr
_020E6920:
	ldr r3, _020E6C3C @ =_02111330
	add sp, sp, #0x44
	ldrb r2, [r3]
	ldrb r1, [r3, #1]
	strb r2, [r0]
	strb r1, [r0, #1]
	ldrb r2, [r3, #2]
	ldrb r1, [r3, #3]
	strb r2, [r0, #2]
	strb r1, [r0, #3]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	add sp, sp, #0x10
	bx lr
_020E6954:
	cmp r0, #0x4e
	bne _020E6A60
	ldrsb r0, [sp, #0xc]
	cmp r0, #0
	beq _020E69EC
	cmp r6, #0x41
	sub r0, r8, #5
	bne _020E69B0
	ldr r3, _020E6C40 @ =_02111334
	add sp, sp, #0x44
	ldrb r2, [r3]
	ldrb r1, [r3, #1]
	strb r2, [r0]
	strb r1, [r0, #1]
	ldrb r2, [r3, #2]
	ldrb r1, [r3, #3]
	strb r2, [r0, #2]
	strb r1, [r0, #3]
	ldrb r1, [r3, #4]
	strb r1, [r0, #4]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	add sp, sp, #0x10
	bx lr
_020E69B0:
	ldr r3, _020E6C44 @ =_0211133C
	add sp, sp, #0x44
	ldrb r2, [r3]
	ldrb r1, [r3, #1]
	strb r2, [r0]
	strb r1, [r0, #1]
	ldrb r2, [r3, #2]
	ldrb r1, [r3, #3]
	strb r2, [r0, #2]
	strb r1, [r0, #3]
	ldrb r1, [r3, #4]
	strb r1, [r0, #4]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	add sp, sp, #0x10
	bx lr
_020E69EC:
	cmp r6, #0x41
	sub r0, r8, #4
	bne _020E6A2C
	ldr r3, _020E6C48 @ =_02111344
	add sp, sp, #0x44
	ldrb r2, [r3]
	ldrb r1, [r3, #1]
	strb r2, [r0]
	strb r1, [r0, #1]
	ldrb r2, [r3, #2]
	ldrb r1, [r3, #3]
	strb r2, [r0, #2]
	strb r1, [r0, #3]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	add sp, sp, #0x10
	bx lr
_020E6A2C:
	ldr r3, _020E6C4C @ =_02111348
	add sp, sp, #0x44
	ldrb r2, [r3]
	ldrb r1, [r3, #1]
	strb r2, [r0]
	strb r1, [r0, #1]
	ldrb r2, [r3, #2]
	ldrb r1, [r3, #3]
	strb r2, [r0, #2]
	strb r1, [r0, #3]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	add sp, sp, #0x10
	bx lr
_020E6A60:
	mov r3, sl
	mov r1, #1
	mov r0, #0x64
	add sb, sp, #0x68
	strb r1, [sp, #0x34]
	strb r1, [sp, #0x35]
	strb r3, [sp, #0x36]
	strb r3, [sp, #0x37]
	strb r3, [sp, #0x38]
	str r3, [sp, #0x3c]
	str r1, [sp, #0x40]
	strb r0, [sp, #0x39]
_020E6A90:
	rsb r1, r3, #7
	ldrsb r2, [sb, r3]
	ldrsb r0, [sb, r1]
	strb r0, [sb, r3]
	add r3, r3, #1
	strb r2, [sb, r1]
	cmp r3, #4
	blt _020E6A90
	ldrb r0, [sp, #0x69]
	ldrb r1, [sp, #0x68]
	ldr sb, _020E6C50 @ =0x000007FF
	lsl r0, r0, #0x11
	orr r1, r0, r1, lsl #25
	add r0, sp, #0x34
	and lr, sb, r1, lsr #21
	sub ip, sp, #8
	ldm r0, {r0, r1, r2, r3}
	stm ip, {r0, r1, r2, r3}
	rsb r0, sb, #0x400
	mov r1, r8
	add r0, lr, r0
	ldm ip, {r2, r3}
	bl FUN_020E6230
	cmp r6, #0x61
	moveq r1, #0x70
	movne r1, #0x50
	strb r1, [r0, #-1]!
	lsl r1, r7, #2
	mov lr, r7
	cmp r7, #1
	add r8, r1, #0xb
	add ip, sp, #0x68
	blt _020E6BA0
	mov sb, #0x30
_020E6B18:
	cmp r8, #0x40
	bge _020E6B88
	ldrb r1, [ip, r8, asr #3]
	and r2, r8, #7
	rsb r3, r2, #7
	asr r2, r1, r3
	sub sl, r8, #4
	bic r1, r8, #7
	bic sl, sl, #7
	cmp r1, sl
	add sl, ip, r8, asr #3
	and r1, r2, #0xff
	beq _020E6B5C
	ldrb r2, [sl, #-1]
	lsl r2, r2, #8
	orr r1, r1, r2, asr r3
	and r1, r1, #0xff
_020E6B5C:
	and r1, r1, #0xf
	cmp r1, #0xa
	addlo r1, r1, #0x30
	andlo r1, r1, #0xff
	blo _020E6B8C
	cmp r6, #0x61
	addeq r1, r1, #0x57
	andeq r1, r1, #0xff
	addne r1, r1, #0x37
	andne r1, r1, #0xff
	b _020E6B8C
_020E6B88:
	mov r1, sb
_020E6B8C:
	sub lr, lr, #1
	cmp lr, #1
	strb r1, [r0, #-1]!
	sub r8, r8, #4
	bge _020E6B18
_020E6BA0:
	cmp r7, #0
	cmpeq r5, #0
	movne r1, #0x2e
	strbne r1, [r0, #-1]!
	mov r1, #0x31
	strb r1, [r0, #-1]
	cmp r6, #0x61
	moveq r1, #0x78
	movne r1, #0x58
	strb r1, [r0, #-2]!
	mov r1, #0x30
	strb r1, [r0, #-1]!
	ldrsb r1, [sp, #0xc]
	cmp r1, #0
	movne r1, #0x2d
	strbne r1, [r0, #-1]!
	addne sp, sp, #0x44
	popne {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	addne sp, sp, #0x10
	bxne lr
	cmp r4, #1
	moveq r1, #0x2b
	strbeq r1, [r0, #-1]!
	addeq sp, sp, #0x44
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	addeq sp, sp, #0x10
	bxeq lr
	cmp r4, #2
	moveq r1, #0x20
	strbeq r1, [r0, #-1]!
	add sp, sp, #0x44
	pop {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	add sp, sp, #0x10
	bx lr
	.align 2, 0
_020E6C28: .4byte 0x000001FD
_020E6C2C: .4byte _02111314
_020E6C30: .4byte _0211131C
_020E6C34: .4byte _02111324
_020E6C38: .4byte _0211132C
_020E6C3C: .4byte _02111330
_020E6C40: .4byte _02111334
_020E6C44: .4byte _0211133C
_020E6C48: .4byte _02111344
_020E6C4C: .4byte _02111348
_020E6C50: .4byte 0x000007FF
	arm_func_end FUN_020E6778

	arm_func_start FUN_020E6C54
FUN_020E6C54: @ 0x020E6C54
	push {r4, lr}
	cmp r1, #0
	bge _020E6C7C
_020E6C60:
	mov r1, #0
	strh r1, [r0, #2]
	mov r1, #1
	strb r1, [r0, #4]
	mov r1, #0x30
	strb r1, [r0, #5]
	pop {r4, pc}
_020E6C7C:
	ldrb lr, [r0, #4]
	cmp r1, lr
	popge {r4, pc}
	add ip, r0, #5
	add r2, ip, r1
	add r2, r2, #1
	ldrsb r3, [r2, #-1]!
	sub r3, r3, #0x30
	lsl r3, r3, #0x18
	asr r3, r3, #0x18
	cmp r3, #5
	bne _020E6CDC
	add ip, ip, lr
_020E6CB0:
	sub ip, ip, #1
	cmp ip, r2
	bls _020E6CC8
	ldrsb r3, [ip]
	cmp r3, #0x30
	beq _020E6CB0
_020E6CC8:
	cmp ip, r2
	ldrsbeq r3, [r2, #-1]
	andeq r4, r3, #1
	movne r4, #1
	b _020E6CE4
_020E6CDC:
	movgt r4, #1
	movle r4, #0
_020E6CE4:
	cmp r1, #0
	beq _020E6D40
	mov ip, #0
	mov lr, #1
_020E6CF4:
	ldrsb r3, [r2, #-1]!
	sub r3, r3, #0x30
	add r3, r3, r4
	lsl r3, r3, #0x18
	asr r3, r3, #0x18
	cmp r3, #9
	movgt r4, lr
	movle r4, ip
	cmp r4, #0
	bne _020E6D24
	cmp r3, #0
	bne _020E6D2C
_020E6D24:
	sub r1, r1, #1
	b _020E6D38
_020E6D2C:
	add r3, r3, #0x30
	strb r3, [r2]
	b _020E6D40
_020E6D38:
	cmp r1, #0
	bne _020E6CF4
_020E6D40:
	cmp r4, #0
	beq _020E6D68
	ldrsh r3, [r0, #2]
	mov r2, #1
	mov r1, #0x31
	add r3, r3, #1
	strh r3, [r0, #2]
	strb r2, [r0, #4]
	strb r1, [r0, #5]
	pop {r4, pc}
_020E6D68:
	cmp r1, #0
	beq _020E6C60
	strb r1, [r0, #4]
	pop {r4, pc}
	arm_func_end FUN_020E6C54

	arm_func_start FUN_020E6D78
FUN_020E6D78: @ 0x020E6D78
	push {r0, r1, r2, r3}
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x2c
	ldr r7, [sp, #0x68]
	ldr r3, _020E74B0 @ =0x000001FD
	ldrb r6, [sp, #0x61]
	ldrb r5, [sp, #0x5f]
	ldrb r4, [sp, #0x5d]
	cmp r7, r3
	mov sl, r0
	mov r8, r1
	mov sb, r2
	addgt sp, sp, #0x2c
	movgt r0, #0
	popgt {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	addgt sp, sp, #0x10
	bxgt lr
	mov ip, #0
	mov fp, #0x20
	add r0, sp, #0
	add r3, sp, #4
	mov r1, sl
	mov r2, r8
	strb ip, [sp]
	strh fp, [sp, #2]
	bl FUN_020EFB28
	ldrb r0, [sp, #8]
	add r1, sp, #9
	add r0, r1, r0
	b _020E6E08
_020E6DF0:
	ldrb r2, [sp, #8]
	ldrsh r1, [sp, #6]
	sub r2, r2, #1
	add r1, r1, #1
	strb r2, [sp, #8]
	strh r1, [sp, #6]
_020E6E08:
	ldrb r1, [sp, #8]
	cmp r1, #1
	bls _020E6E20
	ldrsb r1, [r0, #-1]!
	cmp r1, #0x30
	beq _020E6DF0
_020E6E20:
	ldrb r0, [sp, #9]
	cmp r0, #0x30
	beq _020E6E40
	cmp r0, #0x49
	beq _020E6E4C
	cmp r0, #0x4e
	beq _020E6FAC
	b _020E7100
_020E6E40:
	mov r0, #0
	strh r0, [sp, #6]
	b _020E7100
_020E6E4C:
	mov r2, #0
	mov r0, sl
	mov r1, r8
	mov r3, r2
	bl FUN_020F1918
	bhs _020E6F10
	cmp r6, #0
	sub r0, sb, #5
	blt _020E6E78
	cmp r6, #0x80
	blt _020E6E80
_020E6E78:
	mov r1, #0
	b _020E6E90
_020E6E80:
	ldr r1, _020E74B4 @ =0x0210E504
	lsl r2, r6, #1
	ldrh r1, [r1, r2]
	and r1, r1, #0x200
_020E6E90:
	cmp r1, #0
	beq _020E6ED4
	ldr r3, _020E74B8 @ =_0211131C
	add sp, sp, #0x2c
	ldrb r2, [r3]
	ldrb r1, [r3, #1]
	strb r2, [r0]
	strb r1, [r0, #1]
	ldrb r2, [r3, #2]
	ldrb r1, [r3, #3]
	strb r2, [r0, #2]
	strb r1, [r0, #3]
	ldrb r1, [r3, #4]
	strb r1, [r0, #4]
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_020E6ED4:
	ldr r3, _020E74BC @ =_02111324
	add sp, sp, #0x2c
	ldrb r2, [r3]
	ldrb r1, [r3, #1]
	strb r2, [r0]
	strb r1, [r0, #1]
	ldrb r2, [r3, #2]
	ldrb r1, [r3, #3]
	strb r2, [r0, #2]
	strb r1, [r0, #3]
	ldrb r1, [r3, #4]
	strb r1, [r0, #4]
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_020E6F10:
	cmp r6, #0
	sub r0, sb, #4
	blt _020E6F24
	cmp r6, #0x80
	blt _020E6F2C
_020E6F24:
	mov r1, #0
	b _020E6F3C
_020E6F2C:
	ldr r1, _020E74B4 @ =0x0210E504
	lsl r2, r6, #1
	ldrh r1, [r1, r2]
	and r1, r1, #0x200
_020E6F3C:
	cmp r1, #0
	beq _020E6F78
	ldr r3, _020E74C0 @ =_0211132C
	add sp, sp, #0x2c
	ldrb r2, [r3]
	ldrb r1, [r3, #1]
	strb r2, [r0]
	strb r1, [r0, #1]
	ldrb r2, [r3, #2]
	ldrb r1, [r3, #3]
	strb r2, [r0, #2]
	strb r1, [r0, #3]
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_020E6F78:
	ldr r3, _020E74C4 @ =_02111330
	add sp, sp, #0x2c
	ldrb r2, [r3]
	ldrb r1, [r3, #1]
	strb r2, [r0]
	strb r1, [r0, #1]
	ldrb r2, [r3, #2]
	ldrb r1, [r3, #3]
	strb r2, [r0, #2]
	strb r1, [r0, #3]
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_020E6FAC:
	ldrsb r0, [sp, #4]
	cmp r0, #0
	beq _020E7064
	cmp r6, #0
	sub r0, sb, #5
	blt _020E6FCC
	cmp r6, #0x80
	blt _020E6FD4
_020E6FCC:
	mov r1, #0
	b _020E6FE4
_020E6FD4:
	ldr r1, _020E74B4 @ =0x0210E504
	lsl r2, r6, #1
	ldrh r1, [r1, r2]
	and r1, r1, #0x200
_020E6FE4:
	cmp r1, #0
	beq _020E7028
	ldr r3, _020E74C8 @ =_02111334
	add sp, sp, #0x2c
	ldrb r2, [r3]
	ldrb r1, [r3, #1]
	strb r2, [r0]
	strb r1, [r0, #1]
	ldrb r2, [r3, #2]
	ldrb r1, [r3, #3]
	strb r2, [r0, #2]
	strb r1, [r0, #3]
	ldrb r1, [r3, #4]
	strb r1, [r0, #4]
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_020E7028:
	ldr r3, _020E74CC @ =_0211133C
	add sp, sp, #0x2c
	ldrb r2, [r3]
	ldrb r1, [r3, #1]
	strb r2, [r0]
	strb r1, [r0, #1]
	ldrb r2, [r3, #2]
	ldrb r1, [r3, #3]
	strb r2, [r0, #2]
	strb r1, [r0, #3]
	ldrb r1, [r3, #4]
	strb r1, [r0, #4]
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_020E7064:
	cmp r6, #0
	sub r0, sb, #4
	blt _020E7078
	cmp r6, #0x80
	blt _020E7080
_020E7078:
	mov r1, #0
	b _020E7090
_020E7080:
	ldr r1, _020E74B4 @ =0x0210E504
	lsl r2, r6, #1
	ldrh r1, [r1, r2]
	and r1, r1, #0x200
_020E7090:
	cmp r1, #0
	beq _020E70CC
	ldr r3, _020E74D0 @ =_02111344
	add sp, sp, #0x2c
	ldrb r2, [r3]
	ldrb r1, [r3, #1]
	strb r2, [r0]
	strb r1, [r0, #1]
	ldrb r2, [r3, #2]
	ldrb r1, [r3, #3]
	strb r2, [r0, #2]
	strb r1, [r0, #3]
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_020E70CC:
	ldr r3, _020E74D4 @ =_02111348
	add sp, sp, #0x2c
	ldrb r2, [r3]
	ldrb r1, [r3, #1]
	strb r2, [r0]
	strb r1, [r0, #1]
	ldrb r2, [r3, #2]
	ldrb r1, [r3, #3]
	strb r2, [r0, #2]
	strb r1, [r0, #3]
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_020E7100:
	ldrb r0, [sp, #8]
	ldrsh r1, [sp, #6]
	sub r8, sb, #1
	sub r0, r0, #1
	add r0, r1, r0
	strh r0, [sp, #6]
	mov r0, #0
	strb r0, [r8]
	cmp r6, #0x65
	bgt _020E7154
	bge _020E71E0
	cmp r6, #0x47
	bgt _020E749C
	cmp r6, #0x45
	blt _020E749C
	beq _020E71E0
	cmp r6, #0x46
	beq _020E7328
	cmp r6, #0x47
	beq _020E716C
	b _020E749C
_020E7154:
	cmp r6, #0x66
	bgt _020E7164
	beq _020E7328
	b _020E749C
_020E7164:
	cmp r6, #0x67
	bne _020E749C
_020E716C:
	ldrb r0, [sp, #8]
	cmp r0, r7
	ble _020E7184
	add r0, sp, #4
	mov r1, r7
	bl FUN_020E6C54
_020E7184:
	ldrsh r2, [sp, #6]
	mvn r0, #3
	cmp r2, r0
	blt _020E719C
	cmp r2, r7
	blt _020E71BC
_020E719C:
	cmp r5, #0
	ldrbeq r0, [sp, #8]
	subne r7, r7, #1
	subeq r7, r0, #1
	cmp r6, #0x67
	moveq r6, #0x65
	movne r6, #0x45
	b _020E71E0
_020E71BC:
	cmp r5, #0
	addne r0, r2, #1
	subne r7, r7, r0
	bne _020E7328
	ldrb r1, [sp, #8]
	add r0, r2, #1
	subs r7, r1, r0
	movmi r7, #0
	b _020E7328
_020E71E0:
	ldrb r0, [sp, #8]
	add r1, r7, #1
	cmp r0, r1
	ble _020E71F8
	add r0, sp, #4
	bl FUN_020E6C54
_020E71F8:
	ldrsh lr, [sp, #6]
	mov fp, #0x2b
	mov sl, #0
	cmp lr, #0
	rsblt lr, lr, #0
	movlt fp, #0x2d
	ldr r3, _020E74D8 @ =0x66666667
	mov r0, #0xa
	b _020E724C
_020E721C:
	lsr r1, lr, #0x1f
	smull r2, ip, r3, lr
	add ip, r1, ip, asr #2
	smull r1, r2, r0, ip
	sub ip, lr, r1
	add r1, ip, #0x30
	strb r1, [r8, #-1]!
	mov r2, lr
	smull r1, lr, r3, r2
	lsr r1, r2, #0x1f
	add lr, r1, lr, asr #2
	add sl, sl, #1
_020E724C:
	cmp lr, #0
	bne _020E721C
	cmp sl, #2
	blt _020E721C
	strb fp, [r8, #-1]
	strb r6, [r8, #-2]!
	sub r1, sb, r8
	ldr r0, _020E74B0 @ =0x000001FD
	add r1, r7, r1
	cmp r1, r0
	addgt sp, sp, #0x2c
	movgt r0, #0
	popgt {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	addgt sp, sp, #0x10
	bxgt lr
	ldrb r1, [sp, #8]
	add r0, r7, #1
	cmp r1, r0
	bge _020E72B8
	add r0, r7, #2
	sub r0, r0, r1
	subs r1, r0, #1
	beq _020E72B8
	mov r0, #0x30
_020E72AC:
	strb r0, [r8, #-1]!
	subs r1, r1, #1
	bne _020E72AC
_020E72B8:
	ldrb r1, [sp, #8]
	add r0, sp, #9
	add r2, r0, r1
	subs r1, r1, #1
	beq _020E72DC
_020E72CC:
	ldrsb r0, [r2, #-1]!
	subs r1, r1, #1
	strb r0, [r8, #-1]!
	bne _020E72CC
_020E72DC:
	cmp r7, #0
	cmpeq r5, #0
	movne r0, #0x2e
	strbne r0, [r8, #-1]!
	ldrb r0, [sp, #9]
	strb r0, [r8, #-1]!
	ldrsb r0, [sp, #4]
	cmp r0, #0
	movne r0, #0x2d
	strbne r0, [r8, #-1]!
	bne _020E749C
	cmp r4, #1
	moveq r0, #0x2b
	strbeq r0, [r8, #-1]!
	beq _020E749C
	cmp r4, #2
	moveq r0, #0x20
	strbeq r0, [r8, #-1]!
	b _020E749C
_020E7328:
	ldrsh r3, [sp, #6]
	ldrb r2, [sp, #8]
	sub r0, r2, r3
	subs r1, r0, #1
	movmi r1, #0
	cmp r1, r7
	ble _020E7368
	sub r1, r1, r7
	add r0, sp, #4
	sub r1, r2, r1
	bl FUN_020E6C54
	ldrsh r3, [sp, #6]
	ldrb r2, [sp, #8]
	sub r0, r2, r3
	subs r1, r0, #1
	movmi r1, #0
_020E7368:
	adds r0, r3, #1
	movmi r0, #0
	ldr r3, _020E74B0 @ =0x000001FD
	add r6, r0, r1
	cmp r6, r3
	addgt sp, sp, #0x2c
	movgt r0, #0
	popgt {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	addgt sp, sp, #0x10
	bxgt lr
	add r3, sp, #9
	sub r6, r7, r1
	cmp r6, #0
	add r2, r3, r2
	mov sb, #0
	ble _020E73BC
	mov r3, #0x30
_020E73AC:
	add sb, sb, #1
	cmp sb, r6
	strb r3, [r8, #-1]!
	blt _020E73AC
_020E73BC:
	mov r6, #0
	b _020E73D0
_020E73C4:
	ldrsb r3, [r2, #-1]!
	add r6, r6, #1
	strb r3, [r8, #-1]!
_020E73D0:
	cmp r6, r1
	ldrblt r3, [sp, #8]
	cmplt r6, r3
	blt _020E73C4
	cmp r6, r1
	bge _020E73FC
	mov r3, #0x30
_020E73EC:
	add r6, r6, #1
	cmp r6, r1
	strb r3, [r8, #-1]!
	blt _020E73EC
_020E73FC:
	cmp r7, #0
	cmpeq r5, #0
	movne r1, #0x2e
	strbne r1, [r8, #-1]!
	cmp r0, #0
	beq _020E7464
	ldrb r1, [sp, #8]
	mov r5, #0
	sub r1, r0, r1
	cmp r1, #0
	ble _020E7444
	mov r3, #0x30
_020E742C:
	strb r3, [r8, #-1]!
	ldrb r1, [sp, #8]
	add r5, r5, #1
	sub r1, r0, r1
	cmp r5, r1
	blt _020E742C
_020E7444:
	cmp r5, r0
	bge _020E746C
_020E744C:
	ldrsb r1, [r2, #-1]!
	add r5, r5, #1
	cmp r5, r0
	strb r1, [r8, #-1]!
	blt _020E744C
	b _020E746C
_020E7464:
	mov r0, #0x30
	strb r0, [r8, #-1]!
_020E746C:
	ldrsb r0, [sp, #4]
	cmp r0, #0
	movne r0, #0x2d
	strbne r0, [r8, #-1]!
	bne _020E749C
	cmp r4, #1
	moveq r0, #0x2b
	strbeq r0, [r8, #-1]!
	beq _020E749C
	cmp r4, #2
	moveq r0, #0x20
	strbeq r0, [r8, #-1]!
_020E749C:
	mov r0, r8
	add sp, sp, #0x2c
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
	.align 2, 0
_020E74B0: .4byte 0x000001FD
_020E74B4: .4byte 0x0210E504
_020E74B8: .4byte _0211131C
_020E74BC: .4byte _02111324
_020E74C0: .4byte _0211132C
_020E74C4: .4byte _02111330
_020E74C8: .4byte _02111334
_020E74CC: .4byte _0211133C
_020E74D0: .4byte _02111344
_020E74D4: .4byte _02111348
_020E74D8: .4byte 0x66666667
	arm_func_end FUN_020E6D78

	arm_func_start FUN_020E74DC
FUN_020E74DC: @ 0x020E74DC
	push {r0, r1, r2, r3}
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x22c
	mov r3, #0x20
	mov fp, r2
	strb r3, [sp, #0x19]
	ldrsb r2, [fp]
	mov sb, r0
	mov r8, r1
	cmp r2, #0
	mov sl, #0
	beq _020E7CE4
_020E750C:
	mov r0, fp
	mov r1, #0x25
	bl FUN_020E987C
	str r0, [sp, #0xc]
	cmp r0, #0
	bne _020E7560
	mov r0, fp
	bl FUN_020E9580
	movs r2, r0
	add sl, sl, r2
	beq _020E7CE4
	mov r0, r8
	mov r1, fp
	blx sb
	cmp r0, #0
	bne _020E7CE4
	add sp, sp, #0x22c
	mvn r0, #0
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_020E7560:
	subs r2, r0, fp
	add sl, sl, r2
	beq _020E7590
	mov r0, r8
	mov r1, fp
	blx sb
	cmp r0, #0
	addeq sp, sp, #0x22c
	mvneq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	addeq sp, sp, #0x10
	bxeq lr
_020E7590:
	ldr r0, [sp, #0xc]
	add r1, sp, #0x25c
	add r2, sp, #0x1c
	bl FUN_020E5CA0
	ldrb r1, [sp, #0x21]
	mov fp, r0
	cmp r1, #0x61
	bgt _020E75FC
	bge _020E7960
	cmp r1, #0x47
	bgt _020E75F0
	subs r0, r1, #0x41
	addpl pc, pc, r0, lsl #2
	b _020E75E4
_020E75C8: @ jump table
	b _020E7960 @ case 0
	b _020E7B48 @ case 1
	b _020E7B48 @ case 2
	b _020E7B48 @ case 3
	b _020E78F8 @ case 4
	b _020E78F8 @ case 5
	b _020E78F8 @ case 6
_020E75E4:
	cmp r1, #0x25
	beq _020E7B34
	b _020E7B48
_020E75F0:
	cmp r1, #0x58
	beq _020E77BC
	b _020E7B48
_020E75FC:
	cmp r1, #0x75
	bgt _020E7664
	subs r0, r1, #0x64
	addpl pc, pc, r0, lsl #2
	b _020E7658
_020E7610: @ jump table
	b _020E767C @ case 0
	b _020E78F8 @ case 1
	b _020E78F8 @ case 2
	b _020E78F8 @ case 3
	b _020E7B48 @ case 4
	b _020E767C @ case 5
	b _020E7B48 @ case 6
	b _020E7B48 @ case 7
	b _020E7B48 @ case 8
	b _020E7B48 @ case 9
	b _020E7A88 @ case 10
	b _020E77BC @ case 11
	b _020E7B48 @ case 12
	b _020E7B48 @ case 13
	b _020E7B48 @ case 14
	b _020E79C8 @ case 15
	b _020E7B48 @ case 16
	b _020E77BC @ case 17
_020E7658:
	cmp r1, #0x63
	beq _020E7B14
	b _020E7B48
_020E7664:
	cmp r1, #0x78
	bgt _020E7674
	beq _020E77BC
	b _020E7B48
_020E7674:
	cmp r1, #0xff
	b _020E7B48
_020E767C:
	ldrb r0, [sp, #0x20]
	cmp r0, #3
	bne _020E769C
	ldr r1, [sp, #0x25c]
	add r1, r1, #4
	str r1, [sp, #0x25c]
	ldr r5, [r1, #-4]
	b _020E7734
_020E769C:
	cmp r0, #4
	bne _020E76C4
	ldr r1, [sp, #0x25c]
	add r2, r1, #8
	str r2, [sp, #0x25c]
	ldr r1, [r2, #-8]
	str r1, [sp, #0x10]
	ldr r1, [r2, #-4]
	str r1, [sp, #0x14]
	b _020E7734
_020E76C4:
	cmp r0, #6
	bne _020E76EC
	ldr r1, [sp, #0x25c]
	add r2, r1, #8
	str r2, [sp, #0x25c]
	ldr r1, [r2, #-8]
	str r1, [sp, #0x10]
	ldr r1, [r2, #-4]
	str r1, [sp, #0x14]
	b _020E7734
_020E76EC:
	cmp r0, #7
	bne _020E7708
	ldr r1, [sp, #0x25c]
	add r1, r1, #4
	str r1, [sp, #0x25c]
	ldr r5, [r1, #-4]
	b _020E7734
_020E7708:
	cmp r0, #8
	bne _020E7724
	ldr r1, [sp, #0x25c]
	add r1, r1, #4
	str r1, [sp, #0x25c]
	ldr r5, [r1, #-4]
	b _020E7734
_020E7724:
	ldr r1, [sp, #0x25c]
	add r1, r1, #4
	str r1, [sp, #0x25c]
	ldr r5, [r1, #-4]
_020E7734:
	cmp r0, #2
	lsleq r1, r5, #0x10
	asreq r5, r1, #0x10
	cmp r0, #1
	lsleq r1, r5, #0x18
	asreq r5, r1, #0x18
	cmp r0, #4
	cmpne r0, #6
	add r0, sp, #0x1c
	bne _020E7788
	sub r4, sp, #4
	ldm r0, {r0, r1, r2, r3}
	stm r4, {r0, r1, r2, r3}
	ldr r3, [r4]
	ldr r0, [sp, #0x10]
	ldr r1, [sp, #0x14]
	add r2, sp, #0x22c
	bl FUN_020E647C
	movs r7, r0
	beq _020E7B48
	b _020E77AC
_020E7788:
	sub r4, sp, #8
	ldm r0, {r0, r1, r2, r3}
	stm r4, {r0, r1, r2, r3}
	add r1, sp, #0x22c
	mov r0, r5
	ldm r4, {r2, r3}
	bl FUN_020E6230
	movs r7, r0
	beq _020E7B48
_020E77AC:
	add r0, sp, #0x200
	add r0, r0, #0x2b
	sub r6, r0, r7
	b _020E7B94
_020E77BC:
	ldrb r0, [sp, #0x20]
	cmp r0, #3
	bne _020E77DC
	ldr r1, [sp, #0x25c]
	add r1, r1, #4
	str r1, [sp, #0x25c]
	ldr r5, [r1, #-4]
	b _020E7874
_020E77DC:
	cmp r0, #4
	bne _020E7804
	ldr r1, [sp, #0x25c]
	add r2, r1, #8
	str r2, [sp, #0x25c]
	ldr r1, [r2, #-8]
	str r1, [sp, #0x10]
	ldr r1, [r2, #-4]
	str r1, [sp, #0x14]
	b _020E7874
_020E7804:
	cmp r0, #6
	bne _020E782C
	ldr r1, [sp, #0x25c]
	add r2, r1, #8
	str r2, [sp, #0x25c]
	ldr r1, [r2, #-8]
	str r1, [sp, #0x10]
	ldr r1, [r2, #-4]
	str r1, [sp, #0x14]
	b _020E7874
_020E782C:
	cmp r0, #7
	bne _020E7848
	ldr r1, [sp, #0x25c]
	add r1, r1, #4
	str r1, [sp, #0x25c]
	ldr r5, [r1, #-4]
	b _020E7874
_020E7848:
	cmp r0, #8
	bne _020E7864
	ldr r1, [sp, #0x25c]
	add r1, r1, #4
	str r1, [sp, #0x25c]
	ldr r5, [r1, #-4]
	b _020E7874
_020E7864:
	ldr r1, [sp, #0x25c]
	add r1, r1, #4
	str r1, [sp, #0x25c]
	ldr r5, [r1, #-4]
_020E7874:
	cmp r0, #2
	lsleq r1, r5, #0x10
	lsreq r5, r1, #0x10
	cmp r0, #1
	andeq r5, r5, #0xff
	cmp r0, #4
	cmpne r0, #6
	add r0, sp, #0x1c
	bne _020E78C4
	sub r4, sp, #4
	ldm r0, {r0, r1, r2, r3}
	stm r4, {r0, r1, r2, r3}
	ldr r3, [r4]
	ldr r0, [sp, #0x10]
	ldr r1, [sp, #0x14]
	add r2, sp, #0x22c
	bl FUN_020E647C
	movs r7, r0
	beq _020E7B48
	b _020E78E8
_020E78C4:
	sub r4, sp, #8
	ldm r0, {r0, r1, r2, r3}
	stm r4, {r0, r1, r2, r3}
	add r1, sp, #0x22c
	mov r0, r5
	ldm r4, {r2, r3}
	bl FUN_020E6230
	movs r7, r0
	beq _020E7B48
_020E78E8:
	add r0, sp, #0x200
	add r0, r0, #0x2b
	sub r6, r0, r7
	b _020E7B94
_020E78F8:
	ldrb r0, [sp, #0x20]
	cmp r0, #9
	ldrne r0, [sp, #0x25c]
	addne r0, r0, #8
	strne r0, [sp, #0x25c]
	bne _020E791C
	ldr r0, [sp, #0x25c]
	add r0, r0, #8
	str r0, [sp, #0x25c]
_020E791C:
	ldr r7, [r0, #-8]
	ldr r6, [r0, #-4]
	add r0, sp, #0x1c
	sub r4, sp, #4
	ldm r0, {r0, r1, r2, r3}
	stm r4, {r0, r1, r2, r3}
	ldr r3, [r4]
	mov r0, r7
	mov r1, r6
	add r2, sp, #0x22c
	bl FUN_020E6D78
	movs r7, r0
	beq _020E7B48
	add r0, sp, #0x200
	add r0, r0, #0x2b
	sub r6, r0, r7
	b _020E7B94
_020E7960:
	ldrb r0, [sp, #0x20]
	cmp r0, #9
	ldrne r0, [sp, #0x25c]
	addne r0, r0, #8
	strne r0, [sp, #0x25c]
	bne _020E7984
	ldr r0, [sp, #0x25c]
	add r0, r0, #8
	str r0, [sp, #0x25c]
_020E7984:
	ldr r7, [r0, #-8]
	ldr r6, [r0, #-4]
	add r0, sp, #0x1c
	sub r4, sp, #4
	ldm r0, {r0, r1, r2, r3}
	stm r4, {r0, r1, r2, r3}
	ldr r3, [r4]
	mov r0, r7
	mov r1, r6
	add r2, sp, #0x22c
	bl FUN_020E6778
	movs r7, r0
	beq _020E7B48
	add r0, sp, #0x200
	add r0, r0, #0x2b
	sub r6, r0, r7
	b _020E7B94
_020E79C8:
	ldrb r0, [sp, #0x20]
	cmp r0, #5
	bne _020E7A08
	ldr r0, [sp, #0x25c]
	mov r2, #0x200
	add r0, r0, #4
	str r0, [sp, #0x25c]
	ldr r1, [r0, #-4]
	add r0, sp, #0x2c
	cmp r1, #0
	ldreq r1, _020E7CF8 @ =_0211134C
	bl FUN_020E5A60
	cmp r0, #0
	blt _020E7B48
	add r7, sp, #0x2c
	b _020E7A18
_020E7A08:
	ldr r0, [sp, #0x25c]
	add r0, r0, #4
	str r0, [sp, #0x25c]
	ldr r7, [r0, #-4]
_020E7A18:
	ldrb r0, [sp, #0x1f]
	cmp r7, #0
	ldreq r7, _020E7CFC @ =_02111350
	cmp r0, #0
	beq _020E7A4C
	ldrb r0, [sp, #0x1e]
	ldrb r6, [r7], #1
	cmp r0, #0
	beq _020E7B94
	ldr r0, [sp, #0x28]
	cmp r6, r0
	movgt r6, r0
	b _020E7B94
_020E7A4C:
	ldrb r0, [sp, #0x1e]
	cmp r0, #0
	beq _020E7A78
	ldr r6, [sp, #0x28]
	mov r0, r7
	mov r2, r6
	mov r1, #0
	bl FUN_020E5B58
	cmp r0, #0
	subne r6, r0, r7
	b _020E7B94
_020E7A78:
	mov r0, r7
	bl FUN_020E9580
	mov r6, r0
	b _020E7B94
_020E7A88:
	ldr r1, [sp, #0x25c]
	ldrb r0, [sp, #0x20]
	add r1, r1, #4
	str r1, [sp, #0x25c]
	ldr r1, [r1, #-4]
	cmp r0, #8
	addls pc, pc, r0, lsl #2
	b _020E7CD8
_020E7AA8: @ jump table
	b _020E7ACC @ case 0
	b _020E7CD8 @ case 1
	b _020E7AD4 @ case 2
	b _020E7ADC @ case 3
	b _020E7B04 @ case 4
	b _020E7CD8 @ case 5
	b _020E7AE4 @ case 6
	b _020E7AF4 @ case 7
	b _020E7AFC @ case 8
_020E7ACC:
	str sl, [r1]
	b _020E7CD8
_020E7AD4:
	strh sl, [r1]
	b _020E7CD8
_020E7ADC:
	str sl, [r1]
	b _020E7CD8
_020E7AE4:
	str sl, [r1]
	asr r0, sl, #0x1f
	str r0, [r1, #4]
	b _020E7CD8
_020E7AF4:
	str sl, [r1]
	b _020E7CD8
_020E7AFC:
	str sl, [r1]
	b _020E7CD8
_020E7B04:
	str sl, [r1]
	asr r0, sl, #0x1f
	str r0, [r1, #4]
	b _020E7CD8
_020E7B14:
	ldr r0, [sp, #0x25c]
	add r7, sp, #0x2c
	add r0, r0, #4
	str r0, [sp, #0x25c]
	ldr r0, [r0, #-4]
	mov r6, #1
	strb r0, [sp, #0x2c]
	b _020E7B94
_020E7B34:
	mov r0, #0x25
	strb r0, [sp, #0x2c]
	add r7, sp, #0x2c
	mov r6, #1
	b _020E7B94
_020E7B48:
	ldr r0, [sp, #0xc]
	bl FUN_020E9580
	movs r4, r0
	beq _020E7B80
	ldr r1, [sp, #0xc]
	mov r0, r8
	mov r2, r4
	blx sb
	cmp r0, #0
	addeq sp, sp, #0x22c
	mvneq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	addeq sp, sp, #0x10
	bxeq lr
_020E7B80:
	add sp, sp, #0x22c
	add r0, sl, r4
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_020E7B94:
	ldrb r0, [sp, #0x1c]
	mov r4, r6
	cmp r0, #0
	beq _020E7C48
	cmp r0, #2
	moveq r0, #0x30
	movne r0, #0x20
	strb r0, [sp, #0x19]
	ldrsb r0, [r7]
	cmp r0, #0x2b
	cmpne r0, #0x2d
	cmpne r0, #0x20
	bne _020E7C04
	ldrsb r0, [sp, #0x19]
	cmp r0, #0x30
	bne _020E7C04
	mov r0, r8
	mov r1, r7
	mov r2, #1
	blx sb
	cmp r0, #0
	addeq sp, sp, #0x22c
	mvneq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	addeq sp, sp, #0x10
	bxeq lr
	add r7, r7, #1
	sub r6, r6, #1
_020E7C04:
	ldr r0, [sp, #0x24]
	cmp r4, r0
	bge _020E7C48
_020E7C10:
	mov r0, r8
	add r1, sp, #0x19
	mov r2, #1
	blx sb
	cmp r0, #0
	addeq sp, sp, #0x22c
	mvneq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	addeq sp, sp, #0x10
	bxeq lr
	ldr r0, [sp, #0x24]
	add r4, r4, #1
	cmp r4, r0
	blt _020E7C10
_020E7C48:
	cmp r6, #0
	beq _020E7C78
	mov r0, r8
	mov r1, r7
	mov r2, r6
	blx sb
	cmp r0, #0
	addeq sp, sp, #0x22c
	mvneq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	addeq sp, sp, #0x10
	bxeq lr
_020E7C78:
	ldrb r0, [sp, #0x1c]
	cmp r0, #0
	bne _020E7CD4
	ldr r0, [sp, #0x24]
	cmp r4, r0
	bge _020E7CD4
	mov r6, #0x20
	add r7, sp, #0x18
_020E7C98:
	mov r0, r8
	mov r1, r7
	mov r2, #1
	strb r6, [sp, #0x18]
	blx sb
	cmp r0, #0
	addeq sp, sp, #0x22c
	mvneq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	addeq sp, sp, #0x10
	bxeq lr
	ldr r0, [sp, #0x24]
	add r4, r4, #1
	cmp r4, r0
	blt _020E7C98
_020E7CD4:
	add sl, sl, r4
_020E7CD8:
	ldrsb r0, [fp]
	cmp r0, #0
	bne _020E750C
_020E7CE4:
	mov r0, sl
	add sp, sp, #0x22c
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
	.align 2, 0
_020E7CF8: .4byte _0211134C
_020E7CFC: .4byte _02111350
	arm_func_end FUN_020E74DC

	arm_func_start FUN_020E7D00
FUN_020E7D00: @ 0x020E7D00
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r0, r1
	mov r3, r5
	mov r1, #1
	mov r4, r2
	bl FUN_020E5078
	cmp r4, r0
	movne r5, #0
	mov r0, r5
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020E7D00

	arm_func_start FUN_020E7D2C
FUN_020E7D2C: @ 0x020E7D2C
	push {r3, r4, r5, lr}
	mov r4, r0
	ldr r3, [r4, #8]
	mov r5, r2
	ldr r2, [r4, #4]
	add r0, r3, r5
	cmp r0, r2
	ldr r0, [r4]
	subhi r5, r2, r3
	mov r2, r5
	add r0, r0, r3
	bl FUN_020E5AD8
	ldr r1, [r4, #8]
	mov r0, #1
	add r1, r1, r5
	str r1, [r4, #8]
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020E7D2C

	arm_func_start FUN_020E7D70
FUN_020E7D70: @ 0x020E7D70
	push {r0, r1, r2, r3}
	push {r4, lr}
	ldr r0, _020E7E70 @ =_02111018
	mvn r1, #0
	bl FUN_020EB840
	cmp r0, #0
	mvnge r0, #0
	popge {r4, lr}
	addge sp, sp, #0x10
	bxge lr
	ldr r0, _020E7E74 @ =0x021E5530
	bl FUN_020D2734
	cmp r0, #0
	bne _020E7DCC
	ldr r0, _020E7E78 @ =0x021E16A0
	ldr r1, _020E7E7C @ =0x021E54A0
	ldr r2, [r0, #4]
	ldr r0, _020E7E80 @ =0x021E54C4
	ldr r3, [r2, #0x6c]
	mov r2, #1
	str r3, [r1, #0xc]
	str r2, [r0, #0xc]
	b _020E7E24
_020E7DCC:
	ldr r0, _020E7E78 @ =0x021E16A0
	ldr r1, _020E7E7C @ =0x021E54A0
	ldr r0, [r0, #4]
	ldr r1, [r1, #0xc]
	ldr r0, [r0, #0x6c]
	cmp r1, r0
	bne _020E7DFC
	ldr r0, _020E7E80 @ =0x021E54C4
	ldr r1, [r0, #0xc]
	add r1, r1, #1
	str r1, [r0, #0xc]
	b _020E7E24
_020E7DFC:
	ldr r0, _020E7E74 @ =0x021E5530
	bl FUN_020D2618
	ldr r0, _020E7E78 @ =0x021E16A0
	ldr r1, _020E7E7C @ =0x021E54A0
	ldr r2, [r0, #4]
	ldr r0, _020E7E80 @ =0x021E54C4
	ldr r3, [r2, #0x6c]
	mov r2, #1
	str r3, [r1, #0xc]
	str r2, [r0, #0xc]
_020E7E24:
	add r0, sp, #8
	bic r3, r0, #3
	ldr r2, [sp, #8]
	ldr r0, _020E7E84 @ =FUN_020E7D00
	ldr r1, _020E7E70 @ =_02111018
	add r3, r3, #4
	bl FUN_020E74DC
	ldr r1, _020E7E80 @ =0x021E54C4
	mov r4, r0
	ldr r0, [r1, #0xc]
	subs r0, r0, #1
	str r0, [r1, #0xc]
	bne _020E7E60
	ldr r0, _020E7E74 @ =0x021E5530
	bl FUN_020D269C
_020E7E60:
	mov r0, r4
	pop {r4, lr}
	add sp, sp, #0x10
	bx lr
	.align 2, 0
_020E7E70: .4byte _02111018
_020E7E74: .4byte 0x021E5530
_020E7E78: .4byte 0x021E16A0
_020E7E7C: .4byte 0x021E54A0
_020E7E80: .4byte 0x021E54C4
_020E7E84: .4byte FUN_020E7D00
	arm_func_end FUN_020E7D70

	arm_func_start FUN_020E7E88
FUN_020E7E88: @ 0x020E7E88
	push {r4, r5, lr}
	sub sp, sp, #0xc
	mov r5, r0
	mov r4, r1
	mov ip, #0
	ldr r0, _020E7EEC @ =FUN_020E7D2C
	add r1, sp, #0
	str r5, [sp]
	str r4, [sp, #4]
	str ip, [sp, #8]
	bl FUN_020E74DC
	cmp r5, #0
	addeq sp, sp, #0xc
	popeq {r4, r5, pc}
	cmp r0, r4
	movlo r1, #0
	addlo sp, sp, #0xc
	strblo r1, [r5, r0]
	poplo {r4, r5, pc}
	cmp r4, #0
	addne r1, r5, r4
	movne r2, #0
	strbne r2, [r1, #-1]
	add sp, sp, #0xc
	pop {r4, r5, pc}
	.align 2, 0
_020E7EEC: .4byte FUN_020E7D2C
	arm_func_end FUN_020E7E88

	arm_func_start FUN_020E7EF0
FUN_020E7EF0: @ 0x020E7EF0
	ldr ip, _020E7F04 @ =FUN_020E7E88
	mov r3, r2
	mov r2, r1
	mvn r1, #0
	bx ip
	.align 2, 0
_020E7F04: .4byte FUN_020E7E88
	arm_func_end FUN_020E7EF0

	arm_func_start FUN_020E7F08
FUN_020E7F08: @ 0x020E7F08
	push {r0, r1, r2, r3}
	push {r3, lr}
	add r3, sp, #0x10
	bic r3, r3, #3
	ldr r2, [sp, #0x10]
	add r3, r3, #4
	bl FUN_020E7E88
	pop {r3, lr}
	add sp, sp, #0x10
	bx lr
	arm_func_end FUN_020E7F08

	arm_func_start FUN_020E7F30
FUN_020E7F30: @ 0x020E7F30
	push {r0, r1, r2, r3}
	push {r3, lr}
	add r1, sp, #0xc
	bic r1, r1, #3
	add r3, r1, #4
	ldr r2, [sp, #0xc]
	mvn r1, #0
	bl FUN_020E7E88
	pop {r3, lr}
	add sp, sp, #0x10
	bx lr
	arm_func_end FUN_020E7F30

	arm_func_start FUN_020E7F5C
FUN_020E7F5C: @ 0x020E7F5C
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x10
	mov sb, r1
	cmp sb, #2
	mov sl, r0
	mov r8, r2
	mov r7, r3
	addlo sp, sp, #0x10
	poplo {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	lsr r0, sb, #1
	add fp, r0, #1
	sub r0, fp, #1
	mla r0, r8, r0, sl
	sub r2, sb, #1
	str r0, [sp, #0xc]
	mla r0, r8, r2, sl
	str r0, [sp, #8]
	mul r0, fp, r8
	mvn r1, #0
	str r0, [sp, #4]
	mul r0, r8, r1
	str r0, [sp]
_020E7FB4:
	cmp fp, #1
	bls _020E7FDC
	ldr r0, [sp, #4]
	sub fp, fp, #1
	sub r0, r0, r8
	str r0, [sp, #4]
	ldr r0, [sp, #0xc]
	sub r0, r0, r8
	str r0, [sp, #0xc]
	b _020E8024
_020E7FDC:
	mov r2, r8
	ldr r4, [sp, #8]
	ldr r3, [sp, #0xc]
	cmp r8, #0
	beq _020E8008
_020E7FF0:
	ldrsb r0, [r4]
	ldrsb r1, [r3]
	subs r2, r2, #1
	strb r0, [r3], #1
	strb r1, [r4], #1
	bne _020E7FF0
_020E8008:
	sub sb, sb, #1
	cmp sb, #1
	addeq sp, sp, #0x10
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, [sp, #8]
	sub r0, r0, r8
	str r0, [sp, #8]
_020E8024:
	ldr r1, [sp, #4]
	ldr r0, [sp]
	mov r4, fp
	add r0, r1, r0
	cmp sb, fp, lsl #1
	add r5, sl, r0
	blo _020E7FB4
_020E8040:
	lsl r4, r4, #1
	sub r0, r4, #1
	mov r6, r5
	mla r5, r8, r0, sl
	cmp sb, r4
	bls _020E8070
	mov r0, r5
	add r1, r5, r8
	blx r7
	cmp r0, #0
	addlt r4, r4, #1
	addlt r5, r5, r8
_020E8070:
	mov r0, r6
	mov r1, r5
	blx r7
	cmp r0, #0
	bge _020E7FB4
	mov r2, r8
	mov r3, r5
	cmp r8, #0
	beq _020E80AC
_020E8094:
	ldrsb r1, [r6]
	ldrsb r0, [r3]
	subs r2, r2, #1
	strb r0, [r6], #1
	strb r1, [r3], #1
	bne _020E8094
_020E80AC:
	cmp sb, r4, lsl #1
	bhs _020E8040
	b _020E7FB4
	arm_func_end FUN_020E7F5C

	arm_func_start FUN_020E80B8
FUN_020E80B8: @ 0x020E80B8
	add sp, sp, #0x10
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_020E80B8

	arm_func_start FUN_020E80C0
FUN_020E80C0: @ 0x020E80C0
	ldr r2, _020E80E8 @ =_02111354
	ldr r0, _020E80EC @ =0x41C64E6D
	ldr r3, [r2]
	ldr r1, _020E80F0 @ =0x00007FFF
	mul r0, r3, r0
	add r0, r0, #0x39
	add r0, r0, #0x3000
	str r0, [r2]
	and r0, r1, r0, lsr #16
	bx lr
	.align 2, 0
_020E80E8: .4byte _02111354
_020E80EC: .4byte 0x41C64E6D
_020E80F0: .4byte 0x00007FFF
	arm_func_end FUN_020E80C0

	arm_func_start FUN_020E80F4
FUN_020E80F4: @ 0x020E80F4
	ldr r1, _020E8100 @ =_02111354
	str r0, [r1]
	bx lr
	.align 2, 0
_020E8100: .4byte _02111354
	arm_func_end FUN_020E80F4

	arm_func_start FUN_020E8104
FUN_020E8104: @ 0x020E8104
	push {r3, r4, r5, r6, r7, lr}
	sub sp, sp, #0x28
	ldr r6, _020E85F4 @ =0x0210E604
	add r5, sp, #0
	mov r7, r0
	mov lr, r1
	mov r4, r5
	ldm r6!, {r0, r1, r2, r3}
	stm r5!, {r0, r1, r2, r3}
	ldm r6!, {r0, r1, r2, r3}
	stm r5!, {r0, r1, r2, r3}
	ldm r6, {r0, r1}
	stm r5, {r0, r1}
	ldrsb r0, [r7, #1]
	add ip, r7, #1
	cmp r0, #0x25
	bne _020E8170
	strb r0, [sp, #3]
	ldm r4!, {r0, r1, r2, r3}
	stm lr!, {r0, r1, r2, r3}
	ldm r4!, {r0, r1, r2, r3}
	stm lr!, {r0, r1, r2, r3}
	ldm r4, {r0, r1}
	stm lr, {r0, r1}
	add sp, sp, #0x28
	add r0, ip, #1
	pop {r3, r4, r5, r6, r7, pc}
_020E8170:
	cmp r0, #0x2a
	moveq r0, #1
	strbeq r0, [sp]
	ldrsbeq r0, [ip, #1]!
	cmp r0, #0
	blt _020E8190
	cmp r0, #0x80
	blt _020E8198
_020E8190:
	mov r1, #0
	b _020E81A8
_020E8198:
	ldr r1, _020E85F8 @ =0x0210E504
	lsl r2, r0, #1
	ldrh r1, [r1, r2]
	and r1, r1, #8
_020E81A8:
	cmp r1, #0
	beq _020E8248
	mov r1, #0
	ldr r3, _020E85F8 @ =0x0210E504
	str r1, [sp, #4]
	mov r4, r1
	mov r1, #0xa
_020E81C4:
	ldr r2, [sp, #4]
	sub r0, r0, #0x30
	mla r0, r2, r1, r0
	str r0, [sp, #4]
	ldrsb r0, [ip, #1]!
	cmp r0, #0
	blt _020E81E8
	cmp r0, #0x80
	blt _020E81F0
_020E81E8:
	mov r2, r4
	b _020E81FC
_020E81F0:
	lsl r2, r0, #1
	ldrh r2, [r3, r2]
	and r2, r2, #8
_020E81FC:
	cmp r2, #0
	bne _020E81C4
	ldr r1, [sp, #4]
	cmp r1, #0
	bne _020E8240
	mov r0, #0xff
	add r4, sp, #0
	strb r0, [sp, #3]
	ldm r4!, {r0, r1, r2, r3}
	stm lr!, {r0, r1, r2, r3}
	ldm r4!, {r0, r1, r2, r3}
	stm lr!, {r0, r1, r2, r3}
	ldm r4, {r0, r1}
	stm lr, {r0, r1}
	add sp, sp, #0x28
	add r0, ip, #1
	pop {r3, r4, r5, r6, r7, pc}
_020E8240:
	mov r1, #1
	strb r1, [sp, #1]
_020E8248:
	cmp r0, #0x6c
	mov r1, #1
	bgt _020E8280
	cmp r0, #0x68
	blt _020E8274
	beq _020E829C
	cmp r0, #0x6a
	beq _020E82E8
	cmp r0, #0x6c
	beq _020E82B8
	b _020E830C
_020E8274:
	cmp r0, #0x4c
	beq _020E82DC
	b _020E830C
_020E8280:
	cmp r0, #0x74
	bgt _020E8290
	beq _020E8300
	b _020E830C
_020E8290:
	cmp r0, #0x7a
	beq _020E82F4
	b _020E830C
_020E829C:
	mov r2, #2
	strb r2, [sp, #2]
	ldrsb r2, [ip, #1]
	cmp r2, #0x68
	strbeq r1, [sp, #2]
	ldrsbeq r0, [ip, #1]!
	b _020E8310
_020E82B8:
	mov r2, #3
	strb r2, [sp, #2]
	ldrsb r2, [ip, #1]
	cmp r2, #0x6c
	bne _020E8310
	mov r0, #7
	strb r0, [sp, #2]
	ldrsb r0, [ip, #1]!
	b _020E8310
_020E82DC:
	mov r2, #9
	strb r2, [sp, #2]
	b _020E8310
_020E82E8:
	mov r2, #4
	strb r2, [sp, #2]
	b _020E8310
_020E82F4:
	mov r2, #5
	strb r2, [sp, #2]
	b _020E8310
_020E8300:
	mov r2, #6
	strb r2, [sp, #2]
	b _020E8310
_020E830C:
	mov r1, #0
_020E8310:
	cmp r1, #0
	ldrsbne r0, [ip, #1]!
	strb r0, [sp, #3]
	cmp r0, #0x5b
	bgt _020E8364
	bge _020E84B4
	cmp r0, #0x47
	bgt _020E8358
	subs r1, r0, #0x41
	addpl pc, pc, r1, lsl #2
	b _020E85C4
_020E833C: @ jump table
	b _020E83F0 @ case 0
	b _020E85C4 @ case 1
	b _020E85C4 @ case 2
	b _020E85C4 @ case 3
	b _020E83F0 @ case 4
	b _020E83F0 @ case 5
	b _020E83F0 @ case 6
_020E8358:
	cmp r0, #0x58
	beq _020E83DC
	b _020E85C4
_020E8364:
	cmp r0, #0x61
	bgt _020E8374
	beq _020E83F0
	b _020E85C4
_020E8374:
	sub r0, r0, #0x63
	cmp r0, #0x15
	addls pc, pc, r0, lsl #2
	b _020E85C4
_020E8384: @ jump table
	b _020E8440 @ case 0
	b _020E83DC @ case 1
	b _020E83F0 @ case 2
	b _020E83F0 @ case 3
	b _020E83F0 @ case 4
	b _020E85C4 @ case 5
	b _020E83DC @ case 6
	b _020E85C4 @ case 7
	b _020E85C4 @ case 8
	b _020E85C4 @ case 9
	b _020E85C4 @ case 10
	b _020E85CC @ case 11
	b _020E83DC @ case 12
	b _020E842C @ case 13
	b _020E85C4 @ case 14
	b _020E85C4 @ case 15
	b _020E8464 @ case 16
	b _020E85C4 @ case 17
	b _020E83DC @ case 18
	b _020E85C4 @ case 19
	b _020E85C4 @ case 20
	b _020E83DC @ case 21
_020E83DC:
	ldrb r0, [sp, #2]
	cmp r0, #9
	moveq r0, #0xff
	strbeq r0, [sp, #3]
	b _020E85CC
_020E83F0:
	ldrb r1, [sp, #2]
	cmp r1, #1
	cmpne r1, #2
	beq _020E8410
	add r0, r1, #0xfc
	and r0, r0, #0xff
	cmp r0, #3
	bhi _020E841C
_020E8410:
	mov r0, #0xff
	strb r0, [sp, #3]
	b _020E85CC
_020E841C:
	cmp r1, #3
	moveq r0, #8
	strbeq r0, [sp, #2]
	b _020E85CC
_020E842C:
	mov r1, #3
	mov r0, #0x78
	strb r1, [sp, #2]
	strb r0, [sp, #3]
	b _020E85CC
_020E8440:
	ldrb r0, [sp, #2]
	cmp r0, #3
	moveq r0, #0xa
	strbeq r0, [sp, #2]
	beq _020E85CC
	cmp r0, #0
	movne r0, #0xff
	strbne r0, [sp, #3]
	b _020E85CC
_020E8464:
	ldrb r0, [sp, #2]
	cmp r0, #3
	moveq r0, #0xa
	strbeq r0, [sp, #2]
	beq _020E8484
	cmp r0, #0
	movne r0, #0xff
	strbne r0, [sp, #3]
_020E8484:
	add r2, sp, #8
	mov r1, #0x20
	mov r0, #0xff
_020E8490:
	sub r1, r1, #1
	cmp r1, #0
	strb r0, [r2], #1
	bgt _020E8490
	mov r1, #0xc1
	mov r0, #0xfe
	strb r1, [sp, #9]
	strb r0, [sp, #0xc]
	b _020E85CC
_020E84B4:
	ldrb r0, [sp, #2]
	cmp r0, #3
	moveq r0, #0xa
	strbeq r0, [sp, #2]
	beq _020E84D4
	cmp r0, #0
	movne r0, #0xff
	strbne r0, [sp, #3]
_020E84D4:
	ldrsb r2, [ip, #1]!
	mov r1, #0
	cmp r2, #0x5e
	ldrsbeq r2, [ip, #1]!
	moveq r1, #1
	cmp r2, #0x5d
	bne _020E857C
	ldrb r0, [sp, #0x13]
	orr r0, r0, #0x20
	strb r0, [sp, #0x13]
	ldrsb r2, [ip, #1]!
	b _020E857C
_020E8504:
	add r0, sp, #0
	and r3, r2, #0xff
	add r6, r0, r3, asr #3
	ldrb r5, [r6, #8]
	and r3, r2, #7
	mov r4, #1
	orr r3, r5, r4, lsl r3
	strb r3, [r6, #8]
	ldrsb r3, [ip, #1]
	cmp r3, #0x2d
	bne _020E8578
	ldrsb r7, [ip, #2]
	cmp r7, #0
	cmpne r7, #0x5d
	beq _020E8578
	add r2, r2, #1
	cmp r2, r7
	bgt _020E8570
_020E854C:
	and r3, r2, #0xff
	add r6, r0, r3, asr #3
	ldrb r5, [r6, #8]
	and r3, r2, #7
	add r2, r2, #1
	orr r3, r5, r4, lsl r3
	strb r3, [r6, #8]
	cmp r2, r7
	ble _020E854C
_020E8570:
	ldrsb r2, [ip, #3]!
	b _020E857C
_020E8578:
	ldrsb r2, [ip, #1]!
_020E857C:
	cmp r2, #0
	cmpne r2, #0x5d
	bne _020E8504
	cmp r2, #0
	moveq r0, #0xff
	strbeq r0, [sp, #3]
	beq _020E85CC
	cmp r1, #0
	beq _020E85CC
	add r2, sp, #8
	mov r1, #0x20
_020E85A8:
	ldrb r0, [r2]
	sub r1, r1, #1
	cmp r1, #0
	mvn r0, r0
	strb r0, [r2], #1
	bgt _020E85A8
	b _020E85CC
_020E85C4:
	mov r0, #0xff
	strb r0, [sp, #3]
_020E85CC:
	add r4, sp, #0
	ldm r4!, {r0, r1, r2, r3}
	stm lr!, {r0, r1, r2, r3}
	ldm r4!, {r0, r1, r2, r3}
	stm lr!, {r0, r1, r2, r3}
	ldm r4, {r0, r1}
	stm lr, {r0, r1}
	add r0, ip, #1
	add sp, sp, #0x28
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0
_020E85F4: .4byte 0x0210E604
_020E85F8: .4byte 0x0210E504
	arm_func_end FUN_020E8104

	arm_func_start FUN_020E85FC
FUN_020E85FC: @ 0x020E85FC
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x88
	ldrsb r5, [r2]
	str r2, [sp, #0xc]
	mov r2, #0
	mov sb, r0
	mov r0, r2
	str r2, [sp, #0x20]
	mov r8, r1
	str r3, [sp, #0x10]
	str r0, [sp, #0x24]
	cmp r5, #0
	ldr sl, [sp, #0xb0]
	str r0, [sp, #0x30]
	mov r4, r2
	str r0, [sp, #0x44]
	str r0, [sp, #0x40]
	beq _020E9310
_020E8644:
	cmp r5, #0
	mov r0, #1
	blt _020E8658
	cmp r5, #0x80
	movlt r0, #0
_020E8658:
	cmp r0, #0
	movne r0, #0
	bne _020E8674
	lsl r1, r5, #1
	ldr r0, _020E9348 @ =0x0210E504
	ldrh r0, [r0, r1]
	and r0, r0, #0x100
_020E8674:
	cmp r0, #0
	beq _020E8734
	mov r2, #0
	ldr r1, _020E9348 @ =0x0210E504
	mov ip, r2
	mov r3, #1
_020E868C:
	ldr r0, [sp, #0xc]
	ldrsb r5, [r0, #1]!
	str r0, [sp, #0xc]
	mov r0, r3
	cmp r5, #0
	blt _020E86AC
	cmp r5, #0x80
	movlt r0, r2
_020E86AC:
	cmp r0, #0
	movne r0, ip
	lsleq r0, r5, #1
	ldrheq r0, [r1, r0]
	andeq r0, r0, #0x100
	cmp r0, #0
	bne _020E868C
	ldr r0, [sp, #0x30]
	cmp r0, #0
	bne _020E9300
	ldr r5, _020E9348 @ =0x0210E504
	b _020E86E0
_020E86DC:
	add r4, r4, #1
_020E86E0:
	mov r1, #0
	mov r0, r8
	mov r2, r1
	blx sb
	strb r0, [sp, #0x50]
	ldrsb r1, [sp, #0x50]
	cmp r1, #0
	blt _020E8708
	cmp r1, #0x80
	blt _020E8710
_020E8708:
	mov r0, #0
	b _020E871C
_020E8710:
	lsl r0, r1, #1
	ldrh r0, [r5, r0]
	and r0, r0, #0x100
_020E871C:
	cmp r0, #0
	bne _020E86DC
	mov r0, r8
	mov r2, #1
	blx sb
	b _020E9300
_020E8734:
	cmp r5, #0x25
	beq _020E87AC
	ldr r0, [sp, #0x30]
	cmp r0, #0
	bne _020E87AC
	mov r0, r8
	mov r1, #0
	mov r2, r1
	blx sb
	strb r0, [sp, #0x50]
	and r0, r5, #0xff
	ldrsb r1, [sp, #0x50]
	cmp r0, r1
	beq _020E8798
	mov r0, r8
	mov r2, #1
	blx sb
	cmp sl, #0
	beq _020E9310
	mov r0, #1
	str r0, [sp, #0x30]
	ldr r0, [sp, #0xc]
	add r0, r0, #1
	str r0, [sp, #0xc]
	b _020E9300
_020E8798:
	ldr r0, [sp, #0xc]
	add r4, r4, #1
	add r0, r0, #1
	str r0, [sp, #0xc]
	b _020E9300
_020E87AC:
	ldr r0, [sp, #0xc]
	add r1, sp, #0x60
	bl FUN_020E8104
	str r0, [sp, #0xc]
	ldrb r0, [sp, #0x60]
	cmp r0, #0
	bne _020E87E8
	ldrb r0, [sp, #0x63]
	cmp r0, #0x25
	beq _020E87E8
	ldr r0, [sp, #0x10]
	add r0, r0, #4
	str r0, [sp, #0x10]
	ldr r5, [r0, #-4]
	b _020E87EC
_020E87E8:
	mov r5, #0
_020E87EC:
	ldrb r0, [sp, #0x63]
	cmp r0, #0x6e
	beq _020E882C
	ldr r0, [sp, #0x30]
	cmp r0, #0
	bne _020E882C
	mov r0, r8
	mov r1, #0
	mov r2, #2
	blx sb
	cmp r0, #0
	beq _020E882C
	cmp sl, #0
	beq _020E9310
	mov r0, #1
	str r0, [sp, #0x30]
_020E882C:
	ldrb r1, [sp, #0x63]
	cmp r1, #0x5b
	bgt _020E8884
	bge _020E9058
	cmp r1, #0x47
	bgt _020E8878
	subs r0, r1, #0x41
	addpl pc, pc, r0, lsl #2
	b _020E886C
_020E8850: @ jump table
	b _020E8CD4 @ case 0
	b _020E9310 @ case 1
	b _020E9310 @ case 2
	b _020E9310 @ case 3
	b _020E8CD4 @ case 4
	b _020E8CD4 @ case 5
	b _020E8CD4 @ case 6
_020E886C:
	cmp r1, #0x25
	beq _020E8F50
	b _020E9310
_020E8878:
	cmp r1, #0x58
	beq _020E8B10
	b _020E9310
_020E8884:
	cmp r1, #0x78
	bgt _020E88FC
	subs r0, r1, #0x63
	addpl pc, pc, r0, lsl #2
	b _020E88F0
_020E8898: @ jump table
	b _020E8D98 @ case 0
	b _020E8904 @ case 1
	b _020E8CD4 @ case 2
	b _020E8CD4 @ case 3
	b _020E8CD4 @ case 4
	b _020E9310 @ case 5
	b _020E890C @ case 6
	b _020E9310 @ case 7
	b _020E9310 @ case 8
	b _020E9310 @ case 9
	b _020E9310 @ case 10
	b _020E929C @ case 11
	b _020E8B00 @ case 12
	b _020E9310 @ case 13
	b _020E9310 @ case 14
	b _020E9310 @ case 15
	b _020E8FDC @ case 16
	b _020E9310 @ case 17
	b _020E8B08 @ case 18
	b _020E9310 @ case 19
	b _020E9310 @ case 20
	b _020E8B10 @ case 21
_020E88F0:
	cmp r1, #0x61
	beq _020E8CD4
	b _020E9310
_020E88FC:
	cmp r1, #0xff
	b _020E9310
_020E8904:
	mov r0, #0xa
	b _020E8910
_020E890C:
	mov r0, #0
_020E8910:
	ldr r1, [sp, #0x30]
	cmp r1, #0
	beq _020E8930
	mov r0, #0
	str r0, [sp, #0x1c]
	str r0, [sp, #0x20]
	str r0, [sp, #0x24]
	b _020E8A38
_020E8930:
	ldrb r1, [sp, #0x62]
	add r2, sp, #0x5c
	cmp r1, #7
	cmpne r1, #4
	add r1, sp, #0x58
	bne _020E8974
	str r2, [sp]
	str r1, [sp, #4]
	add r1, sp, #0x54
	str r1, [sp, #8]
	ldr r1, [sp, #0x64]
	mov r2, sb
	mov r3, r8
	bl FUN_020EB260
	str r0, [sp, #0x34]
	str r1, [sp, #0x18]
	b _020E8998
_020E8974:
	str r2, [sp]
	str r1, [sp, #4]
	add r1, sp, #0x54
	str r1, [sp, #8]
	ldr r1, [sp, #0x64]
	mov r2, sb
	mov r3, r8
	bl FUN_020EAE78
	str r0, [sp, #0x3c]
_020E8998:
	ldr r0, [sp, #0x5c]
	cmp r0, #0
	bne _020E89C8
	cmp sl, #0
	beq _020E9310
	mov r0, #1
	str r0, [sp, #0x30]
	mov r0, #0
	str r0, [sp, #0x1c]
	str r0, [sp, #0x20]
	str r0, [sp, #0x24]
	b _020E8A38
_020E89C8:
	add r4, r4, r0
	ldrb r0, [sp, #0x62]
	cmp r0, #7
	cmpne r0, #4
	bne _020E8A18
	ldr r0, [sp, #0x58]
	cmp r0, #0
	beq _020E8A04
	ldr r0, [sp, #0x34]
	rsbs r0, r0, #0
	str r0, [sp, #0x20]
	ldr r0, [sp, #0x18]
	rsc r0, r0, #0
	str r0, [sp, #0x24]
	b _020E8A38
_020E8A04:
	ldr r0, [sp, #0x34]
	str r0, [sp, #0x20]
	ldr r0, [sp, #0x18]
	str r0, [sp, #0x24]
	b _020E8A38
_020E8A18:
	ldr r0, [sp, #0x58]
	cmp r0, #0
	ldreq r0, [sp, #0x3c]
	streq r0, [sp, #0x1c]
	beq _020E8A38
	ldr r0, [sp, #0x3c]
	rsb r0, r0, #0
	str r0, [sp, #0x1c]
_020E8A38:
	cmp r5, #0
	beq _020E8AF0
	ldrb r0, [sp, #0x62]
	cmp r0, #7
	addls pc, pc, r0, lsl #2
	b _020E8ADC
_020E8A50: @ jump table
	b _020E8A70 @ case 0
	b _020E8A7C @ case 1
	b _020E8A88 @ case 2
	b _020E8A94 @ case 3
	b _020E8AA0 @ case 4
	b _020E8AB4 @ case 5
	b _020E8AC0 @ case 6
	b _020E8ACC @ case 7
_020E8A70:
	ldr r0, [sp, #0x1c]
	str r0, [r5]
	b _020E8ADC
_020E8A7C:
	ldr r0, [sp, #0x1c]
	strb r0, [r5]
	b _020E8ADC
_020E8A88:
	ldr r0, [sp, #0x1c]
	strh r0, [r5]
	b _020E8ADC
_020E8A94:
	ldr r0, [sp, #0x1c]
	str r0, [r5]
	b _020E8ADC
_020E8AA0:
	ldr r0, [sp, #0x20]
	str r0, [r5]
	ldr r0, [sp, #0x24]
	str r0, [r5, #4]
	b _020E8ADC
_020E8AB4:
	ldr r0, [sp, #0x1c]
	str r0, [r5]
	b _020E8ADC
_020E8AC0:
	ldr r0, [sp, #0x1c]
	str r0, [r5]
	b _020E8ADC
_020E8ACC:
	ldr r0, [sp, #0x20]
	str r0, [r5]
	ldr r0, [sp, #0x24]
	str r0, [r5, #4]
_020E8ADC:
	ldr r0, [sp, #0x30]
	cmp r0, #0
	ldreq r0, [sp, #0x44]
	addeq r0, r0, #1
	streq r0, [sp, #0x44]
_020E8AF0:
	ldr r0, [sp, #0x40]
	add r0, r0, #1
	str r0, [sp, #0x40]
	b _020E9300
_020E8B00:
	mov r0, #8
	b _020E8B14
_020E8B08:
	mov r0, #0xa
	b _020E8B14
_020E8B10:
	mov r0, #0x10
_020E8B14:
	ldr r1, [sp, #0x30]
	cmp r1, #0
	beq _020E8B34
	mov r0, #0
	str r0, [sp, #0x3c]
	str r0, [sp, #0x34]
	str r0, [sp, #0x18]
	b _020E8C0C
_020E8B34:
	ldrb r1, [sp, #0x62]
	add r2, sp, #0x5c
	cmp r1, #7
	cmpne r1, #4
	add r1, sp, #0x58
	bne _020E8B78
	str r2, [sp]
	str r1, [sp, #4]
	add r1, sp, #0x54
	str r1, [sp, #8]
	ldr r1, [sp, #0x64]
	mov r2, sb
	mov r3, r8
	bl FUN_020EB260
	str r0, [sp, #0x34]
	str r1, [sp, #0x18]
	b _020E8B9C
_020E8B78:
	str r2, [sp]
	str r1, [sp, #4]
	add r1, sp, #0x54
	str r1, [sp, #8]
	ldr r1, [sp, #0x64]
	mov r2, sb
	mov r3, r8
	bl FUN_020EAE78
	str r0, [sp, #0x3c]
_020E8B9C:
	ldr r0, [sp, #0x5c]
	cmp r0, #0
	bne _020E8BCC
	cmp sl, #0
	beq _020E9310
	mov r0, #1
	str r0, [sp, #0x30]
	mov r0, #0
	str r0, [sp, #0x3c]
	str r0, [sp, #0x34]
	str r0, [sp, #0x18]
	b _020E8C0C
_020E8BCC:
	add r4, r4, r0
	ldr r0, [sp, #0x58]
	cmp r0, #0
	beq _020E8C0C
	ldrb r0, [sp, #0x62]
	cmp r0, #7
	ldrne r0, [sp, #0x3c]
	rsbne r0, r0, #0
	strne r0, [sp, #0x3c]
	bne _020E8C0C
	ldr r0, [sp, #0x34]
	rsbs r0, r0, #0
	str r0, [sp, #0x34]
	ldr r0, [sp, #0x18]
	rsc r0, r0, #0
	str r0, [sp, #0x18]
_020E8C0C:
	cmp r5, #0
	beq _020E8CC4
	ldrb r0, [sp, #0x62]
	cmp r0, #7
	addls pc, pc, r0, lsl #2
	b _020E8CB0
_020E8C24: @ jump table
	b _020E8C44 @ case 0
	b _020E8C50 @ case 1
	b _020E8C5C @ case 2
	b _020E8C68 @ case 3
	b _020E8C74 @ case 4
	b _020E8C88 @ case 5
	b _020E8C94 @ case 6
	b _020E8CA0 @ case 7
_020E8C44:
	ldr r0, [sp, #0x3c]
	str r0, [r5]
	b _020E8CB0
_020E8C50:
	ldr r0, [sp, #0x3c]
	strb r0, [r5]
	b _020E8CB0
_020E8C5C:
	ldr r0, [sp, #0x3c]
	strh r0, [r5]
	b _020E8CB0
_020E8C68:
	ldr r0, [sp, #0x3c]
	str r0, [r5]
	b _020E8CB0
_020E8C74:
	ldr r0, [sp, #0x34]
	str r0, [r5]
	ldr r0, [sp, #0x18]
	str r0, [r5, #4]
	b _020E8CB0
_020E8C88:
	ldr r0, [sp, #0x3c]
	str r0, [r5]
	b _020E8CB0
_020E8C94:
	ldr r0, [sp, #0x3c]
	str r0, [r5]
	b _020E8CB0
_020E8CA0:
	ldr r0, [sp, #0x34]
	str r0, [r5]
	ldr r0, [sp, #0x18]
	str r0, [r5, #4]
_020E8CB0:
	ldr r0, [sp, #0x30]
	cmp r0, #0
	ldreq r0, [sp, #0x44]
	addeq r0, r0, #1
	streq r0, [sp, #0x44]
_020E8CC4:
	ldr r0, [sp, #0x40]
	add r0, r0, #1
	str r0, [sp, #0x40]
	b _020E9300
_020E8CD4:
	ldr r0, [sp, #0x30]
	cmp r0, #0
	beq _020E8CF0
	ldr r0, _020E934C @ =_021110EC
	ldr r0, [r0]
	bl FUN_020F2080
	b _020E8D3C
_020E8CF0:
	add r0, sp, #0x54
	str r0, [sp]
	ldr r0, [sp, #0x64]
	mov r1, sb
	mov r2, r8
	add r3, sp, #0x5c
	bl FUN_020E9B3C
	ldr r2, [sp, #0x5c]
	cmp r2, #0
	bne _020E8D38
	cmp sl, #0
	beq _020E9310
	mov r0, #1
	str r0, [sp, #0x30]
	ldr r0, _020E934C @ =_021110EC
	ldr r0, [r0]
	bl FUN_020F2080
	b _020E8D3C
_020E8D38:
	add r4, r4, r2
_020E8D3C:
	cmp r5, #0
	beq _020E8D88
	ldrb r2, [sp, #0x62]
	cmp r2, #0
	beq _020E8D64
	cmp r2, #8
	beq _020E8D70
	cmp r2, #9
	stmeq r5, {r0, r1}
	b _020E8D74
_020E8D64:
	bl FUN_020F09A4
	str r0, [r5]
	b _020E8D74
_020E8D70:
	stm r5, {r0, r1}
_020E8D74:
	ldr r0, [sp, #0x30]
	cmp r0, #0
	ldreq r0, [sp, #0x44]
	addeq r0, r0, #1
	streq r0, [sp, #0x44]
_020E8D88:
	ldr r0, [sp, #0x40]
	add r0, r0, #1
	str r0, [sp, #0x40]
	b _020E9300
_020E8D98:
	ldrb r0, [sp, #0x61]
	cmp r0, #0
	moveq r0, #1
	streq r0, [sp, #0x64]
	cmp r5, #0
	beq _020E8EE0
	cmp sl, #0
	beq _020E8DCC
	ldr r0, [sp, #0x10]
	mov r7, #1
	add r0, r0, #4
	ldr fp, [r0, #-4]
	str r0, [sp, #0x10]
_020E8DCC:
	ldr r0, [sp, #0x30]
	mov r1, #0
	cmp r0, #0
	str r1, [sp, #0x5c]
	beq _020E8DEC
	cmp fp, #0
	strbne r1, [r5]
	b _020E9300
_020E8DEC:
	mvn r0, #0
	str r5, [sp, #0x2c]
	str r0, [sp, #0x48]
	b _020E8E34
_020E8DFC:
	ldrb r0, [sp, #0x62]
	strb r6, [sp, #0x50]
	cmp r0, #0xa
	ldrsbne r0, [sp, #0x50]
	strbne r0, [r5], #1
	bne _020E8E28
	mov r0, r5
	add r1, sp, #0x50
	mov r2, #1
	bl FUN_020E5954
	add r5, r5, #1
_020E8E28:
	ldr r0, [sp, #0x5c]
	add r1, r0, #1
	str r1, [sp, #0x5c]
_020E8E34:
	ldr r0, [sp, #0x64]
	cmp r0, #0
	sub r0, r0, #1
	str r0, [sp, #0x64]
	beq _020E8E84
	cmp sl, #0
	beq _020E8E64
	cmp fp, r1
	movhi r7, #1
	movls r7, #0
	cmp r7, #0
	beq _020E8E84
_020E8E64:
	mov r1, #0
	mov r0, r8
	mov r2, r1
	blx sb
	mov r6, r0
	ldr r0, [sp, #0x48]
	cmp r6, r0
	bne _020E8DFC
_020E8E84:
	strb r6, [sp, #0x50]
	ldr r0, [sp, #0x5c]
	cmp r0, #0
	beq _020E8EA4
	cmp sl, #0
	beq _020E8ECC
	cmp r7, #0
	bne _020E8ECC
_020E8EA4:
	cmp sl, #0
	beq _020E9310
	mov r0, #1
	cmp fp, #0
	str r0, [sp, #0x30]
	beq _020E9300
	ldr r0, [sp, #0x2c]
	mov r1, #0
	strb r1, [r0]
	b _020E9300
_020E8ECC:
	add r4, r4, r0
	ldr r0, [sp, #0x44]
	add r0, r0, #1
	str r0, [sp, #0x44]
	b _020E8F40
_020E8EE0:
	mov r0, #0
	str r0, [sp, #0x5c]
	mvn r5, #0
	b _020E8F00
_020E8EF0:
	strb r6, [sp, #0x50]
	ldr r0, [sp, #0x5c]
	add r0, r0, #1
	str r0, [sp, #0x5c]
_020E8F00:
	ldr r0, [sp, #0x64]
	cmp r0, #0
	sub r0, r0, #1
	str r0, [sp, #0x64]
	beq _020E8F30
	mov r1, #0
	mov r0, r8
	mov r2, r1
	blx sb
	mov r6, r0
	cmp r6, r5
	bne _020E8EF0
_020E8F30:
	strb r6, [sp, #0x50]
	ldr r0, [sp, #0x5c]
	cmp r0, #0
	beq _020E9310
_020E8F40:
	ldr r0, [sp, #0x40]
	add r0, r0, #1
	str r0, [sp, #0x40]
	b _020E9300
_020E8F50:
	ldr r0, [sp, #0x30]
	cmp r0, #0
	bne _020E9300
	ldr r5, _020E9348 @ =0x0210E504
	b _020E8F68
_020E8F64:
	add r4, r4, #1
_020E8F68:
	mov r1, #0
	mov r0, r8
	mov r2, r1
	blx sb
	strb r0, [sp, #0x50]
	ldrsb r1, [sp, #0x50]
	cmp r1, #0
	blt _020E8F90
	cmp r1, #0x80
	blt _020E8F98
_020E8F90:
	mov r0, #0
	b _020E8FA4
_020E8F98:
	lsl r0, r1, #1
	ldrh r0, [r5, r0]
	and r0, r0, #0x100
_020E8FA4:
	cmp r0, #0
	bne _020E8F64
	cmp r1, #0x25
	beq _020E8FD4
	mov r0, r8
	mov r2, #1
	blx sb
	cmp sl, #0
	beq _020E9310
	mov r0, #1
	str r0, [sp, #0x30]
	b _020E9300
_020E8FD4:
	add r4, r4, #1
	b _020E9300
_020E8FDC:
	ldr r0, [sp, #0x30]
	cmp r0, #0
	bne _020E9058
	mov r1, #0
	mov r0, r8
	mov r2, r1
	blx sb
	strb r0, [sp, #0x50]
	b _020E9018
_020E9000:
	mov r1, #0
	mov r0, r8
	mov r2, r1
	add r4, r4, #1
	blx sb
	strb r0, [sp, #0x50]
_020E9018:
	ldrsb r1, [sp, #0x50]
	cmp r1, #0
	blt _020E902C
	cmp r1, #0x80
	blt _020E9034
_020E902C:
	mov r0, #0
	b _020E9044
_020E9034:
	ldr r0, _020E9348 @ =0x0210E504
	lsl r2, r1, #1
	ldrh r0, [r0, r2]
	and r0, r0, #0x100
_020E9044:
	cmp r0, #0
	bne _020E9000
	mov r0, r8
	mov r2, #1
	blx sb
_020E9058:
	cmp r5, #0
	beq _020E91D4
	cmp sl, #0
	beq _020E9080
	ldr r0, [sp, #0x10]
	mov r7, #1
	add r0, r0, #4
	str r0, [sp, #0x10]
	ldr r0, [r0, #-4]
	sub fp, r0, #1
_020E9080:
	ldr r0, [sp, #0x30]
	mov r1, #0
	cmp r0, #0
	str r1, [sp, #0x5c]
	beq _020E90A0
	cmp fp, #0
	strbne r1, [r5]
	b _020E9300
_020E90A0:
	mvn r0, #0
	str r5, [sp, #0x28]
	str r0, [sp, #0x4c]
	b _020E9104
_020E90B0:
	strb r6, [sp, #0x50]
	ldrsb r1, [sp, #0x50]
	add r2, sp, #0x60
	and r3, r1, #0xff
	add r2, r2, r3, asr #3
	ldrb r3, [r2, #8]
	and r0, r1, #7
	mov r2, #1
	tst r3, r2, lsl r0
	beq _020E9154
	ldrb r0, [sp, #0x62]
	cmp r0, #0xa
	strbne r1, [r5], #1
	bne _020E90F8
	mov r0, r5
	add r1, sp, #0x50
	bl FUN_020E5954
	add r5, r5, #2
_020E90F8:
	ldr r0, [sp, #0x5c]
	add r1, r0, #1
	str r1, [sp, #0x5c]
_020E9104:
	ldr r0, [sp, #0x64]
	cmp r0, #0
	sub r0, r0, #1
	str r0, [sp, #0x64]
	beq _020E9154
	cmp sl, #0
	beq _020E9134
	cmp fp, r1
	movhs r7, #1
	movlo r7, #0
	cmp r7, #0
	beq _020E9154
_020E9134:
	mov r1, #0
	mov r0, r8
	mov r2, r1
	blx sb
	mov r6, r0
	ldr r0, [sp, #0x4c]
	cmp r6, r0
	bne _020E90B0
_020E9154:
	strb r6, [sp, #0x50]
	ldr r0, [sp, #0x5c]
	cmp r0, #0
	beq _020E9174
	cmp sl, #0
	beq _020E91AC
	cmp r7, #0
	bne _020E91AC
_020E9174:
	mov r0, r8
	ldrsb r1, [sp, #0x50]
	mov r2, #1
	blx sb
	cmp sl, #0
	beq _020E9310
	mov r0, #1
	cmp fp, #0
	str r0, [sp, #0x30]
	beq _020E9300
	ldr r0, [sp, #0x28]
	mov r1, #0
	strb r1, [r0]
	b _020E9300
_020E91AC:
	add r4, r4, r0
	ldrb r0, [sp, #0x62]
	cmp r0, #0xa
	mov r0, #0
	strheq r0, [r5]
	strbne r0, [r5]
	ldr r0, [sp, #0x44]
	add r0, r0, #1
	str r0, [sp, #0x44]
	b _020E9270
_020E91D4:
	mov r0, #0
	str r0, [sp, #0x5c]
	mvn r5, #0
	b _020E9218
_020E91E4:
	strb r6, [sp, #0x50]
	ldrsb r1, [sp, #0x50]
	and r0, r1, #7
	and r2, r1, #0xff
	add r1, sp, #0x60
	add r1, r1, r2, asr #3
	ldrb r2, [r1, #8]
	mov r1, #1
	tst r2, r1, lsl r0
	beq _020E9248
	ldr r0, [sp, #0x5c]
	add r0, r0, #1
	str r0, [sp, #0x5c]
_020E9218:
	ldr r0, [sp, #0x64]
	cmp r0, #0
	sub r0, r0, #1
	str r0, [sp, #0x64]
	beq _020E9248
	mov r1, #0
	mov r0, r8
	mov r2, r1
	blx sb
	mov r6, r0
	cmp r6, r5
	bne _020E91E4
_020E9248:
	strb r6, [sp, #0x50]
	ldr r0, [sp, #0x5c]
	cmp r0, #0
	bne _020E926C
	mov r0, r8
	ldrsb r1, [sp, #0x50]
	mov r2, #1
	blx sb
	b _020E9300
_020E926C:
	add r4, r4, r0
_020E9270:
	ldr r0, [sp, #0x64]
	cmp r0, #0
	blt _020E928C
	mov r0, r8
	ldrsb r1, [sp, #0x50]
	mov r2, #1
	blx sb
_020E928C:
	ldr r0, [sp, #0x40]
	add r0, r0, #1
	str r0, [sp, #0x40]
	b _020E9300
_020E929C:
	cmp r5, #0
	beq _020E9300
	ldrb r0, [sp, #0x62]
	cmp r0, #7
	addls pc, pc, r0, lsl #2
	b _020E9300
_020E92B4: @ jump table
	b _020E92D4 @ case 0
	b _020E92EC @ case 1
	b _020E92DC @ case 2
	b _020E92E4 @ case 3
	b _020E9300 @ case 4
	b _020E9300 @ case 5
	b _020E9300 @ case 6
	b _020E92F4 @ case 7
_020E92D4:
	str r4, [r5]
	b _020E9300
_020E92DC:
	strh r4, [r5]
	b _020E9300
_020E92E4:
	str r4, [r5]
	b _020E9300
_020E92EC:
	strb r4, [r5]
	b _020E9300
_020E92F4:
	str r4, [r5]
	asr r0, r4, #0x1f
	str r0, [r5, #4]
_020E9300:
	ldr r0, [sp, #0xc]
	ldrsb r5, [r0]
	cmp r5, #0
	bne _020E8644
_020E9310:
	mov r0, r8
	mov r1, #0
	mov r2, #2
	blx sb
	cmp r0, #0
	beq _020E933C
	ldr r0, [sp, #0x40]
	cmp r0, #0
	addeq sp, sp, #0x88
	mvneq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020E933C:
	ldr r0, [sp, #0x44]
	add sp, sp, #0x88
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020E9348: .4byte 0x0210E504
_020E934C: .4byte _021110EC
	arm_func_end FUN_020E85FC

	arm_func_start FUN_020E9350
FUN_020E9350: @ 0x020E9350
	cmp r2, #0
	beq _020E936C
	cmp r2, #1
	beq _020E939C
	cmp r2, #2
	beq _020E93C4
	b _020E93CC
_020E936C:
	ldr r1, [r0]
	ldrsb r2, [r1]
	cmp r2, #0
	bne _020E938C
	mov r1, #1
	str r1, [r0, #4]
	sub r0, r1, #2
	bx lr
_020E938C:
	add r1, r1, #1
	str r1, [r0]
	and r0, r2, #0xff
	bx lr
_020E939C:
	ldr r2, [r0, #4]
	cmp r2, #0
	movne r2, #0
	strne r2, [r0, #4]
	bne _020E93BC
	ldr r2, [r0]
	sub r2, r2, #1
	str r2, [r0]
_020E93BC:
	mov r0, r1
	bx lr
_020E93C4:
	ldr r0, [r0, #4]
	bx lr
_020E93CC:
	mov r0, #0
	bx lr
	arm_func_end FUN_020E9350

	arm_func_start FUN_020E93D4
FUN_020E93D4: @ 0x020E93D4
	stmdb sp!, {lr}
	sub sp, sp, #0xc
	str r0, [sp, #4]
	cmp r0, #0
	ldrsbne r0, [r0]
	mov lr, r1
	mov r3, r2
	cmpne r0, #0
	addeq sp, sp, #0xc
	mvneq r0, #0
	ldmeq sp!, {pc}
	mov ip, #0
	str ip, [sp, #8]
	ldr r0, _020E9424 @ =FUN_020E9350
	add r1, sp, #4
	mov r2, lr
	str ip, [sp]
	bl FUN_020E85FC
	add sp, sp, #0xc
	ldm sp!, {pc}
	.align 2, 0
_020E9424: .4byte FUN_020E9350
	arm_func_end FUN_020E93D4

	arm_func_start FUN_020E9428
FUN_020E9428: @ 0x020E9428
	push {r0, r1, r2, r3}
	push {r3, lr}
	add r2, sp, #0xc
	bic r2, r2, #3
	ldr r1, [sp, #0xc]
	add r2, r2, #4
	bl FUN_020E93D4
	pop {r3, lr}
	add sp, sp, #0x10
	bx lr
	arm_func_end FUN_020E9428

	arm_func_start FUN_020E9450
FUN_020E9450: @ 0x020E9450
	push {r3, r4, r5, lr}
	mov r5, r0
	cmp r5, #1
	blt _020E9468
	cmp r5, #7
	ble _020E9470
_020E9468:
	mvn r0, #0
	pop {r3, r4, r5, pc}
_020E9470:
	ldr r0, _020E956C @ =0x021E5590
	bl FUN_020D2734
	cmp r0, #0
	bne _020E94A4
	ldr r0, _020E9570 @ =0x021E16A0
	ldr r1, _020E9574 @ =0x021E54A0
	ldr r2, [r0, #4]
	ldr r0, _020E9578 @ =0x021E54C4
	ldr r3, [r2, #0x6c]
	mov r2, #1
	str r3, [r1, #0x1c]
	str r2, [r0, #0x1c]
	b _020E94FC
_020E94A4:
	ldr r0, _020E9570 @ =0x021E16A0
	ldr r1, _020E9574 @ =0x021E54A0
	ldr r0, [r0, #4]
	ldr r1, [r1, #0x1c]
	ldr r0, [r0, #0x6c]
	cmp r1, r0
	bne _020E94D4
	ldr r0, _020E9578 @ =0x021E54C4
	ldr r1, [r0, #0x1c]
	add r1, r1, #1
	str r1, [r0, #0x1c]
	b _020E94FC
_020E94D4:
	ldr r0, _020E956C @ =0x021E5590
	bl FUN_020D2618
	ldr r0, _020E9570 @ =0x021E16A0
	ldr r1, _020E9574 @ =0x021E54A0
	ldr r2, [r0, #4]
	ldr r0, _020E9578 @ =0x021E54C4
	ldr r3, [r2, #0x6c]
	mov r2, #1
	str r3, [r1, #0x1c]
	str r2, [r0, #0x1c]
_020E94FC:
	ldr r1, _020E957C @ =0x021E58C4
	sub r2, r5, #1
	ldr r4, [r1, r2, lsl #2]
	cmp r4, #1
	movne r0, #0
	strne r0, [r1, r2, lsl #2]
	ldr r0, _020E9578 @ =0x021E54C4
	ldr r1, [r0, #0x1c]
	subs r1, r1, #1
	str r1, [r0, #0x1c]
	bne _020E9530
	ldr r0, _020E956C @ =0x021E5590
	bl FUN_020D269C
_020E9530:
	cmp r4, #1
	beq _020E9544
	cmp r4, #0
	cmpeq r5, #1
	bne _020E954C
_020E9544:
	mov r0, #0
	pop {r3, r4, r5, pc}
_020E954C:
	cmp r4, #0
	bne _020E955C
	mov r0, #0
	bl FUN_020E47E4
_020E955C:
	mov r0, r5
	blx r4
	mov r0, #0
	pop {r3, r4, r5, pc}
	.align 2, 0
_020E956C: .4byte 0x021E5590
_020E9570: .4byte 0x021E16A0
_020E9574: .4byte 0x021E54A0
_020E9578: .4byte 0x021E54C4
_020E957C: .4byte 0x021E58C4
	arm_func_end FUN_020E9450

	arm_func_start FUN_020E9580
FUN_020E9580: @ 0x020E9580
	mvn r2, #0
_020E9584:
	ldrsb r1, [r0], #1
	add r2, r2, #1
	cmp r1, #0
	bne _020E9584
	mov r0, r2
	bx lr
	arm_func_end FUN_020E9580

	arm_func_start FUN_020E959C
FUN_020E959C: @ 0x020E959C
	push {r3, r4, r5, lr}
	and r4, r1, #3
	and r3, r0, #3
	mov r2, r0
	cmp r3, r4
	bne _020E9638
	cmp r4, #0
	beq _020E95F4
	ldrb r3, [r1]
	strb r3, [r0]
	cmp r3, #0
	popeq {r3, r4, r5, pc}
	rsbs r4, r4, #3
	beq _020E95EC
_020E95D4:
	ldrb r3, [r1, #1]!
	cmp r3, #0
	strb r3, [r2, #1]!
	popeq {r3, r4, r5, pc}
	subs r4, r4, #1
	bne _020E95D4
_020E95EC:
	add r2, r2, #1
	add r1, r1, #1
_020E95F4:
	ldr r5, [r1]
	ldr r3, _020E965C @ =0xFEFEFEFF
	mvn r4, r5
	add lr, r5, r3
	ldr ip, _020E9660 @ =0x80808080
	and r4, lr, r4
	tst r4, ip
	bne _020E9638
	sub r2, r2, #4
_020E9618:
	str r5, [r2, #4]!
	ldr r5, [r1, #4]!
	add r4, r5, r3
	mvn lr, r5
	and lr, r4, lr
	tst lr, ip
	beq _020E9618
	add r2, r2, #4
_020E9638:
	ldrb r3, [r1]
	strb r3, [r2]
	cmp r3, #0
	popeq {r3, r4, r5, pc}
_020E9648:
	ldrb r3, [r1, #1]!
	cmp r3, #0
	strb r3, [r2, #1]!
	bne _020E9648
	pop {r3, r4, r5, pc}
	.align 2, 0
_020E965C: .4byte 0xFEFEFEFF
_020E9660: .4byte 0x80808080
	arm_func_end FUN_020E959C

	arm_func_start FUN_020E9664
FUN_020E9664: @ 0x020E9664
	push {r3, lr}
	mov lr, r0
	cmp r2, #0
	popeq {r3, pc}
_020E9674:
	ldrsb r3, [r1], #1
	mov ip, lr
	strb r3, [lr], #1
	ldrsb r3, [ip]
	cmp r3, #0
	bne _020E96A8
	subs r2, r2, #1
	popeq {r3, pc}
	mov r1, #0
_020E9698:
	strb r1, [lr], #1
	subs r2, r2, #1
	bne _020E9698
	pop {r3, pc}
_020E96A8:
	subs r2, r2, #1
	bne _020E9674
	pop {r3, pc}
	arm_func_end FUN_020E9664

	arm_func_start FUN_020E96B4
FUN_020E96B4: @ 0x020E96B4
	mov r3, r0
_020E96B8:
	ldrsb r2, [r3], #1
	cmp r2, #0
	bne _020E96B8
	sub r3, r3, #1
_020E96C8:
	ldrsb r2, [r1], #1
	mov ip, r3
	strb r2, [r3], #1
	ldrsb r2, [ip]
	cmp r2, #0
	bne _020E96C8
	bx lr
	arm_func_end FUN_020E96B4

	arm_func_start FUN_020E96E4
FUN_020E96E4: @ 0x020E96E4
	push {r3, lr}
	mov ip, r0
_020E96EC:
	ldrsb r3, [ip], #1
	cmp r3, #0
	bne _020E96EC
	cmp r2, #0
	sub ip, ip, #1
	beq _020E9728
_020E9704:
	ldrsb r3, [r1], #1
	mov lr, ip
	strb r3, [ip], #1
	ldrsb r3, [lr]
	cmp r3, #0
	subeq ip, ip, #1
	beq _020E9728
	subs r2, r2, #1
	bne _020E9704
_020E9728:
	mov r1, #0
	strb r1, [ip]
	pop {r3, pc}
	arm_func_end FUN_020E96E4

	arm_func_start FUN_020E9734
FUN_020E9734: @ 0x020E9734
	push {r4, lr}
	ldrb r2, [r0]
	ldrb r3, [r1]
	subs r3, r2, r3
	movne r0, r3
	popne {r4, pc}
	and r4, r0, #3
	and r3, r1, #3
	cmp r3, r4
	bne _020E9810
	cmp r4, #0
	beq _020E97A8
	cmp r2, #0
	moveq r0, #0
	popeq {r4, pc}
	rsbs r4, r4, #3
	beq _020E97A0
_020E9778:
	ldrb r3, [r0, #1]!
	ldrb r2, [r1, #1]!
	subs r2, r3, r2
	movne r0, r2
	popne {r4, pc}
	cmp r3, #0
	moveq r0, #0
	popeq {r4, pc}
	subs r4, r4, #1
	bne _020E9778
_020E97A0:
	add r0, r0, #1
	add r1, r1, #1
_020E97A8:
	ldr r2, [r0]
	ldr r3, _020E9840 @ =0xFEFEFEFF
	mvn r4, r2
	add lr, r2, r3
	ldr ip, _020E9844 @ =0x80808080
	and r4, lr, r4
	tst r4, ip
	ldr r4, [r1]
	bne _020E97FC
	cmp r2, r4
	bne _020E97F0
_020E97D4:
	ldr r2, [r0, #4]!
	ldr r4, [r1, #4]!
	add lr, r2, r3
	tst lr, ip
	bne _020E97FC
	cmp r2, r4
	beq _020E97D4
_020E97F0:
	sub r0, r0, #1
	sub r1, r1, #1
	b _020E9810
_020E97FC:
	ldrb r2, [r0]
	ldrb r3, [r1]
	subs r3, r2, r3
	movne r0, r3
	popne {r4, pc}
_020E9810:
	cmp r2, #0
	moveq r0, #0
	popeq {r4, pc}
_020E981C:
	ldrb r3, [r0, #1]!
	ldrb r2, [r1, #1]!
	subs r2, r3, r2
	movne r0, r2
	popne {r4, pc}
	cmp r3, #0
	bne _020E981C
	mov r0, #0
	pop {r4, pc}
	.align 2, 0
_020E9840: .4byte 0xFEFEFEFF
_020E9844: .4byte 0x80808080
	arm_func_end FUN_020E9734

	arm_func_start FUN_020E9848
FUN_020E9848: @ 0x020E9848
	cmp r2, #0
	beq _020E9874
_020E9850:
	ldrb ip, [r1], #1
	ldrb r3, [r0], #1
	cmp r3, ip
	subne r0, r3, ip
	bxne lr
	cmp r3, #0
	beq _020E9874
	subs r2, r2, #1
	bne _020E9850
_020E9874:
	mov r0, #0
	bx lr
	arm_func_end FUN_020E9848

	arm_func_start FUN_020E987C
FUN_020E987C: @ 0x020E987C
	ldrsb r2, [r0], #1
	lsl r1, r1, #0x18
	asr r1, r1, #0x18
	cmp r2, #0
	beq _020E98A8
_020E9890:
	cmp r2, r1
	subeq r0, r0, #1
	bxeq lr
	ldrsb r2, [r0], #1
	cmp r2, #0
	bne _020E9890
_020E98A8:
	cmp r1, #0
	movne r0, #0
	subeq r0, r0, #1
	bx lr
	arm_func_end FUN_020E987C

	arm_func_start FUN_020E98B8
FUN_020E98B8: @ 0x020E98B8
	push {r4, lr}
	sub sp, sp, #0x20
	add ip, sp, #0
	mov r3, #8
	mov r2, #0
_020E98CC:
	strb r2, [ip]
	strb r2, [ip, #1]
	strb r2, [ip, #2]
	strb r2, [ip, #3]
	add ip, ip, #4
	subs r3, r3, #1
	bne _020E98CC
	ldrb r3, [r1]
	add r4, r1, #1
	cmp r3, #0
	beq _020E9928
	add lr, sp, #0
	mov r2, #1
_020E9900:
	and ip, r3, #0xff
	and r1, r3, #7
	lsl r1, r2, r1
	ldrb r3, [lr, ip, asr #3]
	and r1, r1, #0xff
	orr r1, r3, r1
	strb r1, [lr, ip, asr #3]
	ldrb r3, [r4], #1
	cmp r3, #0
	bne _020E9900
_020E9928:
	ldrb r1, [r0]
	add r4, r0, #1
	cmp r1, #0
	beq _020E9968
	add ip, sp, #0
	mov r2, #1
_020E9940:
	and r3, r1, #0xff
	and r1, r1, #7
	lsl r1, r2, r1
	ldrb r3, [ip, r3, asr #3]
	and r1, r1, #0xff
	tst r3, r1
	bne _020E9968
	ldrb r1, [r4], #1
	cmp r1, #0
	bne _020E9940
_020E9968:
	sub r0, r4, r0
	sub r0, r0, #1
	add sp, sp, #0x20
	pop {r4, pc}
	arm_func_end FUN_020E98B8

	arm_func_start FUN_020E9978
FUN_020E9978: @ 0x020E9978
	push {r4, lr}
	sub sp, sp, #0x20
	add ip, sp, #0
	mov r3, #8
	mov r2, #0
_020E998C:
	strb r2, [ip]
	strb r2, [ip, #1]
	strb r2, [ip, #2]
	strb r2, [ip, #3]
	add ip, ip, #4
	subs r3, r3, #1
	bne _020E998C
	cmp r0, #0
	ldrne r2, _020E9ACC @ =_0211135C
	add lr, r1, #1
	strne r0, [r2, #4]
	ldrb r0, [r1]
	cmp r0, #0
	beq _020E99F4
	add ip, sp, #0
	mov r1, #1
_020E99CC:
	and r3, r0, #0xff
	and r0, r0, #7
	lsl r0, r1, r0
	ldrb r2, [ip, r3, asr #3]
	and r0, r0, #0xff
	orr r0, r2, r0
	strb r0, [ip, r3, asr #3]
	ldrb r0, [lr], #1
	cmp r0, #0
	bne _020E99CC
_020E99F4:
	ldr r0, _020E9ACC @ =_0211135C
	ldr r0, [r0, #4]
	ldrb r4, [r0]
	add r1, r0, #1
	cmp r4, #0
	beq _020E9A38
	add ip, sp, #0
	mov r2, #1
_020E9A14:
	and r3, r4, #0xff
	and r0, r4, #7
	lsl r0, r2, r0
	ldrb r3, [ip, r3, asr #3]
	and r0, r0, #0xff
	tst r3, r0
	ldrbne r4, [r1], #1
	cmpne r4, #0
	bne _020E9A14
_020E9A38:
	cmp r4, #0
	bne _020E9A58
	ldr r1, _020E9ACC @ =_0211135C
	add sp, sp, #0x20
	ldr r2, [r1]
	mov r0, #0
	str r2, [r1, #4]
	pop {r4, pc}
_020E9A58:
	sub r0, r1, #1
	ldrb r4, [r1], #1
	cmp r4, #0
	beq _020E9A98
	add lr, sp, #0
	mov r3, #1
_020E9A70:
	and ip, r4, #0xff
	and r2, r4, #7
	lsl r2, r3, r2
	ldrb ip, [lr, ip, asr #3]
	and r2, r2, #0xff
	tst ip, r2
	bne _020E9A98
	ldrb r4, [r1], #1
	cmp r4, #0
	bne _020E9A70
_020E9A98:
	cmp r4, #0
	bne _020E9AB4
	ldr r1, _020E9ACC @ =_0211135C
	add sp, sp, #0x20
	ldr r2, [r1]
	str r2, [r1, #4]
	pop {r4, pc}
_020E9AB4:
	ldr r2, _020E9ACC @ =_0211135C
	mov r3, #0
	str r1, [r2, #4]
	strb r3, [r1, #-1]
	add sp, sp, #0x20
	pop {r4, pc}
	.align 2, 0
_020E9ACC: .4byte _0211135C
	arm_func_end FUN_020E9978

	arm_func_start FUN_020E9AD0
FUN_020E9AD0: @ 0x020E9AD0
	push {r4, lr}
	cmp r1, #0
	ldrbne r2, [r1]
	cmpne r2, #0
	popeq {r4, pc}
	ldrb r3, [r0]
	add r4, r0, #1
	cmp r3, #0
	beq _020E9B34
_020E9AF4:
	cmp r3, r2
	bne _020E9B28
	mov lr, r4
	add ip, r1, #1
_020E9B04:
	ldrb r3, [ip], #1
	ldrb r0, [lr], #1
	cmp r0, r3
	bne _020E9B1C
	cmp r0, #0
	bne _020E9B04
_020E9B1C:
	cmp r3, #0
	subeq r0, r4, #1
	popeq {r4, pc}
_020E9B28:
	ldrb r3, [r4], #1
	cmp r3, #0
	bne _020E9AF4
_020E9B34:
	mov r0, #0
	pop {r4, pc}
	arm_func_end FUN_020E9AD0

	arm_func_start FUN_020E9B3C
FUN_020E9B3C: @ 0x020E9B3C
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0xa8
	ldr r4, [sp, #0xd0]
	mov sl, #0
	str r4, [sp, #0xd0]
	str r0, [sp]
	add r6, sp, #0x80
	mov sb, r1
	mov r8, r2
	str r3, [sp, #4]
	mov r4, sl
	str sl, [sp, #0x2c]
	mov r5, #1
	mov r0, #4
_020E9B74:
	strh sl, [r6]
	strh sl, [r6, #2]
	strh sl, [r6, #4]
	strh sl, [r6, #6]
	add r6, r6, #8
	subs r0, r0, #1
	bne _020E9B74
	mov r0, #0
	str r0, [sp, #0x28]
	strh sl, [r6]
	strh sl, [r6, #2]
	ldr r2, [sp, #0x28]
	ldr r1, [sp, #0xd0]
	strh sl, [r6, #4]
	str r2, [r1]
	mov r1, r2
	mov r0, r8
	str r1, [sp, #0x24]
	str r1, [sp, #0x20]
	str r1, [sp, #0x1c]
	str r1, [sp, #0x18]
	str r1, [sp, #0x10]
	str r1, [sp, #0xc]
	str r1, [sp, #8]
	add r4, r4, #1
	blx sb
	mov r1, r0
	ldr r7, _020EAB1C @ =0x0210E631
	add r0, sp, #0x4d
	mov r6, #4
_020E9BEC:
	ldrb r3, [r7]
	ldrb r2, [r7, #1]
	add r7, r7, #2
	strb r3, [r0]
	strb r2, [r0, #1]
	add r0, r0, #2
	subs r6, r6, #1
	bne _020E9BEC
	ldrb r3, [r7]
	ldr r2, _020EAB20 @ =0x0210E62C
	strb r3, [r0]
	ldrb r3, [r2, #1]
	ldrb r0, [r2, #2]
	ldrb r6, [r2]
	strb r3, [sp, #0x31]
	strb r0, [sp, #0x32]
	ldrb r3, [r2, #3]
	ldrb r0, [r2, #4]
	strb r6, [sp, #0x30]
	strb r3, [sp, #0x33]
	strb r0, [sp, #0x34]
	b _020EA930
_020E9C44:
	cmp r5, #0x100
	bgt _020E9CBC
	bge _020EA3C4
	cmp r5, #0x20
	bgt _020E9CA0
	bge _020EA298
	cmp r5, #8
	bgt _020E9C94
	cmp r5, #0
	addge pc, pc, r5, lsl #2
	b _020EA930
_020E9C70: @ jump table
	b _020EA930 @ case 0
	b _020E9D00 @ case 1
	b _020EA0E4 @ case 2
	b _020EA930 @ case 3
	b _020EA194 @ case 4
	b _020EA930 @ case 5
	b _020EA930 @ case 6
	b _020EA930 @ case 7
	b _020EA1BC @ case 8
_020E9C94:
	cmp r5, #0x10
	beq _020EA260
	b _020EA930
_020E9CA0:
	cmp r5, #0x40
	bgt _020E9CB0
	beq _020EA324
	b _020EA930
_020E9CB0:
	cmp r5, #0x80
	beq _020EA370
	b _020EA930
_020E9CBC:
	cmp r5, #0x2000
	bgt _020E9CE4
	bge _020E9F18
	cmp r5, #0x200
	bgt _020E9CD8
	beq _020EA424
	b _020EA930
_020E9CD8:
	cmp r5, #0x400
	beq _020EA44C
	b _020EA930
_020E9CE4:
	cmp r5, #0x4000
	bgt _020E9CF4
	beq _020E9E20
	b _020EA930
_020E9CF4:
	cmp r5, #0x8000
	beq _020EA4C4
	b _020EA930
_020E9D00:
	cmp r1, #0
	blt _020E9D10
	cmp r1, #0x80
	blt _020E9D18
_020E9D10:
	mov r0, #0
	b _020E9D28
_020E9D18:
	lsl r2, r1, #1
	ldr r0, _020EAB24 @ =0x0210E504
	ldrh r0, [r0, r2]
	and r0, r0, #0x100
_020E9D28:
	cmp r0, #0
	beq _020E9D54
	mov r1, #0
	mov r0, r8
	mov r2, r1
	blx sb
	mov r1, r0
	ldr r0, [sp, #0x2c]
	add r0, r0, #1
	str r0, [sp, #0x2c]
	b _020EA930
_020E9D54:
	cmp r1, #0
	blt _020E9D64
	cmp r1, #0x80
	blt _020E9D6C
_020E9D64:
	mov r0, r1
	b _020E9D74
_020E9D6C:
	ldr r0, _020EAB28 @ =0x0210E484
	ldrb r0, [r0, r1]
_020E9D74:
	cmp r0, #0x49
	bgt _020E9DA0
	bge _020E9DD8
	cmp r0, #0x2d
	bgt _020E9E18
	cmp r0, #0x2b
	blt _020E9E18
	beq _020E9DB4
	cmp r0, #0x2d
	beq _020E9DAC
	b _020E9E18
_020E9DA0:
	cmp r0, #0x4e
	beq _020E9DF8
	b _020E9E18
_020E9DAC:
	mov r0, #1
	str r0, [sp, #0x28]
_020E9DB4:
	mov r1, #0
	mov r0, r8
	mov r2, r1
	add r4, r4, #1
	blx sb
	mov r1, r0
	mov r0, #1
	str r0, [sp, #0x18]
	b _020EA930
_020E9DD8:
	add r4, r4, #1
	mov r0, r8
	mov r1, #0
	mov r2, r1
	blx sb
	mov r1, r0
	mov r5, #0x4000
	b _020EA930
_020E9DF8:
	add r4, r4, #1
	mov r0, r8
	mov r1, #0
	mov r2, r1
	blx sb
	mov r1, r0
	mov r5, #0x2000
	b _020EA930
_020E9E18:
	mov r5, #2
	b _020EA930
_020E9E20:
	mov r5, #1
	add r7, sp, #0x4d
	add r0, sp, #0x76
	mov r6, #4
_020E9E30:
	ldrb r3, [r7]
	ldrb r2, [r7, #1]
	add r7, r7, #2
	strb r3, [r0]
	strb r2, [r0, #1]
	add r0, r0, #2
	subs r6, r6, #1
	bne _020E9E30
	ldrb r2, [r7]
	add r6, sp, #0x77
	ldr r7, _020EAB28 @ =0x0210E484
	strb r2, [r0]
	b _020E9E84
_020E9E64:
	mov r1, #0
	mov r0, r8
	mov r2, r1
	add r6, r6, #1
	add r5, r5, #1
	add r4, r4, #1
	blx sb
	mov r1, r0
_020E9E84:
	cmp r5, #8
	bge _020E9EB4
	cmp r1, #0
	blt _020E9E9C
	cmp r1, #0x80
	blt _020E9EA4
_020E9E9C:
	mov r2, r1
	b _020E9EA8
_020E9EA4:
	ldrb r2, [r7, r1]
_020E9EA8:
	ldrsb r0, [r6]
	cmp r0, r2
	beq _020E9E64
_020E9EB4:
	cmp r5, #3
	cmpne r5, #8
	bne _020E9F10
	ldr r0, [sp, #0x28]
	cmp r0, #0
	beq _020E9EE4
	ldr r1, _020EAB2C @ =_021110E8
	mov r0, #0
	ldr r1, [r1]
	bl FUN_020F24C8
	bl FUN_020F2080
	b _020E9EF0
_020E9EE4:
	ldr r0, _020EAB2C @ =_021110E8
	ldr r0, [r0]
	bl FUN_020F2080
_020E9EF0:
	ldr r2, [sp, #0x2c]
	add r3, r2, r5
	ldr r2, [sp, #0x18]
	add r3, r2, r3
	ldr r2, [sp, #4]
	add sp, sp, #0xa8
	str r3, [r2]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020E9F10:
	mov r5, #0x1000
	b _020EA930
_020E9F18:
	ldrb r3, [sp, #0x30]
	ldrb r0, [sp, #0x32]
	ldrb r2, [sp, #0x31]
	strb r3, [sp, #0x40]
	strb r0, [sp, #0x42]
	ldrb r3, [sp, #0x33]
	ldrb r0, [sp, #0x34]
	strb r2, [sp, #0x41]
	mov r5, #1
	strb r0, [sp, #0x44]
	mov r6, #0
	add r2, sp, #0x56
	strb r3, [sp, #0x43]
	mov r0, #8
_020E9F50:
	strb r6, [r2]
	strb r6, [r2, #1]
	strb r6, [r2, #2]
	strb r6, [r2, #3]
	add r2, r2, #4
	subs r0, r0, #1
	bne _020E9F50
	add r7, sp, #0x41
	b _020E9F94
_020E9F74:
	mov r1, #0
	mov r0, r8
	mov r2, r1
	add r7, r7, #1
	add r5, r5, #1
	add r4, r4, #1
	blx sb
	mov r1, r0
_020E9F94:
	cmp r5, #4
	bge _020E9FC8
	cmp r1, #0
	blt _020E9FAC
	cmp r1, #0x80
	blt _020E9FB4
_020E9FAC:
	mov r2, r1
	b _020E9FBC
_020E9FB4:
	ldr r0, _020EAB28 @ =0x0210E484
	ldrb r2, [r0, r1]
_020E9FBC:
	ldrsb r0, [r7]
	cmp r0, r2
	beq _020E9F74
_020E9FC8:
	sub r0, r5, #3
	cmp r0, #1
	bhi _020EA0DC
	cmp r5, #4
	bne _020EA080
	ldr r7, _020EAB24 @ =0x0210E504
	b _020EA008
_020E9FE4:
	add r0, sp, #0x56
	strb r1, [r0, r6]
	mov r1, #0
	mov r0, r8
	mov r2, r1
	add r6, r6, #1
	add r4, r4, #1
	blx sb
	mov r1, r0
_020EA008:
	cmp r6, #0x20
	bge _020EA070
	cmp r1, #0
	blt _020EA020
	cmp r1, #0x80
	blt _020EA028
_020EA020:
	mov r0, #0
	b _020EA034
_020EA028:
	lsl r0, r1, #1
	ldrh r0, [r7, r0]
	and r0, r0, #8
_020EA034:
	cmp r0, #0
	bne _020E9FE4
	cmp r1, #0
	blt _020EA04C
	cmp r1, #0x80
	blt _020EA054
_020EA04C:
	mov r0, #0
	b _020EA060
_020EA054:
	lsl r0, r1, #1
	ldrh r0, [r7, r0]
	and r0, r0, #1
_020EA060:
	cmp r0, #0
	bne _020E9FE4
	cmp r1, #0x2e
	beq _020E9FE4
_020EA070:
	cmp r1, #0x29
	movne r5, #0x1000
	bne _020EA930
	add r6, r6, #1
_020EA080:
	add r0, sp, #0x56
	mov r1, #0
	strb r1, [r0, r6]
	ldr r1, [sp, #0x28]
	cmp r1, #0
	beq _020EA0B4
	bl FUN_020E4958
	mov r2, r0
	mov r0, #0
	mov r3, r1
	mov r1, r0
	bl FUN_020F116C
	b _020EA0B8
_020EA0B4:
	bl FUN_020E4958
_020EA0B8:
	ldr r2, [sp, #0x2c]
	add r2, r2, r5
	add r3, r6, r2
	ldr r2, [sp, #0x18]
	add r3, r2, r3
	ldr r2, [sp, #4]
	add sp, sp, #0xa8
	str r3, [r2]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020EA0DC:
	mov r5, #0x1000
	b _020EA930
_020EA0E4:
	cmp r1, #0x2e
	bne _020EA10C
	mov r5, #0x10
	add r4, r4, #1
	mov r0, r8
	mov r1, #0
	mov r2, r1
	blx sb
	mov r1, r0
	b _020EA930
_020EA10C:
	cmp r1, #0
	blt _020EA11C
	cmp r1, #0x80
	blt _020EA124
_020EA11C:
	mov r0, #0
	b _020EA134
_020EA124:
	lsl r2, r1, #1
	ldr r0, _020EAB24 @ =0x0210E504
	ldrh r0, [r0, r2]
	and r0, r0, #8
_020EA134:
	cmp r0, #0
	moveq r5, #0x1000
	beq _020EA930
	cmp r1, #0x30
	bne _020EA18C
	add r4, r4, #1
	mov r0, r8
	mov r1, #0
	mov r2, r1
	blx sb
	cmp r0, #0
	mov r1, r0
	blt _020EA178
	cmp r0, #0x80
	bge _020EA178
	ldr r2, _020EAB28 @ =0x0210E484
	ldrb r0, [r2, r0]
_020EA178:
	cmp r0, #0x58
	moveq r5, #0x8000
	moveq sl, #1
	movne r5, #4
	b _020EA930
_020EA18C:
	mov r5, #8
	b _020EA930
_020EA194:
	cmp r1, #0x30
	movne r5, #8
	bne _020EA930
	mov r1, #0
	mov r0, r8
	mov r2, r1
	add r4, r4, #1
	blx sb
	mov r1, r0
	b _020EA930
_020EA1BC:
	cmp r1, #0
	blt _020EA1CC
	cmp r1, #0x80
	blt _020EA1D4
_020EA1CC:
	mov r0, #0
	b _020EA1E4
_020EA1D4:
	lsl r2, r1, #1
	ldr r0, _020EAB24 @ =0x0210E504
	ldrh r0, [r0, r2]
	and r0, r0, #8
_020EA1E4:
	cmp r0, #0
	bne _020EA218
	cmp r1, #0x2e
	movne r5, #0x40
	bne _020EA930
	mov r1, #0
	mov r0, r8
	mov r2, r1
	mov r5, #0x20
	add r4, r4, #1
	blx sb
	mov r1, r0
	b _020EA930
_020EA218:
	ldrb r2, [sp, #0x84]
	cmp r2, #0x14
	ldrhs r0, [sp, #0x1c]
	addhs r0, r0, #1
	strhs r0, [sp, #0x1c]
	bhs _020EA244
	add r0, r2, #1
	strb r0, [sp, #0x84]
	add r0, sp, #0x80
	add r0, r0, r2
	strb r1, [r0, #5]
_020EA244:
	add r4, r4, #1
	mov r0, r8
	mov r1, #0
	mov r2, r1
	blx sb
	mov r1, r0
	b _020EA930
_020EA260:
	cmp r1, #0
	blt _020EA270
	cmp r1, #0x80
	blt _020EA278
_020EA270:
	mov r0, #0
	b _020EA288
_020EA278:
	lsl r2, r1, #1
	ldr r0, _020EAB24 @ =0x0210E504
	ldrh r0, [r0, r2]
	and r0, r0, #8
_020EA288:
	cmp r0, #0
	moveq r5, #0x1000
	movne r5, #0x20
	b _020EA930
_020EA298:
	cmp r1, #0
	blt _020EA2A8
	cmp r1, #0x80
	blt _020EA2B0
_020EA2A8:
	mov r0, #0
	b _020EA2C0
_020EA2B0:
	lsl r2, r1, #1
	ldr r0, _020EAB24 @ =0x0210E504
	ldrh r0, [r0, r2]
	and r0, r0, #8
_020EA2C0:
	cmp r0, #0
	moveq r5, #0x40
	beq _020EA930
	ldrb r3, [sp, #0x84]
	cmp r3, #0x14
	bhs _020EA308
	cmp r1, #0x30
	cmpeq r3, #0
	beq _020EA2FC
	ldrb r2, [sp, #0x84]
	add r0, sp, #0x80
	add r0, r0, r3
	add r2, r2, #1
	strb r2, [sp, #0x84]
	strb r1, [r0, #5]
_020EA2FC:
	ldr r0, [sp, #0x1c]
	sub r0, r0, #1
	str r0, [sp, #0x1c]
_020EA308:
	add r4, r4, #1
	mov r0, r8
	mov r1, #0
	mov r2, r1
	blx sb
	mov r1, r0
	b _020EA930
_020EA324:
	cmp r1, #0
	blt _020EA334
	cmp r1, #0x80
	blt _020EA33C
_020EA334:
	mov r0, r1
	b _020EA344
_020EA33C:
	ldr r0, _020EAB28 @ =0x0210E484
	ldrb r0, [r0, r1]
_020EA344:
	cmp r0, #0x45
	movne r5, #0x800
	bne _020EA930
	mov r1, #0
	mov r0, r8
	mov r2, r1
	mov r5, #0x80
	add r4, r4, #1
	blx sb
	mov r1, r0
	b _020EA930
_020EA370:
	cmp r1, #0x2b
	bne _020EA394
	add r4, r4, #1
	mov r0, r8
	mov r1, #0
	mov r2, r1
	blx sb
	mov r1, r0
	b _020EA3BC
_020EA394:
	cmp r1, #0x2d
	bne _020EA3BC
	mov r1, #0
	mov r0, r8
	mov r2, r1
	add r4, r4, #1
	blx sb
	mov r1, r0
	mov r0, #1
	str r0, [sp, #0x24]
_020EA3BC:
	mov r5, #0x100
	b _020EA930
_020EA3C4:
	cmp r1, #0
	blt _020EA3D4
	cmp r1, #0x80
	blt _020EA3DC
_020EA3D4:
	mov r0, #0
	b _020EA3EC
_020EA3DC:
	lsl r2, r1, #1
	ldr r0, _020EAB24 @ =0x0210E504
	ldrh r0, [r0, r2]
	and r0, r0, #8
_020EA3EC:
	cmp r0, #0
	moveq r5, #0x1000
	beq _020EA930
	cmp r1, #0x30
	movne r5, #0x400
	bne _020EA930
	mov r1, #0
	mov r0, r8
	mov r2, r1
	mov r5, #0x200
	add r4, r4, #1
	blx sb
	mov r1, r0
	b _020EA930
_020EA424:
	cmp r1, #0x30
	movne r5, #0x400
	bne _020EA930
	mov r1, #0
	mov r0, r8
	mov r2, r1
	add r4, r4, #1
	blx sb
	mov r1, r0
	b _020EA930
_020EA44C:
	cmp r1, #0
	blt _020EA45C
	cmp r1, #0x80
	blt _020EA464
_020EA45C:
	mov r0, #0
	b _020EA474
_020EA464:
	lsl r2, r1, #1
	ldr r0, _020EAB24 @ =0x0210E504
	ldrh r0, [r0, r2]
	and r0, r0, #8
_020EA474:
	cmp r0, #0
	moveq r5, #0x800
	beq _020EA930
	ldr r0, [sp, #0x20]
	sub r2, r1, #0x30
	mov r1, #0xa
	mla r0, r1, r0, r2
	ldr r1, _020EAB30 @ =0x00007FFF
	str r0, [sp, #0x20]
	cmp r0, r1
	ldrgt r0, [sp, #0xd0]
	movgt r1, #1
	strgt r1, [r0]
	mov r1, #0
	mov r0, r8
	mov r2, r1
	add r4, r4, #1
	blx sb
	mov r1, r0
	b _020EA930
_020EA4C4:
	cmp sl, #0x20
	bgt _020EA514
	bge _020EA7E8
	cmp sl, #8
	bgt _020EA508
	cmp sl, #0
	addge pc, pc, sl, lsl #2
	b _020EA930
_020EA4E4: @ jump table
	b _020EA930 @ case 0
	b _020EA538 @ case 1
	b _020EA588 @ case 2
	b _020EA930 @ case 3
	b _020EA5B0 @ case 4
	b _020EA930 @ case 5
	b _020EA930 @ case 6
	b _020EA930 @ case 7
	b _020EA6C0 @ case 8
_020EA508:
	cmp sl, #0x10
	beq _020EA79C
	b _020EA930
_020EA514:
	cmp sl, #0x80
	bgt _020EA52C
	bge _020EA890
	cmp sl, #0x40
	beq _020EA830
	b _020EA930
_020EA52C:
	cmp sl, #0x100
	beq _020EA8B8
	b _020EA930
_020EA538:
	mov r1, #0
	add r0, sp, #0x45
	str r0, [sp, #0x14]
	strb r1, [r0]
	strb r1, [r0, #1]
	strb r1, [r0, #2]
	strb r1, [r0, #3]
	strb r1, [r0, #4]
	strb r1, [r0, #5]
	strb r1, [r0, #6]
	strb r1, [r0, #7]
	mov r0, r8
	mov r2, r1
	str r1, [sp, #8]
	mov fp, r1
	mov sl, #2
	add r4, r4, #1
	blx sb
	mov r1, r0
	b _020EA930
_020EA588:
	cmp r1, #0x30
	movne sl, #4
	bne _020EA930
	mov r1, #0
	mov r0, r8
	mov r2, r1
	add r4, r4, #1
	blx sb
	mov r1, r0
	b _020EA930
_020EA5B0:
	cmp r1, #0
	blt _020EA5C0
	cmp r1, #0x80
	blt _020EA5C8
_020EA5C0:
	mov r0, #0
	b _020EA5D8
_020EA5C8:
	lsl r2, r1, #1
	ldr r0, _020EAB24 @ =0x0210E504
	ldrh r0, [r0, r2]
	and r0, r0, #0x400
_020EA5D8:
	cmp r0, #0
	bne _020EA60C
	cmp r1, #0x2e
	movne sl, #0x10
	bne _020EA930
	mov r1, #0
	mov r0, r8
	mov r2, r1
	mov sl, #8
	add r4, r4, #1
	blx sb
	mov r1, r0
	b _020EA930
_020EA60C:
	ldr r2, [sp, #8]
	mov r0, #0xe
	cmp r2, r0
	bhs _020EA6A4
	mov r0, r2
	add r0, r0, #1
	str r0, [sp, #8]
	ldr r0, [sp, #0x14]
	add r2, fp, fp, lsr #31
	cmp r1, #0
	ldrb r0, [r0, r2, asr #1]
	blt _020EA64C
	cmp r1, #0x80
	bge _020EA64C
	ldr r2, _020EAB28 @ =0x0210E484
	ldrb r1, [r2, r1]
_020EA64C:
	cmp r1, #0x41
	subge r1, r1, #0x37
	sublt r1, r1, #0x30
	lsr r2, fp, #0x1f
	and r3, r1, #0xff
	rsb r1, r2, fp, lsl #31
	adds r1, r2, r1, ror #31
	lsleq r1, r3, #4
	add r2, fp, fp, lsr #31
	orrne r0, r0, r3
	andeq r1, r1, #0xff
	orreq r0, r0, r1
	ldr r1, [sp, #0x14]
	add fp, fp, #1
	strb r0, [r1, r2, asr #1]
	mov r1, #0
	mov r0, r8
	mov r2, r1
	add r4, r4, #1
	blx sb
	mov r1, r0
	b _020EA930
_020EA6A4:
	add r4, r4, #1
	mov r0, r8
	mov r1, #0
	mov r2, r1
	blx sb
	mov r1, r0
	b _020EA930
_020EA6C0:
	cmp r1, #0
	blt _020EA6D0
	cmp r1, #0x80
	blt _020EA6D8
_020EA6D0:
	mov r0, #0
	b _020EA6E8
_020EA6D8:
	lsl r2, r1, #1
	ldr r0, _020EAB24 @ =0x0210E504
	ldrh r0, [r0, r2]
	and r0, r0, #0x400
_020EA6E8:
	cmp r0, #0
	moveq sl, #0x10
	beq _020EA930
	ldr r2, [sp, #8]
	mov r0, #0xe
	cmp r2, r0
	bhs _020EA780
	ldr r0, [sp, #0x14]
	add r2, fp, fp, lsr #31
	cmp r1, #0
	ldrb r0, [r0, r2, asr #1]
	blt _020EA728
	cmp r1, #0x80
	bge _020EA728
	ldr r2, _020EAB28 @ =0x0210E484
	ldrb r1, [r2, r1]
_020EA728:
	cmp r1, #0x41
	subge r1, r1, #0x37
	sublt r1, r1, #0x30
	lsr r2, fp, #0x1f
	and r3, r1, #0xff
	rsb r1, r2, fp, lsl #31
	adds r1, r2, r1, ror #31
	lsleq r1, r3, #4
	add r2, fp, fp, lsr #31
	orrne r0, r0, r3
	andeq r1, r1, #0xff
	orreq r0, r0, r1
	ldr r1, [sp, #0x14]
	add fp, fp, #1
	strb r0, [r1, r2, asr #1]
	mov r1, #0
	mov r0, r8
	mov r2, r1
	add r4, r4, #1
	blx sb
	mov r1, r0
	b _020EA930
_020EA780:
	add r4, r4, #1
	mov r0, r8
	mov r1, #0
	mov r2, r1
	blx sb
	mov r1, r0
	b _020EA930
_020EA79C:
	cmp r1, #0
	blt _020EA7AC
	cmp r1, #0x80
	blt _020EA7B4
_020EA7AC:
	mov r0, r1
	b _020EA7BC
_020EA7B4:
	ldr r0, _020EAB28 @ =0x0210E484
	ldrb r0, [r0, r1]
_020EA7BC:
	cmp r0, #0x50
	movne r5, #0x800
	bne _020EA930
	mov r1, #0
	mov r0, r8
	mov r2, r1
	mov sl, #0x20
	add r4, r4, #1
	blx sb
	mov r1, r0
	b _020EA930
_020EA7E8:
	cmp r1, #0x2d
	moveq r0, #1
	streq r0, [sp, #0xc]
	beq _020EA810
	cmp r1, #0x2b
	beq _020EA810
	mov r0, r8
	mov r2, #1
	blx sb
	sub r4, r4, #1
_020EA810:
	mov sl, #0x40
	add r4, r4, #1
	mov r0, r8
	mov r1, #0
	mov r2, r1
	blx sb
	mov r1, r0
	b _020EA930
_020EA830:
	cmp r1, #0
	blt _020EA840
	cmp r1, #0x80
	blt _020EA848
_020EA840:
	mov r0, #0
	b _020EA858
_020EA848:
	lsl r2, r1, #1
	ldr r0, _020EAB24 @ =0x0210E504
	ldrh r0, [r0, r2]
	and r0, r0, #8
_020EA858:
	cmp r0, #0
	moveq r5, #0x1000
	beq _020EA930
	cmp r1, #0x30
	movne sl, #0x100
	bne _020EA930
	mov r1, #0
	mov r0, r8
	mov r2, r1
	mov sl, #0x80
	add r4, r4, #1
	blx sb
	mov r1, r0
	b _020EA930
_020EA890:
	cmp r1, #0x30
	movne sl, #0x100
	bne _020EA930
	mov r1, #0
	mov r0, r8
	mov r2, r1
	add r4, r4, #1
	blx sb
	mov r1, r0
	b _020EA930
_020EA8B8:
	cmp r1, #0
	blt _020EA8C8
	cmp r1, #0x80
	blt _020EA8D0
_020EA8C8:
	mov r0, #0
	b _020EA8E0
_020EA8D0:
	lsl r2, r1, #1
	ldr r0, _020EAB24 @ =0x0210E504
	ldrh r0, [r0, r2]
	and r0, r0, #8
_020EA8E0:
	cmp r0, #0
	moveq r5, #0x800
	beq _020EA930
	ldr r0, [sp, #0x10]
	sub r2, r1, #0x30
	mov r1, #0xa
	mla r0, r1, r0, r2
	str r0, [sp, #0x10]
	ldr r1, _020EAB30 @ =0x00007FFF
	ldr r0, [sp, #0x20]
	add r4, r4, #1
	cmp r0, r1
	ldrgt r0, [sp, #0xd0]
	movgt r1, #1
	strgt r1, [r0]
	mov r1, #0
	mov r0, r8
	mov r2, r1
	blx sb
	mov r1, r0
_020EA930:
	ldr r0, [sp]
	cmp r4, r0
	bgt _020EA950
	mvn r0, #0
	cmp r1, r0
	beq _020EA950
	tst r5, #0x1800
	beq _020E9C44
_020EA950:
	cmp r5, #0x8000
	beq _020EA96C
	ldr r0, _020EAB34 @ =0x00000E2C
	tst r5, r0
	moveq r0, #1
	movne r0, #0
	b _020EA990
_020EA96C:
	sub r0, r4, #1
	cmp r0, #2
	ble _020EA984
	ldr r0, _020EAB38 @ =0x0000018E
	tst sl, r0
	bne _020EA98C
_020EA984:
	mov r0, #1
	b _020EA990
_020EA98C:
	mov r0, #0
_020EA990:
	cmp r0, #0
	movne r2, #0
	ldrne r0, [sp, #4]
	bne _020EA9B0
	ldr r0, [sp, #0x2c]
	sub r2, r4, #1
	add r2, r2, r0
	ldr r0, [sp, #4]
_020EA9B0:
	str r2, [r0]
	mov r0, r8
	mov r2, #1
	blx sb
	cmp sl, #0
	bne _020EABB4
	ldr r0, [sp, #0x24]
	ldrb r2, [sp, #0x84]
	cmp r0, #0
	ldrne r0, [sp, #0x20]
	rsbne r0, r0, #0
	strne r0, [sp, #0x20]
	add r0, sp, #0x85
	add r1, r0, r2
	b _020EA9F8
_020EA9EC:
	ldr r0, [sp, #0x1c]
	add r0, r0, #1
	str r0, [sp, #0x1c]
_020EA9F8:
	cmp r2, #0
	sub r2, r2, #1
	beq _020EAA10
	ldrb r0, [r1, #-1]!
	cmp r0, #0x30
	beq _020EA9EC
_020EAA10:
	add r0, r2, #1
	strb r0, [sp, #0x84]
	ands r2, r0, #0xff
	bne _020EAA34
	add r1, r2, #1
	strb r1, [sp, #0x84]
	add r0, sp, #0x85
	mov r1, #0x30
	strb r1, [r0, r2]
_020EAA34:
	ldr r1, [sp, #0x20]
	ldr r0, [sp, #0x1c]
	mov r2, #0x8000
	add r0, r1, r0
	rsb r2, r2, #0
	str r0, [sp, #0x20]
	cmp r0, r2
	blt _020EAA5C
	cmp r0, r2, lsr #17
	ble _020EAA68
_020EAA5C:
	ldr r0, [sp, #0xd0]
	mov r1, #1
	str r1, [r0]
_020EAA68:
	ldr r0, [sp, #0xd0]
	ldr r0, [r0]
	cmp r0, #0
	beq _020EAAC4
	ldr r0, [sp, #0x24]
	cmp r0, #0
	movne r0, #0
	addne sp, sp, #0xa8
	movne r1, r0
	popne {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, [sp, #0x28]
	cmp r0, #0
	ldreq r1, _020EAB3C @ =_021110F0
	addeq sp, sp, #0xa8
	ldmeq r1, {r0, r1}
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r1, _020EAB3C @ =_021110F0
	mov r0, #0
	ldm r1, {r2, r3}
	mov r1, r0
	bl FUN_020F116C
	add sp, sp, #0xa8
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020EAAC4:
	ldr r1, [sp, #0x20]
	add r0, sp, #0x80
	strh r1, [sp, #0x82]
	bl FUN_020EFBD0
	mov r4, r0
	mov r6, r1
	mov r0, #0
	mov r1, r0
	mov r2, r4
	mov r3, r6
	bl FUN_020F1A40
	beq _020EAB44
	mov r0, r4
	mov r1, r6
	mov r2, #0
	mov r3, #0x100000
	bl FUN_020F1918
	bhs _020EAB44
	ldr r0, [sp, #0xd0]
	mov r1, #1
	str r1, [r0]
	b _020EAB70
	.align 2, 0
_020EAB1C: .4byte 0x0210E631
_020EAB20: .4byte 0x0210E62C
_020EAB24: .4byte 0x0210E504
_020EAB28: .4byte 0x0210E484
_020EAB2C: .4byte _021110E8
_020EAB30: .4byte 0x00007FFF
_020EAB34: .4byte 0x00000E2C
_020EAB38: .4byte 0x0000018E
_020EAB3C: .4byte _021110F0
_020EAB40: .4byte 0x7FEFFFFF
_020EAB44:
	ldr r3, _020EAB40 @ =0x7FEFFFFF
	mov r0, r4
	mov r1, r6
	mvn r2, #0
	bl FUN_020F17DC
	bls _020EAB70
	ldr r0, [sp, #0xd0]
	mov r2, #1
	ldr r1, _020EAB3C @ =_021110F0
	str r2, [r0]
	ldm r1, {r4, r6}
_020EAB70:
	ldr r0, [sp, #0x28]
	cmp r0, #0
	beq _020EABA4
	ldr r0, _020EAB34 @ =0x00000E2C
	tst r5, r0
	beq _020EABA4
	mov r0, #0
	mov r1, r0
	mov r2, r4
	mov r3, r6
	bl FUN_020F116C
	mov r4, r0
	mov r6, r1
_020EABA4:
	add sp, sp, #0xa8
	mov r0, r4
	mov r1, r6
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020EABB4:
	ldr r0, [sp, #0xc]
	add r4, sp, #0x38
	cmp r0, #0
	ldrne r0, [sp, #0x10]
	ldrb r3, [sp, #0x45]
	rsbne r0, r0, #0
	strne r0, [sp, #0x10]
	ldr r1, [sp, #0x10]
	ldr r0, [sp, #8]
	mov r2, #0
	add r0, r1, r0, lsl #2
	str r0, [sp, #0x10]
	mov r1, #0x80
	b _020EABFC
_020EABEC:
	ldr r0, [sp, #0x10]
	add r2, r2, #1
	sub r0, r0, #1
	str r0, [sp, #0x10]
_020EABFC:
	cmp r2, #4
	bhs _020EAC0C
	tst r3, r1, asr r2
	beq _020EABEC
_020EAC0C:
	adds r5, r2, #1
	beq _020EAC58
	add r0, sp, #0x4c
	add r3, sp, #0x45
	str r0, [sp, #0x14]
	mov r1, #0
	cmp r0, r3
	blo _020EAC58
	rsb r6, r5, #8
_020EAC30:
	ldr r0, [sp, #0x14]
	ldrb r0, [r0]
	orr r2, r1, r0, lsl r5
	asr r1, r0, r6
	ldr r0, [sp, #0x14]
	and r1, r1, #0xff
	strb r2, [r0], #-1
	str r0, [sp, #0x14]
	cmp r0, r3
	bhs _020EAC30
_020EAC58:
	mov r2, #0
	mov r6, r2
	strb r2, [r4]
	strb r2, [r4, #1]
	strb r2, [r4, #2]
	strb r2, [r4, #3]
	strb r2, [r4, #4]
	strb r2, [r4, #5]
	strb r2, [r4, #6]
	strb r2, [r4, #7]
	mov r3, #0xc
	mov r7, #1
	mov r0, #0xff
	add r1, sp, #0x45
_020EAC90:
	add r5, r2, #8
	cmp r5, #0x34
	ldrb r5, [r1, r6]
	rsbhi r8, r2, #0x34
	and fp, r3, #7
	andhi r5, r5, r0, lsl r8
	andhi r5, r5, #0xff
	asr r8, r5, fp
	and sb, r8, #0xff
	ldrb sl, [r4, r7]
	rsb r8, fp, #8
	lsl r5, r5, r8
	orr sb, sl, sb
	strb sb, [r4, r7]
	add r7, r7, #1
	add r2, r2, #8
	ldrb r8, [r4, r7]
	and r5, r5, #0xff
	cmp r2, #0x34
	orr r5, r8, r5
	strb r5, [r4, r7]
	add r3, r3, #8
	add r6, r6, #1
	blo _020EAC90
	ldr r0, [sp, #0x10]
	mov r1, #0x800
	add r0, r0, #0xfe
	add r2, r0, #0x300
	rsb r1, r1, #0
	tst r2, r1
	beq _020EAD28
	ldr r2, [sp, #0xd0]
	mov r3, #1
	mov r0, #0
	add sp, sp, #0xa8
	mov r1, r0
	str r3, [r2]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020EAD28:
	ldrb r0, [r4, #1]
	lsl r2, r2, #0x15
	ldrb r1, [r4]
	orr r0, r0, r2, lsr #17
	strb r0, [r4, #1]
	ldr r0, [sp, #0x28]
	orr r1, r1, r2, lsr #25
	cmp r0, #0
	andne r0, r1, #0xff
	strb r1, [r4]
	orrne r0, r0, #0x80
	strbne r0, [r4]
	mov r3, #0
_020EAD5C:
	rsb r1, r3, #7
	ldrb r2, [r4, r3]
	ldrb r0, [r4, r1]
	strb r0, [r4, r3]
	add r3, r3, #1
	strb r2, [r4, r1]
	cmp r3, #4
	blt _020EAD5C
	ldm r4, {r0, r1}
	add sp, sp, #0xa8
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_020E9B3C

	arm_func_start FUN_020EAD88
FUN_020EAD88: @ 0x020EAD88
	push {r4, r5, r6, r7, lr}
	sub sp, sp, #0x14
	mov r7, r0
	mov r0, #0
	mov r6, r1
	str r0, [sp, #8]
	add r4, sp, #0xc
	str r7, [sp, #4]
	ldr r1, _020EAE5C @ =FUN_020E9350
	add r2, sp, #4
	add r3, sp, #0x10
	sub r0, r0, #0x80000001
	str r4, [sp]
	bl FUN_020E9B3C
	mov r5, r1
	mov r4, r0
	cmp r6, #0
	ldrne r0, [sp, #0x10]
	mov r1, r5
	addne r0, r7, r0
	strne r0, [r6]
	mov r0, r4
	bl FUN_020EEAA4
	ldr r2, [sp, #0xc]
	mov r6, r0
	mov r7, r1
	cmp r2, #0
	bne _020EAE40
	mov r0, #0
	mov r1, r0
	mov r2, r4
	mov r3, r5
	bl FUN_020F1A40
	beq _020EAE4C
	mov r0, r6
	mov r1, r7
	mov r2, #0
	mov r3, #0x100000
	bl FUN_020F1918
	blo _020EAE40
	ldr r3, _020EAE60 @ =0x7FEFFFFF
	mov r0, r6
	mov r1, r7
	mvn r2, #0
	bl FUN_020F17DC
	bls _020EAE4C
_020EAE40:
	ldr r0, _020EAE64 @ =0x021E58C0
	mov r1, #0x22
	str r1, [r0]
_020EAE4C:
	mov r0, r4
	mov r1, r5
	add sp, sp, #0x14
	pop {r4, r5, r6, r7, pc}
	.align 2, 0
_020EAE5C: .4byte FUN_020E9350
_020EAE60: .4byte 0x7FEFFFFF
_020EAE64: .4byte 0x021E58C0
	arm_func_end FUN_020EAD88

	arm_func_start FUN_020EAE68
FUN_020EAE68: @ 0x020EAE68
	ldr ip, _020EAE74 @ =FUN_020EAD88
	mov r1, #0
	bx ip
	.align 2, 0
_020EAE74: .4byte FUN_020EAD88
	arm_func_end FUN_020EAE68

	arm_func_start FUN_020EAE78
FUN_020EAE78: @ 0x020EAE78
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0xc
	ldr r4, [sp, #0x38]
	movs sb, r0
	ldr r0, [sp, #0x34]
	str r4, [sp, #0x38]
	mov r4, #0
	str r0, [sp, #0x34]
	ldr r0, [sp, #0x38]
	str r1, [sp]
	str r4, [r0]
	mov r0, r4
	str r0, [sp, #4]
	ldr r0, [sp, #0x34]
	mov r1, r4
	str r1, [r0]
	ldr r0, [sp, #0x30]
	str r4, [sp, #8]
	mov r8, r2
	mov r7, r3
	mov r5, r4
	mov sl, r4
	str r0, [sp, #0x30]
	mov r4, #1
	bmi _020EAEF8
	cmp sb, #1
	beq _020EAEF8
	cmp sb, #0x24
	bgt _020EAEF8
	ldr r0, [sp]
	cmp r0, #1
	bge _020EAF00
_020EAEF8:
	mov r4, #0x40
	b _020EAF1C
_020EAF00:
	ldr r1, [sp, #8]
	mov r0, r7
	mov r3, r1
	mov r2, r1
	add r5, r3, #1
	blx r8
	mov r6, r0
_020EAF1C:
	cmp sb, #0
	beq _020EAF34
	mov r1, sb
	mvn r0, #0
	bl FUN_020F2BA4
	str r0, [sp, #4]
_020EAF34:
	mvn fp, #0
	b _020EB1F4
_020EAF3C:
	cmp r4, #8
	bgt _020EAF74
	cmp r4, #0
	addge pc, pc, r4, lsl #2
	b _020EB1F4
_020EAF50: @ jump table
	b _020EB1F4 @ case 0
	b FUN_020EAF80 @ case 1
	b FUN_020EB02C @ case 2
	b _020EB1F4 @ case 3
	b FUN_020EB068 @ case 4
	b _020EB1F4 @ case 5
	b _020EB1F4 @ case 6
	b _020EB1F4 @ case 7
	b _020EB0A8 @ case 8
_020EAF74:
	cmp r4, #0x10
	beq _020EB0A8
	b _020EB1F4
	arm_func_end FUN_020EAE78

	arm_func_start FUN_020EAF80
FUN_020EAF80: @ 0x020EAF80
	cmp r6, #0
	blt _020EAF90
	cmp r6, #0x80
	blt _020EAF98
_020EAF90:
	mov r0, #0
	b _020EAFA8
_020EAF98:
	ldr r0, _020EB258 @ =0x0210E504
	lsl r1, r6, #1
	ldrh r0, [r0, r1]
	and r0, r0, #0x100
_020EAFA8:
	cmp r0, #0
	beq _020EAFD4
	mov r1, #0
	mov r0, r7
	mov r2, r1
	blx r8
	mov r6, r0
	ldr r0, [sp, #8]
	add r0, r0, #1
	str r0, [sp, #8]
	b _020EB1F4
_020EAFD4:
	cmp r6, #0x2b
	bne _020EAFF8
	mov r1, #0
	mov r0, r7
	mov r2, r1
	add r5, r5, #1
	blx r8
	mov r6, r0
	b _020EB024
_020EAFF8:
	cmp r6, #0x2d
	bne _020EB024
	mov r1, #0
	mov r0, r7
	mov r2, r1
	add r5, r5, #1
	blx r8
	mov r6, r0
	ldr r0, [sp, #0x34]
	mov r1, #1
	str r1, [r0]
_020EB024:
	mov r4, #2
	b _020EB1F4
	arm_func_end FUN_020EAF80

	arm_func_start FUN_020EB02C
FUN_020EB02C: @ 0x020EB02C
	cmp sb, #0
	cmpne sb, #0x10
	bne _020EB060
	cmp r6, #0x30
	bne _020EB060
	mov r1, #0
	mov r0, r7
	mov r2, r1
	mov r4, #4
	add r5, r5, #1
	blx r8
	mov r6, r0
	b _020EB1F4
_020EB060:
	mov r4, #8
	b _020EB1F4
	arm_func_end FUN_020EB02C

	arm_func_start FUN_020EB068
FUN_020EB068: @ 0x020EB068
	cmp r6, #0x58
	cmpne r6, #0x78
	bne _020EB098
	mov r1, #0
	mov r0, r7
	mov r2, r1
	mov sb, #0x10
	mov r4, #8
	add r5, r5, #1
	blx r8
	mov r6, r0
	b _020EB1F4
_020EB098:
	cmp sb, #0
	moveq sb, #8
	mov r4, #0x10
	b _020EB1F4
_020EB0A8:
	ldr r0, [sp, #4]
	cmp sb, #0
	moveq sb, #0xa
	cmp r0, #0
	bne _020EB0CC
	mov r0, fp
	mov r1, sb
	bl FUN_020F2BA4
	str r0, [sp, #4]
_020EB0CC:
	cmp r6, #0
	blt _020EB0DC
	cmp r6, #0x80
	blt _020EB0E4
_020EB0DC:
	mov r0, #0
	b _020EB0F4
_020EB0E4:
	ldr r0, _020EB258 @ =0x0210E504
	lsl r1, r6, #1
	ldrh r0, [r0, r1]
	and r0, r0, #8
_020EB0F4:
	cmp r0, #0
	beq _020EB11C
	sub r6, r6, #0x30
	cmp r6, sb
	blt _020EB1A4
	cmp r4, #0x10
	moveq r4, #0x20
	movne r4, #0x40
	add r6, r6, #0x30
	b _020EB1F4
_020EB11C:
	cmp r6, #0
	blt _020EB12C
	cmp r6, #0x80
	blt _020EB134
_020EB12C:
	mov r0, #0
	b _020EB144
_020EB134:
	ldr r0, _020EB258 @ =0x0210E504
	lsl r1, r6, #1
	ldrh r0, [r0, r1]
	and r0, r0, #1
_020EB144:
	cmp r0, #0
	beq _020EB178
	cmp r6, #0
	blt _020EB15C
	cmp r6, #0x80
	blt _020EB164
_020EB15C:
	mov r0, r6
	b _020EB16C
_020EB164:
	ldr r0, _020EB25C @ =0x0210E484
	ldrb r0, [r0, r6]
_020EB16C:
	sub r0, r0, #0x37
	cmp r0, sb
	blt _020EB188
_020EB178:
	cmp r4, #0x10
	moveq r4, #0x20
	movne r4, #0x40
	b _020EB1F4
_020EB188:
	cmp r6, #0
	blt _020EB1A0
	cmp r6, #0x80
	bge _020EB1A0
	ldr r0, _020EB25C @ =0x0210E484
	ldrb r6, [r0, r6]
_020EB1A0:
	sub r6, r6, #0x37
_020EB1A4:
	ldr r0, [sp, #4]
	mov r4, #0x10
	cmp sl, r0
	ldrhi r0, [sp, #0x38]
	movhi r1, #1
	strhi r1, [r0]
	mul r0, sl, sb
	mov sl, r0
	sub r0, fp, r0
	cmp r6, r0
	ldrhi r0, [sp, #0x38]
	movhi r1, #1
	strhi r1, [r0]
	mov r1, #0
	mov r0, r7
	mov r2, r1
	add sl, sl, r6
	add r5, r5, #1
	blx r8
	mov r6, r0
_020EB1F4:
	ldr r0, [sp]
	cmp r5, r0
	bgt _020EB210
	cmp r6, fp
	beq _020EB210
	tst r4, #0x60
	beq _020EAF3C
_020EB210:
	tst r4, #0x34
	bne _020EB228
	ldr r0, [sp, #0x30]
	mov sl, #0
	str sl, [r0]
	b _020EB23C
_020EB228:
	ldr r0, [sp, #8]
	sub r1, r5, #1
	add r1, r1, r0
	ldr r0, [sp, #0x30]
	str r1, [r0]
_020EB23C:
	mov r0, r7
	mov r1, r6
	mov r2, #1
	blx r8
	mov r0, sl
	add sp, sp, #0xc
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020EB258: .4byte 0x0210E504
_020EB25C: .4byte 0x0210E484
	arm_func_end FUN_020EB068

	arm_func_start FUN_020EB260
FUN_020EB260: @ 0x020EB260
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0x20
	ldr r4, [sp, #0x48]
	movs sb, r0
	ldr r0, [sp, #0x44]
	str r4, [sp, #0x48]
	mov r4, #0
	str r0, [sp, #0x44]
	ldr r0, [sp, #0x48]
	str r1, [sp]
	str r4, [r0]
	mov r0, r4
	str r0, [sp, #0x10]
	str r0, [sp, #0x14]
	str r0, [sp, #0xc]
	ldr r0, [sp, #0x44]
	mov r1, r4
	str r1, [r0]
	ldr r0, [sp, #0x40]
	str r4, [sp, #0x18]
	mov sl, r2
	str r3, [sp, #4]
	mov r6, r4
	mov r7, r4
	str r0, [sp, #0x40]
	mov r5, #1
	bmi _020EB2E8
	cmp sb, #1
	beq _020EB2E8
	cmp sb, #0x24
	bgt _020EB2E8
	ldr r0, [sp]
	cmp r0, #1
	bge _020EB2F0
_020EB2E8:
	mov r5, #0x40
	b _020EB304
_020EB2F0:
	mov r0, r3
	mov r2, r4
	add r6, r1, #1
	blx sl
	mov r8, r0
_020EB304:
	cmp sb, #0
	beq _020EB328
	mvn r0, #0
	mov r1, r0
	asr r3, sb, #0x1f
	mov r2, sb
	bl FUN_020F2900
	mov r7, r0
	str r1, [sp, #0xc]
_020EB328:
	mvn r0, #0
	str r0, [sp, #0x1c]
	mov r4, #0
	b _020EB650
_020EB338:
	cmp r5, #8
	bgt _020EB370
	cmp r5, #0
	addge pc, pc, r5, lsl #2
	b _020EB650
_020EB34C: @ jump table
	b _020EB650 @ case 0
	b FUN_020EB37C @ case 1
	b FUN_020EB428 @ case 2
	b _020EB650 @ case 3
	b FUN_020EB464 @ case 4
	b _020EB650 @ case 5
	b _020EB650 @ case 6
	b _020EB650 @ case 7
	b _020EB4A4 @ case 8
_020EB370:
	cmp r5, #0x10
	beq _020EB4A4
	b _020EB650
	arm_func_end FUN_020EB260

	arm_func_start FUN_020EB37C
FUN_020EB37C: @ 0x020EB37C
	cmp r8, #0
	blt _020EB38C
	cmp r8, #0x80
	blt _020EB394
_020EB38C:
	mov r0, #0
	b _020EB3A4
_020EB394:
	ldr r0, _020EB6C4 @ =0x0210E504
	lsl r1, r8, #1
	ldrh r0, [r0, r1]
	and r0, r0, #0x100
_020EB3A4:
	cmp r0, #0
	beq _020EB3D0
	mov r1, #0
	ldr r0, [sp, #4]
	mov r2, r1
	blx sl
	mov r8, r0
	ldr r0, [sp, #0x18]
	add r0, r0, #1
	str r0, [sp, #0x18]
	b _020EB650
_020EB3D0:
	cmp r8, #0x2b
	bne _020EB3F4
	mov r1, #0
	ldr r0, [sp, #4]
	mov r2, r1
	add r6, r6, #1
	blx sl
	mov r8, r0
	b _020EB420
_020EB3F4:
	cmp r8, #0x2d
	bne _020EB420
	mov r1, #0
	ldr r0, [sp, #4]
	mov r2, r1
	add r6, r6, #1
	blx sl
	mov r8, r0
	ldr r0, [sp, #0x44]
	mov r1, #1
	str r1, [r0]
_020EB420:
	mov r5, #2
	b _020EB650
	arm_func_end FUN_020EB37C

	arm_func_start FUN_020EB428
FUN_020EB428: @ 0x020EB428
	cmp sb, #0
	cmpne sb, #0x10
	bne _020EB45C
	cmp r8, #0x30
	bne _020EB45C
	mov r1, #0
	ldr r0, [sp, #4]
	mov r2, r1
	mov r5, #4
	add r6, r6, #1
	blx sl
	mov r8, r0
	b _020EB650
_020EB45C:
	mov r5, #8
	b _020EB650
	arm_func_end FUN_020EB428

	arm_func_start FUN_020EB464
FUN_020EB464: @ 0x020EB464
	cmp r8, #0x58
	cmpne r8, #0x78
	bne _020EB494
	mov r1, #0
	ldr r0, [sp, #4]
	mov r2, r1
	mov sb, #0x10
	mov r5, #8
	add r6, r6, #1
	blx sl
	mov r8, r0
	b _020EB650
_020EB494:
	cmp sb, #0
	moveq sb, #8
	mov r5, #0x10
	b _020EB650
_020EB4A4:
	ldr r1, [sp, #0xc]
	mov r0, #0
	cmp sb, #0
	moveq sb, #0xa
	cmp r1, r0
	cmpeq r7, r4
	bne _020EB4DC
	ldr r0, [sp, #0x1c]
	asr r3, sb, #0x1f
	mov r1, r0
	mov r2, sb
	bl FUN_020F2900
	mov r7, r0
	str r1, [sp, #0xc]
_020EB4DC:
	cmp r8, #0
	blt _020EB4EC
	cmp r8, #0x80
	blt _020EB4F4
_020EB4EC:
	mov r0, #0
	b _020EB504
_020EB4F4:
	ldr r0, _020EB6C4 @ =0x0210E504
	lsl r1, r8, #1
	ldrh r0, [r0, r1]
	and r0, r0, #8
_020EB504:
	cmp r0, #0
	beq _020EB52C
	sub r8, r8, #0x30
	cmp r8, sb
	blt _020EB5B4
	cmp r5, #0x10
	moveq r5, #0x20
	movne r5, #0x40
	add r8, r8, #0x30
	b _020EB650
_020EB52C:
	cmp r8, #0
	blt _020EB53C
	cmp r8, #0x80
	blt _020EB544
_020EB53C:
	mov r0, #0
	b _020EB554
_020EB544:
	ldr r0, _020EB6C4 @ =0x0210E504
	lsl r1, r8, #1
	ldrh r0, [r0, r1]
	and r0, r0, #1
_020EB554:
	cmp r0, #0
	beq _020EB588
	cmp r8, #0
	blt _020EB56C
	cmp r8, #0x80
	blt _020EB574
_020EB56C:
	mov r0, r8
	b _020EB57C
_020EB574:
	ldr r0, _020EB6C8 @ =0x0210E484
	ldrb r0, [r0, r8]
_020EB57C:
	sub r0, r0, #0x37
	cmp r0, sb
	blt _020EB598
_020EB588:
	cmp r5, #0x10
	moveq r5, #0x20
	movne r5, #0x40
	b _020EB650
_020EB598:
	cmp r8, #0
	blt _020EB5B0
	cmp r8, #0x80
	bge _020EB5B0
	ldr r0, _020EB6C8 @ =0x0210E484
	ldrb r8, [r0, r8]
_020EB5B0:
	sub r8, r8, #0x37
_020EB5B4:
	ldr r1, [sp, #0x14]
	ldr r0, [sp, #0xc]
	ldr r3, [sp, #0x10]
	cmp r1, r0
	ldr r0, [sp, #0x10]
	asr r5, sb, #0x1f
	cmpeq r0, r7
	ldrhi r0, [sp, #0x48]
	movhi r1, #1
	strhi r1, [r0]
	umull r0, r1, r3, sb
	mla r1, r3, r5, r1
	ldr r3, [sp, #0x14]
	str r0, [sp, #0x10]
	mla r1, r3, sb, r1
	ldr r3, [sp, #0x1c]
	asr r2, r8, #0x1f
	subs r3, r3, r0
	ldr r0, [sp, #0x1c]
	str r1, [sp, #0x14]
	sbc r0, r0, r1
	cmp r2, r0
	cmpeq r8, r3
	ldrhi r0, [sp, #0x48]
	movhi r1, #1
	strhi r1, [r0]
	ldr r0, [sp, #0x10]
	mov r1, #0
	adds r0, r0, r8
	str r0, [sp, #0x10]
	ldr r0, [sp, #0x14]
	mov r5, #0x10
	adc r0, r0, r2
	str r0, [sp, #0x14]
	ldr r0, [sp, #4]
	mov r2, r1
	add r6, r6, #1
	blx sl
	mov r8, r0
_020EB650:
	ldr r0, [sp]
	cmp r6, r0
	bgt _020EB670
	ldr r0, [sp, #0x1c]
	cmp r8, r0
	beq _020EB670
	tst r5, #0x60
	beq _020EB338
_020EB670:
	tst r5, #0x34
	bne _020EB690
	mov r0, #0
	str r0, [sp, #0x10]
	str r0, [sp, #0x14]
	mov r1, r0
	ldr r0, [sp, #0x40]
	b _020EB6A0
_020EB690:
	ldr r0, [sp, #0x18]
	sub r1, r6, #1
	add r1, r1, r0
	ldr r0, [sp, #0x40]
_020EB6A0:
	str r1, [r0]
	ldr r0, [sp, #4]
	mov r1, r8
	mov r2, #1
	blx sl
	ldr r0, [sp, #0x10]
	ldr r1, [sp, #0x14]
	add sp, sp, #0x20
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0
_020EB6C4: .4byte 0x0210E504
_020EB6C8: .4byte 0x0210E484
	arm_func_end FUN_020EB464

	arm_func_start FUN_020EB6CC
FUN_020EB6CC: @ 0x020EB6CC
	push {r3, r4, r5, lr}
	sub sp, sp, #0x20
	mov r5, r0
	mov lr, #0
	mov r0, r2
	mov r4, r1
	add r2, sp, #0x1c
	str r5, [sp, #0xc]
	str lr, [sp, #0x10]
	str r2, [sp]
	add r1, sp, #0x18
	str r1, [sp, #4]
	add ip, sp, #0x14
	ldr r2, _020EB75C @ =FUN_020E9350
	add r3, sp, #0xc
	sub r1, lr, #0x80000001
	str ip, [sp, #8]
	bl FUN_020EAE78
	cmp r4, #0
	ldrne r1, [sp, #0x1c]
	addne r1, r5, r1
	strne r1, [r4]
	ldr r1, [sp, #0x14]
	cmp r1, #0
	beq _020EB748
	ldr r0, _020EB760 @ =0x021E58C0
	mov r1, #0x22
	str r1, [r0]
	add sp, sp, #0x20
	mvn r0, #0
	pop {r3, r4, r5, pc}
_020EB748:
	ldr r1, [sp, #0x18]
	cmp r1, #0
	rsbne r0, r0, #0
	add sp, sp, #0x20
	pop {r3, r4, r5, pc}
	.align 2, 0
_020EB75C: .4byte FUN_020E9350
_020EB760: .4byte 0x021E58C0
	arm_func_end FUN_020EB6CC

	arm_func_start FUN_020EB764
FUN_020EB764: @ 0x020EB764
	push {r3, r4, r5, lr}
	sub sp, sp, #0x20
	mov r5, r0
	mov lr, #0
	mov r0, r2
	mov r4, r1
	add r2, sp, #0x1c
	str r5, [sp, #0xc]
	str lr, [sp, #0x10]
	str r2, [sp]
	add r1, sp, #0x18
	str r1, [sp, #4]
	add ip, sp, #0x14
	ldr r2, _020EB824 @ =FUN_020E9350
	add r3, sp, #0xc
	sub r1, lr, #0x80000001
	str ip, [sp, #8]
	bl FUN_020EAE78
	cmp r4, #0
	ldrne r1, [sp, #0x1c]
	addne r1, r5, r1
	strne r1, [r4]
	ldr r1, [sp, #0x14]
	cmp r1, #0
	bne _020EB7F0
	ldr r2, [sp, #0x18]
	cmp r2, #0
	bne _020EB7E0
	mvn r1, #0x80000000
	cmp r0, r1
	bhi _020EB7F0
_020EB7E0:
	cmp r2, #0
	beq _020EB814
	cmp r0, #0x80000000
	bls _020EB814
_020EB7F0:
	ldr r0, [sp, #0x18]
	ldr r1, _020EB828 @ =0x021E58C0
	mov r2, #0x22
	cmp r0, #0
	movne r0, #0x80000000
	str r2, [r1]
	add sp, sp, #0x20
	mvneq r0, #0x80000000
	pop {r3, r4, r5, pc}
_020EB814:
	cmp r2, #0
	rsbne r0, r0, #0
	add sp, sp, #0x20
	pop {r3, r4, r5, pc}
	.align 2, 0
_020EB824: .4byte FUN_020E9350
_020EB828: .4byte 0x021E58C0
	arm_func_end FUN_020EB764

	arm_func_start FUN_020EB82C
FUN_020EB82C: @ 0x020EB82C
	ldr ip, _020EB83C @ =FUN_020EB764
	mov r1, #0
	mov r2, #0xa
	bx ip
	.align 2, 0
_020EB83C: .4byte FUN_020EB764
	arm_func_end FUN_020EB82C

	arm_func_start FUN_020EB840
FUN_020EB840: @ 0x020EB840
	cmp r0, #0
	beq _020EB858
	ldr r3, [r0, #4]
	lsl r2, r3, #0x16
	lsrs r2, r2, #0x1d
	bne _020EB860
_020EB858:
	mov r0, #0
	bx lr
_020EB860:
	lsl r2, r3, #0x14
	lsrs r2, r2, #0x1e
	beq _020EB880
	cmp r2, #1
	beq _020EB8A8
	cmp r2, #2
	moveq r1, #1
	b _020EB8AC
_020EB880:
	cmp r1, #0
	ble _020EB898
	bic r2, r3, #0xc00
	orr r2, r2, #0x800
	str r2, [r0, #4]
	b _020EB8AC
_020EB898:
	biclt r2, r3, #0xc00
	orrlt r2, r2, #0x400
	strlt r2, [r0, #4]
	b _020EB8AC
_020EB8A8:
	mvn r1, #0
_020EB8AC:
	mov r0, r1
	bx lr
	arm_func_end FUN_020EB840

	arm_func_start FUN_020EB8B4
FUN_020EB8B4: @ 0x020EB8B4
	ldr ip, _020EB8C0 @ =FUN_020E5AD8
	lsl r2, r2, #1
	bx ip
	.align 2, 0
_020EB8C0: .4byte FUN_020E5AD8
	arm_func_end FUN_020EB8B4

	arm_func_start FUN_020EB8C4
FUN_020EB8C4: @ 0x020EB8C4
	cmp r2, #0
	beq _020EB8E4
_020EB8CC:
	ldrh r3, [r0]
	cmp r3, r1
	bxeq lr
	add r0, r0, #2
	subs r2, r2, #1
	bne _020EB8CC
_020EB8E4:
	mov r0, #0
	bx lr
	arm_func_end FUN_020EB8C4

	arm_func_start FUN_020EB8EC
FUN_020EB8EC: @ 0x020EB8EC
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x10
	ldrh r3, [r0, #2]
	mov r4, #0
	mov r5, #1
	mov lr, r2
	strb r5, [sp]
	strb r4, [sp, #1]
	strb r4, [sp, #2]
	strb r4, [sp, #3]
	strb r4, [sp, #4]
	str r4, [sp, #8]
	str r4, [sp, #0xc]
	cmp r3, #0x25
	add ip, r0, #2
	bne _020EB948
	add r0, sp, #0
	strh r3, [sp, #6]
	ldm r0, {r0, r1, r2, r3}
	stm lr, {r0, r1, r2, r3}
	add sp, sp, #0x10
	add r0, ip, #2
	pop {r4, r5, r6, r7, r8, pc}
_020EB948:
	mov r2, #2
	mov r0, r4
	mov r5, r2
	mov r6, r4
	mov r7, #1
_020EB95C:
	mov r8, r7
	cmp r3, #0x2b
	bgt _020EB98C
	bge _020EB9B4
	cmp r3, #0x23
	bgt _020EB9E4
	cmp r3, #0x20
	blt _020EB9E4
	beq _020EB9BC
	cmp r3, #0x23
	beq _020EB9CC
	b _020EB9E4
_020EB98C:
	cmp r3, #0x30
	bgt _020EB9E4
	cmp r3, #0x2d
	blt _020EB9E4
	beq _020EB9AC
	cmp r3, #0x30
	beq _020EB9D4
	b _020EB9E4
_020EB9AC:
	strb r6, [sp]
	b _020EB9E8
_020EB9B4:
	strb r7, [sp, #1]
	b _020EB9E8
_020EB9BC:
	ldrb r4, [sp, #1]
	cmp r4, #1
	strbne r5, [sp, #1]
	b _020EB9E8
_020EB9CC:
	strb r7, [sp, #3]
	b _020EB9E8
_020EB9D4:
	ldrb r4, [sp]
	cmp r4, #0
	strbne r2, [sp]
	b _020EB9E8
_020EB9E4:
	mov r8, r0
_020EB9E8:
	cmp r8, #0
	ldrhne r3, [ip, #2]!
	bne _020EB95C
	cmp r3, #0x2a
	bne _020EBA30
	ldr r0, [r1]
	add r0, r0, #4
	str r0, [r1]
	ldr r0, [r0, #-4]
	str r0, [sp, #8]
	cmp r0, #0
	bge _020EBA28
	rsb r0, r0, #0
	mov r2, #0
	strb r2, [sp]
	str r0, [sp, #8]
_020EBA28:
	ldrh r3, [ip, #2]!
	b _020EBA74
_020EBA30:
	mov r2, #0
	ldr r5, _020EBE58 @ =0x0210E73C
	mov r0, #0xa
	b _020EBA54
_020EBA40:
	ldr r4, [sp, #8]
	sub r3, r3, #0x30
	mla r6, r4, r0, r3
	ldrh r3, [ip, #2]!
	str r6, [sp, #8]
_020EBA54:
	cmp r3, #0x80
	movhs r4, r2
	bhs _020EBA6C
	lsl r4, r3, #1
	ldrh r4, [r5, r4]
	and r4, r4, #8
_020EBA6C:
	cmp r4, #0
	bne _020EBA40
_020EBA74:
	ldr r2, [sp, #8]
	ldr r0, _020EBE5C @ =0x000001FD
	cmp r2, r0
	ble _020EBAA4
	ldr r1, _020EBE60 @ =0x0000FFFF
	add r0, sp, #0
	strh r1, [sp, #6]
	ldm r0, {r0, r1, r2, r3}
	stm lr, {r0, r1, r2, r3}
	add sp, sp, #0x10
	add r0, ip, #2
	pop {r4, r5, r6, r7, r8, pc}
_020EBAA4:
	cmp r3, #0x2e
	bne _020EBB2C
	ldrh r3, [ip, #2]!
	mov r0, #1
	strb r0, [sp, #2]
	cmp r3, #0x2a
	bne _020EBAE8
	ldr r0, [r1]
	add r0, r0, #4
	str r0, [r1]
	ldr r0, [r0, #-4]
	ldrh r3, [ip, #2]!
	str r0, [sp, #0xc]
	cmp r0, #0
	movlt r0, #0
	strblt r0, [sp, #2]
	b _020EBB2C
_020EBAE8:
	mov r1, #0
	ldr r4, _020EBE58 @ =0x0210E73C
	mov r0, #0xa
	b _020EBB0C
_020EBAF8:
	ldr r2, [sp, #0xc]
	sub r3, r3, #0x30
	mla r5, r2, r0, r3
	ldrh r3, [ip, #2]!
	str r5, [sp, #0xc]
_020EBB0C:
	cmp r3, #0x80
	movhs r2, r1
	bhs _020EBB24
	lsl r2, r3, #1
	ldrh r2, [r4, r2]
	and r2, r2, #8
_020EBB24:
	cmp r2, #0
	bne _020EBAF8
_020EBB2C:
	cmp r3, #0x6c
	mov r0, #1
	bgt _020EBB64
	cmp r3, #0x68
	blt _020EBB58
	beq _020EBB80
	cmp r3, #0x6a
	beq _020EBBCC
	cmp r3, #0x6c
	beq _020EBB9C
	b _020EBBF0
_020EBB58:
	cmp r3, #0x4c
	beq _020EBBC0
	b _020EBBF0
_020EBB64:
	cmp r3, #0x74
	bgt _020EBB74
	beq _020EBBD8
	b _020EBBF0
_020EBB74:
	cmp r3, #0x7a
	beq _020EBBE4
	b _020EBBF0
_020EBB80:
	ldrh r1, [ip, #2]
	mov r2, #2
	strb r2, [sp, #4]
	cmp r1, #0x68
	strbeq r0, [sp, #4]
	ldrheq r3, [ip, #2]!
	b _020EBBF4
_020EBB9C:
	ldrh r1, [ip, #2]
	mov r2, #3
	strb r2, [sp, #4]
	cmp r1, #0x6c
	bne _020EBBF4
	mov r1, #4
	strb r1, [sp, #4]
	ldrh r3, [ip, #2]!
	b _020EBBF4
_020EBBC0:
	mov r1, #9
	strb r1, [sp, #4]
	b _020EBBF4
_020EBBCC:
	mov r1, #6
	strb r1, [sp, #4]
	b _020EBBF4
_020EBBD8:
	mov r1, #8
	strb r1, [sp, #4]
	b _020EBBF4
_020EBBE4:
	mov r1, #7
	strb r1, [sp, #4]
	b _020EBBF4
_020EBBF0:
	mov r0, #0
_020EBBF4:
	cmp r0, #0
	ldrhne r3, [ip, #2]!
	strh r3, [sp, #6]
	cmp r3, #0x61
	bgt _020EBC48
	bge _020EBD2C
	cmp r3, #0x47
	bgt _020EBC3C
	subs r0, r3, #0x41
	addpl pc, pc, r0, lsl #2
	b _020EBE38
_020EBC20: @ jump table
	b _020EBD2C @ case 0
	b _020EBE38 @ case 1
	b _020EBE38 @ case 2
	b _020EBE38 @ case 3
	b _020EBD74 @ case 4
	b _020EBCF4 @ case 5
	b _020EBD64 @ case 6
_020EBC3C:
	cmp r3, #0x58
	beq _020EBCBC
	b _020EBE38
_020EBC48:
	cmp r3, #0x63
	bgt _020EBC58
	beq _020EBDD4
	b _020EBE38
_020EBC58:
	sub r0, r3, #0x64
	cmp r0, #0x14
	addls pc, pc, r0, lsl #2
	b _020EBE38
_020EBC68: @ jump table
	b _020EBCBC @ case 0
	b _020EBD74 @ case 1
	b _020EBCF4 @ case 2
	b _020EBD64 @ case 3
	b _020EBE38 @ case 4
	b _020EBCBC @ case 5
	b _020EBE38 @ case 6
	b _020EBE38 @ case 7
	b _020EBE38 @ case 8
	b _020EBE38 @ case 9
	b _020EBE24 @ case 10
	b _020EBCBC @ case 11
	b _020EBDB0 @ case 12
	b _020EBE38 @ case 13
	b _020EBE38 @ case 14
	b _020EBE00 @ case 15
	b _020EBE38 @ case 16
	b _020EBCBC @ case 17
	b _020EBE38 @ case 18
	b _020EBE38 @ case 19
	b _020EBCBC @ case 20
_020EBCBC:
	ldrb r0, [sp, #4]
	cmp r0, #9
	moveq r0, #4
	strbeq r0, [sp, #4]
	ldrb r0, [sp, #2]
	cmp r0, #0
	moveq r0, #1
	streq r0, [sp, #0xc]
	beq _020EBE40
	ldrb r0, [sp]
	cmp r0, #2
	moveq r0, #1
	strbeq r0, [sp]
	b _020EBE40
_020EBCF4:
	ldrb r0, [sp, #4]
	cmp r0, #2
	cmpne r0, #6
	cmpne r0, #7
	cmpne r0, #8
	cmpne r0, #4
	ldreq r0, _020EBE60 @ =0x0000FFFF
	strheq r0, [sp, #6]
	beq _020EBE40
	ldrb r0, [sp, #2]
	cmp r0, #0
	moveq r0, #6
	streq r0, [sp, #0xc]
	b _020EBE40
_020EBD2C:
	ldrb r0, [sp, #2]
	cmp r0, #0
	moveq r0, #0xd
	streq r0, [sp, #0xc]
	ldrb r0, [sp, #4]
	cmp r0, #2
	cmpne r0, #6
	cmpne r0, #7
	cmpne r0, #8
	cmpne r0, #4
	cmpne r0, #1
	ldreq r0, _020EBE60 @ =0x0000FFFF
	strheq r0, [sp, #6]
	b _020EBE40
_020EBD64:
	ldr r0, [sp, #0xc]
	cmp r0, #0
	moveq r0, #1
	streq r0, [sp, #0xc]
_020EBD74:
	ldrb r0, [sp, #4]
	cmp r0, #2
	cmpne r0, #6
	cmpne r0, #7
	cmpne r0, #8
	cmpne r0, #4
	cmpne r0, #1
	ldreq r0, _020EBE60 @ =0x0000FFFF
	strheq r0, [sp, #6]
	beq _020EBE40
	ldrb r0, [sp, #2]
	cmp r0, #0
	moveq r0, #6
	streq r0, [sp, #0xc]
	b _020EBE40
_020EBDB0:
	mov r3, #3
	mov r2, #1
	mov r1, #0x78
	mov r0, #8
	strb r3, [sp, #4]
	strb r2, [sp, #3]
	strh r1, [sp, #6]
	str r0, [sp, #0xc]
	b _020EBE40
_020EBDD4:
	ldrb r1, [sp, #4]
	cmp r1, #3
	moveq r0, #5
	strbeq r0, [sp, #4]
	beq _020EBE40
	ldrb r0, [sp, #2]
	cmp r0, #0
	cmpeq r1, #0
	ldrne r0, _020EBE60 @ =0x0000FFFF
	strhne r0, [sp, #6]
	b _020EBE40
_020EBE00:
	ldrb r0, [sp, #4]
	cmp r0, #3
	moveq r0, #5
	strbeq r0, [sp, #4]
	beq _020EBE40
	cmp r0, #0
	ldrne r0, _020EBE60 @ =0x0000FFFF
	strhne r0, [sp, #6]
	b _020EBE40
_020EBE24:
	ldrb r0, [sp, #4]
	cmp r0, #9
	moveq r0, #4
	strbeq r0, [sp, #4]
	b _020EBE40
_020EBE38:
	ldr r0, _020EBE60 @ =0x0000FFFF
	strh r0, [sp, #6]
_020EBE40:
	add r0, sp, #0
	ldm r0, {r0, r1, r2, r3}
	stm lr, {r0, r1, r2, r3}
	add r0, ip, #2
	add sp, sp, #0x10
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0
_020EBE58: .4byte 0x0210E73C
_020EBE5C: .4byte 0x000001FD
_020EBE60: .4byte 0x0000FFFF
	arm_func_end FUN_020EB8EC

	arm_func_start FUN_020EBE64
FUN_020EBE64: @ 0x020EBE64
	push {r0, r1, r2, r3}
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x10
	movs sl, r0
	mov r0, #0
	mov r5, r1
	str r0, [sp, #0xc]
	ldr r7, [sp, #0x4c]
	mov r6, r0
	strh r0, [r5, #-2]!
	ldrb r0, [sp, #0x43]
	str r1, [sp]
	ldrh r8, [sp, #0x46]
	str r0, [sp, #4]
	ldr r0, [sp, #0x48]
	ldrb fp, [sp, #0x41]
	str r0, [sp, #8]
	cmpeq r7, #0
	bne _020EBED8
	ldr r0, [sp, #4]
	cmp r0, #0
	beq _020EBEC4
	cmp r8, #0x6f
	beq _020EBED8
_020EBEC4:
	add sp, sp, #0x10
	mov r0, r5
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_020EBED8:
	cmp r8, #0x69
	bgt _020EBF00
	bge _020EBF34
	cmp r8, #0x58
	bgt _020EBEF4
	beq _020EBF60
	b _020EBF68
_020EBEF4:
	cmp r8, #0x64
	beq _020EBF34
	b _020EBF68
_020EBF00:
	cmp r8, #0x6f
	bgt _020EBF14
	moveq r4, #8
	moveq fp, #0
	b _020EBF68
_020EBF14:
	cmp r8, #0x78
	bgt _020EBF68
	cmp r8, #0x75
	blt _020EBF68
	beq _020EBF54
	cmp r8, #0x78
	beq _020EBF60
	b _020EBF68
_020EBF34:
	cmp sl, #0
	mov r4, #0xa
	bge _020EBF68
	mov r0, #1
	cmp sl, #0x80000000
	rsbne sl, sl, #0
	str r0, [sp, #0xc]
	b _020EBF68
_020EBF54:
	mov r4, #0xa
	mov fp, #0
	b _020EBF68
_020EBF60:
	mov r4, #0x10
	mov fp, #0
_020EBF68:
	mov r0, sl
	mov r1, r4
	bl FUN_020F2BA4
	mov sb, r1
	mov r0, sl
	mov r1, r4
	bl FUN_020F2BA4
	cmp sb, #0xa
	mov sl, r0
	addlt sb, sb, #0x30
	blt _020EBFA0
	cmp r8, #0x78
	addeq sb, sb, #0x57
	addne sb, sb, #0x37
_020EBFA0:
	cmp sl, #0
	strh sb, [r5, #-2]!
	add r6, r6, #1
	bne _020EBF68
	cmp r4, #8
	bne _020EBFD4
	ldr r0, [sp, #4]
	cmp r0, #0
	ldrhne r0, [r5]
	cmpne r0, #0x30
	movne r0, #0x30
	strhne r0, [r5, #-2]!
	addne r6, r6, #1
_020EBFD4:
	ldrb r0, [sp, #0x40]
	cmp r0, #2
	bne _020EC008
	ldr r0, [sp, #0xc]
	ldr r7, [sp, #8]
	cmp r0, #0
	cmpeq fp, #0
	subne r7, r7, #1
	cmp r4, #0x10
	bne _020EC008
	ldr r0, [sp, #4]
	cmp r0, #0
	subne r7, r7, #2
_020EC008:
	ldr r0, [sp]
	ldr r1, _020EC0B0 @ =0x000001FD
	sub r0, r0, r5
	add r0, r0, r0, lsr #31
	add r0, r7, r0, asr #1
	cmp r0, r1
	addgt sp, sp, #0x10
	movgt r0, #0
	popgt {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	addgt sp, sp, #0x10
	bxgt lr
	cmp r6, r7
	bge _020EC050
	mov r0, #0x30
_020EC040:
	add r6, r6, #1
	cmp r6, r7
	strh r0, [r5, #-2]!
	blt _020EC040
_020EC050:
	cmp r4, #0x10
	bne _020EC06C
	ldr r0, [sp, #4]
	cmp r0, #0
	movne r0, #0x30
	strhne r8, [r5, #-2]
	strhne r0, [r5, #-4]!
_020EC06C:
	ldr r0, [sp, #0xc]
	cmp r0, #0
	movne r0, #0x2d
	strhne r0, [r5, #-2]!
	bne _020EC09C
	cmp fp, #1
	moveq r0, #0x2b
	strheq r0, [r5, #-2]!
	beq _020EC09C
	cmp fp, #2
	moveq r0, #0x20
	strheq r0, [r5, #-2]!
_020EC09C:
	mov r0, r5
	add sp, sp, #0x10
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
	.align 2, 0
_020EC0B0: .4byte 0x000001FD
	arm_func_end FUN_020EBE64

	arm_func_start FUN_020EC0B4
FUN_020EC0B4: @ 0x020EC0B4
	push {r0, r1, r2, r3}
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x1c
	mov sb, r1
	mov r1, #0
	mov sl, r0
	mov r8, r2
	mov r0, r1
	strh r0, [r8, #-2]!
	ldr r0, [sp, #0x58]
	cmp sb, #0
	str r0, [sp, #0x14]
	ldrb r0, [sp, #0x4f]
	cmpeq sl, #0
	str r2, [sp]
	str r0, [sp, #4]
	ldrh r0, [sp, #0x52]
	str r1, [sp, #0x18]
	mov fp, r1
	str r0, [sp, #8]
	ldr r0, [sp, #0x54]
	str r0, [sp, #0xc]
	ldrb r0, [sp, #0x4d]
	str r0, [sp, #0x10]
	ldreq r0, [sp, #0x14]
	cmpeq r0, #0
	bne _020EC14C
	ldr r0, [sp, #4]
	cmp r0, #0
	beq _020EC138
	ldr r0, [sp, #8]
	cmp r0, #0x6f
	beq _020EC14C
_020EC138:
	add sp, sp, #0x1c
	mov r0, r8
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_020EC14C:
	ldr r0, [sp, #8]
	cmp r0, #0x69
	bgt _020EC178
	bge _020EC1A8
	cmp r0, #0x58
	bgt _020EC16C
	beq _020EC1FC
	b _020EC208
_020EC16C:
	cmp r0, #0x64
	beq _020EC1A8
	b _020EC208
_020EC178:
	cmp r0, #0x6f
	bgt _020EC188
	beq _020EC1DC
	b _020EC208
_020EC188:
	cmp r0, #0x78
	bgt _020EC208
	cmp r0, #0x75
	blt _020EC208
	beq _020EC1EC
	cmp r0, #0x78
	beq _020EC1FC
	b _020EC208
_020EC1A8:
	subs r0, sl, #0
	sbcs r0, sb, #0
	mov r7, #0xa
	mov r6, #0
	bge _020EC208
	cmp sb, #0x80000000
	cmpeq sl, r6
	beq _020EC1D0
	rsbs sl, sl, #0
	rsc sb, sb, #0
_020EC1D0:
	mov r0, #1
	str r0, [sp, #0x18]
	b _020EC208
_020EC1DC:
	mov r6, #0
	str r6, [sp, #0x10]
	mov r7, #8
	b _020EC208
_020EC1EC:
	mov r6, #0
	str r6, [sp, #0x10]
	mov r7, #0xa
	b _020EC208
_020EC1FC:
	mov r6, #0
	str r6, [sp, #0x10]
	mov r7, #0x10
_020EC208:
	mov r4, #0
_020EC20C:
	mov r0, sl
	mov r1, sb
	mov r2, r7
	mov r3, r6
	bl FUN_020F290C
	mov r5, r0
	mov r0, sl
	mov r1, sb
	mov r2, r7
	mov r3, r6
	bl FUN_020F2900
	mov sl, r0
	cmp r5, #0xa
	mov sb, r1
	addlt r0, r5, #0x30
	blt _020EC25C
	ldr r0, [sp, #8]
	cmp r0, #0x78
	addeq r0, r5, #0x57
	addne r0, r5, #0x37
_020EC25C:
	strh r0, [r8, #-2]!
	mov r0, #0
	cmp sb, r0
	cmpeq sl, r4
	add fp, fp, #1
	bne _020EC20C
	cmp r6, #0
	cmpeq r7, #8
	bne _020EC29C
	ldr r0, [sp, #4]
	cmp r0, #0
	ldrhne r0, [r8]
	cmpne r0, #0x30
	movne r0, #0x30
	strhne r0, [r8, #-2]!
	addne fp, fp, #1
_020EC29C:
	ldrb r0, [sp, #0x4c]
	cmp r0, #2
	bne _020EC2EC
	ldr r0, [sp, #0xc]
	str r0, [sp, #0x14]
	ldr r0, [sp, #0x18]
	cmp r0, #0
	ldreq r0, [sp, #0x10]
	cmpeq r0, #0
	ldrne r0, [sp, #0x14]
	subne r0, r0, #1
	strne r0, [sp, #0x14]
	cmp r6, #0
	cmpeq r7, #0x10
	bne _020EC2EC
	ldr r0, [sp, #4]
	cmp r0, #0
	ldrne r0, [sp, #0x14]
	subne r0, r0, #2
	strne r0, [sp, #0x14]
_020EC2EC:
	ldr r0, [sp]
	ldr r2, _020EC3B0 @ =0x000001FD
	sub r0, r0, r8
	add r1, r0, r0, lsr #31
	ldr r0, [sp, #0x14]
	add r0, r0, r1, asr #1
	cmp r0, r2
	addgt sp, sp, #0x1c
	movgt r0, #0
	popgt {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	addgt sp, sp, #0x10
	bxgt lr
	ldr r0, [sp, #0x14]
	cmp fp, r0
	bge _020EC340
	mov r1, #0x30
_020EC32C:
	ldr r0, [sp, #0x14]
	add fp, fp, #1
	cmp fp, r0
	strh r1, [r8, #-2]!
	blt _020EC32C
_020EC340:
	cmp r6, #0
	cmpeq r7, #0x10
	bne _020EC368
	ldr r0, [sp, #4]
	cmp r0, #0
	beq _020EC368
	ldr r0, [sp, #8]
	mov r1, #0x30
	strh r0, [r8, #-2]
	strh r1, [r8, #-4]!
_020EC368:
	ldr r0, [sp, #0x18]
	cmp r0, #0
	movne r0, #0x2d
	strhne r0, [r8, #-2]!
	bne _020EC39C
	ldr r0, [sp, #0x10]
	cmp r0, #1
	moveq r0, #0x2b
	strheq r0, [r8, #-2]!
	beq _020EC39C
	cmp r0, #2
	moveq r0, #0x20
	strheq r0, [r8, #-2]!
_020EC39C:
	mov r0, r8
	add sp, sp, #0x1c
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
	.align 2, 0
_020EC3B0: .4byte 0x000001FD
	arm_func_end FUN_020EC0B4

	arm_func_start FUN_020EC3B4
FUN_020EC3B4: @ 0x020EC3B4
	push {r0, r1, r2, r3}
	push {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0x44
	ldr r7, [sp, #0x80]
	ldr r0, _020EC720 @ =0x000001FD
	mov r8, r2
	cmp r7, r0
	ldrh r6, [sp, #0x7a]
	ldrb r5, [sp, #0x77]
	ldrb r4, [sp, #0x75]
	ldr r1, [sp, #0x68]
	ldr r2, [sp, #0x6c]
	addgt sp, sp, #0x44
	movgt r0, #0
	popgt {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	addgt sp, sp, #0x10
	bxgt lr
	mov sl, #0
	mov sb, #0x20
	add r0, sp, #8
	add r3, sp, #0xc
	strb sl, [sp, #8]
	strh sb, [sp, #0xa]
	bl FUN_020EFB28
	ldr r0, [sp, #0x68]
	ldr r1, [sp, #0x6c]
	bl FUN_020EEAA4
	mov r2, r0
	mov r0, sl
	mov r3, r1
	mov r1, r0
	bl FUN_020F19B4
	bne _020EC45C
	sub r4, r8, #0xc
	ldr r1, _020EC724 @ =_02111364
	mov r0, r4
	bl FUN_020ED8A0
	add sp, sp, #0x44
	mov r0, r4
	pop {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	add sp, sp, #0x10
	bx lr
_020EC45C:
	ldrb r0, [sp, #0x11]
	cmp r0, #0x49
	bne _020EC4DC
	ldrsb r0, [sp, #0xc]
	cmp r0, #0
	beq _020EC4A0
	cmp r6, #0x41
	sub r4, r8, #0xa
	bne _020EC490
	ldr r1, _020EC728 @ =_02111370
	mov r0, r4
	bl FUN_020ED8A0
	b _020EC4C8
_020EC490:
	ldr r1, _020EC72C @ =_0211137C
	mov r0, r4
	bl FUN_020ED8A0
	b _020EC4C8
_020EC4A0:
	cmp r6, #0x41
	sub r4, r8, #8
	bne _020EC4BC
	ldr r1, _020EC730 @ =_02111388
	mov r0, r4
	bl FUN_020ED8A0
	b _020EC4C8
_020EC4BC:
	ldr r1, _020EC734 @ =_02111390
	mov r0, r4
	bl FUN_020ED8A0
_020EC4C8:
	add sp, sp, #0x44
	mov r0, r4
	pop {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	add sp, sp, #0x10
	bx lr
_020EC4DC:
	cmp r0, #0x4e
	bne _020EC558
	ldrsb r0, [sp, #0xc]
	cmp r0, #0
	beq _020EC51C
	cmp r6, #0x41
	sub r4, r8, #0xa
	bne _020EC50C
	ldr r1, _020EC738 @ =_02111398
	mov r0, r4
	bl FUN_020ED8A0
	b _020EC544
_020EC50C:
	ldr r1, _020EC73C @ =_021113A4
	mov r0, r4
	bl FUN_020ED8A0
	b _020EC544
_020EC51C:
	cmp r6, #0x41
	sub r4, r8, #8
	bne _020EC538
	ldr r1, _020EC740 @ =_021113B0
	mov r0, r4
	bl FUN_020ED8A0
	b _020EC544
_020EC538:
	ldr r1, _020EC744 @ =_021113B8
	mov r0, r4
	bl FUN_020ED8A0
_020EC544:
	add sp, sp, #0x44
	mov r0, r4
	pop {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	add sp, sp, #0x10
	bx lr
_020EC558:
	mov r3, sl
	mov r1, #1
	mov r0, #0x64
	add sb, sp, #0x68
	strb r1, [sp, #0x34]
	strb r1, [sp, #0x35]
	strb r3, [sp, #0x36]
	strb r3, [sp, #0x37]
	strb r3, [sp, #0x38]
	str r3, [sp, #0x3c]
	str r1, [sp, #0x40]
	strh r0, [sp, #0x3a]
_020EC588:
	rsb r1, r3, #7
	ldrsb r2, [sb, r3]
	ldrsb r0, [sb, r1]
	strb r0, [sb, r3]
	add r3, r3, #1
	strb r2, [sb, r1]
	cmp r3, #4
	blt _020EC588
	ldrb r0, [sp, #0x69]
	ldrb r1, [sp, #0x68]
	ldr sb, _020EC748 @ =0x000007FF
	lsl r0, r0, #0x11
	orr r1, r0, r1, lsl #25
	add r0, sp, #0x34
	and lr, sb, r1, lsr #21
	sub ip, sp, #8
	ldm r0, {r0, r1, r2, r3}
	stm ip, {r0, r1, r2, r3}
	rsb r0, sb, #0x400
	mov r1, r8
	add r0, lr, r0
	ldm ip, {r2, r3}
	bl FUN_020EBE64
	cmp r6, #0x61
	moveq r1, #0x70
	movne r1, #0x50
	strh r1, [r0, #-2]!
	lsl r1, r7, #2
	mov lr, r7
	cmp r7, #1
	add r8, r1, #0xb
	add ip, sp, #0x68
	blt _020EC698
	mov sb, #0x30
_020EC610:
	cmp r8, #0x40
	bge _020EC680
	ldrb r1, [ip, r8, asr #3]
	and r2, r8, #7
	rsb r3, r2, #7
	asr r2, r1, r3
	sub sl, r8, #4
	bic r1, r8, #7
	bic sl, sl, #7
	cmp r1, sl
	add sl, ip, r8, asr #3
	and r1, r2, #0xff
	beq _020EC654
	ldrb r2, [sl, #-1]
	lsl r2, r2, #8
	orr r1, r1, r2, asr r3
	and r1, r1, #0xff
_020EC654:
	and r1, r1, #0xf
	cmp r1, #0xa
	addlo r1, r1, #0x30
	andlo r1, r1, #0xff
	blo _020EC684
	cmp r6, #0x61
	addeq r1, r1, #0x57
	andeq r1, r1, #0xff
	addne r1, r1, #0x37
	andne r1, r1, #0xff
	b _020EC684
_020EC680:
	mov r1, sb
_020EC684:
	sub lr, lr, #1
	cmp lr, #1
	strh r1, [r0, #-2]!
	sub r8, r8, #4
	bge _020EC610
_020EC698:
	cmp r7, #0
	cmpeq r5, #0
	movne r1, #0x2e
	strhne r1, [r0, #-2]!
	mov r1, #0x31
	strh r1, [r0, #-2]
	cmp r6, #0x61
	moveq r1, #0x78
	movne r1, #0x58
	strh r1, [r0, #-4]!
	mov r1, #0x30
	strh r1, [r0, #-2]!
	ldrsb r1, [sp, #0xc]
	cmp r1, #0
	movne r1, #0x2d
	strhne r1, [r0, #-2]!
	addne sp, sp, #0x44
	popne {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	addne sp, sp, #0x10
	bxne lr
	cmp r4, #1
	moveq r1, #0x2b
	strheq r1, [r0, #-2]!
	addeq sp, sp, #0x44
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	addeq sp, sp, #0x10
	bxeq lr
	cmp r4, #2
	moveq r1, #0x20
	strheq r1, [r0, #-2]!
	add sp, sp, #0x44
	pop {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	add sp, sp, #0x10
	bx lr
	.align 2, 0
_020EC720: .4byte 0x000001FD
_020EC724: .4byte _02111364
_020EC728: .4byte _02111370
_020EC72C: .4byte _0211137C
_020EC730: .4byte _02111388
_020EC734: .4byte _02111390
_020EC738: .4byte _02111398
_020EC73C: .4byte _021113A4
_020EC740: .4byte _021113B0
_020EC744: .4byte _021113B8
_020EC748: .4byte 0x000007FF
	arm_func_end FUN_020EC3B4

	arm_func_start FUN_020EC74C
FUN_020EC74C: @ 0x020EC74C
	push {r4, lr}
	cmp r1, #0
	bge _020EC774
_020EC758:
	mov r1, #0
	strh r1, [r0, #2]
	mov r1, #1
	strb r1, [r0, #4]
	mov r1, #0x30
	strb r1, [r0, #5]
	pop {r4, pc}
_020EC774:
	ldrb lr, [r0, #4]
	cmp r1, lr
	popge {r4, pc}
	add ip, r0, #5
	add r2, ip, r1
	add r2, r2, #1
	ldrsb r3, [r2, #-1]!
	sub r3, r3, #0x30
	lsl r3, r3, #0x18
	asr r3, r3, #0x18
	cmp r3, #5
	bne _020EC7D4
	add ip, ip, lr
_020EC7A8:
	sub ip, ip, #1
	cmp ip, r2
	bls _020EC7C0
	ldrsb r3, [ip]
	cmp r3, #0x30
	beq _020EC7A8
_020EC7C0:
	cmp ip, r2
	ldrsbeq r3, [r2, #-1]
	andeq r4, r3, #1
	movne r4, #1
	b _020EC7DC
_020EC7D4:
	movgt r4, #1
	movle r4, #0
_020EC7DC:
	cmp r1, #0
	beq _020EC838
	mov ip, #0
	mov lr, #1
_020EC7EC:
	ldrsb r3, [r2, #-1]!
	sub r3, r3, #0x30
	add r3, r3, r4
	lsl r3, r3, #0x18
	asr r3, r3, #0x18
	cmp r3, #9
	movgt r4, lr
	movle r4, ip
	cmp r4, #0
	bne _020EC81C
	cmp r3, #0
	bne _020EC824
_020EC81C:
	sub r1, r1, #1
	b _020EC830
_020EC824:
	add r3, r3, #0x30
	strb r3, [r2]
	b _020EC838
_020EC830:
	cmp r1, #0
	bne _020EC7EC
_020EC838:
	cmp r4, #0
	beq _020EC860
	ldrsh r3, [r0, #2]
	mov r2, #1
	mov r1, #0x31
	add r3, r3, #1
	strh r3, [r0, #2]
	strb r2, [r0, #4]
	strb r1, [r0, #5]
	pop {r4, pc}
_020EC860:
	cmp r1, #0
	beq _020EC758
	strb r1, [r0, #4]
	pop {r4, pc}
	arm_func_end FUN_020EC74C

	arm_func_start FUN_020EC870
FUN_020EC870: @ 0x020EC870
	push {r0, r1, r2, r3}
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x22c
	mov sl, r0
	add r0, sp, #0x250
	ldr r7, [sp, #0x268]
	ldr r3, _020ECE90 @ =0x000001FD
	ldrh r6, [r0, #0x12]
	cmp r7, r3
	ldrb r5, [sp, #0x25f]
	ldrb r4, [sp, #0x25d]
	mov r8, r1
	mov sb, r2
	addgt sp, sp, #0x22c
	movgt r0, #0
	popgt {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	addgt sp, sp, #0x10
	bxgt lr
	mov ip, #0
	mov fp, #0x20
	add r0, sp, #0
	add r3, sp, #4
	mov r1, sl
	mov r2, r8
	strb ip, [sp]
	strh fp, [sp, #2]
	bl FUN_020EFB28
	ldrb r0, [sp, #8]
	add r1, sp, #9
	add r0, r1, r0
	b _020EC904
_020EC8EC:
	ldrb r2, [sp, #8]
	ldrsh r1, [sp, #6]
	sub r2, r2, #1
	add r1, r1, #1
	strb r2, [sp, #8]
	strh r1, [sp, #6]
_020EC904:
	ldrb r1, [sp, #8]
	cmp r1, #1
	bls _020EC91C
	ldrsb r1, [r0, #-1]!
	cmp r1, #0x30
	beq _020EC8EC
_020EC91C:
	ldrb r0, [sp, #9]
	cmp r0, #0x30
	beq _020EC93C
	cmp r0, #0x49
	beq _020EC948
	cmp r0, #0x4e
	beq _020ECA00
	b _020ECAAC
_020EC93C:
	mov r0, #0
	strh r0, [sp, #6]
	b _020ECAAC
_020EC948:
	mov r2, #0
	mov r0, sl
	mov r1, r8
	mov r3, r2
	bl FUN_020F1918
	bhs _020EC9A8
	cmp r6, #0x80
	sub r4, sb, #0xa
	movhs r0, #0
	bhs _020EC980
	ldr r0, _020ECE94 @ =0x0210E73C
	lsl r1, r6, #1
	ldrh r0, [r0, r1]
	and r0, r0, #0x200
_020EC980:
	cmp r0, #0
	beq _020EC998
	ldr r1, _020ECE98 @ =_02111370
	mov r0, r4
	bl FUN_020ED8A0
	b _020EC9EC
_020EC998:
	ldr r1, _020ECE9C @ =_0211137C
	mov r0, r4
	bl FUN_020ED8A0
	b _020EC9EC
_020EC9A8:
	cmp r6, #0x80
	sub r4, sb, #8
	movhs r0, #0
	bhs _020EC9C8
	ldr r0, _020ECE94 @ =0x0210E73C
	lsl r1, r6, #1
	ldrh r0, [r0, r1]
	and r0, r0, #0x200
_020EC9C8:
	cmp r0, #0
	beq _020EC9E0
	ldr r1, _020ECEA0 @ =_02111388
	mov r0, r4
	bl FUN_020ED8A0
	b _020EC9EC
_020EC9E0:
	ldr r1, _020ECEA4 @ =_02111390
	mov r0, r4
	bl FUN_020ED8A0
_020EC9EC:
	add sp, sp, #0x22c
	mov r0, r4
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_020ECA00:
	ldrsb r0, [sp, #4]
	cmp r0, #0
	beq _020ECA54
	cmp r6, #0x80
	sub r4, sb, #0xa
	movhs r0, #0
	bhs _020ECA2C
	ldr r0, _020ECE94 @ =0x0210E73C
	lsl r1, r6, #1
	ldrh r0, [r0, r1]
	and r0, r0, #0x200
_020ECA2C:
	cmp r0, #0
	beq _020ECA44
	ldr r1, _020ECEA8 @ =_02111398
	mov r0, r4
	bl FUN_020ED8A0
	b _020ECA98
_020ECA44:
	ldr r1, _020ECEAC @ =_021113A4
	mov r0, r4
	bl FUN_020ED8A0
	b _020ECA98
_020ECA54:
	cmp r6, #0x80
	sub r4, sb, #8
	movhs r0, #0
	bhs _020ECA74
	ldr r0, _020ECE94 @ =0x0210E73C
	lsl r1, r6, #1
	ldrh r0, [r0, r1]
	and r0, r0, #0x200
_020ECA74:
	cmp r0, #0
	beq _020ECA8C
	ldr r1, _020ECEB0 @ =_021113B0
	mov r0, r4
	bl FUN_020ED8A0
	b _020ECA98
_020ECA8C:
	ldr r1, _020ECEB4 @ =_021113B8
	mov r0, r4
	bl FUN_020ED8A0
_020ECA98:
	add sp, sp, #0x22c
	mov r0, r4
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_020ECAAC:
	ldrb r1, [sp, #8]
	ldrsh r2, [sp, #6]
	add r0, sp, #0x200
	sub r1, r1, #1
	add r0, r0, #0x2a
	add r1, r2, r1
	sub r8, r0, #1
	strh r1, [sp, #6]
	mov r0, #0
	strb r0, [r8]
	cmp r6, #0x65
	bgt _020ECB08
	bge _020ECB94
	cmp r6, #0x47
	bgt _020ECE54
	cmp r6, #0x45
	blt _020ECE54
	beq _020ECB94
	cmp r6, #0x46
	beq _020ECCE0
	cmp r6, #0x47
	beq _020ECB20
	b _020ECE54
_020ECB08:
	cmp r6, #0x66
	bgt _020ECB18
	beq _020ECCE0
	b _020ECE54
_020ECB18:
	cmp r6, #0x67
	bne _020ECE54
_020ECB20:
	ldrb r0, [sp, #8]
	cmp r0, r7
	ble _020ECB38
	add r0, sp, #4
	mov r1, r7
	bl FUN_020EC74C
_020ECB38:
	ldrsh r2, [sp, #6]
	mvn r0, #3
	cmp r2, r0
	blt _020ECB50
	cmp r2, r7
	blt _020ECB70
_020ECB50:
	cmp r5, #0
	ldrbeq r0, [sp, #8]
	subne r7, r7, #1
	subeq r7, r0, #1
	cmp r6, #0x67
	moveq r6, #0x65
	movne r6, #0x45
	b _020ECB94
_020ECB70:
	cmp r5, #0
	addne r0, r2, #1
	subne r7, r7, r0
	bne _020ECCE0
	ldrb r1, [sp, #8]
	add r0, r2, #1
	subs r7, r1, r0
	movmi r7, #0
	b _020ECCE0
_020ECB94:
	ldrb r0, [sp, #8]
	add r1, r7, #1
	cmp r0, r1
	ble _020ECBAC
	add r0, sp, #4
	bl FUN_020EC74C
_020ECBAC:
	ldrsh lr, [sp, #6]
	mov fp, #0x2b
	mov sl, #0
	cmp lr, #0
	rsblt lr, lr, #0
	movlt fp, #0x2d
	ldr r3, _020ECEB8 @ =0x66666667
	mov r0, #0xa
	b _020ECC00
_020ECBD0:
	lsr r1, lr, #0x1f
	smull r2, ip, r3, lr
	add ip, r1, ip, asr #2
	smull r1, r2, r0, ip
	sub ip, lr, r1
	add r1, ip, #0x30
	strb r1, [r8, #-1]!
	mov r2, lr
	smull r1, lr, r3, r2
	lsr r1, r2, #0x1f
	add lr, r1, lr, asr #2
	add sl, sl, #1
_020ECC00:
	cmp lr, #0
	bne _020ECBD0
	cmp sl, #2
	blt _020ECBD0
	add r0, sp, #0x2a
	strb fp, [r8, #-1]
	strb r6, [r8, #-2]!
	sub r1, r0, r8
	ldr r0, _020ECE90 @ =0x000001FD
	add r1, r1, r7
	cmp r1, r0
	addgt sp, sp, #0x22c
	movgt r0, #0
	popgt {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	addgt sp, sp, #0x10
	bxgt lr
	ldrb r1, [sp, #8]
	add r0, r7, #1
	cmp r1, r0
	bge _020ECC70
	add r0, r7, #2
	sub r0, r0, r1
	subs r1, r0, #1
	beq _020ECC70
	mov r0, #0x30
_020ECC64:
	strb r0, [r8, #-1]!
	subs r1, r1, #1
	bne _020ECC64
_020ECC70:
	ldrb r1, [sp, #8]
	add r0, sp, #9
	add r2, r0, r1
	subs r1, r1, #1
	beq _020ECC94
_020ECC84:
	ldrsb r0, [r2, #-1]!
	subs r1, r1, #1
	strb r0, [r8, #-1]!
	bne _020ECC84
_020ECC94:
	cmp r7, #0
	cmpeq r5, #0
	movne r0, #0x2e
	strbne r0, [r8, #-1]!
	ldrb r0, [sp, #9]
	strb r0, [r8, #-1]!
	ldrsb r0, [sp, #4]
	cmp r0, #0
	movne r0, #0x2d
	strbne r0, [r8, #-1]!
	bne _020ECE54
	cmp r4, #1
	moveq r0, #0x2b
	strbeq r0, [r8, #-1]!
	beq _020ECE54
	cmp r4, #2
	moveq r0, #0x20
	strbeq r0, [r8, #-1]!
	b _020ECE54
_020ECCE0:
	ldrsh r3, [sp, #6]
	ldrb r2, [sp, #8]
	sub r0, r2, r3
	subs r1, r0, #1
	movmi r1, #0
	cmp r1, r7
	ble _020ECD20
	sub r1, r1, r7
	add r0, sp, #4
	sub r1, r2, r1
	bl FUN_020EC74C
	ldrsh r3, [sp, #6]
	ldrb r2, [sp, #8]
	sub r0, r2, r3
	subs r1, r0, #1
	movmi r1, #0
_020ECD20:
	adds r0, r3, #1
	movmi r0, #0
	ldr r3, _020ECE90 @ =0x000001FD
	add r6, r0, r1
	cmp r6, r3
	addgt sp, sp, #0x22c
	movgt r0, #0
	popgt {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	addgt sp, sp, #0x10
	bxgt lr
	add r3, sp, #9
	sub r6, r7, r1
	cmp r6, #0
	add r2, r3, r2
	mov sl, #0
	ble _020ECD74
	mov r3, #0x30
_020ECD64:
	add sl, sl, #1
	cmp sl, r6
	strb r3, [r8, #-1]!
	blt _020ECD64
_020ECD74:
	mov r6, #0
	b _020ECD88
_020ECD7C:
	ldrsb r3, [r2, #-1]!
	add r6, r6, #1
	strb r3, [r8, #-1]!
_020ECD88:
	cmp r6, r1
	ldrblt r3, [sp, #8]
	cmplt r6, r3
	blt _020ECD7C
	cmp r6, r1
	bge _020ECDB4
	mov r3, #0x30
_020ECDA4:
	add r6, r6, #1
	cmp r6, r1
	strb r3, [r8, #-1]!
	blt _020ECDA4
_020ECDB4:
	cmp r7, #0
	cmpeq r5, #0
	movne r1, #0x2e
	strbne r1, [r8, #-1]!
	cmp r0, #0
	beq _020ECE1C
	ldrb r1, [sp, #8]
	mov r5, #0
	sub r1, r0, r1
	cmp r1, #0
	ble _020ECDFC
	mov r3, #0x30
_020ECDE4:
	strb r3, [r8, #-1]!
	ldrb r1, [sp, #8]
	add r5, r5, #1
	sub r1, r0, r1
	cmp r5, r1
	blt _020ECDE4
_020ECDFC:
	cmp r5, r0
	bge _020ECE24
_020ECE04:
	ldrsb r1, [r2, #-1]!
	add r5, r5, #1
	cmp r5, r0
	strb r1, [r8, #-1]!
	blt _020ECE04
	b _020ECE24
_020ECE1C:
	mov r0, #0x30
	strb r0, [r8, #-1]!
_020ECE24:
	ldrsb r0, [sp, #4]
	cmp r0, #0
	movne r0, #0x2d
	strbne r0, [r8, #-1]!
	bne _020ECE54
	cmp r4, #1
	moveq r0, #0x2b
	strbeq r0, [r8, #-1]!
	beq _020ECE54
	cmp r4, #2
	moveq r0, #0x20
	strbeq r0, [r8, #-1]!
_020ECE54:
	mov r0, r8
	bl FUN_020E9580
	sub r1, sb, r0, lsl #1
	mov r0, r8
	sub r4, r1, #2
	bl FUN_020E9580
	mov r2, r0
	mov r0, r4
	mov r1, r8
	bl FUN_020E59D8
	mov r0, r4
	add sp, sp, #0x22c
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
	.align 2, 0
_020ECE90: .4byte 0x000001FD
_020ECE94: .4byte 0x0210E73C
_020ECE98: .4byte _02111370
_020ECE9C: .4byte _0211137C
_020ECEA0: .4byte _02111388
_020ECEA4: .4byte _02111390
_020ECEA8: .4byte _02111398
_020ECEAC: .4byte _021113A4
_020ECEB0: .4byte _021113B0
_020ECEB4: .4byte _021113B8
_020ECEB8: .4byte 0x66666667
	arm_func_end FUN_020EC870

	arm_func_start FUN_020ECEBC
FUN_020ECEBC: @ 0x020ECEBC
	push {r0, r1, r2, r3}
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x430
	mov r3, #0x20
	mov fp, r2
	strh r3, [sp, #0x1c]
	ldrh r2, [fp]
	mov sb, r0
	mov r8, r1
	cmp r2, #0
	mov r4, #0
	beq _020ED78C
_020ECEEC:
	mov r0, fp
	mov r1, #0x25
	bl FUN_020ED8C0
	str r0, [sp, #0xc]
	cmp r0, #0
	bne _020ECF40
	mov r0, fp
	bl FUN_020ED884
	movs r2, r0
	add r4, r4, r2
	beq _020ED78C
	mov r0, r8
	mov r1, fp
	blx sb
	cmp r0, #0
	bne _020ED78C
	add sp, sp, #0x430
	mvn r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_020ECF40:
	sub r0, r0, fp
	add r0, r0, r0, lsr #31
	asrs r2, r0, #1
	add r4, r4, r2
	beq _020ECF78
	mov r0, r8
	mov r1, fp
	blx sb
	cmp r0, #0
	addeq sp, sp, #0x430
	mvneq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	addeq sp, sp, #0x10
	bxeq lr
_020ECF78:
	add r1, sp, #0x400
	ldr r0, [sp, #0xc]
	add r1, r1, #0x64
	add r2, sp, #0x20
	bl FUN_020EB8EC
	ldrh r1, [sp, #0x26]
	mov fp, r0
	cmp r1, #0x61
	bgt _020ECFE8
	bge _020ED354
	cmp r1, #0x47
	bgt _020ECFDC
	subs r0, r1, #0x41
	addpl pc, pc, r0, lsl #2
	b _020ECFD0
_020ECFB4: @ jump table
	b _020ED354 @ case 0
	b _020ED5F8 @ case 1
	b _020ED5F8 @ case 2
	b _020ED5F8 @ case 3
	b _020ED2E4 @ case 4
	b _020ED2E4 @ case 5
	b _020ED2E4 @ case 6
_020ECFD0:
	cmp r1, #0x25
	beq _020ED5E4
	b _020ED5F8
_020ECFDC:
	cmp r1, #0x58
	beq _020ED1A8
	b _020ED5F8
_020ECFE8:
	cmp r1, #0x75
	bgt _020ED050
	subs r0, r1, #0x64
	addpl pc, pc, r0, lsl #2
	b _020ED044
_020ECFFC: @ jump table
	b _020ED06C @ case 0
	b _020ED2E4 @ case 1
	b _020ED2E4 @ case 2
	b _020ED2E4 @ case 3
	b _020ED5F8 @ case 4
	b _020ED06C @ case 5
	b _020ED5F8 @ case 6
	b _020ED5F8 @ case 7
	b _020ED5F8 @ case 8
	b _020ED5F8 @ case 9
	b _020ED500 @ case 10
	b _020ED1A8 @ case 11
	b _020ED5F8 @ case 12
	b _020ED5F8 @ case 13
	b _020ED5F8 @ case 14
	b _020ED3C4 @ case 15
	b _020ED5F8 @ case 16
	b _020ED1A8 @ case 17
_020ED044:
	cmp r1, #0x63
	beq _020ED58C
	b _020ED5F8
_020ED050:
	cmp r1, #0x78
	bgt _020ED060
	beq _020ED1A8
	b _020ED5F8
_020ED060:
	ldr r0, _020ED7A0 @ =0x0000FFFF
	cmp r1, r0
	b _020ED5F8
_020ED06C:
	ldrb r0, [sp, #0x24]
	cmp r0, #3
	bne _020ED08C
	ldr r1, [sp, #0x464]
	add r1, r1, #4
	str r1, [sp, #0x464]
	ldr sl, [r1, #-4]
	b _020ED124
_020ED08C:
	cmp r0, #4
	bne _020ED0B4
	ldr r1, [sp, #0x464]
	add r2, r1, #8
	str r2, [sp, #0x464]
	ldr r1, [r2, #-8]
	str r1, [sp, #0x10]
	ldr r1, [r2, #-4]
	str r1, [sp, #0x14]
	b _020ED124
_020ED0B4:
	cmp r0, #6
	bne _020ED0DC
	ldr r1, [sp, #0x464]
	add r2, r1, #8
	str r2, [sp, #0x464]
	ldr r1, [r2, #-8]
	str r1, [sp, #0x10]
	ldr r1, [r2, #-4]
	str r1, [sp, #0x14]
	b _020ED124
_020ED0DC:
	cmp r0, #7
	bne _020ED0F8
	ldr r1, [sp, #0x464]
	add r1, r1, #4
	str r1, [sp, #0x464]
	ldr sl, [r1, #-4]
	b _020ED124
_020ED0F8:
	cmp r0, #8
	bne _020ED114
	ldr r1, [sp, #0x464]
	add r1, r1, #4
	str r1, [sp, #0x464]
	ldr sl, [r1, #-4]
	b _020ED124
_020ED114:
	ldr r1, [sp, #0x464]
	add r1, r1, #4
	str r1, [sp, #0x464]
	ldr sl, [r1, #-4]
_020ED124:
	cmp r0, #2
	lsleq r1, sl, #0x10
	asreq sl, r1, #0x10
	cmp r0, #4
	cmpne r0, #6
	add r0, sp, #0x20
	bne _020ED16C
	sub r5, sp, #4
	ldm r0, {r0, r1, r2, r3}
	stm r5, {r0, r1, r2, r3}
	ldr r3, [r5]
	ldr r0, [sp, #0x10]
	ldr r1, [sp, #0x14]
	add r2, sp, #0x430
	bl FUN_020EC0B4
	movs r6, r0
	beq _020ED5F8
	b _020ED190
_020ED16C:
	sub r5, sp, #8
	ldm r0, {r0, r1, r2, r3}
	stm r5, {r0, r1, r2, r3}
	add r1, sp, #0x430
	mov r0, sl
	ldm r5, {r2, r3}
	bl FUN_020EBE64
	movs r6, r0
	beq _020ED5F8
_020ED190:
	add r0, sp, #0x400
	add r0, r0, #0x2e
	sub r0, r0, r6
	add r0, r0, r0, lsr #31
	asr r7, r0, #1
	b _020ED644
_020ED1A8:
	ldrb r0, [sp, #0x24]
	cmp r0, #3
	bne _020ED1C8
	ldr r1, [sp, #0x464]
	add r1, r1, #4
	str r1, [sp, #0x464]
	ldr sl, [r1, #-4]
	b _020ED260
_020ED1C8:
	cmp r0, #4
	bne _020ED1F0
	ldr r1, [sp, #0x464]
	add r2, r1, #8
	str r2, [sp, #0x464]
	ldr r1, [r2, #-8]
	str r1, [sp, #0x10]
	ldr r1, [r2, #-4]
	str r1, [sp, #0x14]
	b _020ED260
_020ED1F0:
	cmp r0, #6
	bne _020ED218
	ldr r1, [sp, #0x464]
	add r2, r1, #8
	str r2, [sp, #0x464]
	ldr r1, [r2, #-8]
	str r1, [sp, #0x10]
	ldr r1, [r2, #-4]
	str r1, [sp, #0x14]
	b _020ED260
_020ED218:
	cmp r0, #7
	bne _020ED234
	ldr r1, [sp, #0x464]
	add r1, r1, #4
	str r1, [sp, #0x464]
	ldr sl, [r1, #-4]
	b _020ED260
_020ED234:
	cmp r0, #8
	bne _020ED250
	ldr r1, [sp, #0x464]
	add r1, r1, #4
	str r1, [sp, #0x464]
	ldr sl, [r1, #-4]
	b _020ED260
_020ED250:
	ldr r1, [sp, #0x464]
	add r1, r1, #4
	str r1, [sp, #0x464]
	ldr sl, [r1, #-4]
_020ED260:
	cmp r0, #2
	lsleq r1, sl, #0x10
	lsreq sl, r1, #0x10
	cmp r0, #4
	cmpne r0, #6
	add r0, sp, #0x20
	bne _020ED2A8
	sub r5, sp, #4
	ldm r0, {r0, r1, r2, r3}
	stm r5, {r0, r1, r2, r3}
	ldr r3, [r5]
	ldr r0, [sp, #0x10]
	ldr r1, [sp, #0x14]
	add r2, sp, #0x430
	bl FUN_020EC0B4
	movs r6, r0
	beq _020ED5F8
	b _020ED2CC
_020ED2A8:
	sub r5, sp, #8
	ldm r0, {r0, r1, r2, r3}
	stm r5, {r0, r1, r2, r3}
	add r1, sp, #0x430
	mov r0, sl
	ldm r5, {r2, r3}
	bl FUN_020EBE64
	movs r6, r0
	beq _020ED5F8
_020ED2CC:
	add r0, sp, #0x400
	add r0, r0, #0x2e
	sub r0, r0, r6
	add r0, r0, r0, lsr #31
	asr r7, r0, #1
	b _020ED644
_020ED2E4:
	ldrb r0, [sp, #0x24]
	cmp r0, #9
	ldrne r0, [sp, #0x464]
	addne r0, r0, #8
	strne r0, [sp, #0x464]
	bne _020ED308
	ldr r0, [sp, #0x464]
	add r0, r0, #8
	str r0, [sp, #0x464]
_020ED308:
	ldr r7, [r0, #-8]
	ldr r6, [r0, #-4]
	add r0, sp, #0x20
	sub r5, sp, #4
	ldm r0, {r0, r1, r2, r3}
	stm r5, {r0, r1, r2, r3}
	ldr r3, [r5]
	mov r0, r7
	mov r1, r6
	add r2, sp, #0x430
	bl FUN_020EC870
	movs r6, r0
	beq _020ED5F8
	add r0, sp, #0x400
	add r0, r0, #0x2e
	sub r0, r0, r6
	add r0, r0, r0, lsr #31
	asr r7, r0, #1
	b _020ED644
_020ED354:
	ldrb r0, [sp, #0x24]
	cmp r0, #9
	ldrne r0, [sp, #0x464]
	addne r0, r0, #8
	strne r0, [sp, #0x464]
	bne _020ED378
	ldr r0, [sp, #0x464]
	add r0, r0, #8
	str r0, [sp, #0x464]
_020ED378:
	ldr r7, [r0, #-8]
	ldr r6, [r0, #-4]
	add r0, sp, #0x20
	sub r5, sp, #4
	ldm r0, {r0, r1, r2, r3}
	stm r5, {r0, r1, r2, r3}
	ldr r3, [r5]
	mov r0, r7
	mov r1, r6
	add r2, sp, #0x430
	bl FUN_020EC3B4
	movs r6, r0
	beq _020ED5F8
	add r0, sp, #0x400
	add r0, r0, #0x2e
	sub r0, r0, r6
	add r0, r0, r0, lsr #31
	asr r7, r0, #1
	b _020ED644
_020ED3C4:
	ldrb r0, [sp, #0x24]
	cmp r0, #5
	bne _020ED460
	ldr r0, [sp, #0x464]
	add r0, r0, #4
	str r0, [sp, #0x464]
	ldr r6, [r0, #-4]
	ldrb r0, [sp, #0x23]
	cmp r6, #0
	ldreq r6, _020ED7A4 @ =_021113C0
	cmp r0, #0
	beq _020ED418
	ldrh r1, [r6], #2
	ldrb r0, [sp, #0x22]
	and r7, r1, #0xff
	cmp r0, #0
	beq _020ED644
	ldr r0, [sp, #0x2c]
	cmp r7, r0
	movgt r7, r0
	b _020ED644
_020ED418:
	ldrb r0, [sp, #0x22]
	cmp r0, #0
	beq _020ED450
	ldr r7, [sp, #0x2c]
	mov r0, r6
	mov r2, r7
	mov r1, #0
	bl FUN_020EB8C4
	cmp r0, #0
	beq _020ED644
	sub r0, r0, r6
	add r0, r0, r0, lsr #31
	asr r7, r0, #1
	b _020ED644
_020ED450:
	mov r0, r6
	bl FUN_020ED884
	mov r7, r0
	b _020ED644
_020ED460:
	ldr r0, [sp, #0x464]
	add r0, r0, #4
	str r0, [sp, #0x464]
	ldr r5, [r0, #-4]
	ldrb r0, [sp, #0x23]
	cmp r5, #0
	ldreq r5, _020ED7A8 @ =_021113C4
	cmp r0, #0
	beq _020ED4A8
	ldrh r1, [r6]
	ldrb r0, [sp, #0x22]
	and r6, r1, #0xff
	cmp r0, #0
	beq _020ED4E0
	ldr r0, [sp, #0x2c]
	cmp r6, r0
	movgt r6, r0
	b _020ED4E0
_020ED4A8:
	ldrb r0, [sp, #0x22]
	cmp r0, #0
	beq _020ED4D4
	ldr r6, [sp, #0x2c]
	mov r0, r5
	mov r2, r6
	mov r1, #0
	bl FUN_020E5B58
	cmp r0, #0
	subne r6, r0, r5
	b _020ED4E0
_020ED4D4:
	mov r0, r5
	bl FUN_020E9580
	mov r6, r0
_020ED4E0:
	add r0, sp, #0x30
	mov r1, r5
	mov r2, r6
	bl FUN_020E59D8
	movs r7, r0
	bmi _020ED5F8
	add r6, sp, #0x30
	b _020ED644
_020ED500:
	ldr r1, [sp, #0x464]
	ldrb r0, [sp, #0x24]
	add r1, r1, #4
	str r1, [sp, #0x464]
	ldr r6, [r1, #-4]
	cmp r0, #8
	addls pc, pc, r0, lsl #2
	b _020ED780
_020ED520: @ jump table
	b _020ED544 @ case 0
	b _020ED780 @ case 1
	b _020ED54C @ case 2
	b _020ED554 @ case 3
	b _020ED57C @ case 4
	b _020ED780 @ case 5
	b _020ED55C @ case 6
	b _020ED56C @ case 7
	b _020ED574 @ case 8
_020ED544:
	str r4, [r6]
	b _020ED780
_020ED54C:
	strh r4, [r6]
	b _020ED780
_020ED554:
	str r4, [r6]
	b _020ED780
_020ED55C:
	str r4, [r6]
	asr r0, r4, #0x1f
	str r0, [r6, #4]
	b _020ED780
_020ED56C:
	str r4, [r6]
	b _020ED780
_020ED574:
	str r4, [r6]
	b _020ED780
_020ED57C:
	str r4, [r6]
	asr r0, r4, #0x1f
	str r0, [r6, #4]
	b _020ED780
_020ED58C:
	ldrb r0, [sp, #0x24]
	add r6, sp, #0x30
	cmp r0, #5
	bne _020ED5B8
	ldr r0, [sp, #0x464]
	mov r7, #1
	add r0, r0, #4
	str r0, [sp, #0x464]
	ldr r0, [r0, #-4]
	strh r0, [r6]
	b _020ED644
_020ED5B8:
	ldr r0, [sp, #0x464]
	add r1, sp, #0x18
	add r0, r0, #4
	str r0, [sp, #0x464]
	ldr r3, [r0, #-4]
	mov r0, r6
	mov r2, #1
	strb r3, [sp, #0x18]
	bl FUN_020E5954
	mov r7, r0
	b _020ED644
_020ED5E4:
	mov r0, #0x25
	strh r0, [sp, #0x30]
	add r6, sp, #0x30
	mov r7, #1
	b _020ED644
_020ED5F8:
	ldr r0, [sp, #0xc]
	bl FUN_020ED884
	movs r5, r0
	beq _020ED630
	ldr r1, [sp, #0xc]
	mov r0, r8
	mov r2, r5
	blx sb
	cmp r0, #0
	addeq sp, sp, #0x430
	mvneq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	addeq sp, sp, #0x10
	bxeq lr
_020ED630:
	add sp, sp, #0x430
	add r0, r4, r5
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_020ED644:
	ldrb r0, [sp, #0x20]
	mov r5, r7
	cmp r0, #0
	beq _020ED6F4
	cmp r0, #2
	moveq r1, #0x30
	movne r1, #0x20
	strh r1, [sp, #0x1c]
	ldrh r0, [r6]
	cmp r0, #0x2b
	cmpne r0, #0x2d
	cmpne r0, #0x20
	bne _020ED6B0
	cmp r1, #0x30
	bne _020ED6B0
	mov r0, r8
	mov r1, r6
	mov r2, #1
	blx sb
	cmp r0, #0
	addeq sp, sp, #0x430
	mvneq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	addeq sp, sp, #0x10
	bxeq lr
	add r6, r6, #2
	sub r7, r7, #1
_020ED6B0:
	ldr r0, [sp, #0x28]
	cmp r5, r0
	bge _020ED6F4
_020ED6BC:
	mov r0, r8
	add r1, sp, #0x1c
	mov r2, #1
	blx sb
	cmp r0, #0
	addeq sp, sp, #0x430
	mvneq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	addeq sp, sp, #0x10
	bxeq lr
	ldr r0, [sp, #0x28]
	add r5, r5, #1
	cmp r5, r0
	blt _020ED6BC
_020ED6F4:
	cmp r7, #0
	beq _020ED724
	mov r0, r8
	mov r1, r6
	mov r2, r7
	blx sb
	cmp r0, #0
	addeq sp, sp, #0x430
	mvneq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	addeq sp, sp, #0x10
	bxeq lr
_020ED724:
	ldrb r0, [sp, #0x20]
	cmp r0, #0
	bne _020ED77C
	ldr r0, [sp, #0x28]
	cmp r5, r0
	bge _020ED77C
	mov r7, #0x20
_020ED740:
	mov r0, r8
	add r1, sp, #0x1a
	mov r2, #1
	strh r7, [sp, #0x1a]
	blx sb
	cmp r0, #0
	addeq sp, sp, #0x430
	mvneq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	addeq sp, sp, #0x10
	bxeq lr
	ldr r0, [sp, #0x28]
	add r5, r5, #1
	cmp r5, r0
	blt _020ED740
_020ED77C:
	add r4, r4, r5
_020ED780:
	ldrh r0, [fp]
	cmp r0, #0
	bne _020ECEEC
_020ED78C:
	mov r0, r4
	add sp, sp, #0x430
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
	.align 2, 0
_020ED7A0: .4byte 0x0000FFFF
_020ED7A4: .4byte _021113C0
_020ED7A8: .4byte _021113C4
	arm_func_end FUN_020ECEBC

	arm_func_start FUN_020ED7AC
FUN_020ED7AC: @ 0x020ED7AC
	push {r3, r4, r5, lr}
	mov r4, r0
	ldr r3, [r4, #8]
	mov r5, r2
	ldr r2, [r4, #4]
	add r0, r3, r5
	cmp r0, r2
	ldr r0, [r4]
	subhi r5, r2, r3
	mov r2, r5
	add r0, r0, r3, lsl #1
	bl FUN_020EB8B4
	ldr r1, [r4, #8]
	add r1, r1, r5
	str r1, [r4, #8]
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020ED7AC

	arm_func_start FUN_020ED7EC
FUN_020ED7EC: @ 0x020ED7EC
	push {r0, r1, r2, r3}
	push {r3, lr}
	add r3, sp, #0x10
	bic r3, r3, #3
	ldr r2, [sp, #0x10]
	add r3, r3, #4
	bl FUN_020ED814
	pop {r3, lr}
	add sp, sp, #0x10
	bx lr
	arm_func_end FUN_020ED7EC

	arm_func_start FUN_020ED814
FUN_020ED814: @ 0x020ED814
	push {r4, r5, lr}
	sub sp, sp, #0xc
	mov r5, r0
	mov r4, r1
	mov ip, #0
	ldr r0, _020ED880 @ =FUN_020ED7AC
	add r1, sp, #0
	str r5, [sp]
	str r4, [sp, #4]
	str ip, [sp, #8]
	bl FUN_020ECEBC
	cmp r0, #0
	addlt sp, sp, #0xc
	poplt {r4, r5, pc}
	cmp r0, r4
	bhs _020ED868
	lsl r1, r0, #1
	mov r2, #0
	add sp, sp, #0xc
	strh r2, [r5, r1]
	pop {r4, r5, pc}
_020ED868:
	mov r1, #0
	add r0, r5, r4, lsl #1
	strh r1, [r0, #-2]
	sub r0, r1, #1
	add sp, sp, #0xc
	pop {r4, r5, pc}
	.align 2, 0
_020ED880: .4byte FUN_020ED7AC
	arm_func_end FUN_020ED814

	arm_func_start FUN_020ED884
FUN_020ED884: @ 0x020ED884
	mvn r2, #0
_020ED888:
	ldrh r1, [r0], #2
	add r2, r2, #1
	cmp r1, #0
	bne _020ED888
	mov r0, r2
	bx lr
	arm_func_end FUN_020ED884

	arm_func_start FUN_020ED8A0
FUN_020ED8A0: @ 0x020ED8A0
	mov r3, r0
_020ED8A4:
	ldrh r2, [r1], #2
	mov ip, r3
	strh r2, [r3], #2
	ldrh r2, [ip]
	cmp r2, #0
	bne _020ED8A4
	bx lr
	arm_func_end FUN_020ED8A0

	arm_func_start FUN_020ED8C0
FUN_020ED8C0: @ 0x020ED8C0
	ldrh r2, [r0], #2
	cmp r2, #0
	beq _020ED8E4
_020ED8CC:
	cmp r2, r1
	subeq r0, r0, #2
	bxeq lr
	ldrh r2, [r0], #2
	cmp r2, #0
	bne _020ED8CC
_020ED8E4:
	cmp r1, #0
	movne r0, #0
	subeq r0, r0, #2
	bx lr
	arm_func_end FUN_020ED8C0

	arm_func_start FUN_020ED8F4
FUN_020ED8F4: @ 0x020ED8F4
	push {r0, r1, r2, r3}
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x80
	ldr r8, [sp, #0xb4]
	ldr r6, [sp, #0xac]
	ldr r0, [sp, #0xb0]
	bic sb, r8, #0x80000000
	orrs r1, sb, r0
	ldr r7, [sp, #0xa8]
	bic r4, r6, #0x80000000
	addeq sp, sp, #0x80
	moveq r0, #0
	ldreq r1, _020EDEA0 @ =0x3FF00000
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	addeq sp, sp, #0x10
	bxeq lr
	ldr r1, _020EDEA4 @ =0x7FF00000
	cmp r4, r1
	bgt _020ED964
	bne _020ED94C
	cmp r7, #0
	bne _020ED964
_020ED94C:
	ldr r1, _020EDEA4 @ =0x7FF00000
	cmp sb, r1
	bgt _020ED964
	bne _020ED988
	cmp r0, #0
	beq _020ED988
_020ED964:
	ldr r0, [sp, #0xa8]
	ldr r1, [sp, #0xac]
	ldr r2, [sp, #0xb0]
	ldr r3, [sp, #0xb4]
	bl FUN_020F068C
	add sp, sp, #0x80
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_020ED988:
	cmp r6, #0
	mov r5, #0
	bge _020ED9F0
	ldr r1, _020EDEA8 @ =0x43400000
	cmp sb, r1
	movge r5, #2
	bge _020ED9F0
	sub r1, r1, #0x3500000
	cmp sb, r1
	blt _020ED9F0
	ldr r1, _020EDEAC @ =0xFFFFFC01
	add r1, r1, sb, asr #20
	cmp r1, #0x14
	ble _020ED9D8
	rsb r2, r1, #0x34
	lsr r1, r0, r2
	cmp r0, r1, lsl r2
	andeq r1, r1, #1
	rsbeq r5, r1, #2
	b _020ED9F0
_020ED9D8:
	cmp r0, #0
	rsbeq r2, r1, #0x14
	asreq r1, sb, r2
	cmpeq sb, r1, lsl r2
	andeq r1, r1, #1
	rsbeq r5, r1, #2
_020ED9F0:
	cmp r0, #0
	bne _020EDB4C
	ldr r1, _020EDEA4 @ =0x7FF00000
	cmp sb, r1
	bne _020EDAA4
	add r0, r4, #0x100000
	add r0, r0, #0xc0000000
	orrs r0, r0, r7
	bne _020EDA38
	ldr r0, [sp, #0xb0]
	ldr r1, [sp, #0xb4]
	mov r2, r0
	mov r3, r1
	bl FUN_020F116C
	add sp, sp, #0x80
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_020EDA38:
	sub r0, r1, #0x40000000
	cmp r4, r0
	blt _020EDA68
	cmp r8, #0
	ldrge r0, [sp, #0xb0]
	ldrge r1, [sp, #0xb4]
	movlt r0, #0
	add sp, sp, #0x80
	movlt r1, r0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_020EDA68:
	cmp r8, #0
	mov r0, #0
	addge sp, sp, #0x80
	movge r1, r0
	popge {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	addge sp, sp, #0x10
	bxge lr
	ldr r2, [sp, #0xb0]
	ldr r3, [sp, #0xb4]
	mov r1, r0
	bl FUN_020F116C
	add sp, sp, #0x80
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_020EDAA4:
	sub r0, r1, #0x40000000
	cmp sb, r0
	bne _020EDAF0
	cmp r8, #0
	ldrge r0, [sp, #0xa8]
	ldrge r1, [sp, #0xac]
	addge sp, sp, #0x80
	popge {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	addge sp, sp, #0x10
	bxge lr
	ldr r2, [sp, #0xa8]
	ldr r3, [sp, #0xac]
	sub r1, r1, #0x40000000
	mov r0, #0
	bl FUN_020F2DA0
	add sp, sp, #0x80
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_020EDAF0:
	cmp r8, #0x40000000
	bne _020EDB1C
	ldr r0, [sp, #0xa8]
	ldr r1, [sp, #0xac]
	mov r2, r0
	mov r3, r1
	bl FUN_020F0C54
	add sp, sp, #0x80
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_020EDB1C:
	ldr r0, _020EDEB0 @ =0x3FE00000
	cmp r8, r0
	bne _020EDB4C
	cmp r6, #0
	blt _020EDB4C
	ldr r0, [sp, #0xa8]
	ldr r1, [sp, #0xac]
	bl FUN_020F0FB8
	add sp, sp, #0x80
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_020EDB4C:
	ldr r0, [sp, #0xa8]
	ldr r1, [sp, #0xac]
	bl FUN_020EEAA4
	str r0, [sp, #0x70]
	str r1, [sp, #0x74]
	cmp r7, #0
	bne _020EDC50
	ldr r0, _020EDEA4 @ =0x7FF00000
	cmp r4, r0
	cmpne r4, #0
	subne r0, r0, #0x40000000
	cmpne r4, r0
	bne _020EDC50
	ldr r2, [sp, #0x70]
	ldr r3, [sp, #0x74]
	str r2, [sp, #0x78]
	str r3, [sp, #0x7c]
	cmp r8, #0
	bge _020EDBAC
	ldr r1, _020EDEA0 @ =0x3FF00000
	mov r0, #0
	bl FUN_020F2DA0
	str r0, [sp, #0x78]
	str r1, [sp, #0x7c]
_020EDBAC:
	cmp r6, #0
	bge _020EDC38
	add r0, r4, #0x100000
	add r0, r0, #0xc0000000
	orrs r0, r0, r5
	bne _020EDC14
	ldr r0, [sp, #0x78]
	ldr r1, [sp, #0x7c]
	mov r2, r0
	mov r3, r1
	bl FUN_020F116C
	mov r4, r0
	mov r5, r1
	ldr r0, [sp, #0x78]
	ldr r1, [sp, #0x7c]
	mov r2, r0
	mov r3, r1
	bl FUN_020F116C
	mov r2, r0
	mov r3, r1
	mov r0, r4
	mov r1, r5
	bl FUN_020F2DA0
	str r0, [sp, #0x78]
	str r1, [sp, #0x7c]
	b _020EDC38
_020EDC14:
	cmp r5, #1
	bne _020EDC38
	mov r0, #0
	ldr r2, [sp, #0x78]
	ldr r3, [sp, #0x7c]
	mov r1, r0
	bl FUN_020F116C
	str r0, [sp, #0x78]
	str r1, [sp, #0x7c]
_020EDC38:
	ldr r0, [sp, #0x78]
	ldr r1, [sp, #0x7c]
	add sp, sp, #0x80
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_020EDC50:
	asr r0, r6, #0x1f
	add r7, r0, #1
	orrs r0, r7, r5
	bne _020EDC88
	ldr r0, _020EDEB4 @ =_021110EC
	ldr r1, _020EDEB8 @ =0x021E58C0
	ldr r0, [r0]
	mov r2, #0x21
	str r2, [r1]
	bl FUN_020F2080
	add sp, sp, #0x80
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_020EDC88:
	ldr r3, _020EDEBC @ =0x41E00000
	cmp sb, r3
	ble _020EDF8C
	add r0, r3, #0x2100000
	cmp sb, r0
	ble _020EDCF8
	ldr r1, _020EDEC0 @ =0x3FEFFFFF
	cmp r4, r1
	bgt _020EDCCC
	cmp r8, #0
	mov r0, #0
	addlt r1, r1, #0x40000001
	add sp, sp, #0x80
	movge r1, r0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_020EDCCC:
	add r0, r1, #1
	cmp r4, r0
	blt _020EDCF8
	cmp r8, #0
	mov r0, #0
	addgt r1, r1, #0x40000001
	add sp, sp, #0x80
	movle r1, r0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_020EDCF8:
	ldr r2, _020EDEC0 @ =0x3FEFFFFF
	cmp r4, r2
	bge _020EDD24
	cmp r8, #0
	mov r0, #0
	addlt r1, r2, #0x40000001
	add sp, sp, #0x80
	movge r1, r0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_020EDD24:
	add r0, r2, #1
	cmp r4, r0
	ble _020EDD50
	cmp r8, #0
	mov r0, #0
	addgt r1, r2, #0x40000001
	add sp, sp, #0x80
	movle r1, r0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_020EDD50:
	ldr r0, [sp, #0xa8]
	ldr r1, [sp, #0xac]
	add r3, r2, #1
	mov r2, #0
	bl FUN_020F116C
	mov r2, r0
	mov r3, r1
	str r0, [sp, #0x50]
	str r1, [sp, #0x54]
	bl FUN_020F0C54
	mov r6, r1
	mov r4, r0
	ldr r2, [sp, #0x50]
	ldr r3, [sp, #0x54]
	ldr r1, _020EDEC4 @ =0x3FD00000
	mov r0, #0
	bl FUN_020F0C54
	mov r2, r0
	mov r3, r1
	ldr r0, _020EDEC8 @ =0x55555555
	sub r1, r0, #0x15800000
	bl FUN_020F116C
	mov r2, r0
	mov r3, r1
	ldr r0, [sp, #0x50]
	ldr r1, [sp, #0x54]
	bl FUN_020F0C54
	mov r2, r0
	mov r3, r1
	mov r0, #0
	ldr r1, _020EDEB0 @ =0x3FE00000
	bl FUN_020F116C
	mov r2, r0
	mov r0, r4
	mov r3, r1
	mov r1, r6
	bl FUN_020F0C54
	mov r6, r0
	mov r8, r1
	mov r0, #0x60000000
	ldr r1, _020EDECC @ =0x3FF71547
	ldr r2, [sp, #0x50]
	ldr r3, [sp, #0x54]
	bl FUN_020F0C54
	mov r4, r0
	mov sb, r1
	ldr r0, _020EDED0 @ =0xF85DDF44
	ldr r1, _020EDED4 @ =0x3E54AE0B
	ldr r2, [sp, #0x50]
	ldr r3, [sp, #0x54]
	bl FUN_020F0C54
	mov fp, r0
	mov sl, r1
	ldr r0, _020EDED8 @ =0x652B82FE
	ldr r1, _020EDECC @ =0x3FF71547
	mov r2, r6
	mov r3, r8
	bl FUN_020F0C54
	mov r2, r0
	mov r3, r1
	mov r0, fp
	mov r1, sl
	bl FUN_020F116C
	mov r6, r0
	mov r8, r1
	mov r0, r4
	mov r1, sb
	mov r2, r6
	mov r3, r8
	bl FUN_020F068C
	mov r2, r4
	mov r3, sb
	str r1, [sp, #0x5c]
	mov r0, #0
	str r0, [sp, #0x58]
	bl FUN_020F116C
	mov r2, r0
	mov r0, r6
	mov r3, r1
	mov r1, r8
	bl FUN_020F116C
	mov r4, r0
	mov r8, r1
	b _020EE4E8
	.align 2, 0
_020EDEA0: .4byte 0x3FF00000
_020EDEA4: .4byte 0x7FF00000
_020EDEA8: .4byte 0x43400000
_020EDEAC: .4byte 0xFFFFFC01
_020EDEB0: .4byte 0x3FE00000
_020EDEB4: .4byte _021110EC
_020EDEB8: .4byte 0x021E58C0
_020EDEBC: .4byte 0x41E00000
_020EDEC0: .4byte 0x3FEFFFFF
_020EDEC4: .4byte 0x3FD00000
_020EDEC8: .4byte 0x55555555
_020EDECC: .4byte 0x3FF71547
_020EDED0: .4byte 0xF85DDF44
_020EDED4: .4byte 0x3E54AE0B
_020EDED8: .4byte 0x652B82FE
_020EDEDC: .4byte 0x0003988E
_020EDEE0: .4byte 0x000BB67A
_020EDEE4: .4byte 0x0210E94C
_020EDEE8: .4byte 0x4A454EEF
_020EDEEC: .4byte 0x3FCA7E28
_020EDEF0: .4byte 0x93C9DB65
_020EDEF4: .4byte 0x3FCD864A
_020EDEF8: .4byte 0xA91D4101
_020EDEFC: .4byte 0x3FD17460
_020EDF00: .4byte 0x518F264D
_020EDF04: .4byte 0x3FD55555
_020EDF08: .4byte 0xDB6FABFF
_020EDF0C: .4byte 0x3FDB6DB6
_020EDF10: .4byte 0x33333303
_020EDF14: .4byte 0x3FE33333
_020EDF18: .4byte 0x40080000
_020EDF1C: .4byte 0x3FEEC709
_020EDF20: .4byte 0x145B01F5
_020EDF24: .4byte 0xBE3E2FE0
_020EDF28: .4byte 0xDC3A03FD
_020EDF2C: .4byte 0x0210E95C
_020EDF30: .4byte 0x0210E93C
_020EDF34: .4byte 0x40900000
_020EDF38: .4byte 0x8800759C
_020EDF3C: .4byte 0x7E37E43C
_020EDF40: .4byte 0x3C971547
_020EDF44: .4byte 0x3F6F3400
_020EDF48: .4byte 0xC2F8F359
_020EDF4C: .4byte 0x01A56E1F
_020EDF50: .4byte 0x3FE62E43
_020EDF54: .4byte 0xFEFA39EF
_020EDF58: .4byte 0x3FE62E42
_020EDF5C: .4byte 0x0CA86C39
_020EDF60: .4byte 0xBE205C61
_020EDF64: .4byte 0x72BEA4D0
_020EDF68: .4byte 0x3E663769
_020EDF6C: .4byte 0xC5D26BF1
_020EDF70: .4byte 0xBEBBBD41
_020EDF74: .4byte 0xAF25DE2C
_020EDF78: .4byte 0x3F11566A
_020EDF7C: .4byte 0x16BEBD93
_020EDF80: .4byte 0xBF66C16C
_020EDF84: .4byte 0x5555553E
_020EDF88: .4byte 0x3FC55555
_020EDF8C:
	cmp r4, #0x100000
	mov r6, #0
	bge _020EDFBC
	ldr r0, [sp, #0x70]
	ldr r1, [sp, #0x74]
	mov r2, r6
	add r3, r3, #0x1600000
	bl FUN_020F0C54
	mov r4, r1
	str r0, [sp, #0x70]
	str r4, [sp, #0x74]
	sub r6, r6, #0x35
_020EDFBC:
	ldr r0, _020EDEAC @ =0xFFFFFC01
	ldr r1, _020EDEDC @ =0x0003988E
	and r2, r4, r0, lsr #12
	add r0, r0, r4, asr #20
	orr sb, r2, #0xff00000
	cmp r2, r1
	add r6, r6, r0
	orr sb, sb, #0x30000000
	movle r8, #0
	ble _020EDFFC
	ldr r0, _020EDEE0 @ =0x000BB67A
	cmp r2, r0
	movlt r8, #1
	addge r6, r6, #1
	subge sb, sb, #0x100000
	movge r8, #0
_020EDFFC:
	ldr r2, _020EDEE4 @ =0x0210E94C
	ldr r0, [sp, #0x70]
	add r1, r2, r8, lsl #3
	ldr r3, [r1, #4]
	ldr r2, [r2, r8, lsl #3]
	mov r1, sb
	str sb, [sp, #0x74]
	bl FUN_020F116C
	ldr r2, _020EDEE4 @ =0x0210E94C
	mov sl, r0
	add r3, r2, r8, lsl #3
	mov r4, r1
	ldr r0, [sp, #0x70]
	ldr r2, [r2, r8, lsl #3]
	ldr r3, [r3, #4]
	mov r1, sb
	bl FUN_020F068C
	mov r3, r1
	mov r2, r0
	ldr r1, _020EDEA0 @ =0x3FF00000
	mov r0, #0
	bl FUN_020F2DA0
	str r1, [sp, #0x24]
	mov fp, r0
	ldr r3, [sp, #0x24]
	mov r0, sl
	mov r1, r4
	mov r2, fp
	bl FUN_020F0C54
	asr r2, sb, #1
	orr r2, r2, #0x20000000
	mov sb, r1
	add r2, r2, #0x80000
	add r1, r2, r8, lsl #18
	ldr r2, _020EDEE4 @ =0x0210E94C
	str r0, [sp, #0x28]
	add r3, r2, r8, lsl #3
	mov r0, #0
	ldr r2, [r2, r8, lsl #3]
	ldr r3, [r3, #4]
	str sb, [sp, #0x4c]
	str r1, [sp, #0x44]
	str r0, [sp, #0x48]
	str r0, [sp, #0x40]
	bl FUN_020F116C
	mov r2, r0
	mov r3, r1
	ldr r0, [sp, #0x70]
	ldr r1, [sp, #0x74]
	bl FUN_020F116C
	str r0, [sp, #0x2c]
	str r1, [sp, #0x1c]
	ldr r0, [sp, #0x48]
	ldr r2, [sp, #0x40]
	ldr r3, [sp, #0x44]
	mov r1, sb
	bl FUN_020F0C54
	mov r2, r0
	mov r3, r1
	mov r0, sl
	mov r1, r4
	bl FUN_020F116C
	mov sl, r0
	mov r4, r1
	ldr r2, [sp, #0x2c]
	ldr r3, [sp, #0x1c]
	ldr r0, [sp, #0x48]
	mov r1, sb
	bl FUN_020F0C54
	mov r2, r0
	mov r3, r1
	mov r0, sl
	mov r1, r4
	bl FUN_020F116C
	mov r3, r1
	mov r2, r0
	ldr r1, [sp, #0x24]
	mov r0, fp
	bl FUN_020F0C54
	str r0, [sp, #0x30]
	ldr r0, [sp, #0x28]
	str r1, [sp, #0x14]
	mov r1, sb
	mov r2, r0
	mov r3, sb
	bl FUN_020F0C54
	mov r4, r0
	mov sl, r1
	mov r2, r4
	mov r3, sl
	bl FUN_020F0C54
	str r0, [sp, #0x34]
	mov fp, r1
	ldr r0, _020EDEE8 @ =0x4A454EEF
	ldr r1, _020EDEEC @ =0x3FCA7E28
	mov r2, r4
	mov r3, sl
	bl FUN_020F0C54
	mov r2, r0
	mov r3, r1
	ldr r0, _020EDEF0 @ =0x93C9DB65
	ldr r1, _020EDEF4 @ =0x3FCD864A
	bl FUN_020F068C
	mov r2, r0
	mov r3, r1
	mov r0, r4
	mov r1, sl
	bl FUN_020F0C54
	mov r2, r0
	mov r3, r1
	ldr r0, _020EDEF8 @ =0xA91D4101
	ldr r1, _020EDEFC @ =0x3FD17460
	bl FUN_020F068C
	mov r2, r0
	mov r3, r1
	mov r0, r4
	mov r1, sl
	bl FUN_020F0C54
	mov r2, r0
	mov r3, r1
	ldr r0, _020EDF00 @ =0x518F264D
	ldr r1, _020EDF04 @ =0x3FD55555
	bl FUN_020F068C
	mov r2, r0
	mov r3, r1
	mov r0, r4
	mov r1, sl
	bl FUN_020F0C54
	mov r2, r0
	mov r3, r1
	ldr r0, _020EDF08 @ =0xDB6FABFF
	ldr r1, _020EDF0C @ =0x3FDB6DB6
	bl FUN_020F068C
	mov r2, r0
	mov r3, r1
	mov r0, r4
	mov r1, sl
	bl FUN_020F0C54
	mov r2, r0
	mov r3, r1
	ldr r0, _020EDF10 @ =0x33333303
	ldr r1, _020EDF14 @ =0x3FE33333
	bl FUN_020F068C
	mov r2, r0
	mov r3, r1
	ldr r0, [sp, #0x34]
	mov r1, fp
	bl FUN_020F0C54
	mov r4, r0
	mov sl, r1
	ldr r0, [sp, #0x48]
	ldr r2, [sp, #0x28]
	mov r1, sb
	mov r3, sb
	bl FUN_020F068C
	mov r2, r0
	mov r3, r1
	ldr r0, [sp, #0x30]
	ldr r1, [sp, #0x14]
	bl FUN_020F0C54
	mov r2, r0
	mov r3, r1
	mov r0, r4
	mov r1, sl
	bl FUN_020F068C
	mov r4, r0
	ldr r0, [sp, #0x48]
	mov sl, r1
	mov r1, sb
	mov r2, r0
	mov r3, r1
	bl FUN_020F0C54
	str r1, [sp, #0xc]
	mov fp, r0
	ldr r1, _020EDF18 @ =0x40080000
	ldr r3, [sp, #0xc]
	mov r0, #0
	mov r2, fp
	bl FUN_020F068C
	mov r2, r4
	mov r3, sl
	bl FUN_020F068C
	mov r0, #0
	ldr r3, _020EDF18 @ =0x40080000
	mov r2, r0
	str r1, [sp, #0x44]
	str r0, [sp, #0x40]
	bl FUN_020F116C
	ldr r3, [sp, #0xc]
	mov r2, fp
	bl FUN_020F116C
	mov r2, r0
	mov r3, r1
	mov r0, r4
	mov r1, sl
	bl FUN_020F116C
	str r0, [sp, #0x38]
	str r1, [sp, #4]
	ldr r0, [sp, #0x48]
	ldr r2, [sp, #0x40]
	ldr r3, [sp, #0x44]
	mov r1, sb
	bl FUN_020F0C54
	mov r4, r0
	mov sl, r1
	ldr r0, [sp, #0x30]
	ldr r1, [sp, #0x14]
	ldr r2, [sp, #0x40]
	ldr r3, [sp, #0x44]
	bl FUN_020F0C54
	str r0, [sp, #0x3c]
	mov fp, r1
	ldr r0, [sp, #0x38]
	ldr r1, [sp, #4]
	ldr r2, [sp, #0x28]
	mov r3, sb
	bl FUN_020F0C54
	mov r2, r0
	mov r3, r1
	ldr r0, [sp, #0x3c]
	mov r1, fp
	bl FUN_020F068C
	mov sb, r0
	mov fp, r1
	mov r0, r4
	mov r1, sl
	mov r2, sb
	mov r3, fp
	bl FUN_020F068C
	mov r0, #0
	mov r2, r4
	mov r3, sl
	str r1, [sp, #0x6c]
	str r0, [sp, #0x68]
	bl FUN_020F116C
	mov r2, r0
	mov r3, r1
	mov r0, sb
	mov r1, fp
	bl FUN_020F116C
	mov sl, r1
	mov fp, r0
	ldr r1, _020EDF1C @ =0x3FEEC709
	ldr r2, [sp, #0x68]
	ldr r3, [sp, #0x6c]
	mov r0, #0xe0000000
	bl FUN_020F0C54
	mov r4, r0
	mov sb, r1
	ldr r0, _020EDF20 @ =0x145B01F5
	ldr r1, _020EDF24 @ =0xBE3E2FE0
	ldr r2, [sp, #0x68]
	ldr r3, [sp, #0x6c]
	bl FUN_020F0C54
	mov r2, fp
	mov r3, sl
	mov fp, r0
	mov sl, r1
	ldr r0, _020EDF28 @ =0xDC3A03FD
	ldr r1, _020EDF1C @ =0x3FEEC709
	bl FUN_020F0C54
	mov r2, r0
	mov r3, r1
	mov r0, fp
	mov r1, sl
	bl FUN_020F068C
	mov r2, r0
	mov r3, r1
	ldr r0, _020EDF2C @ =0x0210E95C
	add r1, r0, r8, lsl #3
	ldr r0, [r0, r8, lsl #3]
	ldr r1, [r1, #4]
	bl FUN_020F068C
	mov fp, r0
	mov sl, r1
	mov r0, r6
	bl FUN_020F0BD8
	str r0, [sp, #0x50]
	str r1, [sp, #0x54]
	mov r0, r4
	mov r1, sb
	mov r2, fp
	mov r3, sl
	bl FUN_020F068C
	ldr r2, _020EDF30 @ =0x0210E93C
	add r3, r2, r8, lsl #3
	ldr r2, [r2, r8, lsl #3]
	ldr r3, [r3, #4]
	bl FUN_020F068C
	mov r2, r0
	mov r3, r1
	ldr r0, [sp, #0x50]
	ldr r1, [sp, #0x54]
	bl FUN_020F068C
	str r1, [sp, #0x5c]
	mov r0, #0
	str r0, [sp, #0x58]
	ldr r2, [sp, #0x50]
	ldr r3, [sp, #0x54]
	bl FUN_020F116C
	ldr r2, _020EDF30 @ =0x0210E93C
	add r3, r2, r8, lsl #3
	ldr r2, [r2, r8, lsl #3]
	ldr r3, [r3, #4]
	bl FUN_020F116C
	mov r2, r4
	mov r3, sb
	bl FUN_020F116C
	mov r2, r0
	mov r0, fp
	mov r3, r1
	mov r1, sl
	bl FUN_020F116C
	mov r4, r0
	mov r8, r1
_020EE4E8:
	sub r0, r5, #1
	ldr r1, [sp, #0xb4]
	orrs r0, r7, r0
	ldr r5, _020EDEA0 @ =0x3FF00000
	mov r2, #0
	ldr r0, [sp, #0xb0]
	mov r3, r1
	mov r6, #0
	subeq r5, r5, #0x80000000
	str r1, [sp, #0x64]
	str r2, [sp, #0x60]
	bl FUN_020F116C
	mov r2, r0
	mov r3, r1
	ldr r0, [sp, #0x58]
	ldr r1, [sp, #0x5c]
	bl FUN_020F0C54
	mov r7, r0
	mov sb, r1
	ldr r0, [sp, #0xb0]
	ldr r1, [sp, #0xb4]
	mov r2, r4
	mov r3, r8
	bl FUN_020F0C54
	mov r2, r0
	mov r3, r1
	mov r0, r7
	mov r1, sb
	bl FUN_020F068C
	mov r7, r0
	mov r8, r1
	ldr r0, [sp, #0x60]
	ldr r1, [sp, #0x64]
	ldr r2, [sp, #0x58]
	ldr r3, [sp, #0x5c]
	bl FUN_020F0C54
	mov r2, r0
	mov r3, r1
	mov r0, r7
	mov r1, r8
	str r2, [sp, #0x68]
	str r3, [sp, #0x6c]
	bl FUN_020F068C
	mov sb, r1
	ldr r2, _020EDF34 @ =0x40900000
	str r0, [sp, #0x78]
	str sb, [sp, #0x7c]
	cmp sb, r2
	blt _020EE674
	add r1, sb, #0xf700000
	add r1, r1, #0xb0000000
	orrs r0, r1, r0
	beq _020EE5F4
	ldr r0, _020EDF38 @ =0x8800759C
	ldr r1, _020EDF3C @ =0x7E37E43C
	mov r2, r6
	mov r3, r5
	bl FUN_020F0C54
	mov r2, r0
	mov r3, r1
	ldr r0, _020EDF38 @ =0x8800759C
	ldr r1, _020EDF3C @ =0x7E37E43C
	bl FUN_020F0C54
	add sp, sp, #0x80
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_020EE5F4:
	ldr r0, _020EDED8 @ =0x652B82FE
	ldr r1, _020EDF40 @ =0x3C971547
	mov r2, r7
	mov r3, r8
	bl FUN_020F068C
	mov r4, r0
	mov sl, r1
	ldr r0, [sp, #0x78]
	ldr r2, [sp, #0x68]
	ldr r3, [sp, #0x6c]
	mov r1, sb
	bl FUN_020F116C
	mov r2, r0
	mov r3, r1
	mov r0, r4
	mov r1, sl
	bl FUN_020F17DC
	bls _020EE728
	ldr r0, _020EDF38 @ =0x8800759C
	ldr r1, _020EDF3C @ =0x7E37E43C
	mov r2, r6
	mov r3, r5
	bl FUN_020F0C54
	mov r2, r0
	mov r3, r1
	ldr r0, _020EDF38 @ =0x8800759C
	ldr r1, _020EDF3C @ =0x7E37E43C
	bl FUN_020F0C54
	add sp, sp, #0x80
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_020EE674:
	bic r3, sb, #0x80000000
	add r2, r2, #0xcc00
	cmp r3, r2
	blt _020EE728
	ldr r2, _020EDF44 @ =0x3F6F3400
	add r2, sb, r2
	orrs r2, r2, r0
	beq _020EE6CC
	ldr r0, _020EDF48 @ =0xC2F8F359
	ldr r1, _020EDF4C @ =0x01A56E1F
	mov r2, r6
	mov r3, r5
	bl FUN_020F0C54
	mov r2, r0
	mov r3, r1
	ldr r0, _020EDF48 @ =0xC2F8F359
	ldr r1, _020EDF4C @ =0x01A56E1F
	bl FUN_020F0C54
	add sp, sp, #0x80
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_020EE6CC:
	ldr r2, [sp, #0x68]
	ldr r3, [sp, #0x6c]
	bl FUN_020F116C
	mov r2, r0
	mov r3, r1
	mov r0, r7
	mov r1, r8
	bl FUN_020F1874
	bhi _020EE728
	ldr r0, _020EDF48 @ =0xC2F8F359
	ldr r1, _020EDF4C @ =0x01A56E1F
	mov r2, r6
	mov r3, r5
	bl FUN_020F0C54
	mov r2, r0
	mov r3, r1
	ldr r0, _020EDF48 @ =0xC2F8F359
	ldr r1, _020EDF4C @ =0x01A56E1F
	bl FUN_020F0C54
	add sp, sp, #0x80
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_020EE728:
	ldr r0, _020EDEAC @ =0xFFFFFC01
	bic r3, sb, #0x80000000
	ldr r1, _020EDEB0 @ =0x3FE00000
	add r2, r0, r3, asr #20
	cmp r3, r1
	mov r4, #0
	ble _020EE7A4
	mov r1, #0x100000
	add r2, r2, #1
	add r2, sb, r1, asr r2
	bic r3, r2, #0x80000000
	add r0, r0, r3, asr #20
	sub r3, r1, #1
	mvn r3, r3, asr r0
	sub r1, r1, #1
	and r1, r2, r1
	and r2, r2, r3
	str r2, [sp, #0x54]
	str r4, [sp, #0x50]
	orr r1, r1, #0x100000
	rsb r0, r0, #0x14
	asr r4, r1, r0
	cmp sb, #0
	ldr r0, [sp, #0x68]
	ldr r1, [sp, #0x6c]
	ldr r2, [sp, #0x50]
	ldr r3, [sp, #0x54]
	rsblt r4, r4, #0
	bl FUN_020F116C
	str r0, [sp, #0x68]
	str r1, [sp, #0x6c]
_020EE7A4:
	ldr r2, [sp, #0x68]
	ldr r3, [sp, #0x6c]
	mov r0, r7
	mov r1, r8
	bl FUN_020F068C
	mov r3, r1
	mov r0, #0
	ldr r1, _020EDF50 @ =0x3FE62E43
	mov r2, r0
	str r3, [sp, #0x54]
	str r0, [sp, #0x50]
	bl FUN_020F0C54
	mov sb, r0
	mov sl, r1
	ldr r0, [sp, #0x50]
	ldr r1, [sp, #0x54]
	ldr r2, [sp, #0x68]
	ldr r3, [sp, #0x6c]
	bl FUN_020F116C
	mov r2, r0
	mov r0, r7
	mov r3, r1
	mov r1, r8
	bl FUN_020F116C
	mov r2, r0
	mov r3, r1
	ldr r0, _020EDF54 @ =0xFEFA39EF
	ldr r1, _020EDF58 @ =0x3FE62E42
	bl FUN_020F0C54
	mov r7, r0
	mov r8, r1
	ldr r0, _020EDF5C @ =0x0CA86C39
	ldr r1, _020EDF60 @ =0xBE205C61
	ldr r2, [sp, #0x50]
	ldr r3, [sp, #0x54]
	bl FUN_020F0C54
	mov r2, r0
	mov r0, r7
	mov r3, r1
	mov r1, r8
	bl FUN_020F068C
	mov r7, r0
	mov r8, r1
	mov r0, sb
	mov r1, sl
	mov r2, r7
	mov r3, r8
	bl FUN_020F068C
	mov r2, sb
	mov r3, sl
	str r0, [sp, #0x78]
	str r1, [sp, #0x7c]
	bl FUN_020F116C
	mov r2, r0
	mov r3, r1
	mov r0, r7
	mov r1, r8
	bl FUN_020F116C
	mov r8, r0
	mov sb, r1
	ldr r0, [sp, #0x78]
	ldr r1, [sp, #0x7c]
	mov r2, r0
	mov r3, r1
	bl FUN_020F0C54
	mov r2, r0
	str r2, [sp, #0x50]
	mov r3, r1
	str r3, [sp, #0x54]
	ldr r0, _020EDF64 @ =0x72BEA4D0
	ldr r1, _020EDF68 @ =0x3E663769
	bl FUN_020F0C54
	mov r2, r0
	mov r3, r1
	ldr r0, _020EDF6C @ =0xC5D26BF1
	ldr r1, _020EDF70 @ =0xBEBBBD41
	bl FUN_020F068C
	mov r2, r0
	mov r3, r1
	ldr r0, [sp, #0x50]
	ldr r1, [sp, #0x54]
	bl FUN_020F0C54
	mov r2, r0
	mov r3, r1
	ldr r0, _020EDF74 @ =0xAF25DE2C
	ldr r1, _020EDF78 @ =0x3F11566A
	bl FUN_020F068C
	mov r2, r0
	mov r3, r1
	ldr r0, [sp, #0x50]
	ldr r1, [sp, #0x54]
	bl FUN_020F0C54
	mov r2, r0
	mov r3, r1
	ldr r0, _020EDF7C @ =0x16BEBD93
	ldr r1, _020EDF80 @ =0xBF66C16C
	bl FUN_020F068C
	mov r2, r0
	mov r3, r1
	ldr r0, [sp, #0x50]
	ldr r1, [sp, #0x54]
	bl FUN_020F0C54
	mov r2, r0
	mov r3, r1
	ldr r0, _020EDF84 @ =0x5555553E
	ldr r1, _020EDF88 @ =0x3FC55555
	bl FUN_020F068C
	mov r2, r0
	mov r3, r1
	ldr r0, [sp, #0x50]
	ldr r1, [sp, #0x54]
	bl FUN_020F0C54
	mov r2, r0
	mov r3, r1
	ldr r0, [sp, #0x78]
	ldr r1, [sp, #0x7c]
	bl FUN_020F116C
	mov r2, r0
	str r2, [sp, #0x58]
	mov r3, r1
	str r3, [sp, #0x5c]
	ldr r0, [sp, #0x78]
	ldr r1, [sp, #0x7c]
	bl FUN_020F0C54
	mov r7, r0
	mov sl, r1
	ldr r0, [sp, #0x58]
	ldr r1, [sp, #0x5c]
	mov r2, #0
	mov r3, #0x40000000
	bl FUN_020F116C
	mov r2, r0
	mov r0, r7
	mov r3, r1
	mov r1, sl
	bl FUN_020F2DA0
	mov r7, r0
	mov sl, r1
	ldr r0, [sp, #0x78]
	ldr r1, [sp, #0x7c]
	mov r2, r8
	mov r3, sb
	bl FUN_020F0C54
	mov r2, r0
	mov r0, r8
	mov r3, r1
	mov r1, sb
	bl FUN_020F068C
	mov r2, r0
	mov r0, r7
	mov r3, r1
	mov r1, sl
	bl FUN_020F116C
	ldr r2, [sp, #0x78]
	ldr r3, [sp, #0x7c]
	bl FUN_020F116C
	mov r3, r1
	mov r2, r0
	ldr r1, _020EDEA0 @ =0x3FF00000
	mov r0, #0
	bl FUN_020F116C
	add r3, r1, r4, lsl #20
	asr r2, r3, #0x14
	str r0, [sp, #0x78]
	cmp r2, #0
	str r1, [sp, #0x7c]
	addgt r0, sp, #0x78
	strgt r3, [r0, #4]
	bgt _020EEA58
	mov r2, r4
	bl FUN_020F030C
	str r0, [sp, #0x78]
	str r1, [sp, #0x7c]
_020EEA58:
	ldr r2, [sp, #0x78]
	ldr r3, [sp, #0x7c]
	mov r0, r6
	mov r1, r5
	bl FUN_020F0C54
	add sp, sp, #0x80
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
	arm_func_end FUN_020ED8F4

	arm_func_start FUN_020EEA7C
FUN_020EEA7C: @ 0x020EEA7C
	push {r0, r1, r2, r3}
	ldr r1, [sp, #4]
	ldr r0, [sp, #0xc]
	bic r1, r1, #0x80000000
	and r0, r0, #0x80000000
	orr r1, r1, r0
	ldr r0, [sp]
	str r1, [sp, #4]
	add sp, sp, #0x10
	bx lr
	arm_func_end FUN_020EEA7C

	arm_func_start FUN_020EEAA4
FUN_020EEAA4: @ 0x020EEAA4
	push {r0, r1, r2, r3}
	add r2, sp, #0
	ldr r1, [r2, #4]
	ldr r0, [sp]
	bic r1, r1, #0x80000000
	str r1, [r2, #4]
	add sp, sp, #0x10
	bx lr
	arm_func_end FUN_020EEAA4

	arm_func_start FUN_020EEAC4
FUN_020EEAC4: @ 0x020EEAC4
	push {r0, r1, r2, r3}
	push {r4, lr}
	ldr r1, [sp, #0xc]
	ldr r0, _020EEB70 @ =0x7FF00000
	mov r4, r2
	bic r3, r1, #0x80000000
	mov r2, #0
	str r2, [r4]
	cmp r3, r0
	ldr r0, [sp, #8]
	bge _020EEAF8
	orrs r0, r3, r0
	bne _020EEB0C
_020EEAF8:
	ldr r0, [sp, #8]
	ldr r1, [sp, #0xc]
	pop {r4, lr}
	add sp, sp, #0x10
	bx lr
_020EEB0C:
	cmp r3, #0x100000
	bge _020EEB38
	ldr r0, [sp, #8]
	ldr r1, [sp, #0xc]
	ldr r3, _020EEB74 @ =0x43500000
	bl FUN_020F0C54
	mvn r2, #0x35
	str r0, [sp, #8]
	str r1, [sp, #0xc]
	str r2, [r4]
	bic r3, r1, #0x80000000
_020EEB38:
	ldr r2, _020EEB78 @ =0x800FFFFF
	ldr r0, _020EEB7C @ =0xFFFFFC02
	and r1, r1, r2
	orr r1, r1, #0xfe00000
	orr r1, r1, #0x30000000
	ldr r2, [r4]
	add r0, r0, r3, asr #20
	add r2, r2, r0
	ldr r0, [sp, #8]
	str r2, [r4]
	str r1, [sp, #0xc]
	pop {r4, lr}
	add sp, sp, #0x10
	bx lr
	.align 2, 0
_020EEB70: .4byte 0x7FF00000
_020EEB74: .4byte 0x43500000
_020EEB78: .4byte 0x800FFFFF
_020EEB7C: .4byte 0xFFFFFC02
	arm_func_end FUN_020EEAC4

	arm_func_start FUN_020EEB80
FUN_020EEB80: @ 0x020EEB80
	push {r0, r1, r2, r3}
	push {r4, lr}
	ldr r0, [sp, #8]
	ldr r1, [sp, #0xc]
	mov r4, r2
	bl FUN_020F029C
	cmp r0, #2
	ble _020EEBB8
	mov r0, #0
	ldr r2, [sp, #8]
	ldr r3, [sp, #0xc]
	mov r1, r0
	bl FUN_020F19B4
	bne _020EEBCC
_020EEBB8:
	ldr r0, [sp, #8]
	ldr r1, [sp, #0xc]
	pop {r4, lr}
	add sp, sp, #0x10
	bx lr
_020EEBCC:
	ldr r3, [sp, #0xc]
	ldr r0, _020EEDA0 @ =0x7FF00000
	ldr r1, [sp, #8]
	and r0, r3, r0
	asrs ip, r0, #0x14
	bne _020EEC58
	bic r0, r3, #0x80000000
	orrs r0, r1, r0
	ldreq r0, [sp, #8]
	ldreq r1, [sp, #0xc]
	popeq {r4, lr}
	addeq sp, sp, #0x10
	bxeq lr
	ldr r0, [sp, #8]
	ldr r1, [sp, #0xc]
	ldr r3, _020EEDA4 @ =0x43500000
	mov r2, #0
	bl FUN_020F0C54
	mov r3, r1
	ldr r1, _020EEDA0 @ =0x7FF00000
	ldr ip, _020EEDA8 @ =0xFFFF3CB0
	and r1, r3, r1
	mov r2, r0
	asr r0, r1, #0x14
	str r2, [sp, #8]
	str r3, [sp, #0xc]
	cmp r4, ip
	sub ip, r0, #0x36
	bge _020EEC58
	ldr r0, _020EEDAC @ =0xC2F8F359
	ldr r1, _020EEDB0 @ =0x01A56E1F
	bl FUN_020F0C54
	pop {r4, lr}
	add sp, sp, #0x10
	bx lr
_020EEC58:
	ldr r0, _020EEDB4 @ =0x000007FF
	cmp ip, r0
	bne _020EEC84
	ldr r0, [sp, #8]
	ldr r1, [sp, #0xc]
	mov r2, r0
	mov r3, r1
	bl FUN_020F068C
	pop {r4, lr}
	add sp, sp, #0x10
	bx lr
_020EEC84:
	add r2, ip, r4
	sub r0, r0, #1
	cmp r2, r0
	ble _020EECC8
	ldr r2, [sp, #8]
	ldr r3, [sp, #0xc]
	ldr r0, _020EEDB8 @ =0x8800759C
	ldr r1, _020EEDBC @ =0x7E37E43C
	bl FUN_020EEA7C
	mov r2, r0
	mov r3, r1
	ldr r0, _020EEDB8 @ =0x8800759C
	ldr r1, _020EEDBC @ =0x7E37E43C
	bl FUN_020F0C54
	pop {r4, lr}
	add sp, sp, #0x10
	bx lr
_020EECC8:
	cmp r2, #0
	ble _020EECF0
	ldr r1, _020EEDC0 @ =0x800FFFFF
	ldr r0, [sp, #8]
	and r1, r3, r1
	orr r1, r1, r2, lsl #20
	str r1, [sp, #0xc]
	pop {r4, lr}
	add sp, sp, #0x10
	bx lr
_020EECF0:
	mvn r0, #0x35
	cmp r2, r0
	bgt _020EED70
	ldr r0, _020EEDC4 @ =0x0000C350
	cmp r4, r0
	ble _020EED3C
	ldr r2, [sp, #8]
	ldr r3, [sp, #0xc]
	ldr r0, _020EEDB8 @ =0x8800759C
	ldr r1, _020EEDBC @ =0x7E37E43C
	bl FUN_020EEA7C
	mov r2, r0
	mov r3, r1
	ldr r0, _020EEDB8 @ =0x8800759C
	ldr r1, _020EEDBC @ =0x7E37E43C
	bl FUN_020F0C54
	pop {r4, lr}
	add sp, sp, #0x10
	bx lr
_020EED3C:
	ldr r2, [sp, #8]
	ldr r3, [sp, #0xc]
	ldr r0, _020EEDAC @ =0xC2F8F359
	ldr r1, _020EEDB0 @ =0x01A56E1F
	bl FUN_020EEA7C
	mov r2, r0
	mov r3, r1
	ldr r0, _020EEDAC @ =0xC2F8F359
	ldr r1, _020EEDB0 @ =0x01A56E1F
	bl FUN_020F0C54
	pop {r4, lr}
	add sp, sp, #0x10
	bx lr
_020EED70:
	ldr r0, _020EEDC0 @ =0x800FFFFF
	add r1, r2, #0x36
	and r0, r3, r0
	orr r3, r0, r1, lsl #20
	ldr r2, [sp, #8]
	ldr r1, _020EEDC8 @ =0x3C900000
	mov r0, #0
	str r3, [sp, #0xc]
	bl FUN_020F0C54
	pop {r4, lr}
	add sp, sp, #0x10
	bx lr
	.align 2, 0
_020EEDA0: .4byte 0x7FF00000
_020EEDA4: .4byte 0x43500000
_020EEDA8: .4byte 0xFFFF3CB0
_020EEDAC: .4byte 0xC2F8F359
_020EEDB0: .4byte 0x01A56E1F
_020EEDB4: .4byte 0x000007FF
_020EEDB8: .4byte 0x8800759C
_020EEDBC: .4byte 0x7E37E43C
_020EEDC0: .4byte 0x800FFFFF
_020EEDC4: .4byte 0x0000C350
_020EEDC8: .4byte 0x3C900000
	arm_func_end FUN_020EEB80

	arm_func_start FUN_020EEDCC
FUN_020EEDCC: @ 0x020EEDCC
	ldr ip, _020EEDD4 @ =FUN_020ED8F4
	bx ip
	.align 2, 0
_020EEDD4: .4byte FUN_020ED8F4
	arm_func_end FUN_020EEDCC

	arm_func_start FUN_020EEDD8
FUN_020EEDD8: @ 0x020EEDD8
	add r3, r0, #5
	ldrb r2, [r3, r1]
	add ip, r3, r1
	cmp r2, #5
	movhi r0, #1
	bxhi lr
	mvnlo r0, #0
	bxlo lr
	ldrb r2, [r0, #4]
	add ip, ip, #1
	add r3, r3, r2
	cmp ip, r3
	bhs _020EEE28
_020EEE0C:
	ldrb r2, [ip]
	cmp r2, #0
	movne r0, #1
	bxne lr
	add ip, ip, #1
	cmp ip, r3
	blo _020EEE0C
_020EEE28:
	sub r1, r1, #1
	add r0, r0, r1
	ldrb r0, [r0, #5]
	tst r0, #1
	movne r0, #1
	mvneq r0, #0
	bx lr
	arm_func_end FUN_020EEDD8

	arm_func_start FUN_020EEE44
FUN_020EEE44: @ 0x020EEE44
	add r3, r0, #5
	add r1, r3, r1
	sub ip, r1, #1
	mov r1, #0
_020EEE54:
	ldrb r2, [ip]
	cmp r2, #9
	addlo r0, r2, #1
	strblo r0, [ip]
	bxlo lr
	cmp ip, r3
	bne _020EEE88
	mov r1, #1
	strb r1, [ip]
	ldrsh r1, [r0, #2]
	add r1, r1, #1
	strh r1, [r0, #2]
	bx lr
_020EEE88:
	strb r1, [ip], #-1
	b _020EEE54
	arm_func_end FUN_020EEE44

	arm_func_start FUN_020EEE90
FUN_020EEE90: @ 0x020EEE90
	bx lr
	arm_func_end FUN_020EEE90

	arm_func_start FUN_020EEE94
FUN_020EEE94: @ 0x020EEE94
	push {r3, r4, r5, lr}
	mov r4, r1
	mov r5, r0
	cmp r4, #0
	pople {r3, r4, r5, pc}
	ldrb r2, [r5, #4]
	cmp r4, r2
	popge {r3, r4, r5, pc}
	bl FUN_020EEDD8
	strb r4, [r5, #4]
	cmp r0, #0
	poplt {r3, r4, r5, pc}
	mov r0, r5
	mov r1, r4
	bl FUN_020EEE44
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020EEE94

	arm_func_start FUN_020EEED4
FUN_020EEED4: @ 0x020EEED4
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sl, r0
	mov r0, #0
	mov r8, r2
	strb r0, [sl]
	mov sb, r1
	cmp r8, #0
	strb r0, [sl, #4]
	cmpeq sb, #0
	beq _020EEF60
	mov r6, #0xa
	mov fp, r0
	mov r5, r0
	mov r4, r0
_020EEF0C:
	ldrb r1, [sl, #4]
	mov r0, sb
	mov r2, r6
	add r3, r1, #1
	mov r7, r1
	strb r3, [sl, #4]
	mov r1, r8
	mov r3, fp
	bl FUN_020F290C
	add r1, sl, r7
	strb r0, [r1, #5]
	mov r0, sb
	mov r1, r8
	mov r2, #0xa
	mov r3, #0
	bl FUN_020F2900
	mov r8, r1
	mov sb, r0
	cmp r8, r5
	cmpeq sb, r4
	bne _020EEF0C
_020EEF60:
	ldrb r0, [sl, #4]
	add r2, sl, #5
	add r0, r2, r0
	sub r3, r0, #1
	cmp r2, r3
	bhs _020EEF90
_020EEF78:
	ldrb r0, [r3]
	ldrb r1, [r2]
	strb r0, [r2], #1
	strb r1, [r3], #-1
	cmp r2, r3
	blo _020EEF78
_020EEF90:
	ldrb r0, [sl, #4]
	sub r0, r0, #1
	strh r0, [sl, #2]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_020EEED4

	arm_func_start FUN_020EEFA0
FUN_020EEFA0: @ 0x020EEFA0
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x40
	ldrb r6, [r1, #4]
	ldrb r5, [r2, #4]
	mov r4, #0
	add r3, sp, #0
	add r5, r6, r5
	sub r5, r5, #1
	add r3, r3, r5
	add r6, r3, #1
	mov r7, r6
	strb r4, [r0]
	cmp r5, #0
	ble _020EF068
	add lr, r1, #5
	add fp, r2, #5
_020EEFE0:
	ldrb r3, [r2, #4]
	sub sl, r3, #1
	sub r3, r5, sl
	subs sb, r3, #1
	ldrb r3, [r1, #4]
	movmi sb, #0
	submi sl, r5, #1
	add r8, sl, #1
	sub r3, r3, sb
	cmp r8, r3
	movgt r8, r3
	add sl, fp, sl
	add sb, lr, sb
	cmp r8, #0
	ble _020EF034
_020EF01C:
	ldrb ip, [sb], #1
	ldrb r3, [sl], #-1
	sub r8, r8, #1
	cmp r8, #0
	mla r4, ip, r3, r4
	bgt _020EF01C
_020EF034:
	ldr r3, _020EF120 @ =0xCCCCCCCD
	sub r5, r5, #1
	umull r8, sb, r4, r3
	lsr sb, sb, #3
	cmp r5, #0
	mov sl, #0xa
	umull r8, sb, sl, sb
	sub sb, r4, r8
	strb sb, [r6, #-1]!
	mov r8, r4
	umull r3, r4, r8, r3
	lsr r4, r4, #3
	bgt _020EEFE0
_020EF068:
	ldrsh r3, [r1, #2]
	ldrsh r1, [r2, #2]
	cmp r4, #0
	add r1, r3, r1
	strh r1, [r0, #2]
	beq _020EF090
	strb r4, [r6, #-1]!
	ldrsh r1, [r0, #2]
	add r1, r1, #1
	strh r1, [r0, #2]
_020EF090:
	mov r3, #0
	b _020EF0A8
_020EF098:
	ldrb r2, [r6], #1
	add r1, r0, r3
	add r3, r3, #1
	strb r2, [r1, #5]
_020EF0A8:
	cmp r3, #0x20
	bge _020EF0B8
	cmp r6, r7
	blo _020EF098
_020EF0B8:
	cmp r6, r7
	addhs sp, sp, #0x40
	strb r3, [r0, #4]
	pophs {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldrb r1, [r6]
	cmp r1, #5
	addlo sp, sp, #0x40
	poplo {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	bne _020EF110
	add r2, r6, #1
	cmp r2, r7
	bhs _020EF100
_020EF0E8:
	ldrb r1, [r2]
	cmp r1, #0
	bne _020EF110
	add r2, r2, #1
	cmp r2, r7
	blo _020EF0E8
_020EF100:
	ldrb r1, [r6, #-1]
	tst r1, #1
	addeq sp, sp, #0x40
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020EF110:
	ldrb r1, [r0, #4]
	bl FUN_020EEE44
	add sp, sp, #0x40
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020EF120: .4byte 0xCCCCCCCD
	arm_func_end FUN_020EEFA0

	arm_func_start FUN_020EF124
FUN_020EF124: @ 0x020EF124
	push {r3, lr}
	strh r2, [r0, #2]
	mov ip, #0
	strb ip, [r0]
	b _020EF14C
_020EF138:
	ldrsb r3, [r1], #1
	add r2, r0, ip
	add ip, ip, #1
	sub r3, r3, #0x30
	strb r3, [r2, #5]
_020EF14C:
	cmp ip, #0x20
	bge _020EF160
	ldrsb r2, [r1]
	cmp r2, #0
	bne _020EF138
_020EF160:
	strb ip, [r0, #4]
	ldrsb r2, [r1]
	cmp r2, #0
	popeq {r3, pc}
	cmp r2, #5
	poplt {r3, pc}
	bgt _020EF1B4
	ldrsb r2, [r1, #1]
	add r1, r1, #1
	cmp r2, #0
	beq _020EF1A0
_020EF18C:
	cmp r2, #0x30
	bne _020EF1B4
	ldrsb r2, [r1, #1]!
	cmp r2, #0
	bne _020EF18C
_020EF1A0:
	sub r1, ip, #1
	add r1, r0, r1
	ldrb r1, [r1, #5]
	tst r1, #1
	popeq {r3, pc}
_020EF1B4:
	ldrb r1, [r0, #4]
	bl FUN_020EEE44
	pop {r3, pc}
	arm_func_end FUN_020EF124

	arm_func_start FUN_020EF1C0
FUN_020EF1C0: @ 0x020EF1C0
	push {r4, r5, lr}
	sub sp, sp, #0x4c
	mov r4, r1
	mvn r2, #0x34
	mov r5, r0
	cmp r4, r2
	bgt _020EF1F0
	bge _020EF2BC
	sub r0, r2, #0xb
	cmp r4, r0
	beq _020EF2A4
	b _020EF44C
_020EF1F0:
	add r1, r4, #0x20
	cmp r1, #0x28
	addls pc, pc, r1, lsl #2
	b _020EF44C
_020EF200: @ jump table
	b _020EF2D0 @ case 0
	b _020EF44C @ case 1
	b _020EF44C @ case 2
	b _020EF44C @ case 3
	b _020EF44C @ case 4
	b _020EF44C @ case 5
	b _020EF44C @ case 6
	b _020EF44C @ case 7
	b _020EF44C @ case 8
	b _020EF44C @ case 9
	b _020EF44C @ case 10
	b _020EF44C @ case 11
	b _020EF44C @ case 12
	b _020EF44C @ case 13
	b _020EF44C @ case 14
	b _020EF44C @ case 15
	b _020EF2E4 @ case 16
	b _020EF44C @ case 17
	b _020EF44C @ case 18
	b _020EF44C @ case 19
	b _020EF44C @ case 20
	b _020EF44C @ case 21
	b _020EF44C @ case 22
	b _020EF44C @ case 23
	b _020EF2F8 @ case 24
	b _020EF30C @ case 25
	b _020EF320 @ case 26
	b _020EF334 @ case 27
	b _020EF348 @ case 28
	b _020EF35C @ case 29
	b _020EF370 @ case 30
	b _020EF384 @ case 31
	b _020EF398 @ case 32
	b _020EF3AC @ case 33
	b _020EF3C0 @ case 34
	b _020EF3D4 @ case 35
	b _020EF3E8 @ case 36
	b _020EF3FC @ case 37
	b _020EF410 @ case 38
	b _020EF424 @ case 39
	b _020EF438 @ case 40
_020EF2A4:
	ldr r1, _020EF4F0 @ =_02111408
	mov r0, r5
	mvn r2, #0x13
	bl FUN_020EF124
	add sp, sp, #0x4c
	pop {r4, r5, pc}
_020EF2BC:
	ldr r1, _020EF4F4 @ =_02111438
	add r2, r2, #0x25
	bl FUN_020EF124
	add sp, sp, #0x4c
	pop {r4, r5, pc}
_020EF2D0:
	ldr r1, _020EF4F8 @ =_02111460
	add r2, r2, #0x2b
	bl FUN_020EF124
	add sp, sp, #0x4c
	pop {r4, r5, pc}
_020EF2E4:
	ldr r1, _020EF4FC @ =_02111478
	add r2, r2, #0x30
	bl FUN_020EF124
	add sp, sp, #0x4c
	pop {r4, r5, pc}
_020EF2F8:
	ldr r1, _020EF500 @ =_02111488
	add r2, r2, #0x32
	bl FUN_020EF124
	add sp, sp, #0x4c
	pop {r4, r5, pc}
_020EF30C:
	ldr r1, _020EF504 @ =_02111490
	add r2, r2, #0x32
	bl FUN_020EF124
	add sp, sp, #0x4c
	pop {r4, r5, pc}
_020EF320:
	ldr r1, _020EF508 @ =_02111498
	add r2, r2, #0x33
	bl FUN_020EF124
	add sp, sp, #0x4c
	pop {r4, r5, pc}
_020EF334:
	ldr r1, _020EF50C @ =_021114A0
	add r2, r2, #0x33
	bl FUN_020EF124
	add sp, sp, #0x4c
	pop {r4, r5, pc}
_020EF348:
	ldr r1, _020EF510 @ =_021114A8
	add r2, r2, #0x33
	bl FUN_020EF124
	add sp, sp, #0x4c
	pop {r4, r5, pc}
_020EF35C:
	ldr r1, _020EF514 @ =_021114AC
	add r2, r2, #0x34
	bl FUN_020EF124
	add sp, sp, #0x4c
	pop {r4, r5, pc}
_020EF370:
	ldr r1, _020EF518 @ =_021114B0
	add r2, r2, #0x34
	bl FUN_020EF124
	add sp, sp, #0x4c
	pop {r4, r5, pc}
_020EF384:
	ldr r1, _020EF51C @ =_021114B4
	add r2, r2, #0x34
	bl FUN_020EF124
	add sp, sp, #0x4c
	pop {r4, r5, pc}
_020EF398:
	ldr r1, _020EF520 @ =_021114B8
	mov r2, #0
	bl FUN_020EF124
	add sp, sp, #0x4c
	pop {r4, r5, pc}
_020EF3AC:
	ldr r1, _020EF524 @ =_021114BC
	mov r2, #0
	bl FUN_020EF124
	add sp, sp, #0x4c
	pop {r4, r5, pc}
_020EF3C0:
	ldr r1, _020EF528 @ =_021114C0
	mov r2, #0
	bl FUN_020EF124
	add sp, sp, #0x4c
	pop {r4, r5, pc}
_020EF3D4:
	ldr r1, _020EF52C @ =_021114C4
	mov r2, #0
	bl FUN_020EF124
	add sp, sp, #0x4c
	pop {r4, r5, pc}
_020EF3E8:
	ldr r1, _020EF530 @ =_021114C8
	mov r2, #1
	bl FUN_020EF124
	add sp, sp, #0x4c
	pop {r4, r5, pc}
_020EF3FC:
	ldr r1, _020EF534 @ =_021114CC
	mov r2, #1
	bl FUN_020EF124
	add sp, sp, #0x4c
	pop {r4, r5, pc}
_020EF410:
	ldr r1, _020EF538 @ =_021114D0
	mov r2, #1
	bl FUN_020EF124
	add sp, sp, #0x4c
	pop {r4, r5, pc}
_020EF424:
	ldr r1, _020EF53C @ =_021114D4
	mov r2, #2
	bl FUN_020EF124
	add sp, sp, #0x4c
	pop {r4, r5, pc}
_020EF438:
	ldr r1, _020EF540 @ =_021114D8
	mov r2, #2
	bl FUN_020EF124
	add sp, sp, #0x4c
	pop {r4, r5, pc}
_020EF44C:
	and r0, r4, #0x80000000
	add r1, r4, r0, lsr #31
	add r0, sp, #0x26
	asr r1, r1, #1
	bl FUN_020EF1C0
	add r1, sp, #0x26
	mov r0, r5
	mov r2, r1
	bl FUN_020EEFA0
	tst r4, #1
	addeq sp, sp, #0x4c
	popeq {r4, r5, pc}
	add r3, sp, #0
	mov ip, r5
	mov r2, #9
_020EF488:
	ldrh r1, [ip]
	ldrh r0, [ip, #2]
	add ip, ip, #4
	subs r2, r2, #1
	strh r1, [r3]
	strh r0, [r3, #2]
	add r3, r3, #4
	bne _020EF488
	ldrh r0, [ip]
	cmp r4, #0
	strh r0, [r3]
	add r0, sp, #0x26
	ble _020EF4CC
	ldr r1, _020EF524 @ =_021114BC
	mov r2, #0
	bl FUN_020EF124
	b _020EF4D8
_020EF4CC:
	ldr r1, _020EF51C @ =_021114B4
	mvn r2, #0
	bl FUN_020EF124
_020EF4D8:
	add r1, sp, #0
	add r2, sp, #0x26
	mov r0, r5
	bl FUN_020EEFA0
	add sp, sp, #0x4c
	pop {r4, r5, pc}
	.align 2, 0
_020EF4F0: .4byte _02111408
_020EF4F4: .4byte _02111438
_020EF4F8: .4byte _02111460
_020EF4FC: .4byte _02111478
_020EF500: .4byte _02111488
_020EF504: .4byte _02111490
_020EF508: .4byte _02111498
_020EF50C: .4byte _021114A0
_020EF510: .4byte _021114A8
_020EF514: .4byte _021114AC
_020EF518: .4byte _021114B0
_020EF51C: .4byte _021114B4
_020EF520: .4byte _021114B8
_020EF524: .4byte _021114BC
_020EF528: .4byte _021114C0
_020EF52C: .4byte _021114C4
_020EF530: .4byte _021114C8
_020EF534: .4byte _021114CC
_020EF538: .4byte _021114D0
_020EF53C: .4byte _021114D4
_020EF540: .4byte _021114D8
	arm_func_end FUN_020EF1C0

	arm_func_start FUN_020EF544
FUN_020EF544: @ 0x020EF544
	push {r4, lr}
	ldrb r3, [r0, #5]
	cmp r3, #0
	bne _020EF568
	ldrb r0, [r1, #5]
	cmp r0, #0
	moveq r0, #1
	movne r0, #0
	pop {r4, pc}
_020EF568:
	ldrb r2, [r1, #5]
	cmp r2, #0
	bne _020EF584
	cmp r3, #0
	moveq r0, #1
	movne r0, #0
	pop {r4, pc}
_020EF584:
	ldrsh r3, [r0, #2]
	ldrsh r2, [r1, #2]
	cmp r3, r2
	bne _020EF61C
	ldrb r4, [r0, #4]
	ldrb r2, [r1, #4]
	mov ip, #0
	mov lr, r4
	cmp r4, r2
	movgt lr, r2
	cmp lr, #0
	ble _020EF5DC
_020EF5B4:
	add r3, r0, ip
	add r2, r1, ip
	ldrb r3, [r3, #5]
	ldrb r2, [r2, #5]
	cmp r3, r2
	movne r0, #0
	popne {r4, pc}
	add ip, ip, #1
	cmp ip, lr
	blt _020EF5B4
_020EF5DC:
	cmp lr, r4
	moveq r0, r1
	ldrb r1, [r0, #4]
	cmp ip, r1
	bge _020EF614
_020EF5F0:
	add r1, r0, ip
	ldrb r1, [r1, #5]
	cmp r1, #0
	movne r0, #0
	popne {r4, pc}
	ldrb r1, [r0, #4]
	add ip, ip, #1
	cmp ip, r1
	blt _020EF5F0
_020EF614:
	mov r0, #1
	pop {r4, pc}
_020EF61C:
	mov r0, #0
	pop {r4, pc}
	arm_func_end FUN_020EF544

	arm_func_start FUN_020EF624
FUN_020EF624: @ 0x020EF624
	push {r3, r4, r5, lr}
	ldrb r2, [r0, #5]
	cmp r2, #0
	bne _020EF648
	ldrb r0, [r1, #5]
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	pop {r3, r4, r5, pc}
_020EF648:
	ldrb r2, [r1, #5]
	cmp r2, #0
	moveq r0, #0
	popeq {r3, r4, r5, pc}
	ldrsh r3, [r1, #2]
	ldrsh r2, [r0, #2]
	cmp r2, r3
	bne _020EF6F8
	ldrb r5, [r0, #4]
	ldrb r4, [r1, #4]
	mov ip, #0
	mov lr, r5
	cmp r5, r4
	movgt lr, r4
	cmp lr, #0
	ble _020EF6BC
_020EF688:
	add r3, r1, ip
	add r2, r0, ip
	ldrb r3, [r3, #5]
	ldrb r2, [r2, #5]
	cmp r2, r3
	movlo r0, #1
	poplo {r3, r4, r5, pc}
	cmp r3, r2
	movlo r0, #0
	poplo {r3, r4, r5, pc}
	add ip, ip, #1
	cmp ip, lr
	blt _020EF688
_020EF6BC:
	cmp lr, r5
	bne _020EF6F0
	cmp ip, r4
	bge _020EF6F0
_020EF6CC:
	add r0, r1, ip
	ldrb r0, [r0, #5]
	cmp r0, #0
	movne r0, #1
	popne {r3, r4, r5, pc}
	ldrb r0, [r1, #4]
	add ip, ip, #1
	cmp ip, r0
	blt _020EF6CC
_020EF6F0:
	mov r0, #0
	pop {r3, r4, r5, pc}
_020EF6F8:
	movlt r0, #1
	movge r0, #0
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020EF624

	arm_func_start FUN_020EF704
FUN_020EF704: @ 0x020EF704
	push {r3, r4, r5, r6, r7, lr}
	mov r6, r0
	mov r5, #9
_020EF710:
	ldrh r4, [r1]
	ldrh r3, [r1, #2]
	add r1, r1, #4
	subs r5, r5, #1
	strh r4, [r6]
	strh r3, [r6, #2]
	add r6, r6, #4
	bne _020EF710
	ldrh r1, [r1]
	strh r1, [r6]
	ldrb r1, [r2, #5]
	cmp r1, #0
	popeq {r3, r4, r5, r6, r7, pc}
	ldrb r7, [r0, #4]
	ldrb r3, [r2, #4]
	ldrsh r4, [r0, #2]
	mov r1, r7
	cmp r7, r3
	movlt r1, r3
	ldrsh r3, [r2, #2]
	sub r6, r4, r3
	add r1, r1, r6
	cmp r1, #0x20
	movgt r1, #0x20
	cmp r7, r1
	bge _020EF79C
	mov r4, #0
_020EF77C:
	ldrb r5, [r0, #4]
	add r3, r0, r7
	add r5, r5, #1
	strb r5, [r0, #4]
	strb r4, [r3, #5]
	ldrb r7, [r0, #4]
	cmp r7, r1
	blt _020EF77C
_020EF79C:
	ldrb r4, [r2, #4]
	add r3, r0, #5
	add ip, r3, r1
	add r4, r4, r6
	cmp r4, r1
	addlt ip, r3, r4
	sub r4, ip, r3
	add r1, r2, #5
	sub r4, r4, r6
	add lr, r1, r4
	mov r4, lr
	b _020EF830
_020EF7CC:
	ldrb r7, [ip, #-1]!
	ldrb r5, [lr, #-1]!
	cmp r7, r5
	bhs _020EF820
	ldrb r7, [ip, #-1]
	sub r5, ip, #1
	cmp r7, #0
	bne _020EF7F8
_020EF7EC:
	ldrb r7, [r5, #-1]!
	cmp r7, #0
	beq _020EF7EC
_020EF7F8:
	cmp r5, ip
	beq _020EF820
_020EF800:
	ldrb r7, [r5]
	sub r7, r7, #1
	strb r7, [r5]
	ldrb r7, [r5, #1]!
	cmp r5, ip
	add r7, r7, #0xa
	strb r7, [r5]
	bne _020EF800
_020EF820:
	ldrb r7, [ip]
	ldrb r5, [lr]
	sub r5, r7, r5
	strb r5, [ip]
_020EF830:
	cmp ip, r3
	cmphi lr, r1
	bhi _020EF7CC
	ldrb r5, [r2, #4]
	sub lr, r4, r1
	cmp lr, r5
	bge _020EF90C
	ldrb r1, [r4]
	mov r7, #0
	cmp r1, #5
	movlo r7, #1
	blo _020EF8A8
	bne _020EF8A8
	add r1, r2, #5
	add r2, r1, r5
	add r4, r4, #1
	cmp r4, r2
	bhs _020EF890
_020EF878:
	ldrb r1, [r4]
	cmp r1, #0
	bne _020EF90C
	add r4, r4, #1
	cmp r4, r2
	blo _020EF878
_020EF890:
	add r1, r3, lr
	add r2, r1, r6
	ldrb r1, [r2, #-1]
	sub ip, r2, #1
	tst r1, #1
	movne r7, #1
_020EF8A8:
	cmp r7, #0
	beq _020EF90C
	ldrb r1, [ip]
	cmp r1, #1
	bhs _020EF900
	ldrb r1, [ip, #-1]
	sub r2, ip, #1
	cmp r1, #0
	bne _020EF8D8
_020EF8CC:
	ldrb r1, [r2, #-1]!
	cmp r1, #0
	beq _020EF8CC
_020EF8D8:
	cmp r2, ip
	beq _020EF900
_020EF8E0:
	ldrb r1, [r2]
	sub r1, r1, #1
	strb r1, [r2]
	ldrb r1, [r2, #1]!
	cmp r2, ip
	add r1, r1, #0xa
	strb r1, [r2]
	bne _020EF8E0
_020EF900:
	ldrb r1, [ip]
	sub r1, r1, #1
	strb r1, [ip]
_020EF90C:
	ldrb r1, [r3]
	mov r5, r3
	cmp r1, #0
	bne _020EF928
_020EF91C:
	ldrb r1, [r5, #1]!
	cmp r1, #0
	beq _020EF91C
_020EF928:
	cmp r5, r3
	bls _020EF970
	ldrsh r1, [r0, #2]
	sub r2, r5, r3
	and r4, r2, #0xff
	sub r1, r1, r4
	strh r1, [r0, #2]
	ldrb r1, [r0, #4]
	add r2, r3, r1
	cmp r5, r2
	bhs _020EF964
_020EF954:
	ldrb r1, [r5], #1
	cmp r5, r2
	strb r1, [r3], #1
	blo _020EF954
_020EF964:
	ldrb r1, [r0, #4]
	sub r1, r1, r4
	strb r1, [r0, #4]
_020EF970:
	ldrb r1, [r0, #4]
	add r2, r0, #5
	add r3, r2, r1
	cmp r3, r2
	bls _020EF998
_020EF984:
	ldrb r1, [r3, #-1]!
	cmp r1, #0
	bne _020EF998
	cmp r3, r2
	bhi _020EF984
_020EF998:
	sub r1, r3, r2
	add r1, r1, #1
	strb r1, [r0, #4]
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020EF704

	arm_func_start FUN_020EF9A8
FUN_020EF9A8: @ 0x020EF9A8
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x58
	mov r8, r1
	mov r6, r2
	mov r7, r0
	mov r0, r8
	mov r1, r6
	bl FUN_020F0288
	cmp r0, #0
	movne r1, #1
	moveq r1, #0
	lsl r4, r1, #0x18
	mov r0, #0
	mov r1, r0
	mov r2, r8
	mov r3, r6
	asr r5, r4, #0x18
	bl FUN_020F19B4
	bne _020EFA14
	strb r5, [r7]
	mov r1, #0
	strh r1, [r7, #2]
	mov r0, #1
	strb r0, [r7, #4]
	add sp, sp, #0x58
	strb r1, [r7, #5]
	pop {r4, r5, r6, r7, r8, pc}
_020EFA14:
	mov r0, r8
	mov r1, r6
	bl FUN_020F029C
	cmp r0, #2
	bgt _020EFA60
	strb r5, [r7]
	mov r2, #0
	strh r2, [r7, #2]
	mov r2, #1
	mov r0, r8
	mov r1, r6
	strb r2, [r7, #4]
	bl FUN_020F029C
	cmp r0, #1
	moveq r0, #0x4e
	movne r0, #0x49
	add sp, sp, #0x58
	strb r0, [r7, #5]
	pop {r4, r5, r6, r7, r8, pc}
_020EFA60:
	cmp r5, #0
	beq _020EFA84
	mov r0, #0
	mov r1, r0
	mov r2, r8
	mov r3, r6
	bl FUN_020F116C
	mov r8, r0
	mov r6, r1
_020EFA84:
	add r2, sp, #8
	mov r0, r8
	mov r1, r6
	bl FUN_020EEAC4
	mov r4, r0
	mov r6, r1
	orr ip, r4, #0
	rsbs r2, ip, #0
	orr r3, r6, #0x100000
	rsc r1, r3, #0
	mov r0, #0
	and r3, r3, r1
	sub r1, r0, #1
	and ip, ip, r2
	mov r2, r1
	adds r0, ip, r1
	adc r1, r3, r2
	str r4, [sp]
	str r6, [sp, #4]
	bl FUN_020F01F4
	rsb r8, r0, #0x35
	ldr r1, [sp, #8]
	add r0, sp, #0xc
	sub r1, r1, r8
	bl FUN_020EF1C0
	mov r0, r4
	mov r1, r6
	mov r2, r8
	bl FUN_020EEB80
	bl FUN_020F0B4C
	mov r2, r1
	mov r1, r0
	add r0, sp, #0x32
	bl FUN_020EEED4
	mov r0, r7
	add r1, sp, #0x32
	add r2, sp, #0xc
	bl FUN_020EEFA0
	strb r5, [r7]
	add sp, sp, #0x58
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020EF9A8

	arm_func_start FUN_020EFB28
FUN_020EFB28: @ 0x020EFB28
	push {r3, r4, r5, lr}
	mov r4, r3
	ldrsh r5, [r0, #2]
	mov r0, r4
	bl FUN_020EF9A8
	ldrb r0, [r4, #5]
	cmp r0, #9
	pophi {r3, r4, r5, pc}
	cmp r5, #0x20
	movgt r5, #0x20
	mov r0, r4
	mov r1, r5
	bl FUN_020EEE94
	ldrb r0, [r4, #4]
	cmp r0, r5
	bge _020EFB8C
	mov r1, #0
_020EFB6C:
	ldrb r2, [r4, #4]
	add r0, r4, r0
	add r2, r2, #1
	strb r2, [r4, #4]
	strb r1, [r0, #5]
	ldrb r0, [r4, #4]
	cmp r0, r5
	blt _020EFB6C
_020EFB8C:
	ldrsh r1, [r4, #2]
	sub r0, r0, #1
	mov r2, #0
	sub r0, r1, r0
	strh r0, [r4, #2]
	ldrb r0, [r4, #4]
	cmp r0, #0
	pople {r3, r4, r5, pc}
_020EFBAC:
	add r1, r4, r2
	ldrb r0, [r1, #5]
	add r2, r2, #1
	add r0, r0, #0x30
	strb r0, [r1, #5]
	ldrb r0, [r4, #4]
	cmp r2, r0
	blt _020EFBAC
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020EFB28

	arm_func_start FUN_020EFBD0
FUN_020EFBD0: @ 0x020EFBD0
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0xfc
	mov r4, r0
	ldrb r0, [r4, #4]
	cmp r0, #0
	bne _020EFC10
	ldrsb r0, [r4]
	mov r2, #0
	cmp r0, #0
	ldreq r3, _020F01D4 @ =0x3FF00000
	mov r0, #0
	ldrne r3, _020F01D8 @ =0xBFF00000
	mov r1, r0
	bl FUN_020EEA7C
	add sp, sp, #0xfc
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020EFC10:
	ldrb r0, [r4, #5]
	cmp r0, #0x30
	beq _020EFC30
	cmp r0, #0x49
	beq _020EFC58
	cmp r0, #0x4e
	beq _020EFC8C
	b _020EFCD4
_020EFC30:
	ldrsb r0, [r4]
	mov r2, #0
	cmp r0, #0
	ldreq r3, _020F01D4 @ =0x3FF00000
	mov r0, #0
	ldrne r3, _020F01D8 @ =0xBFF00000
	mov r1, r0
	bl FUN_020EEA7C
	add sp, sp, #0xfc
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020EFC58:
	ldrsb r0, [r4]
	mov r5, #0
	cmp r0, #0
	ldreq r4, _020F01D4 @ =0x3FF00000
	ldr r0, _020F01DC @ =_021110E8
	ldrne r4, _020F01D8 @ =0xBFF00000
	ldr r0, [r0]
	bl FUN_020F2080
	mov r2, r5
	mov r3, r4
	bl FUN_020EEA7C
	add sp, sp, #0xfc
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020EFC8C:
	ldr r1, _020F01E0 @ =0x7FF00000
	add r3, sp, #0x10
	mov r2, #0
	str r2, [r3]
	str r1, [r3, #4]
	ldrsb r0, [r4]
	cmp r0, #0
	beq _020EFCBC
	orr r0, r1, #0x80000000
	orr r1, r2, r2
	str r1, [r3]
	str r0, [r3, #4]
_020EFCBC:
	ldm r3, {r0, r1}
	orr r0, r0, #0
	orr r1, r1, #0x80000
	stm r3, {r0, r1}
	add sp, sp, #0xfc
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020EFCD4:
	add r3, sp, #0xd6
	mov r5, r4
	mov r2, #9
_020EFCE0:
	ldrh r1, [r5]
	ldrh r0, [r5, #2]
	add r5, r5, #4
	subs r2, r2, #1
	strh r1, [r3]
	strh r0, [r3, #2]
	add r3, r3, #4
	bne _020EFCE0
	ldrh r0, [r5]
	add r1, sp, #0xdb
	strh r0, [r3]
	ldrb r0, [sp, #0xda]
	add r5, r1, r0
	cmp r1, r5
	bhs _020EFD30
_020EFD1C:
	ldrb r0, [r1]
	sub r0, r0, #0x30
	strb r0, [r1], #1
	cmp r1, r5
	blo _020EFD1C
_020EFD30:
	ldrb r1, [sp, #0xda]
	ldrsh r2, [sp, #0xd8]
	add r0, sp, #0xb0
	sub r1, r1, #1
	add r1, r2, r1
	strh r1, [sp, #0xd8]
	ldr r1, _020F01E4 @ =_021114DC
	mov r2, #0x134
	ldrsh fp, [sp, #0xd8]
	bl FUN_020EF124
	add r0, sp, #0xb0
	add r1, sp, #0xd6
	bl FUN_020EF624
	cmp r0, #0
	beq _020EFDA0
	ldrsb r0, [r4]
	mov r5, #0
	cmp r0, #0
	ldreq r4, _020F01D4 @ =0x3FF00000
	ldr r0, _020F01DC @ =_021110E8
	ldrne r4, _020F01D8 @ =0xBFF00000
	ldr r0, [r0]
	bl FUN_020F2080
	mov r2, r5
	mov r3, r4
	bl FUN_020EEA7C
	add sp, sp, #0xfc
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020EFDA0:
	add r1, sp, #0xdb
	ldrb r0, [r1]
	add r8, r1, #1
	bl FUN_020F0C18
	str r0, [sp, #8]
	str r1, [sp, #0xc]
	cmp r8, r5
	bhs _020EFE78
_020EFDC0:
	sub r0, r5, r8
	lsr r1, r0, #0x1f
	rsb r0, r1, r0, lsl #29
	adds r7, r1, r0, ror #29
	moveq r7, #8
	mov r6, #0
	mov r2, #0
	cmp r7, #0
	ble _020EFDFC
	mov r0, #0xa
_020EFDE8:
	ldrb r1, [r8], #1
	add r2, r2, #1
	cmp r2, r7
	mla r6, r0, r6, r1
	blt _020EFDE8
_020EFDFC:
	ldr r0, _020F01E8 @ =_021113C8
	ldr r1, [sp, #0xc]
	add r3, r0, r7, lsl #3
	ldr r2, [r3, #-8]
	ldr r0, [sp, #8]
	ldr r3, [r3, #-4]
	bl FUN_020F0C54
	mov r4, r0
	mov sb, r1
	mov r0, r6
	bl FUN_020F0C18
	mov r2, r0
	mov r3, r1
	mov r0, r4
	mov r1, sb
	bl FUN_020F068C
	cmp r6, #0
	mov r6, r0
	mov sl, r1
	beq _020EFE64
	mov r0, r4
	mov r1, sb
	mov r2, r6
	mov r3, sl
	bl FUN_020F19B4
	beq _020EFE78
_020EFE64:
	str r6, [sp, #8]
	str sl, [sp, #0xc]
	cmp r8, r5
	sub fp, fp, r7
	blo _020EFDC0
_020EFE78:
	cmp fp, #0
	bge _020EFEBC
	rsb r0, fp, #0
	bl FUN_020F0BD8
	mov r3, r1
	mov r2, r0
	ldr r1, _020F01EC @ =0x40140000
	mov r0, #0
	bl FUN_020EEDCC
	mov r2, r0
	mov r3, r1
	ldr r0, [sp, #8]
	ldr r1, [sp, #0xc]
	bl FUN_020F2DA0
	str r0, [sp, #8]
	str r1, [sp, #0xc]
	b _020EFEF4
_020EFEBC:
	mov r0, fp
	bl FUN_020F0BD8
	mov r3, r1
	mov r2, r0
	ldr r1, _020F01EC @ =0x40140000
	mov r0, #0
	bl FUN_020EEDCC
	mov r2, r0
	mov r3, r1
	ldr r0, [sp, #8]
	ldr r1, [sp, #0xc]
	bl FUN_020F0C54
	str r0, [sp, #8]
	str r1, [sp, #0xc]
_020EFEF4:
	ldr r0, [sp, #8]
	ldr r1, [sp, #0xc]
	mov r2, fp
	bl FUN_020EEB80
	str r0, [sp, #8]
	str r1, [sp, #0xc]
	bl FUN_020F029C
	cmp r0, #2
	bne _020EFF28
	ldr r0, _020F01F0 @ =0x7FEFFFFF
	mvn r1, #0
	str r1, [sp, #8]
	str r0, [sp, #0xc]
_020EFF28:
	ldr r1, [sp, #8]
	ldr r2, [sp, #0xc]
	add r0, sp, #0x8a
	add r4, sp, #0
	mov r5, #0
	bl FUN_020EF9A8
	add r0, sp, #0x8a
	add r1, sp, #0xd6
	bl FUN_020EF544
	cmp r0, #0
	bne _020F019C
	add r0, sp, #0x8a
	add r1, sp, #0xd6
	bl FUN_020EF624
	cmp r0, #0
	movne r5, #1
	ldr r1, [sp, #8]
	ldr r0, [sp, #0xc]
	cmp r5, #0
	moveq r6, #1
	str r1, [sp]
	str r0, [sp, #4]
	movne r6, #0
_020EFF84:
	cmp r6, #0
	bne _020EFFAC
	ldm r4, {r0, r1}
	adds r0, r0, #1
	adc r1, r1, #0
	stm r4, {r0, r1}
	bl FUN_020F029C
	cmp r0, #2
	beq _020F019C
	b _020EFFC4
_020EFFAC:
	ldr r1, [r4]
	ldr r0, [r4, #4]
	subs r1, r1, #1
	sbc r0, r0, #0
	str r1, [r4]
	str r0, [r4, #4]
_020EFFC4:
	ldr r1, [sp]
	ldr r2, [sp, #4]
	add r0, sp, #0x64
	bl FUN_020EF9A8
	cmp r5, #0
	beq _020EFFF0
	add r0, sp, #0x64
	add r1, sp, #0xd6
	bl FUN_020EF624
	cmp r0, #0
	beq _020F0114
_020EFFF0:
	cmp r5, #0
	bne _020F00CC
	add r0, sp, #0xd6
	add r1, sp, #0x64
	bl FUN_020EF624
	cmp r0, #0
	bne _020F00CC
	add r3, sp, #0x8a
	add r5, sp, #0x3e
	mov r2, #9
_020F0018:
	ldrh r1, [r3]
	ldrh r0, [r3, #2]
	add r3, r3, #4
	strh r1, [r5]
	strh r0, [r5, #2]
	add r5, r5, #4
	subs r2, r2, #1
	bne _020F0018
	ldrh r0, [r3]
	add r3, sp, #0x64
	add r4, sp, #0x8a
	strh r0, [r5]
	mov r2, #9
_020F004C:
	ldrh r1, [r3]
	ldrh r0, [r3, #2]
	add r3, r3, #4
	strh r1, [r4]
	strh r0, [r4, #2]
	add r4, r4, #4
	subs r2, r2, #1
	bne _020F004C
	ldrh r0, [r3]
	add r3, sp, #0x3e
	add r5, sp, #0x64
	strh r0, [r4]
	mov r2, #9
_020F0080:
	ldrh r1, [r3]
	ldrh r0, [r3, #2]
	add r3, r3, #4
	strh r1, [r5]
	strh r0, [r5, #2]
	add r5, r5, #4
	subs r2, r2, #1
	bne _020F0080
	ldrh r4, [r3]
	ldr r3, [sp, #8]
	ldr r1, [sp]
	ldr r2, [sp, #0xc]
	ldr r0, [sp, #4]
	strh r4, [r5]
	str r1, [sp, #8]
	str r0, [sp, #0xc]
	str r3, [sp]
	str r2, [sp, #4]
	b _020F0114
_020F00CC:
	add r7, sp, #0x64
	add r3, sp, #0x8a
	mov r2, #9
_020F00D8:
	ldrh r1, [r7]
	ldrh r0, [r7, #2]
	add r7, r7, #4
	strh r1, [r3]
	strh r0, [r3, #2]
	add r3, r3, #4
	subs r2, r2, #1
	bne _020F00D8
	ldrh r2, [r7]
	ldr r1, [sp]
	ldr r0, [sp, #4]
	strh r2, [r3]
	str r1, [sp, #8]
	str r0, [sp, #0xc]
	b _020EFF84
_020F0114:
	add r0, sp, #0x3e
	add r1, sp, #0xd6
	add r2, sp, #0x8a
	bl FUN_020EF704
	add r0, sp, #0x18
	add r1, sp, #0x64
	add r2, sp, #0xd6
	bl FUN_020EF704
	add r0, sp, #0x3e
	add r1, sp, #0x18
	bl FUN_020EF544
	cmp r0, #0
	beq _020F0178
	ldr r1, [sp, #8]
	ldr r0, [sp, #0xc]
	and r1, r1, #1
	and r0, r0, #0
	cmp r0, #0
	cmpeq r1, #0
	beq _020F019C
	ldr r1, [sp]
	ldr r0, [sp, #4]
	str r1, [sp, #8]
	str r0, [sp, #0xc]
	b _020F019C
_020F0178:
	add r0, sp, #0x3e
	add r1, sp, #0x18
	bl FUN_020EF624
	cmp r0, #0
	bne _020F019C
	ldr r1, [sp]
	ldr r0, [sp, #4]
	str r1, [sp, #8]
	str r0, [sp, #0xc]
_020F019C:
	ldrsb r0, [sp, #0xd6]
	cmp r0, #0
	beq _020F01C4
	mov r0, #0
	ldr r2, [sp, #8]
	ldr r3, [sp, #0xc]
	mov r1, r0
	bl FUN_020F116C
	str r0, [sp, #8]
	str r1, [sp, #0xc]
_020F01C4:
	ldr r0, [sp, #8]
	ldr r1, [sp, #0xc]
	add sp, sp, #0xfc
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0
_020F01D4: .4byte 0x3FF00000
_020F01D8: .4byte 0xBFF00000
_020F01DC: .4byte _021110E8
_020F01E0: .4byte 0x7FF00000
_020F01E4: .4byte _021114DC
_020F01E8: .4byte _021113C8
_020F01EC: .4byte 0x40140000
_020F01F0: .4byte 0x7FEFFFFF
	arm_func_end FUN_020EFBD0

	arm_func_start FUN_020F01F4
FUN_020F01F4: @ 0x020F01F4
	lsr r3, r0, #1
	ldr r2, _020F027C @ =0x55555555
	orr r3, r3, r1, lsl #31
	and r3, r3, r2
	subs ip, r0, r3
	and r2, r2, r1, lsr #1
	ldr r0, _020F0280 @ =0x33333333
	sbc r3, r1, r2
	lsr r1, ip, #2
	orr r1, r1, r3, lsl #30
	and r2, ip, r0
	and r1, r1, r0
	adds r2, r2, r1
	and r1, r3, r0
	and r0, r0, r3, lsr #2
	adc r1, r1, r0
	lsr r0, r2, #4
	orr r0, r0, r1, lsl #28
	adds r2, r2, r0
	ldr r0, _020F0284 @ =0x0F0F0F0F
	adc r1, r1, r1, lsr #4
	and r3, r2, r0
	and r2, r1, r0
	lsr r0, r3, #8
	orr r0, r0, r2, lsl #24
	adds r1, r3, r0
	adc r2, r2, r2, lsr #8
	lsr r0, r1, #0x10
	orr r0, r0, r2, lsl #16
	adds r1, r1, r0
	adc r0, r2, r2, lsr #16
	adds r0, r1, r0
	and r0, r0, #0xff
	bx lr
	.align 2, 0
_020F027C: .4byte 0x55555555
_020F0280: .4byte 0x33333333
_020F0284: .4byte 0x0F0F0F0F
	arm_func_end FUN_020F01F4

	arm_func_start FUN_020F0288
FUN_020F0288: @ 0x020F0288
	push {r0, r1, r2, r3}
	ldr r0, [sp, #4]
	and r0, r0, #0x80000000
	add sp, sp, #0x10
	bx lr
	arm_func_end FUN_020F0288

	arm_func_start FUN_020F029C
FUN_020F029C: @ 0x020F029C
	push {r0, r1, r2, r3}
	ldr r2, [sp, #4]
	ldr r0, _020F0304 @ =0x7FF00000
	ands r1, r2, r0
	beq _020F02D8
	cmp r1, r0
	bne _020F02F8
	ldr r0, _020F0308 @ =0x000FFFFF
	tst r2, r0
	ldreq r0, [sp]
	add sp, sp, #0x10
	cmpeq r0, #0
	movne r0, #1
	moveq r0, #2
	bx lr
_020F02D8:
	ldr r0, _020F0308 @ =0x000FFFFF
	tst r2, r0
	ldreq r0, [sp]
	add sp, sp, #0x10
	cmpeq r0, #0
	movne r0, #5
	moveq r0, #3
	bx lr
_020F02F8:
	mov r0, #4
	add sp, sp, #0x10
	bx lr
	.align 2, 0
_020F0304: .4byte 0x7FF00000
_020F0308: .4byte 0x000FFFFF
	arm_func_end FUN_020F029C

	arm_func_start FUN_020F030C
FUN_020F030C: @ 0x020F030C
	push {r3, r4, lr}
	sub sp, sp, #4
	mov r4, r2
	add r2, sp, #0
	bl FUN_020EEAC4
	ldr r2, [sp]
	add r2, r2, r4
	str r2, [sp]
	bl FUN_020EEB80
	add sp, sp, #4
	pop {r3, r4, pc}
	arm_func_end FUN_020F030C

	arm_func_start FUN_020F0338
FUN_020F0338: @ 0x020F0338
	ldr ip, _020F034C @ =FUN_020D2E54
	mov r2, r0
	mov r0, #0
	sub r1, r0, #1
	bx ip
	.align 2, 0
_020F034C: .4byte FUN_020D2E54
	arm_func_end FUN_020F0338

	arm_func_start FUN_020F0350
FUN_020F0350: @ 0x020F0350
	ldr ip, _020F0364 @ =FUN_020D2F5C
	mov r2, r0
	mov r0, #0
	sub r1, r0, #1
	bx ip
	.align 2, 0
_020F0364: .4byte FUN_020D2F5C
	arm_func_end FUN_020F0350

	arm_func_start FUN_020F0368
FUN_020F0368: @ 0x020F0368
	push {r3, lr}
	ldr r3, _020F03CC @ =0x0210E404
_020F0370:
	ldrb r2, [r0], #1
	cmp r2, #0
	blt _020F0388
	cmp r2, #0x80
	bge _020F0388
	ldrb r2, [r3, r2]
_020F0388:
	ldrb lr, [r1], #1
	and ip, r2, #0xff
	cmp lr, #0
	blt _020F03A4
	cmp lr, #0x80
	bge _020F03A4
	ldrb lr, [r3, lr]
_020F03A4:
	and r2, lr, #0xff
	cmp ip, r2
	mvnlo r0, #0
	poplo {r3, pc}
	movhi r0, #1
	pophi {r3, pc}
	cmp ip, #0
	bne _020F0370
	mov r0, #0
	pop {r3, pc}
	.align 2, 0
_020F03CC: .4byte 0x0210E404
	arm_func_end FUN_020F0368

	arm_func_start FUN_020F03D0
FUN_020F03D0: @ 0x020F03D0
	ldr ip, _020F03D8 @ =FUN_020F0368
	bx ip
	.align 2, 0
_020F03D8: .4byte FUN_020F0368
	arm_func_end FUN_020F03D0

	arm_func_start FUN_020F03DC
FUN_020F03DC: @ 0x020F03DC
	bx lr
	arm_func_end FUN_020F03DC

	arm_func_start FUN_020F03E0
FUN_020F03E0: @ 0x020F03E0
	push {r0, r1, r2, r3}
	push {r3, r4, r5, lr}
	sub sp, sp, #8
	mov r5, r0
	mov r4, r1
	str r4, [r5]
	add r1, sp, #0x20
	mov r0, #0x10
	str r4, [sp]
	str r1, [sp, #4]
	bl FUN_020F4918
	cmp r0, #0
	beq _020F0430
	ldr r1, _020F0458 @ =_02111540
	mov r2, #1
	stm r0, {r1, r2}
	ldr r1, _020F045C @ =_02111558
	str r2, [r0, #8]
	str r1, [r0]
	str r4, [r0, #0xc]
_020F0430:
	str r0, [r5, #4]
	mov r1, #0
	add r0, sp, #0
	str r1, [sp]
	bl FUN_020F04F0
	mov r0, r5
	add sp, sp, #8
	pop {r3, r4, r5, lr}
	add sp, sp, #0x10
	bx lr
	.align 2, 0
_020F0458: .4byte _02111540
_020F045C: .4byte _02111558
	arm_func_end FUN_020F03E0

	arm_func_start FUN_020F0460
FUN_020F0460: @ 0x020F0460
	push {r4, lr}
	mov r4, r0
	bl FUN_020F49C0
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_020F0460

	arm_func_start FUN_020F0474
FUN_020F0474: @ 0x020F0474
	bx lr
	arm_func_end FUN_020F0474

	arm_func_start FUN_020F0478
FUN_020F0478: @ 0x020F0478
	push {r4, lr}
	mov r4, r0
	mov r0, r1
	ldr r1, _020F049C @ =_02111514
	bl FUN_020F4ACC
	cmp r0, #0
	addne r0, r4, #0xc
	moveq r0, #0
	pop {r4, pc}
	.align 2, 0
_020F049C: .4byte _02111514
	arm_func_end FUN_020F0478

	arm_func_start FUN_020F04A0
FUN_020F04A0: @ 0x020F04A0
	ldr ip, _020F04AC @ =FUN_020F4A2C
	ldr r0, [r0, #0xc]
	bx ip
	.align 2, 0
_020F04AC: .4byte FUN_020F4A2C
	arm_func_end FUN_020F04A0

	arm_func_start FUN_020F04B0
FUN_020F04B0: @ 0x020F04B0
	push {r3, r4, fp, lr}
	sub sp, sp, #0x18
	mov fp, sp
	mov r4, r0
	ldr r0, [r4, #4]
	cmp r0, #0
	beq _020F04D0
	bl FUN_020F05A0
_020F04D0:
	add sp, fp, #0x18
	mov r0, r4
	pop {r3, r4, fp, pc}
	arm_func_end FUN_020F04B0

	arm_func_start FUN_020F04DC
FUN_020F04DC: @ 0x020F04DC
	add r0, fp, #0
	bl FUN_020F445C
_020F04E4:
	b _020F04E4
	arm_func_end FUN_020F04DC

	arm_func_start FUN_020F04E8
FUN_020F04E8: @ 0x020F04E8
	add sp, fp, #0x18
	pop {r3, r4, fp, pc}
	arm_func_end FUN_020F04E8

	arm_func_start FUN_020F04F0
FUN_020F04F0: @ 0x020F04F0
	push {r4, lr}
	mov r4, r0
	ldr r0, [r4]
	cmp r0, #0
	beq _020F0508
	bl FUN_020F4A2C
_020F0508:
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_020F04F0

	arm_func_start FUN_020F0510
FUN_020F0510: @ 0x020F0510
	push {r4, lr}
	mov r4, r0
	bl FUN_020F49C0
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_020F0510

	arm_func_start FUN_020F0524
FUN_020F0524: @ 0x020F0524
	bx lr
	arm_func_end FUN_020F0524

	arm_func_start FUN_020F0528
FUN_020F0528: @ 0x020F0528
	ldr r0, [r0, #4]
	bx lr
	arm_func_end FUN_020F0528

	arm_func_start FUN_020F0530
FUN_020F0530: @ 0x020F0530
	push {r4, lr}
	mov r4, r0
	add r0, r4, #4
	bl FUN_020F04B0
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_020F0530

	arm_func_start FUN_020F0548
FUN_020F0548: @ 0x020F0548
	push {r4, lr}
	mov r4, r0
	add r0, r4, #4
	bl FUN_020F04B0
	mov r0, r4
	bl FUN_020F49C0
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_020F0548

	arm_func_start FUN_020F0568
FUN_020F0568: @ 0x020F0568
	push {r4, lr}
	mov r4, r0
	add r0, r4, #4
	bl FUN_020F04B0
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_020F0568

	arm_func_start FUN_020F0580
FUN_020F0580: @ 0x020F0580
	push {r4, lr}
	mov r4, r0
	add r0, r4, #4
	bl FUN_020F04B0
	mov r0, r4
	bl FUN_020F49C0
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_020F0580

	arm_func_start FUN_020F05A0
FUN_020F05A0: @ 0x020F05A0
	push {r4, lr}
	mov r4, r0
	ldr r1, [r4, #4]
	subs r1, r1, #1
	str r1, [r4, #4]
	popne {r4, pc}
	ldr r1, [r0]
	ldr r1, [r1, #0xc]
	blx r1
	mov r0, r4
	bl FUN_020F05D0
	pop {r4, pc}
	arm_func_end FUN_020F05A0

	arm_func_start FUN_020F05D0
FUN_020F05D0: @ 0x020F05D0
	push {r3, lr}
	ldr r1, [r0, #8]
	subs r1, r1, #1
	str r1, [r0, #8]
	popne {r3, pc}
	cmp r0, #0
	popeq {r3, pc}
	ldr r1, [r0]
	ldr r1, [r1, #4]
	blx r1
	pop {r3, pc}
	arm_func_end FUN_020F05D0

	arm_func_start FUN_020F05FC
FUN_020F05FC: @ 0x020F05FC
	push {r4, r5, r6, lr}
	sub sp, sp, #0x10
	ldr r4, _020F0678 @ =_02111664
	ldr r1, _020F067C @ =_02111658
	add r6, sp, #4
	mov r0, r4
	str r1, [sp, #4]
	add r5, sp, #8
	bl FUN_020E9580
	add r0, r0, #1
	rsb r0, r0, r0, lsl #1
	bl FUN_020F49D4
	mov r1, #0
	strb r1, [sp]
	sub r2, sp, #4
	strb r1, [r2]
	mov r1, r0
	ldr r2, [r2]
	mov r0, r5
	bl FUN_020F03E0
	ldr r0, [r5]
	mov r1, r4
	bl FUN_020E959C
	ldr r3, _020F0680 @ =_02111644
	ldr r0, _020F0684 @ =_02111678
	ldr r2, _020F0688 @ =FUN_020F0568
	mov r1, r6
	str r3, [sp, #4]
	bl FUN_020F4EE4
	add sp, sp, #0x10
	pop {r4, r5, r6, pc}
	.align 2, 0
_020F0678: .4byte _02111664
_020F067C: .4byte _02111658
_020F0680: .4byte _02111644
_020F0684: .4byte _02111678
_020F0688: .4byte FUN_020F0568
	arm_func_end FUN_020F05FC

	arm_func_start FUN_020F068C
FUN_020F068C: @ 0x020F068C
	push {r4, lr}
	eors ip, r1, r3
	eormi r3, r3, #0x80000000
	bmi _020F117C
_020F069C:
	subs ip, r0, r2
	sbcs lr, r1, r3
	bhs _020F06B8
	adds r2, r2, ip
	adc r3, r3, lr
	subs r0, r0, ip
	sbc r1, r1, lr
_020F06B8:
	mov lr, #0x80000000
	lsr ip, r1, #0x14
	orr r1, lr, r1, lsl #11
	orr r1, r1, r0, lsr #21
	lsl r0, r0, #0xb
	lsls r4, ip, #0x15
	cmnne r4, #0x200000
	beq _020F07B4
	lsr r4, r3, #0x14
	orr r3, lr, r3, lsl #11
	orr r3, r3, r2, lsr #21
	lsl r2, r2, #0xb
	lsls lr, r4, #0x15
	beq _020F07FC
_020F06F0:
	subs r4, ip, r4
	beq _020F0748
	cmp r4, #0x20
	ble _020F072C
	cmp r4, #0x38
	movge r4, #0x3f
	sub r4, r4, #0x20
	rsb lr, r4, #0x20
	orrs lr, r2, r3, lsl lr
	lsr r2, r3, r4
	orrne r2, r2, #1
	adds r0, r0, r2
	adcs r1, r1, #0
	blo _020F0770
	b _020F0754
_020F072C:
	rsb lr, r4, #0x20
	lsls lr, r2, lr
	rsb lr, r4, #0x20
	lsr r2, r2, r4
	orr r2, r2, r3, lsl lr
	lsr r3, r3, r4
	orrne r2, r2, #1
_020F0748:
	adds r0, r0, r2
	adcs r1, r1, r3
	blo _020F0770
_020F0754:
	add ip, ip, #1
	and r4, r0, #1
	rrxs r1, r1
	orr r0, r4, r0, rrx
	lsl lr, ip, #0x15
	cmn lr, #0x200000
	beq _020F0980
_020F0770:
	lsls r2, r0, #0x15
	lsr r0, r0, #0xb
	orr r0, r0, r1, lsl #21
	add r1, r1, r1
	lsr r1, r1, #0xc
	orr r1, r1, ip, lsl #20
	tst r2, #0x80000000
	popeq {r4, lr}
	bxeq lr
	lsls r2, r2, #1
	andseq r2, r0, #1
	popeq {r4, lr}
	bxeq lr
	adds r0, r0, #1
	adc r1, r1, #0
	pop {r4, lr}
	bx lr
_020F07B4:
	cmp ip, #0x800
	movge lr, #0x80000000
	movlt lr, #0
	bics ip, ip, #0x800
	beq _020F0820
	orrs r4, r0, r1, lsl #1
	bne _020F095C
	lsr r4, r3, #0x14
	lsl r3, r3, #0xb
	orr r3, r3, r2, lsr #21
	lsl r2, r2, #0xb
	lsls r4, r4, #0x15
	beq _020F0948
	cmn r4, #0x200000
	bne _020F0948
	orrs r4, r2, r3, lsl #1
	beq _020F0948
	b _020F095C
_020F07FC:
	cmp r4, #0x800
	movge lr, #0x80000000
	movlt lr, #0
	bic ip, ip, #0x800
	bics r4, r4, #0x800
	beq _020F088C
	orrs r4, r2, r3, lsl #1
	bne _020F095C
	b _020F0948
_020F0820:
	orrs r4, r0, r1, lsl #1
	beq _020F0860
	mov ip, #1
	bic r1, r1, #0x80000000
	lsr r4, r3, #0x14
	lsl r3, r3, #0xb
	orr r3, r3, r2, lsr #21
	lsl r2, r2, #0xb
	lsls r4, r4, #0x15
	cmnne r4, #0x200000
	lsr r4, r4, #0x15
	orr r4, r4, lr, lsr #20
	beq _020F07FC
	orr r3, r3, #0x80000000
	orr ip, ip, lr, lsr #20
	b _020F06F0
_020F0860:
	lsr ip, r3, #0x14
	lsl r1, r3, #0xb
	orr r1, r1, r2, lsr #21
	lsl r0, r2, #0xb
	lsls r4, ip, #0x15
	beq _020F0914
	cmn r4, #0x200000
	bne _020F0914
	orrs r4, r0, r1, lsl #1
	beq _020F0948
	b _020F0960
_020F088C:
	orrs r4, r2, r3, lsl #1
	beq _020F0924
	mov r4, #1
	bic r3, r3, #0x80000000
	cmp r1, #0
	bpl _020F08B0
	orr ip, ip, lr, lsr #20
	orr r4, r4, lr, lsr #20
	b _020F06F0
_020F08B0:
	adds r0, r0, r2
	adcs r1, r1, r3
	blo _020F08D0
	add ip, ip, #1
	and r4, r0, #1
	rrxs r1, r1
	rrx r0, r0
	orr r0, r0, r4
_020F08D0:
	cmp r1, #0
	subsge ip, ip, #1
	lsls r2, r0, #0x15
	lsr r0, r0, #0xb
	orr r0, r0, r1, lsl #21
	add r1, r1, r1
	orr r1, lr, r1, lsr #12
	orr r1, r1, ip, lsl #20
	popeq {r4, lr}
	bxeq lr
	tst r2, #0x80000000
	popeq {r4, lr}
	bxeq lr
	lsls r2, r2, #1
	andseq r2, r0, #1
	popeq {r4, lr}
	bxeq lr
_020F0914:
	mov r1, r3
	mov r0, r2
	pop {r4, lr}
	bx lr
_020F0924:
	cmp r1, #0
	subsge ip, ip, #1
	lsr r0, r0, #0xb
	orr r0, r0, r1, lsl #21
	add r1, r1, r1
	orr r1, lr, r1, lsr #12
	orr r1, r1, ip, lsl #20
	pop {r4, lr}
	bx lr
_020F0948:
	ldr r1, _020F09A0 @ =0x7FF00000
	orr r1, lr, r1
	mov r0, #0
	pop {r4, lr}
	bx lr
_020F095C:
	mov r1, r3
_020F0960:
	mvn r0, #0
	bic r1, r0, #0x80000000
	pop {r4, lr}
	bx lr
	arm_func_end FUN_020F068C

	arm_func_start FUN_020F0970
FUN_020F0970: @ 0x020F0970
	mvn r0, #0
	bic r1, r0, #0x80000000
	pop {r4, lr}
	bx lr
_020F0980:
	cmp ip, #0x800
	movge lr, #0x80000000
	movlt lr, #0
	ldr r1, _020F09A0 @ =0x7FF00000
	orr r1, lr, r1
	mov r0, #0
	pop {r4, lr}
	bx lr
	.align 2, 0
_020F09A0: .4byte 0x7FF00000
	arm_func_end FUN_020F0970

	arm_func_start FUN_020F09A4
FUN_020F09A4: @ 0x020F09A4
	and r2, r1, #0x80000000
	lsr ip, r1, #0x14
	bics ip, ip, #0x800
	beq _020F0A1C
	lsl r3, ip, #0x15
	cmn r3, #0x200000
	bhs _020F0A00
	subs ip, ip, #0x380
	bls _020F0A2C
	cmp ip, #0xff
	bge _020F0A9C
	lsl r1, r1, #0xc
	orr r3, r2, r1, lsr #9
	orr r3, r3, r0, lsr #29
	lsls r1, r0, #3
	orr r0, r3, ip, lsl #23
	bxeq lr
	tst r1, #0x80000000
	bxeq lr
	lsls r1, r1, #1
	andseq r1, r0, #1
	addne r0, r0, #1
	bx lr
_020F0A00:
	orrs r3, r0, r1, lsl #12
	bne _020F0A14
	mov r0, #0xff000000
	orr r0, r2, r0, lsr #1
	bx lr
_020F0A14:
	mvn r0, #0x80000000
	bx lr
_020F0A1C:
	orrs r3, r0, r1, lsl #12
	bne _020F0A94
	mov r0, r2
	bx lr
_020F0A2C:
	cmn ip, #0x17
	beq _020F0A80
	bmi _020F0A94
	lsl r1, r1, #0xb
	orr r1, r1, #0x80000000
	lsr r3, r1, #8
	orr r3, r3, r0, lsr #29
	rsb ip, ip, #1
	lsls r1, r0, #3
	orr r0, r2, r3, lsr ip
	rsb ip, ip, #0x20
	lsl r3, r3, ip
	orrne r3, r3, #1
	movs r1, r3
	bxeq lr
	tst r1, #0x80000000
	bxeq lr
	lsls r1, r1, #1
	andseq r1, r0, #1
	addne r0, r0, #1
	bx lr
_020F0A80:
	orr r0, r0, r1, lsl #12
	movs r1, r0
	mov r0, r2
	addne r0, r0, #1
	bx lr
_020F0A94:
	mov r0, r2
	bx lr
_020F0A9C:
	mov r0, #0xff000000
	orr r0, r2, r0, lsr #1
	bx lr
	arm_func_end FUN_020F09A4

	arm_func_start FUN_020F0AA8
FUN_020F0AA8: @ 0x020F0AA8
	bic r3, r1, #0x80000000
	ldr r2, _020F0AF0 @ =0x0000041E
	subs r2, r2, r3, lsr #20
	ble _020F0AE4
	cmp r2, #0x20
	bge _020F0ADC
	lsl r3, r1, #0xb
	orr r3, r3, #0x80000000
	orr r3, r3, r0, lsr #21
	cmp r1, #0
	lsr r0, r3, r2
	rsbmi r0, r0, #0
	bx lr
_020F0ADC:
	mov r0, #0
	bx lr
_020F0AE4:
	mvn r0, r1, asr #31
	add r0, r0, #0x80000000
	bx lr
	.align 2, 0
_020F0AF0: .4byte 0x0000041E
	arm_func_end FUN_020F0AA8

	arm_func_start FUN_020F0AF4
FUN_020F0AF4: @ 0x020F0AF4
	tst r1, #0x80000000
	bne _020F0B2C
	ldr r2, _020F0B48 @ =0x0000041E
	subs r2, r2, r1, lsr #20
	blt _020F0B40
	cmp r2, #0x20
	bge _020F0B24
	lsl r3, r1, #0xb
	orr r3, r3, #0x80000000
	orr r3, r3, r0, lsr #21
	lsr r0, r3, r2
	bx lr
_020F0B24:
	mov r0, #0
	bx lr
_020F0B2C:
	cmn r1, #0x100000
	cmpeq r0, #0
	movls r0, #0
	mvnhi r0, #0
	bx lr
_020F0B40:
	mvn r0, #0
	bx lr
	.align 2, 0
_020F0B48: .4byte 0x0000041E
	arm_func_end FUN_020F0AF4

	arm_func_start FUN_020F0B4C
FUN_020F0B4C: @ 0x020F0B4C
	tst r1, #0x80000000
	bne _020F0BB0
	ldr r2, _020F0BD4 @ =0x0000043E
	subs r2, r2, r1, lsr #20
	blt _020F0BC8
	cmp r2, #0x40
	bge _020F0BA4
	lsl ip, r1, #0xb
	orr ip, ip, #0x80000000
	orr ip, ip, r0, lsr #21
	cmp r2, #0x20
	ble _020F0B8C
	sub r2, r2, #0x20
	mov r1, #0
	lsr r0, ip, r2
	bx lr
_020F0B8C:
	lsl r3, r0, #0xb
	lsr r1, ip, r2
	lsr r0, r3, r2
	rsb r2, r2, #0x20
	orr r0, r0, ip, lsl r2
	bx lr
_020F0BA4:
	mov r1, #0
	mov r0, #0
	bx lr
_020F0BB0:
	cmn r1, #0x100000
	cmpeq r0, #0
	bhi _020F0BC8
	mov r1, #0
	mov r0, #0
	bx lr
_020F0BC8:
	mvn r1, #0
	mvn r0, #0
	bx lr
	.align 2, 0
_020F0BD4: .4byte 0x0000043E
	arm_func_end FUN_020F0B4C

	arm_func_start FUN_020F0BD8
FUN_020F0BD8: @ 0x020F0BD8
	ands r2, r0, #0x80000000
	rsbmi r0, r0, #0
	cmp r0, #0
	mov r1, #0
	bxeq lr
	mov r3, #0x400
	add r3, r3, #0x1e
	clz ip, r0
	lsls r0, r0, ip
	sub r3, r3, ip
	movs r1, r0
	lsl r0, r1, #0x15
	add r1, r1, r1
	orr r1, r2, r1, lsr #12
	orr r1, r1, r3, lsl #20
	bx lr
	arm_func_end FUN_020F0BD8

	arm_func_start FUN_020F0C18
FUN_020F0C18: @ 0x020F0C18
	cmp r0, #0
	mov r1, #0
	bxeq lr
	mov r3, #0x400
	add r3, r3, #0x1e
	bmi _020F0C3C
	clz ip, r0
	lsls r0, r0, ip
	sub r3, r3, ip
_020F0C3C:
	mov r1, r0
	lsl r0, r1, #0x15
	add r1, r1, r1
	lsr r1, r1, #0xc
	orr r1, r1, r3, lsl #20
	bx lr
	arm_func_end FUN_020F0C18

	arm_func_start FUN_020F0C54
FUN_020F0C54: @ 0x020F0C54
	push {r4, r5, r6, r7, lr}
	eor lr, r1, r3
	and lr, lr, #0x80000000
	lsr ip, r1, #0x14
	lsl r1, r1, #0xb
	orr r1, r1, r0, lsr #21
	lsl r0, r0, #0xb
	lsls r6, ip, #0x15
	cmnne r6, #0x200000
	beq _020F0D5C
	orr r1, r1, #0x80000000
	bic ip, ip, #0x800
	lsr r4, r3, #0x14
	lsl r3, r3, #0xb
	orr r3, r3, r2, lsr #21
	lsl r2, r2, #0xb
	lsls r5, r4, #0x15
	cmnne r5, #0x200000
	beq _020F0DA4
	orr r3, r3, #0x80000000
	bic r4, r4, #0x800
_020F0CA8:
	add ip, r4, ip
	umull r5, r4, r0, r2
	umull r7, r6, r0, r3
	adds r4, r7, r4
	adc r6, r6, #0
	umull r7, r0, r1, r2
	adds r4, r7, r4
	adcs r0, r0, r6
	umull r7, r2, r1, r3
	adc r1, r2, #0
	adds r0, r0, r7
	adc r1, r1, #0
	orrs r4, r4, r5
	orrne r0, r0, #1
	cmp r1, #0
	blt _020F0CF4
	sub ip, ip, #1
	adds r0, r0, r0
	adc r1, r1, r1
_020F0CF4:
	add ip, ip, #2
	subs ip, ip, #0x400
	bmi _020F0E90
	beq _020F0E90
	lsl r6, ip, #0x14
	cmn r6, #0x100000
	bmi _020F0F90
	lsls r2, r0, #0x15
	lsr r0, r0, #0xb
	orr r0, r0, r1, lsl #21
	add r1, r1, r1
	orr r1, lr, r1, lsr #12
	orr r1, r1, ip, lsl #20
	popeq {r4, r5, r6, r7, lr}
	bxeq lr
	tst r2, #0x80000000
	popeq {r4, r5, r6, r7, lr}
	bxeq lr
	lsls r2, r2, #1
	andseq r2, r0, #1
	popeq {r4, r5, r6, r7, lr}
	bxeq lr
	adds r0, r0, #1
	adc r1, r1, #0
	pop {r4, r5, r6, r7, lr}
	bx lr
_020F0D5C:
	bics ip, ip, #0x800
	beq _020F0DB8
	orrs r6, r0, r1, lsl #1
	bne _020F0F44
	lsr r4, r3, #0x14
	lsl r3, r3, #0xb
	orr r3, r3, r2, lsr #21
	lsl r2, r2, #0xb
	lsls r5, r4, #0x15
	beq _020F0D98
	cmn r5, #0x200000
	bne _020F0F30
	orrs r5, r2, r3, lsl #1
	beq _020F0F30
	b _020F0F44
_020F0D98:
	orrs r5, r3, r2
	beq _020F0F58
	b _020F0F30
_020F0DA4:
	bics r4, r4, #0x800
	beq _020F0E4C
	orrs r6, r2, r3, lsl #1
	bne _020F0F44
	b _020F0F30
_020F0DB8:
	orrs r6, r0, r1, lsl #1
	beq _020F0E20
	mov ip, #1
	cmp r1, #0
	bne _020F0DDC
	sub ip, ip, #0x20
	movs r1, r0
	mov r0, #0
	bmi _020F0DF8
_020F0DDC:
	clz r6, r1
	lsls r1, r1, r6
	rsb r6, r6, #0x20
	orr r1, r1, r0, lsr r6
	rsb r6, r6, #0x20
	lsl r0, r0, r6
	sub ip, ip, r6
_020F0DF8:
	lsr r4, r3, #0x14
	lsl r3, r3, #0xb
	orr r3, r3, r2, lsr #21
	lsl r2, r2, #0xb
	lsls r5, r4, #0x15
	cmnne r5, #0x200000
	beq _020F0DA4
	orr r3, r3, #0x80000000
	bic r4, r4, #0x800
	b _020F0CA8
_020F0E20:
	lsr r4, r3, #0x14
	lsl r3, r3, #0xb
	orr r3, r3, r2, lsr #21
	lsl r2, r2, #0xb
	lsls r5, r4, #0x15
	beq _020F0FA4
	cmn r5, #0x200000
	bne _020F0FA4
	orrs r6, r2, r3, lsl #1
	beq _020F0F58
	b _020F0F44
_020F0E4C:
	orrs r5, r2, r3, lsl #1
	beq _020F0FA4
	mov r4, #1
	cmp r3, #0
	bne _020F0E70
	sub r4, r4, #0x20
	movs r3, r2
	mov r2, #0
	bmi _020F0CA8
_020F0E70:
	clz r6, r3
	lsls r3, r3, r6
	rsb r6, r6, #0x20
	orr r3, r3, r2, lsr r6
	rsb r6, r6, #0x20
	lsl r2, r2, r6
	sub r4, r4, r6
	b _020F0CA8
_020F0E90:
	cmn ip, #0x34
	beq _020F0F28
	bmi _020F0F80
	mov r2, r1
	mov r3, r0
	add r4, ip, #0x34
	cmp r4, #0x20
	movge r2, r3
	movge r3, #0
	subge r4, r4, #0x20
	rsb r5, r4, #0x20
	lsl r2, r2, r4
	orr r2, r2, r3, lsr r5
	lsls r3, r3, r4
	orrne r2, r2, #1
	rsb ip, ip, #0xc
	cmp ip, #0x20
	movge r0, r1
	movge r1, #0
	subge ip, ip, #0x20
	rsb r4, ip, #0x20
	lsr r0, r0, ip
	orr r0, r0, r1, lsl r4
	orr r1, lr, r1, lsr ip
	cmp r2, #0
	popeq {r4, r5, r6, r7, lr}
	bxeq lr
	tst r2, #0x80000000
	popeq {r4, r5, r6, r7, lr}
	bxeq lr
	lsls r2, r2, #1
	andseq r2, r0, #1
	popeq {r4, r5, r6, r7, lr}
	bxeq lr
	adds r0, r0, #1
	adc r1, r1, #0
	pop {r4, r5, r6, r7, lr}
	bx lr
_020F0F28:
	orr r0, r0, r1, lsl #1
	b _020F0F68
_020F0F30:
	ldr r1, _020F0FB4 @ =0x7FF00000
	orr r1, lr, r1
	mov r0, #0
	pop {r4, r5, r6, r7, lr}
	bx lr
_020F0F44:
	mov r1, r3
	mvn r0, #0
	bic r1, r0, #0x80000000
	pop {r4, r5, r6, r7, lr}
	bx lr
_020F0F58:
	mvn r0, #0
	bic r1, r0, #0x80000000
	pop {r4, r5, r6, r7, lr}
	bx lr
_020F0F68:
	movs r2, r0
	mov r1, lr
	mov r0, #0
	addne r0, r0, #1
	pop {r4, r5, r6, r7, lr}
	bx lr
_020F0F80:
	mov r1, lr
	mov r0, #0
	pop {r4, r5, r6, r7, lr}
	bx lr
_020F0F90:
	ldr r1, _020F0FB4 @ =0x7FF00000
	orr r1, lr, r1
	mov r0, #0
	pop {r4, r5, r6, r7, lr}
	bx lr
_020F0FA4:
	mov r1, lr
	mov r0, #0
	pop {r4, r5, r6, r7, lr}
	bx lr
	.align 2, 0
_020F0FB4: .4byte 0x7FF00000
	arm_func_end FUN_020F0C54

	arm_func_start FUN_020F0FB8
FUN_020F0FB8: @ 0x020F0FB8
	push {r4, r5, r6, lr}
	ldr r2, _020F1148 @ =0x7FF00000
	cmp r1, r2
	bhs _020F1104
	lsrs ip, r1, #0x14
	beq _020F10B0
	bic r1, r1, r2
	orr r1, r1, #0x100000
_020F0FD8:
	asrs ip, ip, #1
	bhs _020F0FEC
	sub ip, ip, #1
	lsls r0, r0, #1
	adc r1, r1, r1
_020F0FEC:
	lsls r3, r0, #1
	adc r1, r1, r1
	mov r2, #0
	mov r4, #0
	mov lr, #0x200000
_020F1000:
	add r6, r4, lr
	cmp r6, r1
	addle r4, r6, lr
	suble r1, r1, r6
	addle r2, r2, lr
	lsls r3, r3, #1
	adc r1, r1, r1
	lsrs lr, lr, #1
	bne _020F1000
	mov r0, #0
	mov r5, #0
	cmp r1, r4
	cmpeq r3, #0x80000000
	blo _020F1048
	subs r3, r3, #0x80000000
	sbc r1, r1, r4
	add r4, r4, #1
	mov r0, #0x80000000
_020F1048:
	lsls r3, r3, #1
	adc r1, r1, r1
	mov lr, #0x40000000
_020F1054:
	add r6, r5, lr
	cmp r4, r1
	cmpeq r6, r3
	bhi _020F1074
	add r5, r6, lr
	subs r3, r3, r6
	sbc r1, r1, r4
	add r0, r0, lr
_020F1074:
	lsls r3, r3, #1
	adc r1, r1, r1
	lsrs lr, lr, #1
	bne _020F1054
	orrs r1, r1, r3
	biceq r0, r0, #1
	lsrs r1, r2, #1
	rrxs r0, r0
	adcs r0, r0, #0
	adc r1, r1, #0
	add r1, r1, #0x20000000
	sub r1, r1, #0x100000
	add r1, r1, ip, lsl #20
	pop {r4, r5, r6, lr}
	bx lr
_020F10B0:
	cmp r1, #0
	bne _020F10E0
	cmp r0, #0
	popeq {r4, r5, r6, lr}
	bxeq lr
	mvn ip, #0x13
	clz r5, r0
	lsls r0, r0, r5
	sub ip, ip, r5
	lsr r1, r0, #0xb
	lsl r0, r0, #0x15
	b _020F0FD8
_020F10E0:
	clz r2, r1
	lsls r1, r1, r2
	rsb r2, r2, #0x2b
	lsr r1, r1, #0xb
	orr r1, r1, r0, lsr r2
	rsb r2, r2, #0x20
	lsl r0, r0, r2
	rsb ip, r2, #1
	b _020F0FD8
_020F1104:
	tst r1, #0x80000000
	beq _020F1120
	bics r3, r1, #0x80000000
	cmpeq r0, #0
	popeq {r4, r5, r6, lr}
	bxeq lr
	b _020F112C
_020F1120:
	orrs r2, r0, r1, lsl #12
	popeq {r4, r5, r6, lr}
	bxeq lr
_020F112C:
	ldr r2, _020F114C @ =0x7FF80000
	orr r1, r1, r2
	ldr r3, _020F1150 @ =0x021E58C0
	mov r4, #0x21
	str r4, [r3]
	pop {r4, r5, r6, lr}
	bx lr
	.align 2, 0
_020F1148: .4byte 0x7FF00000
_020F114C: .4byte 0x7FF80000
_020F1150: .4byte 0x021E58C0
	arm_func_end FUN_020F0FB8

	arm_func_start FUN_020F1154
FUN_020F1154: @ 0x020F1154
	eor r1, r1, r3
	eor r3, r1, r3
	eor r1, r1, r3
	eor r0, r0, r2
	eor r2, r0, r2
	eor r0, r0, r2
	arm_func_end FUN_020F1154

	arm_func_start FUN_020F116C
FUN_020F116C: @ 0x020F116C
	push {r4, lr}
	eors ip, r1, r3
	eormi r3, r3, #0x80000000
	bmi _020F069C
_020F117C:
	subs ip, r0, r2
	sbcs lr, r1, r3
	bhs _020F119C
	eor lr, lr, #0x80000000
	adds r2, r2, ip
	adc r3, r3, lr
	subs r0, r0, ip
	sbc r1, r1, lr
_020F119C:
	mov lr, #0x80000000
	lsr ip, r1, #0x14
	orr r1, lr, r1, lsl #11
	orr r1, r1, r0, lsr #21
	lsl r0, r0, #0xb
	lsls r4, ip, #0x15
	cmnne r4, #0x200000
	beq _020F13A0
	lsr r4, r3, #0x14
	orr r3, lr, r3, lsl #11
	orr r3, r3, r2, lsr #21
	lsl r2, r2, #0xb
	lsls lr, r4, #0x15
	beq _020F13E8
_020F11D4:
	subs r4, ip, r4
	beq _020F127C
	cmp r4, #0x20
	ble _020F1210
	cmp r4, #0x38
	movge r4, #0x3f
	sub r4, r4, #0x20
	rsb lr, r4, #0x20
	orrs lr, r2, r3, lsl lr
	lsr r2, r3, r4
	orrne r2, r2, #1
	subs r0, r0, r2
	sbcs r1, r1, #0
	bmi _020F1238
	b _020F1328
_020F1210:
	rsb lr, r4, #0x20
	lsls lr, r2, lr
	rsb lr, r4, #0x20
	lsr r2, r2, r4
	orr r2, r2, r3, lsl lr
	lsr r3, r3, r4
	orrne r2, r2, #1
	subs r0, r0, r2
	sbcs r1, r1, r3
	bpl _020F1328
_020F1238:
	lsls r2, r0, #0x15
	lsr r0, r0, #0xb
	orr r0, r0, r1, lsl #21
	add r1, r1, r1
	lsr r1, r1, #0xc
	orr r1, r1, ip, lsl #20
	tst r2, #0x80000000
	popeq {r4, lr}
	bxeq lr
	lsls r2, r2, #1
	andseq r2, r0, #1
	popeq {r4, lr}
	bxeq lr
	adds r0, r0, #1
	adc r1, r1, #0
	pop {r4, lr}
	bx lr
_020F127C:
	subs r0, r0, r2
	sbc r1, r1, r3
	orrs lr, r1, r0
	beq _020F150C
	lsl lr, ip, #0x14
	and lr, lr, #0x80000000
	bic ip, ip, #0x800
	cmp r1, #0
	bmi _020F1304
	bne _020F12B4
	sub ip, ip, #0x20
	movs r1, r0
	mov r0, #0
	bmi _020F12D0
_020F12B4:
	clz r4, r1
	lsls r1, r1, r4
	rsb r4, r4, #0x20
	orr r1, r1, r0, lsr r4
	rsb r4, r4, #0x20
	lsl r0, r0, r4
	sub ip, ip, r4
_020F12D0:
	cmp ip, #0
	bgt _020F130C
	rsb ip, ip, #0xc
	cmp ip, #0x20
	movge r0, r1
	movge r1, #0
	subge ip, ip, #0x20
	rsb r4, ip, #0x20
	lsr r0, r0, ip
	orr r0, r0, r1, lsl r4
	orr r1, lr, r1, lsr ip
	pop {r4, lr}
	bx lr
_020F1304:
	cmp r1, #0
	subsge ip, ip, #1
_020F130C:
	lsr r0, r0, #0xb
	orr r0, r0, r1, lsl #21
	add r1, r1, r1
	orr r1, lr, r1, lsr #12
	orr r1, r1, ip, lsl #20
	pop {r4, lr}
	bx lr
_020F1328:
	lsl lr, ip, #0x14
	and lr, lr, #0x80000000
	bic ip, ip, #0x800
	cmp r1, #0
	bne _020F134C
	sub ip, ip, #0x20
	movs r1, r0
	mov r0, #0
	bmi _020F1368
_020F134C:
	clz r4, r1
	lsls r1, r1, r4
	rsb r4, r4, #0x20
	orr r1, r1, r0, lsr r4
	rsb r4, r4, #0x20
	lsl r0, r0, r4
	sub ip, ip, r4
_020F1368:
	cmp ip, #0
	orrgt ip, ip, lr, lsr #20
	bgt _020F1238
	rsb ip, ip, #0xc
	cmp ip, #0x20
	movge r0, r1
	movge r1, #0
	subge ip, ip, #0x20
	rsb r4, ip, #0x20
	lsr r0, r0, ip
	orr r0, r0, r1, lsl r4
	orr r1, lr, r1, lsr ip
	pop {r4, lr}
	bx lr
_020F13A0:
	cmp ip, #0x800
	movge lr, #0x80000000
	movlt lr, #0
	bics ip, ip, #0x800
	beq _020F140C
	orrs r4, r0, r1, lsl #1
	bne _020F14E8
	lsr r4, r3, #0x14
	lsl r3, r3, #0xb
	orr r3, r3, r2, lsr #21
	lsl r2, r2, #0xb
	lsls r4, r4, #0x15
	beq _020F14D4
	cmn r4, #0x200000
	bne _020F14D4
	orrs r4, r2, r3, lsl #1
	beq _020F14FC
	b _020F14E8
_020F13E8:
	cmp r4, #0x800
	movge lr, #0x80000000
	movlt lr, #0
	bic ip, ip, #0x800
	bics r4, r4, #0x800
	beq _020F1484
	orrs r4, r2, r3, lsl #1
	bne _020F14E8
	b _020F14D4
_020F140C:
	orrs r4, r0, r1, lsl #1
	beq _020F144C
	mov ip, #1
	bic r1, r1, #0x80000000
	lsr r4, r3, #0x14
	lsl r3, r3, #0xb
	orr r3, r3, r2, lsr #21
	lsl r2, r2, #0xb
	lsls r4, r4, #0x15
	cmnne r4, #0x200000
	lsr r4, r4, #0x15
	orr r4, r4, lr, lsr #20
	beq _020F13E8
	orr r3, r3, #0x80000000
	orr ip, ip, lr, lsr #20
	b _020F11D4
_020F144C:
	lsr ip, r3, #0x14
	lsl r1, r3, #0xb
	orr r1, r1, r2, lsr #21
	lsl r0, r2, #0xb
	lsls r4, ip, #0x15
	beq _020F1478
	cmn r4, #0x200000
	bne _020F14A0
	orrs r4, r0, r1, lsl #1
	bne _020F14EC
	b _020F14D4
_020F1478:
	orrs r4, r0, r1, lsl #1
	beq _020F150C
	b _020F14A0
_020F1484:
	orrs r4, r2, r3, lsl #1
	beq _020F14B0
	mov r4, #1
	bic r3, r3, #0x80000000
	orr ip, ip, lr, lsr #20
	orr r4, r4, lr, lsr #20
	b _020F11D4
_020F14A0:
	mov r1, r3
	mov r0, r2
	pop {r4, lr}
	bx lr
_020F14B0:
	cmp r1, #0
	subsge ip, ip, #1
	lsr r0, r0, #0xb
	orr r0, r0, r1, lsl #21
	add r1, r1, r1
	orr r1, lr, r1, lsr #12
	orr r1, r1, ip, lsl #20
	pop {r4, lr}
	bx lr
_020F14D4:
	ldr r1, _020F151C @ =0x7FF00000
	orr r1, lr, r1
	mov r0, #0
	pop {r4, lr}
	bx lr
_020F14E8:
	mov r1, r3
_020F14EC:
	mvn r0, #0
	bic r1, r0, #0x80000000
	pop {r4, lr}
	bx lr
_020F14FC:
	mvn r0, #0
	bic r1, r0, #0x80000000
	pop {r4, lr}
	bx lr
_020F150C:
	mov r1, #0
	mov r0, #0
	pop {r4, lr}
	bx lr
	.align 2, 0
_020F151C: .4byte 0x7FF00000
	arm_func_end FUN_020F116C

	arm_func_start FUN_020F1520
FUN_020F1520: @ 0x020F1520
	eors r2, r0, r1
	eormi r1, r1, #0x80000000
	bmi _020F24D4
_020F152C:
	subs ip, r0, r1
	sublo r0, r0, ip
	addlo r1, r1, ip
	mov r2, #0x80000000
	lsr r3, r0, #0x17
	orr r0, r2, r0, lsl #8
	ands ip, r3, #0xff
	cmpne ip, #0xff
	beq _020F15C0
	lsr ip, r1, #0x17
	orr r1, r2, r1, lsl #8
	ands r2, ip, #0xff
	beq _020F1600
_020F1560:
	subs ip, r3, ip
	beq _020F1578
	rsb r2, ip, #0x20
	lsls r2, r1, r2
	lsr r1, r1, ip
	orrne r1, r1, #1
_020F1578:
	adds r0, r0, r1
	blo _020F1598
	and r1, r0, #1
	orr r0, r1, r0, rrx
	add r3, r3, #1
	and r2, r3, #0xff
	cmp r2, #0xff
	beq _020F1708
_020F1598:
	ands r1, r0, #0xff
	add r0, r0, r0
	lsr r0, r0, #9
	orr r0, r0, r3, lsl #23
	tst r1, #0x80
	bxeq lr
	ands r1, r1, #0x7f
	andseq r1, r0, #1
	addne r0, r0, #1
	bx lr
_020F15C0:
	cmp r3, #0x100
	movge r2, #0x80000000
	movlt r2, #0
	ands r3, r3, #0xff
	beq _020F1624
	lsls r0, r0, #1
	bne _020F1734
	lsr ip, r1, #0x17
	lsl r1, r1, #9
	ands ip, ip, #0xff
	beq _020F1728
	cmp ip, #0xff
	blt _020F1728
	cmp r1, #0
	beq _020F1728
	b _020F1734
_020F1600:
	cmp r3, #0x100
	movge r2, #0x80000000
	movlt r2, #0
	and r3, r3, #0xff
	ands ip, ip, #0xff
	beq _020F1680
_020F1618:
	lsls r1, r1, #1
	bne _020F1734
	b _020F1728
_020F1624:
	lsls r0, r0, #1
	beq _020F165C
	mov r3, #1
	lsr r0, r0, #1
	lsr ip, r1, #0x17
	lsl r1, r1, #8
	ands ip, ip, #0xff
	beq _020F1680
	cmp ip, #0xff
	beq _020F1618
	orr r1, r1, #0x80000000
	orr r3, r3, r2, lsr #23
	orr ip, ip, r2, lsr #23
	b _020F1560
_020F165C:
	lsr r3, r1, #0x17
	lsl r0, r1, #9
	ands r3, r3, #0xff
	beq _020F16E8
	cmp r3, #0xff
	blt _020F16E8
	cmp r0, #0
	beq _020F1728
	b _020F1720
_020F1680:
	lsls r1, r1, #1
	beq _020F16F0
	lsr r1, r1, #1
	mov ip, #1
	orr r3, r3, r2, lsr #23
	orr ip, ip, r2, lsr #23
	cmp r0, #0
	bmi _020F1560
	adds r0, r0, r1
	blo _020F16B4
	and r1, r0, #1
	orr r0, r1, r0, rrx
	add ip, ip, #1
_020F16B4:
	cmp r0, #0
	subge ip, ip, #1
	ands r1, r0, #0xff
	add r0, r0, r0
	lsr r0, r0, #9
	orr r0, r0, ip, lsl #23
	bxeq lr
	tst r1, #0x80
	bxeq lr
	ands r1, r1, #0x7f
	andseq r1, r0, #1
	addne r0, r0, #1
	bx lr
_020F16E8:
	mov r0, r1
	bx lr
_020F16F0:
	cmp r0, #0
	subsge r3, r3, #1
	add r0, r0, r0
	orr r0, r2, r0, lsr #9
	orr r0, r0, r3, lsl #23
	bx lr
_020F1708:
	cmp r3, #0x100
	movge r2, #0x80000000
	movlt r2, #0
	mov r0, #0xff000000
	orr r0, r2, r0, lsr #1
	bx lr
_020F1720:
	mvn r0, #0x80000000
	bx lr
_020F1728:
	mov r0, #0xff000000
	orr r0, r2, r0, lsr #1
	bx lr
_020F1734:
	mvn r0, #0x80000000
	bx lr
	arm_func_end FUN_020F1520

	arm_func_start FUN_020F173C
FUN_020F173C: @ 0x020F173C
	mvn r0, #0x80000000
	bx lr
	arm_func_end FUN_020F173C

	arm_func_start FUN_020F1744
FUN_020F1744: @ 0x020F1744
	mov ip, #0x200000
	cmn ip, r1, lsl #1
	bhs _020F17B8
	cmn ip, r3, lsl #1
	bhs _020F17CC
_020F1758:
	orrs ip, r3, r1
	bmi _020F1788
	cmp r1, r3
	cmpeq r0, r2
	movhs r0, #1
	movlo r0, #0
	bx lr
_020F1774:
	mov r0, #0
	mrs ip, apsr
	bic ip, ip, #0x20000000
	msr apsr_nzcvq, ip
	bx lr
_020F1788:
	orr ip, r0, ip, lsl #1
	orrs ip, ip, r2
	moveq r0, #1
	mrs ip, apsr
	orr ip, ip, #0x20000000
	msr apsr_nzcvq, ip
	bxeq lr
	cmp r3, r1
	cmpeq r2, r0
	movhs r0, #1
	movlo r0, #0
	bx lr
_020F17B8:
	bne _020F1774
	cmp r0, #0
	bhi _020F1774
	cmn ip, r3, lsl #1
	blo _020F1758
_020F17CC:
	bne _020F1774
	cmp r2, #0
	bhi _020F1774
	b _020F1758
	arm_func_end FUN_020F1744

	arm_func_start FUN_020F17DC
FUN_020F17DC: @ 0x020F17DC
	mov ip, #0x200000
	cmn ip, r1, lsl #1
	bhs _020F1850
	cmn ip, r3, lsl #1
	bhs _020F1864
_020F17F0:
	orrs ip, r3, r1
	bmi _020F1820
	cmp r1, r3
	cmpeq r0, r2
	movhi r0, #1
	movls r0, #0
	bx lr
_020F180C:
	mov r0, #0
	mrs ip, apsr
	bic ip, ip, #0x20000000
	msr apsr_nzcvq, ip
	bx lr
_020F1820:
	orr ip, r0, ip, lsl #1
	orrs ip, ip, r2
	moveq r0, #0
	mrs ip, apsr
	bic ip, ip, #0x20000000
	msr apsr_nzcvq, ip
	bxeq lr
	cmp r3, r1
	cmpeq r2, r0
	movhi r0, #1
	movls r0, #0
	bx lr
_020F1850:
	bne _020F180C
	cmp r0, #0
	bhi _020F180C
	cmn ip, r3, lsl #1
	blo _020F17F0
_020F1864:
	bne _020F180C
	cmp r2, #0
	bhi _020F180C
	b _020F17F0
	arm_func_end FUN_020F17DC

	arm_func_start FUN_020F1874
FUN_020F1874: @ 0x020F1874
	mov ip, #0x200000
	cmn ip, r1, lsl #1
	bhs _020F18F4
	cmn ip, r3, lsl #1
	bhs _020F1908
_020F1888:
	orrs ip, r3, r1
	bmi _020F18BC
	cmp r1, r3
	cmpeq r0, r2
	movls r0, #1
	movhi r0, #0
	bx lr
_020F18A4:
	mov r0, #0
	mrs ip, apsr
	bic ip, ip, #0x40000000
	orr ip, ip, #0x20000000
	msr apsr_nzcvq, ip
	bx lr
_020F18BC:
	orr ip, r0, ip, lsl #1
	orrs ip, ip, r2
	moveq r0, #1
	bne _020F18E0
	mrs ip, apsr
	bic ip, ip, #0x20000000
	orr ip, ip, #0x40000000
	msr apsr_nzcvq, ip
	bxeq lr
_020F18E0:
	cmp r3, r1
	cmpeq r2, r0
	movls r0, #1
	movhi r0, #0
	bx lr
_020F18F4:
	bne _020F18A4
	cmp r0, #0
	bhi _020F18A4
	cmn ip, r3, lsl #1
	blo _020F1888
_020F1908:
	bne _020F18A4
	cmp r2, #0
	bhi _020F18A4
	b _020F1888
	arm_func_end FUN_020F1874

	arm_func_start FUN_020F1918
FUN_020F1918: @ 0x020F1918
	mov ip, #0x200000
	cmn ip, r1, lsl #1
	bhs _020F1990
	cmn ip, r3, lsl #1
	bhs _020F19A4
_020F192C:
	orrs ip, r3, r1
	bmi _020F195C
	cmp r1, r3
	cmpeq r0, r2
	movlo r0, #1
	movhs r0, #0
	bx lr
_020F1948:
	mov r0, #0
	mrs ip, apsr
	orr ip, ip, #0x20000000
	msr apsr_nzcvq, ip
	bx lr
_020F195C:
	orr ip, r0, ip, lsl #1
	orrs ip, ip, r2
	moveq r0, #0
	bne _020F197C
	mrs ip, apsr
	orr ip, ip, #0x20000000
	msr apsr_nzcvq, ip
	bxeq lr
_020F197C:
	cmp r3, r1
	cmpeq r2, r0
	movlo r0, #1
	movhs r0, #0
	bx lr
_020F1990:
	bne _020F1948
	cmp r0, #0
	bhi _020F1948
	cmn ip, r3, lsl #1
	blo _020F192C
_020F19A4:
	bne _020F1948
	cmp r2, #0
	bhi _020F1948
	b _020F192C
	arm_func_end FUN_020F1918

	arm_func_start FUN_020F19B4
FUN_020F19B4: @ 0x020F19B4
	mov ip, #0x200000
	cmn ip, r1, lsl #1
	bhs _020F1A1C
	cmn ip, r3, lsl #1
	bhs _020F1A30
_020F19C8:
	orrs ip, r3, r1
	bmi _020F19F8
	cmp r1, r3
	cmpeq r0, r2
	moveq r0, #1
	movne r0, #0
	bx lr
_020F19E4:
	mov r0, #0
	mrs ip, apsr
	bic ip, ip, #0x40000000
	msr apsr_nzcvq, ip
	bx lr
_020F19F8:
	orr ip, r0, ip, lsl #1
	orrs ip, ip, r2
	moveq r0, #1
	bxeq lr
	cmp r3, r1
	cmpeq r2, r0
	moveq r0, #1
	movne r0, #0
	bx lr
_020F1A1C:
	bne _020F19E4
	cmp r0, #0
	bhi _020F19E4
	cmn ip, r3, lsl #1
	blo _020F19C8
_020F1A30:
	bne _020F19E4
	cmp r2, #0
	bhi _020F19E4
	b _020F19C8
	arm_func_end FUN_020F19B4

	arm_func_start FUN_020F1A40
FUN_020F1A40: @ 0x020F1A40
	mov ip, #0x200000
	cmn ip, r1, lsl #1
	bhs _020F1AA8
	cmn ip, r3, lsl #1
	bhs _020F1ABC
_020F1A54:
	orrs ip, r3, r1
	bmi _020F1A84
	cmp r1, r3
	cmpeq r0, r2
	movne r0, #1
	moveq r0, #0
	bx lr
_020F1A70:
	mov r0, #1
	mrs ip, apsr
	bic ip, ip, #0x40000000
	msr apsr_nzcvq, ip
	bx lr
_020F1A84:
	orr ip, r0, ip, lsl #1
	orrs ip, ip, r2
	moveq r0, #0
	bxeq lr
	cmp r3, r1
	cmpeq r2, r0
	movne r0, #1
	moveq r0, #0
	bx lr
_020F1AA8:
	bne _020F1A70
	cmp r0, #0
	bhi _020F1A70
	cmn ip, r3, lsl #1
	blo _020F1A54
_020F1ABC:
	bne _020F1A70
	cmp r2, #0
	bhi _020F1A70
	b _020F1A54
	arm_func_end FUN_020F1A40

	arm_func_start FUN_020F1ACC
FUN_020F1ACC: @ 0x020F1ACC
	mov r3, #0xff000000
	cmp r3, r0, lsl #1
	cmphs r3, r1, lsl #1
	blo _020F1B14
	cmp r0, #0
	bicmi r0, r0, #0x80000000
	rsbmi r0, r0, #0
	cmp r1, #0
	bicmi r1, r1, #0x80000000
	rsbmi r1, r1, #0
	cmp r0, r1
	movgt r0, #1
	movle r0, #0
	mrs ip, apsr
	bicle ip, ip, #0x20000000
	orrgt ip, ip, #0x20000000
	msr apsr_nzcvq, ip
	bx lr
_020F1B14:
	mov r0, #0
	mrs ip, apsr
	bic ip, ip, #0x20000000
	msr apsr_nzcvq, ip
	bx lr
	arm_func_end FUN_020F1ACC

	arm_func_start FUN_020F1B28
FUN_020F1B28: @ 0x020F1B28
	mov r3, #0xff000000
	cmp r3, r0, lsl #1
	cmphs r3, r1, lsl #1
	blo _020F1B78
	cmp r0, #0
	bicmi r0, r0, #0x80000000
	rsbmi r0, r0, #0
	cmp r1, #0
	bicmi r1, r1, #0x80000000
	rsbmi r1, r1, #0
	cmp r0, r1
	movle r0, #1
	movgt r0, #0
	mrs ip, apsr
	orrgt ip, ip, #0x20000000
	bicgt ip, ip, #0x40000000
	bicle ip, ip, #0x20000000
	orrle ip, ip, #0x40000000
	msr apsr_nzcvq, ip
	bx lr
_020F1B78:
	mov r0, #0
	mrs ip, apsr
	bic ip, ip, #0x40000000
	orr ip, ip, #0x20000000
	msr apsr_nzcvq, ip
	bx lr
	arm_func_end FUN_020F1B28

	arm_func_start FUN_020F1B90
FUN_020F1B90: @ 0x020F1B90
	mov r3, #0xff000000
	cmp r3, r0, lsl #1
	cmphs r3, r1, lsl #1
	blo _020F1BD8
	cmp r0, #0
	bicmi r0, r0, #0x80000000
	rsbmi r0, r0, #0
	cmp r1, #0
	bicmi r1, r1, #0x80000000
	rsbmi r1, r1, #0
	cmp r0, r1
	movlt r0, #1
	movge r0, #0
	mrs ip, apsr
	orrge ip, ip, #0x20000000
	biclt ip, ip, #0x20000000
	msr apsr_nzcvq, ip
	bx lr
_020F1BD8:
	mov r0, #0
	mrs ip, apsr
	orr ip, ip, #0x20000000
	msr apsr_nzcvq, ip
	bx lr
	arm_func_end FUN_020F1B90

	arm_func_start FUN_020F1BEC
FUN_020F1BEC: @ 0x020F1BEC
	mov r3, #0xff000000
	cmp r3, r0, lsl #1
	blo _020F1C40
	cmp r3, r1, lsl #1
	blo _020F1C40
	orr r3, r0, r1
	lsls r3, r3, #1
	moveq r0, #1
	bne _020F1C20
	mrs ip, apsr
	orr ip, ip, #0x40000000
	msr apsr_nzcvq, ip
	bx lr
_020F1C20:
	cmp r0, r1
	moveq r0, #1
	movne r0, #0
	mrs ip, apsr
	orreq ip, ip, #0x40000000
	bicne ip, ip, #0x40000000
	msr apsr_nzcvq, ip
	bx lr
_020F1C40:
	mov r0, #0
	mrs ip, apsr
	bic ip, ip, #0x40000000
	msr apsr_nzcvq, ip
	bx lr
	arm_func_end FUN_020F1BEC

	arm_func_start FUN_020F1C54
FUN_020F1C54: @ 0x020F1C54
	mov r3, #0xff000000
	cmp r3, r0, lsl #1
	blo _020F1CA8
	cmp r3, r1, lsl #1
	blo _020F1CA8
	orr r3, r0, r1
	lsls r3, r3, #1
	moveq r0, #0
	bne _020F1C88
	mrs ip, apsr
	orr ip, ip, #0x40000000
	msr apsr_nzcvq, ip
	bx lr
_020F1C88:
	cmp r0, r1
	movne r0, #1
	moveq r0, #0
	mrs ip, apsr
	bicne ip, ip, #0x40000000
	orreq ip, ip, #0x40000000
	msr apsr_nzcvq, ip
	bx lr
_020F1CA8:
	mov r0, #1
	mrs ip, apsr
	bic ip, ip, #0x40000000
	msr apsr_nzcvq, ip
	bx lr
	arm_func_end FUN_020F1C54

	arm_func_start FUN_020F1CBC
FUN_020F1CBC: @ 0x020F1CBC
	eor r0, r0, r1
	eor r1, r0, r1
	eor r0, r0, r1
	arm_func_end FUN_020F1CBC

	arm_func_start FUN_020F1CC8
FUN_020F1CC8: @ 0x020F1CC8
	stmdb sp!, {lr}
	mov ip, #0xff
	ands r3, ip, r0, lsr #23
	cmpne r3, #0xff
	beq _020F1E9C
	ands ip, ip, r1, lsr #23
	cmpne ip, #0xff
	beq _020F1ED8
	orr r1, r1, #0x800000
	orr r0, r0, #0x800000
	bic r2, r0, #0xff000000
	bic lr, r1, #0xff000000
_020F1CF8:
	cmp r2, lr
	lsllo r2, r2, #1
	sublo r3, r3, #1
	teq r0, r1
	sub r0, pc, #0x94
	ldrb r1, [r0, lr, lsr #15]
	rsb lr, lr, #0
	asr r0, lr, #1
	mul r0, r1, r0
	add r0, r0, #0x80000000
	lsr r0, r0, #6
	mul r0, r1, r0
	lsr r0, r0, #0xe
	mul r1, lr, r0
	sub ip, r3, ip
	lsr r1, r1, #0xc
	mul r1, r0, r1
	lsl r0, r0, #0xe
	add r0, r0, r1, lsr #15
	umull r1, r0, r2, r0
	mov r3, r0
	orrmi r0, r0, #0x80000000
	adds ip, ip, #0x7e
	bmi _020F1FA0
	cmp ip, #0xfe
	bge _020F2054
	add r0, r0, ip, lsl #23
	lsr ip, r1, #0x1c
	cmp ip, #7
	beq _020F1E7C
	add r0, r0, r1, lsr #31
	ldm sp!, {lr}
	bx lr
	arm_func_end FUN_020F1CC8
UNK_020F1D7C: @ 0x020F1D7C
	.byte 0xFF, 0xFF, 0xFE, 0xFD
	.byte 0xFC, 0xFB, 0xFA, 0xF9, 0xF8, 0xF7, 0xF6, 0xF5, 0xF4, 0xF3, 0xF2, 0xF1, 0xF0, 0xF0, 0xEF, 0xEE
	.byte 0xED, 0xEC, 0xEB, 0xEA, 0xEA, 0xE9, 0xE8, 0xE7, 0xE6, 0xE6, 0xE5, 0xE4, 0xE3, 0xE2, 0xE2, 0xE1
	.byte 0xE0, 0xDF, 0xDF, 0xDE, 0xDD, 0xDC, 0xDC, 0xDB, 0xDA, 0xD9, 0xD9, 0xD8, 0xD7, 0xD7, 0xD6, 0xD5
	.byte 0xD4, 0xD4, 0xD3, 0xD2, 0xD2, 0xD1, 0xD0, 0xD0, 0xCF, 0xCE, 0xCE, 0xCD, 0xCC, 0xCC, 0xCB, 0xCB
	.byte 0xCA, 0xC9, 0xC9, 0xC8, 0xC8, 0xC7, 0xC6, 0xC6, 0xC5, 0xC5, 0xC4, 0xC3, 0xC3, 0xC2, 0xC2, 0xC1
	.byte 0xC0, 0xC0, 0xBF, 0xBF, 0xBE, 0xBE, 0xBD, 0xBD, 0xBC, 0xBC, 0xBB, 0xBA, 0xBA, 0xB9, 0xB9, 0xB8
	.byte 0xB8, 0xB7, 0xB7, 0xB6, 0xB6, 0xB5, 0xB5, 0xB4, 0xB4, 0xB3, 0xB3, 0xB2, 0xB2, 0xB1, 0xB1, 0xB0
	.byte 0xB0, 0xAF, 0xAF, 0xAF, 0xAE, 0xAE, 0xAD, 0xAD, 0xAC, 0xAC, 0xAB, 0xAB, 0xAA, 0xAA, 0xAA, 0xA9
	.byte 0xA9, 0xA8, 0xA8, 0xA7, 0xA7, 0xA7, 0xA6, 0xA6, 0xA5, 0xA5, 0xA4, 0xA4, 0xA4, 0xA3, 0xA3, 0xA2
	.byte 0xA2, 0xA2, 0xA1, 0xA1, 0xA0, 0xA0, 0xA0, 0x9F, 0x9F, 0x9E, 0x9E, 0x9E, 0x9D, 0x9D, 0x9D, 0x9C
	.byte 0x9C, 0x9B, 0x9B, 0x9B, 0x9A, 0x9A, 0x9A, 0x99, 0x99, 0x99, 0x98, 0x98, 0x98, 0x97, 0x97, 0x96
	.byte 0x96, 0x96, 0x95, 0x95, 0x95, 0x94, 0x94, 0x94, 0x93, 0x93, 0x93, 0x92, 0x92, 0x92, 0x91, 0x91
	.byte 0x91, 0x91, 0x90, 0x90, 0x90, 0x8F, 0x8F, 0x8F, 0x8E, 0x8E, 0x8E, 0x8D, 0x8D, 0x8D, 0x8C, 0x8C
	.byte 0x8C, 0x8C, 0x8B, 0x8B, 0x8B, 0x8A, 0x8A, 0x8A, 0x8A, 0x89, 0x89, 0x89, 0x88, 0x88, 0x88, 0x88
	.byte 0x87, 0x87, 0x87, 0x86, 0x86, 0x86, 0x86, 0x85, 0x85, 0x85, 0x85, 0x84, 0x84, 0x84, 0x83, 0x83
	.byte 0x83, 0x83, 0x82, 0x82, 0x82, 0x82, 0x81, 0x81, 0x81, 0x81, 0x80, 0x80
_020F1E7C:
	lsl r1, r3, #1
	add r1, r1, #1
	rsb lr, lr, #0
	mul r1, lr, r1
	cmp r1, r2, lsl #24
	addmi r0, r0, #1
	ldm sp!, {lr}
	bx lr
_020F1E9C:
	eor lr, r0, r1
	and lr, lr, #0x80000000
	cmp r3, #0
	beq _020F1EF4
	lsls r0, r0, #9
	bne _020F203C
	lsr ip, r1, #0x17
	lsl r1, r1, #9
	ands ip, ip, #0xff
	beq _020F202C
	cmp ip, #0xff
	blt _020F202C
	cmp r1, #0
	beq _020F2048
	b _020F2024
_020F1ED8:
	eor lr, r0, r1
	and lr, lr, #0x80000000
	cmp ip, #0
	beq _020F1F58
_020F1EE8:
	lsls r1, r1, #9
	bne _020F2024
	b _020F2074
_020F1EF4:
	lsls r2, r0, #9
	beq _020F1F28
	clz r3, r2
	lsls r2, r2, r3
	rsb r3, r3, #0
	lsr r2, r2, #8
	ands ip, ip, r1, lsr #23
	beq _020F1F80
	cmp ip, #0xff
	beq _020F1EE8
	orr r1, r1, #0x800000
	bic lr, r1, #0xff000000
	b _020F1CF8
_020F1F28:
	lsr ip, r1, #0x17
	lsl r1, r1, #9
	ands ip, ip, #0xff
	beq _020F1F4C
	cmp ip, #0xff
	blt _020F2074
	cmp r1, #0
	beq _020F2074
	b _020F2024
_020F1F4C:
	cmp r1, #0
	beq _020F2048
	b _020F2074
_020F1F58:
	lsls ip, r1, #9
	beq _020F202C
	mov lr, ip
	clz ip, lr
	lsls lr, lr, ip
	rsb ip, ip, #0
	lsr lr, lr, #8
	orr r0, r0, #0x800000
	bic r2, r0, #0xff000000
	b _020F1CF8
_020F1F80:
	lsls ip, r1, #9
	beq _020F202C
	mov lr, ip
	clz ip, lr
	lsls lr, lr, ip
	rsb ip, ip, #0
	lsr lr, lr, #8
	b _020F1CF8
_020F1FA0:
	and r0, r0, #0x80000000
	cmn ip, #0x18
	beq _020F2014
	bmi _020F206C
	add r1, ip, #0x17
	lsl r2, r2, r1
	rsb ip, ip, #0
	lsr r3, r3, ip
	orr r0, r0, r3
	rsb lr, lr, #0
	mul r1, lr, r3
	cmp r1, r2
	ldmeq sp!, {lr}
	bxeq lr
	add r1, r1, lr
	cmp r1, r2
	beq _020F2008
	addmi r0, r0, #1
	subpl r1, r1, lr
	add r1, lr, r1, lsl #1
	cmp r1, r2, lsl #1
	and r3, r0, #1
	addmi r0, r0, #1
	addeq r0, r0, r3
	ldm sp!, {lr}
	bx lr
_020F2008:
	add r0, r0, #1
	ldm sp!, {lr}
	bx lr
_020F2014:
	cmn r2, lr
	addne r0, r0, #1
	ldm sp!, {lr}
	bx lr
_020F2024:
	mov r0, r1
	b _020F203C
_020F202C:
	mov r0, #0xff000000
	orr r0, lr, r0, lsr #1
	ldm sp!, {lr}
	bx lr
_020F203C:
	mvn r0, #0x80000000
	ldm sp!, {lr}
	bx lr
_020F2048:
	mvn r0, #0x80000000
	ldm sp!, {lr}
	bx lr
_020F2054:
	tst r0, #0x80000000
	mov r0, #0xff000000
	asrne r0, r0, #1
	lsreq r0, r0, #1
	ldm sp!, {lr}
	bx lr
_020F206C:
	ldm sp!, {lr}
	bx lr
_020F2074:
	mov r0, lr
	ldm sp!, {lr}
	bx lr
	arm_func_end FUN_020F1CC8

	arm_func_start FUN_020F2080
FUN_020F2080: @ 0x020F2080
	and r2, r0, #0x80000000
	lsr ip, r0, #0x17
	lsl r3, r0, #9
	ands ip, ip, #0xff
	beq _020F20B0
	cmp ip, #0xff
	beq _020F20DC
_020F209C:
	add ip, ip, #0x380
	lsl r0, r3, #0x14
	orr r1, r2, r3, lsr #12
	orr r1, r1, ip, lsl #20
	bx lr
_020F20B0:
	cmp r3, #0
	bne _020F20C4
	mov r1, r2
	mov r0, #0
	bx lr
_020F20C4:
	lsr r3, r3, #1
	clz ip, r3
	lsls r3, r3, ip
	rsb ip, ip, #1
	add r3, r3, r3
	b _020F209C
_020F20DC:
	cmp r3, #0
	bhi _020F20F4
	ldr r1, _020F2100 @ =0x7FF00000
	orr r1, r1, r2
	mov r0, #0
	bx lr
_020F20F4:
	mvn r0, #0
	bic r1, r0, #0x80000000
	bx lr
	.align 2, 0
_020F2100: .4byte 0x7FF00000
	arm_func_end FUN_020F2080

	arm_func_start FUN_020F2104
FUN_020F2104: @ 0x020F2104
	bic r1, r0, #0x80000000
	mov r2, #0x9e
	subs r2, r2, r1, lsr #23
	ble _020F212C
	lsl r1, r1, #8
	orr r1, r1, #0x80000000
	cmp r0, #0
	lsr r0, r1, r2
	rsbmi r0, r0, #0
	bx lr
_020F212C:
	mvn r0, r0, asr #31
	add r0, r0, #0x80000000
	bx lr
	arm_func_end FUN_020F2104

	arm_func_start FUN_020F2138
FUN_020F2138: @ 0x020F2138
	tst r0, #0x80000000
	bne _020F215C
	mov r1, #0x9e
	subs r1, r1, r0, lsr #23
	blt _020F2170
	lsl r2, r0, #8
	orr r0, r2, #0x80000000
	lsr r0, r0, r1
	bx lr
_020F215C:
	mov r2, #0xff000000
	cmp r2, r0, lsl #1
	movhs r0, #0
	mvnlo r0, #0
	bx lr
_020F2170:
	mvn r0, #0
	bx lr
	arm_func_end FUN_020F2138

	arm_func_start FUN_020F2178
FUN_020F2178: @ 0x020F2178
	ands r2, r0, #0x80000000
	rsbmi r0, r0, #0
	cmp r0, #0
_020F2184:
	bxeq lr
	clz r3, r0
	lsls r0, r0, r3
	rsb r3, r3, #0x9e
	ands r1, r0, #0xff
	add r0, r0, r0
	orr r0, r2, r0, lsr #9
	orr r0, r0, r3, lsl #23
	bxeq lr
	tst r1, #0x80
	bxeq lr
	ands r3, r1, #0x7f
	andseq r3, r0, #1
	addne r0, r0, #1
	bx lr
	arm_func_end FUN_020F2178

	arm_func_start FUN_020F21C0
FUN_020F21C0: @ 0x020F21C0
	cmp r0, #0
_020F21C4:
	bxeq lr
	mov r3, #0x9e
	bmi _020F21DC
	clz ip, r0
	lsls r0, r0, ip
	sub r3, r3, ip
_020F21DC:
	ands r2, r0, #0xff
	add r0, r0, r0
	lsr r0, r0, #9
	orr r0, r0, r3, lsl #23
	bxeq lr
	tst r2, #0x80
	bxeq lr
	ands r1, r2, #0x7f
	andseq r1, r0, #1
	addne r0, r0, #1
	bx lr
	arm_func_end FUN_020F21C0

	arm_func_start FUN_020F2208
FUN_020F2208: @ 0x020F2208
	ands r2, r1, #0x80000000
	beq _020F2218
	rsbs r0, r0, #0
	rsc r1, r1, #0
_020F2218:
	cmp r1, #0
	bne _020F2228
	movs r0, r0
	b _020F2184
_020F2228:
	clz r3, r1
	lsls r1, r1, r3
	rsb r3, r3, #0x20
	orr r1, r1, r0, lsr r3
	rsb ip, r3, #0x20
	lsls r0, r0, ip
	orrne r1, r1, #1
	add r3, r3, #0x9e
	ands ip, r1, #0xff
	add r0, r1, r1
	orr r0, r2, r0, lsr #9
	orr r0, r0, r3, lsl #23
	bxeq lr
	tst ip, #0x80
	bxeq lr
	ands r3, ip, #0x7f
	andseq r3, r0, #1
	addne r0, r0, #1
	bx lr
	arm_func_end FUN_020F2208

	arm_func_start FUN_020F2274
FUN_020F2274: @ 0x020F2274
	cmp r1, #0
	bne _020F2284
	movs r0, r0
	b _020F21C4
_020F2284:
	mov r3, #0x20
	bmi _020F22A4
	clz ip, r1
	lsls r1, r1, ip
	sub r3, r3, ip
	orr r1, r1, r0, lsr r3
	rsb r2, r3, #0x20
	lsl r0, r0, r2
_020F22A4:
	cmp r0, #0
	orrne r1, r1, #1
	add r3, r3, #0x9e
	ands r2, r1, #0xff
	add r0, r1, r1
	lsr r0, r0, #9
	orr r0, r0, r3, lsl #23
	bxeq lr
	tst r2, #0x80
	bxeq lr
	ands r1, r2, #0x7f
	andseq r1, r0, #1
	addne r0, r0, #1
	bx lr
	arm_func_end FUN_020F2274

	arm_func_start FUN_020F22DC
FUN_020F22DC: @ 0x020F22DC
	eor r2, r0, r1
	and r2, r2, #0x80000000
	mov ip, #0xff
	ands r3, ip, r0, lsr #23
	lsl r0, r0, #8
	cmpne r3, #0xff
	beq _020F2358
	orr r0, r0, #0x80000000
	ands ip, ip, r1, lsr #23
	lsl r1, r1, #8
	cmpne ip, #0xff
	beq _020F2398
	orr r1, r1, #0x80000000
_020F2310:
	add ip, r3, ip
	umull r1, r3, r0, r1
	movs r0, r3
	addpl r0, r0, r0
	subpl ip, ip, #1
	subs ip, ip, #0x7f
	bmi _020F2424
	cmp ip, #0xfe
	bge _020F2490
	ands r3, r0, #0xff
	orr r0, r2, r0, lsr #8
	add r0, r0, ip, lsl #23
	tst r3, #0x80
	bxeq lr
	orrs r1, r1, r3, lsl #25
	andseq r3, r0, #1
	addne r0, r0, #1
	bx lr
_020F2358:
	cmp r3, #0
	beq _020F23AC
	lsls r0, r0, #1
	bne _020F2480
	lsr ip, r1, #0x17
	lsl r1, r1, #9
	ands ip, ip, #0xff
	beq _020F238C
	cmp ip, #0xff
	blt _020F2474
	cmp r1, #0
	beq _020F2474
	b _020F2480
_020F238C:
	cmp r1, #0
	beq _020F2488
	b _020F2474
_020F2398:
	cmp ip, #0
	beq _020F2408
_020F23A0:
	lsls r1, r1, #1
	bne _020F2480
	b _020F2474
_020F23AC:
	lsls r0, r0, #1
	beq _020F23E4
	lsr r0, r0, #1
	clz r3, r0
	lsls r0, r0, r3
	rsb r3, r3, #1
	lsr ip, r1, #0x17
	lsl r1, r1, #8
	ands ip, ip, #0xff
	beq _020F2408
	cmp ip, #0xff
	beq _020F23A0
	orr r1, r1, #0x80000000
	b _020F2310
_020F23E4:
	lsr ip, r1, #0x17
	lsl r1, r1, #9
	ands ip, ip, #0xff
	beq _020F24B4
	cmp ip, #0xff
	blt _020F24B4
	cmp r1, #0
	beq _020F2488
	b _020F2480
_020F2408:
	lsls r1, r1, #1
	beq _020F24B4
	lsr r1, r1, #1
	clz ip, r1
	lsls r1, r1, ip
	rsb ip, ip, #1
	b _020F2310
_020F2424:
	cmn ip, #0x18
	beq _020F246C
	bmi _020F24AC
	cmp r1, #0
	orrne r0, r0, #1
	mov r3, r0
	lsr r0, r0, #8
	rsb ip, ip, #0
	orr r0, r2, r0, lsr ip
	rsb ip, ip, #0x18
	lsls r1, r3, ip
	bxeq lr
	tst r1, #0x80000000
	bxeq lr
	lsls r1, r1, #1
	andseq r1, r0, #1
	addne r0, r0, #1
	bx lr
_020F246C:
	lsl r0, r0, #1
	b _020F249C
_020F2474:
	mov r0, #0xff000000
	orr r0, r2, r0, lsr #1
	bx lr
_020F2480:
	mvn r0, #0x80000000
	bx lr
_020F2488:
	mvn r0, #0x80000000
	bx lr
_020F2490:
	mov r0, #0xff000000
	orr r0, r2, r0, lsr #1
	bx lr
_020F249C:
	movs r1, r0
	mov r0, r2
	addne r0, r0, #1
	bx lr
_020F24AC:
	mov r0, r2
	bx lr
_020F24B4:
	mov r0, r2
	bx lr
	arm_func_end FUN_020F22DC

	arm_func_start FUN_020F24BC
FUN_020F24BC: @ 0x020F24BC
	eor r0, r0, r1
	eor r1, r0, r1
	eor r0, r0, r1
	arm_func_end FUN_020F24BC

	arm_func_start FUN_020F24C8
FUN_020F24C8: @ 0x020F24C8
	eors r2, r0, r1
	eormi r1, r1, #0x80000000
	bmi _020F152C
_020F24D4:
	subs ip, r0, r1
	eorlo ip, ip, #0x80000000
	sublo r0, r0, ip
	addlo r1, r1, ip
	mov r2, #0x80000000
	lsr r3, r0, #0x17
	orr r0, r2, r0, lsl #8
	ands ip, r3, #0xff
	cmpne ip, #0xff
	beq _020F25F0
	lsr ip, r1, #0x17
	orr r1, r2, r1, lsl #8
	ands r2, ip, #0xff
	beq _020F2630
_020F250C:
	subs ip, r3, ip
	beq _020F2554
	rsb r2, ip, #0x20
	lsls r2, r1, r2
	lsr r1, r1, ip
	orrne r1, r1, #1
	subs r0, r0, r1
	bpl _020F2598
	ands r1, r0, #0xff
	add r0, r0, r0
	lsr r0, r0, #9
	orr r0, r0, r3, lsl #23
	tst r1, #0x80
	bxeq lr
	ands r1, r1, #0x7f
	andseq r1, r0, #1
	addne r0, r0, #1
	bx lr
_020F2554:
	subs r0, r0, r1
	beq _020F26FC
	lsl r2, r3, #0x17
	and r2, r2, #0x80000000
	bic r3, r3, #0x100
	clz ip, r0
	lsls r0, r0, ip
	sub r3, r3, ip
	cmp r3, #0
	bgt _020F2588
	rsb r3, r3, #9
	orr r0, r2, r0, lsr r3
	bx lr
_020F2588:
	add r0, r0, r0
	orr r0, r2, r0, lsr #9
	orr r0, r0, r3, lsl #23
	bx lr
_020F2598:
	lsl r2, r3, #0x17
	and r2, r2, #0x80000000
	bic r3, r3, #0x100
	clz ip, r0
	lsls r0, r0, ip
	sub r3, r3, ip
	cmp r3, #0
	bgt _020F25C4
	rsb r3, r3, #9
	orr r0, r2, r0, lsr r3
	bx lr
_020F25C4:
	ands r1, r0, #0xff
	add r0, r0, r0
	orr r0, r2, r0, lsr #9
	orr r0, r0, r3, lsl #23
	bxeq lr
	tst r1, #0x80
	bxeq lr
	ands r1, r1, #0x7f
	andseq r1, r0, #1
	addne r0, r0, #1
	bx lr
_020F25F0:
	cmp r3, #0x100
	movge r2, #0x80000000
	movlt r2, #0
	ands r3, r3, #0xff
	beq _020F2658
	lsls r0, r0, #1
	bne _020F2730
	lsr ip, r1, #0x17
	lsl r1, r1, #9
	ands ip, ip, #0xff
	beq _020F2724
	cmp ip, #0xff
	blt _020F2724
	cmp r1, #0
	beq _020F2738
	b _020F2730
_020F2630:
	cmp ip, #0x100
	movge r2, #0x80000000
	movlt r2, #0
	and r3, r3, #0xff
	ands ip, ip, #0xff
	beq _020F26C0
_020F2648:
	eor r2, r2, #0x80000000
	lsls r1, r1, #1
	bne _020F2730
	b _020F2724
_020F2658:
	lsls r0, r0, #1
	beq _020F2690
	lsr r0, r0, #1
	mov r3, #1
	lsr ip, r1, #0x17
	lsl r1, r1, #8
	ands ip, ip, #0xff
	beq _020F26C0
	cmp ip, #0xff
	beq _020F2648
	orr r1, r1, #0x80000000
	orr r3, r3, r2, lsr #23
	orr ip, ip, r2, lsr #23
	b _020F250C
_020F2690:
	lsr r3, r1, #0x17
	lsl r0, r1, #9
	ands r2, r3, #0xff
	beq _020F26B4
	cmp r2, #0xff
	blt _020F26DC
	cmp r0, #0
	bne _020F271C
	b _020F2724
_020F26B4:
	cmp r0, #0
	beq _020F26FC
	b _020F26DC
_020F26C0:
	lsls r1, r1, #1
	beq _020F26E4
	lsr r1, r1, #1
	mov ip, #1
	orr ip, ip, r2, lsr #23
	orr r3, r3, r2, lsr #23
	b _020F250C
_020F26DC:
	mov r0, r1
	bx lr
_020F26E4:
	cmp r0, #0
	subsge r3, r3, #1
	add r0, r0, r0
	orr r0, r2, r0, lsr #9
	orr r0, r0, r3, lsl #23
	bx lr
_020F26FC:
	mov r0, #0
	bx lr
	arm_func_end FUN_020F24C8

	arm_func_start FUN_020F2704
FUN_020F2704: @ 0x020F2704
	cmp r0, #0
	subsge r3, r3, #1
	add r0, r0, r0
	lsr r0, r0, #9
	orr r0, r0, r3, lsl #23
	bx lr
_020F271C:
	mvn r0, #0x80000000
	bx lr
_020F2724:
	mov r0, #0xff000000
	orr r0, r2, r0, lsr #1
	bx lr
_020F2730:
	mvn r0, #0x80000000
	bx lr
_020F2738:
	mvn r0, #0x80000000
	bx lr
	arm_func_end FUN_020F2704

	arm_func_start FUN_020F2740
FUN_020F2740: @ 0x020F2740
	push {r4, r5, r6, r7, fp, ip, lr}
	mov r4, r1
	orr r4, r4, #1
	b _020F2760
	arm_func_end FUN_020F2740

	arm_func_start FUN_020F2750
FUN_020F2750: @ 0x020F2750
	push {r4, r5, r6, r7, fp, ip, lr}
	eor r4, r1, r3
	asr r4, r4, #1
	lsl r4, r4, #1
_020F2760:
	orrs r5, r3, r2
	bne _020F2770
	pop {r4, r5, r6, r7, fp, ip, lr}
	bx lr
_020F2770:
	lsr r5, r0, #0x1f
	add r5, r5, r1
	lsr r6, r2, #0x1f
	add r6, r6, r3
	orrs r6, r5, r6
	bne _020F27A4
	mov r1, r2
	bl FUN_020F2998
	ands r4, r4, #1
	movne r0, r1
	asr r1, r0, #0x1f
	pop {r4, r5, r6, r7, fp, ip, lr}
	bx lr
_020F27A4:
	cmp r1, #0
	bge _020F27B4
	rsbs r0, r0, #0
	rsc r1, r1, #0
_020F27B4:
	cmp r3, #0
	bge _020F27C4
	rsbs r2, r2, #0
	rsc r3, r3, #0
_020F27C4:
	orrs r5, r1, r0
	beq _020F28E8
	mov r5, #0
	mov r6, #1
	cmp r3, #0
	bmi _020F27F0
_020F27DC:
	add r5, r5, #1
	adds r2, r2, r2
	adcs r3, r3, r3
	bpl _020F27DC
	add r6, r6, r5
_020F27F0:
	cmp r1, #0
	blt _020F2810
_020F27F8:
	cmp r6, #1
	beq _020F2810
	sub r6, r6, #1
	adds r0, r0, r0
	adcs r1, r1, r1
	bpl _020F27F8
_020F2810:
	mov r7, #0
	mov ip, #0
	mov fp, #0
	b _020F2838
_020F2820:
	orr ip, ip, #1
	subs r6, r6, #1
	beq _020F2890
	adds r0, r0, r0
	adcs r1, r1, r1
	adcs r7, r7, r7
_020F2838:
	subs r0, r0, r2
	sbcs r1, r1, r3
	sbcs r7, r7, #0
	adds ip, ip, ip
	adc fp, fp, fp
	cmp r7, #0
	bge _020F2820
_020F2854:
	subs r6, r6, #1
	beq _020F2888
	adds r0, r0, r0
	adcs r1, r1, r1
	adc r7, r7, r7
	adds r0, r0, r2
	adcs r1, r1, r3
	adc r7, r7, #0
	adds ip, ip, ip
	adc fp, fp, fp
	cmp r7, #0
	bge _020F2820
	b _020F2854
_020F2888:
	adds r0, r0, r2
	adc r1, r1, r3
_020F2890:
	ands r7, r4, #1
	moveq r0, ip
	moveq r1, fp
	beq _020F28C8
	subs r7, r5, #0x20
	lsrge r0, r1, r7
	bge _020F28EC
	rsb r7, r5, #0x20
	lsr r0, r0, r5
	orr r0, r0, r1, lsl r7
	lsr r1, r1, r5
	b _020F28C8
	arm_func_end FUN_020F2750

	arm_func_start FUN_020F28C0
FUN_020F28C0: @ 0x020F28C0
	lsr r0, r1, r7
	mov r1, #0
_020F28C8:
	cmp r4, #0
	blt _020F28D8
	pop {r4, r5, r6, r7, fp, ip, lr}
	bx lr
_020F28D8:
	rsbs r0, r0, #0
	rsc r1, r1, #0
	pop {r4, r5, r6, r7, fp, ip, lr}
	bx lr
_020F28E8:
	mov r0, #0
_020F28EC:
	mov r1, #0
	cmp r4, #0
	blt _020F28D8
	pop {r4, r5, r6, r7, fp, ip, lr}
	bx lr
	arm_func_end FUN_020F28C0

	arm_func_start FUN_020F2900
FUN_020F2900: @ 0x020F2900
	push {r4, r5, r6, r7, fp, ip, lr}
	mov r4, #0
	b _020F2914
	arm_func_end FUN_020F2900

	arm_func_start FUN_020F290C
FUN_020F290C: @ 0x020F290C
	push {r4, r5, r6, r7, fp, ip, lr}
	mov r4, #1
_020F2914:
	orrs r5, r3, r2
	bne _020F2924
	pop {r4, r5, r6, r7, fp, ip, lr}
	bx lr
_020F2924:
	orrs r5, r1, r3
	bne _020F27C4
	mov r1, r2
	bl FUN_020F2BAC
	cmp r4, #0
	movne r0, r1
	mov r1, #0
	pop {r4, r5, r6, r7, fp, ip, lr}
	bx lr
	arm_func_end FUN_020F290C

	arm_func_start FUN_020F2948
FUN_020F2948: @ 0x020F2948
	push {r4, r5, lr}
	umull r5, r4, r0, r2
	mla r4, r0, r3, r4
	mla r4, r2, r1, r4
	mov r1, r4
	mov r0, r5
	pop {r4, r5, lr}
	bx lr
	arm_func_end FUN_020F2948

	arm_func_start FUN_020F2968
FUN_020F2968: @ 0x020F2968
	ands r2, r2, #0x3f
	bxeq lr
	subs r3, r2, #0x20
	bge _020F298C
	rsb r3, r2, #0x20
	lsl r1, r1, r2
	orr r1, r1, r0, lsr r3
	lsl r0, r0, r2
	bx lr
_020F298C:
	lsl r1, r0, r3
	mov r0, #0
	bx lr
	arm_func_end FUN_020F2968

	arm_func_start FUN_020F2998
FUN_020F2998: @ 0x020F2998
	eor ip, r0, r1
	and ip, ip, #0x80000000
	cmp r0, #0
	rsblt r0, r0, #0
	addlt ip, ip, #1
	cmp r1, #0
	rsblt r1, r1, #0
	beq _020F2B90
	cmp r0, r1
	movlo r1, r0
	movlo r0, #0
	blo _020F2B90
	mov r2, #0x1c
	lsr r3, r0, #4
	cmp r1, r3, lsr #12
	suble r2, r2, #0x10
	lsrle r3, r3, #0x10
	cmp r1, r3, lsr #4
	suble r2, r2, #8
	lsrle r3, r3, #8
	cmp r1, r3
	suble r2, r2, #4
	lsrle r3, r3, #4
	lsl r0, r0, r2
	rsb r1, r1, #0
	adds r0, r0, r0
	add r2, r2, r2, lsl #1
	add pc, pc, r2, lsl #2
	nop
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	mov r1, r3
_020F2B90:
	ands r3, ip, #0x80000000
	rsbne r0, r0, #0
	ands r3, ip, #1
	rsbne r1, r1, #0
	bx lr
	arm_func_end FUN_020F2998

	arm_func_start FUN_020F2BA4
FUN_020F2BA4: @ 0x020F2BA4
	cmp r1, #0
	bxeq lr
	arm_func_end FUN_020F2BA4

	arm_func_start FUN_020F2BAC
FUN_020F2BAC: @ 0x020F2BAC
	cmp r0, r1
	movlo r1, r0
	movlo r0, #0
	bxlo lr
	mov r2, #0x1c
	lsr r3, r0, #4
	cmp r1, r3, lsr #12
	suble r2, r2, #0x10
	lsrle r3, r3, #0x10
	cmp r1, r3, lsr #4
	suble r2, r2, #8
	lsrle r3, r3, #8
	cmp r1, r3
	suble r2, r2, #4
	lsrle r3, r3, #4
	lsl r0, r0, r2
	rsb r1, r1, #0
	adds r0, r0, r0
	add r2, r2, r2, lsl #1
	add pc, pc, r2, lsl #2
	nop
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	mov r1, r3
	bx lr
	arm_func_end FUN_020F2BAC

	arm_func_start FUN_020F2D88
FUN_020F2D88: @ 0x020F2D88
	eor r1, r1, r3
	eor r3, r1, r3
	eor r1, r1, r3
	eor r0, r0, r2
	eor r2, r0, r2
	eor r0, r0, r2
	arm_func_end FUN_020F2D88

	arm_func_start FUN_020F2DA0
FUN_020F2DA0: @ 0x020F2DA0
	push {r4, r5, r6, lr}
	ldr lr, _020F32E0 @ =0x00000FFE
	eor r4, r1, r3
	ands ip, lr, r1, lsr #19
	cmpne ip, lr
	beq _020F314C
	bic r1, r1, lr, lsl #20
	orr r1, r1, #0x100000
	add ip, ip, r4, lsr #31
_020F2DC4:
	ands r4, lr, r3, lsr #19
	cmpne r4, lr
	beq _020F31E4
	bic r3, r3, lr, lsl #20
	orr r3, r3, #0x100000
_020F2DD8:
	sub ip, ip, r4
	cmp r1, r3
	cmpeq r0, r2
	bhs _020F2DF4
	adds r0, r0, r0
	adc r1, r1, r1
	sub ip, ip, #2
_020F2DF4:
	sub r4, pc, #0x24
	ldrb lr, [r4, r3, lsr #12]
	rsbs r2, r2, #0
	rsc r3, r3, #0
	mov r4, #0x20000000
	mla r5, lr, r3, r4
	lsl r6, r3, #0xa
	lsr r5, r5, #7
	mul lr, r5, lr
	orr r6, r6, r2, lsr #22
	lsr lr, lr, #0xd
	mul r5, lr, r6
	lsl r6, r1, #0xa
	orr r6, r6, r0, lsr #22
	lsr r5, r5, #0x10
	mul r5, lr, r5
	lsl lr, lr, #0xe
	add lr, lr, r5, lsr #16
	umull r5, r6, lr, r6
	umull r4, r5, r6, r2
	mla r5, r3, r6, r5
	lsr r4, r4, #0x1a
	orr r4, r4, r5, lsl #6
	add r4, r4, r0, lsl #2
	umull lr, r5, r4, lr
	mov r4, #0
	adds r5, r5, r6, lsl #24
	adc r4, r4, r6, lsr #8
	cmp ip, #0x800
	bge _020F2FD8
	add ip, ip, #0x7f0
	adds ip, ip, #0xc
	bmi _020F2FF0
	orr r1, r4, ip, lsl #31
	bic ip, ip, #1
	add r1, r1, ip, lsl #19
	tst lr, #0x80000000
	bne _020F2EC8
	rsbs r2, r2, #0
	lsl r4, r4, #1
	add r4, r4, r5, lsr #31
	mul lr, r2, r4
	mov r6, #0
	lsl r4, r5, #1
	orr r4, r4, #1
	umlal r6, lr, r4, r2
	rsc r3, r3, #0
	mla lr, r4, r3, lr
	cmp lr, r0, lsl #21
	bmi _020F2EC8
	mov r0, r5
	pop {r4, r5, r6, lr}
	bx lr
_020F2EC8:
	adds r0, r5, #1
	adc r1, r1, #0
	pop {r4, r5, r6, lr}
	bx lr
	arm_func_end FUN_020F2DA0
UNK_020F2ED8: @ 0x020F2ED8
	.byte 0xFF, 0xFF, 0xFE, 0xFD, 0xFC, 0xFB, 0xFA, 0xF9
	.byte 0xF8, 0xF7, 0xF6, 0xF5, 0xF4, 0xF3, 0xF2, 0xF1, 0xF0, 0xF0, 0xEF, 0xEE, 0xED, 0xEC, 0xEB, 0xEA
	.byte 0xEA, 0xE9, 0xE8, 0xE7, 0xE6, 0xE6, 0xE5, 0xE4, 0xE3, 0xE2, 0xE2, 0xE1, 0xE0, 0xDF, 0xDF, 0xDE
	.byte 0xDD, 0xDC, 0xDC, 0xDB, 0xDA, 0xD9, 0xD9, 0xD8, 0xD7, 0xD7, 0xD6, 0xD5, 0xD4, 0xD4, 0xD3, 0xD2
	.byte 0xD2, 0xD1, 0xD0, 0xD0, 0xCF, 0xCE, 0xCE, 0xCD, 0xCC, 0xCC, 0xCB, 0xCB, 0xCA, 0xC9, 0xC9, 0xC8
	.byte 0xC8, 0xC7, 0xC6, 0xC6, 0xC5, 0xC5, 0xC4, 0xC3, 0xC3, 0xC2, 0xC2, 0xC1, 0xC0, 0xC0, 0xBF, 0xBF
	.byte 0xBE, 0xBE, 0xBD, 0xBD, 0xBC, 0xBC, 0xBB, 0xBA, 0xBA, 0xB9, 0xB9, 0xB8, 0xB8, 0xB7, 0xB7, 0xB6
	.byte 0xB6, 0xB5, 0xB5, 0xB4, 0xB4, 0xB3, 0xB3, 0xB2, 0xB2, 0xB1, 0xB1, 0xB0, 0xB0, 0xAF, 0xAF, 0xAF
	.byte 0xAE, 0xAE, 0xAD, 0xAD, 0xAC, 0xAC, 0xAB, 0xAB, 0xAA, 0xAA, 0xAA, 0xA9, 0xA9, 0xA8, 0xA8, 0xA7
	.byte 0xA7, 0xA7, 0xA6, 0xA6, 0xA5, 0xA5, 0xA4, 0xA4, 0xA4, 0xA3, 0xA3, 0xA2, 0xA2, 0xA2, 0xA1, 0xA1
	.byte 0xA0, 0xA0, 0xA0, 0x9F, 0x9F, 0x9E, 0x9E, 0x9E, 0x9D, 0x9D, 0x9D, 0x9C, 0x9C, 0x9B, 0x9B, 0x9B
	.byte 0x9A, 0x9A, 0x9A, 0x99, 0x99, 0x99, 0x98, 0x98, 0x98, 0x97, 0x97, 0x96, 0x96, 0x96, 0x95, 0x95
	.byte 0x95, 0x94, 0x94, 0x94, 0x93, 0x93, 0x93, 0x92, 0x92, 0x92, 0x91, 0x91, 0x91, 0x91, 0x90, 0x90
	.byte 0x90, 0x8F, 0x8F, 0x8F, 0x8E, 0x8E, 0x8E, 0x8D, 0x8D, 0x8D, 0x8C, 0x8C, 0x8C, 0x8C, 0x8B, 0x8B
	.byte 0x8B, 0x8A, 0x8A, 0x8A, 0x8A, 0x89, 0x89, 0x89, 0x88, 0x88, 0x88, 0x88, 0x87, 0x87, 0x87, 0x86
	.byte 0x86, 0x86, 0x86, 0x85, 0x85, 0x85, 0x85, 0x84, 0x84, 0x84, 0x83, 0x83, 0x83, 0x83, 0x82, 0x82
	.byte 0x82, 0x82, 0x81, 0x81, 0x81, 0x81, 0x80, 0x80
_020F2FD8:
	lsls r1, ip, #0x1f
	orr r1, r1, #0x7f000000
	orr r1, r1, #0xf00000
	mov r0, #0
	pop {r4, r5, r6, lr}
	bx lr
_020F2FF0:
	mvn r6, ip, asr #1
	cmp r6, #0x34
	bgt _020F313C
	beq _020F3118
	cmp r6, #0x14
	bge _020F3038
	rsb r6, r6, #0x13
	lsl lr, r0, r6
	rsb r6, r6, #0x14
	lsr r0, r5, r6
	rsb r6, r6, #0x20
	orr r0, r0, r4, lsl r6
	rsb r6, r6, #0x20
	lsr r4, r4, r6
	orr r1, r4, ip, lsl #31
	mov ip, lr
	mov lr, #0
	b _020F3068
_020F3038:
	rsb r6, r6, #0x33
	lsl lr, r1, r6
	lsl r1, ip, #0x1f
	rsb r6, r6, #0x20
	orr ip, lr, r0, lsr r6
	rsb r6, r6, #0x20
	lsl lr, r0, r6
	lsr r5, r5, #0x15
	orr r5, r5, r4, lsl #11
	rsb r6, r6, #0x1f
	lsr r0, r5, r6
	mov r4, #0
_020F3068:
	rsbs r2, r2, #0
	mul r4, r2, r4
	mov r5, #0
	umlal r5, r4, r2, r0
	rsc r3, r3, #0
	mla r4, r0, r3, r4
	cmp r4, ip
	cmpeq r5, lr
	popeq {r4, r5, r6, lr}
	bxeq lr
	adds r5, r5, r2
	adc r4, r4, r3
	cmp r4, ip
	bmi _020F310C
	bne _020F30B0
	cmp r5, lr
	beq _020F30FC
	blo _020F310C
_020F30B0:
	subs r5, r5, r2
	sbc r4, r4, r3
_020F30B8:
	adds r5, r5, r5
	adc r4, r4, r4
	adds r5, r5, r2
	adc r4, r4, r3
	adds lr, lr, lr
	adc ip, ip, ip
	cmp r4, ip
	bmi _020F30FC
	popne {r4, r5, r6, lr}
	bxne lr
	cmp r5, lr
	blo _020F30FC
	popne {r4, r5, r6, lr}
	bxne lr
	tst r0, #1
	popeq {r4, r5, r6, lr}
	bxeq lr
_020F30FC:
	adds r0, r0, #1
	adc r1, r1, #0
	pop {r4, r5, r6, lr}
	bx lr
_020F310C:
	adds r0, r0, #1
	adc r1, r1, #0
	b _020F30B8
_020F3118:
	rsbs r2, r2, #0
	rsc r3, r3, #0
	cmp r1, r3
	cmpeq r0, r2
	lsl r1, ip, #0x1f
	mov r0, #0
	movne r0, #1
	pop {r4, r5, r6, lr}
	bx lr
_020F313C:
	lsl r1, ip, #0x1f
	mov r0, #0
	pop {r4, r5, r6, lr}
	bx lr
_020F314C:
	orrs r5, r0, r1, lsl #1
	beq _020F3270
	cmp ip, lr
	beq _020F31B4
	lsls r1, r1, #0xc
	beq _020F3190
	clz r5, r1
	lsls r1, r1, r5
	sub ip, ip, r5
	add r5, ip, #0x1f
	lsr r1, r1, #0xb
	orr r1, r1, r0, lsr r5
	rsb r5, r5, #0x20
	lsl r0, r0, r5
	lsl ip, ip, #1
	orr ip, ip, r4, lsr #31
	b _020F2DC4
_020F3190:
	mvn ip, #0x13
	clz r5, r0
	lsls r0, r0, r5
	sub ip, ip, r5
	lsr r1, r0, #0xb
	lsl r0, r0, #0x15
	lsl ip, ip, #1
	orr ip, ip, r4, lsr #31
	b _020F2DC4
_020F31B4:
	orrs r5, r0, r1, lsl #12
	bne _020F3298
	bic r5, r3, #0x80000000
	cmp r5, lr, lsl #19
	bhs _020F31D8
	and r5, r3, #0x80000000
	eor r1, r5, r1
	pop {r4, r5, r6, lr}
	bx lr
_020F31D8:
	orrs r5, r2, r3, lsl #12
	bne _020F32B8
	b _020F32D0
_020F31E4:
	orrs r5, r2, r3, lsl #1
	beq _020F325C
	cmp r4, lr
	beq _020F3244
	lsls r3, r3, #0xc
	beq _020F3224
	clz r5, r3
	lsls r3, r3, r5
	sub r4, r4, r5
	add r5, r4, #0x1f
	lsr r3, r3, #0xb
	orr r3, r3, r2, lsr r5
	rsb r5, r5, #0x20
	lsl r2, r2, r5
	lsl r4, r4, #1
	b _020F2DD8
_020F3224:
	mvn r4, #0x13
	clz r5, r2
	lsls r2, r2, r5
	sub r4, r4, r5
	lsr r3, r2, #0xb
	lsl r2, r2, #0x15
	lsl r4, r4, #1
	b _020F2DD8
_020F3244:
	orrs r5, r2, r3, lsl #12
	bne _020F32B8
	lsl r1, ip, #0x1f
	mov r0, #0
	pop {r4, r5, r6, lr}
	bx lr
_020F325C:
	lsl r1, ip, #0x1f
	orr r1, r1, lr, lsl #19
	mov r0, #0
	pop {r4, r5, r6, lr}
	bx lr
_020F3270:
	orrs r5, r2, r3, lsl #1
	beq _020F32D0
	bic r5, r3, #0x80000000
	cmp r5, lr, lsl #19
	cmpeq r2, #0
	bhi _020F32B8
	eor r1, r1, r3
	and r1, r1, #0x80000000
	pop {r4, r5, r6, lr}
	bx lr
_020F3298:
	tst r1, #0x80000
	beq _020F32D0
	bic r5, r3, #0x80000000
	cmp r5, lr, lsl #19
	cmpeq r2, #0
	bhi _020F32B8
	pop {r4, r5, r6, lr}
	bx lr
_020F32B8:
	tst r3, #0x80000
	beq _020F32D0
	mov r1, r3
	mov r0, r2
	pop {r4, r5, r6, lr}
	bx lr
_020F32D0:
	orr r1, r1, #0x7f000000
	orr r1, r1, #0xf80000
	pop {r4, r5, r6, lr}
	bx lr
	.align 2, 0
_020F32E0: .4byte 0x00000FFE
	arm_func_end FUN_020F2DA0

	arm_func_start _fp_init
_fp_init: @ 0x020F32E4
	bx lr
	arm_func_end _fp_init

	arm_func_start FUN_020F32E8
FUN_020F32E8: @ 0x020F32E8
	str lr, [sp, #-4]!
	mov r1, r0
	mov r0, #3
	svc #0x123456
	pop {pc}
	arm_func_end FUN_020F32E8

	arm_func_start FUN_020F32FC
FUN_020F32FC: @ 0x020F32FC
	str lr, [sp, #-4]!
	mov r1, #0
	mov r0, #7
	svc #0x123456
	pop {pc}
	arm_func_end FUN_020F32FC

	arm_func_start FUN_020F3310
FUN_020F3310: @ 0x020F3310
	mov r1, #0
	mov r0, #0x18
	svc #0x123456
	mov pc, lr
	arm_func_end FUN_020F3310

	arm_func_start FUN_020F3320
FUN_020F3320: @ 0x020F3320
	push {r3, r4, r5, r6, r7, lr}
	mov r6, r2
	ldr r5, [r6]
	mov r7, r1
	cmp r5, #0
	mov r4, #0
	bls _020F3368
_020F333C:
	bl FUN_020F32FC
	and r1, r0, #0xff
	cmp r1, #0xd
	strb r0, [r7, r4]
	cmpne r1, #0xa
	addeq r0, r4, #1
	streq r0, [r6]
	beq _020F3368
	add r4, r4, #1
	cmp r4, r5
	blo _020F333C
_020F3368:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020F3320

	arm_func_start FUN_020F3370
FUN_020F3370: @ 0x020F3370
	push {r4, r5, r6, lr}
	ldr r5, [r2]
	mov r6, r1
	cmp r5, #0
	mov r4, #0
	bls _020F339C
_020F3388:
	add r0, r6, r4
	bl FUN_020F32E8
	add r4, r4, #1
	cmp r4, r5
	blo _020F3388
_020F339C:
	mov r0, #0
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020F3370

	arm_func_start FUN_020F33A4
FUN_020F33A4: @ 0x020F33A4
	mov r0, #0
	bx lr
	arm_func_end FUN_020F33A4

	arm_func_start FUN_020F33AC
FUN_020F33AC: @ 0x020F33AC
	push {r4, lr}
	ldrsb r2, [r0]
	tst r2, #1
	bne _020F33CC
	asr r2, r2, #1
	str r2, [r1]
	add r0, r0, #1
	pop {r4, pc}
_020F33CC:
	tst r2, #2
	ldrb r4, [r0, #1]
	bne _020F33EC
	asr r2, r2, #2
	orr r2, r4, r2, lsl #8
	str r2, [r1]
	add r0, r0, #2
	pop {r4, pc}
_020F33EC:
	tst r2, #4
	ldrb lr, [r0, #2]
	bne _020F3414
	asr r3, r2, #3
	lsl r2, r4, #8
	orr r2, r2, r3, lsl #16
	orr r2, lr, r2
	str r2, [r1]
	add r0, r0, #3
	pop {r4, pc}
_020F3414:
	ldrb ip, [r0, #3]
	asr r3, r2, #3
	lsl r2, r4, #0x10
	orr r2, r2, r3, lsl #24
	orr r2, r2, lr, lsl #8
	orr r2, ip, r2
	str r2, [r1]
	add r0, r0, #4
	pop {r4, pc}
	arm_func_end FUN_020F33AC

	arm_func_start FUN_020F3438
FUN_020F3438: @ 0x020F3438
	push {r4, lr}
	ldrb r2, [r0]
	tst r2, #1
	bne _020F3458
	lsr r2, r2, #1
	str r2, [r1]
	add r0, r0, #1
	pop {r4, pc}
_020F3458:
	tst r2, #2
	ldrb r4, [r0, #1]
	bne _020F3478
	lsr r2, r2, #2
	orr r2, r4, r2, lsl #8
	str r2, [r1]
	add r0, r0, #2
	pop {r4, pc}
_020F3478:
	tst r2, #4
	ldrb lr, [r0, #2]
	bne _020F34A0
	lsr r3, r2, #3
	lsl r2, r4, #8
	orr r2, r2, r3, lsl #16
	orr r2, lr, r2
	str r2, [r1]
	add r0, r0, #3
	pop {r4, pc}
_020F34A0:
	ldrb ip, [r0, #3]
	lsr r3, r2, #3
	lsl r2, r4, #0x10
	orr r2, r2, r3, lsl #24
	orr r2, r2, lr, lsl #8
	orr r2, ip, r2
	str r2, [r1]
	add r0, r0, #4
	pop {r4, pc}
	arm_func_end FUN_020F3438

	arm_func_start FUN_020F34C4
FUN_020F34C4: @ 0x020F34C4
	push {r4, r5, r6, lr}
	subs r6, r1, #1
	mov r5, #0
	bmi _020F3520
	mov r1, #0xc
_020F34D8:
	add r3, r5, r6
	asr r4, r3, #1
	mul r3, r4, r1
	ldr ip, [r0, r3]
	add lr, r0, r3
	cmp r2, ip
	sublo r6, r4, #1
	blo _020F3518
	ldr r3, [lr, #4]
	bic r3, r3, #1
	add r3, ip, r3
	cmp r2, r3
	addhi r5, r4, #1
	bhi _020F3518
	mov r0, lr
	pop {r4, r5, r6, pc}
_020F3518:
	cmp r5, r6
	ble _020F34D8
_020F3520:
	mov r0, #0
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020F34C4

	arm_func_start FUN_020F3528
FUN_020F3528: @ 0x020F3528
	push {r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #0xc
	mov r4, r0
	mov sb, r1
	mov r2, #0
	str r2, [sb, #4]
	mov r0, sb
	mov r1, r4
	str r2, [sb, #8]
	bl FUN_020F4E64
	cmp r0, #0
	addeq sp, sp, #0xc
	popeq {r4, r5, r6, r7, r8, sb, pc}
	ldr r0, [sb, #0xc]
	ldr r1, [sb, #0x10]
	ldr r3, _020F362C @ =0x2AAAAAAB
	sub r5, r1, r0
	smull r2, r1, r3, r5
	lsr r3, r5, #0x1f
	mov r2, r4
	add r1, r3, r1, asr #1
	bl FUN_020F34C4
	cmp r0, #0
	addeq sp, sp, #0xc
	popeq {r4, r5, r6, r7, r8, sb, pc}
	ldr r1, [r0, #4]
	tst r1, #1
	addne r1, r0, #8
	ldreq r1, [r0, #8]
	str r1, [sb, #4]
	ldr r1, [r0]
	str r1, [sb]
	ldr r1, [r0]
	ldr r0, [sb, #4]
	sub r7, r4, r1
	bl FUN_020F4E84
	mov r8, #0
	add r5, sp, #4
	add r4, sp, #0
	add r6, sp, #8
_020F35C8:
	mov r1, r6
	bl FUN_020F3438
	ldr r1, [sp, #8]
	cmp r1, #0
	addeq sp, sp, #0xc
	popeq {r4, r5, r6, r7, r8, sb, pc}
	mov r1, r5
	bl FUN_020F3438
	mov r1, r4
	bl FUN_020F3438
	ldr r1, [sp, #8]
	add r2, r8, r1
	cmp r7, r2
	addlo sp, sp, #0xc
	poplo {r4, r5, r6, r7, r8, sb, pc}
	ldr r1, [sp, #4]
	add r8, r2, r1
	cmp r7, r8
	bhi _020F35C8
	ldr r1, [sb, #4]
	ldr r0, [sp]
	add r0, r1, r0
	str r0, [sb, #8]
	add sp, sp, #0xc
	pop {r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0
_020F362C: .4byte 0x2AAAAAAB
	arm_func_end FUN_020F3528

	arm_func_start FUN_020F3630
FUN_020F3630: @ 0x020F3630
	ldr r0, [r0, #8]
	cmp r0, #0
	ldrbne r0, [r0]
	andne r0, r0, #0x1f
	moveq r0, #0
	and r0, r0, #0xff
	bx lr
	arm_func_end FUN_020F3630

	arm_func_start FUN_020F364C
FUN_020F364C: @ 0x020F364C
	push {r3, r4, r5, lr}
	sub sp, sp, #0xa0
	mov r4, r0
_020F3658:
	ldr r2, [r4, #8]
	cmp r2, #0
	beq _020F3670
	ldrb r0, [r2]
	tst r0, #0x80
	beq _020F36B4
_020F3670:
	mov r1, r4
	add r0, r4, #0x18
	bl FUN_020F4D68
	mov r1, r4
	bl FUN_020F3528
	ldr r0, [r4, #4]
	cmp r0, #0
	addeq sp, sp, #0xa0
	moveq r0, #0xff
	popeq {r3, r4, r5, pc}
	mov r1, r4
	add r0, r4, #0x18
	bl FUN_020F4DC4
	ldr r0, [r4, #8]
	cmp r0, #0
	beq _020F3658
	b _020F3984
_020F36B4:
	and r0, r0, #0x1f
	cmp r0, #0x13
	addls pc, pc, r0, lsl #2
	b _020F3978
_020F36C4: @ jump table
	b _020F3978 @ case 0
	b _020F3978 @ case 1
	b _020F3714 @ case 2
	b _020F372C @ case 3
	b _020F374C @ case 4
	b _020F3764 @ case 5
	b _020F378C @ case 6
	b _020F37AC @ case 7
	b _020F37CC @ case 8
	b _020F37F4 @ case 9
	b _020F3824 @ case 10
	b _020F383C @ case 11
	b _020F385C @ case 12
	b _020F3878 @ case 13
	b _020F3978 @ case 14
	b _020F388C @ case 15
	b _020F38B8 @ case 16
	b _020F3904 @ case 17
	b _020F3938 @ case 18
	b _020F3964 @ case 19
_020F3714:
	add r1, sp, #0x9c
	add r0, r2, #1
	bl FUN_020F33AC
	add r0, r0, #4
	str r0, [r4, #8]
	b _020F3984
_020F372C:
	add r1, sp, #0x94
	add r0, r2, #1
	bl FUN_020F33AC
	add r1, sp, #0x98
	bl FUN_020F33AC
	add r0, r0, #4
	str r0, [r4, #8]
	b _020F3984
_020F374C:
	add r1, sp, #0x90
	add r0, r2, #1
	bl FUN_020F33AC
	add r0, r0, #4
	str r0, [r4, #8]
	b _020F3984
_020F3764:
	add r1, sp, #0x84
	add r0, r2, #1
	bl FUN_020F33AC
	add r1, sp, #0x88
	bl FUN_020F3438
	add r1, sp, #0x8c
	bl FUN_020F3438
	add r0, r0, #4
	str r0, [r4, #8]
	b _020F3984
_020F378C:
	add r1, sp, #0x7c
	add r0, r2, #1
	bl FUN_020F33AC
	add r1, sp, #0x80
	bl FUN_020F33AC
	add r0, r0, #4
	str r0, [r4, #8]
	b _020F3984
_020F37AC:
	add r1, sp, #0x74
	add r0, r2, #1
	bl FUN_020F33AC
	add r1, sp, #0x78
	bl FUN_020F33AC
	add r0, r0, #4
	str r0, [r4, #8]
	b _020F3984
_020F37CC:
	add r1, sp, #0x68
	add r0, r2, #1
	bl FUN_020F33AC
	add r1, sp, #0x6c
	bl FUN_020F33AC
	add r1, sp, #0x70
	bl FUN_020F33AC
	add r0, r0, #4
	str r0, [r4, #8]
	b _020F3984
_020F37F4:
	add r1, sp, #0x58
	add r0, r2, #1
	bl FUN_020F33AC
	add r1, sp, #0x5c
	bl FUN_020F33AC
	add r1, sp, #0x60
	bl FUN_020F3438
	add r1, sp, #0x64
	bl FUN_020F3438
	add r0, r0, #4
	str r0, [r4, #8]
	b _020F3984
_020F3824:
	add r1, sp, #0x54
	add r0, r2, #1
	bl FUN_020F33AC
	add r0, r0, #4
	str r0, [r4, #8]
	b _020F3984
_020F383C:
	add r1, sp, #0x4c
	add r0, r2, #1
	bl FUN_020F33AC
	add r1, sp, #0x50
	bl FUN_020F33AC
	add r0, r0, #4
	str r0, [r4, #8]
	b _020F3984
_020F385C:
	add r1, sp, #0x44
	add r0, r2, #5
	bl FUN_020F3438
	add r1, sp, #0x48
	bl FUN_020F33AC
	str r0, [r4, #8]
	b _020F3984
_020F3878:
	add r1, sp, #0x40
	add r0, r2, #1
	bl FUN_020F33AC
	str r0, [r4, #8]
	b _020F3984
_020F388C:
	add r1, sp, #0x34
	add r0, r2, #1
	bl FUN_020F3438
	add r1, sp, #0x38
	bl FUN_020F3438
	add r1, sp, #0x3c
	bl FUN_020F33AC
	ldr r1, [sp, #0x34]
	add r0, r0, r1, lsl #2
	str r0, [r4, #8]
	b _020F3984
_020F38B8:
	add r1, sp, #0x24
	add r0, r2, #1
	bl FUN_020F33AC
	add r1, sp, #0x28
	bl FUN_020F33AC
	ldrb r2, [r0]
	ldrb r1, [r0, #1]
	ldrb r3, [r0, #2]
	ldrb r5, [r0, #3]
	orr r1, r2, r1, lsl #8
	orr r1, r1, r3, lsl #16
	orr r2, r1, r5, lsl #24
	add r1, sp, #0x2c
	add r0, r0, #4
	str r2, [sp, #0x30]
	bl FUN_020F33AC
	add r0, r0, #4
	str r0, [r4, #8]
	b _020F3984
_020F3904:
	add r1, sp, #0x14
	add r0, r2, #1
	bl FUN_020F33AC
	add r1, sp, #0x1c
	bl FUN_020F33AC
	add r1, sp, #0x18
	add r0, r0, #1
	bl FUN_020F33AC
	add r1, sp, #0x20
	bl FUN_020F33AC
	add r0, r0, #4
	str r0, [r4, #8]
	b _020F3984
_020F3938:
	add r1, sp, #8
	add r0, r2, #1
	bl FUN_020F33AC
	add r1, sp, #0xc
	add r0, r0, #1
	bl FUN_020F33AC
	add r1, sp, #0x10
	bl FUN_020F3438
	add r0, r0, #4
	str r0, [r4, #8]
	b _020F3984
_020F3964:
	add r1, sp, #4
	add r0, r2, #1
	bl FUN_020F33AC
	str r0, [r4, #8]
	b _020F3984
_020F3978:
	add sp, sp, #0xa0
	mov r0, #0xff
	pop {r3, r4, r5, pc}
_020F3984:
	ldr r2, [r4, #8]
	ldrb r0, [r2]
	and r0, r0, #0x1f
	cmp r0, #1
	addne sp, sp, #0xa0
	popne {r3, r4, r5, pc}
	add r5, sp, #0
_020F39A0:
	mov r1, r5
	add r0, r2, #1
	bl FUN_020F33AC
	ldr r1, [r4, #8]
	ldr r0, [sp]
	add r2, r1, r0
	str r2, [r4, #8]
	ldrb r0, [r2]
	and r0, r0, #0x1f
	cmp r0, #1
	beq _020F39A0
	add sp, sp, #0xa0
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020F364C

	arm_func_start FUN_020F39D4
FUN_020F39D4: @ 0x020F39D4
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0xa4
	mov sb, r0
	mov r8, r1
	str r2, [sp]
_020F39E8:
	ldr r2, [r8, #8]
	cmp r2, #0
	bne _020F3A30
	mov r0, sb
	mov r1, r8
	bl FUN_020F4D68
	mov r1, r8
	bl FUN_020F3528
	ldr r0, [r8, #4]
	cmp r0, #0
	bne _020F3A18
	bl FUN_020F4B88
_020F3A18:
	mov r0, sb
	mov r1, r8
	bl FUN_020F4DC4
	ldr r2, [r8, #8]
	cmp r2, #0
	beq _020F39E8
_020F3A30:
	ldrb r7, [r2]
	and r0, r7, #0x1f
	cmp r0, #0x13
	addls pc, pc, r0, lsl #2
	b _020F4268
_020F3A44: @ jump table
	b _020F4268 @ case 0
	b _020F3A94 @ case 1
	b _020F3AB4 @ case 2
	b _020F3B00 @ case 3
	b _020F3B80 @ case 4
	b _020F3BE0 @ case 5
	b _020F3C64 @ case 6
	b _020F3CD4 @ case 7
	b _020F3D44 @ case 8
	b _020F3DEC @ case 9
	b _020F3EA0 @ case 10
	b _020F3EFC @ case 11
	b _020F3F8C @ case 12
	b _020F3FB8 @ case 13
	b _020F4268 @ case 14
	b _020F4004 @ case 15
	b _020F4040 @ case 16
	b _020F40E4 @ case 17
	b _020F4190 @ case 18
	b _020F4254 @ case 19
_020F3A94:
	add r1, sp, #0xa0
	add r0, r2, #1
	bl FUN_020F33AC
	ldr r1, [r8, #8]
	ldr r0, [sp, #0xa0]
	add r0, r1, r0
	str r0, [r8, #8]
	b _020F426C
_020F3AB4:
	add r1, sp, #0x9c
	add r0, r2, #1
	bl FUN_020F33AC
	mov r4, r0
	ldrb r1, [r4]
	ldrb r0, [r4, #1]
	ldrb r2, [r4, #2]
	ldrb r3, [r4, #3]
	orr r0, r1, r0, lsl #8
	orr r0, r0, r2, lsl #16
	ldr r5, [sb, #0x18]
	ldr r1, [sp, #0x9c]
	orr r2, r0, r3, lsl #24
	add r0, r5, r1
	mvn r1, #0
	blx r2
	add r0, r4, #4
	str r0, [r8, #8]
	b _020F426C
_020F3B00:
	add r1, sp, #0x94
	add r0, r2, #1
	and r4, r7, #0x40
	bl FUN_020F33AC
	add r1, sp, #0x98
	bl FUN_020F33AC
	ldrb r2, [r0]
	ldrb r1, [r0, #1]
	ldrb r3, [r0, #2]
	ldrb r5, [r0, #3]
	orr r1, r2, r1, lsl #8
	orr r1, r1, r3, lsl #16
	cmp r4, #0
	orr r2, r1, r5, lsl #24
	add r4, r0, #4
	ldreq r1, [sb, #0x18]
	ldreq r0, [sp, #0x94]
	ldrbeq r0, [r1, r0]
	beq _020F3B5C
	ldr r0, [sp, #0x94]
	add r0, sb, r0, lsl #2
	ldr r0, [r0, #0x1c]
	and r0, r0, #0xff
_020F3B5C:
	cmp r0, #0
	beq _020F3B78
	ldr r3, [sb, #0x18]
	ldr r0, [sp, #0x98]
	mvn r1, #0
	add r0, r3, r0
	blx r2
_020F3B78:
	str r4, [r8, #8]
	b _020F426C
_020F3B80:
	add r1, sp, #0x90
	add r0, r2, #1
	and r4, r7, #0x20
	bl FUN_020F33AC
	ldrb r2, [r0]
	ldrb r1, [r0, #1]
	ldrb r3, [r0, #2]
	ldrb r5, [r0, #3]
	orr r1, r2, r1, lsl #8
	orr r1, r1, r3, lsl #16
	cmp r4, #0
	orr r2, r1, r5, lsl #24
	add r4, r0, #4
	ldreq r1, [sb, #0x18]
	ldreq r0, [sp, #0x90]
	ldreq r0, [r1, r0]
	beq _020F3BD0
	ldr r0, [sp, #0x90]
	add r0, sb, r0, lsl #2
	ldr r0, [r0, #0x1c]
_020F3BD0:
	mvn r1, #0
	blx r2
	str r4, [r8, #8]
	b _020F426C
_020F3BE0:
	add r1, sp, #0x84
	add r0, r2, #1
	bl FUN_020F33AC
	add r1, sp, #0x88
	bl FUN_020F3438
	add r1, sp, #0x8c
	bl FUN_020F3438
	ldr r3, [sb, #0x18]
	ldr r2, [sp, #0x84]
	ldr r6, [sp, #0x88]
	ldrb r5, [r0]
	ldrb r4, [r0, #1]
	ldr r1, [sp, #0x8c]
	add r2, r3, r2
	ldrb sl, [r0, #2]
	orr r3, r5, r4, lsl #8
	mla r4, r6, r1, r2
	ldrb r2, [r0, #3]
	orr r1, r3, sl, lsl #16
	cmp r6, #0
	orr r5, r1, r2, lsl #24
	add fp, r0, #4
	beq _020F3C5C
	mvn sl, #0
_020F3C40:
	ldr r0, [sp, #0x8c]
	mov r1, sl
	sub r4, r4, r0
	mov r0, r4
	blx r5
	subs r6, r6, #1
	bne _020F3C40
_020F3C5C:
	str fp, [r8, #8]
	b _020F426C
_020F3C64:
	add r1, sp, #0x7c
	add r0, r2, #1
	and r4, r7, #0x20
	bl FUN_020F33AC
	add r1, sp, #0x80
	bl FUN_020F33AC
	ldrb r2, [r0]
	ldrb r1, [r0, #1]
	ldrb r3, [r0, #2]
	ldrb r5, [r0, #3]
	orr r1, r2, r1, lsl #8
	orr r1, r1, r3, lsl #16
	cmp r4, #0
	orr r2, r1, r5, lsl #24
	add r4, r0, #4
	ldreq r1, [sb, #0x18]
	ldreq r0, [sp, #0x7c]
	ldreq r3, [r1, r0]
	beq _020F3CBC
	ldr r0, [sp, #0x7c]
	add r0, sb, r0, lsl #2
	ldr r3, [r0, #0x1c]
_020F3CBC:
	ldr r0, [sp, #0x80]
	mov r1, #0
	add r0, r3, r0
	blx r2
	str r4, [r8, #8]
	b _020F426C
_020F3CD4:
	add r1, sp, #0x74
	add r0, r2, #1
	and r4, r7, #0x20
	bl FUN_020F33AC
	add r1, sp, #0x78
	bl FUN_020F33AC
	ldrb r2, [r0]
	ldrb r1, [r0, #1]
	ldrb r3, [r0, #2]
	ldrb r5, [r0, #3]
	orr r1, r2, r1, lsl #8
	orr r1, r1, r3, lsl #16
	cmp r4, #0
	orr r2, r1, r5, lsl #24
	add r4, r0, #4
	ldreq r1, [sb, #0x18]
	ldreq r0, [sp, #0x74]
	ldreq r3, [r1, r0]
	beq _020F3D2C
	ldr r0, [sp, #0x74]
	add r0, sb, r0, lsl #2
	ldr r3, [r0, #0x1c]
_020F3D2C:
	ldr r0, [sp, #0x78]
	mvn r1, #0
	add r0, r3, r0
	blx r2
	str r4, [r8, #8]
	b _020F426C
_020F3D44:
	add r1, sp, #0x68
	add r0, r2, #1
	and r4, r7, #0x20
	bl FUN_020F33AC
	add r1, sp, #0x6c
	bl FUN_020F33AC
	add r1, sp, #0x70
	bl FUN_020F33AC
	ldrb r2, [r0]
	ldrb r1, [r0, #1]
	ldrb r3, [r0, #2]
	ldrb r5, [r0, #3]
	orr r1, r2, r1, lsl #8
	orr r1, r1, r3, lsl #16
	orr r2, r1, r5, lsl #24
	tst r7, #0x40
	add r5, r0, #4
	ldreq r1, [sb, #0x18]
	ldreq r0, [sp, #0x68]
	ldrsheq r0, [r1, r0]
	beq _020F3DAC
	ldr r0, [sp, #0x68]
	add r0, sb, r0, lsl #2
	ldr r0, [r0, #0x1c]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
_020F3DAC:
	cmp r0, #0
	beq _020F3DE4
	cmp r4, #0
	ldreq r1, [sb, #0x18]
	ldreq r0, [sp, #0x6c]
	ldreq r3, [r1, r0]
	beq _020F3DD4
	ldr r0, [sp, #0x6c]
	add r0, sb, r0, lsl #2
	ldr r3, [r0, #0x1c]
_020F3DD4:
	ldr r0, [sp, #0x70]
	mvn r1, #0
	add r0, r3, r0
	blx r2
_020F3DE4:
	str r5, [r8, #8]
	b _020F426C
_020F3DEC:
	add r1, sp, #0x58
	add r0, r2, #1
	and r4, r7, #0x20
	bl FUN_020F33AC
	add r1, sp, #0x5c
	bl FUN_020F33AC
	add r1, sp, #0x60
	bl FUN_020F3438
	add r1, sp, #0x64
	bl FUN_020F3438
	ldrb r2, [r0]
	ldrb r1, [r0, #1]
	ldrb r3, [r0, #2]
	ldrb r5, [r0, #3]
	orr r1, r2, r1, lsl #8
	orr r1, r1, r3, lsl #16
	cmp r4, #0
	orr r5, r1, r5, lsl #24
	add fp, r0, #4
	beq _020F3E50
	ldr r1, [sp, #0x58]
	ldr r0, [sp, #0x5c]
	add r1, sb, r1, lsl #2
	ldr r1, [r1, #0x1c]
	b _020F3E60
_020F3E50:
	ldr r2, [sb, #0x18]
	ldr r1, [sp, #0x58]
	ldr r0, [sp, #0x5c]
	ldr r1, [r2, r1]
_020F3E60:
	add r4, r1, r0
	ldr r6, [sp, #0x60]
	ldr r0, [sp, #0x64]
	cmp r6, #0
	mla r4, r6, r0, r4
	beq _020F3E98
	mvn sl, #0
_020F3E7C:
	ldr r0, [sp, #0x64]
	mov r1, sl
	sub r4, r4, r0
	mov r0, r4
	blx r5
	subs r6, r6, #1
	bne _020F3E7C
_020F3E98:
	str fp, [r8, #8]
	b _020F426C
_020F3EA0:
	add r1, sp, #0x54
	add r0, r2, #1
	and r4, r7, #0x20
	bl FUN_020F33AC
	ldrb r2, [r0]
	ldrb r1, [r0, #1]
	ldrb r3, [r0, #2]
	ldrb r5, [r0, #3]
	orr r1, r2, r1, lsl #8
	orr r1, r1, r3, lsl #16
	cmp r4, #0
	orr r2, r1, r5, lsl #24
	add r4, r0, #4
	ldreq r1, [sb, #0x18]
	ldreq r0, [sp, #0x54]
	ldreq r0, [r1, r0]
	beq _020F3EF0
	ldr r0, [sp, #0x54]
	add r0, sb, r0, lsl #2
	ldr r0, [r0, #0x1c]
_020F3EF0:
	blx r2
	str r4, [r8, #8]
	b _020F426C
_020F3EFC:
	add r1, sp, #0x4c
	add r0, r2, #1
	and r4, r7, #0x20
	bl FUN_020F33AC
	add r1, sp, #0x50
	bl FUN_020F33AC
	ldrb r2, [r0]
	ldrb r1, [r0, #1]
	ldrb r3, [r0, #2]
	ldrb r5, [r0, #3]
	orr r1, r2, r1, lsl #8
	orr r1, r1, r3, lsl #16
	tst r7, #0x40
	orr r1, r1, r5, lsl #24
	add r5, r0, #4
	ldreq r2, [sb, #0x18]
	ldreq r0, [sp, #0x4c]
	ldrbeq r0, [r2, r0]
	beq _020F3F58
	ldr r0, [sp, #0x4c]
	add r0, sb, r0, lsl #2
	ldr r0, [r0, #0x1c]
	and r0, r0, #0xff
_020F3F58:
	cmp r0, #0
	beq _020F3F84
	cmp r4, #0
	ldreq r2, [sb, #0x18]
	ldreq r0, [sp, #0x50]
	ldreq r0, [r2, r0]
	beq _020F3F80
	ldr r0, [sp, #0x50]
	add r0, sb, r0, lsl #2
	ldr r0, [r0, #0x1c]
_020F3F80:
	blx r1
_020F3F84:
	str r5, [r8, #8]
	b _020F426C
_020F3F8C:
	ldr r0, [sp]
	cmp r0, r2
	addeq sp, sp, #0xa4
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	add r1, sp, #0x44
	add r0, r2, #5
	bl FUN_020F3438
	add r1, sp, #0x48
	bl FUN_020F33AC
	str r0, [r8, #8]
	b _020F426C
_020F3FB8:
	add r1, sp, #0x40
	add r0, r2, #1
	bl FUN_020F33AC
	ldr r2, [sb, #0x18]
	ldr r1, [sp, #0x40]
	mov r4, r0
	add r0, r2, r1
	ldr r2, [r0, #8]
	cmp r2, #0
	beq _020F3FFC
	ldr r0, [r0]
	ldr r1, [sb, #4]
	cmp r1, r0
	streq r2, [sb, #8]
	beq _020F3FFC
	mvn r1, #0
	blx r2
_020F3FFC:
	str r4, [r8, #8]
	b _020F426C
_020F4004:
	ldr r0, [sp]
	cmp r0, r2
	addeq sp, sp, #0xa4
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	add r1, sp, #0x34
	add r0, r2, #1
	bl FUN_020F3438
	add r1, sp, #0x38
	bl FUN_020F3438
	add r1, sp, #0x3c
	bl FUN_020F33AC
	ldr r1, [sp, #0x34]
	add r0, r0, r1, lsl #2
	str r0, [r8, #8]
	b _020F426C
_020F4040:
	add r1, sp, #0x24
	add r0, r2, #1
	and r4, r7, #0x20
	bl FUN_020F33AC
	add r1, sp, #0x28
	bl FUN_020F33AC
	ldrb r2, [r0]
	ldrb r1, [r0, #1]
	ldrb r3, [r0, #2]
	ldrb r5, [r0, #3]
	orr r1, r2, r1, lsl #8
	orr r1, r1, r3, lsl #16
	orr r2, r1, r5, lsl #24
	add r1, sp, #0x2c
	add r0, r0, #4
	str r2, [sp, #0x30]
	bl FUN_020F33AC
	ldrb r2, [r0]
	ldrb r1, [r0, #1]
	ldrb r3, [r0, #2]
	ldrb r5, [r0, #3]
	orr r1, r2, r1, lsl #8
	orr r1, r1, r3, lsl #16
	cmp r4, #0
	orr r2, r1, r5, lsl #24
	add r4, r0, #4
	ldreq r1, [sb, #0x18]
	ldreq r0, [sp, #0x24]
	ldreq r5, [r1, r0]
	beq _020F40C4
	ldr r0, [sp, #0x24]
	add r0, sb, r0, lsl #2
	ldr r5, [r0, #0x1c]
_020F40C4:
	ldr r0, [sp, #0x28]
	ldr r3, [sp, #0x30]
	ldr r1, [sp, #0x2c]
	add r0, r5, r0
	add r1, r3, r1
	blx r2
	str r4, [r8, #8]
	b _020F426C
_020F40E4:
	add r1, sp, #0x14
	add r0, r2, #1
	and r5, r7, #0x20
	bl FUN_020F33AC
	add r1, sp, #0x1c
	bl FUN_020F33AC
	ldrb r2, [r0], #1
	add r1, sp, #0x18
	and r4, r2, #0x20
	bl FUN_020F33AC
	add r1, sp, #0x20
	bl FUN_020F33AC
	ldrb r2, [r0]
	ldrb r1, [r0, #1]
	ldrb r3, [r0, #2]
	ldrb r6, [r0, #3]
	orr r1, r2, r1, lsl #8
	orr r1, r1, r3, lsl #16
	cmp r5, #0
	orr r2, r1, r6, lsl #24
	add r5, r0, #4
	ldreq r1, [sb, #0x18]
	ldreq r0, [sp, #0x14]
	ldreq r0, [r1, r0]
	beq _020F4154
	ldr r0, [sp, #0x14]
	add r0, sb, r0, lsl #2
	ldr r0, [r0, #0x1c]
_020F4154:
	cmp r4, #0
	ldreq r3, [sb, #0x18]
	ldreq r1, [sp, #0x18]
	ldreq r4, [r3, r1]
	beq _020F4174
	ldr r1, [sp, #0x18]
	add r1, sb, r1, lsl #2
	ldr r4, [r1, #0x1c]
_020F4174:
	ldr r3, [sp, #0x1c]
	ldr r1, [sp, #0x20]
	add r0, r0, r3
	add r1, r4, r1
	blx r2
	str r5, [r8, #8]
	b _020F426C
_020F4190:
	add r1, sp, #8
	add r0, r2, #1
	and r4, r7, #0x20
	bl FUN_020F33AC
	ldrb r2, [r0], #1
	add r1, sp, #0xc
	and r6, r2, #0x20
	bl FUN_020F33AC
	add r1, sp, #0x10
	bl FUN_020F3438
	ldrb r2, [r0]
	ldrb r1, [r0, #1]
	ldrb r3, [r0, #2]
	ldrb r5, [r0, #3]
	orr r1, r2, r1, lsl #8
	orr r1, r1, r3, lsl #16
	cmp r4, #0
	orr r5, r1, r5, lsl #24
	add fp, r0, #4
	ldreq r1, [sb, #0x18]
	ldreq r0, [sp, #8]
	ldreq r4, [r1, r0]
	beq _020F41F8
	ldr r0, [sp, #8]
	add r0, sb, r0, lsl #2
	ldr r4, [r0, #0x1c]
_020F41F8:
	cmp r6, #0
	ldreq r1, [sb, #0x18]
	ldreq r0, [sp, #0xc]
	ldreq r0, [r1, r0]
	beq _020F4218
	ldr r0, [sp, #0xc]
	add r0, sb, r0, lsl #2
	ldr r0, [r0, #0x1c]
_020F4218:
	ldr r1, [sp, #0x10]
	add r4, r4, r0
	bl FUN_020F2BA4
	movs r6, r0
	beq _020F424C
	mvn sl, #0
_020F4230:
	ldr r0, [sp, #0x10]
	mov r1, sl
	sub r4, r4, r0
	mov r0, r4
	blx r5
	subs r6, r6, #1
	bne _020F4230
_020F424C:
	str fp, [r8, #8]
	b _020F426C
_020F4254:
	add r1, sp, #4
	add r0, r2, #1
	bl FUN_020F33AC
	str r0, [r8, #8]
	b _020F426C
_020F4268:
	bl FUN_020F4B88
_020F426C:
	tst r7, #0x80
	movne r0, #0
	strne r0, [r8, #8]
	b _020F39E8
	arm_func_end FUN_020F39D4

	arm_func_start FUN_020F427C
FUN_020F427C: @ 0x020F427C
	add sp, sp, #0xa4
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_020F427C

	arm_func_start FUN_020F4284
FUN_020F4284: @ 0x020F4284
	push {r4, r5, lr}
	sub sp, sp, #0x8c
	ldr r2, [r1]
	mov r4, r0
	str r2, [sp, #4]
	ldr r0, [r1, #4]
	add ip, sp, #0x38
	str r0, [sp, #8]
	ldr r0, [r1, #8]
	add lr, r4, #0x1c
	str r0, [sp, #0xc]
	ldr r0, [r1, #0xc]
	mov r5, #5
	str r0, [sp, #0x10]
	ldr r0, [r1, #0x10]
	str r0, [sp, #0x14]
	ldr r0, [r1, #0x14]
	str r0, [sp, #0x18]
	ldr r0, [r4]
	str r0, [sp, #0x1c]
	ldr r0, [r4, #4]
	str r0, [sp, #0x20]
	ldr r0, [r4, #8]
	str r0, [sp, #0x24]
	ldr r0, [r4, #0xc]
	str r0, [sp, #0x28]
	ldr r0, [r4, #0x10]
	str r0, [sp, #0x2c]
	ldr r0, [r4, #0x14]
	str r0, [sp, #0x30]
	ldr r0, [r4, #0x18]
	str r0, [sp, #0x34]
_020F4304:
	ldm lr!, {r0, r1, r2, r3}
	stm ip!, {r0, r1, r2, r3}
	subs r5, r5, #1
	bne _020F4304
	ldr r1, [lr]
	add r0, sp, #4
	str r1, [ip]
	bl FUN_020F3630
	add r5, sp, #4
_020F4328:
	cmp r0, #0x12
	addls pc, pc, r0, lsl #2
	b _020F4380
_020F4334: @ jump table
	b _020F438C @ case 0
	b _020F4380 @ case 1
	b _020F438C @ case 2
	b _020F438C @ case 3
	b _020F438C @ case 4
	b _020F438C @ case 5
	b _020F438C @ case 6
	b _020F438C @ case 7
	b _020F438C @ case 8
	b _020F438C @ case 9
	b _020F438C @ case 10
	b _020F438C @ case 11
	b _020F438C @ case 12
	b _020F4398 @ case 13
	b _020F4380 @ case 14
	b _020F438C @ case 15
	b _020F438C @ case 16
	b _020F438C @ case 17
	b _020F438C @ case 18
_020F4380:
	add sp, sp, #0x8c
	mov r0, #0
	pop {r4, r5, pc}
_020F438C:
	mov r0, r5
	bl FUN_020F364C
	b _020F4328
_020F4398:
	ldr r0, [sp, #0xc]
	add r1, sp, #0
	add r0, r0, #1
	bl FUN_020F33AC
	ldr ip, [sp, #0x34]
	ldr r3, [sp]
	mov r1, #0
	add r0, ip, r3
	ldr r2, [r0, #4]
	str r2, [r4]
	ldr r2, [ip, r3]
	str r2, [r4, #4]
	str r1, [r4, #8]
	str r0, [r4, #0xc]
	add sp, sp, #0x8c
	pop {r4, r5, pc}
	arm_func_end FUN_020F4284

	arm_func_start FUN_020F43D8
FUN_020F43D8: @ 0x020F43D8
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #8
	mov r6, r1
	ldr r1, [r6]
	mov r7, r0
	cmp r1, #0
	ldr r4, [r6, #0xc]
	mov r5, #0
	bls _020F4450
	add r8, sp, #0
_020F4400:
	ldrb r1, [r4]
	ldrb r0, [r4, #1]
	ldrb r2, [r4, #2]
	ldrb r3, [r4, #3]
	orr r0, r1, r0, lsl #8
	orr r0, r0, r2, lsl #16
	orr r1, r0, r3, lsl #24
	mov r0, r7
	mov r2, r8
	str r1, [sp, #4]
	bl FUN_020F4BB8
	cmp r0, #0
	addne sp, sp, #8
	movne r0, #1
	popne {r4, r5, r6, r7, r8, pc}
	ldr r0, [r6]
	add r5, r5, #1
	cmp r5, r0
	add r4, r4, #4
	blo _020F4400
_020F4450:
	mov r0, #0
	add sp, sp, #8
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020F43D8

	arm_func_start FUN_020F445C
FUN_020F445C: @ 0x020F445C
	push {r4, fp, lr}
	sub sp, sp, #0x2c
	mov fp, sp
	str sp, [fp, #0x18]
	ldr r4, [r0, #0x14]
	bl FUN_020F4BA0
	b _020F44E8
	arm_func_end FUN_020F445C

	arm_func_start FUN_020F4478
FUN_020F4478: @ 0x020F4478
	add r1, fp, #0x1c
	add r0, r4, #1
	bl FUN_020F3438
	add r1, fp, #0x20
	bl FUN_020F3438
	add r1, fp, #0x24
	bl FUN_020F33AC
	str r0, [fp, #0x28]
	ldr r0, [fp, #8]
	add r1, fp, #0x1c
	bl FUN_020F43D8
	cmp r0, #0
	beq _020F44B0
	bl FUN_020F4F2C
_020F44B0:
	ldr r0, _020F44F4 @ =_021116F4
	add r1, fp, #0x1c
	bl FUN_020F43D8
	cmp r0, #0
	beq _020F44DC
	ldr r3, _020F44F8 @ =_021116E8
	ldr r0, _020F44FC @ =_0211170C
	ldr r2, _020F4500 @ =FUN_020F4504
	add r1, fp, #0
	str r3, [fp]
	bl FUN_020F4EE4
_020F44DC:
	add r0, fp, #4
	bl FUN_020F488C
	ldr sp, [fp, #0x18]
_020F44E8:
	bl FUN_020F4B88
	add sp, fp, #0x2c
	pop {r4, fp, pc}
	.align 2, 0
	arm_func_end FUN_020F4478
_020F44F4: .4byte _021116F4
_020F44F8: .4byte _021116E8
_020F44FC: .4byte _0211170C
_020F4500: .4byte FUN_020F4504
	arm_func_end FUN_020F4478

	arm_func_start FUN_020F4504
FUN_020F4504: @ 0x020F4504
	bx lr
	arm_func_end FUN_020F4504

	arm_func_start FUN_020F4508
FUN_020F4508: @ 0x020F4508
	push {r3, r4, r5, r6, r7, lr}
	mov r4, r3
	mov r5, r2
	mov r2, r4
	mov r7, r0
	mov r6, r1
	bl FUN_020F39D4
	ldr r2, [r7, #0x18]
	ldr r1, [r5, #8]
	ldr r0, [r7, #4]
	add r3, r2, r1
	str r0, [r2, r1]
	ldr r1, [r7]
	mov r0, r7
	str r1, [r3, #4]
	ldr r2, [r7, #8]
	mov r1, r6
	str r2, [r3, #8]
	str r4, [r3, #0x14]
	ldr r3, [r6]
	ldr r2, [r5, #4]
	add r2, r3, r2
	bl FUN_020F4EB4
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020F4508

	arm_func_start FUN_020F4568
FUN_020F4568: @ 0x020F4568
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0xa4
	mov r5, r1
	ldr r1, [r5]
	mov r6, r0
	str r1, [sp, #0x1c]
	ldr r0, [r5, #4]
	add r8, sp, #0x50
	str r0, [sp, #0x20]
	ldr r0, [r5, #8]
	mov r4, r2
	str r0, [sp, #0x24]
	ldr r0, [r5, #0xc]
	add sb, r6, #0x1c
	str r0, [sp, #0x28]
	ldr r0, [r5, #0x10]
	mov r7, #5
	str r0, [sp, #0x2c]
	ldr r0, [r5, #0x14]
	str r0, [sp, #0x30]
	ldr r0, [r6]
	str r0, [sp, #0x34]
	ldr r0, [r6, #4]
	str r0, [sp, #0x38]
	ldr r0, [r6, #8]
	str r0, [sp, #0x3c]
	ldr r0, [r6, #0xc]
	str r0, [sp, #0x40]
	ldr r0, [r6, #0x10]
	str r0, [sp, #0x44]
	ldr r0, [r6, #0x14]
	str r0, [sp, #0x48]
	ldr r0, [r6, #0x18]
	str r0, [sp, #0x4c]
_020F45F0:
	ldm sb!, {r0, r1, r2, r3}
	stm r8!, {r0, r1, r2, r3}
	subs r7, r7, #1
	bne _020F45F0
	ldr r1, [sb]
	add r0, sp, #0x1c
	str r1, [r8]
	bl FUN_020F3630
	add r7, sp, #0
	add sl, sp, #4
	add fp, sp, #8
	add sb, sp, #0x14
	add r8, sp, #0x18
_020F4624:
	cmp r0, #0x13
	addls pc, pc, r0, lsl #2
	b _020F4724
_020F4630: @ jump table
	b _020F472C @ case 0
	b _020F4724 @ case 1
	b _020F472C @ case 2
	b _020F472C @ case 3
	b _020F472C @ case 4
	b _020F472C @ case 5
	b _020F472C @ case 6
	b _020F472C @ case 7
	b _020F472C @ case 8
	b _020F472C @ case 9
	b _020F472C @ case 10
	b _020F472C @ case 11
	b _020F4680 @ case 12
	b _020F472C @ case 13
	b _020F4724 @ case 14
	b _020F46D4 @ case 15
	b _020F472C @ case 16
	b _020F472C @ case 17
	b _020F472C @ case 18
	b _020F472C @ case 19
_020F4680:
	ldr lr, [sp, #0x24]
	mov r1, sb
	ldrb r2, [lr, #1]
	ldrb r0, [lr, #2]
	ldrb r3, [lr, #3]
	ldrb ip, [lr, #4]
	orr r0, r2, r0, lsl #8
	orr r0, r0, r3, lsl #16
	orr r2, r0, ip, lsl #24
	add r0, lr, #5
	str r2, [sp, #0x10]
	bl FUN_020F3438
	mov r1, r8
	bl FUN_020F33AC
	ldr r0, [r6]
	ldr r1, [sp, #0x10]
	mov r2, r4
	bl FUN_020F4BB8
	cmp r0, #0
	beq _020F472C
	b _020F4738
_020F46D4:
	ldr r0, [sp, #0x24]
	mov r1, r7
	add r0, r0, #1
	bl FUN_020F3438
	mov r1, sl
	bl FUN_020F3438
	mov r1, fp
	bl FUN_020F33AC
	str r0, [sp, #0xc]
	ldr r0, [r6]
	mov r1, r7
	bl FUN_020F43D8
	cmp r0, #0
	bne _020F472C
	ldr r3, [sp, #0x24]
	mov r0, r6
	mov r1, r5
	mov r2, r7
	bl FUN_020F4508
	b _020F472C
_020F4724:
	bl FUN_020F4B88
	b _020F4738
_020F472C:
	add r0, sp, #0x1c
	bl FUN_020F364C
	b _020F4624
_020F4738:
	ldr r0, [sp, #0x24]
	add sp, sp, #0xa4
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_020F4568

	arm_func_start FUN_020F4744
FUN_020F4744: @ 0x020F4744
	push {r3, lr}
	ldr lr, [r0, #0x18]
	ldr ip, [r0, #4]
	add r3, lr, r1
	str ip, [lr, r1]
	ldr r1, [r0]
	str r1, [r3, #4]
	ldr r1, [r0, #8]
	str r1, [r3, #8]
	ldr r1, [r0]
	ldrb r1, [r1]
	cmp r1, #0x2a
	ldrne r0, [r0, #4]
	addne r0, r0, r2
	strne r0, [r3, #0xc]
	popne {r3, pc}
	add r1, r3, #0x10
	str r1, [r3, #0xc]
	ldr r0, [r0, #4]
	ldr r0, [r0]
	add r0, r0, r2
	str r0, [r3, #0x10]
	pop {r3, pc}
_020F47A0:
	push {r3, r4, r5, lr}
	sub sp, sp, #0x28
	mov r5, r0
	ldr r0, [r5, #0x10]
	add r1, sp, #0x10
	bl FUN_020F3528
	ldr r0, [sp, #0x14]
	cmp r0, #0
	bne _020F47C8
	bl FUN_020F4B88
_020F47C8:
	add r1, sp, #0x10
	mov r0, r5
	bl FUN_020F4DC4
	ldr r0, [r5]
	cmp r0, #0
	movne r0, #0
	strne r0, [r5, #0xc]
	bne _020F4804
	add r1, sp, #0x10
	mov r0, r5
	bl FUN_020F4284
	str r0, [r5, #0xc]
	cmp r0, #0
	bne _020F4804
	bl FUN_020F4B88
_020F4804:
	add r1, sp, #0x10
	add r2, sp, #0
	mov r0, r5
	bl FUN_020F4568
	mov r4, r0
	ldrb r1, [r4, #1]
	ldrb r0, [r4, #2]
	ldrb r2, [r4, #3]
	ldrb r3, [r4, #4]
	orr r0, r1, r0, lsl #8
	orr r0, r0, r2, lsl #16
	orr r2, r0, r3, lsl #24
	add r1, sp, #8
	add r0, r4, #5
	str r2, [sp, #4]
	bl FUN_020F3438
	add r1, sp, #0xc
	bl FUN_020F33AC
	add r1, sp, #0x10
	mov r0, r5
	mov r2, r4
	bl FUN_020F39D4
	ldr r1, [sp, #0xc]
	ldr r2, [sp]
	mov r0, r5
	bl FUN_020F4744
	ldr r3, [sp, #0x10]
	ldr r2, [sp, #8]
	mov r0, r5
	add r1, sp, #0x10
	add r2, r3, r2
	bl FUN_020F4EB4
	add sp, sp, #0x28
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020F4744

	arm_func_start FUN_020F488C
FUN_020F488C: @ 0x020F488C
	push {r3, lr}
	ldr r1, [r0]
	cmp r1, #0
	ldrne r2, [r0, #8]
	cmpne r2, #0
	popeq {r3, pc}
	mov r0, r1
	mvn r1, #0
	blx r2
	pop {r3, pc}
	arm_func_end FUN_020F488C

	arm_func_start FUN_020F48B4
FUN_020F48B4: @ 0x020F48B4
	push {r4, lr}
	mov r4, r0
	bl FUN_020F49C0
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_020F48B4

	arm_func_start FUN_020F48C8
FUN_020F48C8: @ 0x020F48C8
	ldr r0, _020F48D0 @ =_021116BC
	bx lr
	.align 2, 0
_020F48D0: .4byte _021116BC
	arm_func_end FUN_020F48C8

	arm_func_start FUN_020F48D4
FUN_020F48D4: @ 0x020F48D4
	push {r3, lr}
	ldr r0, _020F4904 @ =_02111734
	ldrb r0, [r0]
	cmp r0, #0
	popeq {r3, pc}
	ldr r3, _020F4908 @ =_0211177C
	ldr r0, _020F490C @ =_02111788
	ldr r2, _020F4910 @ =FUN_020F4914
	add r1, sp, #0
	str r3, [sp]
	bl FUN_020F4EE4
	pop {r3, pc}
	.align 2, 0
_020F4904: .4byte _02111734
_020F4908: .4byte _0211177C
_020F490C: .4byte _02111788
_020F4910: .4byte FUN_020F4914
	arm_func_end FUN_020F48D4

	arm_func_start FUN_020F4914
FUN_020F4914: @ 0x020F4914
	bx lr
	arm_func_end FUN_020F4914

	arm_func_start FUN_020F4918
FUN_020F4918: @ 0x020F4918
	push {r3, r4, r5, r6, fp, lr}
	sub sp, sp, #0x18
	mov fp, sp
	movs r6, r0
	ldr r4, _020F4978 @ =0x021E58E4
	moveq r6, #4
_020F4930:
	mov r0, r6
	bl FUN_020E4970
	movs r5, r0
	bne _020F4958
	ldr r0, [r4]
	cmp r0, #0
	beq _020F4954
	blx r0
	b _020F4930
_020F4954:
	bl FUN_020F48D4
_020F4958:
	add sp, fp, #0x18
	mov r0, r5
	pop {r3, r4, r5, r6, fp, pc}
	arm_func_end FUN_020F4918

	arm_func_start FUN_020F4964
FUN_020F4964: @ 0x020F4964
	add r0, fp, #0
	bl FUN_020F445C
_020F496C:
	b _020F496C
	arm_func_end FUN_020F4964

	arm_func_start FUN_020F4970
FUN_020F4970: @ 0x020F4970
	add sp, fp, #0x18
	pop {r3, r4, r5, r6, fp, pc}
	.align 2, 0
_020F4978: .4byte 0x021E58E4
	arm_func_end FUN_020F4970

	arm_func_start FUN_020F497C
FUN_020F497C: @ 0x020F497C
	push {fp, lr}
	sub sp, sp, #0x30
	mov fp, sp
	str sp, [fp, #0x2c]
	bl FUN_020F4918
	add sp, fp, #0x30
	pop {fp, pc}
	arm_func_end FUN_020F497C

	arm_func_start FUN_020F4998
FUN_020F4998: @ 0x020F4998
	add r0, fp, #0x18
	bl FUN_020F488C
	add sp, fp, #0x30
	mov r0, #0
	pop {fp, pc}
	arm_func_end FUN_020F4998

	arm_func_start FUN_020F49AC
FUN_020F49AC: @ 0x020F49AC
	add r0, fp, #0
	bl FUN_020F445C
_020F49B4:
	b _020F49B4
	arm_func_end FUN_020F49AC

	arm_func_start FUN_020F49B8
FUN_020F49B8: @ 0x020F49B8
	add sp, fp, #0x30
	pop {fp, pc}
	arm_func_end FUN_020F49B8

	arm_func_start FUN_020F49C0
FUN_020F49C0: @ 0x020F49C0
	push {r3, lr}
	cmp r0, #0
	popeq {r3, pc}
	bl FUN_020E4988
	pop {r3, pc}
	arm_func_end FUN_020F49C0

	arm_func_start FUN_020F49D4
FUN_020F49D4: @ 0x020F49D4
	push {fp, lr}
	sub sp, sp, #0x18
	mov fp, sp
	bl FUN_020F4918
	add sp, fp, #0x18
	pop {fp, pc}
	arm_func_end FUN_020F49D4

	arm_func_start FUN_020F49EC
FUN_020F49EC: @ 0x020F49EC
	add r0, fp, #0
	bl FUN_020F445C
_020F49F4:
	b _020F49F4
	arm_func_end FUN_020F49EC

	arm_func_start FUN_020F49F8
FUN_020F49F8: @ 0x020F49F8
	add sp, fp, #0x18
	pop {fp, pc}
	arm_func_end FUN_020F49F8

	arm_func_start FUN_020F4A00
FUN_020F4A00: @ 0x020F4A00
	push {fp, lr}
	sub sp, sp, #0x18
	mov fp, sp
	bl FUN_020F497C
	add sp, fp, #0x18
	pop {fp, pc}
	arm_func_end FUN_020F4A00

	arm_func_start FUN_020F4A18
FUN_020F4A18: @ 0x020F4A18
	add r0, fp, #0
	bl FUN_020F445C
_020F4A20:
	b _020F4A20
	arm_func_end FUN_020F4A18

	arm_func_start FUN_020F4A24
FUN_020F4A24: @ 0x020F4A24
	add sp, fp, #0x18
	pop {fp, pc}
	arm_func_end FUN_020F4A24

	arm_func_start FUN_020F4A2C
FUN_020F4A2C: @ 0x020F4A2C
	ldr ip, _020F4A34 @ =FUN_020F49C0
	bx ip
	.align 2, 0
_020F4A34: .4byte FUN_020F49C0
	arm_func_end FUN_020F4A2C

	arm_func_start FUN_020F4A38
FUN_020F4A38: @ 0x020F4A38
	push {r4, lr}
	mov r4, r0
	bl FUN_020F49C0
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_020F4A38

	arm_func_start FUN_020F4A4C
FUN_020F4A4C: @ 0x020F4A4C
	ldr r0, _020F4A54 @ =_02111738
	bx lr
	.align 2, 0
_020F4A54: .4byte _02111738
	arm_func_end FUN_020F4A4C

	arm_func_start __call_static_initializers
__call_static_initializers: @ 0x020F4A58
	push {r4, lr}
	ldr r4, _020F4A80 @ =0x0210E96C
	b _020F4A6C
_020F4A64:
	blx r0
	add r4, r4, #4
_020F4A6C:
	cmp r4, #0
	ldrne r0, [r4]
	cmpne r0, #0
	bne _020F4A64
	pop {r4, pc}
	.align 2, 0
_020F4A80: .4byte 0x0210E96C
	arm_func_end __call_static_initializers

	arm_func_start FUN_020F4A84
FUN_020F4A84: @ 0x020F4A84
	push {r3, r4, r5, lr}
	ldr r4, _020F4AC4 @ =0x021E58E8
	ldr r2, [r4]
	cmp r2, #0
	popeq {r3, r4, r5, pc}
	mvn r5, #0
_020F4A9C:
	ldr r0, [r2]
	mov r1, r5
	str r0, [r4]
	ldr r0, [r2, #8]
	ldr r2, [r2, #4]
	blx r2
	ldr r2, [r4]
	cmp r2, #0
	bne _020F4A9C
	pop {r3, r4, r5, pc}
	.align 2, 0
_020F4AC4: .4byte 0x021E58E8
	arm_func_end FUN_020F4A84

	arm_func_start FUN_020F4AC8
FUN_020F4AC8: @ 0x020F4AC8
	bx lr
	arm_func_end FUN_020F4AC8

	arm_func_start FUN_020F4ACC
FUN_020F4ACC: @ 0x020F4ACC
	push {r3, lr}
	cmp r0, r1
	beq _020F4AEC
	ldr r0, [r0, #4]
	ldr r1, [r1, #4]
	bl FUN_020E9734
	cmp r0, #0
	bne _020F4AF4
_020F4AEC:
	mov r0, #1
	pop {r3, pc}
_020F4AF4:
	mov r0, #0
	pop {r3, pc}
	arm_func_end FUN_020F4ACC

	arm_func_start FUN_020F4AFC
FUN_020F4AFC: @ 0x020F4AFC
	push {r4, lr}
	mov r4, r0
	bl FUN_020F4AC8
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_020F4AFC

	arm_func_start FUN_020F4B10
FUN_020F4B10: @ 0x020F4B10
	push {r4, lr}
	mov r4, r0
	bl FUN_020F4AC8
	mov r0, r4
	bl FUN_020F49C0
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_020F4B10

	arm_func_start FUN_020F4B2C
FUN_020F4B2C: @ 0x020F4B2C
	push {r4, lr}
	mov r4, r0
	bl FUN_020F4AC8
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_020F4B2C

	arm_func_start FUN_020F4B40
FUN_020F4B40: @ 0x020F4B40
	push {r4, lr}
	mov r4, r0
	bl FUN_020F4B2C
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_020F4B40

	arm_func_start FUN_020F4B54
FUN_020F4B54: @ 0x020F4B54
	push {r4, lr}
	mov r4, r0
	bl FUN_020F4B2C
	mov r0, r4
	bl FUN_020F49C0
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_020F4B54

	arm_func_start FUN_020F4B70
FUN_020F4B70: @ 0x020F4B70
	ldr ip, _020F4B78 @ =FUN_020E47C0
	bx ip
	.align 2, 0
_020F4B78: .4byte FUN_020E47C0
	arm_func_end FUN_020F4B70

	arm_func_start FUN_020F4B7C
FUN_020F4B7C: @ 0x020F4B7C
	ldr ip, _020F4B84 @ =FUN_020F4B88
	bx ip
	.align 2, 0
_020F4B84: .4byte FUN_020F4B88
	arm_func_end FUN_020F4B7C

	arm_func_start FUN_020F4B88
FUN_020F4B88: @ 0x020F4B88
	push {r3, lr}
	ldr r0, _020F4B9C @ =_02111848
	ldr r0, [r0]
	blx r0
	pop {r3, pc}
	.align 2, 0
_020F4B9C: .4byte _02111848
	arm_func_end FUN_020F4B88

	arm_func_start FUN_020F4BA0
FUN_020F4BA0: @ 0x020F4BA0
	push {r3, lr}
	ldr r0, _020F4BB4 @ =_02111848
	ldr r0, [r0, #4]
	blx r0
	pop {r3, pc}
	.align 2, 0
_020F4BB4: .4byte _02111848
	arm_func_end FUN_020F4BA0

	arm_func_start FUN_020F4BB8
FUN_020F4BB8: @ 0x020F4BB8
	push {r3, lr}
	mov ip, #0
	mov r3, r1
	cmp r1, #0
	str ip, [r2]
	moveq r0, #1
	popeq {r3, pc}
	ldrb ip, [r1]
	cmp ip, #0x50
	bne _020F4C1C
	ldrb ip, [r3, #1]!
	cmp ip, #0x56
	addeq r3, r3, #1
	ldrb ip, [r3]
	cmp ip, #0x4b
	addeq r3, r3, #1
	ldrb r3, [r3]
	cmp r3, #0x76
	bne _020F4C18
	ldrb r3, [r0]
	cmp r3, #0x50
	cmpne r3, #0x2a
	moveq r0, #1
	popeq {r3, pc}
_020F4C18:
	mov r3, r1
_020F4C1C:
	ldrb ip, [r0]
	cmp ip, #0x21
	cmpne ip, #0x2a
	bne _020F4D1C
	ldrb lr, [r0], #1
	ldrb ip, [r3], #1
	cmp lr, ip
	movne r0, #0
	popne {r3, pc}
_020F4C40:
	ldrb lr, [r0]
	ldrb ip, [r3], #1
	cmp lr, ip
	bne _020F4C94
	cmp lr, #0x21
	add r0, r0, #1
	bne _020F4C40
	ldrb r1, [r0]
	mov lr, #0
	cmp r1, #0x21
	beq _020F4C88
	mov r1, #0xa
_020F4C70:
	ldrb ip, [r0]
	ldrb r3, [r0, #1]!
	mla ip, lr, r1, ip
	cmp r3, #0x21
	sub lr, ip, #0x30
	bne _020F4C70
_020F4C88:
	str lr, [r2]
	mov r0, #1
	pop {r3, pc}
_020F4C94:
	ldrb r3, [r0], #1
	cmp r3, #0x21
	bne _020F4C94
_020F4CA0:
	ldrb r3, [r0], #1
	cmp r3, #0x21
	bne _020F4CA0
	ldrb r3, [r0]
	cmp r3, #0
	moveq r0, #0
	popeq {r3, pc}
	add r3, r1, #1
	b _020F4C40
_020F4CC4:
	ldrb r1, [r3, #1]!
	add r0, r0, #1
	cmp r1, #0x4b
	bne _020F4CE4
	ldrb r1, [r0]
	add r3, r3, #1
	cmp r1, #0x4b
	addeq r0, r0, #1
_020F4CE4:
	ldrb r2, [r0]
	cmp r2, #0x4b
	moveq r0, #0
	popeq {r3, pc}
	ldrb r1, [r3]
	cmp r1, #0x56
	bne _020F4D0C
	cmp r2, #0x56
	addeq r0, r0, #1
	add r3, r3, #1
_020F4D0C:
	ldrb r1, [r0]
	cmp r1, #0x56
	moveq r0, #0
	popeq {r3, pc}
_020F4D1C:
	ldrb r2, [r0]
	cmp r2, #0x50
	cmpne r2, #0x52
	bne _020F4D38
	ldrb r1, [r3]
	cmp r2, r1
	beq _020F4CC4
_020F4D38:
	ldrb r1, [r3]
	cmp r2, r1
	bne _020F4D60
_020F4D44:
	cmp r2, #0
	moveq r0, #1
	popeq {r3, pc}
	ldrb r2, [r0, #1]!
	ldrb r1, [r3, #1]!
	cmp r2, r1
	beq _020F4D44
_020F4D60:
	mov r0, #0
	pop {r3, pc}
	arm_func_end FUN_020F4BB8

	arm_func_start FUN_020F4D68
FUN_020F4D68: @ 0x020F4D68
	push {r4, lr}
	ldrb r1, [r0, #0x6a]
	ldr ip, [r0, #0x60]
	mov r4, #0xf
	cmp r1, #0
	ldr r1, [r0, #0x18]
	movne r2, #0x10
	moveq r2, #0
	add r1, r1, ip
	sub lr, r1, r2
	mov r3, #1
_020F4D94:
	ldrh r1, [r0, #0x68]
	tst r1, r3, lsl r4
	ldrne r2, [lr, #-4]!
	addne r1, r0, r4, lsl #2
	strne r2, [r1, #0x1c]
	subs r4, r4, #1
	bpl _020F4D94
	ldr r1, [r0, #0x18]
	add r1, r1, ip
	str r1, [r0, #0x14]
	ldr r0, [r0, #0x54]
	pop {r4, pc}
	arm_func_end FUN_020F4D68

	arm_func_start FUN_020F4DC4
FUN_020F4DC4: @ 0x020F4DC4
	push {r4, r5, r6, lr}
	ldr r1, [r1, #4]
	mov r6, r0
	ldrb r0, [r1]
	ands r4, r0, #0x40
	movne r2, #1
	moveq r2, #0
	strb r2, [r6, #0x6b]
	tst r0, #0x20
	movne r2, #1
	moveq r2, #0
	ands r5, r0, #0x80
	movne r0, #1
	strb r2, [r6, #0x6a]
	moveq r0, #0
	strb r0, [r6, #0x6c]
	ldrb r2, [r1, #1]
	add r0, r1, #2
	add r1, r6, #0x60
	lsl r2, r2, #4
	strh r2, [r6, #0x68]
	ldrh r2, [r6, #0x68]
	orr r2, r2, #0x4000
	strh r2, [r6, #0x68]
	bl FUN_020F3438
	cmp r4, #0
	beq _020F4E38
	add r1, r6, #0x64
	bl FUN_020F3438
_020F4E38:
	cmp r4, #0
	beq _020F4E58
	cmp r5, #0
	ldrne r0, [r6, #0x38]
	strne r0, [r6, #0x18]
	ldreq r0, [r6, #0x48]
	streq r0, [r6, #0x18]
	pop {r4, r5, r6, pc}
_020F4E58:
	ldr r0, [r6, #0x14]
	str r0, [r6, #0x18]
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020F4DC4

	arm_func_start FUN_020F4E64
FUN_020F4E64: @ 0x020F4E64
	ldr r2, _020F4E7C @ =SDK_STATIC_ETABLE_START
	ldr r1, _020F4E80 @ =SDK_STATIC_ETABLE_END
	str r2, [r0, #0xc]
	str r1, [r0, #0x10]
	mov r0, #1
	bx lr
	.align 2, 0
_020F4E7C: .4byte SDK_STATIC_ETABLE_START
_020F4E80: .4byte SDK_STATIC_ETABLE_END
	arm_func_end FUN_020F4E64

	arm_func_start FUN_020F4E84
FUN_020F4E84: @ 0x020F4E84
	push {r3, r4, lr}
	sub sp, sp, #4
	ldrb r4, [r0], #2
	add r1, sp, #0
	bl FUN_020F3438
	tst r4, #0x40
	addeq sp, sp, #4
	popeq {r3, r4, pc}
	add r1, sp, #0
	bl FUN_020F3438
	add sp, sp, #4
	pop {r3, r4, pc}
	arm_func_end FUN_020F4E84

	arm_func_start FUN_020F4EB4
FUN_020F4EB4: @ 0x020F4EB4
	ldr r4, [r0, #0x2c]
	ldr r5, [r0, #0x30]
	ldr r6, [r0, #0x34]
	ldr r7, [r0, #0x38]
	ldr r8, [r0, #0x3c]
	ldr sb, [r0, #0x40]
	ldr sl, [r0, #0x44]
	ldr fp, [r0, #0x48]
	ldr sp, [r0, #0x5c]
	ldr ip, [r0, #0x64]
	sub sp, sp, ip
	bx r2
	arm_func_end FUN_020F4EB4

	arm_func_start FUN_020F4EE4
FUN_020F4EE4: @ 0x020F4EE4
	mov ip, sp
	sub sp, sp, #0x70
	str r4, [sp, #0x2c]
	str r5, [sp, #0x30]
	str r6, [sp, #0x34]
	str r7, [sp, #0x38]
	str r8, [sp, #0x3c]
	str sb, [sp, #0x40]
	str sl, [sp, #0x44]
	str fp, [sp, #0x48]
	str ip, [sp, #0x14]
	str ip, [sp, #0x5c]
	str lr, [sp, #0x10]
	str r0, [sp]
	str r1, [sp, #4]
	str r2, [sp, #8]
	mov r0, sp
	b _020F47A0
	arm_func_end FUN_020F4EE4

	arm_func_start FUN_020F4F2C
FUN_020F4F2C: @ 0x020F4F2C
	mov ip, sp
	sub sp, sp, #0x70
	str r4, [sp, #0x2c]
	str r5, [sp, #0x30]
	str r6, [sp, #0x34]
	str r7, [sp, #0x38]
	str r8, [sp, #0x3c]
	str sb, [sp, #0x40]
	str sl, [sp, #0x44]
	str fp, [sp, #0x48]
	str ip, [sp, #0x14]
	str ip, [sp, #0x5c]
	str lr, [sp, #0x10]
	mov ip, #0
	str ip, [sp]
	str ip, [sp, #4]
	str ip, [sp, #8]
	mov r0, sp
	b _020F47A0
	arm_func_end FUN_020F4F2C

	arm_func_start FUN_020F4F78
FUN_020F4F78: @ 0x020F4F78
	ldr ip, _020F4F80 @ =FUN_020F3310
	bx ip
	.align 2, 0
_020F4F80: .4byte FUN_020F3310
	arm_func_end FUN_020F4F78

	.section .exception,4
	; MSL symbols have exceptions for C++ mode, even when compiling C.

_020F4F84:
	.byte 0x20, 0xFF, 0x09, 0x60, 0x00, 0x00, 0x00, 0x00
_020F4F8C:
	.byte 0x00, 0xFF, 0x01, 0xB0, 0x00, 0x00, 0x00, 0x00
_020F4F94:
	.byte 0x00, 0xFF, 0x01, 0xD0, 0x00, 0x00, 0x00, 0x00
_020F4F9C:
	.byte 0x20, 0xFF, 0x09, 0x60, 0x00, 0x00, 0x00, 0x00
_020F4FA4:
	.byte 0x20, 0xFF, 0x11, 0x68, 0x00, 0x00, 0x00, 0x00
_020F4FAC:
	.byte 0x20, 0xFF, 0x01, 0xB8, 0x00, 0x00, 0x00, 0x00
_020F4FB4:
	.byte 0x00, 0xFF, 0x05, 0x20, 0x00, 0x00, 0x00, 0x00
_020F4FBC:
	.byte 0x20, 0x03, 0x50, 0x58, 0x00, 0x0E, 0x00, 0x82, 0x00, 0xF0, 0x04, 0x0F, 0x02, 0x00, 0x00, 0x00
_020F4FCC:
	.byte 0x40, 0x81, 0x50, 0x00
	.byte 0x40, 0x00, 0x16, 0x28, 0x00, 0x1E, 0x00, 0x8F, 0x00, 0x58, 0x00, 0x8D, 0x00, 0x00, 0x00, 0x00
_020F4FE0:
	.byte 0x00, 0x07, 0x40, 0x48, 0x58, 0x22, 0x18, 0x00, 0x14, 0x00, 0x27, 0x0A, 0x00, 0xB0, 0x04, 0x0F
	.byte 0x02, 0xA6, 0x0C, 0x00, 0xDC, 0x03, 0x0F, 0x02
_020F4FF8:
	.byte 0x00, 0x03, 0x01, 0xB0, 0x00, 0x00, 0x00, 0x00
_020F5000:
	.byte 0x00, 0xFF, 0x01, 0xC8, 0x58, 0x1D, 0xB8, 0x1A, 0x01, 0x8C, 0x50, 0x1A, 0x00, 0x8E, 0x00, 0x00
_020F5010:
	.byte 0x00, 0x03, 0x01, 0x98, 0x00, 0x00, 0x00, 0x00
_020F5018:
	.byte 0x40, 0x81, 0x70, 0x00, 0x30, 0x00, 0x16, 0x20
	.byte 0xB0, 0x24, 0x00, 0x8C, 0x00, 0x00, 0x00, 0x00, 0x38, 0x08, 0x8D, 0x08
_020F502C:
	.byte 0x00, 0x0F, 0x30, 0x38, 0x80, 0x0E, 0x00, 0x8E
_020F5034:
	.byte 0x00, 0xFF, 0x01, 0xC8, 0x00, 0x00, 0x00, 0x00
_020F503C:
	.byte 0x40, 0x87, 0x60, 0x00
	.byte 0x40, 0x40, 0x16, 0x28, 0x00, 0x26, 0x00, 0x8F, 0x02, 0x98, 0x00, 0x60, 0x17, 0x11, 0x02, 0x8D
	.byte 0x00, 0x00, 0x00, 0x00
_020F5054:
	.byte 0x40, 0x80, 0x70, 0x00, 0x28, 0x00, 0x1C, 0x20, 0x00, 0x2A, 0x28, 0x00
	.byte 0x32, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x38, 0x30, 0x8F, 0x00, 0x60, 0x00, 0x8D, 0x00, 0x00
_020F5070:
	.byte 0x40, 0x80, 0x40, 0x00, 0x20, 0x00, 0x16, 0x20, 0x00, 0x26, 0x00, 0x8F, 0x02, 0x30, 0x00, 0x60
	.byte 0x17, 0x11, 0x02, 0x8D, 0x00, 0x00, 0x00, 0x00
_020F5088:
	.byte 0x40, 0x80, 0x40, 0x00, 0x20, 0x00, 0x16, 0x20
	.byte 0x00, 0x1E, 0x00, 0x8F, 0x00, 0x30, 0x00, 0x8D, 0x00, 0x00, 0x00, 0x00

	.section .exceptix,4

	.word FUN_020E47C0, 0x00000025, 0x00100000
	.word FUN_020E47E4, 0x0000004D, 0x00100100
	.word FUN_020E4830, 0x00000129, 0x00200300
	.word FUN_020E4958, 0x00000019, 0x00000000
	.word FUN_020E4970, 0x00000019, 0x00100000
	.word FUN_020E4988, 0x00000015, 0x00100000
	.word FUN_020E499C, 0x0000008D, 0x00403F00
	.word FUN_020E4A28, 0x00000069, 0x00403F00
	.word FUN_020E4A9C, 0x0000003D, 0x00200100
	.word FUN_020E4B10, 0x0000008D, 0x00200700
	.word FUN_020E4B9C, 0x00000089, 0x00200300
	.word FUN_020E4C24, 0x0000010D, 0x00407F00
	.word FUN_020E4D30, 0x00000349, 0x00507F00
	.word FUN_020E5078, 0x000002B1, 0x0060FF00
	.word FUN_020E5328, 0x00000075, 0x00200300
	.word FUN_020E539C, 0x000000E9, 0x00100100
	.word FUN_020E5500, 0x0000011D, 0x00300F00
	.word FUN_020E561C, 0x000001E9, 0x00400320
	.word FUN_020E5804, 0x0000012D, 0x00403F00
	.word FUN_020E5930, 0x00000025, 0x00100100
	.word FUN_020E5954, 0x0000001D, 0x00100000
	.word FUN_020E59BC, 0x0000001D, 0x00100000
	.word FUN_020E59D8, 0x00000089, 0x00301F00
	.word FUN_020E5A60, 0x00000079, 0x00403F00
	.word FUN_020E5B44, 0x00000015, 0x00100100
	.word FUN_020E6230, 0x0000024D, 0x0090FF20
	.word FUN_020E647C, 0x000002FD, 0x00A0FF20
	.word FUN_020E6778, 0x000004DD, 0x00F07F20
	.word FUN_020E6D78, 0x00000765, 0x00C0FF20
	.word FUN_020E74DC, 0x00000824, _020F4F84
	.word FUN_020E7D00, 0x0000002D, 0x00200300
	.word FUN_020E7D2C, 0x00000045, 0x00200300
	.word FUN_020E7D70, 0x00000119, 0x00300120
	.word FUN_020E7E88, 0x00000069, 0x00300300
	.word FUN_020E7EF0, 0x00000019, 0x00000000
	.word FUN_020E7F08, 0x00000029, 0x00300020
	.word FUN_020E7F30, 0x0000002D, 0x00300020
	.word FUN_020E7F5C, 0x00000165, 0x0070FF00
	.word FUN_020E85FC, 0x00000D54, _020F4F8C
	.word FUN_020E93D4, 0x00000055, 0x00200000
	.word FUN_020E9428, 0x00000029, 0x00300020
	.word FUN_020E9450, 0x00000131, 0x00200300
	.word FUN_020E9B3C, 0x0000124C, _020F4F94
	.word FUN_020EAD88, 0x000000E1, 0x00500F00
	.word FUN_020EAE68, 0x00000011, 0x00000000
	.word FUN_020EAE78, 0x000003E9, 0x0060FF00
	.word FUN_020EB260, 0x0000046D, 0x00807F00
	.word FUN_020EB6CC, 0x00000099, 0x00600300
	.word FUN_020EB764, 0x000000C9, 0x00600300
	.word FUN_020EB82C, 0x00000015, 0x00000000
	.word FUN_020EB8B4, 0x00000011, 0x00000000
	.word FUN_020EBE64, 0x00000251, 0x0090FF20
	.word FUN_020EC0B4, 0x00000301, 0x00A0FF20
	.word FUN_020EC3B4, 0x00000399, 0x00F07F20
	.word FUN_020EC870, 0x0000064C, _020F4F9C
	.word FUN_020ECEBC, 0x000008F0, _020F4FA4
	.word FUN_020ED7AC, 0x00000041, 0x00200300
	.word FUN_020ED7EC, 0x00000029, 0x00300020
	.word FUN_020ED814, 0x00000071, 0x00300300
	.word FUN_020ED8F4, 0x00001188, _020F4FAC
	.word FUN_020EEAC4, 0x000000BD, 0x00300120
	.word FUN_020EEB80, 0x0000024D, 0x00300120
	.word FUN_020EEDCC, 0x0000000D, 0x00000000
	.word FUN_020EEE94, 0x00000041, 0x00200300
	.word FUN_020EEED4, 0x000000CD, 0x0050FF00
	.word FUN_020EEFA0, 0x00000185, 0x00D0FF00
	.word FUN_020EF124, 0x0000009D, 0x00100000
	.word FUN_020EF1C0, 0x00000385, 0x00B00300
	.word FUN_020EF9A8, 0x00000181, 0x00E01F00
	.word FUN_020EFB28, 0x000000A9, 0x00200300
	.word FUN_020EFBD0, 0x00000624, _020F4FB4
	.word FUN_020F030C, 0x0000002D, 0x00200100
	.word FUN_020F0338, 0x00000019, 0x00000000
	.word FUN_020F0350, 0x00000019, 0x00000000
	.word FUN_020F03E0, 0x00000080, _020F4FBC
	.word FUN_020F0460, 0x00000015, 0x00100100
	.word FUN_020F0478, 0x00000029, 0x00100100
	.word FUN_020F04A0, 0x00000011, 0x00000000
	.word FUN_020F04B0, 0x00000040, _020F4FCC
	.word FUN_020F04F0, 0x00000021, 0x00100100
	.word FUN_020F0510, 0x00000015, 0x00100100
	.word FUN_020F0530, 0x00000019, 0x00100100
	.word FUN_020F0548, 0x00000021, 0x00100100
	.word FUN_020F0568, 0x00000019, 0x00100100
	.word FUN_020F0580, 0x00000021, 0x00100100
	.word FUN_020F05A0, 0x00000031, 0x00100100
	.word FUN_020F05D0, 0x0000002D, 0x00100000
	.word FUN_020F05FC, 0x00000090, _020F4FE0
	.word FUN_020F3320, 0x00000051, 0x00300F00
	.word FUN_020F3370, 0x00000035, 0x00200700
	.word FUN_020F3528, 0x00000109, 0x00503F00
	.word FUN_020F364C, 0x00000388, _020F4FF8
	.word FUN_020F39D4, 0x000008B0, _020F5000
	.word FUN_020F4284, 0x00000154, _020F5010
	.word FUN_020F43D8, 0x00000085, 0x00401F00
	.word FUN_020F445C, 0x000000A8, _020F5018
	.word FUN_020F4508, 0x00000060, _020F502C
	.word FUN_020F4568, 0x000001DC, _020F5034
	.word FUN_020F47A0, 0x000000ED, 0x00700300
	.word FUN_020F488C, 0x00000029, 0x00100000
	.word FUN_020F48B4, 0x00000015, 0x00100100
	.word FUN_020F48D4, 0x00000041, 0x00100000
	.word FUN_020F4918, 0x00000064, _020F503C
	.word FUN_020F497C, 0x00000044, _020F5054
	.word FUN_020F49C0, 0x00000015, 0x00100000
	.word FUN_020F49D4, 0x0000002C, _020F5070
	.word FUN_020F4A00, 0x0000002C, _020F5088
	.word FUN_020F4A2C, 0x0000000D, 0x00000000
	.word FUN_020F4A38, 0x00000015, 0x00100100
	.word FUN_020F4A58, 0x0000002D, 0x00100100
	.word FUN_020F4A84, 0x00000045, 0x00200300
	.word FUN_020F4ACC, 0x00000031, 0x00100000
	.word FUN_020F4AFC, 0x00000015, 0x00100100
	.word FUN_020F4B10, 0x0000001D, 0x00100100
	.word FUN_020F4B2C, 0x00000015, 0x00100100
	.word FUN_020F4B40, 0x00000015, 0x00100100
	.word FUN_020F4B54, 0x0000001D, 0x00100100
	.word FUN_020F4B70, 0x0000000D, 0x00000000
	.word FUN_020F4B7C, 0x0000000D, 0x00000000
	.word FUN_020F4B88, 0x00000019, 0x00100000
	.word FUN_020F4BA0, 0x00000019, 0x00100000
	.word FUN_020F4DC4, 0x000000A1, 0x00200700
	.word FUN_020F4E84, 0x00000031, 0x00200100
	.word FUN_020F4F78, 0x0000000D, 0x00000000

	.rodata

_02018F9C:
	.byte 0x00, 0x00, 0x00, 0x00
_02108FA0:
	.byte 0x01, 0x02, 0x00, 0x04, 0x03, 0x05, 0x06, 0x07, 0x05, 0x09, 0x01, 0x0E, 0x0C, 0x02, 0x0A, 0x00
	.byte 0x0B, 0x0D, 0x03, 0x04, 0x08, 0x06, 0x0F, 0x07, 0x15, 0x03, 0x00, 0x00, 0x02, 0x01, 0x29, 0x00
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0xFF, 0x01, 0xFF, 0xFF, 0x01, 0x02
	.byte 0xFF, 0xFF, 0x01, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x04, 0x06, 0x08, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0x02, 0x04, 0x06, 0x08, 0x07, 0x00, 0x08, 0x00, 0x09, 0x00, 0x0A, 0x00, 0x0B, 0x00, 0x0C, 0x00
	.byte 0x0D, 0x00, 0x0E, 0x00, 0x10, 0x00, 0x11, 0x00, 0x13, 0x00, 0x15, 0x00, 0x17, 0x00, 0x19, 0x00
	.byte 0x1C, 0x00, 0x1F, 0x00, 0x22, 0x00, 0x25, 0x00, 0x29, 0x00, 0x2D, 0x00, 0x32, 0x00, 0x37, 0x00
	.byte 0x3C, 0x00, 0x42, 0x00, 0x49, 0x00, 0x50, 0x00, 0x58, 0x00, 0x61, 0x00, 0x6B, 0x00, 0x76, 0x00
	.byte 0x82, 0x00, 0x8F, 0x00, 0x9D, 0x00, 0xAD, 0x00, 0xBE, 0x00, 0xD1, 0x00, 0xE6, 0x00, 0xFD, 0x00
	.byte 0x17, 0x01, 0x33, 0x01, 0x51, 0x01, 0x73, 0x01, 0x98, 0x01, 0xC1, 0x01, 0xEE, 0x01, 0x20, 0x02
	.byte 0x56, 0x02, 0x92, 0x02, 0xD4, 0x02, 0x1C, 0x03, 0x6C, 0x03, 0xC3, 0x03, 0x24, 0x04, 0x8E, 0x04
	.byte 0x02, 0x05, 0x83, 0x05, 0x10, 0x06, 0xAB, 0x06, 0x56, 0x07, 0x12, 0x08, 0xE0, 0x08, 0xC3, 0x09
	.byte 0xBD, 0x0A, 0xD0, 0x0B, 0xFF, 0x0C, 0x4C, 0x0E, 0xBA, 0x0F, 0x4C, 0x11, 0x07, 0x13, 0xEE, 0x14
	.byte 0x06, 0x17, 0x54, 0x19, 0xDC, 0x1B, 0xA5, 0x1E, 0xB6, 0x21, 0x15, 0x25, 0xCA, 0x28, 0xDF, 0x2C
	.byte 0x5B, 0x31, 0x4B, 0x36, 0xB9, 0x3B, 0xB2, 0x41, 0x44, 0x48, 0x7E, 0x4F, 0x71, 0x57, 0x2F, 0x60
	.byte 0xCE, 0x69, 0x62, 0x74, 0xFF, 0x7F, 0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x02, 0x04, 0x03, 0x04
	.byte 0x04, 0x04, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x01, 0x02
	.byte 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03, 0x00, 0x01, 0x08, 0x04, 0x0A, 0x00, 0x00, 0x00, 0x00
	.byte 0x07, 0x0C, 0x02, 0x03, 0x09, 0x02, 0x00, 0x00, 0xFE, 0xFE, 0xFE, 0x03, 0xFF, 0xFF, 0x00, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFE, 0xFD, 0xFF, 0x02, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFE, 0xFE
	.byte 0xFE, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0xFE, 0xFD, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFE, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE
	.byte 0xFE, 0xFE, 0xFD, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x01, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE
	.byte 0x00, 0x00, 0x00, 0xFE, 0xFE, 0xFE, 0xFE, 0x05, 0xFE, 0xFE, 0xFE, 0x00, 0xFE, 0xFE, 0xFE, 0xFE
	.byte 0xFE, 0x05, 0xFE, 0xFE, 0xFE, 0xFE, 0x00, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE
	.byte 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0x02, 0x00, 0x00, 0x00, 0xFE
	.byte 0x00, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0x00, 0x00, 0xFE, 0xFE, 0x00, 0xFE, 0xFE, 0xFE, 0xFE, 0x01
	.byte 0xFF, 0xFE, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0xFE, 0x05, 0x05, 0xFE, 0xFF, 0xFE, 0x00, 0xFE, 0xFE
	.byte 0xFE, 0xFE, 0xFE, 0x05, 0xFE, 0xFE, 0xFF, 0xFE, 0x00, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE
	.byte 0xFE, 0xFF, 0xFE, 0x00, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFF, 0x03, 0x00, 0x00
	.byte 0x00, 0xFE, 0x00, 0xFE, 0xFE, 0xFE, 0xFE, 0xFF, 0x00, 0x00, 0xFE, 0xFE, 0x00, 0xFE, 0x04, 0xFE
	.byte 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFE, 0xFE, 0xFF, 0x02, 0x00
	.byte 0x00, 0x00, 0xFF, 0x00, 0xFE, 0x05, 0x05, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE
	.byte 0xFE, 0xFE, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0x05, 0xFE, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFE, 0xFE, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF
	.byte 0x14, 0x59, 0x0B, 0x02, 0x34, 0x59, 0x0B, 0x02, 0xFC, 0x58, 0x0B, 0x02, 0x10, 0x59, 0x0B, 0x02
	.byte 0xD8, 0x58, 0x0B, 0x02, 0xEC, 0x58, 0x0B, 0x02, 0x44, 0x59, 0x0B, 0x02, 0x60, 0x59, 0x0B, 0x02
	.byte 0x48, 0x5F, 0x0B, 0x02, 0x74, 0x5F, 0x0B, 0x02, 0xA0, 0x5F, 0x0B, 0x02, 0xC4, 0x5F, 0x0B, 0x02
	.byte 0xE8, 0x5F, 0x0B, 0x02, 0xF4, 0x5F, 0x0B, 0x02, 0x00, 0x60, 0x0B, 0x02, 0x0C, 0x60, 0x0B, 0x02
	.byte 0x18, 0x60, 0x0B, 0x02, 0x24, 0x60, 0x0B, 0x02, 0x30, 0x60, 0x0B, 0x02, 0x3C, 0x60, 0x0B, 0x02
	.byte 0x48, 0x60, 0x0B, 0x02, 0x54, 0x60, 0x0B, 0x02, 0x60, 0x60, 0x0B, 0x02, 0x6C, 0x60, 0x0B, 0x02
	.byte 0x78, 0x60, 0x0B, 0x02, 0xA4, 0x60, 0x0B, 0x02, 0xD0, 0x60, 0x0B, 0x02, 0xDC, 0x60, 0x0B, 0x02
	.byte 0xE8, 0x60, 0x0B, 0x02, 0xF4, 0x60, 0x0B, 0x02, 0x00, 0x61, 0x0B, 0x02, 0x0C, 0x61, 0x0B, 0x02
	.byte 0x18, 0x61, 0x0B, 0x02, 0x24, 0x61, 0x0B, 0x02, 0x30, 0x61, 0x0B, 0x02, 0x3C, 0x61, 0x0B, 0x02
	.byte 0x48, 0x61, 0x0B, 0x02, 0x54, 0x61, 0x0B, 0x02, 0x60, 0x61, 0x0B, 0x02, 0x6C, 0x61, 0x0B, 0x02
	.byte 0x78, 0x61, 0x0B, 0x02, 0xA4, 0x61, 0x0B, 0x02, 0xD0, 0x61, 0x0B, 0x02, 0xDC, 0x61, 0x0B, 0x02
	.byte 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xFF, 0xFF, 0x08, 0x00, 0x10, 0x00, 0x20, 0x00, 0x40, 0x00
	.byte 0x08, 0x00, 0x08, 0x00, 0x10, 0x00, 0x20, 0x00, 0x10, 0x00, 0x20, 0x00, 0x20, 0x00, 0x40, 0x00
	.byte 0x08, 0x00, 0x10, 0x00, 0x20, 0x00, 0x40, 0x00, 0x10, 0x00, 0x20, 0x00, 0x20, 0x00, 0x40, 0x00
	.byte 0x08, 0x00, 0x08, 0x00, 0x10, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00
	.byte 0x23, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00
	.byte 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00
	.byte 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00
	.byte 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00
	.byte 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00
	.byte 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00
	.byte 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00
	.byte 0x03, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x10, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0x7C, 0xCA, 0x0B, 0x02, 0x74, 0xCE, 0x0B, 0x02, 0xF4, 0xCE, 0x0B, 0x02, 0x7C, 0xCA, 0x0B, 0x02
	.byte 0x24, 0xCE, 0x0B, 0x02, 0xF4, 0xCE, 0x0B, 0x02, 0x14, 0xCC, 0x0B, 0x02, 0x24, 0xCE, 0x0B, 0x02
	.byte 0x90, 0xD0, 0x0B, 0x02, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x01, 0x01, 0x01
	.byte 0x02, 0x01, 0x02, 0x01, 0x00, 0x02, 0x01, 0x02, 0x02, 0x02, 0x03, 0x02, 0x00, 0x02, 0x01, 0x02
	.byte 0x02, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x40
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x40, 0x00, 0x80
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x40, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80
	.byte 0x00, 0x40, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0xC0
	.byte 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x7F
	.byte 0xFF, 0x7F, 0xFF, 0x7F, 0x00, 0x80, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x80, 0xFF, 0x7F
	.byte 0xFF, 0xFF, 0xFF, 0x7F, 0x04, 0x05, 0x07, 0x08, 0x03, 0x05, 0x06, 0x08, 0x03, 0x04, 0x06, 0x07
	.byte 0x01, 0x02, 0x07, 0x08, 0x00, 0x02, 0x06, 0x08, 0x00, 0x01, 0x06, 0x07, 0x01, 0x02, 0x04, 0x05
	.byte 0x00, 0x02, 0x03, 0x05, 0x00, 0x01, 0x03, 0x04, 0x04, 0x05, 0x07, 0x08, 0x03, 0x05, 0x06, 0x08
	.byte 0x03, 0x04, 0x06, 0x07, 0x01, 0x02, 0x07, 0x08, 0x00, 0x02, 0x06, 0x08, 0x00, 0x01, 0x06, 0x07
	.byte 0x01, 0x02, 0x04, 0x05, 0x00, 0x02, 0x03, 0x05, 0x00, 0x01, 0x03, 0x04, 0x00, 0x00, 0x00, 0x10
	.byte 0x06, 0x00, 0x00, 0x10, 0x0D, 0x00, 0x00, 0x10, 0x13, 0x00, 0x00, 0x10, 0x19, 0x00, 0x00, 0x10
	.byte 0x1F, 0x00, 0x00, 0x10, 0x26, 0x00, 0x00, 0x10, 0x2C, 0x00, 0x00, 0x10, 0x32, 0x00, 0x00, 0x10
	.byte 0x39, 0x00, 0x00, 0x10, 0x3F, 0x00, 0x00, 0x10, 0x45, 0x00, 0xFF, 0x0F, 0x4B, 0x00, 0xFF, 0x0F
	.byte 0x52, 0x00, 0xFF, 0x0F, 0x58, 0x00, 0xFF, 0x0F, 0x5E, 0x00, 0xFF, 0x0F, 0x65, 0x00, 0xFF, 0x0F
	.byte 0x6B, 0x00, 0xFF, 0x0F, 0x71, 0x00, 0xFE, 0x0F, 0x77, 0x00, 0xFE, 0x0F, 0x7E, 0x00, 0xFE, 0x0F
	.byte 0x84, 0x00, 0xFE, 0x0F, 0x8A, 0x00, 0xFE, 0x0F, 0x90, 0x00, 0xFD, 0x0F, 0x97, 0x00, 0xFD, 0x0F
	.byte 0x9D, 0x00, 0xFD, 0x0F, 0xA3, 0x00, 0xFD, 0x0F, 0xAA, 0x00, 0xFC, 0x0F, 0xB0, 0x00, 0xFC, 0x0F
	.byte 0xB6, 0x00, 0xFC, 0x0F, 0xBC, 0x00, 0xFC, 0x0F, 0xC3, 0x00, 0xFB, 0x0F, 0xC9, 0x00, 0xFB, 0x0F
	.byte 0xCF, 0x00, 0xFB, 0x0F, 0xD6, 0x00, 0xFA, 0x0F, 0xDC, 0x00, 0xFA, 0x0F, 0xE2, 0x00, 0xFA, 0x0F
	.byte 0xE8, 0x00, 0xF9, 0x0F, 0xEF, 0x00, 0xF9, 0x0F, 0xF5, 0x00, 0xF9, 0x0F, 0xFB, 0x00, 0xF8, 0x0F
	.byte 0x01, 0x01, 0xF8, 0x0F, 0x08, 0x01, 0xF8, 0x0F, 0x0E, 0x01, 0xF7, 0x0F, 0x14, 0x01, 0xF7, 0x0F
	.byte 0x1B, 0x01, 0xF6, 0x0F, 0x21, 0x01, 0xF6, 0x0F, 0x27, 0x01, 0xF5, 0x0F, 0x2D, 0x01, 0xF5, 0x0F
	.byte 0x34, 0x01, 0xF4, 0x0F, 0x3A, 0x01, 0xF4, 0x0F, 0x40, 0x01, 0xF3, 0x0F, 0x46, 0x01, 0xF3, 0x0F
	.byte 0x4D, 0x01, 0xF2, 0x0F, 0x53, 0x01, 0xF2, 0x0F, 0x59, 0x01, 0xF1, 0x0F, 0x5F, 0x01, 0xF1, 0x0F
	.byte 0x66, 0x01, 0xF0, 0x0F, 0x6C, 0x01, 0xF0, 0x0F, 0x72, 0x01, 0xEF, 0x0F, 0x78, 0x01, 0xEF, 0x0F
	.byte 0x7F, 0x01, 0xEE, 0x0F, 0x85, 0x01, 0xED, 0x0F, 0x8B, 0x01, 0xED, 0x0F, 0x91, 0x01, 0xEC, 0x0F
	.byte 0x98, 0x01, 0xEC, 0x0F, 0x9E, 0x01, 0xEB, 0x0F, 0xA4, 0x01, 0xEA, 0x0F, 0xAA, 0x01, 0xEA, 0x0F
	.byte 0xB1, 0x01, 0xE9, 0x0F, 0xB7, 0x01, 0xE8, 0x0F, 0xBD, 0x01, 0xE8, 0x0F, 0xC3, 0x01, 0xE7, 0x0F
	.byte 0xCA, 0x01, 0xE6, 0x0F, 0xD0, 0x01, 0xE6, 0x0F, 0xD6, 0x01, 0xE5, 0x0F, 0xDC, 0x01, 0xE4, 0x0F
	.byte 0xE3, 0x01, 0xE3, 0x0F, 0xE9, 0x01, 0xE3, 0x0F, 0xEF, 0x01, 0xE2, 0x0F, 0xF5, 0x01, 0xE1, 0x0F
	.byte 0xFC, 0x01, 0xE0, 0x0F, 0x02, 0x02, 0xE0, 0x0F, 0x08, 0x02, 0xDF, 0x0F, 0x0E, 0x02, 0xDE, 0x0F
	.byte 0x15, 0x02, 0xDD, 0x0F, 0x1B, 0x02, 0xDC, 0x0F, 0x21, 0x02, 0xDC, 0x0F, 0x27, 0x02, 0xDB, 0x0F
	.byte 0x2D, 0x02, 0xDA, 0x0F, 0x34, 0x02, 0xD9, 0x0F, 0x3A, 0x02, 0xD8, 0x0F, 0x40, 0x02, 0xD7, 0x0F
	.byte 0x46, 0x02, 0xD6, 0x0F, 0x4D, 0x02, 0xD5, 0x0F, 0x53, 0x02, 0xD5, 0x0F, 0x59, 0x02, 0xD4, 0x0F
	.byte 0x5F, 0x02, 0xD3, 0x0F, 0x65, 0x02, 0xD2, 0x0F, 0x6C, 0x02, 0xD1, 0x0F, 0x72, 0x02, 0xD0, 0x0F
	.byte 0x78, 0x02, 0xCF, 0x0F, 0x7E, 0x02, 0xCE, 0x0F, 0x84, 0x02, 0xCD, 0x0F, 0x8B, 0x02, 0xCC, 0x0F
	.byte 0x91, 0x02, 0xCB, 0x0F, 0x97, 0x02, 0xCA, 0x0F, 0x9D, 0x02, 0xC9, 0x0F, 0xA3, 0x02, 0xC8, 0x0F
	.byte 0xAA, 0x02, 0xC7, 0x0F, 0xB0, 0x02, 0xC6, 0x0F, 0xB6, 0x02, 0xC5, 0x0F, 0xBC, 0x02, 0xC4, 0x0F
	.byte 0xC2, 0x02, 0xC3, 0x0F, 0xC9, 0x02, 0xC2, 0x0F, 0xCF, 0x02, 0xC0, 0x0F, 0xD5, 0x02, 0xBF, 0x0F
	.byte 0xDB, 0x02, 0xBE, 0x0F, 0xE1, 0x02, 0xBD, 0x0F, 0xE8, 0x02, 0xBC, 0x0F, 0xEE, 0x02, 0xBB, 0x0F
	.byte 0xF4, 0x02, 0xBA, 0x0F, 0xFA, 0x02, 0xB8, 0x0F, 0x00, 0x03, 0xB7, 0x0F, 0x06, 0x03, 0xB6, 0x0F
	.byte 0x0D, 0x03, 0xB5, 0x0F, 0x13, 0x03, 0xB4, 0x0F, 0x19, 0x03, 0xB3, 0x0F, 0x1F, 0x03, 0xB1, 0x0F
	.byte 0x25, 0x03, 0xB0, 0x0F, 0x2B, 0x03, 0xAF, 0x0F, 0x32, 0x03, 0xAE, 0x0F, 0x38, 0x03, 0xAC, 0x0F
	.byte 0x3E, 0x03, 0xAB, 0x0F, 0x44, 0x03, 0xAA, 0x0F, 0x4A, 0x03, 0xA8, 0x0F, 0x50, 0x03, 0xA7, 0x0F
	.byte 0x56, 0x03, 0xA6, 0x0F, 0x5D, 0x03, 0xA5, 0x0F, 0x63, 0x03, 0xA3, 0x0F, 0x69, 0x03, 0xA2, 0x0F
	.byte 0x6F, 0x03, 0xA1, 0x0F, 0x75, 0x03, 0x9F, 0x0F, 0x7B, 0x03, 0x9E, 0x0F, 0x81, 0x03, 0x9C, 0x0F
	.byte 0x88, 0x03, 0x9B, 0x0F, 0x8E, 0x03, 0x9A, 0x0F, 0x94, 0x03, 0x98, 0x0F, 0x9A, 0x03, 0x97, 0x0F
	.byte 0xA0, 0x03, 0x95, 0x0F, 0xA6, 0x03, 0x94, 0x0F, 0xAC, 0x03, 0x93, 0x0F, 0xB2, 0x03, 0x91, 0x0F
	.byte 0xB9, 0x03, 0x90, 0x0F, 0xBF, 0x03, 0x8E, 0x0F, 0xC5, 0x03, 0x8D, 0x0F, 0xCB, 0x03, 0x8B, 0x0F
	.byte 0xD1, 0x03, 0x8A, 0x0F, 0xD7, 0x03, 0x88, 0x0F, 0xDD, 0x03, 0x87, 0x0F, 0xE3, 0x03, 0x85, 0x0F
	.byte 0xE9, 0x03, 0x84, 0x0F, 0xEF, 0x03, 0x82, 0x0F, 0xF6, 0x03, 0x81, 0x0F, 0xFC, 0x03, 0x7F, 0x0F
	.byte 0x02, 0x04, 0x7D, 0x0F, 0x08, 0x04, 0x7C, 0x0F, 0x0E, 0x04, 0x7A, 0x0F, 0x14, 0x04, 0x79, 0x0F
	.byte 0x1A, 0x04, 0x77, 0x0F, 0x20, 0x04, 0x76, 0x0F, 0x26, 0x04, 0x74, 0x0F, 0x2C, 0x04, 0x72, 0x0F
	.byte 0x32, 0x04, 0x71, 0x0F, 0x38, 0x04, 0x6F, 0x0F, 0x3E, 0x04, 0x6D, 0x0F, 0x44, 0x04, 0x6C, 0x0F
	.byte 0x4B, 0x04, 0x6A, 0x0F, 0x51, 0x04, 0x68, 0x0F, 0x57, 0x04, 0x67, 0x0F, 0x5D, 0x04, 0x65, 0x0F
	.byte 0x63, 0x04, 0x63, 0x0F, 0x69, 0x04, 0x61, 0x0F, 0x6F, 0x04, 0x60, 0x0F, 0x75, 0x04, 0x5E, 0x0F
	.byte 0x7B, 0x04, 0x5C, 0x0F, 0x81, 0x04, 0x5A, 0x0F, 0x87, 0x04, 0x59, 0x0F, 0x8D, 0x04, 0x57, 0x0F
	.byte 0x93, 0x04, 0x55, 0x0F, 0x99, 0x04, 0x53, 0x0F, 0x9F, 0x04, 0x51, 0x0F, 0xA5, 0x04, 0x50, 0x0F
	.byte 0xAB, 0x04, 0x4E, 0x0F, 0xB1, 0x04, 0x4C, 0x0F, 0xB7, 0x04, 0x4A, 0x0F, 0xBD, 0x04, 0x48, 0x0F
	.byte 0xC3, 0x04, 0x46, 0x0F, 0xC9, 0x04, 0x45, 0x0F, 0xCF, 0x04, 0x43, 0x0F, 0xD5, 0x04, 0x41, 0x0F
	.byte 0xDB, 0x04, 0x3F, 0x0F, 0xE1, 0x04, 0x3D, 0x0F, 0xE7, 0x04, 0x3B, 0x0F, 0xED, 0x04, 0x39, 0x0F
	.byte 0xF3, 0x04, 0x37, 0x0F, 0xF9, 0x04, 0x35, 0x0F, 0xFF, 0x04, 0x33, 0x0F, 0x05, 0x05, 0x31, 0x0F
	.byte 0x0B, 0x05, 0x2F, 0x0F, 0x11, 0x05, 0x2D, 0x0F, 0x17, 0x05, 0x2B, 0x0F, 0x1D, 0x05, 0x29, 0x0F
	.byte 0x23, 0x05, 0x27, 0x0F, 0x29, 0x05, 0x25, 0x0F, 0x2F, 0x05, 0x23, 0x0F, 0x34, 0x05, 0x21, 0x0F
	.byte 0x3A, 0x05, 0x1F, 0x0F, 0x40, 0x05, 0x1D, 0x0F, 0x46, 0x05, 0x1B, 0x0F, 0x4C, 0x05, 0x19, 0x0F
	.byte 0x52, 0x05, 0x17, 0x0F, 0x58, 0x05, 0x15, 0x0F, 0x5E, 0x05, 0x13, 0x0F, 0x64, 0x05, 0x11, 0x0F
	.byte 0x6A, 0x05, 0x0E, 0x0F, 0x70, 0x05, 0x0C, 0x0F, 0x76, 0x05, 0x0A, 0x0F, 0x7C, 0x05, 0x08, 0x0F
	.byte 0x81, 0x05, 0x06, 0x0F, 0x87, 0x05, 0x04, 0x0F, 0x8D, 0x05, 0x02, 0x0F, 0x93, 0x05, 0xFF, 0x0E
	.byte 0x99, 0x05, 0xFD, 0x0E, 0x9F, 0x05, 0xFB, 0x0E, 0xA5, 0x05, 0xF9, 0x0E, 0xAB, 0x05, 0xF7, 0x0E
	.byte 0xB1, 0x05, 0xF4, 0x0E, 0xB6, 0x05, 0xF2, 0x0E, 0xBC, 0x05, 0xF0, 0x0E, 0xC2, 0x05, 0xEE, 0x0E
	.byte 0xC8, 0x05, 0xEB, 0x0E, 0xCE, 0x05, 0xE9, 0x0E, 0xD4, 0x05, 0xE7, 0x0E, 0xDA, 0x05, 0xE4, 0x0E
	.byte 0xDF, 0x05, 0xE2, 0x0E, 0xE5, 0x05, 0xE0, 0x0E, 0xEB, 0x05, 0xDD, 0x0E, 0xF1, 0x05, 0xDB, 0x0E
	.byte 0xF7, 0x05, 0xD9, 0x0E, 0xFD, 0x05, 0xD6, 0x0E, 0x02, 0x06, 0xD4, 0x0E, 0x08, 0x06, 0xD2, 0x0E
	.byte 0x0E, 0x06, 0xCF, 0x0E, 0x14, 0x06, 0xCD, 0x0E, 0x1A, 0x06, 0xCB, 0x0E, 0x1F, 0x06, 0xC8, 0x0E
	.byte 0x25, 0x06, 0xC6, 0x0E, 0x2B, 0x06, 0xC3, 0x0E, 0x31, 0x06, 0xC1, 0x0E, 0x37, 0x06, 0xBF, 0x0E
	.byte 0x3C, 0x06, 0xBC, 0x0E, 0x42, 0x06, 0xBA, 0x0E, 0x48, 0x06, 0xB7, 0x0E, 0x4E, 0x06, 0xB5, 0x0E
	.byte 0x54, 0x06, 0xB2, 0x0E, 0x59, 0x06, 0xB0, 0x0E, 0x5F, 0x06, 0xAD, 0x0E, 0x65, 0x06, 0xAB, 0x0E
	.byte 0x6B, 0x06, 0xA8, 0x0E, 0x70, 0x06, 0xA6, 0x0E, 0x76, 0x06, 0xA3, 0x0E, 0x7C, 0x06, 0xA1, 0x0E
	.byte 0x82, 0x06, 0x9E, 0x0E, 0x87, 0x06, 0x9B, 0x0E, 0x8D, 0x06, 0x99, 0x0E, 0x93, 0x06, 0x96, 0x0E
	.byte 0x99, 0x06, 0x94, 0x0E, 0x9E, 0x06, 0x91, 0x0E, 0xA4, 0x06, 0x8F, 0x0E, 0xAA, 0x06, 0x8C, 0x0E
	.byte 0xAF, 0x06, 0x89, 0x0E, 0xB5, 0x06, 0x87, 0x0E, 0xBB, 0x06, 0x84, 0x0E, 0xC1, 0x06, 0x81, 0x0E
	.byte 0xC6, 0x06, 0x7F, 0x0E, 0xCC, 0x06, 0x7C, 0x0E, 0xD2, 0x06, 0x79, 0x0E, 0xD7, 0x06, 0x77, 0x0E
	.byte 0xDD, 0x06, 0x74, 0x0E, 0xE3, 0x06, 0x71, 0x0E, 0xE8, 0x06, 0x6F, 0x0E, 0xEE, 0x06, 0x6C, 0x0E
	.byte 0xF4, 0x06, 0x69, 0x0E, 0xF9, 0x06, 0x66, 0x0E, 0xFF, 0x06, 0x64, 0x0E, 0x05, 0x07, 0x61, 0x0E
	.byte 0x0A, 0x07, 0x5E, 0x0E, 0x10, 0x07, 0x5B, 0x0E, 0x15, 0x07, 0x59, 0x0E, 0x1B, 0x07, 0x56, 0x0E
	.byte 0x21, 0x07, 0x53, 0x0E, 0x26, 0x07, 0x50, 0x0E, 0x2C, 0x07, 0x4D, 0x0E, 0x32, 0x07, 0x4B, 0x0E
	.byte 0x37, 0x07, 0x48, 0x0E, 0x3D, 0x07, 0x45, 0x0E, 0x42, 0x07, 0x42, 0x0E, 0x48, 0x07, 0x3F, 0x0E
	.byte 0x4E, 0x07, 0x3C, 0x0E, 0x53, 0x07, 0x3A, 0x0E, 0x59, 0x07, 0x37, 0x0E, 0x5E, 0x07, 0x34, 0x0E
	.byte 0x64, 0x07, 0x31, 0x0E, 0x6A, 0x07, 0x2E, 0x0E, 0x6F, 0x07, 0x2B, 0x0E, 0x75, 0x07, 0x28, 0x0E
	.byte 0x7A, 0x07, 0x25, 0x0E, 0x80, 0x07, 0x22, 0x0E, 0x85, 0x07, 0x1F, 0x0E, 0x8B, 0x07, 0x1C, 0x0E
	.byte 0x90, 0x07, 0x19, 0x0E, 0x96, 0x07, 0x16, 0x0E, 0x9B, 0x07, 0x13, 0x0E, 0xA1, 0x07, 0x10, 0x0E
	.byte 0xA6, 0x07, 0x0D, 0x0E, 0xAC, 0x07, 0x0A, 0x0E, 0xB2, 0x07, 0x07, 0x0E, 0xB7, 0x07, 0x04, 0x0E
	.byte 0xBD, 0x07, 0x01, 0x0E, 0xC2, 0x07, 0xFE, 0x0D, 0xC8, 0x07, 0xFB, 0x0D, 0xCD, 0x07, 0xF8, 0x0D
	.byte 0xD2, 0x07, 0xF5, 0x0D, 0xD8, 0x07, 0xF2, 0x0D, 0xDD, 0x07, 0xEF, 0x0D, 0xE3, 0x07, 0xEC, 0x0D
	.byte 0xE8, 0x07, 0xE9, 0x0D, 0xEE, 0x07, 0xE6, 0x0D, 0xF3, 0x07, 0xE3, 0x0D, 0xF9, 0x07, 0xDF, 0x0D
	.byte 0xFE, 0x07, 0xDC, 0x0D, 0x04, 0x08, 0xD9, 0x0D, 0x09, 0x08, 0xD6, 0x0D, 0x0E, 0x08, 0xD3, 0x0D
	.byte 0x14, 0x08, 0xD0, 0x0D, 0x19, 0x08, 0xCC, 0x0D, 0x1F, 0x08, 0xC9, 0x0D, 0x24, 0x08, 0xC6, 0x0D
	.byte 0x2A, 0x08, 0xC3, 0x0D, 0x2F, 0x08, 0xC0, 0x0D, 0x34, 0x08, 0xBC, 0x0D, 0x3A, 0x08, 0xB9, 0x0D
	.byte 0x3F, 0x08, 0xB6, 0x0D, 0x45, 0x08, 0xB3, 0x0D, 0x4A, 0x08, 0xB0, 0x0D, 0x4F, 0x08, 0xAC, 0x0D
	.byte 0x55, 0x08, 0xA9, 0x0D, 0x5A, 0x08, 0xA6, 0x0D, 0x5F, 0x08, 0xA2, 0x0D, 0x65, 0x08, 0x9F, 0x0D
	.byte 0x6A, 0x08, 0x9C, 0x0D, 0x6F, 0x08, 0x99, 0x0D, 0x75, 0x08, 0x95, 0x0D, 0x7A, 0x08, 0x92, 0x0D
	.byte 0x7F, 0x08, 0x8F, 0x0D, 0x85, 0x08, 0x8B, 0x0D, 0x8A, 0x08, 0x88, 0x0D, 0x8F, 0x08, 0x85, 0x0D
	.byte 0x95, 0x08, 0x81, 0x0D, 0x9A, 0x08, 0x7E, 0x0D, 0x9F, 0x08, 0x7A, 0x0D, 0xA5, 0x08, 0x77, 0x0D
	.byte 0xAA, 0x08, 0x74, 0x0D, 0xAF, 0x08, 0x70, 0x0D, 0xB4, 0x08, 0x6D, 0x0D, 0xBA, 0x08, 0x69, 0x0D
	.byte 0xBF, 0x08, 0x66, 0x0D, 0xC4, 0x08, 0x62, 0x0D, 0xC9, 0x08, 0x5F, 0x0D, 0xCF, 0x08, 0x5C, 0x0D
	.byte 0xD4, 0x08, 0x58, 0x0D, 0xD9, 0x08, 0x55, 0x0D, 0xDE, 0x08, 0x51, 0x0D, 0xE4, 0x08, 0x4E, 0x0D
	.byte 0xE9, 0x08, 0x4A, 0x0D, 0xEE, 0x08, 0x47, 0x0D, 0xF3, 0x08, 0x43, 0x0D, 0xF8, 0x08, 0x40, 0x0D
	.byte 0xFE, 0x08, 0x3C, 0x0D, 0x03, 0x09, 0x39, 0x0D, 0x08, 0x09, 0x35, 0x0D, 0x0D, 0x09, 0x32, 0x0D
	.byte 0x12, 0x09, 0x2E, 0x0D, 0x18, 0x09, 0x2A, 0x0D, 0x1D, 0x09, 0x27, 0x0D, 0x22, 0x09, 0x23, 0x0D
	.byte 0x27, 0x09, 0x20, 0x0D, 0x2C, 0x09, 0x1C, 0x0D, 0x31, 0x09, 0x18, 0x0D, 0x37, 0x09, 0x15, 0x0D
	.byte 0x3C, 0x09, 0x11, 0x0D, 0x41, 0x09, 0x0E, 0x0D, 0x46, 0x09, 0x0A, 0x0D, 0x4B, 0x09, 0x06, 0x0D
	.byte 0x50, 0x09, 0x03, 0x0D, 0x55, 0x09, 0xFF, 0x0C, 0x5A, 0x09, 0xFB, 0x0C, 0x5F, 0x09, 0xF8, 0x0C
	.byte 0x65, 0x09, 0xF4, 0x0C, 0x6A, 0x09, 0xF0, 0x0C, 0x6F, 0x09, 0xED, 0x0C, 0x74, 0x09, 0xE9, 0x0C
	.byte 0x79, 0x09, 0xE5, 0x0C, 0x7E, 0x09, 0xE1, 0x0C, 0x83, 0x09, 0xDE, 0x0C, 0x88, 0x09, 0xDA, 0x0C
	.byte 0x8D, 0x09, 0xD6, 0x0C, 0x92, 0x09, 0xD2, 0x0C, 0x97, 0x09, 0xCF, 0x0C, 0x9C, 0x09, 0xCB, 0x0C
	.byte 0xA1, 0x09, 0xC7, 0x0C, 0xA6, 0x09, 0xC3, 0x0C, 0xAB, 0x09, 0xC0, 0x0C, 0xB0, 0x09, 0xBC, 0x0C
	.byte 0xB5, 0x09, 0xB8, 0x0C, 0xBA, 0x09, 0xB4, 0x0C, 0xBF, 0x09, 0xB0, 0x0C, 0xC4, 0x09, 0xAC, 0x0C
	.byte 0xC9, 0x09, 0xA9, 0x0C, 0xCE, 0x09, 0xA5, 0x0C, 0xD3, 0x09, 0xA1, 0x0C, 0xD8, 0x09, 0x9D, 0x0C
	.byte 0xDD, 0x09, 0x99, 0x0C, 0xE2, 0x09, 0x95, 0x0C, 0xE7, 0x09, 0x91, 0x0C, 0xEC, 0x09, 0x8E, 0x0C
	.byte 0xF1, 0x09, 0x8A, 0x0C, 0xF6, 0x09, 0x86, 0x0C, 0xFB, 0x09, 0x82, 0x0C, 0xFF, 0x09, 0x7E, 0x0C
	.byte 0x04, 0x0A, 0x7A, 0x0C, 0x09, 0x0A, 0x76, 0x0C, 0x0E, 0x0A, 0x72, 0x0C, 0x13, 0x0A, 0x6E, 0x0C
	.byte 0x18, 0x0A, 0x6A, 0x0C, 0x1D, 0x0A, 0x66, 0x0C, 0x22, 0x0A, 0x62, 0x0C, 0x26, 0x0A, 0x5E, 0x0C
	.byte 0x2B, 0x0A, 0x5A, 0x0C, 0x30, 0x0A, 0x56, 0x0C, 0x35, 0x0A, 0x52, 0x0C, 0x3A, 0x0A, 0x4E, 0x0C
	.byte 0x3F, 0x0A, 0x4A, 0x0C, 0x44, 0x0A, 0x46, 0x0C, 0x48, 0x0A, 0x42, 0x0C, 0x4D, 0x0A, 0x3E, 0x0C
	.byte 0x52, 0x0A, 0x3A, 0x0C, 0x57, 0x0A, 0x36, 0x0C, 0x5C, 0x0A, 0x32, 0x0C, 0x60, 0x0A, 0x2E, 0x0C
	.byte 0x65, 0x0A, 0x2A, 0x0C, 0x6A, 0x0A, 0x26, 0x0C, 0x6F, 0x0A, 0x22, 0x0C, 0x73, 0x0A, 0x1E, 0x0C
	.byte 0x78, 0x0A, 0x19, 0x0C, 0x7D, 0x0A, 0x15, 0x0C, 0x82, 0x0A, 0x11, 0x0C, 0x86, 0x0A, 0x0D, 0x0C
	.byte 0x8B, 0x0A, 0x09, 0x0C, 0x90, 0x0A, 0x05, 0x0C, 0x95, 0x0A, 0x01, 0x0C, 0x99, 0x0A, 0xFC, 0x0B
	.byte 0x9E, 0x0A, 0xF8, 0x0B, 0xA3, 0x0A, 0xF4, 0x0B, 0xA7, 0x0A, 0xF0, 0x0B, 0xAC, 0x0A, 0xEC, 0x0B
	.byte 0xB1, 0x0A, 0xE8, 0x0B, 0xB5, 0x0A, 0xE3, 0x0B, 0xBA, 0x0A, 0xDF, 0x0B, 0xBF, 0x0A, 0xDB, 0x0B
	.byte 0xC3, 0x0A, 0xD7, 0x0B, 0xC8, 0x0A, 0xD2, 0x0B, 0xCD, 0x0A, 0xCE, 0x0B, 0xD1, 0x0A, 0xCA, 0x0B
	.byte 0xD6, 0x0A, 0xC6, 0x0B, 0xDB, 0x0A, 0xC1, 0x0B, 0xDF, 0x0A, 0xBD, 0x0B, 0xE4, 0x0A, 0xB9, 0x0B
	.byte 0xE8, 0x0A, 0xB5, 0x0B, 0xED, 0x0A, 0xB0, 0x0B, 0xF2, 0x0A, 0xAC, 0x0B, 0xF6, 0x0A, 0xA8, 0x0B
	.byte 0xFB, 0x0A, 0xA3, 0x0B, 0xFF, 0x0A, 0x9F, 0x0B, 0x04, 0x0B, 0x9B, 0x0B, 0x08, 0x0B, 0x97, 0x0B
	.byte 0x0D, 0x0B, 0x92, 0x0B, 0x11, 0x0B, 0x8E, 0x0B, 0x16, 0x0B, 0x89, 0x0B, 0x1B, 0x0B, 0x85, 0x0B
	.byte 0x1F, 0x0B, 0x81, 0x0B, 0x24, 0x0B, 0x7C, 0x0B, 0x28, 0x0B, 0x78, 0x0B, 0x2D, 0x0B, 0x74, 0x0B
	.byte 0x31, 0x0B, 0x6F, 0x0B, 0x36, 0x0B, 0x6B, 0x0B, 0x3A, 0x0B, 0x66, 0x0B, 0x3E, 0x0B, 0x62, 0x0B
	.byte 0x43, 0x0B, 0x5E, 0x0B, 0x47, 0x0B, 0x59, 0x0B, 0x4C, 0x0B, 0x55, 0x0B, 0x50, 0x0B, 0x50, 0x0B
	.byte 0x55, 0x0B, 0x4C, 0x0B, 0x59, 0x0B, 0x47, 0x0B, 0x5E, 0x0B, 0x43, 0x0B, 0x62, 0x0B, 0x3E, 0x0B
	.byte 0x66, 0x0B, 0x3A, 0x0B, 0x6B, 0x0B, 0x36, 0x0B, 0x6F, 0x0B, 0x31, 0x0B, 0x74, 0x0B, 0x2D, 0x0B
	.byte 0x78, 0x0B, 0x28, 0x0B, 0x7C, 0x0B, 0x24, 0x0B, 0x81, 0x0B, 0x1F, 0x0B, 0x85, 0x0B, 0x1B, 0x0B
	.byte 0x89, 0x0B, 0x16, 0x0B, 0x8E, 0x0B, 0x11, 0x0B, 0x92, 0x0B, 0x0D, 0x0B, 0x97, 0x0B, 0x08, 0x0B
	.byte 0x9B, 0x0B, 0x04, 0x0B, 0x9F, 0x0B, 0xFF, 0x0A, 0xA3, 0x0B, 0xFB, 0x0A, 0xA8, 0x0B, 0xF6, 0x0A
	.byte 0xAC, 0x0B, 0xF2, 0x0A, 0xB0, 0x0B, 0xED, 0x0A, 0xB5, 0x0B, 0xE8, 0x0A, 0xB9, 0x0B, 0xE4, 0x0A
	.byte 0xBD, 0x0B, 0xDF, 0x0A, 0xC1, 0x0B, 0xDB, 0x0A, 0xC6, 0x0B, 0xD6, 0x0A, 0xCA, 0x0B, 0xD1, 0x0A
	.byte 0xCE, 0x0B, 0xCD, 0x0A, 0xD2, 0x0B, 0xC8, 0x0A, 0xD7, 0x0B, 0xC3, 0x0A, 0xDB, 0x0B, 0xBF, 0x0A
	.byte 0xDF, 0x0B, 0xBA, 0x0A, 0xE3, 0x0B, 0xB5, 0x0A, 0xE8, 0x0B, 0xB1, 0x0A, 0xEC, 0x0B, 0xAC, 0x0A
	.byte 0xF0, 0x0B, 0xA7, 0x0A, 0xF4, 0x0B, 0xA3, 0x0A, 0xF8, 0x0B, 0x9E, 0x0A, 0xFC, 0x0B, 0x99, 0x0A
	.byte 0x01, 0x0C, 0x95, 0x0A, 0x05, 0x0C, 0x90, 0x0A, 0x09, 0x0C, 0x8B, 0x0A, 0x0D, 0x0C, 0x86, 0x0A
	.byte 0x11, 0x0C, 0x82, 0x0A, 0x15, 0x0C, 0x7D, 0x0A, 0x19, 0x0C, 0x78, 0x0A, 0x1E, 0x0C, 0x73, 0x0A
	.byte 0x22, 0x0C, 0x6F, 0x0A, 0x26, 0x0C, 0x6A, 0x0A, 0x2A, 0x0C, 0x65, 0x0A, 0x2E, 0x0C, 0x60, 0x0A
	.byte 0x32, 0x0C, 0x5C, 0x0A, 0x36, 0x0C, 0x57, 0x0A, 0x3A, 0x0C, 0x52, 0x0A, 0x3E, 0x0C, 0x4D, 0x0A
	.byte 0x42, 0x0C, 0x48, 0x0A, 0x46, 0x0C, 0x44, 0x0A, 0x4A, 0x0C, 0x3F, 0x0A, 0x4E, 0x0C, 0x3A, 0x0A
	.byte 0x52, 0x0C, 0x35, 0x0A, 0x56, 0x0C, 0x30, 0x0A, 0x5A, 0x0C, 0x2B, 0x0A, 0x5E, 0x0C, 0x26, 0x0A
	.byte 0x62, 0x0C, 0x22, 0x0A, 0x66, 0x0C, 0x1D, 0x0A, 0x6A, 0x0C, 0x18, 0x0A, 0x6E, 0x0C, 0x13, 0x0A
	.byte 0x72, 0x0C, 0x0E, 0x0A, 0x76, 0x0C, 0x09, 0x0A, 0x7A, 0x0C, 0x04, 0x0A, 0x7E, 0x0C, 0xFF, 0x09
	.byte 0x82, 0x0C, 0xFB, 0x09, 0x86, 0x0C, 0xF6, 0x09, 0x8A, 0x0C, 0xF1, 0x09, 0x8E, 0x0C, 0xEC, 0x09
	.byte 0x91, 0x0C, 0xE7, 0x09, 0x95, 0x0C, 0xE2, 0x09, 0x99, 0x0C, 0xDD, 0x09, 0x9D, 0x0C, 0xD8, 0x09
	.byte 0xA1, 0x0C, 0xD3, 0x09, 0xA5, 0x0C, 0xCE, 0x09, 0xA9, 0x0C, 0xC9, 0x09, 0xAC, 0x0C, 0xC4, 0x09
	.byte 0xB0, 0x0C, 0xBF, 0x09, 0xB4, 0x0C, 0xBA, 0x09, 0xB8, 0x0C, 0xB5, 0x09, 0xBC, 0x0C, 0xB0, 0x09
	.byte 0xC0, 0x0C, 0xAB, 0x09, 0xC3, 0x0C, 0xA6, 0x09, 0xC7, 0x0C, 0xA1, 0x09, 0xCB, 0x0C, 0x9C, 0x09
	.byte 0xCF, 0x0C, 0x97, 0x09, 0xD2, 0x0C, 0x92, 0x09, 0xD6, 0x0C, 0x8D, 0x09, 0xDA, 0x0C, 0x88, 0x09
	.byte 0xDE, 0x0C, 0x83, 0x09, 0xE1, 0x0C, 0x7E, 0x09, 0xE5, 0x0C, 0x79, 0x09, 0xE9, 0x0C, 0x74, 0x09
	.byte 0xED, 0x0C, 0x6F, 0x09, 0xF0, 0x0C, 0x6A, 0x09, 0xF4, 0x0C, 0x65, 0x09, 0xF8, 0x0C, 0x5F, 0x09
	.byte 0xFB, 0x0C, 0x5A, 0x09, 0xFF, 0x0C, 0x55, 0x09, 0x03, 0x0D, 0x50, 0x09, 0x06, 0x0D, 0x4B, 0x09
	.byte 0x0A, 0x0D, 0x46, 0x09, 0x0E, 0x0D, 0x41, 0x09, 0x11, 0x0D, 0x3C, 0x09, 0x15, 0x0D, 0x37, 0x09
	.byte 0x18, 0x0D, 0x31, 0x09, 0x1C, 0x0D, 0x2C, 0x09, 0x20, 0x0D, 0x27, 0x09, 0x23, 0x0D, 0x22, 0x09
	.byte 0x27, 0x0D, 0x1D, 0x09, 0x2A, 0x0D, 0x18, 0x09, 0x2E, 0x0D, 0x12, 0x09, 0x32, 0x0D, 0x0D, 0x09
	.byte 0x35, 0x0D, 0x08, 0x09, 0x39, 0x0D, 0x03, 0x09, 0x3C, 0x0D, 0xFE, 0x08, 0x40, 0x0D, 0xF8, 0x08
	.byte 0x43, 0x0D, 0xF3, 0x08, 0x47, 0x0D, 0xEE, 0x08, 0x4A, 0x0D, 0xE9, 0x08, 0x4E, 0x0D, 0xE4, 0x08
	.byte 0x51, 0x0D, 0xDE, 0x08, 0x55, 0x0D, 0xD9, 0x08, 0x58, 0x0D, 0xD4, 0x08, 0x5C, 0x0D, 0xCF, 0x08
	.byte 0x5F, 0x0D, 0xC9, 0x08, 0x62, 0x0D, 0xC4, 0x08, 0x66, 0x0D, 0xBF, 0x08, 0x69, 0x0D, 0xBA, 0x08
	.byte 0x6D, 0x0D, 0xB4, 0x08, 0x70, 0x0D, 0xAF, 0x08, 0x74, 0x0D, 0xAA, 0x08, 0x77, 0x0D, 0xA5, 0x08
	.byte 0x7A, 0x0D, 0x9F, 0x08, 0x7E, 0x0D, 0x9A, 0x08, 0x81, 0x0D, 0x95, 0x08, 0x85, 0x0D, 0x8F, 0x08
	.byte 0x88, 0x0D, 0x8A, 0x08, 0x8B, 0x0D, 0x85, 0x08, 0x8F, 0x0D, 0x7F, 0x08, 0x92, 0x0D, 0x7A, 0x08
	.byte 0x95, 0x0D, 0x75, 0x08, 0x99, 0x0D, 0x6F, 0x08, 0x9C, 0x0D, 0x6A, 0x08, 0x9F, 0x0D, 0x65, 0x08
	.byte 0xA2, 0x0D, 0x5F, 0x08, 0xA6, 0x0D, 0x5A, 0x08, 0xA9, 0x0D, 0x55, 0x08, 0xAC, 0x0D, 0x4F, 0x08
	.byte 0xB0, 0x0D, 0x4A, 0x08, 0xB3, 0x0D, 0x45, 0x08, 0xB6, 0x0D, 0x3F, 0x08, 0xB9, 0x0D, 0x3A, 0x08
	.byte 0xBC, 0x0D, 0x34, 0x08, 0xC0, 0x0D, 0x2F, 0x08, 0xC3, 0x0D, 0x2A, 0x08, 0xC6, 0x0D, 0x24, 0x08
	.byte 0xC9, 0x0D, 0x1F, 0x08, 0xCC, 0x0D, 0x19, 0x08, 0xD0, 0x0D, 0x14, 0x08, 0xD3, 0x0D, 0x0E, 0x08
	.byte 0xD6, 0x0D, 0x09, 0x08, 0xD9, 0x0D, 0x04, 0x08, 0xDC, 0x0D, 0xFE, 0x07, 0xDF, 0x0D, 0xF9, 0x07
	.byte 0xE3, 0x0D, 0xF3, 0x07, 0xE6, 0x0D, 0xEE, 0x07, 0xE9, 0x0D, 0xE8, 0x07, 0xEC, 0x0D, 0xE3, 0x07
	.byte 0xEF, 0x0D, 0xDD, 0x07, 0xF2, 0x0D, 0xD8, 0x07, 0xF5, 0x0D, 0xD2, 0x07, 0xF8, 0x0D, 0xCD, 0x07
	.byte 0xFB, 0x0D, 0xC8, 0x07, 0xFE, 0x0D, 0xC2, 0x07, 0x01, 0x0E, 0xBD, 0x07, 0x04, 0x0E, 0xB7, 0x07
	.byte 0x07, 0x0E, 0xB2, 0x07, 0x0A, 0x0E, 0xAC, 0x07, 0x0D, 0x0E, 0xA6, 0x07, 0x10, 0x0E, 0xA1, 0x07
	.byte 0x13, 0x0E, 0x9B, 0x07, 0x16, 0x0E, 0x96, 0x07, 0x19, 0x0E, 0x90, 0x07, 0x1C, 0x0E, 0x8B, 0x07
	.byte 0x1F, 0x0E, 0x85, 0x07, 0x22, 0x0E, 0x80, 0x07, 0x25, 0x0E, 0x7A, 0x07, 0x28, 0x0E, 0x75, 0x07
	.byte 0x2B, 0x0E, 0x6F, 0x07, 0x2E, 0x0E, 0x6A, 0x07, 0x31, 0x0E, 0x64, 0x07, 0x34, 0x0E, 0x5E, 0x07
	.byte 0x37, 0x0E, 0x59, 0x07, 0x3A, 0x0E, 0x53, 0x07, 0x3C, 0x0E, 0x4E, 0x07, 0x3F, 0x0E, 0x48, 0x07
	.byte 0x42, 0x0E, 0x42, 0x07, 0x45, 0x0E, 0x3D, 0x07, 0x48, 0x0E, 0x37, 0x07, 0x4B, 0x0E, 0x32, 0x07
	.byte 0x4D, 0x0E, 0x2C, 0x07, 0x50, 0x0E, 0x26, 0x07, 0x53, 0x0E, 0x21, 0x07, 0x56, 0x0E, 0x1B, 0x07
	.byte 0x59, 0x0E, 0x15, 0x07, 0x5B, 0x0E, 0x10, 0x07, 0x5E, 0x0E, 0x0A, 0x07, 0x61, 0x0E, 0x05, 0x07
	.byte 0x64, 0x0E, 0xFF, 0x06, 0x66, 0x0E, 0xF9, 0x06, 0x69, 0x0E, 0xF4, 0x06, 0x6C, 0x0E, 0xEE, 0x06
	.byte 0x6F, 0x0E, 0xE8, 0x06, 0x71, 0x0E, 0xE3, 0x06, 0x74, 0x0E, 0xDD, 0x06, 0x77, 0x0E, 0xD7, 0x06
	.byte 0x79, 0x0E, 0xD2, 0x06, 0x7C, 0x0E, 0xCC, 0x06, 0x7F, 0x0E, 0xC6, 0x06, 0x81, 0x0E, 0xC1, 0x06
	.byte 0x84, 0x0E, 0xBB, 0x06, 0x87, 0x0E, 0xB5, 0x06, 0x89, 0x0E, 0xAF, 0x06, 0x8C, 0x0E, 0xAA, 0x06
	.byte 0x8F, 0x0E, 0xA4, 0x06, 0x91, 0x0E, 0x9E, 0x06, 0x94, 0x0E, 0x99, 0x06, 0x96, 0x0E, 0x93, 0x06
	.byte 0x99, 0x0E, 0x8D, 0x06, 0x9B, 0x0E, 0x87, 0x06, 0x9E, 0x0E, 0x82, 0x06, 0xA1, 0x0E, 0x7C, 0x06
	.byte 0xA3, 0x0E, 0x76, 0x06, 0xA6, 0x0E, 0x70, 0x06, 0xA8, 0x0E, 0x6B, 0x06, 0xAB, 0x0E, 0x65, 0x06
	.byte 0xAD, 0x0E, 0x5F, 0x06, 0xB0, 0x0E, 0x59, 0x06, 0xB2, 0x0E, 0x54, 0x06, 0xB5, 0x0E, 0x4E, 0x06
	.byte 0xB7, 0x0E, 0x48, 0x06, 0xBA, 0x0E, 0x42, 0x06, 0xBC, 0x0E, 0x3C, 0x06, 0xBF, 0x0E, 0x37, 0x06
	.byte 0xC1, 0x0E, 0x31, 0x06, 0xC3, 0x0E, 0x2B, 0x06, 0xC6, 0x0E, 0x25, 0x06, 0xC8, 0x0E, 0x1F, 0x06
	.byte 0xCB, 0x0E, 0x1A, 0x06, 0xCD, 0x0E, 0x14, 0x06, 0xCF, 0x0E, 0x0E, 0x06, 0xD2, 0x0E, 0x08, 0x06
	.byte 0xD4, 0x0E, 0x02, 0x06, 0xD6, 0x0E, 0xFD, 0x05, 0xD9, 0x0E, 0xF7, 0x05, 0xDB, 0x0E, 0xF1, 0x05
	.byte 0xDD, 0x0E, 0xEB, 0x05, 0xE0, 0x0E, 0xE5, 0x05, 0xE2, 0x0E, 0xDF, 0x05, 0xE4, 0x0E, 0xDA, 0x05
	.byte 0xE7, 0x0E, 0xD4, 0x05, 0xE9, 0x0E, 0xCE, 0x05, 0xEB, 0x0E, 0xC8, 0x05, 0xEE, 0x0E, 0xC2, 0x05
	.byte 0xF0, 0x0E, 0xBC, 0x05, 0xF2, 0x0E, 0xB6, 0x05, 0xF4, 0x0E, 0xB1, 0x05, 0xF7, 0x0E, 0xAB, 0x05
	.byte 0xF9, 0x0E, 0xA5, 0x05, 0xFB, 0x0E, 0x9F, 0x05, 0xFD, 0x0E, 0x99, 0x05, 0xFF, 0x0E, 0x93, 0x05
	.byte 0x02, 0x0F, 0x8D, 0x05, 0x04, 0x0F, 0x87, 0x05, 0x06, 0x0F, 0x81, 0x05, 0x08, 0x0F, 0x7C, 0x05
	.byte 0x0A, 0x0F, 0x76, 0x05, 0x0C, 0x0F, 0x70, 0x05, 0x0E, 0x0F, 0x6A, 0x05, 0x11, 0x0F, 0x64, 0x05
	.byte 0x13, 0x0F, 0x5E, 0x05, 0x15, 0x0F, 0x58, 0x05, 0x17, 0x0F, 0x52, 0x05, 0x19, 0x0F, 0x4C, 0x05
	.byte 0x1B, 0x0F, 0x46, 0x05, 0x1D, 0x0F, 0x40, 0x05, 0x1F, 0x0F, 0x3A, 0x05, 0x21, 0x0F, 0x34, 0x05
	.byte 0x23, 0x0F, 0x2F, 0x05, 0x25, 0x0F, 0x29, 0x05, 0x27, 0x0F, 0x23, 0x05, 0x29, 0x0F, 0x1D, 0x05
	.byte 0x2B, 0x0F, 0x17, 0x05, 0x2D, 0x0F, 0x11, 0x05, 0x2F, 0x0F, 0x0B, 0x05, 0x31, 0x0F, 0x05, 0x05
	.byte 0x33, 0x0F, 0xFF, 0x04, 0x35, 0x0F, 0xF9, 0x04, 0x37, 0x0F, 0xF3, 0x04, 0x39, 0x0F, 0xED, 0x04
	.byte 0x3B, 0x0F, 0xE7, 0x04, 0x3D, 0x0F, 0xE1, 0x04, 0x3F, 0x0F, 0xDB, 0x04, 0x41, 0x0F, 0xD5, 0x04
	.byte 0x43, 0x0F, 0xCF, 0x04, 0x45, 0x0F, 0xC9, 0x04, 0x46, 0x0F, 0xC3, 0x04, 0x48, 0x0F, 0xBD, 0x04
	.byte 0x4A, 0x0F, 0xB7, 0x04, 0x4C, 0x0F, 0xB1, 0x04, 0x4E, 0x0F, 0xAB, 0x04, 0x50, 0x0F, 0xA5, 0x04
	.byte 0x51, 0x0F, 0x9F, 0x04, 0x53, 0x0F, 0x99, 0x04, 0x55, 0x0F, 0x93, 0x04, 0x57, 0x0F, 0x8D, 0x04
	.byte 0x59, 0x0F, 0x87, 0x04, 0x5A, 0x0F, 0x81, 0x04, 0x5C, 0x0F, 0x7B, 0x04, 0x5E, 0x0F, 0x75, 0x04
	.byte 0x60, 0x0F, 0x6F, 0x04, 0x61, 0x0F, 0x69, 0x04, 0x63, 0x0F, 0x63, 0x04, 0x65, 0x0F, 0x5D, 0x04
	.byte 0x67, 0x0F, 0x57, 0x04, 0x68, 0x0F, 0x51, 0x04, 0x6A, 0x0F, 0x4B, 0x04, 0x6C, 0x0F, 0x44, 0x04
	.byte 0x6D, 0x0F, 0x3E, 0x04, 0x6F, 0x0F, 0x38, 0x04, 0x71, 0x0F, 0x32, 0x04, 0x72, 0x0F, 0x2C, 0x04
	.byte 0x74, 0x0F, 0x26, 0x04, 0x76, 0x0F, 0x20, 0x04, 0x77, 0x0F, 0x1A, 0x04, 0x79, 0x0F, 0x14, 0x04
	.byte 0x7A, 0x0F, 0x0E, 0x04, 0x7C, 0x0F, 0x08, 0x04, 0x7D, 0x0F, 0x02, 0x04, 0x7F, 0x0F, 0xFC, 0x03
	.byte 0x81, 0x0F, 0xF6, 0x03, 0x82, 0x0F, 0xEF, 0x03, 0x84, 0x0F, 0xE9, 0x03, 0x85, 0x0F, 0xE3, 0x03
	.byte 0x87, 0x0F, 0xDD, 0x03, 0x88, 0x0F, 0xD7, 0x03, 0x8A, 0x0F, 0xD1, 0x03, 0x8B, 0x0F, 0xCB, 0x03
	.byte 0x8D, 0x0F, 0xC5, 0x03, 0x8E, 0x0F, 0xBF, 0x03, 0x90, 0x0F, 0xB9, 0x03, 0x91, 0x0F, 0xB2, 0x03
	.byte 0x93, 0x0F, 0xAC, 0x03, 0x94, 0x0F, 0xA6, 0x03, 0x95, 0x0F, 0xA0, 0x03, 0x97, 0x0F, 0x9A, 0x03
	.byte 0x98, 0x0F, 0x94, 0x03, 0x9A, 0x0F, 0x8E, 0x03, 0x9B, 0x0F, 0x88, 0x03, 0x9C, 0x0F, 0x81, 0x03
	.byte 0x9E, 0x0F, 0x7B, 0x03, 0x9F, 0x0F, 0x75, 0x03, 0xA1, 0x0F, 0x6F, 0x03, 0xA2, 0x0F, 0x69, 0x03
	.byte 0xA3, 0x0F, 0x63, 0x03, 0xA5, 0x0F, 0x5D, 0x03, 0xA6, 0x0F, 0x56, 0x03, 0xA7, 0x0F, 0x50, 0x03
	.byte 0xA8, 0x0F, 0x4A, 0x03, 0xAA, 0x0F, 0x44, 0x03, 0xAB, 0x0F, 0x3E, 0x03, 0xAC, 0x0F, 0x38, 0x03
	.byte 0xAE, 0x0F, 0x32, 0x03, 0xAF, 0x0F, 0x2B, 0x03, 0xB0, 0x0F, 0x25, 0x03, 0xB1, 0x0F, 0x1F, 0x03
	.byte 0xB3, 0x0F, 0x19, 0x03, 0xB4, 0x0F, 0x13, 0x03, 0xB5, 0x0F, 0x0D, 0x03, 0xB6, 0x0F, 0x06, 0x03
	.byte 0xB7, 0x0F, 0x00, 0x03, 0xB8, 0x0F, 0xFA, 0x02, 0xBA, 0x0F, 0xF4, 0x02, 0xBB, 0x0F, 0xEE, 0x02
	.byte 0xBC, 0x0F, 0xE8, 0x02, 0xBD, 0x0F, 0xE1, 0x02, 0xBE, 0x0F, 0xDB, 0x02, 0xBF, 0x0F, 0xD5, 0x02
	.byte 0xC0, 0x0F, 0xCF, 0x02, 0xC2, 0x0F, 0xC9, 0x02, 0xC3, 0x0F, 0xC2, 0x02, 0xC4, 0x0F, 0xBC, 0x02
	.byte 0xC5, 0x0F, 0xB6, 0x02, 0xC6, 0x0F, 0xB0, 0x02, 0xC7, 0x0F, 0xAA, 0x02, 0xC8, 0x0F, 0xA3, 0x02
	.byte 0xC9, 0x0F, 0x9D, 0x02, 0xCA, 0x0F, 0x97, 0x02, 0xCB, 0x0F, 0x91, 0x02, 0xCC, 0x0F, 0x8B, 0x02
	.byte 0xCD, 0x0F, 0x84, 0x02, 0xCE, 0x0F, 0x7E, 0x02, 0xCF, 0x0F, 0x78, 0x02, 0xD0, 0x0F, 0x72, 0x02
	.byte 0xD1, 0x0F, 0x6C, 0x02, 0xD2, 0x0F, 0x65, 0x02, 0xD3, 0x0F, 0x5F, 0x02, 0xD4, 0x0F, 0x59, 0x02
	.byte 0xD5, 0x0F, 0x53, 0x02, 0xD5, 0x0F, 0x4D, 0x02, 0xD6, 0x0F, 0x46, 0x02, 0xD7, 0x0F, 0x40, 0x02
	.byte 0xD8, 0x0F, 0x3A, 0x02, 0xD9, 0x0F, 0x34, 0x02, 0xDA, 0x0F, 0x2D, 0x02, 0xDB, 0x0F, 0x27, 0x02
	.byte 0xDC, 0x0F, 0x21, 0x02, 0xDC, 0x0F, 0x1B, 0x02, 0xDD, 0x0F, 0x15, 0x02, 0xDE, 0x0F, 0x0E, 0x02
	.byte 0xDF, 0x0F, 0x08, 0x02, 0xE0, 0x0F, 0x02, 0x02, 0xE0, 0x0F, 0xFC, 0x01, 0xE1, 0x0F, 0xF5, 0x01
	.byte 0xE2, 0x0F, 0xEF, 0x01, 0xE3, 0x0F, 0xE9, 0x01, 0xE3, 0x0F, 0xE3, 0x01, 0xE4, 0x0F, 0xDC, 0x01
	.byte 0xE5, 0x0F, 0xD6, 0x01, 0xE6, 0x0F, 0xD0, 0x01, 0xE6, 0x0F, 0xCA, 0x01, 0xE7, 0x0F, 0xC3, 0x01
	.byte 0xE8, 0x0F, 0xBD, 0x01, 0xE8, 0x0F, 0xB7, 0x01, 0xE9, 0x0F, 0xB1, 0x01, 0xEA, 0x0F, 0xAA, 0x01
	.byte 0xEA, 0x0F, 0xA4, 0x01, 0xEB, 0x0F, 0x9E, 0x01, 0xEC, 0x0F, 0x98, 0x01, 0xEC, 0x0F, 0x91, 0x01
	.byte 0xED, 0x0F, 0x8B, 0x01, 0xED, 0x0F, 0x85, 0x01, 0xEE, 0x0F, 0x7F, 0x01, 0xEF, 0x0F, 0x78, 0x01
	.byte 0xEF, 0x0F, 0x72, 0x01, 0xF0, 0x0F, 0x6C, 0x01, 0xF0, 0x0F, 0x66, 0x01, 0xF1, 0x0F, 0x5F, 0x01
	.byte 0xF1, 0x0F, 0x59, 0x01, 0xF2, 0x0F, 0x53, 0x01, 0xF2, 0x0F, 0x4D, 0x01, 0xF3, 0x0F, 0x46, 0x01
	.byte 0xF3, 0x0F, 0x40, 0x01, 0xF4, 0x0F, 0x3A, 0x01, 0xF4, 0x0F, 0x34, 0x01, 0xF5, 0x0F, 0x2D, 0x01
	.byte 0xF5, 0x0F, 0x27, 0x01, 0xF6, 0x0F, 0x21, 0x01, 0xF6, 0x0F, 0x1B, 0x01, 0xF7, 0x0F, 0x14, 0x01
	.byte 0xF7, 0x0F, 0x0E, 0x01, 0xF8, 0x0F, 0x08, 0x01, 0xF8, 0x0F, 0x01, 0x01, 0xF8, 0x0F, 0xFB, 0x00
	.byte 0xF9, 0x0F, 0xF5, 0x00, 0xF9, 0x0F, 0xEF, 0x00, 0xF9, 0x0F, 0xE8, 0x00, 0xFA, 0x0F, 0xE2, 0x00
	.byte 0xFA, 0x0F, 0xDC, 0x00, 0xFA, 0x0F, 0xD6, 0x00, 0xFB, 0x0F, 0xCF, 0x00, 0xFB, 0x0F, 0xC9, 0x00
	.byte 0xFB, 0x0F, 0xC3, 0x00, 0xFC, 0x0F, 0xBC, 0x00, 0xFC, 0x0F, 0xB6, 0x00, 0xFC, 0x0F, 0xB0, 0x00
	.byte 0xFC, 0x0F, 0xAA, 0x00, 0xFD, 0x0F, 0xA3, 0x00, 0xFD, 0x0F, 0x9D, 0x00, 0xFD, 0x0F, 0x97, 0x00
	.byte 0xFD, 0x0F, 0x90, 0x00, 0xFE, 0x0F, 0x8A, 0x00, 0xFE, 0x0F, 0x84, 0x00, 0xFE, 0x0F, 0x7E, 0x00
	.byte 0xFE, 0x0F, 0x77, 0x00, 0xFE, 0x0F, 0x71, 0x00, 0xFF, 0x0F, 0x6B, 0x00, 0xFF, 0x0F, 0x65, 0x00
	.byte 0xFF, 0x0F, 0x5E, 0x00, 0xFF, 0x0F, 0x58, 0x00, 0xFF, 0x0F, 0x52, 0x00, 0xFF, 0x0F, 0x4B, 0x00
	.byte 0xFF, 0x0F, 0x45, 0x00, 0x00, 0x10, 0x3F, 0x00, 0x00, 0x10, 0x39, 0x00, 0x00, 0x10, 0x32, 0x00
	.byte 0x00, 0x10, 0x2C, 0x00, 0x00, 0x10, 0x26, 0x00, 0x00, 0x10, 0x1F, 0x00, 0x00, 0x10, 0x19, 0x00
	.byte 0x00, 0x10, 0x13, 0x00, 0x00, 0x10, 0x0D, 0x00, 0x00, 0x10, 0x06, 0x00, 0x00, 0x10, 0x00, 0x00
	.byte 0x00, 0x10, 0xFA, 0xFF, 0x00, 0x10, 0xF3, 0xFF, 0x00, 0x10, 0xED, 0xFF, 0x00, 0x10, 0xE7, 0xFF
	.byte 0x00, 0x10, 0xE1, 0xFF, 0x00, 0x10, 0xDA, 0xFF, 0x00, 0x10, 0xD4, 0xFF, 0x00, 0x10, 0xCE, 0xFF
	.byte 0x00, 0x10, 0xC7, 0xFF, 0x00, 0x10, 0xC1, 0xFF, 0xFF, 0x0F, 0xBB, 0xFF, 0xFF, 0x0F, 0xB5, 0xFF
	.byte 0xFF, 0x0F, 0xAE, 0xFF, 0xFF, 0x0F, 0xA8, 0xFF, 0xFF, 0x0F, 0xA2, 0xFF, 0xFF, 0x0F, 0x9B, 0xFF
	.byte 0xFF, 0x0F, 0x95, 0xFF, 0xFE, 0x0F, 0x8F, 0xFF, 0xFE, 0x0F, 0x89, 0xFF, 0xFE, 0x0F, 0x82, 0xFF
	.byte 0xFE, 0x0F, 0x7C, 0xFF, 0xFE, 0x0F, 0x76, 0xFF, 0xFD, 0x0F, 0x70, 0xFF, 0xFD, 0x0F, 0x69, 0xFF
	.byte 0xFD, 0x0F, 0x63, 0xFF, 0xFD, 0x0F, 0x5D, 0xFF, 0xFC, 0x0F, 0x56, 0xFF, 0xFC, 0x0F, 0x50, 0xFF
	.byte 0xFC, 0x0F, 0x4A, 0xFF, 0xFC, 0x0F, 0x44, 0xFF, 0xFB, 0x0F, 0x3D, 0xFF, 0xFB, 0x0F, 0x37, 0xFF
	.byte 0xFB, 0x0F, 0x31, 0xFF, 0xFA, 0x0F, 0x2A, 0xFF, 0xFA, 0x0F, 0x24, 0xFF, 0xFA, 0x0F, 0x1E, 0xFF
	.byte 0xF9, 0x0F, 0x18, 0xFF, 0xF9, 0x0F, 0x11, 0xFF, 0xF9, 0x0F, 0x0B, 0xFF, 0xF8, 0x0F, 0x05, 0xFF
	.byte 0xF8, 0x0F, 0xFF, 0xFE, 0xF8, 0x0F, 0xF8, 0xFE, 0xF7, 0x0F, 0xF2, 0xFE, 0xF7, 0x0F, 0xEC, 0xFE
	.byte 0xF6, 0x0F, 0xE5, 0xFE, 0xF6, 0x0F, 0xDF, 0xFE, 0xF5, 0x0F, 0xD9, 0xFE, 0xF5, 0x0F, 0xD3, 0xFE
	.byte 0xF4, 0x0F, 0xCC, 0xFE, 0xF4, 0x0F, 0xC6, 0xFE, 0xF3, 0x0F, 0xC0, 0xFE, 0xF3, 0x0F, 0xBA, 0xFE
	.byte 0xF2, 0x0F, 0xB3, 0xFE, 0xF2, 0x0F, 0xAD, 0xFE, 0xF1, 0x0F, 0xA7, 0xFE, 0xF1, 0x0F, 0xA1, 0xFE
	.byte 0xF0, 0x0F, 0x9A, 0xFE, 0xF0, 0x0F, 0x94, 0xFE, 0xEF, 0x0F, 0x8E, 0xFE, 0xEF, 0x0F, 0x88, 0xFE
	.byte 0xEE, 0x0F, 0x81, 0xFE, 0xED, 0x0F, 0x7B, 0xFE, 0xED, 0x0F, 0x75, 0xFE, 0xEC, 0x0F, 0x6F, 0xFE
	.byte 0xEC, 0x0F, 0x68, 0xFE, 0xEB, 0x0F, 0x62, 0xFE, 0xEA, 0x0F, 0x5C, 0xFE, 0xEA, 0x0F, 0x56, 0xFE
	.byte 0xE9, 0x0F, 0x4F, 0xFE, 0xE8, 0x0F, 0x49, 0xFE, 0xE8, 0x0F, 0x43, 0xFE, 0xE7, 0x0F, 0x3D, 0xFE
	.byte 0xE6, 0x0F, 0x36, 0xFE, 0xE6, 0x0F, 0x30, 0xFE, 0xE5, 0x0F, 0x2A, 0xFE, 0xE4, 0x0F, 0x24, 0xFE
	.byte 0xE3, 0x0F, 0x1D, 0xFE, 0xE3, 0x0F, 0x17, 0xFE, 0xE2, 0x0F, 0x11, 0xFE, 0xE1, 0x0F, 0x0B, 0xFE
	.byte 0xE0, 0x0F, 0x04, 0xFE, 0xE0, 0x0F, 0xFE, 0xFD, 0xDF, 0x0F, 0xF8, 0xFD, 0xDE, 0x0F, 0xF2, 0xFD
	.byte 0xDD, 0x0F, 0xEB, 0xFD, 0xDC, 0x0F, 0xE5, 0xFD, 0xDC, 0x0F, 0xDF, 0xFD, 0xDB, 0x0F, 0xD9, 0xFD
	.byte 0xDA, 0x0F, 0xD3, 0xFD, 0xD9, 0x0F, 0xCC, 0xFD, 0xD8, 0x0F, 0xC6, 0xFD, 0xD7, 0x0F, 0xC0, 0xFD
	.byte 0xD6, 0x0F, 0xBA, 0xFD, 0xD5, 0x0F, 0xB3, 0xFD, 0xD5, 0x0F, 0xAD, 0xFD, 0xD4, 0x0F, 0xA7, 0xFD
	.byte 0xD3, 0x0F, 0xA1, 0xFD, 0xD2, 0x0F, 0x9B, 0xFD, 0xD1, 0x0F, 0x94, 0xFD, 0xD0, 0x0F, 0x8E, 0xFD
	.byte 0xCF, 0x0F, 0x88, 0xFD, 0xCE, 0x0F, 0x82, 0xFD, 0xCD, 0x0F, 0x7C, 0xFD, 0xCC, 0x0F, 0x75, 0xFD
	.byte 0xCB, 0x0F, 0x6F, 0xFD, 0xCA, 0x0F, 0x69, 0xFD, 0xC9, 0x0F, 0x63, 0xFD, 0xC8, 0x0F, 0x5D, 0xFD
	.byte 0xC7, 0x0F, 0x56, 0xFD, 0xC6, 0x0F, 0x50, 0xFD, 0xC5, 0x0F, 0x4A, 0xFD, 0xC4, 0x0F, 0x44, 0xFD
	.byte 0xC3, 0x0F, 0x3E, 0xFD, 0xC2, 0x0F, 0x37, 0xFD, 0xC0, 0x0F, 0x31, 0xFD, 0xBF, 0x0F, 0x2B, 0xFD
	.byte 0xBE, 0x0F, 0x25, 0xFD, 0xBD, 0x0F, 0x1F, 0xFD, 0xBC, 0x0F, 0x18, 0xFD, 0xBB, 0x0F, 0x12, 0xFD
	.byte 0xBA, 0x0F, 0x0C, 0xFD, 0xB8, 0x0F, 0x06, 0xFD, 0xB7, 0x0F, 0x00, 0xFD, 0xB6, 0x0F, 0xFA, 0xFC
	.byte 0xB5, 0x0F, 0xF3, 0xFC, 0xB4, 0x0F, 0xED, 0xFC, 0xB3, 0x0F, 0xE7, 0xFC, 0xB1, 0x0F, 0xE1, 0xFC
	.byte 0xB0, 0x0F, 0xDB, 0xFC, 0xAF, 0x0F, 0xD5, 0xFC, 0xAE, 0x0F, 0xCE, 0xFC, 0xAC, 0x0F, 0xC8, 0xFC
	.byte 0xAB, 0x0F, 0xC2, 0xFC, 0xAA, 0x0F, 0xBC, 0xFC, 0xA8, 0x0F, 0xB6, 0xFC, 0xA7, 0x0F, 0xB0, 0xFC
	.byte 0xA6, 0x0F, 0xAA, 0xFC, 0xA5, 0x0F, 0xA3, 0xFC, 0xA3, 0x0F, 0x9D, 0xFC, 0xA2, 0x0F, 0x97, 0xFC
	.byte 0xA1, 0x0F, 0x91, 0xFC, 0x9F, 0x0F, 0x8B, 0xFC, 0x9E, 0x0F, 0x85, 0xFC, 0x9C, 0x0F, 0x7F, 0xFC
	.byte 0x9B, 0x0F, 0x78, 0xFC, 0x9A, 0x0F, 0x72, 0xFC, 0x98, 0x0F, 0x6C, 0xFC, 0x97, 0x0F, 0x66, 0xFC
	.byte 0x95, 0x0F, 0x60, 0xFC, 0x94, 0x0F, 0x5A, 0xFC, 0x93, 0x0F, 0x54, 0xFC, 0x91, 0x0F, 0x4E, 0xFC
	.byte 0x90, 0x0F, 0x47, 0xFC, 0x8E, 0x0F, 0x41, 0xFC, 0x8D, 0x0F, 0x3B, 0xFC, 0x8B, 0x0F, 0x35, 0xFC
	.byte 0x8A, 0x0F, 0x2F, 0xFC, 0x88, 0x0F, 0x29, 0xFC, 0x87, 0x0F, 0x23, 0xFC, 0x85, 0x0F, 0x1D, 0xFC
	.byte 0x84, 0x0F, 0x17, 0xFC, 0x82, 0x0F, 0x11, 0xFC, 0x81, 0x0F, 0x0A, 0xFC, 0x7F, 0x0F, 0x04, 0xFC
	.byte 0x7D, 0x0F, 0xFE, 0xFB, 0x7C, 0x0F, 0xF8, 0xFB, 0x7A, 0x0F, 0xF2, 0xFB, 0x79, 0x0F, 0xEC, 0xFB
	.byte 0x77, 0x0F, 0xE6, 0xFB, 0x76, 0x0F, 0xE0, 0xFB, 0x74, 0x0F, 0xDA, 0xFB, 0x72, 0x0F, 0xD4, 0xFB
	.byte 0x71, 0x0F, 0xCE, 0xFB, 0x6F, 0x0F, 0xC8, 0xFB, 0x6D, 0x0F, 0xC2, 0xFB, 0x6C, 0x0F, 0xBC, 0xFB
	.byte 0x6A, 0x0F, 0xB5, 0xFB, 0x68, 0x0F, 0xAF, 0xFB, 0x67, 0x0F, 0xA9, 0xFB, 0x65, 0x0F, 0xA3, 0xFB
	.byte 0x63, 0x0F, 0x9D, 0xFB, 0x61, 0x0F, 0x97, 0xFB, 0x60, 0x0F, 0x91, 0xFB, 0x5E, 0x0F, 0x8B, 0xFB
	.byte 0x5C, 0x0F, 0x85, 0xFB, 0x5A, 0x0F, 0x7F, 0xFB, 0x59, 0x0F, 0x79, 0xFB, 0x57, 0x0F, 0x73, 0xFB
	.byte 0x55, 0x0F, 0x6D, 0xFB, 0x53, 0x0F, 0x67, 0xFB, 0x51, 0x0F, 0x61, 0xFB, 0x50, 0x0F, 0x5B, 0xFB
	.byte 0x4E, 0x0F, 0x55, 0xFB, 0x4C, 0x0F, 0x4F, 0xFB, 0x4A, 0x0F, 0x49, 0xFB, 0x48, 0x0F, 0x43, 0xFB
	.byte 0x46, 0x0F, 0x3D, 0xFB, 0x45, 0x0F, 0x37, 0xFB, 0x43, 0x0F, 0x31, 0xFB, 0x41, 0x0F, 0x2B, 0xFB
	.byte 0x3F, 0x0F, 0x25, 0xFB, 0x3D, 0x0F, 0x1F, 0xFB, 0x3B, 0x0F, 0x19, 0xFB, 0x39, 0x0F, 0x13, 0xFB
	.byte 0x37, 0x0F, 0x0D, 0xFB, 0x35, 0x0F, 0x07, 0xFB, 0x33, 0x0F, 0x01, 0xFB, 0x31, 0x0F, 0xFB, 0xFA
	.byte 0x2F, 0x0F, 0xF5, 0xFA, 0x2D, 0x0F, 0xEF, 0xFA, 0x2B, 0x0F, 0xE9, 0xFA, 0x29, 0x0F, 0xE3, 0xFA
	.byte 0x27, 0x0F, 0xDD, 0xFA, 0x25, 0x0F, 0xD7, 0xFA, 0x23, 0x0F, 0xD1, 0xFA, 0x21, 0x0F, 0xCC, 0xFA
	.byte 0x1F, 0x0F, 0xC6, 0xFA, 0x1D, 0x0F, 0xC0, 0xFA, 0x1B, 0x0F, 0xBA, 0xFA, 0x19, 0x0F, 0xB4, 0xFA
	.byte 0x17, 0x0F, 0xAE, 0xFA, 0x15, 0x0F, 0xA8, 0xFA, 0x13, 0x0F, 0xA2, 0xFA, 0x11, 0x0F, 0x9C, 0xFA
	.byte 0x0E, 0x0F, 0x96, 0xFA, 0x0C, 0x0F, 0x90, 0xFA, 0x0A, 0x0F, 0x8A, 0xFA, 0x08, 0x0F, 0x84, 0xFA
	.byte 0x06, 0x0F, 0x7F, 0xFA, 0x04, 0x0F, 0x79, 0xFA, 0x02, 0x0F, 0x73, 0xFA, 0xFF, 0x0E, 0x6D, 0xFA
	.byte 0xFD, 0x0E, 0x67, 0xFA, 0xFB, 0x0E, 0x61, 0xFA, 0xF9, 0x0E, 0x5B, 0xFA, 0xF7, 0x0E, 0x55, 0xFA
	.byte 0xF4, 0x0E, 0x4F, 0xFA, 0xF2, 0x0E, 0x4A, 0xFA, 0xF0, 0x0E, 0x44, 0xFA, 0xEE, 0x0E, 0x3E, 0xFA
	.byte 0xEB, 0x0E, 0x38, 0xFA, 0xE9, 0x0E, 0x32, 0xFA, 0xE7, 0x0E, 0x2C, 0xFA, 0xE4, 0x0E, 0x26, 0xFA
	.byte 0xE2, 0x0E, 0x21, 0xFA, 0xE0, 0x0E, 0x1B, 0xFA, 0xDD, 0x0E, 0x15, 0xFA, 0xDB, 0x0E, 0x0F, 0xFA
	.byte 0xD9, 0x0E, 0x09, 0xFA, 0xD6, 0x0E, 0x03, 0xFA, 0xD4, 0x0E, 0xFE, 0xF9, 0xD2, 0x0E, 0xF8, 0xF9
	.byte 0xCF, 0x0E, 0xF2, 0xF9, 0xCD, 0x0E, 0xEC, 0xF9, 0xCB, 0x0E, 0xE6, 0xF9, 0xC8, 0x0E, 0xE1, 0xF9
	.byte 0xC6, 0x0E, 0xDB, 0xF9, 0xC3, 0x0E, 0xD5, 0xF9, 0xC1, 0x0E, 0xCF, 0xF9, 0xBF, 0x0E, 0xC9, 0xF9
	.byte 0xBC, 0x0E, 0xC4, 0xF9, 0xBA, 0x0E, 0xBE, 0xF9, 0xB7, 0x0E, 0xB8, 0xF9, 0xB5, 0x0E, 0xB2, 0xF9
	.byte 0xB2, 0x0E, 0xAC, 0xF9, 0xB0, 0x0E, 0xA7, 0xF9, 0xAD, 0x0E, 0xA1, 0xF9, 0xAB, 0x0E, 0x9B, 0xF9
	.byte 0xA8, 0x0E, 0x95, 0xF9, 0xA6, 0x0E, 0x90, 0xF9, 0xA3, 0x0E, 0x8A, 0xF9, 0xA1, 0x0E, 0x84, 0xF9
	.byte 0x9E, 0x0E, 0x7E, 0xF9, 0x9B, 0x0E, 0x79, 0xF9, 0x99, 0x0E, 0x73, 0xF9, 0x96, 0x0E, 0x6D, 0xF9
	.byte 0x94, 0x0E, 0x67, 0xF9, 0x91, 0x0E, 0x62, 0xF9, 0x8F, 0x0E, 0x5C, 0xF9, 0x8C, 0x0E, 0x56, 0xF9
	.byte 0x89, 0x0E, 0x51, 0xF9, 0x87, 0x0E, 0x4B, 0xF9, 0x84, 0x0E, 0x45, 0xF9, 0x81, 0x0E, 0x3F, 0xF9
	.byte 0x7F, 0x0E, 0x3A, 0xF9, 0x7C, 0x0E, 0x34, 0xF9, 0x79, 0x0E, 0x2E, 0xF9, 0x77, 0x0E, 0x29, 0xF9
	.byte 0x74, 0x0E, 0x23, 0xF9, 0x71, 0x0E, 0x1D, 0xF9, 0x6F, 0x0E, 0x18, 0xF9, 0x6C, 0x0E, 0x12, 0xF9
	.byte 0x69, 0x0E, 0x0C, 0xF9, 0x66, 0x0E, 0x07, 0xF9, 0x64, 0x0E, 0x01, 0xF9, 0x61, 0x0E, 0xFB, 0xF8
	.byte 0x5E, 0x0E, 0xF6, 0xF8, 0x5B, 0x0E, 0xF0, 0xF8, 0x59, 0x0E, 0xEB, 0xF8, 0x56, 0x0E, 0xE5, 0xF8
	.byte 0x53, 0x0E, 0xDF, 0xF8, 0x50, 0x0E, 0xDA, 0xF8, 0x4D, 0x0E, 0xD4, 0xF8, 0x4B, 0x0E, 0xCE, 0xF8
	.byte 0x48, 0x0E, 0xC9, 0xF8, 0x45, 0x0E, 0xC3, 0xF8, 0x42, 0x0E, 0xBE, 0xF8, 0x3F, 0x0E, 0xB8, 0xF8
	.byte 0x3C, 0x0E, 0xB2, 0xF8, 0x3A, 0x0E, 0xAD, 0xF8, 0x37, 0x0E, 0xA7, 0xF8, 0x34, 0x0E, 0xA2, 0xF8
	.byte 0x31, 0x0E, 0x9C, 0xF8, 0x2E, 0x0E, 0x96, 0xF8, 0x2B, 0x0E, 0x91, 0xF8, 0x28, 0x0E, 0x8B, 0xF8
	.byte 0x25, 0x0E, 0x86, 0xF8, 0x22, 0x0E, 0x80, 0xF8, 0x1F, 0x0E, 0x7B, 0xF8, 0x1C, 0x0E, 0x75, 0xF8
	.byte 0x19, 0x0E, 0x70, 0xF8, 0x16, 0x0E, 0x6A, 0xF8, 0x13, 0x0E, 0x65, 0xF8, 0x10, 0x0E, 0x5F, 0xF8
	.byte 0x0D, 0x0E, 0x5A, 0xF8, 0x0A, 0x0E, 0x54, 0xF8, 0x07, 0x0E, 0x4E, 0xF8, 0x04, 0x0E, 0x49, 0xF8
	.byte 0x01, 0x0E, 0x43, 0xF8, 0xFE, 0x0D, 0x3E, 0xF8, 0xFB, 0x0D, 0x38, 0xF8, 0xF8, 0x0D, 0x33, 0xF8
	.byte 0xF5, 0x0D, 0x2E, 0xF8, 0xF2, 0x0D, 0x28, 0xF8, 0xEF, 0x0D, 0x23, 0xF8, 0xEC, 0x0D, 0x1D, 0xF8
	.byte 0xE9, 0x0D, 0x18, 0xF8, 0xE6, 0x0D, 0x12, 0xF8, 0xE3, 0x0D, 0x0D, 0xF8, 0xDF, 0x0D, 0x07, 0xF8
	.byte 0xDC, 0x0D, 0x02, 0xF8, 0xD9, 0x0D, 0xFC, 0xF7, 0xD6, 0x0D, 0xF7, 0xF7, 0xD3, 0x0D, 0xF2, 0xF7
	.byte 0xD0, 0x0D, 0xEC, 0xF7, 0xCC, 0x0D, 0xE7, 0xF7, 0xC9, 0x0D, 0xE1, 0xF7, 0xC6, 0x0D, 0xDC, 0xF7
	.byte 0xC3, 0x0D, 0xD6, 0xF7, 0xC0, 0x0D, 0xD1, 0xF7, 0xBC, 0x0D, 0xCC, 0xF7, 0xB9, 0x0D, 0xC6, 0xF7
	.byte 0xB6, 0x0D, 0xC1, 0xF7, 0xB3, 0x0D, 0xBB, 0xF7, 0xB0, 0x0D, 0xB6, 0xF7, 0xAC, 0x0D, 0xB1, 0xF7
	.byte 0xA9, 0x0D, 0xAB, 0xF7, 0xA6, 0x0D, 0xA6, 0xF7, 0xA2, 0x0D, 0xA1, 0xF7, 0x9F, 0x0D, 0x9B, 0xF7
	.byte 0x9C, 0x0D, 0x96, 0xF7, 0x99, 0x0D, 0x91, 0xF7, 0x95, 0x0D, 0x8B, 0xF7, 0x92, 0x0D, 0x86, 0xF7
	.byte 0x8F, 0x0D, 0x81, 0xF7, 0x8B, 0x0D, 0x7B, 0xF7, 0x88, 0x0D, 0x76, 0xF7, 0x85, 0x0D, 0x71, 0xF7
	.byte 0x81, 0x0D, 0x6B, 0xF7, 0x7E, 0x0D, 0x66, 0xF7, 0x7A, 0x0D, 0x61, 0xF7, 0x77, 0x0D, 0x5B, 0xF7
	.byte 0x74, 0x0D, 0x56, 0xF7, 0x70, 0x0D, 0x51, 0xF7, 0x6D, 0x0D, 0x4C, 0xF7, 0x69, 0x0D, 0x46, 0xF7
	.byte 0x66, 0x0D, 0x41, 0xF7, 0x62, 0x0D, 0x3C, 0xF7, 0x5F, 0x0D, 0x37, 0xF7, 0x5C, 0x0D, 0x31, 0xF7
	.byte 0x58, 0x0D, 0x2C, 0xF7, 0x55, 0x0D, 0x27, 0xF7, 0x51, 0x0D, 0x22, 0xF7, 0x4E, 0x0D, 0x1C, 0xF7
	.byte 0x4A, 0x0D, 0x17, 0xF7, 0x47, 0x0D, 0x12, 0xF7, 0x43, 0x0D, 0x0D, 0xF7, 0x40, 0x0D, 0x08, 0xF7
	.byte 0x3C, 0x0D, 0x02, 0xF7, 0x39, 0x0D, 0xFD, 0xF6, 0x35, 0x0D, 0xF8, 0xF6, 0x32, 0x0D, 0xF3, 0xF6
	.byte 0x2E, 0x0D, 0xEE, 0xF6, 0x2A, 0x0D, 0xE8, 0xF6, 0x27, 0x0D, 0xE3, 0xF6, 0x23, 0x0D, 0xDE, 0xF6
	.byte 0x20, 0x0D, 0xD9, 0xF6, 0x1C, 0x0D, 0xD4, 0xF6, 0x18, 0x0D, 0xCF, 0xF6, 0x15, 0x0D, 0xC9, 0xF6
	.byte 0x11, 0x0D, 0xC4, 0xF6, 0x0E, 0x0D, 0xBF, 0xF6, 0x0A, 0x0D, 0xBA, 0xF6, 0x06, 0x0D, 0xB5, 0xF6
	.byte 0x03, 0x0D, 0xB0, 0xF6, 0xFF, 0x0C, 0xAB, 0xF6, 0xFB, 0x0C, 0xA6, 0xF6, 0xF8, 0x0C, 0xA1, 0xF6
	.byte 0xF4, 0x0C, 0x9B, 0xF6, 0xF0, 0x0C, 0x96, 0xF6, 0xED, 0x0C, 0x91, 0xF6, 0xE9, 0x0C, 0x8C, 0xF6
	.byte 0xE5, 0x0C, 0x87, 0xF6, 0xE1, 0x0C, 0x82, 0xF6, 0xDE, 0x0C, 0x7D, 0xF6, 0xDA, 0x0C, 0x78, 0xF6
	.byte 0xD6, 0x0C, 0x73, 0xF6, 0xD2, 0x0C, 0x6E, 0xF6, 0xCF, 0x0C, 0x69, 0xF6, 0xCB, 0x0C, 0x64, 0xF6
	.byte 0xC7, 0x0C, 0x5F, 0xF6, 0xC3, 0x0C, 0x5A, 0xF6, 0xC0, 0x0C, 0x55, 0xF6, 0xBC, 0x0C, 0x50, 0xF6
	.byte 0xB8, 0x0C, 0x4B, 0xF6, 0xB4, 0x0C, 0x46, 0xF6, 0xB0, 0x0C, 0x41, 0xF6, 0xAC, 0x0C, 0x3C, 0xF6
	.byte 0xA9, 0x0C, 0x37, 0xF6, 0xA5, 0x0C, 0x32, 0xF6, 0xA1, 0x0C, 0x2D, 0xF6, 0x9D, 0x0C, 0x28, 0xF6
	.byte 0x99, 0x0C, 0x23, 0xF6, 0x95, 0x0C, 0x1E, 0xF6, 0x91, 0x0C, 0x19, 0xF6, 0x8E, 0x0C, 0x14, 0xF6
	.byte 0x8A, 0x0C, 0x0F, 0xF6, 0x86, 0x0C, 0x0A, 0xF6, 0x82, 0x0C, 0x05, 0xF6, 0x7E, 0x0C, 0x01, 0xF6
	.byte 0x7A, 0x0C, 0xFC, 0xF5, 0x76, 0x0C, 0xF7, 0xF5, 0x72, 0x0C, 0xF2, 0xF5, 0x6E, 0x0C, 0xED, 0xF5
	.byte 0x6A, 0x0C, 0xE8, 0xF5, 0x66, 0x0C, 0xE3, 0xF5, 0x62, 0x0C, 0xDE, 0xF5, 0x5E, 0x0C, 0xDA, 0xF5
	.byte 0x5A, 0x0C, 0xD5, 0xF5, 0x56, 0x0C, 0xD0, 0xF5, 0x52, 0x0C, 0xCB, 0xF5, 0x4E, 0x0C, 0xC6, 0xF5
	.byte 0x4A, 0x0C, 0xC1, 0xF5, 0x46, 0x0C, 0xBC, 0xF5, 0x42, 0x0C, 0xB8, 0xF5, 0x3E, 0x0C, 0xB3, 0xF5
	.byte 0x3A, 0x0C, 0xAE, 0xF5, 0x36, 0x0C, 0xA9, 0xF5, 0x32, 0x0C, 0xA4, 0xF5, 0x2E, 0x0C, 0xA0, 0xF5
	.byte 0x2A, 0x0C, 0x9B, 0xF5, 0x26, 0x0C, 0x96, 0xF5, 0x22, 0x0C, 0x91, 0xF5, 0x1E, 0x0C, 0x8D, 0xF5
	.byte 0x19, 0x0C, 0x88, 0xF5, 0x15, 0x0C, 0x83, 0xF5, 0x11, 0x0C, 0x7E, 0xF5, 0x0D, 0x0C, 0x7A, 0xF5
	.byte 0x09, 0x0C, 0x75, 0xF5, 0x05, 0x0C, 0x70, 0xF5, 0x01, 0x0C, 0x6B, 0xF5, 0xFC, 0x0B, 0x67, 0xF5
	.byte 0xF8, 0x0B, 0x62, 0xF5, 0xF4, 0x0B, 0x5D, 0xF5, 0xF0, 0x0B, 0x59, 0xF5, 0xEC, 0x0B, 0x54, 0xF5
	.byte 0xE8, 0x0B, 0x4F, 0xF5, 0xE3, 0x0B, 0x4B, 0xF5, 0xDF, 0x0B, 0x46, 0xF5, 0xDB, 0x0B, 0x41, 0xF5
	.byte 0xD7, 0x0B, 0x3D, 0xF5, 0xD2, 0x0B, 0x38, 0xF5, 0xCE, 0x0B, 0x33, 0xF5, 0xCA, 0x0B, 0x2F, 0xF5
	.byte 0xC6, 0x0B, 0x2A, 0xF5, 0xC1, 0x0B, 0x25, 0xF5, 0xBD, 0x0B, 0x21, 0xF5, 0xB9, 0x0B, 0x1C, 0xF5
	.byte 0xB5, 0x0B, 0x18, 0xF5, 0xB0, 0x0B, 0x13, 0xF5, 0xAC, 0x0B, 0x0E, 0xF5, 0xA8, 0x0B, 0x0A, 0xF5
	.byte 0xA3, 0x0B, 0x05, 0xF5, 0x9F, 0x0B, 0x01, 0xF5, 0x9B, 0x0B, 0xFC, 0xF4, 0x97, 0x0B, 0xF8, 0xF4
	.byte 0x92, 0x0B, 0xF3, 0xF4, 0x8E, 0x0B, 0xEF, 0xF4, 0x89, 0x0B, 0xEA, 0xF4, 0x85, 0x0B, 0xE5, 0xF4
	.byte 0x81, 0x0B, 0xE1, 0xF4, 0x7C, 0x0B, 0xDC, 0xF4, 0x78, 0x0B, 0xD8, 0xF4, 0x74, 0x0B, 0xD3, 0xF4
	.byte 0x6F, 0x0B, 0xCF, 0xF4, 0x6B, 0x0B, 0xCA, 0xF4, 0x66, 0x0B, 0xC6, 0xF4, 0x62, 0x0B, 0xC2, 0xF4
	.byte 0x5E, 0x0B, 0xBD, 0xF4, 0x59, 0x0B, 0xB9, 0xF4, 0x55, 0x0B, 0xB4, 0xF4, 0x50, 0x0B, 0xB0, 0xF4
	.byte 0x4C, 0x0B, 0xAB, 0xF4, 0x47, 0x0B, 0xA7, 0xF4, 0x43, 0x0B, 0xA2, 0xF4, 0x3E, 0x0B, 0x9E, 0xF4
	.byte 0x3A, 0x0B, 0x9A, 0xF4, 0x36, 0x0B, 0x95, 0xF4, 0x31, 0x0B, 0x91, 0xF4, 0x2D, 0x0B, 0x8C, 0xF4
	.byte 0x28, 0x0B, 0x88, 0xF4, 0x24, 0x0B, 0x84, 0xF4, 0x1F, 0x0B, 0x7F, 0xF4, 0x1B, 0x0B, 0x7B, 0xF4
	.byte 0x16, 0x0B, 0x77, 0xF4, 0x11, 0x0B, 0x72, 0xF4, 0x0D, 0x0B, 0x6E, 0xF4, 0x08, 0x0B, 0x69, 0xF4
	.byte 0x04, 0x0B, 0x65, 0xF4, 0xFF, 0x0A, 0x61, 0xF4, 0xFB, 0x0A, 0x5D, 0xF4, 0xF6, 0x0A, 0x58, 0xF4
	.byte 0xF2, 0x0A, 0x54, 0xF4, 0xED, 0x0A, 0x50, 0xF4, 0xE8, 0x0A, 0x4B, 0xF4, 0xE4, 0x0A, 0x47, 0xF4
	.byte 0xDF, 0x0A, 0x43, 0xF4, 0xDB, 0x0A, 0x3F, 0xF4, 0xD6, 0x0A, 0x3A, 0xF4, 0xD1, 0x0A, 0x36, 0xF4
	.byte 0xCD, 0x0A, 0x32, 0xF4, 0xC8, 0x0A, 0x2E, 0xF4, 0xC3, 0x0A, 0x29, 0xF4, 0xBF, 0x0A, 0x25, 0xF4
	.byte 0xBA, 0x0A, 0x21, 0xF4, 0xB5, 0x0A, 0x1D, 0xF4, 0xB1, 0x0A, 0x18, 0xF4, 0xAC, 0x0A, 0x14, 0xF4
	.byte 0xA7, 0x0A, 0x10, 0xF4, 0xA3, 0x0A, 0x0C, 0xF4, 0x9E, 0x0A, 0x08, 0xF4, 0x99, 0x0A, 0x04, 0xF4
	.byte 0x95, 0x0A, 0xFF, 0xF3, 0x90, 0x0A, 0xFB, 0xF3, 0x8B, 0x0A, 0xF7, 0xF3, 0x86, 0x0A, 0xF3, 0xF3
	.byte 0x82, 0x0A, 0xEF, 0xF3, 0x7D, 0x0A, 0xEB, 0xF3, 0x78, 0x0A, 0xE7, 0xF3, 0x73, 0x0A, 0xE2, 0xF3
	.byte 0x6F, 0x0A, 0xDE, 0xF3, 0x6A, 0x0A, 0xDA, 0xF3, 0x65, 0x0A, 0xD6, 0xF3, 0x60, 0x0A, 0xD2, 0xF3
	.byte 0x5C, 0x0A, 0xCE, 0xF3, 0x57, 0x0A, 0xCA, 0xF3, 0x52, 0x0A, 0xC6, 0xF3, 0x4D, 0x0A, 0xC2, 0xF3
	.byte 0x48, 0x0A, 0xBE, 0xF3, 0x44, 0x0A, 0xBA, 0xF3, 0x3F, 0x0A, 0xB6, 0xF3, 0x3A, 0x0A, 0xB2, 0xF3
	.byte 0x35, 0x0A, 0xAE, 0xF3, 0x30, 0x0A, 0xAA, 0xF3, 0x2B, 0x0A, 0xA6, 0xF3, 0x26, 0x0A, 0xA2, 0xF3
	.byte 0x22, 0x0A, 0x9E, 0xF3, 0x1D, 0x0A, 0x9A, 0xF3, 0x18, 0x0A, 0x96, 0xF3, 0x13, 0x0A, 0x92, 0xF3
	.byte 0x0E, 0x0A, 0x8E, 0xF3, 0x09, 0x0A, 0x8A, 0xF3, 0x04, 0x0A, 0x86, 0xF3, 0xFF, 0x09, 0x82, 0xF3
	.byte 0xFB, 0x09, 0x7E, 0xF3, 0xF6, 0x09, 0x7A, 0xF3, 0xF1, 0x09, 0x76, 0xF3, 0xEC, 0x09, 0x72, 0xF3
	.byte 0xE7, 0x09, 0x6F, 0xF3, 0xE2, 0x09, 0x6B, 0xF3, 0xDD, 0x09, 0x67, 0xF3, 0xD8, 0x09, 0x63, 0xF3
	.byte 0xD3, 0x09, 0x5F, 0xF3, 0xCE, 0x09, 0x5B, 0xF3, 0xC9, 0x09, 0x57, 0xF3, 0xC4, 0x09, 0x54, 0xF3
	.byte 0xBF, 0x09, 0x50, 0xF3, 0xBA, 0x09, 0x4C, 0xF3, 0xB5, 0x09, 0x48, 0xF3, 0xB0, 0x09, 0x44, 0xF3
	.byte 0xAB, 0x09, 0x40, 0xF3, 0xA6, 0x09, 0x3D, 0xF3, 0xA1, 0x09, 0x39, 0xF3, 0x9C, 0x09, 0x35, 0xF3
	.byte 0x97, 0x09, 0x31, 0xF3, 0x92, 0x09, 0x2E, 0xF3, 0x8D, 0x09, 0x2A, 0xF3, 0x88, 0x09, 0x26, 0xF3
	.byte 0x83, 0x09, 0x22, 0xF3, 0x7E, 0x09, 0x1F, 0xF3, 0x79, 0x09, 0x1B, 0xF3, 0x74, 0x09, 0x17, 0xF3
	.byte 0x6F, 0x09, 0x13, 0xF3, 0x6A, 0x09, 0x10, 0xF3, 0x65, 0x09, 0x0C, 0xF3, 0x5F, 0x09, 0x08, 0xF3
	.byte 0x5A, 0x09, 0x05, 0xF3, 0x55, 0x09, 0x01, 0xF3, 0x50, 0x09, 0xFD, 0xF2, 0x4B, 0x09, 0xFA, 0xF2
	.byte 0x46, 0x09, 0xF6, 0xF2, 0x41, 0x09, 0xF2, 0xF2, 0x3C, 0x09, 0xEF, 0xF2, 0x37, 0x09, 0xEB, 0xF2
	.byte 0x31, 0x09, 0xE8, 0xF2, 0x2C, 0x09, 0xE4, 0xF2, 0x27, 0x09, 0xE0, 0xF2, 0x22, 0x09, 0xDD, 0xF2
	.byte 0x1D, 0x09, 0xD9, 0xF2, 0x18, 0x09, 0xD6, 0xF2, 0x12, 0x09, 0xD2, 0xF2, 0x0D, 0x09, 0xCE, 0xF2
	.byte 0x08, 0x09, 0xCB, 0xF2, 0x03, 0x09, 0xC7, 0xF2, 0xFE, 0x08, 0xC4, 0xF2, 0xF8, 0x08, 0xC0, 0xF2
	.byte 0xF3, 0x08, 0xBD, 0xF2, 0xEE, 0x08, 0xB9, 0xF2, 0xE9, 0x08, 0xB6, 0xF2, 0xE4, 0x08, 0xB2, 0xF2
	.byte 0xDE, 0x08, 0xAF, 0xF2, 0xD9, 0x08, 0xAB, 0xF2, 0xD4, 0x08, 0xA8, 0xF2, 0xCF, 0x08, 0xA4, 0xF2
	.byte 0xC9, 0x08, 0xA1, 0xF2, 0xC4, 0x08, 0x9E, 0xF2, 0xBF, 0x08, 0x9A, 0xF2, 0xBA, 0x08, 0x97, 0xF2
	.byte 0xB4, 0x08, 0x93, 0xF2, 0xAF, 0x08, 0x90, 0xF2, 0xAA, 0x08, 0x8C, 0xF2, 0xA5, 0x08, 0x89, 0xF2
	.byte 0x9F, 0x08, 0x86, 0xF2, 0x9A, 0x08, 0x82, 0xF2, 0x95, 0x08, 0x7F, 0xF2, 0x8F, 0x08, 0x7B, 0xF2
	.byte 0x8A, 0x08, 0x78, 0xF2, 0x85, 0x08, 0x75, 0xF2, 0x7F, 0x08, 0x71, 0xF2, 0x7A, 0x08, 0x6E, 0xF2
	.byte 0x75, 0x08, 0x6B, 0xF2, 0x6F, 0x08, 0x67, 0xF2, 0x6A, 0x08, 0x64, 0xF2, 0x65, 0x08, 0x61, 0xF2
	.byte 0x5F, 0x08, 0x5E, 0xF2, 0x5A, 0x08, 0x5A, 0xF2, 0x55, 0x08, 0x57, 0xF2, 0x4F, 0x08, 0x54, 0xF2
	.byte 0x4A, 0x08, 0x50, 0xF2, 0x45, 0x08, 0x4D, 0xF2, 0x3F, 0x08, 0x4A, 0xF2, 0x3A, 0x08, 0x47, 0xF2
	.byte 0x34, 0x08, 0x44, 0xF2, 0x2F, 0x08, 0x40, 0xF2, 0x2A, 0x08, 0x3D, 0xF2, 0x24, 0x08, 0x3A, 0xF2
	.byte 0x1F, 0x08, 0x37, 0xF2, 0x19, 0x08, 0x34, 0xF2, 0x14, 0x08, 0x30, 0xF2, 0x0E, 0x08, 0x2D, 0xF2
	.byte 0x09, 0x08, 0x2A, 0xF2, 0x04, 0x08, 0x27, 0xF2, 0xFE, 0x07, 0x24, 0xF2, 0xF9, 0x07, 0x21, 0xF2
	.byte 0xF3, 0x07, 0x1D, 0xF2, 0xEE, 0x07, 0x1A, 0xF2, 0xE8, 0x07, 0x17, 0xF2, 0xE3, 0x07, 0x14, 0xF2
	.byte 0xDD, 0x07, 0x11, 0xF2, 0xD8, 0x07, 0x0E, 0xF2, 0xD2, 0x07, 0x0B, 0xF2, 0xCD, 0x07, 0x08, 0xF2
	.byte 0xC8, 0x07, 0x05, 0xF2, 0xC2, 0x07, 0x02, 0xF2, 0xBD, 0x07, 0xFF, 0xF1, 0xB7, 0x07, 0xFC, 0xF1
	.byte 0xB2, 0x07, 0xF9, 0xF1, 0xAC, 0x07, 0xF6, 0xF1, 0xA6, 0x07, 0xF3, 0xF1, 0xA1, 0x07, 0xF0, 0xF1
	.byte 0x9B, 0x07, 0xED, 0xF1, 0x96, 0x07, 0xEA, 0xF1, 0x90, 0x07, 0xE7, 0xF1, 0x8B, 0x07, 0xE4, 0xF1
	.byte 0x85, 0x07, 0xE1, 0xF1, 0x80, 0x07, 0xDE, 0xF1, 0x7A, 0x07, 0xDB, 0xF1, 0x75, 0x07, 0xD8, 0xF1
	.byte 0x6F, 0x07, 0xD5, 0xF1, 0x6A, 0x07, 0xD2, 0xF1, 0x64, 0x07, 0xCF, 0xF1, 0x5E, 0x07, 0xCC, 0xF1
	.byte 0x59, 0x07, 0xC9, 0xF1, 0x53, 0x07, 0xC6, 0xF1, 0x4E, 0x07, 0xC4, 0xF1, 0x48, 0x07, 0xC1, 0xF1
	.byte 0x42, 0x07, 0xBE, 0xF1, 0x3D, 0x07, 0xBB, 0xF1, 0x37, 0x07, 0xB8, 0xF1, 0x32, 0x07, 0xB5, 0xF1
	.byte 0x2C, 0x07, 0xB3, 0xF1, 0x26, 0x07, 0xB0, 0xF1, 0x21, 0x07, 0xAD, 0xF1, 0x1B, 0x07, 0xAA, 0xF1
	.byte 0x15, 0x07, 0xA7, 0xF1, 0x10, 0x07, 0xA5, 0xF1, 0x0A, 0x07, 0xA2, 0xF1, 0x05, 0x07, 0x9F, 0xF1
	.byte 0xFF, 0x06, 0x9C, 0xF1, 0xF9, 0x06, 0x9A, 0xF1, 0xF4, 0x06, 0x97, 0xF1, 0xEE, 0x06, 0x94, 0xF1
	.byte 0xE8, 0x06, 0x91, 0xF1, 0xE3, 0x06, 0x8F, 0xF1, 0xDD, 0x06, 0x8C, 0xF1, 0xD7, 0x06, 0x89, 0xF1
	.byte 0xD2, 0x06, 0x87, 0xF1, 0xCC, 0x06, 0x84, 0xF1, 0xC6, 0x06, 0x81, 0xF1, 0xC1, 0x06, 0x7F, 0xF1
	.byte 0xBB, 0x06, 0x7C, 0xF1, 0xB5, 0x06, 0x79, 0xF1, 0xAF, 0x06, 0x77, 0xF1, 0xAA, 0x06, 0x74, 0xF1
	.byte 0xA4, 0x06, 0x71, 0xF1, 0x9E, 0x06, 0x6F, 0xF1, 0x99, 0x06, 0x6C, 0xF1, 0x93, 0x06, 0x6A, 0xF1
	.byte 0x8D, 0x06, 0x67, 0xF1, 0x87, 0x06, 0x65, 0xF1, 0x82, 0x06, 0x62, 0xF1, 0x7C, 0x06, 0x5F, 0xF1
	.byte 0x76, 0x06, 0x5D, 0xF1, 0x70, 0x06, 0x5A, 0xF1, 0x6B, 0x06, 0x58, 0xF1, 0x65, 0x06, 0x55, 0xF1
	.byte 0x5F, 0x06, 0x53, 0xF1, 0x59, 0x06, 0x50, 0xF1, 0x54, 0x06, 0x4E, 0xF1, 0x4E, 0x06, 0x4B, 0xF1
	.byte 0x48, 0x06, 0x49, 0xF1, 0x42, 0x06, 0x46, 0xF1, 0x3C, 0x06, 0x44, 0xF1, 0x37, 0x06, 0x41, 0xF1
	.byte 0x31, 0x06, 0x3F, 0xF1, 0x2B, 0x06, 0x3D, 0xF1, 0x25, 0x06, 0x3A, 0xF1, 0x1F, 0x06, 0x38, 0xF1
	.byte 0x1A, 0x06, 0x35, 0xF1, 0x14, 0x06, 0x33, 0xF1, 0x0E, 0x06, 0x31, 0xF1, 0x08, 0x06, 0x2E, 0xF1
	.byte 0x02, 0x06, 0x2C, 0xF1, 0xFD, 0x05, 0x2A, 0xF1, 0xF7, 0x05, 0x27, 0xF1, 0xF1, 0x05, 0x25, 0xF1
	.byte 0xEB, 0x05, 0x23, 0xF1, 0xE5, 0x05, 0x20, 0xF1, 0xDF, 0x05, 0x1E, 0xF1, 0xDA, 0x05, 0x1C, 0xF1
	.byte 0xD4, 0x05, 0x19, 0xF1, 0xCE, 0x05, 0x17, 0xF1, 0xC8, 0x05, 0x15, 0xF1, 0xC2, 0x05, 0x12, 0xF1
	.byte 0xBC, 0x05, 0x10, 0xF1, 0xB6, 0x05, 0x0E, 0xF1, 0xB1, 0x05, 0x0C, 0xF1, 0xAB, 0x05, 0x09, 0xF1
	.byte 0xA5, 0x05, 0x07, 0xF1, 0x9F, 0x05, 0x05, 0xF1, 0x99, 0x05, 0x03, 0xF1, 0x93, 0x05, 0x01, 0xF1
	.byte 0x8D, 0x05, 0xFE, 0xF0, 0x87, 0x05, 0xFC, 0xF0, 0x81, 0x05, 0xFA, 0xF0, 0x7C, 0x05, 0xF8, 0xF0
	.byte 0x76, 0x05, 0xF6, 0xF0, 0x70, 0x05, 0xF4, 0xF0, 0x6A, 0x05, 0xF2, 0xF0, 0x64, 0x05, 0xEF, 0xF0
	.byte 0x5E, 0x05, 0xED, 0xF0, 0x58, 0x05, 0xEB, 0xF0, 0x52, 0x05, 0xE9, 0xF0, 0x4C, 0x05, 0xE7, 0xF0
	.byte 0x46, 0x05, 0xE5, 0xF0, 0x40, 0x05, 0xE3, 0xF0, 0x3A, 0x05, 0xE1, 0xF0, 0x34, 0x05, 0xDF, 0xF0
	.byte 0x2F, 0x05, 0xDD, 0xF0, 0x29, 0x05, 0xDB, 0xF0, 0x23, 0x05, 0xD9, 0xF0, 0x1D, 0x05, 0xD7, 0xF0
	.byte 0x17, 0x05, 0xD5, 0xF0, 0x11, 0x05, 0xD3, 0xF0, 0x0B, 0x05, 0xD1, 0xF0, 0x05, 0x05, 0xCF, 0xF0
	.byte 0xFF, 0x04, 0xCD, 0xF0, 0xF9, 0x04, 0xCB, 0xF0, 0xF3, 0x04, 0xC9, 0xF0, 0xED, 0x04, 0xC7, 0xF0
	.byte 0xE7, 0x04, 0xC5, 0xF0, 0xE1, 0x04, 0xC3, 0xF0, 0xDB, 0x04, 0xC1, 0xF0, 0xD5, 0x04, 0xBF, 0xF0
	.byte 0xCF, 0x04, 0xBD, 0xF0, 0xC9, 0x04, 0xBB, 0xF0, 0xC3, 0x04, 0xBA, 0xF0, 0xBD, 0x04, 0xB8, 0xF0
	.byte 0xB7, 0x04, 0xB6, 0xF0, 0xB1, 0x04, 0xB4, 0xF0, 0xAB, 0x04, 0xB2, 0xF0, 0xA5, 0x04, 0xB0, 0xF0
	.byte 0x9F, 0x04, 0xAF, 0xF0, 0x99, 0x04, 0xAD, 0xF0, 0x93, 0x04, 0xAB, 0xF0, 0x8D, 0x04, 0xA9, 0xF0
	.byte 0x87, 0x04, 0xA7, 0xF0, 0x81, 0x04, 0xA6, 0xF0, 0x7B, 0x04, 0xA4, 0xF0, 0x75, 0x04, 0xA2, 0xF0
	.byte 0x6F, 0x04, 0xA0, 0xF0, 0x69, 0x04, 0x9F, 0xF0, 0x63, 0x04, 0x9D, 0xF0, 0x5D, 0x04, 0x9B, 0xF0
	.byte 0x57, 0x04, 0x99, 0xF0, 0x51, 0x04, 0x98, 0xF0, 0x4B, 0x04, 0x96, 0xF0, 0x44, 0x04, 0x94, 0xF0
	.byte 0x3E, 0x04, 0x93, 0xF0, 0x38, 0x04, 0x91, 0xF0, 0x32, 0x04, 0x8F, 0xF0, 0x2C, 0x04, 0x8E, 0xF0
	.byte 0x26, 0x04, 0x8C, 0xF0, 0x20, 0x04, 0x8A, 0xF0, 0x1A, 0x04, 0x89, 0xF0, 0x14, 0x04, 0x87, 0xF0
	.byte 0x0E, 0x04, 0x86, 0xF0, 0x08, 0x04, 0x84, 0xF0, 0x02, 0x04, 0x83, 0xF0, 0xFC, 0x03, 0x81, 0xF0
	.byte 0xF6, 0x03, 0x7F, 0xF0, 0xEF, 0x03, 0x7E, 0xF0, 0xE9, 0x03, 0x7C, 0xF0, 0xE3, 0x03, 0x7B, 0xF0
	.byte 0xDD, 0x03, 0x79, 0xF0, 0xD7, 0x03, 0x78, 0xF0, 0xD1, 0x03, 0x76, 0xF0, 0xCB, 0x03, 0x75, 0xF0
	.byte 0xC5, 0x03, 0x73, 0xF0, 0xBF, 0x03, 0x72, 0xF0, 0xB9, 0x03, 0x70, 0xF0, 0xB2, 0x03, 0x6F, 0xF0
	.byte 0xAC, 0x03, 0x6D, 0xF0, 0xA6, 0x03, 0x6C, 0xF0, 0xA0, 0x03, 0x6B, 0xF0, 0x9A, 0x03, 0x69, 0xF0
	.byte 0x94, 0x03, 0x68, 0xF0, 0x8E, 0x03, 0x66, 0xF0, 0x88, 0x03, 0x65, 0xF0, 0x81, 0x03, 0x64, 0xF0
	.byte 0x7B, 0x03, 0x62, 0xF0, 0x75, 0x03, 0x61, 0xF0, 0x6F, 0x03, 0x5F, 0xF0, 0x69, 0x03, 0x5E, 0xF0
	.byte 0x63, 0x03, 0x5D, 0xF0, 0x5D, 0x03, 0x5B, 0xF0, 0x56, 0x03, 0x5A, 0xF0, 0x50, 0x03, 0x59, 0xF0
	.byte 0x4A, 0x03, 0x58, 0xF0, 0x44, 0x03, 0x56, 0xF0, 0x3E, 0x03, 0x55, 0xF0, 0x38, 0x03, 0x54, 0xF0
	.byte 0x32, 0x03, 0x52, 0xF0, 0x2B, 0x03, 0x51, 0xF0, 0x25, 0x03, 0x50, 0xF0, 0x1F, 0x03, 0x4F, 0xF0
	.byte 0x19, 0x03, 0x4D, 0xF0, 0x13, 0x03, 0x4C, 0xF0, 0x0D, 0x03, 0x4B, 0xF0, 0x06, 0x03, 0x4A, 0xF0
	.byte 0x00, 0x03, 0x49, 0xF0, 0xFA, 0x02, 0x48, 0xF0, 0xF4, 0x02, 0x46, 0xF0, 0xEE, 0x02, 0x45, 0xF0
	.byte 0xE8, 0x02, 0x44, 0xF0, 0xE1, 0x02, 0x43, 0xF0, 0xDB, 0x02, 0x42, 0xF0, 0xD5, 0x02, 0x41, 0xF0
	.byte 0xCF, 0x02, 0x40, 0xF0, 0xC9, 0x02, 0x3E, 0xF0, 0xC2, 0x02, 0x3D, 0xF0, 0xBC, 0x02, 0x3C, 0xF0
	.byte 0xB6, 0x02, 0x3B, 0xF0, 0xB0, 0x02, 0x3A, 0xF0, 0xAA, 0x02, 0x39, 0xF0, 0xA3, 0x02, 0x38, 0xF0
	.byte 0x9D, 0x02, 0x37, 0xF0, 0x97, 0x02, 0x36, 0xF0, 0x91, 0x02, 0x35, 0xF0, 0x8B, 0x02, 0x34, 0xF0
	.byte 0x84, 0x02, 0x33, 0xF0, 0x7E, 0x02, 0x32, 0xF0, 0x78, 0x02, 0x31, 0xF0, 0x72, 0x02, 0x30, 0xF0
	.byte 0x6C, 0x02, 0x2F, 0xF0, 0x65, 0x02, 0x2E, 0xF0, 0x5F, 0x02, 0x2D, 0xF0, 0x59, 0x02, 0x2C, 0xF0
	.byte 0x53, 0x02, 0x2B, 0xF0, 0x4D, 0x02, 0x2B, 0xF0, 0x46, 0x02, 0x2A, 0xF0, 0x40, 0x02, 0x29, 0xF0
	.byte 0x3A, 0x02, 0x28, 0xF0, 0x34, 0x02, 0x27, 0xF0, 0x2D, 0x02, 0x26, 0xF0, 0x27, 0x02, 0x25, 0xF0
	.byte 0x21, 0x02, 0x24, 0xF0, 0x1B, 0x02, 0x24, 0xF0, 0x15, 0x02, 0x23, 0xF0, 0x0E, 0x02, 0x22, 0xF0
	.byte 0x08, 0x02, 0x21, 0xF0, 0x02, 0x02, 0x20, 0xF0, 0xFC, 0x01, 0x20, 0xF0, 0xF5, 0x01, 0x1F, 0xF0
	.byte 0xEF, 0x01, 0x1E, 0xF0, 0xE9, 0x01, 0x1D, 0xF0, 0xE3, 0x01, 0x1D, 0xF0, 0xDC, 0x01, 0x1C, 0xF0
	.byte 0xD6, 0x01, 0x1B, 0xF0, 0xD0, 0x01, 0x1A, 0xF0, 0xCA, 0x01, 0x1A, 0xF0, 0xC3, 0x01, 0x19, 0xF0
	.byte 0xBD, 0x01, 0x18, 0xF0, 0xB7, 0x01, 0x18, 0xF0, 0xB1, 0x01, 0x17, 0xF0, 0xAA, 0x01, 0x16, 0xF0
	.byte 0xA4, 0x01, 0x16, 0xF0, 0x9E, 0x01, 0x15, 0xF0, 0x98, 0x01, 0x14, 0xF0, 0x91, 0x01, 0x14, 0xF0
	.byte 0x8B, 0x01, 0x13, 0xF0, 0x85, 0x01, 0x13, 0xF0, 0x7F, 0x01, 0x12, 0xF0, 0x78, 0x01, 0x11, 0xF0
	.byte 0x72, 0x01, 0x11, 0xF0, 0x6C, 0x01, 0x10, 0xF0, 0x66, 0x01, 0x10, 0xF0, 0x5F, 0x01, 0x0F, 0xF0
	.byte 0x59, 0x01, 0x0F, 0xF0, 0x53, 0x01, 0x0E, 0xF0, 0x4D, 0x01, 0x0E, 0xF0, 0x46, 0x01, 0x0D, 0xF0
	.byte 0x40, 0x01, 0x0D, 0xF0, 0x3A, 0x01, 0x0C, 0xF0, 0x34, 0x01, 0x0C, 0xF0, 0x2D, 0x01, 0x0B, 0xF0
	.byte 0x27, 0x01, 0x0B, 0xF0, 0x21, 0x01, 0x0A, 0xF0, 0x1B, 0x01, 0x0A, 0xF0, 0x14, 0x01, 0x09, 0xF0
	.byte 0x0E, 0x01, 0x09, 0xF0, 0x08, 0x01, 0x08, 0xF0, 0x01, 0x01, 0x08, 0xF0, 0xFB, 0x00, 0x08, 0xF0
	.byte 0xF5, 0x00, 0x07, 0xF0, 0xEF, 0x00, 0x07, 0xF0, 0xE8, 0x00, 0x07, 0xF0, 0xE2, 0x00, 0x06, 0xF0
	.byte 0xDC, 0x00, 0x06, 0xF0, 0xD6, 0x00, 0x06, 0xF0, 0xCF, 0x00, 0x05, 0xF0, 0xC9, 0x00, 0x05, 0xF0
	.byte 0xC3, 0x00, 0x05, 0xF0, 0xBC, 0x00, 0x04, 0xF0, 0xB6, 0x00, 0x04, 0xF0, 0xB0, 0x00, 0x04, 0xF0
	.byte 0xAA, 0x00, 0x04, 0xF0, 0xA3, 0x00, 0x03, 0xF0, 0x9D, 0x00, 0x03, 0xF0, 0x97, 0x00, 0x03, 0xF0
	.byte 0x90, 0x00, 0x03, 0xF0, 0x8A, 0x00, 0x02, 0xF0, 0x84, 0x00, 0x02, 0xF0, 0x7E, 0x00, 0x02, 0xF0
	.byte 0x77, 0x00, 0x02, 0xF0, 0x71, 0x00, 0x02, 0xF0, 0x6B, 0x00, 0x01, 0xF0, 0x65, 0x00, 0x01, 0xF0
	.byte 0x5E, 0x00, 0x01, 0xF0, 0x58, 0x00, 0x01, 0xF0, 0x52, 0x00, 0x01, 0xF0, 0x4B, 0x00, 0x01, 0xF0
	.byte 0x45, 0x00, 0x01, 0xF0, 0x3F, 0x00, 0x00, 0xF0, 0x39, 0x00, 0x00, 0xF0, 0x32, 0x00, 0x00, 0xF0
	.byte 0x2C, 0x00, 0x00, 0xF0, 0x26, 0x00, 0x00, 0xF0, 0x1F, 0x00, 0x00, 0xF0, 0x19, 0x00, 0x00, 0xF0
	.byte 0x13, 0x00, 0x00, 0xF0, 0x0D, 0x00, 0x00, 0xF0, 0x06, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0xF0
	.byte 0xFA, 0xFF, 0x00, 0xF0, 0xF3, 0xFF, 0x00, 0xF0, 0xED, 0xFF, 0x00, 0xF0, 0xE7, 0xFF, 0x00, 0xF0
	.byte 0xE1, 0xFF, 0x00, 0xF0, 0xDA, 0xFF, 0x00, 0xF0, 0xD4, 0xFF, 0x00, 0xF0, 0xCE, 0xFF, 0x00, 0xF0
	.byte 0xC7, 0xFF, 0x00, 0xF0, 0xC1, 0xFF, 0x00, 0xF0, 0xBB, 0xFF, 0x01, 0xF0, 0xB5, 0xFF, 0x01, 0xF0
	.byte 0xAE, 0xFF, 0x01, 0xF0, 0xA8, 0xFF, 0x01, 0xF0, 0xA2, 0xFF, 0x01, 0xF0, 0x9B, 0xFF, 0x01, 0xF0
	.byte 0x95, 0xFF, 0x01, 0xF0, 0x8F, 0xFF, 0x02, 0xF0, 0x89, 0xFF, 0x02, 0xF0, 0x82, 0xFF, 0x02, 0xF0
	.byte 0x7C, 0xFF, 0x02, 0xF0, 0x76, 0xFF, 0x02, 0xF0, 0x70, 0xFF, 0x03, 0xF0, 0x69, 0xFF, 0x03, 0xF0
	.byte 0x63, 0xFF, 0x03, 0xF0, 0x5D, 0xFF, 0x03, 0xF0, 0x56, 0xFF, 0x04, 0xF0, 0x50, 0xFF, 0x04, 0xF0
	.byte 0x4A, 0xFF, 0x04, 0xF0, 0x44, 0xFF, 0x04, 0xF0, 0x3D, 0xFF, 0x05, 0xF0, 0x37, 0xFF, 0x05, 0xF0
	.byte 0x31, 0xFF, 0x05, 0xF0, 0x2A, 0xFF, 0x06, 0xF0, 0x24, 0xFF, 0x06, 0xF0, 0x1E, 0xFF, 0x06, 0xF0
	.byte 0x18, 0xFF, 0x07, 0xF0, 0x11, 0xFF, 0x07, 0xF0, 0x0B, 0xFF, 0x07, 0xF0, 0x05, 0xFF, 0x08, 0xF0
	.byte 0xFF, 0xFE, 0x08, 0xF0, 0xF8, 0xFE, 0x08, 0xF0, 0xF2, 0xFE, 0x09, 0xF0, 0xEC, 0xFE, 0x09, 0xF0
	.byte 0xE5, 0xFE, 0x0A, 0xF0, 0xDF, 0xFE, 0x0A, 0xF0, 0xD9, 0xFE, 0x0B, 0xF0, 0xD3, 0xFE, 0x0B, 0xF0
	.byte 0xCC, 0xFE, 0x0C, 0xF0, 0xC6, 0xFE, 0x0C, 0xF0, 0xC0, 0xFE, 0x0D, 0xF0, 0xBA, 0xFE, 0x0D, 0xF0
	.byte 0xB3, 0xFE, 0x0E, 0xF0, 0xAD, 0xFE, 0x0E, 0xF0, 0xA7, 0xFE, 0x0F, 0xF0, 0xA1, 0xFE, 0x0F, 0xF0
	.byte 0x9A, 0xFE, 0x10, 0xF0, 0x94, 0xFE, 0x10, 0xF0, 0x8E, 0xFE, 0x11, 0xF0, 0x88, 0xFE, 0x11, 0xF0
	.byte 0x81, 0xFE, 0x12, 0xF0, 0x7B, 0xFE, 0x13, 0xF0, 0x75, 0xFE, 0x13, 0xF0, 0x6F, 0xFE, 0x14, 0xF0
	.byte 0x68, 0xFE, 0x14, 0xF0, 0x62, 0xFE, 0x15, 0xF0, 0x5C, 0xFE, 0x16, 0xF0, 0x56, 0xFE, 0x16, 0xF0
	.byte 0x4F, 0xFE, 0x17, 0xF0, 0x49, 0xFE, 0x18, 0xF0, 0x43, 0xFE, 0x18, 0xF0, 0x3D, 0xFE, 0x19, 0xF0
	.byte 0x36, 0xFE, 0x1A, 0xF0, 0x30, 0xFE, 0x1A, 0xF0, 0x2A, 0xFE, 0x1B, 0xF0, 0x24, 0xFE, 0x1C, 0xF0
	.byte 0x1D, 0xFE, 0x1D, 0xF0, 0x17, 0xFE, 0x1D, 0xF0, 0x11, 0xFE, 0x1E, 0xF0, 0x0B, 0xFE, 0x1F, 0xF0
	.byte 0x04, 0xFE, 0x20, 0xF0, 0xFE, 0xFD, 0x20, 0xF0, 0xF8, 0xFD, 0x21, 0xF0, 0xF2, 0xFD, 0x22, 0xF0
	.byte 0xEB, 0xFD, 0x23, 0xF0, 0xE5, 0xFD, 0x24, 0xF0, 0xDF, 0xFD, 0x24, 0xF0, 0xD9, 0xFD, 0x25, 0xF0
	.byte 0xD3, 0xFD, 0x26, 0xF0, 0xCC, 0xFD, 0x27, 0xF0, 0xC6, 0xFD, 0x28, 0xF0, 0xC0, 0xFD, 0x29, 0xF0
	.byte 0xBA, 0xFD, 0x2A, 0xF0, 0xB3, 0xFD, 0x2B, 0xF0, 0xAD, 0xFD, 0x2B, 0xF0, 0xA7, 0xFD, 0x2C, 0xF0
	.byte 0xA1, 0xFD, 0x2D, 0xF0, 0x9B, 0xFD, 0x2E, 0xF0, 0x94, 0xFD, 0x2F, 0xF0, 0x8E, 0xFD, 0x30, 0xF0
	.byte 0x88, 0xFD, 0x31, 0xF0, 0x82, 0xFD, 0x32, 0xF0, 0x7C, 0xFD, 0x33, 0xF0, 0x75, 0xFD, 0x34, 0xF0
	.byte 0x6F, 0xFD, 0x35, 0xF0, 0x69, 0xFD, 0x36, 0xF0, 0x63, 0xFD, 0x37, 0xF0, 0x5D, 0xFD, 0x38, 0xF0
	.byte 0x56, 0xFD, 0x39, 0xF0, 0x50, 0xFD, 0x3A, 0xF0, 0x4A, 0xFD, 0x3B, 0xF0, 0x44, 0xFD, 0x3C, 0xF0
	.byte 0x3E, 0xFD, 0x3D, 0xF0, 0x37, 0xFD, 0x3E, 0xF0, 0x31, 0xFD, 0x40, 0xF0, 0x2B, 0xFD, 0x41, 0xF0
	.byte 0x25, 0xFD, 0x42, 0xF0, 0x1F, 0xFD, 0x43, 0xF0, 0x18, 0xFD, 0x44, 0xF0, 0x12, 0xFD, 0x45, 0xF0
	.byte 0x0C, 0xFD, 0x46, 0xF0, 0x06, 0xFD, 0x48, 0xF0, 0x00, 0xFD, 0x49, 0xF0, 0xFA, 0xFC, 0x4A, 0xF0
	.byte 0xF3, 0xFC, 0x4B, 0xF0, 0xED, 0xFC, 0x4C, 0xF0, 0xE7, 0xFC, 0x4D, 0xF0, 0xE1, 0xFC, 0x4F, 0xF0
	.byte 0xDB, 0xFC, 0x50, 0xF0, 0xD5, 0xFC, 0x51, 0xF0, 0xCE, 0xFC, 0x52, 0xF0, 0xC8, 0xFC, 0x54, 0xF0
	.byte 0xC2, 0xFC, 0x55, 0xF0, 0xBC, 0xFC, 0x56, 0xF0, 0xB6, 0xFC, 0x58, 0xF0, 0xB0, 0xFC, 0x59, 0xF0
	.byte 0xAA, 0xFC, 0x5A, 0xF0, 0xA3, 0xFC, 0x5B, 0xF0, 0x9D, 0xFC, 0x5D, 0xF0, 0x97, 0xFC, 0x5E, 0xF0
	.byte 0x91, 0xFC, 0x5F, 0xF0, 0x8B, 0xFC, 0x61, 0xF0, 0x85, 0xFC, 0x62, 0xF0, 0x7F, 0xFC, 0x64, 0xF0
	.byte 0x78, 0xFC, 0x65, 0xF0, 0x72, 0xFC, 0x66, 0xF0, 0x6C, 0xFC, 0x68, 0xF0, 0x66, 0xFC, 0x69, 0xF0
	.byte 0x60, 0xFC, 0x6B, 0xF0, 0x5A, 0xFC, 0x6C, 0xF0, 0x54, 0xFC, 0x6D, 0xF0, 0x4E, 0xFC, 0x6F, 0xF0
	.byte 0x47, 0xFC, 0x70, 0xF0, 0x41, 0xFC, 0x72, 0xF0, 0x3B, 0xFC, 0x73, 0xF0, 0x35, 0xFC, 0x75, 0xF0
	.byte 0x2F, 0xFC, 0x76, 0xF0, 0x29, 0xFC, 0x78, 0xF0, 0x23, 0xFC, 0x79, 0xF0, 0x1D, 0xFC, 0x7B, 0xF0
	.byte 0x17, 0xFC, 0x7C, 0xF0, 0x11, 0xFC, 0x7E, 0xF0, 0x0A, 0xFC, 0x7F, 0xF0, 0x04, 0xFC, 0x81, 0xF0
	.byte 0xFE, 0xFB, 0x83, 0xF0, 0xF8, 0xFB, 0x84, 0xF0, 0xF2, 0xFB, 0x86, 0xF0, 0xEC, 0xFB, 0x87, 0xF0
	.byte 0xE6, 0xFB, 0x89, 0xF0, 0xE0, 0xFB, 0x8A, 0xF0, 0xDA, 0xFB, 0x8C, 0xF0, 0xD4, 0xFB, 0x8E, 0xF0
	.byte 0xCE, 0xFB, 0x8F, 0xF0, 0xC8, 0xFB, 0x91, 0xF0, 0xC2, 0xFB, 0x93, 0xF0, 0xBC, 0xFB, 0x94, 0xF0
	.byte 0xB5, 0xFB, 0x96, 0xF0, 0xAF, 0xFB, 0x98, 0xF0, 0xA9, 0xFB, 0x99, 0xF0, 0xA3, 0xFB, 0x9B, 0xF0
	.byte 0x9D, 0xFB, 0x9D, 0xF0, 0x97, 0xFB, 0x9F, 0xF0, 0x91, 0xFB, 0xA0, 0xF0, 0x8B, 0xFB, 0xA2, 0xF0
	.byte 0x85, 0xFB, 0xA4, 0xF0, 0x7F, 0xFB, 0xA6, 0xF0, 0x79, 0xFB, 0xA7, 0xF0, 0x73, 0xFB, 0xA9, 0xF0
	.byte 0x6D, 0xFB, 0xAB, 0xF0, 0x67, 0xFB, 0xAD, 0xF0, 0x61, 0xFB, 0xAF, 0xF0, 0x5B, 0xFB, 0xB0, 0xF0
	.byte 0x55, 0xFB, 0xB2, 0xF0, 0x4F, 0xFB, 0xB4, 0xF0, 0x49, 0xFB, 0xB6, 0xF0, 0x43, 0xFB, 0xB8, 0xF0
	.byte 0x3D, 0xFB, 0xBA, 0xF0, 0x37, 0xFB, 0xBB, 0xF0, 0x31, 0xFB, 0xBD, 0xF0, 0x2B, 0xFB, 0xBF, 0xF0
	.byte 0x25, 0xFB, 0xC1, 0xF0, 0x1F, 0xFB, 0xC3, 0xF0, 0x19, 0xFB, 0xC5, 0xF0, 0x13, 0xFB, 0xC7, 0xF0
	.byte 0x0D, 0xFB, 0xC9, 0xF0, 0x07, 0xFB, 0xCB, 0xF0, 0x01, 0xFB, 0xCD, 0xF0, 0xFB, 0xFA, 0xCF, 0xF0
	.byte 0xF5, 0xFA, 0xD1, 0xF0, 0xEF, 0xFA, 0xD3, 0xF0, 0xE9, 0xFA, 0xD5, 0xF0, 0xE3, 0xFA, 0xD7, 0xF0
	.byte 0xDD, 0xFA, 0xD9, 0xF0, 0xD7, 0xFA, 0xDB, 0xF0, 0xD1, 0xFA, 0xDD, 0xF0, 0xCC, 0xFA, 0xDF, 0xF0
	.byte 0xC6, 0xFA, 0xE1, 0xF0, 0xC0, 0xFA, 0xE3, 0xF0, 0xBA, 0xFA, 0xE5, 0xF0, 0xB4, 0xFA, 0xE7, 0xF0
	.byte 0xAE, 0xFA, 0xE9, 0xF0, 0xA8, 0xFA, 0xEB, 0xF0, 0xA2, 0xFA, 0xED, 0xF0, 0x9C, 0xFA, 0xEF, 0xF0
	.byte 0x96, 0xFA, 0xF2, 0xF0, 0x90, 0xFA, 0xF4, 0xF0, 0x8A, 0xFA, 0xF6, 0xF0, 0x84, 0xFA, 0xF8, 0xF0
	.byte 0x7F, 0xFA, 0xFA, 0xF0, 0x79, 0xFA, 0xFC, 0xF0, 0x73, 0xFA, 0xFE, 0xF0, 0x6D, 0xFA, 0x01, 0xF1
	.byte 0x67, 0xFA, 0x03, 0xF1, 0x61, 0xFA, 0x05, 0xF1, 0x5B, 0xFA, 0x07, 0xF1, 0x55, 0xFA, 0x09, 0xF1
	.byte 0x4F, 0xFA, 0x0C, 0xF1, 0x4A, 0xFA, 0x0E, 0xF1, 0x44, 0xFA, 0x10, 0xF1, 0x3E, 0xFA, 0x12, 0xF1
	.byte 0x38, 0xFA, 0x15, 0xF1, 0x32, 0xFA, 0x17, 0xF1, 0x2C, 0xFA, 0x19, 0xF1, 0x26, 0xFA, 0x1C, 0xF1
	.byte 0x21, 0xFA, 0x1E, 0xF1, 0x1B, 0xFA, 0x20, 0xF1, 0x15, 0xFA, 0x23, 0xF1, 0x0F, 0xFA, 0x25, 0xF1
	.byte 0x09, 0xFA, 0x27, 0xF1, 0x03, 0xFA, 0x2A, 0xF1, 0xFE, 0xF9, 0x2C, 0xF1, 0xF8, 0xF9, 0x2E, 0xF1
	.byte 0xF2, 0xF9, 0x31, 0xF1, 0xEC, 0xF9, 0x33, 0xF1, 0xE6, 0xF9, 0x35, 0xF1, 0xE1, 0xF9, 0x38, 0xF1
	.byte 0xDB, 0xF9, 0x3A, 0xF1, 0xD5, 0xF9, 0x3D, 0xF1, 0xCF, 0xF9, 0x3F, 0xF1, 0xC9, 0xF9, 0x41, 0xF1
	.byte 0xC4, 0xF9, 0x44, 0xF1, 0xBE, 0xF9, 0x46, 0xF1, 0xB8, 0xF9, 0x49, 0xF1, 0xB2, 0xF9, 0x4B, 0xF1
	.byte 0xAC, 0xF9, 0x4E, 0xF1, 0xA7, 0xF9, 0x50, 0xF1, 0xA1, 0xF9, 0x53, 0xF1, 0x9B, 0xF9, 0x55, 0xF1
	.byte 0x95, 0xF9, 0x58, 0xF1, 0x90, 0xF9, 0x5A, 0xF1, 0x8A, 0xF9, 0x5D, 0xF1, 0x84, 0xF9, 0x5F, 0xF1
	.byte 0x7E, 0xF9, 0x62, 0xF1, 0x79, 0xF9, 0x65, 0xF1, 0x73, 0xF9, 0x67, 0xF1, 0x6D, 0xF9, 0x6A, 0xF1
	.byte 0x67, 0xF9, 0x6C, 0xF1, 0x62, 0xF9, 0x6F, 0xF1, 0x5C, 0xF9, 0x71, 0xF1, 0x56, 0xF9, 0x74, 0xF1
	.byte 0x51, 0xF9, 0x77, 0xF1, 0x4B, 0xF9, 0x79, 0xF1, 0x45, 0xF9, 0x7C, 0xF1, 0x3F, 0xF9, 0x7F, 0xF1
	.byte 0x3A, 0xF9, 0x81, 0xF1, 0x34, 0xF9, 0x84, 0xF1, 0x2E, 0xF9, 0x87, 0xF1, 0x29, 0xF9, 0x89, 0xF1
	.byte 0x23, 0xF9, 0x8C, 0xF1, 0x1D, 0xF9, 0x8F, 0xF1, 0x18, 0xF9, 0x91, 0xF1, 0x12, 0xF9, 0x94, 0xF1
	.byte 0x0C, 0xF9, 0x97, 0xF1, 0x07, 0xF9, 0x9A, 0xF1, 0x01, 0xF9, 0x9C, 0xF1, 0xFB, 0xF8, 0x9F, 0xF1
	.byte 0xF6, 0xF8, 0xA2, 0xF1, 0xF0, 0xF8, 0xA5, 0xF1, 0xEB, 0xF8, 0xA7, 0xF1, 0xE5, 0xF8, 0xAA, 0xF1
	.byte 0xDF, 0xF8, 0xAD, 0xF1, 0xDA, 0xF8, 0xB0, 0xF1, 0xD4, 0xF8, 0xB3, 0xF1, 0xCE, 0xF8, 0xB5, 0xF1
	.byte 0xC9, 0xF8, 0xB8, 0xF1, 0xC3, 0xF8, 0xBB, 0xF1, 0xBE, 0xF8, 0xBE, 0xF1, 0xB8, 0xF8, 0xC1, 0xF1
	.byte 0xB2, 0xF8, 0xC4, 0xF1, 0xAD, 0xF8, 0xC6, 0xF1, 0xA7, 0xF8, 0xC9, 0xF1, 0xA2, 0xF8, 0xCC, 0xF1
	.byte 0x9C, 0xF8, 0xCF, 0xF1, 0x96, 0xF8, 0xD2, 0xF1, 0x91, 0xF8, 0xD5, 0xF1, 0x8B, 0xF8, 0xD8, 0xF1
	.byte 0x86, 0xF8, 0xDB, 0xF1, 0x80, 0xF8, 0xDE, 0xF1, 0x7B, 0xF8, 0xE1, 0xF1, 0x75, 0xF8, 0xE4, 0xF1
	.byte 0x70, 0xF8, 0xE7, 0xF1, 0x6A, 0xF8, 0xEA, 0xF1, 0x65, 0xF8, 0xED, 0xF1, 0x5F, 0xF8, 0xF0, 0xF1
	.byte 0x5A, 0xF8, 0xF3, 0xF1, 0x54, 0xF8, 0xF6, 0xF1, 0x4E, 0xF8, 0xF9, 0xF1, 0x49, 0xF8, 0xFC, 0xF1
	.byte 0x43, 0xF8, 0xFF, 0xF1, 0x3E, 0xF8, 0x02, 0xF2, 0x38, 0xF8, 0x05, 0xF2, 0x33, 0xF8, 0x08, 0xF2
	.byte 0x2E, 0xF8, 0x0B, 0xF2, 0x28, 0xF8, 0x0E, 0xF2, 0x23, 0xF8, 0x11, 0xF2, 0x1D, 0xF8, 0x14, 0xF2
	.byte 0x18, 0xF8, 0x17, 0xF2, 0x12, 0xF8, 0x1A, 0xF2, 0x0D, 0xF8, 0x1D, 0xF2, 0x07, 0xF8, 0x21, 0xF2
	.byte 0x02, 0xF8, 0x24, 0xF2, 0xFC, 0xF7, 0x27, 0xF2, 0xF7, 0xF7, 0x2A, 0xF2, 0xF2, 0xF7, 0x2D, 0xF2
	.byte 0xEC, 0xF7, 0x30, 0xF2, 0xE7, 0xF7, 0x34, 0xF2, 0xE1, 0xF7, 0x37, 0xF2, 0xDC, 0xF7, 0x3A, 0xF2
	.byte 0xD6, 0xF7, 0x3D, 0xF2, 0xD1, 0xF7, 0x40, 0xF2, 0xCC, 0xF7, 0x44, 0xF2, 0xC6, 0xF7, 0x47, 0xF2
	.byte 0xC1, 0xF7, 0x4A, 0xF2, 0xBB, 0xF7, 0x4D, 0xF2, 0xB6, 0xF7, 0x50, 0xF2, 0xB1, 0xF7, 0x54, 0xF2
	.byte 0xAB, 0xF7, 0x57, 0xF2, 0xA6, 0xF7, 0x5A, 0xF2, 0xA1, 0xF7, 0x5E, 0xF2, 0x9B, 0xF7, 0x61, 0xF2
	.byte 0x96, 0xF7, 0x64, 0xF2, 0x91, 0xF7, 0x67, 0xF2, 0x8B, 0xF7, 0x6B, 0xF2, 0x86, 0xF7, 0x6E, 0xF2
	.byte 0x81, 0xF7, 0x71, 0xF2, 0x7B, 0xF7, 0x75, 0xF2, 0x76, 0xF7, 0x78, 0xF2, 0x71, 0xF7, 0x7B, 0xF2
	.byte 0x6B, 0xF7, 0x7F, 0xF2, 0x66, 0xF7, 0x82, 0xF2, 0x61, 0xF7, 0x86, 0xF2, 0x5B, 0xF7, 0x89, 0xF2
	.byte 0x56, 0xF7, 0x8C, 0xF2, 0x51, 0xF7, 0x90, 0xF2, 0x4C, 0xF7, 0x93, 0xF2, 0x46, 0xF7, 0x97, 0xF2
	.byte 0x41, 0xF7, 0x9A, 0xF2, 0x3C, 0xF7, 0x9E, 0xF2, 0x37, 0xF7, 0xA1, 0xF2, 0x31, 0xF7, 0xA4, 0xF2
	.byte 0x2C, 0xF7, 0xA8, 0xF2, 0x27, 0xF7, 0xAB, 0xF2, 0x22, 0xF7, 0xAF, 0xF2, 0x1C, 0xF7, 0xB2, 0xF2
	.byte 0x17, 0xF7, 0xB6, 0xF2, 0x12, 0xF7, 0xB9, 0xF2, 0x0D, 0xF7, 0xBD, 0xF2, 0x08, 0xF7, 0xC0, 0xF2
	.byte 0x02, 0xF7, 0xC4, 0xF2, 0xFD, 0xF6, 0xC7, 0xF2, 0xF8, 0xF6, 0xCB, 0xF2, 0xF3, 0xF6, 0xCE, 0xF2
	.byte 0xEE, 0xF6, 0xD2, 0xF2, 0xE8, 0xF6, 0xD6, 0xF2, 0xE3, 0xF6, 0xD9, 0xF2, 0xDE, 0xF6, 0xDD, 0xF2
	.byte 0xD9, 0xF6, 0xE0, 0xF2, 0xD4, 0xF6, 0xE4, 0xF2, 0xCF, 0xF6, 0xE8, 0xF2, 0xC9, 0xF6, 0xEB, 0xF2
	.byte 0xC4, 0xF6, 0xEF, 0xF2, 0xBF, 0xF6, 0xF2, 0xF2, 0xBA, 0xF6, 0xF6, 0xF2, 0xB5, 0xF6, 0xFA, 0xF2
	.byte 0xB0, 0xF6, 0xFD, 0xF2, 0xAB, 0xF6, 0x01, 0xF3, 0xA6, 0xF6, 0x05, 0xF3, 0xA1, 0xF6, 0x08, 0xF3
	.byte 0x9B, 0xF6, 0x0C, 0xF3, 0x96, 0xF6, 0x10, 0xF3, 0x91, 0xF6, 0x13, 0xF3, 0x8C, 0xF6, 0x17, 0xF3
	.byte 0x87, 0xF6, 0x1B, 0xF3, 0x82, 0xF6, 0x1F, 0xF3, 0x7D, 0xF6, 0x22, 0xF3, 0x78, 0xF6, 0x26, 0xF3
	.byte 0x73, 0xF6, 0x2A, 0xF3, 0x6E, 0xF6, 0x2E, 0xF3, 0x69, 0xF6, 0x31, 0xF3, 0x64, 0xF6, 0x35, 0xF3
	.byte 0x5F, 0xF6, 0x39, 0xF3, 0x5A, 0xF6, 0x3D, 0xF3, 0x55, 0xF6, 0x40, 0xF3, 0x50, 0xF6, 0x44, 0xF3
	.byte 0x4B, 0xF6, 0x48, 0xF3, 0x46, 0xF6, 0x4C, 0xF3, 0x41, 0xF6, 0x50, 0xF3, 0x3C, 0xF6, 0x54, 0xF3
	.byte 0x37, 0xF6, 0x57, 0xF3, 0x32, 0xF6, 0x5B, 0xF3, 0x2D, 0xF6, 0x5F, 0xF3, 0x28, 0xF6, 0x63, 0xF3
	.byte 0x23, 0xF6, 0x67, 0xF3, 0x1E, 0xF6, 0x6B, 0xF3, 0x19, 0xF6, 0x6F, 0xF3, 0x14, 0xF6, 0x72, 0xF3
	.byte 0x0F, 0xF6, 0x76, 0xF3, 0x0A, 0xF6, 0x7A, 0xF3, 0x05, 0xF6, 0x7E, 0xF3, 0x01, 0xF6, 0x82, 0xF3
	.byte 0xFC, 0xF5, 0x86, 0xF3, 0xF7, 0xF5, 0x8A, 0xF3, 0xF2, 0xF5, 0x8E, 0xF3, 0xED, 0xF5, 0x92, 0xF3
	.byte 0xE8, 0xF5, 0x96, 0xF3, 0xE3, 0xF5, 0x9A, 0xF3, 0xDE, 0xF5, 0x9E, 0xF3, 0xDA, 0xF5, 0xA2, 0xF3
	.byte 0xD5, 0xF5, 0xA6, 0xF3, 0xD0, 0xF5, 0xAA, 0xF3, 0xCB, 0xF5, 0xAE, 0xF3, 0xC6, 0xF5, 0xB2, 0xF3
	.byte 0xC1, 0xF5, 0xB6, 0xF3, 0xBC, 0xF5, 0xBA, 0xF3, 0xB8, 0xF5, 0xBE, 0xF3, 0xB3, 0xF5, 0xC2, 0xF3
	.byte 0xAE, 0xF5, 0xC6, 0xF3, 0xA9, 0xF5, 0xCA, 0xF3, 0xA4, 0xF5, 0xCE, 0xF3, 0xA0, 0xF5, 0xD2, 0xF3
	.byte 0x9B, 0xF5, 0xD6, 0xF3, 0x96, 0xF5, 0xDA, 0xF3, 0x91, 0xF5, 0xDE, 0xF3, 0x8D, 0xF5, 0xE2, 0xF3
	.byte 0x88, 0xF5, 0xE7, 0xF3, 0x83, 0xF5, 0xEB, 0xF3, 0x7E, 0xF5, 0xEF, 0xF3, 0x7A, 0xF5, 0xF3, 0xF3
	.byte 0x75, 0xF5, 0xF7, 0xF3, 0x70, 0xF5, 0xFB, 0xF3, 0x6B, 0xF5, 0xFF, 0xF3, 0x67, 0xF5, 0x04, 0xF4
	.byte 0x62, 0xF5, 0x08, 0xF4, 0x5D, 0xF5, 0x0C, 0xF4, 0x59, 0xF5, 0x10, 0xF4, 0x54, 0xF5, 0x14, 0xF4
	.byte 0x4F, 0xF5, 0x18, 0xF4, 0x4B, 0xF5, 0x1D, 0xF4, 0x46, 0xF5, 0x21, 0xF4, 0x41, 0xF5, 0x25, 0xF4
	.byte 0x3D, 0xF5, 0x29, 0xF4, 0x38, 0xF5, 0x2E, 0xF4, 0x33, 0xF5, 0x32, 0xF4, 0x2F, 0xF5, 0x36, 0xF4
	.byte 0x2A, 0xF5, 0x3A, 0xF4, 0x25, 0xF5, 0x3F, 0xF4, 0x21, 0xF5, 0x43, 0xF4, 0x1C, 0xF5, 0x47, 0xF4
	.byte 0x18, 0xF5, 0x4B, 0xF4, 0x13, 0xF5, 0x50, 0xF4, 0x0E, 0xF5, 0x54, 0xF4, 0x0A, 0xF5, 0x58, 0xF4
	.byte 0x05, 0xF5, 0x5D, 0xF4, 0x01, 0xF5, 0x61, 0xF4, 0xFC, 0xF4, 0x65, 0xF4, 0xF8, 0xF4, 0x69, 0xF4
	.byte 0xF3, 0xF4, 0x6E, 0xF4, 0xEF, 0xF4, 0x72, 0xF4, 0xEA, 0xF4, 0x77, 0xF4, 0xE5, 0xF4, 0x7B, 0xF4
	.byte 0xE1, 0xF4, 0x7F, 0xF4, 0xDC, 0xF4, 0x84, 0xF4, 0xD8, 0xF4, 0x88, 0xF4, 0xD3, 0xF4, 0x8C, 0xF4
	.byte 0xCF, 0xF4, 0x91, 0xF4, 0xCA, 0xF4, 0x95, 0xF4, 0xC6, 0xF4, 0x9A, 0xF4, 0xC2, 0xF4, 0x9E, 0xF4
	.byte 0xBD, 0xF4, 0xA2, 0xF4, 0xB9, 0xF4, 0xA7, 0xF4, 0xB4, 0xF4, 0xAB, 0xF4, 0xB0, 0xF4, 0xB0, 0xF4
	.byte 0xAB, 0xF4, 0xB4, 0xF4, 0xA7, 0xF4, 0xB9, 0xF4, 0xA2, 0xF4, 0xBD, 0xF4, 0x9E, 0xF4, 0xC2, 0xF4
	.byte 0x9A, 0xF4, 0xC6, 0xF4, 0x95, 0xF4, 0xCA, 0xF4, 0x91, 0xF4, 0xCF, 0xF4, 0x8C, 0xF4, 0xD3, 0xF4
	.byte 0x88, 0xF4, 0xD8, 0xF4, 0x84, 0xF4, 0xDC, 0xF4, 0x7F, 0xF4, 0xE1, 0xF4, 0x7B, 0xF4, 0xE5, 0xF4
	.byte 0x77, 0xF4, 0xEA, 0xF4, 0x72, 0xF4, 0xEF, 0xF4, 0x6E, 0xF4, 0xF3, 0xF4, 0x69, 0xF4, 0xF8, 0xF4
	.byte 0x65, 0xF4, 0xFC, 0xF4, 0x61, 0xF4, 0x01, 0xF5, 0x5D, 0xF4, 0x05, 0xF5, 0x58, 0xF4, 0x0A, 0xF5
	.byte 0x54, 0xF4, 0x0E, 0xF5, 0x50, 0xF4, 0x13, 0xF5, 0x4B, 0xF4, 0x18, 0xF5, 0x47, 0xF4, 0x1C, 0xF5
	.byte 0x43, 0xF4, 0x21, 0xF5, 0x3F, 0xF4, 0x25, 0xF5, 0x3A, 0xF4, 0x2A, 0xF5, 0x36, 0xF4, 0x2F, 0xF5
	.byte 0x32, 0xF4, 0x33, 0xF5, 0x2E, 0xF4, 0x38, 0xF5, 0x29, 0xF4, 0x3D, 0xF5, 0x25, 0xF4, 0x41, 0xF5
	.byte 0x21, 0xF4, 0x46, 0xF5, 0x1D, 0xF4, 0x4B, 0xF5, 0x18, 0xF4, 0x4F, 0xF5, 0x14, 0xF4, 0x54, 0xF5
	.byte 0x10, 0xF4, 0x59, 0xF5, 0x0C, 0xF4, 0x5D, 0xF5, 0x08, 0xF4, 0x62, 0xF5, 0x04, 0xF4, 0x67, 0xF5
	.byte 0xFF, 0xF3, 0x6B, 0xF5, 0xFB, 0xF3, 0x70, 0xF5, 0xF7, 0xF3, 0x75, 0xF5, 0xF3, 0xF3, 0x7A, 0xF5
	.byte 0xEF, 0xF3, 0x7E, 0xF5, 0xEB, 0xF3, 0x83, 0xF5, 0xE7, 0xF3, 0x88, 0xF5, 0xE2, 0xF3, 0x8D, 0xF5
	.byte 0xDE, 0xF3, 0x91, 0xF5, 0xDA, 0xF3, 0x96, 0xF5, 0xD6, 0xF3, 0x9B, 0xF5, 0xD2, 0xF3, 0xA0, 0xF5
	.byte 0xCE, 0xF3, 0xA4, 0xF5, 0xCA, 0xF3, 0xA9, 0xF5, 0xC6, 0xF3, 0xAE, 0xF5, 0xC2, 0xF3, 0xB3, 0xF5
	.byte 0xBE, 0xF3, 0xB8, 0xF5, 0xBA, 0xF3, 0xBC, 0xF5, 0xB6, 0xF3, 0xC1, 0xF5, 0xB2, 0xF3, 0xC6, 0xF5
	.byte 0xAE, 0xF3, 0xCB, 0xF5, 0xAA, 0xF3, 0xD0, 0xF5, 0xA6, 0xF3, 0xD5, 0xF5, 0xA2, 0xF3, 0xDA, 0xF5
	.byte 0x9E, 0xF3, 0xDE, 0xF5, 0x9A, 0xF3, 0xE3, 0xF5, 0x96, 0xF3, 0xE8, 0xF5, 0x92, 0xF3, 0xED, 0xF5
	.byte 0x8E, 0xF3, 0xF2, 0xF5, 0x8A, 0xF3, 0xF7, 0xF5, 0x86, 0xF3, 0xFC, 0xF5, 0x82, 0xF3, 0x01, 0xF6
	.byte 0x7E, 0xF3, 0x05, 0xF6, 0x7A, 0xF3, 0x0A, 0xF6, 0x76, 0xF3, 0x0F, 0xF6, 0x72, 0xF3, 0x14, 0xF6
	.byte 0x6F, 0xF3, 0x19, 0xF6, 0x6B, 0xF3, 0x1E, 0xF6, 0x67, 0xF3, 0x23, 0xF6, 0x63, 0xF3, 0x28, 0xF6
	.byte 0x5F, 0xF3, 0x2D, 0xF6, 0x5B, 0xF3, 0x32, 0xF6, 0x57, 0xF3, 0x37, 0xF6, 0x54, 0xF3, 0x3C, 0xF6
	.byte 0x50, 0xF3, 0x41, 0xF6, 0x4C, 0xF3, 0x46, 0xF6, 0x48, 0xF3, 0x4B, 0xF6, 0x44, 0xF3, 0x50, 0xF6
	.byte 0x40, 0xF3, 0x55, 0xF6, 0x3D, 0xF3, 0x5A, 0xF6, 0x39, 0xF3, 0x5F, 0xF6, 0x35, 0xF3, 0x64, 0xF6
	.byte 0x31, 0xF3, 0x69, 0xF6, 0x2E, 0xF3, 0x6E, 0xF6, 0x2A, 0xF3, 0x73, 0xF6, 0x26, 0xF3, 0x78, 0xF6
	.byte 0x22, 0xF3, 0x7D, 0xF6, 0x1F, 0xF3, 0x82, 0xF6, 0x1B, 0xF3, 0x87, 0xF6, 0x17, 0xF3, 0x8C, 0xF6
	.byte 0x13, 0xF3, 0x91, 0xF6, 0x10, 0xF3, 0x96, 0xF6, 0x0C, 0xF3, 0x9B, 0xF6, 0x08, 0xF3, 0xA1, 0xF6
	.byte 0x05, 0xF3, 0xA6, 0xF6, 0x01, 0xF3, 0xAB, 0xF6, 0xFD, 0xF2, 0xB0, 0xF6, 0xFA, 0xF2, 0xB5, 0xF6
	.byte 0xF6, 0xF2, 0xBA, 0xF6, 0xF2, 0xF2, 0xBF, 0xF6, 0xEF, 0xF2, 0xC4, 0xF6, 0xEB, 0xF2, 0xC9, 0xF6
	.byte 0xE8, 0xF2, 0xCF, 0xF6, 0xE4, 0xF2, 0xD4, 0xF6, 0xE0, 0xF2, 0xD9, 0xF6, 0xDD, 0xF2, 0xDE, 0xF6
	.byte 0xD9, 0xF2, 0xE3, 0xF6, 0xD6, 0xF2, 0xE8, 0xF6, 0xD2, 0xF2, 0xEE, 0xF6, 0xCE, 0xF2, 0xF3, 0xF6
	.byte 0xCB, 0xF2, 0xF8, 0xF6, 0xC7, 0xF2, 0xFD, 0xF6, 0xC4, 0xF2, 0x02, 0xF7, 0xC0, 0xF2, 0x08, 0xF7
	.byte 0xBD, 0xF2, 0x0D, 0xF7, 0xB9, 0xF2, 0x12, 0xF7, 0xB6, 0xF2, 0x17, 0xF7, 0xB2, 0xF2, 0x1C, 0xF7
	.byte 0xAF, 0xF2, 0x22, 0xF7, 0xAB, 0xF2, 0x27, 0xF7, 0xA8, 0xF2, 0x2C, 0xF7, 0xA4, 0xF2, 0x31, 0xF7
	.byte 0xA1, 0xF2, 0x37, 0xF7, 0x9E, 0xF2, 0x3C, 0xF7, 0x9A, 0xF2, 0x41, 0xF7, 0x97, 0xF2, 0x46, 0xF7
	.byte 0x93, 0xF2, 0x4C, 0xF7, 0x90, 0xF2, 0x51, 0xF7, 0x8C, 0xF2, 0x56, 0xF7, 0x89, 0xF2, 0x5B, 0xF7
	.byte 0x86, 0xF2, 0x61, 0xF7, 0x82, 0xF2, 0x66, 0xF7, 0x7F, 0xF2, 0x6B, 0xF7, 0x7B, 0xF2, 0x71, 0xF7
	.byte 0x78, 0xF2, 0x76, 0xF7, 0x75, 0xF2, 0x7B, 0xF7, 0x71, 0xF2, 0x81, 0xF7, 0x6E, 0xF2, 0x86, 0xF7
	.byte 0x6B, 0xF2, 0x8B, 0xF7, 0x67, 0xF2, 0x91, 0xF7, 0x64, 0xF2, 0x96, 0xF7, 0x61, 0xF2, 0x9B, 0xF7
	.byte 0x5E, 0xF2, 0xA1, 0xF7, 0x5A, 0xF2, 0xA6, 0xF7, 0x57, 0xF2, 0xAB, 0xF7, 0x54, 0xF2, 0xB1, 0xF7
	.byte 0x50, 0xF2, 0xB6, 0xF7, 0x4D, 0xF2, 0xBB, 0xF7, 0x4A, 0xF2, 0xC1, 0xF7, 0x47, 0xF2, 0xC6, 0xF7
	.byte 0x44, 0xF2, 0xCC, 0xF7, 0x40, 0xF2, 0xD1, 0xF7, 0x3D, 0xF2, 0xD6, 0xF7, 0x3A, 0xF2, 0xDC, 0xF7
	.byte 0x37, 0xF2, 0xE1, 0xF7, 0x34, 0xF2, 0xE7, 0xF7, 0x30, 0xF2, 0xEC, 0xF7, 0x2D, 0xF2, 0xF2, 0xF7
	.byte 0x2A, 0xF2, 0xF7, 0xF7, 0x27, 0xF2, 0xFC, 0xF7, 0x24, 0xF2, 0x02, 0xF8, 0x21, 0xF2, 0x07, 0xF8
	.byte 0x1D, 0xF2, 0x0D, 0xF8, 0x1A, 0xF2, 0x12, 0xF8, 0x17, 0xF2, 0x18, 0xF8, 0x14, 0xF2, 0x1D, 0xF8
	.byte 0x11, 0xF2, 0x23, 0xF8, 0x0E, 0xF2, 0x28, 0xF8, 0x0B, 0xF2, 0x2E, 0xF8, 0x08, 0xF2, 0x33, 0xF8
	.byte 0x05, 0xF2, 0x38, 0xF8, 0x02, 0xF2, 0x3E, 0xF8, 0xFF, 0xF1, 0x43, 0xF8, 0xFC, 0xF1, 0x49, 0xF8
	.byte 0xF9, 0xF1, 0x4E, 0xF8, 0xF6, 0xF1, 0x54, 0xF8, 0xF3, 0xF1, 0x5A, 0xF8, 0xF0, 0xF1, 0x5F, 0xF8
	.byte 0xED, 0xF1, 0x65, 0xF8, 0xEA, 0xF1, 0x6A, 0xF8, 0xE7, 0xF1, 0x70, 0xF8, 0xE4, 0xF1, 0x75, 0xF8
	.byte 0xE1, 0xF1, 0x7B, 0xF8, 0xDE, 0xF1, 0x80, 0xF8, 0xDB, 0xF1, 0x86, 0xF8, 0xD8, 0xF1, 0x8B, 0xF8
	.byte 0xD5, 0xF1, 0x91, 0xF8, 0xD2, 0xF1, 0x96, 0xF8, 0xCF, 0xF1, 0x9C, 0xF8, 0xCC, 0xF1, 0xA2, 0xF8
	.byte 0xC9, 0xF1, 0xA7, 0xF8, 0xC6, 0xF1, 0xAD, 0xF8, 0xC4, 0xF1, 0xB2, 0xF8, 0xC1, 0xF1, 0xB8, 0xF8
	.byte 0xBE, 0xF1, 0xBE, 0xF8, 0xBB, 0xF1, 0xC3, 0xF8, 0xB8, 0xF1, 0xC9, 0xF8, 0xB5, 0xF1, 0xCE, 0xF8
	.byte 0xB3, 0xF1, 0xD4, 0xF8, 0xB0, 0xF1, 0xDA, 0xF8, 0xAD, 0xF1, 0xDF, 0xF8, 0xAA, 0xF1, 0xE5, 0xF8
	.byte 0xA7, 0xF1, 0xEB, 0xF8, 0xA5, 0xF1, 0xF0, 0xF8, 0xA2, 0xF1, 0xF6, 0xF8, 0x9F, 0xF1, 0xFB, 0xF8
	.byte 0x9C, 0xF1, 0x01, 0xF9, 0x9A, 0xF1, 0x07, 0xF9, 0x97, 0xF1, 0x0C, 0xF9, 0x94, 0xF1, 0x12, 0xF9
	.byte 0x91, 0xF1, 0x18, 0xF9, 0x8F, 0xF1, 0x1D, 0xF9, 0x8C, 0xF1, 0x23, 0xF9, 0x89, 0xF1, 0x29, 0xF9
	.byte 0x87, 0xF1, 0x2E, 0xF9, 0x84, 0xF1, 0x34, 0xF9, 0x81, 0xF1, 0x3A, 0xF9, 0x7F, 0xF1, 0x3F, 0xF9
	.byte 0x7C, 0xF1, 0x45, 0xF9, 0x79, 0xF1, 0x4B, 0xF9, 0x77, 0xF1, 0x51, 0xF9, 0x74, 0xF1, 0x56, 0xF9
	.byte 0x71, 0xF1, 0x5C, 0xF9, 0x6F, 0xF1, 0x62, 0xF9, 0x6C, 0xF1, 0x67, 0xF9, 0x6A, 0xF1, 0x6D, 0xF9
	.byte 0x67, 0xF1, 0x73, 0xF9, 0x65, 0xF1, 0x79, 0xF9, 0x62, 0xF1, 0x7E, 0xF9, 0x5F, 0xF1, 0x84, 0xF9
	.byte 0x5D, 0xF1, 0x8A, 0xF9, 0x5A, 0xF1, 0x90, 0xF9, 0x58, 0xF1, 0x95, 0xF9, 0x55, 0xF1, 0x9B, 0xF9
	.byte 0x53, 0xF1, 0xA1, 0xF9, 0x50, 0xF1, 0xA7, 0xF9, 0x4E, 0xF1, 0xAC, 0xF9, 0x4B, 0xF1, 0xB2, 0xF9
	.byte 0x49, 0xF1, 0xB8, 0xF9, 0x46, 0xF1, 0xBE, 0xF9, 0x44, 0xF1, 0xC4, 0xF9, 0x41, 0xF1, 0xC9, 0xF9
	.byte 0x3F, 0xF1, 0xCF, 0xF9, 0x3D, 0xF1, 0xD5, 0xF9, 0x3A, 0xF1, 0xDB, 0xF9, 0x38, 0xF1, 0xE1, 0xF9
	.byte 0x35, 0xF1, 0xE6, 0xF9, 0x33, 0xF1, 0xEC, 0xF9, 0x31, 0xF1, 0xF2, 0xF9, 0x2E, 0xF1, 0xF8, 0xF9
	.byte 0x2C, 0xF1, 0xFE, 0xF9, 0x2A, 0xF1, 0x03, 0xFA, 0x27, 0xF1, 0x09, 0xFA, 0x25, 0xF1, 0x0F, 0xFA
	.byte 0x23, 0xF1, 0x15, 0xFA, 0x20, 0xF1, 0x1B, 0xFA, 0x1E, 0xF1, 0x21, 0xFA, 0x1C, 0xF1, 0x26, 0xFA
	.byte 0x19, 0xF1, 0x2C, 0xFA, 0x17, 0xF1, 0x32, 0xFA, 0x15, 0xF1, 0x38, 0xFA, 0x12, 0xF1, 0x3E, 0xFA
	.byte 0x10, 0xF1, 0x44, 0xFA, 0x0E, 0xF1, 0x4A, 0xFA, 0x0C, 0xF1, 0x4F, 0xFA, 0x09, 0xF1, 0x55, 0xFA
	.byte 0x07, 0xF1, 0x5B, 0xFA, 0x05, 0xF1, 0x61, 0xFA, 0x03, 0xF1, 0x67, 0xFA, 0x01, 0xF1, 0x6D, 0xFA
	.byte 0xFE, 0xF0, 0x73, 0xFA, 0xFC, 0xF0, 0x79, 0xFA, 0xFA, 0xF0, 0x7F, 0xFA, 0xF8, 0xF0, 0x84, 0xFA
	.byte 0xF6, 0xF0, 0x8A, 0xFA, 0xF4, 0xF0, 0x90, 0xFA, 0xF2, 0xF0, 0x96, 0xFA, 0xEF, 0xF0, 0x9C, 0xFA
	.byte 0xED, 0xF0, 0xA2, 0xFA, 0xEB, 0xF0, 0xA8, 0xFA, 0xE9, 0xF0, 0xAE, 0xFA, 0xE7, 0xF0, 0xB4, 0xFA
	.byte 0xE5, 0xF0, 0xBA, 0xFA, 0xE3, 0xF0, 0xC0, 0xFA, 0xE1, 0xF0, 0xC6, 0xFA, 0xDF, 0xF0, 0xCC, 0xFA
	.byte 0xDD, 0xF0, 0xD1, 0xFA, 0xDB, 0xF0, 0xD7, 0xFA, 0xD9, 0xF0, 0xDD, 0xFA, 0xD7, 0xF0, 0xE3, 0xFA
	.byte 0xD5, 0xF0, 0xE9, 0xFA, 0xD3, 0xF0, 0xEF, 0xFA, 0xD1, 0xF0, 0xF5, 0xFA, 0xCF, 0xF0, 0xFB, 0xFA
	.byte 0xCD, 0xF0, 0x01, 0xFB, 0xCB, 0xF0, 0x07, 0xFB, 0xC9, 0xF0, 0x0D, 0xFB, 0xC7, 0xF0, 0x13, 0xFB
	.byte 0xC5, 0xF0, 0x19, 0xFB, 0xC3, 0xF0, 0x1F, 0xFB, 0xC1, 0xF0, 0x25, 0xFB, 0xBF, 0xF0, 0x2B, 0xFB
	.byte 0xBD, 0xF0, 0x31, 0xFB, 0xBB, 0xF0, 0x37, 0xFB, 0xBA, 0xF0, 0x3D, 0xFB, 0xB8, 0xF0, 0x43, 0xFB
	.byte 0xB6, 0xF0, 0x49, 0xFB, 0xB4, 0xF0, 0x4F, 0xFB, 0xB2, 0xF0, 0x55, 0xFB, 0xB0, 0xF0, 0x5B, 0xFB
	.byte 0xAF, 0xF0, 0x61, 0xFB, 0xAD, 0xF0, 0x67, 0xFB, 0xAB, 0xF0, 0x6D, 0xFB, 0xA9, 0xF0, 0x73, 0xFB
	.byte 0xA7, 0xF0, 0x79, 0xFB, 0xA6, 0xF0, 0x7F, 0xFB, 0xA4, 0xF0, 0x85, 0xFB, 0xA2, 0xF0, 0x8B, 0xFB
	.byte 0xA0, 0xF0, 0x91, 0xFB, 0x9F, 0xF0, 0x97, 0xFB, 0x9D, 0xF0, 0x9D, 0xFB, 0x9B, 0xF0, 0xA3, 0xFB
	.byte 0x99, 0xF0, 0xA9, 0xFB, 0x98, 0xF0, 0xAF, 0xFB, 0x96, 0xF0, 0xB5, 0xFB, 0x94, 0xF0, 0xBC, 0xFB
	.byte 0x93, 0xF0, 0xC2, 0xFB, 0x91, 0xF0, 0xC8, 0xFB, 0x8F, 0xF0, 0xCE, 0xFB, 0x8E, 0xF0, 0xD4, 0xFB
	.byte 0x8C, 0xF0, 0xDA, 0xFB, 0x8A, 0xF0, 0xE0, 0xFB, 0x89, 0xF0, 0xE6, 0xFB, 0x87, 0xF0, 0xEC, 0xFB
	.byte 0x86, 0xF0, 0xF2, 0xFB, 0x84, 0xF0, 0xF8, 0xFB, 0x83, 0xF0, 0xFE, 0xFB, 0x81, 0xF0, 0x04, 0xFC
	.byte 0x7F, 0xF0, 0x0A, 0xFC, 0x7E, 0xF0, 0x11, 0xFC, 0x7C, 0xF0, 0x17, 0xFC, 0x7B, 0xF0, 0x1D, 0xFC
	.byte 0x79, 0xF0, 0x23, 0xFC, 0x78, 0xF0, 0x29, 0xFC, 0x76, 0xF0, 0x2F, 0xFC, 0x75, 0xF0, 0x35, 0xFC
	.byte 0x73, 0xF0, 0x3B, 0xFC, 0x72, 0xF0, 0x41, 0xFC, 0x70, 0xF0, 0x47, 0xFC, 0x6F, 0xF0, 0x4E, 0xFC
	.byte 0x6D, 0xF0, 0x54, 0xFC, 0x6C, 0xF0, 0x5A, 0xFC, 0x6B, 0xF0, 0x60, 0xFC, 0x69, 0xF0, 0x66, 0xFC
	.byte 0x68, 0xF0, 0x6C, 0xFC, 0x66, 0xF0, 0x72, 0xFC, 0x65, 0xF0, 0x78, 0xFC, 0x64, 0xF0, 0x7F, 0xFC
	.byte 0x62, 0xF0, 0x85, 0xFC, 0x61, 0xF0, 0x8B, 0xFC, 0x5F, 0xF0, 0x91, 0xFC, 0x5E, 0xF0, 0x97, 0xFC
	.byte 0x5D, 0xF0, 0x9D, 0xFC, 0x5B, 0xF0, 0xA3, 0xFC, 0x5A, 0xF0, 0xAA, 0xFC, 0x59, 0xF0, 0xB0, 0xFC
	.byte 0x58, 0xF0, 0xB6, 0xFC, 0x56, 0xF0, 0xBC, 0xFC, 0x55, 0xF0, 0xC2, 0xFC, 0x54, 0xF0, 0xC8, 0xFC
	.byte 0x52, 0xF0, 0xCE, 0xFC, 0x51, 0xF0, 0xD5, 0xFC, 0x50, 0xF0, 0xDB, 0xFC, 0x4F, 0xF0, 0xE1, 0xFC
	.byte 0x4D, 0xF0, 0xE7, 0xFC, 0x4C, 0xF0, 0xED, 0xFC, 0x4B, 0xF0, 0xF3, 0xFC, 0x4A, 0xF0, 0xFA, 0xFC
	.byte 0x49, 0xF0, 0x00, 0xFD, 0x48, 0xF0, 0x06, 0xFD, 0x46, 0xF0, 0x0C, 0xFD, 0x45, 0xF0, 0x12, 0xFD
	.byte 0x44, 0xF0, 0x18, 0xFD, 0x43, 0xF0, 0x1F, 0xFD, 0x42, 0xF0, 0x25, 0xFD, 0x41, 0xF0, 0x2B, 0xFD
	.byte 0x40, 0xF0, 0x31, 0xFD, 0x3E, 0xF0, 0x37, 0xFD, 0x3D, 0xF0, 0x3E, 0xFD, 0x3C, 0xF0, 0x44, 0xFD
	.byte 0x3B, 0xF0, 0x4A, 0xFD, 0x3A, 0xF0, 0x50, 0xFD, 0x39, 0xF0, 0x56, 0xFD, 0x38, 0xF0, 0x5D, 0xFD
	.byte 0x37, 0xF0, 0x63, 0xFD, 0x36, 0xF0, 0x69, 0xFD, 0x35, 0xF0, 0x6F, 0xFD, 0x34, 0xF0, 0x75, 0xFD
	.byte 0x33, 0xF0, 0x7C, 0xFD, 0x32, 0xF0, 0x82, 0xFD, 0x31, 0xF0, 0x88, 0xFD, 0x30, 0xF0, 0x8E, 0xFD
	.byte 0x2F, 0xF0, 0x94, 0xFD, 0x2E, 0xF0, 0x9B, 0xFD, 0x2D, 0xF0, 0xA1, 0xFD, 0x2C, 0xF0, 0xA7, 0xFD
	.byte 0x2B, 0xF0, 0xAD, 0xFD, 0x2B, 0xF0, 0xB3, 0xFD, 0x2A, 0xF0, 0xBA, 0xFD, 0x29, 0xF0, 0xC0, 0xFD
	.byte 0x28, 0xF0, 0xC6, 0xFD, 0x27, 0xF0, 0xCC, 0xFD, 0x26, 0xF0, 0xD3, 0xFD, 0x25, 0xF0, 0xD9, 0xFD
	.byte 0x24, 0xF0, 0xDF, 0xFD, 0x24, 0xF0, 0xE5, 0xFD, 0x23, 0xF0, 0xEB, 0xFD, 0x22, 0xF0, 0xF2, 0xFD
	.byte 0x21, 0xF0, 0xF8, 0xFD, 0x20, 0xF0, 0xFE, 0xFD, 0x20, 0xF0, 0x04, 0xFE, 0x1F, 0xF0, 0x0B, 0xFE
	.byte 0x1E, 0xF0, 0x11, 0xFE, 0x1D, 0xF0, 0x17, 0xFE, 0x1D, 0xF0, 0x1D, 0xFE, 0x1C, 0xF0, 0x24, 0xFE
	.byte 0x1B, 0xF0, 0x2A, 0xFE, 0x1A, 0xF0, 0x30, 0xFE, 0x1A, 0xF0, 0x36, 0xFE, 0x19, 0xF0, 0x3D, 0xFE
	.byte 0x18, 0xF0, 0x43, 0xFE, 0x18, 0xF0, 0x49, 0xFE, 0x17, 0xF0, 0x4F, 0xFE, 0x16, 0xF0, 0x56, 0xFE
	.byte 0x16, 0xF0, 0x5C, 0xFE, 0x15, 0xF0, 0x62, 0xFE, 0x14, 0xF0, 0x68, 0xFE, 0x14, 0xF0, 0x6F, 0xFE
	.byte 0x13, 0xF0, 0x75, 0xFE, 0x13, 0xF0, 0x7B, 0xFE, 0x12, 0xF0, 0x81, 0xFE, 0x11, 0xF0, 0x88, 0xFE
	.byte 0x11, 0xF0, 0x8E, 0xFE, 0x10, 0xF0, 0x94, 0xFE, 0x10, 0xF0, 0x9A, 0xFE, 0x0F, 0xF0, 0xA1, 0xFE
	.byte 0x0F, 0xF0, 0xA7, 0xFE, 0x0E, 0xF0, 0xAD, 0xFE, 0x0E, 0xF0, 0xB3, 0xFE, 0x0D, 0xF0, 0xBA, 0xFE
	.byte 0x0D, 0xF0, 0xC0, 0xFE, 0x0C, 0xF0, 0xC6, 0xFE, 0x0C, 0xF0, 0xCC, 0xFE, 0x0B, 0xF0, 0xD3, 0xFE
	.byte 0x0B, 0xF0, 0xD9, 0xFE, 0x0A, 0xF0, 0xDF, 0xFE, 0x0A, 0xF0, 0xE5, 0xFE, 0x09, 0xF0, 0xEC, 0xFE
	.byte 0x09, 0xF0, 0xF2, 0xFE, 0x08, 0xF0, 0xF8, 0xFE, 0x08, 0xF0, 0xFF, 0xFE, 0x08, 0xF0, 0x05, 0xFF
	.byte 0x07, 0xF0, 0x0B, 0xFF, 0x07, 0xF0, 0x11, 0xFF, 0x07, 0xF0, 0x18, 0xFF, 0x06, 0xF0, 0x1E, 0xFF
	.byte 0x06, 0xF0, 0x24, 0xFF, 0x06, 0xF0, 0x2A, 0xFF, 0x05, 0xF0, 0x31, 0xFF, 0x05, 0xF0, 0x37, 0xFF
	.byte 0x05, 0xF0, 0x3D, 0xFF, 0x04, 0xF0, 0x44, 0xFF, 0x04, 0xF0, 0x4A, 0xFF, 0x04, 0xF0, 0x50, 0xFF
	.byte 0x04, 0xF0, 0x56, 0xFF, 0x03, 0xF0, 0x5D, 0xFF, 0x03, 0xF0, 0x63, 0xFF, 0x03, 0xF0, 0x69, 0xFF
	.byte 0x03, 0xF0, 0x70, 0xFF, 0x02, 0xF0, 0x76, 0xFF, 0x02, 0xF0, 0x7C, 0xFF, 0x02, 0xF0, 0x82, 0xFF
	.byte 0x02, 0xF0, 0x89, 0xFF, 0x02, 0xF0, 0x8F, 0xFF, 0x01, 0xF0, 0x95, 0xFF, 0x01, 0xF0, 0x9B, 0xFF
	.byte 0x01, 0xF0, 0xA2, 0xFF, 0x01, 0xF0, 0xA8, 0xFF, 0x01, 0xF0, 0xAE, 0xFF, 0x01, 0xF0, 0xB5, 0xFF
	.byte 0x01, 0xF0, 0xBB, 0xFF, 0x00, 0xF0, 0xC1, 0xFF, 0x00, 0xF0, 0xC7, 0xFF, 0x00, 0xF0, 0xCE, 0xFF
	.byte 0x00, 0xF0, 0xD4, 0xFF, 0x00, 0xF0, 0xDA, 0xFF, 0x00, 0xF0, 0xE1, 0xFF, 0x00, 0xF0, 0xE7, 0xFF
	.byte 0x00, 0xF0, 0xED, 0xFF, 0x00, 0xF0, 0xF3, 0xFF, 0x00, 0xF0, 0xFA, 0xFF, 0x00, 0xF0, 0x00, 0x00
	.byte 0x00, 0xF0, 0x06, 0x00, 0x00, 0xF0, 0x0D, 0x00, 0x00, 0xF0, 0x13, 0x00, 0x00, 0xF0, 0x19, 0x00
	.byte 0x00, 0xF0, 0x1F, 0x00, 0x00, 0xF0, 0x26, 0x00, 0x00, 0xF0, 0x2C, 0x00, 0x00, 0xF0, 0x32, 0x00
	.byte 0x00, 0xF0, 0x39, 0x00, 0x00, 0xF0, 0x3F, 0x00, 0x01, 0xF0, 0x45, 0x00, 0x01, 0xF0, 0x4B, 0x00
	.byte 0x01, 0xF0, 0x52, 0x00, 0x01, 0xF0, 0x58, 0x00, 0x01, 0xF0, 0x5E, 0x00, 0x01, 0xF0, 0x65, 0x00
	.byte 0x01, 0xF0, 0x6B, 0x00, 0x02, 0xF0, 0x71, 0x00, 0x02, 0xF0, 0x77, 0x00, 0x02, 0xF0, 0x7E, 0x00
	.byte 0x02, 0xF0, 0x84, 0x00, 0x02, 0xF0, 0x8A, 0x00, 0x03, 0xF0, 0x90, 0x00, 0x03, 0xF0, 0x97, 0x00
	.byte 0x03, 0xF0, 0x9D, 0x00, 0x03, 0xF0, 0xA3, 0x00, 0x04, 0xF0, 0xAA, 0x00, 0x04, 0xF0, 0xB0, 0x00
	.byte 0x04, 0xF0, 0xB6, 0x00, 0x04, 0xF0, 0xBC, 0x00, 0x05, 0xF0, 0xC3, 0x00, 0x05, 0xF0, 0xC9, 0x00
	.byte 0x05, 0xF0, 0xCF, 0x00, 0x06, 0xF0, 0xD6, 0x00, 0x06, 0xF0, 0xDC, 0x00, 0x06, 0xF0, 0xE2, 0x00
	.byte 0x07, 0xF0, 0xE8, 0x00, 0x07, 0xF0, 0xEF, 0x00, 0x07, 0xF0, 0xF5, 0x00, 0x08, 0xF0, 0xFB, 0x00
	.byte 0x08, 0xF0, 0x01, 0x01, 0x08, 0xF0, 0x08, 0x01, 0x09, 0xF0, 0x0E, 0x01, 0x09, 0xF0, 0x14, 0x01
	.byte 0x0A, 0xF0, 0x1B, 0x01, 0x0A, 0xF0, 0x21, 0x01, 0x0B, 0xF0, 0x27, 0x01, 0x0B, 0xF0, 0x2D, 0x01
	.byte 0x0C, 0xF0, 0x34, 0x01, 0x0C, 0xF0, 0x3A, 0x01, 0x0D, 0xF0, 0x40, 0x01, 0x0D, 0xF0, 0x46, 0x01
	.byte 0x0E, 0xF0, 0x4D, 0x01, 0x0E, 0xF0, 0x53, 0x01, 0x0F, 0xF0, 0x59, 0x01, 0x0F, 0xF0, 0x5F, 0x01
	.byte 0x10, 0xF0, 0x66, 0x01, 0x10, 0xF0, 0x6C, 0x01, 0x11, 0xF0, 0x72, 0x01, 0x11, 0xF0, 0x78, 0x01
	.byte 0x12, 0xF0, 0x7F, 0x01, 0x13, 0xF0, 0x85, 0x01, 0x13, 0xF0, 0x8B, 0x01, 0x14, 0xF0, 0x91, 0x01
	.byte 0x14, 0xF0, 0x98, 0x01, 0x15, 0xF0, 0x9E, 0x01, 0x16, 0xF0, 0xA4, 0x01, 0x16, 0xF0, 0xAA, 0x01
	.byte 0x17, 0xF0, 0xB1, 0x01, 0x18, 0xF0, 0xB7, 0x01, 0x18, 0xF0, 0xBD, 0x01, 0x19, 0xF0, 0xC3, 0x01
	.byte 0x1A, 0xF0, 0xCA, 0x01, 0x1A, 0xF0, 0xD0, 0x01, 0x1B, 0xF0, 0xD6, 0x01, 0x1C, 0xF0, 0xDC, 0x01
	.byte 0x1D, 0xF0, 0xE3, 0x01, 0x1D, 0xF0, 0xE9, 0x01, 0x1E, 0xF0, 0xEF, 0x01, 0x1F, 0xF0, 0xF5, 0x01
	.byte 0x20, 0xF0, 0xFC, 0x01, 0x20, 0xF0, 0x02, 0x02, 0x21, 0xF0, 0x08, 0x02, 0x22, 0xF0, 0x0E, 0x02
	.byte 0x23, 0xF0, 0x15, 0x02, 0x24, 0xF0, 0x1B, 0x02, 0x24, 0xF0, 0x21, 0x02, 0x25, 0xF0, 0x27, 0x02
	.byte 0x26, 0xF0, 0x2D, 0x02, 0x27, 0xF0, 0x34, 0x02, 0x28, 0xF0, 0x3A, 0x02, 0x29, 0xF0, 0x40, 0x02
	.byte 0x2A, 0xF0, 0x46, 0x02, 0x2B, 0xF0, 0x4D, 0x02, 0x2B, 0xF0, 0x53, 0x02, 0x2C, 0xF0, 0x59, 0x02
	.byte 0x2D, 0xF0, 0x5F, 0x02, 0x2E, 0xF0, 0x65, 0x02, 0x2F, 0xF0, 0x6C, 0x02, 0x30, 0xF0, 0x72, 0x02
	.byte 0x31, 0xF0, 0x78, 0x02, 0x32, 0xF0, 0x7E, 0x02, 0x33, 0xF0, 0x84, 0x02, 0x34, 0xF0, 0x8B, 0x02
	.byte 0x35, 0xF0, 0x91, 0x02, 0x36, 0xF0, 0x97, 0x02, 0x37, 0xF0, 0x9D, 0x02, 0x38, 0xF0, 0xA3, 0x02
	.byte 0x39, 0xF0, 0xAA, 0x02, 0x3A, 0xF0, 0xB0, 0x02, 0x3B, 0xF0, 0xB6, 0x02, 0x3C, 0xF0, 0xBC, 0x02
	.byte 0x3D, 0xF0, 0xC2, 0x02, 0x3E, 0xF0, 0xC9, 0x02, 0x40, 0xF0, 0xCF, 0x02, 0x41, 0xF0, 0xD5, 0x02
	.byte 0x42, 0xF0, 0xDB, 0x02, 0x43, 0xF0, 0xE1, 0x02, 0x44, 0xF0, 0xE8, 0x02, 0x45, 0xF0, 0xEE, 0x02
	.byte 0x46, 0xF0, 0xF4, 0x02, 0x48, 0xF0, 0xFA, 0x02, 0x49, 0xF0, 0x00, 0x03, 0x4A, 0xF0, 0x06, 0x03
	.byte 0x4B, 0xF0, 0x0D, 0x03, 0x4C, 0xF0, 0x13, 0x03, 0x4D, 0xF0, 0x19, 0x03, 0x4F, 0xF0, 0x1F, 0x03
	.byte 0x50, 0xF0, 0x25, 0x03, 0x51, 0xF0, 0x2B, 0x03, 0x52, 0xF0, 0x32, 0x03, 0x54, 0xF0, 0x38, 0x03
	.byte 0x55, 0xF0, 0x3E, 0x03, 0x56, 0xF0, 0x44, 0x03, 0x58, 0xF0, 0x4A, 0x03, 0x59, 0xF0, 0x50, 0x03
	.byte 0x5A, 0xF0, 0x56, 0x03, 0x5B, 0xF0, 0x5D, 0x03, 0x5D, 0xF0, 0x63, 0x03, 0x5E, 0xF0, 0x69, 0x03
	.byte 0x5F, 0xF0, 0x6F, 0x03, 0x61, 0xF0, 0x75, 0x03, 0x62, 0xF0, 0x7B, 0x03, 0x64, 0xF0, 0x81, 0x03
	.byte 0x65, 0xF0, 0x88, 0x03, 0x66, 0xF0, 0x8E, 0x03, 0x68, 0xF0, 0x94, 0x03, 0x69, 0xF0, 0x9A, 0x03
	.byte 0x6B, 0xF0, 0xA0, 0x03, 0x6C, 0xF0, 0xA6, 0x03, 0x6D, 0xF0, 0xAC, 0x03, 0x6F, 0xF0, 0xB2, 0x03
	.byte 0x70, 0xF0, 0xB9, 0x03, 0x72, 0xF0, 0xBF, 0x03, 0x73, 0xF0, 0xC5, 0x03, 0x75, 0xF0, 0xCB, 0x03
	.byte 0x76, 0xF0, 0xD1, 0x03, 0x78, 0xF0, 0xD7, 0x03, 0x79, 0xF0, 0xDD, 0x03, 0x7B, 0xF0, 0xE3, 0x03
	.byte 0x7C, 0xF0, 0xE9, 0x03, 0x7E, 0xF0, 0xEF, 0x03, 0x7F, 0xF0, 0xF6, 0x03, 0x81, 0xF0, 0xFC, 0x03
	.byte 0x83, 0xF0, 0x02, 0x04, 0x84, 0xF0, 0x08, 0x04, 0x86, 0xF0, 0x0E, 0x04, 0x87, 0xF0, 0x14, 0x04
	.byte 0x89, 0xF0, 0x1A, 0x04, 0x8A, 0xF0, 0x20, 0x04, 0x8C, 0xF0, 0x26, 0x04, 0x8E, 0xF0, 0x2C, 0x04
	.byte 0x8F, 0xF0, 0x32, 0x04, 0x91, 0xF0, 0x38, 0x04, 0x93, 0xF0, 0x3E, 0x04, 0x94, 0xF0, 0x44, 0x04
	.byte 0x96, 0xF0, 0x4B, 0x04, 0x98, 0xF0, 0x51, 0x04, 0x99, 0xF0, 0x57, 0x04, 0x9B, 0xF0, 0x5D, 0x04
	.byte 0x9D, 0xF0, 0x63, 0x04, 0x9F, 0xF0, 0x69, 0x04, 0xA0, 0xF0, 0x6F, 0x04, 0xA2, 0xF0, 0x75, 0x04
	.byte 0xA4, 0xF0, 0x7B, 0x04, 0xA6, 0xF0, 0x81, 0x04, 0xA7, 0xF0, 0x87, 0x04, 0xA9, 0xF0, 0x8D, 0x04
	.byte 0xAB, 0xF0, 0x93, 0x04, 0xAD, 0xF0, 0x99, 0x04, 0xAF, 0xF0, 0x9F, 0x04, 0xB0, 0xF0, 0xA5, 0x04
	.byte 0xB2, 0xF0, 0xAB, 0x04, 0xB4, 0xF0, 0xB1, 0x04, 0xB6, 0xF0, 0xB7, 0x04, 0xB8, 0xF0, 0xBD, 0x04
	.byte 0xBA, 0xF0, 0xC3, 0x04, 0xBB, 0xF0, 0xC9, 0x04, 0xBD, 0xF0, 0xCF, 0x04, 0xBF, 0xF0, 0xD5, 0x04
	.byte 0xC1, 0xF0, 0xDB, 0x04, 0xC3, 0xF0, 0xE1, 0x04, 0xC5, 0xF0, 0xE7, 0x04, 0xC7, 0xF0, 0xED, 0x04
	.byte 0xC9, 0xF0, 0xF3, 0x04, 0xCB, 0xF0, 0xF9, 0x04, 0xCD, 0xF0, 0xFF, 0x04, 0xCF, 0xF0, 0x05, 0x05
	.byte 0xD1, 0xF0, 0x0B, 0x05, 0xD3, 0xF0, 0x11, 0x05, 0xD5, 0xF0, 0x17, 0x05, 0xD7, 0xF0, 0x1D, 0x05
	.byte 0xD9, 0xF0, 0x23, 0x05, 0xDB, 0xF0, 0x29, 0x05, 0xDD, 0xF0, 0x2F, 0x05, 0xDF, 0xF0, 0x34, 0x05
	.byte 0xE1, 0xF0, 0x3A, 0x05, 0xE3, 0xF0, 0x40, 0x05, 0xE5, 0xF0, 0x46, 0x05, 0xE7, 0xF0, 0x4C, 0x05
	.byte 0xE9, 0xF0, 0x52, 0x05, 0xEB, 0xF0, 0x58, 0x05, 0xED, 0xF0, 0x5E, 0x05, 0xEF, 0xF0, 0x64, 0x05
	.byte 0xF2, 0xF0, 0x6A, 0x05, 0xF4, 0xF0, 0x70, 0x05, 0xF6, 0xF0, 0x76, 0x05, 0xF8, 0xF0, 0x7C, 0x05
	.byte 0xFA, 0xF0, 0x81, 0x05, 0xFC, 0xF0, 0x87, 0x05, 0xFE, 0xF0, 0x8D, 0x05, 0x01, 0xF1, 0x93, 0x05
	.byte 0x03, 0xF1, 0x99, 0x05, 0x05, 0xF1, 0x9F, 0x05, 0x07, 0xF1, 0xA5, 0x05, 0x09, 0xF1, 0xAB, 0x05
	.byte 0x0C, 0xF1, 0xB1, 0x05, 0x0E, 0xF1, 0xB6, 0x05, 0x10, 0xF1, 0xBC, 0x05, 0x12, 0xF1, 0xC2, 0x05
	.byte 0x15, 0xF1, 0xC8, 0x05, 0x17, 0xF1, 0xCE, 0x05, 0x19, 0xF1, 0xD4, 0x05, 0x1C, 0xF1, 0xDA, 0x05
	.byte 0x1E, 0xF1, 0xDF, 0x05, 0x20, 0xF1, 0xE5, 0x05, 0x23, 0xF1, 0xEB, 0x05, 0x25, 0xF1, 0xF1, 0x05
	.byte 0x27, 0xF1, 0xF7, 0x05, 0x2A, 0xF1, 0xFD, 0x05, 0x2C, 0xF1, 0x02, 0x06, 0x2E, 0xF1, 0x08, 0x06
	.byte 0x31, 0xF1, 0x0E, 0x06, 0x33, 0xF1, 0x14, 0x06, 0x35, 0xF1, 0x1A, 0x06, 0x38, 0xF1, 0x1F, 0x06
	.byte 0x3A, 0xF1, 0x25, 0x06, 0x3D, 0xF1, 0x2B, 0x06, 0x3F, 0xF1, 0x31, 0x06, 0x41, 0xF1, 0x37, 0x06
	.byte 0x44, 0xF1, 0x3C, 0x06, 0x46, 0xF1, 0x42, 0x06, 0x49, 0xF1, 0x48, 0x06, 0x4B, 0xF1, 0x4E, 0x06
	.byte 0x4E, 0xF1, 0x54, 0x06, 0x50, 0xF1, 0x59, 0x06, 0x53, 0xF1, 0x5F, 0x06, 0x55, 0xF1, 0x65, 0x06
	.byte 0x58, 0xF1, 0x6B, 0x06, 0x5A, 0xF1, 0x70, 0x06, 0x5D, 0xF1, 0x76, 0x06, 0x5F, 0xF1, 0x7C, 0x06
	.byte 0x62, 0xF1, 0x82, 0x06, 0x65, 0xF1, 0x87, 0x06, 0x67, 0xF1, 0x8D, 0x06, 0x6A, 0xF1, 0x93, 0x06
	.byte 0x6C, 0xF1, 0x99, 0x06, 0x6F, 0xF1, 0x9E, 0x06, 0x71, 0xF1, 0xA4, 0x06, 0x74, 0xF1, 0xAA, 0x06
	.byte 0x77, 0xF1, 0xAF, 0x06, 0x79, 0xF1, 0xB5, 0x06, 0x7C, 0xF1, 0xBB, 0x06, 0x7F, 0xF1, 0xC1, 0x06
	.byte 0x81, 0xF1, 0xC6, 0x06, 0x84, 0xF1, 0xCC, 0x06, 0x87, 0xF1, 0xD2, 0x06, 0x89, 0xF1, 0xD7, 0x06
	.byte 0x8C, 0xF1, 0xDD, 0x06, 0x8F, 0xF1, 0xE3, 0x06, 0x91, 0xF1, 0xE8, 0x06, 0x94, 0xF1, 0xEE, 0x06
	.byte 0x97, 0xF1, 0xF4, 0x06, 0x9A, 0xF1, 0xF9, 0x06, 0x9C, 0xF1, 0xFF, 0x06, 0x9F, 0xF1, 0x05, 0x07
	.byte 0xA2, 0xF1, 0x0A, 0x07, 0xA5, 0xF1, 0x10, 0x07, 0xA7, 0xF1, 0x15, 0x07, 0xAA, 0xF1, 0x1B, 0x07
	.byte 0xAD, 0xF1, 0x21, 0x07, 0xB0, 0xF1, 0x26, 0x07, 0xB3, 0xF1, 0x2C, 0x07, 0xB5, 0xF1, 0x32, 0x07
	.byte 0xB8, 0xF1, 0x37, 0x07, 0xBB, 0xF1, 0x3D, 0x07, 0xBE, 0xF1, 0x42, 0x07, 0xC1, 0xF1, 0x48, 0x07
	.byte 0xC4, 0xF1, 0x4E, 0x07, 0xC6, 0xF1, 0x53, 0x07, 0xC9, 0xF1, 0x59, 0x07, 0xCC, 0xF1, 0x5E, 0x07
	.byte 0xCF, 0xF1, 0x64, 0x07, 0xD2, 0xF1, 0x6A, 0x07, 0xD5, 0xF1, 0x6F, 0x07, 0xD8, 0xF1, 0x75, 0x07
	.byte 0xDB, 0xF1, 0x7A, 0x07, 0xDE, 0xF1, 0x80, 0x07, 0xE1, 0xF1, 0x85, 0x07, 0xE4, 0xF1, 0x8B, 0x07
	.byte 0xE7, 0xF1, 0x90, 0x07, 0xEA, 0xF1, 0x96, 0x07, 0xED, 0xF1, 0x9B, 0x07, 0xF0, 0xF1, 0xA1, 0x07
	.byte 0xF3, 0xF1, 0xA6, 0x07, 0xF6, 0xF1, 0xAC, 0x07, 0xF9, 0xF1, 0xB2, 0x07, 0xFC, 0xF1, 0xB7, 0x07
	.byte 0xFF, 0xF1, 0xBD, 0x07, 0x02, 0xF2, 0xC2, 0x07, 0x05, 0xF2, 0xC8, 0x07, 0x08, 0xF2, 0xCD, 0x07
	.byte 0x0B, 0xF2, 0xD2, 0x07, 0x0E, 0xF2, 0xD8, 0x07, 0x11, 0xF2, 0xDD, 0x07, 0x14, 0xF2, 0xE3, 0x07
	.byte 0x17, 0xF2, 0xE8, 0x07, 0x1A, 0xF2, 0xEE, 0x07, 0x1D, 0xF2, 0xF3, 0x07, 0x21, 0xF2, 0xF9, 0x07
	.byte 0x24, 0xF2, 0xFE, 0x07, 0x27, 0xF2, 0x04, 0x08, 0x2A, 0xF2, 0x09, 0x08, 0x2D, 0xF2, 0x0E, 0x08
	.byte 0x30, 0xF2, 0x14, 0x08, 0x34, 0xF2, 0x19, 0x08, 0x37, 0xF2, 0x1F, 0x08, 0x3A, 0xF2, 0x24, 0x08
	.byte 0x3D, 0xF2, 0x2A, 0x08, 0x40, 0xF2, 0x2F, 0x08, 0x44, 0xF2, 0x34, 0x08, 0x47, 0xF2, 0x3A, 0x08
	.byte 0x4A, 0xF2, 0x3F, 0x08, 0x4D, 0xF2, 0x45, 0x08, 0x50, 0xF2, 0x4A, 0x08, 0x54, 0xF2, 0x4F, 0x08
	.byte 0x57, 0xF2, 0x55, 0x08, 0x5A, 0xF2, 0x5A, 0x08, 0x5E, 0xF2, 0x5F, 0x08, 0x61, 0xF2, 0x65, 0x08
	.byte 0x64, 0xF2, 0x6A, 0x08, 0x67, 0xF2, 0x6F, 0x08, 0x6B, 0xF2, 0x75, 0x08, 0x6E, 0xF2, 0x7A, 0x08
	.byte 0x71, 0xF2, 0x7F, 0x08, 0x75, 0xF2, 0x85, 0x08, 0x78, 0xF2, 0x8A, 0x08, 0x7B, 0xF2, 0x8F, 0x08
	.byte 0x7F, 0xF2, 0x95, 0x08, 0x82, 0xF2, 0x9A, 0x08, 0x86, 0xF2, 0x9F, 0x08, 0x89, 0xF2, 0xA5, 0x08
	.byte 0x8C, 0xF2, 0xAA, 0x08, 0x90, 0xF2, 0xAF, 0x08, 0x93, 0xF2, 0xB4, 0x08, 0x97, 0xF2, 0xBA, 0x08
	.byte 0x9A, 0xF2, 0xBF, 0x08, 0x9E, 0xF2, 0xC4, 0x08, 0xA1, 0xF2, 0xC9, 0x08, 0xA4, 0xF2, 0xCF, 0x08
	.byte 0xA8, 0xF2, 0xD4, 0x08, 0xAB, 0xF2, 0xD9, 0x08, 0xAF, 0xF2, 0xDE, 0x08, 0xB2, 0xF2, 0xE4, 0x08
	.byte 0xB6, 0xF2, 0xE9, 0x08, 0xB9, 0xF2, 0xEE, 0x08, 0xBD, 0xF2, 0xF3, 0x08, 0xC0, 0xF2, 0xF8, 0x08
	.byte 0xC4, 0xF2, 0xFE, 0x08, 0xC7, 0xF2, 0x03, 0x09, 0xCB, 0xF2, 0x08, 0x09, 0xCE, 0xF2, 0x0D, 0x09
	.byte 0xD2, 0xF2, 0x12, 0x09, 0xD6, 0xF2, 0x18, 0x09, 0xD9, 0xF2, 0x1D, 0x09, 0xDD, 0xF2, 0x22, 0x09
	.byte 0xE0, 0xF2, 0x27, 0x09, 0xE4, 0xF2, 0x2C, 0x09, 0xE8, 0xF2, 0x31, 0x09, 0xEB, 0xF2, 0x37, 0x09
	.byte 0xEF, 0xF2, 0x3C, 0x09, 0xF2, 0xF2, 0x41, 0x09, 0xF6, 0xF2, 0x46, 0x09, 0xFA, 0xF2, 0x4B, 0x09
	.byte 0xFD, 0xF2, 0x50, 0x09, 0x01, 0xF3, 0x55, 0x09, 0x05, 0xF3, 0x5A, 0x09, 0x08, 0xF3, 0x5F, 0x09
	.byte 0x0C, 0xF3, 0x65, 0x09, 0x10, 0xF3, 0x6A, 0x09, 0x13, 0xF3, 0x6F, 0x09, 0x17, 0xF3, 0x74, 0x09
	.byte 0x1B, 0xF3, 0x79, 0x09, 0x1F, 0xF3, 0x7E, 0x09, 0x22, 0xF3, 0x83, 0x09, 0x26, 0xF3, 0x88, 0x09
	.byte 0x2A, 0xF3, 0x8D, 0x09, 0x2E, 0xF3, 0x92, 0x09, 0x31, 0xF3, 0x97, 0x09, 0x35, 0xF3, 0x9C, 0x09
	.byte 0x39, 0xF3, 0xA1, 0x09, 0x3D, 0xF3, 0xA6, 0x09, 0x40, 0xF3, 0xAB, 0x09, 0x44, 0xF3, 0xB0, 0x09
	.byte 0x48, 0xF3, 0xB5, 0x09, 0x4C, 0xF3, 0xBA, 0x09, 0x50, 0xF3, 0xBF, 0x09, 0x54, 0xF3, 0xC4, 0x09
	.byte 0x57, 0xF3, 0xC9, 0x09, 0x5B, 0xF3, 0xCE, 0x09, 0x5F, 0xF3, 0xD3, 0x09, 0x63, 0xF3, 0xD8, 0x09
	.byte 0x67, 0xF3, 0xDD, 0x09, 0x6B, 0xF3, 0xE2, 0x09, 0x6F, 0xF3, 0xE7, 0x09, 0x72, 0xF3, 0xEC, 0x09
	.byte 0x76, 0xF3, 0xF1, 0x09, 0x7A, 0xF3, 0xF6, 0x09, 0x7E, 0xF3, 0xFB, 0x09, 0x82, 0xF3, 0xFF, 0x09
	.byte 0x86, 0xF3, 0x04, 0x0A, 0x8A, 0xF3, 0x09, 0x0A, 0x8E, 0xF3, 0x0E, 0x0A, 0x92, 0xF3, 0x13, 0x0A
	.byte 0x96, 0xF3, 0x18, 0x0A, 0x9A, 0xF3, 0x1D, 0x0A, 0x9E, 0xF3, 0x22, 0x0A, 0xA2, 0xF3, 0x26, 0x0A
	.byte 0xA6, 0xF3, 0x2B, 0x0A, 0xAA, 0xF3, 0x30, 0x0A, 0xAE, 0xF3, 0x35, 0x0A, 0xB2, 0xF3, 0x3A, 0x0A
	.byte 0xB6, 0xF3, 0x3F, 0x0A, 0xBA, 0xF3, 0x44, 0x0A, 0xBE, 0xF3, 0x48, 0x0A, 0xC2, 0xF3, 0x4D, 0x0A
	.byte 0xC6, 0xF3, 0x52, 0x0A, 0xCA, 0xF3, 0x57, 0x0A, 0xCE, 0xF3, 0x5C, 0x0A, 0xD2, 0xF3, 0x60, 0x0A
	.byte 0xD6, 0xF3, 0x65, 0x0A, 0xDA, 0xF3, 0x6A, 0x0A, 0xDE, 0xF3, 0x6F, 0x0A, 0xE2, 0xF3, 0x73, 0x0A
	.byte 0xE7, 0xF3, 0x78, 0x0A, 0xEB, 0xF3, 0x7D, 0x0A, 0xEF, 0xF3, 0x82, 0x0A, 0xF3, 0xF3, 0x86, 0x0A
	.byte 0xF7, 0xF3, 0x8B, 0x0A, 0xFB, 0xF3, 0x90, 0x0A, 0xFF, 0xF3, 0x95, 0x0A, 0x04, 0xF4, 0x99, 0x0A
	.byte 0x08, 0xF4, 0x9E, 0x0A, 0x0C, 0xF4, 0xA3, 0x0A, 0x10, 0xF4, 0xA7, 0x0A, 0x14, 0xF4, 0xAC, 0x0A
	.byte 0x18, 0xF4, 0xB1, 0x0A, 0x1D, 0xF4, 0xB5, 0x0A, 0x21, 0xF4, 0xBA, 0x0A, 0x25, 0xF4, 0xBF, 0x0A
	.byte 0x29, 0xF4, 0xC3, 0x0A, 0x2E, 0xF4, 0xC8, 0x0A, 0x32, 0xF4, 0xCD, 0x0A, 0x36, 0xF4, 0xD1, 0x0A
	.byte 0x3A, 0xF4, 0xD6, 0x0A, 0x3F, 0xF4, 0xDB, 0x0A, 0x43, 0xF4, 0xDF, 0x0A, 0x47, 0xF4, 0xE4, 0x0A
	.byte 0x4B, 0xF4, 0xE8, 0x0A, 0x50, 0xF4, 0xED, 0x0A, 0x54, 0xF4, 0xF2, 0x0A, 0x58, 0xF4, 0xF6, 0x0A
	.byte 0x5D, 0xF4, 0xFB, 0x0A, 0x61, 0xF4, 0xFF, 0x0A, 0x65, 0xF4, 0x04, 0x0B, 0x69, 0xF4, 0x08, 0x0B
	.byte 0x6E, 0xF4, 0x0D, 0x0B, 0x72, 0xF4, 0x11, 0x0B, 0x77, 0xF4, 0x16, 0x0B, 0x7B, 0xF4, 0x1B, 0x0B
	.byte 0x7F, 0xF4, 0x1F, 0x0B, 0x84, 0xF4, 0x24, 0x0B, 0x88, 0xF4, 0x28, 0x0B, 0x8C, 0xF4, 0x2D, 0x0B
	.byte 0x91, 0xF4, 0x31, 0x0B, 0x95, 0xF4, 0x36, 0x0B, 0x9A, 0xF4, 0x3A, 0x0B, 0x9E, 0xF4, 0x3E, 0x0B
	.byte 0xA2, 0xF4, 0x43, 0x0B, 0xA7, 0xF4, 0x47, 0x0B, 0xAB, 0xF4, 0x4C, 0x0B, 0xB0, 0xF4, 0x50, 0x0B
	.byte 0xB4, 0xF4, 0x55, 0x0B, 0xB9, 0xF4, 0x59, 0x0B, 0xBD, 0xF4, 0x5E, 0x0B, 0xC2, 0xF4, 0x62, 0x0B
	.byte 0xC6, 0xF4, 0x66, 0x0B, 0xCA, 0xF4, 0x6B, 0x0B, 0xCF, 0xF4, 0x6F, 0x0B, 0xD3, 0xF4, 0x74, 0x0B
	.byte 0xD8, 0xF4, 0x78, 0x0B, 0xDC, 0xF4, 0x7C, 0x0B, 0xE1, 0xF4, 0x81, 0x0B, 0xE5, 0xF4, 0x85, 0x0B
	.byte 0xEA, 0xF4, 0x89, 0x0B, 0xEF, 0xF4, 0x8E, 0x0B, 0xF3, 0xF4, 0x92, 0x0B, 0xF8, 0xF4, 0x97, 0x0B
	.byte 0xFC, 0xF4, 0x9B, 0x0B, 0x01, 0xF5, 0x9F, 0x0B, 0x05, 0xF5, 0xA3, 0x0B, 0x0A, 0xF5, 0xA8, 0x0B
	.byte 0x0E, 0xF5, 0xAC, 0x0B, 0x13, 0xF5, 0xB0, 0x0B, 0x18, 0xF5, 0xB5, 0x0B, 0x1C, 0xF5, 0xB9, 0x0B
	.byte 0x21, 0xF5, 0xBD, 0x0B, 0x25, 0xF5, 0xC1, 0x0B, 0x2A, 0xF5, 0xC6, 0x0B, 0x2F, 0xF5, 0xCA, 0x0B
	.byte 0x33, 0xF5, 0xCE, 0x0B, 0x38, 0xF5, 0xD2, 0x0B, 0x3D, 0xF5, 0xD7, 0x0B, 0x41, 0xF5, 0xDB, 0x0B
	.byte 0x46, 0xF5, 0xDF, 0x0B, 0x4B, 0xF5, 0xE3, 0x0B, 0x4F, 0xF5, 0xE8, 0x0B, 0x54, 0xF5, 0xEC, 0x0B
	.byte 0x59, 0xF5, 0xF0, 0x0B, 0x5D, 0xF5, 0xF4, 0x0B, 0x62, 0xF5, 0xF8, 0x0B, 0x67, 0xF5, 0xFC, 0x0B
	.byte 0x6B, 0xF5, 0x01, 0x0C, 0x70, 0xF5, 0x05, 0x0C, 0x75, 0xF5, 0x09, 0x0C, 0x7A, 0xF5, 0x0D, 0x0C
	.byte 0x7E, 0xF5, 0x11, 0x0C, 0x83, 0xF5, 0x15, 0x0C, 0x88, 0xF5, 0x19, 0x0C, 0x8D, 0xF5, 0x1E, 0x0C
	.byte 0x91, 0xF5, 0x22, 0x0C, 0x96, 0xF5, 0x26, 0x0C, 0x9B, 0xF5, 0x2A, 0x0C, 0xA0, 0xF5, 0x2E, 0x0C
	.byte 0xA4, 0xF5, 0x32, 0x0C, 0xA9, 0xF5, 0x36, 0x0C, 0xAE, 0xF5, 0x3A, 0x0C, 0xB3, 0xF5, 0x3E, 0x0C
	.byte 0xB8, 0xF5, 0x42, 0x0C, 0xBC, 0xF5, 0x46, 0x0C, 0xC1, 0xF5, 0x4A, 0x0C, 0xC6, 0xF5, 0x4E, 0x0C
	.byte 0xCB, 0xF5, 0x52, 0x0C, 0xD0, 0xF5, 0x56, 0x0C, 0xD5, 0xF5, 0x5A, 0x0C, 0xDA, 0xF5, 0x5E, 0x0C
	.byte 0xDE, 0xF5, 0x62, 0x0C, 0xE3, 0xF5, 0x66, 0x0C, 0xE8, 0xF5, 0x6A, 0x0C, 0xED, 0xF5, 0x6E, 0x0C
	.byte 0xF2, 0xF5, 0x72, 0x0C, 0xF7, 0xF5, 0x76, 0x0C, 0xFC, 0xF5, 0x7A, 0x0C, 0x01, 0xF6, 0x7E, 0x0C
	.byte 0x05, 0xF6, 0x82, 0x0C, 0x0A, 0xF6, 0x86, 0x0C, 0x0F, 0xF6, 0x8A, 0x0C, 0x14, 0xF6, 0x8E, 0x0C
	.byte 0x19, 0xF6, 0x91, 0x0C, 0x1E, 0xF6, 0x95, 0x0C, 0x23, 0xF6, 0x99, 0x0C, 0x28, 0xF6, 0x9D, 0x0C
	.byte 0x2D, 0xF6, 0xA1, 0x0C, 0x32, 0xF6, 0xA5, 0x0C, 0x37, 0xF6, 0xA9, 0x0C, 0x3C, 0xF6, 0xAC, 0x0C
	.byte 0x41, 0xF6, 0xB0, 0x0C, 0x46, 0xF6, 0xB4, 0x0C, 0x4B, 0xF6, 0xB8, 0x0C, 0x50, 0xF6, 0xBC, 0x0C
	.byte 0x55, 0xF6, 0xC0, 0x0C, 0x5A, 0xF6, 0xC3, 0x0C, 0x5F, 0xF6, 0xC7, 0x0C, 0x64, 0xF6, 0xCB, 0x0C
	.byte 0x69, 0xF6, 0xCF, 0x0C, 0x6E, 0xF6, 0xD2, 0x0C, 0x73, 0xF6, 0xD6, 0x0C, 0x78, 0xF6, 0xDA, 0x0C
	.byte 0x7D, 0xF6, 0xDE, 0x0C, 0x82, 0xF6, 0xE1, 0x0C, 0x87, 0xF6, 0xE5, 0x0C, 0x8C, 0xF6, 0xE9, 0x0C
	.byte 0x91, 0xF6, 0xED, 0x0C, 0x96, 0xF6, 0xF0, 0x0C, 0x9B, 0xF6, 0xF4, 0x0C, 0xA1, 0xF6, 0xF8, 0x0C
	.byte 0xA6, 0xF6, 0xFB, 0x0C, 0xAB, 0xF6, 0xFF, 0x0C, 0xB0, 0xF6, 0x03, 0x0D, 0xB5, 0xF6, 0x06, 0x0D
	.byte 0xBA, 0xF6, 0x0A, 0x0D, 0xBF, 0xF6, 0x0E, 0x0D, 0xC4, 0xF6, 0x11, 0x0D, 0xC9, 0xF6, 0x15, 0x0D
	.byte 0xCF, 0xF6, 0x18, 0x0D, 0xD4, 0xF6, 0x1C, 0x0D, 0xD9, 0xF6, 0x20, 0x0D, 0xDE, 0xF6, 0x23, 0x0D
	.byte 0xE3, 0xF6, 0x27, 0x0D, 0xE8, 0xF6, 0x2A, 0x0D, 0xEE, 0xF6, 0x2E, 0x0D, 0xF3, 0xF6, 0x32, 0x0D
	.byte 0xF8, 0xF6, 0x35, 0x0D, 0xFD, 0xF6, 0x39, 0x0D, 0x02, 0xF7, 0x3C, 0x0D, 0x08, 0xF7, 0x40, 0x0D
	.byte 0x0D, 0xF7, 0x43, 0x0D, 0x12, 0xF7, 0x47, 0x0D, 0x17, 0xF7, 0x4A, 0x0D, 0x1C, 0xF7, 0x4E, 0x0D
	.byte 0x22, 0xF7, 0x51, 0x0D, 0x27, 0xF7, 0x55, 0x0D, 0x2C, 0xF7, 0x58, 0x0D, 0x31, 0xF7, 0x5C, 0x0D
	.byte 0x37, 0xF7, 0x5F, 0x0D, 0x3C, 0xF7, 0x62, 0x0D, 0x41, 0xF7, 0x66, 0x0D, 0x46, 0xF7, 0x69, 0x0D
	.byte 0x4C, 0xF7, 0x6D, 0x0D, 0x51, 0xF7, 0x70, 0x0D, 0x56, 0xF7, 0x74, 0x0D, 0x5B, 0xF7, 0x77, 0x0D
	.byte 0x61, 0xF7, 0x7A, 0x0D, 0x66, 0xF7, 0x7E, 0x0D, 0x6B, 0xF7, 0x81, 0x0D, 0x71, 0xF7, 0x85, 0x0D
	.byte 0x76, 0xF7, 0x88, 0x0D, 0x7B, 0xF7, 0x8B, 0x0D, 0x81, 0xF7, 0x8F, 0x0D, 0x86, 0xF7, 0x92, 0x0D
	.byte 0x8B, 0xF7, 0x95, 0x0D, 0x91, 0xF7, 0x99, 0x0D, 0x96, 0xF7, 0x9C, 0x0D, 0x9B, 0xF7, 0x9F, 0x0D
	.byte 0xA1, 0xF7, 0xA2, 0x0D, 0xA6, 0xF7, 0xA6, 0x0D, 0xAB, 0xF7, 0xA9, 0x0D, 0xB1, 0xF7, 0xAC, 0x0D
	.byte 0xB6, 0xF7, 0xB0, 0x0D, 0xBB, 0xF7, 0xB3, 0x0D, 0xC1, 0xF7, 0xB6, 0x0D, 0xC6, 0xF7, 0xB9, 0x0D
	.byte 0xCC, 0xF7, 0xBC, 0x0D, 0xD1, 0xF7, 0xC0, 0x0D, 0xD6, 0xF7, 0xC3, 0x0D, 0xDC, 0xF7, 0xC6, 0x0D
	.byte 0xE1, 0xF7, 0xC9, 0x0D, 0xE7, 0xF7, 0xCC, 0x0D, 0xEC, 0xF7, 0xD0, 0x0D, 0xF2, 0xF7, 0xD3, 0x0D
	.byte 0xF7, 0xF7, 0xD6, 0x0D, 0xFC, 0xF7, 0xD9, 0x0D, 0x02, 0xF8, 0xDC, 0x0D, 0x07, 0xF8, 0xDF, 0x0D
	.byte 0x0D, 0xF8, 0xE3, 0x0D, 0x12, 0xF8, 0xE6, 0x0D, 0x18, 0xF8, 0xE9, 0x0D, 0x1D, 0xF8, 0xEC, 0x0D
	.byte 0x23, 0xF8, 0xEF, 0x0D, 0x28, 0xF8, 0xF2, 0x0D, 0x2E, 0xF8, 0xF5, 0x0D, 0x33, 0xF8, 0xF8, 0x0D
	.byte 0x38, 0xF8, 0xFB, 0x0D, 0x3E, 0xF8, 0xFE, 0x0D, 0x43, 0xF8, 0x01, 0x0E, 0x49, 0xF8, 0x04, 0x0E
	.byte 0x4E, 0xF8, 0x07, 0x0E, 0x54, 0xF8, 0x0A, 0x0E, 0x5A, 0xF8, 0x0D, 0x0E, 0x5F, 0xF8, 0x10, 0x0E
	.byte 0x65, 0xF8, 0x13, 0x0E, 0x6A, 0xF8, 0x16, 0x0E, 0x70, 0xF8, 0x19, 0x0E, 0x75, 0xF8, 0x1C, 0x0E
	.byte 0x7B, 0xF8, 0x1F, 0x0E, 0x80, 0xF8, 0x22, 0x0E, 0x86, 0xF8, 0x25, 0x0E, 0x8B, 0xF8, 0x28, 0x0E
	.byte 0x91, 0xF8, 0x2B, 0x0E, 0x96, 0xF8, 0x2E, 0x0E, 0x9C, 0xF8, 0x31, 0x0E, 0xA2, 0xF8, 0x34, 0x0E
	.byte 0xA7, 0xF8, 0x37, 0x0E, 0xAD, 0xF8, 0x3A, 0x0E, 0xB2, 0xF8, 0x3C, 0x0E, 0xB8, 0xF8, 0x3F, 0x0E
	.byte 0xBE, 0xF8, 0x42, 0x0E, 0xC3, 0xF8, 0x45, 0x0E, 0xC9, 0xF8, 0x48, 0x0E, 0xCE, 0xF8, 0x4B, 0x0E
	.byte 0xD4, 0xF8, 0x4D, 0x0E, 0xDA, 0xF8, 0x50, 0x0E, 0xDF, 0xF8, 0x53, 0x0E, 0xE5, 0xF8, 0x56, 0x0E
	.byte 0xEB, 0xF8, 0x59, 0x0E, 0xF0, 0xF8, 0x5B, 0x0E, 0xF6, 0xF8, 0x5E, 0x0E, 0xFB, 0xF8, 0x61, 0x0E
	.byte 0x01, 0xF9, 0x64, 0x0E, 0x07, 0xF9, 0x66, 0x0E, 0x0C, 0xF9, 0x69, 0x0E, 0x12, 0xF9, 0x6C, 0x0E
	.byte 0x18, 0xF9, 0x6F, 0x0E, 0x1D, 0xF9, 0x71, 0x0E, 0x23, 0xF9, 0x74, 0x0E, 0x29, 0xF9, 0x77, 0x0E
	.byte 0x2E, 0xF9, 0x79, 0x0E, 0x34, 0xF9, 0x7C, 0x0E, 0x3A, 0xF9, 0x7F, 0x0E, 0x3F, 0xF9, 0x81, 0x0E
	.byte 0x45, 0xF9, 0x84, 0x0E, 0x4B, 0xF9, 0x87, 0x0E, 0x51, 0xF9, 0x89, 0x0E, 0x56, 0xF9, 0x8C, 0x0E
	.byte 0x5C, 0xF9, 0x8F, 0x0E, 0x62, 0xF9, 0x91, 0x0E, 0x67, 0xF9, 0x94, 0x0E, 0x6D, 0xF9, 0x96, 0x0E
	.byte 0x73, 0xF9, 0x99, 0x0E, 0x79, 0xF9, 0x9B, 0x0E, 0x7E, 0xF9, 0x9E, 0x0E, 0x84, 0xF9, 0xA1, 0x0E
	.byte 0x8A, 0xF9, 0xA3, 0x0E, 0x90, 0xF9, 0xA6, 0x0E, 0x95, 0xF9, 0xA8, 0x0E, 0x9B, 0xF9, 0xAB, 0x0E
	.byte 0xA1, 0xF9, 0xAD, 0x0E, 0xA7, 0xF9, 0xB0, 0x0E, 0xAC, 0xF9, 0xB2, 0x0E, 0xB2, 0xF9, 0xB5, 0x0E
	.byte 0xB8, 0xF9, 0xB7, 0x0E, 0xBE, 0xF9, 0xBA, 0x0E, 0xC4, 0xF9, 0xBC, 0x0E, 0xC9, 0xF9, 0xBF, 0x0E
	.byte 0xCF, 0xF9, 0xC1, 0x0E, 0xD5, 0xF9, 0xC3, 0x0E, 0xDB, 0xF9, 0xC6, 0x0E, 0xE1, 0xF9, 0xC8, 0x0E
	.byte 0xE6, 0xF9, 0xCB, 0x0E, 0xEC, 0xF9, 0xCD, 0x0E, 0xF2, 0xF9, 0xCF, 0x0E, 0xF8, 0xF9, 0xD2, 0x0E
	.byte 0xFE, 0xF9, 0xD4, 0x0E, 0x03, 0xFA, 0xD6, 0x0E, 0x09, 0xFA, 0xD9, 0x0E, 0x0F, 0xFA, 0xDB, 0x0E
	.byte 0x15, 0xFA, 0xDD, 0x0E, 0x1B, 0xFA, 0xE0, 0x0E, 0x21, 0xFA, 0xE2, 0x0E, 0x26, 0xFA, 0xE4, 0x0E
	.byte 0x2C, 0xFA, 0xE7, 0x0E, 0x32, 0xFA, 0xE9, 0x0E, 0x38, 0xFA, 0xEB, 0x0E, 0x3E, 0xFA, 0xEE, 0x0E
	.byte 0x44, 0xFA, 0xF0, 0x0E, 0x4A, 0xFA, 0xF2, 0x0E, 0x4F, 0xFA, 0xF4, 0x0E, 0x55, 0xFA, 0xF7, 0x0E
	.byte 0x5B, 0xFA, 0xF9, 0x0E, 0x61, 0xFA, 0xFB, 0x0E, 0x67, 0xFA, 0xFD, 0x0E, 0x6D, 0xFA, 0xFF, 0x0E
	.byte 0x73, 0xFA, 0x02, 0x0F, 0x79, 0xFA, 0x04, 0x0F, 0x7F, 0xFA, 0x06, 0x0F, 0x84, 0xFA, 0x08, 0x0F
	.byte 0x8A, 0xFA, 0x0A, 0x0F, 0x90, 0xFA, 0x0C, 0x0F, 0x96, 0xFA, 0x0E, 0x0F, 0x9C, 0xFA, 0x11, 0x0F
	.byte 0xA2, 0xFA, 0x13, 0x0F, 0xA8, 0xFA, 0x15, 0x0F, 0xAE, 0xFA, 0x17, 0x0F, 0xB4, 0xFA, 0x19, 0x0F
	.byte 0xBA, 0xFA, 0x1B, 0x0F, 0xC0, 0xFA, 0x1D, 0x0F, 0xC6, 0xFA, 0x1F, 0x0F, 0xCC, 0xFA, 0x21, 0x0F
	.byte 0xD1, 0xFA, 0x23, 0x0F, 0xD7, 0xFA, 0x25, 0x0F, 0xDD, 0xFA, 0x27, 0x0F, 0xE3, 0xFA, 0x29, 0x0F
	.byte 0xE9, 0xFA, 0x2B, 0x0F, 0xEF, 0xFA, 0x2D, 0x0F, 0xF5, 0xFA, 0x2F, 0x0F, 0xFB, 0xFA, 0x31, 0x0F
	.byte 0x01, 0xFB, 0x33, 0x0F, 0x07, 0xFB, 0x35, 0x0F, 0x0D, 0xFB, 0x37, 0x0F, 0x13, 0xFB, 0x39, 0x0F
	.byte 0x19, 0xFB, 0x3B, 0x0F, 0x1F, 0xFB, 0x3D, 0x0F, 0x25, 0xFB, 0x3F, 0x0F, 0x2B, 0xFB, 0x41, 0x0F
	.byte 0x31, 0xFB, 0x43, 0x0F, 0x37, 0xFB, 0x45, 0x0F, 0x3D, 0xFB, 0x46, 0x0F, 0x43, 0xFB, 0x48, 0x0F
	.byte 0x49, 0xFB, 0x4A, 0x0F, 0x4F, 0xFB, 0x4C, 0x0F, 0x55, 0xFB, 0x4E, 0x0F, 0x5B, 0xFB, 0x50, 0x0F
	.byte 0x61, 0xFB, 0x51, 0x0F, 0x67, 0xFB, 0x53, 0x0F, 0x6D, 0xFB, 0x55, 0x0F, 0x73, 0xFB, 0x57, 0x0F
	.byte 0x79, 0xFB, 0x59, 0x0F, 0x7F, 0xFB, 0x5A, 0x0F, 0x85, 0xFB, 0x5C, 0x0F, 0x8B, 0xFB, 0x5E, 0x0F
	.byte 0x91, 0xFB, 0x60, 0x0F, 0x97, 0xFB, 0x61, 0x0F, 0x9D, 0xFB, 0x63, 0x0F, 0xA3, 0xFB, 0x65, 0x0F
	.byte 0xA9, 0xFB, 0x67, 0x0F, 0xAF, 0xFB, 0x68, 0x0F, 0xB5, 0xFB, 0x6A, 0x0F, 0xBC, 0xFB, 0x6C, 0x0F
	.byte 0xC2, 0xFB, 0x6D, 0x0F, 0xC8, 0xFB, 0x6F, 0x0F, 0xCE, 0xFB, 0x71, 0x0F, 0xD4, 0xFB, 0x72, 0x0F
	.byte 0xDA, 0xFB, 0x74, 0x0F, 0xE0, 0xFB, 0x76, 0x0F, 0xE6, 0xFB, 0x77, 0x0F, 0xEC, 0xFB, 0x79, 0x0F
	.byte 0xF2, 0xFB, 0x7A, 0x0F, 0xF8, 0xFB, 0x7C, 0x0F, 0xFE, 0xFB, 0x7D, 0x0F, 0x04, 0xFC, 0x7F, 0x0F
	.byte 0x0A, 0xFC, 0x81, 0x0F, 0x11, 0xFC, 0x82, 0x0F, 0x17, 0xFC, 0x84, 0x0F, 0x1D, 0xFC, 0x85, 0x0F
	.byte 0x23, 0xFC, 0x87, 0x0F, 0x29, 0xFC, 0x88, 0x0F, 0x2F, 0xFC, 0x8A, 0x0F, 0x35, 0xFC, 0x8B, 0x0F
	.byte 0x3B, 0xFC, 0x8D, 0x0F, 0x41, 0xFC, 0x8E, 0x0F, 0x47, 0xFC, 0x90, 0x0F, 0x4E, 0xFC, 0x91, 0x0F
	.byte 0x54, 0xFC, 0x93, 0x0F, 0x5A, 0xFC, 0x94, 0x0F, 0x60, 0xFC, 0x95, 0x0F, 0x66, 0xFC, 0x97, 0x0F
	.byte 0x6C, 0xFC, 0x98, 0x0F, 0x72, 0xFC, 0x9A, 0x0F, 0x78, 0xFC, 0x9B, 0x0F, 0x7F, 0xFC, 0x9C, 0x0F
	.byte 0x85, 0xFC, 0x9E, 0x0F, 0x8B, 0xFC, 0x9F, 0x0F, 0x91, 0xFC, 0xA1, 0x0F, 0x97, 0xFC, 0xA2, 0x0F
	.byte 0x9D, 0xFC, 0xA3, 0x0F, 0xA3, 0xFC, 0xA5, 0x0F, 0xAA, 0xFC, 0xA6, 0x0F, 0xB0, 0xFC, 0xA7, 0x0F
	.byte 0xB6, 0xFC, 0xA8, 0x0F, 0xBC, 0xFC, 0xAA, 0x0F, 0xC2, 0xFC, 0xAB, 0x0F, 0xC8, 0xFC, 0xAC, 0x0F
	.byte 0xCE, 0xFC, 0xAE, 0x0F, 0xD5, 0xFC, 0xAF, 0x0F, 0xDB, 0xFC, 0xB0, 0x0F, 0xE1, 0xFC, 0xB1, 0x0F
	.byte 0xE7, 0xFC, 0xB3, 0x0F, 0xED, 0xFC, 0xB4, 0x0F, 0xF3, 0xFC, 0xB5, 0x0F, 0xFA, 0xFC, 0xB6, 0x0F
	.byte 0x00, 0xFD, 0xB7, 0x0F, 0x06, 0xFD, 0xB8, 0x0F, 0x0C, 0xFD, 0xBA, 0x0F, 0x12, 0xFD, 0xBB, 0x0F
	.byte 0x18, 0xFD, 0xBC, 0x0F, 0x1F, 0xFD, 0xBD, 0x0F, 0x25, 0xFD, 0xBE, 0x0F, 0x2B, 0xFD, 0xBF, 0x0F
	.byte 0x31, 0xFD, 0xC0, 0x0F, 0x37, 0xFD, 0xC2, 0x0F, 0x3E, 0xFD, 0xC3, 0x0F, 0x44, 0xFD, 0xC4, 0x0F
	.byte 0x4A, 0xFD, 0xC5, 0x0F, 0x50, 0xFD, 0xC6, 0x0F, 0x56, 0xFD, 0xC7, 0x0F, 0x5D, 0xFD, 0xC8, 0x0F
	.byte 0x63, 0xFD, 0xC9, 0x0F, 0x69, 0xFD, 0xCA, 0x0F, 0x6F, 0xFD, 0xCB, 0x0F, 0x75, 0xFD, 0xCC, 0x0F
	.byte 0x7C, 0xFD, 0xCD, 0x0F, 0x82, 0xFD, 0xCE, 0x0F, 0x88, 0xFD, 0xCF, 0x0F, 0x8E, 0xFD, 0xD0, 0x0F
	.byte 0x94, 0xFD, 0xD1, 0x0F, 0x9B, 0xFD, 0xD2, 0x0F, 0xA1, 0xFD, 0xD3, 0x0F, 0xA7, 0xFD, 0xD4, 0x0F
	.byte 0xAD, 0xFD, 0xD5, 0x0F, 0xB3, 0xFD, 0xD5, 0x0F, 0xBA, 0xFD, 0xD6, 0x0F, 0xC0, 0xFD, 0xD7, 0x0F
	.byte 0xC6, 0xFD, 0xD8, 0x0F, 0xCC, 0xFD, 0xD9, 0x0F, 0xD3, 0xFD, 0xDA, 0x0F, 0xD9, 0xFD, 0xDB, 0x0F
	.byte 0xDF, 0xFD, 0xDC, 0x0F, 0xE5, 0xFD, 0xDC, 0x0F, 0xEB, 0xFD, 0xDD, 0x0F, 0xF2, 0xFD, 0xDE, 0x0F
	.byte 0xF8, 0xFD, 0xDF, 0x0F, 0xFE, 0xFD, 0xE0, 0x0F, 0x04, 0xFE, 0xE0, 0x0F, 0x0B, 0xFE, 0xE1, 0x0F
	.byte 0x11, 0xFE, 0xE2, 0x0F, 0x17, 0xFE, 0xE3, 0x0F, 0x1D, 0xFE, 0xE3, 0x0F, 0x24, 0xFE, 0xE4, 0x0F
	.byte 0x2A, 0xFE, 0xE5, 0x0F, 0x30, 0xFE, 0xE6, 0x0F, 0x36, 0xFE, 0xE6, 0x0F, 0x3D, 0xFE, 0xE7, 0x0F
	.byte 0x43, 0xFE, 0xE8, 0x0F, 0x49, 0xFE, 0xE8, 0x0F, 0x4F, 0xFE, 0xE9, 0x0F, 0x56, 0xFE, 0xEA, 0x0F
	.byte 0x5C, 0xFE, 0xEA, 0x0F, 0x62, 0xFE, 0xEB, 0x0F, 0x68, 0xFE, 0xEC, 0x0F, 0x6F, 0xFE, 0xEC, 0x0F
	.byte 0x75, 0xFE, 0xED, 0x0F, 0x7B, 0xFE, 0xED, 0x0F, 0x81, 0xFE, 0xEE, 0x0F, 0x88, 0xFE, 0xEF, 0x0F
	.byte 0x8E, 0xFE, 0xEF, 0x0F, 0x94, 0xFE, 0xF0, 0x0F, 0x9A, 0xFE, 0xF0, 0x0F, 0xA1, 0xFE, 0xF1, 0x0F
	.byte 0xA7, 0xFE, 0xF1, 0x0F, 0xAD, 0xFE, 0xF2, 0x0F, 0xB3, 0xFE, 0xF2, 0x0F, 0xBA, 0xFE, 0xF3, 0x0F
	.byte 0xC0, 0xFE, 0xF3, 0x0F, 0xC6, 0xFE, 0xF4, 0x0F, 0xCC, 0xFE, 0xF4, 0x0F, 0xD3, 0xFE, 0xF5, 0x0F
	.byte 0xD9, 0xFE, 0xF5, 0x0F, 0xDF, 0xFE, 0xF6, 0x0F, 0xE5, 0xFE, 0xF6, 0x0F, 0xEC, 0xFE, 0xF7, 0x0F
	.byte 0xF2, 0xFE, 0xF7, 0x0F, 0xF8, 0xFE, 0xF8, 0x0F, 0xFF, 0xFE, 0xF8, 0x0F, 0x05, 0xFF, 0xF8, 0x0F
	.byte 0x0B, 0xFF, 0xF9, 0x0F, 0x11, 0xFF, 0xF9, 0x0F, 0x18, 0xFF, 0xF9, 0x0F, 0x1E, 0xFF, 0xFA, 0x0F
	.byte 0x24, 0xFF, 0xFA, 0x0F, 0x2A, 0xFF, 0xFA, 0x0F, 0x31, 0xFF, 0xFB, 0x0F, 0x37, 0xFF, 0xFB, 0x0F
	.byte 0x3D, 0xFF, 0xFB, 0x0F, 0x44, 0xFF, 0xFC, 0x0F, 0x4A, 0xFF, 0xFC, 0x0F, 0x50, 0xFF, 0xFC, 0x0F
	.byte 0x56, 0xFF, 0xFC, 0x0F, 0x5D, 0xFF, 0xFD, 0x0F, 0x63, 0xFF, 0xFD, 0x0F, 0x69, 0xFF, 0xFD, 0x0F
	.byte 0x70, 0xFF, 0xFD, 0x0F, 0x76, 0xFF, 0xFE, 0x0F, 0x7C, 0xFF, 0xFE, 0x0F, 0x82, 0xFF, 0xFE, 0x0F
	.byte 0x89, 0xFF, 0xFE, 0x0F, 0x8F, 0xFF, 0xFE, 0x0F, 0x95, 0xFF, 0xFF, 0x0F, 0x9B, 0xFF, 0xFF, 0x0F
	.byte 0xA2, 0xFF, 0xFF, 0x0F, 0xA8, 0xFF, 0xFF, 0x0F, 0xAE, 0xFF, 0xFF, 0x0F, 0xB5, 0xFF, 0xFF, 0x0F
	.byte 0xBB, 0xFF, 0xFF, 0x0F, 0xC1, 0xFF, 0x00, 0x10, 0xC7, 0xFF, 0x00, 0x10, 0xCE, 0xFF, 0x00, 0x10
	.byte 0xD4, 0xFF, 0x00, 0x10, 0xDA, 0xFF, 0x00, 0x10, 0xE1, 0xFF, 0x00, 0x10, 0xE7, 0xFF, 0x00, 0x10
	.byte 0xED, 0xFF, 0x00, 0x10, 0xF3, 0xFF, 0x00, 0x10, 0xFA, 0xFF, 0x00, 0x10, 0x00, 0x00, 0x51, 0x00
	.byte 0xA3, 0x00, 0xF4, 0x00, 0x46, 0x01, 0x97, 0x01, 0xE9, 0x01, 0x3A, 0x02, 0x8B, 0x02, 0xDC, 0x02
	.byte 0x2D, 0x03, 0x7E, 0x03, 0xCF, 0x03, 0x20, 0x04, 0x70, 0x04, 0xC1, 0x04, 0x11, 0x05, 0x61, 0x05
	.byte 0xB1, 0x05, 0x01, 0x06, 0x51, 0x06, 0xA0, 0x06, 0xEF, 0x06, 0x3E, 0x07, 0x8D, 0x07, 0xDC, 0x07
	.byte 0x2A, 0x08, 0x78, 0x08, 0xC6, 0x08, 0x14, 0x09, 0x61, 0x09, 0xAE, 0x09, 0xFB, 0x09, 0x48, 0x0A
	.byte 0x94, 0x0A, 0xE0, 0x0A, 0x2C, 0x0B, 0x77, 0x0B, 0xC2, 0x0B, 0x0D, 0x0C, 0x57, 0x0C, 0xA1, 0x0C
	.byte 0xEB, 0x0C, 0x34, 0x0D, 0x7D, 0x0D, 0xC6, 0x0D, 0x0F, 0x0E, 0x56, 0x0E, 0x9E, 0x0E, 0xE5, 0x0E
	.byte 0x2C, 0x0F, 0x73, 0x0F, 0xB9, 0x0F, 0xFF, 0x0F, 0x44, 0x10, 0x89, 0x10, 0xCE, 0x10, 0x12, 0x11
	.byte 0x56, 0x11, 0x99, 0x11, 0xDC, 0x11, 0x1F, 0x12, 0x61, 0x12, 0xA3, 0x12, 0xE4, 0x12, 0x25, 0x13
	.byte 0x66, 0x13, 0xA6, 0x13, 0xE6, 0x13, 0x25, 0x14, 0x64, 0x14, 0xA2, 0x14, 0xE0, 0x14, 0x1E, 0x15
	.byte 0x5B, 0x15, 0x98, 0x15, 0xD5, 0x15, 0x11, 0x16, 0x4C, 0x16, 0x88, 0x16, 0xC2, 0x16, 0xFD, 0x16
	.byte 0x37, 0x17, 0x70, 0x17, 0xAA, 0x17, 0xE2, 0x17, 0x1B, 0x18, 0x53, 0x18, 0x8A, 0x18, 0xC1, 0x18
	.byte 0xF8, 0x18, 0x2E, 0x19, 0x64, 0x19, 0x9A, 0x19, 0xCF, 0x19, 0x04, 0x1A, 0x38, 0x1A, 0x6C, 0x1A
	.byte 0x9F, 0x1A, 0xD3, 0x1A, 0x05, 0x1B, 0x38, 0x1B, 0x6A, 0x1B, 0x9C, 0x1B, 0xCD, 0x1B, 0xFE, 0x1B
	.byte 0x2E, 0x1C, 0x5E, 0x1C, 0x8E, 0x1C, 0xBE, 0x1C, 0xED, 0x1C, 0x1B, 0x1D, 0x4A, 0x1D, 0x78, 0x1D
	.byte 0xA5, 0x1D, 0xD3, 0x1D, 0xFF, 0x1D, 0x2C, 0x1E, 0x58, 0x1E, 0x84, 0x1E, 0xB0, 0x1E, 0xDB, 0x1E
	.byte 0x06, 0x1F, 0x30, 0x1F, 0x5A, 0x1F, 0x84, 0x1F, 0xAE, 0x1F, 0xD7, 0x1F, 0x00, 0x20, 0x00, 0x00
	.byte 0x00, 0x00, 0x80, 0x68, 0x90, 0x68, 0x80, 0x68, 0x94, 0x68, 0x00, 0x00, 0x90, 0x68, 0x80, 0x68
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x20, 0x68, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x40, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68
	.byte 0x40, 0x68, 0x20, 0x00, 0x20, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00
	.byte 0x60, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x60, 0x68, 0x20, 0x00, 0x20, 0x68, 0x60, 0x68
	.byte 0x20, 0x00, 0x00, 0x68, 0x60, 0x68, 0x40, 0x00, 0x40, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68
	.byte 0x40, 0x68, 0x20, 0x00, 0x20, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x80, 0x2E, 0xFD, 0x2F, 0xFD, 0x75, 0xFD, 0xA7, 0xFD, 0xCE, 0xFD, 0xEE, 0xFD, 0x09, 0xFE
	.byte 0x20, 0xFE, 0x34, 0xFE, 0x46, 0xFE, 0x57, 0xFE, 0x66, 0xFE, 0x74, 0xFE, 0x81, 0xFE, 0x8D, 0xFE
	.byte 0x98, 0xFE, 0xA3, 0xFE, 0xAD, 0xFE, 0xB6, 0xFE, 0xBF, 0xFE, 0xC7, 0xFE, 0xCF, 0xFE, 0xD7, 0xFE
	.byte 0xDF, 0xFE, 0xE6, 0xFE, 0xEC, 0xFE, 0xF3, 0xFE, 0xF9, 0xFE, 0xFF, 0xFE, 0x05, 0xFF, 0x0B, 0xFF
	.byte 0x11, 0xFF, 0x16, 0xFF, 0x1B, 0xFF, 0x20, 0xFF, 0x25, 0xFF, 0x2A, 0xFF, 0x2E, 0xFF, 0x33, 0xFF
	.byte 0x37, 0xFF, 0x3C, 0xFF, 0x40, 0xFF, 0x44, 0xFF, 0x48, 0xFF, 0x4C, 0xFF, 0x50, 0xFF, 0x53, 0xFF
	.byte 0x57, 0xFF, 0x5B, 0xFF, 0x5E, 0xFF, 0x62, 0xFF, 0x65, 0xFF, 0x68, 0xFF, 0x6B, 0xFF, 0x6F, 0xFF
	.byte 0x72, 0xFF, 0x75, 0xFF, 0x78, 0xFF, 0x7B, 0xFF, 0x7E, 0xFF, 0x81, 0xFF, 0x83, 0xFF, 0x86, 0xFF
	.byte 0x89, 0xFF, 0x8C, 0xFF, 0x8E, 0xFF, 0x91, 0xFF, 0x93, 0xFF, 0x96, 0xFF, 0x99, 0xFF, 0x9B, 0xFF
	.byte 0x9D, 0xFF, 0xA0, 0xFF, 0xA2, 0xFF, 0xA5, 0xFF, 0xA7, 0xFF, 0xA9, 0xFF, 0xAB, 0xFF, 0xAE, 0xFF
	.byte 0xB0, 0xFF, 0xB2, 0xFF, 0xB4, 0xFF, 0xB6, 0xFF, 0xB8, 0xFF, 0xBA, 0xFF, 0xBC, 0xFF, 0xBE, 0xFF
	.byte 0xC0, 0xFF, 0xC2, 0xFF, 0xC4, 0xFF, 0xC6, 0xFF, 0xC8, 0xFF, 0xCA, 0xFF, 0xCC, 0xFF, 0xCE, 0xFF
	.byte 0xCF, 0xFF, 0xD1, 0xFF, 0xD3, 0xFF, 0xD5, 0xFF, 0xD6, 0xFF, 0xD8, 0xFF, 0xDA, 0xFF, 0xDC, 0xFF
	.byte 0xDD, 0xFF, 0xDF, 0xFF, 0xE1, 0xFF, 0xE2, 0xFF, 0xE4, 0xFF, 0xE5, 0xFF, 0xE7, 0xFF, 0xE9, 0xFF
	.byte 0xEA, 0xFF, 0xEC, 0xFF, 0xED, 0xFF, 0xEF, 0xFF, 0xF0, 0xFF, 0xF2, 0xFF, 0xF3, 0xFF, 0xF5, 0xFF
	.byte 0xF6, 0xFF, 0xF8, 0xFF, 0xF9, 0xFF, 0xFA, 0xFF, 0xFC, 0xFF, 0xFD, 0xFF, 0xFF, 0xFF, 0x00, 0x00
	.byte 0x00, 0x80, 0x5B, 0xFE, 0x97, 0xFE, 0xBB, 0xFE, 0xD4, 0xFE, 0xE7, 0xFE, 0xF7, 0xFE, 0x04, 0xFF
	.byte 0x10, 0xFF, 0x1A, 0xFF, 0x23, 0xFF, 0x2C, 0xFF, 0x33, 0xFF, 0x3A, 0xFF, 0x40, 0xFF, 0x46, 0xFF
	.byte 0x4C, 0xFF, 0x51, 0xFF, 0x56, 0xFF, 0x5B, 0xFF, 0x5F, 0xFF, 0x64, 0xFF, 0x68, 0xFF, 0x6C, 0xFF
	.byte 0x6F, 0xFF, 0x73, 0xFF, 0x76, 0xFF, 0x7A, 0xFF, 0x7D, 0xFF, 0x80, 0xFF, 0x83, 0xFF, 0x86, 0xFF
	.byte 0x88, 0xFF, 0x8B, 0xFF, 0x8E, 0xFF, 0x90, 0xFF, 0x92, 0xFF, 0x95, 0xFF, 0x97, 0xFF, 0x99, 0xFF
	.byte 0x9C, 0xFF, 0x9E, 0xFF, 0xA0, 0xFF, 0xA2, 0xFF, 0xA4, 0xFF, 0xA6, 0xFF, 0xA8, 0xFF, 0xAA, 0xFF
	.byte 0xAB, 0xFF, 0xAD, 0xFF, 0xAF, 0xFF, 0xB1, 0xFF, 0xB2, 0xFF, 0xB4, 0xFF, 0xB6, 0xFF, 0xB7, 0xFF
	.byte 0xB9, 0xFF, 0xBA, 0xFF, 0xBC, 0xFF, 0xBD, 0xFF, 0xBF, 0xFF, 0xC0, 0xFF, 0xC2, 0xFF, 0xC3, 0xFF
	.byte 0xC4, 0xFF, 0xC6, 0xFF, 0xC7, 0xFF, 0xC8, 0xFF, 0xCA, 0xFF, 0xCB, 0xFF, 0xCC, 0xFF, 0xCD, 0xFF
	.byte 0xCF, 0xFF, 0xD0, 0xFF, 0xD1, 0xFF, 0xD2, 0xFF, 0xD3, 0xFF, 0xD5, 0xFF, 0xD6, 0xFF, 0xD7, 0xFF
	.byte 0xD8, 0xFF, 0xD9, 0xFF, 0xDA, 0xFF, 0xDB, 0xFF, 0xDC, 0xFF, 0xDD, 0xFF, 0xDE, 0xFF, 0xDF, 0xFF
	.byte 0xE0, 0xFF, 0xE1, 0xFF, 0xE2, 0xFF, 0xE3, 0xFF, 0xE4, 0xFF, 0xE5, 0xFF, 0xE6, 0xFF, 0xE7, 0xFF
	.byte 0xE8, 0xFF, 0xE9, 0xFF, 0xE9, 0xFF, 0xEA, 0xFF, 0xEB, 0xFF, 0xEC, 0xFF, 0xED, 0xFF, 0xEE, 0xFF
	.byte 0xEF, 0xFF, 0xEF, 0xFF, 0xF0, 0xFF, 0xF1, 0xFF, 0xF2, 0xFF, 0xF3, 0xFF, 0xF4, 0xFF, 0xF4, 0xFF
	.byte 0xF5, 0xFF, 0xF6, 0xFF, 0xF7, 0xFF, 0xF7, 0xFF, 0xF8, 0xFF, 0xF9, 0xFF, 0xFA, 0xFF, 0xFA, 0xFF
	.byte 0xFB, 0xFF, 0xFC, 0xFF, 0xFD, 0xFF, 0xFD, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00
	.byte 0x00, 0x00, 0x3B, 0x00, 0x76, 0x00, 0xB2, 0x00, 0xED, 0x00, 0x28, 0x01, 0x64, 0x01, 0x9F, 0x01
	.byte 0xDB, 0x01, 0x17, 0x02, 0x52, 0x02, 0x8E, 0x02, 0xCA, 0x02, 0x05, 0x03, 0x41, 0x03, 0x7D, 0x03
	.byte 0xB9, 0x03, 0xF5, 0x03, 0x31, 0x04, 0x6E, 0x04, 0xAA, 0x04, 0xE6, 0x04, 0x22, 0x05, 0x5F, 0x05
	.byte 0x9B, 0x05, 0xD8, 0x05, 0x14, 0x06, 0x51, 0x06, 0x8D, 0x06, 0xCA, 0x06, 0x07, 0x07, 0x43, 0x07
	.byte 0x80, 0x07, 0xBD, 0x07, 0xFA, 0x07, 0x37, 0x08, 0x74, 0x08, 0xB1, 0x08, 0xEF, 0x08, 0x2C, 0x09
	.byte 0x69, 0x09, 0xA7, 0x09, 0xE4, 0x09, 0x21, 0x0A, 0x5F, 0x0A, 0x9C, 0x0A, 0xDA, 0x0A, 0x18, 0x0B
	.byte 0x56, 0x0B, 0x93, 0x0B, 0xD1, 0x0B, 0x0F, 0x0C, 0x4D, 0x0C, 0x8B, 0x0C, 0xC9, 0x0C, 0x07, 0x0D
	.byte 0x45, 0x0D, 0x84, 0x0D, 0xC2, 0x0D, 0x00, 0x0E, 0x3F, 0x0E, 0x7D, 0x0E, 0xBC, 0x0E, 0xFA, 0x0E
	.byte 0x39, 0x0F, 0x78, 0x0F, 0xB6, 0x0F, 0xF5, 0x0F, 0x34, 0x10, 0x73, 0x10, 0xB2, 0x10, 0xF1, 0x10
	.byte 0x30, 0x11, 0x6F, 0x11, 0xAE, 0x11, 0xEE, 0x11, 0x2D, 0x12, 0x6C, 0x12, 0xAC, 0x12, 0xEB, 0x12
	.byte 0x2B, 0x13, 0x6B, 0x13, 0xAA, 0x13, 0xEA, 0x13, 0x2A, 0x14, 0x6A, 0x14, 0xA9, 0x14, 0xE9, 0x14
	.byte 0x29, 0x15, 0x69, 0x15, 0xAA, 0x15, 0xEA, 0x15, 0x2A, 0x16, 0x6A, 0x16, 0xAB, 0x16, 0xEB, 0x16
	.byte 0x2C, 0x17, 0x6C, 0x17, 0xAD, 0x17, 0xED, 0x17, 0x2E, 0x18, 0x6F, 0x18, 0xB0, 0x18, 0xF0, 0x18
	.byte 0x31, 0x19, 0x72, 0x19, 0xB3, 0x19, 0xF5, 0x19, 0x36, 0x1A, 0x77, 0x1A, 0xB8, 0x1A, 0xFA, 0x1A
	.byte 0x3B, 0x1B, 0x7D, 0x1B, 0xBE, 0x1B, 0x00, 0x1C, 0x41, 0x1C, 0x83, 0x1C, 0xC5, 0x1C, 0x07, 0x1D
	.byte 0x48, 0x1D, 0x8A, 0x1D, 0xCC, 0x1D, 0x0E, 0x1E, 0x51, 0x1E, 0x93, 0x1E, 0xD5, 0x1E, 0x17, 0x1F
	.byte 0x5A, 0x1F, 0x9C, 0x1F, 0xDF, 0x1F, 0x21, 0x20, 0x64, 0x20, 0xA6, 0x20, 0xE9, 0x20, 0x2C, 0x21
	.byte 0x6F, 0x21, 0xB2, 0x21, 0xF5, 0x21, 0x38, 0x22, 0x7B, 0x22, 0xBE, 0x22, 0x01, 0x23, 0x44, 0x23
	.byte 0x88, 0x23, 0xCB, 0x23, 0x0E, 0x24, 0x52, 0x24, 0x96, 0x24, 0xD9, 0x24, 0x1D, 0x25, 0x61, 0x25
	.byte 0xA4, 0x25, 0xE8, 0x25, 0x2C, 0x26, 0x70, 0x26, 0xB4, 0x26, 0xF8, 0x26, 0x3D, 0x27, 0x81, 0x27
	.byte 0xC5, 0x27, 0x0A, 0x28, 0x4E, 0x28, 0x92, 0x28, 0xD7, 0x28, 0x1C, 0x29, 0x60, 0x29, 0xA5, 0x29
	.byte 0xEA, 0x29, 0x2F, 0x2A, 0x74, 0x2A, 0xB9, 0x2A, 0xFE, 0x2A, 0x43, 0x2B, 0x88, 0x2B, 0xCD, 0x2B
	.byte 0x13, 0x2C, 0x58, 0x2C, 0x9D, 0x2C, 0xE3, 0x2C, 0x28, 0x2D, 0x6E, 0x2D, 0xB4, 0x2D, 0xF9, 0x2D
	.byte 0x3F, 0x2E, 0x85, 0x2E, 0xCB, 0x2E, 0x11, 0x2F, 0x57, 0x2F, 0x9D, 0x2F, 0xE3, 0x2F, 0x2A, 0x30
	.byte 0x70, 0x30, 0xB6, 0x30, 0xFD, 0x30, 0x43, 0x31, 0x8A, 0x31, 0xD0, 0x31, 0x17, 0x32, 0x5E, 0x32
	.byte 0xA5, 0x32, 0xEC, 0x32, 0x32, 0x33, 0x79, 0x33, 0xC1, 0x33, 0x08, 0x34, 0x4F, 0x34, 0x96, 0x34
	.byte 0xDD, 0x34, 0x25, 0x35, 0x6C, 0x35, 0xB4, 0x35, 0xFB, 0x35, 0x43, 0x36, 0x8B, 0x36, 0xD3, 0x36
	.byte 0x1A, 0x37, 0x62, 0x37, 0xAA, 0x37, 0xF2, 0x37, 0x3A, 0x38, 0x83, 0x38, 0xCB, 0x38, 0x13, 0x39
	.byte 0x5C, 0x39, 0xA4, 0x39, 0xED, 0x39, 0x35, 0x3A, 0x7E, 0x3A, 0xC6, 0x3A, 0x0F, 0x3B, 0x58, 0x3B
	.byte 0xA1, 0x3B, 0xEA, 0x3B, 0x33, 0x3C, 0x7C, 0x3C, 0xC5, 0x3C, 0x0E, 0x3D, 0x58, 0x3D, 0xA1, 0x3D
	.byte 0xEA, 0x3D, 0x34, 0x3E, 0x7D, 0x3E, 0xC7, 0x3E, 0x11, 0x3F, 0x5A, 0x3F, 0xA4, 0x3F, 0xEE, 0x3F
	.byte 0x38, 0x40, 0x82, 0x40, 0xCC, 0x40, 0x16, 0x41, 0x61, 0x41, 0xAB, 0x41, 0xF5, 0x41, 0x40, 0x42
	.byte 0x8A, 0x42, 0xD5, 0x42, 0x1F, 0x43, 0x6A, 0x43, 0xB5, 0x43, 0x00, 0x44, 0x4B, 0x44, 0x95, 0x44
	.byte 0xE1, 0x44, 0x2C, 0x45, 0x77, 0x45, 0xC2, 0x45, 0x0D, 0x46, 0x59, 0x46, 0xA4, 0x46, 0xF0, 0x46
	.byte 0x3B, 0x47, 0x87, 0x47, 0xD3, 0x47, 0x1E, 0x48, 0x6A, 0x48, 0xB6, 0x48, 0x02, 0x49, 0x4E, 0x49
	.byte 0x9A, 0x49, 0xE6, 0x49, 0x33, 0x4A, 0x7F, 0x4A, 0xCB, 0x4A, 0x18, 0x4B, 0x64, 0x4B, 0xB1, 0x4B
	.byte 0xFE, 0x4B, 0x4A, 0x4C, 0x97, 0x4C, 0xE4, 0x4C, 0x31, 0x4D, 0x7E, 0x4D, 0xCB, 0x4D, 0x18, 0x4E
	.byte 0x66, 0x4E, 0xB3, 0x4E, 0x00, 0x4F, 0x4E, 0x4F, 0x9B, 0x4F, 0xE9, 0x4F, 0x36, 0x50, 0x84, 0x50
	.byte 0xD2, 0x50, 0x20, 0x51, 0x6E, 0x51, 0xBC, 0x51, 0x0A, 0x52, 0x58, 0x52, 0xA6, 0x52, 0xF4, 0x52
	.byte 0x43, 0x53, 0x91, 0x53, 0xE0, 0x53, 0x2E, 0x54, 0x7D, 0x54, 0xCC, 0x54, 0x1A, 0x55, 0x69, 0x55
	.byte 0xB8, 0x55, 0x07, 0x56, 0x56, 0x56, 0xA5, 0x56, 0xF4, 0x56, 0x44, 0x57, 0x93, 0x57, 0xE2, 0x57
	.byte 0x32, 0x58, 0x82, 0x58, 0xD1, 0x58, 0x21, 0x59, 0x71, 0x59, 0xC1, 0x59, 0x10, 0x5A, 0x60, 0x5A
	.byte 0xB0, 0x5A, 0x01, 0x5B, 0x51, 0x5B, 0xA1, 0x5B, 0xF1, 0x5B, 0x42, 0x5C, 0x92, 0x5C, 0xE3, 0x5C
	.byte 0x34, 0x5D, 0x84, 0x5D, 0xD5, 0x5D, 0x26, 0x5E, 0x77, 0x5E, 0xC8, 0x5E, 0x19, 0x5F, 0x6A, 0x5F
	.byte 0xBB, 0x5F, 0x0D, 0x60, 0x5E, 0x60, 0xB0, 0x60, 0x01, 0x61, 0x53, 0x61, 0xA4, 0x61, 0xF6, 0x61
	.byte 0x48, 0x62, 0x9A, 0x62, 0xEC, 0x62, 0x3E, 0x63, 0x90, 0x63, 0xE2, 0x63, 0x34, 0x64, 0x87, 0x64
	.byte 0xD9, 0x64, 0x2C, 0x65, 0x7E, 0x65, 0xD1, 0x65, 0x24, 0x66, 0x76, 0x66, 0xC9, 0x66, 0x1C, 0x67
	.byte 0x6F, 0x67, 0xC2, 0x67, 0x15, 0x68, 0x69, 0x68, 0xBC, 0x68, 0x0F, 0x69, 0x63, 0x69, 0xB6, 0x69
	.byte 0x0A, 0x6A, 0x5E, 0x6A, 0xB1, 0x6A, 0x05, 0x6B, 0x59, 0x6B, 0xAD, 0x6B, 0x01, 0x6C, 0x55, 0x6C
	.byte 0xAA, 0x6C, 0xFE, 0x6C, 0x52, 0x6D, 0xA7, 0x6D, 0xFB, 0x6D, 0x50, 0x6E, 0xA4, 0x6E, 0xF9, 0x6E
	.byte 0x4E, 0x6F, 0xA3, 0x6F, 0xF8, 0x6F, 0x4D, 0x70, 0xA2, 0x70, 0xF7, 0x70, 0x4D, 0x71, 0xA2, 0x71
	.byte 0xF7, 0x71, 0x4D, 0x72, 0xA2, 0x72, 0xF8, 0x72, 0x4E, 0x73, 0xA4, 0x73, 0xFA, 0x73, 0x50, 0x74
	.byte 0xA6, 0x74, 0xFC, 0x74, 0x52, 0x75, 0xA8, 0x75, 0xFF, 0x75, 0x55, 0x76, 0xAC, 0x76, 0x02, 0x77
	.byte 0x59, 0x77, 0xB0, 0x77, 0x07, 0x78, 0x5E, 0x78, 0xB4, 0x78, 0x0C, 0x79, 0x63, 0x79, 0xBA, 0x79
	.byte 0x11, 0x7A, 0x69, 0x7A, 0xC0, 0x7A, 0x18, 0x7B, 0x6F, 0x7B, 0xC7, 0x7B, 0x1F, 0x7C, 0x77, 0x7C
	.byte 0xCF, 0x7C, 0x27, 0x7D, 0x7F, 0x7D, 0xD7, 0x7D, 0x2F, 0x7E, 0x88, 0x7E, 0xE0, 0x7E, 0x38, 0x7F
	.byte 0x91, 0x7F, 0xEA, 0x7F, 0x42, 0x80, 0x9B, 0x80, 0xF4, 0x80, 0x4D, 0x81, 0xA6, 0x81, 0xFF, 0x81
	.byte 0x59, 0x82, 0xB2, 0x82, 0x0B, 0x83, 0x65, 0x83, 0xBE, 0x83, 0x18, 0x84, 0x72, 0x84, 0xCB, 0x84
	.byte 0x25, 0x85, 0x7F, 0x85, 0xD9, 0x85, 0x33, 0x86, 0x8E, 0x86, 0xE8, 0x86, 0x42, 0x87, 0x9D, 0x87
	.byte 0xF7, 0x87, 0x52, 0x88, 0xAC, 0x88, 0x07, 0x89, 0x62, 0x89, 0xBD, 0x89, 0x18, 0x8A, 0x73, 0x8A
	.byte 0xCE, 0x8A, 0x2A, 0x8B, 0x85, 0x8B, 0xE0, 0x8B, 0x3C, 0x8C, 0x97, 0x8C, 0xF3, 0x8C, 0x4F, 0x8D
	.byte 0xAB, 0x8D, 0x07, 0x8E, 0x63, 0x8E, 0xBF, 0x8E, 0x1B, 0x8F, 0x77, 0x8F, 0xD4, 0x8F, 0x30, 0x90
	.byte 0x8C, 0x90, 0xE9, 0x90, 0x46, 0x91, 0xA2, 0x91, 0xFF, 0x91, 0x5C, 0x92, 0xB9, 0x92, 0x16, 0x93
	.byte 0x73, 0x93, 0xD1, 0x93, 0x2E, 0x94, 0x8C, 0x94, 0xE9, 0x94, 0x47, 0x95, 0xA4, 0x95, 0x02, 0x96
	.byte 0x60, 0x96, 0xBE, 0x96, 0x1C, 0x97, 0x7A, 0x97, 0xD8, 0x97, 0x36, 0x98, 0x95, 0x98, 0xF3, 0x98
	.byte 0x52, 0x99, 0xB0, 0x99, 0x0F, 0x9A, 0x6E, 0x9A, 0xCD, 0x9A, 0x2C, 0x9B, 0x8B, 0x9B, 0xEA, 0x9B
	.byte 0x49, 0x9C, 0xA8, 0x9C, 0x08, 0x9D, 0x67, 0x9D, 0xC7, 0x9D, 0x26, 0x9E, 0x86, 0x9E, 0xE6, 0x9E
	.byte 0x46, 0x9F, 0xA6, 0x9F, 0x06, 0xA0, 0x66, 0xA0, 0xC6, 0xA0, 0x27, 0xA1, 0x87, 0xA1, 0xE8, 0xA1
	.byte 0x48, 0xA2, 0xA9, 0xA2, 0x0A, 0xA3, 0x6B, 0xA3, 0xCC, 0xA3, 0x2D, 0xA4, 0x8E, 0xA4, 0xEF, 0xA4
	.byte 0x50, 0xA5, 0xB2, 0xA5, 0x13, 0xA6, 0x75, 0xA6, 0xD6, 0xA6, 0x38, 0xA7, 0x9A, 0xA7, 0xFC, 0xA7
	.byte 0x5E, 0xA8, 0xC0, 0xA8, 0x22, 0xA9, 0x84, 0xA9, 0xE7, 0xA9, 0x49, 0xAA, 0xAC, 0xAA, 0x0E, 0xAB
	.byte 0x71, 0xAB, 0xD4, 0xAB, 0x37, 0xAC, 0x9A, 0xAC, 0xFD, 0xAC, 0x60, 0xAD, 0xC3, 0xAD, 0x27, 0xAE
	.byte 0x8A, 0xAE, 0xED, 0xAE, 0x51, 0xAF, 0xB5, 0xAF, 0x19, 0xB0, 0x7C, 0xB0, 0xE0, 0xB0, 0x45, 0xB1
	.byte 0xA9, 0xB1, 0x0D, 0xB2, 0x71, 0xB2, 0xD6, 0xB2, 0x3A, 0xB3, 0x9F, 0xB3, 0x03, 0xB4, 0x68, 0xB4
	.byte 0xCD, 0xB4, 0x32, 0xB5, 0x97, 0xB5, 0xFC, 0xB5, 0x62, 0xB6, 0xC7, 0xB6, 0x2C, 0xB7, 0x92, 0xB7
	.byte 0xF7, 0xB7, 0x5D, 0xB8, 0xC3, 0xB8, 0x29, 0xB9, 0x8F, 0xB9, 0xF5, 0xB9, 0x5B, 0xBA, 0xC1, 0xBA
	.byte 0x28, 0xBB, 0x8E, 0xBB, 0xF5, 0xBB, 0x5B, 0xBC, 0xC2, 0xBC, 0x29, 0xBD, 0x90, 0xBD, 0xF7, 0xBD
	.byte 0x5E, 0xBE, 0xC5, 0xBE, 0x2C, 0xBF, 0x94, 0xBF, 0xFB, 0xBF, 0x63, 0xC0, 0xCA, 0xC0, 0x32, 0xC1
	.byte 0x9A, 0xC1, 0x02, 0xC2, 0x6A, 0xC2, 0xD2, 0xC2, 0x3A, 0xC3, 0xA2, 0xC3, 0x0B, 0xC4, 0x73, 0xC4
	.byte 0xDC, 0xC4, 0x44, 0xC5, 0xAD, 0xC5, 0x16, 0xC6, 0x7F, 0xC6, 0xE8, 0xC6, 0x51, 0xC7, 0xBB, 0xC7
	.byte 0x24, 0xC8, 0x8D, 0xC8, 0xF7, 0xC8, 0x60, 0xC9, 0xCA, 0xC9, 0x34, 0xCA, 0x9E, 0xCA, 0x08, 0xCB
	.byte 0x72, 0xCB, 0xDC, 0xCB, 0x47, 0xCC, 0xB1, 0xCC, 0x1B, 0xCD, 0x86, 0xCD, 0xF1, 0xCD, 0x5B, 0xCE
	.byte 0xC6, 0xCE, 0x31, 0xCF, 0x9C, 0xCF, 0x08, 0xD0, 0x73, 0xD0, 0xDE, 0xD0, 0x4A, 0xD1, 0xB5, 0xD1
	.byte 0x21, 0xD2, 0x8D, 0xD2, 0xF8, 0xD2, 0x64, 0xD3, 0xD0, 0xD3, 0x3D, 0xD4, 0xA9, 0xD4, 0x15, 0xD5
	.byte 0x82, 0xD5, 0xEE, 0xD5, 0x5B, 0xD6, 0xC7, 0xD6, 0x34, 0xD7, 0xA1, 0xD7, 0x0E, 0xD8, 0x7B, 0xD8
	.byte 0xE9, 0xD8, 0x56, 0xD9, 0xC3, 0xD9, 0x31, 0xDA, 0x9E, 0xDA, 0x0C, 0xDB, 0x7A, 0xDB, 0xE8, 0xDB
	.byte 0x56, 0xDC, 0xC4, 0xDC, 0x32, 0xDD, 0xA0, 0xDD, 0x0F, 0xDE, 0x7D, 0xDE, 0xEC, 0xDE, 0x5B, 0xDF
	.byte 0xC9, 0xDF, 0x38, 0xE0, 0xA7, 0xE0, 0x16, 0xE1, 0x86, 0xE1, 0xF5, 0xE1, 0x64, 0xE2, 0xD4, 0xE2
	.byte 0x43, 0xE3, 0xB3, 0xE3, 0x23, 0xE4, 0x93, 0xE4, 0x03, 0xE5, 0x73, 0xE5, 0xE3, 0xE5, 0x54, 0xE6
	.byte 0xC4, 0xE6, 0x35, 0xE7, 0xA5, 0xE7, 0x16, 0xE8, 0x87, 0xE8, 0xF8, 0xE8, 0x69, 0xE9, 0xDA, 0xE9
	.byte 0x4B, 0xEA, 0xBC, 0xEA, 0x2E, 0xEB, 0x9F, 0xEB, 0x11, 0xEC, 0x83, 0xEC, 0xF5, 0xEC, 0x66, 0xED
	.byte 0xD9, 0xED, 0x4B, 0xEE, 0xBD, 0xEE, 0x2F, 0xEF, 0xA2, 0xEF, 0x14, 0xF0, 0x87, 0xF0, 0xFA, 0xF0
	.byte 0x6D, 0xF1, 0xE0, 0xF1, 0x53, 0xF2, 0xC6, 0xF2, 0x39, 0xF3, 0xAD, 0xF3, 0x20, 0xF4, 0x94, 0xF4
	.byte 0x07, 0xF5, 0x7B, 0xF5, 0xEF, 0xF5, 0x63, 0xF6, 0xD7, 0xF6, 0x4C, 0xF7, 0xC0, 0xF7, 0x34, 0xF8
	.byte 0xA9, 0xF8, 0x1E, 0xF9, 0x92, 0xF9, 0x07, 0xFA, 0x7C, 0xFA, 0xF1, 0xFA, 0x66, 0xFB, 0xDC, 0xFB
	.byte 0x51, 0xFC, 0xC7, 0xFC, 0x3C, 0xFD, 0xB2, 0xFD, 0x28, 0xFE, 0x9E, 0xFE, 0x14, 0xFF, 0x8A, 0xFF
	.byte 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01
	.byte 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01
	.byte 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01
	.byte 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01
	.byte 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01
	.byte 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01
	.byte 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02
	.byte 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02
	.byte 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03, 0x03, 0x03
	.byte 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03
	.byte 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04
	.byte 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04
	.byte 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05
	.byte 0x05, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06
	.byte 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x08, 0x08, 0x08, 0x08
	.byte 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09
	.byte 0x09, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B
	.byte 0x0B, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0E
	.byte 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x10, 0x10, 0x10, 0x10, 0x10
	.byte 0x10, 0x11, 0x11, 0x11, 0x11, 0x11, 0x12, 0x12, 0x12, 0x12, 0x12, 0x13, 0x13, 0x13, 0x13, 0x14
	.byte 0x14, 0x14, 0x14, 0x14, 0x15, 0x15, 0x15, 0x15, 0x16, 0x16, 0x16, 0x16, 0x17, 0x17, 0x17, 0x18
	.byte 0x18, 0x18, 0x18, 0x19, 0x19, 0x19, 0x19, 0x1A, 0x1A, 0x1A, 0x1B, 0x1B, 0x1B, 0x1C, 0x1C, 0x1C
	.byte 0x1D, 0x1D, 0x1D, 0x1E, 0x1E, 0x1E, 0x1F, 0x1F, 0x1F, 0x20, 0x20, 0x20, 0x21, 0x21, 0x22, 0x22
	.byte 0x22, 0x23, 0x23, 0x24, 0x24, 0x24, 0x25, 0x25, 0x26, 0x26, 0x27, 0x27, 0x27, 0x28, 0x28, 0x29
	.byte 0x29, 0x2A, 0x2A, 0x2B, 0x2B, 0x2C, 0x2C, 0x2D, 0x2D, 0x2E, 0x2E, 0x2F, 0x2F, 0x30, 0x31, 0x31
	.byte 0x32, 0x32, 0x33, 0x33, 0x34, 0x35, 0x35, 0x36, 0x36, 0x37, 0x38, 0x38, 0x39, 0x3A, 0x3A, 0x3B
	.byte 0x3C, 0x3C, 0x3D, 0x3E, 0x3F, 0x3F, 0x40, 0x41, 0x42, 0x42, 0x43, 0x44, 0x45, 0x45, 0x46, 0x47
	.byte 0x48, 0x49, 0x4A, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x52, 0x53, 0x54, 0x55
	.byte 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5D, 0x5E, 0x5F, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x67
	.byte 0x68, 0x69, 0x6A, 0x6B, 0x6D, 0x6E, 0x6F, 0x71, 0x72, 0x73, 0x75, 0x76, 0x77, 0x79, 0x7A, 0x7B
	.byte 0x7D, 0x7E, 0x7F, 0x20, 0x21, 0x21, 0x21, 0x22, 0x22, 0x23, 0x23, 0x23, 0x24, 0x24, 0x25, 0x25
	.byte 0x26, 0x26, 0x26, 0x27, 0x27, 0x28, 0x28, 0x29, 0x29, 0x2A, 0x2A, 0x2B, 0x2B, 0x2C, 0x2C, 0x2D
	.byte 0x2D, 0x2E, 0x2E, 0x2F, 0x2F, 0x30, 0x30, 0x31, 0x31, 0x32, 0x33, 0x33, 0x34, 0x34, 0x35, 0x36
	.byte 0x36, 0x37, 0x37, 0x38, 0x39, 0x39, 0x3A, 0x3B, 0x3B, 0x3C, 0x3D, 0x3E, 0x3E, 0x3F, 0x40, 0x40
	.byte 0x41, 0x42, 0x43, 0x43, 0x44, 0x45, 0x46, 0x47, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4D
	.byte 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D
	.byte 0x5E, 0x5F, 0x60, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6F, 0x70
	.byte 0x71, 0x73, 0x74, 0x75, 0x77, 0x78, 0x79, 0x7B, 0x7C, 0x7E, 0x7E, 0x40, 0x41, 0x42, 0x43, 0x43
	.byte 0x44, 0x45, 0x46, 0x47, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51
	.byte 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61
	.byte 0x62, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6B, 0x6C, 0x6D, 0x6E, 0x70, 0x71, 0x72, 0x74, 0x75
	.byte 0x76, 0x78, 0x79, 0x7B, 0x7C, 0x7D, 0x7E, 0x40, 0x41, 0x42, 0x42, 0x43, 0x44, 0x45, 0x46, 0x46
	.byte 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55
	.byte 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61, 0x62, 0x63, 0x65, 0x66
	.byte 0x67, 0x68, 0x69, 0x6A, 0x6C, 0x6D, 0x6E, 0x6F, 0x71, 0x72, 0x73, 0x75, 0x76, 0x77, 0x79, 0x7A
	.byte 0x7C, 0x7D, 0x7E, 0x7F, 0x94, 0x6B, 0x0D, 0x02, 0xC0, 0x6B, 0x0D, 0x02, 0xEC, 0x6B, 0x0D, 0x02
	.byte 0x84, 0x6C, 0x0D, 0x02, 0xB0, 0x6D, 0x0D, 0x02, 0x94, 0x6F, 0x0D, 0x02, 0x40, 0x73, 0x0D, 0x02
	.byte 0xC0, 0x73, 0x0D, 0x02, 0xE8, 0x73, 0x0D, 0x02, 0x21, 0x06, 0xC0, 0xDE, 0xBA, 0x98, 0xCE, 0x3F
	.byte 0xA6, 0x92, 0xE3, 0x9D, 0x46, 0xF2, 0xED, 0x01, 0x76, 0xE3, 0xCC, 0x08, 0x56, 0x23, 0x63, 0xFA
	.byte 0xCA, 0xD4, 0xEC, 0xDF, 0x9A, 0x62, 0x78, 0x34, 0x8F, 0x6D, 0x63, 0x3C, 0xFE, 0x22, 0xCA, 0x92
	.byte 0x20, 0x88, 0x97, 0x23, 0xD2, 0xCF, 0xAE, 0xC2, 0x32, 0x67, 0x8D, 0xFE, 0xCA, 0x83, 0x64, 0x98
	.byte 0xAC, 0xFD, 0x3E, 0x37, 0x87, 0x46, 0x58, 0x24, 0x14, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x14, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00
	.byte 0x48, 0xE3, 0x10, 0x02, 0x84, 0xE2, 0x10, 0x02, 0x84, 0xE3, 0x10, 0x02, 0x04, 0xE3, 0x10, 0x02
	.byte 0x04, 0xE2, 0x10, 0x02, 0xC8, 0xE3, 0x10, 0x02, 0xC8, 0xE2, 0x10, 0x02, 0x0A, 0x00, 0x28, 0x00
	.byte 0x00, 0x00, 0x28, 0x00, 0x0C, 0x27, 0x0E, 0x02, 0xC8, 0x26, 0x0E, 0x02, 0xE8, 0x26, 0x0E, 0x02
	.byte 0x80, 0x27, 0x0E, 0x02, 0x34, 0x27, 0x0E, 0x02, 0x58, 0x27, 0x0E, 0x02, 0xD0, 0x1D, 0x0E, 0x02
	.byte 0xFC, 0xE1, 0x10, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x0C, 0x00, 0x10, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x3D, 0x00
	.byte 0xCC, 0x27, 0x0E, 0x02, 0xC8, 0x26, 0x0E, 0x02, 0xA8, 0x27, 0x0E, 0x02, 0x1C, 0x28, 0x0E, 0x02
	.byte 0x34, 0x27, 0x0E, 0x02, 0xF4, 0x27, 0x0E, 0x02, 0xD0, 0x1D, 0x0E, 0x02, 0xFC, 0xE1, 0x10, 0x02
	.byte 0x00, 0x00, 0x01, 0x00, 0x80, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x3D, 0x00, 0x0A, 0x00, 0x0A, 0x00
	.byte 0xD0, 0x07, 0x88, 0x13, 0xA4, 0x32, 0x0E, 0x02, 0x60, 0x32, 0x0E, 0x02, 0x80, 0x32, 0x0E, 0x02
	.byte 0x18, 0x33, 0x0E, 0x02, 0xCC, 0x32, 0x0E, 0x02, 0xF0, 0x32, 0x0E, 0x02, 0x60, 0x1E, 0x0E, 0x02
	.byte 0x7C, 0xE2, 0x10, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x10, 0x00, 0x00, 0x0C, 0x00, 0x20, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x62, 0x00, 0x13, 0x00
	.byte 0x0A, 0x00, 0x0A, 0x00, 0x28, 0x00, 0xC8, 0x00, 0x88, 0x2D, 0x0E, 0x02, 0x44, 0x2D, 0x0E, 0x02
	.byte 0x64, 0x2D, 0x0E, 0x02, 0xFC, 0x2D, 0x0E, 0x02, 0xB0, 0x2D, 0x0E, 0x02, 0xD4, 0x2D, 0x0E, 0x02
	.byte 0xD0, 0x1D, 0x0E, 0x02, 0xC0, 0xE2, 0x10, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00
	.byte 0x0C, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x88, 0x2D, 0x0E, 0x02, 0x44, 0x2D, 0x0E, 0x02, 0x64, 0x2D, 0x0E, 0x02
	.byte 0xFC, 0x2D, 0x0E, 0x02, 0xB0, 0x2D, 0x0E, 0x02, 0xD4, 0x2D, 0x0E, 0x02, 0xD0, 0x1D, 0x0E, 0x02
	.byte 0xC0, 0xE2, 0x10, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x0C, 0x00, 0x10, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xBF, 0x00, 0xD4, 0x00
	.byte 0x0A, 0x00, 0x0A, 0x00, 0xD0, 0x07, 0xD0, 0x07, 0xA4, 0x32, 0x0E, 0x02, 0x60, 0x32, 0x0E, 0x02
	.byte 0x80, 0x32, 0x0E, 0x02, 0x18, 0x33, 0x0E, 0x02, 0xCC, 0x32, 0x0E, 0x02, 0xF0, 0x32, 0x0E, 0x02
	.byte 0x60, 0x1E, 0x0E, 0x02, 0x40, 0xE3, 0x10, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x10, 0x00, 0x00
	.byte 0x0C, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0xC2, 0x00, 0x09, 0x00, 0xA4, 0x32, 0x0E, 0x02, 0x60, 0x32, 0x0E, 0x02, 0x80, 0x32, 0x0E, 0x02
	.byte 0x18, 0x33, 0x0E, 0x02, 0xCC, 0x32, 0x0E, 0x02, 0xF0, 0x32, 0x0E, 0x02, 0x60, 0x1E, 0x0E, 0x02
	.byte 0x40, 0xE3, 0x10, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x10, 0x00, 0x00, 0x0C, 0x00, 0x20, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x0A, 0x00, 0x0A, 0x00, 0xF4, 0x01, 0xF4, 0x01, 0x70, 0x34, 0x0E, 0x02, 0x44, 0x2D, 0x0E, 0x02
	.byte 0x64, 0x2D, 0x0E, 0x02, 0x98, 0x34, 0x0E, 0x02, 0xB0, 0x2D, 0x0E, 0x02, 0xD4, 0x2D, 0x0E, 0x02
	.byte 0xD0, 0x1D, 0x0E, 0x02, 0xC0, 0xE3, 0x10, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00
	.byte 0x0C, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00
	.byte 0x32, 0x00, 0x1B, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B
	.byte 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B
	.byte 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B
	.byte 0x2C, 0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B
	.byte 0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B
	.byte 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x5B
	.byte 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B
	.byte 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B
	.byte 0x7C, 0x7D, 0x7E, 0x7F, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B
	.byte 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B
	.byte 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B
	.byte 0x2C, 0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B
	.byte 0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B
	.byte 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B
	.byte 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B
	.byte 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x7B
	.byte 0x7C, 0x7D, 0x7E, 0x7F, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00
	.byte 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x06, 0x01, 0x04, 0x01, 0x04, 0x01, 0x04, 0x01, 0x04, 0x01
	.byte 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00
	.byte 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00
	.byte 0x04, 0x00, 0x04, 0x00, 0x42, 0x01, 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00
	.byte 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00
	.byte 0xD0, 0x00, 0xD0, 0x00, 0x58, 0x04, 0x58, 0x04, 0x58, 0x04, 0x58, 0x04, 0x58, 0x04, 0x58, 0x04
	.byte 0x58, 0x04, 0x58, 0x04, 0x58, 0x04, 0x58, 0x04, 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00
	.byte 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00, 0x51, 0x06, 0x51, 0x06, 0x51, 0x06, 0x51, 0x06, 0x51, 0x06
	.byte 0x51, 0x06, 0x51, 0x02, 0x51, 0x02, 0x51, 0x02, 0x51, 0x02, 0x51, 0x02, 0x51, 0x02, 0x51, 0x02
	.byte 0x51, 0x02, 0x51, 0x02, 0x51, 0x02, 0x51, 0x02, 0x51, 0x02, 0x51, 0x02, 0x51, 0x02, 0x51, 0x02
	.byte 0x51, 0x02, 0x51, 0x02, 0x51, 0x02, 0x51, 0x02, 0x51, 0x02, 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00
	.byte 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00, 0x71, 0x04, 0x71, 0x04, 0x71, 0x04, 0x71, 0x04, 0x71, 0x04
	.byte 0x71, 0x04, 0x71, 0x00, 0x71, 0x00, 0x71, 0x00, 0x71, 0x00, 0x71, 0x00, 0x71, 0x00, 0x71, 0x00
	.byte 0x71, 0x00, 0x71, 0x00, 0x71, 0x00, 0x71, 0x00, 0x71, 0x00, 0x71, 0x00, 0x71, 0x00, 0x71, 0x00
	.byte 0x71, 0x00, 0x71, 0x00, 0x71, 0x00, 0x71, 0x00, 0x71, 0x00, 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00
	.byte 0xD0, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0x41, 0x4E, 0x28
	.byte 0x00, 0x49, 0x4E, 0x46, 0x49, 0x4E, 0x49, 0x54, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00
	.byte 0x02, 0x00, 0x03, 0x00, 0x04, 0x00, 0x05, 0x00, 0x06, 0x00, 0x07, 0x00, 0x08, 0x00, 0x09, 0x00
	.byte 0x0A, 0x00, 0x0B, 0x00, 0x0C, 0x00, 0x0D, 0x00, 0x0E, 0x00, 0x0F, 0x00, 0x10, 0x00, 0x11, 0x00
	.byte 0x12, 0x00, 0x13, 0x00, 0x14, 0x00, 0x15, 0x00, 0x16, 0x00, 0x17, 0x00, 0x18, 0x00, 0x19, 0x00
	.byte 0x1A, 0x00, 0x1B, 0x00, 0x1C, 0x00, 0x1D, 0x00, 0x1E, 0x00, 0x1F, 0x00, 0x20, 0x00, 0x21, 0x00
	.byte 0x22, 0x00, 0x23, 0x00, 0x24, 0x00, 0x25, 0x00, 0x26, 0x00, 0x27, 0x00, 0x28, 0x00, 0x29, 0x00
	.byte 0x2A, 0x00, 0x2B, 0x00, 0x2C, 0x00, 0x2D, 0x00, 0x2E, 0x00, 0x2F, 0x00, 0x30, 0x00, 0x31, 0x00
	.byte 0x32, 0x00, 0x33, 0x00, 0x34, 0x00, 0x35, 0x00, 0x36, 0x00, 0x37, 0x00, 0x38, 0x00, 0x39, 0x00
	.byte 0x3A, 0x00, 0x3B, 0x00, 0x3C, 0x00, 0x3D, 0x00, 0x3E, 0x00, 0x3F, 0x00, 0x40, 0x00, 0x61, 0x00
	.byte 0x62, 0x00, 0x63, 0x00, 0x64, 0x00, 0x65, 0x00, 0x66, 0x00, 0x67, 0x00, 0x68, 0x00, 0x69, 0x00
	.byte 0x6A, 0x00, 0x6B, 0x00, 0x6C, 0x00, 0x6D, 0x00, 0x6E, 0x00, 0x6F, 0x00, 0x70, 0x00, 0x71, 0x00
	.byte 0x72, 0x00, 0x73, 0x00, 0x74, 0x00, 0x75, 0x00, 0x76, 0x00, 0x77, 0x00, 0x78, 0x00, 0x79, 0x00
	.byte 0x7A, 0x00, 0x5B, 0x00, 0x5C, 0x00, 0x5D, 0x00, 0x5E, 0x00, 0x5F, 0x00, 0x60, 0x00, 0x61, 0x00
	.byte 0x62, 0x00, 0x63, 0x00, 0x64, 0x00, 0x65, 0x00, 0x66, 0x00, 0x67, 0x00, 0x68, 0x00, 0x69, 0x00
	.byte 0x6A, 0x00, 0x6B, 0x00, 0x6C, 0x00, 0x6D, 0x00, 0x6E, 0x00, 0x6F, 0x00, 0x70, 0x00, 0x71, 0x00
	.byte 0x72, 0x00, 0x73, 0x00, 0x74, 0x00, 0x75, 0x00, 0x76, 0x00, 0x77, 0x00, 0x78, 0x00, 0x79, 0x00
	.byte 0x7A, 0x00, 0x7B, 0x00, 0x7C, 0x00, 0x7D, 0x00, 0x7E, 0x00, 0x7F, 0x00, 0x04, 0x00, 0x04, 0x00
	.byte 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x06, 0x01
	.byte 0x04, 0x01, 0x04, 0x01, 0x04, 0x01, 0x04, 0x01, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00
	.byte 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00
	.byte 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x42, 0x01, 0xD0, 0x00
	.byte 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00
	.byte 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00, 0x58, 0x04, 0x58, 0x04
	.byte 0x58, 0x04, 0x58, 0x04, 0x58, 0x04, 0x58, 0x04, 0x58, 0x04, 0x58, 0x04, 0x58, 0x04, 0x58, 0x04
	.byte 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00, 0x51, 0x06
	.byte 0x51, 0x06, 0x51, 0x06, 0x51, 0x06, 0x51, 0x06, 0x51, 0x06, 0x51, 0x02, 0x51, 0x02, 0x51, 0x02
	.byte 0x51, 0x02, 0x51, 0x02, 0x51, 0x02, 0x51, 0x02, 0x51, 0x02, 0x51, 0x02, 0x51, 0x02, 0x51, 0x02
	.byte 0x51, 0x02, 0x51, 0x02, 0x51, 0x02, 0x51, 0x02, 0x51, 0x02, 0x51, 0x02, 0x51, 0x02, 0x51, 0x02
	.byte 0x51, 0x02, 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00, 0x71, 0x04
	.byte 0x71, 0x04, 0x71, 0x04, 0x71, 0x04, 0x71, 0x04, 0x71, 0x04, 0x71, 0x00, 0x71, 0x00, 0x71, 0x00
	.byte 0x71, 0x00, 0x71, 0x00, 0x71, 0x00, 0x71, 0x00, 0x71, 0x00, 0x71, 0x00, 0x71, 0x00, 0x71, 0x00
	.byte 0x71, 0x00, 0x71, 0x00, 0x71, 0x00, 0x71, 0x00, 0x71, 0x00, 0x71, 0x00, 0x71, 0x00, 0x71, 0x00
	.byte 0x71, 0x00, 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00
	.byte 0x02, 0x00, 0x03, 0x00, 0x04, 0x00, 0x05, 0x00, 0x06, 0x00, 0x07, 0x00, 0x08, 0x00, 0x09, 0x00
	.byte 0x0A, 0x00, 0x0B, 0x00, 0x0C, 0x00, 0x0D, 0x00, 0x0E, 0x00, 0x0F, 0x00, 0x10, 0x00, 0x11, 0x00
	.byte 0x12, 0x00, 0x13, 0x00, 0x14, 0x00, 0x15, 0x00, 0x16, 0x00, 0x17, 0x00, 0x18, 0x00, 0x19, 0x00
	.byte 0x1A, 0x00, 0x1B, 0x00, 0x1C, 0x00, 0x1D, 0x00, 0x1E, 0x00, 0x1F, 0x00, 0x20, 0x00, 0x21, 0x00
	.byte 0x22, 0x00, 0x23, 0x00, 0x24, 0x00, 0x25, 0x00, 0x26, 0x00, 0x27, 0x00, 0x28, 0x00, 0x29, 0x00
	.byte 0x2A, 0x00, 0x2B, 0x00, 0x2C, 0x00, 0x2D, 0x00, 0x2E, 0x00, 0x2F, 0x00, 0x30, 0x00, 0x31, 0x00
	.byte 0x32, 0x00, 0x33, 0x00, 0x34, 0x00, 0x35, 0x00, 0x36, 0x00, 0x37, 0x00, 0x38, 0x00, 0x39, 0x00
	.byte 0x3A, 0x00, 0x3B, 0x00, 0x3C, 0x00, 0x3D, 0x00, 0x3E, 0x00, 0x3F, 0x00, 0x40, 0x00, 0x41, 0x00
	.byte 0x42, 0x00, 0x43, 0x00, 0x44, 0x00, 0x45, 0x00, 0x46, 0x00, 0x47, 0x00, 0x48, 0x00, 0x49, 0x00
	.byte 0x4A, 0x00, 0x4B, 0x00, 0x4C, 0x00, 0x4D, 0x00, 0x4E, 0x00, 0x4F, 0x00, 0x50, 0x00, 0x51, 0x00
	.byte 0x52, 0x00, 0x53, 0x00, 0x54, 0x00, 0x55, 0x00, 0x56, 0x00, 0x57, 0x00, 0x58, 0x00, 0x59, 0x00
	.byte 0x5A, 0x00, 0x5B, 0x00, 0x5C, 0x00, 0x5D, 0x00, 0x5E, 0x00, 0x5F, 0x00, 0x60, 0x00, 0x41, 0x00
	.byte 0x42, 0x00, 0x43, 0x00, 0x44, 0x00, 0x45, 0x00, 0x46, 0x00, 0x47, 0x00, 0x48, 0x00, 0x49, 0x00
	.byte 0x4A, 0x00, 0x4B, 0x00, 0x4C, 0x00, 0x4D, 0x00, 0x4E, 0x00, 0x4F, 0x00, 0x50, 0x00, 0x51, 0x00
	.byte 0x52, 0x00, 0x53, 0x00, 0x54, 0x00, 0x55, 0x00, 0x56, 0x00, 0x57, 0x00, 0x58, 0x00, 0x59, 0x00
	.byte 0x5A, 0x00, 0x7B, 0x00, 0x7C, 0x00, 0x7D, 0x00, 0x7E, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x03, 0xB8, 0xE2, 0x3F, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0xF0, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x06, 0xD0, 0xCF, 0x43, 0xEB, 0xFD, 0x4C, 0x3E, 0x00, 0x00, 0x00, 0x00

	.data

_021105DC:
	.byte 0xF4, 0xC0, 0x09, 0x02
	.byte 0x38, 0xC0, 0x09, 0x02
_021105E4:
	.byte 0x4C, 0xBF, 0x09, 0x02, 0x8C, 0xBF, 0x09, 0x02
_021105EC:
	.byte 0x00, 0x00, 0x00, 0x10
	.byte 0x00, 0x00, 0x00, 0x00
_021105F4:
	.byte 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x61, 0x62
	.byte 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72
	.byte 0x73, 0x74, 0x75, 0x76, 0x00, 0x00, 0x00, 0x00
_02110618:
	.byte 0x25, 0x73, 0x25, 0x63, 0x25, 0x63, 0x25, 0x63
	.byte 0x25, 0x63, 0x25, 0x73, 0x00, 0x00, 0x00, 0x00
_02110628:
	.byte 0x00, 0x00, 0x00, 0x00
_0211062C:
	.byte 0xE6, 0xFF, 0xFF, 0xFF
_02110630:
	.byte 0x01, 0x01, 0xC0, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08
	.byte 0x00, 0x08, 0x0C, 0x20, 0x00, 0x00, 0x00, 0x00
_02110648:
	.byte 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x66, 0x04
	.byte 0x00, 0x00, 0x00, 0x00, 0x61, 0x08, 0x00, 0x00, 0x00, 0x08, 0x0C, 0x20, 0x00, 0x08, 0x0D, 0x20
_02110660:
	.byte 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEA, 0x05, 0x00, 0x00, 0x00, 0x00, 0xEB, 0x06, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x0D, 0x20
_02110678:
	.byte 0x25, 0x64, 0x2E, 0x25, 0x64, 0x2E, 0x25, 0x64
	.byte 0x2E, 0x25, 0x64, 0x00
_02110684:
	.byte 0x10, 0x00, 0x00, 0x00
_02110688:
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00
_02110690:
	.byte 0xAA, 0xAA, 0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00
_0211069C:
	.byte 0x4E, 0x69, 0x6E, 0x74
	.byte 0x65, 0x6E, 0x64, 0x6F, 0x44, 0x53, 0x00, 0x00, 0x55, 0x04, 0x03, 0x00, 0xFF, 0xFF, 0xFF, 0x00
_021106B0:
	.byte 0x04, 0x00, 0x05, 0x00, 0xFF, 0xFF, 0xFF, 0xFF
_021106B8:
	.byte 0xAC, 0x06, 0x11, 0x02, 0xD8, 0x06, 0x11, 0x02
	.byte 0xD0, 0x06, 0x11, 0x02, 0xE4, 0x06, 0x11, 0x02, 0xF0, 0x06, 0x11, 0x02, 0xA8, 0x06, 0x11, 0x02
	.byte 0x55, 0x08, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01
	.byte 0x01, 0x00, 0x00, 0x00, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x04, 0x00, 0x00, 0x00
	.byte 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x05, 0x00, 0x00, 0x00
_021106FC:
	.byte 0x41, 0x00, 0x00, 0x00
_02110700:
	.byte 0x42, 0x42, 0x00, 0x00
_02110704:
	.byte 0x43, 0x43, 0x43, 0x00
_02110708:
	.byte 0x53, 0x52, 0x56, 0x52, 0x00, 0x00, 0x00, 0x00
_02110710:
	.byte 0x43, 0x4C, 0x4E, 0x54, 0x00, 0x00, 0x00, 0x00
_02110718:
	.byte 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07
	.byte 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x01, 0x06, 0x0B, 0x00, 0x05, 0x0A, 0x0F, 0x04
	.byte 0x09, 0x0E, 0x03, 0x08, 0x0D, 0x02, 0x07, 0x0C, 0x05, 0x08, 0x0B, 0x0E, 0x01, 0x04, 0x07, 0x0A
	.byte 0x0D, 0x00, 0x03, 0x06, 0x09, 0x0C, 0x0F, 0x02, 0x00, 0x07, 0x0E, 0x05, 0x0C, 0x03, 0x0A, 0x01
	.byte 0x08, 0x0F, 0x06, 0x0D, 0x04, 0x0B, 0x02, 0x09
_02110758:
	.byte 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
_02110798:
	.byte 0x78, 0xA4, 0x6A, 0xD7, 0x56, 0xB7, 0xC7, 0xE8
	.byte 0xDB, 0x70, 0x20, 0x24, 0xEE, 0xCE, 0xBD, 0xC1, 0xAF, 0x0F, 0x7C, 0xF5, 0x2A, 0xC6, 0x87, 0x47
	.byte 0x13, 0x46, 0x30, 0xA8, 0x01, 0x95, 0x46, 0xFD, 0xD8, 0x98, 0x80, 0x69, 0xAF, 0xF7, 0x44, 0x8B
	.byte 0xB1, 0x5B, 0xFF, 0xFF, 0xBE, 0xD7, 0x5C, 0x89, 0x22, 0x11, 0x90, 0x6B, 0x93, 0x71, 0x98, 0xFD
	.byte 0x8E, 0x43, 0x79, 0xA6, 0x21, 0x08, 0xB4, 0x49, 0x62, 0x25, 0x1E, 0xF6, 0x40, 0xB3, 0x40, 0xC0
	.byte 0x51, 0x5A, 0x5E, 0x26, 0xAA, 0xC7, 0xB6, 0xE9, 0x5D, 0x10, 0x2F, 0xD6, 0x53, 0x14, 0x44, 0x02
	.byte 0x81, 0xE6, 0xA1, 0xD8, 0xC8, 0xFB, 0xD3, 0xE7, 0xE6, 0xCD, 0xE1, 0x21, 0xD6, 0x07, 0x37, 0xC3
	.byte 0x87, 0x0D, 0xD5, 0xF4, 0xED, 0x14, 0x5A, 0x45, 0x05, 0xE9, 0xE3, 0xA9, 0xF8, 0xA3, 0xEF, 0xFC
	.byte 0xD9, 0x02, 0x6F, 0x67, 0x8A, 0x4C, 0x2A, 0x8D, 0x42, 0x39, 0xFA, 0xFF, 0x81, 0xF6, 0x71, 0x87
	.byte 0x22, 0x61, 0x9D, 0x6D, 0x0C, 0x38, 0xE5, 0xFD, 0x44, 0xEA, 0xBE, 0xA4, 0xA9, 0xCF, 0xDE, 0x4B
	.byte 0x60, 0x4B, 0xBB, 0xF6, 0x70, 0xBC, 0xBF, 0xBE, 0xC6, 0x7E, 0x9B, 0x28, 0xFA, 0x27, 0xA1, 0xEA
	.byte 0x85, 0x30, 0xEF, 0xD4, 0x05, 0x1D, 0x88, 0x04, 0x39, 0xD0, 0xD4, 0xD9, 0xE5, 0x99, 0xDB, 0xE6
	.byte 0xF8, 0x7C, 0xA2, 0x1F, 0x65, 0x56, 0xAC, 0xC4, 0x44, 0x22, 0x29, 0xF4, 0x97, 0xFF, 0x2A, 0x43
	.byte 0xA7, 0x23, 0x94, 0xAB, 0x39, 0xA0, 0x93, 0xFC, 0xC3, 0x59, 0x5B, 0x65, 0x92, 0xCC, 0x0C, 0x8F
	.byte 0x7D, 0xF4, 0xEF, 0xFF, 0xD1, 0x5D, 0x84, 0x85, 0x4F, 0x7E, 0xA8, 0x6F, 0xE0, 0xE6, 0x2C, 0xFE
	.byte 0x14, 0x43, 0x01, 0xA3, 0xA1, 0x11, 0x08, 0x4E, 0x82, 0x7E, 0x53, 0xF7, 0x35, 0xF2, 0x3A, 0xBD
	.byte 0xBB, 0xD2, 0xD7, 0x2A, 0x91, 0xD3, 0x86, 0xEB
_02110898:
	.byte 0x80
_02110899:
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
_021108D8:
	.byte 0x01, 0x00, 0x00, 0x00
_021108DC:
	.byte 0x3F, 0x00, 0x00, 0x00
	.byte 0x7F, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x01, 0x00, 0x00, 0xFF, 0x03, 0x00, 0x00
	.byte 0xFF, 0x07, 0x00, 0x00, 0xFF, 0x0F, 0x00, 0x00, 0xFF, 0x1F, 0x00, 0x00
_021108FC:
	.byte 0xF7, 0xB5, 0xEF, 0x00
	.byte 0x00, 0x00, 0x00, 0x00
_02110904:
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00
	.byte 0xFC, 0x03, 0x00, 0x00
_02110914:
	.byte 0xFB, 0xE9, 0x3D, 0x40, 0xBC, 0xC7, 0xD1, 0x2C, 0x2A, 0xD0, 0x7C, 0x03
	.byte 0xF0, 0x08, 0x93, 0xF5
_02110924:
	.byte 0xBC, 0x59, 0x0B, 0x02
_02110928:
	.byte 0xC4, 0x59, 0x0B, 0x02
_0211092C:
	.byte 0xCC, 0x59, 0x0B, 0x02
_02110930:
	.byte 0xD4, 0x59, 0x0B, 0x02
_02110934:
	.byte 0x50, 0x09, 0x11, 0x02, 0x98, 0x09, 0x11, 0x02
_0211093C:
	.byte 0xB0, 0x09, 0x11, 0x02
	.byte 0x98, 0x09, 0x11, 0x02, 0x50, 0x09, 0x11, 0x02, 0x80, 0x09, 0x11, 0x02, 0x68, 0x09, 0x11, 0x02
_02110950:
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00
_02110968:
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x02, 0x00
_02110980:
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x02, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x04, 0x00
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x04, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x06, 0x00
_021109C8:
	.byte 0xC4, 0x78, 0x0B, 0x02, 0xB0, 0x78, 0x0B, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
_021109DC:
	.byte 0xFE, 0xFF, 0x00, 0x00
	.byte 0xFF, 0xFF, 0xFF, 0xFF
_021109E4:
	.byte 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
_021109FC:
	.byte 0x00, 0xF0, 0xFF, 0xFF
_02110A00:
	.byte 0x05, 0x00, 0x00, 0x00
_02110A04:
	.byte 0x24, 0x5E, 0x0C, 0x02
_02110A08:
	.byte 0x68, 0x3D, 0x0C, 0x02
_02110A0C:
	.byte 0x04, 0x5B, 0x0C, 0x02
_02110A10:
	.byte 0x64, 0x5D, 0x0C, 0x02
_02110A14:
	.byte 0x34, 0x56, 0x0C, 0x02
_02110A18:
	.byte 0xF4, 0xF9, 0x0B, 0x02
_02110A1C:
	.byte 0x08, 0xF6, 0x0B, 0x02
_02110A20:
	.byte 0x2C, 0xF5, 0x0B, 0x02
_02110A24:
	.byte 0x4D, 0x00, 0x41, 0x4D
_02110A28:
	.byte 0x60, 0x55, 0x0C, 0x02, 0x4D, 0x00, 0x50, 0x54
	.byte 0x48, 0x5B, 0x0C, 0x02, 0x4D, 0x00, 0x41, 0x54, 0x30, 0x5A, 0x0C, 0x02, 0x56, 0x00, 0x41, 0x56
	.byte 0xD8, 0x5D, 0x0C, 0x02, 0x4A, 0x00, 0x41, 0x43, 0xEC, 0x3C, 0x0C, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00
_02110A74:
	.byte 0x5C, 0x5E, 0x0C, 0x02, 0x18, 0x5F, 0x0C, 0x02, 0x10, 0x67, 0x0C, 0x02
_02110A80:
	.byte 0xD8, 0x5E, 0x0C, 0x02, 0xDC, 0x5F, 0x0C, 0x02, 0x3C, 0x68, 0x0C, 0x02
_02110A8C:
	.byte 0xC8, 0x65, 0x0C, 0x02
	.byte 0x58, 0x6A, 0x0C, 0x02, 0x20, 0x71, 0x0C, 0x02, 0x48, 0x77, 0x0C, 0x02
_02110A9C:
	.byte 0x2A, 0x00, 0x00, 0x00
_02110AA0:
	.byte 0x00, 0x00, 0x00, 0x00, 0x2A, 0x00, 0x00, 0x00
_02110AA8:
	.byte 0x00, 0x00, 0x00, 0x00
_02110AAC:
	.byte 0x3C, 0x00, 0x0C, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
_02110ABC:
	.byte 0x74, 0x05, 0x0C, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
_02110ACC:
	.byte 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00
_02110B0C:
	.byte 0x12, 0x10, 0x17, 0x1B
_02110B10:
	.byte 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00
_02110B18:
	.byte 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00
_02110B3C:
	.byte 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
_02110B48:
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00
_02110B54:
	.byte 0x12, 0x10, 0x17, 0x1B
_02110B58:
	.byte 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00
_02110B60:
	.byte 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x10, 0x00, 0x00
_02110B84:
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
_02110B90:
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
_02110B9C:
	.byte 0xA4, 0xFD, 0x0B, 0x02
	.byte 0xCC, 0xFD, 0x0B, 0x02, 0xF4, 0xFD, 0x0B, 0x02, 0x70, 0xFF, 0x0B, 0x02, 0xC4, 0x04, 0x0C, 0x02
	.byte 0x48, 0x06, 0x0C, 0x02, 0xE8, 0x06, 0x0C, 0x02, 0x48, 0x0B, 0x0C, 0x02, 0x50, 0x0E, 0x0C, 0x02
	.byte 0xB4, 0x11, 0x0C, 0x02, 0x10, 0x19, 0x0C, 0x02, 0xEC, 0x19, 0x0C, 0x02, 0x5C, 0x1A, 0x0C, 0x02
	.byte 0xA0, 0x1D, 0x0C, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
_02110C1C:
	.byte 0x2C, 0x61, 0x0C, 0x02
	.byte 0x34, 0x62, 0x0C, 0x02, 0x04, 0x63, 0x0C, 0x02, 0x80, 0x63, 0x0C, 0x02, 0xC8, 0x63, 0x0C, 0x02
	.byte 0xA8, 0x64, 0x0C, 0x02, 0x60, 0x65, 0x0C, 0x02, 0xA4, 0x65, 0x0C, 0x02
_02110C3C:
	.byte 0x24, 0x6C, 0x0C, 0x02
	.byte 0x2C, 0x6D, 0x0C, 0x02, 0x14, 0x6E, 0x0C, 0x02, 0x94, 0x6E, 0x0C, 0x02, 0xDC, 0x6E, 0x0C, 0x02
	.byte 0xD4, 0x6F, 0x0C, 0x02, 0xAC, 0x70, 0x0C, 0x02, 0xFC, 0x70, 0x0C, 0x02
_02110C5C:
	.byte 0x68, 0x72, 0x0C, 0x02
	.byte 0xBC, 0x73, 0x0C, 0x02, 0x9C, 0x74, 0x0C, 0x02, 0x20, 0x75, 0x0C, 0x02, 0x74, 0x75, 0x0C, 0x02
	.byte 0x40, 0x76, 0x0C, 0x02, 0xE4, 0x76, 0x0C, 0x02, 0x24, 0x77, 0x0C, 0x02
_02110C7C:
	.byte 0x01, 0x00, 0x00, 0x00
_02110C80:
	.byte 0x03, 0x00, 0x00, 0x00
_02110C84:
	.byte 0x08, 0x00, 0x09, 0x00, 0x0A, 0x00, 0x0B, 0x00, 0x03, 0x00, 0x04, 0x00
	.byte 0x05, 0x00, 0x06, 0x00
_02110C94:
	.byte 0xFF, 0xFF, 0xFF, 0xFF
_02110C98:
	.byte 0x3A, 0x2F, 0x00, 0x00
_02110C9C:
	.byte 0x72, 0x6F, 0x6D, 0x00
_02110CA0:
	.byte 0x48, 0xE1, 0x10, 0x02, 0x40, 0x00, 0x00, 0x00
_02110CA8:
	.byte 0x80, 0x00, 0x00, 0x00
_02110CAC:
	.byte 0x01, 0x00, 0x00, 0x00
	.byte 0x06, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00
	.byte 0x0A, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00
	.byte 0x0E, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00
	.byte 0x02, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00
	.byte 0x08, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x04, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00
	.byte 0x0C, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x07, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00
	.byte 0x03, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00
	.byte 0x0F, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00
	.byte 0x0B, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00
_02110D6C:
	.byte 0x78, 0xA4, 0x6A, 0xD7
	.byte 0x56, 0xB7, 0xC7, 0xE8, 0xDB, 0x70, 0x20, 0x24, 0xEE, 0xCE, 0xBD, 0xC1, 0xAF, 0x0F, 0x7C, 0xF5
	.byte 0x2A, 0xC6, 0x87, 0x47, 0x13, 0x46, 0x30, 0xA8, 0x01, 0x95, 0x46, 0xFD, 0xD8, 0x98, 0x80, 0x69
	.byte 0xAF, 0xF7, 0x44, 0x8B, 0xB1, 0x5B, 0xFF, 0xFF, 0xBE, 0xD7, 0x5C, 0x89, 0x22, 0x11, 0x90, 0x6B
	.byte 0x93, 0x71, 0x98, 0xFD, 0x8E, 0x43, 0x79, 0xA6, 0x21, 0x08, 0xB4, 0x49, 0x62, 0x25, 0x1E, 0xF6
	.byte 0x40, 0xB3, 0x40, 0xC0, 0x51, 0x5A, 0x5E, 0x26, 0xAA, 0xC7, 0xB6, 0xE9, 0x5D, 0x10, 0x2F, 0xD6
	.byte 0x53, 0x14, 0x44, 0x02, 0x81, 0xE6, 0xA1, 0xD8, 0xC8, 0xFB, 0xD3, 0xE7, 0xE6, 0xCD, 0xE1, 0x21
	.byte 0xD6, 0x07, 0x37, 0xC3, 0x87, 0x0D, 0xD5, 0xF4, 0xED, 0x14, 0x5A, 0x45, 0x05, 0xE9, 0xE3, 0xA9
	.byte 0xF8, 0xA3, 0xEF, 0xFC, 0xD9, 0x02, 0x6F, 0x67, 0x8A, 0x4C, 0x2A, 0x8D, 0x42, 0x39, 0xFA, 0xFF
	.byte 0x81, 0xF6, 0x71, 0x87, 0x22, 0x61, 0x9D, 0x6D, 0x0C, 0x38, 0xE5, 0xFD, 0x44, 0xEA, 0xBE, 0xA4
	.byte 0xA9, 0xCF, 0xDE, 0x4B, 0x60, 0x4B, 0xBB, 0xF6, 0x70, 0xBC, 0xBF, 0xBE, 0xC6, 0x7E, 0x9B, 0x28
	.byte 0xFA, 0x27, 0xA1, 0xEA, 0x85, 0x30, 0xEF, 0xD4, 0x05, 0x1D, 0x88, 0x04, 0x39, 0xD0, 0xD4, 0xD9
	.byte 0xE5, 0x99, 0xDB, 0xE6, 0xF8, 0x7C, 0xA2, 0x1F, 0x65, 0x56, 0xAC, 0xC4, 0x44, 0x22, 0x29, 0xF4
	.byte 0x97, 0xFF, 0x2A, 0x43, 0xA7, 0x23, 0x94, 0xAB, 0x39, 0xA0, 0x93, 0xFC, 0xC3, 0x59, 0x5B, 0x65
	.byte 0x92, 0xCC, 0x0C, 0x8F, 0x7D, 0xF4, 0xEF, 0xFF, 0xD1, 0x5D, 0x84, 0x85, 0x4F, 0x7E, 0xA8, 0x6F
	.byte 0xE0, 0xE6, 0x2C, 0xFE, 0x14, 0x43, 0x01, 0xA3, 0xA1, 0x11, 0x08, 0x4E, 0x82, 0x7E, 0x53, 0xF7
	.byte 0x35, 0xF2, 0x3A, 0xBD, 0xBB, 0xD2, 0xD7, 0x2A, 0x91, 0xD3, 0x86, 0xEB, 0x61, 0x00, 0x00, 0x00
_02110E70:
	.byte 0x74, 0x99, 0x0D, 0x02, 0xD8, 0x0E, 0x11, 0x02, 0xF0, 0x0E, 0x11, 0x02, 0xA8, 0x0E, 0x11, 0x02
	.byte 0xC0, 0x0E, 0x11, 0x02, 0xA4, 0x0E, 0x11, 0x02, 0x08, 0x0F, 0x11, 0x02, 0x6C, 0x0E, 0x11, 0x02
	.byte 0x44, 0x0F, 0x11, 0x02, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x40, 0x42, 0x0F, 0x00
	.byte 0x0A, 0x00, 0x00, 0x00, 0x61, 0x62, 0x63, 0x00, 0x34, 0xAA, 0x97, 0x3C, 0xD4, 0xC4, 0xDA, 0xA4
	.byte 0xF6, 0x1E, 0xEB, 0x2B, 0xDB, 0xAD, 0x27, 0x31, 0x65, 0x34, 0x01, 0x6F, 0x00, 0x00, 0x00, 0x00
	.byte 0xDE, 0xA3, 0x56, 0xA2, 0xCD, 0xDD, 0x90, 0xC7, 0xA7, 0xEC, 0xED, 0xC5, 0xEB, 0xB5, 0x63, 0x93
	.byte 0x4F, 0x46, 0x04, 0x52, 0x00, 0x00, 0x00, 0x00, 0xA9, 0x99, 0x3E, 0x36, 0x47, 0x06, 0x81, 0x6A
	.byte 0xBA, 0x3E, 0x25, 0x71, 0x78, 0x50, 0xC2, 0x6C, 0x9C, 0xD0, 0xD8, 0x9D, 0x00, 0x00, 0x00, 0x00
	.byte 0x84, 0x98, 0x3E, 0x44, 0x1C, 0x3B, 0xD2, 0x6E, 0xBA, 0xAE, 0x4A, 0xA1, 0xF9, 0x51, 0x29, 0xE5
	.byte 0xE5, 0x46, 0x70, 0xF1, 0x00, 0x00, 0x00, 0x00, 0x61, 0x62, 0x63, 0x64, 0x62, 0x63, 0x64, 0x65
	.byte 0x63, 0x64, 0x65, 0x66, 0x64, 0x65, 0x66, 0x67, 0x65, 0x66, 0x67, 0x68, 0x66, 0x67, 0x68, 0x69
	.byte 0x67, 0x68, 0x69, 0x6A, 0x68, 0x69, 0x6A, 0x6B, 0x69, 0x6A, 0x6B, 0x6C, 0x6A, 0x6B, 0x6C, 0x6D
	.byte 0x6B, 0x6C, 0x6D, 0x6E, 0x6C, 0x6D, 0x6E, 0x6F, 0x6D, 0x6E, 0x6F, 0x70, 0x6E, 0x6F, 0x70, 0x71
	.byte 0x00, 0x00, 0x00, 0x00, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x30, 0x31, 0x32, 0x33
	.byte 0x34, 0x35, 0x36, 0x37, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x30, 0x31, 0x32, 0x33
	.byte 0x34, 0x35, 0x36, 0x37, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x30, 0x31, 0x32, 0x33
	.byte 0x34, 0x35, 0x36, 0x37, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x30, 0x31, 0x32, 0x33
	.byte 0x34, 0x35, 0x36, 0x37
_02110F84:
	.byte 0x00, 0x00, 0x00, 0x00
_02110F88:
	.byte 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00
	.byte 0x3B, 0x00, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x97, 0x00, 0x00, 0x00
	.byte 0xB5, 0x00, 0x00, 0x00, 0xD4, 0x00, 0x00, 0x00, 0xF3, 0x00, 0x00, 0x00, 0x11, 0x01, 0x00, 0x00
	.byte 0x30, 0x01, 0x00, 0x00, 0x4E, 0x01, 0x00, 0x00
_02110FB8:
	.byte 0x00, 0xFE, 0x7F, 0x02
_02110FBC:
	.byte 0xFD, 0xFF, 0x00, 0x00
_02110FC0:
	.byte 0x00, 0x00, 0x01, 0x00
_02110FC4:
	.byte 0x00, 0x00, 0x00, 0x00
_02110FC8:
	.byte 0x00, 0x00, 0x00, 0x00
_02110FCC:
	.byte 0x00, 0x00, 0x00, 0x00
	.byte 0x24, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x57, 0x1E, 0x02, 0x00, 0x01, 0x00, 0x00
	.byte 0xC0, 0x57, 0x1E, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x33, 0x0F, 0x02, 0x70, 0x33, 0x0F, 0x02
	.byte 0xA4, 0x33, 0x0F, 0x02, 0x00, 0x00, 0x00, 0x00
_02111018:
	.byte 0x01, 0x00, 0x00, 0x00, 0x28, 0x01, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0xC0, 0x56, 0x1E, 0x02, 0x00, 0x01, 0x00, 0x00, 0xC0, 0x56, 0x1E, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x20, 0x33, 0x0F, 0x02, 0x70, 0x33, 0x0F, 0x02, 0xA4, 0x33, 0x0F, 0x02
	.byte 0x00, 0x00, 0x00, 0x00
_02111064:
	.byte 0x02, 0x00, 0x00, 0x00, 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0xC0, 0x55, 0x1E, 0x02, 0x00, 0x01, 0x00, 0x00, 0xC0, 0x55, 0x1E, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x20, 0x33, 0x0F, 0x02, 0x70, 0x33, 0x0F, 0x02, 0xA4, 0x33, 0x0F, 0x02, 0x00, 0x00, 0x00, 0x00
_021110B0:
	.byte 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x28, 0x25, 0x73, 0x29, 0x20, 0x66
	.byte 0x61, 0x69, 0x6C, 0x65, 0x64, 0x20, 0x69, 0x6E, 0x20, 0x22, 0x25, 0x73, 0x22, 0x2C, 0x20, 0x66
	.byte 0x75, 0x6E, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x22, 0x25, 0x73, 0x22, 0x2C, 0x20, 0x6C, 0x69
	.byte 0x6E, 0x65, 0x20, 0x25, 0x64, 0x0A, 0x00, 0x00
_021110E8:
	.byte 0x00, 0x00, 0x80, 0x7F
_021110EC:
	.byte 0xFF, 0xFF, 0xFF, 0x7F
_021110F0:
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x25, 0x54, 0x00, 0x00
	.byte 0x41, 0x4D, 0x7C, 0x50, 0x4D, 0x00, 0x00, 0x00, 0x70, 0x59, 0x0E, 0x02, 0xA8, 0x59, 0x0E, 0x02
	.byte 0x20, 0x00, 0x00, 0x00, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x11, 0x11, 0x02
	.byte 0x00, 0x11, 0x11, 0x02, 0x24, 0x12, 0x11, 0x02, 0x18, 0x12, 0x11, 0x02, 0x00, 0x12, 0x11, 0x02
	.byte 0xFC, 0x10, 0x11, 0x02, 0x34, 0x12, 0x11, 0x02, 0x8C, 0x12, 0x11, 0x02, 0xF8, 0x10, 0x11, 0x02
	.byte 0x01, 0x00, 0x02, 0x00, 0x03, 0x00, 0x04, 0x00, 0x05, 0x00, 0x06, 0x00, 0x07, 0x00, 0x08, 0x00
	.byte 0x09, 0x00, 0x0A, 0x00, 0x0B, 0x00, 0x0C, 0x00, 0x0D, 0x00, 0x0E, 0x00, 0x0F, 0x00, 0x10, 0x00
	.byte 0x21, 0x00, 0x22, 0x00, 0x23, 0x00, 0x24, 0x00, 0x25, 0x00, 0x26, 0x00, 0x27, 0x00, 0x28, 0x00
	.byte 0x29, 0x00, 0x2A, 0x00, 0x11, 0x00, 0x12, 0x00, 0x13, 0x00, 0x14, 0x00, 0x15, 0x00, 0x16, 0x00
	.byte 0x17, 0x00, 0x2B, 0x00, 0x2D, 0x00, 0x2F, 0x00, 0x31, 0x00, 0x33, 0x00, 0x35, 0x00, 0x37, 0x00
	.byte 0x39, 0x00, 0x3B, 0x00, 0x3D, 0x00, 0x3F, 0x00, 0x41, 0x00, 0x43, 0x00, 0x45, 0x00, 0x47, 0x00
	.byte 0x49, 0x00, 0x4B, 0x00, 0x4D, 0x00, 0x4F, 0x00, 0x51, 0x00, 0x53, 0x00, 0x55, 0x00, 0x57, 0x00
	.byte 0x59, 0x00, 0x5B, 0x00, 0x5D, 0x00, 0x18, 0x00, 0x19, 0x00, 0x1A, 0x00, 0x1B, 0x00, 0x1C, 0x00
	.byte 0x00, 0x00, 0x2C, 0x00, 0x2E, 0x00, 0x30, 0x00, 0x32, 0x00, 0x34, 0x00, 0x36, 0x00, 0x38, 0x00
	.byte 0x3A, 0x00, 0x3C, 0x00, 0x3E, 0x00, 0x40, 0x00, 0x42, 0x00, 0x44, 0x00, 0x46, 0x00, 0x48, 0x00
	.byte 0x4A, 0x00, 0x4C, 0x00, 0x4E, 0x00, 0x50, 0x00, 0x52, 0x00, 0x54, 0x00, 0x56, 0x00, 0x58, 0x00
	.byte 0x5A, 0x00, 0x5C, 0x00, 0x5E, 0x00, 0x1D, 0x00, 0x1E, 0x00, 0x1F, 0x00, 0x20, 0x00, 0x00, 0x00
	.byte 0x25, 0x6D, 0x2F, 0x25, 0x64, 0x2F, 0x25, 0x79, 0x00, 0x00, 0x00, 0x00
_0211120C:
	.byte 0x20, 0x11, 0x11, 0x02
	.byte 0x10, 0x11, 0x11, 0x02, 0x08, 0x11, 0x11, 0x02, 0x25, 0x49, 0x3A, 0x25, 0x4D, 0x3A, 0x25, 0x53
	.byte 0x20, 0x25, 0x70, 0x00, 0x25, 0x61, 0x20, 0x25, 0x62, 0x20, 0x25, 0x65, 0x20, 0x25, 0x54, 0x20
	.byte 0x25, 0x59, 0x00, 0x00, 0x53, 0x75, 0x6E, 0x7C, 0x53, 0x75, 0x6E, 0x64, 0x61, 0x79, 0x7C, 0x4D
	.byte 0x6F, 0x6E, 0x7C, 0x4D, 0x6F, 0x6E, 0x64, 0x61, 0x79, 0x7C, 0x54, 0x75, 0x65, 0x7C, 0x54, 0x75
	.byte 0x65, 0x73, 0x64, 0x61, 0x79, 0x7C, 0x57, 0x65, 0x64, 0x7C, 0x57, 0x65, 0x64, 0x6E, 0x65, 0x73
	.byte 0x64, 0x61, 0x79, 0x7C, 0x54, 0x68, 0x75, 0x7C, 0x54, 0x68, 0x75, 0x72, 0x73, 0x64, 0x61, 0x79
	.byte 0x7C, 0x46, 0x72, 0x69, 0x7C, 0x46, 0x72, 0x69, 0x64, 0x61, 0x79, 0x7C, 0x53, 0x61, 0x74, 0x7C
	.byte 0x53, 0x61, 0x74, 0x75, 0x72, 0x64, 0x61, 0x79, 0x00, 0x00, 0x00, 0x00, 0x4A, 0x61, 0x6E, 0x7C
	.byte 0x4A, 0x61, 0x6E, 0x75, 0x61, 0x72, 0x79, 0x7C, 0x46, 0x65, 0x62, 0x7C, 0x46, 0x65, 0x62, 0x72
	.byte 0x75, 0x61, 0x72, 0x79, 0x7C, 0x4D, 0x61, 0x72, 0x7C, 0x4D, 0x61, 0x72, 0x63, 0x68, 0x7C, 0x41
	.byte 0x70, 0x72, 0x7C, 0x41, 0x70, 0x72, 0x69, 0x6C, 0x7C, 0x4D, 0x61, 0x79, 0x7C, 0x4D, 0x61, 0x79
	.byte 0x7C, 0x4A, 0x75, 0x6E, 0x7C, 0x4A, 0x75, 0x6E, 0x65, 0x7C, 0x4A, 0x75, 0x6C, 0x7C, 0x4A, 0x75
	.byte 0x6C, 0x79, 0x7C, 0x41, 0x75, 0x67, 0x7C, 0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x7C, 0x53, 0x65
	.byte 0x70, 0x7C, 0x53, 0x65, 0x70, 0x74, 0x65, 0x6D, 0x62, 0x65, 0x72, 0x7C, 0x4F, 0x63, 0x74, 0x7C
	.byte 0x4F, 0x63, 0x74, 0x6F, 0x62, 0x65, 0x72, 0x7C, 0x4E, 0x6F, 0x76, 0x7C, 0x4E, 0x6F, 0x76, 0x65
	.byte 0x6D, 0x62, 0x65, 0x72, 0x7C, 0x44, 0x65, 0x63, 0x7C, 0x44, 0x65, 0x63, 0x65, 0x6D, 0x62, 0x65
	.byte 0x72, 0x00, 0x00, 0x00
_02111314:
	.byte 0x30, 0x78, 0x30, 0x70, 0x30, 0x00, 0x00, 0x00
_0211131C:
	.byte 0x2D, 0x49, 0x4E, 0x46
	.byte 0x00, 0x00, 0x00, 0x00
_02111324:
	.byte 0x2D, 0x69, 0x6E, 0x66, 0x00, 0x00, 0x00, 0x00
_0211132C:
	.byte 0x49, 0x4E, 0x46, 0x00
_02111330:
	.byte 0x69, 0x6E, 0x66, 0x00
_02111334:
	.byte 0x2D, 0x4E, 0x41, 0x4E, 0x00, 0x00, 0x00, 0x00
_0211133C:
	.byte 0x2D, 0x6E, 0x61, 0x6E
	.byte 0x00, 0x00, 0x00, 0x00
_02111344:
	.byte 0x4E, 0x41, 0x4E, 0x00
_02111348:
	.byte 0x6E, 0x61, 0x6E, 0x00
_0211134C:
	.byte 0x00, 0x00, 0x00, 0x00
_02111350:
	.byte 0x00, 0x00, 0x00, 0x00
_02111354:
	.byte 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
_0211135C:
	.byte 0x58, 0x13, 0x11, 0x02
	.byte 0x58, 0x13, 0x11, 0x02
_02111364:
	.byte 0x30, 0x00, 0x78, 0x00, 0x30, 0x00, 0x70, 0x00, 0x30, 0x00, 0x00, 0x00
_02111370:
	.byte 0x2D, 0x00, 0x49, 0x00, 0x4E, 0x00, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00
_0211137C:
	.byte 0x2D, 0x00, 0x69, 0x00
	.byte 0x6E, 0x00, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00
_02111388:
	.byte 0x49, 0x00, 0x4E, 0x00, 0x46, 0x00, 0x00, 0x00
_02111390:
	.byte 0x69, 0x00, 0x6E, 0x00, 0x66, 0x00, 0x00, 0x00
_02111398:
	.byte 0x2D, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4E, 0x00
	.byte 0x00, 0x00, 0x00, 0x00
_021113A4:
	.byte 0x2D, 0x00, 0x6E, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x00
_021113B0:
	.byte 0x4E, 0x00, 0x41, 0x00, 0x4E, 0x00, 0x00, 0x00
_021113B8:
	.byte 0x6E, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x00, 0x00
_021113C0:
	.byte 0x00, 0x00, 0x00, 0x00
_021113C4:
	.byte 0x00, 0x00, 0x00, 0x00
_021113C8:
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x8F, 0x40
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0xC3, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6A, 0xF8, 0x40
	.byte 0x00, 0x00, 0x00, 0x00, 0x80, 0x84, 0x2E, 0x41, 0x00, 0x00, 0x00, 0x00, 0xD0, 0x12, 0x63, 0x41
	.byte 0x00, 0x00, 0x00, 0x00, 0x84, 0xD7, 0x97, 0x41
_02111408:
	.byte 0x35, 0x34, 0x32, 0x31, 0x30, 0x31, 0x30, 0x38
	.byte 0x36, 0x32, 0x34, 0x32, 0x37, 0x35, 0x32, 0x32, 0x31, 0x37, 0x30, 0x30, 0x33, 0x37, 0x32, 0x36
	.byte 0x34, 0x30, 0x30, 0x34, 0x33, 0x34, 0x39, 0x37, 0x30, 0x38, 0x35, 0x35, 0x37, 0x31, 0x32, 0x38
	.byte 0x39, 0x30, 0x36, 0x32, 0x35, 0x00, 0x00, 0x00
_02111438:
	.byte 0x31, 0x31, 0x31, 0x30, 0x32, 0x32, 0x33, 0x30
	.byte 0x32, 0x34, 0x36, 0x32, 0x35, 0x31, 0x35, 0x36, 0x35, 0x34, 0x30, 0x34, 0x32, 0x33, 0x36, 0x33
	.byte 0x31, 0x36, 0x36, 0x38, 0x30, 0x39, 0x30, 0x38, 0x32, 0x30, 0x33, 0x31, 0x32, 0x35, 0x00, 0x00
_02111460:
	.byte 0x32, 0x33, 0x32, 0x38, 0x33, 0x30, 0x36, 0x34, 0x33, 0x36, 0x35, 0x33, 0x38, 0x36, 0x39, 0x36
	.byte 0x32, 0x38, 0x39, 0x30, 0x36, 0x32, 0x35, 0x00
_02111478:
	.byte 0x31, 0x35, 0x32, 0x35, 0x38, 0x37, 0x38, 0x39
	.byte 0x30, 0x36, 0x32, 0x35, 0x00, 0x00, 0x00, 0x00
_02111488:
	.byte 0x33, 0x39, 0x30, 0x36, 0x32, 0x35, 0x00, 0x00
_02111490:
	.byte 0x37, 0x38, 0x31, 0x32, 0x35, 0x00, 0x00, 0x00
_02111498:
	.byte 0x31, 0x35, 0x36, 0x32, 0x35, 0x00, 0x00, 0x00
_021114A0:
	.byte 0x33, 0x31, 0x32, 0x35, 0x00, 0x00, 0x00, 0x00
_021114A8:
	.byte 0x36, 0x32, 0x35, 0x00
_021114AC:
	.byte 0x31, 0x32, 0x35, 0x00
_021114B0:
	.byte 0x32, 0x35, 0x00, 0x00
_021114B4:
	.byte 0x35, 0x00, 0x00, 0x00
_021114B8:
	.byte 0x31, 0x00, 0x00, 0x00
_021114BC:
	.byte 0x32, 0x00, 0x00, 0x00
_021114C0:
	.byte 0x34, 0x00, 0x00, 0x00
_021114C4:
	.byte 0x38, 0x00, 0x00, 0x00
_021114C8:
	.byte 0x31, 0x36, 0x00, 0x00
_021114CC:
	.byte 0x33, 0x32, 0x00, 0x00
_021114D0:
	.byte 0x36, 0x34, 0x00, 0x00
_021114D4:
	.byte 0x31, 0x32, 0x38, 0x00
_021114D8:
	.byte 0x32, 0x35, 0x36, 0x00
_021114DC:
	.byte 0x31, 0x37, 0x39, 0x37
	.byte 0x36, 0x39, 0x33, 0x31, 0x33, 0x34, 0x38, 0x36, 0x32, 0x33, 0x31, 0x35, 0x38, 0x30, 0x37, 0x39
	.byte 0x33, 0x37, 0x32, 0x38, 0x37, 0x31, 0x34, 0x30, 0x35, 0x33, 0x30, 0x33, 0x34, 0x31, 0x35, 0x31
	.byte 0x00, 0x00, 0x00, 0x00, 0xF4, 0x17, 0x11, 0x02, 0x28, 0x15, 0x11, 0x02, 0xF4, 0x17, 0x11, 0x02
	.byte 0x8C, 0x15, 0x11, 0x02
_02111514:
	.byte 0xF4, 0x17, 0x11, 0x02, 0x68, 0x15, 0x11, 0x02, 0xE4, 0x17, 0x11, 0x02
	.byte 0xB8, 0x15, 0x11, 0x02, 0x0C, 0x15, 0x11, 0x02, 0x53, 0x74, 0x39, 0x65, 0x78, 0x63, 0x65, 0x70
	.byte 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x15, 0x11, 0x02
_02111540:
	.byte 0x74, 0x04, 0x0F, 0x02, 0x60, 0x04, 0x0F, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x1C, 0x15, 0x11, 0x02
_02111558:
	.byte 0x24, 0x05, 0x0F, 0x02, 0x10, 0x05, 0x0F, 0x02
	.byte 0x78, 0x04, 0x0F, 0x02, 0xA0, 0x04, 0x0F, 0x02, 0x4E, 0x53, 0x74, 0x36, 0x64, 0x65, 0x74, 0x61
	.byte 0x69, 0x6C, 0x31, 0x34, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6C, 0x74, 0x5F, 0x64, 0x65, 0x6C, 0x65
	.byte 0x74, 0x65, 0x49, 0x41, 0x30, 0x5F, 0x63, 0x45, 0x45, 0x00, 0x00, 0x00, 0x4E, 0x53, 0x74, 0x33
	.byte 0x74, 0x72, 0x31, 0x36, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6C, 0x32, 0x35, 0x73, 0x68, 0x61, 0x72
	.byte 0x65, 0x64, 0x5F, 0x70, 0x74, 0x72, 0x5F, 0x64, 0x65, 0x6C, 0x65, 0x74, 0x65, 0x72, 0x5F, 0x63
	.byte 0x6F, 0x6D, 0x6D, 0x6F, 0x6E, 0x45, 0x00, 0x00, 0x4E, 0x53, 0x74, 0x33, 0x74, 0x72, 0x31, 0x36
	.byte 0x64, 0x65, 0x74, 0x61, 0x69, 0x6C, 0x31, 0x38, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5F, 0x70
	.byte 0x74, 0x72, 0x5F, 0x64, 0x65, 0x6C, 0x65, 0x74, 0x65, 0x72, 0x49, 0x63, 0x4E, 0x53, 0x74, 0x36
	.byte 0x64, 0x65, 0x74, 0x61, 0x69, 0x6C, 0x31, 0x34, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6C, 0x74, 0x5F
	.byte 0x64, 0x65, 0x6C, 0x65, 0x74, 0x65, 0x49, 0x41, 0x30, 0x5F, 0x63, 0x45, 0x45, 0x45, 0x45, 0x00
	.byte 0xE4, 0x17, 0x11, 0x02, 0x18, 0x16, 0x11, 0x02, 0x04, 0x15, 0x11, 0x02, 0xE4, 0x17, 0x11, 0x02
	.byte 0x28, 0x16, 0x11, 0x02, 0x00, 0x16, 0x11, 0x02, 0x53, 0x74, 0x31, 0x31, 0x6C, 0x6F, 0x67, 0x69
	.byte 0x63, 0x5F, 0x65, 0x72, 0x72, 0x6F, 0x72, 0x00, 0x53, 0x74, 0x31, 0x32, 0x6C, 0x65, 0x6E, 0x67
	.byte 0x74, 0x68, 0x5F, 0x65, 0x72, 0x72, 0x6F, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x0C, 0x16, 0x11, 0x02
_02111644:
	.byte 0x68, 0x05, 0x0F, 0x02, 0x80, 0x05, 0x0F, 0x02, 0x28, 0x05, 0x0F, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x11, 0x02
_02111658:
	.byte 0x30, 0x05, 0x0F, 0x02, 0x48, 0x05, 0x0F, 0x02
	.byte 0x28, 0x05, 0x0F, 0x02
_02111664:
	.byte 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x20, 0x6C, 0x65, 0x6E, 0x67, 0x74
	.byte 0x68, 0x20, 0x65, 0x72, 0x72, 0x6F, 0x72, 0x00
_02111678:
	.byte 0x21, 0x73, 0x74, 0x64, 0x3A, 0x3A, 0x65, 0x78
	.byte 0x63, 0x65, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x21, 0x21, 0x73, 0x74, 0x64, 0x3A, 0x3A, 0x6C, 0x6F
	.byte 0x67, 0x69, 0x63, 0x5F, 0x65, 0x72, 0x72, 0x6F, 0x72, 0x21, 0x21, 0x73, 0x74, 0x64, 0x3A, 0x3A
	.byte 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68, 0x5F, 0x65, 0x72, 0x72, 0x6F, 0x72, 0x21, 0x21, 0x00, 0x00
	.byte 0xE4, 0x17, 0x11, 0x02, 0xCC, 0x16, 0x11, 0x02, 0x04, 0x15, 0x11, 0x02
_021116BC:
	.byte 0x62, 0x61, 0x64, 0x5F
	.byte 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x00, 0x00, 0x53, 0x74, 0x31, 0x33
	.byte 0x62, 0x61, 0x64, 0x5F, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0xB0, 0x16, 0x11, 0x02
_021116E8:
	.byte 0x04, 0x45, 0x0F, 0x02, 0xB4, 0x48, 0x0F, 0x02
	.byte 0xC8, 0x48, 0x0F, 0x02
_021116F4:
	.byte 0x21, 0x73, 0x74, 0x64, 0x3A, 0x3A, 0x62, 0x61, 0x64, 0x5F, 0x65, 0x78
	.byte 0x63, 0x65, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x21, 0x21, 0x00, 0x00, 0x00
_0211170C:
	.byte 0x21, 0x73, 0x74, 0x64
	.byte 0x3A, 0x3A, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x21, 0x21, 0x73, 0x74, 0x64
	.byte 0x3A, 0x3A, 0x62, 0x61, 0x64, 0x5F, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x21
	.byte 0x21, 0x00, 0x00, 0x00
_02111734:
	.byte 0x01, 0x00, 0x00, 0x00
_02111738:
	.byte 0x62, 0x61, 0x64, 0x5F, 0x61, 0x6C, 0x6C, 0x6F
	.byte 0x63, 0x00, 0x00, 0x00, 0xE4, 0x17, 0x11, 0x02, 0x50, 0x17, 0x11, 0x02, 0x04, 0x15, 0x11, 0x02
	.byte 0x53, 0x74, 0x39, 0x62, 0x61, 0x64, 0x5F, 0x61, 0x6C, 0x6C, 0x6F, 0x63, 0x00, 0x00, 0x00, 0x00
	.byte 0x21, 0x73, 0x74, 0x64, 0x3A, 0x3A, 0x62, 0x61, 0x64, 0x5F, 0x61, 0x6C, 0x6C, 0x6F, 0x63, 0x21
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x17, 0x11, 0x02
_0211177C:
	.byte 0x14, 0x49, 0x0F, 0x02
	.byte 0x38, 0x4A, 0x0F, 0x02, 0x4C, 0x4A, 0x0F, 0x02
_02111788:
	.byte 0x21, 0x73, 0x74, 0x64, 0x3A, 0x3A, 0x65, 0x78
	.byte 0x63, 0x65, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x21, 0x21, 0x73, 0x74, 0x64, 0x3A, 0x3A, 0x62, 0x61
	.byte 0x64, 0x5F, 0x61, 0x6C, 0x6C, 0x6F, 0x63, 0x21, 0x21, 0x00, 0x00, 0x00, 0xF4, 0x17, 0x11, 0x02
	.byte 0xCC, 0x17, 0x11, 0x02, 0xE4, 0x17, 0x11, 0x02, 0x20, 0x18, 0x11, 0x02, 0xC0, 0x17, 0x11, 0x02
	.byte 0xE4, 0x17, 0x11, 0x02, 0xFC, 0x17, 0x11, 0x02, 0xAC, 0x17, 0x11, 0x02, 0x53, 0x74, 0x39, 0x74
	.byte 0x79, 0x70, 0x65, 0x5F, 0x69, 0x6E, 0x66, 0x6F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0xB4, 0x17, 0x11, 0x02, 0x40, 0x4B, 0x0F, 0x02, 0x54, 0x4B, 0x0F, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0xC0, 0x17, 0x11, 0x02, 0xFC, 0x4A, 0x0F, 0x02, 0x10, 0x4B, 0x0F, 0x02, 0x4E, 0x31, 0x30, 0x5F
	.byte 0x5F, 0x63, 0x78, 0x78, 0x61, 0x62, 0x69, 0x76, 0x31, 0x31, 0x37, 0x5F, 0x5F, 0x63, 0x6C, 0x61
	.byte 0x73, 0x73, 0x5F, 0x74, 0x79, 0x70, 0x65, 0x5F, 0x69, 0x6E, 0x66, 0x6F, 0x45, 0x00, 0x00, 0x00
	.byte 0x4E, 0x31, 0x30, 0x5F, 0x5F, 0x63, 0x78, 0x78, 0x61, 0x62, 0x69, 0x76, 0x31, 0x32, 0x30, 0x5F
	.byte 0x5F, 0x73, 0x69, 0x5F, 0x63, 0x6C, 0x61, 0x73, 0x73, 0x5F, 0x74, 0x79, 0x70, 0x65, 0x5F, 0x69
	.byte 0x6E, 0x66, 0x6F, 0x45, 0x00, 0x00, 0x00, 0x00
_02111848:
	.byte 0x70, 0x4B, 0x0F, 0x02, 0x7C, 0x4B, 0x0F, 0x02
