	.include "asm/macros.inc"
	.include "global.inc"

	.text

	thumb_func_start ZeroMonData
ZeroMonData: ; 0x0206DCE4
	push {r4, lr}
	add r4, r0, #0
	mov r0, #0
	add r1, r4, #0
	mov r2, #0xec
	bl MIi_CpuClearFast
	add r0, r4, #0
	ldrh r2, [r4, #6]
	add r0, #8
	mov r1, #0x80
	bl MonEncryptSegment
	add r0, r4, #0
	ldr r2, [r4]
	add r0, #0x88
	mov r1, #0x64
	bl MonEncryptSegment
	pop {r4, pc}
	thumb_func_end ZeroMonData

	thumb_func_start ZeroBoxMonData
ZeroBoxMonData: ; 0x0206DD0C
	push {r4, lr}
	add r4, r0, #0
	mov r0, #0
	add r1, r4, #0
	mov r2, #0x88
	bl MIi_CpuClearFast
	add r0, r4, #0
	ldrh r2, [r4, #6]
	add r0, #8
	mov r1, #0x80
	bl MonEncryptSegment
	pop {r4, pc}
	thumb_func_end ZeroBoxMonData

	thumb_func_start SizeOfStructPokemon
SizeOfStructPokemon: ; 0x0206DD28
	mov r0, #0xec
	bx lr
	thumb_func_end SizeOfStructPokemon

	thumb_func_start AllocMonZeroed
AllocMonZeroed: ; 0x0206DD2C
	push {r4, lr}
	mov r1, #0xec
	bl AllocFromHeap
	add r4, r0, #0
	bl ZeroMonData
	add r0, r4, #0
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end AllocMonZeroed

	thumb_func_start sub_0206DD40
sub_0206DD40: ; 0x0206DD40
	push {r3, r4, r5, lr}
	add r5, r0, #0
	ldrh r0, [r5, #4]
	mov r4, #0
	lsl r1, r0, #0x1f
	lsr r1, r1, #0x1f
	bne _0206DD86
	lsl r0, r0, #0x1e
	mov r4, #1
	lsr r0, r0, #0x1f
	beq _0206DD5A
	bl GF_AssertFail
_0206DD5A:
	ldrh r1, [r5, #4]
	mov r0, #1
	bic r1, r0
	mov r0, #1
	orr r0, r1
	strh r0, [r5, #4]
	ldrh r1, [r5, #4]
	mov r0, #2
	orr r0, r1
	strh r0, [r5, #4]
	add r0, r5, #0
	ldr r2, [r5]
	add r0, #0x88
	mov r1, #0x64
	bl sub_020725E0
	add r0, r5, #0
	ldrh r2, [r5, #6]
	add r0, #8
	mov r1, #0x80
	bl sub_020725E0
_0206DD86:
	add r0, r4, #0
	pop {r3, r4, r5, pc}
	.balign 4, 0
	thumb_func_end sub_0206DD40

	thumb_func_start sub_0206DD8C
sub_0206DD8C: ; 0x0206DD8C
	push {r3, r4, r5, lr}
	add r5, r0, #0
	ldrh r2, [r5, #4]
	mov r4, #0
	lsl r0, r2, #0x1f
	lsr r0, r0, #0x1f
	cmp r0, #1
	bne _0206DDD4
	cmp r1, #1
	bne _0206DDD4
	mov r0, #1
	bic r2, r0
	strh r2, [r5, #4]
	ldrh r1, [r5, #4]
	mov r0, #2
	mov r4, #1
	bic r1, r0
	strh r1, [r5, #4]
	add r0, r5, #0
	ldr r2, [r5]
	add r0, #0x88
	mov r1, #0x64
	bl MonEncryptSegment
	add r0, r5, #0
	add r0, #8
	mov r1, #0x80
	bl sub_020725E8
	strh r0, [r5, #6]
	add r0, r5, #0
	ldrh r2, [r5, #6]
	add r0, #8
	mov r1, #0x80
	bl MonEncryptSegment
_0206DDD4:
	add r0, r4, #0
	pop {r3, r4, r5, pc}
	thumb_func_end sub_0206DD8C

	thumb_func_start sub_0206DDD8
sub_0206DDD8: ; 0x0206DDD8
	push {r4, lr}
	add r2, r0, #0
	ldrh r1, [r2, #4]
	mov r4, #0
	lsl r0, r1, #0x1e
	lsr r0, r0, #0x1f
	bne _0206DDFA
	mov r0, #2
	orr r0, r1
	strh r0, [r2, #4]
	add r0, r2, #0
	ldrh r2, [r2, #6]
	add r0, #8
	mov r1, #0x80
	mov r4, #1
	bl sub_020725E0
_0206DDFA:
	add r0, r4, #0
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_0206DDD8

	thumb_func_start sub_0206DE00
sub_0206DE00: ; 0x0206DE00
	push {r3, r4, r5, lr}
	add r5, r0, #0
	ldrh r2, [r5, #4]
	mov r4, #0
	lsl r0, r2, #0x1e
	lsr r0, r0, #0x1f
	cmp r0, #1
	bne _0206DE34
	cmp r1, #1
	bne _0206DE34
	mov r0, #2
	bic r2, r0
	add r0, r5, #0
	strh r2, [r5, #4]
	add r0, #8
	mov r1, #0x80
	mov r4, #1
	bl sub_020725E8
	strh r0, [r5, #6]
	add r0, r5, #0
	ldrh r2, [r5, #6]
	add r0, #8
	mov r1, #0x80
	bl MonEncryptSegment
_0206DE34:
	add r0, r4, #0
	pop {r3, r4, r5, pc}
	thumb_func_end sub_0206DE00

	thumb_func_start sub_0206DE38
sub_0206DE38: ; 0x0206DE38
	push {r0, r1, r2, r3}
	push {r3, r4, r5, r6, lr}
	sub sp, #0x2c
	add r5, r0, #0
	add r4, r1, #0
	add r6, r3, #0
	bl ZeroMonData
	ldr r0, [sp, #0x50]
	add r1, r4, #0
	str r0, [sp]
	ldr r0, [sp, #0x54]
	add r3, r6, #0
	str r0, [sp, #4]
	ldr r0, [sp, #0x58]
	str r0, [sp, #8]
	ldr r0, [sp, #0x5c]
	str r0, [sp, #0xc]
	ldr r2, [sp, #0x48]
	add r0, r5, #0
	bl sub_0206DED0
	add r0, r5, #0
	add r0, #0x88
	mov r1, #0x64
	mov r2, #0
	bl MonEncryptSegment
	add r0, r5, #0
	ldr r2, [r5]
	add r0, #0x88
	mov r1, #0x64
	bl MonEncryptSegment
	add r0, r5, #0
	mov r1, #0xa1
	add r2, sp, #0x48
	bl sub_0206EC40
	mov r0, #0
	bl Mail_new
	add r4, r0, #0
	add r0, r5, #0
	mov r1, #0xaa
	add r2, r4, #0
	bl sub_0206EC40
	add r0, r4, #0
	bl FreeToHeap
	mov r0, #0
	str r0, [sp, #0x10]
	add r0, r5, #0
	mov r1, #0xa2
	add r2, sp, #0x10
	bl sub_0206EC40
	mov r0, #0
	add r1, sp, #0x14
	mov r2, #0x18
	bl MIi_CpuClearFast
	add r0, r5, #0
	mov r1, #0xab
	add r2, sp, #0x14
	bl sub_0206EC40
	add r0, r5, #0
	bl sub_0206E250
	add sp, #0x2c
	pop {r3, r4, r5, r6}
	pop {r3}
	add sp, #0x10
	bx r3
	thumb_func_end sub_0206DE38

	thumb_func_start sub_0206DED0
sub_0206DED0: ; 0x0206DED0
	push {r0, r1, r2, r3}
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	add r5, r0, #0
	bl ZeroBoxMonData
	add r0, r5, #0
	bl sub_0206DDD8
	str r0, [sp]
	ldr r0, [sp, #0x30]
	cmp r0, #0
	bne _0206DEFA
	bl LCRandom
	add r4, r0, #0
	bl LCRandom
	lsl r0, r0, #0x10
	orr r0, r4
	str r0, [sp, #0x34]
_0206DEFA:
	add r0, r5, #0
	mov r1, #0
	add r2, sp, #0x34
	bl sub_0206ED70
	ldr r0, [sp, #0x38]
	cmp r0, #2
	bne _0206DF42
	ldr r7, _0206E0FC ; =0xFFFF0000
	add r6, r7, #0
_0206DF0E:
	bl LCRandom
	add r4, r0, #0
	bl LCRandom
	ldr r1, [sp, #0x34]
	lsl r0, r0, #0x10
	add r3, r4, #0
	orr r3, r0
	lsl r0, r1, #0x10
	lsr r2, r0, #0x10
	add r0, r1, #0
	and r0, r7
	lsr r1, r0, #0x10
	add r0, r3, #0
	str r3, [sp, #0x3c]
	and r0, r6
	lsl r3, r3, #0x10
	lsr r0, r0, #0x10
	lsr r3, r3, #0x10
	eor r0, r3
	eor r0, r1
	eor r0, r2
	cmp r0, #8
	blo _0206DF0E
	b _0206DF4A
_0206DF42:
	cmp r0, #1
	beq _0206DF4A
	mov r0, #0
	str r0, [sp, #0x3c]
_0206DF4A:
	add r0, r5, #0
	mov r1, #7
	add r2, sp, #0x3c
	bl sub_0206ED70
	ldr r2, _0206E100 ; =gGameLanguage
	add r0, r5, #0
	mov r1, #0xc
	bl sub_0206ED70
	add r0, r5, #0
	mov r1, #5
	add r2, sp, #0x24
	bl sub_0206ED70
	add r0, r5, #0
	mov r1, #0xb3
	mov r2, #0
	bl sub_0206ED70
	ldr r0, [sp, #0x24]
	ldr r1, [sp, #0x28]
	bl sub_0206FD00
	str r0, [sp, #8]
	add r0, r5, #0
	mov r1, #8
	add r2, sp, #8
	bl sub_0206ED70
	ldr r0, [sp, #0x24]
	mov r1, #0x14
	bl sub_0206FBE8
	str r0, [sp, #8]
	add r0, r5, #0
	mov r1, #9
	add r2, sp, #8
	bl sub_0206ED70
	add r0, r5, #0
	mov r1, #0x9c
	add r2, sp, #0x28
	bl sub_0206ED70
	ldr r2, _0206E104 ; =gGameVersion
	add r0, r5, #0
	mov r1, #0x7a
	bl sub_0206ED70
	mov r0, #4
	str r0, [sp, #8]
	add r0, r5, #0
	mov r1, #0x9b
	add r2, sp, #8
	bl sub_0206ED70
	add r0, r5, #0
	mov r1, #0xb4
	add r2, sp, #8
	bl sub_0206ED70
	ldr r0, [sp, #0x2c]
	cmp r0, #0x20
	bge _0206E00A
	add r0, r5, #0
	mov r1, #0x46
	add r2, sp, #0x2c
	bl sub_0206ED70
	add r0, r5, #0
	mov r1, #0x47
	add r2, sp, #0x2c
	bl sub_0206ED70
	add r0, r5, #0
	mov r1, #0x48
	add r2, sp, #0x2c
	bl sub_0206ED70
	add r0, r5, #0
	mov r1, #0x49
	add r2, sp, #0x2c
	bl sub_0206ED70
	add r0, r5, #0
	mov r1, #0x4a
	add r2, sp, #0x2c
	bl sub_0206ED70
	add r0, r5, #0
	mov r1, #0x4b
	add r2, sp, #0x2c
	bl sub_0206ED70
	b _0206E08E
_0206E00A:
	bl LCRandom
	mov r1, #0x1f
	str r0, [sp, #8]
	and r0, r1
	str r0, [sp, #4]
	add r0, r5, #0
	mov r1, #0x46
	add r2, sp, #4
	bl sub_0206ED70
	mov r0, #0x3e
	ldr r1, [sp, #8]
	lsl r0, r0, #4
	and r0, r1
	lsr r0, r0, #5
	str r0, [sp, #4]
	add r0, r5, #0
	mov r1, #0x47
	add r2, sp, #4
	bl sub_0206ED70
	mov r0, #0x1f
	ldr r1, [sp, #8]
	lsl r0, r0, #0xa
	and r0, r1
	lsr r0, r0, #0xa
	str r0, [sp, #4]
	add r0, r5, #0
	mov r1, #0x48
	add r2, sp, #4
	bl sub_0206ED70
	bl LCRandom
	mov r1, #0x1f
	str r0, [sp, #8]
	and r0, r1
	str r0, [sp, #4]
	add r0, r5, #0
	mov r1, #0x49
	add r2, sp, #4
	bl sub_0206ED70
	mov r0, #0x3e
	ldr r1, [sp, #8]
	lsl r0, r0, #4
	and r0, r1
	lsr r0, r0, #5
	str r0, [sp, #4]
	add r0, r5, #0
	mov r1, #0x4a
	add r2, sp, #4
	bl sub_0206ED70
	mov r0, #0x1f
	ldr r1, [sp, #8]
	lsl r0, r0, #0xa
	and r0, r1
	lsr r0, r0, #0xa
	str r0, [sp, #4]
	add r0, r5, #0
	mov r1, #0x4b
	add r2, sp, #4
	bl sub_0206ED70
_0206E08E:
	ldr r0, [sp, #0x24]
	mov r1, #0x18
	bl sub_0206FBE8
	str r0, [sp, #8]
	ldr r0, [sp, #0x24]
	mov r1, #0x19
	bl sub_0206FBE8
	str r0, [sp, #4]
	cmp r0, #0
	beq _0206E0C6
	ldr r1, [sp, #0x34]
	mov r0, #1
	tst r0, r1
	beq _0206E0BA
	add r0, r5, #0
	mov r1, #0xa
	add r2, sp, #4
	bl sub_0206ED70
	b _0206E0D0
_0206E0BA:
	add r0, r5, #0
	mov r1, #0xa
	add r2, sp, #8
	bl sub_0206ED70
	b _0206E0D0
_0206E0C6:
	add r0, r5, #0
	mov r1, #0xa
	add r2, sp, #8
	bl sub_0206ED70
_0206E0D0:
	add r0, r5, #0
	bl sub_0206FF90
	str r0, [sp, #8]
	add r0, r5, #0
	mov r1, #0x6f
	add r2, sp, #8
	bl sub_0206ED70
	add r0, r5, #0
	bl sub_020712D8
	ldr r1, [sp]
	add r0, r5, #0
	bl sub_0206DE00
	add sp, #0xc
	pop {r4, r5, r6, r7}
	pop {r3}
	add sp, #0x10
	bx r3
	nop
_0206E0FC: .word 0xFFFF0000
_0206E100: .word gGameLanguage
_0206E104: .word gGameVersion
	thumb_func_end sub_0206DED0

	thumb_func_start sub_0206E108
sub_0206E108: ; 0x0206E108
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x18
	str r2, [sp, #0x10]
	str r3, [sp, #0x14]
	ldr r4, [sp, #0x30]
	add r6, r0, #0
	add r7, r1, #0
_0206E116:
	bl LCRandom
	add r5, r0, #0
	bl LCRandom
	lsl r0, r0, #0x10
	orr r5, r0
	add r0, r5, #0
	bl sub_0206FE2C
	cmp r4, r0
	bne _0206E116
	mov r0, #1
	str r0, [sp]
	str r5, [sp, #4]
	mov r0, #0
	str r0, [sp, #8]
	str r0, [sp, #0xc]
	ldr r2, [sp, #0x10]
	ldr r3, [sp, #0x14]
	add r0, r6, #0
	add r1, r7, #0
	bl sub_0206DE38
	add sp, #0x18
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_0206E108

	thumb_func_start sub_0206E14C
sub_0206E14C: ; 0x0206E14C
	push {r4, r5, r6, r7, lr}
	sub sp, #0x24
	str r1, [sp, #0x14]
	str r2, [sp, #0x18]
	str r3, [sp, #0x1c]
	str r0, [sp, #0x10]
	add r0, sp, #0x28
	ldrb r0, [r0, #0x18]
	ldr r6, [sp, #0x38]
	ldr r7, [sp, #0x3c]
	cmp r0, #0
	beq _0206E1C4
	cmp r0, #0x1d
	bhs _0206E1C4
	sub r0, r0, #1
	str r0, [sp, #0x20]
_0206E16C:
	bl LCRandom
	add r4, r0, #0
	bl LCRandom
	lsl r0, r0, #0x10
	orr r4, r0
	mov r3, #3
	lsl r3, r3, #0x10
	and r3, r4
	mov r0, #3
	add r2, r4, #0
	and r2, r0
	lsl r0, r0, #8
	and r0, r4
	lsr r1, r0, #6
	mov r0, #3
	lsl r0, r0, #0x18
	and r0, r4
	lsr r0, r0, #0x12
	lsr r3, r3, #0xc
	orr r0, r3
	orr r0, r1
	orr r0, r2
	mov r1, #0x1c
	bl _u32_div_f
	lsl r0, r1, #0x10
	lsr r5, r0, #0x10
	add r0, r4, #0
	bl sub_0206FE2C
	cmp r7, r0
	bne _0206E16C
	ldr r0, [sp, #0x14]
	add r1, r4, #0
	bl sub_0206FFC8
	cmp r6, r0
	bne _0206E16C
	ldr r0, [sp, #0x20]
	cmp r5, r0
	bne _0206E16C
	b _0206E1D0
_0206E1C4:
	ldr r0, [sp, #0x14]
	add r1, r6, #0
	add r2, r7, #0
	bl sub_0206E1EC
	add r4, r0, #0
_0206E1D0:
	mov r0, #1
	str r0, [sp]
	str r4, [sp, #4]
	mov r0, #0
	str r0, [sp, #8]
	str r0, [sp, #0xc]
	ldr r0, [sp, #0x10]
	ldr r1, [sp, #0x14]
	ldr r2, [sp, #0x18]
	ldr r3, [sp, #0x1c]
	bl sub_0206DE38
	add sp, #0x24
	pop {r4, r5, r6, r7, pc}
	thumb_func_end sub_0206E14C

	thumb_func_start sub_0206E1EC
sub_0206E1EC: ; 0x0206E1EC
	push {r3, r4, r5, lr}
	add r5, r1, #0
	mov r1, #0x12
	add r4, r2, #0
	bl sub_0206FBE8
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	beq _0206E218
	cmp r0, #0xfe
	beq _0206E218
	cmp r0, #0xff
	beq _0206E218
	cmp r5, #0
	bne _0206E218
	mov r1, #0x19
	bl _s32_div_f
	add r1, r0, #1
	mov r0, #0x19
	mul r0, r1
	add r4, r0, r4
_0206E218:
	add r0, r4, #0
	pop {r3, r4, r5, pc}
	thumb_func_end sub_0206E1EC

	thumb_func_start sub_0206E21C
sub_0206E21C: ; 0x0206E21C
	push {r0, r1, r2, r3}
	push {r4, lr}
	sub sp, #0x10
	mov r3, #1
	str r3, [sp]
	ldr r3, [sp, #0x28]
	add r4, r0, #0
	str r3, [sp, #4]
	mov r3, #0
	str r3, [sp, #8]
	str r3, [sp, #0xc]
	bl sub_0206DE38
	add r0, r4, #0
	mov r1, #0xaf
	add r2, sp, #0x24
	bl sub_0206EC40
	add r0, r4, #0
	bl sub_0206E250
	add sp, #0x10
	pop {r4}
	pop {r3}
	add sp, #0x10
	bx r3
	thumb_func_end sub_0206E21C

	thumb_func_start sub_0206E250
sub_0206E250: ; 0x0206E250
	push {r3, r4, r5, lr}
	add r5, r0, #0
	bl sub_0206DD40
	add r4, r0, #0
	add r0, r5, #0
	bl sub_0206FD68
	str r0, [sp]
	add r0, r5, #0
	mov r1, #0xa1
	add r2, sp, #0
	bl sub_0206EC40
	add r0, r5, #0
	bl sub_0206E27C
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0206DD8C
	pop {r3, r4, r5, pc}
	thumb_func_end sub_0206E250

	thumb_func_start sub_0206E27C
sub_0206E27C: ; 0x0206E27C
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x58
	add r5, r0, #0
	bl sub_0206DD40
	str r0, [sp]
	add r0, r5, #0
	mov r1, #0xa1
	mov r2, #0
	bl GetMonData
	add r4, r0, #0
	add r0, r5, #0
	mov r1, #0xa4
	mov r2, #0
	bl GetMonData
	str r0, [sp, #0x2c]
	add r0, r5, #0
	mov r1, #0xa3
	mov r2, #0
	bl GetMonData
	str r0, [sp, #0x54]
	add r0, r5, #0
	mov r1, #0x46
	mov r2, #0
	bl GetMonData
	str r0, [sp, #0x30]
	add r0, r5, #0
	mov r1, #0xd
	mov r2, #0
	bl GetMonData
	str r0, [sp, #0x34]
	add r0, r5, #0
	mov r1, #0x47
	mov r2, #0
	bl GetMonData
	str r0, [sp, #0x28]
	add r0, r5, #0
	mov r1, #0xe
	mov r2, #0
	bl GetMonData
	str r0, [sp, #0x14]
	add r0, r5, #0
	mov r1, #0x48
	mov r2, #0
	bl GetMonData
	str r0, [sp, #0x24]
	add r0, r5, #0
	mov r1, #0xf
	mov r2, #0
	bl GetMonData
	str r0, [sp, #0x10]
	add r0, r5, #0
	mov r1, #0x49
	mov r2, #0
	bl GetMonData
	str r0, [sp, #0x20]
	add r0, r5, #0
	mov r1, #0x10
	mov r2, #0
	bl GetMonData
	str r0, [sp, #0xc]
	add r0, r5, #0
	mov r1, #0x4a
	mov r2, #0
	bl GetMonData
	str r0, [sp, #0x1c]
	add r0, r5, #0
	mov r1, #0x11
	mov r2, #0
	bl GetMonData
	str r0, [sp, #8]
	add r0, r5, #0
	mov r1, #0x4b
	mov r2, #0
	bl GetMonData
	str r0, [sp, #0x18]
	add r0, r5, #0
	mov r1, #0x12
	mov r2, #0
	bl GetMonData
	str r0, [sp, #4]
	add r0, r5, #0
	mov r1, #0x70
	mov r2, #0
	bl GetMonData
	str r0, [sp, #0x38]
	add r0, r5, #0
	mov r1, #5
	mov r2, #0
	bl GetMonData
	add r7, r0, #0
	mov r0, #0
	mov r1, #0x2c
	bl AllocFromHeap
	add r6, r0, #0
	ldr r1, [sp, #0x38]
	add r0, r7, #0
	add r2, r6, #0
	bl sub_020725B4
	mov r0, #0x49
	lsl r0, r0, #2
	cmp r7, r0
	bne _0206E374
	mov r0, #1
	b _0206E396
_0206E374:
	ldr r0, [sp, #0x34]
	asr r0, r0, #1
	lsr r1, r0, #0x1e
	ldr r0, [sp, #0x34]
	add r1, r0, r1
	asr r0, r1, #2
	ldrb r1, [r6]
	lsl r2, r1, #1
	ldr r1, [sp, #0x30]
	add r1, r1, r2
	add r0, r0, r1
	mul r0, r4
	mov r1, #0x64
	bl _s32_div_f
	add r0, r4, r0
	add r0, #0xa
_0206E396:
	str r0, [sp, #0x50]
	add r0, r5, #0
	mov r1, #0xa4
	add r2, sp, #0x50
	bl sub_0206EC40
	ldr r0, [sp, #0x14]
	asr r0, r0, #1
	lsr r1, r0, #0x1e
	ldr r0, [sp, #0x14]
	add r1, r0, r1
	asr r0, r1, #2
	ldrb r1, [r6, #1]
	lsl r2, r1, #1
	ldr r1, [sp, #0x28]
	add r1, r1, r2
	add r0, r0, r1
	mul r0, r4
	mov r1, #0x64
	bl _s32_div_f
	add r0, r0, #5
	str r0, [sp, #0x4c]
	add r0, r5, #0
	bl sub_0206FDFC
	ldr r1, [sp, #0x4c]
	mov r2, #1
	lsl r1, r1, #0x10
	lsr r1, r1, #0x10
	bl sub_0206FE3C
	str r0, [sp, #0x4c]
	add r0, r5, #0
	mov r1, #0xa5
	add r2, sp, #0x4c
	bl sub_0206EC40
	ldr r0, [sp, #0x10]
	asr r0, r0, #1
	lsr r1, r0, #0x1e
	ldr r0, [sp, #0x10]
	add r1, r0, r1
	asr r0, r1, #2
	ldrb r1, [r6, #2]
	lsl r2, r1, #1
	ldr r1, [sp, #0x24]
	add r1, r1, r2
	add r0, r0, r1
	mul r0, r4
	mov r1, #0x64
	bl _s32_div_f
	add r0, r0, #5
	str r0, [sp, #0x48]
	add r0, r5, #0
	bl sub_0206FDFC
	ldr r1, [sp, #0x48]
	mov r2, #2
	lsl r1, r1, #0x10
	lsr r1, r1, #0x10
	bl sub_0206FE3C
	str r0, [sp, #0x48]
	add r0, r5, #0
	mov r1, #0xa6
	add r2, sp, #0x48
	bl sub_0206EC40
	ldr r0, [sp, #0xc]
	asr r0, r0, #1
	lsr r1, r0, #0x1e
	ldr r0, [sp, #0xc]
	add r1, r0, r1
	asr r0, r1, #2
	ldrb r1, [r6, #3]
	lsl r2, r1, #1
	ldr r1, [sp, #0x20]
	add r1, r1, r2
	add r0, r0, r1
	mul r0, r4
	mov r1, #0x64
	bl _s32_div_f
	add r0, r0, #5
	str r0, [sp, #0x44]
	add r0, r5, #0
	bl sub_0206FDFC
	ldr r1, [sp, #0x44]
	mov r2, #3
	lsl r1, r1, #0x10
	lsr r1, r1, #0x10
	bl sub_0206FE3C
	str r0, [sp, #0x44]
	add r0, r5, #0
	mov r1, #0xa7
	add r2, sp, #0x44
	bl sub_0206EC40
	ldr r0, [sp, #8]
	asr r0, r0, #1
	lsr r1, r0, #0x1e
	ldr r0, [sp, #8]
	add r1, r0, r1
	asr r0, r1, #2
	ldrb r1, [r6, #4]
	lsl r2, r1, #1
	ldr r1, [sp, #0x1c]
	add r1, r1, r2
	add r0, r0, r1
	mul r0, r4
	mov r1, #0x64
	bl _s32_div_f
	add r0, r0, #5
	str r0, [sp, #0x40]
	add r0, r5, #0
	bl sub_0206FDFC
	ldr r1, [sp, #0x40]
	mov r2, #4
	lsl r1, r1, #0x10
	lsr r1, r1, #0x10
	bl sub_0206FE3C
	str r0, [sp, #0x40]
	add r0, r5, #0
	mov r1, #0xa8
	add r2, sp, #0x40
	bl sub_0206EC40
	ldr r0, [sp, #4]
	asr r0, r0, #1
	lsr r1, r0, #0x1e
	ldr r0, [sp, #4]
	add r1, r0, r1
	asr r0, r1, #2
	ldrb r1, [r6, #5]
	lsl r2, r1, #1
	ldr r1, [sp, #0x18]
	add r1, r1, r2
	add r0, r0, r1
	mul r0, r4
	mov r1, #0x64
	bl _s32_div_f
	add r0, r0, #5
	str r0, [sp, #0x3c]
	add r0, r5, #0
	bl sub_0206FDFC
	ldr r1, [sp, #0x3c]
	mov r2, #5
	lsl r1, r1, #0x10
	lsr r1, r1, #0x10
	bl sub_0206FE3C
	str r0, [sp, #0x3c]
	add r0, r5, #0
	mov r1, #0xa9
	add r2, sp, #0x3c
	bl sub_0206EC40
	add r0, r6, #0
	bl FreeToHeap
	ldr r0, [sp, #0x54]
	cmp r0, #0
	bne _0206E4F4
	ldr r1, [sp, #0x2c]
	cmp r1, #0
	bne _0206E522
_0206E4F4:
	mov r1, #0x49
	lsl r1, r1, #2
	cmp r7, r1
	bne _0206E502
	mov r0, #1
	str r0, [sp, #0x54]
	b _0206E522
_0206E502:
	cmp r0, #0
	bne _0206E50C
	ldr r0, [sp, #0x50]
	str r0, [sp, #0x54]
	b _0206E522
_0206E50C:
	ldr r2, [sp, #0x50]
	ldr r1, [sp, #0x2c]
	sub r1, r2, r1
	bpl _0206E51C
	cmp r0, r2
	ble _0206E522
	str r2, [sp, #0x54]
	b _0206E522
_0206E51C:
	ldr r0, [sp, #0x54]
	add r0, r0, r1
	str r0, [sp, #0x54]
_0206E522:
	ldr r0, [sp, #0x54]
	cmp r0, #0
	beq _0206E532
	add r0, r5, #0
	mov r1, #0xa3
	add r2, sp, #0x54
	bl sub_0206EC40
_0206E532:
	ldr r1, [sp]
	add r0, r5, #0
	bl sub_0206DD8C
	add sp, #0x58
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_0206E27C

	thumb_func_start GetMonData
GetMonData: ; 0x0206E540
	push {r4, r5, r6, lr}
	add r5, r0, #0
	ldrh r0, [r5, #4]
	add r4, r1, #0
	add r6, r2, #0
	lsl r0, r0, #0x1f
	lsr r0, r0, #0x1f
	bne _0206E588
	add r0, r5, #0
	ldr r2, [r5]
	add r0, #0x88
	mov r1, #0x64
	bl sub_020725E0
	add r0, r5, #0
	ldrh r2, [r5, #6]
	add r0, #8
	mov r1, #0x80
	bl sub_020725E0
	add r0, r5, #0
	add r0, #8
	mov r1, #0x80
	bl sub_020725E8
	ldrh r1, [r5, #6]
	cmp r0, r1
	beq _0206E588
	cmp r0, r1
	beq _0206E580
	bl GF_AssertFail
_0206E580:
	ldrh r1, [r5, #4]
	mov r0, #4
	orr r0, r1
	strh r0, [r5, #4]
_0206E588:
	add r0, r5, #0
	add r1, r4, #0
	add r2, r6, #0
	bl sub_0206E5B8
	add r4, r0, #0
	ldrh r0, [r5, #4]
	lsl r0, r0, #0x1f
	lsr r0, r0, #0x1f
	bne _0206E5B4
	add r0, r5, #0
	ldr r2, [r5]
	add r0, #0x88
	mov r1, #0x64
	bl MonEncryptSegment
	add r0, r5, #0
	ldrh r2, [r5, #6]
	add r0, #8
	mov r1, #0x80
	bl MonEncryptSegment
_0206E5B4:
	add r0, r4, #0
	pop {r4, r5, r6, pc}
	thumb_func_end GetMonData

	thumb_func_start sub_0206E5B8
sub_0206E5B8: ; 0x0206E5B8
	push {r3, lr}
	add r3, r1, #0
	sub r3, #0xa0
	cmp r3, #0xb
	bhi _0206E63A
	add r3, r3, r3
	add r3, pc
	ldrh r3, [r3, #6]
	lsl r3, r3, #0x10
	asr r3, r3, #0x10
	add pc, r3
_0206E5CE: ; jump table
	.short _0206E5E6 - _0206E5CE - 2 ; case 0
	.short _0206E5EC - _0206E5CE - 2 ; case 1
	.short _0206E5F2 - _0206E5CE - 2 ; case 2
	.short _0206E5F8 - _0206E5CE - 2 ; case 3
	.short _0206E5FE - _0206E5CE - 2 ; case 4
	.short _0206E604 - _0206E5CE - 2 ; case 5
	.short _0206E60A - _0206E5CE - 2 ; case 6
	.short _0206E610 - _0206E5CE - 2 ; case 7
	.short _0206E616 - _0206E5CE - 2 ; case 8
	.short _0206E61C - _0206E5CE - 2 ; case 9
	.short _0206E622 - _0206E5CE - 2 ; case 10
	.short _0206E62E - _0206E5CE - 2 ; case 11
_0206E5E6:
	add r0, #0x88
	ldr r0, [r0]
	pop {r3, pc}
_0206E5EC:
	add r0, #0x8c
	ldrb r0, [r0]
	pop {r3, pc}
_0206E5F2:
	add r0, #0x8d
	ldrb r0, [r0]
	pop {r3, pc}
_0206E5F8:
	add r0, #0x8e
	ldrh r0, [r0]
	pop {r3, pc}
_0206E5FE:
	add r0, #0x90
	ldrh r0, [r0]
	pop {r3, pc}
_0206E604:
	add r0, #0x92
	ldrh r0, [r0]
	pop {r3, pc}
_0206E60A:
	add r0, #0x94
	ldrh r0, [r0]
	pop {r3, pc}
_0206E610:
	add r0, #0x96
	ldrh r0, [r0]
	pop {r3, pc}
_0206E616:
	add r0, #0x98
	ldrh r0, [r0]
	pop {r3, pc}
_0206E61C:
	add r0, #0x9a
	ldrh r0, [r0]
	pop {r3, pc}
_0206E622:
	add r0, #0x9c
	add r1, r2, #0
	bl Mail_copy
	mov r0, #1
	pop {r3, pc}
_0206E62E:
	add r0, #0xd4
	add r1, r2, #0
	bl sub_0202CBDC
	mov r0, #1
	pop {r3, pc}
_0206E63A:
	bl sub_0206E6A0
	pop {r3, pc}
	thumb_func_end sub_0206E5B8

	thumb_func_start GetBoxMonData
GetBoxMonData: ; 0x0206E640
	push {r4, r5, r6, lr}
	add r5, r0, #0
	ldrh r0, [r5, #4]
	add r4, r1, #0
	add r6, r2, #0
	lsl r0, r0, #0x1e
	lsr r0, r0, #0x1f
	bne _0206E67C
	ldrh r2, [r5, #6]
	add r0, r5, #0
	add r0, #8
	mov r1, #0x80
	bl sub_020725E0
	add r0, r5, #0
	add r0, #8
	mov r1, #0x80
	bl sub_020725E8
	ldrh r1, [r5, #6]
	cmp r0, r1
	beq _0206E67C
	cmp r0, r1
	beq _0206E674
	bl GF_AssertFail
_0206E674:
	ldrh r1, [r5, #4]
	mov r0, #4
	orr r0, r1
	strh r0, [r5, #4]
_0206E67C:
	add r0, r5, #0
	add r1, r4, #0
	add r2, r6, #0
	bl sub_0206E6A0
	add r4, r0, #0
	ldrh r0, [r5, #4]
	lsl r0, r0, #0x1e
	lsr r0, r0, #0x1f
	bne _0206E69C
	ldrh r2, [r5, #6]
	add r0, r5, #0
	add r0, #8
	mov r1, #0x80
	bl MonEncryptSegment
_0206E69C:
	add r0, r4, #0
	pop {r4, r5, r6, pc}
	thumb_func_end GetBoxMonData

	thumb_func_start sub_0206E6A0
sub_0206E6A0: ; 0x0206E6A0
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	str r1, [sp, #4]
	add r1, r0, #0
	mov r4, #0
	str r2, [sp, #8]
	ldr r1, [r1]
	str r0, [sp]
	add r2, r4, #0
	bl sub_02072608
	add r5, r0, #0
	ldr r0, [sp]
	mov r2, #1
	add r1, r0, #0
	ldr r1, [r1]
	bl sub_02072608
	add r6, r0, #0
	ldr r0, [sp]
	mov r2, #2
	add r1, r0, #0
	ldr r1, [r1]
	bl sub_02072608
	add r7, r0, #0
	ldr r0, [sp]
	mov r2, #3
	add r1, r0, #0
	ldr r1, [r1]
	bl sub_02072608
	add r1, r0, #0
	ldr r0, [sp, #4]
	cmp r0, #0xbb
	bls _0206E6EA
	b _0206E86E
_0206E6EA:
	add r0, r0, r0
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_0206E6F6: ; jump table
	.short _0206E872 - _0206E6F6 - 2 ; case 0
	.short _0206E878 - _0206E6F6 - 2 ; case 1
	.short _0206E882 - _0206E6F6 - 2 ; case 2
	.short _0206E88C - _0206E6F6 - 2 ; case 3
	.short _0206E896 - _0206E6F6 - 2 ; case 4
	.short _0206E8E2 - _0206E6F6 - 2 ; case 5
	.short _0206E8F4 - _0206E6F6 - 2 ; case 6
	.short _0206E8F8 - _0206E6F6 - 2 ; case 7
	.short _0206E8FC - _0206E6F6 - 2 ; case 8
	.short _0206E900 - _0206E6F6 - 2 ; case 9
	.short _0206E904 - _0206E6F6 - 2 ; case 10
	.short _0206E908 - _0206E6F6 - 2 ; case 11
	.short _0206E90C - _0206E6F6 - 2 ; case 12
	.short _0206E910 - _0206E6F6 - 2 ; case 13
	.short _0206E914 - _0206E6F6 - 2 ; case 14
	.short _0206E918 - _0206E6F6 - 2 ; case 15
	.short _0206E91C - _0206E6F6 - 2 ; case 16
	.short _0206E920 - _0206E6F6 - 2 ; case 17
	.short _0206E924 - _0206E6F6 - 2 ; case 18
	.short _0206E928 - _0206E6F6 - 2 ; case 19
	.short _0206E92C - _0206E6F6 - 2 ; case 20
	.short _0206E930 - _0206E6F6 - 2 ; case 21
	.short _0206E934 - _0206E6F6 - 2 ; case 22
	.short _0206E938 - _0206E6F6 - 2 ; case 23
	.short _0206E93C - _0206E6F6 - 2 ; case 24
	.short _0206E940 - _0206E6F6 - 2 ; case 25
	.short _0206E940 - _0206E6F6 - 2 ; case 26
	.short _0206E940 - _0206E6F6 - 2 ; case 27
	.short _0206E940 - _0206E6F6 - 2 ; case 28
	.short _0206E940 - _0206E6F6 - 2 ; case 29
	.short _0206E940 - _0206E6F6 - 2 ; case 30
	.short _0206E940 - _0206E6F6 - 2 ; case 31
	.short _0206E940 - _0206E6F6 - 2 ; case 32
	.short _0206E940 - _0206E6F6 - 2 ; case 33
	.short _0206E940 - _0206E6F6 - 2 ; case 34
	.short _0206E940 - _0206E6F6 - 2 ; case 35
	.short _0206E940 - _0206E6F6 - 2 ; case 36
	.short _0206E940 - _0206E6F6 - 2 ; case 37
	.short _0206E940 - _0206E6F6 - 2 ; case 38
	.short _0206E940 - _0206E6F6 - 2 ; case 39
	.short _0206E940 - _0206E6F6 - 2 ; case 40
	.short _0206E940 - _0206E6F6 - 2 ; case 41
	.short _0206E940 - _0206E6F6 - 2 ; case 42
	.short _0206E940 - _0206E6F6 - 2 ; case 43
	.short _0206E940 - _0206E6F6 - 2 ; case 44
	.short _0206E940 - _0206E6F6 - 2 ; case 45
	.short _0206E940 - _0206E6F6 - 2 ; case 46
	.short _0206E940 - _0206E6F6 - 2 ; case 47
	.short _0206E940 - _0206E6F6 - 2 ; case 48
	.short _0206E940 - _0206E6F6 - 2 ; case 49
	.short _0206E940 - _0206E6F6 - 2 ; case 50
	.short _0206E940 - _0206E6F6 - 2 ; case 51
	.short _0206E940 - _0206E6F6 - 2 ; case 52
	.short _0206E940 - _0206E6F6 - 2 ; case 53
	.short _0206E966 - _0206E6F6 - 2 ; case 54
	.short _0206E966 - _0206E6F6 - 2 ; case 55
	.short _0206E966 - _0206E6F6 - 2 ; case 56
	.short _0206E966 - _0206E6F6 - 2 ; case 57
	.short _0206E972 - _0206E6F6 - 2 ; case 58
	.short _0206E972 - _0206E6F6 - 2 ; case 59
	.short _0206E972 - _0206E6F6 - 2 ; case 60
	.short _0206E972 - _0206E6F6 - 2 ; case 61
	.short _0206E97E - _0206E6F6 - 2 ; case 62
	.short _0206E97E - _0206E6F6 - 2 ; case 63
	.short _0206E97E - _0206E6F6 - 2 ; case 64
	.short _0206E97E - _0206E6F6 - 2 ; case 65
	.short _0206E98A - _0206E6F6 - 2 ; case 66
	.short _0206E98A - _0206E6F6 - 2 ; case 67
	.short _0206E98A - _0206E6F6 - 2 ; case 68
	.short _0206E98A - _0206E6F6 - 2 ; case 69
	.short _0206E9A2 - _0206E6F6 - 2 ; case 70
	.short _0206E9AA - _0206E6F6 - 2 ; case 71
	.short _0206E9B2 - _0206E6F6 - 2 ; case 72
	.short _0206E9BA - _0206E6F6 - 2 ; case 73
	.short _0206E9C2 - _0206E6F6 - 2 ; case 74
	.short _0206E9CA - _0206E6F6 - 2 ; case 75
	.short _0206E9D2 - _0206E6F6 - 2 ; case 76
	.short _0206E9E6 - _0206E6F6 - 2 ; case 77
	.short _0206E9EC - _0206E6F6 - 2 ; case 78
	.short _0206E9EC - _0206E6F6 - 2 ; case 79
	.short _0206E9EC - _0206E6F6 - 2 ; case 80
	.short _0206E9EC - _0206E6F6 - 2 ; case 81
	.short _0206E9EC - _0206E6F6 - 2 ; case 82
	.short _0206E9EC - _0206E6F6 - 2 ; case 83
	.short _0206E9EC - _0206E6F6 - 2 ; case 84
	.short _0206E9EC - _0206E6F6 - 2 ; case 85
	.short _0206E9EC - _0206E6F6 - 2 ; case 86
	.short _0206E9EC - _0206E6F6 - 2 ; case 87
	.short _0206E9EC - _0206E6F6 - 2 ; case 88
	.short _0206E9EC - _0206E6F6 - 2 ; case 89
	.short _0206E9EC - _0206E6F6 - 2 ; case 90
	.short _0206E9EC - _0206E6F6 - 2 ; case 91
	.short _0206E9EC - _0206E6F6 - 2 ; case 92
	.short _0206E9EC - _0206E6F6 - 2 ; case 93
	.short _0206E9EC - _0206E6F6 - 2 ; case 94
	.short _0206E9EC - _0206E6F6 - 2 ; case 95
	.short _0206E9EC - _0206E6F6 - 2 ; case 96
	.short _0206E9EC - _0206E6F6 - 2 ; case 97
	.short _0206E9EC - _0206E6F6 - 2 ; case 98
	.short _0206E9EC - _0206E6F6 - 2 ; case 99
	.short _0206E9EC - _0206E6F6 - 2 ; case 100
	.short _0206E9EC - _0206E6F6 - 2 ; case 101
	.short _0206E9EC - _0206E6F6 - 2 ; case 102
	.short _0206E9EC - _0206E6F6 - 2 ; case 103
	.short _0206E9EC - _0206E6F6 - 2 ; case 104
	.short _0206E9EC - _0206E6F6 - 2 ; case 105
	.short _0206E9EC - _0206E6F6 - 2 ; case 106
	.short _0206E9EC - _0206E6F6 - 2 ; case 107
	.short _0206E9EC - _0206E6F6 - 2 ; case 108
	.short _0206E9EC - _0206E6F6 - 2 ; case 109
	.short _0206EA12 - _0206E6F6 - 2 ; case 110
	.short _0206EA1A - _0206E6F6 - 2 ; case 111
	.short _0206EA48 - _0206E6F6 - 2 ; case 112
	.short _0206EA50 - _0206E6F6 - 2 ; case 113
	.short _0206EA58 - _0206E6F6 - 2 ; case 114
	.short _0206EB28 - _0206E6F6 - 2 ; case 115
	.short _0206EB3A - _0206E6F6 - 2 ; case 116
	.short _0206EA5C - _0206E6F6 - 2 ; case 117
	.short _0206E86E - _0206E6F6 - 2 ; case 118
	.short _0206EA90 - _0206E6F6 - 2 ; case 119
	.short _0206EA8C - _0206E6F6 - 2 ; case 120
	.short _0206EABE - _0206E6F6 - 2 ; case 121
	.short _0206EAC2 - _0206E6F6 - 2 ; case 122
	.short _0206EAC6 - _0206E6F6 - 2 ; case 123
	.short _0206EAC6 - _0206E6F6 - 2 ; case 124
	.short _0206EAC6 - _0206E6F6 - 2 ; case 125
	.short _0206EAC6 - _0206E6F6 - 2 ; case 126
	.short _0206EAC6 - _0206E6F6 - 2 ; case 127
	.short _0206EAC6 - _0206E6F6 - 2 ; case 128
	.short _0206EAC6 - _0206E6F6 - 2 ; case 129
	.short _0206EAC6 - _0206E6F6 - 2 ; case 130
	.short _0206EAC6 - _0206E6F6 - 2 ; case 131
	.short _0206EAC6 - _0206E6F6 - 2 ; case 132
	.short _0206EAC6 - _0206E6F6 - 2 ; case 133
	.short _0206EAC6 - _0206E6F6 - 2 ; case 134
	.short _0206EAC6 - _0206E6F6 - 2 ; case 135
	.short _0206EAC6 - _0206E6F6 - 2 ; case 136
	.short _0206EAC6 - _0206E6F6 - 2 ; case 137
	.short _0206EAC6 - _0206E6F6 - 2 ; case 138
	.short _0206EAC6 - _0206E6F6 - 2 ; case 139
	.short _0206EAC6 - _0206E6F6 - 2 ; case 140
	.short _0206EAC6 - _0206E6F6 - 2 ; case 141
	.short _0206EAC6 - _0206E6F6 - 2 ; case 142
	.short _0206EAC6 - _0206E6F6 - 2 ; case 143
	.short _0206EAEE - _0206E6F6 - 2 ; case 144
	.short _0206EB08 - _0206E6F6 - 2 ; case 145
	.short _0206EB10 - _0206E6F6 - 2 ; case 146
	.short _0206EB14 - _0206E6F6 - 2 ; case 147
	.short _0206EB18 - _0206E6F6 - 2 ; case 148
	.short _0206EB1C - _0206E6F6 - 2 ; case 149
	.short _0206EB20 - _0206E6F6 - 2 ; case 150
	.short _0206EB24 - _0206E6F6 - 2 ; case 151
	.short _0206EB28 - _0206E6F6 - 2 ; case 152
	.short _0206EB3A - _0206E6F6 - 2 ; case 153
	.short _0206EB4C - _0206E6F6 - 2 ; case 154
	.short _0206EB50 - _0206E6F6 - 2 ; case 155
	.short _0206EB6A - _0206E6F6 - 2 ; case 156
	.short _0206EB72 - _0206E6F6 - 2 ; case 157
	.short _0206EB7A - _0206E6F6 - 2 ; case 158
	.short _0206E86E - _0206E6F6 - 2 ; case 159
	.short _0206E86E - _0206E6F6 - 2 ; case 160
	.short _0206E8D6 - _0206E6F6 - 2 ; case 161
	.short _0206E86E - _0206E6F6 - 2 ; case 162
	.short _0206E86E - _0206E6F6 - 2 ; case 163
	.short _0206E86E - _0206E6F6 - 2 ; case 164
	.short _0206E86E - _0206E6F6 - 2 ; case 165
	.short _0206E86E - _0206E6F6 - 2 ; case 166
	.short _0206E86E - _0206E6F6 - 2 ; case 167
	.short _0206E86E - _0206E6F6 - 2 ; case 168
	.short _0206E86E - _0206E6F6 - 2 ; case 169
	.short _0206E86E - _0206E6F6 - 2 ; case 170
	.short _0206E86E - _0206E6F6 - 2 ; case 171
	.short _0206E89C - _0206E6F6 - 2 ; case 172
	.short _0206E8A6 - _0206E6F6 - 2 ; case 173
	.short _0206E8B8 - _0206E6F6 - 2 ; case 174
	.short _0206EB7E - _0206E6F6 - 2 ; case 175
	.short _0206EBC0 - _0206E6F6 - 2 ; case 176
	.short _0206EBD8 - _0206E6F6 - 2 ; case 177
	.short _0206EBD8 - _0206E6F6 - 2 ; case 178
	.short _0206EC10 - _0206E6F6 - 2 ; case 179
	.short _0206EB66 - _0206E6F6 - 2 ; case 180
	.short _0206EC1C - _0206E6F6 - 2 ; case 181
	.short _0206EC1C - _0206E6F6 - 2 ; case 182
	.short _0206EC1C - _0206E6F6 - 2 ; case 183
	.short _0206EC1C - _0206E6F6 - 2 ; case 184
	.short _0206EC1C - _0206E6F6 - 2 ; case 185
	.short _0206EC1C - _0206E6F6 - 2 ; case 186
	.short _0206EC32 - _0206E6F6 - 2 ; case 187
_0206E86E:
	mov r4, #0
	b _0206EC36
_0206E872:
	ldr r0, [sp]
	ldr r4, [r0]
	b _0206EC36
_0206E878:
	ldr r0, [sp]
	ldrh r0, [r0, #4]
	lsl r0, r0, #0x1f
	lsr r4, r0, #0x1f
	b _0206EC36
_0206E882:
	ldr r0, [sp]
	ldrh r0, [r0, #4]
	lsl r0, r0, #0x1e
	lsr r4, r0, #0x1f
	b _0206EC36
_0206E88C:
	ldr r0, [sp]
	ldrh r0, [r0, #4]
	lsl r0, r0, #0x1d
	lsr r4, r0, #0x1f
	b _0206EC36
_0206E896:
	ldr r0, [sp]
	ldrh r4, [r0, #6]
	b _0206EC36
_0206E89C:
	ldrh r0, [r5]
	cmp r0, #0
	beq _0206E8D0
	mov r4, #1
	b _0206EC36
_0206E8A6:
	ldr r0, [sp]
	ldrh r0, [r0, #4]
	lsl r0, r0, #0x1d
	lsr r4, r0, #0x1f
	bne _0206E8D0
	ldr r0, [r6, #0x10]
	lsl r0, r0, #1
	lsr r4, r0, #0x1f
	b _0206EC36
_0206E8B8:
	ldrh r4, [r5]
	cmp r4, #0
	beq _0206E8D0
	ldr r0, [r6, #0x10]
	lsl r0, r0, #1
	lsr r0, r0, #0x1f
	bne _0206E8D2
	ldr r0, [sp]
	ldrh r0, [r0, #4]
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1f
	bne _0206E8D2
_0206E8D0:
	b _0206EC36
_0206E8D2:
	ldr r4, _0206EBB0 ; =0x000001EE
	b _0206EC36
_0206E8D6:
	ldrh r0, [r5]
	ldr r1, [r5, #8]
	bl sub_0206FDA8
	add r4, r0, #0
	b _0206EC36
_0206E8E2:
	ldr r0, [sp]
	ldrh r0, [r0, #4]
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1f
	beq _0206E8F0
	ldr r4, _0206EBB0 ; =0x000001EE
	b _0206EC36
_0206E8F0:
	ldrh r4, [r5]
	b _0206EC36
_0206E8F4:
	ldrh r4, [r5, #2]
	b _0206EC36
_0206E8F8:
	ldr r4, [r5, #4]
	b _0206EC36
_0206E8FC:
	ldr r4, [r5, #8]
	b _0206EC36
_0206E900:
	ldrb r4, [r5, #0xc]
	b _0206EC36
_0206E904:
	ldrb r4, [r5, #0xd]
	b _0206EC36
_0206E908:
	ldrb r4, [r5, #0xe]
	b _0206EC36
_0206E90C:
	ldrb r4, [r5, #0xf]
	b _0206EC36
_0206E910:
	ldrb r4, [r5, #0x10]
	b _0206EC36
_0206E914:
	ldrb r4, [r5, #0x11]
	b _0206EC36
_0206E918:
	ldrb r4, [r5, #0x12]
	b _0206EC36
_0206E91C:
	ldrb r4, [r5, #0x13]
	b _0206EC36
_0206E920:
	ldrb r4, [r5, #0x14]
	b _0206EC36
_0206E924:
	ldrb r4, [r5, #0x15]
	b _0206EC36
_0206E928:
	ldrb r4, [r5, #0x16]
	b _0206EC36
_0206E92C:
	ldrb r4, [r5, #0x17]
	b _0206EC36
_0206E930:
	ldrb r4, [r5, #0x18]
	b _0206EC36
_0206E934:
	ldrb r4, [r5, #0x19]
	b _0206EC36
_0206E938:
	ldrb r4, [r5, #0x1a]
	b _0206EC36
_0206E93C:
	ldrb r4, [r5, #0x1b]
	b _0206EC36
_0206E940:
	ldr r2, [sp, #4]
	mov r0, #1
	sub r2, #0x19
	add r1, r4, #0
	str r2, [sp, #4]
	bl _ll_shl
	ldr r2, [r5, #0x1c]
	add r3, r4, #0
	and r3, r1
	and r2, r0
	mov r1, #0
	mov r0, #0
	eor r1, r3
	eor r0, r2
	orr r0, r1
	beq _0206E9DC
	mov r4, #1
	b _0206EC36
_0206E966:
	ldr r0, [sp, #4]
	sub r0, #0x36
	str r0, [sp, #4]
	lsl r0, r0, #1
	ldrh r4, [r6, r0]
	b _0206EC36
_0206E972:
	ldr r0, [sp, #4]
	sub r0, #0x3a
	str r0, [sp, #4]
	add r0, r6, r0
	ldrb r4, [r0, #8]
	b _0206EC36
_0206E97E:
	ldr r0, [sp, #4]
	sub r0, #0x3e
	str r0, [sp, #4]
	add r0, r6, r0
	ldrb r4, [r0, #0xc]
	b _0206EC36
_0206E98A:
	ldr r0, [sp, #4]
	sub r0, #0x42
	str r0, [sp, #4]
	ldr r1, [sp, #4]
	lsl r0, r0, #1
	add r1, r6, r1
	ldrh r0, [r6, r0]
	ldrb r1, [r1, #0xc]
	bl sub_0207332C
	add r4, r0, #0
	b _0206EC36
_0206E9A2:
	ldr r0, [r6, #0x10]
	lsl r0, r0, #0x1b
	lsr r4, r0, #0x1b
	b _0206EC36
_0206E9AA:
	ldr r0, [r6, #0x10]
	lsl r0, r0, #0x16
	lsr r4, r0, #0x1b
	b _0206EC36
_0206E9B2:
	ldr r0, [r6, #0x10]
	lsl r0, r0, #0x11
	lsr r4, r0, #0x1b
	b _0206EC36
_0206E9BA:
	ldr r0, [r6, #0x10]
	lsl r0, r0, #0xc
	lsr r4, r0, #0x1b
	b _0206EC36
_0206E9C2:
	ldr r0, [r6, #0x10]
	lsl r0, r0, #7
	lsr r4, r0, #0x1b
	b _0206EC36
_0206E9CA:
	ldr r0, [r6, #0x10]
	lsl r0, r0, #2
	lsr r4, r0, #0x1b
	b _0206EC36
_0206E9D2:
	ldr r0, [sp]
	ldrh r0, [r0, #4]
	lsl r0, r0, #0x1d
	lsr r4, r0, #0x1f
	beq _0206E9DE
_0206E9DC:
	b _0206EC36
_0206E9DE:
	ldr r0, [r6, #0x10]
	lsl r0, r0, #1
	lsr r4, r0, #0x1f
	b _0206EC36
_0206E9E6:
	ldr r0, [r6, #0x10]
	lsr r4, r0, #0x1f
	b _0206EC36
_0206E9EC:
	ldr r2, [sp, #4]
	mov r0, #1
	sub r2, #0x4e
	add r1, r4, #0
	str r2, [sp, #4]
	bl _ll_shl
	ldr r2, [r6, #0x14]
	add r3, r4, #0
	and r3, r1
	and r2, r0
	mov r1, #0
	mov r0, #0
	eor r1, r3
	eor r0, r2
	orr r0, r1
	beq _0206EAE8
	mov r4, #1
	b _0206EC36
_0206EA12:
	ldrb r0, [r6, #0x18]
	lsl r0, r0, #0x1f
	lsr r4, r0, #0x1f
	b _0206EC36
_0206EA1A:
	ldr r1, [sp]
	ldrh r0, [r5]
	ldr r1, [r1]
	bl sub_0206FFC8
	add r4, r0, #0
	ldrb r0, [r6, #0x18]
	mov r1, #6
	bic r0, r1
	lsl r1, r4, #0x18
	lsr r1, r1, #0x18
	lsl r1, r1, #0x1e
	lsr r1, r1, #0x1d
	orr r0, r1
	strb r0, [r6, #0x18]
	ldr r0, [sp]
	mov r1, #0x80
	add r0, #8
	bl sub_020725E8
	ldr r1, [sp]
	strh r0, [r1, #6]
	b _0206EC36
_0206EA48:
	ldrb r0, [r6, #0x18]
	lsl r0, r0, #0x18
	lsr r4, r0, #0x1b
	b _0206EC36
_0206EA50:
	ldrb r0, [r6, #0x19]
	lsl r0, r0, #0x18
	lsr r4, r0, #0x1e
	b _0206EC36
_0206EA58:
	ldrh r4, [r6, #0x1a]
	b _0206EC36
_0206EA5C:
	ldr r0, [sp]
	ldrh r0, [r0, #4]
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1f
	beq _0206EA72
	ldr r0, _0206EBB4 ; =0x000001EF
	ldr r2, [sp, #8]
	add r1, r4, #0
	bl GetSpeciesNameIntoArray
	b _0206EC36
_0206EA72:
	ldr r1, [sp, #8]
_0206EA74:
	ldrh r0, [r7]
	add r4, r4, #1
	add r7, r7, #2
	strh r0, [r1]
	add r1, r1, #2
	cmp r4, #0xa
	blo _0206EA74
	ldr r2, _0206EBB8 ; =0x0000FFFF
	ldr r0, [sp, #8]
	lsl r1, r4, #1
	strh r2, [r0, r1]
	b _0206EC36
_0206EA8C:
	ldr r0, [r6, #0x10]
	lsr r4, r0, #0x1f
_0206EA90:
	ldr r0, [sp]
	ldrh r0, [r0, #4]
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1f
	beq _0206EAB4
	ldr r0, _0206EBB4 ; =0x000001EF
	mov r1, #0
	bl GetSpeciesName
	add r5, r0, #0
	ldr r0, [sp, #8]
	add r1, r5, #0
	bl StringCopy
	add r0, r5, #0
	bl String_dtor
	b _0206EC36
_0206EAB4:
	ldr r0, [sp, #8]
	add r1, r7, #0
	bl CopyU16ArrayToString
	b _0206EC36
_0206EABE:
	ldrb r4, [r7, #0x16]
	b _0206EC36
_0206EAC2:
	ldrb r4, [r7, #0x17]
	b _0206EC36
_0206EAC6:
	ldr r2, [sp, #4]
	mov r0, #1
	sub r2, #0x7b
	add r1, r4, #0
	str r2, [sp, #4]
	bl _ll_shl
	ldr r3, [r7, #0x18]
	ldr r2, [r7, #0x1c]
	and r3, r0
	and r2, r1
	mov r1, #0
	mov r0, #0
	eor r1, r2
	eor r0, r3
	orr r0, r1
	bne _0206EAEA
_0206EAE8:
	b _0206EC36
_0206EAEA:
	mov r4, #1
	b _0206EC36
_0206EAEE:
	ldr r2, [sp, #8]
_0206EAF0:
	ldrh r0, [r1]
	add r4, r4, #1
	add r1, r1, #2
	strh r0, [r2]
	add r2, r2, #2
	cmp r4, #7
	blo _0206EAF0
	ldr r2, _0206EBB8 ; =0x0000FFFF
	ldr r0, [sp, #8]
	lsl r1, r4, #1
	strh r2, [r0, r1]
	b _0206EC36
_0206EB08:
	ldr r0, [sp, #8]
	bl CopyU16ArrayToString
	b _0206EC36
_0206EB10:
	ldrb r4, [r1, #0x10]
	b _0206EC36
_0206EB14:
	ldrb r4, [r1, #0x11]
	b _0206EC36
_0206EB18:
	ldrb r4, [r1, #0x12]
	b _0206EC36
_0206EB1C:
	ldrb r4, [r1, #0x13]
	b _0206EC36
_0206EB20:
	ldrb r4, [r1, #0x14]
	b _0206EC36
_0206EB24:
	ldrb r4, [r1, #0x15]
	b _0206EC36
_0206EB28:
	ldrh r1, [r1, #0x16]
	ldr r0, _0206EBBC ; =0x00000BBA
	cmp r1, r0
	bne _0206EB36
	ldrh r4, [r6, #0x1c]
	cmp r4, #0
	bne _0206EC36
_0206EB36:
	add r4, r1, #0
	b _0206EC36
_0206EB3A:
	ldrh r1, [r1, #0x18]
	ldr r0, _0206EBBC ; =0x00000BBA
	cmp r1, r0
	bne _0206EB48
	ldrh r4, [r6, #0x1e]
	cmp r4, #0
	bne _0206EC36
_0206EB48:
	add r4, r1, #0
	b _0206EC36
_0206EB4C:
	ldrb r4, [r1, #0x1a]
	b _0206EC36
_0206EB50:
	ldrb r0, [r7, #0x17]
	add r0, #0xf9
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	cmp r0, #1
	bhi _0206EB62
	ldrb r4, [r1, #0x1e]
	cmp r4, #0
	bne _0206EC36
_0206EB62:
	ldrb r4, [r1, #0x1b]
	b _0206EC36
_0206EB66:
	ldrb r4, [r1, #0x1b]
	b _0206EC36
_0206EB6A:
	ldrb r0, [r1, #0x1c]
	lsl r0, r0, #0x19
	lsr r4, r0, #0x19
	b _0206EC36
_0206EB72:
	ldrb r0, [r1, #0x1c]
	lsl r0, r0, #0x18
	lsr r4, r0, #0x1f
	b _0206EC36
_0206EB7A:
	ldrb r4, [r1, #0x1d]
	b _0206EC36
_0206EB7E:
	ldr r4, [r6, #0x10]
	lsl r0, r4, #2
	lsr r0, r0, #0x1b
	lsl r5, r0, #0x19
	lsl r0, r4, #7
	lsr r0, r0, #0x1b
	lsl r3, r0, #0x14
	lsl r0, r4, #0xc
	lsr r0, r0, #0x1b
	lsl r2, r0, #0xf
	lsl r0, r4, #0x11
	lsr r0, r0, #0x1b
	lsl r1, r0, #0xa
	lsl r0, r4, #0x1b
	lsl r4, r4, #0x16
	lsr r4, r4, #0x1b
	lsr r0, r0, #0x1b
	lsl r4, r4, #5
	orr r0, r4
	orr r0, r1
	orr r0, r2
	orr r0, r3
	add r4, r5, #0
	orr r4, r0
	b _0206EC36
	.balign 4, 0
_0206EBB0: .word 0x000001EE
_0206EBB4: .word 0x000001EF
_0206EBB8: .word 0x0000FFFF
_0206EBBC: .word 0x00000BBA
_0206EBC0:
	ldrh r0, [r5]
	cmp r0, #0x1d
	beq _0206EBCA
	cmp r0, #0x20
	bne _0206EBD4
_0206EBCA:
	ldr r0, [r6, #0x10]
	lsr r0, r0, #0x1f
	bne _0206EBD4
	mov r4, #0
	b _0206EC36
_0206EBD4:
	mov r4, #1
	b _0206EC36
_0206EBD8:
	ldrh r0, [r5]
	ldr r1, _0206EC3C ; =0x000001ED
	cmp r0, r1
	bne _0206EBFC
	ldrb r1, [r5, #0xd]
	cmp r1, #0x79
	bne _0206EBFC
	ldrh r0, [r5, #2]
	mov r1, #1
	add r2, r4, #0
	bl sub_02077D88
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	bl sub_02071C28
	add r4, r0, #0
	b _0206EC36
_0206EBFC:
	ldrb r1, [r6, #0x18]
	ldr r2, [sp, #4]
	lsl r1, r1, #0x18
	sub r2, #0xab
	lsr r1, r1, #0x1b
	str r2, [sp, #4]
	bl sub_0206FBC4
	add r4, r0, #0
	b _0206EC36
_0206EC10:
	ldrh r0, [r5]
	ldr r2, [sp, #8]
	add r1, r4, #0
	bl GetSpeciesNameIntoArray
	b _0206EC36
_0206EC1C:
	ldrb r0, [r6, #0x19]
	lsl r0, r0, #0x1a
	lsr r1, r0, #0x1a
	ldr r0, [sp, #4]
	sub r0, #0xb5
	asr r1, r0
	str r0, [sp, #4]
	mov r0, #1
	add r4, r1, #0
	and r4, r0
	b _0206EC36
_0206EC32:
	mov r0, #0x1f
	ldrsb r4, [r1, r0]
_0206EC36:
	add r0, r4, #0
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
	.balign 4, 0
_0206EC3C: .word 0x000001ED
	thumb_func_end sub_0206E6A0

	thumb_func_start sub_0206EC40
sub_0206EC40: ; 0x0206EC40
	push {r4, r5, r6, lr}
	add r5, r0, #0
	ldrh r0, [r5, #4]
	add r4, r1, #0
	add r6, r2, #0
	lsl r0, r0, #0x1f
	lsr r0, r0, #0x1f
	bne _0206EC96
	add r0, r5, #0
	ldr r2, [r5]
	add r0, #0x88
	mov r1, #0x64
	bl sub_020725E0
	add r0, r5, #0
	ldrh r2, [r5, #6]
	add r0, #8
	mov r1, #0x80
	bl sub_020725E0
	add r0, r5, #0
	add r0, #8
	mov r1, #0x80
	bl sub_020725E8
	ldrh r1, [r5, #6]
	cmp r0, r1
	beq _0206EC96
	cmp r0, r1
	beq _0206EC80
	bl GF_AssertFail
_0206EC80:
	ldrh r1, [r5, #4]
	mov r0, #4
	orr r0, r1
	strh r0, [r5, #4]
	ldrh r2, [r5, #6]
	add r0, r5, #0
	add r0, #8
	mov r1, #0x80
	bl MonEncryptSegment
	pop {r4, r5, r6, pc}
_0206EC96:
	add r0, r5, #0
	add r1, r4, #0
	add r2, r6, #0
	bl sub_0206ECD0
	ldrh r0, [r5, #4]
	lsl r0, r0, #0x1f
	lsr r0, r0, #0x1f
	bne _0206ECCC
	add r0, r5, #0
	ldr r2, [r5]
	add r0, #0x88
	mov r1, #0x64
	bl MonEncryptSegment
	add r0, r5, #0
	add r0, #8
	mov r1, #0x80
	bl sub_020725E8
	strh r0, [r5, #6]
	add r0, r5, #0
	ldrh r2, [r5, #6]
	add r0, #8
	mov r1, #0x80
	bl MonEncryptSegment
_0206ECCC:
	pop {r4, r5, r6, pc}
	.balign 4, 0
	thumb_func_end sub_0206EC40

	thumb_func_start sub_0206ECD0
sub_0206ECD0: ; 0x0206ECD0
	push {r3, lr}
	add r3, r0, #0
	add r0, r1, #0
	sub r0, #0xa0
	cmp r0, #0xb
	bhi _0206ED68
	add r0, r0, r0
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_0206ECE8: ; jump table
	.short _0206ED00 - _0206ECE8 - 2 ; case 0
	.short _0206ED08 - _0206ECE8 - 2 ; case 1
	.short _0206ED10 - _0206ECE8 - 2 ; case 2
	.short _0206ED18 - _0206ECE8 - 2 ; case 3
	.short _0206ED20 - _0206ECE8 - 2 ; case 4
	.short _0206ED28 - _0206ECE8 - 2 ; case 5
	.short _0206ED30 - _0206ECE8 - 2 ; case 6
	.short _0206ED38 - _0206ECE8 - 2 ; case 7
	.short _0206ED40 - _0206ECE8 - 2 ; case 8
	.short _0206ED48 - _0206ECE8 - 2 ; case 9
	.short _0206ED50 - _0206ECE8 - 2 ; case 10
	.short _0206ED5C - _0206ECE8 - 2 ; case 11
_0206ED00:
	ldr r0, [r2]
	add r3, #0x88
	str r0, [r3]
	pop {r3, pc}
_0206ED08:
	ldrb r0, [r2]
	add r3, #0x8c
	strb r0, [r3]
	pop {r3, pc}
_0206ED10:
	ldrb r0, [r2]
	add r3, #0x8d
	strb r0, [r3]
	pop {r3, pc}
_0206ED18:
	ldrh r0, [r2]
	add r3, #0x8e
	strh r0, [r3]
	pop {r3, pc}
_0206ED20:
	ldrh r0, [r2]
	add r3, #0x90
	strh r0, [r3]
	pop {r3, pc}
_0206ED28:
	ldrh r0, [r2]
	add r3, #0x92
	strh r0, [r3]
	pop {r3, pc}
_0206ED30:
	ldrh r0, [r2]
	add r3, #0x94
	strh r0, [r3]
	pop {r3, pc}
_0206ED38:
	ldrh r0, [r2]
	add r3, #0x96
	strh r0, [r3]
	pop {r3, pc}
_0206ED40:
	ldrh r0, [r2]
	add r3, #0x98
	strh r0, [r3]
	pop {r3, pc}
_0206ED48:
	ldrh r0, [r2]
	add r3, #0x9a
	strh r0, [r3]
	pop {r3, pc}
_0206ED50:
	add r3, #0x9c
	add r0, r2, #0
	add r1, r3, #0
	bl Mail_copy
	pop {r3, pc}
_0206ED5C:
	add r3, #0xd4
	add r0, r2, #0
	add r1, r3, #0
	bl sub_0202CBDC
	pop {r3, pc}
_0206ED68:
	add r0, r3, #0
	bl sub_0206EDE8
	pop {r3, pc}
	thumb_func_end sub_0206ECD0

	thumb_func_start sub_0206ED70
sub_0206ED70: ; 0x0206ED70
	push {r4, r5, r6, lr}
	add r5, r0, #0
	ldrh r0, [r5, #4]
	add r4, r1, #0
	add r6, r2, #0
	lsl r0, r0, #0x1e
	lsr r0, r0, #0x1f
	bne _0206EDBA
	ldrh r2, [r5, #6]
	add r0, r5, #0
	add r0, #8
	mov r1, #0x80
	bl sub_020725E0
	add r0, r5, #0
	add r0, #8
	mov r1, #0x80
	bl sub_020725E8
	ldrh r1, [r5, #6]
	cmp r0, r1
	beq _0206EDBA
	cmp r0, r1
	beq _0206EDA4
	bl GF_AssertFail
_0206EDA4:
	ldrh r1, [r5, #4]
	mov r0, #4
	orr r0, r1
	strh r0, [r5, #4]
	ldrh r2, [r5, #6]
	add r0, r5, #0
	add r0, #8
	mov r1, #0x80
	bl MonEncryptSegment
	pop {r4, r5, r6, pc}
_0206EDBA:
	add r0, r5, #0
	add r1, r4, #0
	add r2, r6, #0
	bl sub_0206EDE8
	ldrh r0, [r5, #4]
	lsl r0, r0, #0x1e
	lsr r0, r0, #0x1f
	bne _0206EDE4
	add r0, r5, #0
	add r0, #8
	mov r1, #0x80
	bl sub_020725E8
	strh r0, [r5, #6]
	add r0, r5, #0
	ldrh r2, [r5, #6]
	add r0, #8
	mov r1, #0x80
	bl MonEncryptSegment
_0206EDE4:
	pop {r4, r5, r6, pc}
	.balign 4, 0
	thumb_func_end sub_0206ED70

	thumb_func_start sub_0206EDE8
sub_0206EDE8: ; 0x0206EDE8
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x50
	str r1, [sp, #4]
	add r1, r0, #0
	add r4, r2, #0
	ldr r1, [r1]
	str r0, [sp]
	mov r2, #0
	bl sub_02072608
	add r7, r0, #0
	ldr r0, [sp]
	mov r2, #1
	add r1, r0, #0
	ldr r1, [r1]
	bl sub_02072608
	add r5, r0, #0
	ldr r0, [sp]
	mov r2, #2
	add r1, r0, #0
	ldr r1, [r1]
	bl sub_02072608
	str r0, [sp, #8]
	ldr r0, [sp]
	mov r2, #3
	add r1, r0, #0
	ldr r1, [r1]
	bl sub_02072608
	add r6, r0, #0
	ldr r0, [sp, #4]
	cmp r0, #0xbb
	bls _0206EE30
	b _0206F554
_0206EE30:
	add r0, r0, r0
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_0206EE3C: ; jump table
	.short _0206EFB4 - _0206EE3C - 2 ; case 0
	.short _0206EFBE - _0206EE3C - 2 ; case 1
	.short _0206EFDC - _0206EE3C - 2 ; case 2
	.short _0206EFF8 - _0206EE3C - 2 ; case 3
	.short _0206F010 - _0206EE3C - 2 ; case 4
	.short _0206F01A - _0206EE3C - 2 ; case 5
	.short _0206F022 - _0206EE3C - 2 ; case 6
	.short _0206F02A - _0206EE3C - 2 ; case 7
	.short _0206F032 - _0206EE3C - 2 ; case 8
	.short _0206F03A - _0206EE3C - 2 ; case 9
	.short _0206F042 - _0206EE3C - 2 ; case 10
	.short _0206F04A - _0206EE3C - 2 ; case 11
	.short _0206F052 - _0206EE3C - 2 ; case 12
	.short _0206F05A - _0206EE3C - 2 ; case 13
	.short _0206F062 - _0206EE3C - 2 ; case 14
	.short _0206F06A - _0206EE3C - 2 ; case 15
	.short _0206F072 - _0206EE3C - 2 ; case 16
	.short _0206F07A - _0206EE3C - 2 ; case 17
	.short _0206F082 - _0206EE3C - 2 ; case 18
	.short _0206F08A - _0206EE3C - 2 ; case 19
	.short _0206F092 - _0206EE3C - 2 ; case 20
	.short _0206F09A - _0206EE3C - 2 ; case 21
	.short _0206F0A2 - _0206EE3C - 2 ; case 22
	.short _0206F0AA - _0206EE3C - 2 ; case 23
	.short _0206F0B2 - _0206EE3C - 2 ; case 24
	.short _0206F0BA - _0206EE3C - 2 ; case 25
	.short _0206F0BA - _0206EE3C - 2 ; case 26
	.short _0206F0BA - _0206EE3C - 2 ; case 27
	.short _0206F0BA - _0206EE3C - 2 ; case 28
	.short _0206F0BA - _0206EE3C - 2 ; case 29
	.short _0206F0BA - _0206EE3C - 2 ; case 30
	.short _0206F0BA - _0206EE3C - 2 ; case 31
	.short _0206F0BA - _0206EE3C - 2 ; case 32
	.short _0206F0BA - _0206EE3C - 2 ; case 33
	.short _0206F0BA - _0206EE3C - 2 ; case 34
	.short _0206F0BA - _0206EE3C - 2 ; case 35
	.short _0206F0BA - _0206EE3C - 2 ; case 36
	.short _0206F0BA - _0206EE3C - 2 ; case 37
	.short _0206F0BA - _0206EE3C - 2 ; case 38
	.short _0206F0BA - _0206EE3C - 2 ; case 39
	.short _0206F0BA - _0206EE3C - 2 ; case 40
	.short _0206F0BA - _0206EE3C - 2 ; case 41
	.short _0206F0BA - _0206EE3C - 2 ; case 42
	.short _0206F0BA - _0206EE3C - 2 ; case 43
	.short _0206F0BA - _0206EE3C - 2 ; case 44
	.short _0206F0BA - _0206EE3C - 2 ; case 45
	.short _0206F0BA - _0206EE3C - 2 ; case 46
	.short _0206F0BA - _0206EE3C - 2 ; case 47
	.short _0206F0BA - _0206EE3C - 2 ; case 48
	.short _0206F0BA - _0206EE3C - 2 ; case 49
	.short _0206F0BA - _0206EE3C - 2 ; case 50
	.short _0206F0BA - _0206EE3C - 2 ; case 51
	.short _0206F0BA - _0206EE3C - 2 ; case 52
	.short _0206F0BA - _0206EE3C - 2 ; case 53
	.short _0206F0E4 - _0206EE3C - 2 ; case 54
	.short _0206F0E4 - _0206EE3C - 2 ; case 55
	.short _0206F0E4 - _0206EE3C - 2 ; case 56
	.short _0206F0E4 - _0206EE3C - 2 ; case 57
	.short _0206F0F4 - _0206EE3C - 2 ; case 58
	.short _0206F0F4 - _0206EE3C - 2 ; case 59
	.short _0206F0F4 - _0206EE3C - 2 ; case 60
	.short _0206F0F4 - _0206EE3C - 2 ; case 61
	.short _0206F104 - _0206EE3C - 2 ; case 62
	.short _0206F104 - _0206EE3C - 2 ; case 63
	.short _0206F104 - _0206EE3C - 2 ; case 64
	.short _0206F104 - _0206EE3C - 2 ; case 65
	.short _0206F554 - _0206EE3C - 2 ; case 66
	.short _0206F554 - _0206EE3C - 2 ; case 67
	.short _0206F554 - _0206EE3C - 2 ; case 68
	.short _0206F554 - _0206EE3C - 2 ; case 69
	.short _0206F114 - _0206EE3C - 2 ; case 70
	.short _0206F128 - _0206EE3C - 2 ; case 71
	.short _0206F13C - _0206EE3C - 2 ; case 72
	.short _0206F150 - _0206EE3C - 2 ; case 73
	.short _0206F164 - _0206EE3C - 2 ; case 74
	.short _0206F178 - _0206EE3C - 2 ; case 75
	.short _0206F18C - _0206EE3C - 2 ; case 76
	.short _0206F1A0 - _0206EE3C - 2 ; case 77
	.short _0206F1B2 - _0206EE3C - 2 ; case 78
	.short _0206F1B2 - _0206EE3C - 2 ; case 79
	.short _0206F1B2 - _0206EE3C - 2 ; case 80
	.short _0206F1B2 - _0206EE3C - 2 ; case 81
	.short _0206F1B2 - _0206EE3C - 2 ; case 82
	.short _0206F1B2 - _0206EE3C - 2 ; case 83
	.short _0206F1B2 - _0206EE3C - 2 ; case 84
	.short _0206F1B2 - _0206EE3C - 2 ; case 85
	.short _0206F1B2 - _0206EE3C - 2 ; case 86
	.short _0206F1B2 - _0206EE3C - 2 ; case 87
	.short _0206F1B2 - _0206EE3C - 2 ; case 88
	.short _0206F1B2 - _0206EE3C - 2 ; case 89
	.short _0206F1B2 - _0206EE3C - 2 ; case 90
	.short _0206F1B2 - _0206EE3C - 2 ; case 91
	.short _0206F1B2 - _0206EE3C - 2 ; case 92
	.short _0206F1B2 - _0206EE3C - 2 ; case 93
	.short _0206F1B2 - _0206EE3C - 2 ; case 94
	.short _0206F1B2 - _0206EE3C - 2 ; case 95
	.short _0206F1B2 - _0206EE3C - 2 ; case 96
	.short _0206F1B2 - _0206EE3C - 2 ; case 97
	.short _0206F1B2 - _0206EE3C - 2 ; case 98
	.short _0206F1B2 - _0206EE3C - 2 ; case 99
	.short _0206F1B2 - _0206EE3C - 2 ; case 100
	.short _0206F1B2 - _0206EE3C - 2 ; case 101
	.short _0206F1B2 - _0206EE3C - 2 ; case 102
	.short _0206F1B2 - _0206EE3C - 2 ; case 103
	.short _0206F1B2 - _0206EE3C - 2 ; case 104
	.short _0206F1B2 - _0206EE3C - 2 ; case 105
	.short _0206F1B2 - _0206EE3C - 2 ; case 106
	.short _0206F1B2 - _0206EE3C - 2 ; case 107
	.short _0206F1B2 - _0206EE3C - 2 ; case 108
	.short _0206F1B2 - _0206EE3C - 2 ; case 109
	.short _0206F1DC - _0206EE3C - 2 ; case 110
	.short _0206F1F0 - _0206EE3C - 2 ; case 111
	.short _0206F20C - _0206EE3C - 2 ; case 112
	.short _0206F220 - _0206EE3C - 2 ; case 113
	.short _0206F234 - _0206EE3C - 2 ; case 114
	.short _0206F360 - _0206EE3C - 2 ; case 115
	.short _0206F386 - _0206EE3C - 2 ; case 116
	.short _0206F25A - _0206EE3C - 2 ; case 117
	.short _0206F23C - _0206EE3C - 2 ; case 118
	.short _0206F29E - _0206EE3C - 2 ; case 119
	.short _0206F272 - _0206EE3C - 2 ; case 120
	.short _0206F2AC - _0206EE3C - 2 ; case 121
	.short _0206F2B6 - _0206EE3C - 2 ; case 122
	.short _0206F2C0 - _0206EE3C - 2 ; case 123
	.short _0206F2C0 - _0206EE3C - 2 ; case 124
	.short _0206F2C0 - _0206EE3C - 2 ; case 125
	.short _0206F2C0 - _0206EE3C - 2 ; case 126
	.short _0206F2C0 - _0206EE3C - 2 ; case 127
	.short _0206F2C0 - _0206EE3C - 2 ; case 128
	.short _0206F2C0 - _0206EE3C - 2 ; case 129
	.short _0206F2C0 - _0206EE3C - 2 ; case 130
	.short _0206F2C0 - _0206EE3C - 2 ; case 131
	.short _0206F2C0 - _0206EE3C - 2 ; case 132
	.short _0206F2C0 - _0206EE3C - 2 ; case 133
	.short _0206F2C0 - _0206EE3C - 2 ; case 134
	.short _0206F2C0 - _0206EE3C - 2 ; case 135
	.short _0206F2C0 - _0206EE3C - 2 ; case 136
	.short _0206F2C0 - _0206EE3C - 2 ; case 137
	.short _0206F2C0 - _0206EE3C - 2 ; case 138
	.short _0206F2C0 - _0206EE3C - 2 ; case 139
	.short _0206F2C0 - _0206EE3C - 2 ; case 140
	.short _0206F2C0 - _0206EE3C - 2 ; case 141
	.short _0206F2C0 - _0206EE3C - 2 ; case 142
	.short _0206F2C0 - _0206EE3C - 2 ; case 143
	.short _0206F30E - _0206EE3C - 2 ; case 144
	.short _0206F322 - _0206EE3C - 2 ; case 145
	.short _0206F330 - _0206EE3C - 2 ; case 146
	.short _0206F338 - _0206EE3C - 2 ; case 147
	.short _0206F340 - _0206EE3C - 2 ; case 148
	.short _0206F348 - _0206EE3C - 2 ; case 149
	.short _0206F350 - _0206EE3C - 2 ; case 150
	.short _0206F358 - _0206EE3C - 2 ; case 151
	.short _0206F360 - _0206EE3C - 2 ; case 152
	.short _0206F386 - _0206EE3C - 2 ; case 153
	.short _0206F3AC - _0206EE3C - 2 ; case 154
	.short _0206F3B4 - _0206EE3C - 2 ; case 155
	.short _0206F3F2 - _0206EE3C - 2 ; case 156
	.short _0206F406 - _0206EE3C - 2 ; case 157
	.short _0206F41A - _0206EE3C - 2 ; case 158
	.short _0206F554 - _0206EE3C - 2 ; case 159
	.short _0206F554 - _0206EE3C - 2 ; case 160
	.short _0206F554 - _0206EE3C - 2 ; case 161
	.short _0206F554 - _0206EE3C - 2 ; case 162
	.short _0206F554 - _0206EE3C - 2 ; case 163
	.short _0206F554 - _0206EE3C - 2 ; case 164
	.short _0206F554 - _0206EE3C - 2 ; case 165
	.short _0206F554 - _0206EE3C - 2 ; case 166
	.short _0206F554 - _0206EE3C - 2 ; case 167
	.short _0206F554 - _0206EE3C - 2 ; case 168
	.short _0206F554 - _0206EE3C - 2 ; case 169
	.short _0206F554 - _0206EE3C - 2 ; case 170
	.short _0206F554 - _0206EE3C - 2 ; case 171
	.short _0206F554 - _0206EE3C - 2 ; case 172
	.short _0206F554 - _0206EE3C - 2 ; case 173
	.short _0206F554 - _0206EE3C - 2 ; case 174
	.short _0206F422 - _0206EE3C - 2 ; case 175
	.short _0206F554 - _0206EE3C - 2 ; case 176
	.short _0206F554 - _0206EE3C - 2 ; case 177
	.short _0206F554 - _0206EE3C - 2 ; case 178
	.short _0206F4AE - _0206EE3C - 2 ; case 179
	.short _0206F554 - _0206EE3C - 2 ; case 180
	.short _0206F4CA - _0206EE3C - 2 ; case 181
	.short _0206F4CA - _0206EE3C - 2 ; case 182
	.short _0206F4CA - _0206EE3C - 2 ; case 183
	.short _0206F4CA - _0206EE3C - 2 ; case 184
	.short _0206F4CA - _0206EE3C - 2 ; case 185
	.short _0206F4CA - _0206EE3C - 2 ; case 186
	.short _0206F550 - _0206EE3C - 2 ; case 187
_0206EFB4:
	ldr r0, [sp]
	ldr r1, [r4]
	add sp, #0x50
	str r1, [r0]
	pop {r3, r4, r5, r6, r7, pc}
_0206EFBE:
	bl GF_AssertFail
	ldr r0, [sp]
	ldrb r1, [r4]
	ldrh r2, [r0, #4]
	mov r0, #1
	bic r2, r0
	mov r0, #1
	and r0, r1
	add r1, r2, #0
	orr r1, r0
	ldr r0, [sp]
	add sp, #0x50
	strh r1, [r0, #4]
	pop {r3, r4, r5, r6, r7, pc}
_0206EFDC:
	bl GF_AssertFail
	ldr r0, [sp]
	ldrh r1, [r0, #4]
	mov r0, #2
	bic r1, r0
	ldrb r0, [r4]
	lsl r0, r0, #0x1f
	lsr r0, r0, #0x1e
	orr r1, r0
	ldr r0, [sp]
	add sp, #0x50
	strh r1, [r0, #4]
	pop {r3, r4, r5, r6, r7, pc}
_0206EFF8:
	ldr r0, [sp]
	ldrh r1, [r0, #4]
	mov r0, #4
	bic r1, r0
	ldrb r0, [r4]
	lsl r0, r0, #0x1f
	lsr r0, r0, #0x1d
	orr r1, r0
	ldr r0, [sp]
	add sp, #0x50
	strh r1, [r0, #4]
	pop {r3, r4, r5, r6, r7, pc}
_0206F010:
	ldrh r1, [r4]
	ldr r0, [sp]
	add sp, #0x50
	strh r1, [r0, #6]
	pop {r3, r4, r5, r6, r7, pc}
_0206F01A:
	ldrh r0, [r4]
	add sp, #0x50
	strh r0, [r7]
	pop {r3, r4, r5, r6, r7, pc}
_0206F022:
	ldrh r0, [r4]
	add sp, #0x50
	strh r0, [r7, #2]
	pop {r3, r4, r5, r6, r7, pc}
_0206F02A:
	ldr r0, [r4]
	add sp, #0x50
	str r0, [r7, #4]
	pop {r3, r4, r5, r6, r7, pc}
_0206F032:
	ldr r0, [r4]
	add sp, #0x50
	str r0, [r7, #8]
	pop {r3, r4, r5, r6, r7, pc}
_0206F03A:
	ldrb r0, [r4]
	add sp, #0x50
	strb r0, [r7, #0xc]
	pop {r3, r4, r5, r6, r7, pc}
_0206F042:
	ldrb r0, [r4]
	add sp, #0x50
	strb r0, [r7, #0xd]
	pop {r3, r4, r5, r6, r7, pc}
_0206F04A:
	ldrb r0, [r4]
	add sp, #0x50
	strb r0, [r7, #0xe]
	pop {r3, r4, r5, r6, r7, pc}
_0206F052:
	ldrb r0, [r4]
	add sp, #0x50
	strb r0, [r7, #0xf]
	pop {r3, r4, r5, r6, r7, pc}
_0206F05A:
	ldrb r0, [r4]
	add sp, #0x50
	strb r0, [r7, #0x10]
	pop {r3, r4, r5, r6, r7, pc}
_0206F062:
	ldrb r0, [r4]
	add sp, #0x50
	strb r0, [r7, #0x11]
	pop {r3, r4, r5, r6, r7, pc}
_0206F06A:
	ldrb r0, [r4]
	add sp, #0x50
	strb r0, [r7, #0x12]
	pop {r3, r4, r5, r6, r7, pc}
_0206F072:
	ldrb r0, [r4]
	add sp, #0x50
	strb r0, [r7, #0x13]
	pop {r3, r4, r5, r6, r7, pc}
_0206F07A:
	ldrb r0, [r4]
	add sp, #0x50
	strb r0, [r7, #0x14]
	pop {r3, r4, r5, r6, r7, pc}
_0206F082:
	ldrb r0, [r4]
	add sp, #0x50
	strb r0, [r7, #0x15]
	pop {r3, r4, r5, r6, r7, pc}
_0206F08A:
	ldrb r0, [r4]
	add sp, #0x50
	strb r0, [r7, #0x16]
	pop {r3, r4, r5, r6, r7, pc}
_0206F092:
	ldrb r0, [r4]
	add sp, #0x50
	strb r0, [r7, #0x17]
	pop {r3, r4, r5, r6, r7, pc}
_0206F09A:
	ldrb r0, [r4]
	add sp, #0x50
	strb r0, [r7, #0x18]
	pop {r3, r4, r5, r6, r7, pc}
_0206F0A2:
	ldrb r0, [r4]
	add sp, #0x50
	strb r0, [r7, #0x19]
	pop {r3, r4, r5, r6, r7, pc}
_0206F0AA:
	ldrb r0, [r4]
	add sp, #0x50
	strb r0, [r7, #0x1a]
	pop {r3, r4, r5, r6, r7, pc}
_0206F0B2:
	ldrb r0, [r4]
	add sp, #0x50
	strb r0, [r7, #0x1b]
	pop {r3, r4, r5, r6, r7, pc}
_0206F0BA:
	ldr r1, [sp, #4]
	mov r0, #1
	sub r1, #0x19
	str r1, [sp, #4]
	lsl r0, r1
	ldrb r1, [r4]
	cmp r1, #0
	beq _0206F0D4
	ldr r1, [r7, #0x1c]
	add sp, #0x50
	orr r0, r1
	str r0, [r7, #0x1c]
	pop {r3, r4, r5, r6, r7, pc}
_0206F0D4:
	mov r1, #0
	sub r1, r1, #1
	ldr r2, [r7, #0x1c]
	eor r0, r1
	and r0, r2
	add sp, #0x50
	str r0, [r7, #0x1c]
	pop {r3, r4, r5, r6, r7, pc}
_0206F0E4:
	ldr r0, [sp, #4]
	ldrh r1, [r4]
	sub r0, #0x36
	str r0, [sp, #4]
	lsl r0, r0, #1
	add sp, #0x50
	strh r1, [r5, r0]
	pop {r3, r4, r5, r6, r7, pc}
_0206F0F4:
	ldr r0, [sp, #4]
	ldrb r1, [r4]
	sub r0, #0x3a
	str r0, [sp, #4]
	add r0, r5, r0
	strb r1, [r0, #8]
	add sp, #0x50
	pop {r3, r4, r5, r6, r7, pc}
_0206F104:
	ldr r0, [sp, #4]
	ldrb r1, [r4]
	sub r0, #0x3e
	str r0, [sp, #4]
	add r0, r5, r0
	strb r1, [r0, #0xc]
	add sp, #0x50
	pop {r3, r4, r5, r6, r7, pc}
_0206F114:
	ldr r2, [r5, #0x10]
	mov r0, #0x1f
	bic r2, r0
	ldrb r1, [r4]
	mov r0, #0x1f
	add sp, #0x50
	and r0, r1
	orr r0, r2
	str r0, [r5, #0x10]
	pop {r3, r4, r5, r6, r7, pc}
_0206F128:
	ldr r1, [r5, #0x10]
	ldr r0, _0206F47C ; =0xFFFFFC1F
	add sp, #0x50
	and r1, r0
	ldrb r0, [r4]
	lsl r0, r0, #0x1b
	lsr r0, r0, #0x16
	orr r0, r1
	str r0, [r5, #0x10]
	pop {r3, r4, r5, r6, r7, pc}
_0206F13C:
	ldr r1, [r5, #0x10]
	ldr r0, _0206F480 ; =0xFFFF83FF
	add sp, #0x50
	and r1, r0
	ldrb r0, [r4]
	lsl r0, r0, #0x1b
	lsr r0, r0, #0x11
	orr r0, r1
	str r0, [r5, #0x10]
	pop {r3, r4, r5, r6, r7, pc}
_0206F150:
	ldr r1, [r5, #0x10]
	ldr r0, _0206F484 ; =0xFFF07FFF
	add sp, #0x50
	and r1, r0
	ldrb r0, [r4]
	lsl r0, r0, #0x1b
	lsr r0, r0, #0xc
	orr r0, r1
	str r0, [r5, #0x10]
	pop {r3, r4, r5, r6, r7, pc}
_0206F164:
	ldr r1, [r5, #0x10]
	ldr r0, _0206F488 ; =0xFE0FFFFF
	add sp, #0x50
	and r1, r0
	ldrb r0, [r4]
	lsl r0, r0, #0x1b
	lsr r0, r0, #7
	orr r0, r1
	str r0, [r5, #0x10]
	pop {r3, r4, r5, r6, r7, pc}
_0206F178:
	ldr r1, [r5, #0x10]
	ldr r0, _0206F48C ; =0xC1FFFFFF
	add sp, #0x50
	and r1, r0
	ldrb r0, [r4]
	lsl r0, r0, #0x1b
	lsr r0, r0, #2
	orr r0, r1
	str r0, [r5, #0x10]
	pop {r3, r4, r5, r6, r7, pc}
_0206F18C:
	ldr r1, [r5, #0x10]
	ldr r0, _0206F490 ; =0xBFFFFFFF
	add sp, #0x50
	and r1, r0
	ldrb r0, [r4]
	lsl r0, r0, #0x1f
	lsr r0, r0, #1
	orr r0, r1
	str r0, [r5, #0x10]
	pop {r3, r4, r5, r6, r7, pc}
_0206F1A0:
	ldr r1, [r5, #0x10]
	ldr r0, _0206F494 ; =0x7FFFFFFF
	add sp, #0x50
	and r1, r0
	ldrb r0, [r4]
	lsl r0, r0, #0x1f
	orr r0, r1
	str r0, [r5, #0x10]
	pop {r3, r4, r5, r6, r7, pc}
_0206F1B2:
	ldr r1, [sp, #4]
	mov r0, #1
	sub r1, #0x4e
	str r1, [sp, #4]
	lsl r0, r1
	ldrb r1, [r4]
	cmp r1, #0
	beq _0206F1CC
	ldr r1, [r5, #0x14]
	add sp, #0x50
	orr r0, r1
	str r0, [r5, #0x14]
	pop {r3, r4, r5, r6, r7, pc}
_0206F1CC:
	mov r1, #0
	sub r1, r1, #1
	ldr r2, [r5, #0x14]
	eor r0, r1
	and r0, r2
	add sp, #0x50
	str r0, [r5, #0x14]
	pop {r3, r4, r5, r6, r7, pc}
_0206F1DC:
	ldrb r2, [r5, #0x18]
	ldrb r1, [r4]
	mov r0, #1
	bic r2, r0
	mov r0, #1
	and r0, r1
	orr r0, r2
	add sp, #0x50
	strb r0, [r5, #0x18]
	pop {r3, r4, r5, r6, r7, pc}
_0206F1F0:
	ldr r1, [sp]
	ldrh r0, [r7]
	ldr r1, [r1]
	bl sub_0206FFC8
	lsl r0, r0, #0x1e
	ldrb r2, [r5, #0x18]
	mov r1, #6
	lsr r0, r0, #0x1d
	bic r2, r1
	orr r0, r2
	add sp, #0x50
	strb r0, [r5, #0x18]
	pop {r3, r4, r5, r6, r7, pc}
_0206F20C:
	ldrb r1, [r5, #0x18]
	mov r0, #0xf8
	add sp, #0x50
	bic r1, r0
	ldrb r0, [r4]
	lsl r0, r0, #0x1b
	lsr r0, r0, #0x18
	orr r0, r1
	strb r0, [r5, #0x18]
	pop {r3, r4, r5, r6, r7, pc}
_0206F220:
	ldrb r1, [r5, #0x19]
	mov r0, #0xc0
	add sp, #0x50
	bic r1, r0
	ldrb r0, [r4]
	lsl r0, r0, #0x1e
	lsr r0, r0, #0x18
	orr r0, r1
	strb r0, [r5, #0x19]
	pop {r3, r4, r5, r6, r7, pc}
_0206F234:
	ldrh r0, [r4]
	add sp, #0x50
	strh r0, [r5, #0x1a]
	pop {r3, r4, r5, r6, r7, pc}
_0206F23C:
	ldrh r0, [r7]
	mov r1, #0
	add r2, sp, #0x38
	bl GetSpeciesNameIntoArray
	add r0, sp, #0x38
	add r1, r4, #0
	bl StringNotEqual
	ldr r2, [r5, #0x10]
	ldr r1, _0206F494 ; =0x7FFFFFFF
	lsl r0, r0, #0x1f
	and r1, r2
	orr r0, r1
	str r0, [r5, #0x10]
_0206F25A:
	mov r2, #0
_0206F25C:
	ldrh r1, [r4]
	ldr r0, [sp, #8]
	add r2, r2, #1
	strh r1, [r0]
	add r0, r0, #2
	add r4, r4, #2
	str r0, [sp, #8]
	cmp r2, #0xb
	blo _0206F25C
	add sp, #0x50
	pop {r3, r4, r5, r6, r7, pc}
_0206F272:
	ldrh r0, [r7]
	add r2, sp, #0x20
	mov r1, #0
	add r2, #2
	bl GetSpeciesNameIntoArray
	add r0, r4, #0
	add r1, sp, #0xc
	mov r2, #0xb
	bl CopyStringToU16Array
	add r0, sp, #0x20
	add r0, #2
	add r1, sp, #0xc
	bl StringNotEqual
	ldr r2, [r5, #0x10]
	ldr r1, _0206F494 ; =0x7FFFFFFF
	lsl r0, r0, #0x1f
	and r1, r2
	orr r0, r1
	str r0, [r5, #0x10]
_0206F29E:
	ldr r1, [sp, #8]
	add r0, r4, #0
	mov r2, #0xb
	bl CopyStringToU16Array
	add sp, #0x50
	pop {r3, r4, r5, r6, r7, pc}
_0206F2AC:
	ldrb r1, [r4]
	ldr r0, [sp, #8]
	add sp, #0x50
	strb r1, [r0, #0x16]
	pop {r3, r4, r5, r6, r7, pc}
_0206F2B6:
	ldrb r1, [r4]
	ldr r0, [sp, #8]
	add sp, #0x50
	strb r1, [r0, #0x17]
	pop {r3, r4, r5, r6, r7, pc}
_0206F2C0:
	ldr r0, [sp, #4]
	mov r1, #1
	sub r0, #0x7b
	add r2, r1, #0
	ldrb r3, [r4]
	lsl r2, r0
	str r0, [sp, #4]
	asr r0, r2, #0x1f
	cmp r3, #0
	beq _0206F2EC
	ldr r1, [sp, #8]
	ldr r3, [sp, #8]
	add r1, #0x18
	ldr r4, [r3, #0x18]
	ldr r3, [r1, #4]
	orr r2, r4
	orr r3, r0
	ldr r0, [sp, #8]
	add sp, #0x50
	str r2, [r0, #0x18]
	str r3, [r1, #4]
	pop {r3, r4, r5, r6, r7, pc}
_0206F2EC:
	ldr r6, [sp, #8]
	ldr r3, [sp, #8]
	add r6, #0x18
	ldr r4, [r6, #4]
	ldr r5, [r3, #0x18]
	sub r3, r1, #2
	sub r1, r1, #2
	eor r1, r2
	eor r0, r3
	add r2, r4, #0
	and r2, r0
	ldr r0, [sp, #8]
	and r1, r5
	str r1, [r0, #0x18]
	add sp, #0x50
	str r2, [r6, #4]
	pop {r3, r4, r5, r6, r7, pc}
_0206F30E:
	mov r1, #0
_0206F310:
	ldrh r0, [r4]
	add r1, r1, #1
	add r4, r4, #2
	strh r0, [r6]
	add r6, r6, #2
	cmp r1, #8
	blo _0206F310
	add sp, #0x50
	pop {r3, r4, r5, r6, r7, pc}
_0206F322:
	add r0, r4, #0
	add r1, r6, #0
	mov r2, #8
	bl CopyStringToU16Array
	add sp, #0x50
	pop {r3, r4, r5, r6, r7, pc}
_0206F330:
	ldrb r0, [r4]
	add sp, #0x50
	strb r0, [r6, #0x10]
	pop {r3, r4, r5, r6, r7, pc}
_0206F338:
	ldrb r0, [r4]
	add sp, #0x50
	strb r0, [r6, #0x11]
	pop {r3, r4, r5, r6, r7, pc}
_0206F340:
	ldrb r0, [r4]
	add sp, #0x50
	strb r0, [r6, #0x12]
	pop {r3, r4, r5, r6, r7, pc}
_0206F348:
	ldrb r0, [r4]
	add sp, #0x50
	strb r0, [r6, #0x13]
	pop {r3, r4, r5, r6, r7, pc}
_0206F350:
	ldrb r0, [r4]
	add sp, #0x50
	strb r0, [r6, #0x14]
	pop {r3, r4, r5, r6, r7, pc}
_0206F358:
	ldrb r0, [r4]
	add sp, #0x50
	strb r0, [r6, #0x15]
	pop {r3, r4, r5, r6, r7, pc}
_0206F360:
	ldrh r0, [r4]
	cmp r0, #0
	beq _0206F36E
	bl sub_02018000
	cmp r0, #1
	bne _0206F37A
_0206F36E:
	ldrh r0, [r4]
	add sp, #0x50
	strh r0, [r6, #0x16]
	ldrh r0, [r4]
	strh r0, [r5, #0x1c]
	pop {r3, r4, r5, r6, r7, pc}
_0206F37A:
	ldr r0, _0206F498 ; =0x00000BBA
	add sp, #0x50
	strh r0, [r6, #0x16]
	ldrh r0, [r4]
	strh r0, [r5, #0x1c]
	pop {r3, r4, r5, r6, r7, pc}
_0206F386:
	ldrh r0, [r4]
	cmp r0, #0
	beq _0206F394
	bl sub_02018000
	cmp r0, #1
	bne _0206F3A0
_0206F394:
	ldrh r0, [r4]
	add sp, #0x50
	strh r0, [r6, #0x18]
	ldrh r0, [r4]
	strh r0, [r5, #0x1e]
	pop {r3, r4, r5, r6, r7, pc}
_0206F3A0:
	ldr r0, _0206F498 ; =0x00000BBA
	add sp, #0x50
	strh r0, [r6, #0x18]
	ldrh r0, [r4]
	strh r0, [r5, #0x1e]
	pop {r3, r4, r5, r6, r7, pc}
_0206F3AC:
	ldrb r0, [r4]
	add sp, #0x50
	strb r0, [r6, #0x1a]
	pop {r3, r4, r5, r6, r7, pc}
_0206F3B4:
	ldrh r2, [r4]
	cmp r2, #1
	blo _0206F3C8
	cmp r2, #0x10
	bhi _0206F3C8
	strb r2, [r6, #0x1e]
	ldrh r0, [r4]
	add sp, #0x50
	strb r0, [r6, #0x1b]
	pop {r3, r4, r5, r6, r7, pc}
_0206F3C8:
	mov r1, #0x7b
	lsl r1, r1, #2
	cmp r2, r1
	blo _0206F3E4
	add r0, r1, #7
	cmp r2, r0
	bhi _0206F3E4
	sub r1, #0x11
	sub r0, r2, r1
	strb r0, [r6, #0x1e]
	mov r0, #4
	add sp, #0x50
	strb r0, [r6, #0x1b]
	pop {r3, r4, r5, r6, r7, pc}
_0206F3E4:
	cmp r2, #0
	beq _0206F3EA
	b _0206F554
_0206F3EA:
	bl GF_AssertFail
	add sp, #0x50
	pop {r3, r4, r5, r6, r7, pc}
_0206F3F2:
	ldrb r2, [r6, #0x1c]
	ldrb r1, [r4]
	mov r0, #0x7f
	bic r2, r0
	mov r0, #0x7f
	and r0, r1
	orr r0, r2
	add sp, #0x50
	strb r0, [r6, #0x1c]
	pop {r3, r4, r5, r6, r7, pc}
_0206F406:
	ldrb r1, [r6, #0x1c]
	mov r0, #0x80
	add sp, #0x50
	bic r1, r0
	ldrb r0, [r4]
	lsl r0, r0, #0x1f
	lsr r0, r0, #0x18
	orr r0, r1
	strb r0, [r6, #0x1c]
	pop {r3, r4, r5, r6, r7, pc}
_0206F41A:
	ldrb r0, [r4]
	add sp, #0x50
	strb r0, [r6, #0x1d]
	pop {r3, r4, r5, r6, r7, pc}
_0206F422:
	ldr r2, [r5, #0x10]
	mov r0, #0x1f
	bic r2, r0
	ldr r1, [r4]
	mov r0, #0x1f
	and r1, r0
	and r0, r1
	add r1, r2, #0
	orr r1, r0
	ldr r0, _0206F47C ; =0xFFFFFC1F
	str r1, [r5, #0x10]
	and r1, r0
	ldr r0, [r4]
	add sp, #0x50
	lsr r0, r0, #5
	lsl r0, r0, #0x1b
	lsr r0, r0, #0x16
	orr r1, r0
	ldr r0, _0206F480 ; =0xFFFF83FF
	str r1, [r5, #0x10]
	and r1, r0
	ldr r0, [r4]
	lsr r0, r0, #0xa
	lsl r0, r0, #0x1b
	lsr r0, r0, #0x11
	orr r1, r0
	ldr r0, _0206F484 ; =0xFFF07FFF
	str r1, [r5, #0x10]
	and r1, r0
	ldr r0, [r4]
	lsr r0, r0, #0xf
	lsl r0, r0, #0x1b
	lsr r0, r0, #0xc
	orr r1, r0
	ldr r0, _0206F488 ; =0xFE0FFFFF
	str r1, [r5, #0x10]
	and r1, r0
	ldr r0, [r4]
	lsr r0, r0, #0x14
	lsl r0, r0, #0x1b
	lsr r0, r0, #7
	orr r1, r0
	ldr r0, _0206F48C ; =0xC1FFFFFF
	b _0206F49C
	nop
_0206F47C: .word 0xFFFFFC1F
_0206F480: .word 0xFFFF83FF
_0206F484: .word 0xFFF07FFF
_0206F488: .word 0xFE0FFFFF
_0206F48C: .word 0xC1FFFFFF
_0206F490: .word 0xBFFFFFFF
_0206F494: .word 0x7FFFFFFF
_0206F498: .word 0x00000BBA
_0206F49C:
	str r1, [r5, #0x10]
	and r1, r0
	ldr r0, [r4]
	lsr r0, r0, #0x19
	lsl r0, r0, #0x1b
	lsr r0, r0, #2
	orr r0, r1
	str r0, [r5, #0x10]
	pop {r3, r4, r5, r6, r7, pc}
_0206F4AE:
	ldrh r0, [r7]
	mov r1, #0
	bl GetSpeciesName
	ldr r1, [sp, #8]
	add r4, r0, #0
	mov r2, #0xb
	bl CopyStringToU16Array
	add r0, r4, #0
	bl String_dtor
	add sp, #0x50
	pop {r3, r4, r5, r6, r7, pc}
_0206F4CA:
	cmp r4, #0
	bne _0206F4F8
	ldrb r2, [r5, #0x19]
	mov r1, #0x3f
	add r0, r2, #0
	bic r0, r1
	lsl r1, r2, #0x1a
	lsr r3, r1, #0x1a
	ldr r1, [sp, #4]
	mov r2, #1
	sub r1, #0xb5
	str r1, [sp, #4]
	lsl r2, r1
	add r1, r3, #0
	orr r1, r2
	lsl r1, r1, #0x18
	lsr r2, r1, #0x18
	mov r1, #0x3f
	and r1, r2
	orr r0, r1
	add sp, #0x50
	strb r0, [r5, #0x19]
	pop {r3, r4, r5, r6, r7, pc}
_0206F4F8:
	ldrb r0, [r4]
	ldrb r2, [r5, #0x19]
	cmp r0, #0
	beq _0206F528
	mov r1, #0x3f
	add r0, r2, #0
	bic r0, r1
	lsl r1, r2, #0x1a
	lsr r3, r1, #0x1a
	ldr r1, [sp, #4]
	mov r2, #1
	sub r1, #0xb5
	str r1, [sp, #4]
	lsl r2, r1
	add r1, r3, #0
	orr r1, r2
	lsl r1, r1, #0x18
	lsr r2, r1, #0x18
	mov r1, #0x3f
	and r1, r2
	orr r0, r1
	add sp, #0x50
	strb r0, [r5, #0x19]
	pop {r3, r4, r5, r6, r7, pc}
_0206F528:
	mov r0, #0x3f
	add r1, r2, #0
	bic r1, r0
	lsl r0, r2, #0x1a
	ldr r2, [sp, #4]
	mov r3, #1
	sub r2, #0xb5
	str r2, [sp, #4]
	lsl r3, r2
	mov r2, #0x3f
	lsr r0, r0, #0x1a
	eor r3, r2
	and r0, r3
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	and r0, r2
	orr r0, r1
	add sp, #0x50
	strb r0, [r5, #0x19]
	pop {r3, r4, r5, r6, r7, pc}
_0206F550:
	ldrb r0, [r4]
	strb r0, [r6, #0x1f]
_0206F554:
	add sp, #0x50
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_0206EDE8

	thumb_func_start sub_0206F558
sub_0206F558: ; 0x0206F558
	push {r4, r5, r6, lr}
	add r5, r0, #0
	ldrh r0, [r5, #4]
	add r4, r1, #0
	add r6, r2, #0
	lsl r0, r0, #0x1f
	lsr r0, r0, #0x1f
	bne _0206F5A6
	add r0, r5, #0
	ldr r2, [r5]
	add r0, #0x88
	mov r1, #0x64
	bl sub_020725E0
	add r0, r5, #0
	ldrh r2, [r5, #6]
	add r0, #8
	mov r1, #0x80
	bl sub_020725E0
	add r0, r5, #0
	add r0, #8
	mov r1, #0x80
	bl sub_020725E8
	ldrh r1, [r5, #6]
	cmp r0, r1
	beq _0206F5A6
	cmp r0, r1
	beq _0206F598
	bl GF_AssertFail
_0206F598:
	ldrh r2, [r5, #6]
	add r0, r5, #0
	add r0, #8
	mov r1, #0x80
	bl MonEncryptSegment
	pop {r4, r5, r6, pc}
_0206F5A6:
	add r0, r5, #0
	add r1, r4, #0
	add r2, r6, #0
	bl sub_0206F5E0
	ldrh r0, [r5, #4]
	lsl r0, r0, #0x1f
	lsr r0, r0, #0x1f
	bne _0206F5DC
	add r0, r5, #0
	ldr r2, [r5]
	add r0, #0x88
	mov r1, #0x64
	bl MonEncryptSegment
	add r0, r5, #0
	add r0, #8
	mov r1, #0x80
	bl sub_020725E8
	strh r0, [r5, #6]
	add r0, r5, #0
	ldrh r2, [r5, #6]
	add r0, #8
	mov r1, #0x80
	bl MonEncryptSegment
_0206F5DC:
	pop {r4, r5, r6, pc}
	.balign 4, 0
	thumb_func_end sub_0206F558

	thumb_func_start sub_0206F5E0
sub_0206F5E0: ; 0x0206F5E0
	push {r3, lr}
	add r3, r1, #0
	sub r3, #0xa0
	cmp r3, #0xa
	bhi _0206F638
	add r3, r3, r3
	add r3, pc
	ldrh r3, [r3, #6]
	lsl r3, r3, #0x10
	asr r3, r3, #0x10
	add pc, r3
_0206F5F6: ; jump table
	.short _0206F632 - _0206F5F6 - 2 ; case 0
	.short _0206F632 - _0206F5F6 - 2 ; case 1
	.short _0206F632 - _0206F5F6 - 2 ; case 2
	.short _0206F60C - _0206F5F6 - 2 ; case 3
	.short _0206F632 - _0206F5F6 - 2 ; case 4
	.short _0206F632 - _0206F5F6 - 2 ; case 5
	.short _0206F632 - _0206F5F6 - 2 ; case 6
	.short _0206F632 - _0206F5F6 - 2 ; case 7
	.short _0206F632 - _0206F5F6 - 2 ; case 8
	.short _0206F632 - _0206F5F6 - 2 ; case 9
	.short _0206F632 - _0206F5F6 - 2 ; case 10
_0206F60C:
	add r1, r0, #0
	add r1, #0x90
	ldrh r3, [r1]
	add r1, r0, #0
	add r1, #0x8e
	ldrh r1, [r1]
	add r1, r1, r2
	cmp r1, r3
	ble _0206F624
	add r0, #0x8e
	strh r3, [r0]
	pop {r3, pc}
_0206F624:
	add r1, r0, #0
	add r1, #0x8e
	ldrh r1, [r1]
	add r0, #0x8e
	add r1, r1, r2
	strh r1, [r0]
	pop {r3, pc}
_0206F632:
	bl GF_AssertFail
	pop {r3, pc}
_0206F638:
	bl sub_0206F640
	pop {r3, pc}
	.balign 4, 0
	thumb_func_end sub_0206F5E0

	thumb_func_start sub_0206F640
sub_0206F640: ; 0x0206F640
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	add r7, r1, #0
	add r1, r0, #0
	add r6, r2, #0
	ldr r1, [r1]
	str r0, [sp]
	mov r2, #0
	bl sub_02072608
	add r4, r0, #0
	ldr r0, [sp]
	mov r2, #1
	add r1, r0, #0
	ldr r1, [r1]
	bl sub_02072608
	add r5, r0, #0
	ldr r0, [sp]
	mov r2, #2
	add r1, r0, #0
	ldr r1, [r1]
	bl sub_02072608
	ldr r0, [sp]
	mov r2, #3
	add r1, r0, #0
	ldr r1, [r1]
	bl sub_02072608
	cmp r7, #0xba
	bls _0206F682
	b _0206FA50
_0206F682:
	add r0, r7, r7
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_0206F68E: ; jump table
	.short _0206FA50 - _0206F68E - 2 ; case 0
	.short _0206FA50 - _0206F68E - 2 ; case 1
	.short _0206FA50 - _0206F68E - 2 ; case 2
	.short _0206FA50 - _0206F68E - 2 ; case 3
	.short _0206FA50 - _0206F68E - 2 ; case 4
	.short _0206FA50 - _0206F68E - 2 ; case 5
	.short _0206FA50 - _0206F68E - 2 ; case 6
	.short _0206FA50 - _0206F68E - 2 ; case 7
	.short _0206F804 - _0206F68E - 2 ; case 8
	.short _0206F828 - _0206F68E - 2 ; case 9
	.short _0206FA50 - _0206F68E - 2 ; case 10
	.short _0206FA50 - _0206F68E - 2 ; case 11
	.short _0206FA50 - _0206F68E - 2 ; case 12
	.short _0206F83E - _0206F68E - 2 ; case 13
	.short _0206F848 - _0206F68E - 2 ; case 14
	.short _0206F852 - _0206F68E - 2 ; case 15
	.short _0206F85C - _0206F68E - 2 ; case 16
	.short _0206F866 - _0206F68E - 2 ; case 17
	.short _0206F870 - _0206F68E - 2 ; case 18
	.short _0206F87A - _0206F68E - 2 ; case 19
	.short _0206F890 - _0206F68E - 2 ; case 20
	.short _0206F8A6 - _0206F68E - 2 ; case 21
	.short _0206F8BC - _0206F68E - 2 ; case 22
	.short _0206F8D2 - _0206F68E - 2 ; case 23
	.short _0206F8E8 - _0206F68E - 2 ; case 24
	.short _0206FA50 - _0206F68E - 2 ; case 25
	.short _0206FA50 - _0206F68E - 2 ; case 26
	.short _0206FA50 - _0206F68E - 2 ; case 27
	.short _0206FA50 - _0206F68E - 2 ; case 28
	.short _0206FA50 - _0206F68E - 2 ; case 29
	.short _0206FA50 - _0206F68E - 2 ; case 30
	.short _0206FA50 - _0206F68E - 2 ; case 31
	.short _0206FA50 - _0206F68E - 2 ; case 32
	.short _0206FA50 - _0206F68E - 2 ; case 33
	.short _0206FA50 - _0206F68E - 2 ; case 34
	.short _0206FA50 - _0206F68E - 2 ; case 35
	.short _0206FA50 - _0206F68E - 2 ; case 36
	.short _0206FA50 - _0206F68E - 2 ; case 37
	.short _0206FA50 - _0206F68E - 2 ; case 38
	.short _0206FA50 - _0206F68E - 2 ; case 39
	.short _0206FA50 - _0206F68E - 2 ; case 40
	.short _0206FA50 - _0206F68E - 2 ; case 41
	.short _0206FA50 - _0206F68E - 2 ; case 42
	.short _0206FA50 - _0206F68E - 2 ; case 43
	.short _0206FA50 - _0206F68E - 2 ; case 44
	.short _0206FA50 - _0206F68E - 2 ; case 45
	.short _0206FA50 - _0206F68E - 2 ; case 46
	.short _0206FA50 - _0206F68E - 2 ; case 47
	.short _0206FA50 - _0206F68E - 2 ; case 48
	.short _0206FA50 - _0206F68E - 2 ; case 49
	.short _0206FA50 - _0206F68E - 2 ; case 50
	.short _0206FA50 - _0206F68E - 2 ; case 51
	.short _0206FA50 - _0206F68E - 2 ; case 52
	.short _0206FA50 - _0206F68E - 2 ; case 53
	.short _0206FA50 - _0206F68E - 2 ; case 54
	.short _0206FA50 - _0206F68E - 2 ; case 55
	.short _0206FA50 - _0206F68E - 2 ; case 56
	.short _0206FA50 - _0206F68E - 2 ; case 57
	.short _0206F8FE - _0206F68E - 2 ; case 58
	.short _0206F8FE - _0206F68E - 2 ; case 59
	.short _0206F8FE - _0206F68E - 2 ; case 60
	.short _0206F8FE - _0206F68E - 2 ; case 61
	.short _0206F93A - _0206F68E - 2 ; case 62
	.short _0206F93A - _0206F68E - 2 ; case 63
	.short _0206F93A - _0206F68E - 2 ; case 64
	.short _0206F93A - _0206F68E - 2 ; case 65
	.short _0206FA54 - _0206F68E - 2 ; case 66
	.short _0206FA54 - _0206F68E - 2 ; case 67
	.short _0206FA54 - _0206F68E - 2 ; case 68
	.short _0206FA54 - _0206F68E - 2 ; case 69
	.short _0206F954 - _0206F68E - 2 ; case 70
	.short _0206F97E - _0206F68E - 2 ; case 71
	.short _0206F9A8 - _0206F68E - 2 ; case 72
	.short _0206F9D2 - _0206F68E - 2 ; case 73
	.short _0206F9FC - _0206F68E - 2 ; case 74
	.short _0206FA26 - _0206F68E - 2 ; case 75
	.short _0206FA50 - _0206F68E - 2 ; case 76
	.short _0206FA50 - _0206F68E - 2 ; case 77
	.short _0206FA50 - _0206F68E - 2 ; case 78
	.short _0206FA50 - _0206F68E - 2 ; case 79
	.short _0206FA50 - _0206F68E - 2 ; case 80
	.short _0206FA50 - _0206F68E - 2 ; case 81
	.short _0206FA50 - _0206F68E - 2 ; case 82
	.short _0206FA50 - _0206F68E - 2 ; case 83
	.short _0206FA50 - _0206F68E - 2 ; case 84
	.short _0206FA50 - _0206F68E - 2 ; case 85
	.short _0206FA50 - _0206F68E - 2 ; case 86
	.short _0206FA50 - _0206F68E - 2 ; case 87
	.short _0206FA50 - _0206F68E - 2 ; case 88
	.short _0206FA50 - _0206F68E - 2 ; case 89
	.short _0206FA50 - _0206F68E - 2 ; case 90
	.short _0206FA50 - _0206F68E - 2 ; case 91
	.short _0206FA50 - _0206F68E - 2 ; case 92
	.short _0206FA50 - _0206F68E - 2 ; case 93
	.short _0206FA50 - _0206F68E - 2 ; case 94
	.short _0206FA50 - _0206F68E - 2 ; case 95
	.short _0206FA50 - _0206F68E - 2 ; case 96
	.short _0206FA50 - _0206F68E - 2 ; case 97
	.short _0206FA50 - _0206F68E - 2 ; case 98
	.short _0206FA50 - _0206F68E - 2 ; case 99
	.short _0206FA50 - _0206F68E - 2 ; case 100
	.short _0206FA50 - _0206F68E - 2 ; case 101
	.short _0206FA50 - _0206F68E - 2 ; case 102
	.short _0206FA50 - _0206F68E - 2 ; case 103
	.short _0206FA50 - _0206F68E - 2 ; case 104
	.short _0206FA50 - _0206F68E - 2 ; case 105
	.short _0206FA50 - _0206F68E - 2 ; case 106
	.short _0206FA50 - _0206F68E - 2 ; case 107
	.short _0206FA50 - _0206F68E - 2 ; case 108
	.short _0206FA50 - _0206F68E - 2 ; case 109
	.short _0206FA50 - _0206F68E - 2 ; case 110
	.short _0206FA50 - _0206F68E - 2 ; case 111
	.short _0206FA50 - _0206F68E - 2 ; case 112
	.short _0206FA50 - _0206F68E - 2 ; case 113
	.short _0206FA50 - _0206F68E - 2 ; case 114
	.short _0206FA50 - _0206F68E - 2 ; case 115
	.short _0206FA50 - _0206F68E - 2 ; case 116
	.short _0206FA50 - _0206F68E - 2 ; case 117
	.short _0206FA50 - _0206F68E - 2 ; case 118
	.short _0206FA50 - _0206F68E - 2 ; case 119
	.short _0206FA50 - _0206F68E - 2 ; case 120
	.short _0206FA50 - _0206F68E - 2 ; case 121
	.short _0206FA50 - _0206F68E - 2 ; case 122
	.short _0206FA50 - _0206F68E - 2 ; case 123
	.short _0206FA50 - _0206F68E - 2 ; case 124
	.short _0206FA50 - _0206F68E - 2 ; case 125
	.short _0206FA50 - _0206F68E - 2 ; case 126
	.short _0206FA50 - _0206F68E - 2 ; case 127
	.short _0206FA50 - _0206F68E - 2 ; case 128
	.short _0206FA50 - _0206F68E - 2 ; case 129
	.short _0206FA50 - _0206F68E - 2 ; case 130
	.short _0206FA50 - _0206F68E - 2 ; case 131
	.short _0206FA50 - _0206F68E - 2 ; case 132
	.short _0206FA50 - _0206F68E - 2 ; case 133
	.short _0206FA50 - _0206F68E - 2 ; case 134
	.short _0206FA50 - _0206F68E - 2 ; case 135
	.short _0206FA50 - _0206F68E - 2 ; case 136
	.short _0206FA50 - _0206F68E - 2 ; case 137
	.short _0206FA50 - _0206F68E - 2 ; case 138
	.short _0206FA50 - _0206F68E - 2 ; case 139
	.short _0206FA50 - _0206F68E - 2 ; case 140
	.short _0206FA50 - _0206F68E - 2 ; case 141
	.short _0206FA50 - _0206F68E - 2 ; case 142
	.short _0206FA50 - _0206F68E - 2 ; case 143
	.short _0206FA50 - _0206F68E - 2 ; case 144
	.short _0206FA50 - _0206F68E - 2 ; case 145
	.short _0206FA50 - _0206F68E - 2 ; case 146
	.short _0206FA50 - _0206F68E - 2 ; case 147
	.short _0206FA50 - _0206F68E - 2 ; case 148
	.short _0206FA50 - _0206F68E - 2 ; case 149
	.short _0206FA50 - _0206F68E - 2 ; case 150
	.short _0206FA50 - _0206F68E - 2 ; case 151
	.short _0206FA50 - _0206F68E - 2 ; case 152
	.short _0206FA50 - _0206F68E - 2 ; case 153
	.short _0206FA50 - _0206F68E - 2 ; case 154
	.short _0206FA50 - _0206F68E - 2 ; case 155
	.short _0206FA50 - _0206F68E - 2 ; case 156
	.short _0206FA50 - _0206F68E - 2 ; case 157
	.short _0206FA50 - _0206F68E - 2 ; case 158
	.short _0206FA50 - _0206F68E - 2 ; case 159
	.short _0206FA50 - _0206F68E - 2 ; case 160
	.short _0206FA50 - _0206F68E - 2 ; case 161
	.short _0206FA50 - _0206F68E - 2 ; case 162
	.short _0206FA50 - _0206F68E - 2 ; case 163
	.short _0206FA50 - _0206F68E - 2 ; case 164
	.short _0206FA50 - _0206F68E - 2 ; case 165
	.short _0206FA50 - _0206F68E - 2 ; case 166
	.short _0206FA50 - _0206F68E - 2 ; case 167
	.short _0206FA50 - _0206F68E - 2 ; case 168
	.short _0206FA50 - _0206F68E - 2 ; case 169
	.short _0206FA50 - _0206F68E - 2 ; case 170
	.short _0206FA50 - _0206F68E - 2 ; case 171
	.short _0206FA50 - _0206F68E - 2 ; case 172
	.short _0206FA50 - _0206F68E - 2 ; case 173
	.short _0206FA50 - _0206F68E - 2 ; case 174
	.short _0206FA50 - _0206F68E - 2 ; case 175
	.short _0206FA50 - _0206F68E - 2 ; case 176
	.short _0206FA50 - _0206F68E - 2 ; case 177
	.short _0206FA50 - _0206F68E - 2 ; case 178
	.short _0206FA50 - _0206F68E - 2 ; case 179
	.short _0206FA50 - _0206F68E - 2 ; case 180
	.short _0206FA50 - _0206F68E - 2 ; case 181
	.short _0206FA50 - _0206F68E - 2 ; case 182
	.short _0206FA50 - _0206F68E - 2 ; case 183
	.short _0206FA50 - _0206F68E - 2 ; case 184
	.short _0206FA50 - _0206F68E - 2 ; case 185
	.short _0206FA50 - _0206F68E - 2 ; case 186
_0206F804:
	ldrh r0, [r4]
	mov r1, #0x64
	bl sub_0206FD00
	ldr r1, [r4, #8]
	add r1, r1, r6
	cmp r1, r0
	bls _0206F822
	ldrh r0, [r4]
	mov r1, #0x64
	bl sub_0206FD00
	add sp, #0xc
	str r0, [r4, #8]
	pop {r4, r5, r6, r7, pc}
_0206F822:
	add sp, #0xc
	str r1, [r4, #8]
	pop {r4, r5, r6, r7, pc}
_0206F828:
	ldrb r1, [r4, #0xc]
	add r0, r1, r6
	cmp r0, #0xff
	ble _0206F832
	mov r1, #0xff
_0206F832:
	add r1, r1, r6
	bpl _0206F838
	mov r1, #0
_0206F838:
	add sp, #0xc
	strb r1, [r4, #0xc]
	pop {r4, r5, r6, r7, pc}
_0206F83E:
	ldrb r0, [r4, #0x10]
	add sp, #0xc
	add r0, r0, r6
	strb r0, [r4, #0x10]
	pop {r4, r5, r6, r7, pc}
_0206F848:
	ldrb r0, [r4, #0x11]
	add sp, #0xc
	add r0, r0, r6
	strb r0, [r4, #0x11]
	pop {r4, r5, r6, r7, pc}
_0206F852:
	ldrb r0, [r4, #0x12]
	add sp, #0xc
	add r0, r0, r6
	strb r0, [r4, #0x12]
	pop {r4, r5, r6, r7, pc}
_0206F85C:
	ldrb r0, [r4, #0x13]
	add sp, #0xc
	add r0, r0, r6
	strb r0, [r4, #0x13]
	pop {r4, r5, r6, r7, pc}
_0206F866:
	ldrb r0, [r4, #0x14]
	add sp, #0xc
	add r0, r0, r6
	strb r0, [r4, #0x14]
	pop {r4, r5, r6, r7, pc}
_0206F870:
	ldrb r0, [r4, #0x15]
	add sp, #0xc
	add r0, r0, r6
	strb r0, [r4, #0x15]
	pop {r4, r5, r6, r7, pc}
_0206F87A:
	ldrb r0, [r4, #0x16]
	add r0, r0, r6
	cmp r0, #0xff
	ble _0206F88A
	mov r0, #0xff
	add sp, #0xc
	strb r0, [r4, #0x16]
	pop {r4, r5, r6, r7, pc}
_0206F88A:
	add sp, #0xc
	strb r0, [r4, #0x16]
	pop {r4, r5, r6, r7, pc}
_0206F890:
	ldrb r0, [r4, #0x17]
	add r0, r0, r6
	cmp r0, #0xff
	ble _0206F8A0
	mov r0, #0xff
	add sp, #0xc
	strb r0, [r4, #0x17]
	pop {r4, r5, r6, r7, pc}
_0206F8A0:
	add sp, #0xc
	strb r0, [r4, #0x17]
	pop {r4, r5, r6, r7, pc}
_0206F8A6:
	ldrb r0, [r4, #0x18]
	add r0, r0, r6
	cmp r0, #0xff
	ble _0206F8B6
	mov r0, #0xff
	add sp, #0xc
	strb r0, [r4, #0x18]
	pop {r4, r5, r6, r7, pc}
_0206F8B6:
	add sp, #0xc
	strb r0, [r4, #0x18]
	pop {r4, r5, r6, r7, pc}
_0206F8BC:
	ldrb r0, [r4, #0x19]
	add r0, r0, r6
	cmp r0, #0xff
	ble _0206F8CC
	mov r0, #0xff
	add sp, #0xc
	strb r0, [r4, #0x19]
	pop {r4, r5, r6, r7, pc}
_0206F8CC:
	add sp, #0xc
	strb r0, [r4, #0x19]
	pop {r4, r5, r6, r7, pc}
_0206F8D2:
	ldrb r0, [r4, #0x1a]
	add r0, r0, r6
	cmp r0, #0xff
	ble _0206F8E2
	mov r0, #0xff
	add sp, #0xc
	strb r0, [r4, #0x1a]
	pop {r4, r5, r6, r7, pc}
_0206F8E2:
	add sp, #0xc
	strb r0, [r4, #0x1a]
	pop {r4, r5, r6, r7, pc}
_0206F8E8:
	ldrb r0, [r4, #0x1b]
	add r0, r0, r6
	cmp r0, #0xff
	ble _0206F8F8
	mov r0, #0xff
	add sp, #0xc
	strb r0, [r4, #0x1b]
	pop {r4, r5, r6, r7, pc}
_0206F8F8:
	add sp, #0xc
	strb r0, [r4, #0x1b]
	pop {r4, r5, r6, r7, pc}
_0206F8FE:
	add r0, r5, #0
	str r0, [sp, #4]
	add r0, #0xc
	str r0, [sp, #4]
	sub r7, #0x3a
	ldr r1, [sp, #4]
	lsl r0, r7, #1
	str r0, [sp, #8]
	add r4, r5, #0
	ldrh r0, [r5, r0]
	ldrb r1, [r1, r7]
	add r4, #8
	bl sub_0207332C
	ldrb r1, [r4, r7]
	add r1, r6, r1
	cmp r1, r0
	ble _0206F934
	ldr r0, [sp, #8]
	ldr r1, [sp, #4]
	ldrh r0, [r5, r0]
	ldrb r1, [r1, r7]
	bl sub_0207332C
	add sp, #0xc
	strb r0, [r4, r7]
	pop {r4, r5, r6, r7, pc}
_0206F934:
	add sp, #0xc
	strb r1, [r4, r7]
	pop {r4, r5, r6, r7, pc}
_0206F93A:
	add r5, #0xc
	sub r7, #0x3e
	ldrb r0, [r5, r7]
	add r0, r6, r0
	cmp r0, #3
	ble _0206F94E
	mov r0, #3
	add sp, #0xc
	strb r0, [r5, r7]
	pop {r4, r5, r6, r7, pc}
_0206F94E:
	add sp, #0xc
	strb r0, [r5, r7]
	pop {r4, r5, r6, r7, pc}
_0206F954:
	ldr r1, [r5, #0x10]
	lsl r0, r1, #0x1b
	lsr r0, r0, #0x1b
	add r2, r0, r6
	cmp r2, #0x1f
	bls _0206F96E
	mov r0, #0x1f
	bic r1, r0
	mov r0, #0x1f
	orr r0, r1
	add sp, #0xc
	str r0, [r5, #0x10]
	pop {r4, r5, r6, r7, pc}
_0206F96E:
	mov r0, #0x1f
	bic r1, r0
	mov r0, #0x1f
	and r0, r2
	orr r0, r1
	add sp, #0xc
	str r0, [r5, #0x10]
	pop {r4, r5, r6, r7, pc}
_0206F97E:
	ldr r1, [r5, #0x10]
	lsl r0, r1, #0x16
	lsr r0, r0, #0x1b
	add r2, r0, r6
	cmp r2, #0x1f
	ldr r0, _0206FA58 ; =0xFFFFFC1F
	bls _0206F99A
	and r1, r0
	mov r0, #0x3e
	lsl r0, r0, #4
	orr r0, r1
	add sp, #0xc
	str r0, [r5, #0x10]
	pop {r4, r5, r6, r7, pc}
_0206F99A:
	and r1, r0
	lsl r0, r2, #0x1b
	lsr r0, r0, #0x16
	orr r0, r1
	add sp, #0xc
	str r0, [r5, #0x10]
	pop {r4, r5, r6, r7, pc}
_0206F9A8:
	ldr r1, [r5, #0x10]
	lsl r0, r1, #0x11
	lsr r0, r0, #0x1b
	add r2, r0, r6
	cmp r2, #0x1f
	ldr r0, _0206FA5C ; =0xFFFF83FF
	bls _0206F9C4
	and r1, r0
	mov r0, #0x1f
	lsl r0, r0, #0xa
	orr r0, r1
	add sp, #0xc
	str r0, [r5, #0x10]
	pop {r4, r5, r6, r7, pc}
_0206F9C4:
	and r1, r0
	lsl r0, r2, #0x1b
	lsr r0, r0, #0x11
	orr r0, r1
	add sp, #0xc
	str r0, [r5, #0x10]
	pop {r4, r5, r6, r7, pc}
_0206F9D2:
	ldr r1, [r5, #0x10]
	lsl r0, r1, #0xc
	lsr r0, r0, #0x1b
	add r2, r0, r6
	cmp r2, #0x1f
	ldr r0, _0206FA60 ; =0xFFF07FFF
	bls _0206F9EE
	and r1, r0
	mov r0, #0x3e
	lsl r0, r0, #0xe
	orr r0, r1
	add sp, #0xc
	str r0, [r5, #0x10]
	pop {r4, r5, r6, r7, pc}
_0206F9EE:
	and r1, r0
	lsl r0, r2, #0x1b
	lsr r0, r0, #0xc
	orr r0, r1
	add sp, #0xc
	str r0, [r5, #0x10]
	pop {r4, r5, r6, r7, pc}
_0206F9FC:
	ldr r1, [r5, #0x10]
	lsl r0, r1, #7
	lsr r0, r0, #0x1b
	add r2, r0, r6
	cmp r2, #0x1f
	ldr r0, _0206FA64 ; =0xFE0FFFFF
	bls _0206FA18
	and r1, r0
	mov r0, #0x1f
	lsl r0, r0, #0x14
	orr r0, r1
	add sp, #0xc
	str r0, [r5, #0x10]
	pop {r4, r5, r6, r7, pc}
_0206FA18:
	and r1, r0
	lsl r0, r2, #0x1b
	lsr r0, r0, #7
	orr r0, r1
	add sp, #0xc
	str r0, [r5, #0x10]
	pop {r4, r5, r6, r7, pc}
_0206FA26:
	ldr r1, [r5, #0x10]
	lsl r0, r1, #2
	lsr r0, r0, #0x1b
	add r2, r0, r6
	cmp r2, #0x1f
	ldr r0, _0206FA68 ; =0xC1FFFFFF
	bls _0206FA42
	and r1, r0
	mov r0, #0x3e
	lsl r0, r0, #0x18
	orr r0, r1
	add sp, #0xc
	str r0, [r5, #0x10]
	pop {r4, r5, r6, r7, pc}
_0206FA42:
	and r1, r0
	lsl r0, r2, #0x1b
	lsr r0, r0, #2
	orr r0, r1
	add sp, #0xc
	str r0, [r5, #0x10]
	pop {r4, r5, r6, r7, pc}
_0206FA50:
	bl GF_AssertFail
_0206FA54:
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
	.balign 4, 0
_0206FA58: .word 0xFFFFFC1F
_0206FA5C: .word 0xFFFF83FF
_0206FA60: .word 0xFFF07FFF
_0206FA64: .word 0xFE0FFFFF
_0206FA68: .word 0xC1FFFFFF
	thumb_func_end sub_0206F640

	thumb_func_start sub_0206FA6C
sub_0206FA6C: ; 0x0206FA6C
	push {r4, r5, r6, lr}
	add r5, r0, #0
	add r6, r1, #0
	add r0, r2, #0
	mov r1, #0x2c
	bl AllocFromHeap
	add r4, r0, #0
	add r0, r5, #0
	add r1, r6, #0
	add r2, r4, #0
	bl sub_020725B4
	add r0, r4, #0
	pop {r4, r5, r6, pc}
	.balign 4, 0
	thumb_func_end sub_0206FA6C

	thumb_func_start sub_0206FA8C
sub_0206FA8C: ; 0x0206FA8C
	push {r3, r4, r5, lr}
	add r5, r0, #0
	add r0, r1, #0
	mov r1, #0x2c
	bl AllocFromHeap
	add r4, r0, #0
	add r0, r5, #0
	add r1, r4, #0
	bl sub_020725A4
	add r0, r4, #0
	pop {r3, r4, r5, pc}
	.balign 4, 0
	thumb_func_end sub_0206FA8C

	thumb_func_start sub_0206FAA8
sub_0206FAA8: ; 0x0206FAA8
	push {r4, r5, r6, lr}
	add r4, r0, #0
	add r6, r1, #0
	cmp r4, #0
	bne _0206FAB6
	bl GF_AssertFail
_0206FAB6:
	cmp r6, #0x20
	bhi _0206FBAA
	add r0, r6, r6
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_0206FAC6: ; jump table
	.short _0206FB08 - _0206FAC6 - 2 ; case 0
	.short _0206FB0C - _0206FAC6 - 2 ; case 1
	.short _0206FB10 - _0206FAC6 - 2 ; case 2
	.short _0206FB14 - _0206FAC6 - 2 ; case 3
	.short _0206FB18 - _0206FAC6 - 2 ; case 4
	.short _0206FB1C - _0206FAC6 - 2 ; case 5
	.short _0206FB20 - _0206FAC6 - 2 ; case 6
	.short _0206FB24 - _0206FAC6 - 2 ; case 7
	.short _0206FB28 - _0206FAC6 - 2 ; case 8
	.short _0206FB2C - _0206FAC6 - 2 ; case 9
	.short _0206FB30 - _0206FAC6 - 2 ; case 10
	.short _0206FB38 - _0206FAC6 - 2 ; case 11
	.short _0206FB40 - _0206FAC6 - 2 ; case 12
	.short _0206FB48 - _0206FAC6 - 2 ; case 13
	.short _0206FB50 - _0206FAC6 - 2 ; case 14
	.short _0206FB58 - _0206FAC6 - 2 ; case 15
	.short _0206FB60 - _0206FAC6 - 2 ; case 16
	.short _0206FB64 - _0206FAC6 - 2 ; case 17
	.short _0206FB68 - _0206FAC6 - 2 ; case 18
	.short _0206FB6C - _0206FAC6 - 2 ; case 19
	.short _0206FB70 - _0206FAC6 - 2 ; case 20
	.short _0206FB74 - _0206FAC6 - 2 ; case 21
	.short _0206FB78 - _0206FAC6 - 2 ; case 22
	.short _0206FB7C - _0206FAC6 - 2 ; case 23
	.short _0206FB80 - _0206FAC6 - 2 ; case 24
	.short _0206FB84 - _0206FAC6 - 2 ; case 25
	.short _0206FB88 - _0206FAC6 - 2 ; case 26
	.short _0206FB8C - _0206FAC6 - 2 ; case 27
	.short _0206FB94 - _0206FAC6 - 2 ; case 28
	.short _0206FB9C - _0206FAC6 - 2 ; case 29
	.short _0206FBA0 - _0206FAC6 - 2 ; case 30
	.short _0206FBA4 - _0206FAC6 - 2 ; case 31
	.short _0206FBA8 - _0206FAC6 - 2 ; case 32
_0206FB08:
	ldrb r5, [r4]
	b _0206FBAA
_0206FB0C:
	ldrb r5, [r4, #1]
	b _0206FBAA
_0206FB10:
	ldrb r5, [r4, #2]
	b _0206FBAA
_0206FB14:
	ldrb r5, [r4, #3]
	b _0206FBAA
_0206FB18:
	ldrb r5, [r4, #4]
	b _0206FBAA
_0206FB1C:
	ldrb r5, [r4, #5]
	b _0206FBAA
_0206FB20:
	ldrb r5, [r4, #6]
	b _0206FBAA
_0206FB24:
	ldrb r5, [r4, #7]
	b _0206FBAA
_0206FB28:
	ldrb r5, [r4, #8]
	b _0206FBAA
_0206FB2C:
	ldrb r5, [r4, #9]
	b _0206FBAA
_0206FB30:
	ldrh r0, [r4, #0xa]
	lsl r0, r0, #0x1e
	lsr r5, r0, #0x1e
	b _0206FBAA
_0206FB38:
	ldrh r0, [r4, #0xa]
	lsl r0, r0, #0x1c
	lsr r5, r0, #0x1e
	b _0206FBAA
_0206FB40:
	ldrh r0, [r4, #0xa]
	lsl r0, r0, #0x1a
	lsr r5, r0, #0x1e
	b _0206FBAA
_0206FB48:
	ldrh r0, [r4, #0xa]
	lsl r0, r0, #0x18
	lsr r5, r0, #0x1e
	b _0206FBAA
_0206FB50:
	ldrh r0, [r4, #0xa]
	lsl r0, r0, #0x16
	lsr r5, r0, #0x1e
	b _0206FBAA
_0206FB58:
	ldrh r0, [r4, #0xa]
	lsl r0, r0, #0x14
	lsr r5, r0, #0x1e
	b _0206FBAA
_0206FB60:
	ldrh r5, [r4, #0xc]
	b _0206FBAA
_0206FB64:
	ldrh r5, [r4, #0xe]
	b _0206FBAA
_0206FB68:
	ldrb r5, [r4, #0x10]
	b _0206FBAA
_0206FB6C:
	ldrb r5, [r4, #0x11]
	b _0206FBAA
_0206FB70:
	ldrb r5, [r4, #0x12]
	b _0206FBAA
_0206FB74:
	ldrb r5, [r4, #0x13]
	b _0206FBAA
_0206FB78:
	ldrb r5, [r4, #0x14]
	b _0206FBAA
_0206FB7C:
	ldrb r5, [r4, #0x15]
	b _0206FBAA
_0206FB80:
	ldrb r5, [r4, #0x16]
	b _0206FBAA
_0206FB84:
	ldrb r5, [r4, #0x17]
	b _0206FBAA
_0206FB88:
	ldrb r5, [r4, #0x18]
	b _0206FBAA
_0206FB8C:
	ldrb r0, [r4, #0x19]
	lsl r0, r0, #0x19
	lsr r5, r0, #0x19
	b _0206FBAA
_0206FB94:
	ldrb r0, [r4, #0x19]
	lsl r0, r0, #0x18
	lsr r5, r0, #0x1f
	b _0206FBAA
_0206FB9C:
	ldr r5, [r4, #0x1c]
	b _0206FBAA
_0206FBA0:
	ldr r5, [r4, #0x20]
	b _0206FBAA
_0206FBA4:
	ldr r5, [r4, #0x24]
	b _0206FBAA
_0206FBA8:
	ldr r5, [r4, #0x28]
_0206FBAA:
	add r0, r5, #0
	pop {r4, r5, r6, pc}
	.balign 4, 0
	thumb_func_end sub_0206FAA8

	thumb_func_start sub_0206FBB0
sub_0206FBB0: ; 0x0206FBB0
	push {r4, lr}
	add r4, r0, #0
	bne _0206FBBA
	bl GF_AssertFail
_0206FBBA:
	add r0, r4, #0
	bl FreeToHeap
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_0206FBB0

	thumb_func_start sub_0206FBC4
sub_0206FBC4: ; 0x0206FBC4
	push {r3, r4, r5, lr}
	add r4, r2, #0
	bl sub_02072634
	mov r1, #0
	bl sub_0206FA8C
	add r5, r0, #0
	add r1, r4, #0
	bl sub_0206FAA8
	add r4, r0, #0
	add r0, r5, #0
	bl sub_0206FBB0
	add r0, r4, #0
	pop {r3, r4, r5, pc}
	.balign 4, 0
	thumb_func_end sub_0206FBC4

	thumb_func_start sub_0206FBE8
sub_0206FBE8: ; 0x0206FBE8
	push {r3, r4, r5, lr}
	add r4, r1, #0
	mov r1, #0
	bl sub_0206FA8C
	add r5, r0, #0
	add r1, r4, #0
	bl sub_0206FAA8
	add r4, r0, #0
	add r0, r5, #0
	bl sub_0206FBB0
	add r0, r4, #0
	pop {r3, r4, r5, pc}
	.balign 4, 0
	thumb_func_end sub_0206FBE8

	thumb_func_start sub_0206FC08
sub_0206FC08: ; 0x0206FC08
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	add r0, r1, #0
	add r1, r2, #0
	add r6, r3, #0
	bl sub_02072634
	add r7, r0, #0
	mov r0, #0
	mov r1, #0x2c
	bl AllocFromHeap
	add r4, r0, #0
	add r0, r5, #0
	add r1, r7, #0
	add r2, r4, #0
	bl NARC_ReadWholeMember
	add r0, r4, #0
	add r1, r6, #0
	bl sub_0206FAA8
	add r5, r0, #0
	add r0, r4, #0
	bl FreeToHeap
	add r0, r5, #0
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_0206FC08

	thumb_func_start sub_0206FC40
sub_0206FC40: ; 0x0206FC40
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	bl sub_0206DD40
	str r0, [sp]
	add r0, r5, #0
	mov r1, #5
	mov r2, #0
	bl GetMonData
	lsl r0, r0, #0x10
	lsr r6, r0, #0x10
	add r0, r5, #0
	mov r1, #0xa1
	mov r2, #0
	bl GetMonData
	lsl r0, r0, #0x18
	lsr r7, r0, #0x18
	add r0, r6, #0
	add r1, r7, #0
	bl sub_0206FD00
	add r4, r0, #0
	add r0, r6, #0
	add r1, r7, #1
	bl sub_0206FD00
	add r6, r0, #0
	add r0, r5, #0
	mov r1, #8
	mov r2, #0
	bl GetMonData
	add r7, r0, #0
	ldr r1, [sp]
	add r0, r5, #0
	bl sub_0206DD8C
	sub r1, r7, r4
	mov r0, #0x64
	mul r0, r1
	sub r1, r6, r4
	bl _u32_div_f
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_0206FC40

	thumb_func_start sub_0206FCA0
sub_0206FCA0: ; 0x0206FCA0
	ldr r3, _0206FCA4 ; =sub_0206FCA8
	bx r3
	.balign 4, 0
_0206FCA4: .word sub_0206FCA8
	thumb_func_end sub_0206FCA0

	thumb_func_start sub_0206FCA8
sub_0206FCA8: ; 0x0206FCA8
	push {r4, r5, r6, lr}
	mov r1, #5
	mov r2, #0
	add r4, r0, #0
	bl GetBoxMonData
	lsl r0, r0, #0x10
	lsr r6, r0, #0x10
	add r0, r4, #0
	bl sub_0206FD70
	add r0, r0, #1
	lsl r0, r0, #0x10
	lsr r5, r0, #0x10
	add r0, r4, #0
	mov r1, #8
	mov r2, #0
	bl GetBoxMonData
	add r4, r0, #0
	add r0, r6, #0
	add r1, r5, #0
	bl sub_0206FD00
	sub r0, r0, r4
	pop {r4, r5, r6, pc}
	thumb_func_end sub_0206FCA8

	thumb_func_start sub_0206FCDC
sub_0206FCDC: ; 0x0206FCDC
	push {r3, r4, r5, lr}
	add r5, r0, #0
	mov r1, #5
	mov r2, #0
	bl GetMonData
	add r4, r0, #0
	add r0, r5, #0
	mov r1, #0xa1
	mov r2, #0
	bl GetMonData
	add r1, r0, #0
	add r0, r4, #0
	bl sub_0206FD00
	pop {r3, r4, r5, pc}
	.balign 4, 0
	thumb_func_end sub_0206FCDC

	thumb_func_start sub_0206FD00
sub_0206FD00: ; 0x0206FD00
	push {r4, lr}
	add r4, r1, #0
	mov r1, #0x15
	bl sub_0206FBE8
	add r1, r4, #0
	bl sub_0206FD30
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_0206FD00

	thumb_func_start sub_0206FD14
sub_0206FD14: ; 0x0206FD14
	push {r3, r4, r5, lr}
	add r5, r0, #0
	add r4, r1, #0
	cmp r5, #8
	blt _0206FD22
	bl GF_AssertFail
_0206FD22:
	add r0, r4, #0
	mov r1, #3
	add r2, r5, #0
	bl ReadWholeNarcMemberByIdPair
	pop {r3, r4, r5, pc}
	.balign 4, 0
	thumb_func_end sub_0206FD14

	thumb_func_start sub_0206FD30
sub_0206FD30: ; 0x0206FD30
	push {r4, r5, r6, lr}
	add r6, r0, #0
	add r5, r1, #0
	cmp r6, #8
	blt _0206FD3E
	bl GF_AssertFail
_0206FD3E:
	cmp r5, #0x65
	ble _0206FD46
	bl GF_AssertFail
_0206FD46:
	mov r1, #0x65
	mov r0, #0
	lsl r1, r1, #2
	bl AllocFromHeap
	add r4, r0, #0
	add r0, r6, #0
	add r1, r4, #0
	bl sub_0206FD14
	lsl r0, r5, #2
	ldr r5, [r4, r0]
	add r0, r4, #0
	bl FreeToHeap
	add r0, r5, #0
	pop {r4, r5, r6, pc}
	thumb_func_end sub_0206FD30

	thumb_func_start sub_0206FD68
sub_0206FD68: ; 0x0206FD68
	ldr r3, _0206FD6C ; =sub_0206FD70
	bx r3
	.balign 4, 0
_0206FD6C: .word sub_0206FD70
	thumb_func_end sub_0206FD68

	thumb_func_start sub_0206FD70
sub_0206FD70: ; 0x0206FD70
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	bl sub_0206DDD8
	add r6, r0, #0
	add r0, r5, #0
	mov r1, #5
	mov r2, #0
	bl GetBoxMonData
	add r4, r0, #0
	add r0, r5, #0
	mov r1, #8
	mov r2, #0
	bl GetBoxMonData
	add r7, r0, #0
	add r0, r5, #0
	add r1, r6, #0
	bl sub_0206DE00
	lsl r0, r4, #0x10
	lsr r0, r0, #0x10
	add r1, r7, #0
	bl sub_0206FDA8
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_0206FD70

	thumb_func_start sub_0206FDA8
sub_0206FDA8: ; 0x0206FDA8
	push {r4, r5, r6, lr}
	add r4, r1, #0
	add r5, r0, #0
	mov r1, #0
	bl sub_0206FA8C
	add r6, r0, #0
	add r1, r5, #0
	add r2, r4, #0
	bl sub_0206FDCC
	add r4, r0, #0
	add r0, r6, #0
	bl sub_0206FBB0
	add r0, r4, #0
	pop {r4, r5, r6, pc}
	.balign 4, 0
	thumb_func_end sub_0206FDA8

	thumb_func_start sub_0206FDCC
sub_0206FDCC: ; 0x0206FDCC
	push {r4, lr}
	mov r1, #0x15
	add r4, r2, #0
	bl sub_0206FAA8
	ldr r1, _0206FDF4 ; =0x021D421C
	bl sub_0206FD14
	ldr r2, _0206FDF8 ; =0x021D4220
	mov r1, #1
_0206FDE0:
	ldr r0, [r2]
	cmp r0, r4
	bhi _0206FDEE
	add r1, r1, #1
	add r2, r2, #4
	cmp r1, #0x65
	blt _0206FDE0
_0206FDEE:
	sub r0, r1, #1
	pop {r4, pc}
	nop
_0206FDF4: .word 0x021D421C
_0206FDF8: .word 0x021D4220
	thumb_func_end sub_0206FDCC

	thumb_func_start sub_0206FDFC
sub_0206FDFC: ; 0x0206FDFC
	ldr r3, _0206FE00 ; =sub_0206FE04
	bx r3
	.balign 4, 0
_0206FE00: .word sub_0206FE04
	thumb_func_end sub_0206FDFC

	thumb_func_start sub_0206FE04
sub_0206FE04: ; 0x0206FE04
	push {r4, r5, r6, lr}
	add r5, r0, #0
	bl sub_0206DDD8
	mov r1, #0
	add r4, r0, #0
	add r0, r5, #0
	add r2, r1, #0
	bl GetBoxMonData
	add r6, r0, #0
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0206DE00
	add r0, r6, #0
	bl sub_0206FE2C
	pop {r4, r5, r6, pc}
	.balign 4, 0
	thumb_func_end sub_0206FE04

	thumb_func_start sub_0206FE2C
sub_0206FE2C: ; 0x0206FE2C
	push {r3, lr}
	mov r1, #0x19
	bl _u32_div_f
	lsl r0, r1, #0x18
	lsr r0, r0, #0x18
	pop {r3, pc}
	.balign 4, 0
	thumb_func_end sub_0206FE2C

	thumb_func_start sub_0206FE3C
sub_0206FE3C: ; 0x0206FE3C
	push {r3, lr}
	cmp r2, #1
	blo _0206FE46
	cmp r2, #5
	bls _0206FE4A
_0206FE46:
	add r0, r1, #0
	pop {r3, pc}
_0206FE4A:
	lsl r3, r0, #2
	add r3, r0, r3
	ldr r0, _0206FE8C ; =0x020FF639
	sub r2, r2, #1
	add r0, r0, r3
	ldrsb r2, [r2, r0]
	mov r0, #0
	mvn r0, r0
	cmp r2, r0
	beq _0206FE76
	cmp r2, #1
	bne _0206FE88
	mov r0, #0x6e
	mul r0, r1
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	mov r1, #0x64
	bl _s32_div_f
	lsl r0, r0, #0x10
	lsr r1, r0, #0x10
	b _0206FE88
_0206FE76:
	mov r0, #0x5a
	mul r0, r1
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	mov r1, #0x64
	bl _s32_div_f
	lsl r0, r0, #0x10
	lsr r1, r0, #0x10
_0206FE88:
	add r0, r1, #0
	pop {r3, pc}
	.balign 4, 0
_0206FE8C: .word 0x020FF639
	thumb_func_end sub_0206FE3C

	thumb_func_start sub_0206FE90
sub_0206FE90: ; 0x0206FE90
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #8
	add r6, r1, #0
	add r5, r0, #0
	str r2, [sp]
	cmp r6, #5
	bne _0206FEA8
	bl LCRandom
	mov r1, #1
	tst r0, r1
	bne _0206FF7C
_0206FEA8:
	add r0, r5, #0
	mov r1, #0xae
	mov r2, #0
	bl GetMonData
	lsl r0, r0, #0x10
	lsr r1, r0, #0x10
	beq _0206FF7C
	ldr r0, _0206FF80 ; =0x000001EE
	cmp r1, r0
	beq _0206FF7C
	add r0, r5, #0
	mov r1, #6
	mov r2, #0
	bl GetMonData
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	mov r1, #1
	mov r2, #0
	bl sub_02077D88
	lsl r0, r0, #0x18
	mov r4, #0
	lsr r7, r0, #0x18
	add r0, r5, #0
	mov r1, #9
	add r2, r4, #0
	bl GetMonData
	add r1, sp, #4
	strh r0, [r1]
	add r0, r4, #0
	ldrsh r1, [r1, r0]
	cmp r1, #0x64
	blt _0206FEF6
	add r0, r4, #1
	lsl r0, r0, #0x18
	lsr r4, r0, #0x18
_0206FEF6:
	cmp r1, #0xc8
	blt _0206FF00
	add r0, r4, #1
	lsl r0, r0, #0x18
	lsr r4, r0, #0x18
_0206FF00:
	lsl r0, r6, #1
	add r1, r6, r0
	ldr r0, _0206FF84 ; =0x020FF524
	add r0, r0, r1
	ldrsb r4, [r4, r0]
	cmp r4, #0
	ble _0206FF22
	add r0, r5, #0
	mov r1, #0xb4
	mov r2, #0
	bl GetMonData
	cmp r0, #0xb
	bne _0206FF22
	add r0, r4, #1
	lsl r0, r0, #0x18
	asr r4, r0, #0x18
_0206FF22:
	cmp r4, #0
	ble _0206FF3C
	add r0, r5, #0
	mov r1, #0x98
	mov r2, #0
	bl GetMonData
	ldr r1, [sp]
	cmp r1, r0
	bne _0206FF3C
	add r0, r4, #1
	lsl r0, r0, #0x18
	asr r4, r0, #0x18
_0206FF3C:
	cmp r4, #0
	ble _0206FF52
	cmp r7, #0x35
	bne _0206FF52
	mov r0, #0x96
	mul r0, r4
	mov r1, #0x64
	bl _s32_div_f
	lsl r0, r0, #0x18
	asr r4, r0, #0x18
_0206FF52:
	add r0, sp, #4
	mov r1, #0
	ldrsh r2, [r0, r1]
	add r2, r2, r4
	strh r2, [r0]
	ldrsh r2, [r0, r1]
	cmp r2, #0
	bge _0206FF64
	strh r1, [r0]
_0206FF64:
	add r1, sp, #4
	mov r0, #0
	ldrsh r0, [r1, r0]
	cmp r0, #0xff
	ble _0206FF72
	mov r0, #0xff
	strh r0, [r1]
_0206FF72:
	add r0, r5, #0
	mov r1, #9
	add r2, sp, #4
	bl sub_0206EC40
_0206FF7C:
	add sp, #8
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_0206FF80: .word 0x000001EE
_0206FF84: .word 0x020FF524
	thumb_func_end sub_0206FE90

	thumb_func_start sub_0206FF88
sub_0206FF88: ; 0x0206FF88
	ldr r3, _0206FF8C ; =sub_0206FF90
	bx r3
	.balign 4, 0
_0206FF8C: .word sub_0206FF90
	thumb_func_end sub_0206FF88

	thumb_func_start sub_0206FF90
sub_0206FF90: ; 0x0206FF90
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	bl sub_0206DDD8
	add r6, r0, #0
	add r0, r5, #0
	mov r1, #5
	mov r2, #0
	bl GetBoxMonData
	lsl r0, r0, #0x10
	mov r1, #0
	lsr r4, r0, #0x10
	add r0, r5, #0
	add r2, r1, #0
	bl GetBoxMonData
	add r7, r0, #0
	add r0, r5, #0
	add r1, r6, #0
	bl sub_0206DE00
	add r0, r4, #0
	add r1, r7, #0
	bl sub_0206FFC8
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_0206FF90

	thumb_func_start sub_0206FFC8
sub_0206FFC8: ; 0x0206FFC8
	push {r4, r5, r6, lr}
	add r4, r1, #0
	add r5, r0, #0
	mov r1, #0
	bl sub_0206FA8C
	add r6, r0, #0
	add r1, r5, #0
	add r2, r4, #0
	bl sub_0206FFEC
	add r4, r0, #0
	add r0, r6, #0
	bl sub_0206FBB0
	add r0, r4, #0
	pop {r4, r5, r6, pc}
	.balign 4, 0
	thumb_func_end sub_0206FFC8

	thumb_func_start sub_0206FFEC
sub_0206FFEC: ; 0x0206FFEC
	push {r4, lr}
	mov r1, #0x12
	add r4, r2, #0
	bl sub_0206FAA8
	lsl r0, r0, #0x18
	lsr r1, r0, #0x18
	beq _02070006
	cmp r1, #0xfe
	beq _0207000A
	cmp r1, #0xff
	beq _0207000E
	b _02070012
_02070006:
	mov r0, #0
	pop {r4, pc}
_0207000A:
	mov r0, #1
	pop {r4, pc}
_0207000E:
	mov r0, #2
	pop {r4, pc}
_02070012:
	lsl r0, r4, #0x18
	lsr r0, r0, #0x18
	cmp r1, r0
	bls _0207001E
	mov r0, #1
	b _02070020
_0207001E:
	mov r0, #0
_02070020:
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_0206FFEC

	thumb_func_start sub_02070028
sub_02070028: ; 0x02070028
	push {r3, lr}
	mov r1, #6
	mov r2, #0
	bl GetBoxMonData
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	bl sub_02078068
	pop {r3, pc}
	thumb_func_end sub_02070028

	thumb_func_start sub_0207003C
sub_0207003C: ; 0x0207003C
	ldr r3, _02070040 ; =sub_02070044
	bx r3
	.balign 4, 0
_02070040: .word sub_02070044
	thumb_func_end sub_0207003C

	thumb_func_start sub_02070044
sub_02070044: ; 0x02070044
	push {r3, r4, r5, lr}
	mov r1, #7
	mov r2, #0
	add r5, r0, #0
	bl GetBoxMonData
	mov r1, #0
	add r4, r0, #0
	add r0, r5, #0
	add r2, r1, #0
	bl GetBoxMonData
	add r1, r0, #0
	add r0, r4, #0
	bl sub_02070068
	pop {r3, r4, r5, pc}
	.balign 4, 0
	thumb_func_end sub_02070044

	thumb_func_start sub_02070068
sub_02070068: ; 0x02070068
	ldr r3, _02070090 ; =0xFFFF0000
	lsl r2, r1, #0x10
	and r1, r3
	and r3, r0
	lsl r0, r0, #0x10
	lsr r3, r3, #0x10
	lsr r0, r0, #0x10
	lsr r1, r1, #0x10
	eor r0, r3
	lsr r2, r2, #0x10
	eor r0, r1
	eor r0, r2
	cmp r0, #8
	bhs _02070088
	mov r0, #1
	b _0207008A
_02070088:
	mov r0, #0
_0207008A:
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	bx lr
	.balign 4, 0
_02070090: .word 0xFFFF0000
	thumb_func_end sub_02070068

	thumb_func_start sub_02070094
sub_02070094: ; 0x02070094
	push {r3, r4, r5, r6, r7, lr}
	add r7, r0, #0
	ldr r0, _02070120 ; =0xFFFF0000
	and r0, r7
	lsr r1, r0, #0x10
	lsl r0, r7, #0x10
	lsr r0, r0, #0x10
	eor r0, r1
	lsr r7, r0, #3
	bl LCRandom
	mov r1, #7
	and r0, r1
	lsl r0, r0, #0x10
	lsr r6, r0, #0x10
	bl LCRandom
	mov r1, #7
	and r0, r1
	lsl r0, r0, #0x10
	lsr r5, r0, #0x10
	mov r4, #0
_020700C0:
	add r0, r4, #0
	bl sub_020726C0
	tst r0, r7
	beq _020700F0
	bl LCRandom
	mov r1, #1
	tst r0, r1
	beq _020700E2
	add r0, r4, #3
	bl sub_020726C0
	orr r0, r6
	lsl r0, r0, #0x10
	lsr r6, r0, #0x10
	b _02070112
_020700E2:
	add r0, r4, #3
	bl sub_020726C0
	orr r0, r5
	lsl r0, r0, #0x10
	lsr r5, r0, #0x10
	b _02070112
_020700F0:
	bl LCRandom
	mov r1, #1
	tst r0, r1
	beq _02070112
	add r0, r4, #3
	bl sub_020726C0
	orr r0, r6
	lsl r0, r0, #0x10
	lsr r6, r0, #0x10
	add r0, r4, #3
	bl sub_020726C0
	orr r0, r5
	lsl r0, r0, #0x10
	lsr r5, r0, #0x10
_02070112:
	add r4, r4, #1
	cmp r4, #0xd
	blt _020700C0
	lsl r0, r5, #0x10
	orr r0, r6
	pop {r3, r4, r5, r6, r7, pc}
	nop
_02070120: .word 0xFFFF0000
	thumb_func_end sub_02070094

	thumb_func_start sub_02070124
sub_02070124: ; 0x02070124
	push {r3, lr}
	mov r3, #0
	bl sub_0207013C
	pop {r3, pc}
	.balign 4, 0
	thumb_func_end sub_02070124

	thumb_func_start sub_02070130
sub_02070130: ; 0x02070130
	push {r3, lr}
	mov r3, #1
	bl sub_0207013C
	pop {r3, pc}
	.balign 4, 0
	thumb_func_end sub_02070130

	thumb_func_start sub_0207013C
sub_0207013C: ; 0x0207013C
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x20
	add r5, r1, #0
	str r0, [sp, #0xc]
	add r0, r5, #0
	str r2, [sp, #0x10]
	str r3, [sp, #0x14]
	bl sub_0206DDD8
	str r0, [sp, #0x1c]
	add r0, r5, #0
	mov r1, #0xae
	mov r2, #0
	bl GetBoxMonData
	lsl r0, r0, #0x10
	lsr r4, r0, #0x10
	add r0, r5, #0
	bl sub_0206FF90
	str r0, [sp, #0x18]
	add r0, r5, #0
	bl sub_02070044
	mov r1, #0
	add r7, r0, #0
	add r0, r5, #0
	add r2, r1, #0
	bl GetBoxMonData
	add r6, r0, #0
	ldr r0, _020701DC ; =0x000001EE
	cmp r4, r0
	bne _02070198
	add r0, r5, #0
	mov r1, #5
	mov r2, #0
	bl GetBoxMonData
	ldr r1, _020701E0 ; =0x000001EA
	cmp r0, r1
	bne _02070194
	mov r1, #1
	b _020701A6
_02070194:
	mov r1, #0
	b _020701A6
_02070198:
	add r0, r5, #0
	mov r1, #0x70
	mov r2, #0
	bl GetBoxMonData
	lsl r0, r0, #0x18
	lsr r1, r0, #0x18
_020701A6:
	ldr r0, [sp, #0x14]
	str r7, [sp]
	cmp r0, #1
	bne _020701C0
	str r1, [sp, #4]
	str r6, [sp, #8]
	ldr r0, [sp, #0xc]
	ldr r2, [sp, #0x18]
	ldr r3, [sp, #0x10]
	add r1, r4, #0
	bl sub_02070588
	b _020701D0
_020701C0:
	str r1, [sp, #4]
	str r6, [sp, #8]
	ldr r0, [sp, #0xc]
	ldr r2, [sp, #0x18]
	ldr r3, [sp, #0x10]
	add r1, r4, #0
	bl sub_020701E4
_020701D0:
	ldr r1, [sp, #0x1c]
	add r0, r5, #0
	bl sub_0206DE00
	add sp, #0x20
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_020701DC: .word 0x000001EE
_020701E0: .word 0x000001EA
	thumb_func_end sub_0207013C

	thumb_func_start sub_020701E4
sub_020701E4: ; 0x020701E4
	push {r3, r4, r5, r6, r7, lr}
	str r2, [sp]
	add r4, r1, #0
	add r5, r0, #0
	ldr r6, [sp, #0x18]
	ldr r1, [sp, #0x1c]
	mov r0, #0
	strh r0, [r5, #6]
	strb r0, [r5, #8]
	str r0, [r5, #0xc]
	add r0, r4, #0
	add r7, r3, #0
	bl sub_02070438
	ldr r1, _02070430 ; =0x000001A5
	cmp r4, r1
	bgt _0207025E
	blt _0207020A
	b _0207031E
_0207020A:
	add r2, r1, #0
	sub r2, #0x46
	cmp r4, r2
	bgt _0207022C
	sub r1, #0x46
	cmp r4, r1
	blt _0207021A
	b _02070348
_0207021A:
	cmp r4, #0xac
	bgt _02070224
	bne _02070222
	b _020703E4
_02070222:
	b _020703FA
_02070224:
	cmp r4, #0xc9
	bne _0207022A
	b _02070370
_0207022A:
	b _020703FA
_0207022C:
	add r2, r1, #0
	sub r2, #0x23
	cmp r4, r2
	bgt _0207023E
	sub r1, #0x23
	cmp r4, r1
	bne _0207023C
	b _0207035E
_0207023C:
	b _020703FA
_0207023E:
	add r2, r1, #0
	sub r2, #8
	cmp r4, r2
	bgt _0207025C
	add r2, r1, #0
	sub r2, #9
	cmp r4, r2
	blt _0207025C
	add r2, r1, #0
	sub r2, #9
	cmp r4, r2
	beq _020702CA
	sub r1, #8
	cmp r4, r1
	beq _020702E0
_0207025C:
	b _020703FA
_0207025E:
	add r2, r1, #0
	add r2, #0x42
	cmp r4, r2
	bgt _02070290
	add r2, r1, #0
	add r2, #0x42
	cmp r4, r2
	blt _02070270
	b _020703CE
_02070270:
	add r2, r1, #2
	cmp r4, r2
	bgt _02070286
	add r2, r1, #1
	cmp r4, r2
	blt _02070284
	beq _020702F6
	add r1, r1, #2
	cmp r4, r1
	beq _0207030A
_02070284:
	b _020703FA
_02070286:
	add r1, #0x3a
	cmp r4, r1
	bne _0207028E
	b _020703B8
_0207028E:
	b _020703FA
_02070290:
	add r2, r1, #0
	add r2, #0x47
	cmp r4, r2
	bgt _020702A2
	add r1, #0x47
	cmp r4, r1
	bne _020702A0
	b _020703A2
_020702A0:
	b _020703FA
_020702A2:
	add r2, r1, #0
	add r2, #0x4a
	cmp r4, r2
	bgt _020702C8
	add r2, r1, #0
	add r2, #0x48
	cmp r4, r2
	blt _020702C8
	add r2, r1, #0
	add r2, #0x48
	cmp r4, r2
	beq _02070332
	add r2, r1, #0
	add r2, #0x49
	cmp r4, r2
	beq _02070384
	add r1, #0x4a
	cmp r4, r1
	beq _02070394
_020702C8:
	b _020703FA
_020702CA:
	mov r1, #0x72
	strh r1, [r5]
	lsl r1, r0, #1
	lsr r0, r7, #1
	add r0, #0x48
	add r0, r0, r1
	add r6, #0xaa
	strh r0, [r5, #2]
	add r0, r6, r1
	strh r0, [r5, #4]
	pop {r3, r4, r5, r6, r7, pc}
_020702E0:
	mov r1, #0x72
	strh r1, [r5]
	lsl r1, r0, #1
	lsr r0, r7, #1
	add r0, #0x4e
	add r0, r0, r1
	add r6, #0xb0
	strh r0, [r5, #2]
	add r0, r6, r1
	strh r0, [r5, #4]
	pop {r3, r4, r5, r6, r7, pc}
_020702F6:
	mov r1, #0x72
	add r7, #0x54
	strh r1, [r5]
	add r1, r7, r0
	add r6, #0xb6
	lsl r0, r0, #1
	strh r1, [r5, #2]
	add r0, r6, r0
	strh r0, [r5, #4]
	pop {r3, r4, r5, r6, r7, pc}
_0207030A:
	mov r1, #0x72
	add r7, #0x58
	strh r1, [r5]
	add r1, r7, r0
	add r6, #0xba
	lsl r0, r0, #1
	strh r1, [r5, #2]
	add r0, r6, r0
	strh r0, [r5, #4]
	pop {r3, r4, r5, r6, r7, pc}
_0207031E:
	mov r1, #0x72
	add r7, #0x5c
	strh r1, [r5]
	add r1, r7, r0
	strh r1, [r5, #2]
	lsl r1, r6, #1
	add r1, #0xbe
	add r0, r0, r1
	strh r0, [r5, #4]
	pop {r3, r4, r5, r6, r7, pc}
_02070332:
	mov r1, #0x72
	strh r1, [r5]
	lsl r1, r0, #1
	lsr r0, r7, #1
	add r0, #0x60
	add r0, r0, r1
	add r6, #0xc2
	strh r0, [r5, #2]
	add r0, r6, r1
	strh r0, [r5, #4]
	pop {r3, r4, r5, r6, r7, pc}
_02070348:
	mov r1, #0x72
	strh r1, [r5]
	lsl r1, r7, #1
	add r1, #0x40
	add r1, r0, r1
	strh r1, [r5, #2]
	lsl r1, r6, #2
	add r1, #0xa2
	add r0, r0, r1
	strh r0, [r5, #4]
	pop {r3, r4, r5, r6, r7, pc}
_0207035E:
	mov r1, #0x72
	strh r1, [r5]
	lsr r1, r7, #1
	lsl r0, r0, #1
	add r0, r1, r0
	strh r0, [r5, #2]
	add r6, #0x9e
	strh r6, [r5, #4]
	pop {r3, r4, r5, r6, r7, pc}
_02070370:
	mov r1, #0x72
	strh r1, [r5]
	lsr r1, r7, #1
	add r1, #8
	lsl r0, r0, #1
	add r0, r1, r0
	strh r0, [r5, #2]
	add r6, #0xa0
	strh r6, [r5, #4]
	pop {r3, r4, r5, r6, r7, pc}
_02070384:
	mov r1, #0x72
	strh r1, [r5]
	add r1, r0, #0
	add r1, #0x84
	strh r1, [r5, #2]
	add r0, #0xe6
	strh r0, [r5, #4]
	pop {r3, r4, r5, r6, r7, pc}
_02070394:
	mov r0, #0x72
	strh r0, [r5]
	mov r0, #0x84
	strh r0, [r5, #2]
	mov r0, #0xe6
	strh r0, [r5, #4]
	pop {r3, r4, r5, r6, r7, pc}
_020703A2:
	mov r1, #0x72
	strh r1, [r5]
	lsl r1, r0, #1
	lsr r0, r7, #1
	add r0, #0x86
	add r0, r0, r1
	add r6, #0xe8
	strh r0, [r5, #2]
	add r0, r6, r1
	strh r0, [r5, #4]
	pop {r3, r4, r5, r6, r7, pc}
_020703B8:
	mov r1, #0x72
	strh r1, [r5]
	lsl r1, r0, #1
	lsr r0, r7, #1
	add r0, #0x8a
	add r0, r0, r1
	add r6, #0xec
	strh r0, [r5, #2]
	add r0, r6, r1
	strh r0, [r5, #4]
	pop {r3, r4, r5, r6, r7, pc}
_020703CE:
	mov r1, #0x72
	strh r1, [r5]
	lsl r1, r0, #1
	lsr r0, r7, #1
	add r0, #0x96
	add r0, r0, r1
	add r6, #0xf8
	strh r0, [r5, #2]
	add r0, r6, r1
	strh r0, [r5, #4]
	pop {r3, r4, r5, r6, r7, pc}
_020703E4:
	mov r1, #0x72
	strh r1, [r5]
	lsl r1, r0, #1
	lsr r0, r7, #1
	add r0, #0x9a
	add r0, r0, r1
	add r6, #0xfc
	strh r0, [r5, #2]
	add r0, r6, r1
	strh r0, [r5, #4]
	pop {r3, r4, r5, r6, r7, pc}
_020703FA:
	mov r0, #4
	strh r0, [r5]
	ldr r0, [sp]
	cmp r0, #1
	beq _02070408
	mov r1, #1
	b _0207040A
_02070408:
	mov r1, #0
_0207040A:
	mov r0, #6
	mul r0, r4
	add r2, r7, r0
	add r1, r2, r1
	add r0, r0, #4
	strh r1, [r5, #2]
	add r0, r6, r0
	strh r0, [r5, #4]
	ldr r0, _02070434 ; =0x00000147
	cmp r4, r0
	bne _0207042E
	cmp r7, #2
	bne _0207042E
	strh r0, [r5, #6]
	mov r0, #0
	strb r0, [r5, #8]
	ldr r0, [sp, #0x20]
	str r0, [r5, #0xc]
_0207042E:
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_02070430: .word 0x000001A5
_02070434: .word 0x00000147
	thumb_func_end sub_020701E4

	thumb_func_start sub_02070438
sub_02070438: ; 0x02070438
	ldr r2, _0207055C ; =0x000001A5
	cmp r0, r2
	bgt _0207048C
	bge _0207050A
	add r3, r2, #0
	sub r3, #0x46
	cmp r0, r3
	bgt _0207045C
	sub r2, #0x46
	cmp r0, r2
	bge _0207051A
	cmp r0, #0xac
	bgt _02070456
	beq _02070552
	b _02070558
_02070456:
	cmp r0, #0xc9
	beq _0207052A
	b _02070558
_0207045C:
	add r3, r2, #0
	sub r3, #0x23
	cmp r0, r3
	bgt _0207046C
	sub r2, #0x23
	cmp r0, r2
	beq _02070522
	b _02070558
_0207046C:
	add r3, r2, #0
	sub r3, #8
	cmp r0, r3
	bgt _02070558
	add r3, r2, #0
	sub r3, #9
	cmp r0, r3
	blt _02070558
	add r3, r2, #0
	sub r3, #9
	cmp r0, r3
	beq _020704EA
	sub r2, #8
	cmp r0, r2
	beq _020704F2
	b _02070558
_0207048C:
	add r3, r2, #0
	add r3, #0x42
	cmp r0, r3
	bgt _020704BA
	add r3, r2, #0
	add r3, #0x42
	cmp r0, r3
	bge _0207054A
	add r3, r2, #2
	cmp r0, r3
	bgt _020704B2
	add r3, r2, #1
	cmp r0, r3
	blt _02070558
	beq _020704FA
	add r2, r2, #2
	cmp r0, r2
	beq _02070502
	b _02070558
_020704B2:
	add r2, #0x3a
	cmp r0, r2
	beq _02070542
	b _02070558
_020704BA:
	add r3, r2, #0
	add r3, #0x47
	cmp r0, r3
	bgt _020704CA
	add r2, #0x47
	cmp r0, r2
	beq _0207053A
	b _02070558
_020704CA:
	add r3, r2, #0
	add r3, #0x49
	cmp r0, r3
	bgt _02070558
	add r3, r2, #0
	add r3, #0x48
	cmp r0, r3
	blt _02070558
	add r3, r2, #0
	add r3, #0x48
	cmp r0, r3
	beq _02070512
	add r2, #0x49
	cmp r0, r2
	beq _02070532
	b _02070558
_020704EA:
	cmp r1, #2
	bls _02070558
	mov r1, #0
	b _02070558
_020704F2:
	cmp r1, #2
	bls _02070558
	mov r1, #0
	b _02070558
_020704FA:
	cmp r1, #1
	bls _02070558
	mov r1, #0
	b _02070558
_02070502:
	cmp r1, #1
	bls _02070558
	mov r1, #0
	b _02070558
_0207050A:
	cmp r1, #1
	bls _02070558
	mov r1, #0
	b _02070558
_02070512:
	cmp r1, #0x11
	bls _02070558
	mov r1, #0
	b _02070558
_0207051A:
	cmp r1, #3
	bls _02070558
	mov r1, #0
	b _02070558
_02070522:
	cmp r1, #3
	bls _02070558
	mov r1, #0
	b _02070558
_0207052A:
	cmp r1, #0x1c
	blo _02070558
	mov r1, #0
	b _02070558
_02070532:
	cmp r1, #1
	bls _02070558
	mov r1, #0
	b _02070558
_0207053A:
	cmp r1, #1
	bls _02070558
	mov r1, #0
	b _02070558
_02070542:
	cmp r1, #5
	bls _02070558
	mov r1, #0
	b _02070558
_0207054A:
	cmp r1, #1
	bls _02070558
	mov r1, #0
	b _02070558
_02070552:
	cmp r1, #1
	bls _02070558
	mov r1, #0
_02070558:
	add r0, r1, #0
	bx lr
	.balign 4, 0
_0207055C: .word 0x000001A5
	thumb_func_end sub_02070438

	thumb_func_start sub_02070560
sub_02070560: ; 0x02070560
	push {r3, r4}
	mov r4, #0xc2
	strh r4, [r0]
	cmp r3, #1
	beq _0207056E
	mov r4, #1
	b _02070570
_0207056E:
	mov r4, #0
_02070570:
	mov r3, #6
	mul r3, r1
	add r1, r2, r3
	add r1, r1, r4
	strh r1, [r0, #2]
	ldr r2, [sp, #8]
	add r1, r3, #4
	add r1, r2, r1
	strh r1, [r0, #4]
	pop {r3, r4}
	bx lr
	.balign 4, 0
	thumb_func_end sub_02070560

	thumb_func_start sub_02070588
sub_02070588: ; 0x02070588
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #8
	str r2, [sp, #4]
	add r4, r1, #0
	add r5, r0, #0
	ldr r6, [sp, #0x20]
	ldr r1, [sp, #0x24]
	mov r0, #0
	strh r0, [r5, #6]
	strb r0, [r5, #8]
	str r0, [r5, #0xc]
	add r0, r4, #0
	add r7, r3, #0
	bl sub_02070438
	ldr r1, _02070834 ; =0x000001A5
	cmp r4, r1
	bgt _02070604
	blt _020705B0
	b _020706CC
_020705B0:
	add r2, r1, #0
	sub r2, #0x46
	cmp r4, r2
	bgt _020705D2
	sub r1, #0x46
	cmp r4, r1
	blt _020705C0
	b _020706FA
_020705C0:
	cmp r4, #0xac
	bgt _020705CA
	bne _020705C8
	b _020707E6
_020705C8:
	b _0207080E
_020705CA:
	cmp r4, #0xc9
	bne _020705D0
	b _02070726
_020705D0:
	b _0207080E
_020705D2:
	add r2, r1, #0
	sub r2, #0x23
	cmp r4, r2
	bgt _020705E4
	sub r1, #0x23
	cmp r4, r1
	bne _020705E2
	b _02070712
_020705E2:
	b _0207080E
_020705E4:
	add r2, r1, #0
	sub r2, #8
	cmp r4, r2
	bgt _02070602
	add r2, r1, #0
	sub r2, #9
	cmp r4, r2
	blt _02070602
	add r2, r1, #0
	sub r2, #9
	cmp r4, r2
	beq _02070670
	sub r1, #8
	cmp r4, r1
	beq _02070688
_02070602:
	b _0207080E
_02070604:
	add r2, r1, #0
	add r2, #0x42
	cmp r4, r2
	bgt _02070636
	add r2, r1, #0
	add r2, #0x42
	cmp r4, r2
	blt _02070616
	b _020707B8
_02070616:
	add r2, r1, #2
	cmp r4, r2
	bgt _0207062C
	add r2, r1, #1
	cmp r4, r2
	blt _0207062A
	beq _020706A0
	add r1, r1, #2
	cmp r4, r1
	beq _020706B6
_0207062A:
	b _0207080E
_0207062C:
	add r1, #0x3a
	cmp r4, r1
	bne _02070634
	b _0207078A
_02070634:
	b _0207080E
_02070636:
	add r2, r1, #0
	add r2, #0x47
	cmp r4, r2
	bgt _02070648
	add r1, #0x47
	cmp r4, r1
	bne _02070646
	b _0207075E
_02070646:
	b _0207080E
_02070648:
	add r2, r1, #0
	add r2, #0x4a
	cmp r4, r2
	bgt _0207066E
	add r2, r1, #0
	add r2, #0x48
	cmp r4, r2
	blt _0207066E
	add r2, r1, #0
	add r2, #0x48
	cmp r4, r2
	beq _020706E2
	add r2, r1, #0
	add r2, #0x49
	cmp r4, r2
	beq _0207073C
	add r1, #0x4a
	cmp r4, r1
	beq _0207074E
_0207066E:
	b _0207080E
_02070670:
	mov r1, #0xc3
	strh r1, [r5]
	lsl r1, r0, #1
	lsr r0, r7, #1
	add r0, #0x48
	add r0, r0, r1
	add r6, #0x92
	strh r0, [r5, #2]
	add r0, r6, r1
	add sp, #8
	strh r0, [r5, #4]
	pop {r3, r4, r5, r6, r7, pc}
_02070688:
	mov r1, #0xc3
	strh r1, [r5]
	lsl r1, r0, #1
	lsr r0, r7, #1
	add r0, #0x4e
	add r0, r0, r1
	add r6, #0x98
	strh r0, [r5, #2]
	add r0, r6, r1
	add sp, #8
	strh r0, [r5, #4]
	pop {r3, r4, r5, r6, r7, pc}
_020706A0:
	mov r1, #0xc3
	add r7, #0x54
	strh r1, [r5]
	add r1, r7, r0
	add r6, #0x9e
	lsl r0, r0, #1
	strh r1, [r5, #2]
	add r0, r6, r0
	add sp, #8
	strh r0, [r5, #4]
	pop {r3, r4, r5, r6, r7, pc}
_020706B6:
	mov r1, #0xc3
	add r7, #0x58
	strh r1, [r5]
	add r1, r7, r0
	add r6, #0xa2
	lsl r0, r0, #1
	strh r1, [r5, #2]
	add r0, r6, r0
	add sp, #8
	strh r0, [r5, #4]
	pop {r3, r4, r5, r6, r7, pc}
_020706CC:
	mov r1, #0xc3
	add r7, #0x5c
	strh r1, [r5]
	add r1, r7, r0
	strh r1, [r5, #2]
	lsl r1, r6, #1
	add r1, #0xa6
	add r0, r0, r1
	add sp, #8
	strh r0, [r5, #4]
	pop {r3, r4, r5, r6, r7, pc}
_020706E2:
	mov r1, #0xc3
	strh r1, [r5]
	lsl r1, r0, #1
	lsr r0, r7, #1
	add r0, #0x60
	add r0, r0, r1
	add r6, #0xaa
	strh r0, [r5, #2]
	add r0, r6, r1
	add sp, #8
	strh r0, [r5, #4]
	pop {r3, r4, r5, r6, r7, pc}
_020706FA:
	mov r1, #0xc3
	strh r1, [r5]
	lsl r1, r7, #1
	add r1, #0x40
	add r1, r0, r1
	strh r1, [r5, #2]
	lsl r1, r6, #2
	add r1, #0x8a
	add r0, r0, r1
	add sp, #8
	strh r0, [r5, #4]
	pop {r3, r4, r5, r6, r7, pc}
_02070712:
	mov r1, #0xc3
	strh r1, [r5]
	lsr r1, r7, #1
	lsl r0, r0, #1
	add r0, r1, r0
	strh r0, [r5, #2]
	add r6, #0x86
	add sp, #8
	strh r6, [r5, #4]
	pop {r3, r4, r5, r6, r7, pc}
_02070726:
	mov r1, #0xc3
	strh r1, [r5]
	lsr r1, r7, #1
	add r1, #8
	lsl r0, r0, #1
	add r0, r1, r0
	strh r0, [r5, #2]
	add r6, #0x88
	add sp, #8
	strh r6, [r5, #4]
	pop {r3, r4, r5, r6, r7, pc}
_0207073C:
	mov r1, #0xc3
	strh r1, [r5]
	add r1, r0, #0
	add r1, #0x84
	strh r1, [r5, #2]
	add r0, #0xce
	add sp, #8
	strh r0, [r5, #4]
	pop {r3, r4, r5, r6, r7, pc}
_0207074E:
	mov r0, #0xc3
	strh r0, [r5]
	mov r0, #0x84
	strh r0, [r5, #2]
	mov r0, #0xce
	add sp, #8
	strh r0, [r5, #4]
	pop {r3, r4, r5, r6, r7, pc}
_0207075E:
	cmp r0, #0
	beq _02070778
	mov r1, #0x72
	strh r1, [r5]
	lsr r1, r7, #1
	add r1, #0x86
	lsl r0, r0, #1
	add r0, r1, r0
	strh r0, [r5, #2]
	add r6, #0xea
	add sp, #8
	strh r6, [r5, #4]
	pop {r3, r4, r5, r6, r7, pc}
_02070778:
	str r6, [sp]
	ldr r3, [sp, #4]
	add r0, r5, #0
	add r1, r4, #0
	add r2, r7, #0
	bl sub_02070560
	add sp, #8
	pop {r3, r4, r5, r6, r7, pc}
_0207078A:
	cmp r0, #0
	beq _020707A6
	mov r1, #0x72
	strh r1, [r5]
	lsl r1, r0, #1
	lsr r0, r7, #1
	add r0, #0x8a
	add r0, r0, r1
	add r6, #0xec
	strh r0, [r5, #2]
	add r0, r6, r1
	add sp, #8
	strh r0, [r5, #4]
	pop {r3, r4, r5, r6, r7, pc}
_020707A6:
	str r6, [sp]
	ldr r3, [sp, #4]
	add r0, r5, #0
	add r1, r4, #0
	add r2, r7, #0
	bl sub_02070560
	add sp, #8
	pop {r3, r4, r5, r6, r7, pc}
_020707B8:
	cmp r0, #0
	beq _020707D4
	mov r1, #0x72
	strh r1, [r5]
	lsl r1, r0, #1
	lsr r0, r7, #1
	add r0, #0x96
	add r0, r0, r1
	add r6, #0xf8
	strh r0, [r5, #2]
	add r0, r6, r1
	add sp, #8
	strh r0, [r5, #4]
	pop {r3, r4, r5, r6, r7, pc}
_020707D4:
	str r6, [sp]
	ldr r3, [sp, #4]
	add r0, r5, #0
	add r1, r4, #0
	add r2, r7, #0
	bl sub_02070560
	add sp, #8
	pop {r3, r4, r5, r6, r7, pc}
_020707E6:
	cmp r0, #0
	beq _020707FC
	mov r0, #0x72
	strh r0, [r5]
	lsr r0, r7, #1
	add r0, #0x9c
	strh r0, [r5, #2]
	add r6, #0xfe
	add sp, #8
	strh r6, [r5, #4]
	pop {r3, r4, r5, r6, r7, pc}
_020707FC:
	str r6, [sp]
	ldr r3, [sp, #4]
	add r0, r5, #0
	add r1, r4, #0
	add r2, r7, #0
	bl sub_02070560
	add sp, #8
	pop {r3, r4, r5, r6, r7, pc}
_0207080E:
	str r6, [sp]
	ldr r3, [sp, #4]
	add r0, r5, #0
	add r1, r4, #0
	add r2, r7, #0
	bl sub_02070560
	ldr r0, _02070838 ; =0x00000147
	cmp r4, r0
	bne _02070830
	cmp r7, #2
	bne _02070830
	strh r0, [r5, #6]
	mov r0, #0
	strb r0, [r5, #8]
	ldr r0, [sp, #0x28]
	str r0, [r5, #0xc]
_02070830:
	add sp, #8
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_02070834: .word 0x000001A5
_02070838: .word 0x00000147
	thumb_func_end sub_02070588

	thumb_func_start sub_0207083C
sub_0207083C: ; 0x0207083C
	ldr r3, _02070844 ; =sub_02070854
	mov r2, #0
	bx r3
	nop
_02070844: .word sub_02070854
	thumb_func_end sub_0207083C

	thumb_func_start sub_02070848
sub_02070848: ; 0x02070848
	ldr r3, _02070850 ; =sub_02070854
	mov r2, #1
	bx r3
	nop
_02070850: .word sub_02070854
	thumb_func_end sub_02070848

	thumb_func_start sub_02070854
sub_02070854: ; 0x02070854
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	add r7, r1, #0
	str r2, [sp, #4]
	mov r1, #0xae
	mov r2, #0
	add r5, r0, #0
	bl GetBoxMonData
	lsl r0, r0, #0x10
	lsr r4, r0, #0x10
	add r0, r5, #0
	bl sub_0206FF90
	mov r1, #0
	str r0, [sp, #8]
	add r0, r5, #0
	add r2, r1, #0
	bl GetBoxMonData
	add r6, r0, #0
	ldr r0, _020708D0 ; =0x000001EE
	cmp r4, r0
	bne _0207089C
	add r0, r5, #0
	mov r1, #5
	mov r2, #0
	bl GetBoxMonData
	ldr r1, _020708D4 ; =0x000001EA
	cmp r0, r1
	bne _02070898
	mov r3, #1
	b _020708AA
_02070898:
	mov r3, #0
	b _020708AA
_0207089C:
	add r0, r5, #0
	mov r1, #0x70
	mov r2, #0
	bl GetBoxMonData
	lsl r0, r0, #0x18
	lsr r3, r0, #0x18
_020708AA:
	ldr r0, [sp, #4]
	str r6, [sp]
	cmp r0, #1
	bne _020708C0
	ldr r1, [sp, #8]
	add r0, r4, #0
	add r2, r7, #0
	bl sub_02070A64
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
_020708C0:
	ldr r1, [sp, #8]
	add r0, r4, #0
	add r2, r7, #0
	bl sub_020708D8
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
	nop
_020708D0: .word 0x000001EE
_020708D4: .word 0x000001EA
	thumb_func_end sub_02070854

	thumb_func_start sub_020708D8
sub_020708D8: ; 0x020708D8
	push {r3, r4, r5, r6, lr}
	sub sp, #4
	add r6, r1, #0
	add r1, r3, #0
	add r5, r0, #0
	add r4, r2, #0
	bl sub_02070438
	ldr r1, _02070A60 ; =0x000001A5
	cmp r5, r1
	bgt _0207093E
	bge _020709CC
	add r2, r1, #0
	sub r2, #0x46
	cmp r5, r2
	bgt _0207090E
	sub r1, #0x46
	cmp r5, r1
	bge _020709E0
	cmp r5, #0xac
	bgt _02070908
	bne _02070906
	b _02070A32
_02070906:
	b _02070A3E
_02070908:
	cmp r5, #0xc9
	beq _020709F4
	b _02070A3E
_0207090E:
	add r2, r1, #0
	sub r2, #0x23
	cmp r5, r2
	bgt _0207091E
	sub r1, #0x23
	cmp r5, r1
	beq _020709EA
	b _02070A3E
_0207091E:
	add r2, r1, #0
	sub r2, #8
	cmp r5, r2
	bgt _0207093C
	add r2, r1, #0
	sub r2, #9
	cmp r5, r2
	blt _0207093C
	add r2, r1, #0
	sub r2, #9
	cmp r5, r2
	beq _020709A4
	sub r1, #8
	cmp r5, r1
	beq _020709B0
_0207093C:
	b _02070A3E
_0207093E:
	add r2, r1, #0
	add r2, #0x42
	cmp r5, r2
	bgt _0207096C
	add r2, r1, #0
	add r2, #0x42
	cmp r5, r2
	bge _02070A26
	add r2, r1, #2
	cmp r5, r2
	bgt _02070964
	add r2, r1, #1
	cmp r5, r2
	blt _02070A3E
	beq _020709BC
	add r1, r1, #2
	cmp r5, r1
	beq _020709C4
	b _02070A3E
_02070964:
	add r1, #0x3a
	cmp r5, r1
	beq _02070A1A
	b _02070A3E
_0207096C:
	add r2, r1, #0
	add r2, #0x47
	cmp r5, r2
	bgt _0207097C
	add r1, #0x47
	cmp r5, r1
	beq _02070A0E
	b _02070A3E
_0207097C:
	add r2, r1, #0
	add r2, #0x4a
	cmp r5, r2
	bgt _02070A3E
	add r2, r1, #0
	add r2, #0x48
	cmp r5, r2
	blt _02070A3E
	add r2, r1, #0
	add r2, #0x48
	cmp r5, r2
	beq _020709D4
	add r2, r1, #0
	add r2, #0x49
	cmp r5, r2
	beq _02070A00
	add r1, #0x4a
	cmp r5, r1
	beq _02070A08
	b _02070A3E
_020709A4:
	lsr r2, r4, #1
	add r2, #0x48
	lsl r0, r0, #1
	mov r1, #0x75
	add r2, r2, r0
	b _02070A50
_020709B0:
	lsr r2, r4, #1
	add r2, #0x4e
	lsl r0, r0, #1
	mov r1, #0x75
	add r2, r2, r0
	b _02070A50
_020709BC:
	add r4, #0x54
	mov r1, #0x75
	add r2, r4, r0
	b _02070A50
_020709C4:
	add r4, #0x58
	mov r1, #0x75
	add r2, r4, r0
	b _02070A50
_020709CC:
	add r4, #0x5c
	mov r1, #0x75
	add r2, r4, r0
	b _02070A50
_020709D4:
	lsr r2, r4, #1
	add r2, #0x60
	lsl r0, r0, #1
	mov r1, #0x75
	add r2, r2, r0
	b _02070A50
_020709E0:
	lsl r2, r4, #1
	add r2, #0x40
	mov r1, #0x75
	add r2, r0, r2
	b _02070A50
_020709EA:
	lsr r2, r4, #1
	lsl r0, r0, #1
	mov r1, #0x75
	add r2, r2, r0
	b _02070A50
_020709F4:
	lsr r2, r4, #1
	add r2, #8
	lsl r0, r0, #1
	mov r1, #0x75
	add r2, r2, r0
	b _02070A50
_02070A00:
	add r2, r0, #0
	mov r1, #0x75
	add r2, #0x84
	b _02070A50
_02070A08:
	mov r1, #0x75
	mov r2, #0x84
	b _02070A50
_02070A0E:
	lsr r2, r4, #1
	add r2, #0x88
	lsl r0, r0, #1
	mov r1, #0x75
	add r2, r2, r0
	b _02070A50
_02070A1A:
	lsr r2, r4, #1
	add r2, #0x8c
	lsl r0, r0, #1
	mov r1, #0x75
	add r2, r2, r0
	b _02070A50
_02070A26:
	lsr r2, r4, #1
	add r2, #0x98
	lsl r0, r0, #1
	mov r1, #0x75
	add r2, r2, r0
	b _02070A50
_02070A32:
	lsr r2, r4, #1
	add r2, #0x9c
	lsl r0, r0, #1
	mov r1, #0x75
	add r2, r2, r0
	b _02070A50
_02070A3E:
	mov r1, #5
	cmp r6, #1
	beq _02070A48
	mov r2, #1
	b _02070A4A
_02070A48:
	mov r2, #0
_02070A4A:
	lsl r0, r5, #2
	add r0, r4, r0
	add r2, r0, r2
_02070A50:
	add r0, sp, #0
	bl ReadWholeNarcMemberByIdPair
	add r0, sp, #0
	ldrb r0, [r0]
	add sp, #4
	pop {r3, r4, r5, r6, pc}
	nop
_02070A60: .word 0x000001A5
	thumb_func_end sub_020708D8

	thumb_func_start sub_02070A64
sub_02070A64: ; 0x02070A64
	push {r3, r4, r5, r6, lr}
	sub sp, #4
	add r6, r1, #0
	add r1, r3, #0
	add r5, r0, #0
	add r4, r2, #0
	bl sub_02070438
	ldr r1, _02070C20 ; =0x000001A5
	cmp r5, r1
	bgt _02070AC0
	bge _02070B50
	add r2, r1, #0
	sub r2, #0x46
	cmp r5, r2
	bgt _02070A90
	sub r1, #0x46
	cmp r5, r1
	bge _02070B64
	cmp r5, #0xc9
	beq _02070B78
	b _02070BFE
_02070A90:
	add r2, r1, #0
	sub r2, #0x23
	cmp r5, r2
	bgt _02070AA0
	sub r1, #0x23
	cmp r5, r1
	beq _02070B6E
	b _02070BFE
_02070AA0:
	add r2, r1, #0
	sub r2, #8
	cmp r5, r2
	bgt _02070ABE
	add r2, r1, #0
	sub r2, #9
	cmp r5, r2
	blt _02070ABE
	add r2, r1, #0
	sub r2, #9
	cmp r5, r2
	beq _02070B28
	sub r1, #8
	cmp r5, r1
	beq _02070B34
_02070ABE:
	b _02070BFE
_02070AC0:
	add r2, r1, #0
	add r2, #0x42
	cmp r5, r2
	bgt _02070AF0
	add r2, r1, #0
	add r2, #0x42
	cmp r5, r2
	blt _02070AD2
	b _02070BDA
_02070AD2:
	add r2, r1, #2
	cmp r5, r2
	bgt _02070AE8
	add r2, r1, #1
	cmp r5, r2
	blt _02070AE6
	beq _02070B40
	add r1, r1, #2
	cmp r5, r1
	beq _02070B48
_02070AE6:
	b _02070BFE
_02070AE8:
	add r1, #0x3a
	cmp r5, r1
	beq _02070BB6
	b _02070BFE
_02070AF0:
	add r2, r1, #0
	add r2, #0x47
	cmp r5, r2
	bgt _02070B00
	add r1, #0x47
	cmp r5, r1
	beq _02070B92
	b _02070BFE
_02070B00:
	add r2, r1, #0
	add r2, #0x4a
	cmp r5, r2
	bgt _02070BFE
	add r2, r1, #0
	add r2, #0x48
	cmp r5, r2
	blt _02070BFE
	add r2, r1, #0
	add r2, #0x48
	cmp r5, r2
	beq _02070B58
	add r2, r1, #0
	add r2, #0x49
	cmp r5, r2
	beq _02070B84
	add r1, #0x4a
	cmp r5, r1
	beq _02070B8C
	b _02070BFE
_02070B28:
	lsr r2, r4, #1
	add r2, #0x48
	lsl r0, r0, #1
	mov r1, #0xc5
	add r2, r2, r0
	b _02070C10
_02070B34:
	lsr r2, r4, #1
	add r2, #0x4e
	lsl r0, r0, #1
	mov r1, #0xc5
	add r2, r2, r0
	b _02070C10
_02070B40:
	add r4, #0x54
	mov r1, #0xc5
	add r2, r4, r0
	b _02070C10
_02070B48:
	add r4, #0x58
	mov r1, #0xc5
	add r2, r4, r0
	b _02070C10
_02070B50:
	add r4, #0x5c
	mov r1, #0xc5
	add r2, r4, r0
	b _02070C10
_02070B58:
	lsr r2, r4, #1
	add r2, #0x60
	lsl r0, r0, #1
	mov r1, #0xc5
	add r2, r2, r0
	b _02070C10
_02070B64:
	lsl r2, r4, #1
	add r2, #0x40
	mov r1, #0xc5
	add r2, r0, r2
	b _02070C10
_02070B6E:
	lsr r2, r4, #1
	lsl r0, r0, #1
	mov r1, #0xc5
	add r2, r2, r0
	b _02070C10
_02070B78:
	lsr r2, r4, #1
	add r2, #8
	lsl r0, r0, #1
	mov r1, #0xc5
	add r2, r2, r0
	b _02070C10
_02070B84:
	add r2, r0, #0
	mov r1, #0xc5
	add r2, #0x84
	b _02070C10
_02070B8C:
	mov r1, #0xc5
	mov r2, #0x84
	b _02070C10
_02070B92:
	cmp r0, #0
	beq _02070BA2
	lsr r2, r4, #1
	add r2, #0x88
	lsl r0, r0, #1
	mov r1, #0x75
	add r2, r2, r0
	b _02070C10
_02070BA2:
	mov r1, #0xc4
	cmp r6, #1
	beq _02070BAC
	mov r2, #1
	b _02070BAE
_02070BAC:
	mov r2, #0
_02070BAE:
	lsl r0, r5, #2
	add r0, r4, r0
	add r2, r0, r2
	b _02070C10
_02070BB6:
	cmp r0, #0
	beq _02070BC6
	lsr r2, r4, #1
	add r2, #0x8c
	lsl r0, r0, #1
	mov r1, #0x75
	add r2, r2, r0
	b _02070C10
_02070BC6:
	mov r1, #0xc4
	cmp r6, #1
	beq _02070BD0
	mov r2, #1
	b _02070BD2
_02070BD0:
	mov r2, #0
_02070BD2:
	lsl r0, r5, #2
	add r0, r4, r0
	add r2, r0, r2
	b _02070C10
_02070BDA:
	cmp r0, #0
	beq _02070BEA
	lsr r2, r4, #1
	add r2, #0x98
	lsl r0, r0, #1
	mov r1, #0x75
	add r2, r2, r0
	b _02070C10
_02070BEA:
	mov r1, #0xc4
	cmp r6, #1
	beq _02070BF4
	mov r2, #1
	b _02070BF6
_02070BF4:
	mov r2, #0
_02070BF6:
	lsl r0, r5, #2
	add r0, r4, r0
	add r2, r0, r2
	b _02070C10
_02070BFE:
	mov r1, #0xc4
	cmp r6, #1
	beq _02070C08
	mov r2, #1
	b _02070C0A
_02070C08:
	mov r2, #0
_02070C0A:
	lsl r0, r5, #2
	add r0, r4, r0
	add r2, r0, r2
_02070C10:
	add r0, sp, #0
	bl ReadWholeNarcMemberByIdPair
	add r0, sp, #0
	ldrb r0, [r0]
	add sp, #4
	pop {r3, r4, r5, r6, pc}
	nop
_02070C20: .word 0x000001A5
	thumb_func_end sub_02070A64

	thumb_func_start sub_02070C24
sub_02070C24: ; 0x02070C24
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x70
	add r6, r0, #0
	str r1, [sp, #0x18]
	str r2, [sp, #0x1c]
	str r3, [sp, #0x20]
	ldr r0, [sp, #0x8c]
	ldr r1, [sp, #0x90]
	ldr r2, [sp, #0x94]
	add r3, sp, #0x24
	ldr r5, [sp, #0x98]
	mov r7, #1
	bl sub_02070D3C
	ldr r0, [sp, #0x8c]
	cmp r0, #0x66
	bne _02070C48
	mov r7, #2
_02070C48:
	ldr r0, [sp, #0x24]
	ldr r1, [sp, #0x9c]
	bl NARC_ctor
	add r4, r0, #0
	mov r0, #0
	str r0, [sp]
	mov r0, #1
	str r0, [sp, #4]
	ldr r0, _02070D28 ; =0x00004E2F
	ldr r1, [sp, #0x18]
	add r0, r5, r0
	str r0, [sp, #8]
	ldr r3, [sp, #0x28]
	add r0, r6, #0
	add r2, r4, #0
	bl sub_0200D504
	str r4, [sp]
	ldr r0, [sp, #0x2c]
	ldr r3, [sp, #0x18]
	str r0, [sp, #4]
	mov r0, #0
	str r0, [sp, #8]
	str r7, [sp, #0xc]
	mov r0, #1
	str r0, [sp, #0x10]
	ldr r0, _02070D2C ; =0x00004E2A
	mov r1, #2
	add r0, r5, r0
	str r0, [sp, #0x14]
	ldr r0, [sp, #0x1c]
	add r2, r6, #0
	bl sub_0200D68C
	mov r0, #0
	str r0, [sp]
	ldr r0, _02070D30 ; =0x00004E27
	ldr r1, [sp, #0x18]
	add r0, r5, r0
	str r0, [sp, #4]
	ldr r3, [sp, #0x30]
	add r0, r6, #0
	add r2, r4, #0
	bl sub_0200D6EC
	mov r0, #0
	str r0, [sp]
	ldr r0, _02070D30 ; =0x00004E27
	ldr r1, [sp, #0x18]
	add r0, r5, r0
	str r0, [sp, #4]
	ldr r3, [sp, #0x34]
	add r0, r6, #0
	add r2, r4, #0
	bl sub_0200D71C
	add r0, r4, #0
	bl NARC_dtor
	ldr r4, _02070D34 ; =0x020FF588
	add r3, sp, #0x3c
	mov r2, #6
_02070CC6:
	ldmia r4!, {r0, r1}
	stmia r3!, {r0, r1}
	sub r2, r2, #1
	bne _02070CC6
	ldr r0, [r4]
	ldr r1, _02070D28 ; =0x00004E2F
	str r0, [r3]
	add r0, r5, r1
	str r0, [sp, #0x50]
	sub r0, r1, #5
	add r0, r5, r0
	sub r1, #8
	str r0, [sp, #0x54]
	add r0, r5, r1
	str r0, [sp, #0x58]
	str r0, [sp, #0x5c]
	ldr r0, _02070D38 ; =0x020FF50C
	lsl r1, r5, #2
	ldr r0, [r0, r1]
	ldr r1, [sp, #0x18]
	str r0, [sp, #0x44]
	add r0, r6, #0
	add r2, sp, #0x3c
	bl sub_0200D734
	add r4, r0, #0
	ldr r0, [r4]
	mov r1, #0
	bl sub_02024AA8
	ldr r1, [sp, #0x20]
	ldr r2, [sp, #0x88]
	lsl r1, r1, #0x10
	lsl r2, r2, #0x10
	add r0, r4, #0
	asr r1, r1, #0x10
	asr r2, r2, #0x10
	bl sub_0200DDB8
	add r0, r4, #0
	bl sub_0200DC18
	add r0, r4, #0
	mov r1, #1
	bl sub_0200DC78
	add r0, r4, #0
	add sp, #0x70
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_02070D28: .word 0x00004E2F
_02070D2C: .word 0x00004E2A
_02070D30: .word 0x00004E27
_02070D34: .word 0x020FF588
_02070D38: .word 0x020FF50C
	thumb_func_end sub_02070C24

	thumb_func_start sub_02070D3C
sub_02070D3C: ; 0x02070D3C
	push {r4, lr}
	add r4, r3, #0
	cmp r1, #2
	bne _02070D60
	mov r1, #0x3a
	str r1, [r4]
	lsl r1, r0, #2
	add r1, r0, r1
	str r1, [r4, #4]
	add r0, r1, #1
	str r0, [r4, #8]
	add r0, r1, #2
	str r0, [r4, #0xc]
	add r0, r1, #3
	str r0, [r4, #0x10]
	add r0, r1, #4
	str r0, [r4, #0x14]
	pop {r4, pc}
_02070D60:
	mov r1, #6
	str r1, [r4]
	add r1, r2, #0
	bl sub_0207280C
	lsl r1, r0, #2
	add r1, r0, r1
	str r1, [r4, #4]
	add r0, r1, #1
	str r0, [r4, #8]
	add r0, r1, #2
	str r0, [r4, #0xc]
	add r0, r1, #3
	str r0, [r4, #0x10]
	add r0, r1, #4
	str r0, [r4, #0x14]
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_02070D3C

	thumb_func_start sub_02070D84
sub_02070D84: ; 0x02070D84
	push {r3, lr}
	add r3, r2, #0
	mov r2, #0
	bl sub_02070D3C
	pop {r3, pc}
	thumb_func_end sub_02070D84

	thumb_func_start sub_02070D90
sub_02070D90: ; 0x02070D90
	mov r0, #0xec
	bx lr
	thumb_func_end sub_02070D90

	thumb_func_start sub_02070D94
sub_02070D94: ; 0x02070D94
	mov r0, #0x88
	bx lr
	thumb_func_end sub_02070D94

	thumb_func_start sub_02070D98
sub_02070D98: ; 0x02070D98
	ldr r3, _02070D9C ; =sub_02070DA0
	bx r3
	.balign 4, 0
_02070D9C: .word sub_02070DA0
	thumb_func_end sub_02070D98

	thumb_func_start sub_02070DA0
sub_02070DA0: ; 0x02070DA0
	push {r3, lr}
	mov r1, #0x70
	mov r2, #0
	bl GetBoxMonData
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	pop {r3, pc}
	thumb_func_end sub_02070DA0

	thumb_func_start sub_02070DB0
sub_02070DB0: ; 0x02070DB0
	bx lr
	.balign 4, 0
	thumb_func_end sub_02070DB0

	thumb_func_start sub_02070DB4
sub_02070DB4: ; 0x02070DB4
	push {r3, r4, r5, lr}
	sub sp, #8
	mov r1, #5
	mov r2, #0
	add r4, r0, #0
	bl GetMonData
	lsl r0, r0, #0x10
	lsr r5, r0, #0x10
	add r0, r4, #0
	mov r1, #0xa1
	mov r2, #0
	bl GetMonData
	add r1, r0, #1
	add r0, sp, #0
	strb r1, [r0]
	add r0, r4, #0
	mov r1, #8
	mov r2, #0
	bl GetMonData
	str r0, [sp, #4]
	add r0, r5, #0
	mov r1, #0x15
	bl sub_0206FBE8
	mov r1, #0x64
	add r5, r0, #0
	bl sub_0206FD30
	ldr r1, [sp, #4]
	cmp r1, r0
	bls _02070E04
	str r0, [sp, #4]
	add r0, r4, #0
	mov r1, #8
	add r2, sp, #4
	bl sub_0206EC40
_02070E04:
	add r0, sp, #0
	ldrb r1, [r0]
	cmp r1, #0x64
	bls _02070E12
	add sp, #8
	mov r0, #0
	pop {r3, r4, r5, pc}
_02070E12:
	add r0, r5, #0
	bl sub_0206FD30
	ldr r1, [sp, #4]
	cmp r1, r0
	blo _02070E2E
	add r0, r4, #0
	mov r1, #0xa1
	add r2, sp, #0
	bl sub_0206EC40
	add sp, #8
	mov r0, #1
	pop {r3, r4, r5, pc}
_02070E2E:
	mov r0, #0
	add sp, #8
	pop {r3, r4, r5, pc}
	thumb_func_end sub_02070DB4

	thumb_func_start sub_02070E34
sub_02070E34: ; 0x02070E34
	push {r4, r5, r6, r7, lr}
	sub sp, #0x44
	add r7, r1, #0
	str r0, [sp]
	str r2, [sp, #4]
	mov r6, #0
	add r0, r7, #0
	mov r1, #5
	add r2, r6, #0
	str r3, [sp, #8]
	ldr r5, [sp, #0x58]
	bl GetMonData
	lsl r0, r0, #0x10
	lsr r4, r0, #0x10
	add r0, r7, #0
	mov r1, #6
	add r2, r6, #0
	bl GetMonData
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	add r1, r6, #0
	str r0, [sp, #0x2c]
	add r0, r7, #0
	add r2, r1, #0
	bl GetMonData
	str r0, [sp, #0x30]
	add r0, r7, #0
	mov r1, #0x14
	add r2, r6, #0
	bl GetMonData
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	str r0, [sp, #0x14]
	ldr r1, _0207114C ; =0xFFFF0000
	ldr r0, [sp, #0x30]
	add r2, r6, #0
	and r0, r1
	lsr r0, r0, #0x10
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	str r0, [sp, #0x20]
	ldr r0, [sp, #0x2c]
	mov r1, #1
	bl sub_02077D88
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	cmp r4, #0x40
	beq _02070EAE
	cmp r0, #0x40
	bne _02070EAE
	ldr r0, [sp, #4]
	cmp r0, #3
	beq _02070EAE
	add sp, #0x44
	add r0, r6, #0
	pop {r4, r5, r6, r7, pc}
_02070EAE:
	cmp r4, #0xac
	bne _02070EC6
	add r0, r7, #0
	mov r1, #0x70
	mov r2, #0
	bl GetMonData
	cmp r0, #1
	bne _02070EC6
	add sp, #0x44
	mov r0, #0
	pop {r4, r5, r6, r7, pc}
_02070EC6:
	cmp r5, #0
	bne _02070ECC
	add r5, sp, #0x40
_02070ECC:
	mov r0, #0
	mov r1, #0x2a
	bl AllocFromHeap
	str r0, [sp, #0x1c]
	ldr r1, [sp, #0x1c]
	add r0, r4, #0
	bl sub_020725C8
	ldr r0, [sp, #4]
	cmp r0, #3
	bls _02070EE6
	b _02071230
_02070EE6:
	add r0, r0, r0
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_02070EF2: ; jump table
	.short _02070EFA - _02070EF2 - 2 ; case 0
	.short _02071170 - _02070EF2 - 2 ; case 1
	.short _020711A4 - _02070EF2 - 2 ; case 2
	.short _020711A4 - _02070EF2 - 2 ; case 3
_02070EFA:
	add r0, r7, #0
	mov r1, #0xa1
	mov r2, #0
	bl GetMonData
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	str r0, [sp, #0x18]
	add r0, r7, #0
	mov r1, #9
	mov r2, #0
	bl GetMonData
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	str r0, [sp, #0x24]
	mov r0, #0
	str r0, [sp, #0x28]
	ldr r0, [sp, #0x20]
	mov r1, #0xa
	ldr r4, [sp, #0x1c]
	bl _s32_div_f
	str r1, [sp, #0xc]
_02070F2A:
	ldrh r0, [r4]
	cmp r0, #0x1a
	bls _02070F32
	b _0207115C
_02070F32:
	add r1, r0, r0
	add r1, pc
	ldrh r1, [r1, #6]
	lsl r1, r1, #0x10
	asr r1, r1, #0x10
	add pc, r1
_02070F3E: ; jump table
	.short _0207115C - _02070F3E - 2 ; case 0
	.short _02070F74 - _02070F3E - 2 ; case 1
	.short _02070F82 - _02070F3E - 2 ; case 2
	.short _02070F98 - _02070F3E - 2 ; case 3
	.short _02070FAE - _02070F3E - 2 ; case 4
	.short _0207115C - _02070F3E - 2 ; case 5
	.short _0207115C - _02070F3E - 2 ; case 6
	.short _0207115C - _02070F3E - 2 ; case 7
	.short _02070FBE - _02070F3E - 2 ; case 8
	.short _02070FEA - _02070F3E - 2 ; case 9
	.short _02071016 - _02070F3E - 2 ; case 10
	.short _02071042 - _02070F3E - 2 ; case 11
	.short _0207105A - _02070F3E - 2 ; case 12
	.short _02071070 - _02070F3E - 2 ; case 13
	.short _02071080 - _02070F3E - 2 ; case 14
	.short _02071086 - _02070F3E - 2 ; case 15
	.short _0207115C - _02070F3E - 2 ; case 16
	.short _0207115C - _02070F3E - 2 ; case 17
	.short _02071096 - _02070F3E - 2 ; case 18
	.short _020710AE - _02070F3E - 2 ; case 19
	.short _020710C6 - _02070F3E - 2 ; case 20
	.short _020710DA - _02070F3E - 2 ; case 21
	.short _020710F2 - _02070F3E - 2 ; case 22
	.short _02071110 - _02070F3E - 2 ; case 23
	.short _0207112E - _02070F3E - 2 ; case 24
	.short _0207113C - _02070F3E - 2 ; case 25
	.short _02071150 - _02070F3E - 2 ; case 26
_02070F74:
	ldr r0, [sp, #0x24]
	cmp r0, #0xdc
	blo _02071050
	ldrh r6, [r4, #4]
	mov r0, #1
	str r0, [r5]
	b _0207115C
_02070F82:
	bl IsNighttime
	cmp r0, #0
	bne _02071050
	ldr r0, [sp, #0x24]
	cmp r0, #0xdc
	blo _02071050
	ldrh r6, [r4, #4]
	mov r0, #2
	str r0, [r5]
	b _0207115C
_02070F98:
	bl IsNighttime
	cmp r0, #1
	bne _02071050
	ldr r0, [sp, #0x24]
	cmp r0, #0xdc
	blo _02071050
	ldrh r6, [r4, #4]
	mov r0, #3
	str r0, [r5]
	b _0207115C
_02070FAE:
	ldrh r1, [r4, #2]
	ldr r0, [sp, #0x18]
	cmp r1, r0
	bgt _02071050
	ldrh r6, [r4, #4]
	mov r0, #4
	str r0, [r5]
	b _0207115C
_02070FBE:
	ldrh r1, [r4, #2]
	ldr r0, [sp, #0x18]
	cmp r1, r0
	bgt _02071050
	add r0, r7, #0
	mov r1, #0xa5
	mov r2, #0
	bl GetMonData
	str r0, [sp, #0x34]
	add r0, r7, #0
	mov r1, #0xa6
	mov r2, #0
	bl GetMonData
	ldr r1, [sp, #0x34]
	cmp r1, r0
	bls _02071050
	ldrh r6, [r4, #4]
	mov r0, #8
	str r0, [r5]
	b _0207115C
_02070FEA:
	ldrh r1, [r4, #2]
	ldr r0, [sp, #0x18]
	cmp r1, r0
	bgt _02071050
	add r0, r7, #0
	mov r1, #0xa5
	mov r2, #0
	bl GetMonData
	str r0, [sp, #0x38]
	add r0, r7, #0
	mov r1, #0xa6
	mov r2, #0
	bl GetMonData
	ldr r1, [sp, #0x38]
	cmp r1, r0
	bne _02071050
	ldrh r6, [r4, #4]
	mov r0, #9
	str r0, [r5]
	b _0207115C
_02071016:
	ldrh r1, [r4, #2]
	ldr r0, [sp, #0x18]
	cmp r1, r0
	bgt _02071050
	add r0, r7, #0
	mov r1, #0xa5
	mov r2, #0
	bl GetMonData
	str r0, [sp, #0x3c]
	add r0, r7, #0
	mov r1, #0xa6
	mov r2, #0
	bl GetMonData
	ldr r1, [sp, #0x3c]
	cmp r1, r0
	bhs _02071050
	ldrh r6, [r4, #4]
	mov r0, #0xa
	str r0, [r5]
	b _0207115C
_02071042:
	ldrh r1, [r4, #2]
	ldr r0, [sp, #0x18]
	cmp r1, r0
	bgt _02071050
	ldr r0, [sp, #0xc]
	cmp r0, #5
	blt _02071052
_02071050:
	b _0207115C
_02071052:
	ldrh r6, [r4, #4]
	mov r0, #0xb
	str r0, [r5]
	b _0207115C
_0207105A:
	ldrh r1, [r4, #2]
	ldr r0, [sp, #0x18]
	cmp r1, r0
	bgt _0207115C
	ldr r0, [sp, #0xc]
	cmp r0, #5
	blt _0207115C
	ldrh r6, [r4, #4]
	mov r0, #0xc
	str r0, [r5]
	b _0207115C
_02071070:
	ldrh r1, [r4, #2]
	ldr r0, [sp, #0x18]
	cmp r1, r0
	bgt _0207115C
	ldrh r6, [r4, #4]
	mov r0, #0xd
	str r0, [r5]
	b _0207115C
_02071080:
	mov r0, #0xe
	str r0, [r5]
	b _0207115C
_02071086:
	ldrh r1, [r4, #2]
	ldr r0, [sp, #0x14]
	cmp r1, r0
	bgt _0207115C
	ldrh r6, [r4, #4]
	mov r0, #0xf
	str r0, [r5]
	b _0207115C
_02071096:
	bl IsNighttime
	cmp r0, #0
	bne _0207115C
	ldrh r1, [r4, #2]
	ldr r0, [sp, #0x2c]
	cmp r0, r1
	bne _0207115C
	ldrh r6, [r4, #4]
	mov r0, #0x12
	str r0, [r5]
	b _0207115C
_020710AE:
	bl IsNighttime
	cmp r0, #1
	bne _0207115C
	ldrh r1, [r4, #2]
	ldr r0, [sp, #0x2c]
	cmp r0, r1
	bne _0207115C
	ldrh r6, [r4, #4]
	mov r0, #0x13
	str r0, [r5]
	b _0207115C
_020710C6:
	ldrh r1, [r4, #2]
	add r0, r7, #0
	bl sub_02071754
	cmp r0, #1
	bne _0207115C
	ldrh r6, [r4, #4]
	mov r0, #0x14
	str r0, [r5]
	b _0207115C
_020710DA:
	ldr r0, [sp]
	cmp r0, #0
	beq _0207115C
	ldrh r1, [r4, #2]
	bl sub_020748CC
	cmp r0, #1
	bne _0207115C
	ldrh r6, [r4, #4]
	mov r0, #0x15
	str r0, [r5]
	b _0207115C
_020710F2:
	add r0, r7, #0
	mov r1, #0x6f
	mov r2, #0
	bl GetMonData
	cmp r0, #0
	bne _0207115C
	ldrh r1, [r4, #2]
	ldr r0, [sp, #0x18]
	cmp r1, r0
	bgt _0207115C
	ldrh r6, [r4, #4]
	mov r0, #0x16
	str r0, [r5]
	b _0207115C
_02071110:
	add r0, r7, #0
	mov r1, #0x6f
	mov r2, #0
	bl GetMonData
	cmp r0, #1
	bne _0207115C
	ldrh r1, [r4, #2]
	ldr r0, [sp, #0x18]
	cmp r1, r0
	bgt _0207115C
	ldrh r6, [r4, #4]
	mov r0, #0x17
	str r0, [r5]
	b _0207115C
_0207112E:
	ldr r1, [sp, #8]
	cmp r1, r0
	bne _0207115C
	ldrh r6, [r4, #4]
	mov r0, #0x18
	str r0, [r5]
	b _0207115C
_0207113C:
	ldr r1, [sp, #8]
	cmp r1, r0
	bne _0207115C
	ldrh r6, [r4, #4]
	mov r0, #0x19
	str r0, [r5]
	b _0207115C
	nop
_0207114C: .word 0xFFFF0000
_02071150:
	ldr r1, [sp, #8]
	cmp r1, r0
	bne _0207115C
	ldrh r6, [r4, #4]
	mov r0, #0x1a
	str r0, [r5]
_0207115C:
	cmp r6, #0
	bne _02071230
	ldr r0, [sp, #0x28]
	add r4, r4, #6
	add r0, r0, #1
	str r0, [sp, #0x28]
	cmp r0, #7
	bge _0207116E
	b _02070F2A
_0207116E:
	b _02071230
_02071170:
	ldr r3, [sp, #0x1c]
	mov r4, #0
	mov r7, #6
	mov r2, #5
_02071178:
	ldrh r0, [r3]
	cmp r0, #5
	beq _02071184
	cmp r0, #6
	beq _0207118A
	b _02071196
_02071184:
	ldrh r6, [r3, #4]
	str r2, [r5]
	b _02071196
_0207118A:
	ldrh r1, [r3, #2]
	ldr r0, [sp, #0x2c]
	cmp r0, r1
	bne _02071196
	ldrh r6, [r3, #4]
	str r7, [r5]
_02071196:
	cmp r6, #0
	bne _02071230
	add r4, r4, #1
	add r3, r3, #6
	cmp r4, #7
	blt _02071178
	b _02071230
_020711A4:
	mov r0, #0
	ldr r4, [sp, #0x1c]
	str r0, [sp, #0x10]
_020711AA:
	ldrh r2, [r4]
	cmp r2, #7
	bne _020711CA
	ldrh r1, [r4, #2]
	ldr r0, [sp, #8]
	cmp r0, r1
	bne _020711CA
	ldr r0, [sp, #0x10]
	mov r1, #6
	mul r1, r0
	ldr r0, [sp, #0x1c]
	add r0, r0, r1
	ldrh r6, [r0, #4]
	mov r0, #0
	str r0, [r5]
	b _02071230
_020711CA:
	cmp r2, #0x10
	bne _020711F6
	add r0, r7, #0
	mov r1, #0x6f
	mov r2, #0
	bl GetMonData
	cmp r0, #0
	bne _020711F6
	ldrh r1, [r4, #2]
	ldr r0, [sp, #8]
	cmp r0, r1
	bne _020711F6
	ldr r0, [sp, #0x10]
	mov r1, #6
	mul r1, r0
	ldr r0, [sp, #0x1c]
	add r0, r0, r1
	ldrh r6, [r0, #4]
	mov r0, #0
	str r0, [r5]
	b _02071230
_020711F6:
	ldrh r0, [r4]
	cmp r0, #0x11
	bne _02071224
	add r0, r7, #0
	mov r1, #0x6f
	mov r2, #0
	bl GetMonData
	cmp r0, #1
	bne _02071224
	ldrh r1, [r4, #2]
	ldr r0, [sp, #8]
	cmp r0, r1
	bne _02071224
	ldr r0, [sp, #0x10]
	mov r1, #6
	mul r1, r0
	ldr r0, [sp, #0x1c]
	add r0, r0, r1
	ldrh r6, [r0, #4]
	mov r0, #0
	str r0, [r5]
	b _02071230
_02071224:
	ldr r0, [sp, #0x10]
	add r4, r4, #6
	add r0, r0, #1
	str r0, [sp, #0x10]
	cmp r0, #7
	blt _020711AA
_02071230:
	ldr r0, [sp, #0x1c]
	bl FreeToHeap
	add r0, r6, #0
	add sp, #0x44
	pop {r4, r5, r6, r7, pc}
	thumb_func_end sub_02070E34

	thumb_func_start sub_0207123C
sub_0207123C: ; 0x0207123C
	push {r3, r4, lr}
	sub sp, #0x4c
	add r4, r0, #0
	mov r1, #0
	add r0, sp, #0
	strh r1, [r0]
	ldr r0, _02071284 ; =0x000001EE
	cmp r4, r0
	blo _02071252
	bl GF_AssertFail
_02071252:
	add r0, sp, #4
	bl FS_InitFile
	ldr r1, _02071288 ; =0x021100E8
	add r0, sp, #4
	bl FS_OpenFile
	add r0, sp, #4
	lsl r1, r4, #1
	mov r2, #0
	bl FS_SeekFile
	add r0, sp, #4
	add r1, sp, #0
	mov r2, #2
	bl FS_ReadFile
	add r0, sp, #4
	bl FS_CloseFile
	add r0, sp, #0
	ldrh r0, [r0]
	add sp, #0x4c
	pop {r3, r4, pc}
	nop
_02071284: .word 0x000001EE
_02071288: .word 0x021100E8
	thumb_func_end sub_0207123C

	thumb_func_start sub_0207128C
sub_0207128C: ; 0x0207128C
	push {r3, lr}
	cmp r0, #0xb9
	bgt _020712B0
	cmp r0, #0xb7
	blt _0207129E
	beq _020712D0
	cmp r0, #0xb9
	beq _020712D0
	b _020712CC
_0207129E:
	cmp r0, #0x7a
	bgt _020712AA
	bge _020712D0
	cmp r0, #0x71
	beq _020712D0
	b _020712CC
_020712AA:
	cmp r0, #0x8f
	beq _020712D0
	b _020712CC
_020712B0:
	cmp r0, #0xe2
	bgt _020712BC
	bge _020712D0
	cmp r0, #0xca
	beq _020712D0
	b _020712CC
_020712BC:
	ldr r1, _020712D4 ; =0x0000013B
	cmp r0, r1
	bgt _020712C6
	beq _020712D0
	b _020712CC
_020712C6:
	add r1, #0x2b
	cmp r0, r1
	beq _020712D0
_020712CC:
	bl sub_0207123C
_020712D0:
	pop {r3, pc}
	nop
_020712D4: .word 0x0000013B
	thumb_func_end sub_0207128C

	thumb_func_start sub_020712D8
sub_020712D8: ; 0x020712D8
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #8
	add r5, r0, #0
	mov r0, #0
	mov r1, #0x2c
	bl AllocFromHeap
	str r0, [sp]
	add r0, r5, #0
	bl sub_0206DDD8
	str r0, [sp, #4]
	add r0, r5, #0
	mov r1, #5
	mov r2, #0
	bl GetBoxMonData
	lsl r0, r0, #0x10
	lsr r4, r0, #0x10
	add r0, r5, #0
	mov r1, #0x70
	mov r2, #0
	bl GetBoxMonData
	add r7, r0, #0
	add r0, r5, #0
	bl sub_0206FD70
	lsl r0, r0, #0x18
	lsr r6, r0, #0x18
	ldr r2, [sp]
	add r0, r4, #0
	add r1, r7, #0
	bl sub_02071FC8
	ldr r0, [sp]
	ldrh r1, [r0]
	ldr r0, _02071374 ; =0x0000FFFF
	cmp r1, r0
	beq _02071360
	ldr r4, [sp]
	lsl r7, r6, #9
_0207132C:
	ldrh r1, [r4]
	mov r0, #0xfe
	lsl r0, r0, #8
	and r0, r1
	cmp r0, r7
	bgt _02071360
	ldr r0, _02071378 ; =0x000001FF
	and r0, r1
	lsl r0, r0, #0x10
	lsr r6, r0, #0x10
	add r0, r5, #0
	add r1, r6, #0
	bl sub_0207138C
	ldr r1, _02071374 ; =0x0000FFFF
	cmp r0, r1
	bne _02071356
	add r0, r5, #0
	add r1, r6, #0
	bl sub_020713FC
_02071356:
	add r4, r4, #2
	ldrh r1, [r4]
	ldr r0, _02071374 ; =0x0000FFFF
	cmp r1, r0
	bne _0207132C
_02071360:
	ldr r0, [sp]
	bl FreeToHeap
	ldr r1, [sp, #4]
	add r0, r5, #0
	bl sub_0206DE00
	add sp, #8
	pop {r3, r4, r5, r6, r7, pc}
	nop
_02071374: .word 0x0000FFFF
_02071378: .word 0x000001FF
	thumb_func_end sub_020712D8

	thumb_func_start sub_0207137C
sub_0207137C: ; 0x0207137C
	push {r4, lr}
	add r4, r1, #0
	bl sub_02070DB0
	add r1, r4, #0
	bl sub_0207138C
	pop {r4, pc}
	thumb_func_end sub_0207137C

	thumb_func_start sub_0207138C
sub_0207138C: ; 0x0207138C
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #8
	add r5, r1, #0
	ldr r1, _020713E4 ; =0x0000FFFF
	add r6, r0, #0
	str r1, [sp, #4]
	bl sub_0206DDD8
	mov r4, #0
	str r0, [sp]
	add r7, r4, #0
_020713A2:
	add r1, r4, #0
	add r0, r6, #0
	add r1, #0x36
	add r2, r7, #0
	bl GetBoxMonData
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	bne _020713C4
	lsl r2, r4, #0x18
	add r0, r6, #0
	add r1, r5, #0
	lsr r2, r2, #0x18
	bl sub_020714F0
	str r5, [sp, #4]
	b _020713D4
_020713C4:
	cmp r0, r5
	bne _020713CE
	ldr r0, _020713E8 ; =0x0000FFFE
	str r0, [sp, #4]
	b _020713D4
_020713CE:
	add r4, r4, #1
	cmp r4, #4
	blt _020713A2
_020713D4:
	ldr r1, [sp]
	add r0, r6, #0
	bl sub_0206DE00
	ldr r0, [sp, #4]
	add sp, #8
	pop {r3, r4, r5, r6, r7, pc}
	nop
_020713E4: .word 0x0000FFFF
_020713E8: .word 0x0000FFFE
	thumb_func_end sub_0207138C

	thumb_func_start sub_020713EC
sub_020713EC: ; 0x020713EC
	push {r4, lr}
	add r4, r1, #0
	bl sub_02070DB0
	add r1, r4, #0
	bl sub_020713FC
	pop {r4, pc}
	thumb_func_end sub_020713EC

	thumb_func_start sub_020713FC
sub_020713FC: ; 0x020713FC
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x20
	add r5, r0, #0
	str r1, [sp]
	bl sub_0206DDD8
	str r0, [sp, #0xc]
	add r0, sp, #0x18
	mov r4, #0
	str r0, [sp, #4]
	add r7, sp, #0x14
	add r6, sp, #0x10
_02071414:
	add r1, r4, #0
	add r0, r5, #0
	add r1, #0x37
	mov r2, #0
	bl GetBoxMonData
	ldr r1, [sp, #4]
	mov r2, #0
	strh r0, [r1]
	add r1, r4, #0
	add r0, r5, #0
	add r1, #0x3b
	bl GetBoxMonData
	add r1, r4, #0
	strb r0, [r7]
	add r0, r5, #0
	add r1, #0x3f
	mov r2, #0
	bl GetBoxMonData
	strb r0, [r6]
	ldr r0, [sp, #4]
	add r4, r4, #1
	add r0, r0, #2
	str r0, [sp, #4]
	add r7, r7, #1
	add r6, r6, #1
	cmp r4, #3
	blt _02071414
	ldr r0, [sp]
	add r1, sp, #0x10
	strh r0, [r1, #0xe]
	ldr r0, [sp]
	mov r1, #5
	bl sub_02073314
	add r1, sp, #0x10
	strb r0, [r1, #7]
	mov r4, #0
	add r0, sp, #0x18
	strb r4, [r1, #3]
	str r0, [sp, #8]
	add r7, sp, #0x14
	add r6, sp, #0x10
_0207146E:
	add r1, r4, #0
	ldr r2, [sp, #8]
	add r0, r5, #0
	add r1, #0x36
	bl sub_0206ED70
	add r1, r4, #0
	add r0, r5, #0
	add r1, #0x3a
	add r2, r7, #0
	bl sub_0206ED70
	add r1, r4, #0
	add r0, r5, #0
	add r1, #0x3e
	add r2, r6, #0
	bl sub_0206ED70
	ldr r0, [sp, #8]
	add r4, r4, #1
	add r0, r0, #2
	str r0, [sp, #8]
	add r7, r7, #1
	add r6, r6, #1
	cmp r4, #4
	blt _0207146E
	ldr r1, [sp, #0xc]
	add r0, r5, #0
	bl sub_0206DE00
	add sp, #0x20
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_020713FC

	thumb_func_start sub_020714B0
sub_020714B0: ; 0x020714B0
	push {r4, r5, r6, lr}
	sub sp, #8
	add r4, r2, #0
	add r5, r0, #0
	add r6, r1, #0
	bl sub_020714E8
	mov r0, #0
	add r1, r4, #0
	str r0, [sp]
	add r0, r5, #0
	add r1, #0x3e
	add r2, sp, #0
	bl sub_0206EC40
	add r0, r6, #0
	mov r1, #0
	bl sub_0207332C
	add r4, #0x3a
	str r0, [sp, #4]
	add r0, r5, #0
	add r1, r4, #0
	add r2, sp, #4
	bl sub_0206EC40
	add sp, #8
	pop {r4, r5, r6, pc}
	thumb_func_end sub_020714B0

	thumb_func_start sub_020714E8
sub_020714E8: ; 0x020714E8
	ldr r3, _020714EC ; =sub_020714F0
	bx r3
	.balign 4, 0
_020714EC: .word sub_020714F0
	thumb_func_end sub_020714E8

	thumb_func_start sub_020714F0
sub_020714F0: ; 0x020714F0
	push {r0, r1, r2, r3}
	push {r3, r4, r5, lr}
	add r4, r2, #0
	add r1, r4, #0
	add r1, #0x36
	add r2, sp, #0x14
	add r5, r0, #0
	bl sub_0206ED70
	add r1, r4, #0
	add r0, r5, #0
	add r1, #0x3e
	mov r2, #0
	bl GetBoxMonData
	lsl r0, r0, #0x18
	lsr r1, r0, #0x18
	add r0, sp, #0x10
	ldrh r0, [r0, #4]
	bl sub_0207332C
	add r1, sp, #0
	strb r0, [r1]
	add r4, #0x3a
	add r0, r5, #0
	add r1, r4, #0
	add r2, sp, #0
	bl sub_0206ED70
	pop {r3, r4, r5}
	pop {r3}
	add sp, #0x10
	bx r3
	.balign 4, 0
	thumb_func_end sub_020714F0

	thumb_func_start sub_02071534
sub_02071534: ; 0x02071534
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x10
	add r7, r0, #0
	add r5, r1, #0
	mov r0, #0
	mov r1, #0x2c
	str r2, [sp]
	str r0, [sp, #8]
	bl AllocFromHeap
	add r4, r0, #0
	add r0, r7, #0
	mov r1, #5
	mov r2, #0
	bl GetMonData
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	str r0, [sp, #4]
	add r0, r7, #0
	mov r1, #0x70
	mov r2, #0
	bl GetMonData
	str r0, [sp, #0xc]
	add r0, r7, #0
	mov r1, #0xa1
	mov r2, #0
	bl GetMonData
	lsl r0, r0, #0x18
	lsr r6, r0, #0x18
	ldr r0, [sp, #4]
	ldr r1, [sp, #0xc]
	add r2, r4, #0
	bl sub_02071FC8
	ldr r0, [r5]
	lsl r0, r0, #1
	ldrh r2, [r4, r0]
	ldr r0, _020715F4 ; =0x0000FFFF
	cmp r2, r0
	bne _02071596
	add r0, r4, #0
	bl FreeToHeap
	add sp, #0x10
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_02071596:
	mov r0, #0xfe
	lsl r0, r0, #8
	add r3, r2, #0
	and r3, r0
	lsl r6, r6, #9
	cmp r6, r3
	beq _020715C8
	ldr r1, _020715F4 ; =0x0000FFFF
_020715A6:
	ldr r2, [r5]
	add r2, r2, #1
	str r2, [r5]
	lsl r2, r2, #1
	ldrh r2, [r4, r2]
	cmp r2, r1
	bne _020715C0
	add r0, r4, #0
	bl FreeToHeap
	add sp, #0x10
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_020715C0:
	add r3, r2, #0
	and r3, r0
	cmp r6, r3
	bne _020715A6
_020715C8:
	cmp r6, r3
	bne _020715E8
	ldr r0, _020715F8 ; =0x000001FF
	add r1, r2, #0
	and r1, r0
	ldr r0, [sp]
	strh r1, [r0]
	ldr r0, [r5]
	ldr r1, [sp]
	add r0, r0, #1
	str r0, [r5]
	ldrh r1, [r1]
	add r0, r7, #0
	bl sub_0207137C
	str r0, [sp, #8]
_020715E8:
	add r0, r4, #0
	bl FreeToHeap
	ldr r0, [sp, #8]
	add sp, #0x10
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_020715F4: .word 0x0000FFFF
_020715F8: .word 0x000001FF
	thumb_func_end sub_02071534

	thumb_func_start sub_020715FC
sub_020715FC: ; 0x020715FC
	ldr r3, _02071600 ; =sub_02071604
	bx r3
	.balign 4, 0
_02071600: .word sub_02071604
	thumb_func_end sub_020715FC

	thumb_func_start sub_02071604
sub_02071604: ; 0x02071604
	push {r4, r5, r6, lr}
	sub sp, #8
	add r4, r1, #0
	add r6, r2, #0
	add r1, #0x36
	mov r2, #0
	add r5, r0, #0
	bl GetBoxMonData
	add r1, sp, #0
	strh r0, [r1, #4]
	add r1, r4, #0
	add r0, r5, #0
	add r1, #0x3a
	mov r2, #0
	bl GetBoxMonData
	add r1, sp, #0
	strb r0, [r1, #2]
	add r1, r4, #0
	add r0, r5, #0
	add r1, #0x3e
	mov r2, #0
	bl GetBoxMonData
	add r1, sp, #0
	strb r0, [r1]
	add r1, r6, #0
	add r0, r5, #0
	add r1, #0x36
	mov r2, #0
	bl GetBoxMonData
	add r1, sp, #0
	strh r0, [r1, #6]
	add r1, r6, #0
	add r0, r5, #0
	add r1, #0x3a
	mov r2, #0
	bl GetBoxMonData
	add r1, sp, #0
	strb r0, [r1, #3]
	add r1, r6, #0
	add r0, r5, #0
	add r1, #0x3e
	mov r2, #0
	bl GetBoxMonData
	add r1, sp, #0
	strb r0, [r1, #1]
	add r1, r4, #0
	add r2, sp, #4
	add r0, r5, #0
	add r1, #0x36
	add r2, #2
	bl sub_0206ED70
	add r1, r4, #0
	add r2, sp, #0
	add r0, r5, #0
	add r1, #0x3a
	add r2, #3
	bl sub_0206ED70
	add r4, #0x3e
	add r2, sp, #0
	add r0, r5, #0
	add r1, r4, #0
	add r2, #1
	bl sub_0206ED70
	add r1, r6, #0
	add r0, r5, #0
	add r1, #0x36
	add r2, sp, #4
	bl sub_0206ED70
	add r1, r6, #0
	add r2, sp, #0
	add r0, r5, #0
	add r1, #0x3a
	add r2, #2
	bl sub_0206ED70
	add r6, #0x3e
	add r0, r5, #0
	add r1, r6, #0
	add r2, sp, #0
	bl sub_0206ED70
	add sp, #8
	pop {r4, r5, r6, pc}
	.balign 4, 0
	thumb_func_end sub_02071604

	thumb_func_start sub_020716C0
sub_020716C0: ; 0x020716C0
	push {r3, r4, r5, r6, r7, lr}
	add r4, r1, #0
	add r5, r0, #0
	cmp r4, #3
	bhs _02071726
	mov r7, #0
	add r6, sp, #0
_020716CE:
	add r1, r4, #0
	add r0, r5, #0
	add r1, #0x37
	add r2, r7, #0
	bl GetMonData
	add r1, r4, #0
	strh r0, [r6, #2]
	add r0, r5, #0
	add r1, #0x3b
	mov r2, #0
	bl GetMonData
	add r1, r4, #0
	strb r0, [r6, #1]
	add r0, r5, #0
	add r1, #0x3f
	mov r2, #0
	bl GetMonData
	add r1, r4, #0
	add r2, sp, #0
	strb r0, [r6]
	add r0, r5, #0
	add r1, #0x36
	add r2, #2
	bl sub_0206EC40
	add r1, r4, #0
	add r2, sp, #0
	add r0, r5, #0
	add r1, #0x3a
	add r2, #1
	bl sub_0206EC40
	add r1, r4, #0
	add r0, r5, #0
	add r1, #0x3e
	add r2, sp, #0
	bl sub_0206EC40
	add r4, r4, #1
	cmp r4, #3
	blo _020716CE
_02071726:
	mov r1, #0
	add r0, sp, #0
	strh r1, [r0, #2]
	strb r1, [r0, #1]
	strb r1, [r0]
	add r2, sp, #0
	add r0, r5, #0
	mov r1, #0x39
	add r2, #2
	bl sub_0206EC40
	add r2, sp, #0
	add r0, r5, #0
	mov r1, #0x3d
	add r2, #1
	bl sub_0206EC40
	add r0, r5, #0
	mov r1, #0x41
	add r2, sp, #0
	bl sub_0206EC40
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_020716C0

	thumb_func_start sub_02071754
sub_02071754: ; 0x02071754
	push {r3, r4, r5, r6, r7, lr}
	mov r4, #0
	add r6, r0, #0
	add r5, r1, #0
	add r7, r4, #0
_0207175E:
	add r1, r4, #0
	add r0, r6, #0
	add r1, #0x36
	add r2, r7, #0
	bl GetMonData
	cmp r5, r0
	beq _02071774
	add r4, r4, #1
	cmp r4, #4
	blt _0207175E
_02071774:
	cmp r4, #4
	beq _0207177C
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_0207177C:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_02071754

	thumb_func_start CopyBoxPokemonToPokemon
CopyBoxPokemonToPokemon: ; 0x02071780
	push {r4, r5, lr}
	sub sp, #0x1c
	add r5, r0, #0
	add r4, r1, #0
	mov r0, #0
	str r0, [sp]
	add r3, r4, #0
	mov r2, #0x11
_02071790:
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	sub r2, r2, #1
	bne _02071790
	ldrh r1, [r4, #4]
	lsl r0, r1, #0x1e
	lsr r0, r0, #0x1f
	beq _020717AA
	mov r0, #1
	bic r1, r0
	mov r0, #1
	orr r0, r1
	strh r0, [r4, #4]
_020717AA:
	add r0, r4, #0
	mov r1, #0xa0
	add r2, sp, #0
	bl sub_0206EC40
	add r0, r4, #0
	mov r1, #0xa3
	add r2, sp, #0
	bl sub_0206EC40
	add r0, r4, #0
	mov r1, #0xa4
	add r2, sp, #0
	bl sub_0206EC40
	mov r0, #0
	bl Mail_new
	add r5, r0, #0
	add r0, r4, #0
	mov r1, #0xaa
	add r2, r5, #0
	bl sub_0206EC40
	add r0, r5, #0
	bl FreeToHeap
	add r0, r4, #0
	mov r1, #0xa2
	add r2, sp, #0
	bl sub_0206EC40
	mov r0, #0
	add r1, sp, #4
	mov r2, #0x18
	bl MIi_CpuClearFast
	add r0, r4, #0
	mov r1, #0xab
	add r2, sp, #4
	bl sub_0206EC40
	add r0, r4, #0
	bl sub_0206E250
	add sp, #0x1c
	pop {r4, r5, pc}
	thumb_func_end CopyBoxPokemonToPokemon

	thumb_func_start sub_02071808
sub_02071808: ; 0x02071808
	push {r3, r4, r5, r6, r7, lr}
	str r0, [sp]
	bl GetPartyCount
	add r7, r0, #0
	mov r6, #1
	mov r5, #0
	cmp r7, #0
	ble _02071858
_0207181A:
	ldr r0, [sp]
	add r1, r5, #0
	bl GetPartyMonByIndex
	mov r1, #5
	mov r2, #0
	add r4, r0, #0
	bl GetMonData
	cmp r0, #0
	beq _02071852
	add r0, r4, #0
	mov r1, #0x4c
	mov r2, #0
	bl GetMonData
	cmp r0, #0
	bne _02071852
	add r0, r4, #0
	mov r1, #0xa1
	mov r2, #0
	bl GetMonData
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	cmp r0, r6
	bls _02071852
	add r6, r0, #0
_02071852:
	add r5, r5, #1
	cmp r5, r7
	blt _0207181A
_02071858:
	add r0, r6, #0
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_02071808

	thumb_func_start sub_0207185C
sub_0207185C: ; 0x0207185C
	push {r3, lr}
	sub sp, #8
	add r3, r0, #0
	mov r0, #2
	str r0, [sp]
	add r0, sp, #4
	mov r1, #0x8a
	mov r2, #0
	lsl r3, r3, #1
	bl ReadFromNarcMemberByIdPair
	add r0, sp, #4
	ldrh r0, [r0]
	add sp, #8
	pop {r3, pc}
	.balign 4, 0
	thumb_func_end sub_0207185C

	thumb_func_start sub_0207187C
sub_0207187C: ; 0x0207187C
	ldr r3, _02071888 ; =AllocAtEndAndReadWholeNarcMemberByIdPair
	mov r0, #0x8a
	mov r1, #0
	mov r2, #3
	bx r3
	nop
_02071888: .word AllocAtEndAndReadWholeNarcMemberByIdPair
	thumb_func_end sub_0207187C

	thumb_func_start sub_0207188C
sub_0207188C: ; 0x0207188C
	push {r3, r4}
	add r4, r0, #0
	add r3, r1, #0
	mov r2, #0x1d
_02071894:
	ldmia r4!, {r0, r1}
	stmia r3!, {r0, r1}
	sub r2, r2, #1
	bne _02071894
	ldr r0, [r4]
	str r0, [r3]
	pop {r3, r4}
	bx lr
	thumb_func_end sub_0207188C

	thumb_func_start sub_020718A4
sub_020718A4: ; 0x020718A4
	push {r3, r4}
	add r4, r0, #0
	add r3, r1, #0
	mov r2, #0x11
_020718AC:
	ldmia r4!, {r0, r1}
	stmia r3!, {r0, r1}
	sub r2, r2, #1
	bne _020718AC
	pop {r3, r4}
	bx lr
	thumb_func_end sub_020718A4

	thumb_func_start sub_020718B8
sub_020718B8: ; 0x020718B8
	push {r3, r4}
	add r4, r0, #0
	add r3, r1, #0
	mov r2, #0x11
_020718C0:
	ldmia r4!, {r0, r1}
	stmia r3!, {r0, r1}
	sub r2, r2, #1
	bne _020718C0
	pop {r3, r4}
	bx lr
	thumb_func_end sub_020718B8

	thumb_func_start sub_020718CC
sub_020718CC: ; 0x020718CC
	ldr r3, _020718D0 ; =sub_020718D4
	bx r3
	.balign 4, 0
_020718D0: .word sub_020718D4
	thumb_func_end sub_020718CC

	thumb_func_start sub_020718D4
sub_020718D4: ; 0x020718D4
	push {r4, lr}
	add r4, r1, #0
	mov r1, #0
	add r2, r1, #0
	bl GetBoxMonData
	add r1, r4, #0
	bl sub_020718E8
	pop {r4, pc}
	thumb_func_end sub_020718D4

	thumb_func_start sub_020718E8
sub_020718E8: ; 0x020718E8
	push {r4, lr}
	add r4, r1, #0
	bl sub_0206FE2C
	lsl r1, r0, #2
	add r1, r0, r1
	ldr r0, _020718FC ; =0x020FF5BC
	add r0, r0, r1
	ldrsb r0, [r4, r0]
	pop {r4, pc}
	.balign 4, 0
_020718FC: .word 0x020FF5BC
	thumb_func_end sub_020718E8

	thumb_func_start sub_02071900
sub_02071900: ; 0x02071900
	push {r3, r4, r5, r6, r7, lr}
	add r4, r0, #0
	add r7, r1, #0
	mov r0, #0
	mov r1, #0x2c
	add r5, r2, #0
	bl AllocFromHeap
	add r6, r0, #0
	add r0, r4, #0
	add r1, r7, #0
	add r2, r6, #0
	bl sub_02071FC8
	ldrh r1, [r6]
	ldr r0, _02071948 ; =0x0000FFFF
	mov r4, #0
	cmp r1, r0
	beq _0207193E
	ldr r1, _0207194C ; =0x000001FF
	ldr r2, _02071948 ; =0x0000FFFF
	add r0, r6, #0
_0207192C:
	ldrh r3, [r0]
	add r0, r0, #2
	add r4, r4, #1
	and r3, r1
	strh r3, [r5]
	ldrh r3, [r0]
	add r5, r5, #2
	cmp r3, r2
	bne _0207192C
_0207193E:
	add r0, r6, #0
	bl FreeToHeap
	add r0, r4, #0
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_02071948: .word 0x0000FFFF
_0207194C: .word 0x000001FF
	thumb_func_end sub_02071900

	thumb_func_start sub_02071950
sub_02071950: ; 0x02071950
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	bl GetPartyCount
	add r6, r0, #0
	bl LCRandom
	mov r1, #1
	lsl r1, r1, #0xe
	cmp r0, r1
	beq _02071974
	lsl r1, r1, #1
	cmp r0, r1
	beq _02071974
	mov r1, #3
	lsl r1, r1, #0xe
	cmp r0, r1
	bne _020719F6
_02071974:
	bl LCRandom
	add r1, r6, #0
	bl _s32_div_f
	add r0, r5, #0
	add r7, r1, #0
	bl GetPartyMonByIndex
	mov r1, #5
	mov r2, #0
	add r4, r0, #0
	bl GetMonData
	cmp r0, #0
	beq _02071974
	add r0, r4, #0
	mov r1, #0x4c
	mov r2, #0
	bl GetMonData
	cmp r0, #0
	bne _02071974
	add r0, r7, #0
	bl sub_020726C0
	add r1, r0, #0
	lsl r1, r1, #0x18
	add r0, r5, #0
	lsr r1, r1, #0x18
	bl sub_020719F8
	cmp r0, #0
	bne _020719F6
	add r5, sp, #0
	mov r6, #7
_020719BC:
	bl LCRandom
	strb r0, [r5]
	ldrb r2, [r5]
	add r1, r2, #0
	and r1, r6
	beq _020719BC
	mov r0, #0xf0
	tst r0, r2
	beq _020719D4
	add r0, sp, #0
	strb r1, [r0]
_020719D4:
	add r1, sp, #0
	ldrb r2, [r1]
	lsl r0, r2, #4
	orr r0, r2
	strb r0, [r1]
	ldrb r2, [r1]
	mov r0, #0xf3
	and r0, r2
	strb r0, [r1]
	ldrb r0, [r1]
	add r2, sp, #0
	add r0, r0, #1
	strb r0, [r1]
	add r0, r4, #0
	mov r1, #0x9a
	bl sub_0206EC40
_020719F6:
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_02071950

	thumb_func_start sub_020719F8
sub_020719F8: ; 0x020719F8
	push {r3, r4, r5, r6, r7, lr}
	mov r6, #0
	add r5, r1, #0
	str r0, [sp]
	mov r4, #1
	add r7, r6, #0
	cmp r5, #0
	beq _02071A36
_02071A08:
	mov r0, #1
	tst r0, r5
	beq _02071A2A
	ldr r0, [sp]
	add r1, r6, #0
	bl GetPartyMonByIndex
	mov r1, #0x9a
	mov r2, #0
	bl GetMonData
	cmp r0, #0
	beq _02071A2A
	add r0, r7, #0
	orr r0, r4
	lsl r0, r0, #0x18
	lsr r7, r0, #0x18
_02071A2A:
	lsl r0, r5, #0x17
	add r6, r6, #1
	lsl r4, r4, #1
	lsr r5, r0, #0x18
	bne _02071A08
	b _02071A4E
_02071A36:
	add r1, r6, #0
	bl GetPartyMonByIndex
	mov r1, #0x9a
	add r2, r6, #0
	bl GetMonData
	cmp r0, #0
	beq _02071A4E
	add r0, r7, #1
	lsl r0, r0, #0x18
	lsr r7, r0, #0x18
_02071A4E:
	add r0, r7, #0
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_020719F8

	thumb_func_start sub_02071A54
sub_02071A54: ; 0x02071A54
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	str r0, [sp]
	add r5, r1, #0
	bl GetPartyCount
	mov r6, #0
	str r0, [sp, #4]
	cmp r0, #0
	ble _02071AC6
	add r4, sp, #8
_02071A6A:
	ldr r0, [sp]
	add r1, r6, #0
	bl GetPartyMonByIndex
	mov r1, #5
	mov r2, #0
	add r7, r0, #0
	bl GetMonData
	cmp r0, #0
	beq _02071ABE
	add r0, r7, #0
	mov r1, #0x9a
	mov r2, #0
	bl GetMonData
	strb r0, [r4]
	ldrb r1, [r4]
	mov r0, #0xf
	and r0, r1
	beq _02071ABE
	cmp r0, r5
	blt _02071A9C
	cmp r5, #4
	ble _02071AA6
_02071A9C:
	ldrb r1, [r4]
	mov r0, #0xf0
	and r0, r1
	strb r0, [r4]
	b _02071AAA
_02071AA6:
	sub r0, r1, r5
	strb r0, [r4]
_02071AAA:
	ldrb r0, [r4]
	cmp r0, #0
	bne _02071AB4
	mov r0, #0x10
	strb r0, [r4]
_02071AB4:
	add r0, r7, #0
	mov r1, #0x9a
	add r2, sp, #8
	bl sub_0206EC40
_02071ABE:
	ldr r0, [sp, #4]
	add r6, r6, #1
	cmp r6, r0
	blt _02071A6A
_02071AC6:
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_02071A54

	thumb_func_start sub_02071ACC
sub_02071ACC: ; 0x02071ACC
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #8
	add r5, r0, #0
	bl GetPartyCount
	add r7, r0, #0
	bl LCRandom
	mov r1, #3
	bl _s32_div_f
	cmp r1, #0
	bne _02071B74
	mov r4, #0
	cmp r7, #0
	ble _02071B74
	sub r0, r7, #1
	str r0, [sp]
_02071AF0:
	add r0, r5, #0
	add r1, r4, #0
	bl GetPartyMonByIndex
	mov r1, #5
	mov r2, #0
	add r6, r0, #0
	bl GetMonData
	cmp r0, #0
	beq _02071B6E
	add r0, r6, #0
	mov r1, #0x9a
	mov r2, #0
	bl GetMonData
	add r1, sp, #4
	strb r0, [r1]
	add r0, r1, #0
	ldrb r1, [r0]
	mov r0, #0xf
	tst r0, r1
	beq _02071B6E
	cmp r4, #0
	beq _02071B44
	add r0, r5, #0
	sub r1, r4, #1
	bl GetPartyMonByIndex
	mov r1, #0x9a
	mov r2, #0
	add r6, r0, #0
	bl GetMonData
	mov r1, #0xf0
	tst r0, r1
	bne _02071B44
	add r0, r6, #0
	mov r1, #0x9a
	add r2, sp, #4
	bl sub_0206EC40
_02071B44:
	ldr r0, [sp]
	cmp r4, r0
	bge _02071B6E
	add r0, r5, #0
	add r1, r4, #1
	bl GetPartyMonByIndex
	mov r1, #0x9a
	mov r2, #0
	add r6, r0, #0
	bl GetMonData
	mov r1, #0xf0
	tst r0, r1
	bne _02071B6E
	add r0, r6, #0
	mov r1, #0x9a
	add r2, sp, #4
	bl sub_0206EC40
	add r4, r4, #1
_02071B6E:
	add r4, r4, #1
	cmp r4, r7
	blt _02071AF0
_02071B74:
	add sp, #8
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_02071ACC

	thumb_func_start sub_02071B78
sub_02071B78: ; 0x02071B78
	ldr r3, _02071B7C ; =sub_02071B80
	bx r3
	.balign 4, 0
_02071B7C: .word sub_02071B80
	thumb_func_end sub_02071B78

	thumb_func_start sub_02071B80
sub_02071B80: ; 0x02071B80
	push {r3, lr}
	mov r1, #0x9a
	mov r2, #0
	bl GetBoxMonData
	mov r1, #0xf
	tst r0, r1
	beq _02071B94
	mov r0, #1
	pop {r3, pc}
_02071B94:
	mov r0, #0
	pop {r3, pc}
	thumb_func_end sub_02071B80

	thumb_func_start sub_02071B98
sub_02071B98: ; 0x02071B98
	ldr r3, _02071B9C ; =sub_02071BA0
	bx r3
	.balign 4, 0
_02071B9C: .word sub_02071BA0
	thumb_func_end sub_02071B98

	thumb_func_start sub_02071BA0
sub_02071BA0: ; 0x02071BA0
	push {r3, lr}
	mov r1, #0x9a
	mov r2, #0
	bl GetBoxMonData
	lsl r0, r0, #0x18
	lsr r1, r0, #0x18
	mov r0, #0xf
	tst r0, r1
	beq _02071BB8
	mov r0, #0
	pop {r3, pc}
_02071BB8:
	mov r0, #0xf0
	tst r0, r1
	beq _02071BC2
	mov r0, #1
	pop {r3, pc}
_02071BC2:
	mov r0, #0
	pop {r3, pc}
	.balign 4, 0
	thumb_func_end sub_02071BA0

	thumb_func_start sub_02071BC8
sub_02071BC8: ; 0x02071BC8
	ldr r3, _02071BCC ; =sub_02071BD0
	bx r3
	.balign 4, 0
_02071BCC: .word sub_02071BD0
	thumb_func_end sub_02071BC8

	thumb_func_start sub_02071BD0
sub_02071BD0: ; 0x02071BD0
	push {r3, r4, r5, r6, lr}
	sub sp, #4
	add r5, r0, #0
	mov r1, #5
	mov r2, #0
	bl GetBoxMonData
	add r4, r0, #0
	add r0, r5, #0
	mov r1, #0xa
	mov r2, #0
	bl GetBoxMonData
	add r6, r0, #0
	add r0, r5, #0
	mov r1, #6
	mov r2, #0
	bl GetBoxMonData
	ldr r1, _02071C24 ; =0x000001ED
	cmp r4, r1
	bne _02071C20
	cmp r6, #0x79
	bne _02071C20
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	mov r1, #1
	mov r2, #0
	bl sub_02077D88
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	bl sub_02071C28
	str r0, [sp]
	add r0, r5, #0
	mov r1, #0x70
	add r2, sp, #0
	bl sub_0206ED70
_02071C20:
	add sp, #4
	pop {r3, r4, r5, r6, pc}
	.balign 4, 0
_02071C24: .word 0x000001ED
	thumb_func_end sub_02071BD0

	thumb_func_start sub_02071C28
sub_02071C28: ; 0x02071C28
	sub r0, #0x7e
	cmp r0, #0xf
	bhi _02071C9A
	add r0, r0, r0
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_02071C3A: ; jump table
	.short _02071C5A - _02071C3A - 2 ; case 0
	.short _02071C5E - _02071C3A - 2 ; case 1
	.short _02071C62 - _02071C3A - 2 ; case 2
	.short _02071C66 - _02071C3A - 2 ; case 3
	.short _02071C6A - _02071C3A - 2 ; case 4
	.short _02071C6E - _02071C3A - 2 ; case 5
	.short _02071C72 - _02071C3A - 2 ; case 6
	.short _02071C76 - _02071C3A - 2 ; case 7
	.short _02071C7A - _02071C3A - 2 ; case 8
	.short _02071C7E - _02071C3A - 2 ; case 9
	.short _02071C82 - _02071C3A - 2 ; case 10
	.short _02071C86 - _02071C3A - 2 ; case 11
	.short _02071C8A - _02071C3A - 2 ; case 12
	.short _02071C8E - _02071C3A - 2 ; case 13
	.short _02071C92 - _02071C3A - 2 ; case 14
	.short _02071C96 - _02071C3A - 2 ; case 15
_02071C5A:
	mov r0, #0xa
	bx lr
_02071C5E:
	mov r0, #0xb
	bx lr
_02071C62:
	mov r0, #0xd
	bx lr
_02071C66:
	mov r0, #0xc
	bx lr
_02071C6A:
	mov r0, #0xf
	bx lr
_02071C6E:
	mov r0, #1
	bx lr
_02071C72:
	mov r0, #3
	bx lr
_02071C76:
	mov r0, #4
	bx lr
_02071C7A:
	mov r0, #2
	bx lr
_02071C7E:
	mov r0, #0xe
	bx lr
_02071C82:
	mov r0, #6
	bx lr
_02071C86:
	mov r0, #5
	bx lr
_02071C8A:
	mov r0, #7
	bx lr
_02071C8E:
	mov r0, #0x10
	bx lr
_02071C92:
	mov r0, #0x11
	bx lr
_02071C96:
	mov r0, #8
	bx lr
_02071C9A:
	mov r0, #0
	bx lr
	.balign 4, 0
	thumb_func_end sub_02071C28

	thumb_func_start sub_02071CA0
sub_02071CA0: ; 0x02071CA0
	push {r3, r4, r5, lr}
	add r5, r0, #0
	bl sub_02071CBC
	add r4, r0, #0
	mov r0, #0
	mvn r0, r0
	cmp r4, r0
	beq _02071CB8
	add r0, r5, #0
	bl sub_0206E250
_02071CB8:
	add r0, r4, #0
	pop {r3, r4, r5, pc}
	thumb_func_end sub_02071CA0

	thumb_func_start sub_02071CBC
sub_02071CBC: ; 0x02071CBC
	push {r3, r4, r5, lr}
	add r5, r0, #0
	mov r1, #5
	mov r2, #0
	bl GetBoxMonData
	add r4, r0, #0
	add r0, r5, #0
	mov r1, #6
	mov r2, #0
	bl GetBoxMonData
	ldr r1, _02071D00 ; =0x000001E7
	cmp r4, r1
	bne _02071CFA
	cmp r0, #0x70
	bne _02071CE2
	mov r0, #1
	b _02071CE4
_02071CE2:
	mov r0, #0
_02071CE4:
	str r0, [sp]
	add r0, r5, #0
	mov r1, #0x70
	add r2, sp, #0
	bl sub_0206ED70
	add r0, r5, #0
	bl sub_020722DC
	ldr r0, [sp]
	pop {r3, r4, r5, pc}
_02071CFA:
	mov r0, #0
	mvn r0, r0
	pop {r3, r4, r5, pc}
	.balign 4, 0
_02071D00: .word 0x000001E7
	thumb_func_end sub_02071CBC

	thumb_func_start sub_02071D04
sub_02071D04: ; 0x02071D04
	push {r3, r4, lr}
	sub sp, #4
	mov r1, #1
	str r1, [sp]
	mov r1, #5
	mov r2, #0
	add r4, r0, #0
	bl GetMonData
	ldr r1, _02071D38 ; =0x000001E7
	cmp r0, r1
	bne _02071D32
	add r0, r4, #0
	mov r1, #0x70
	add r2, sp, #0
	bl sub_0206ED70
	add r0, r4, #0
	bl sub_020722DC
	add r0, r4, #0
	bl sub_0206E250
_02071D32:
	add sp, #4
	pop {r3, r4, pc}
	nop
_02071D38: .word 0x000001E7
	thumb_func_end sub_02071D04

	thumb_func_start sub_02071D3C
sub_02071D3C: ; 0x02071D3C
	push {r3, r4, r5, r6, r7, lr}
	add r7, r0, #0
	add r5, r1, #0
	bl GetPartyCount
	add r6, r0, #0
	mov r4, #0
	cmp r6, #0
	ble _02071D6A
_02071D4E:
	add r0, r7, #0
	add r1, r4, #0
	bl GetPartyMonByIndex
	cmp r5, #0
	beq _02071D60
	bl sub_02071D04
	b _02071D64
_02071D60:
	bl sub_02071CA0
_02071D64:
	add r4, r4, #1
	cmp r4, r6
	blt _02071D4E
_02071D6A:
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_02071D3C

	thumb_func_start sub_02071D6C
sub_02071D6C: ; 0x02071D6C
	push {r4, lr}
	add r4, r0, #0
	bl sub_02071D7C
	add r0, r4, #0
	bl sub_0206E250
	pop {r4, pc}
	thumb_func_end sub_02071D6C

	thumb_func_start sub_02071D7C
sub_02071D7C: ; 0x02071D7C
	push {r0, r1, r2, r3}
	push {r4, lr}
	mov r1, #5
	mov r2, #0
	add r4, r0, #0
	bl GetBoxMonData
	mov r1, #0x7b
	lsl r1, r1, #2
	cmp r0, r1
	bne _02071DAC
	ldr r0, [sp, #0xc]
	cmp r0, #1
	ble _02071D9C
	bl GF_AssertFail
_02071D9C:
	add r0, r4, #0
	mov r1, #0x70
	add r2, sp, #0xc
	bl sub_0206ED70
	add r0, r4, #0
	bl sub_020722DC
_02071DAC:
	pop {r4}
	pop {r3}
	add sp, #0x10
	bx r3
	thumb_func_end sub_02071D7C

	thumb_func_start sub_02071DB4
sub_02071DB4: ; 0x02071DB4
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x10
	add r4, r0, #0
	mov r1, #5
	mov r2, #0
	bl GetMonData
	add r5, r0, #0
	add r0, r4, #0
	mov r1, #0x70
	mov r2, #0
	bl GetMonData
	add r6, r0, #0
	add r0, r4, #0
	mov r1, #0xa0
	mov r2, #0
	bl GetMonData
	add r7, r0, #0
	add r0, r4, #0
	mov r1, #0xa3
	mov r2, #0
	bl GetMonData
	str r0, [sp]
	add r0, r4, #0
	mov r1, #0x6e
	mov r2, #0
	bl GetMonData
	add r4, r0, #0
	add r0, sp, #4
	bl GF_RTC_CopyTime
	mov r0, #0x7b
	lsl r0, r0, #2
	cmp r5, r0
	bne _02071E26
	cmp r6, #0
	bne _02071E26
	ldr r0, [sp]
	cmp r0, #0
	beq _02071E26
	cmp r4, #1
	bne _02071E26
	mov r0, #0x20
	tst r0, r7
	bne _02071E26
	ldr r0, [sp, #4]
	cmp r0, #4
	blo _02071E26
	cmp r0, #0x14
	bhs _02071E26
	add sp, #0x10
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_02071E26:
	mov r0, #0
	add sp, #0x10
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_02071DB4

	thumb_func_start sub_02071E2C
sub_02071E2C: ; 0x02071E2C
	push {r3, r4, r5, r6, r7, lr}
	str r0, [sp]
	bl GetPartyCount
	add r7, r0, #0
	mov r5, #0
	cmp r7, #0
	ble _02071E74
_02071E3C:
	ldr r0, [sp]
	add r1, r5, #0
	bl GetPartyMonByIndex
	add r4, r0, #0
	mov r1, #5
	mov r2, #0
	bl GetMonData
	add r6, r0, #0
	add r0, r4, #0
	mov r1, #0x70
	mov r2, #0
	bl GetMonData
	mov r1, #0x7b
	lsl r1, r1, #2
	cmp r6, r1
	bne _02071E6E
	cmp r0, #1
	bne _02071E6E
	add r0, r4, #0
	mov r1, #0
	bl sub_02071D6C
_02071E6E:
	add r5, r5, #1
	cmp r5, r7
	blt _02071E3C
_02071E74:
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_02071E2C

	thumb_func_start sub_02071E78
sub_02071E78: ; 0x02071E78
	push {r4, lr}
	ldr r3, [r2]
	cmp r3, #0x14
	bhs _02071E84
	cmp r3, #4
	bhs _02071EA6
_02071E84:
	cmp r3, #4
	bge _02071E8A
	add r3, #0x18
_02071E8A:
	ldr r4, [r2, #4]
	sub r3, #0x14
	mov r2, #0x3c
	mul r2, r3
	add r2, r4, r2
	add r1, r1, #1
	cmp r2, r1
	bge _02071EA2
	bl sub_02071E2C
	mov r0, #1
	pop {r4, pc}
_02071EA2:
	mov r0, #0
	pop {r4, pc}
_02071EA6:
	ldr r4, [r2, #4]
	sub r3, r3, #4
	mov r2, #0x3c
	mul r2, r3
	add r2, r4, r2
	cmp r2, r1
	bge _02071EBC
	bl sub_02071E2C
	mov r0, #1
	pop {r4, pc}
_02071EBC:
	mov r0, #0
	pop {r4, pc}
	thumb_func_end sub_02071E78

	thumb_func_start sub_02071EC0
sub_02071EC0: ; 0x02071EC0
	push {r0, r1, r2, r3}
	push {r3, r4, r5, r6, r7, lr}
	str r2, [sp]
	mov r1, #5
	mov r2, #0
	add r4, r0, #0
	bl GetMonData
	ldr r1, _02071FBC ; =0x000001DF
	cmp r0, r1
	beq _02071EE0
	mov r0, #0
	pop {r3, r4, r5, r6, r7}
	pop {r3}
	add sp, #0x10
	bx r3
_02071EE0:
	add r0, r4, #0
	mov r1, #0x70
	mov r2, #0
	bl GetMonData
	ldr r0, [sp, #0x1c]
	mov r5, #0
	lsl r1, r0, #1
	ldr r0, _02071FC0 ; =0x020FF4EC
	add r7, r5, #0
	ldrh r6, [r0, r1]
_02071EF6:
	add r1, r5, #0
	add r0, r4, #0
	add r1, #0x36
	add r2, r7, #0
	bl GetMonData
	ldr r3, _02071FC4 ; =0x020FF4EE
	add r2, r0, #0
	mov r1, #1
_02071F08:
	cmp r2, #0
	beq _02071F34
	ldrh r0, [r3]
	cmp r2, r0
	bne _02071F34
	cmp r6, #0
	beq _02071F28
	lsl r1, r6, #0x10
	lsl r2, r5, #0x18
	add r0, r4, #0
	lsr r1, r1, #0x10
	lsr r2, r2, #0x18
	bl sub_020714B0
	mov r6, #0
	b _02071F3C
_02071F28:
	add r0, r4, #0
	add r1, r5, #0
	bl sub_020716C0
	sub r5, r5, #1
	b _02071F3C
_02071F34:
	add r1, r1, #1
	add r3, r3, #2
	cmp r1, #6
	blo _02071F08
_02071F3C:
	add r5, r5, #1
	cmp r5, #4
	blt _02071EF6
	cmp r6, #0
	beq _02071F84
	mov r5, #0
	add r7, r5, #0
_02071F4A:
	add r1, r5, #0
	add r0, r4, #0
	add r1, #0x36
	add r2, r7, #0
	bl GetMonData
	cmp r0, #0
	bne _02071F6A
	lsl r1, r6, #0x10
	lsl r2, r5, #0x18
	add r0, r4, #0
	lsr r1, r1, #0x10
	lsr r2, r2, #0x18
	bl sub_020714B0
	b _02071F70
_02071F6A:
	add r5, r5, #1
	cmp r5, #4
	blt _02071F4A
_02071F70:
	cmp r5, #4
	bne _02071F84
	ldr r2, [sp]
	lsl r1, r6, #0x10
	lsl r2, r2, #0x18
	add r0, r4, #0
	lsr r1, r1, #0x10
	lsr r2, r2, #0x18
	bl sub_020714B0
_02071F84:
	add r0, r4, #0
	mov r1, #0x36
	mov r2, #0
	bl GetMonData
	cmp r0, #0
	bne _02071F9C
	add r0, r4, #0
	mov r1, #0x54
	mov r2, #0
	bl sub_020714B0
_02071F9C:
	add r0, r4, #0
	mov r1, #0x70
	add r2, sp, #0x1c
	bl sub_0206EC40
	add r0, r4, #0
	bl sub_020722D4
	add r0, r4, #0
	bl sub_0206E250
	mov r0, #1
	pop {r3, r4, r5, r6, r7}
	pop {r3}
	add sp, #0x10
	bx r3
	.balign 4, 0
_02071FBC: .word 0x000001DF
_02071FC0: .word 0x020FF4EC
_02071FC4: .word 0x020FF4EE
	thumb_func_end sub_02071EC0

	thumb_func_start sub_02071FC8
sub_02071FC8: ; 0x02071FC8
	push {r4, lr}
	add r4, r2, #0
	bl sub_02072634
	add r2, r0, #0
	add r0, r4, #0
	mov r1, #0x21
	bl ReadWholeNarcMemberByIdPair
	pop {r4, pc}
	thumb_func_end sub_02071FC8

	thumb_func_start sub_02071FDC
sub_02071FDC: ; 0x02071FDC
	push {r4, r5, r6, lr}
	sub sp, #8
	add r6, r0, #0
	ldr r0, _02072048 ; =0x000001B9
	add r4, r2, #0
	add r5, r1, #0
	cmp r4, r0
	bne _02072030
	add r0, r5, #0
	bl sub_02006F30
	cmp r0, #0
	bne _02072014
	mov r0, #1
	bl sub_02006E3C
	ldr r0, [sp, #0x24]
	ldr r2, [sp, #0x18]
	str r0, [sp]
	mov r0, #0
	str r0, [sp, #4]
	ldr r3, [sp, #0x1c]
	add r0, r5, #0
	add r1, r4, #0
	bl sub_020063A4
	add sp, #8
	pop {r4, r5, r6, pc}
_02072014:
	ldr r0, [sp, #0x20]
	cmp r0, #0
	beq _02072020
	mov r0, #1
	bl sub_02006E3C
_02072020:
	ldr r2, [sp, #0x1c]
	ldr r3, [sp, #0x18]
	add r0, r6, #0
	mov r1, #0
	bl sub_02006E4C
	add sp, #8
	pop {r4, r5, r6, pc}
_02072030:
	ldr r0, [sp, #0x24]
	ldr r2, [sp, #0x18]
	str r0, [sp]
	mov r0, #0
	str r0, [sp, #4]
	ldr r3, [sp, #0x1c]
	add r0, r5, #0
	add r1, r4, #0
	bl sub_020063A4
	add sp, #8
	pop {r4, r5, r6, pc}
	.balign 4, 0
_02072048: .word 0x000001B9
	thumb_func_end sub_02071FDC

	thumb_func_start sub_0207204C
sub_0207204C: ; 0x0207204C
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	add r7, r0, #0
	ldr r0, _020720D0 ; =0x000001B9
	add r5, r2, #0
	add r6, r1, #0
	add r4, r3, #0
	cmp r5, r0
	bne _020720B0
	add r0, r6, #0
	bl sub_02006F30
	cmp r0, #0
	bne _0207208E
	mov r0, #1
	bl sub_02006E3C
	ldr r0, [sp, #0x2c]
	ldr r2, [sp, #0x20]
	str r0, [sp]
	add r0, sp, #0x30
	ldrb r0, [r0]
	ldr r3, [sp, #0x24]
	add r1, r5, #0
	str r0, [sp, #4]
	lsl r0, r4, #0x18
	lsr r0, r0, #0x18
	str r0, [sp, #8]
	add r0, r6, #0
	bl sub_02006920
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
_0207208E:
	ldr r0, [sp, #0x28]
	cmp r0, #0
	beq _0207209A
	mov r0, #1
	bl sub_02006E3C
_0207209A:
	add r0, sp, #0x30
	ldrb r0, [r0]
	ldr r2, [sp, #0x24]
	ldr r3, [sp, #0x20]
	str r0, [sp]
	add r0, r7, #0
	mov r1, #0
	bl sub_02006EA0
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
_020720B0:
	ldr r0, [sp, #0x2c]
	ldr r2, [sp, #0x20]
	str r0, [sp]
	add r0, sp, #0x30
	ldrb r0, [r0]
	ldr r3, [sp, #0x24]
	add r1, r5, #0
	str r0, [sp, #4]
	lsl r0, r4, #0x18
	lsr r0, r0, #0x18
	str r0, [sp, #8]
	add r0, r6, #0
	bl sub_02006920
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
	.balign 4, 0
_020720D0: .word 0x000001B9
	thumb_func_end sub_0207204C

	thumb_func_start sub_020720D4
sub_020720D4: ; 0x020720D4
	push {r3, r4, r5, lr}
	add r5, r0, #0
	mov r1, #5
	mov r2, #0
	bl GetMonData
	add r4, r0, #0
	add r0, r5, #0
	mov r1, #0x70
	mov r2, #0
	bl GetMonData
	add r1, r0, #0
	lsl r0, r4, #0x10
	lsl r1, r1, #0x18
	lsr r0, r0, #0x10
	lsr r1, r1, #0x18
	bl sub_02006218
	pop {r3, r4, r5, pc}
	thumb_func_end sub_020720D4

	thumb_func_start sub_020720FC
sub_020720FC: ; 0x020720FC
	push {r3, r4, r5, r6, lr}
	sub sp, #0xc
	ldr r6, [sp, #0x20]
	add r5, r0, #0
	str r6, [sp]
	ldr r6, [sp, #0x24]
	add r4, r2, #0
	str r6, [sp, #4]
	bl sub_0207213C
	cmp r4, #0xe
	bne _02072138
	add r0, r5, #0
	mov r1, #0xa4
	mov r2, #0
	bl GetMonData
	str r0, [sp, #8]
	add r0, r5, #0
	mov r1, #0xa3
	add r2, sp, #8
	bl sub_0206EC40
	mov r0, #0
	str r0, [sp, #8]
	add r0, r5, #0
	mov r1, #0xa0
	add r2, sp, #8
	bl sub_0206EC40
_02072138:
	add sp, #0xc
	pop {r3, r4, r5, r6, pc}
	thumb_func_end sub_020720FC

	thumb_func_start sub_0207213C
sub_0207213C: ; 0x0207213C
	push {r0, r1, r2, r3}
	push {r3, r4, lr}
	sub sp, #4
	ldr r2, [sp, #0x24]
	add r4, r0, #0
	str r2, [sp]
	mov r2, #0
	bl sub_0208F270
	ldr r2, _02072178 ; =gGameVersion
	add r0, r4, #0
	mov r1, #0x7a
	bl sub_0206ED70
	add r0, r4, #0
	mov r1, #0x9b
	add r2, sp, #0x18
	bl sub_0206ED70
	add r0, r4, #0
	mov r1, #0x9e
	add r2, sp, #0x20
	bl sub_0206ED70
	add sp, #4
	pop {r3, r4}
	pop {r3}
	add sp, #0x10
	bx r3
	nop
_02072178: .word gGameVersion
	thumb_func_end sub_0207213C

	thumb_func_start sub_0207217C
sub_0207217C: ; 0x0207217C
	push {r4, lr}
	sub sp, #8
	ldr r4, [sp, #0x10]
	str r4, [sp]
	ldr r4, [sp, #0x14]
	str r4, [sp, #4]
	bl sub_02072190
	add sp, #8
	pop {r4, pc}
	thumb_func_end sub_0207217C

	thumb_func_start sub_02072190
sub_02072190: ; 0x02072190
	push {r4, lr}
	sub sp, #8
	ldr r4, [sp, #0x10]
	str r4, [sp]
	ldr r4, [sp, #0x14]
	str r4, [sp, #4]
	bl sub_0207213C
	add sp, #8
	pop {r4, pc}
	thumb_func_end sub_02072190

	thumb_func_start sub_020721A4
sub_020721A4: ; 0x020721A4
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #8
	add r5, r0, #0
	mov r0, #0x81
	add r7, r2, #0
	tst r0, r1
	bne _0207223E
	bl LCRandom
	mov r1, #0x64
	bl _s32_div_f
	add r4, r1, #0
	add r0, r5, #0
	mov r1, #5
	mov r2, #0
	bl GetMonData
	lsl r0, r0, #0x10
	lsr r6, r0, #0x10
	add r0, r5, #0
	mov r1, #0x70
	mov r2, #0
	bl GetMonData
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	str r0, [sp]
	ldr r1, [sp]
	add r0, r6, #0
	mov r2, #0x10
	bl sub_0206FBC4
	add r1, sp, #4
	strh r0, [r1, #2]
	ldr r1, [sp]
	add r0, r6, #0
	mov r2, #0x11
	bl sub_0206FBC4
	add r1, sp, #4
	strh r0, [r1]
	ldrh r2, [r1, #2]
	ldrh r0, [r1]
	cmp r2, r0
	bne _02072214
	cmp r2, #0
	beq _02072214
	add r2, sp, #4
	add r0, r5, #0
	mov r1, #6
	add r2, #2
	bl sub_0206EC40
	add sp, #8
	pop {r3, r4, r5, r6, r7, pc}
_02072214:
	ldr r0, _02072244 ; =0x020FF4E4
	lsl r1, r7, #2
	ldrh r0, [r0, r1]
	cmp r4, r0
	blo _0207223E
	ldr r0, _02072248 ; =0x020FF4E6
	ldrh r0, [r0, r1]
	cmp r4, r0
	add r2, sp, #4
	bhs _02072236
	add r0, r5, #0
	mov r1, #6
	add r2, #2
	bl sub_0206EC40
	add sp, #8
	pop {r3, r4, r5, r6, r7, pc}
_02072236:
	add r0, r5, #0
	mov r1, #6
	bl sub_0206EC40
_0207223E:
	add sp, #8
	pop {r3, r4, r5, r6, r7, pc}
	nop
_02072244: .word 0x020FF4E4
_02072248: .word 0x020FF4E6
	thumb_func_end sub_020721A4

	thumb_func_start sub_0207224C
sub_0207224C: ; 0x0207224C
	ldr r3, _02072250 ; =sub_02072254
	bx r3
	.balign 4, 0
_02072250: .word sub_02072254
	thumb_func_end sub_0207224C

	thumb_func_start sub_02072254
sub_02072254: ; 0x02072254
	push {r4, r5, r6, lr}
	add r6, r1, #0
	mov r1, #0xae
	mov r2, #0
	add r5, r0, #0
	bl GetBoxMonData
	lsl r0, r0, #0x10
	lsr r4, r0, #0x10
	add r0, r5, #0
	mov r1, #0x70
	mov r2, #0
	bl GetBoxMonData
	add r1, r0, #0
	add r0, r4, #0
	add r2, r6, #0
	bl sub_0207227C
	pop {r4, r5, r6, pc}
	thumb_func_end sub_02072254

	thumb_func_start sub_0207227C
sub_0207227C: ; 0x0207227C
	push {r4, lr}
	ldr r3, _020722D0 ; =0x000001EE
	cmp r0, r3
	bne _02072288
	mov r0, #0
	pop {r4, pc}
_02072288:
	cmp r2, #0x20
	bhs _02072296
	mov r3, #1
	add r4, r3, #0
	lsl r4, r2
	mov r2, #0x1d
	b _020722C0
_02072296:
	cmp r2, #0x40
	bhs _020722A6
	mov r3, #1
	sub r2, #0x20
	add r4, r3, #0
	lsl r4, r2
	mov r2, #0x1e
	b _020722C0
_020722A6:
	cmp r2, #0x60
	bhs _020722B6
	mov r3, #1
	sub r2, #0x40
	add r4, r3, #0
	lsl r4, r2
	mov r2, #0x1f
	b _020722C0
_020722B6:
	mov r3, #1
	sub r2, #0x60
	add r4, r3, #0
	lsl r4, r2
	mov r2, #0x20
_020722C0:
	bl sub_0206FBC4
	tst r0, r4
	beq _020722CC
	mov r0, #1
	pop {r4, pc}
_020722CC:
	mov r0, #0
	pop {r4, pc}
	.balign 4, 0
_020722D0: .word 0x000001EE
	thumb_func_end sub_0207227C

	thumb_func_start sub_020722D4
sub_020722D4: ; 0x020722D4
	ldr r3, _020722D8 ; =sub_020722DC
	bx r3
	.balign 4, 0
_020722D8: .word sub_020722DC
	thumb_func_end sub_020722D4

	thumb_func_start sub_020722DC
sub_020722DC: ; 0x020722DC
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	add r5, r0, #0
	bl sub_0206DDD8
	add r7, r0, #0
	add r0, r5, #0
	mov r1, #5
	mov r2, #0
	bl GetBoxMonData
	mov r1, #0
	add r4, r0, #0
	add r0, r5, #0
	add r2, r1, #0
	bl GetBoxMonData
	add r6, r0, #0
	add r0, r5, #0
	mov r1, #0x70
	mov r2, #0
	bl GetBoxMonData
	str r0, [sp]
	ldr r1, [sp]
	add r0, r4, #0
	mov r2, #0x18
	bl sub_0206FBC4
	str r0, [sp, #8]
	ldr r1, [sp]
	add r0, r4, #0
	mov r2, #0x19
	bl sub_0206FBC4
	str r0, [sp, #4]
	cmp r0, #0
	beq _02072346
	mov r0, #1
	tst r0, r6
	beq _0207233A
	add r0, r5, #0
	mov r1, #0xa
	add r2, sp, #4
	bl sub_0206ED70
	b _02072350
_0207233A:
	add r0, r5, #0
	mov r1, #0xa
	add r2, sp, #8
	bl sub_0206ED70
	b _02072350
_02072346:
	add r0, r5, #0
	mov r1, #0xa
	add r2, sp, #8
	bl sub_0206ED70
_02072350:
	add r0, r5, #0
	add r1, r7, #0
	bl sub_0206DE00
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
	thumb_func_end sub_020722DC

	thumb_func_start sub_0207235C
sub_0207235C: ; 0x0207235C
	push {r4, r5, r6, r7, lr}
	sub sp, #0x1c
	add r5, r0, #0
	mov r0, #0
	str r1, [sp]
	bl AllocMonZeroed
	str r0, [sp, #4]
	ldr r1, [sp, #4]
	add r0, r5, #0
	bl sub_0207188C
	ldr r0, [sp, #4]
	ldr r1, [r5]
	mov r2, #0
	bl sub_02072608
	add r4, r0, #0
	ldr r0, [sp, #4]
	ldr r1, [r5]
	mov r2, #1
	bl sub_02072608
	add r6, r0, #0
	ldr r0, [sp, #4]
	ldr r1, [r5]
	mov r2, #2
	bl sub_02072608
	add r7, r0, #0
	ldr r0, [sp, #4]
	ldr r1, [r5]
	mov r2, #3
	bl sub_02072608
	str r0, [sp, #8]
	ldr r1, [sp]
	add r0, r5, #0
	mov r2, #0
	bl sub_02072608
	str r0, [sp, #0xc]
	ldr r1, [sp]
	add r0, r5, #0
	mov r2, #1
	bl sub_02072608
	str r0, [sp, #0x10]
	ldr r1, [sp]
	add r0, r5, #0
	mov r2, #2
	bl sub_02072608
	str r0, [sp, #0x14]
	ldr r1, [sp]
	add r0, r5, #0
	mov r2, #3
	bl sub_02072608
	ldr r2, [sp, #4]
	str r0, [sp, #0x18]
	ldr r0, [sp, #4]
	ldrh r2, [r2, #6]
	add r0, #8
	mov r1, #0x80
	bl sub_020725E0
	add r0, r5, #0
	ldr r2, [r5]
	add r0, #0x88
	mov r1, #0x64
	bl sub_020725E0
	add r0, r5, #0
	ldrh r2, [r5, #6]
	add r0, #8
	mov r1, #0x80
	bl sub_020725E0
	ldr r0, [sp]
	str r0, [r5]
	ldr r2, [sp, #0xc]
	ldmia r4!, {r0, r1}
	stmia r2!, {r0, r1}
	str r2, [sp, #0xc]
	ldmia r4!, {r0, r1}
	stmia r2!, {r0, r1}
	str r2, [sp, #0xc]
	ldmia r4!, {r0, r1}
	stmia r2!, {r0, r1}
	str r2, [sp, #0xc]
	ldmia r4!, {r0, r1}
	stmia r2!, {r0, r1}
	str r2, [sp, #0xc]
	ldr r2, [sp, #0x10]
	ldmia r6!, {r0, r1}
	stmia r2!, {r0, r1}
	str r2, [sp, #0x10]
	ldmia r6!, {r0, r1}
	stmia r2!, {r0, r1}
	str r2, [sp, #0x10]
	ldmia r6!, {r0, r1}
	stmia r2!, {r0, r1}
	str r2, [sp, #0x10]
	ldmia r6!, {r0, r1}
	stmia r2!, {r0, r1}
	str r2, [sp, #0x10]
	ldr r2, [sp, #0x14]
	ldmia r7!, {r0, r1}
	stmia r2!, {r0, r1}
	str r2, [sp, #0x14]
	ldmia r7!, {r0, r1}
	stmia r2!, {r0, r1}
	str r2, [sp, #0x14]
	ldmia r7!, {r0, r1}
	stmia r2!, {r0, r1}
	str r2, [sp, #0x14]
	ldmia r7!, {r0, r1}
	stmia r2!, {r0, r1}
	str r2, [sp, #0x14]
	mov r0, #0x10
_0207244E:
	ldr r1, [sp, #8]
	ldrh r2, [r1]
	add r1, r1, #2
	str r1, [sp, #8]
	ldr r1, [sp, #0x18]
	strh r2, [r1]
	add r1, r1, #2
	str r1, [sp, #0x18]
	sub r0, r0, #1
	bne _0207244E
	add r0, r5, #0
	add r0, #8
	mov r1, #0x80
	bl sub_020725E8
	strh r0, [r5, #6]
	add r0, r5, #0
	ldrh r2, [r5, #6]
	add r0, #8
	mov r1, #0x80
	bl MonEncryptSegment
	add r0, r5, #0
	ldr r2, [r5]
	add r0, #0x88
	mov r1, #0x64
	bl MonEncryptSegment
	ldr r0, [sp, #4]
	bl FreeToHeap
	add sp, #0x1c
	pop {r4, r5, r6, r7, pc}
	thumb_func_end sub_0207235C

	thumb_func_start sub_02072490
sub_02072490: ; 0x02072490
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	str r3, [sp]
	add r0, sp, #8
	ldrb r0, [r0, #0x10]
	add r6, r1, #0
	add r7, r2, #0
	cmp r0, #2
	blo _020724A6
	bl GF_AssertFail
_020724A6:
	ldr r0, [sp]
	cmp r0, #0xff
	bne _020724B0
	bl GF_AssertFail
_020724B0:
	ldr r0, [sp, #0x1c]
	cmp r0, #0
	beq _020724EC
	ldr r0, _020725A0 ; =0xFFFF0000
	add r2, r7, #0
	and r0, r5
	lsr r1, r0, #0x10
	lsl r0, r5, #0x10
	add r4, r1, #0
	lsr r0, r0, #0x10
	eor r4, r0
	ldr r1, [sp]
	add r0, r6, #0
	bl sub_0206E1EC
	add r5, r0, #0
	mov r0, #1
	add r1, r5, #0
	and r1, r0
	add r0, sp, #8
	ldrb r0, [r0, #0x10]
	cmp r1, r0
	beq _020724E0
	add r5, r5, #1
_020724E0:
	lsl r0, r5, #0x10
	lsr r0, r0, #0x10
	eor r0, r4
	lsl r0, r0, #0x10
	orr r5, r0
	b _0207259A
_020724EC:
	add r0, r6, #0
	mov r1, #0x12
	bl sub_0206FBE8
	lsl r0, r0, #0x18
	lsr r4, r0, #0x18
	add r0, sp, #8
	ldrb r6, [r0, #0x10]
	mov r0, #1
	and r0, r7
	cmp r0, r6
	beq _02072508
	bl GF_AssertFail
_02072508:
	ldr r0, _020725A0 ; =0xFFFF0000
	and r0, r5
	lsr r1, r0, #0x10
	lsl r0, r5, #0x10
	lsr r0, r0, #0x10
	eor r1, r0
	mov r0, #0xff
	lsl r0, r0, #8
	and r1, r0
	eor r0, r1
	lsl r5, r0, #0x10
	add r0, r5, #0
	mov r1, #0x19
	bl _u32_div_f
	sub r0, r7, r1
	add r5, r5, r0
	cmp r4, #0
	beq _0207259A
	cmp r4, #0xfe
	beq _0207259A
	cmp r4, #0xff
	beq _0207259A
	ldr r0, [sp]
	cmp r0, #0
	bne _0207256C
	lsl r0, r5, #0x18
	lsr r0, r0, #0x18
	cmp r4, r0
	bls _0207259A
	sub r0, r4, r0
	mov r1, #0x19
	bl _u32_div_f
	add r1, r0, #1
	mov r0, #0x19
	mul r0, r1
	add r5, r5, r0
	mov r0, #1
	and r0, r5
	cmp r0, r6
	beq _0207259A
	lsl r0, r5, #0x18
	lsr r0, r0, #0x18
	cmp r0, #0xe6
	bls _02072568
	bl GF_AssertFail
_02072568:
	add r5, #0x19
	b _0207259A
_0207256C:
	lsl r0, r5, #0x18
	lsr r0, r0, #0x18
	cmp r4, r0
	bhs _0207259A
	sub r0, r0, r4
	mov r1, #0x19
	bl _u32_div_f
	add r1, r0, #1
	mov r0, #0x19
	mul r0, r1
	sub r5, r5, r0
	mov r0, #1
	and r0, r5
	cmp r0, r6
	beq _0207259A
	lsl r0, r5, #0x18
	lsr r0, r0, #0x18
	cmp r0, #0x19
	bhs _02072598
	bl GF_AssertFail
_02072598:
	sub r5, #0x19
_0207259A:
	add r0, r5, #0
	pop {r3, r4, r5, r6, r7, pc}
	nop
_020725A0: .word 0xFFFF0000
	thumb_func_end sub_02072490

	thumb_func_start sub_020725A4
sub_020725A4: ; 0x020725A4
	ldr r3, _020725B0 ; =ReadWholeNarcMemberByIdPair
	add r2, r0, #0
	add r0, r1, #0
	mov r1, #2
	bx r3
	nop
_020725B0: .word ReadWholeNarcMemberByIdPair
	thumb_func_end sub_020725A4

	thumb_func_start sub_020725B4
sub_020725B4: ; 0x020725B4
	push {r4, lr}
	add r4, r2, #0
	bl sub_02072634
	add r2, r0, #0
	add r0, r4, #0
	mov r1, #2
	bl ReadWholeNarcMemberByIdPair
	pop {r4, pc}
	thumb_func_end sub_020725B4

	thumb_func_start sub_020725C8
sub_020725C8: ; 0x020725C8
	ldr r3, _020725D4 ; =ReadWholeNarcMemberByIdPair
	add r2, r0, #0
	add r0, r1, #0
	mov r1, #0x22
	bx r3
	nop
_020725D4: .word ReadWholeNarcMemberByIdPair
	thumb_func_end sub_020725C8

	thumb_func_start MonEncryptSegment
MonEncryptSegment: ; 0x020725D8
	ldr r3, _020725DC ; =sub_0201FF44
	bx r3
	.balign 4, 0
_020725DC: .word sub_0201FF44
	thumb_func_end MonEncryptSegment

	thumb_func_start sub_020725E0
sub_020725E0: ; 0x020725E0
	ldr r3, _020725E4 ; =sub_0201FF70
	bx r3
	.balign 4, 0
_020725E4: .word sub_0201FF70
	thumb_func_end sub_020725E0

	thumb_func_start sub_020725E8
sub_020725E8: ; 0x020725E8
	push {r3, r4}
	mov r3, #0
	add r2, r3, #0
	lsr r4, r1, #1
	beq _02072602
_020725F2:
	ldrh r1, [r0]
	add r2, r2, #1
	add r0, r0, #2
	add r1, r3, r1
	lsl r1, r1, #0x10
	lsr r3, r1, #0x10
	cmp r2, r4
	blo _020725F2
_02072602:
	add r0, r3, #0
	pop {r3, r4}
	bx lr
	thumb_func_end sub_020725E8

	thumb_func_start sub_02072608
sub_02072608: ; 0x02072608
	push {r4, r5, r6, lr}
	add r5, r0, #0
	mov r0, #0x3e
	add r4, r1, #0
	lsl r0, r0, #0xc
	and r0, r4
	add r6, r2, #0
	lsr r4, r0, #0xd
	cmp r6, #3
	bls _02072620
	bl GF_AssertFail
_02072620:
	ldr r0, _02072630 ; =0x020FF733
	lsl r1, r4, #2
	add r0, r0, r1
	ldrb r0, [r6, r0]
	add r5, #8
	add r0, r5, r0
	pop {r4, r5, r6, pc}
	nop
_02072630: .word 0x020FF733
	thumb_func_end sub_02072608

	thumb_func_start sub_02072634
sub_02072634: ; 0x02072634
	ldr r2, _020726BC ; =0x000001DF
	cmp r0, r2
	bgt _02072658
	bge _020726AC
	add r3, r2, #0
	sub r3, #0x5d
	cmp r0, r3
	bgt _0207264E
	add r3, r2, #0
	sub r3, #0x5d
	cmp r0, r3
	beq _02072674
	bx lr
_0207264E:
	add r3, r2, #0
	sub r3, #0x42
	cmp r0, r3
	beq _02072682
	bx lr
_02072658:
	add r3, r2, #0
	add r3, #8
	cmp r0, r3
	bgt _0207266A
	add r3, r2, #0
	add r3, #8
	cmp r0, r3
	beq _02072690
	bx lr
_0207266A:
	add r3, r2, #0
	add r3, #0xd
	cmp r0, r3
	beq _0207269E
	bx lr
_02072674:
	cmp r1, #0
	beq _020726B8
	cmp r1, #3
	bgt _020726B8
	add r2, #0x10
	add r0, r1, r2
	bx lr
_02072682:
	cmp r1, #0
	beq _020726B8
	cmp r1, #2
	bgt _020726B8
	add r2, #0x13
	add r0, r1, r2
	bx lr
_02072690:
	cmp r1, #0
	beq _020726B8
	cmp r1, #1
	bgt _020726B8
	add r2, #0x15
	add r0, r1, r2
	bx lr
_0207269E:
	cmp r1, #0
	beq _020726B8
	cmp r1, #1
	bgt _020726B8
	add r2, #0x16
	add r0, r1, r2
	bx lr
_020726AC:
	cmp r1, #0
	beq _020726B8
	cmp r1, #5
	bgt _020726B8
	add r2, #0x17
	add r0, r1, r2
_020726B8:
	bx lr
	nop
_020726BC: .word 0x000001DF
	thumb_func_end sub_02072634

	thumb_func_start sub_020726C0
sub_020726C0: ; 0x020726C0
	push {r3, r4, r5, lr}
	add r5, r0, #0
	mov r4, #1
	cmp r5, #0x20
	blt _020726CE
	bl GF_AssertFail
_020726CE:
	mov r0, #0
	cmp r5, #0
	ble _020726DC
_020726D4:
	add r0, r0, #1
	lsl r4, r4, #1
	cmp r0, r5
	blt _020726D4
_020726DC:
	add r0, r4, #0
	pop {r3, r4, r5, pc}
	thumb_func_end sub_020726C0

	thumb_func_start sub_020726E0
sub_020726E0: ; 0x020726E0
	mov r3, #1
	mov r2, #0
_020726E4:
	add r1, r0, #0
	tst r1, r3
	bne _020726F2
	add r2, r2, #1
	lsl r3, r3, #1
	cmp r2, #0x20
	blt _020726E4
_020726F2:
	add r0, r2, #0
	bx lr
	.balign 4, 0
	thumb_func_end sub_020726E0

	thumb_func_start sub_020726F8
sub_020726F8: ; 0x020726F8
	push {r3, r4}
	ldr r4, _02072728 ; =0x020FF564
	mov r3, #0
_020726FE:
	ldrh r2, [r4]
	cmp r0, r2
	bne _0207270A
	mov r0, #1
	pop {r3, r4}
	bx lr
_0207270A:
	add r3, r3, #1
	add r4, r4, #2
	cmp r3, #0x12
	blo _020726FE
	cmp r0, #0xac
	bne _02072720
	cmp r1, #1
	bne _02072720
	mov r0, #1
	pop {r3, r4}
	bx lr
_02072720:
	mov r0, #0
	pop {r3, r4}
	bx lr
	nop
_02072728: .word 0x020FF564
	thumb_func_end sub_020726F8

	thumb_func_start sub_0207272C
sub_0207272C: ; 0x0207272C
	cmp r0, #0x12
	blo _02072732
	mov r0, #0
_02072732:
	lsl r1, r0, #1
	ldr r0, _0207273C ; =0x020FF564
	ldrh r0, [r0, r1]
	bx lr
	nop
_0207273C: .word 0x020FF564
	thumb_func_end sub_0207272C

	thumb_func_start sub_02072740
sub_02072740: ; 0x02072740
	ldr r3, _0207275C ; =0x020FF4F8
	mov r2, #0
_02072744:
	ldrh r1, [r3]
	cmp r0, r1
	bne _0207274E
	mov r0, #1
	bx lr
_0207274E:
	add r2, r2, #1
	add r3, r3, #2
	cmp r2, #9
	blo _02072744
	mov r0, #0
	bx lr
	nop
_0207275C: .word 0x020FF4F8
	thumb_func_end sub_02072740

	thumb_func_start sub_02072760
sub_02072760: ; 0x02072760
	push {r3, r4, r5, lr}
	mov r1, #5
	mov r2, #0
	add r5, r0, #0
	bl GetMonData
	lsl r0, r0, #0x10
	lsr r4, r0, #0x10
	add r0, r5, #0
	mov r1, #0x70
	mov r2, #0
	bl GetMonData
	lsl r0, r0, #0x10
	lsr r1, r0, #0x10
	add r0, r4, #0
	bl sub_020726F8
	pop {r3, r4, r5, pc}
	.balign 4, 0
	thumb_func_end sub_02072760

	thumb_func_start sub_02072788
sub_02072788: ; 0x02072788
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x10
	add r4, r1, #0
	add r5, r0, #0
	add r0, r4, #0
	add r6, r2, #0
	bl PlayerProfile_GetTrainerID
	str r0, [sp]
	add r0, r5, #0
	mov r1, #7
	mov r2, #0
	bl GetBoxMonData
	str r0, [sp, #4]
	add r0, r4, #0
	bl PlayerProfile_GetTrainerGender
	str r0, [sp, #8]
	add r0, r5, #0
	mov r1, #0x9d
	mov r2, #0
	bl GetBoxMonData
	str r0, [sp, #0xc]
	add r0, r4, #0
	add r1, r6, #0
	bl PlayerProfile_GetPlayerName_NewString
	add r7, r0, #0
	mov r0, #8
	add r1, r6, #0
	bl String_ctor
	add r6, r0, #0
	add r0, r5, #0
	mov r1, #0x91
	add r2, r6, #0
	mov r4, #0
	bl GetBoxMonData
	ldr r1, [sp]
	ldr r0, [sp, #4]
	cmp r1, r0
	bne _020727F8
	ldr r1, [sp, #8]
	ldr r0, [sp, #0xc]
	cmp r1, r0
	bne _020727F8
	add r0, r7, #0
	add r1, r6, #0
	bl StringCompare
	cmp r0, #0
	bne _020727F8
	mov r4, #1
_020727F8:
	add r0, r6, #0
	bl String_dtor
	add r0, r7, #0
	bl String_dtor
	add r0, r4, #0
	add sp, #0x10
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_02072788

	thumb_func_start sub_0207280C
sub_0207280C: ; 0x0207280C
	push {r3, lr}
	cmp r0, #0x7b
	bgt _0207284E
	bge _02072878
	cmp r0, #0x17
	bgt _0207282A
	bge _02072870
	cmp r0, #1
	bgt _02072884
	cmp r0, #0
	blt _02072884
	beq _02072868
	cmp r0, #1
	beq _02072868
	b _02072884
_0207282A:
	cmp r0, #0x5a
	bgt _02072832
	beq _0207287C
	b _02072884
_02072832:
	add r1, r0, #0
	sub r1, #0x5b
	cmp r1, #3
	bhi _02072884
	add r1, r1, r1
	add r1, pc
	ldrh r1, [r1, #6]
	lsl r1, r1, #0x10
	asr r1, r1, #0x10
	add pc, r1
_02072846: ; jump table
	.short _0207287C - _02072846 - 2 ; case 0
	.short _0207287C - _02072846 - 2 ; case 1
	.short _0207287C - _02072846 - 2 ; case 2
	.short _0207287C - _02072846 - 2 ; case 3
_0207284E:
	cmp r0, #0x7e
	bgt _0207285A
	bge _02072874
	cmp r0, #0x7d
	beq _02072874
	b _02072884
_0207285A:
	cmp r0, #0x7f
	bgt _02072862
	beq _02072880
	b _02072884
_02072862:
	cmp r0, #0x80
	beq _02072880
	b _02072884
_02072868:
	cmp r1, #0
	beq _02072892
	add r0, #0xf
	pop {r3, pc}
_02072870:
	mov r0, #2
	pop {r3, pc}
_02072874:
	sub r0, #0x74
	pop {r3, pc}
_02072878:
	mov r0, #3
	pop {r3, pc}
_0207287C:
	sub r0, #0x56
	pop {r3, pc}
_02072880:
	sub r0, #0x73
	pop {r3, pc}
_02072884:
	bl sub_020735F8
	cmp r0, #1
	bne _02072890
	mov r0, #1
	pop {r3, pc}
_02072890:
	mov r0, #0
_02072892:
	pop {r3, pc}
	thumb_func_end sub_0207280C

	thumb_func_start sub_02072894
sub_02072894: ; 0x02072894
	push {r3, r4, lr}
	sub sp, #0x1c
	add r4, r0, #0
	mov r0, #0
	add r1, sp, #0
	strb r0, [r1]
	add r1, sp, #0
	add r1, #1
	mov r2, #0x18
	bl MIi_CpuClearFast
	add r0, r4, #0
	mov r1, #0xa2
	add r2, sp, #0
	bl sub_0206EC40
	add r2, sp, #0
	add r0, r4, #0
	mov r1, #0xab
	add r2, #1
	bl sub_0206EC40
	add sp, #0x1c
	pop {r3, r4, pc}
	thumb_func_end sub_02072894

	thumb_func_start sub_020728C4
sub_020728C4: ; 0x020728C4
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #8
	add r5, r0, #0
	bl sub_0206DDD8
	mov r4, #0
	str r0, [sp]
	add r7, r4, #0
	add r6, sp, #4
_020728D6:
	add r1, r4, #0
	add r0, r5, #0
	add r1, #0x36
	add r2, r7, #0
	bl GetBoxMonData
	cmp r0, #0
	beq _02072900
	add r1, r4, #0
	add r0, r5, #0
	add r1, #0x42
	mov r2, #0
	bl GetBoxMonData
	add r1, r4, #0
	strb r0, [r6]
	add r0, r5, #0
	add r1, #0x3a
	add r2, sp, #4
	bl sub_0206ED70
_02072900:
	add r4, r4, #1
	cmp r4, #4
	blt _020728D6
	ldr r1, [sp]
	add r0, r5, #0
	bl sub_0206DE00
	add sp, #8
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_020728C4

	thumb_func_start sub_02072914
sub_02072914: ; 0x02072914
	push {r4, r5, r6, lr}
	sub sp, #0x60
	add r4, r1, #0
	mov r5, #1
	add r1, r3, #0
	add r6, r2, #0
	tst r1, r5
	beq _02072926
	mov r5, #0
_02072926:
	add r1, sp, #4
	str r1, [sp]
	mov r3, #0x59
	add r2, r6, #0
	mov r1, #0
	mul r2, r3
	bl NARC_ReadFromMember
	mov r0, #0x2b
	add r1, sp, #4
	mul r0, r5
	add r0, r1, r0
	add r0, r0, #3
	add r1, r4, #0
	mov r2, #0x28
	bl MIi_CpuCopy8
	add sp, #0x60
	pop {r4, r5, r6, pc}
	thumb_func_end sub_02072914

	thumb_func_start sub_0207294C
sub_0207294C: ; 0x0207294C
	push {r4, r5, r6, r7, lr}
	sub sp, #0x64
	add r5, r1, #0
	ldr r1, [sp, #0x78]
	add r6, r2, #0
	add r2, r3, #0
	cmp r1, #2
	beq _02072960
	mov r4, #1
	b _02072962
_02072960:
	mov r4, #0
_02072962:
	add r1, sp, #8
	add r1, #2
	str r1, [sp]
	mov r7, #0x59
	add r3, r2, #0
	mul r3, r7
	add r2, r3, #0
	mov r1, #0
	add r3, r7, #0
	bl NARC_ReadFromMember
	mov r0, #0x2b
	add r1, sp, #8
	ldr r3, [sp, #0x80]
	mul r0, r4
	add r1, #3
	ldrb r2, [r1, r0]
	add r1, sp, #4
	lsl r3, r3, #0x18
	strh r2, [r1]
	add r2, sp, #0xc
	ldrb r0, [r2, r0]
	add r2, sp, #4
	lsr r3, r3, #0x18
	strh r0, [r1, #2]
	ldr r0, [sp, #0x7c]
	strb r0, [r1, #4]
	add r0, r5, #0
	add r1, r6, #0
	bl sub_02016F40
	add sp, #0x64
	pop {r4, r5, r6, r7, pc}
	thumb_func_end sub_0207294C

	thumb_func_start sub_020729A4
sub_020729A4: ; 0x020729A4
	push {r4, r5, r6, lr}
	sub sp, #0x60
	add r4, r1, #0
	mov r5, #1
	add r1, r3, #0
	add r6, r2, #0
	tst r1, r5
	beq _020729B6
	mov r5, #0
_020729B6:
	add r1, sp, #4
	str r1, [sp]
	mov r3, #0x59
	add r2, r6, #0
	mov r1, #0
	mul r2, r3
	bl NARC_ReadFromMember
	mov r0, #0x2b
	add r1, r5, #0
	mul r1, r0
	add r0, sp, #4
	ldrb r0, [r0, r1]
	strb r0, [r4]
	add sp, #0x60
	pop {r4, r5, r6, pc}
	.balign 4, 0
	thumb_func_end sub_020729A4

	thumb_func_start sub_020729D8
sub_020729D8: ; 0x020729D8
	push {r3, r4, r5, lr}
	sub sp, #0x60
	mov r3, #0x59
	add r5, r2, #0
	add r4, r1, #0
	add r1, sp, #4
	mul r5, r3
	str r1, [sp]
	mov r1, #0
	add r2, r5, #0
	bl NARC_ReadFromMember
	add r1, sp, #0x44
	mov r0, #0x16
	ldrsb r0, [r1, r0]
	strb r0, [r4]
	add sp, #0x60
	pop {r3, r4, r5, pc}
	thumb_func_end sub_020729D8

	thumb_func_start sub_020729FC
sub_020729FC: ; 0x020729FC
	push {r3, r4, r5, lr}
	sub sp, #0x60
	mov r3, #0x59
	add r5, r2, #0
	add r4, r1, #0
	add r1, sp, #4
	mul r5, r3
	str r1, [sp]
	mov r1, #0
	add r2, r5, #0
	bl NARC_ReadFromMember
	add r1, sp, #0x44
	mov r0, #0x17
	ldrsb r0, [r1, r0]
	strb r0, [r4]
	add sp, #0x60
	pop {r3, r4, r5, pc}
	thumb_func_end sub_020729FC

	thumb_func_start sub_02072A20
sub_02072A20: ; 0x02072A20
	push {r3, r4, r5, lr}
	sub sp, #0x60
	mov r3, #0x59
	add r5, r2, #0
	add r4, r1, #0
	add r1, sp, #4
	mul r5, r3
	str r1, [sp]
	mov r1, #0
	add r2, r5, #0
	bl NARC_ReadFromMember
	add r0, sp, #0x44
	ldrb r0, [r0, #0x18]
	strb r0, [r4]
	add sp, #0x60
	pop {r3, r4, r5, pc}
	.balign 4, 0
	thumb_func_end sub_02072A20

	thumb_func_start sub_02072A44
sub_02072A44: ; 0x02072A44
	push {r4, r5, r6, lr}
	sub sp, #0x20
	add r5, r0, #0
	add r4, r1, #0
	cmp r5, #0
	bne _02072A56
	add sp, #0x20
	mov r0, #0
	pop {r4, r5, r6, pc}
_02072A56:
	mov r0, #0xb9
	add r1, r2, #0
	bl NARC_ctor
	mov r1, #1
	sub r5, r5, #1
	str r1, [sp, #4]
	add r1, sp, #8
	str r1, [sp]
	mov r3, #0x18
	add r2, r5, #0
	mov r1, #0
	mul r2, r3
	add r6, r0, #0
	bl NARC_ReadFromMember
	add r0, r4, #0
	mov r1, #0xa2
	add r2, sp, #4
	bl sub_0206EC40
	add r0, r4, #0
	mov r1, #0xab
	add r2, sp, #8
	bl sub_0206EC40
	add r0, r6, #0
	bl NARC_dtor
	mov r0, #1
	add sp, #0x20
	pop {r4, r5, r6, pc}
	.balign 4, 0
	thumb_func_end sub_02072A44

	thumb_func_start sub_02072A98
sub_02072A98: ; 0x02072A98
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #8
	str r0, [sp]
	ldrh r0, [r0, #4]
	add r4, r1, #0
	lsl r0, r0, #0x1f
	lsr r0, r0, #0x1f
	bne _02072AC4
	ldr r2, [sp]
	ldr r0, [sp]
	ldr r2, [r2]
	add r0, #0x88
	mov r1, #0x64
	bl sub_020725E0
	ldr r2, [sp]
	ldr r0, [sp]
	ldrh r2, [r2, #6]
	add r0, #8
	mov r1, #0x80
	bl sub_020725E0
_02072AC4:
	ldr r0, [sp]
	bl sub_02070DB0
	add r6, r0, #0
	ldr r1, [r6]
	mov r2, #0
	bl sub_02072608
	add r5, r0, #0
	ldr r1, [r6]
	add r0, r6, #0
	mov r2, #1
	bl sub_02072608
	str r0, [sp, #4]
	ldr r1, [r6]
	add r0, r6, #0
	mov r2, #2
	bl sub_02072608
	add r7, r0, #0
	ldr r1, [r6]
	add r0, r6, #0
	mov r2, #3
	bl sub_02072608
	mov ip, r0
	ldr r0, [r6]
	ldr r3, [sp, #4]
	str r0, [r4]
	ldrh r1, [r4, #4]
	mov r0, #1
	mov r2, #0
	bic r1, r0
	strh r1, [r4, #4]
	ldrh r1, [r4, #4]
	mov r0, #2
	bic r1, r0
	strh r1, [r4, #4]
	ldrh r0, [r4, #4]
	mov r1, #4
	bic r0, r1
	ldrh r1, [r6, #4]
	lsl r1, r1, #0x1d
	lsr r1, r1, #0x1f
	lsl r1, r1, #0x1f
	lsr r1, r1, #0x1d
	orr r0, r1
	strh r0, [r4, #4]
	ldrh r0, [r5]
	strh r0, [r4, #6]
	ldrh r0, [r5, #2]
	strh r0, [r4, #8]
	ldr r0, [r5, #4]
	str r0, [r4, #0xc]
	ldr r0, [r5, #8]
	str r0, [r4, #0x10]
	ldrb r0, [r5, #0xc]
	strb r0, [r4, #0x14]
	ldrb r0, [r5, #0xd]
	strb r0, [r4, #0x15]
	ldrb r0, [r5, #0x10]
	strb r0, [r4, #0x16]
	ldrb r0, [r5, #0x11]
	strb r0, [r4, #0x17]
	ldrb r0, [r5, #0x12]
	strb r0, [r4, #0x18]
	ldrb r0, [r5, #0x13]
	strb r0, [r4, #0x19]
	ldrb r0, [r5, #0x14]
	strb r0, [r4, #0x1a]
	ldrb r0, [r5, #0x15]
	strb r0, [r4, #0x1b]
	ldrb r1, [r5, #0xf]
	add r0, r4, #0
	add r0, #0x59
	strb r1, [r0]
	add r5, r4, #0
_02072B60:
	ldrh r0, [r3]
	add r3, r3, #2
	strh r0, [r5, #0x1c]
	ldr r0, [sp, #4]
	add r5, r5, #2
	add r6, r0, r2
	add r0, r4, r2
	ldrb r1, [r6, #8]
	add r0, #0x24
	strb r1, [r0]
	add r0, r4, r2
	ldrb r1, [r6, #0xc]
	add r0, #0x28
	add r2, r2, #1
	strb r1, [r0]
	cmp r2, #4
	blt _02072B60
	ldr r0, [r4, #0x2c]
	mov r1, #0x1f
	bic r0, r1
	ldr r1, [sp, #4]
	ldr r1, [r1, #0x10]
	lsl r1, r1, #0x1b
	lsr r2, r1, #0x1b
	mov r1, #0x1f
	and r1, r2
	orr r1, r0
	ldr r0, _02072D48 ; =0xFFFFFC1F
	str r1, [r4, #0x2c]
	and r0, r1
	ldr r1, [sp, #4]
	mov r2, #1
	ldr r1, [r1, #0x10]
	lsl r1, r1, #0x16
	lsr r1, r1, #0x1b
	lsl r1, r1, #0x1b
	lsr r1, r1, #0x16
	orr r1, r0
	ldr r0, _02072D4C ; =0xFFFF83FF
	str r1, [r4, #0x2c]
	and r0, r1
	ldr r1, [sp, #4]
	ldr r1, [r1, #0x10]
	lsl r1, r1, #0x11
	lsr r1, r1, #0x1b
	lsl r1, r1, #0x1b
	lsr r1, r1, #0x11
	orr r1, r0
	ldr r0, _02072D50 ; =0xFFF07FFF
	str r1, [r4, #0x2c]
	and r0, r1
	ldr r1, [sp, #4]
	ldr r1, [r1, #0x10]
	lsl r1, r1, #0xc
	lsr r1, r1, #0x1b
	lsl r1, r1, #0x1b
	lsr r1, r1, #0xc
	orr r1, r0
	ldr r0, _02072D54 ; =0xFE0FFFFF
	str r1, [r4, #0x2c]
	and r0, r1
	ldr r1, [sp, #4]
	ldr r1, [r1, #0x10]
	lsl r1, r1, #7
	lsr r1, r1, #0x1b
	lsl r1, r1, #0x1b
	lsr r1, r1, #7
	orr r1, r0
	ldr r0, _02072D58 ; =0xC1FFFFFF
	str r1, [r4, #0x2c]
	and r0, r1
	ldr r1, [sp, #4]
	ldr r1, [r1, #0x10]
	lsl r1, r1, #2
	lsr r1, r1, #0x1b
	lsl r1, r1, #0x1b
	lsr r1, r1, #2
	orr r1, r0
	ldr r0, _02072D5C ; =0xBFFFFFFF
	str r1, [r4, #0x2c]
	and r0, r1
	ldr r1, [sp, #4]
	ldr r1, [r1, #0x10]
	lsl r1, r1, #1
	lsr r1, r1, #0x1f
	lsl r1, r1, #0x1f
	lsr r1, r1, #1
	orr r1, r0
	ldr r0, _02072D60 ; =0x7FFFFFFF
	str r1, [r4, #0x2c]
	and r0, r1
	ldr r1, [sp, #4]
	ldr r1, [r1, #0x10]
	lsr r1, r1, #0x1f
	lsl r1, r1, #0x1f
	orr r0, r1
	str r0, [r4, #0x2c]
	add r0, r4, #0
	add r0, #0x30
	ldrb r0, [r0]
	add r1, r4, #0
	add r1, #0x30
	bic r0, r2
	ldr r2, [sp, #4]
	ldrb r2, [r2, #0x18]
	lsl r2, r2, #0x1f
	lsr r3, r2, #0x1f
	mov r2, #1
	and r2, r3
	orr r2, r0
	add r0, r4, #0
	add r0, #0x30
	strb r2, [r0]
	add r0, r4, #0
	add r0, #0x30
	ldrb r0, [r0]
	mov r2, #6
	bic r0, r2
	ldr r2, [sp, #4]
	ldrb r2, [r2, #0x18]
	lsl r2, r2, #0x1d
	lsr r2, r2, #0x1e
	lsl r2, r2, #0x1e
	lsr r2, r2, #0x1d
	orr r2, r0
	add r0, r4, #0
	add r0, #0x30
	strb r2, [r0]
	ldrb r0, [r1]
	mov r2, #0xf8
	bic r0, r2
	ldr r2, [sp, #4]
	ldrb r2, [r2, #0x18]
	lsl r2, r2, #0x18
	lsr r2, r2, #0x1b
	lsl r2, r2, #0x1b
	lsr r2, r2, #0x18
	orr r0, r2
	strb r0, [r1]
	mov r2, #0
	add r1, r4, #0
_02072C7A:
	ldrh r0, [r7]
	add r2, r2, #1
	add r7, r7, #2
	strh r0, [r1, #0x32]
	add r1, r1, #2
	cmp r2, #0xb
	blt _02072C7A
	mov r5, #0
	mov r2, ip
	add r3, r4, #0
_02072C8E:
	ldrh r1, [r2]
	add r0, r3, #0
	add r0, #0x48
	add r5, r5, #1
	strh r1, [r0]
	add r2, r2, #2
	add r3, r3, #2
	cmp r5, #8
	blt _02072C8E
	mov r0, ip
	ldrb r1, [r0, #0x1b]
	add r0, r4, #0
	add r0, #0x58
	strb r1, [r0]
	ldr r0, [sp]
	add r0, #0x88
	ldr r0, [r0]
	str r0, [r4, #0x5c]
	ldr r0, [sp]
	add r0, #0x8c
	ldrb r1, [r0]
	add r0, r4, #0
	add r0, #0x60
	strb r1, [r0]
	ldr r0, [sp]
	add r0, #0x8d
	ldrb r1, [r0]
	add r0, r4, #0
	add r0, #0x61
	strb r1, [r0]
	ldr r0, [sp]
	add r0, #0x8e
	ldrh r1, [r0]
	add r0, r4, #0
	add r0, #0x62
	strh r1, [r0]
	ldr r0, [sp]
	add r0, #0x90
	ldrh r1, [r0]
	add r0, r4, #0
	add r0, #0x64
	strh r1, [r0]
	ldr r0, [sp]
	add r0, #0x92
	ldrh r1, [r0]
	add r0, r4, #0
	add r0, #0x66
	strh r1, [r0]
	ldr r0, [sp]
	add r0, #0x94
	ldrh r1, [r0]
	add r0, r4, #0
	add r0, #0x68
	strh r1, [r0]
	ldr r0, [sp]
	add r0, #0x96
	ldrh r1, [r0]
	add r0, r4, #0
	add r0, #0x6a
	strh r1, [r0]
	ldr r0, [sp]
	add r0, #0x98
	ldrh r1, [r0]
	add r0, r4, #0
	add r0, #0x6c
	strh r1, [r0]
	ldr r0, [sp]
	add r4, #0x6e
	add r0, #0x9a
	ldrh r0, [r0]
	strh r0, [r4]
	ldr r0, [sp]
	ldrh r0, [r0, #4]
	lsl r0, r0, #0x1f
	lsr r0, r0, #0x1f
	bne _02072D42
	ldr r2, [sp]
	ldr r0, [sp]
	ldr r2, [r2]
	add r0, #0x88
	mov r1, #0x64
	bl MonEncryptSegment
	ldr r2, [sp]
	ldr r0, [sp]
	ldrh r2, [r2, #6]
	add r0, #8
	mov r1, #0x80
	bl MonEncryptSegment
_02072D42:
	add sp, #8
	pop {r3, r4, r5, r6, r7, pc}
	nop
_02072D48: .word 0xFFFFFC1F
_02072D4C: .word 0xFFFF83FF
_02072D50: .word 0xFFF07FFF
_02072D54: .word 0xFE0FFFFF
_02072D58: .word 0xC1FFFFFF
_02072D5C: .word 0xBFFFFFFF
_02072D60: .word 0x7FFFFFFF
	thumb_func_end sub_02072A98

	thumb_func_start sub_02072D64
sub_02072D64: ; 0x02072D64
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #8
	add r4, r0, #0
	str r1, [sp]
	mov r0, #0
	mov r2, #0xec
	bl MIi_CpuClearFast
	ldr r0, [sp]
	bl sub_02070DB0
	ldr r1, [r4]
	str r0, [sp, #4]
	mov r2, #0
	bl sub_02072608
	add r5, r0, #0
	ldr r0, [sp, #4]
	ldr r1, [r4]
	mov r2, #1
	bl sub_02072608
	add r6, r0, #0
	ldr r0, [sp, #4]
	ldr r1, [r4]
	mov r2, #2
	bl sub_02072608
	add r7, r0, #0
	ldr r0, [sp, #4]
	ldr r1, [r4]
	mov r2, #3
	bl sub_02072608
	mov ip, r0
	ldr r1, [r4]
	ldr r0, [sp, #4]
	add r2, r4, #0
	str r1, [r0]
	ldrh r0, [r0, #4]
	mov r1, #1
	add r3, r6, #0
	bic r0, r1
	ldr r1, [sp, #4]
	strh r0, [r1, #4]
	add r0, r1, #0
	ldrh r0, [r0, #4]
	mov r1, #2
	bic r0, r1
	ldr r1, [sp, #4]
	strh r0, [r1, #4]
	add r0, r1, #0
	ldrh r0, [r0, #4]
	mov r1, #4
	bic r0, r1
	ldrh r1, [r4, #4]
	lsl r1, r1, #0x1d
	lsr r1, r1, #0x1f
	lsl r1, r1, #0x1f
	lsr r1, r1, #0x1d
	orr r1, r0
	ldr r0, [sp, #4]
	strh r1, [r0, #4]
	ldrh r0, [r4, #6]
	mov r1, #0
	strh r0, [r5]
	ldrh r0, [r4, #8]
	strh r0, [r5, #2]
	ldr r0, [r4, #0xc]
	str r0, [r5, #4]
	ldr r0, [r4, #0x10]
	str r0, [r5, #8]
	ldrb r0, [r4, #0x14]
	strb r0, [r5, #0xc]
	ldrb r0, [r4, #0x15]
	strb r0, [r5, #0xd]
	ldrb r0, [r4, #0x16]
	strb r0, [r5, #0x10]
	ldrb r0, [r4, #0x17]
	strb r0, [r5, #0x11]
	ldrb r0, [r4, #0x18]
	strb r0, [r5, #0x12]
	ldrb r0, [r4, #0x19]
	strb r0, [r5, #0x13]
	ldrb r0, [r4, #0x1a]
	strb r0, [r5, #0x14]
	ldrb r0, [r4, #0x1b]
	strb r0, [r5, #0x15]
	add r0, r4, #0
	add r0, #0x59
	ldrb r0, [r0]
	strb r0, [r5, #0xf]
_02072E1C:
	ldrh r0, [r2, #0x1c]
	add r5, r4, r1
	add r5, #0x24
	strh r0, [r3]
	ldrb r5, [r5]
	add r0, r6, r1
	add r2, r2, #2
	strb r5, [r0, #8]
	add r5, r4, r1
	add r5, #0x28
	ldrb r5, [r5]
	add r1, r1, #1
	add r3, r3, #2
	strb r5, [r0, #0xc]
	cmp r1, #4
	blt _02072E1C
	ldr r0, [r6, #0x10]
	mov r1, #0x1f
	bic r0, r1
	ldr r1, [r4, #0x2c]
	lsl r1, r1, #0x1b
	lsr r2, r1, #0x1b
	mov r1, #0x1f
	and r1, r2
	orr r1, r0
	ldr r0, _02072FFC ; =0xFFFFFC1F
	str r1, [r6, #0x10]
	and r0, r1
	ldr r1, [r4, #0x2c]
	add r2, r6, #0
	lsl r1, r1, #0x16
	lsr r1, r1, #0x1b
	lsl r1, r1, #0x1b
	lsr r1, r1, #0x16
	orr r1, r0
	ldr r0, _02073000 ; =0xFFFF83FF
	str r1, [r6, #0x10]
	and r0, r1
	ldr r1, [r4, #0x2c]
	add r2, #0x18
	lsl r1, r1, #0x11
	lsr r1, r1, #0x1b
	lsl r1, r1, #0x1b
	lsr r1, r1, #0x11
	orr r1, r0
	ldr r0, _02073004 ; =0xFFF07FFF
	str r1, [r6, #0x10]
	and r0, r1
	ldr r1, [r4, #0x2c]
	lsl r1, r1, #0xc
	lsr r1, r1, #0x1b
	lsl r1, r1, #0x1b
	lsr r1, r1, #0xc
	orr r1, r0
	ldr r0, _02073008 ; =0xFE0FFFFF
	str r1, [r6, #0x10]
	and r0, r1
	ldr r1, [r4, #0x2c]
	lsl r1, r1, #7
	lsr r1, r1, #0x1b
	lsl r1, r1, #0x1b
	lsr r1, r1, #7
	orr r1, r0
	ldr r0, _0207300C ; =0xC1FFFFFF
	str r1, [r6, #0x10]
	and r0, r1
	ldr r1, [r4, #0x2c]
	lsl r1, r1, #2
	lsr r1, r1, #0x1b
	lsl r1, r1, #0x1b
	lsr r1, r1, #2
	orr r1, r0
	ldr r0, _02073010 ; =0xBFFFFFFF
	str r1, [r6, #0x10]
	and r0, r1
	ldr r1, [r4, #0x2c]
	lsl r1, r1, #1
	lsr r1, r1, #0x1f
	lsl r1, r1, #0x1f
	lsr r1, r1, #1
	orr r1, r0
	ldr r0, _02073014 ; =0x7FFFFFFF
	str r1, [r6, #0x10]
	and r0, r1
	ldr r1, [r4, #0x2c]
	lsr r1, r1, #0x1f
	lsl r1, r1, #0x1f
	orr r0, r1
	str r0, [r6, #0x10]
	ldrb r3, [r6, #0x18]
	mov r0, #1
	bic r3, r0
	add r0, r4, #0
	add r0, #0x30
	ldrb r0, [r0]
	lsl r0, r0, #0x1f
	lsr r1, r0, #0x1f
	mov r0, #1
	and r0, r1
	orr r0, r3
	strb r0, [r6, #0x18]
	ldrb r0, [r6, #0x18]
	mov r1, #6
	bic r0, r1
	add r1, r4, #0
	add r1, #0x30
	ldrb r1, [r1]
	lsl r1, r1, #0x1d
	lsr r1, r1, #0x1e
	lsl r1, r1, #0x1e
	lsr r1, r1, #0x1d
	orr r0, r1
	strb r0, [r6, #0x18]
	ldrb r0, [r2]
	mov r1, #0xf8
	bic r0, r1
	add r1, r4, #0
	add r1, #0x30
	ldrb r1, [r1]
	lsl r1, r1, #0x18
	lsr r1, r1, #0x1b
	lsl r1, r1, #0x1b
	lsr r1, r1, #0x18
	orr r0, r1
	strb r0, [r2]
	mov r2, #0
	add r1, r4, #0
_02072F1A:
	ldrh r0, [r1, #0x32]
	add r2, r2, #1
	add r1, r1, #2
	strh r0, [r7]
	add r7, r7, #2
	cmp r2, #0xb
	blt _02072F1A
	mov r3, #0
	add r1, r4, #0
	mov r2, ip
_02072F2E:
	add r0, r1, #0
	add r0, #0x48
	ldrh r0, [r0]
	add r3, r3, #1
	add r1, r1, #2
	strh r0, [r2]
	add r2, r2, #2
	cmp r3, #8
	blt _02072F2E
	add r0, r4, #0
	add r0, #0x58
	ldrb r1, [r0]
	mov r0, ip
	strb r1, [r0, #0x1e]
	add r0, r4, #0
	add r0, #0x58
	ldrb r1, [r0]
	cmp r1, #0x10
	bhi _02072F56
	b _02072F58
_02072F56:
	mov r1, #4
_02072F58:
	mov r0, ip
	strb r1, [r0, #0x1b]
	ldr r0, [sp]
	ldr r1, [r4, #0x5c]
	add r0, #0x88
	str r1, [r0]
	add r0, r4, #0
	add r0, #0x60
	ldrb r1, [r0]
	ldr r0, [sp]
	ldr r2, [sp]
	add r0, #0x8c
	strb r1, [r0]
	add r0, r4, #0
	add r0, #0x61
	ldrb r1, [r0]
	ldr r0, [sp]
	add r0, #0x8d
	strb r1, [r0]
	add r0, r4, #0
	add r0, #0x62
	ldrh r1, [r0]
	ldr r0, [sp]
	add r0, #0x8e
	strh r1, [r0]
	add r0, r4, #0
	add r0, #0x64
	ldrh r1, [r0]
	ldr r0, [sp]
	add r0, #0x90
	strh r1, [r0]
	add r0, r4, #0
	add r0, #0x66
	ldrh r1, [r0]
	ldr r0, [sp]
	add r0, #0x92
	strh r1, [r0]
	add r0, r4, #0
	add r0, #0x68
	ldrh r1, [r0]
	ldr r0, [sp]
	add r0, #0x94
	strh r1, [r0]
	add r0, r4, #0
	add r0, #0x6a
	ldrh r1, [r0]
	ldr r0, [sp]
	add r0, #0x96
	strh r1, [r0]
	add r0, r4, #0
	add r0, #0x6c
	ldrh r1, [r0]
	ldr r0, [sp]
	add r4, #0x6e
	add r0, #0x98
	strh r1, [r0]
	ldr r0, [sp]
	ldrh r1, [r4]
	add r0, #0x9a
	strh r1, [r0]
	ldr r0, [sp]
	ldr r2, [r2]
	add r0, #0x88
	mov r1, #0x64
	bl MonEncryptSegment
	ldr r0, [sp]
	mov r1, #0x80
	add r0, #8
	bl sub_020725E8
	ldr r1, [sp]
	ldr r2, [sp]
	strh r0, [r1, #6]
	add r0, r1, #0
	ldrh r2, [r2, #6]
	add r0, #8
	mov r1, #0x80
	bl MonEncryptSegment
	add sp, #8
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_02072FFC: .word 0xFFFFFC1F
_02073000: .word 0xFFFF83FF
_02073004: .word 0xFFF07FFF
_02073008: .word 0xFE0FFFFF
_0207300C: .word 0xC1FFFFFF
_02073010: .word 0xBFFFFFFF
_02073014: .word 0x7FFFFFFF
	thumb_func_end sub_02072D64

	thumb_func_start sub_02073018
sub_02073018: ; 0x02073018
	push {r4, r5, r6, lr}
	sub sp, #0x20
	ldr r5, _02073054 ; =0x020FF544
	add r3, sp, #0
	add r6, r0, #0
	add r4, r1, #0
	add r2, r3, #0
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	add r1, r4, #1
	lsl r1, r1, #2
	ldr r1, [r2, r1]
	add r0, r6, #0
	bl _u32_div_f
	add r0, r1, #0
	lsl r2, r4, #2
	add r1, sp, #0
	ldr r1, [r1, r2]
	bl _u32_div_f
	add sp, #0x20
	pop {r4, r5, r6, pc}
	nop
_02073054: .word 0x020FF544
	thumb_func_end sub_02073018

	thumb_func_start sub_02073058
sub_02073058: ; 0x02073058
	mov r2, #0x77
	mvn r2, r2
	cmp r0, r2
	bgt _02073066
	add r2, #0x74
	add r0, r2, #0
	bx lr
_02073066:
	add r1, r2, #0
	add r1, #0x28
	cmp r0, r1
	bgt _02073074
	add r2, #0x75
	add r0, r2, #0
	bx lr
_02073074:
	add r1, r2, #0
	add r1, #0x50
	cmp r0, r1
	bgt _02073082
	add r2, #0x76
	add r0, r2, #0
	bx lr
_02073082:
	add r1, r2, #0
	add r1, #0x69
	cmp r0, r1
	bgt _02073090
	add r2, #0x77
	add r0, r2, #0
	bx lr
_02073090:
	cmp r0, #0xe
	bgt _02073098
	mov r0, #0
	bx lr
_02073098:
	cmp r0, #0x27
	bgt _020730A0
	mov r0, #1
	bx lr
_020730A0:
	cmp r0, #0x4f
	bgt _020730A8
	mov r0, #2
	bx lr
_020730A8:
	cmp r0, #0x77
	bgt _020730B0
	mov r0, #3
	bx lr
_020730B0:
	mov r0, #4
	bx lr
	thumb_func_end sub_02073058

	thumb_func_start sub_020730B4
sub_020730B4: ; 0x020730B4
	push {r4, r5, r6, r7, lr}
	sub sp, #0x3c
	add r5, r1, #0
	mov r1, #0
	str r0, [sp]
	add r2, r1, #0
	bl GetBoxMonData
	str r0, [sp, #8]
	ldr r0, [sp]
	bl sub_0206FE04
	add r6, r0, #0
	add r0, sp, #0x18
	add r1, sp, #0xc
	bl GF_RTC_CopyDateTime
	lsl r0, r6, #2
	ldr r1, _0207322C ; =0x020FF6B6
	add r0, r6, r0
	add r6, r1, r0
	ldr r0, [sp, #0x20]
	mov r4, #0
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add r7, r5, #0
	str r0, [sp, #4]
_020730EA:
	lsl r1, r4, #0x18
	ldr r0, [sp, #8]
	lsr r1, r1, #0x18
	bl sub_02073018
	add r3, r0, #0
	mov r0, #7
	sub r1, r0, r4
	ldr r0, [sp, #4]
	add r2, r0, r1
	add r1, r4, #3
	add r0, r0, r1
	mul r0, r2
	add r0, r3, r0
	mov r1, #0
	bl sub_02073018
	mov r1, #0
	ldrsb r1, [r6, r1]
	lsl r0, r0, #1
	sub r0, #9
	add r0, r1, r0
	strh r0, [r7, #2]
	add r4, r4, #1
	add r6, r6, #1
	add r7, r7, #4
	cmp r4, #5
	blo _020730EA
	ldr r0, [sp]
	mov r1, #5
	mov r2, #0
	bl GetBoxMonData
	lsl r4, r0, #0x10
	ldr r0, [sp]
	mov r1, #0x70
	mov r2, #0
	bl GetBoxMonData
	lsl r0, r0, #0x10
	lsr r2, r0, #0x10
	ldr r3, _02073230 ; =0x020FF7B4
	lsr r4, r4, #0xf
	ldrh r3, [r3, r4]
	add r0, sp, #0x28
	mov r1, #0xa9
	add r2, r2, r3
	bl ReadWholeNarcMemberByIdPair
	add r1, sp, #0xc
	ldrb r2, [r1, #0x1c]
	mov r1, #7
	ldrh r3, [r5]
	mov r0, #7
	and r2, r1
	bic r3, r0
	orr r2, r3
	strh r2, [r5]
	add r4, sp, #0x28
	ldrb r6, [r4, #9]
	ldrh r3, [r5]
	ldr r2, _02073234 ; =0xFFFFFE3F
	lsl r6, r6, #0x1d
	and r3, r2
	lsr r6, r6, #0x17
	orr r3, r6
	strh r3, [r5]
	ldrb r7, [r4, #0xa]
	ldrh r6, [r5]
	mov r3, #0x38
	lsl r7, r7, #0x1d
	bic r6, r3
	lsr r7, r7, #0x1a
	orr r6, r7
	strh r6, [r5]
	add r7, sp, #0xc
	ldrh r6, [r5, #4]
	ldrb r7, [r7, #0x1f]
	bic r6, r0
	and r7, r1
	orr r6, r7
	strh r6, [r5, #4]
	ldrb r7, [r4, #0xf]
	ldrh r6, [r5, #4]
	lsl r7, r7, #0x1d
	and r6, r2
	lsr r7, r7, #0x17
	orr r6, r7
	strh r6, [r5, #4]
	ldrb r7, [r4, #0x10]
	ldrh r6, [r5, #4]
	lsl r7, r7, #0x1d
	bic r6, r3
	lsr r7, r7, #0x1a
	orr r6, r7
	strh r6, [r5, #4]
	ldrh r6, [r5, #8]
	ldrb r7, [r4, #4]
	bic r6, r0
	and r7, r1
	orr r6, r7
	strh r6, [r5, #8]
	ldrb r7, [r4, #0x11]
	ldrh r6, [r5, #8]
	lsl r7, r7, #0x1d
	and r6, r2
	lsr r7, r7, #0x17
	orr r6, r7
	strh r6, [r5, #8]
	ldrb r7, [r4, #0x12]
	ldrh r6, [r5, #8]
	lsl r7, r7, #0x1d
	bic r6, r3
	lsr r7, r7, #0x1a
	orr r6, r7
	strh r6, [r5, #8]
	add r7, sp, #0xc
	ldrh r6, [r5, #0xc]
	ldrb r7, [r7, #0x1e]
	bic r6, r0
	and r7, r1
	orr r6, r7
	strh r6, [r5, #0xc]
	ldrb r7, [r4, #0xd]
	ldrh r6, [r5, #0xc]
	lsl r7, r7, #0x1d
	and r6, r2
	lsr r7, r7, #0x17
	orr r6, r7
	strh r6, [r5, #0xc]
	ldrb r7, [r4, #0xe]
	ldrh r6, [r5, #0xc]
	lsl r7, r7, #0x1d
	bic r6, r3
	lsr r7, r7, #0x1a
	orr r6, r7
	strh r6, [r5, #0xc]
	ldrh r6, [r5, #0x10]
	bic r6, r0
	add r0, sp, #0xc
	ldrb r0, [r0, #0x1d]
	and r0, r1
	orr r0, r6
	strh r0, [r5, #0x10]
	ldrh r0, [r5, #0x10]
	add r1, r0, #0
	ldrb r0, [r4, #0xb]
	and r1, r2
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x17
	orr r0, r1
	strh r0, [r5, #0x10]
	ldrb r0, [r4, #0xc]
	ldrh r1, [r5, #0x10]
	lsl r0, r0, #0x1d
	bic r1, r3
	lsr r0, r0, #0x1a
	orr r0, r1
	strh r0, [r5, #0x10]
	add sp, #0x3c
	pop {r4, r5, r6, r7, pc}
	.balign 4, 0
_0207322C: .word 0x020FF6B6
_02073230: .word 0x020FF7B4
_02073234: .word 0xFFFFFE3F
	thumb_func_end sub_020730B4

	thumb_func_start sub_02073238
sub_02073238: ; 0x02073238
	push {r4, lr}
	add r4, r1, #0
	bl sub_02070DB0
	add r1, r4, #0
	bl sub_020730B4
	pop {r4, pc}
	thumb_func_end sub_02073238

	thumb_func_start sub_02073248
sub_02073248: ; 0x02073248
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x18
	add r4, r1, #0
	str r2, [sp]
	mov r1, #0
	mov r2, #8
	add r5, r0, #0
	bl MIi_CpuFill8
	add r0, r4, #0
	add r1, sp, #4
	bl sub_020730B4
	mov r4, #0
	add r6, sp, #4
	add r7, r4, #0
_02073268:
	ldr r0, [sp]
	cmp r0, #0
	beq _02073282
	mov r0, #2
	ldrsh r1, [r6, r0]
	ldr r0, [sp]
	ldrsb r0, [r0, r4]
	add r0, r1, r0
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	bl sub_02073058
	b _0207328A
_02073282:
	mov r0, #2
	ldrsh r0, [r6, r0]
	bl sub_02073058
_0207328A:
	ldrh r1, [r6]
	lsl r2, r1, #0x1d
	lsr r2, r2, #0x1d
	add r0, r0, r2
	lsl r0, r0, #0x10
	lsl r3, r1, #0x17
	asr r0, r0, #0x10
	lsr r3, r3, #0x1d
	cmp r0, r3
	bge _020732A4
	lsl r0, r3, #0x10
	asr r0, r0, #0x10
	b _020732B0
_020732A4:
	lsl r1, r1, #0x1a
	lsr r1, r1, #0x1d
	cmp r0, r1
	ble _020732B0
	lsl r0, r1, #0x10
	asr r0, r0, #0x10
_020732B0:
	cmp r0, r2
	bne _020732BC
	add r2, r5, r4
	mov r1, #0
	strb r1, [r2, #2]
	b _020732CE
_020732BC:
	cmp r0, r2
	bge _020732C8
	add r2, r5, r4
	mov r1, #2
	strb r1, [r2, #2]
	b _020732CE
_020732C8:
	add r2, r5, r4
	mov r1, #1
	strb r1, [r2, #2]
_020732CE:
	ldrh r1, [r5]
	lsl r0, r7
	orr r0, r1
	add r4, r4, #1
	strh r0, [r5]
	add r6, r6, #4
	add r7, r7, #3
	cmp r4, #5
	blo _02073268
	add sp, #0x18
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_02073248

	thumb_func_start sub_020732E4
sub_020732E4: ; 0x020732E4
	push {r4, r5, r6, lr}
	add r5, r0, #0
	add r4, r2, #0
	add r6, r3, #0
	add r0, r1, #0
	bl sub_02070DB0
	add r1, r0, #0
	add r0, r5, #0
	add r2, r4, #0
	add r3, r6, #0
	bl sub_02073248
	pop {r4, r5, r6, pc}
	thumb_func_end sub_020732E4

	thumb_func_start sub_02073300
sub_02073300: ; 0x02073300
	push {r3, lr}
	mov r1, #0x75
	lsl r1, r1, #6
	mov r2, #0
	str r1, [sp]
	mov r1, #0xb
	add r3, r2, #0
	bl ReadFromNarcMemberByIdPair
	pop {r3, pc}
	thumb_func_end sub_02073300

	thumb_func_start sub_02073314
sub_02073314: ; 0x02073314
	push {r4, lr}
	sub sp, #0x10
	add r4, r1, #0
	add r1, sp, #0
	bl sub_020733B0
	add r0, sp, #0
	add r1, r4, #0
	bl sub_02073354
	add sp, #0x10
	pop {r4, pc}
	thumb_func_end sub_02073314

	thumb_func_start sub_0207332C
sub_0207332C: ; 0x0207332C
	push {r3, r4, r5, lr}
	add r5, r1, #0
	cmp r5, #3
	bls _02073336
	mov r5, #3
_02073336:
	mov r1, #5
	bl sub_02073314
	lsl r0, r0, #0x18
	lsr r4, r0, #0x18
	mov r0, #0x14
	mul r0, r4
	mul r0, r5
	mov r1, #0x64
	bl _s32_div_f
	add r0, r4, r0
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	pop {r3, r4, r5, pc}
	thumb_func_end sub_0207332C

	thumb_func_start sub_02073354
sub_02073354: ; 0x02073354
	cmp r1, #0xb
	bhi _020733AC
	add r1, r1, r1
	add r1, pc
	ldrh r1, [r1, #6]
	lsl r1, r1, #0x10
	asr r1, r1, #0x10
	add pc, r1
_02073364: ; jump table
	.short _0207337C - _02073364 - 2 ; case 0
	.short _02073380 - _02073364 - 2 ; case 1
	.short _02073384 - _02073364 - 2 ; case 2
	.short _02073388 - _02073364 - 2 ; case 3
	.short _0207338C - _02073364 - 2 ; case 4
	.short _02073390 - _02073364 - 2 ; case 5
	.short _02073394 - _02073364 - 2 ; case 6
	.short _02073398 - _02073364 - 2 ; case 7
	.short _0207339C - _02073364 - 2 ; case 8
	.short _020733A2 - _02073364 - 2 ; case 9
	.short _020733A6 - _02073364 - 2 ; case 10
	.short _020733AA - _02073364 - 2 ; case 11
_0207337C:
	ldrh r0, [r0]
	bx lr
_02073380:
	ldrb r0, [r0, #2]
	bx lr
_02073384:
	ldrb r0, [r0, #3]
	bx lr
_02073388:
	ldrb r0, [r0, #4]
	bx lr
_0207338C:
	ldrb r0, [r0, #5]
	bx lr
_02073390:
	ldrb r0, [r0, #6]
	bx lr
_02073394:
	ldrb r0, [r0, #7]
	bx lr
_02073398:
	ldrh r0, [r0, #8]
	bx lr
_0207339C:
	mov r1, #0xa
	ldrsb r0, [r0, r1]
	bx lr
_020733A2:
	ldrb r0, [r0, #0xb]
	bx lr
_020733A6:
	ldrb r0, [r0, #0xc]
	bx lr
_020733AA:
	ldrb r0, [r0, #0xd]
_020733AC:
	bx lr
	.balign 4, 0
	thumb_func_end sub_02073354

	thumb_func_start sub_020733B0
sub_020733B0: ; 0x020733B0
	ldr r3, _020733BC ; =ReadWholeNarcMemberByIdPair
	add r2, r0, #0
	add r0, r1, #0
	mov r1, #0xb
	bx r3
	nop
_020733BC: .word ReadWholeNarcMemberByIdPair
	thumb_func_end sub_020733B0

	thumb_func_start sub_020733C0
sub_020733C0: ; 0x020733C0
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x48
	str r2, [sp, #4]
	ldr r2, _0207346C ; =0x000002D9
	str r0, [sp]
	add r4, r1, #0
	ldr r3, [sp, #4]
	mov r0, #1
	mov r1, #0x1b
	bl NewMsgDataFromNarc
	str r0, [sp, #0x10]
	add r0, r4, #0
	bl sub_0202A960
	bl GetRivalNamePtr
	ldr r4, [sp]
	str r0, [sp, #0xc]
	add r0, r4, #0
	add r5, r4, #0
	mov r7, #0
	str r0, [sp, #8]
	add r5, #0x3c
_020733F0:
	ldr r0, [r4, #0x18]
	cmp r0, #0
	beq _02073444
	add r1, sp, #0x14
	bl sub_020735D8
	ldr r3, [sp, #8]
	add r6, sp, #0x14
	add r3, #0x28
	mov r2, #6
_02073404:
	ldmia r6!, {r0, r1}
	stmia r3!, {r0, r1}
	sub r2, r2, #1
	bne _02073404
	ldr r0, [r6]
	str r0, [r3]
	add r0, sp, #0x14
	ldrb r0, [r0, #1]
	cmp r0, #0x17
	bne _02073422
	ldr r1, [sp, #0xc]
	add r0, r5, #0
	bl CopyU16StringArray
	b _0207343A
_02073422:
	ldr r0, [sp, #0x10]
	ldr r1, [r4, #0x18]
	bl NewString_ReadMsgData
	add r6, r0, #0
	add r1, r5, #0
	mov r2, #8
	bl CopyStringToU16Array
	add r0, r6, #0
	bl String_dtor
_0207343A:
	ldr r0, [sp]
	ldr r2, [sp, #4]
	add r1, r7, #0
	bl sub_02073604
_02073444:
	ldr r0, [sp, #8]
	add r7, r7, #1
	add r0, #0x34
	add r4, r4, #4
	add r5, #0x34
	str r0, [sp, #8]
	cmp r7, #4
	blt _020733F0
	ldr r0, [sp]
	ldr r1, [r0]
	ldr r0, [sp, #0x24]
	orr r1, r0
	ldr r0, [sp]
	str r1, [r0]
	ldr r0, [sp, #0x10]
	bl DestroyMsgData
	add sp, #0x48
	pop {r3, r4, r5, r6, r7, pc}
	nop
_0207346C: .word 0x000002D9
	thumb_func_end sub_020733C0

	thumb_func_start sub_02073470
sub_02073470: ; 0x02073470
	push {r4, r5, lr}
	sub sp, #0x34
	add r5, r1, #0
	add r1, sp, #0
	bl sub_020735D8
	cmp r5, #9
	bhi _020734C8
	add r0, r5, r5
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_0207348C: ; jump table
	.short _020734A0 - _0207348C - 2 ; case 0
	.short _020734A6 - _0207348C - 2 ; case 1
	.short _020734AC - _0207348C - 2 ; case 2
	.short _020734B2 - _0207348C - 2 ; case 3
	.short _020734B8 - _0207348C - 2 ; case 4
	.short _020734B8 - _0207348C - 2 ; case 5
	.short _020734B8 - _0207348C - 2 ; case 6
	.short _020734B8 - _0207348C - 2 ; case 7
	.short _020734C2 - _0207348C - 2 ; case 8
	.short _020734C6 - _0207348C - 2 ; case 9
_020734A0:
	add r0, sp, #0
	ldrb r4, [r0]
	b _020734C8
_020734A6:
	add r0, sp, #0
	ldrb r4, [r0, #1]
	b _020734C8
_020734AC:
	add r0, sp, #0
	ldrb r4, [r0, #2]
	b _020734C8
_020734B2:
	add r0, sp, #0
	ldrb r4, [r0, #3]
	b _020734C8
_020734B8:
	sub r0, r5, #4
	lsl r1, r0, #1
	add r0, sp, #4
	ldrh r4, [r0, r1]
	b _020734C8
_020734C2:
	ldr r4, [sp, #0xc]
	b _020734C8
_020734C6:
	ldr r4, [sp, #0x10]
_020734C8:
	add r0, r4, #0
	add sp, #0x34
	pop {r4, r5, pc}
	.balign 4, 0
	thumb_func_end sub_02073470

	thumb_func_start sub_020734D0
sub_020734D0: ; 0x020734D0
	push {r4, r5, r6, r7, lr}
	sub sp, #0x14
	add r5, r0, #0
	mov r0, #0
	str r0, [sp, #4]
	add r7, r1, #0
	ldr r1, [sp, #4]
	mov r0, #0x39
	add r4, r2, #0
	bl GetNarcMemberSizeByIdPair
	add r6, r0, #0
	mov r0, #2
	str r0, [sp]
	add r0, sp, #0xc
	mov r1, #0x83
	mov r2, #0
	lsl r3, r5, #1
	bl ReadFromNarcMemberByIdPair
	mov r0, #0x39
	add r1, r4, #0
	bl NARC_ctor
	add r4, sp, #0xc
	ldrh r2, [r4]
	str r0, [sp, #8]
	cmp r2, r6
	beq _0207353C
_0207350A:
	add r0, sp, #0xc
	add r0, #2
	str r0, [sp]
	ldr r0, [sp, #8]
	mov r1, #0
	mov r3, #4
	bl NARC_ReadFromMember
	ldrh r1, [r4, #2]
	cmp r1, r5
	bne _0207352C
	ldrh r0, [r4, #4]
	cmp r0, r7
	bne _0207352C
	mov r0, #1
	str r0, [sp, #4]
	b _0207353C
_0207352C:
	cmp r1, r5
	bne _0207353C
	ldrh r0, [r4]
	add r0, r0, #4
	strh r0, [r4]
	ldrh r2, [r4]
	cmp r2, r6
	bne _0207350A
_0207353C:
	ldr r0, [sp, #8]
	bl NARC_dtor
	ldr r0, [sp, #4]
	add sp, #0x14
	pop {r4, r5, r6, r7, pc}
	thumb_func_end sub_020734D0

	thumb_func_start sub_02073548
sub_02073548: ; 0x02073548
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x18
	add r6, r0, #0
	add r7, r1, #0
	mov r0, #0x39
	mov r1, #0
	str r2, [sp, #4]
	str r3, [sp, #8]
	bl GetNarcMemberSizeByIdPair
	add r5, r0, #0
	mov r0, #2
	str r0, [sp]
	add r0, sp, #0x10
	mov r1, #0x83
	mov r2, #0
	lsl r3, r6, #1
	bl ReadFromNarcMemberByIdPair
	ldr r1, [sp, #8]
	mov r0, #0x39
	bl NARC_ctor
	add r4, sp, #0x10
	ldrh r2, [r4]
	str r0, [sp, #0xc]
	cmp r2, r5
	beq _020735C0
_02073580:
	add r0, sp, #0x10
	add r0, #2
	str r0, [sp]
	ldr r0, [sp, #0xc]
	mov r1, #0
	mov r3, #4
	bl NARC_ReadFromMember
	ldrh r0, [r4, #2]
	cmp r0, r6
	bne _020735B4
	ldrh r0, [r4, #4]
	cmp r0, r7
	bne _020735B4
	ldr r0, [sp, #4]
	mov r1, #0xb6
	str r0, [sp]
	add r2, sp, #0x10
	ldrh r2, [r2]
	ldr r3, [sp, #8]
	mov r0, #0x1b
	lsl r1, r1, #2
	lsr r2, r2, #2
	bl ReadMsgData_NewNarc_ExistingString
	b _020735C0
_020735B4:
	ldrh r0, [r4]
	add r0, r0, #4
	strh r0, [r4]
	ldrh r2, [r4]
	cmp r2, r5
	bne _02073580
_020735C0:
	ldr r0, [sp, #0xc]
	bl NARC_dtor
	add r0, sp, #0x10
	ldrh r0, [r0]
	cmp r0, r5
	bne _020735D4
	ldr r0, [sp, #4]
	bl StringSetEmpty
_020735D4:
	add sp, #0x18
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_02073548

	thumb_func_start sub_020735D8
sub_020735D8: ; 0x020735D8
	ldr r3, _020735E4 ; =ReadWholeNarcMemberByIdPair
	add r2, r0, #0
	add r0, r1, #0
	mov r1, #0x37
	bx r3
	nop
_020735E4: .word ReadWholeNarcMemberByIdPair
	thumb_func_end sub_020735D8

	thumb_func_start sub_020735E8
sub_020735E8: ; 0x020735E8
	ldr r3, _020735F4 ; =ReadWholeNarcMemberByIdPair
	add r2, r0, #0
	add r0, r1, #0
	mov r1, #0x38
	bx r3
	nop
_020735F4: .word ReadWholeNarcMemberByIdPair
	thumb_func_end sub_020735E8

	thumb_func_start sub_020735F8
sub_020735F8: ; 0x020735F8
	ldr r1, _02073600 ; =0x020FFB90
	ldrb r0, [r1, r0]
	bx lr
	nop
_02073600: .word 0x020FFB90
	thumb_func_end sub_020735F8

	thumb_func_start sub_02073604
sub_02073604: ; 0x02073604
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x80
	str r1, [sp, #0x10]
	add r4, r0, #0
	str r2, [sp, #0x14]
	bl GetLCRNGSeed
	str r0, [sp, #0x68]
	ldr r0, [sp, #0x10]
	mov r1, #6
	lsl r7, r0, #2
	add r0, r4, r7
	ldr r0, [r0, #4]
	bl sub_020744DC
	ldr r0, [sp, #0x14]
	mov r1, #0x6c
	bl AllocFromHeap
	str r0, [sp, #0x74]
	ldr r0, [sp, #0x14]
	bl AllocMonZeroed
	add r6, r0, #0
	add r0, r4, r7
	ldr r0, [r0, #0x18]
	ldr r1, [sp, #0x74]
	bl sub_020735E8
	ldr r0, [sp, #0x10]
	mov r1, #0x34
	add r5, r0, #0
	mul r5, r1
	add r0, r4, r5
	add r0, #0x29
	ldrb r0, [r0]
	bl sub_020735F8
	cmp r0, #1
	bne _02073658
	mov r0, #0x78
	b _0207365A
_02073658:
	mov r0, #0x88
_0207365A:
	str r0, [sp, #0x7c]
	add r0, r4, r5
	add r0, #0x28
	ldrb r0, [r0]
	cmp r0, #3
	bhi _02073762
	add r0, r0, r0
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_02073672: ; jump table
	.short _0207367A - _02073672 - 2 ; case 0
	.short _02073764 - _02073672 - 2 ; case 1
	.short _0207386E - _02073672 - 2 ; case 2
	.short _02073964 - _02073672 - 2 ; case 3
_0207367A:
	mov r0, #0
	str r0, [sp, #0x70]
	add r0, r4, r5
	add r0, #0x2b
	ldrb r0, [r0]
	cmp r0, #0
	ble _02073762
	ldr r0, [sp, #0x74]
	str r0, [sp, #0x44]
	add r0, r4, r7
	str r0, [sp, #0x40]
_02073690:
	ldr r0, [sp, #0x44]
	mov r1, #0x3f
	ldrh r0, [r0, #4]
	lsl r1, r1, #0xa
	add r3, sp, #0x7c
	and r1, r0
	asr r2, r1, #0xa
	add r1, sp, #0x78
	strb r2, [r1, #3]
	ldr r2, _02073994 ; =0x000003FF
	ldrb r1, [r1, #3]
	and r0, r2
	ldr r2, [sp, #0x44]
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	ldrb r2, [r2, #1]
	str r0, [sp, #0x3c]
	bl sub_02073A98
	ldr r1, [sp, #0x44]
	ldr r0, [sp, #0x40]
	ldrb r2, [r1]
	ldrh r1, [r1, #2]
	ldr r0, [r0, #0x18]
	add r2, r2, r1
	ldr r1, [sp, #0x3c]
	add r1, r1, r2
	add r0, r0, r1
	str r0, [sp, #0x6c]
	bl SetLCRNGSeed
	add r0, r4, r5
	add r0, #0x29
	ldrb r0, [r0]
	mov r7, #0
	cmp r0, #0
	ble _020736EC
_020736DA:
	bl LCRandom
	str r0, [sp, #0x6c]
	add r0, r4, r5
	add r0, #0x29
	ldrb r0, [r0]
	add r7, r7, #1
	cmp r7, r0
	blt _020736DA
_020736EC:
	ldr r0, [sp, #0x6c]
	lsl r1, r0, #8
	ldr r0, [sp, #0x7c]
	add r7, r1, r0
	ldr r0, [sp, #0x44]
	ldrb r1, [r0]
	mov r0, #0x1f
	mul r0, r1
	mov r1, #0xff
	bl _s32_div_f
	add r3, r0, #0
	mov r0, #1
	str r0, [sp]
	lsl r3, r3, #0x18
	str r7, [sp, #4]
	mov r0, #2
	str r0, [sp, #8]
	mov r0, #0
	str r0, [sp, #0xc]
	ldr r2, [sp, #0x44]
	ldr r1, [sp, #0x3c]
	ldrh r2, [r2, #2]
	add r0, r6, #0
	lsr r3, r3, #0x18
	bl sub_0206DE38
	ldr r0, [sp, #0x44]
	ldr r2, [sp, #0x14]
	ldrh r0, [r0, #6]
	add r1, r6, #0
	bl sub_02072A44
	add r2, sp, #0x78
	add r0, r6, #0
	mov r1, #0x70
	add r2, #3
	bl sub_0206EC40
	add r0, r6, #0
	bl sub_02073AE4
	ldr r0, [sp, #0x40]
	add r1, r6, #0
	ldr r0, [r0, #4]
	bl sub_02074524
	ldr r0, [sp, #0x44]
	add r0, #8
	str r0, [sp, #0x44]
	ldr r0, [sp, #0x70]
	add r0, r0, #1
	str r0, [sp, #0x70]
	add r0, r4, r5
	add r0, #0x2b
	ldrb r1, [r0]
	ldr r0, [sp, #0x70]
	cmp r0, r1
	blt _02073690
_02073762:
	b _02073A82
_02073764:
	mov r0, #0
	str r0, [sp, #0x24]
	add r0, r4, r5
	add r0, #0x2b
	ldrb r0, [r0]
	cmp r0, #0
	ble _0207386C
	ldr r0, [sp, #0x74]
	str r0, [sp, #0x50]
	add r0, r4, r7
	str r0, [sp, #0x4c]
_0207377A:
	ldr r0, [sp, #0x50]
	mov r1, #0x3f
	ldrh r0, [r0, #4]
	lsl r1, r1, #0xa
	add r3, sp, #0x7c
	and r1, r0
	asr r2, r1, #0xa
	add r1, sp, #0x78
	strb r2, [r1, #2]
	ldr r2, _02073994 ; =0x000003FF
	ldrb r1, [r1, #2]
	and r0, r2
	ldr r2, [sp, #0x50]
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	ldrb r2, [r2, #1]
	str r0, [sp, #0x38]
	bl sub_02073A98
	ldr r1, [sp, #0x50]
	ldr r0, [sp, #0x4c]
	ldrb r2, [r1]
	ldrh r1, [r1, #2]
	ldr r0, [r0, #0x18]
	add r2, r2, r1
	ldr r1, [sp, #0x38]
	add r1, r1, r2
	add r0, r0, r1
	str r0, [sp, #0x18]
	bl SetLCRNGSeed
	add r0, r4, r5
	add r0, #0x29
	ldrb r0, [r0]
	mov r7, #0
	cmp r0, #0
	ble _020737D6
_020737C4:
	bl LCRandom
	str r0, [sp, #0x18]
	add r0, r4, r5
	add r0, #0x29
	ldrb r0, [r0]
	add r7, r7, #1
	cmp r7, r0
	blt _020737C4
_020737D6:
	ldr r0, [sp, #0x18]
	lsl r1, r0, #8
	ldr r0, [sp, #0x7c]
	add r7, r1, r0
	ldr r0, [sp, #0x50]
	ldrb r1, [r0]
	mov r0, #0x1f
	mul r0, r1
	mov r1, #0xff
	bl _s32_div_f
	add r3, r0, #0
	mov r0, #1
	str r0, [sp]
	lsl r3, r3, #0x18
	str r7, [sp, #4]
	mov r0, #2
	str r0, [sp, #8]
	mov r0, #0
	str r0, [sp, #0xc]
	ldr r2, [sp, #0x50]
	ldr r1, [sp, #0x38]
	ldrh r2, [r2, #2]
	add r0, r6, #0
	lsr r3, r3, #0x18
	bl sub_0206DE38
	ldr r0, [sp, #0x50]
	mov r7, #0
	str r0, [sp, #0x48]
_02073812:
	ldr r1, [sp, #0x48]
	lsl r2, r7, #0x18
	ldrh r1, [r1, #6]
	add r0, r6, #0
	lsr r2, r2, #0x18
	bl sub_020714E8
	ldr r0, [sp, #0x48]
	add r7, r7, #1
	add r0, r0, #2
	str r0, [sp, #0x48]
	cmp r7, #4
	blt _02073812
	ldr r0, [sp, #0x50]
	ldr r2, [sp, #0x14]
	ldrh r0, [r0, #0xe]
	add r1, r6, #0
	bl sub_02072A44
	add r2, sp, #0x78
	add r0, r6, #0
	mov r1, #0x70
	add r2, #2
	bl sub_0206EC40
	add r0, r6, #0
	bl sub_02073AE4
	ldr r0, [sp, #0x4c]
	add r1, r6, #0
	ldr r0, [r0, #4]
	bl sub_02074524
	ldr r0, [sp, #0x50]
	add r0, #0x10
	str r0, [sp, #0x50]
	ldr r0, [sp, #0x24]
	add r0, r0, #1
	str r0, [sp, #0x24]
	add r0, r4, r5
	add r0, #0x2b
	ldrb r1, [r0]
	ldr r0, [sp, #0x24]
	cmp r0, r1
	blt _0207377A
_0207386C:
	b _02073A82
_0207386E:
	mov r0, #0
	str r0, [sp, #0x28]
	add r0, r4, r5
	add r0, #0x2b
	ldrb r0, [r0]
	cmp r0, #0
	ble _02073962
	ldr r0, [sp, #0x74]
	str r0, [sp, #0x58]
	add r0, r4, r7
	str r0, [sp, #0x54]
_02073884:
	ldr r0, [sp, #0x58]
	mov r1, #0x3f
	ldrh r0, [r0, #4]
	lsl r1, r1, #0xa
	add r3, sp, #0x7c
	and r1, r0
	asr r2, r1, #0xa
	add r1, sp, #0x78
	strb r2, [r1, #1]
	ldr r2, _02073994 ; =0x000003FF
	ldrb r1, [r1, #1]
	and r0, r2
	ldr r2, [sp, #0x58]
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	ldrb r2, [r2, #1]
	str r0, [sp, #0x34]
	bl sub_02073A98
	ldr r1, [sp, #0x58]
	ldr r0, [sp, #0x54]
	ldrb r2, [r1]
	ldrh r1, [r1, #2]
	ldr r0, [r0, #0x18]
	add r2, r2, r1
	ldr r1, [sp, #0x34]
	add r1, r1, r2
	add r0, r0, r1
	str r0, [sp, #0x1c]
	bl SetLCRNGSeed
	add r0, r4, r5
	add r0, #0x29
	ldrb r0, [r0]
	mov r7, #0
	cmp r0, #0
	ble _020738E0
_020738CE:
	bl LCRandom
	str r0, [sp, #0x1c]
	add r0, r4, r5
	add r0, #0x29
	ldrb r0, [r0]
	add r7, r7, #1
	cmp r7, r0
	blt _020738CE
_020738E0:
	ldr r0, [sp, #0x1c]
	lsl r1, r0, #8
	ldr r0, [sp, #0x7c]
	add r7, r1, r0
	ldr r0, [sp, #0x58]
	ldrb r1, [r0]
	mov r0, #0x1f
	mul r0, r1
	mov r1, #0xff
	bl _s32_div_f
	add r3, r0, #0
	mov r0, #1
	str r0, [sp]
	lsl r3, r3, #0x18
	str r7, [sp, #4]
	mov r0, #2
	str r0, [sp, #8]
	mov r0, #0
	str r0, [sp, #0xc]
	ldr r2, [sp, #0x58]
	ldr r1, [sp, #0x34]
	ldrh r2, [r2, #2]
	add r0, r6, #0
	lsr r3, r3, #0x18
	bl sub_0206DE38
	ldr r2, [sp, #0x58]
	add r0, r6, #0
	mov r1, #6
	add r2, r2, #6
	bl sub_0206EC40
	ldr r0, [sp, #0x58]
	ldr r2, [sp, #0x14]
	ldrh r0, [r0, #8]
	add r1, r6, #0
	bl sub_02072A44
	add r2, sp, #0x78
	add r0, r6, #0
	mov r1, #0x70
	add r2, #1
	bl sub_0206EC40
	add r0, r6, #0
	bl sub_02073AE4
	ldr r0, [sp, #0x54]
	add r1, r6, #0
	ldr r0, [r0, #4]
	bl sub_02074524
	ldr r0, [sp, #0x58]
	add r0, #0xa
	str r0, [sp, #0x58]
	ldr r0, [sp, #0x28]
	add r0, r0, #1
	str r0, [sp, #0x28]
	add r0, r4, r5
	add r0, #0x2b
	ldrb r1, [r0]
	ldr r0, [sp, #0x28]
	cmp r0, r1
	blt _02073884
_02073962:
	b _02073A82
_02073964:
	mov r0, #0
	str r0, [sp, #0x2c]
	add r0, r4, r5
	add r0, #0x2b
	ldrb r0, [r0]
	cmp r0, #0
	bgt _02073974
	b _02073A82
_02073974:
	ldr r0, [sp, #0x74]
	str r0, [sp, #0x64]
	add r0, r4, r7
	str r0, [sp, #0x60]
_0207397C:
	ldr r0, [sp, #0x64]
	mov r1, #0x3f
	ldrh r0, [r0, #4]
	lsl r1, r1, #0xa
	add r3, sp, #0x7c
	and r1, r0
	asr r2, r1, #0xa
	add r1, sp, #0x78
	strb r2, [r1]
	ldr r2, _02073994 ; =0x000003FF
	b _02073998
	nop
_02073994: .word 0x000003FF
_02073998:
	ldrb r1, [r1]
	and r0, r2
	ldr r2, [sp, #0x64]
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	ldrb r2, [r2, #1]
	str r0, [sp, #0x30]
	bl sub_02073A98
	ldr r1, [sp, #0x64]
	ldr r0, [sp, #0x60]
	ldrb r2, [r1]
	ldrh r1, [r1, #2]
	ldr r0, [r0, #0x18]
	add r2, r2, r1
	ldr r1, [sp, #0x30]
	add r1, r1, r2
	add r0, r0, r1
	str r0, [sp, #0x20]
	bl SetLCRNGSeed
	add r0, r4, r5
	add r0, #0x29
	ldrb r0, [r0]
	mov r7, #0
	cmp r0, #0
	ble _020739E0
_020739CE:
	bl LCRandom
	str r0, [sp, #0x20]
	add r0, r4, r5
	add r0, #0x29
	ldrb r0, [r0]
	add r7, r7, #1
	cmp r7, r0
	blt _020739CE
_020739E0:
	ldr r0, [sp, #0x20]
	lsl r1, r0, #8
	ldr r0, [sp, #0x7c]
	add r7, r1, r0
	ldr r0, [sp, #0x64]
	ldrb r1, [r0]
	mov r0, #0x1f
	mul r0, r1
	mov r1, #0xff
	bl _s32_div_f
	add r3, r0, #0
	mov r0, #1
	str r0, [sp]
	lsl r3, r3, #0x18
	str r7, [sp, #4]
	mov r0, #2
	str r0, [sp, #8]
	mov r0, #0
	str r0, [sp, #0xc]
	ldr r2, [sp, #0x64]
	ldr r1, [sp, #0x30]
	ldrh r2, [r2, #2]
	add r0, r6, #0
	lsr r3, r3, #0x18
	bl sub_0206DE38
	ldr r2, [sp, #0x64]
	add r0, r6, #0
	mov r1, #6
	add r2, r2, #6
	bl sub_0206EC40
	ldr r0, [sp, #0x64]
	mov r7, #0
	str r0, [sp, #0x5c]
_02073A28:
	ldr r1, [sp, #0x5c]
	lsl r2, r7, #0x18
	ldrh r1, [r1, #8]
	add r0, r6, #0
	lsr r2, r2, #0x18
	bl sub_020714E8
	ldr r0, [sp, #0x5c]
	add r7, r7, #1
	add r0, r0, #2
	str r0, [sp, #0x5c]
	cmp r7, #4
	blt _02073A28
	ldr r0, [sp, #0x64]
	ldr r2, [sp, #0x14]
	ldrh r0, [r0, #0x10]
	add r1, r6, #0
	bl sub_02072A44
	add r0, r6, #0
	mov r1, #0x70
	add r2, sp, #0x78
	bl sub_0206EC40
	add r0, r6, #0
	bl sub_02073AE4
	ldr r0, [sp, #0x60]
	add r1, r6, #0
	ldr r0, [r0, #4]
	bl sub_02074524
	ldr r0, [sp, #0x64]
	add r0, #0x12
	str r0, [sp, #0x64]
	ldr r0, [sp, #0x2c]
	add r0, r0, #1
	str r0, [sp, #0x2c]
	add r0, r4, r5
	add r0, #0x2b
	ldrb r1, [r0]
	ldr r0, [sp, #0x2c]
	cmp r0, r1
	bge _02073A82
	b _0207397C
_02073A82:
	ldr r0, [sp, #0x74]
	bl FreeToHeap
	add r0, r6, #0
	bl FreeToHeap
	ldr r0, [sp, #0x68]
	bl SetLCRNGSeed
	add sp, #0x80
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_02073604

	thumb_func_start sub_02073A98
sub_02073A98: ; 0x02073A98
	push {r4, r5, r6, lr}
	add r5, r3, #0
	mov r3, #0xf
	add r6, r2, #0
	and r6, r3
	mov r3, #0xf0
	and r3, r2
	asr r4, r3, #4
	cmp r2, #0
	beq _02073AE2
	cmp r6, #0
	beq _02073AC8
	mov r2, #0x12
	bl sub_0206FBC4
	str r0, [r5]
	cmp r6, #1
	ldr r0, [r5]
	bne _02073AC4
	add r0, r0, #2
	str r0, [r5]
	b _02073AC8
_02073AC4:
	sub r0, r0, #2
	str r0, [r5]
_02073AC8:
	cmp r4, #1
	bne _02073AD6
	ldr r1, [r5]
	mov r0, #1
	bic r1, r0
	str r1, [r5]
	pop {r4, r5, r6, pc}
_02073AD6:
	cmp r4, #2
	bne _02073AE2
	ldr r1, [r5]
	mov r0, #1
	orr r0, r1
	str r0, [r5]
_02073AE2:
	pop {r4, r5, r6, pc}
	thumb_func_end sub_02073A98

	thumb_func_start sub_02073AE4
sub_02073AE4: ; 0x02073AE4
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	mov r4, #0
	mov r0, #0xff
	add r7, sp, #0
	strb r0, [r7]
	add r6, r4, #0
_02073AF2:
	add r1, r4, #0
	add r0, r5, #0
	add r1, #0x36
	mov r2, #0
	bl GetMonData
	cmp r0, #0xda
	bne _02073B04
	strb r6, [r7]
_02073B04:
	add r4, r4, #1
	cmp r4, #4
	blt _02073AF2
	add r0, r5, #0
	mov r1, #9
	add r2, sp, #0
	bl sub_0206EC40
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_02073AE4

	thumb_func_start PCStorage_init
PCStorage_init: ; 0x02073B18
	ldr r3, _02073B1C ; =sub_02073B28
	bx r3
	.balign 4, 0
_02073B1C: .word sub_02073B28
	thumb_func_end PCStorage_init

	thumb_func_start PCStorage_sizeof
PCStorage_sizeof: ; 0x02073B20
	ldr r0, _02073B24 ; =0x000122FC
	bx lr
	.balign 4, 0
_02073B24: .word 0x000122FC
	thumb_func_end PCStorage_sizeof

	thumb_func_start sub_02073B28
sub_02073B28: ; 0x02073B28
	push {r3, r4, r5, r6, r7, lr}
	str r0, [sp]
	mov r7, #0
	add r6, r0, #0
_02073B30:
	mov r4, #0
	add r5, r6, #0
_02073B34:
	add r0, r5, #0
	bl ZeroBoxMonData
	add r4, r4, #1
	add r5, #0x88
	cmp r4, #0x1e
	blo _02073B34
	mov r0, #1
	lsl r0, r0, #0xc
	add r7, r7, #1
	add r6, r6, r0
	cmp r7, #0x12
	blo _02073B30
	mov r3, #0
	ldr r1, _02073BAC ; =0x000122D8
	add r4, r3, #0
	add r2, r3, #0
_02073B56:
	ldr r0, [sp]
	add r0, r0, r3
	strb r4, [r0, r1]
	add r4, r4, #1
	cmp r4, #0x10
	blo _02073B64
	add r4, r2, #0
_02073B64:
	add r3, r3, #1
	cmp r3, #0x12
	blo _02073B56
	ldr r1, _02073BB0 ; =0x000122EA
	ldr r0, [sp]
	mov r3, #0
	strb r3, [r0, r1]
	mov r0, #1
	mov r1, #0x1b
	mov r2, #0x18
	bl NewMsgDataFromNarc
	add r6, r0, #0
	beq _02073BA0
	ldr r1, _02073BB4 ; =0x00012008
	ldr r0, [sp]
	mov r5, #0
	add r4, r0, r1
_02073B88:
	add r0, r6, #0
	add r1, r5, #6
	add r2, r4, #0
	bl ReadMsgDataIntoU16Array
	add r5, r5, #1
	add r4, #0x28
	cmp r5, #0x12
	blo _02073B88
	add r0, r6, #0
	bl DestroyMsgData
_02073BA0:
	mov r1, #0x12
	ldr r0, [sp]
	mov r2, #0
	lsl r1, r1, #0xc
	str r2, [r0, r1]
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_02073BAC: .word 0x000122D8
_02073BB0: .word 0x000122EA
_02073BB4: .word 0x00012008
	thumb_func_end sub_02073B28

	thumb_func_start sub_02073BB8
sub_02073BB8: ; 0x02073BB8
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	mov r0, #0x12
	lsl r0, r0, #0xc
	ldr r4, [r5, r0]
	add r6, r1, #0
	add r7, r0, #0
_02073BC6:
	add r0, r6, #0
	bl sub_020728C4
	add r0, r5, #0
	add r1, r4, #0
	add r2, r6, #0
	bl sub_02073BFC
	cmp r0, #0
	beq _02073BE8
	lsl r1, r4, #0x18
	add r0, r5, #0
	lsr r1, r1, #0x18
	bl sub_020740D8
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_02073BE8:
	add r4, r4, #1
	cmp r4, #0x12
	blo _02073BF0
	mov r4, #0
_02073BF0:
	ldr r0, [r5, r7]
	cmp r4, r0
	bne _02073BC6
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_02073BB8

	thumb_func_start sub_02073BFC
sub_02073BFC: ; 0x02073BFC
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	str r0, [sp]
	add r0, r2, #0
	add r6, r1, #0
	str r2, [sp, #4]
	bl sub_020728C4
	mov r0, #0
	mvn r0, r0
	cmp r6, r0
	bne _02073C1C
	mov r1, #0x12
	ldr r0, [sp]
	lsl r1, r1, #0xc
	ldr r6, [r0, r1]
_02073C1C:
	ldr r0, [sp]
	lsl r1, r6, #0xc
	add r5, r0, r1
	mov r4, #0
	str r5, [sp, #8]
	mov r7, #5
_02073C28:
	add r0, r5, #0
	add r1, r7, #0
	mov r2, #0
	bl GetBoxMonData
	cmp r0, #0
	bne _02073C5E
	mov r0, #0x88
	add r1, r4, #0
	mul r1, r0
	ldr r0, [sp, #8]
	mov r3, #0x11
	add r4, r0, r1
_02073C42:
	ldr r2, [sp, #4]
	sub r3, r3, #1
	ldmia r2!, {r0, r1}
	str r2, [sp, #4]
	stmia r4!, {r0, r1}
	bne _02073C42
	lsl r1, r6, #0x18
	ldr r0, [sp]
	lsr r1, r1, #0x18
	bl sub_020740D8
	add sp, #0xc
	mov r0, #1
	pop {r4, r5, r6, r7, pc}
_02073C5E:
	add r4, r4, #1
	add r5, #0x88
	cmp r4, #0x1e
	blo _02073C28
	mov r0, #0
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
	thumb_func_end sub_02073BFC

	thumb_func_start sub_02073C6C
sub_02073C6C: ; 0x02073C6C
	push {r3, r4, r5, r6, r7, lr}
	add r7, r3, #0
	add r5, r0, #0
	add r0, r7, #0
	add r4, r1, #0
	add r6, r2, #0
	bl sub_020728C4
	mov r0, #0
	mvn r0, r0
	cmp r4, r0
	bne _02073C8A
	mov r0, #0x12
	lsl r0, r0, #0xc
	ldr r4, [r5, r0]
_02073C8A:
	cmp r4, #0x12
	bhs _02073CB6
	cmp r6, #0x1e
	bhs _02073CB6
	lsl r2, r4, #0xc
	mov r0, #0x88
	add r1, r6, #0
	mul r1, r0
	add r0, r5, r2
	add r3, r1, r0
	mov r2, #0x11
_02073CA0:
	ldmia r7!, {r0, r1}
	stmia r3!, {r0, r1}
	sub r2, r2, #1
	bne _02073CA0
	lsl r1, r4, #0x18
	add r0, r5, #0
	lsr r1, r1, #0x18
	bl sub_020740D8
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_02073CB6:
	bl GF_AssertFail
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_02073C6C

	thumb_func_start sub_02073CC0
sub_02073CC0: ; 0x02073CC0
	push {r4, r5, r6, r7, lr}
	sub sp, #0x8c
	add r4, r1, #0
	lsl r1, r4, #0xc
	mov ip, r3
	str r0, [sp]
	add r3, r0, r1
	mov r0, #0x88
	mul r0, r2
	add r6, r3, r0
	add r7, r6, #0
	add r5, sp, #4
	mov r2, #0x11
_02073CDA:
	ldmia r7!, {r0, r1}
	stmia r5!, {r0, r1}
	sub r2, r2, #1
	bne _02073CDA
	mov r1, #0x88
	mov r0, ip
	mul r1, r0
	add r2, r3, r1
	add r5, r2, #0
	mov r3, #0x11
_02073CEE:
	ldmia r5!, {r0, r1}
	stmia r6!, {r0, r1}
	sub r3, r3, #1
	bne _02073CEE
	add r5, sp, #4
	mov r3, #0x11
_02073CFA:
	ldmia r5!, {r0, r1}
	stmia r2!, {r0, r1}
	sub r3, r3, #1
	bne _02073CFA
	lsl r1, r4, #0x18
	ldr r0, [sp]
	lsr r1, r1, #0x18
	bl sub_020740D8
	add sp, #0x8c
	pop {r4, r5, r6, r7, pc}
	thumb_func_end sub_02073CC0

	thumb_func_start sub_02073D10
sub_02073D10: ; 0x02073D10
	push {r3, r4, r5, lr}
	add r5, r0, #0
	mov r0, #0
	add r4, r1, #0
	mvn r0, r0
	cmp r4, r0
	bne _02073D24
	mov r0, #0x12
	lsl r0, r0, #0xc
	ldr r4, [r5, r0]
_02073D24:
	cmp r2, #0x1e
	bhs _02073D46
	cmp r4, #0x12
	bhs _02073D46
	lsl r0, r4, #0xc
	add r1, r5, r0
	mov r0, #0x88
	mul r0, r2
	add r0, r1, r0
	bl ZeroBoxMonData
	lsl r1, r4, #0x18
	add r0, r5, #0
	lsr r1, r1, #0x18
	bl sub_020740D8
	pop {r3, r4, r5, pc}
_02073D46:
	bl GF_AssertFail
	pop {r3, r4, r5, pc}
	thumb_func_end sub_02073D10

	thumb_func_start sub_02073D4C
sub_02073D4C: ; 0x02073D4C
	mov r1, #0x12
	lsl r1, r1, #0xc
	ldr r0, [r0, r1]
	bx lr
	thumb_func_end sub_02073D4C

	thumb_func_start sub_02073D54
sub_02073D54: ; 0x02073D54
	push {r3, r4, r5, r6, r7, lr}
	mov r1, #0x12
	lsl r1, r1, #0xc
	ldr r6, [r0, r1]
	str r0, [sp]
	mov r7, #0xac
_02073D60:
	ldr r0, [sp]
	lsl r1, r6, #0xc
	mov r4, #0
	add r5, r0, r1
_02073D68:
	add r0, r5, #0
	add r1, r7, #0
	mov r2, #0
	bl GetBoxMonData
	cmp r0, #0
	bne _02073D7A
	add r0, r6, #0
	pop {r3, r4, r5, r6, r7, pc}
_02073D7A:
	add r4, r4, #1
	add r5, #0x88
	cmp r4, #0x1e
	blt _02073D68
	add r6, r6, #1
	cmp r6, #0x12
	blt _02073D8A
	mov r6, #0
_02073D8A:
	mov r0, #0x12
	ldr r1, [sp]
	lsl r0, r0, #0xc
	ldr r0, [r1, r0]
	cmp r6, r0
	bne _02073D60
	mov r0, #0x12
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_02073D54

	thumb_func_start sub_02073D9C
sub_02073D9C: ; 0x02073D9C
	push {r3, r4, r5, r6, r7, lr}
	add r6, r1, #0
	add r7, r0, #0
	mov r0, #0
	ldr r1, [r6]
	mvn r0, r0
	str r2, [sp]
	cmp r1, r0
	bne _02073DB6
	mov r0, #0x12
	lsl r0, r0, #0xc
	ldr r0, [r7, r0]
	str r0, [r6]
_02073DB6:
	ldr r0, [sp]
	ldr r4, [r6]
	ldr r5, [r0]
	b _02073DE0
_02073DBE:
	lsl r0, r4, #0xc
	add r1, r7, r0
	mov r0, #0x88
	mul r0, r5
	add r0, r1, r0
	mov r1, #0xac
	mov r2, #0
	bl GetBoxMonData
	cmp r0, #0
	bne _02073DDE
	ldr r0, [sp]
	str r4, [r6]
	str r5, [r0]
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_02073DDE:
	add r5, r5, #1
_02073DE0:
	cmp r5, #0x1e
	blt _02073DBE
	add r4, r4, #1
	cmp r4, #0x12
	blt _02073DEC
	mov r4, #0
_02073DEC:
	ldr r0, [r6]
	cmp r4, r0
	beq _02073DF6
	mov r5, #0
	b _02073DE0
_02073DF6:
	mov r0, #0x12
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_02073D9C

	thumb_func_start sub_02073DFC
sub_02073DFC: ; 0x02073DFC
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #8
	mov r6, #0
	str r0, [sp]
	str r6, [sp, #4]
	mov r7, #0xac
_02073E08:
	ldr r5, [sp]
	mov r4, #0
_02073E0C:
	add r0, r5, #0
	add r1, r7, #0
	mov r2, #0
	bl GetBoxMonData
	cmp r0, #0
	bne _02073E1C
	add r6, r6, #1
_02073E1C:
	add r4, r4, #1
	add r5, #0x88
	cmp r4, #0x1e
	blt _02073E0C
	mov r0, #1
	ldr r1, [sp]
	lsl r0, r0, #0xc
	add r0, r1, r0
	str r0, [sp]
	ldr r0, [sp, #4]
	add r0, r0, #1
	str r0, [sp, #4]
	cmp r0, #0x12
	blt _02073E08
	add r0, r6, #0
	add sp, #8
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_02073DFC

	thumb_func_start sub_02073E40
sub_02073E40: ; 0x02073E40
	push {r3, r4, r5, r6, r7, lr}
	add r7, r0, #0
	mov r0, #0
	add r5, r1, #0
	mvn r0, r0
	cmp r5, r0
	bne _02073E54
	mov r0, #0x12
	lsl r0, r0, #0xc
	ldr r5, [r7, r0]
_02073E54:
	cmp r5, #0x12
	blo _02073E5C
	bl GF_AssertFail
_02073E5C:
	mov r4, #0
	lsl r0, r5, #0xc
	add r5, r7, r0
	add r6, r4, #0
	mov r7, #0xac
_02073E66:
	add r0, r5, #0
	add r1, r7, #0
	mov r2, #0
	bl GetBoxMonData
	cmp r0, #0
	bne _02073E76
	add r4, r4, #1
_02073E76:
	add r6, r6, #1
	add r5, #0x88
	cmp r6, #0x1e
	blt _02073E66
	add r0, r4, #0
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_02073E40

	thumb_func_start sub_02073E84
sub_02073E84: ; 0x02073E84
	push {r3, lr}
	cmp r1, #0x12
	bhs _02073E92
	mov r2, #0x12
	lsl r2, r2, #0xc
	str r1, [r0, r2]
	pop {r3, pc}
_02073E92:
	bl GF_AssertFail
	pop {r3, pc}
	thumb_func_end sub_02073E84

	thumb_func_start sub_02073E98
sub_02073E98: ; 0x02073E98
	push {r3, lr}
	cmp r1, #0x12
	bhs _02073EA6
	add r1, r0, r1
	ldr r0, _02073EB0 ; =0x000122D8
	ldrb r0, [r1, r0]
	pop {r3, pc}
_02073EA6:
	bl GF_AssertFail
	mov r0, #0
	pop {r3, pc}
	nop
_02073EB0: .word 0x000122D8
	thumb_func_end sub_02073E98

	thumb_func_start sub_02073EB4
sub_02073EB4: ; 0x02073EB4
	cmp r0, #0x10
	blo _02073EC0
	cmp r0, #0x20
	blo _02073EC4
	cmp r0, #0x28
	bhs _02073EC4
_02073EC0:
	mov r0, #1
	bx lr
_02073EC4:
	mov r0, #0
	bx lr
	thumb_func_end sub_02073EB4

	thumb_func_start sub_02073EC8
sub_02073EC8: ; 0x02073EC8
	push {r4, r5, r6, lr}
	add r5, r0, #0
	mov r0, #0
	add r4, r1, #0
	mvn r0, r0
	add r6, r2, #0
	cmp r4, r0
	bne _02073EDE
	mov r0, #0x12
	lsl r0, r0, #0xc
	ldr r4, [r5, r0]
_02073EDE:
	cmp r4, #0x12
	bhs _02073EF4
	add r0, r6, #0
	bl sub_02073EB4
	cmp r0, #1
	bne _02073EF4
	ldr r0, _02073EFC ; =0x000122D8
	add r1, r5, r4
	strb r6, [r1, r0]
	pop {r4, r5, r6, pc}
_02073EF4:
	bl GF_AssertFail
	pop {r4, r5, r6, pc}
	nop
_02073EFC: .word 0x000122D8
	thumb_func_end sub_02073EC8

	thumb_func_start sub_02073F00
sub_02073F00: ; 0x02073F00
	push {r3, lr}
	add r3, r0, #0
	mov r0, #0
	mvn r0, r0
	cmp r1, r0
	bne _02073F12
	mov r0, #0x12
	lsl r0, r0, #0xc
	ldr r1, [r3, r0]
_02073F12:
	cmp r1, #0x12
	bhs _02073F28
	add r0, r2, #0
	ldr r2, _02073F30 ; =0x00012008
	add r3, r3, r2
	mov r2, #0x28
	mul r2, r1
	add r1, r3, r2
	bl CopyU16ArrayToString
	pop {r3, pc}
_02073F28:
	bl GF_AssertFail
	pop {r3, pc}
	nop
_02073F30: .word 0x00012008
	thumb_func_end sub_02073F00

	thumb_func_start sub_02073F34
sub_02073F34: ; 0x02073F34
	push {r3, lr}
	add r3, r0, #0
	mov r0, #0
	mvn r0, r0
	cmp r1, r0
	bne _02073F46
	mov r0, #0x12
	lsl r0, r0, #0xc
	ldr r1, [r3, r0]
_02073F46:
	cmp r1, #0x12
	bhs _02073F5C
	add r0, r2, #0
	ldr r2, _02073F60 ; =0x00012008
	add r3, r3, r2
	mov r2, #0x28
	mul r2, r1
	add r1, r3, r2
	mov r2, #0x14
	bl CopyStringToU16Array
_02073F5C:
	pop {r3, pc}
	nop
_02073F60: .word 0x00012008
	thumb_func_end sub_02073F34

	thumb_func_start sub_02073F64
sub_02073F64: ; 0x02073F64
	push {r3, r4, r5, r6, r7, lr}
	mov r2, #0
	mvn r2, r2
	cmp r1, r2
	bne _02073F74
	mov r1, #0x12
	lsl r1, r1, #0xc
	ldr r1, [r0, r1]
_02073F74:
	cmp r1, #0x12
	bhs _02073F9E
	mov r4, #0
	lsl r1, r1, #0xc
	add r6, r4, #0
	add r5, r0, r1
	mov r7, #0xac
_02073F82:
	add r0, r5, #0
	add r1, r7, #0
	mov r2, #0
	bl GetBoxMonData
	cmp r0, #0
	beq _02073F92
	add r4, r4, #1
_02073F92:
	add r6, r6, #1
	add r5, #0x88
	cmp r6, #0x1e
	blt _02073F82
	add r0, r4, #0
	pop {r3, r4, r5, r6, r7, pc}
_02073F9E:
	bl GF_AssertFail
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_02073F64

	thumb_func_start sub_02073FA8
sub_02073FA8: ; 0x02073FA8
	push {r3, r4, r5, r6, r7, lr}
	mov r2, #0
	mvn r2, r2
	cmp r1, r2
	bne _02073FB8
	mov r1, #0x12
	lsl r1, r1, #0xc
	ldr r1, [r0, r1]
_02073FB8:
	cmp r1, #0x12
	bhs _02073FF0
	mov r4, #0
	lsl r1, r1, #0xc
	add r6, r4, #0
	add r5, r0, r1
	mov r7, #0xac
_02073FC6:
	add r0, r5, #0
	add r1, r7, #0
	mov r2, #0
	bl GetBoxMonData
	cmp r0, #0
	beq _02073FE4
	add r0, r5, #0
	mov r1, #0x4c
	mov r2, #0
	bl GetBoxMonData
	cmp r0, #0
	bne _02073FE4
	add r4, r4, #1
_02073FE4:
	add r6, r6, #1
	add r5, #0x88
	cmp r6, #0x1e
	blt _02073FC6
	add r0, r4, #0
	pop {r3, r4, r5, r6, r7, pc}
_02073FF0:
	bl GF_AssertFail
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_02073FA8

	thumb_func_start sub_02073FF8
sub_02073FF8: ; 0x02073FF8
	push {r4, r5, r6, lr}
	mov r5, #0
	add r6, r0, #0
	add r4, r5, #0
_02074000:
	add r0, r6, #0
	add r1, r5, #0
	bl sub_02073FA8
	add r5, r5, #1
	add r4, r4, r0
	cmp r5, #0x12
	blo _02074000
	add r0, r4, #0
	pop {r4, r5, r6, pc}
	thumb_func_end sub_02073FF8

	thumb_func_start sub_02074014
sub_02074014: ; 0x02074014
	push {r3, r4, r5, r6, r7, lr}
	add r4, r1, #0
	add r5, r0, #0
	add r6, r2, #0
	add r7, r3, #0
	cmp r4, #0x12
	blo _0207402E
	mov r0, #0
	mvn r0, r0
	cmp r4, r0
	beq _0207402E
	bl GF_AssertFail
_0207402E:
	cmp r6, #0x1e
	blo _02074036
	bl GF_AssertFail
_02074036:
	mov r0, #0
	mvn r0, r0
	cmp r4, r0
	bne _02074044
	mov r0, #0x12
	lsl r0, r0, #0xc
	ldr r4, [r5, r0]
_02074044:
	lsl r0, r4, #0xc
	add r1, r5, r0
	mov r0, #0x88
	mul r0, r6
	add r0, r1, r0
	ldr r2, [sp, #0x18]
	add r1, r7, #0
	bl GetBoxMonData
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_02074014

	thumb_func_start PCStorage_GetMonByIndexPair
PCStorage_GetMonByIndexPair: ; 0x02074058
	push {r4, r5, r6, lr}
	add r4, r1, #0
	add r5, r0, #0
	add r6, r2, #0
	cmp r4, #0x12
	blo _02074070
	mov r0, #0
	mvn r0, r0
	cmp r4, r0
	beq _02074070
	bl GF_AssertFail
_02074070:
	cmp r6, #0x1e
	blo _02074078
	bl GF_AssertFail
_02074078:
	mov r0, #0
	mvn r0, r0
	cmp r4, r0
	bne _02074086
	mov r0, #0x12
	lsl r0, r0, #0xc
	ldr r4, [r5, r0]
_02074086:
	lsl r0, r4, #0xc
	add r1, r5, r0
	mov r0, #0x88
	mul r0, r6
	add r0, r1, r0
	pop {r4, r5, r6, pc}
	.balign 4, 0
	thumb_func_end PCStorage_GetMonByIndexPair

	thumb_func_start sub_02074094
sub_02074094: ; 0x02074094
	push {r3, r4, r5, lr}
	add r4, r1, #0
	add r5, r0, #0
	cmp r4, #8
	blo _020740A2
	bl GF_AssertFail
_020740A2:
	ldr r0, _020740B0 ; =0x000122EA
	mov r1, #1
	ldrb r2, [r5, r0]
	lsl r1, r4
	orr r1, r2
	strb r1, [r5, r0]
	pop {r3, r4, r5, pc}
	.balign 4, 0
_020740B0: .word 0x000122EA
	thumb_func_end sub_02074094

	thumb_func_start sub_020740B4
sub_020740B4: ; 0x020740B4
	push {r3, r4, r5, lr}
	add r4, r1, #0
	add r5, r0, #0
	cmp r4, #8
	blo _020740C2
	bl GF_AssertFail
_020740C2:
	ldr r0, _020740D4 ; =0x000122EA
	ldrb r2, [r5, r0]
	mov r0, #1
	add r1, r0, #0
	lsl r1, r4
	tst r1, r2
	bne _020740D2
	mov r0, #0
_020740D2:
	pop {r3, r4, r5, pc}
	.balign 4, 0
_020740D4: .word 0x000122EA
	thumb_func_end sub_020740B4

	thumb_func_start sub_020740D8
sub_020740D8: ; 0x020740D8
	push {r4, lr}
	cmp r1, #0x12
	blo _020740E4
	bl GF_AssertFail
	pop {r4, pc}
_020740E4:
	ldr r2, _020740F4 ; =0x00012004
	mov r3, #1
	ldr r4, [r0, r2]
	lsl r3, r1
	add r1, r4, #0
	orr r1, r3
	str r1, [r0, r2]
	pop {r4, pc}
	.balign 4, 0
_020740F4: .word 0x00012004
	thumb_func_end sub_020740D8

	thumb_func_start sub_020740F8
sub_020740F8: ; 0x020740F8
	ldr r2, _02074100 ; =0x0003FFFF
	ldr r1, _02074104 ; =0x00012004
	str r2, [r0, r1]
	bx lr
	.balign 4, 0
_02074100: .word 0x0003FFFF
_02074104: .word 0x00012004
	thumb_func_end sub_020740F8

	thumb_func_start sub_02074108
sub_02074108: ; 0x02074108
	ldr r1, _02074110 ; =0x00012004
	mov r2, #0
	str r2, [r0, r1]
	bx lr
	.balign 4, 0
_02074110: .word 0x00012004
	thumb_func_end sub_02074108

	thumb_func_start sub_02074114
sub_02074114: ; 0x02074114
	ldr r1, _0207411C ; =0x00012004
	ldr r0, [r0, r1]
	bx lr
	nop
_0207411C: .word 0x00012004
	thumb_func_end sub_02074114

	thumb_func_start sub_02074120
sub_02074120: ; 0x02074120
	mov r0, #1
	lsl r0, r0, #0xc
	bx lr
	.balign 4, 0
	thumb_func_end sub_02074120

	thumb_func_start sub_02074128
sub_02074128: ; 0x02074128
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #8
	str r0, [sp]
	mov r0, #0
	str r0, [sp, #4]
	add r7, r0, #0
_02074134:
	ldr r0, [sp, #4]
	mov r4, #0
	lsl r1, r0, #0xc
	ldr r0, [sp]
	add r6, r0, r1
_0207413E:
	mov r0, #0xff
	add r5, r6, r4
	lsl r0, r0, #4
	ldrb r0, [r5, r0]
	cmp r0, #0
	beq _0207414E
	bl GF_AssertFail
_0207414E:
	mov r0, #0xff
	lsl r0, r0, #4
	strb r7, [r5, r0]
	add r0, r4, #1
	lsl r0, r0, #0x18
	lsr r4, r0, #0x18
	cmp r4, #0x10
	blo _0207413E
	ldr r0, [sp, #4]
	add r0, r0, #1
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	str r0, [sp, #4]
	cmp r0, #0x12
	blo _02074134
	add sp, #8
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_02074128

	thumb_func_start sub_02074170
sub_02074170: ; 0x02074170
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	bl sub_0206DDD8
	add r7, r0, #0
	add r0, r5, #0
	mov r1, #5
	mov r2, #0
	bl GetBoxMonData
	add r4, r0, #0
	add r0, r5, #0
	mov r1, #0x4c
	mov r2, #0
	bl GetBoxMonData
	add r6, r0, #0
	add r0, r5, #0
	bl sub_020742CC
	add r2, r0, #0
	add r0, r4, #0
	add r1, r6, #0
	bl sub_020741BC
	add r4, r0, #0
	add r0, r5, #0
	add r1, r7, #0
	bl sub_0206DE00
	add r0, r4, #0
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_02074170

	thumb_func_start sub_020741B0
sub_020741B0: ; 0x020741B0
	push {r3, lr}
	bl sub_02070DB0
	bl sub_02074170
	pop {r3, pc}
	thumb_func_end sub_020741B0

	thumb_func_start sub_020741BC
sub_020741BC: ; 0x020741BC
	push {r4, lr}
	add r4, r0, #0
	cmp r1, #1
	bne _020741D2
	ldr r0, _02074268 ; =0x000001EA
	cmp r4, r0
	bne _020741CE
	add r0, #0xc
	pop {r4, pc}
_020741CE:
	add r0, #0xb
	pop {r4, pc}
_020741D2:
	lsl r0, r4, #0x10
	lsl r1, r2, #0x18
	lsr r0, r0, #0x10
	lsr r1, r1, #0x18
	bl sub_02070438
	cmp r0, #0
	beq _0207425A
	ldr r1, _0207426C ; =0x00000182
	cmp r4, r1
	bne _020741EE
	add r1, #0x74
	add r0, r0, r1
	pop {r4, pc}
_020741EE:
	cmp r4, #0xc9
	bne _020741F8
	add r1, #0x78
	add r0, r0, r1
	pop {r4, pc}
_020741F8:
	add r2, r1, #0
	add r2, #0x1a
	cmp r4, r2
	bne _02074206
	add r1, #0x93
	add r0, r0, r1
	pop {r4, pc}
_02074206:
	add r2, r1, #0
	add r2, #0x1b
	cmp r4, r2
	bne _02074214
	add r1, #0x95
	add r0, r0, r1
	pop {r4, pc}
_02074214:
	add r2, r1, #0
	add r2, #0x24
	cmp r4, r2
	bne _02074222
	add r1, #0x97
	add r0, r0, r1
	pop {r4, pc}
_02074222:
	add r2, r1, #0
	add r2, #0x25
	cmp r4, r2
	bne _02074230
	add r1, #0x98
	add r0, r0, r1
	pop {r4, pc}
_02074230:
	add r2, r1, #0
	add r2, #0x65
	cmp r4, r2
	bne _0207423E
	add r1, #0x99
	add r0, r0, r1
	pop {r4, pc}
_0207423E:
	add r2, r1, #0
	add r2, #0x6a
	cmp r4, r2
	bne _0207424C
	add r1, #0x9a
	add r0, r0, r1
	pop {r4, pc}
_0207424C:
	add r2, r1, #0
	add r2, #0x5d
	cmp r4, r2
	bne _0207425A
	add r1, #0x9b
	add r0, r0, r1
	pop {r4, pc}
_0207425A:
	ldr r0, _02074270 ; =0x000001ED
	cmp r4, r0
	bls _02074262
	mov r4, #0
_02074262:
	add r0, r4, #7
	pop {r4, pc}
	nop
_02074268: .word 0x000001EA
_0207426C: .word 0x00000182
_02074270: .word 0x000001ED
	thumb_func_end sub_020741BC

	thumb_func_start sub_02074274
sub_02074274: ; 0x02074274
	push {r3, r4, r5, lr}
	add r5, r0, #0
	add r4, r1, #0
	bne _020742B4
	ldr r0, _020742C0 ; =0x0000015F
	cmp r5, r0
	bne _02074298
	lsl r0, r5, #0x10
	lsl r1, r2, #0x18
	lsr r0, r0, #0x10
	lsr r1, r1, #0x18
	bl sub_02070438
	add r2, r0, #0
	beq _020742B4
	ldr r0, _020742C4 ; =0x00000222
	add r0, r2, r0
	pop {r3, r4, r5, pc}
_02074298:
	add r0, #0x46
	cmp r5, r0
	bne _020742B4
	lsl r0, r5, #0x10
	lsl r1, r2, #0x18
	lsr r0, r0, #0x10
	lsr r1, r1, #0x18
	bl sub_02070438
	add r2, r0, #0
	beq _020742B4
	ldr r0, _020742C8 ; =0x00000225
	add r0, r2, r0
	pop {r3, r4, r5, pc}
_020742B4:
	add r0, r5, #0
	add r1, r4, #0
	bl sub_020741BC
	pop {r3, r4, r5, pc}
	nop
_020742C0: .word 0x0000015F
_020742C4: .word 0x00000222
_020742C8: .word 0x00000225
	thumb_func_end sub_02074274

	thumb_func_start sub_020742CC
sub_020742CC: ; 0x020742CC
	push {r4, lr}
	mov r1, #0xae
	mov r2, #0
	add r4, r0, #0
	bl GetBoxMonData
	ldr r1, _02074360 ; =0x000001A6
	cmp r0, r1
	bhi _02074314
	bhs _0207434C
	add r2, r1, #0
	sub r2, #0x24
	cmp r0, r2
	bhi _020742F4
	sub r1, #0x24
	cmp r0, r1
	bhs _0207434C
	cmp r0, #0xc9
	beq _02074344
	b _0207435C
_020742F4:
	add r2, r1, #0
	sub r2, #9
	cmp r0, r2
	bhi _0207435C
	add r2, r1, #0
	sub r2, #0xa
	cmp r0, r2
	blo _0207435C
	add r2, r1, #0
	sub r2, #0xa
	cmp r0, r2
	beq _0207434C
	sub r1, #9
	cmp r0, r1
	beq _0207434C
	b _0207435C
_02074314:
	add r2, r1, #0
	add r2, #0x39
	cmp r0, r2
	bhi _0207432C
	add r2, r1, #0
	add r2, #0x39
	cmp r0, r2
	bhs _0207434C
	add r1, r1, #1
	cmp r0, r1
	beq _0207434C
	b _0207435C
_0207432C:
	add r2, r1, #0
	add r2, #0x41
	cmp r0, r2
	bhi _0207433C
	add r1, #0x41
	cmp r0, r1
	beq _0207434C
	b _0207435C
_0207433C:
	add r1, #0x46
	cmp r0, r1
	beq _0207434C
	b _0207435C
_02074344:
	add r0, r4, #0
	bl sub_02070DA0
	pop {r4, pc}
_0207434C:
	add r0, r4, #0
	mov r1, #0x70
	mov r2, #0
	bl GetBoxMonData
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	pop {r4, pc}
_0207435C:
	mov r0, #0
	pop {r4, pc}
	.balign 4, 0
_02074360: .word 0x000001A6
	thumb_func_end sub_020742CC

	thumb_func_start sub_02074364
sub_02074364: ; 0x02074364
	cmp r2, #1
	bne _02074376
	ldr r1, _02074400 ; =0x000001EA
	cmp r0, r1
	bne _02074372
	add r0, r1, #5
	b _020743F8
_02074372:
	add r0, r1, #4
	b _020743F8
_02074376:
	ldr r2, _02074404 ; =0x000001ED
	cmp r0, r2
	bls _02074380
	mov r0, #0
	b _020743F8
_02074380:
	cmp r1, #0
	beq _020743F8
	add r3, r2, #0
	sub r3, #0x6b
	cmp r0, r3
	bne _02074392
	add r0, r2, #2
	add r0, r1, r0
	b _020743F8
_02074392:
	cmp r0, #0xc9
	bne _0207439C
	add r0, r2, #5
	add r0, r1, r0
	b _020743F8
_0207439C:
	add r3, r2, #0
	sub r3, #0x51
	cmp r0, r3
	bne _020743AA
	add r2, #0x21
	add r0, r1, r2
	b _020743F8
_020743AA:
	add r3, r2, #0
	sub r3, #0x50
	cmp r0, r3
	bne _020743B8
	add r2, #0x23
	add r0, r1, r2
	b _020743F8
_020743B8:
	add r3, r2, #0
	sub r3, #0x47
	cmp r0, r3
	bne _020743C6
	add r2, #0x25
	add r0, r1, r2
	b _020743F8
_020743C6:
	add r3, r2, #0
	sub r3, #0x46
	cmp r0, r3
	bne _020743D4
	add r2, #0x26
	add r0, r1, r2
	b _020743F8
_020743D4:
	sub r3, r2, #6
	cmp r0, r3
	bne _020743E0
	add r2, #0x27
	add r0, r1, r2
	b _020743F8
_020743E0:
	sub r3, r2, #1
	cmp r0, r3
	bne _020743EC
	add r2, #0x28
	add r0, r1, r2
	b _020743F8
_020743EC:
	add r3, r2, #0
	sub r3, #0xe
	cmp r0, r3
	bne _020743F8
	add r2, #0x29
	add r0, r1, r2
_020743F8:
	ldr r1, _02074408 ; =0x020FFC10
	ldrb r0, [r1, r0]
	bx lr
	nop
_02074400: .word 0x000001EA
_02074404: .word 0x000001ED
_02074408: .word 0x020FFC10
	thumb_func_end sub_02074364

	thumb_func_start sub_0207440C
sub_0207440C: ; 0x0207440C
	push {r3, lr}
	cmp r2, #0
	bne _02074432
	ldr r3, _02074438 ; =0x0000015F
	cmp r0, r3
	bne _02074422
	cmp r1, #0
	beq _02074432
	ldr r0, _0207443C ; =0x020FFE2B
	ldrb r0, [r0, r1]
	pop {r3, pc}
_02074422:
	add r3, #0x46
	cmp r0, r3
	bne _02074432
	cmp r1, #0
	beq _02074432
	ldr r0, _02074440 ; =0x020FFE2E
	ldrb r0, [r0, r1]
	pop {r3, pc}
_02074432:
	bl sub_02074364
	pop {r3, pc}
	.balign 4, 0
_02074438: .word 0x0000015F
_0207443C: .word 0x020FFE2B
_02074440: .word 0x020FFE2E
	thumb_func_end sub_0207440C

	thumb_func_start sub_02074444
sub_02074444: ; 0x02074444
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	bl sub_0206DDD8
	add r4, r0, #0
	add r0, r5, #0
	bl sub_020742CC
	add r6, r0, #0
	add r0, r5, #0
	mov r1, #5
	mov r2, #0
	bl GetBoxMonData
	add r7, r0, #0
	add r0, r5, #0
	mov r1, #0x4c
	mov r2, #0
	bl GetBoxMonData
	str r0, [sp]
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0206DE00
	ldr r2, [sp]
	add r0, r7, #0
	add r1, r6, #0
	bl sub_02074364
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_02074444

	thumb_func_start sub_02074484
sub_02074484: ; 0x02074484
	push {r3, lr}
	bl sub_02070DB0
	bl sub_02074444
	pop {r3, pc}
	thumb_func_end sub_02074484

	thumb_func_start sub_02074490
sub_02074490: ; 0x02074490
	mov r0, #0
	bx lr
	thumb_func_end sub_02074490

	thumb_func_start sub_02074494
sub_02074494: ; 0x02074494
	mov r0, #2
	bx lr
	thumb_func_end sub_02074494

	thumb_func_start sub_02074498
sub_02074498: ; 0x02074498
	mov r0, #4
	bx lr
	thumb_func_end sub_02074498

	thumb_func_start sub_0207449C
sub_0207449C: ; 0x0207449C
	mov r0, #6
	bx lr
	thumb_func_end sub_0207449C

	thumb_func_start sub_020744A0
sub_020744A0: ; 0x020744A0
	mov r0, #1
	bx lr
	thumb_func_end sub_020744A0

	thumb_func_start sub_020744A4
sub_020744A4: ; 0x020744A4
	mov r0, #3
	bx lr
	thumb_func_end sub_020744A4

	thumb_func_start sub_020744A8
sub_020744A8: ; 0x020744A8
	mov r0, #5
	bx lr
	thumb_func_end sub_020744A8

	thumb_func_start sub_020744AC
sub_020744AC: ; 0x020744AC
	mov r0, #0x5b
	lsl r0, r0, #4
	bx lr
	.balign 4, 0
	thumb_func_end sub_020744AC

	thumb_func_start sub_020744B4
sub_020744B4: ; 0x020744B4
	mov r0, #0x59
	lsl r0, r0, #4
	bx lr
	.balign 4, 0
	thumb_func_end sub_020744B4

	thumb_func_start sub_020744BC
sub_020744BC: ; 0x020744BC
	push {r4, lr}
	mov r1, #0x5b
	lsl r1, r1, #4
	bl AllocFromHeap
	add r4, r0, #0
	bl sub_020744D0
	add r0, r4, #0
	pop {r4, pc}
	thumb_func_end sub_020744BC

	thumb_func_start sub_020744D0
sub_020744D0: ; 0x020744D0
	ldr r3, _020744D8 ; =sub_020744DC
	mov r1, #6
	bx r3
	nop
_020744D8: .word sub_020744DC
	thumb_func_end sub_020744D0

	thumb_func_start sub_020744DC
sub_020744DC: ; 0x020744DC
	push {r4, r5, r6, lr}
	add r5, r1, #0
	add r6, r0, #0
	cmp r5, #6
	ble _020744EA
	bl GF_AssertFail
_020744EA:
	mov r2, #0x5b
	add r0, r6, #0
	mov r1, #0
	lsl r2, r2, #4
	bl memset
	mov r4, #0
	str r4, [r6, #4]
	str r5, [r6]
	add r5, r6, #0
	add r5, #8
_02074500:
	add r0, r5, #0
	bl ZeroMonData
	add r4, r4, #1
	add r5, #0xec
	cmp r4, #6
	blt _02074500
	ldr r3, [r6]
	mov r0, #0x59
	lsl r0, r0, #4
	lsl r2, r3, #2
	add r0, r6, r0
	mov r1, #0
	add r2, r3, r2
	bl MIi_CpuFill8
	pop {r4, r5, r6, pc}
	.balign 4, 0
	thumb_func_end sub_020744DC

	thumb_func_start sub_02074524
sub_02074524: ; 0x02074524
	push {r3, r4, r5, lr}
	add r4, r0, #0
	add r2, r1, #0
	ldr r1, [r4, #4]
	ldr r0, [r4]
	cmp r1, r0
	blt _02074536
	mov r0, #0
	pop {r3, r4, r5, pc}
_02074536:
	mov r0, #0xec
	mul r0, r1
	add r5, r4, r0
	add r5, #8
	mov r3, #0x1d
_02074540:
	ldmia r2!, {r0, r1}
	stmia r5!, {r0, r1}
	sub r3, r3, #1
	bne _02074540
	ldr r0, [r2]
	str r0, [r5]
	mov r0, #0x59
	lsl r0, r0, #4
	ldr r1, [r4, #4]
	add r2, r4, r0
	lsl r0, r1, #2
	add r0, r1, r0
	add r0, r2, r0
	mov r1, #0
	mov r2, #5
	bl MIi_CpuFill8
	ldr r0, [r4, #4]
	add r0, r0, #1
	str r0, [r4, #4]
	mov r0, #1
	pop {r3, r4, r5, pc}
	thumb_func_end sub_02074524

	thumb_func_start sub_0207456C
sub_0207456C: ; 0x0207456C
	push {r3, r4, r5, r6, r7, lr}
	str r0, [sp]
	add r4, r1, #0
	bpl _02074578
	bl GF_AssertFail
_02074578:
	ldr r0, [sp]
	ldr r0, [r0, #4]
	cmp r4, r0
	blt _02074584
	bl GF_AssertFail
_02074584:
	ldr r0, [sp]
	ldr r0, [r0]
	cmp r4, r0
	blt _02074590
	bl GF_AssertFail
_02074590:
	ldr r0, [sp]
	ldr r0, [r0, #4]
	cmp r0, #0
	bgt _0207459C
	bl GF_AssertFail
_0207459C:
	ldr r0, [sp]
	ldr r0, [r0, #4]
	sub r0, r0, #1
	cmp r4, r0
	bge _02074606
	mov r0, #0xec
	add r1, r4, #0
	mul r1, r0
	ldr r0, [sp]
	add r5, r0, r1
	lsl r0, r4, #2
	add r1, r4, r0
	ldr r0, [sp]
	add r6, r0, r1
_020745B8:
	add r3, r5, #0
	add r2, r5, #0
	add r3, #0xf4
	add r2, #8
	mov r7, #0x1d
_020745C2:
	ldmia r3!, {r0, r1}
	stmia r2!, {r0, r1}
	sub r7, r7, #1
	bne _020745C2
	ldr r0, [r3]
	add r4, r4, #1
	str r0, [r2]
	ldr r0, _02074638 ; =0x00000595
	add r5, #0xec
	ldrb r2, [r6, r0]
	sub r1, r0, #5
	strb r2, [r6, r1]
	add r1, r0, #1
	ldrb r2, [r6, r1]
	sub r1, r0, #4
	strb r2, [r6, r1]
	add r1, r0, #2
	ldrb r2, [r6, r1]
	sub r1, r0, #3
	strb r2, [r6, r1]
	add r1, r0, #3
	ldrb r2, [r6, r1]
	sub r1, r0, #2
	strb r2, [r6, r1]
	add r1, r0, #4
	ldrb r1, [r6, r1]
	sub r0, r0, #1
	strb r1, [r6, r0]
	ldr r0, [sp]
	add r6, r6, #5
	ldr r0, [r0, #4]
	sub r0, r0, #1
	cmp r4, r0
	blt _020745B8
_02074606:
	ldr r1, [sp]
	mov r0, #0xec
	add r1, #8
	mul r0, r4
	add r0, r1, r0
	bl ZeroMonData
	mov r1, #0x59
	ldr r0, [sp]
	lsl r1, r1, #4
	add r1, r0, r1
	lsl r0, r4, #2
	add r0, r4, r0
	add r0, r1, r0
	mov r1, #0
	mov r2, #5
	bl MIi_CpuFill8
	ldr r0, [sp]
	ldr r0, [r0, #4]
	sub r1, r0, #1
	ldr r0, [sp]
	str r1, [r0, #4]
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_02074638: .word 0x00000595
	thumb_func_end sub_0207456C

	thumb_func_start sub_0207463C
sub_0207463C: ; 0x0207463C
	ldr r0, [r0]
	bx lr
	thumb_func_end sub_0207463C

	thumb_func_start GetPartyCount
GetPartyCount: ; 0x02074640
	ldr r0, [r0, #4]
	bx lr
	thumb_func_end GetPartyCount

	thumb_func_start GetPartyMonByIndex
GetPartyMonByIndex: ; 0x02074644
	push {r3, r4, r5, lr}
	add r5, r0, #0
	add r4, r1, #0
	bpl _02074650
	bl GF_AssertFail
_02074650:
	ldr r0, [r5, #4]
	cmp r4, r0
	blt _0207465A
	bl GF_AssertFail
_0207465A:
	ldr r0, [r5]
	cmp r4, r0
	blt _02074664
	bl GF_AssertFail
_02074664:
	mov r0, #0xec
	add r5, #8
	mul r0, r4
	add r0, r5, r0
	pop {r3, r4, r5, pc}
	.balign 4, 0
	thumb_func_end GetPartyMonByIndex

	thumb_func_start sub_02074670
sub_02074670: ; 0x02074670
	push {r4, r5, r6, lr}
	add r5, r0, #0
	add r4, r1, #0
	add r6, r2, #0
	bpl _0207467E
	bl GF_AssertFail
_0207467E:
	ldr r0, [r5, #4]
	cmp r6, r0
	blt _02074688
	bl GF_AssertFail
_02074688:
	ldr r0, [r5]
	cmp r6, r0
	blt _02074692
	bl GF_AssertFail
_02074692:
	lsl r0, r6, #2
	add r0, r6, r0
	mov r1, #0x59
	add r0, r5, r0
	lsl r1, r1, #4
	ldrb r2, [r0, r1]
	strb r2, [r4]
	add r2, r1, #1
	ldrb r2, [r0, r2]
	strb r2, [r4, #1]
	add r2, r1, #2
	ldrb r2, [r0, r2]
	strb r2, [r4, #2]
	add r2, r1, #3
	ldrb r2, [r0, r2]
	add r1, r1, #4
	strb r2, [r4, #3]
	ldrb r0, [r0, r1]
	strb r0, [r4, #4]
	pop {r4, r5, r6, pc}
	.balign 4, 0
	thumb_func_end sub_02074670

	thumb_func_start sub_020746BC
sub_020746BC: ; 0x020746BC
	push {r4, r5, r6, lr}
	add r5, r0, #0
	add r4, r1, #0
	add r6, r2, #0
	bpl _020746CA
	bl GF_AssertFail
_020746CA:
	ldr r0, [r5, #4]
	cmp r6, r0
	blt _020746D4
	bl GF_AssertFail
_020746D4:
	ldr r0, [r5]
	cmp r6, r0
	blt _020746DE
	bl GF_AssertFail
_020746DE:
	lsl r0, r6, #2
	add r0, r6, r0
	mov r1, #0x59
	ldrb r2, [r4]
	add r0, r5, r0
	lsl r1, r1, #4
	strb r2, [r0, r1]
	ldrb r3, [r4, #1]
	add r2, r1, #1
	strb r3, [r0, r2]
	ldrb r3, [r4, #2]
	add r2, r1, #2
	strb r3, [r0, r2]
	add r2, r1, #3
	ldrb r3, [r4, #3]
	add r1, r1, #4
	strb r3, [r0, r2]
	ldrb r2, [r4, #4]
	strb r2, [r0, r1]
	pop {r4, r5, r6, pc}
	.balign 4, 0
	thumb_func_end sub_020746BC

	thumb_func_start sub_02074708
sub_02074708: ; 0x02074708
	push {r3, r4, r5, lr}
	add r5, r0, #0
	add r4, r1, #0
	bpl _02074714
	bl GF_AssertFail
_02074714:
	ldr r0, [r5, #4]
	cmp r4, r0
	blt _0207471E
	bl GF_AssertFail
_0207471E:
	ldr r0, [r5]
	cmp r4, r0
	blt _02074728
	bl GF_AssertFail
_02074728:
	mov r0, #0x59
	lsl r0, r0, #4
	add r1, r5, r0
	lsl r0, r4, #2
	add r0, r4, r0
	add r0, r1, r0
	mov r1, #0
	mov r2, #5
	bl MIi_CpuFill8
	pop {r3, r4, r5, pc}
	.balign 4, 0
	thumb_func_end sub_02074708

	thumb_func_start sub_02074740
sub_02074740: ; 0x02074740
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #8
	add r4, r1, #0
	add r5, r0, #0
	add r6, r2, #0
	cmp r4, #0
	bge _02074752
	bl GF_AssertFail
_02074752:
	ldr r0, [r5, #4]
	cmp r4, r0
	blt _0207475C
	bl GF_AssertFail
_0207475C:
	ldr r0, [r5]
	cmp r4, r0
	blt _02074766
	bl GF_AssertFail
_02074766:
	add r1, r5, #0
	mov r0, #0xec
	add r1, #8
	mul r0, r4
	add r7, r1, r0
	add r0, r7, #0
	mov r1, #0xac
	mov r2, #0
	bl GetMonData
	str r0, [sp, #4]
	add r0, r6, #0
	mov r1, #0xac
	mov r2, #0
	bl GetMonData
	ldr r1, [sp, #4]
	mov r2, #0x1d
	sub r0, r1, r0
	str r0, [sp]
_0207478E:
	ldmia r6!, {r0, r1}
	stmia r7!, {r0, r1}
	sub r2, r2, #1
	bne _0207478E
	ldr r0, [r6]
	mov r2, #5
	str r0, [r7]
	mov r0, #0x59
	lsl r0, r0, #4
	add r1, r5, r0
	lsl r0, r4, #2
	add r0, r4, r0
	add r0, r1, r0
	mov r1, #0
	bl MIi_CpuFill8
	ldr r1, [r5, #4]
	ldr r0, [sp]
	add r0, r1, r0
	str r0, [r5, #4]
	add sp, #8
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_02074740

	thumb_func_start sub_020747BC
sub_020747BC: ; 0x020747BC
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x10
	add r5, r1, #0
	add r4, r0, #0
	add r6, r2, #0
	cmp r5, #0
	bge _020747CE
	bl GF_AssertFail
_020747CE:
	ldr r0, [r4, #4]
	cmp r5, r0
	blt _020747D8
	bl GF_AssertFail
_020747D8:
	ldr r0, [r4]
	cmp r5, r0
	blt _020747E2
	bl GF_AssertFail
_020747E2:
	cmp r6, #0
	bge _020747EA
	bl GF_AssertFail
_020747EA:
	ldr r0, [r4, #4]
	cmp r6, r0
	blt _020747F4
	bl GF_AssertFail
_020747F4:
	ldr r0, [r4]
	cmp r6, r0
	blt _020747FE
	bl GF_AssertFail
_020747FE:
	mov r0, #0
	mov r1, #0xec
	bl AllocFromHeap
	mov ip, r0
	add r1, r4, #0
	mov r0, #0xec
	add r1, #8
	mul r0, r5
	add r2, r1, r0
	str r2, [sp]
	mov r3, ip
	mov r7, #0x1d
_02074818:
	ldmia r2!, {r0, r1}
	stmia r3!, {r0, r1}
	sub r7, r7, #1
	bne _02074818
	ldr r0, [r2]
	add r1, r4, #0
	str r0, [r3]
	mov r0, #0xec
	add r1, #8
	mul r0, r6
	add r7, r1, r0
	mov r0, #0x1d
	add r3, r7, #0
	str r0, [sp, #4]
_02074834:
	ldr r2, [sp]
	ldmia r3!, {r0, r1}
	stmia r2!, {r0, r1}
	ldr r0, [sp, #4]
	str r2, [sp]
	sub r0, r0, #1
	str r0, [sp, #4]
	bne _02074834
	ldr r1, [r3]
	add r0, r2, #0
	str r1, [r0]
	mov r2, ip
	mov r3, #0x1d
_0207484E:
	ldmia r2!, {r0, r1}
	stmia r7!, {r0, r1}
	sub r3, r3, #1
	bne _0207484E
	ldr r0, [r2]
	str r0, [r7]
	mov r0, ip
	bl FreeToHeap
	mov r0, #0x59
	lsl r0, r0, #4
	add r3, r4, r0
	lsl r0, r5, #2
	add r2, r5, r0
	ldrb r0, [r3, r2]
	add r5, sp, #8
	add r4, r3, r2
	strb r0, [r5]
	ldrb r0, [r4, #1]
	strb r0, [r5, #1]
	ldrb r0, [r4, #2]
	strb r0, [r5, #2]
	ldrb r0, [r4, #3]
	strb r0, [r5, #3]
	ldrb r0, [r4, #4]
	strb r0, [r5, #4]
	lsl r0, r6, #2
	add r0, r6, r0
	ldrb r6, [r3, r0]
	add r1, r3, r0
	strb r6, [r3, r2]
	ldrb r2, [r1, #1]
	strb r2, [r4, #1]
	ldrb r2, [r1, #2]
	strb r2, [r4, #2]
	ldrb r2, [r1, #3]
	strb r2, [r4, #3]
	ldrb r2, [r1, #4]
	strb r2, [r4, #4]
	ldrb r2, [r5]
	strb r2, [r3, r0]
	ldrb r0, [r5, #1]
	strb r0, [r1, #1]
	ldrb r0, [r5, #2]
	strb r0, [r1, #2]
	ldrb r0, [r5, #3]
	strb r0, [r1, #3]
	ldrb r0, [r5, #4]
	strb r0, [r1, #4]
	mov r0, #0
	add sp, #0x10
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_020747BC

	thumb_func_start sub_020748B8
sub_020748B8: ; 0x020748B8
	push {r3, r4}
	add r4, r0, #0
	add r3, r1, #0
	mov r2, #0xb6
_020748C0:
	ldmia r4!, {r0, r1}
	stmia r3!, {r0, r1}
	sub r2, r2, #1
	bne _020748C0
	pop {r3, r4}
	bx lr
	thumb_func_end sub_020748B8

	thumb_func_start sub_020748CC
sub_020748CC: ; 0x020748CC
	push {r3, r4, r5, r6, r7, lr}
	add r6, r0, #0
	ldr r0, [r6, #4]
	add r7, r1, #0
	mov r4, #0
	cmp r0, #0
	ble _020748F6
	add r5, r6, #0
	add r5, #8
_020748DE:
	add r0, r5, #0
	mov r1, #0xae
	mov r2, #0
	bl GetMonData
	cmp r7, r0
	beq _020748F6
	ldr r0, [r6, #4]
	add r4, r4, #1
	add r5, #0xec
	cmp r4, r0
	blt _020748DE
_020748F6:
	ldr r0, [r6, #4]
	cmp r4, r0
	beq _02074900
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_02074900:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_020748CC

	thumb_func_start SavArray_PlayerParty_get
SavArray_PlayerParty_get: ; 0x02074904
	ldr r3, _0207490C ; =SavArray_get
	mov r1, #2
	bx r3
	nop
_0207490C: .word SavArray_get
	thumb_func_end SavArray_PlayerParty_get

	thumb_func_start sub_02074910
sub_02074910: ; 0x02074910
	push {r3, lr}
	bl Sav2_Pokedex_get
	bl sub_0207491C
	pop {r3, pc}
	thumb_func_end sub_02074910

	thumb_func_start sub_0207491C
sub_0207491C: ; 0x0207491C
	push {r3, lr}
	bl sub_0202A55C
	cmp r0, #1
	bne _0207492A
	mov r0, #1
	pop {r3, pc}
_0207492A:
	mov r0, #0
	pop {r3, pc}
	.balign 4, 0
	thumb_func_end sub_0207491C

	thumb_func_start sub_02074930
sub_02074930: ; 0x02074930
	push {r3, lr}
	cmp r0, #0
	bne _02074940
	lsl r0, r1, #0x10
	lsr r0, r0, #0x10
	bl sub_0207185C
	add r1, r0, #0
_02074940:
	add r0, r1, #0
	pop {r3, pc}
	thumb_func_end sub_02074930

	thumb_func_start sub_02074944
sub_02074944: ; 0x02074944
	push {r3, r4, r5, lr}
	add r5, r0, #0
	bl sub_02091308
	mov r1, #0
	add r2, r5, #0
	add r4, r0, #0
	bl sub_02091334
	add r0, r4, #0
	pop {r3, r4, r5, pc}
	.balign 4, 0
	thumb_func_end sub_02074944

	thumb_func_start sub_0207495C
sub_0207495C: ; 0x0207495C
	push {r4, lr}
	add r4, r0, #0
	bl sub_020913C4
	add r0, r4, #0
	bl sub_02091320
	pop {r4, pc}
	thumb_func_end sub_0207495C

	thumb_func_start sub_0207496C
sub_0207496C: ; 0x0207496C
	push {r3, r4, r5, r6, r7, lr}
	add r7, r1, #0
	add r4, r0, #0
	str r2, [sp]
	add r0, r7, #0
	mov r1, #5
	mov r2, #0
	bl GetMonData
	lsl r0, r0, #0x10
	lsr r6, r0, #0x10
	cmp r4, #0
	bne _0207498A
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_0207498A:
	add r0, r4, #0
	mov r1, #2
	bl sub_020290FC
	add r5, r0, #0
	add r0, r7, #0
	mov r1, #0xa1
	mov r2, #0
	bl GetMonData
	cmp r0, r5
	bls _020749A6
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_020749A6:
	add r0, r7, #0
	mov r1, #0x4c
	mov r2, #0
	bl GetMonData
	cmp r0, #0
	beq _020749B8
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_020749B8:
	add r0, r4, #0
	mov r1, #4
	bl sub_020290FC
	cmp r0, #0
	bne _020749D2
	add r0, r6, #0
	bl sub_0207128C
	cmp r6, r0
	beq _020749D2
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_020749D2:
	add r0, r4, #0
	mov r1, #5
	bl sub_020290FC
	add r5, r0, #0
	beq _020749FC
	ldr r0, [sp]
	add r1, r6, #0
	bl sub_02091410
	cmp r5, #0
	ble _020749F2
	cmp r0, r5
	bge _020749FC
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_020749F2:
	neg r1, r5
	cmp r0, r1
	ble _020749FC
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_020749FC:
	add r0, r4, #0
	mov r1, #7
	bl sub_020290FC
	mov r1, #0xa
	add r5, r0, #0
	mul r5, r1
	beq _02074A2A
	ldr r0, [sp]
	add r1, r6, #0
	bl sub_02091430
	cmp r5, #0
	ble _02074A20
	cmp r0, r5
	bge _02074A2A
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_02074A20:
	neg r1, r5
	cmp r0, r1
	ble _02074A2A
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_02074A2A:
	add r0, r4, #0
	mov r1, #0xd
	bl sub_020290FC
	mov r1, #2
	lsl r1, r1, #0xe
	cmp r0, r1
	bne _02074A4C
	add r0, r6, #0
	bl sub_02072740
	cmp r0, #1
	beq _02074A48
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_02074A48:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_02074A4C:
	add r0, r4, #0
	mov r1, #0xb
	bl sub_020290FC
	cmp r0, #0
	bne _02074A66
	add r0, r7, #0
	bl sub_02072760
	cmp r0, #0
	beq _02074A66
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_02074A66:
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_0207496C

	thumb_func_start sub_02074A6C
sub_02074A6C: ; 0x02074A6C
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x30
	str r0, [sp]
	mov r0, #0
	str r0, [sp, #0x14]
	str r0, [sp, #0x10]
	ldr r0, [sp]
	str r1, [sp, #4]
	str r2, [sp, #8]
	str r3, [sp, #0xc]
	cmp r0, #0
	bne _02074A8A
	ldr r0, [sp, #0x14]
	add sp, #0x30
	pop {r3, r4, r5, r6, r7, pc}
_02074A8A:
	ldr r1, [sp, #0x14]
	add r2, sp, #0x24
	add r3, sp, #0x18
	mov r0, #0
_02074A92:
	ldr r4, [sp, #0xc]
	strh r0, [r2]
	strh r0, [r3]
	ldrb r4, [r4, r1]
	cmp r4, #0
	beq _02074AA4
	ldr r4, [sp, #0x14]
	add r4, r4, #1
	str r4, [sp, #0x14]
_02074AA4:
	add r1, r1, #1
	add r2, r2, #2
	add r3, r3, #2
	cmp r1, #6
	blt _02074A92
	ldr r0, [sp]
	mov r1, #1
	bl sub_020290FC
	ldr r1, [sp, #0x14]
	cmp r1, r0
	beq _02074AC2
	add sp, #0x30
	mov r0, #4
	pop {r3, r4, r5, r6, r7, pc}
_02074AC2:
	mov r5, #0
	add r7, sp, #0x24
	add r6, sp, #0x18
_02074AC8:
	ldr r0, [sp, #0xc]
	ldrb r1, [r0, r5]
	cmp r1, #0
	beq _02074B16
	ldr r0, [sp, #4]
	sub r1, r1, #1
	bl GetPartyMonByIndex
	add r4, r0, #0
	ldr r0, [sp]
	ldr r2, [sp, #8]
	add r1, r4, #0
	bl sub_0207496C
	cmp r0, #0
	bne _02074AEE
	add sp, #0x30
	mov r0, #5
	pop {r3, r4, r5, r6, r7, pc}
_02074AEE:
	add r0, r4, #0
	mov r1, #5
	mov r2, #0
	bl GetMonData
	strh r0, [r7]
	add r0, r4, #0
	mov r1, #6
	mov r2, #0
	bl GetMonData
	strh r0, [r6]
	add r0, r4, #0
	mov r1, #0xa1
	mov r2, #0
	bl GetMonData
	ldr r1, [sp, #0x10]
	add r0, r1, r0
	str r0, [sp, #0x10]
_02074B16:
	add r5, r5, #1
	add r7, r7, #2
	add r6, r6, #2
	cmp r5, #6
	blt _02074AC8
	ldr r0, [sp]
	mov r1, #3
	bl sub_020290FC
	ldr r1, [sp, #0x10]
	cmp r1, r0
	ble _02074B38
	cmp r0, #0
	beq _02074B38
	add sp, #0x30
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_02074B38:
	ldr r0, [sp]
	mov r1, #0xd
	bl sub_020290FC
	mov r1, #2
	lsl r1, r1, #0xe
	cmp r0, r1
	bne _02074B7E
	mov r4, #0
	add r6, r4, #0
	add r5, sp, #0x24
	add r7, r4, #0
_02074B50:
	ldrh r0, [r5]
	cmp r0, #0
	beq _02074B6C
	add r1, r7, #0
	bl sub_020726F8
	cmp r0, #0
	beq _02074B6C
	ldrh r0, [r5]
	bl sub_02072740
	cmp r0, #0
	bne _02074B6C
	add r4, r4, #1
_02074B6C:
	add r6, r6, #1
	add r5, r5, #2
	cmp r6, #6
	blt _02074B50
	cmp r4, #2
	ble _02074B7E
	add sp, #0x30
	mov r0, #6
	pop {r3, r4, r5, r6, r7, pc}
_02074B7E:
	ldr r0, [sp]
	mov r1, #0xa
	bl sub_020290FC
	cmp r0, #0
	bne _02074BC2
	ldr r0, [sp, #0x14]
	cmp r0, #1
	ble _02074BC2
	add r4, sp, #0x24
	mov r0, #0
	add r3, r4, #0
_02074B96:
	add r1, r0, #1
	cmp r1, #6
	bge _02074BBA
	ldrh r6, [r4]
	lsl r2, r1, #1
	add r5, r3, r2
_02074BA2:
	ldrh r2, [r5]
	cmp r6, r2
	bne _02074BB2
	cmp r6, #0
	beq _02074BB2
	add sp, #0x30
	mov r0, #2
	pop {r3, r4, r5, r6, r7, pc}
_02074BB2:
	add r1, r1, #1
	add r5, r5, #2
	cmp r1, #6
	blt _02074BA2
_02074BBA:
	add r0, r0, #1
	add r4, r4, #2
	cmp r0, #5
	blt _02074B96
_02074BC2:
	ldr r0, [sp]
	mov r1, #0xd
	bl sub_020290FC
	mov r1, #2
	lsl r1, r1, #0xe
	cmp r0, r1
	bne _02074BF8
	mov r4, #0
	add r2, sp, #0x18
	add r3, sp, #0x24
_02074BD8:
	ldrh r1, [r2]
	cmp r1, #0xe1
	bne _02074BEE
	ldrh r0, [r3]
	cmp r0, #0
	beq _02074BEE
	cmp r1, #0
	beq _02074BEE
	add sp, #0x30
	mov r0, #8
	pop {r3, r4, r5, r6, r7, pc}
_02074BEE:
	add r4, r4, #1
	add r2, r2, #2
	add r3, r3, #2
	cmp r4, #6
	blt _02074BD8
_02074BF8:
	ldr r0, [sp]
	mov r1, #9
	bl sub_020290FC
	cmp r0, #0
	bne _02074C48
	ldr r0, [sp, #0x14]
	cmp r0, #1
	ble _02074C48
	add r2, sp, #0x18
	mov r5, #0
	add r7, sp, #0x24
	mov ip, r2
_02074C12:
	add r6, r5, #1
	cmp r6, #6
	bge _02074C3E
	lsl r1, r6, #1
	mov r0, ip
	add r3, r0, r1
	ldrh r4, [r2]
	ldrh r0, [r7]
_02074C22:
	ldrh r1, [r3]
	cmp r4, r1
	bne _02074C36
	cmp r0, #0
	beq _02074C36
	cmp r4, #0
	beq _02074C36
	add sp, #0x30
	mov r0, #3
	pop {r3, r4, r5, r6, r7, pc}
_02074C36:
	add r6, r6, #1
	add r3, r3, #2
	cmp r6, #6
	blt _02074C22
_02074C3E:
	add r5, r5, #1
	add r2, r2, #2
	add r7, r7, #2
	cmp r5, #5
	blt _02074C12
_02074C48:
	mov r0, #0
	add sp, #0x30
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_02074A6C

	thumb_func_start sub_02074C50
sub_02074C50: ; 0x02074C50
	push {r4, r5, r6, r7, lr}
	sub sp, #0x1c
	str r0, [sp, #0xc]
	ldr r0, [sp, #0x30]
	str r1, [sp, #0x10]
	lsl r0, r0, #1
	ldr r1, [sp, #0xc]
	str r0, [sp, #0x18]
	ldrh r0, [r1, r0]
	add r6, r2, #0
	str r3, [sp, #0x14]
	ldr r5, [sp, #0x38]
	ldr r7, [sp, #0x34]
	cmp r0, #0
	beq _02074C9A
	ldr r0, [sp, #0x18]
	ldrh r0, [r6, r0]
	cmp r0, #0
	bne _02074C9A
	ldr r1, [sp, #0x10]
	ldr r0, [sp, #0x18]
	ldrh r1, [r1, r0]
	add r0, r3, #0
	sub r0, r0, r1
	str r0, [sp, #0x14]
	bpl _02074C8A
	add sp, #0x1c
	mov r0, #0
	pop {r4, r5, r6, r7, pc}
_02074C8A:
	sub r7, r7, #1
	bne _02074C94
	add sp, #0x1c
	mov r0, #1
	pop {r4, r5, r6, r7, pc}
_02074C94:
	ldr r0, [sp, #0x18]
	mov r1, #1
	strh r1, [r6, r0]
_02074C9A:
	ldr r0, [sp, #0x30]
	add r4, r0, #1
	cmp r4, r5
	bge _02074CC4
_02074CA2:
	str r4, [sp]
	str r7, [sp, #4]
	ldr r0, [sp, #0xc]
	ldr r1, [sp, #0x10]
	ldr r3, [sp, #0x14]
	add r2, r6, #0
	str r5, [sp, #8]
	bl sub_02074C50
	cmp r0, #0
	beq _02074CBE
	add sp, #0x1c
	mov r0, #1
	pop {r4, r5, r6, r7, pc}
_02074CBE:
	add r4, r4, #1
	cmp r4, r5
	blt _02074CA2
_02074CC4:
	ldr r1, [sp, #0x18]
	mov r0, #0
	strh r0, [r6, r1]
	add sp, #0x1c
	pop {r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_02074C50

	thumb_func_start sub_02074CD0
sub_02074CD0: ; 0x02074CD0
	push {r4, r5, r6, r7, lr}
	sub sp, #0x54
	str r0, [sp, #0xc]
	add r0, r1, #0
	str r1, [sp, #0x10]
	str r2, [sp, #0x14]
	bl GetPartyCount
	str r0, [sp, #0x20]
	add r6, r0, #0
	add r0, sp, #0x30
	mov r1, #0
	mov r2, #0xc
	bl MIi_CpuFill8
	ldr r0, [sp, #0x20]
	mov r7, #0
	cmp r0, #0
	ble _02074D3A
	add r4, sp, #0x48
	add r5, sp, #0x3c
_02074CFA:
	ldr r0, [sp, #0x10]
	add r1, r7, #0
	bl GetPartyMonByIndex
	str r0, [sp, #0x24]
	mov r1, #5
	mov r2, #0
	bl GetMonData
	strh r0, [r4]
	ldr r0, [sp, #0x24]
	mov r1, #0xa1
	mov r2, #0
	bl GetMonData
	strh r0, [r5]
	ldr r0, [sp, #0xc]
	ldr r1, [sp, #0x24]
	ldr r2, [sp, #0x14]
	bl sub_0207496C
	cmp r0, #0
	bne _02074D2E
	mov r0, #0
	strh r0, [r4]
	sub r6, r6, #1
_02074D2E:
	ldr r0, [sp, #0x20]
	add r7, r7, #1
	add r4, r4, #2
	add r5, r5, #2
	cmp r7, r0
	blt _02074CFA
_02074D3A:
	ldr r0, [sp, #0xc]
	mov r1, #0xa
	bl sub_020290FC
	cmp r0, #0
	bne _02074DBA
	ldr r0, [sp, #0x20]
	cmp r0, #1
	ble _02074DBA
	mov r0, #0
	str r0, [sp, #0x18]
	ldr r0, [sp, #0x20]
	sub r0, r0, #1
	str r0, [sp, #0x28]
	cmp r0, #0
	ble _02074DBA
	add r0, sp, #0x3c
	add r3, sp, #0x48
	str r0, [sp, #0x1c]
	str r3, [sp, #0x2c]
	mov ip, r0
_02074D64:
	ldr r0, [sp, #0x18]
	add r2, r0, #1
	ldr r0, [sp, #0x20]
	cmp r2, r0
	bge _02074DA6
	ldr r1, [sp, #0x2c]
	lsl r0, r2, #1
	add r4, r1, r0
	mov r1, ip
	add r5, r1, r0
	ldr r0, [sp, #0x1c]
	ldrh r7, [r0]
_02074D7C:
	ldrh r1, [r3]
	ldrh r0, [r4]
	cmp r1, r0
	bne _02074D9A
	cmp r1, #0
	beq _02074D9A
	ldrh r0, [r5]
	cmp r7, r0
	bls _02074D94
	mov r0, #0
	strh r0, [r3]
	b _02074D98
_02074D94:
	mov r0, #0
	strh r0, [r4]
_02074D98:
	sub r6, r6, #1
_02074D9A:
	ldr r0, [sp, #0x20]
	add r2, r2, #1
	add r4, r4, #2
	add r5, r5, #2
	cmp r2, r0
	blt _02074D7C
_02074DA6:
	ldr r0, [sp, #0x1c]
	add r3, r3, #2
	add r0, r0, #2
	str r0, [sp, #0x1c]
	ldr r0, [sp, #0x18]
	add r1, r0, #1
	ldr r0, [sp, #0x28]
	str r1, [sp, #0x18]
	cmp r1, r0
	blt _02074D64
_02074DBA:
	ldr r0, [sp, #0xc]
	mov r1, #0xd
	bl sub_020290FC
	mov r1, #2
	lsl r1, r1, #0xe
	cmp r0, r1
	bne _02074DFE
	mov r7, #0
	add r5, r7, #0
	add r4, sp, #0x48
_02074DD0:
	ldrh r0, [r4]
	cmp r0, #0
	beq _02074DF6
	bl sub_02072740
	cmp r0, #0
	bne _02074DF6
	ldrh r0, [r4]
	mov r1, #0
	bl sub_020726F8
	cmp r0, #1
	bne _02074DF6
	add r7, r7, #1
	cmp r7, #2
	ble _02074DF6
	mov r0, #0
	strh r0, [r4]
	sub r6, r6, #1
_02074DF6:
	add r5, r5, #1
	add r4, r4, #2
	cmp r5, #6
	blt _02074DD0
_02074DFE:
	ldr r0, [sp, #0xc]
	mov r1, #1
	bl sub_020290FC
	add r7, r0, #0
	cmp r6, r7
	bge _02074E12
	add sp, #0x54
	mov r0, #4
	pop {r4, r5, r6, r7, pc}
_02074E12:
	ldr r0, [sp, #0xc]
	mov r1, #3
	bl sub_020290FC
	add r5, r0, #0
	bne _02074E24
	add sp, #0x54
	mov r0, #0
	pop {r4, r5, r6, r7, pc}
_02074E24:
	ldr r0, [sp, #0x20]
	mov r4, #0
	cmp r0, #0
	ble _02074E54
	add r6, sp, #0x48
_02074E2E:
	str r4, [sp]
	ldr r0, [sp, #0x20]
	str r7, [sp, #4]
	str r0, [sp, #8]
	add r0, r6, #0
	add r1, sp, #0x3c
	add r2, sp, #0x30
	add r3, r5, #0
	bl sub_02074C50
	cmp r0, #0
	beq _02074E4C
	add sp, #0x54
	mov r0, #0
	pop {r4, r5, r6, r7, pc}
_02074E4C:
	ldr r0, [sp, #0x20]
	add r4, r4, #1
	cmp r4, r0
	blt _02074E2E
_02074E54:
	mov r0, #1
	add sp, #0x54
	pop {r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_02074CD0

	thumb_func_start sub_02074E5C
sub_02074E5C: ; 0x02074E5C
	push {r4, r5, r6, lr}
	add r5, r0, #0
	bl ov12_0223B514
	mov r1, #0x10
	tst r0, r1
	bne _02074EB6
	mov r0, #5
	mov r1, #8
	bl AllocFromHeap
	add r4, r0, #0
	mov r0, #5
	mov r1, #8
	bl AllocFromHeap
	add r6, r0, #0
	ldr r0, _02074EB8 ; =0x020FFE30
	mov r1, #0xc
	add r2, r5, #0
	bl sub_0203410C
	str r5, [r4]
	mov r0, #0
	strb r0, [r4, #4]
	str r5, [r6]
	strb r0, [r6, #4]
	add r0, r5, #0
	add r1, r4, #4
	bl ov12_0223BBFC
	add r0, r5, #0
	add r1, r6, #4
	bl ov12_0223BC08
	ldr r0, _02074EBC ; =sub_02075434
	add r1, r4, #0
	mov r2, #0
	bl sub_0200E320
	ldr r0, _02074EC0 ; =sub_020754C0
	add r1, r6, #0
	mov r2, #0
	bl sub_0200E320
_02074EB6:
	pop {r4, r5, r6, pc}
	.balign 4, 0
_02074EB8: .word 0x020FFE30
_02074EBC: .word sub_02075434
_02074EC0: .word sub_020754C0
	thumb_func_end sub_02074E5C

	thumb_func_start sub_02074EC4
sub_02074EC4: ; 0x02074EC4
	ldr r3, _02074ED0 ; =sub_0203410C
	add r2, r0, #0
	ldr r0, _02074ED4 ; =0x020FFE30
	mov r1, #0xc
	bx r3
	nop
_02074ED0: .word sub_0203410C
_02074ED4: .word 0x020FFE30
	thumb_func_end sub_02074EC4

	thumb_func_start sub_02074ED8
sub_02074ED8: ; 0x02074ED8
	mov r0, #4
	bx lr
	thumb_func_end sub_02074ED8

	thumb_func_start sub_02074EDC
sub_02074EDC: ; 0x02074EDC
	ldr r3, _02074EE0 ; =PlayerProfile_sizeof
	bx r3
	.balign 4, 0
_02074EE0: .word PlayerProfile_sizeof
	thumb_func_end sub_02074EDC

	thumb_func_start sub_02074EE4
sub_02074EE4: ; 0x02074EE4
	ldr r3, _02074EE8 ; =sub_020744B4
	bx r3
	.balign 4, 0
_02074EE8: .word sub_020744B4
	thumb_func_end sub_02074EE4

	thumb_func_start sub_02074EEC
sub_02074EEC: ; 0x02074EEC
	mov r0, #0xfa
	lsl r0, r0, #2
	bx lr
	.balign 4, 0
	thumb_func_end sub_02074EEC

	thumb_func_start sub_02074EF4
sub_02074EF4: ; 0x02074EF4
	mov r0, #0x34
	bx lr
	thumb_func_end sub_02074EF4

	thumb_func_start sub_02074EF8
sub_02074EF8: ; 0x02074EF8
	ldr r3, [r1]
	mov r1, #0x80
	ldr r2, [r3]
	tst r1, r2
	beq _02074F0C
	lsl r0, r0, #3
	add r0, r3, r0
	add r0, #0xf8
	ldr r0, [r0]
	bx lr
_02074F0C:
	lsl r0, r0, #2
	add r0, r3, r0
	add r0, #0xf8
	ldr r0, [r0]
	bx lr
	.balign 4, 0
	thumb_func_end sub_02074EF8

	thumb_func_start sub_02074F18
sub_02074F18: ; 0x02074F18
	ldr r1, [r1]
	mov r2, #0x80
	ldr r3, [r1]
	tst r2, r3
	beq _02074F2E
	lsl r2, r0, #1
	mov r0, #0x34
	add r1, #0x28
	mul r0, r2
	add r0, r1, r0
	bx lr
_02074F2E:
	mov r2, #0x34
	add r1, #0x28
	mul r2, r0
	add r0, r1, r2
	bx lr
	thumb_func_end sub_02074F18

	thumb_func_start sub_02074F38
sub_02074F38: ; 0x02074F38
	ldr r3, [r1]
	mov r1, #0x80
	ldr r2, [r3]
	tst r1, r2
	beq _02074F4A
	lsl r0, r0, #3
	add r0, r3, r0
	ldr r0, [r0, #4]
	bx lr
_02074F4A:
	lsl r0, r0, #2
	add r0, r3, r0
	ldr r0, [r0, #4]
	bx lr
	.balign 4, 0
	thumb_func_end sub_02074F38

	thumb_func_start sub_02074F54
sub_02074F54: ; 0x02074F54
	ldr r3, [r1]
	mov r1, #0x80
	ldr r2, [r3]
	tst r2, r1
	beq _02074F68
	lsl r0, r0, #3
	add r0, r3, r0
	add r1, #0x98
	ldr r0, [r0, r1]
	bx lr
_02074F68:
	lsl r0, r0, #2
	add r0, r3, r0
	add r1, #0x98
	ldr r0, [r0, r1]
	bx lr
	.balign 4, 0
	thumb_func_end sub_02074F54

	thumb_func_start sub_02074F74
sub_02074F74: ; 0x02074F74
	ldr r0, [r1]
	add r0, #0x5c
	bx lr
	.balign 4, 0
	thumb_func_end sub_02074F74

	thumb_func_start sub_02074F7C
sub_02074F7C: ; 0x02074F7C
	ldr r0, [r1]
	add r0, #0xc4
	bx lr
	.balign 4, 0
	thumb_func_end sub_02074F7C

	thumb_func_start sub_02074F84
sub_02074F84: ; 0x02074F84
	ldr r0, [r1]
	ldr r0, [r0, #8]
	bx lr
	.balign 4, 0
	thumb_func_end sub_02074F84

	thumb_func_start sub_02074F8C
sub_02074F8C: ; 0x02074F8C
	ldr r0, [r1]
	ldr r0, [r0, #0x10]
	bx lr
	.balign 4, 0
	thumb_func_end sub_02074F8C

	thumb_func_start sub_02074F94
sub_02074F94: ; 0x02074F94
	lsl r0, r0, #2
	add r0, r1, r0
	ldr r0, [r0, #0x10]
	bx lr
	thumb_func_end sub_02074F94

	thumb_func_start sub_02074F9C
sub_02074F9C: ; 0x02074F9C
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	str r0, [sp]
	str r1, [sp, #4]
	mov r0, #5
	mov r1, #4
	str r2, [sp, #8]
	add r7, r3, #0
	bl AllocFromHeap
	add r6, r0, #0
	ldr r0, [sp]
	bl ov12_0223A940
	add r5, r0, #0
	ldr r0, [sp]
	bl ov12_0223A960
	add r4, r0, #0
	ldr r0, [sp]
	bl ov12_0223A96C
	mov ip, r0
	add r0, sp, #0x10
	ldrh r3, [r4]
	ldrb r0, [r0, #0x10]
	add r1, r3, #5
	add r2, r1, r0
	mov r1, #1
	lsl r1, r1, #0xc
	cmp r2, r1
	bls _02074FE4
	mov r1, ip
	strh r3, [r1]
	mov r1, #0
	strh r1, [r4]
_02074FE4:
	ldr r1, [sp, #4]
	mov r3, #0
	strb r1, [r6]
	ldr r1, [sp, #8]
	strb r1, [r6, #1]
	add r1, sp, #0x10
	ldrb r1, [r1, #0x10]
	strh r1, [r6, #2]
_02074FF4:
	ldrb r2, [r6, r3]
	ldrh r1, [r4]
	add r3, r3, #1
	strb r2, [r5, r1]
	ldrh r1, [r4]
	add r1, r1, #1
	strh r1, [r4]
	cmp r3, #4
	blo _02074FF4
	mov r3, #0
	cmp r0, #0
	ble _0207501E
_0207500C:
	ldrb r2, [r7, r3]
	ldrh r1, [r4]
	add r3, r3, #1
	strb r2, [r5, r1]
	ldrh r1, [r4]
	add r1, r1, #1
	strh r1, [r4]
	cmp r3, r0
	blt _0207500C
_0207501E:
	add r0, r6, #0
	bl FreeToHeap
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
	thumb_func_end sub_02074F9C

	thumb_func_start sub_02075028
sub_02075028: ; 0x02075028
	push {r3, r4, r5, r6, r7, lr}
	str r3, [sp]
	add r0, r3, #0
	add r5, r1, #0
	add r6, r2, #0
	bl ov12_0223A948
	add r7, r0, #0
	ldr r0, [sp]
	bl ov12_0223A984
	add r4, r0, #0
	ldr r0, [sp]
	bl ov12_0223A990
	ldrh r1, [r4]
	add r2, r1, r5
	add r3, r2, #1
	mov r2, #1
	lsl r2, r2, #0xc
	cmp r3, r2
	ble _0207505A
	strh r1, [r0]
	mov r0, #0
	strh r0, [r4]
_0207505A:
	mov r0, #0
	cmp r5, #0
	ble _02075072
_02075060:
	ldrb r2, [r6, r0]
	ldrh r1, [r4]
	add r0, r0, #1
	strb r2, [r7, r1]
	ldrh r1, [r4]
	add r1, r1, #1
	strh r1, [r4]
	cmp r0, r5
	blt _02075060
_02075072:
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_02075028

	thumb_func_start sub_02075074
sub_02075074: ; 0x02075074
	push {r0, r1, r2, r3}
	push {r3, lr}
	bl sub_02037190
	mov r1, #0x42
	lsl r1, r1, #2
	cmp r0, r1
	beq _0207508E
	mov r0, #0
	pop {r3}
	pop {r3}
	add sp, #0x10
	bx r3
_0207508E:
	mov r0, #0x33
	bl sub_02037B38
	cmp r0, #0
	bne _020750A2
	mov r0, #0
	pop {r3}
	pop {r3}
	add sp, #0x10
	bx r3
_020750A2:
	mov r0, #0x18
	add r1, sp, #0xc
	mov r2, #4
	bl sub_02037030
	pop {r3}
	pop {r3}
	add sp, #0x10
	bx r3
	thumb_func_end sub_02075074

	thumb_func_start sub_020750B4
sub_020750B4: ; 0x020750B4
	push {r3, r4, r5, lr}
	add r4, r3, #0
	ldr r5, [r2]
	ldr r2, [r4]
	lsl r1, r0, #2
	add r3, r2, r1
	mov r2, #0x5f
	lsl r2, r2, #2
	str r5, [r3, r2]
	ldr r3, [r4]
	add r1, r3, r1
	ldr r1, [r1, r2]
	bl sub_0203049C
	ldr r0, _020750DC ; =0x00001020
	ldrb r1, [r4, r0]
	add r1, r1, #1
	strb r1, [r4, r0]
	pop {r3, r4, r5, pc}
	nop
_020750DC: .word 0x00001020
	thumb_func_end sub_020750B4

	thumb_func_start sub_020750E0
sub_020750E0: ; 0x020750E0
	push {r4, lr}
	add r4, r0, #0
	bl sub_02037190
	mov r1, #0x42
	lsl r1, r1, #2
	cmp r0, r1
	beq _020750F4
	mov r0, #0
	pop {r4, pc}
_020750F4:
	ldr r0, [r4]
	add r4, #0x20
	add r0, #0xf8
	ldr r0, [r0]
	add r1, r4, #0
	bl PlayerProfile_Copy
	mov r0, #1
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_020750E0

	thumb_func_start sub_02075108
sub_02075108: ; 0x02075108
	push {r4, lr}
	add r4, r0, #0
	bl sub_02037190
	mov r1, #0x42
	lsl r1, r1, #2
	cmp r0, r1
	beq _0207511C
	mov r0, #0
	pop {r4, pc}
_0207511C:
	mov r0, #0x34
	bl sub_02037B38
	cmp r0, #0
	bne _0207512A
	mov r0, #0
	pop {r4, pc}
_0207512A:
	bl PlayerProfile_sizeof
	add r4, #0x20
	add r2, r0, #0
	mov r0, #0x19
	add r1, r4, #0
	bl sub_02036FD8
	pop {r4, pc}
	thumb_func_end sub_02075108

	thumb_func_start sub_0207513C
sub_0207513C: ; 0x0207513C
	ldr r0, _02075148 ; =0x00001020
	ldrb r1, [r3, r0]
	add r1, r1, #1
	strb r1, [r3, r0]
	bx lr
	nop
_02075148: .word 0x00001020
	thumb_func_end sub_0207513C

	thumb_func_start sub_0207514C
sub_0207514C: ; 0x0207514C
	push {r4, lr}
	add r4, r0, #0
	bl sub_02037190
	mov r1, #0x42
	lsl r1, r1, #2
	cmp r0, r1
	beq _02075160
	mov r0, #0
	pop {r4, pc}
_02075160:
	ldr r3, [r4]
	add r4, #0x20
	add r3, #0x28
	mov r2, #6
_02075168:
	ldmia r3!, {r0, r1}
	stmia r4!, {r0, r1}
	sub r2, r2, #1
	bne _02075168
	ldr r0, [r3]
	str r0, [r4]
	mov r0, #1
	pop {r4, pc}
	thumb_func_end sub_0207514C

	thumb_func_start sub_02075178
sub_02075178: ; 0x02075178
	push {r4, lr}
	add r4, r0, #0
	bl sub_02037190
	mov r1, #0x42
	lsl r1, r1, #2
	cmp r0, r1
	beq _0207518C
	mov r0, #0
	pop {r4, pc}
_0207518C:
	mov r0, #0x35
	bl sub_02037B38
	cmp r0, #0
	bne _0207519A
	mov r0, #0
	pop {r4, pc}
_0207519A:
	add r4, #0x20
	mov r0, #0x1a
	add r1, r4, #0
	mov r2, #0x34
	bl sub_02036FD8
	pop {r4, pc}
	thumb_func_end sub_02075178

	thumb_func_start sub_020751A8
sub_020751A8: ; 0x020751A8
	ldr r0, _020751B4 ; =0x00001020
	ldrb r1, [r3, r0]
	add r1, r1, #1
	strb r1, [r3, r0]
	bx lr
	nop
_020751B4: .word 0x00001020
	thumb_func_end sub_020751A8

	thumb_func_start sub_020751B8
sub_020751B8: ; 0x020751B8
	push {r4, lr}
	add r4, r0, #0
	bl sub_02037190
	mov r1, #0x42
	lsl r1, r1, #2
	cmp r0, r1
	beq _020751CC
	mov r0, #0
	pop {r4, pc}
_020751CC:
	ldr r0, [r4]
	add r4, #0x20
	ldr r0, [r0, #4]
	add r1, r4, #0
	bl sub_020748B8
	mov r0, #1
	pop {r4, pc}
	thumb_func_end sub_020751B8

	thumb_func_start sub_020751DC
sub_020751DC: ; 0x020751DC
	push {r4, lr}
	add r4, r0, #0
	bl sub_02037190
	mov r1, #0x42
	lsl r1, r1, #2
	cmp r0, r1
	beq _020751F0
	mov r0, #0
	pop {r4, pc}
_020751F0:
	mov r0, #0x36
	bl sub_02037B38
	cmp r0, #0
	bne _020751FE
	mov r0, #0
	pop {r4, pc}
_020751FE:
	bl sub_020744B4
	add r4, #0x20
	add r2, r0, #0
	mov r0, #0x1b
	add r1, r4, #0
	bl sub_02036FD8
	pop {r4, pc}
	thumb_func_end sub_020751DC

	thumb_func_start sub_02075210
sub_02075210: ; 0x02075210
	ldr r0, _0207521C ; =0x00001020
	ldrb r1, [r3, r0]
	add r1, r1, #1
	strb r1, [r3, r0]
	bx lr
	nop
_0207521C: .word 0x00001020
	thumb_func_end sub_02075210

	thumb_func_start sub_02075220
sub_02075220: ; 0x02075220
	push {r4, lr}
	add r4, r0, #0
	bl sub_02037190
	mov r1, #0x42
	lsl r1, r1, #2
	cmp r0, r1
	beq _02075234
	mov r0, #0
	pop {r4, pc}
_02075234:
	ldr r2, [r4]
	add r1, #0x10
	add r0, r4, #0
	ldr r1, [r2, r1]
	add r0, #0x20
	bl sub_0202CF08
	mov r0, #1
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_02075220

	thumb_func_start sub_02075248
sub_02075248: ; 0x02075248
	push {r4, lr}
	add r4, r0, #0
	bl sub_02037190
	mov r1, #0x42
	lsl r1, r1, #2
	cmp r0, r1
	beq _0207525C
	mov r0, #0
	pop {r4, pc}
_0207525C:
	mov r0, #0x37
	bl sub_02037B38
	cmp r0, #0
	bne _0207526A
	mov r0, #0
	pop {r4, pc}
_0207526A:
	add r4, #0x20
	mov r2, #0xfa
	mov r0, #0x1c
	add r1, r4, #0
	lsl r2, r2, #2
	bl sub_02036FD8
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_02075248

	thumb_func_start sub_0207527C
sub_0207527C: ; 0x0207527C
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	bl sub_02037190
	mov r1, #0x42
	lsl r1, r1, #2
	cmp r0, r1
	beq _02075290
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_02075290:
	ldr r4, [r5]
	mov r0, #0x80
	ldr r1, [r4]
	tst r0, r1
	beq _020752A2
	bl sub_0203769C
	lsl r0, r0, #3
	b _020752A8
_020752A2:
	bl sub_0203769C
	lsl r0, r0, #2
_020752A8:
	add r0, r4, r0
	mov r1, #0x52
	add r0, #0xf8
	lsl r1, r1, #2
	add r2, r5, #0
	ldr r0, [r0]
	ldr r1, [r4, r1]
	add r2, #0x20
	bl sub_02075554
	mov r4, #0
	mov r6, #5
	mov r7, #0x88
_020752C2:
	add r0, r6, #0
	add r1, r7, #0
	bl AllocFromHeap
	str r0, [r5, #0x10]
	add r4, r4, #1
	add r5, r5, #4
	cmp r4, #4
	blt _020752C2
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_0207527C

	thumb_func_start sub_020752D8
sub_020752D8: ; 0x020752D8
	push {r4, lr}
	add r4, r0, #0
	bl sub_02037190
	mov r1, #0x42
	lsl r1, r1, #2
	cmp r0, r1
	beq _020752EC
	mov r0, #0
	pop {r4, pc}
_020752EC:
	mov r0, #0x38
	bl sub_02037B38
	cmp r0, #0
	bne _020752FA
	mov r0, #0
	pop {r4, pc}
_020752FA:
	add r4, #0x20
	mov r2, #0xfa
	mov r0, #0x21
	add r1, r4, #0
	lsl r2, r2, #2
	bl sub_02036FD8
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_020752D8

	thumb_func_start sub_0207530C
sub_0207530C: ; 0x0207530C
	ldr r0, _02075318 ; =0x00001020
	ldrb r1, [r3, r0]
	add r1, r1, #1
	strb r1, [r3, r0]
	bx lr
	nop
_02075318: .word 0x00001020
	thumb_func_end sub_0207530C

	thumb_func_start sub_0207531C
sub_0207531C: ; 0x0207531C
	push {r3, r4, r5, lr}
	add r5, r0, #0
	add r4, r1, #0
	bl sub_02037190
	mov r1, #0x42
	lsl r1, r1, #2
	cmp r0, r1
	beq _02075332
	mov r0, #0
	pop {r3, r4, r5, pc}
_02075332:
	ldr r1, [r5]
	mov r0, #0x34
	mul r0, r4
	add r3, r1, r0
	add r3, #0x28
	add r5, #0x20
	mov r2, #6
_02075340:
	ldmia r3!, {r0, r1}
	stmia r5!, {r0, r1}
	sub r2, r2, #1
	bne _02075340
	ldr r0, [r3]
	str r0, [r5]
	mov r0, #1
	pop {r3, r4, r5, pc}
	thumb_func_end sub_0207531C

	thumb_func_start sub_02075350
sub_02075350: ; 0x02075350
	push {r4, r5, r6, lr}
	add r5, r0, #0
	add r4, r1, #0
	add r6, r2, #0
	bl sub_02037190
	mov r1, #0x42
	lsl r1, r1, #2
	cmp r0, r1
	beq _02075368
	mov r0, #0
	pop {r4, r5, r6, pc}
_02075368:
	lsl r0, r6, #0x18
	lsr r0, r0, #0x18
	bl sub_02037B38
	cmp r0, #0
	bne _02075378
	mov r0, #0
	pop {r4, r5, r6, pc}
_02075378:
	cmp r4, #1
	bne _0207538A
	add r5, #0x20
	mov r0, #0x1d
	add r1, r5, #0
	mov r2, #0x34
	bl sub_02036FD8
	pop {r4, r5, r6, pc}
_0207538A:
	add r5, #0x20
	mov r0, #0x1e
	add r1, r5, #0
	mov r2, #0x34
	bl sub_02036FD8
	pop {r4, r5, r6, pc}
	thumb_func_end sub_02075350

	thumb_func_start sub_02075398
sub_02075398: ; 0x02075398
	ldr r0, _020753A4 ; =0x00001020
	ldrb r1, [r3, r0]
	add r1, r1, #1
	strb r1, [r3, r0]
	bx lr
	nop
_020753A4: .word 0x00001020
	thumb_func_end sub_02075398

	thumb_func_start sub_020753A8
sub_020753A8: ; 0x020753A8
	push {r3, r4, r5, lr}
	add r5, r0, #0
	add r4, r1, #0
	bl sub_02037190
	mov r1, #0x42
	lsl r1, r1, #2
	cmp r0, r1
	beq _020753BE
	mov r0, #0
	pop {r3, r4, r5, pc}
_020753BE:
	ldr r1, [r5]
	lsl r0, r4, #2
	add r0, r1, r0
	add r5, #0x20
	ldr r0, [r0, #4]
	add r1, r5, #0
	bl sub_020748B8
	mov r0, #1
	pop {r3, r4, r5, pc}
	.balign 4, 0
	thumb_func_end sub_020753A8

	thumb_func_start sub_020753D4
sub_020753D4: ; 0x020753D4
	push {r4, r5, r6, lr}
	add r5, r0, #0
	add r4, r1, #0
	add r6, r2, #0
	bl sub_02037190
	mov r1, #0x42
	lsl r1, r1, #2
	cmp r0, r1
	beq _020753EC
	mov r0, #0
	pop {r4, r5, r6, pc}
_020753EC:
	lsl r0, r6, #0x18
	lsr r0, r0, #0x18
	bl sub_02037B38
	cmp r0, #0
	bne _020753FC
	mov r0, #0
	pop {r4, r5, r6, pc}
_020753FC:
	cmp r4, #1
	bne _02075412
	bl sub_020744B4
	add r5, #0x20
	add r2, r0, #0
	mov r0, #0x1f
	add r1, r5, #0
	bl sub_02036FD8
	pop {r4, r5, r6, pc}
_02075412:
	bl sub_020744B4
	add r5, #0x20
	add r2, r0, #0
	mov r0, #0x20
	add r1, r5, #0
	bl sub_02036FD8
	pop {r4, r5, r6, pc}
	thumb_func_end sub_020753D4

	thumb_func_start sub_02075424
sub_02075424: ; 0x02075424
	ldr r0, _02075430 ; =0x00001020
	ldrb r1, [r3, r0]
	add r1, r1, #1
	strb r1, [r3, r0]
	bx lr
	nop
_02075430: .word 0x00001020
	thumb_func_end sub_02075424

	thumb_func_start sub_02075434
sub_02075434: ; 0x02075434
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #8
	add r5, r1, #0
	str r0, [sp]
	ldr r0, [r5]
	bl ov12_0223A940
	add r6, r0, #0
	ldr r0, [r5]
	bl ov12_0223A954
	add r4, r0, #0
	ldr r0, [r5]
	bl ov12_0223A960
	str r0, [sp, #4]
	ldr r0, [r5]
	bl ov12_0223A96C
	add r7, r0, #0
	ldrb r0, [r5, #4]
	cmp r0, #0
	beq _02075466
	cmp r0, #0xff
	b _020754B0
_02075466:
	bl sub_02037190
	mov r1, #0x42
	lsl r1, r1, #2
	cmp r0, r1
	bne _020754BC
	ldr r0, [sp, #4]
	ldrh r1, [r4]
	ldrh r0, [r0]
	cmp r1, r0
	beq _020754BC
	ldrh r0, [r7]
	cmp r1, r0
	bne _02075488
	mov r0, #0
	strh r0, [r4]
	strh r0, [r7]
_02075488:
	ldrh r1, [r4]
	add r0, r1, #2
	ldrb r2, [r6, r0]
	add r0, r1, #3
	ldrb r0, [r6, r0]
	add r1, r6, r1
	lsl r0, r0, #8
	orr r0, r2
	add r5, r0, #4
	mov r0, #0x17
	add r2, r5, #0
	bl sub_02037030
	cmp r0, #1
	bne _020754BC
	ldrh r0, [r4]
	add sp, #8
	add r0, r0, r5
	strh r0, [r4]
	pop {r3, r4, r5, r6, r7, pc}
_020754B0:
	add r0, r5, #0
	bl FreeToHeap
	ldr r0, [sp]
	bl sub_0200E390
_020754BC:
	add sp, #8
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_02075434

	thumb_func_start sub_020754C0
sub_020754C0: ; 0x020754C0
	push {r3, r4, r5, r6, r7, lr}
	add r5, r1, #0
	str r0, [sp]
	ldr r0, [r5]
	bl ov12_0223A948
	add r6, r0, #0
	ldr r0, [r5]
	bl ov12_0223A978
	add r4, r0, #0
	ldr r0, [r5]
	bl ov12_0223A984
	add r7, r0, #0
	ldr r0, [r5]
	bl ov12_0223A990
	ldrb r1, [r5, #4]
	cmp r1, #0
	beq _020754EE
	cmp r1, #0xff
	b _02075526
_020754EE:
	ldrh r1, [r4]
	ldrh r2, [r7]
	cmp r1, r2
	beq _02075532
	ldrh r2, [r0]
	cmp r1, r2
	bne _02075502
	mov r1, #0
	strh r1, [r4]
	strh r1, [r0]
_02075502:
	ldrh r1, [r4]
	ldr r0, [r5]
	add r1, r6, r1
	bl ov12_02264334
	cmp r0, #1
	bne _02075532
	ldrh r0, [r4]
	add r1, r0, #2
	ldrb r2, [r6, r1]
	add r1, r0, #3
	ldrb r1, [r6, r1]
	lsl r1, r1, #8
	orr r1, r2
	add r1, r1, #4
	add r0, r0, r1
	strh r0, [r4]
	pop {r3, r4, r5, r6, r7, pc}
_02075526:
	add r0, r5, #0
	bl FreeToHeap
	ldr r0, [sp]
	bl sub_0200E390
_02075532:
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_020754C0

	thumb_func_start sub_02075534
sub_02075534: ; 0x02075534
	push {r4, lr}
	add r4, r3, #0
	add r0, r4, #0
	mov r1, #0xff
	bl ov12_0223BC14
	add r0, r4, #0
	mov r1, #0xff
	bl ov12_0223BC20
	add r0, r4, #0
	mov r1, #1
	bl ov12_0223BC2C
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_02075534

	thumb_func_start sub_02075554
sub_02075554: ; 0x02075554
	push {r4, r5, r6, lr}
	add r4, r2, #0
	add r6, r0, #0
	add r5, r1, #0
	bl PlayerProfile_GetNamePtr
	add r1, r0, #0
	add r0, r4, #0
	bl CopyU16StringArray
	add r0, r6, #0
	bl PlayerProfile_GetTrainerID
	str r0, [r4, #0x10]
	add r0, r6, #0
	bl PlayerProfile_GetLanguage
	strb r0, [r4, #0x14]
	add r0, r6, #0
	bl PlayerProfile_GetVersion
	strb r0, [r4, #0x15]
	add r0, r6, #0
	bl PlayerProfile_GetTrainerGender
	strb r0, [r4, #0x16]
	mov r0, #0
	add r1, r4, #0
_0207558C:
	ldr r2, [r5, #0x10]
	str r2, [r1, #0x18]
	ldrb r3, [r5, #0x15]
	add r2, r4, r0
	add r2, #0x58
	strb r3, [r2]
	add r2, r4, r0
	ldrb r3, [r5, #0x14]
	add r2, #0x68
	add r1, r1, #4
	strb r3, [r2]
	add r2, r4, r0
	ldrb r3, [r5, #0x16]
	add r2, #0x78
	add r0, r0, #1
	add r5, #0x88
	strb r3, [r2]
	cmp r0, #0x10
	blt _0207558C
	pop {r4, r5, r6, pc}
	thumb_func_end sub_02075554

	thumb_func_start sub_020755B4
sub_020755B4: ; 0x020755B4
	push {r4, r5, r6, lr}
	add r5, r0, #0
	add r6, r2, #0
	add r4, r3, #0
	bl sub_0203769C
	cmp r5, r0
	beq _020755D6
	mov r0, #0x52
	ldr r1, [r4]
	lsl r0, r0, #2
	ldr r0, [r1, r0]
	add r1, r6, #0
	mov r2, #1
	mov r3, #5
	bl sub_0202AF28
_020755D6:
	ldr r0, _020755E0 ; =0x00001020
	ldrb r1, [r4, r0]
	add r1, r1, #1
	strb r1, [r4, r0]
	pop {r4, r5, r6, pc}
	.balign 4, 0
_020755E0: .word 0x00001020
	thumb_func_end sub_020755B4

	thumb_func_start sub_020755E4
sub_020755E4: ; 0x020755E4
	mov r0, #0x88
	bx lr
	thumb_func_end sub_020755E4

	thumb_func_start sub_020755E8
sub_020755E8: ; 0x020755E8
	push {r4, r5, r6, r7, lr}
	sub sp, #0x34
	ldr r4, _0207562C ; =0x020FFF5C
	add r6, r2, #0
	add r5, r3, #0
	add r7, r0, #0
	mov ip, r1
	add r3, sp, #0
	mov r2, #6
_020755FA:
	ldmia r4!, {r0, r1}
	stmia r3!, {r0, r1}
	sub r2, r2, #1
	bne _020755FA
	ldr r0, [r4]
	add r1, sp, #0
	str r0, [r3]
	strh r6, [r1]
	strh r5, [r1, #2]
	add r0, sp, #0x38
	ldrb r0, [r0, #0x10]
	add r2, sp, #0
	strh r0, [r1, #6]
	add r0, r7, #0
	mov r1, ip
	bl sub_0200D734
	mov r1, #1
	add r4, r0, #0
	bl sub_0200DC78
	add r0, r4, #0
	add sp, #0x34
	pop {r4, r5, r6, r7, pc}
	nop
_0207562C: .word 0x020FFF5C
	thumb_func_end sub_020755E8

	thumb_func_start sub_02075630
sub_02075630: ; 0x02075630
	push {r4, r5, r6, r7, lr}
	sub sp, #0x5c
	add r5, r0, #0
	ldr r0, [r5, #0x5c]
	bl sub_0200CF18
	add r1, r5, #0
	add r1, #0xac
	str r0, [r1]
	add r0, r5, #0
	add r0, #0xac
	ldr r0, [r0]
	bl sub_0200CF38
	add r1, r5, #0
	add r1, #0xb0
	add r2, sp, #0x3c
	ldr r4, _02075764 ; =0x020FFF14
	str r0, [r1]
	ldmia r4!, {r0, r1}
	add r3, r2, #0
	stmia r2!, {r0, r1}
	ldmia r4!, {r0, r1}
	stmia r2!, {r0, r1}
	ldmia r4!, {r0, r1}
	stmia r2!, {r0, r1}
	ldmia r4!, {r0, r1}
	ldr r6, _02075768 ; =0x020FFEE8
	stmia r2!, {r0, r1}
	add r4, sp, #0x28
	ldmia r6!, {r0, r1}
	add r2, r4, #0
	stmia r4!, {r0, r1}
	ldmia r6!, {r0, r1}
	stmia r4!, {r0, r1}
	ldr r0, [r6]
	add r1, r3, #0
	str r0, [r4]
	mov r0, #0x10
	str r0, [sp, #0x28]
	add r0, r5, #0
	add r0, #0xac
	ldr r0, [r0]
	mov r3, #0x20
	bl sub_0200CF70
	add r0, r5, #0
	add r1, r5, #0
	add r0, #0xac
	add r1, #0xb0
	ldr r0, [r0]
	ldr r1, [r1]
	mov r2, #0x10
	bl sub_0200CFF4
	ldr r4, _0207576C ; =0x020FFEFC
	add r3, sp, #0x10
	add r2, r3, #0
	ldmia r4!, {r0, r1}
	stmia r3!, {r0, r1}
	ldmia r4!, {r0, r1}
	stmia r3!, {r0, r1}
	ldmia r4!, {r0, r1}
	stmia r3!, {r0, r1}
	add r0, r5, #0
	add r1, r5, #0
	add r0, #0xac
	add r1, #0xb0
	ldr r0, [r0]
	ldr r1, [r1]
	bl sub_0200D3F8
	add r0, r5, #0
	add r0, #0xac
	ldr r6, [r0]
	add r0, r5, #0
	add r0, #0xb0
	ldr r4, [r0]
	ldr r1, [r5, #0x5c]
	mov r0, #0xef
	bl NARC_ctor
	add r7, r0, #0
	mov r1, #0
	str r1, [sp]
	mov r0, #1
	str r0, [sp, #4]
	mov r0, #2
	str r0, [sp, #8]
	str r1, [sp, #0xc]
	add r0, r6, #0
	add r1, r4, #0
	add r2, r7, #0
	mov r3, #0xb
	bl sub_0200D5D4
	mov r1, #0
	str r1, [sp]
	mov r0, #2
	str r0, [sp, #4]
	str r1, [sp, #8]
	add r0, r6, #0
	add r1, r4, #0
	add r2, r7, #0
	mov r3, #0xc
	bl sub_0200D504
	mov r0, #0
	str r0, [sp]
	str r0, [sp, #4]
	add r0, r6, #0
	add r1, r4, #0
	add r2, r7, #0
	mov r3, #0xd
	bl sub_0200D6EC
	mov r0, #0
	str r0, [sp]
	str r0, [sp, #4]
	add r0, r6, #0
	add r1, r4, #0
	add r2, r7, #0
	mov r3, #0xe
	bl sub_0200D71C
	add r0, r7, #0
	bl NARC_dtor
	mov r0, #1
	str r0, [sp]
	add r0, r5, #0
	add r1, r5, #0
	add r0, #0xac
	add r1, #0xb0
	ldr r0, [r0]
	ldr r1, [r1]
	mov r2, #0x80
	mov r3, #0x48
	bl sub_020755E8
	add r1, r5, #0
	add r1, #0xb4
	str r0, [r1]
	add r0, r5, #0
	add r0, #0xb4
	ldr r0, [r0]
	mov r1, #0
	bl sub_0200DCE8
	mov r0, #1
	add r5, #0xb8
	str r0, [r5]
	add sp, #0x5c
	pop {r4, r5, r6, r7, pc}
	.balign 4, 0
_02075764: .word 0x020FFF14
_02075768: .word 0x020FFEE8
_0207576C: .word 0x020FFEFC
	thumb_func_end sub_02075630

	thumb_func_start sub_02075770
sub_02075770: ; 0x02075770
	push {r4, r5, r6, lr}
	add r5, r0, #0
	add r0, #0xac
	ldr r4, [r0]
	add r0, r5, #0
	add r0, #0xb0
	ldr r6, [r0]
	add r0, r5, #0
	add r0, #0xb4
	ldr r0, [r0]
	cmp r0, #0
	bne _0207578C
	bl GF_AssertFail
_0207578C:
	add r0, r5, #0
	add r0, #0xb4
	ldr r0, [r0]
	bl sub_0200D9DC
	add r0, r4, #0
	add r1, r6, #0
	bl sub_0200D998
	add r0, r4, #0
	bl sub_0200D108
	mov r0, #0
	add r5, #0xb8
	str r0, [r5]
	pop {r4, r5, r6, pc}
	thumb_func_end sub_02075770

	thumb_func_start sub_020757AC
sub_020757AC: ; 0x020757AC
	push {r3, r4, r5, lr}
	add r5, r0, #0
	add r0, #0xb8
	ldr r0, [r0]
	cmp r0, #0
	bne _020757BC
	bl GF_AssertFail
_020757BC:
	add r0, r5, #0
	add r0, #0xb4
	ldr r0, [r0]
	cmp r0, #0
	bne _020757CA
	bl GF_AssertFail
_020757CA:
	add r0, r5, #0
	add r0, #0x8b
	ldrb r0, [r0]
	cmp r0, #1
	beq _020757DA
	cmp r0, #2
	beq _020757DE
	b _020757E2
_020757DA:
	mov r4, #0
	b _020757E6
_020757DE:
	mov r4, #1
	b _020757E6
_020757E2:
	bl GF_AssertFail
_020757E6:
	ldr r1, _020757FC ; =0x020FFEC4
	lsl r3, r4, #2
	ldr r2, _02075800 ; =0x020FFEC6
	add r5, #0xb4
	ldrsh r1, [r1, r3]
	ldrsh r2, [r2, r3]
	ldr r0, [r5]
	bl sub_0200DDB8
	pop {r3, r4, r5, pc}
	nop
_020757FC: .word 0x020FFEC4
_02075800: .word 0x020FFEC6
	thumb_func_end sub_020757AC

	thumb_func_start sub_02075804
sub_02075804: ; 0x02075804
	push {r3, r4, r5, lr}
	sub sp, #0x10
	add r4, r0, #0
	add r5, r1, #0
	add r2, r3, #0
	ldr r0, [r4, #0xc]
	ldr r1, [r4, #8]
	ldr r3, [r4, #0x5c]
	bl ReadMsgData_ExpandPlaceholders
	add r4, r0, #0
	add r0, r5, #0
	mov r1, #0
	bl FillWindowPixelBuffer
	mov r3, #0
	str r3, [sp]
	ldr r0, _02075848 ; =0x00010200
	str r3, [sp, #4]
	str r0, [sp, #8]
	add r0, r5, #0
	mov r1, #4
	add r2, r4, #0
	str r3, [sp, #0xc]
	bl sub_020200FC
	add r0, r5, #0
	bl CopyWindowToVram
	add r0, r4, #0
	bl String_dtor
	add sp, #0x10
	pop {r3, r4, r5, pc}
	.balign 4, 0
_02075848: .word 0x00010200
	thumb_func_end sub_02075804

	thumb_func_start sub_0207584C
sub_0207584C: ; 0x0207584C
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	add r0, #0xb8
	ldr r6, _020758C8 ; =0x0000049D
	ldr r0, [r0]
	add r7, r1, #0
	add r4, r6, #1
	cmp r0, #0
	bne _02075862
	bl GF_AssertFail
_02075862:
	cmp r7, #0
	bne _02075878
	add r2, r5, #0
	add r2, #0x6c
	ldrh r2, [r2]
	ldr r0, [r5, #0xc]
	mov r1, #0
	bl BufferMoveName
	ldr r6, _020758CC ; =0x000004A2
	add r4, r6, #1
_02075878:
	add r1, r5, #0
	ldr r2, [r5, #8]
	add r0, r5, #0
	add r1, #0x8c
	add r3, r6, #0
	bl sub_02075804
	add r1, r5, #0
	ldr r2, [r5, #8]
	add r0, r5, #0
	add r1, #0x9c
	add r3, r4, #0
	bl sub_02075804
	add r0, r5, #0
	mov r1, #0
	add r0, #0x8a
	strb r1, [r0]
	add r0, r5, #0
	mov r1, #1
	add r0, #0x8b
	strb r1, [r0]
	add r0, r5, #0
	bl sub_020757AC
	mov r0, #5
	mov r1, #1
	bl sub_0201BC28
	mov r0, #6
	mov r1, #1
	bl sub_0201BC28
	add r5, #0xb4
	ldr r0, [r5]
	mov r1, #1
	bl sub_0200DCE8
	pop {r3, r4, r5, r6, r7, pc}
	nop
_020758C8: .word 0x0000049D
_020758CC: .word 0x000004A2
	thumb_func_end sub_0207584C

	thumb_func_start sub_020758D0
sub_020758D0: ; 0x020758D0
	push {r4, r5, r6, lr}
	add r5, r0, #0
	ldr r0, _020759C0 ; =0x020FFECC
	mov r4, #0
	bl sub_02025224
	add r6, r0, #0
	add r0, r5, #0
	add r0, #0xb8
	ldr r0, [r0]
	cmp r0, #0
	bne _020758EC
	bl GF_AssertFail
_020758EC:
	mov r0, #0
	mvn r0, r0
	cmp r6, r0
	beq _02075920
	ldr r0, _020759C4 ; =0x000005DC
	bl PlaySE
	cmp r6, #0
	beq _02075904
	cmp r6, #1
	beq _0207590E
	b _0207591A
_02075904:
	add r0, r5, #0
	mov r4, #1
	add r0, #0x8b
	strb r4, [r0]
	b _020759A0
_0207590E:
	add r0, r5, #0
	mov r1, #2
	add r0, #0x8b
	strb r1, [r0]
	mov r4, #1
	b _020759A0
_0207591A:
	bl GF_AssertFail
	b _020759A0
_02075920:
	ldr r0, _020759C8 ; =gMain
	mov r1, #0x40
	ldr r0, [r0, #0x48]
	tst r1, r0
	beq _0207594A
	add r0, r5, #0
	add r0, #0x8b
	ldrb r0, [r0]
	cmp r0, #1
	beq _020759A0
	add r0, r5, #0
	mov r1, #1
	add r0, #0x8b
	strb r1, [r0]
	add r0, r5, #0
	bl sub_020757AC
	ldr r0, _020759C4 ; =0x000005DC
	bl PlaySE
	b _020759A0
_0207594A:
	mov r1, #0x80
	tst r1, r0
	beq _02075970
	add r0, r5, #0
	add r0, #0x8b
	ldrb r0, [r0]
	cmp r0, #2
	beq _020759A0
	add r0, r5, #0
	mov r1, #2
	add r0, #0x8b
	strb r1, [r0]
	add r0, r5, #0
	bl sub_020757AC
	ldr r0, _020759C4 ; =0x000005DC
	bl PlaySE
	b _020759A0
_02075970:
	mov r1, #1
	add r2, r0, #0
	tst r2, r1
	beq _02075992
	add r0, r5, #0
	add r0, #0x8b
	ldrb r0, [r0]
	cmp r0, #0
	bne _0207598E
	bl GF_AssertFail
	add r0, r5, #0
	mov r1, #2
	add r0, #0x8b
	strb r1, [r0]
_0207598E:
	mov r4, #1
	b _020759A0
_02075992:
	mov r2, #2
	tst r0, r2
	beq _020759A0
	add r0, r5, #0
	add r0, #0x8b
	strb r2, [r0]
	add r4, r1, #0
_020759A0:
	cmp r4, #0
	beq _020759BA
	add r0, r5, #0
	bl sub_020757AC
	add r5, #0xb4
	ldr r0, [r5]
	mov r1, #3
	bl sub_0200DC4C
	ldr r0, _020759C4 ; =0x000005DC
	bl PlaySE
_020759BA:
	add r0, r4, #0
	pop {r4, r5, r6, pc}
	nop
_020759C0: .word 0x020FFECC
_020759C4: .word 0x000005DC
_020759C8: .word gMain
	thumb_func_end sub_020758D0

	thumb_func_start sub_020759CC
sub_020759CC: ; 0x020759CC
	push {r4, lr}
	add r4, r0, #0
	add r0, #0xb8
	ldr r0, [r0]
	cmp r0, #0
	bne _020759DC
	bl GF_AssertFail
_020759DC:
	add r0, r4, #0
	add r0, #0xb4
	ldr r0, [r0]
	bl sub_0200DC64
	cmp r0, #3
	beq _020759EE
	bl GF_AssertFail
_020759EE:
	add r4, #0xb4
	ldr r0, [r4]
	bl sub_0200DCA0
	cmp r0, #0
	bne _020759FE
	mov r0, #1
	pop {r4, pc}
_020759FE:
	mov r0, #0
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_020759CC

	thumb_func_start sub_02075A04
sub_02075A04: ; 0x02075A04
	push {r4, lr}
	add r4, r0, #0
	add r1, r4, #0
	add r1, #0x8a
	ldrb r1, [r1]
	cmp r1, #0
	beq _02075A18
	cmp r1, #1
	beq _02075A2E
	b _02075A74
_02075A18:
	bl sub_020758D0
	cmp r0, #0
	beq _02075A78
	add r0, r4, #0
	add r0, #0x8a
	ldrb r0, [r0]
	add r4, #0x8a
	add r0, r0, #1
	strb r0, [r4]
	b _02075A78
_02075A2E:
	bl sub_020759CC
	cmp r0, #0
	beq _02075A78
	add r0, r4, #0
	add r0, #0xb8
	ldr r0, [r0]
	cmp r0, #0
	bne _02075A44
	bl GF_AssertFail
_02075A44:
	add r0, r4, #0
	add r0, #0x8b
	ldrb r0, [r0]
	cmp r0, #0
	bne _02075A52
	bl GF_AssertFail
_02075A52:
	mov r0, #5
	mov r1, #0
	bl sub_0201BC28
	mov r0, #6
	mov r1, #0
	bl sub_0201BC28
	add r0, r4, #0
	add r0, #0xb4
	ldr r0, [r0]
	mov r1, #0
	bl sub_0200DCE8
	add r4, #0x8b
	ldrb r0, [r4]
	pop {r4, pc}
_02075A74:
	bl GF_AssertFail
_02075A78:
	mov r0, #0
	pop {r4, pc}
	thumb_func_end sub_02075A04

	thumb_func_start sub_02075A7C
sub_02075A7C: ; 0x02075A7C
	push {r4, r5, r6, r7, lr}
	sub sp, #0x24
	add r6, r0, #0
	add r7, r1, #0
	ldr r5, [sp, #0x50]
	ldr r0, _02075CFC ; =gMain + 0x60
	mov r1, #0
	str r2, [sp, #0x14]
	str r3, [sp, #0x18]
	strb r1, [r0, #9]
	bl sub_02022D3C
	mov r0, #4
	add r1, r5, #0
	bl sub_02002CEC
	add r0, r5, #0
	mov r1, #0xbc
	bl AllocFromHeap
	add r4, r0, #0
	mov r0, #0
	add r1, r4, #0
	mov r2, #0xbc
	bl MIi_CpuClearFast
	bl sub_02026E8C
	str r0, [sp, #0x1c]
	bl sub_02026E84
	add r1, r0, #0
	ldr r2, [sp, #0x1c]
	mov r0, #0
	bl sub_020D4790
	bl sub_02026E9C
	str r0, [sp, #0x20]
	bl sub_02026E94
	add r1, r0, #0
	ldr r2, [sp, #0x20]
	mov r0, #0
	bl sub_020D4790
	str r6, [r4, #0x24]
	add r0, r7, #0
	mov r1, #5
	mov r2, #0
	str r7, [r4, #0x28]
	bl GetMonData
	add r1, r4, #0
	add r1, #0x60
	strh r0, [r1]
	add r0, r7, #0
	mov r1, #0x70
	mov r2, #0
	bl GetMonData
	add r1, r4, #0
	add r1, #0x80
	strb r0, [r1]
	add r1, r4, #0
	ldr r0, [sp, #0x14]
	add r1, #0x62
	strh r0, [r1]
	str r5, [r4, #0x5c]
	mov r0, #0
	str r0, [r4, #0x38]
	mov r0, #0xb4
	add r1, r5, #0
	bl NARC_ctor
	add r1, r4, #0
	add r1, #0x84
	str r0, [r1]
	add r2, r4, #0
	add r0, r4, #0
	add r2, #0x60
	add r0, #0x84
	add r1, r4, #0
	ldrh r2, [r2]
	ldr r0, [r0]
	add r1, #0x88
	mov r3, #1
	bl sub_020729A4
	add r2, r4, #0
	add r0, r4, #0
	add r2, #0x62
	add r0, #0x84
	add r1, r4, #0
	ldrh r2, [r2]
	ldr r0, [r0]
	add r1, #0x89
	mov r3, #1
	bl sub_020729A4
	add r0, r5, #0
	bl sub_020030E8
	str r0, [r4, #0x14]
	mov r1, #1
	bl sub_02003B50
	mov r2, #2
	ldr r0, [r4, #0x14]
	mov r1, #0
	lsl r2, r2, #8
	add r3, r5, #0
	bl PaletteData_AllocBuffers
	mov r1, #1
	ldr r0, [r4, #0x14]
	lsl r2, r1, #9
	add r3, r5, #0
	bl PaletteData_AllocBuffers
	mov r2, #7
	ldr r0, [r4, #0x14]
	mov r1, #2
	lsl r2, r2, #6
	add r3, r5, #0
	bl PaletteData_AllocBuffers
	add r0, r5, #0
	bl sub_0201AC88
	str r0, [r4]
	add r0, r5, #0
	mov r1, #1
	bl AllocWindows
	str r0, [r4, #4]
	ldr r0, [sp, #0x18]
	str r0, [r4, #0x2c]
	add r0, r5, #0
	bl sub_02077400
	str r0, [r4, #0x34]
	bl sub_020773AC
	bl sub_020773D4
	bl sub_020774A0
	ldr r1, [r4]
	add r0, r4, #0
	bl sub_02076E64
	add r0, r4, #0
	bl sub_02075630
	mov r0, #0x13
	str r0, [sp]
	mov r0, #0x1b
	str r0, [sp, #4]
	mov r0, #4
	str r0, [sp, #8]
	mov r0, #0xb
	str r0, [sp, #0xc]
	mov r0, #0x1f
	str r0, [sp, #0x10]
	ldr r0, [r4]
	ldr r1, [r4, #4]
	mov r2, #1
	mov r3, #2
	bl sub_0201D40C
	ldr r0, [r4, #4]
	mov r1, #0xff
	bl FillWindowPixelBuffer
	ldr r0, [r4, #4]
	mov r1, #0
	mov r2, #1
	mov r3, #0xa
	bl sub_0200E998
	mov r0, #8
	str r0, [sp]
	mov r0, #0x1a
	str r0, [sp, #4]
	mov r0, #2
	str r0, [sp, #8]
	mov r0, #0xf
	str r0, [sp, #0xc]
	mov r0, #0x50
	str r0, [sp, #0x10]
	add r1, r4, #0
	ldr r0, [r4]
	add r1, #0x8c
	mov r2, #6
	mov r3, #3
	bl sub_0201D40C
	mov r0, #0xe
	str r0, [sp]
	mov r0, #0x1a
	str r0, [sp, #4]
	mov r0, #2
	str r0, [sp, #8]
	mov r0, #0xf
	str r0, [sp, #0xc]
	mov r0, #0x84
	str r0, [sp, #0x10]
	add r1, r4, #0
	ldr r0, [r4]
	add r1, #0x9c
	mov r2, #6
	mov r3, #3
	bl sub_0201D40C
	add r0, r5, #0
	bl sub_02007FD4
	str r0, [r4, #0x18]
	add r0, r5, #0
	mov r1, #1
	mov r2, #0
	bl sub_02016EDC
	str r0, [r4, #0x44]
	add r0, r4, #0
	mov r1, #0
	add r0, #0x67
	strb r1, [r0]
	add r0, r4, #0
	mov r1, #2
	add r0, #0x66
	strb r1, [r0]
	mov r0, #1
	mov r1, #0x1b
	mov r2, #0xc5
	add r3, r5, #0
	bl NewMsgDataFromNarc
	str r0, [r4, #8]
	add r0, r5, #0
	bl ScrStrBufs_new
	str r0, [r4, #0xc]
	mov r0, #5
	lsl r0, r0, #6
	add r1, r5, #0
	bl String_ctor
	str r0, [r4, #0x10]
	add r0, r5, #0
	mov r1, #0x3c
	bl AllocFromHeap
	str r0, [r4, #0x3c]
	ldr r1, [r4, #0x3c]
	mov r0, #0
	mov r2, #0x3c
	bl MIi_CpuClearFast
	ldr r1, [sp, #0x38]
	ldr r0, [r4, #0x3c]
	str r1, [r0, #0x2c]
	ldr r0, [sp, #0x3c]
	str r0, [r4, #0x48]
	ldr r0, [sp, #0x40]
	str r0, [r4, #0x4c]
	ldr r0, [sp, #0x44]
	str r0, [r4, #0x50]
	ldr r0, [sp, #0x48]
	str r0, [r4, #0x78]
	ldr r0, [sp, #0x4c]
	str r0, [r4, #0x7c]
	add r0, r4, #0
	bl sub_020771E8
	mov r0, #0x10
	str r0, [sp]
	mov r0, #0
	str r0, [sp, #4]
	str r0, [sp, #8]
	ldr r0, [r4, #0x14]
	ldr r2, _02075D00 ; =0x0000FFFF
	mov r1, #0xf
	mov r3, #1
	bl sub_02003370
	mov r2, #0
	str r2, [sp]
	ldr r0, [r4, #0x18]
	mov r1, #0x10
	add r3, r2, #0
	bl sub_020090E4
	ldr r0, [r4, #0x14]
	mov r1, #0
	mov r2, #0xb
	add r3, r5, #0
	bl sub_020163E0
	mov r1, #1
	str r0, [r4, #0x58]
	bl sub_0201649C
	ldr r0, _02075D04 ; =sub_02075D08
	add r1, r4, #0
	mov r2, #0
	bl sub_0200E320
	mov r0, #1
	bl TextFlags_SetCanABSpeedUpPrint
	mov r0, #1
	bl sub_02002B8C
	bl sub_0203A880
	add r0, r4, #0
	add sp, #0x24
	pop {r4, r5, r6, r7, pc}
	.balign 4, 0
_02075CFC: .word gMain + 0x60
_02075D00: .word 0x0000FFFF
_02075D04: .word sub_02075D08
	thumb_func_end sub_02075A7C

	thumb_func_start sub_02075D08
sub_02075D08: ; 0x02075D08
	push {r3, r4, r5, lr}
	add r4, r1, #0
	add r5, r0, #0
	add r0, r4, #0
	bl sub_02075E14
	ldr r0, [r4, #0x38]
	cmp r0, #0
	bne _02075D2C
	ldr r0, [r4, #0x18]
	bl sub_02008120
	bl sub_020774E0
	mov r0, #1
	mov r1, #0
	bl sub_02026E50
_02075D2C:
	add r4, #0x67
	ldrb r0, [r4]
	cmp r0, #0
	beq _02075D3A
	add r0, r5, #0
	bl sub_0200E390
_02075D3A:
	pop {r3, r4, r5, pc}
	thumb_func_end sub_02075D08

	thumb_func_start sub_02075D3C
sub_02075D3C: ; 0x02075D3C
	add r0, #0x67
	ldrb r0, [r0]
	cmp r0, #1
	bne _02075D48
	mov r0, #1
	bx lr
_02075D48:
	mov r0, #0
	bx lr
	thumb_func_end sub_02075D3C

	thumb_func_start sub_02075D4C
sub_02075D4C: ; 0x02075D4C
	push {r4, lr}
	add r4, r0, #0
	mov r0, #0
	add r1, r0, #0
	bl sub_0200FBF4
	mov r0, #1
	mov r1, #0
	bl sub_0200FBF4
	mov r0, #0
	add r1, r0, #0
	bl sub_0201A0FC
	mov r0, #4
	bl sub_02002DB4
	add r0, r4, #0
	bl sub_02075770
	ldr r0, [r4, #4]
	mov r1, #1
	bl sub_0201D54C
	add r0, r4, #0
	add r0, #0x8c
	bl RemoveWindow
	add r0, r4, #0
	add r0, #0x9c
	bl RemoveWindow
	ldr r0, [r4, #0x14]
	mov r1, #0
	bl PaletteData_FreeBuffers
	ldr r0, [r4, #0x14]
	mov r1, #1
	bl PaletteData_FreeBuffers
	ldr r0, [r4, #0x14]
	mov r1, #2
	bl PaletteData_FreeBuffers
	ldr r0, [r4, #0x14]
	bl sub_02003104
	ldr r0, [r4, #0x18]
	bl sub_02008524
	ldr r0, [r4, #0x44]
	bl sub_02016F2C
	ldr r0, [r4, #0x34]
	bl sub_02026F54
	ldr r0, [r4]
	bl sub_020771A0
	ldr r0, [r4, #8]
	bl DestroyMsgData
	ldr r0, [r4, #0xc]
	bl ScrStrBufs_delete
	ldr r0, [r4, #0x10]
	bl FreeToHeap
	ldr r0, [r4, #0x3c]
	bl FreeToHeap
	ldr r0, [r4, #0x58]
	bl sub_020164C4
	ldr r0, [r4]
	bl FreeToHeap
	add r0, r4, #0
	add r0, #0x84
	ldr r0, [r0]
	bl NARC_dtor
	add r0, r4, #0
	bl FreeToHeap
	mov r0, #0
	bl TextFlags_SetCanABSpeedUpPrint
	mov r0, #0
	bl sub_02002B8C
	ldr r0, _02075E10 ; =gMain + 0x60
	mov r1, #1
	strb r1, [r0, #9]
	bl sub_02022D3C
	pop {r4, pc}
	nop
_02075E10: .word gMain + 0x60
	thumb_func_end sub_02075D4C

	thumb_func_start sub_02075E14
sub_02075E14: ; 0x02075E14
	push {r4, lr}
	sub sp, #0x90
	add r4, r0, #0
	add r0, #0x70
	ldrb r1, [r0]
	cmp r1, #0
	beq _02075EF0
	mov r0, #1
	tst r0, r1
	ldr r0, [r4, #0x1c]
	bne _02075E82
	add r2, r4, #0
	add r2, #0x71
	ldrb r2, [r2]
	mov r1, #0xc
	neg r2, r2
	bl sub_02008C2C
	add r2, r4, #0
	add r2, #0x71
	ldrb r2, [r2]
	ldr r0, [r4, #0x1c]
	mov r1, #0xd
	neg r2, r2
	bl sub_02008C2C
	add r2, r4, #0
	add r2, #0x71
	ldrb r2, [r2]
	ldr r0, [r4, #0x20]
	mov r1, #0xc
	bl sub_02008C2C
	add r2, r4, #0
	add r2, #0x71
	ldrb r2, [r2]
	ldr r0, [r4, #0x20]
	mov r1, #0xd
	bl sub_02008C2C
	ldr r0, [r4, #0x1c]
	mov r1, #0xc
	bl sub_02008A78
	cmp r0, #0
	bne _02075EF0
	add r0, r4, #0
	add r0, #0x70
	ldrb r1, [r0]
	mov r0, #1
	eor r1, r0
	add r0, r4, #0
	add r0, #0x70
	strb r1, [r0]
	b _02075EF0
_02075E82:
	add r2, r4, #0
	add r2, #0x71
	ldrb r2, [r2]
	mov r1, #0xc
	bl sub_02008C2C
	add r2, r4, #0
	add r2, #0x71
	ldrb r2, [r2]
	ldr r0, [r4, #0x1c]
	mov r1, #0xd
	bl sub_02008C2C
	add r2, r4, #0
	add r2, #0x71
	ldrb r2, [r2]
	ldr r0, [r4, #0x20]
	mov r1, #0xc
	neg r2, r2
	bl sub_02008C2C
	add r2, r4, #0
	add r2, #0x71
	ldrb r2, [r2]
	ldr r0, [r4, #0x20]
	mov r1, #0xd
	neg r2, r2
	bl sub_02008C2C
	ldr r0, [r4, #0x20]
	mov r1, #0xc
	bl sub_02008A78
	cmp r0, #0
	bne _02075EF0
	add r0, r4, #0
	add r0, #0x70
	ldrb r1, [r0]
	mov r0, #1
	eor r1, r0
	add r0, r4, #0
	add r0, #0x70
	strb r1, [r0]
	add r0, r4, #0
	add r0, #0x71
	ldrb r0, [r0]
	cmp r0, #0x40
	bhs _02075EF0
	add r0, r4, #0
	add r0, #0x71
	ldrb r0, [r0]
	lsl r1, r0, #1
	add r0, r4, #0
	add r0, #0x71
	strb r1, [r0]
_02075EF0:
	ldr r1, [r4, #0x7c]
	mov r0, #1
	tst r0, r1
	beq _02075F2A
	add r0, r4, #0
	add r0, #0x64
	ldrb r0, [r0]
	cmp r0, #8
	bne _02075F2A
	ldr r0, _02076210 ; =gMain
	ldr r1, [r0, #0x48]
	mov r0, #2
	tst r0, r1
	beq _02075F2A
	mov r3, #0
	str r3, [sp]
	mov r0, #0x10
	str r0, [sp, #4]
	ldr r0, _02076214 ; =0x00007FFF
	ldr r2, _02076218 ; =0x0000F3FF
	str r0, [sp, #8]
	ldr r0, [r4, #0x14]
	mov r1, #0xf
	bl sub_02003370
	add r0, r4, #0
	mov r1, #0x29
	add r0, #0x64
	strb r1, [r0]
_02075F2A:
	add r0, r4, #0
	add r0, #0x64
	ldrb r0, [r0]
	cmp r0, #0x2d
	bhi _0207602A
	add r0, r0, r0
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_02075F40: ; jump table
	.short _02075F9C - _02075F40 - 2 ; case 0
	.short _02075FC4 - _02075F40 - 2 ; case 1
	.short _02075FF2 - _02075F40 - 2 ; case 2
	.short _0207601C - _02075F40 - 2 ; case 3
	.short _02076038 - _02075F40 - 2 ; case 4
	.short _020760CE - _02075F40 - 2 ; case 5
	.short _0207611A - _02075F40 - 2 ; case 6
	.short _0207619C - _02075F40 - 2 ; case 7
	.short _02076254 - _02075F40 - 2 ; case 8
	.short _020762F4 - _02075F40 - 2 ; case 9
	.short _02076382 - _02075F40 - 2 ; case 10
	.short _020763FC - _02075F40 - 2 ; case 11
	.short _02076478 - _02075F40 - 2 ; case 12
	.short _020764DE - _02075F40 - 2 ; case 13
	.short _02076558 - _02075F40 - 2 ; case 14
	.short _02076620 - _02075F40 - 2 ; case 15
	.short _0207659C - _02075F40 - 2 ; case 16
	.short _02076620 - _02075F40 - 2 ; case 17
	.short _020765D2 - _02075F40 - 2 ; case 18
	.short _02076620 - _02075F40 - 2 ; case 19
	.short _02076658 - _02075F40 - 2 ; case 20
	.short _02076670 - _02075F40 - 2 ; case 21
	.short _020766BC - _02075F40 - 2 ; case 22
	.short _02076748 - _02075F40 - 2 ; case 23
	.short _020767D0 - _02075F40 - 2 ; case 24
	.short _020768E0 - _02075F40 - 2 ; case 25
	.short _02076620 - _02075F40 - 2 ; case 26
	.short _02076906 - _02075F40 - 2 ; case 27
	.short _02076620 - _02075F40 - 2 ; case 28
	.short _02076958 - _02075F40 - 2 ; case 29
	.short _02076620 - _02075F40 - 2 ; case 30
	.short _0207697E - _02075F40 - 2 ; case 31
	.short _02076808 - _02075F40 - 2 ; case 32
	.short _02076620 - _02075F40 - 2 ; case 33
	.short _0207683C - _02075F40 - 2 ; case 34
	.short _02076854 - _02075F40 - 2 ; case 35
	.short _020768AE - _02075F40 - 2 ; case 36
	.short _02076A06 - _02075F40 - 2 ; case 37
	.short _02076A24 - _02075F40 - 2 ; case 38
	.short _02076A50 - _02075F40 - 2 ; case 39
	.short _02076A84 - _02075F40 - 2 ; case 40
	.short _02076AA4 - _02075F40 - 2 ; case 41
	.short _02076B4A - _02075F40 - 2 ; case 42
	.short _02076BB8 - _02075F40 - 2 ; case 43
	.short _02076C0C - _02075F40 - 2 ; case 44
	.short _02076C66 - _02075F40 - 2 ; case 45
_02075F9C:
	add r0, r4, #0
	add r0, #0x66
	ldrb r0, [r0]
	sub r1, r0, #1
	add r0, r4, #0
	add r0, #0x66
	strb r1, [r0]
	add r0, r4, #0
	add r0, #0x66
	ldrb r0, [r0]
	cmp r0, #0
	bne _0207602A
	add r0, r4, #0
	add r0, #0x64
	ldrb r0, [r0]
	add r4, #0x64
	add sp, #0x90
	add r0, r0, #1
	strb r0, [r4]
	pop {r4, pc}
_02075FC4:
	mov r0, #0
	bl sub_0200FBE8
	mov r0, #1
	bl sub_0200FBE8
	ldr r0, [r4, #0x58]
	mov r1, #0
	bl sub_0201649C
	ldr r1, [r4, #0x7c]
	mov r0, #2
	tst r1, r0
	beq _02075FE8
	add r4, #0x64
	add sp, #0x90
	strb r0, [r4]
	pop {r4, pc}
_02075FE8:
	mov r0, #4
	add r4, #0x64
	add sp, #0x90
	strb r0, [r4]
	pop {r4, pc}
_02075FF2:
	ldr r0, [r4, #0x14]
	bl sub_02003B44
	cmp r0, #0
	bne _0207602A
	mov r1, #0xe5
	add r0, r4, #0
	lsl r1, r1, #2
	bl sub_020772F8
	add r1, r4, #0
	add r1, #0x65
	strb r0, [r1]
	add r0, r4, #0
	add r0, #0x64
	ldrb r0, [r0]
	add r4, #0x64
	add sp, #0x90
	add r0, r0, #1
	strb r0, [r4]
	pop {r4, pc}
_0207601C:
	add r0, r4, #0
	add r0, #0x65
	ldrb r0, [r0]
	bl sub_02020094
	cmp r0, #0
	beq _0207602E
_0207602A:
	bl _02076C76
_0207602E:
	mov r0, #4
	add r4, #0x64
	add sp, #0x90
	strb r0, [r4]
	pop {r4, pc}
_02076038:
	ldr r0, [r4, #0x14]
	bl sub_02003B44
	cmp r0, #0
	bne _02076132
	mov r0, #2
	str r0, [sp]
	mov r0, #0
	str r0, [sp, #4]
	str r0, [sp, #8]
	add r3, r4, #0
	add r0, r4, #0
	add r3, #0x60
	add r0, #0x84
	ldrh r3, [r3]
	ldr r0, [r0]
	ldr r1, [r4, #0x44]
	ldr r2, [r4, #0x1c]
	bl sub_0207294C
	add r2, r4, #0
	add r0, r4, #0
	add r2, #0x60
	add r0, #0x84
	ldrh r2, [r2]
	ldr r0, [r0]
	add r1, sp, #0x68
	mov r3, #1
	bl sub_02072914
	ldr r0, [r4, #0x1c]
	add r1, sp, #0x68
	bl sub_020085C8
	ldr r0, [r4, #0x1c]
	mov r1, #0
	bl sub_02008550
	add r0, r4, #0
	add r1, r4, #0
	add r0, #0x60
	add r1, #0x80
	ldrh r0, [r0]
	ldrb r1, [r1]
	bl sub_02006218
	ldr r0, [r4, #0x28]
	bl sub_02070DB0
	add r2, r0, #0
	ldr r0, [r4, #0xc]
	mov r1, #0
	bl BufferBoxMonNickname
	ldr r1, [r4, #0x7c]
	mov r0, #2
	tst r0, r1
	beq _020760B6
	ldr r1, _0207621C ; =0x00000395
	add r0, r4, #0
	bl sub_020772F8
	b _020760BE
_020760B6:
	ldr r1, _02076220 ; =0x00000393
	add r0, r4, #0
	bl sub_020772F8
_020760BE:
	add r1, r4, #0
	add r1, #0x65
	strb r0, [r1]
	mov r0, #5
	add r4, #0x64
	add sp, #0x90
	strb r0, [r4]
	pop {r4, pc}
_020760CE:
	add r0, r4, #0
	add r0, #0x65
	ldrb r0, [r0]
	bl sub_02020094
	cmp r0, #0
	bne _02076132
	bl sub_02006360
	cmp r0, #0
	bne _02076132
	ldr r0, [r4, #0x44]
	mov r1, #0
	bl sub_02017068
	cmp r0, #1
	bne _02076132
	ldr r0, [r4, #0x1c]
	bl sub_020085DC
	cmp r0, #0
	bne _02076132
	ldr r0, [r4, #0x58]
	mov r1, #1
	bl sub_0201649C
	ldr r0, _02076224 ; =0x000003F3
	bl sub_02005D10
	add r0, r4, #0
	mov r1, #0x14
	add r0, #0x66
	strb r1, [r0]
	mov r0, #6
	add r4, #0x64
	add sp, #0x90
	strb r0, [r4]
	pop {r4, pc}
_0207611A:
	add r0, r4, #0
	add r0, #0x66
	ldrb r0, [r0]
	sub r1, r0, #1
	add r0, r4, #0
	add r0, #0x66
	strb r1, [r0]
	add r0, r4, #0
	add r0, #0x66
	ldrb r0, [r0]
	cmp r0, #0
	beq _02076136
_02076132:
	bl _02076C76
_02076136:
	ldr r0, [r4, #0x5c]
	str r0, [sp, #0x10]
	mov r0, #0
	str r0, [sp, #0x14]
	add r0, sp, #0x10
	bl sub_02077604
	mov r1, #0
	str r0, [r4, #0x30]
	bl sub_02077634
	ldr r0, _02076214 ; =0x00007FFF
	mov r1, #0
	str r0, [sp]
	ldr r0, [r4, #0x1c]
	mov r2, #0x10
	mov r3, #4
	bl sub_020090B4
	ldr r0, _02076214 ; =0x00007FFF
	mov r1, #0
	str r0, [sp]
	ldr r0, [r4, #0x20]
	mov r2, #0x10
	mov r3, #4
	bl sub_020090B4
	ldr r0, [r4, #0x5c]
	bl GF_ExpHeap_FndGetTotalFreeSize
	mov r1, #2
	lsl r1, r1, #0xe
	cmp r0, r1
	bhi _0207617E
	bl GF_AssertFail
_0207617E:
	ldr r0, _02076228 ; =0x000005F8
	bl PlaySE
	add r0, r4, #0
	mov r1, #0x28
	add r0, #0x66
	strb r1, [r0]
	add r0, r4, #0
	add r0, #0x64
	ldrb r0, [r0]
	add r4, #0x64
	add sp, #0x90
	add r0, r0, #1
	strb r0, [r4]
	pop {r4, pc}
_0207619C:
	add r0, r4, #0
	add r0, #0x73
	ldrb r0, [r0]
	cmp r0, #0x28
	bhs _020761C2
	add r0, r4, #0
	add r0, #0x73
	ldrb r0, [r0]
	add r1, r0, #2
	add r0, r4, #0
	add r0, #0x73
	strb r1, [r0]
	add r0, r4, #0
	add r0, #0x75
	ldrb r0, [r0]
	sub r1, r0, #2
	add r0, r4, #0
	add r0, #0x75
	strb r1, [r0]
_020761C2:
	add r0, r4, #0
	add r0, #0x66
	ldrb r0, [r0]
	sub r1, r0, #1
	add r0, r4, #0
	add r0, #0x66
	strb r1, [r0]
	add r0, r4, #0
	add r0, #0x66
	ldrb r0, [r0]
	cmp r0, #0
	bne _0207625E
	ldr r0, [r4, #0x30]
	mov r1, #1
	bl sub_02077634
	ldr r0, [r4, #0x30]
	mov r1, #2
	bl sub_02077634
	ldr r0, [r4, #0x30]
	mov r1, #7
	bl sub_02077634
	ldr r0, [r4, #0x30]
	mov r1, #8
	bl sub_02077634
	ldr r0, [r4, #0x30]
	mov r1, #9
	bl sub_02077634
	ldr r0, [r4, #0x30]
	mov r1, #0xb
	bl sub_02077634
	ldr r0, _0207622C ; =0x000005F9
	b _02076230
	nop
_02076210: .word gMain
_02076214: .word 0x00007FFF
_02076218: .word 0x0000F3FF
_0207621C: .word 0x00000395
_02076220: .word 0x00000393
_02076224: .word 0x000003F3
_02076228: .word 0x000005F8
_0207622C: .word 0x000005F9
_02076230:
	bl PlaySE
	add r0, r4, #0
	mov r1, #0x10
	add r0, #0x70
	strb r1, [r0]
	add r0, r4, #0
	mov r1, #8
	add r0, #0x71
	strb r1, [r0]
	add r0, r4, #0
	add r0, #0x64
	ldrb r0, [r0]
	add r4, #0x64
	add sp, #0x90
	add r0, r0, #1
	strb r0, [r4]
	pop {r4, pc}
_02076254:
	ldr r0, [r4, #0x30]
	bl sub_02077650
	cmp r0, #0
	beq _02076262
_0207625E:
	bl _02076C76
_02076262:
	ldr r0, [r4, #0x30]
	mov r1, #3
	bl sub_02077634
	ldr r0, [r4, #0x30]
	mov r1, #4
	bl sub_02077634
	ldr r0, [r4, #0x30]
	mov r1, #5
	bl sub_02077634
	ldr r0, [r4, #0x30]
	mov r1, #6
	bl sub_02077634
	ldr r0, [r4, #0x30]
	mov r1, #0xa
	bl sub_02077634
	mov r0, #0
	str r0, [sp]
	mov r0, #0x10
	str r0, [sp, #4]
	ldr r0, _020765D8 ; =0x00007FFF
	ldr r2, _020765DC ; =0x0000F3FF
	str r0, [sp, #8]
	ldr r0, [r4, #0x14]
	mov r1, #0xf
	mov r3, #2
	bl sub_02003370
	ldr r0, [r4, #0x1c]
	mov r1, #0xc
	mov r2, #0
	bl sub_020087A4
	ldr r0, [r4, #0x1c]
	mov r1, #0xd
	mov r2, #0
	bl sub_020087A4
	mov r1, #0xc
	add r2, r1, #0
	ldr r0, [r4, #0x20]
	add r2, #0xf4
	bl sub_020087A4
	mov r1, #0xd
	add r2, r1, #0
	ldr r0, [r4, #0x20]
	add r2, #0xf3
	bl sub_020087A4
	ldr r0, _020765E0 ; =0x000005FA
	bl PlaySE
	add r0, r4, #0
	mov r1, #0
	add r0, #0x70
	strb r1, [r0]
	add r0, r4, #0
	mov r1, #8
	add r0, #0x66
	strb r1, [r0]
	add r0, r4, #0
	add r0, #0x64
	ldrb r0, [r0]
	add r4, #0x64
	add sp, #0x90
	add r0, r0, #1
	strb r0, [r4]
	pop {r4, pc}
_020762F4:
	add r0, r4, #0
	add r0, #0x73
	ldrb r0, [r0]
	cmp r0, #0
	beq _0207631A
	add r0, r4, #0
	add r0, #0x73
	ldrb r0, [r0]
	sub r1, r0, #2
	add r0, r4, #0
	add r0, #0x73
	strb r1, [r0]
	add r0, r4, #0
	add r0, #0x75
	ldrb r0, [r0]
	add r1, r0, #2
	add r0, r4, #0
	add r0, #0x75
	strb r1, [r0]
_0207631A:
	ldr r0, [r4, #0x14]
	bl sub_02003B44
	cmp r0, #0
	bne _02076396
	add r0, r4, #0
	add r0, #0x66
	ldrb r0, [r0]
	sub r1, r0, #1
	add r0, r4, #0
	add r0, #0x66
	strb r1, [r0]
	add r0, r4, #0
	add r0, #0x66
	ldrb r0, [r0]
	cmp r0, #0
	bne _02076396
	ldr r0, [r4, #0x30]
	mov r1, #0xc
	bl sub_02077634
	mov r0, #0x10
	str r0, [sp]
	mov r0, #0
	str r0, [sp, #4]
	ldr r0, _020765D8 ; =0x00007FFF
	ldr r2, _020765DC ; =0x0000F3FF
	str r0, [sp, #8]
	ldr r0, [r4, #0x14]
	mov r1, #0xf
	mov r3, #4
	bl sub_02003370
	ldr r0, _020765D8 ; =0x00007FFF
	mov r1, #0x10
	str r0, [sp]
	ldr r0, [r4, #0x18]
	mov r2, #0
	mov r3, #3
	bl sub_020090E4
	ldr r0, _020765E4 ; =0x000005FB
	bl PlaySE
	add r0, r4, #0
	add r0, #0x64
	ldrb r0, [r0]
	add r4, #0x64
	add sp, #0x90
	add r0, r0, #1
	strb r0, [r4]
	pop {r4, pc}
_02076382:
	ldr r0, [r4, #0x14]
	bl sub_02003B44
	cmp r0, #0
	bne _02076396
	ldr r0, [r4, #0x30]
	bl sub_02077650
	cmp r0, #0
	beq _0207639A
_02076396:
	bl _02076C76
_0207639A:
	mov r0, #2
	str r0, [sp]
	mov r0, #0
	str r0, [sp, #4]
	str r0, [sp, #8]
	add r3, r4, #0
	add r0, r4, #0
	add r3, #0x62
	add r0, #0x84
	ldrh r3, [r3]
	ldr r0, [r0]
	ldr r1, [r4, #0x44]
	ldr r2, [r4, #0x20]
	bl sub_0207294C
	add r2, r4, #0
	add r0, r4, #0
	add r2, #0x62
	add r0, #0x84
	ldrh r2, [r2]
	ldr r0, [r0]
	add r1, sp, #0x40
	mov r3, #1
	bl sub_02072914
	ldr r0, [r4, #0x20]
	add r1, sp, #0x40
	bl sub_020085C8
	ldr r0, [r4, #0x20]
	mov r1, #0
	bl sub_02008550
	add r0, r4, #0
	add r1, r4, #0
	add r0, #0x62
	add r1, #0x80
	ldrh r0, [r0]
	ldrb r1, [r1]
	bl sub_02006218
	add r0, r4, #0
	add r0, #0x64
	ldrb r0, [r0]
	add r4, #0x64
	add sp, #0x90
	add r0, r0, #1
	strb r0, [r4]
	pop {r4, pc}
_020763FC:
	bl sub_02006360
	cmp r0, #0
	bne _020764F4
	ldr r0, [r4, #0x44]
	mov r1, #0
	bl sub_02017068
	cmp r0, #1
	bne _020764F4
	ldr r0, [r4, #0x20]
	bl sub_020085DC
	cmp r0, #0
	bne _020764F4
	add r2, r4, #0
	ldr r0, [r4, #0x28]
	mov r1, #5
	add r2, #0x62
	bl sub_0206EC40
	ldr r0, [r4, #0x28]
	bl sub_020722D4
	ldr r0, [r4, #0x28]
	bl sub_0206E250
	ldr r0, [r4, #0x28]
	bl sub_02070DB0
	add r2, r0, #0
	ldr r0, [r4, #0xc]
	mov r1, #0
	bl BufferBoxMonNickname
	ldr r0, [r4, #0x28]
	bl sub_02070DB0
	add r2, r0, #0
	ldr r0, [r4, #0xc]
	mov r1, #1
	bl BufferBoxMonSpeciesName
	ldr r1, _020765E8 ; =0x00000396
	add r0, r4, #0
	bl sub_020772F8
	add r1, r4, #0
	add r1, #0x65
	strb r0, [r1]
	add r0, r4, #0
	mov r1, #0x28
	add r0, #0x66
	strb r1, [r0]
	add r0, r4, #0
	add r0, #0x64
	ldrb r0, [r0]
	add r4, #0x64
	add sp, #0x90
	add r0, r0, #1
	strb r0, [r4]
	pop {r4, pc}
_02076478:
	add r0, r4, #0
	add r0, #0x65
	ldrb r0, [r0]
	bl sub_02020094
	cmp r0, #0
	bne _020764F4
	add r0, r4, #0
	add r0, #0x66
	ldrb r0, [r0]
	sub r1, r0, #1
	add r0, r4, #0
	add r0, #0x66
	strb r1, [r0]
	add r0, r4, #0
	add r0, #0x66
	ldrb r0, [r0]
	cmp r0, #0
	bne _020764F4
	ldr r0, [r4, #0x48]
	ldr r1, [r4, #0x28]
	bl Pokedex_SetMonCaughtFlag
	ldr r0, [r4, #0x50]
	mov r1, #0xd
	bl sub_0202D0FC
	ldr r0, [r4, #0x50]
	mov r1, #0x15
	bl sub_0202D1C0
	ldr r0, [r4, #0x28]
	mov r1, #0x4d
	mov r2, #0
	bl GetMonData
	cmp r0, #0
	bne _020764CE
	ldr r0, [r4, #0x28]
	mov r1, #0xb3
	mov r2, #0
	bl sub_0206EC40
_020764CE:
	add r0, r4, #0
	add r0, #0x64
	ldrb r0, [r0]
	add r4, #0x64
	add sp, #0x90
	add r0, r0, #1
	strb r0, [r4]
	pop {r4, pc}
_020764DE:
	add r1, r4, #0
	ldr r0, [r4, #0x28]
	add r1, #0x68
	add r2, sp, #0xc
	bl sub_02071534
	cmp r0, #0
	beq _020764FE
	ldr r1, _020765EC ; =0x0000FFFE
	cmp r0, r1
	bne _020764F6
_020764F4:
	b _02076C76
_020764F6:
	add r1, r1, #1
	cmp r0, r1
	beq _02076508
	b _0207651C
_020764FE:
	mov r0, #0x27
	add r4, #0x64
	add sp, #0x90
	strb r0, [r4]
	pop {r4, pc}
_02076508:
	add r0, sp, #0xc
	ldrh r1, [r0]
	add r0, r4, #0
	add r0, #0x6c
	strh r1, [r0]
	mov r0, #0xe
	add r4, #0x64
	add sp, #0x90
	strb r0, [r4]
	pop {r4, pc}
_0207651C:
	ldr r0, [r4, #0x28]
	bl sub_02070DB0
	add r2, r0, #0
	ldr r0, [r4, #0xc]
	mov r1, #0
	bl BufferBoxMonNickname
	add r2, sp, #0xc
	ldrh r2, [r2]
	ldr r0, [r4, #0xc]
	mov r1, #1
	bl BufferMoveName
	add r0, r4, #0
	mov r1, #4
	bl sub_020772F8
	add r1, r4, #0
	add r1, #0x65
	strb r0, [r1]
	add r0, r4, #0
	mov r1, #0x1e
	add r0, #0x66
	strb r1, [r0]
	mov r0, #0x25
	add r4, #0x64
	add sp, #0x90
	strb r0, [r4]
	pop {r4, pc}
_02076558:
	ldr r0, [r4, #0x28]
	bl sub_02070DB0
	add r2, r0, #0
	ldr r0, [r4, #0xc]
	mov r1, #0
	bl BufferBoxMonNickname
	add r2, r4, #0
	add r2, #0x6c
	ldrh r2, [r2]
	ldr r0, [r4, #0xc]
	mov r1, #1
	bl BufferMoveName
	ldr r1, _020765F0 ; =0x000004A9
	add r0, r4, #0
	bl sub_020772F8
	add r1, r4, #0
	add r1, #0x65
	strb r0, [r1]
	add r0, r4, #0
	mov r1, #0x1e
	add r0, #0x66
	strb r1, [r0]
	add r0, r4, #0
	add r0, #0x64
	ldrb r0, [r0]
	add r4, #0x64
	add sp, #0x90
	add r0, r0, #1
	strb r0, [r4]
	pop {r4, pc}
_0207659C:
	ldr r0, [r4, #0x28]
	bl sub_02070DB0
	add r2, r0, #0
	ldr r0, [r4, #0xc]
	mov r1, #0
	bl BufferBoxMonNickname
	ldr r1, _020765F4 ; =0x000004AA
	add r0, r4, #0
	bl sub_020772F8
	add r1, r4, #0
	add r1, #0x65
	strb r0, [r1]
	add r0, r4, #0
	mov r1, #0x1e
	add r0, #0x66
	strb r1, [r0]
	add r0, r4, #0
	add r0, #0x64
	ldrb r0, [r0]
	add r4, #0x64
	add sp, #0x90
	add r0, r0, #1
	strb r0, [r4]
	pop {r4, pc}
_020765D2:
	ldr r1, _020765F8 ; =0x000004AB
	b _020765FC
	nop
_020765D8: .word 0x00007FFF
_020765DC: .word 0x0000F3FF
_020765E0: .word 0x000005FA
_020765E4: .word 0x000005FB
_020765E8: .word 0x00000396
_020765EC: .word 0x0000FFFE
_020765F0: .word 0x000004A9
_020765F4: .word 0x000004AA
_020765F8: .word 0x000004AB
_020765FC:
	add r0, r4, #0
	bl sub_020772F8
	add r1, r4, #0
	add r1, #0x65
	strb r0, [r1]
	add r0, r4, #0
	mov r1, #1
	add r0, #0x66
	strb r1, [r0]
	add r0, r4, #0
	add r0, #0x64
	ldrb r0, [r0]
	add r4, #0x64
	add sp, #0x90
	add r0, r0, #1
	strb r0, [r4]
	pop {r4, pc}
_02076620:
	add r0, r4, #0
	add r0, #0x65
	ldrb r0, [r0]
	bl sub_02020094
	cmp r0, #0
	bne _02076646
	add r0, r4, #0
	add r0, #0x66
	ldrb r0, [r0]
	sub r1, r0, #1
	add r0, r4, #0
	add r0, #0x66
	strb r1, [r0]
	add r0, r4, #0
	add r0, #0x66
	ldrb r0, [r0]
	cmp r0, #0
	beq _02076648
_02076646:
	b _02076C76
_02076648:
	add r0, r4, #0
	add r0, #0x64
	ldrb r0, [r0]
	add r4, #0x64
	add sp, #0x90
	add r0, r0, #1
	strb r0, [r4]
	pop {r4, pc}
_02076658:
	add r0, r4, #0
	mov r1, #1
	bl sub_0207584C
	add r0, r4, #0
	add r0, #0x64
	ldrb r0, [r0]
	add r4, #0x64
	add sp, #0x90
	add r0, r0, #1
	strb r0, [r4]
	pop {r4, pc}
_02076670:
	add r0, r4, #0
	bl sub_02075A04
	cmp r0, #1
	beq _02076682
	cmp r0, #2
	beq _020766B2
	add sp, #0x90
	pop {r4, pc}
_02076682:
	add r0, r4, #0
	mov r1, #0x16
	add r0, #0x64
	strb r1, [r0]
	mov r1, #0
	str r1, [sp]
	mov r0, #0x10
	str r0, [sp, #4]
	str r1, [sp, #8]
	ldr r0, [r4, #0x14]
	ldr r2, _020769A0 ; =0x0000FFFF
	mov r1, #0xf
	mov r3, #1
	bl sub_02003370
	mov r1, #0
	str r1, [sp]
	ldr r0, [r4, #0x18]
	mov r2, #0x10
	add r3, r1, #0
	bl sub_020090E4
	add sp, #0x90
	pop {r4, pc}
_020766B2:
	mov r0, #0x20
	add r4, #0x64
	add sp, #0x90
	strb r0, [r4]
	pop {r4, pc}
_020766BC:
	ldr r0, [r4, #0x14]
	bl sub_02003B44
	cmp r0, #0
	bne _02076752
	mov r0, #0
	add r1, r0, #0
	bl sub_0200FBF4
	mov r0, #1
	mov r1, #0
	bl sub_0200FBF4
	ldr r0, [r4]
	bl sub_020771A0
	add r0, r4, #0
	bl sub_02075770
	ldr r0, [r4, #0x1c]
	mov r1, #6
	mov r2, #1
	bl sub_020087A4
	ldr r0, [r4, #0x20]
	mov r1, #6
	mov r2, #1
	bl sub_020087A4
	ldr r1, [r4, #0x28]
	ldr r0, [r4, #0x3c]
	mov r2, #1
	str r1, [r0]
	ldr r1, [r4, #0x2c]
	ldr r0, [r4, #0x3c]
	str r1, [r0, #4]
	ldr r1, [r4, #0x3c]
	mov r0, #0
	strb r0, [r1, #0x11]
	ldr r1, [r4, #0x3c]
	strb r0, [r1, #0x14]
	ldr r1, [r4, #0x3c]
	strb r2, [r1, #0x13]
	add r1, r4, #0
	add r1, #0x6c
	ldrh r2, [r1]
	ldr r1, [r4, #0x3c]
	strh r2, [r1, #0x18]
	ldr r1, [r4, #0x3c]
	mov r2, #2
	strb r2, [r1, #0x12]
	ldr r1, [r4, #0x3c]
	str r0, [r1, #0x28]
	ldr r1, [r4, #0x3c]
	str r0, [r1, #0x30]
	ldr r0, [r4, #0x3c]
	ldr r1, _020769A4 ; =0x020FFEC0
	bl sub_02089D40
	add r0, r4, #0
	bl sub_02077394
	add r0, r4, #0
	add r0, #0x64
	ldrb r0, [r0]
	add r4, #0x64
	add sp, #0x90
	add r0, r0, #1
	strb r0, [r4]
	pop {r4, pc}
_02076748:
	ldr r0, [r4, #0x38]
	bl OverlayManager_run
	cmp r0, #0
	bne _02076754
_02076752:
	b _02076C76
_02076754:
	ldr r0, [r4, #0x38]
	bl OverlayManager_delete
	mov r0, #0
	str r0, [r4, #0x38]
	ldr r1, [r4]
	add r0, r4, #0
	bl sub_02076E64
	add r0, r4, #0
	bl sub_02075630
	ldr r0, [r4, #4]
	mov r1, #0
	mov r2, #1
	mov r3, #0xa
	bl sub_0200E998
	ldr r0, [r4, #0x1c]
	mov r1, #6
	mov r2, #0
	bl sub_020087A4
	ldr r0, [r4, #0x20]
	mov r1, #6
	mov r2, #0
	bl sub_020087A4
	ldr r0, [r4, #0x1c]
	bl sub_02009324
	ldr r0, [r4, #0x20]
	bl sub_02009324
	mov r0, #0x10
	str r0, [sp]
	mov r0, #0
	str r0, [sp, #4]
	str r0, [sp, #8]
	ldr r0, [r4, #0x14]
	ldr r2, _020769A0 ; =0x0000FFFF
	mov r1, #0xf
	mov r3, #1
	bl sub_02003370
	mov r2, #0
	str r2, [sp]
	ldr r0, [r4, #0x18]
	mov r1, #0x10
	add r3, r2, #0
	bl sub_020090E4
	bl sub_0203A880
	add r0, r4, #0
	add r0, #0x64
	ldrb r0, [r0]
	add r4, #0x64
	add sp, #0x90
	add r0, r0, #1
	strb r0, [r4]
	pop {r4, pc}
_020767D0:
	mov r0, #0
	bl sub_0200FBE8
	mov r0, #1
	bl sub_0200FBE8
	ldr r0, [r4, #0x14]
	bl sub_02003B44
	cmp r0, #0
	bne _020768D4
	ldr r0, [r4, #0x3c]
	ldrb r1, [r0, #0x16]
	cmp r1, #4
	bne _020767F8
	mov r0, #0x20
	add r4, #0x64
	add sp, #0x90
	strb r0, [r4]
	pop {r4, pc}
_020767F8:
	add r0, r4, #0
	add r0, #0x6e
	strb r1, [r0]
	mov r0, #0x19
	add r4, #0x64
	add sp, #0x90
	strb r0, [r4]
	pop {r4, pc}
_02076808:
	add r2, r4, #0
	add r2, #0x6c
	ldrh r2, [r2]
	ldr r0, [r4, #0xc]
	mov r1, #0
	bl BufferMoveName
	ldr r1, _020769A8 ; =0x000004AD
	add r0, r4, #0
	bl sub_020772F8
	add r1, r4, #0
	add r1, #0x65
	strb r0, [r1]
	add r0, r4, #0
	mov r1, #1
	add r0, #0x66
	strb r1, [r0]
	add r0, r4, #0
	add r0, #0x64
	ldrb r0, [r0]
	add r4, #0x64
	add sp, #0x90
	add r0, r0, #1
	strb r0, [r4]
	pop {r4, pc}
_0207683C:
	add r0, r4, #0
	mov r1, #0
	bl sub_0207584C
	add r0, r4, #0
	add r0, #0x64
	ldrb r0, [r0]
	add r4, #0x64
	add sp, #0x90
	add r0, r0, #1
	strb r0, [r4]
	pop {r4, pc}
_02076854:
	add r0, r4, #0
	bl sub_02075A04
	cmp r0, #1
	beq _02076866
	cmp r0, #2
	beq _020768A4
	add sp, #0x90
	pop {r4, pc}
_02076866:
	ldr r0, [r4, #0x28]
	bl sub_02070DB0
	add r2, r0, #0
	ldr r0, [r4, #0xc]
	mov r1, #0
	bl BufferBoxMonNickname
	add r2, r4, #0
	add r2, #0x6c
	ldrh r2, [r2]
	ldr r0, [r4, #0xc]
	mov r1, #1
	bl BufferMoveName
	ldr r1, _020769AC ; =0x000004AE
	add r0, r4, #0
	bl sub_020772F8
	add r1, r4, #0
	add r1, #0x65
	strb r0, [r1]
	add r0, r4, #0
	mov r1, #0x1e
	add r0, #0x66
	strb r1, [r0]
	mov r0, #0x24
	add r4, #0x64
	add sp, #0x90
	strb r0, [r4]
	pop {r4, pc}
_020768A4:
	mov r0, #0xe
	add r4, #0x64
	add sp, #0x90
	strb r0, [r4]
	pop {r4, pc}
_020768AE:
	add r0, r4, #0
	add r0, #0x65
	ldrb r0, [r0]
	bl sub_02020094
	cmp r0, #0
	bne _020768D4
	add r0, r4, #0
	add r0, #0x66
	ldrb r0, [r0]
	sub r1, r0, #1
	add r0, r4, #0
	add r0, #0x66
	strb r1, [r0]
	add r0, r4, #0
	add r0, #0x66
	ldrb r0, [r0]
	cmp r0, #0
	beq _020768D6
_020768D4:
	b _02076C76
_020768D6:
	mov r0, #0xd
	add r4, #0x64
	add sp, #0x90
	strb r0, [r4]
	pop {r4, pc}
_020768E0:
	ldr r1, _020769B0 ; =0x000004AF
	add r0, r4, #0
	bl sub_020772F8
	add r1, r4, #0
	add r1, #0x65
	strb r0, [r1]
	add r0, r4, #0
	mov r1, #0x1e
	add r0, #0x66
	strb r1, [r0]
	add r0, r4, #0
	add r0, #0x64
	ldrb r0, [r0]
	add r4, #0x64
	add sp, #0x90
	add r0, r0, #1
	strb r0, [r4]
	pop {r4, pc}
_02076906:
	ldr r0, [r4, #0x28]
	bl sub_02070DB0
	add r2, r0, #0
	ldr r0, [r4, #0xc]
	mov r1, #0
	bl BufferBoxMonNickname
	add r1, r4, #0
	add r1, #0x6e
	ldrb r1, [r1]
	ldr r0, [r4, #0x28]
	mov r2, #0
	add r1, #0x36
	bl GetMonData
	add r2, r0, #0
	ldr r0, [r4, #0xc]
	mov r1, #1
	bl BufferMoveName
	mov r1, #0x4b
	add r0, r4, #0
	lsl r1, r1, #4
	bl sub_020772F8
	add r1, r4, #0
	add r1, #0x65
	strb r0, [r1]
	add r0, r4, #0
	mov r1, #0x1e
	add r0, #0x66
	strb r1, [r0]
	add r0, r4, #0
	add r0, #0x64
	ldrb r0, [r0]
	add r4, #0x64
	add sp, #0x90
	add r0, r0, #1
	strb r0, [r4]
	pop {r4, pc}
_02076958:
	ldr r1, _020769B4 ; =0x000004B1
	add r0, r4, #0
	bl sub_020772F8
	add r1, r4, #0
	add r1, #0x65
	strb r0, [r1]
	add r0, r4, #0
	mov r1, #0x1e
	add r0, #0x66
	strb r1, [r0]
	add r0, r4, #0
	add r0, #0x64
	ldrb r0, [r0]
	add r4, #0x64
	add sp, #0x90
	add r0, r0, #1
	strb r0, [r4]
	pop {r4, pc}
_0207697E:
	ldr r0, [r4, #0x28]
	bl sub_02070DB0
	add r2, r0, #0
	ldr r0, [r4, #0xc]
	mov r1, #0
	bl BufferBoxMonNickname
	add r2, r4, #0
	add r2, #0x6c
	ldrh r2, [r2]
	ldr r0, [r4, #0xc]
	mov r1, #1
	bl BufferMoveName
	ldr r1, _020769B8 ; =0x000004B2
	b _020769BC
	.balign 4, 0
_020769A0: .word 0x0000FFFF
_020769A4: .word 0x020FFEC0
_020769A8: .word 0x000004AD
_020769AC: .word 0x000004AE
_020769B0: .word 0x000004AF
_020769B4: .word 0x000004B1
_020769B8: .word 0x000004B2
_020769BC:
	add r0, r4, #0
	bl sub_020772F8
	add r1, r4, #0
	add r1, #0x65
	strb r0, [r1]
	add r0, r4, #0
	add r2, r4, #0
	mov r1, #0
	add r0, #0x66
	strb r1, [r0]
	add r1, r4, #0
	add r1, #0x6e
	ldrb r1, [r1]
	ldr r0, [r4, #0x28]
	add r2, #0x66
	add r1, #0x3e
	bl sub_0206EC40
	add r1, r4, #0
	add r2, r4, #0
	add r1, #0x6c
	add r2, #0x6e
	ldrh r1, [r1]
	ldrb r2, [r2]
	ldr r0, [r4, #0x28]
	bl sub_020714E8
	add r0, r4, #0
	mov r1, #0x1e
	add r0, #0x66
	strb r1, [r0]
	mov r0, #0x25
	add r4, #0x64
	add sp, #0x90
	strb r0, [r4]
	pop {r4, pc}
_02076A06:
	add r0, r4, #0
	add r0, #0x65
	ldrb r0, [r0]
	bl sub_02020094
	cmp r0, #0
	bne _02076A44
	add r0, r4, #0
	add r0, #0x64
	ldrb r0, [r0]
	add r4, #0x64
	add sp, #0x90
	add r0, r0, #1
	strb r0, [r4]
	pop {r4, pc}
_02076A24:
	bl sub_02006BCC
	cmp r0, #0
	bne _02076A44
	add r0, r4, #0
	add r0, #0x66
	ldrb r0, [r0]
	sub r1, r0, #1
	add r0, r4, #0
	add r0, #0x66
	strb r1, [r0]
	add r0, r4, #0
	add r0, #0x66
	ldrb r0, [r0]
	cmp r0, #0
	beq _02076A46
_02076A44:
	b _02076C76
_02076A46:
	mov r0, #0xd
	add r4, #0x64
	add sp, #0x90
	strb r0, [r4]
	pop {r4, pc}
_02076A50:
	mov r1, #0
	str r1, [sp]
	mov r0, #0x10
	str r0, [sp, #4]
	str r1, [sp, #8]
	ldr r0, [r4, #0x14]
	ldr r2, _02076C7C ; =0x0000FFFF
	mov r1, #0xf
	mov r3, #1
	bl sub_02003370
	mov r1, #0
	str r1, [sp]
	ldr r0, [r4, #0x18]
	mov r2, #0x10
	add r3, r1, #0
	bl sub_020090E4
	add r0, r4, #0
	add r0, #0x64
	ldrb r0, [r0]
	add r4, #0x64
	add sp, #0x90
	add r0, r0, #1
	strb r0, [r4]
	pop {r4, pc}
_02076A84:
	ldr r0, [r4, #0x14]
	bl sub_02003B44
	cmp r0, #0
	bne _02076B54
	ldr r0, [r4, #0x30]
	bl sub_02077664
	add r0, r4, #0
	bl sub_02076C90
	mov r0, #1
	add r4, #0x67
	add sp, #0x90
	strb r0, [r4]
	pop {r4, pc}
_02076AA4:
	ldr r0, [r4, #0x14]
	bl sub_02003B44
	cmp r0, #0
	bne _02076B54
	mov r1, #0xc
	add r2, r1, #0
	ldr r0, [r4, #0x1c]
	add r2, #0xf4
	bl sub_020087A4
	mov r1, #0xd
	add r2, r1, #0
	ldr r0, [r4, #0x1c]
	add r2, #0xf3
	bl sub_020087A4
	ldr r0, [r4, #0x20]
	mov r1, #0xc
	mov r2, #0
	bl sub_020087A4
	ldr r0, [r4, #0x20]
	mov r1, #0xd
	mov r2, #0
	bl sub_020087A4
	ldr r0, [r4, #0x20]
	mov r1, #6
	mov r2, #1
	bl sub_020087A4
	mov r0, #0x10
	str r0, [sp]
	mov r3, #0
	ldr r0, _02076C80 ; =0x00007FFF
	str r3, [sp, #4]
	str r0, [sp, #8]
	ldr r0, [r4, #0x14]
	ldr r2, _02076C84 ; =0x0000F3FF
	mov r1, #0xf
	bl sub_02003370
	ldr r0, _02076C80 ; =0x00007FFF
	mov r2, #0
	str r0, [sp]
	ldr r0, [r4, #0x18]
	mov r1, #0x10
	add r3, r2, #0
	bl sub_020090E4
	add r0, r4, #0
	mov r1, #0
	add r0, #0x72
	strb r1, [r0]
	add r0, r4, #0
	add r0, #0x73
	strb r1, [r0]
	add r0, r4, #0
	mov r2, #0xff
	add r0, #0x74
	strb r2, [r0]
	add r0, r4, #0
	mov r2, #0xa0
	add r0, #0x75
	strb r2, [r0]
	add r0, r4, #0
	add r0, #0x70
	strb r1, [r0]
	ldr r0, _02076C88 ; =0x000003F3
	bl sub_02005EB4
	ldr r0, [r4, #0x30]
	bl sub_02077664
	add r0, r4, #0
	add r0, #0x64
	ldrb r0, [r0]
	add r4, #0x64
	add sp, #0x90
	add r0, r0, #1
	strb r0, [r4]
	pop {r4, pc}
_02076B4A:
	ldr r0, [r4, #0x14]
	bl sub_02003B44
	cmp r0, #0
	beq _02076B56
_02076B54:
	b _02076C76
_02076B56:
	mov r0, #2
	str r0, [sp]
	mov r0, #0
	str r0, [sp, #4]
	str r0, [sp, #8]
	add r3, r4, #0
	add r0, r4, #0
	add r3, #0x60
	add r0, #0x84
	ldrh r3, [r3]
	ldr r0, [r0]
	ldr r1, [r4, #0x44]
	ldr r2, [r4, #0x1c]
	bl sub_0207294C
	add r2, r4, #0
	add r0, r4, #0
	add r2, #0x60
	add r0, #0x84
	ldrh r2, [r2]
	ldr r0, [r0]
	add r1, sp, #0x18
	mov r3, #1
	bl sub_02072914
	ldr r0, [r4, #0x1c]
	add r1, sp, #0x18
	bl sub_020085C8
	ldr r0, [r4, #0x1c]
	mov r1, #0
	bl sub_02008550
	add r0, r4, #0
	add r1, r4, #0
	add r0, #0x60
	add r1, #0x80
	ldrh r0, [r0]
	ldrb r1, [r1]
	bl sub_02006218
	add r0, r4, #0
	add r0, #0x64
	ldrb r0, [r0]
	add r4, #0x64
	add sp, #0x90
	add r0, r0, #1
	strb r0, [r4]
	pop {r4, pc}
_02076BB8:
	bl sub_02006360
	cmp r0, #0
	bne _02076C76
	ldr r0, [r4, #0x44]
	mov r1, #0
	bl sub_02017068
	cmp r0, #1
	bne _02076C76
	ldr r0, [r4, #0x1c]
	bl sub_020085DC
	cmp r0, #0
	bne _02076C76
	ldr r0, [r4, #0x28]
	bl sub_02070DB0
	add r2, r0, #0
	ldr r0, [r4, #0xc]
	mov r1, #0
	bl BufferBoxMonNickname
	ldr r1, _02076C8C ; =0x00000397
	add r0, r4, #0
	bl sub_020772F8
	add r1, r4, #0
	add r1, #0x65
	strb r0, [r1]
	add r0, r4, #0
	mov r1, #0x14
	add r0, #0x66
	strb r1, [r0]
	add r0, r4, #0
	add r0, #0x64
	ldrb r0, [r0]
	add r4, #0x64
	add sp, #0x90
	add r0, r0, #1
	strb r0, [r4]
	pop {r4, pc}
_02076C0C:
	add r0, r4, #0
	add r0, #0x65
	ldrb r0, [r0]
	bl sub_02020094
	cmp r0, #0
	bne _02076C76
	add r0, r4, #0
	add r0, #0x66
	ldrb r0, [r0]
	sub r1, r0, #1
	add r0, r4, #0
	add r0, #0x66
	strb r1, [r0]
	add r0, r4, #0
	add r0, #0x66
	ldrb r0, [r0]
	cmp r0, #0
	bne _02076C76
	mov r1, #0
	str r1, [sp]
	mov r0, #0x10
	str r0, [sp, #4]
	str r1, [sp, #8]
	ldr r0, [r4, #0x14]
	ldr r2, _02076C7C ; =0x0000FFFF
	mov r1, #0xf
	mov r3, #1
	bl sub_02003370
	mov r1, #0
	str r1, [sp]
	ldr r0, [r4, #0x18]
	mov r2, #0x10
	add r3, r1, #0
	bl sub_020090E4
	add r0, r4, #0
	add r0, #0x64
	ldrb r0, [r0]
	add r4, #0x64
	add sp, #0x90
	add r0, r0, #1
	strb r0, [r4]
	pop {r4, pc}
_02076C66:
	ldr r0, [r4, #0x14]
	bl sub_02003B44
	cmp r0, #0
	bne _02076C76
	mov r0, #1
	add r4, #0x67
	strb r0, [r4]
_02076C76:
	add sp, #0x90
	pop {r4, pc}
	nop
_02076C7C: .word 0x0000FFFF
_02076C80: .word 0x00007FFF
_02076C84: .word 0x0000F3FF
_02076C88: .word 0x000003F3
_02076C8C: .word 0x00000397
	thumb_func_end sub_02075E14

	thumb_func_start sub_02076C90
sub_02076C90: ; 0x02076C90
	push {r4, r5, r6, lr}
	sub sp, #0x20
	add r4, r0, #0
	ldr r0, [r4, #0x78]
	cmp r0, #6
	bgt _02076CA4
	bne _02076CA0
	b _02076E50
_02076CA0:
	add sp, #0x20
	pop {r4, r5, r6, pc}
_02076CA4:
	sub r0, #0xd
	cmp r0, #6
	bhi _02076CE4
	add r0, r0, r0
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_02076CB6: ; jump table
	.short _02076CC4 - _02076CB6 - 2 ; case 0
	.short _02076CC4 - _02076CB6 - 2 ; case 1
	.short _02076E5E - _02076CB6 - 2 ; case 2
	.short _02076E5E - _02076CB6 - 2 ; case 3
	.short _02076E5E - _02076CB6 - 2 ; case 4
	.short _02076E50 - _02076CB6 - 2 ; case 5
	.short _02076E50 - _02076CB6 - 2 ; case 6
_02076CC4:
	ldr r0, [r4, #0x4c]
	ldr r2, [r4, #0x5c]
	mov r1, #4
	bl sub_02078550
	cmp r0, #0
	beq _02076CE4
	ldr r0, [r4, #0x24]
	bl GetPartyCount
	add r5, r0, #0
	ldr r0, [r4, #0x24]
	bl sub_0207463C
	cmp r5, r0
	blt _02076CE6
_02076CE4:
	b _02076E5E
_02076CE6:
	ldr r0, [r4, #0x5c]
	bl AllocMonZeroed
	add r5, r0, #0
	ldr r0, [r4, #0x28]
	add r1, r5, #0
	bl sub_0207188C
	mov r0, #0x49
	lsl r0, r0, #2
	str r0, [sp]
	add r0, r5, #0
	mov r1, #5
	add r2, sp, #0
	bl sub_0206EC40
	mov r0, #4
	str r0, [sp]
	add r0, r5, #0
	mov r1, #0x9b
	add r2, sp, #0
	bl sub_0206EC40
	mov r0, #0
	str r0, [sp]
	add r0, r5, #0
	mov r1, #6
	add r2, sp, #0
	bl sub_0206EC40
	add r0, r5, #0
	mov r1, #0xb
	add r2, sp, #0
	bl sub_0206EC40
	mov r1, #0x19
	str r1, [sp, #4]
	add r6, sp, #0
_02076D32:
	add r0, r5, #0
	add r2, r6, #0
	bl sub_0206EC40
	ldr r0, [sp, #4]
	add r1, r0, #1
	str r1, [sp, #4]
	cmp r1, #0x36
	blt _02076D32
	mov r1, #0x4e
	str r1, [sp, #4]
	add r6, sp, #0
_02076D4A:
	add r0, r5, #0
	add r2, r6, #0
	bl sub_0206EC40
	ldr r0, [sp, #4]
	add r1, r0, #1
	str r1, [sp, #4]
	cmp r1, #0x6e
	blt _02076D4A
	mov r1, #0x7b
	str r1, [sp, #4]
	add r6, sp, #0
_02076D62:
	add r0, r5, #0
	add r2, r6, #0
	bl sub_0206EC40
	ldr r0, [sp, #4]
	add r1, r0, #1
	str r1, [sp, #4]
	cmp r1, #0x90
	blt _02076D62
	add r0, r5, #0
	mov r1, #0xb5
	add r2, sp, #0
	bl sub_0206EC40
	add r0, r5, #0
	mov r1, #0xb6
	add r2, sp, #0
	bl sub_0206EC40
	add r0, r5, #0
	mov r1, #0xb7
	add r2, sp, #0
	bl sub_0206EC40
	add r0, r5, #0
	mov r1, #0xb8
	add r2, sp, #0
	bl sub_0206EC40
	add r0, r5, #0
	mov r1, #0xb9
	add r2, sp, #0
	bl sub_0206EC40
	add r0, r5, #0
	mov r1, #0xba
	add r2, sp, #0
	bl sub_0206EC40
	add r0, r5, #0
	mov r1, #0xbb
	add r2, sp, #0
	bl sub_0206EC40
	add r0, r5, #0
	mov r1, #0xb3
	mov r2, #0
	bl sub_0206EC40
	add r0, r5, #0
	mov r1, #0x4d
	add r2, sp, #0
	bl sub_0206EC40
	add r0, r5, #0
	mov r1, #0xa0
	add r2, sp, #0
	bl sub_0206EC40
	ldr r0, [r4, #0x5c]
	bl Mail_new
	add r6, r0, #0
	add r0, r5, #0
	mov r1, #0xaa
	add r2, r6, #0
	bl sub_0206EC40
	add r0, r6, #0
	bl FreeToHeap
	add r0, r5, #0
	mov r1, #0xa2
	add r2, sp, #0
	bl sub_0206EC40
	mov r0, #0
	add r1, sp, #8
	mov r2, #0x18
	bl MIi_CpuClearFast
	add r0, r5, #0
	mov r1, #0xab
	add r2, sp, #8
	bl sub_0206EC40
	add r0, r5, #0
	bl sub_020722D4
	add r0, r5, #0
	bl sub_0206E250
	ldr r0, [r4, #0x24]
	add r1, r5, #0
	bl sub_02074524
	ldr r0, [r4, #0x48]
	add r1, r5, #0
	bl Pokedex_SetMonCaughtFlag
	ldr r0, [r4, #0x50]
	mov r1, #0xd
	bl sub_0202D0FC
	ldr r0, [r4, #0x50]
	mov r1, #0x15
	bl sub_0202D1C0
	add r0, r5, #0
	bl FreeToHeap
	ldr r0, [r4, #0x4c]
	ldr r3, [r4, #0x5c]
	mov r1, #4
	mov r2, #1
	bl sub_02078434
	add sp, #0x20
	pop {r4, r5, r6, pc}
_02076E50:
	mov r0, #0
	str r0, [sp, #4]
	ldr r0, [r4, #0x28]
	mov r1, #6
	add r2, sp, #4
	bl sub_0206EC40
_02076E5E:
	add sp, #0x20
	pop {r4, r5, r6, pc}
	.balign 4, 0
	thumb_func_end sub_02076C90

	thumb_func_start sub_02076E64
sub_02076E64: ; 0x02076E64
	push {r4, r5, r6, lr}
	sub sp, #0xf0
	add r5, r0, #0
	add r4, r1, #0
	bl sub_02022C54
	ldr r6, _02077180 ; =0x020FFF34
	add r3, sp, #0x20
	mov r2, #5
_02076E76:
	ldmia r6!, {r0, r1}
	stmia r3!, {r0, r1}
	sub r2, r2, #1
	bne _02076E76
	add r0, sp, #0x20
	bl GX_SetBanks
	mov r1, #6
	mov r2, #2
	mov r0, #0
	lsl r1, r1, #0x18
	lsl r2, r2, #0x12
	bl MIi_CpuClear32
	mov r1, #0x62
	mov r2, #2
	mov r0, #0
	lsl r1, r1, #0x14
	lsl r2, r2, #0x10
	bl MIi_CpuClear32
	mov r1, #0x19
	mov r2, #1
	mov r0, #0
	lsl r1, r1, #0x16
	lsl r2, r2, #0x12
	bl MIi_CpuClear32
	mov r1, #0x66
	mov r2, #2
	mov r0, #0
	lsl r1, r1, #0x14
	lsl r2, r2, #0x10
	bl MIi_CpuClear32
	ldr r6, _02077184 ; =0x020FFED8
	add r3, sp, #0x10
	add r2, r3, #0
	ldmia r6!, {r0, r1}
	stmia r3!, {r0, r1}
	ldmia r6!, {r0, r1}
	stmia r3!, {r0, r1}
	add r0, r2, #0
	bl sub_0201ACB0
	ldr r6, _02077188 ; =0x020FFF90
	add r3, sp, #0x9c
	mov r2, #0xa
_02076ED6:
	ldmia r6!, {r0, r1}
	stmia r3!, {r0, r1}
	sub r2, r2, #1
	bne _02076ED6
	ldr r0, [r6]
	mov r1, #1
	str r0, [r3]
	add r0, r4, #0
	add r2, sp, #0x9c
	mov r3, #0
	bl sub_0201B1E4
	add r0, r4, #0
	mov r1, #1
	bl sub_0201CAE0
	add r0, r4, #0
	mov r1, #2
	add r2, sp, #0xb8
	mov r3, #0
	bl sub_0201B1E4
	add r0, r4, #0
	mov r1, #2
	bl sub_0201CAE0
	add r0, r4, #0
	mov r1, #3
	add r2, sp, #0xd4
	mov r3, #0
	bl sub_0201B1E4
	add r0, r4, #0
	mov r1, #3
	bl sub_0201CAE0
	ldr r1, _0207718C ; =0x04000008
	mov r0, #3
	ldrh r2, [r1]
	bic r2, r0
	mov r0, #1
	orr r2, r0
	strh r2, [r1]
	add r1, r0, #0
	bl GX_EngineAToggleLayers
	ldr r6, _02077190 ; =0x020FFFE4
	add r3, sp, #0x48
	mov r2, #0xa
_02076F38:
	ldmia r6!, {r0, r1}
	stmia r3!, {r0, r1}
	sub r2, r2, #1
	bne _02076F38
	ldr r0, [r6]
	mov r1, #4
	str r0, [r3]
	add r0, r4, #0
	add r2, sp, #0x48
	mov r3, #0
	bl sub_0201B1E4
	add r0, r4, #0
	mov r1, #4
	bl sub_0201CAE0
	add r0, r4, #0
	mov r1, #5
	add r2, sp, #0x64
	mov r3, #0
	bl sub_0201B1E4
	add r0, r4, #0
	mov r1, #5
	bl sub_0201CAE0
	add r0, r4, #0
	mov r1, #6
	add r2, sp, #0x80
	mov r3, #0
	bl sub_0201B1E4
	add r0, r4, #0
	mov r1, #6
	bl sub_0201CAE0
	ldr r0, [r5, #0x2c]
	bl sub_0202ADCC
	add r6, r0, #0
	lsl r0, r6, #0x18
	lsr r0, r0, #0x18
	str r0, [sp]
	ldr r0, [r5, #0x5c]
	mov r1, #1
	str r0, [sp, #4]
	add r0, r4, #0
	add r2, r1, #0
	mov r3, #0xa
	bl sub_0200EB80
	mov r1, #0
	str r1, [sp]
	str r1, [sp, #4]
	mov r0, #1
	str r0, [sp, #8]
	ldr r0, [r5, #0x5c]
	add r2, r4, #0
	str r0, [sp, #0xc]
	mov r0, #0x73
	mov r3, #3
	bl GfGfxLoader_LoadCharData
	mov r0, #0
	str r0, [sp]
	str r0, [sp, #4]
	mov r1, #1
	str r1, [sp, #8]
	ldr r0, [r5, #0x5c]
	add r2, r4, #0
	str r0, [sp, #0xc]
	mov r0, #0x73
	mov r3, #3
	bl GfGfxLoader_LoadScrnData
	mov r1, #0
	str r1, [sp]
	mov r0, #0x40
	str r0, [sp, #4]
	str r1, [sp, #8]
	ldr r0, [r5, #0x14]
	ldr r3, [r5, #0x5c]
	mov r1, #0x73
	mov r2, #8
	bl PaletteData_LoadNarc
	add r0, r6, #0
	bl sub_0200E640
	add r2, r0, #0
	mov r0, #0
	str r0, [sp]
	mov r0, #0x20
	str r0, [sp, #4]
	mov r0, #0xa0
	str r0, [sp, #8]
	ldr r0, [r5, #0x14]
	ldr r3, [r5, #0x5c]
	mov r1, #0x26
	bl PaletteData_LoadNarc
	mov r0, #0
	str r0, [sp]
	mov r0, #0x20
	str r0, [sp, #4]
	mov r0, #0xb0
	str r0, [sp, #8]
	ldr r0, [r5, #0x14]
	ldr r3, [r5, #0x5c]
	mov r1, #0x10
	mov r2, #8
	bl PaletteData_LoadNarc
	ldr r0, [r5, #0x5c]
	mov r1, #2
	str r0, [sp]
	ldr r0, [r5]
	mov r2, #1
	mov r3, #0
	bl sub_0200E398
	bl sub_0200E3D8
	add r2, r0, #0
	mov r0, #0
	str r0, [sp]
	mov r0, #0x20
	str r0, [sp, #4]
	mov r0, #0x80
	str r0, [sp, #8]
	ldr r0, [r5, #0x14]
	ldr r3, [r5, #0x5c]
	mov r1, #0x26
	bl PaletteData_LoadNarc
	mov r0, #1
	str r0, [sp]
	mov r0, #0xa0
	str r0, [sp, #4]
	mov r2, #0
	str r2, [sp, #8]
	ldr r0, [r5, #0x14]
	ldr r3, [r5, #0x5c]
	mov r1, #0xef
	bl PaletteData_LoadNarc
	mov r0, #1
	str r0, [sp]
	mov r0, #0x20
	str r0, [sp, #4]
	mov r0, #0x90
	str r0, [sp, #8]
	ldr r0, [r5, #0x14]
	ldr r3, [r5, #0x5c]
	mov r1, #0xef
	mov r2, #0xf
	bl PaletteData_LoadNarc
	mov r0, #1
	str r0, [sp]
	mov r0, #0x20
	str r0, [sp, #4]
	mov r0, #0xf0
	str r0, [sp, #8]
	ldr r0, [r5, #0x14]
	ldr r3, [r5, #0x5c]
	mov r1, #0x10
	mov r2, #9
	bl PaletteData_LoadNarc
	ldr r1, [r5, #0x5c]
	mov r0, #0xef
	bl NARC_ctor
	mov r1, #0
	str r1, [sp]
	str r1, [sp, #4]
	str r1, [sp, #8]
	ldr r1, [r5, #0x5c]
	add r2, r4, #0
	str r1, [sp, #0xc]
	mov r1, #0x10
	mov r3, #4
	add r6, r0, #0
	bl sub_02007B44
	mov r0, #0
	str r0, [sp]
	str r0, [sp, #4]
	str r0, [sp, #8]
	ldr r0, [r5, #0x5c]
	mov r1, #0x11
	str r0, [sp, #0xc]
	add r0, r6, #0
	add r2, r4, #0
	mov r3, #4
	bl sub_02007B68
	mov r0, #0
	str r0, [sp]
	str r0, [sp, #4]
	str r0, [sp, #8]
	ldr r0, [r5, #0x5c]
	mov r1, #1
	str r0, [sp, #0xc]
	add r0, r6, #0
	add r2, r4, #0
	mov r3, #5
	bl sub_02007B44
	mov r0, #0
	str r0, [sp]
	str r0, [sp, #4]
	str r0, [sp, #8]
	ldr r0, [r5, #0x5c]
	mov r1, #0xa
	str r0, [sp, #0xc]
	add r0, r6, #0
	add r2, r4, #0
	mov r3, #5
	bl sub_02007B68
	add r0, r6, #0
	bl NARC_dtor
	mov r0, #5
	mov r1, #0
	bl sub_0201BC28
	mov r0, #6
	mov r1, #0
	bl sub_0201BC28
	mov r0, #1
	lsl r0, r0, #0x1a
	ldr r1, [r0]
	ldr r2, _02077194 ; =0xFFFF1FFF
	add r3, r1, #0
	and r3, r2
	lsr r1, r0, #0xd
	orr r1, r3
	ldr r3, _02077198 ; =0x04001000
	str r1, [r0]
	ldr r1, [r3]
	and r1, r2
	str r1, [r3]
	add r3, r0, #0
	add r3, #0x48
	ldrh r4, [r3]
	mov r1, #0x3f
	mov r2, #0x1f
	bic r4, r1
	orr r2, r4
	strh r2, [r3]
	add r0, #0x4a
	ldrh r2, [r0]
	bic r2, r1
	mov r1, #0x12
	orr r1, r2
	strh r1, [r0]
	add r0, r5, #0
	mov r1, #0
	add r0, #0x72
	strb r1, [r0]
	add r0, r5, #0
	add r0, #0x73
	strb r1, [r0]
	add r0, r5, #0
	mov r1, #0xff
	add r0, #0x74
	strb r1, [r0]
	add r0, r5, #0
	mov r1, #0xa0
	add r0, #0x75
	strb r1, [r0]
	bl sub_02022D24
	mov r0, #0x10
	mov r1, #1
	bl GX_EngineAToggleLayers
	mov r0, #0x10
	mov r1, #1
	bl sub_02022CC8
	ldr r0, _0207719C ; =sub_02077270
	add r1, r5, #0
	bl sub_0201A0FC
	add sp, #0xf0
	pop {r4, r5, r6, pc}
	nop
_02077180: .word 0x020FFF34
_02077184: .word 0x020FFED8
_02077188: .word 0x020FFF90
_0207718C: .word 0x04000008
_02077190: .word 0x020FFFE4
_02077194: .word 0xFFFF1FFF
_02077198: .word 0x04001000
_0207719C: .word sub_02077270
	thumb_func_end sub_02076E64

	thumb_func_start sub_020771A0
sub_020771A0: ; 0x020771A0
	push {r4, lr}
	add r4, r0, #0
	mov r0, #1
	mov r1, #0
	bl GX_EngineAToggleLayers
	mov r0, #2
	mov r1, #0
	bl GX_EngineAToggleLayers
	add r0, r4, #0
	mov r1, #1
	bl sub_0201BB4C
	add r0, r4, #0
	mov r1, #2
	bl sub_0201BB4C
	add r0, r4, #0
	mov r1, #3
	bl sub_0201BB4C
	add r0, r4, #0
	mov r1, #4
	bl sub_0201BB4C
	add r0, r4, #0
	mov r1, #5
	bl sub_0201BB4C
	add r0, r4, #0
	mov r1, #6
	bl sub_0201BB4C
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_020771A0

	thumb_func_start sub_020771E8
sub_020771E8: ; 0x020771E8
	push {r3, r4, r5, lr}
	sub sp, #0x20
	add r4, r0, #0
	ldr r1, [r4, #0x28]
	add r0, sp, #0x10
	mov r2, #2
	bl sub_02070124
	mov r0, #0
	str r0, [sp]
	str r0, [sp, #4]
	str r0, [sp, #8]
	str r0, [sp, #0xc]
	ldr r0, [r4, #0x18]
	add r1, sp, #0x10
	mov r2, #0x80
	mov r3, #0x50
	bl sub_020085EC
	str r0, [r4, #0x1c]
	ldr r0, [r4, #0x5c]
	bl AllocMonZeroed
	add r5, r0, #0
	ldr r0, [r4, #0x28]
	add r1, r5, #0
	bl sub_0207188C
	add r2, r4, #0
	add r0, r5, #0
	mov r1, #5
	add r2, #0x62
	bl sub_0206EC40
	add r0, r5, #0
	bl sub_0206E250
	add r0, sp, #0x10
	add r1, r5, #0
	mov r2, #2
	bl sub_02070124
	add r0, r5, #0
	bl FreeToHeap
	mov r0, #0
	str r0, [sp]
	str r0, [sp, #4]
	str r0, [sp, #8]
	str r0, [sp, #0xc]
	ldr r0, [r4, #0x18]
	add r1, sp, #0x10
	mov r2, #0x80
	mov r3, #0x50
	bl sub_020085EC
	str r0, [r4, #0x20]
	mov r1, #0xc
	mov r2, #0
	bl sub_020087A4
	ldr r0, [r4, #0x20]
	mov r1, #0xd
	mov r2, #0
	bl sub_020087A4
	add sp, #0x20
	pop {r3, r4, r5, pc}
	thumb_func_end sub_020771E8

	thumb_func_start sub_02077270
sub_02077270: ; 0x02077270
	push {r3, r4, r5, lr}
	add r4, r0, #0
	add r0, #0x75
	ldrb r2, [r0]
	add r0, r4, #0
	add r0, #0x73
	ldrb r1, [r0]
	add r0, r4, #0
	add r0, #0x72
	ldrb r0, [r0]
	mov r3, #0xff
	lsl r3, r3, #8
	lsl r0, r0, #8
	add r5, r0, #0
	add r0, r4, #0
	add r0, #0x74
	lsl r1, r1, #8
	and r1, r3
	ldrb r0, [r0]
	and r5, r3
	orr r1, r2
	orr r5, r0
	ldr r0, _020772EC ; =0x04000040
	strh r5, [r0]
	strh r1, [r0, #4]
	ldr r0, [r4, #0x18]
	bl sub_02009418
	add r0, r4, #0
	add r0, #0xb8
	ldr r0, [r0]
	cmp r0, #0
	beq _020772CE
	add r0, r4, #0
	add r0, #0xb0
	ldr r0, [r0]
	cmp r0, #0
	bne _020772C0
	bl GF_AssertFail
_020772C0:
	add r0, r4, #0
	add r0, #0xb0
	ldr r0, [r0]
	bl sub_0200D020
	bl sub_0200D034
_020772CE:
	bl sub_0202061C
	ldr r0, [r4, #0x14]
	bl sub_0200398C
	ldr r0, [r4]
	bl sub_0201EEB4
	ldr r3, _020772F0 ; =OSi_IntrTable
	ldr r1, _020772F4 ; =0x00003FF8
	mov r0, #1
	ldr r2, [r3, r1]
	orr r0, r2
	str r0, [r3, r1]
	pop {r3, r4, r5, pc}
	.balign 4, 0
_020772EC: .word 0x04000040
_020772F0: .word OSi_IntrTable
_020772F4: .word 0x00003FF8
	thumb_func_end sub_02077270

	thumb_func_start sub_020772F8
sub_020772F8: ; 0x020772F8
	push {r4, r5, lr}
	sub sp, #0xc
	add r4, r0, #0
	ldr r0, [r4, #8]
	bl NewString_ReadMsgData
	add r5, r0, #0
	ldr r0, [r4, #0xc]
	ldr r1, [r4, #0x10]
	add r2, r5, #0
	bl StringExpandPlaceholders
	add r0, r5, #0
	bl FreeToHeap
	ldr r0, [r4, #4]
	mov r1, #0xff
	bl FillWindowPixelBuffer
	ldr r0, [r4, #0x2c]
	bl sub_0202AD3C
	mov r3, #0
	str r3, [sp]
	str r0, [sp, #4]
	ldr r0, _0207733C ; =sub_02077340
	mov r1, #1
	str r0, [sp, #8]
	ldr r0, [r4, #4]
	ldr r2, [r4, #0x10]
	bl AddTextPrinterParameterized
	add sp, #0xc
	pop {r4, r5, pc}
	.balign 4, 0
_0207733C: .word sub_02077340
	thumb_func_end sub_020772F8

	thumb_func_start sub_02077340
sub_02077340: ; 0x02077340
	push {r4, lr}
	mov r4, #0
	cmp r1, #5
	bhi _02077388
	add r0, r1, r1
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_02077354: ; jump table
	.short _02077388 - _02077354 - 2 ; case 0
	.short _02077360 - _02077354 - 2 ; case 1
	.short _02077368 - _02077354 - 2 ; case 2
	.short _02077370 - _02077354 - 2 ; case 3
	.short _02077378 - _02077354 - 2 ; case 4
	.short _02077380 - _02077354 - 2 ; case 5
_02077360:
	bl sub_02006198
	add r4, r0, #0
	b _02077388
_02077368:
	bl sub_02006BCC
	add r4, r0, #0
	b _02077388
_02077370:
	ldr r0, _0207738C ; =0x000004A4
	bl sub_02006B24
	b _02077388
_02077378:
	ldr r0, _02077390 ; =0x000005E6
	bl PlaySE
	b _02077388
_02077380:
	mov r0, #0x4a
	lsl r0, r0, #4
	bl sub_02006B24
_02077388:
	add r0, r4, #0
	pop {r4, pc}
	.balign 4, 0
_0207738C: .word 0x000004A4
_02077390: .word 0x000005E6
	thumb_func_end sub_02077340

	thumb_func_start sub_02077394
sub_02077394: ; 0x02077394
	push {r4, lr}
	add r4, r0, #0
	ldr r0, _020773A8 ; =0x02103A1C
	ldr r1, [r4, #0x3c]
	ldr r2, [r4, #0x5c]
	bl OverlayManager_new
	str r0, [r4, #0x38]
	pop {r4, pc}
	nop
_020773A8: .word 0x02103A1C
	thumb_func_end sub_02077394

	thumb_func_start sub_020773AC
sub_020773AC: ; 0x020773AC
	push {r3, lr}
	bl sub_02022C54
	bl sub_02022CBC
	mov r2, #1
	lsl r2, r2, #0x1a
	ldr r1, [r2]
	ldr r0, _020773CC ; =0xFFFFE0FF
	and r1, r0
	str r1, [r2]
	ldr r2, _020773D0 ; =0x04001000
	ldr r1, [r2]
	and r0, r1
	str r0, [r2]
	pop {r3, pc}
	.balign 4, 0
_020773CC: .word 0xFFFFE0FF
_020773D0: .word 0x04001000
	thumb_func_end sub_020773AC

	thumb_func_start sub_020773D4
sub_020773D4: ; 0x020773D4
	push {r3, lr}
	mov r0, #7
	str r0, [sp]
	ldr r0, _020773F8 ; =0x04000050
	mov r1, #0
	mov r2, #0xe
	mov r3, #0xb
	bl sub_020CF15C
	mov r0, #8
	str r0, [sp]
	ldr r0, _020773FC ; =0x04001050
	mov r1, #0
	mov r2, #0xe
	mov r3, #7
	bl sub_020CF15C
	pop {r3, pc}
	.balign 4, 0
_020773F8: .word 0x04000050
_020773FC: .word 0x04001050
	thumb_func_end sub_020773D4

	thumb_func_start sub_02077400
sub_02077400: ; 0x02077400
	push {r3, lr}
	sub sp, #8
	mov r2, #2
	ldr r1, _02077418 ; =sub_0207741C
	str r2, [sp]
	str r1, [sp, #4]
	mov r1, #0
	add r3, r1, #0
	bl sub_02026EB4
	add sp, #8
	pop {r3, pc}
	.balign 4, 0
_02077418: .word sub_0207741C
	thumb_func_end sub_02077400

	thumb_func_start sub_0207741C
sub_0207741C: ; 0x0207741C
	push {r3, lr}
	mov r0, #1
	add r1, r0, #0
	bl GX_EngineAToggleLayers
	ldr r0, _02077488 ; =0x04000008
	mov r1, #3
	ldrh r2, [r0]
	bic r2, r1
	mov r1, #1
	orr r1, r2
	strh r1, [r0]
	add r0, #0x58
	ldrh r2, [r0]
	ldr r1, _0207748C ; =0xFFFFCFFD
	and r2, r1
	strh r2, [r0]
	add r2, r1, #2
	ldrh r3, [r0]
	add r1, r1, #2
	and r3, r2
	mov r2, #0x10
	orr r2, r3
	strh r2, [r0]
	ldrh r3, [r0]
	ldr r2, _02077490 ; =0x0000CFFB
	and r3, r2
	strh r3, [r0]
	ldrh r3, [r0]
	sub r2, #0x1c
	and r3, r1
	mov r1, #8
	orr r1, r3
	strh r1, [r0]
	ldrh r1, [r0]
	and r1, r2
	strh r1, [r0]
	mov r0, #0
	add r1, r0, #0
	add r2, r0, #0
	add r3, r0, #0
	bl G3X_SetFog
	mov r0, #0
	ldr r2, _02077494 ; =0x00007FFF
	add r1, r0, #0
	mov r3, #0x3f
	str r0, [sp]
	bl G3X_SetClearColor
	ldr r1, _02077498 ; =0xBFFF0000
	ldr r0, _0207749C ; =0x04000580
	str r1, [r0]
	pop {r3, pc}
	.balign 4, 0
_02077488: .word 0x04000008
_0207748C: .word 0xFFFFCFFD
_02077490: .word 0x0000CFFB
_02077494: .word 0x00007FFF
_02077498: .word 0xBFFF0000
_0207749C: .word 0x04000580
	thumb_func_end sub_0207741C

	thumb_func_start sub_020774A0
sub_020774A0: ; 0x020774A0
	push {r3, r4, r5, lr}
	ldr r3, _020774D8 ; =0x02110924
	mov r0, #2
	mov r1, #0
	ldr r3, [r3]
	lsl r0, r0, #0xe
	add r2, r1, #0
	blx r3
	ldr r3, _020774DC ; =0x0211092C
	mov r1, #0
	add r4, r0, #0
	ldr r3, [r3]
	mov r0, #0xa0
	add r2, r1, #0
	blx r3
	add r5, r0, #0
	cmp r4, #0
	bne _020774C8
	bl GF_AssertFail
_020774C8:
	cmp r5, #0
	bne _020774D0
	bl GF_AssertFail
_020774D0:
	bl sub_02014DA0
	pop {r3, r4, r5, pc}
	nop
_020774D8: .word 0x02110924
_020774DC: .word 0x0211092C
	thumb_func_end sub_020774A0

	thumb_func_start sub_020774E0
sub_020774E0: ; 0x020774E0
	push {r3, lr}
	bl sub_02026E48
	bl sub_0201543C
	cmp r0, #0
	ble _020774F6
	bl sub_02026E48
	bl sub_020B7350
_020774F6:
	bl sub_02015460
	mov r0, #1
	mov r1, #0
	bl sub_02026E50
	pop {r3, pc}
	thumb_func_end sub_020774E0

	thumb_func_start sub_02077504
sub_02077504: ; 0x02077504
	push {r4, lr}
	ldr r3, _0207751C ; =0x02110924
	mov r2, #0
	ldr r3, [r3]
	blx r3
	add r4, r0, #0
	bl sub_02015354
	lsl r0, r4, #0x10
	lsr r0, r0, #0xd
	pop {r4, pc}
	nop
_0207751C: .word 0x02110924
	thumb_func_end sub_02077504

	thumb_func_start sub_02077520
sub_02077520: ; 0x02077520
	push {r4, lr}
	ldr r3, _02077538 ; =0x0211092C
	mov r2, #0
	ldr r3, [r3]
	blx r3
	add r4, r0, #0
	bl sub_02015394
	lsl r0, r4, #0x10
	lsr r0, r0, #0xd
	pop {r4, pc}
	nop
_02077538: .word 0x0211092C
	thumb_func_end sub_02077520

	thumb_func_start sub_0207753C
sub_0207753C: ; 0x0207753C
	push {r4, lr}
	sub sp, #8
	mov r1, #0x12
	lsl r1, r1, #0xa
	add r4, r0, #0
	bl AllocFromHeap
	add r2, r0, #0
	mov r0, #1
	str r0, [sp]
	mov r3, #0x12
	ldr r0, _0207757C ; =sub_02077504
	ldr r1, _02077580 ; =sub_02077520
	lsl r3, r3, #0xa
	str r4, [sp, #4]
	bl sub_02014DB4
	add r4, r0, #0
	bl sub_02015524
	add r2, r0, #0
	beq _02077574
	mov r0, #1
	mov r1, #0xe1
	lsl r0, r0, #0xc
	lsl r1, r1, #0xe
	bl sub_02023240
_02077574:
	add r0, r4, #0
	add sp, #8
	pop {r4, pc}
	nop
_0207757C: .word sub_02077504
_02077580: .word sub_02077520
	thumb_func_end sub_0207753C

	thumb_func_start sub_02077584
sub_02077584: ; 0x02077584
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	add r6, r1, #0
	add r7, r2, #0
	bl sub_0207753C
	add r4, r0, #0
	add r0, r6, #0
	add r1, r7, #0
	add r2, r5, #0
	bl sub_02015264
	add r1, r0, #0
	add r0, r4, #0
	mov r2, #0xa
	mov r3, #1
	bl sub_0201526C
	add r0, r4, #0
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_02077584

	thumb_func_start sub_020775AC
sub_020775AC: ; 0x020775AC
	push {r3, r4, r5, lr}
	add r5, r0, #0
	bl sub_020154D0
	add r4, r0, #0
	add r0, r5, #0
	bl sub_02014EBC
	add r0, r4, #0
	bl FreeToHeap
	pop {r3, r4, r5, pc}
	thumb_func_end sub_020775AC

	thumb_func_start sub_020775C4
sub_020775C4: ; 0x020775C4
	push {r3}
	sub sp, #0xc
	add r1, sp, #0
	mov r2, #0
	str r2, [r1]
	str r2, [r1, #4]
	str r2, [r1, #8]
	mov r1, #0x56
	lsl r1, r1, #4
	str r2, [sp]
	str r2, [sp, #8]
	str r1, [sp, #4]
	ldr r1, [r0, #0x20]
	ldr r1, [r1]
	ldr r1, [r1, #4]
	add r1, r2, r1
	str r1, [r0, #0x28]
	ldr r1, [r0, #0x20]
	ldr r2, [sp, #4]
	ldr r1, [r1]
	ldr r1, [r1, #8]
	add r1, r2, r1
	str r1, [r0, #0x2c]
	ldr r1, [r0, #0x20]
	ldr r2, [sp, #8]
	ldr r1, [r1]
	ldr r1, [r1, #0xc]
	add r1, r2, r1
	str r1, [r0, #0x30]
	add sp, #0xc
	pop {r3}
	bx lr
	thumb_func_end sub_020775C4

	thumb_func_start sub_02077604
sub_02077604: ; 0x02077604
	push {r3, r4, r5, lr}
	add r5, r0, #0
	ldr r0, [r5]
	mov r1, #0x10
	bl AllocFromHeap
	add r4, r0, #0
	bne _02077618
	bl GF_AssertFail
_02077618:
	ldr r0, [r5]
	ldr r2, [r5, #4]
	mov r1, #0x77
	str r0, [r4]
	str r2, [r4, #4]
	ldr r0, [r4]
	bl sub_02077584
	mov r1, #1
	str r0, [r4, #0xc]
	bl sub_02015528
	add r0, r4, #0
	pop {r3, r4, r5, pc}
	thumb_func_end sub_02077604

	thumb_func_start sub_02077634
sub_02077634: ; 0x02077634
	push {r4, lr}
	add r4, r0, #0
	ldr r0, [r4, #0xc]
	ldr r2, _0207764C ; =sub_020775C4
	add r3, r4, #0
	bl sub_02015494
	ldr r0, [r4, #0xc]
	mov r1, #1
	bl sub_02015528
	pop {r4, pc}
	.balign 4, 0
_0207764C: .word sub_020775C4
	thumb_func_end sub_02077634

	thumb_func_start sub_02077650
sub_02077650: ; 0x02077650
	push {r3, lr}
	ldr r0, [r0, #0xc]
	bl sub_020154B0
	cmp r0, #0
	beq _02077660
	mov r0, #1
	pop {r3, pc}
_02077660:
	mov r0, #0
	pop {r3, pc}
	thumb_func_end sub_02077650

	thumb_func_start sub_02077664
sub_02077664: ; 0x02077664
	push {r4, lr}
	add r4, r0, #0
	ldr r0, [r4, #0xc]
	bl sub_020775AC
	add r0, r4, #0
	bl FreeToHeap
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_02077664

	thumb_func_start sub_02077678
sub_02077678: ; 0x02077678
	push {r4, lr}
	add r4, r0, #0
	cmp r4, #0x17
	blo _02077684
	bl GF_AssertFail
_02077684:
	ldr r0, _0207768C ; =0x02100048
	lsl r1, r4, #2
	ldr r0, [r0, r1]
	pop {r4, pc}
	.balign 4, 0
_0207768C: .word 0x02100048
	thumb_func_end sub_02077678

	thumb_func_start sub_02077690
sub_02077690: ; 0x02077690
	mov r0, #0x4a
	bx lr
	thumb_func_end sub_02077690

	thumb_func_start sub_02077694
sub_02077694: ; 0x02077694
	mov r0, #0xf2
	bx lr
	thumb_func_end sub_02077694

	thumb_func_start sub_02077698
sub_02077698: ; 0x02077698
	mov r0, #0xf3
	bx lr
	thumb_func_end sub_02077698

	thumb_func_start sub_0207769C
sub_0207769C: ; 0x0207769C
	push {r4, lr}
	add r4, r0, #0
	cmp r4, #0x17
	blo _020776A8
	bl GF_AssertFail
_020776A8:
	ldr r0, _020776B0 ; =0x021000A4
	ldrb r0, [r0, r4]
	pop {r4, pc}
	nop
_020776B0: .word 0x021000A4
	thumb_func_end sub_0207769C

	thumb_func_start sub_020776B4
sub_020776B4: ; 0x020776B4
	mov r0, #8
	bx lr
	thumb_func_end sub_020776B4

	thumb_func_start sub_020776B8
sub_020776B8: ; 0x020776B8
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x10
	add r7, r3, #0
	add r5, r0, #0
	add r6, r1, #0
	add r4, r2, #0
	bl sub_020776B4
	str r0, [sp, #0xc]
	add r0, r7, #0
	bl sub_02077678
	add r3, r0, #0
	mov r0, #1
	str r0, [sp]
	ldr r0, [sp, #0x28]
	str r4, [sp, #4]
	str r0, [sp, #8]
	ldr r2, [sp, #0xc]
	add r0, r5, #0
	add r1, r6, #0
	bl sub_0200D4A4
	add sp, #0x10
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_020776B8

	thumb_func_start sub_020776EC
sub_020776EC: ; 0x020776EC
	push {r4, r5, r6, r7, lr}
	sub sp, #0x14
	add r6, r0, #0
	add r7, r1, #0
	add r5, r2, #0
	add r4, r3, #0
	bl sub_020776B4
	str r0, [sp, #0x10]
	bl sub_02077690
	add r3, r0, #0
	mov r0, #0
	str r0, [sp]
	mov r0, #3
	str r0, [sp, #4]
	str r5, [sp, #8]
	ldr r2, [sp, #0x10]
	add r0, r6, #0
	add r1, r7, #0
	str r4, [sp, #0xc]
	bl sub_0200D564
	add sp, #0x14
	pop {r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_020776EC

	thumb_func_start sub_02077720
sub_02077720: ; 0x02077720
	push {r4, r5, r6, r7, lr}
	sub sp, #0x1c
	add r5, r0, #0
	add r6, r1, #0
	add r7, r2, #0
	str r3, [sp, #0x18]
	bl sub_020776B4
	add r4, r0, #0
	bl sub_02077690
	str r4, [sp]
	str r0, [sp, #4]
	mov r0, #0
	str r0, [sp, #8]
	mov r0, #3
	str r0, [sp, #0xc]
	ldr r0, [sp, #0x30]
	ldr r3, [sp, #0x18]
	str r0, [sp, #0x10]
	ldr r0, [sp, #0x34]
	add r1, r6, #0
	str r0, [sp, #0x14]
	add r0, r5, #0
	add r2, r7, #0
	bl sub_0200D644
	add sp, #0x1c
	pop {r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_02077720

	thumb_func_start sub_0207775C
sub_0207775C: ; 0x0207775C
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	add r5, r0, #0
	add r4, r1, #0
	add r6, r2, #0
	add r7, r3, #0
	bl sub_020776B4
	str r0, [sp, #8]
	bl sub_02077694
	add r3, r0, #0
	mov r0, #1
	str r0, [sp]
	ldr r2, [sp, #8]
	add r0, r5, #0
	add r1, r4, #0
	str r6, [sp, #4]
	bl sub_0200D6D4
	bl sub_020776B4
	add r6, r0, #0
	bl sub_02077698
	add r3, r0, #0
	mov r0, #1
	str r0, [sp]
	add r0, r5, #0
	add r1, r4, #0
	add r2, r6, #0
	str r7, [sp, #4]
	bl sub_0200D704
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
	thumb_func_end sub_0207775C

	thumb_func_start sub_020777A4
sub_020777A4: ; 0x020777A4
	ldr r3, _020777A8 ; =sub_0200D958
	bx r3
	.balign 4, 0
_020777A8: .word sub_0200D958
	thumb_func_end sub_020777A4

	thumb_func_start sub_020777AC
sub_020777AC: ; 0x020777AC
	ldr r3, _020777B0 ; =sub_0200D968
	bx r3
	.balign 4, 0
_020777B0: .word sub_0200D968
	thumb_func_end sub_020777AC

	thumb_func_start sub_020777B4
sub_020777B4: ; 0x020777B4
	push {r3, r4, r5, lr}
	add r5, r0, #0
	add r4, r2, #0
	bl sub_0200D978
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0200D988
	pop {r3, r4, r5, pc}
	thumb_func_end sub_020777B4

	thumb_func_start sub_020777C8
sub_020777C8: ; 0x020777C8
	push {r4, r5, r6, r7, lr}
	sub sp, #0x34
	add r6, r3, #0
	add r4, r0, #0
	add r7, r1, #0
	add r5, sp, #0
	mov r3, #6
_020777D6:
	ldmia r6!, {r0, r1}
	stmia r5!, {r0, r1}
	sub r3, r3, #1
	bne _020777D6
	ldr r0, [r6]
	str r0, [r5]
	add r0, r2, #0
	bl sub_0207769C
	str r0, [sp, #0xc]
	add r0, r4, #0
	add r1, r7, #0
	add r2, sp, #0
	bl sub_0200D734
	add sp, #0x34
	pop {r4, r5, r6, r7, pc}
	thumb_func_end sub_020777C8

	thumb_func_start sub_020777F8
sub_020777F8: ; 0x020777F8
	ldr r3, _020777FC ; =sub_0200D9DC
	bx r3
	.balign 4, 0
_020777FC: .word sub_0200D9DC
	thumb_func_end sub_020777F8

	thumb_func_start sub_02077800
sub_02077800: ; 0x02077800
	push {r4, lr}
	add r4, r0, #0
	cmp r4, #3
	blo _0207780C
	bl GF_AssertFail
_0207780C:
	ldr r0, _02077814 ; =0x0210003C
	lsl r1, r4, #2
	ldr r0, [r0, r1]
	pop {r4, pc}
	.balign 4, 0
_02077814: .word 0x0210003C
	thumb_func_end sub_02077800

	thumb_func_start sub_02077818
sub_02077818: ; 0x02077818
	push {r4, lr}
	add r4, r0, #0
	cmp r4, #3
	blo _02077824
	bl GF_AssertFail
_02077824:
	ldr r0, _0207782C ; =0x02100038
	ldrb r0, [r0, r4]
	pop {r4, pc}
	nop
_0207782C: .word 0x02100038
	thumb_func_end sub_02077818

	thumb_func_start sub_02077830
sub_02077830: ; 0x02077830
	mov r0, #8
	bx lr
	thumb_func_end sub_02077830

	thumb_func_start sub_02077834
sub_02077834: ; 0x02077834
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x10
	add r7, r3, #0
	add r5, r0, #0
	add r6, r1, #0
	add r4, r2, #0
	bl sub_02077830
	str r0, [sp, #0xc]
	add r0, r7, #0
	bl sub_02077800
	add r3, r0, #0
	mov r0, #1
	str r0, [sp]
	ldr r0, [sp, #0x28]
	str r4, [sp, #4]
	str r0, [sp, #8]
	ldr r2, [sp, #0xc]
	add r0, r5, #0
	add r1, r6, #0
	bl sub_0200D4A4
	add sp, #0x10
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_02077834

	thumb_func_start sub_02077868
sub_02077868: ; 0x02077868
	ldr r3, _0207786C ; =sub_0200D958
	bx r3
	.balign 4, 0
_0207786C: .word sub_0200D958
	thumb_func_end sub_02077868

	thumb_func_start sub_02077870
sub_02077870: ; 0x02077870
	ldr r3, _02077874 ; =sub_0200D9DC
	bx r3
	.balign 4, 0
_02077874: .word sub_0200D9DC
	thumb_func_end sub_02077870

	thumb_func_start sub_02077878
sub_02077878: ; 0x02077878
	push {r4, lr}
	mov r1, #0x7c
	bl AllocFromHeap
	mov r1, #0
	mov r2, #0x7c
	add r4, r0, #0
	bl memset
	add r0, r4, #0
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_02077878

	thumb_func_start sub_02077890
sub_02077890: ; 0x02077890
	mov r0, #0x7c
	bx lr
	thumb_func_end sub_02077890

	thumb_func_start sub_02077894
sub_02077894: ; 0x02077894
	add r0, #0x65
	strb r1, [r0]
	bx lr
	.balign 4, 0
	thumb_func_end sub_02077894

	thumb_func_start sub_0207789C
sub_0207789C: ; 0x0207789C
	push {r4, r5, r6, lr}
	add r4, r1, #0
	add r1, r2, #0
	add r5, r0, #0
	add r6, r3, #0
	bl sub_02077894
	ldr r0, [sp, #0x10]
	str r4, [r5]
	str r0, [r5, #0x78]
	str r6, [r5, #0x6c]
	mov r0, #0
	add r5, #0x66
	strh r0, [r5]
	pop {r4, r5, r6, pc}
	.balign 4, 0
	thumb_func_end sub_0207789C

	thumb_func_start sub_020778BC
sub_020778BC: ; 0x020778BC
	mov r3, #0xc
	mul r3, r2
	add r0, r0, r3
	str r1, [r0, #4]
	strb r2, [r0, #0xc]
	bx lr
	thumb_func_end sub_020778BC

	thumb_func_start sub_020778C8
sub_020778C8: ; 0x020778C8
	add r1, r0, #0
	add r1, #0x76
	ldrh r2, [r1]
	mov r1, #1
	add r0, #0x76
	bic r2, r1
	mov r1, #1
	orr r1, r2
	strh r1, [r0]
	bx lr
	thumb_func_end sub_020778C8

	thumb_func_start sub_020778DC
sub_020778DC: ; 0x020778DC
	str r1, [r0, #0x70]
	bx lr
	thumb_func_end sub_020778DC

	thumb_func_start sub_020778E0
sub_020778E0: ; 0x020778E0
	add r0, #0x74
	strb r1, [r0]
	bx lr
	.balign 4, 0
	thumb_func_end sub_020778E0

	thumb_func_start sub_020778E8
sub_020778E8: ; 0x020778E8
	add r2, r0, #0
	add r2, #0x76
	ldrh r3, [r2]
	ldr r2, _02077900 ; =0xFFFF0001
	lsl r1, r1, #0x11
	and r2, r3
	lsr r1, r1, #0x10
	orr r1, r2
	add r0, #0x76
	strh r1, [r0]
	bx lr
	nop
_02077900: .word 0xFFFF0001
	thumb_func_end sub_020778E8

	thumb_func_start sub_02077904
sub_02077904: ; 0x02077904
	add r0, #0x66
	ldrh r0, [r0]
	bx lr
	.balign 4, 0
	thumb_func_end sub_02077904

	thumb_func_start sub_0207790C
sub_0207790C: ; 0x0207790C
	add r0, #0x68
	ldrh r0, [r0]
	bx lr
	.balign 4, 0
	thumb_func_end sub_0207790C

	thumb_func_start sub_02077914
sub_02077914: ; 0x02077914
	add r0, #0x74
	ldrb r0, [r0]
	bx lr
	.balign 4, 0
	thumb_func_end sub_02077914

	thumb_func_start sub_0207791C
sub_0207791C: ; 0x0207791C
	add r0, #0x75
	ldrb r0, [r0]
	bx lr
	.balign 4, 0
	thumb_func_end sub_0207791C

	thumb_func_start sub_02077924
sub_02077924: ; 0x02077924
	push {r3, lr}
	bl Sav2_PlayerData_GetCoinsAddr
	bl sub_0202C950
	pop {r3, pc}
	thumb_func_end sub_02077924

	thumb_func_start sub_02077930
sub_02077930: ; 0x02077930
	push {r4, r5, r6, lr}
	bl sub_0202CBE8
	add r6, r0, #0
	mov r5, #0
	mov r4, #1
_0207793C:
	add r0, r6, #0
	add r1, r4, #0
	bl sub_0202CD94
	add r4, r4, #1
	add r5, r5, r0
	cmp r4, #0x50
	bls _0207793C
	add r0, r5, #0
	pop {r4, r5, r6, pc}
	thumb_func_end sub_02077930

	thumb_func_start sub_02077950
sub_02077950: ; 0x02077950
	push {r3, lr}
	bl sub_0202C028
	bl sub_0202B9E0
	bl sub_0202BACC
	pop {r3, pc}
	thumb_func_end sub_02077950

	thumb_func_start sub_02077960
sub_02077960: ; 0x02077960
	push {r3, lr}
	bl sub_0202C028
	bl sub_0202B9E0
	bl sub_0202BAE8
	pop {r3, pc}
	thumb_func_end sub_02077960

	thumb_func_start sub_02077970
sub_02077970: ; 0x02077970
	push {r3, lr}
	bl sub_0202D918
	mov r1, #0
	add r2, r1, #0
	bl sub_0202D3F8
	pop {r3, pc}
	thumb_func_end sub_02077970

	thumb_func_start sub_02077980
sub_02077980: ; 0x02077980
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	add r7, r0, #0
	str r1, [sp, #8]
	add r5, r2, #0
	add r4, r3, #0
	mov r0, #0
	mov r1, #0x1b
	mov r2, #0xa
	bl NewMsgDataFromNarc
	add r6, r0, #0
	add r0, r4, #0
	bl ScrStrBufs_new
	add r4, r0, #0
	cmp r5, #0
	bne _020779B0
	add r0, r6, #0
	mov r1, #0x66
	bl NewString_ReadMsgData
	add r5, r0, #0
	b _02077A82
_020779B0:
	mov r1, #0x1b
	lsl r1, r1, #4
	cmp r5, r1
	bne _020779DC
	add r0, r6, #0
	mov r1, #0x64
	bl NewString_ReadMsgData
	add r5, r0, #0
	add r0, r7, #0
	bl sub_02077970
	mov r1, #0
	add r2, r0, #0
	str r1, [sp]
	mov r0, #1
	str r0, [sp, #4]
	add r0, r4, #0
	mov r3, #4
	bl BufferIntegerAsString
	b _02077A82
_020779DC:
	add r2, r1, #2
	cmp r5, r2
	bne _02077A06
	add r0, r6, #0
	mov r1, #0x5f
	bl NewString_ReadMsgData
	add r5, r0, #0
	add r0, r7, #0
	bl sub_02077930
	mov r1, #0
	add r2, r0, #0
	str r1, [sp]
	mov r0, #1
	str r0, [sp, #4]
	add r0, r4, #0
	mov r3, #4
	bl BufferIntegerAsString
	b _02077A82
_02077A06:
	add r2, r1, #3
	cmp r5, r2
	bne _02077A48
	add r0, r6, #0
	mov r1, #0x60
	bl NewString_ReadMsgData
	add r5, r0, #0
	add r0, r7, #0
	bl sub_02077950
	mov r1, #0
	add r2, r0, #0
	str r1, [sp]
	mov r0, #1
	str r0, [sp, #4]
	add r0, r4, #0
	mov r3, #3
	bl BufferIntegerAsString
	add r0, r7, #0
	bl sub_02077960
	add r2, r0, #0
	mov r0, #0
	str r0, [sp]
	mov r1, #1
	add r0, r4, #0
	mov r3, #2
	str r1, [sp, #4]
	bl BufferIntegerAsString
	b _02077A82
_02077A48:
	add r1, #0xc
	cmp r5, r1
	bne _02077A72
	add r0, r6, #0
	mov r1, #0x3a
	bl NewString_ReadMsgData
	add r5, r0, #0
	add r0, r7, #0
	bl sub_02077924
	mov r1, #0
	add r2, r0, #0
	str r1, [sp]
	mov r0, #1
	str r0, [sp, #4]
	add r0, r4, #0
	mov r3, #5
	bl BufferIntegerAsString
	b _02077A82
_02077A72:
	bl ScrStrBufs_delete
	add r0, r6, #0
	bl DestroyMsgData
	add sp, #0xc
	mov r0, #0
	pop {r4, r5, r6, r7, pc}
_02077A82:
	ldr r1, [sp, #8]
	add r0, r4, #0
	add r2, r5, #0
	bl StringExpandPlaceholders
	add r0, r5, #0
	bl String_dtor
	add r0, r4, #0
	bl ScrStrBufs_delete
	add r0, r6, #0
	bl DestroyMsgData
	mov r0, #1
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
	thumb_func_end sub_02077980

	thumb_func_start sub_02077AA4
sub_02077AA4: ; 0x02077AA4
	push {r3, r4, r5, r6, r7, lr}
	add r5, r1, #0
	str r0, [sp]
	ldr r4, [sp, #0x18]
	cmp r3, #1
	beq _02077ABA
	cmp r3, #2
	beq _02077AD8
	cmp r3, #3
	beq _02077AF6
	b _02077B14
_02077ABA:
	mov r0, #1
	mov r1, #0x1b
	mov r2, #0xa
	add r3, r4, #0
	bl NewMsgDataFromNarc
	add r4, r0, #0
	mov r1, #0x39
	add r2, r5, #0
	bl ReadMsgDataIntoString
	add r0, r4, #0
	bl DestroyMsgData
	pop {r3, r4, r5, r6, r7, pc}
_02077AD8:
	mov r0, #1
	mov r1, #0x1b
	mov r2, #0xa
	add r3, r4, #0
	bl NewMsgDataFromNarc
	add r4, r0, #0
	mov r1, #0x76
	add r2, r5, #0
	bl ReadMsgDataIntoString
	add r0, r4, #0
	bl DestroyMsgData
	pop {r3, r4, r5, r6, r7, pc}
_02077AF6:
	mov r0, #1
	mov r1, #0x1b
	mov r2, #0xa
	add r3, r4, #0
	bl NewMsgDataFromNarc
	add r4, r0, #0
	mov r1, #0x77
	add r2, r5, #0
	bl ReadMsgDataIntoString
	add r0, r4, #0
	bl DestroyMsgData
	pop {r3, r4, r5, r6, r7, pc}
_02077B14:
	mov r0, #1
	mov r1, #0x1b
	mov r2, #0x28
	add r3, r4, #0
	bl NewMsgDataFromNarc
	add r7, r0, #0
	add r0, r4, #0
	bl ScrStrBufs_new
	add r4, r0, #0
	add r0, r7, #0
	mov r1, #0x25
	bl NewString_ReadMsgData
	add r6, r0, #0
	ldr r2, [sp]
	add r0, r4, #0
	mov r1, #0
	bl BufferPlayersName
	add r0, r4, #0
	add r1, r5, #0
	add r2, r6, #0
	bl StringExpandPlaceholders
	add r0, r6, #0
	bl String_dtor
	add r0, r4, #0
	bl ScrStrBufs_delete
	add r0, r7, #0
	bl DestroyMsgData
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_02077AA4

	thumb_func_start sub_02077B5C
sub_02077B5C: ; 0x02077B5C
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x10
	add r6, r0, #0
	add r0, r1, #0
	str r1, [sp]
	str r2, [sp, #4]
	cmp r0, r2
	beq _02077C10
	ldr r1, _02077C14 ; =0x021000BC
	lsl r0, r3, #1
	str r0, [sp, #8]
	ldrh r0, [r1, r0]
	str r0, [sp, #0xc]
	ldr r1, [sp, #0xc]
	ldr r0, [sp, #0x28]
	lsl r1, r1, #2
	bl AllocFromHeap
	mov r2, #0
	ldr r3, [sp, #0xc]
	add r1, r2, #0
	cmp r3, #0
	ble _02077BCE
	ldr r4, [sp]
	add r3, r6, #0
	lsl r4, r4, #2
	add r4, r6, r4
	mov ip, r4
_02077B94:
	ldr r4, [sp]
	cmp r4, r1
	beq _02077BC0
	ldr r4, [sp, #4]
	cmp r4, r2
	bne _02077BB2
	mov r4, ip
	ldrh r4, [r4]
	lsl r5, r2, #2
	add r7, r0, r5
	strh r4, [r0, r5]
	mov r4, ip
	ldrh r4, [r4, #2]
	add r2, r2, #1
	strh r4, [r7, #2]
_02077BB2:
	ldrh r4, [r3]
	lsl r5, r2, #2
	add r7, r0, r5
	strh r4, [r0, r5]
	ldrh r4, [r3, #2]
	add r2, r2, #1
	strh r4, [r7, #2]
_02077BC0:
	ldr r5, _02077C14 ; =0x021000BC
	ldr r4, [sp, #8]
	add r1, r1, #1
	ldrh r4, [r5, r4]
	add r3, r3, #4
	cmp r1, r4
	blt _02077B94
_02077BCE:
	ldr r1, [sp, #0xc]
	sub r3, r1, #1
	ldr r1, [sp, #4]
	cmp r1, r3
	bne _02077BEA
	lsl r1, r2, #2
	ldr r2, [sp]
	add r3, r0, r1
	lsl r2, r2, #2
	add r4, r6, r2
	ldrh r2, [r6, r2]
	strh r2, [r0, r1]
	ldrh r1, [r4, #2]
	strh r1, [r3, #2]
_02077BEA:
	ldr r1, [sp, #0xc]
	mov r3, #0
	cmp r1, #0
	ble _02077C0C
	ldr r1, _02077C14 ; =0x021000BC
	add r2, r0, #0
_02077BF6:
	ldrh r4, [r2]
	add r3, r3, #1
	strh r4, [r6]
	ldrh r4, [r2, #2]
	add r2, r2, #4
	strh r4, [r6, #2]
	ldr r4, [sp, #8]
	add r6, r6, #4
	ldrh r4, [r1, r4]
	cmp r3, r4
	blt _02077BF6
_02077C0C:
	bl FreeToHeap
_02077C10:
	add sp, #0x10
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_02077C14: .word 0x021000BC
	thumb_func_end sub_02077B5C

	thumb_func_start sub_02077C18
sub_02077C18: ; 0x02077C18
	cmp r1, #3
	bhi _02077C8A
	add r1, r1, r1
	add r1, pc
	ldrh r1, [r1, #6]
	lsl r1, r1, #0x10
	asr r1, r1, #0x10
	add pc, r1
_02077C28: ; jump table
	.short _02077C30 - _02077C28 - 2 ; case 0
	.short _02077C42 - _02077C28 - 2 ; case 1
	.short _02077C5C - _02077C28 - 2 ; case 2
	.short _02077C78 - _02077C28 - 2 ; case 3
_02077C30:
	cmp r0, #0
	beq _02077C8A
	ldr r1, _02077C90 ; =0x0000FFFF
	cmp r0, r1
	beq _02077C8A
	lsl r1, r0, #3
	ldr r0, _02077C94 ; =0x02100194
	ldrh r0, [r0, r1]
	bx lr
_02077C42:
	cmp r0, #0
	bne _02077C4A
	ldr r0, _02077C98 ; =0x00000319
	bx lr
_02077C4A:
	ldr r1, _02077C90 ; =0x0000FFFF
	cmp r0, r1
	bne _02077C54
	ldr r0, _02077C9C ; =0x0000031B
	bx lr
_02077C54:
	lsl r1, r0, #3
	ldr r0, _02077CA0 ; =0x02100196
	ldrh r0, [r0, r1]
	bx lr
_02077C5C:
	cmp r0, #0
	bne _02077C64
	ldr r0, _02077CA4 ; =0x0000031A
	bx lr
_02077C64:
	ldr r1, _02077C90 ; =0x0000FFFF
	cmp r0, r1
	bne _02077C70
	mov r0, #0xc7
	lsl r0, r0, #2
	bx lr
_02077C70:
	lsl r1, r0, #3
	ldr r0, _02077CA8 ; =0x02100198
	ldrh r0, [r0, r1]
	bx lr
_02077C78:
	cmp r0, #0
	beq _02077C8A
	ldr r1, _02077C90 ; =0x0000FFFF
	cmp r0, r1
	beq _02077C8A
	lsl r1, r0, #3
	ldr r0, _02077CAC ; =0x0210019A
	ldrh r0, [r0, r1]
	bx lr
_02077C8A:
	mov r0, #0
	bx lr
	nop
_02077C90: .word 0x0000FFFF
_02077C94: .word 0x02100194
_02077C98: .word 0x00000319
_02077C9C: .word 0x0000031B
_02077CA0: .word 0x02100196
_02077CA4: .word 0x0000031A
_02077CA8: .word 0x02100198
_02077CAC: .word 0x0210019A
	thumb_func_end sub_02077C18

	thumb_func_start sub_02077CB0
sub_02077CB0: ; 0x02077CB0
	push {r3, r4}
	mov r2, #0x86
	ldr r3, _02077CDC ; =0x02100194
	mov r4, #1
	lsl r2, r2, #2
_02077CBA:
	lsl r1, r4, #3
	add r1, r3, r1
	ldrh r1, [r1, #6]
	cmp r0, r1
	bne _02077CCA
	add r0, r4, #0
	pop {r3, r4}
	bx lr
_02077CCA:
	add r1, r4, #1
	lsl r1, r1, #0x10
	lsr r4, r1, #0x10
	cmp r4, r2
	bls _02077CBA
	mov r0, #0
	pop {r3, r4}
	bx lr
	nop
_02077CDC: .word 0x02100194
	thumb_func_end sub_02077CB0

	thumb_func_start sub_02077CE0
sub_02077CE0: ; 0x02077CE0
	mov r0, #1
	bx lr
	thumb_func_end sub_02077CE0

	thumb_func_start sub_02077CE4
sub_02077CE4: ; 0x02077CE4
	mov r0, #0
	bx lr
	thumb_func_end sub_02077CE4

	thumb_func_start sub_02077CE8
sub_02077CE8: ; 0x02077CE8
	push {r3, lr}
	add r3, r0, #0
	mov r0, #0x86
	lsl r0, r0, #2
	cmp r3, r0
	bls _02077CF6
	mov r3, #0
_02077CF6:
	cmp r1, #0
	beq _02077D04
	cmp r1, #1
	beq _02077D12
	cmp r1, #2
	beq _02077D20
	b _02077D2E
_02077D04:
	ldr r1, _02077D34 ; =0x02100194
	lsl r3, r3, #3
	ldrh r1, [r1, r3]
	mov r0, #0x11
	bl AllocAndReadWholeNarcMemberByIdPair
	pop {r3, pc}
_02077D12:
	ldr r1, _02077D38 ; =0x02100196
	lsl r3, r3, #3
	ldrh r1, [r1, r3]
	mov r0, #0x12
	bl AllocAndReadWholeNarcMemberByIdPair
	pop {r3, pc}
_02077D20:
	ldr r1, _02077D3C ; =0x02100198
	lsl r3, r3, #3
	ldrh r1, [r1, r3]
	mov r0, #0x12
	bl AllocAndReadWholeNarcMemberByIdPair
	pop {r3, pc}
_02077D2E:
	mov r0, #0
	pop {r3, pc}
	nop
_02077D34: .word 0x02100194
_02077D38: .word 0x02100196
_02077D3C: .word 0x02100198
	thumb_func_end sub_02077CE8

	thumb_func_start sub_02077D40
sub_02077D40: ; 0x02077D40
	push {r4, r5, r6, lr}
	add r5, r0, #0
	add r4, r1, #0
	add r3, r2, #0
	mov r0, #1
	mov r1, #0x1b
	mov r2, #0xde
	bl NewMsgDataFromNarc
	add r6, r0, #0
	add r1, r4, #0
	add r2, r5, #0
	bl ReadMsgDataIntoString
	add r0, r6, #0
	bl DestroyMsgData
	pop {r4, r5, r6, pc}
	thumb_func_end sub_02077D40

	thumb_func_start sub_02077D64
sub_02077D64: ; 0x02077D64
	push {r4, r5, r6, lr}
	add r5, r0, #0
	add r4, r1, #0
	add r3, r2, #0
	mov r0, #1
	mov r1, #0x1b
	mov r2, #0xdd
	bl NewMsgDataFromNarc
	add r6, r0, #0
	add r1, r4, #0
	add r2, r5, #0
	bl ReadMsgDataIntoString
	add r0, r6, #0
	bl DestroyMsgData
	pop {r4, r5, r6, pc}
	thumb_func_end sub_02077D64

	thumb_func_start sub_02077D88
sub_02077D88: ; 0x02077D88
	push {r4, r5, r6, lr}
	add r4, r1, #0
	mov r1, #0
	add r5, r2, #0
	bl sub_02077CE8
	add r6, r0, #0
	add r1, r4, #0
	bl sub_02077DAC
	add r4, r0, #0
	add r0, r5, #0
	add r1, r6, #0
	bl FreeToHeapExplicit
	add r0, r4, #0
	pop {r4, r5, r6, pc}
	.balign 4, 0
	thumb_func_end sub_02077D88

	thumb_func_start sub_02077DAC
sub_02077DAC: ; 0x02077DAC
	push {r3, lr}
	cmp r1, #0xe
	bhi _02077E2C
	add r2, r1, r1
	add r2, pc
	ldrh r2, [r2, #6]
	lsl r2, r2, #0x10
	asr r2, r2, #0x10
	add pc, r2
_02077DBE: ; jump table
	.short _02077DDC - _02077DBE - 2 ; case 0
	.short _02077DE0 - _02077DBE - 2 ; case 1
	.short _02077DE4 - _02077DBE - 2 ; case 2
	.short _02077DE8 - _02077DBE - 2 ; case 3
	.short _02077DF0 - _02077DBE - 2 ; case 4
	.short _02077DF8 - _02077DBE - 2 ; case 5
	.short _02077E00 - _02077DBE - 2 ; case 6
	.short _02077E04 - _02077DBE - 2 ; case 7
	.short _02077E08 - _02077DBE - 2 ; case 8
	.short _02077E0C - _02077DBE - 2 ; case 9
	.short _02077E10 - _02077DBE - 2 ; case 10
	.short _02077E14 - _02077DBE - 2 ; case 11
	.short _02077E18 - _02077DBE - 2 ; case 12
	.short _02077E20 - _02077DBE - 2 ; case 13
	.short _02077E28 - _02077DBE - 2 ; case 14
_02077DDC:
	ldrh r0, [r0]
	pop {r3, pc}
_02077DE0:
	ldrb r0, [r0, #2]
	pop {r3, pc}
_02077DE4:
	ldrb r0, [r0, #3]
	pop {r3, pc}
_02077DE8:
	ldrh r0, [r0, #8]
	lsl r0, r0, #0x1a
	lsr r0, r0, #0x1f
	pop {r3, pc}
_02077DF0:
	ldrh r0, [r0, #8]
	lsl r0, r0, #0x19
	lsr r0, r0, #0x1f
	pop {r3, pc}
_02077DF8:
	ldrh r0, [r0, #8]
	lsl r0, r0, #0x15
	lsr r0, r0, #0x1c
	pop {r3, pc}
_02077E00:
	ldrb r0, [r0, #0xa]
	pop {r3, pc}
_02077E04:
	ldrb r0, [r0, #0xb]
	pop {r3, pc}
_02077E08:
	ldrb r0, [r0, #4]
	pop {r3, pc}
_02077E0C:
	ldrb r0, [r0, #5]
	pop {r3, pc}
_02077E10:
	ldrb r0, [r0, #6]
	pop {r3, pc}
_02077E14:
	ldrb r0, [r0, #7]
	pop {r3, pc}
_02077E18:
	ldrh r0, [r0, #8]
	lsl r0, r0, #0x1b
	lsr r0, r0, #0x1b
	pop {r3, pc}
_02077E20:
	ldrh r0, [r0, #8]
	lsl r0, r0, #0x10
	lsr r0, r0, #0x1b
	pop {r3, pc}
_02077E28:
	ldrb r0, [r0, #0xc]
	pop {r3, pc}
_02077E2C:
	ldrb r2, [r0, #0xc]
	cmp r2, #0
	beq _02077E38
	cmp r2, #1
	beq _02077E3C
	b _02077E44
_02077E38:
	ldrb r0, [r0, #0xe]
	pop {r3, pc}
_02077E3C:
	add r0, #0xe
	bl sub_02077E48
	pop {r3, pc}
_02077E44:
	mov r0, #0
	pop {r3, pc}
	thumb_func_end sub_02077DAC

	thumb_func_start sub_02077E48
sub_02077E48: ; 0x02077E48
	sub r1, #0xf
	cmp r1, #0x2b
	bls _02077E50
	b _02077FFA
_02077E50:
	add r1, r1, r1
	add r1, pc
	ldrh r1, [r1, #6]
	lsl r1, r1, #0x10
	asr r1, r1, #0x10
	add pc, r1
_02077E5C: ; jump table
	.short _02077EB4 - _02077E5C - 2 ; case 0
	.short _02077EBC - _02077E5C - 2 ; case 1
	.short _02077EC4 - _02077E5C - 2 ; case 2
	.short _02077ECC - _02077E5C - 2 ; case 3
	.short _02077ED4 - _02077E5C - 2 ; case 4
	.short _02077EDC - _02077E5C - 2 ; case 5
	.short _02077EE4 - _02077E5C - 2 ; case 6
	.short _02077EEC - _02077E5C - 2 ; case 7
	.short _02077EF4 - _02077E5C - 2 ; case 8
	.short _02077EFC - _02077E5C - 2 ; case 9
	.short _02077F04 - _02077E5C - 2 ; case 10
	.short _02077F0C - _02077E5C - 2 ; case 11
	.short _02077F14 - _02077E5C - 2 ; case 12
	.short _02077F1C - _02077E5C - 2 ; case 13
	.short _02077F24 - _02077E5C - 2 ; case 14
	.short _02077F2C - _02077E5C - 2 ; case 15
	.short _02077F34 - _02077E5C - 2 ; case 16
	.short _02077F3C - _02077E5C - 2 ; case 17
	.short _02077F44 - _02077E5C - 2 ; case 18
	.short _02077F4C - _02077E5C - 2 ; case 19
	.short _02077F54 - _02077E5C - 2 ; case 20
	.short _02077F5C - _02077E5C - 2 ; case 21
	.short _02077F64 - _02077E5C - 2 ; case 22
	.short _02077F6C - _02077E5C - 2 ; case 23
	.short _02077F74 - _02077E5C - 2 ; case 24
	.short _02077F7C - _02077E5C - 2 ; case 25
	.short _02077F84 - _02077E5C - 2 ; case 26
	.short _02077F8C - _02077E5C - 2 ; case 27
	.short _02077F94 - _02077E5C - 2 ; case 28
	.short _02077F9C - _02077E5C - 2 ; case 29
	.short _02077FA4 - _02077E5C - 2 ; case 30
	.short _02077FAC - _02077E5C - 2 ; case 31
	.short _02077FB4 - _02077E5C - 2 ; case 32
	.short _02077FBC - _02077E5C - 2 ; case 33
	.short _02077FC2 - _02077E5C - 2 ; case 34
	.short _02077FC8 - _02077E5C - 2 ; case 35
	.short _02077FCE - _02077E5C - 2 ; case 36
	.short _02077FD4 - _02077E5C - 2 ; case 37
	.short _02077FDA - _02077E5C - 2 ; case 38
	.short _02077FE0 - _02077E5C - 2 ; case 39
	.short _02077FE4 - _02077E5C - 2 ; case 40
	.short _02077FE8 - _02077E5C - 2 ; case 41
	.short _02077FEE - _02077E5C - 2 ; case 42
	.short _02077FF4 - _02077E5C - 2 ; case 43
_02077EB4:
	ldrb r0, [r0]
	lsl r0, r0, #0x1f
	lsr r0, r0, #0x1f
	bx lr
_02077EBC:
	ldrb r0, [r0]
	lsl r0, r0, #0x1e
	lsr r0, r0, #0x1f
	bx lr
_02077EC4:
	ldrb r0, [r0]
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1f
	bx lr
_02077ECC:
	ldrb r0, [r0]
	lsl r0, r0, #0x1c
	lsr r0, r0, #0x1f
	bx lr
_02077ED4:
	ldrb r0, [r0]
	lsl r0, r0, #0x1b
	lsr r0, r0, #0x1f
	bx lr
_02077EDC:
	ldrb r0, [r0]
	lsl r0, r0, #0x1a
	lsr r0, r0, #0x1f
	bx lr
_02077EE4:
	ldrb r0, [r0]
	lsl r0, r0, #0x19
	lsr r0, r0, #0x1f
	bx lr
_02077EEC:
	ldrb r0, [r0]
	lsl r0, r0, #0x18
	lsr r0, r0, #0x1f
	bx lr
_02077EF4:
	ldrb r0, [r0, #1]
	lsl r0, r0, #0x1f
	lsr r0, r0, #0x1f
	bx lr
_02077EFC:
	ldrb r0, [r0, #1]
	lsl r0, r0, #0x1e
	lsr r0, r0, #0x1f
	bx lr
_02077F04:
	ldrb r0, [r0, #1]
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1f
	bx lr
_02077F0C:
	ldrb r0, [r0, #1]
	lsl r0, r0, #0x1c
	lsr r0, r0, #0x1f
	bx lr
_02077F14:
	ldrb r0, [r0, #1]
	lsl r0, r0, #0x18
	lsr r0, r0, #0x1c
	bx lr
_02077F1C:
	ldrb r0, [r0, #2]
	lsl r0, r0, #0x1c
	lsr r0, r0, #0x1c
	bx lr
_02077F24:
	ldrb r0, [r0, #2]
	lsl r0, r0, #0x18
	lsr r0, r0, #0x1c
	bx lr
_02077F2C:
	ldrb r0, [r0, #3]
	lsl r0, r0, #0x1c
	lsr r0, r0, #0x1c
	bx lr
_02077F34:
	ldrb r0, [r0, #3]
	lsl r0, r0, #0x18
	lsr r0, r0, #0x1c
	bx lr
_02077F3C:
	ldrb r0, [r0, #4]
	lsl r0, r0, #0x1c
	lsr r0, r0, #0x1c
	bx lr
_02077F44:
	ldrb r0, [r0, #4]
	lsl r0, r0, #0x1a
	lsr r0, r0, #0x1e
	bx lr
_02077F4C:
	ldrb r0, [r0, #4]
	lsl r0, r0, #0x19
	lsr r0, r0, #0x1f
	bx lr
_02077F54:
	ldrb r0, [r0, #4]
	lsl r0, r0, #0x18
	lsr r0, r0, #0x1f
	bx lr
_02077F5C:
	ldrb r0, [r0, #5]
	lsl r0, r0, #0x1f
	lsr r0, r0, #0x1f
	bx lr
_02077F64:
	ldrb r0, [r0, #5]
	lsl r0, r0, #0x1e
	lsr r0, r0, #0x1f
	bx lr
_02077F6C:
	ldrb r0, [r0, #5]
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1f
	bx lr
_02077F74:
	ldrb r0, [r0, #5]
	lsl r0, r0, #0x1c
	lsr r0, r0, #0x1f
	bx lr
_02077F7C:
	ldrb r0, [r0, #5]
	lsl r0, r0, #0x1b
	lsr r0, r0, #0x1f
	bx lr
_02077F84:
	ldrb r0, [r0, #5]
	lsl r0, r0, #0x1a
	lsr r0, r0, #0x1f
	bx lr
_02077F8C:
	ldrb r0, [r0, #5]
	lsl r0, r0, #0x19
	lsr r0, r0, #0x1f
	bx lr
_02077F94:
	ldrb r0, [r0, #5]
	lsl r0, r0, #0x18
	lsr r0, r0, #0x1f
	bx lr
_02077F9C:
	ldrb r0, [r0, #6]
	lsl r0, r0, #0x1f
	lsr r0, r0, #0x1f
	bx lr
_02077FA4:
	ldrb r0, [r0, #6]
	lsl r0, r0, #0x1e
	lsr r0, r0, #0x1f
	bx lr
_02077FAC:
	ldrb r0, [r0, #6]
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1f
	bx lr
_02077FB4:
	ldrb r0, [r0, #6]
	lsl r0, r0, #0x1c
	lsr r0, r0, #0x1f
	bx lr
_02077FBC:
	mov r1, #7
	ldrsb r0, [r0, r1]
	bx lr
_02077FC2:
	mov r1, #8
	ldrsb r0, [r0, r1]
	bx lr
_02077FC8:
	mov r1, #9
	ldrsb r0, [r0, r1]
	bx lr
_02077FCE:
	mov r1, #0xa
	ldrsb r0, [r0, r1]
	bx lr
_02077FD4:
	mov r1, #0xb
	ldrsb r0, [r0, r1]
	bx lr
_02077FDA:
	mov r1, #0xc
	ldrsb r0, [r0, r1]
	bx lr
_02077FE0:
	ldrb r0, [r0, #0xd]
	bx lr
_02077FE4:
	ldrb r0, [r0, #0xe]
	bx lr
_02077FE8:
	mov r1, #0xf
	ldrsb r0, [r0, r1]
	bx lr
_02077FEE:
	mov r1, #0x10
	ldrsb r0, [r0, r1]
	bx lr
_02077FF4:
	mov r1, #0x11
	ldrsb r0, [r0, r1]
	bx lr
_02077FFA:
	mov r0, #0
	bx lr
	.balign 4, 0
	thumb_func_end sub_02077E48

	thumb_func_start sub_02078000
sub_02078000: ; 0x02078000
	mov r2, #0x52
	lsl r2, r2, #2
	cmp r0, r2
	blo _02078010
	add r1, r2, #0
	add r1, #0x63
	cmp r0, r1
	bls _02078014
_02078010:
	mov r0, #0
	bx lr
_02078014:
	sub r0, r0, r2
	lsl r0, r0, #0x10
	lsr r1, r0, #0xf
	ldr r0, _02078020 ; =0x021000CC
	ldrh r0, [r0, r1]
	bx lr
	.balign 4, 0
_02078020: .word 0x021000CC
	thumb_func_end sub_02078000

	thumb_func_start sub_02078024
sub_02078024: ; 0x02078024
	ldr r2, _02078048 ; =0x021000CC
	mov r3, #0
_02078028:
	lsl r1, r3, #1
	add r1, r2, r1
	add r1, #0xb8
	ldrh r1, [r1]
	cmp r0, r1
	bne _02078038
	mov r0, #1
	bx lr
_02078038:
	add r1, r3, #1
	lsl r1, r1, #0x18
	lsr r3, r1, #0x18
	cmp r3, #8
	blo _02078028
	mov r0, #0
	bx lr
	nop
_02078048: .word 0x021000CC
	thumb_func_end sub_02078024

	thumb_func_start sub_0207804C
sub_0207804C: ; 0x0207804C
	mov r2, #0x52
	lsl r2, r2, #2
	cmp r0, r2
	blo _0207805C
	add r1, r2, #0
	add r1, #0x63
	cmp r0, r1
	bls _02078060
_0207805C:
	mov r0, #0
	bx lr
_02078060:
	sub r0, r0, r2
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	bx lr
	thumb_func_end sub_0207804C

	thumb_func_start sub_02078068
sub_02078068: ; 0x02078068
	cmp r0, #0x89
	blo _02078070
	cmp r0, #0x94
	bls _02078074
_02078070:
	mov r0, #0
	bx lr
_02078074:
	mov r0, #1
	bx lr
	thumb_func_end sub_02078068

	thumb_func_start sub_02078078
sub_02078078: ; 0x02078078
	cmp r0, #0x89
	blo _02078080
	cmp r0, #0x94
	bls _02078084
_02078080:
	mov r0, #0
	bx lr
_02078084:
	sub r0, #0x89
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	bx lr
	thumb_func_end sub_02078078

	thumb_func_start sub_0207808C
sub_0207808C: ; 0x0207808C
	cmp r0, #0xc
	blo _02078094
	mov r0, #0
	bx lr
_02078094:
	add r0, #0x89
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	bx lr
	thumb_func_end sub_0207808C

	thumb_func_start sub_0207809C
sub_0207809C: ; 0x0207809C
	cmp r0, #1
	blo _020780A4
	cmp r0, #0x10
	bls _020780BA
_020780A4:
	mov r2, #0x7b
	lsl r2, r2, #2
	cmp r0, r2
	blo _020780B8
	add r1, r2, #7
	cmp r0, r1
	bhi _020780B8
	sub r2, #0x11
	sub r0, r0, r2
	bx lr
_020780B8:
	mov r0, #4
_020780BA:
	bx lr
	thumb_func_end sub_0207809C

	thumb_func_start sub_020780BC
sub_020780BC: ; 0x020780BC
	cmp r0, #1
	blt _020780CA
	cmp r0, #0x10
	bgt _020780CA
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	bx lr
_020780CA:
	cmp r0, #0x11
	blt _020780DC
	cmp r0, #0x18
	bgt _020780DC
	ldr r1, _020780E0 ; =0x000001DB
	add r0, r0, r1
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	bx lr
_020780DC:
	mov r0, #4
	bx lr
	.balign 4, 0
_020780E0: .word 0x000001DB
	thumb_func_end sub_020780BC

	thumb_func_start sub_020780E4
sub_020780E4: ; 0x020780E4
	cmp r0, #0x95
	blo _020780EC
	cmp r0, #0xd4
	bls _020780F0
_020780EC:
	mov r0, #0
	bx lr
_020780F0:
	mov r0, #1
	bx lr
	thumb_func_end sub_020780E4

	thumb_func_start sub_020780F4
sub_020780F4: ; 0x020780F4
	cmp r0, #0x40
	blo _020780FC
	ldr r0, _02078104 ; =0x0000FFFF
	bx lr
_020780FC:
	add r0, #0x95
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	bx lr
	.balign 4, 0
_02078104: .word 0x0000FFFF
	thumb_func_end sub_020780F4

	thumb_func_start sub_02078108
sub_02078108: ; 0x02078108
	push {r3, r4, r5, lr}
	add r4, r0, #0
	add r3, r1, #0
	cmp r4, #0
	beq _02078118
	sub r0, r4, #1
	lsl r0, r0, #0x10
	lsr r4, r0, #0x10
_02078118:
	mov r0, #1
	mov r1, #0x1b
	mov r2, #0xfb
	bl NewMsgDataFromNarc
	add r5, r0, #0
	add r1, r4, #0
	bl NewString_ReadMsgData
	add r4, r0, #0
	add r0, r5, #0
	bl DestroyMsgData
	add r0, r4, #0
	pop {r3, r4, r5, pc}
	.balign 4, 0
	thumb_func_end sub_02078108

	thumb_func_start sub_02078138
sub_02078138: ; 0x02078138
	push {r3, r4, lr}
	sub sp, #4
	add r4, r0, #0
	mov r0, #0x86
	lsl r0, r0, #2
	mov r1, #0
	bl sub_02077C18
	mov r1, #0x24
	mul r1, r0
	str r1, [sp]
	mov r1, #0
	mov r0, #0x11
	add r2, r4, #0
	add r3, r1, #0
	bl AllocAndReadFromNarcMemberByIdPair
	add sp, #4
	pop {r3, r4, pc}
	.balign 4, 0
	thumb_func_end sub_02078138

	thumb_func_start sub_02078160
sub_02078160: ; 0x02078160
	mov r2, #0x24
	mul r2, r1
	add r0, r0, r2
	bx lr
	thumb_func_end sub_02078160

	thumb_func_start sub_02078168
sub_02078168: ; 0x02078168
	ldr r1, _0207817C ; =0x0000FE14
	add r0, r0, r1
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	cmp r0, #8
	bls _02078178
	mov r0, #1
	bx lr
_02078178:
	mov r0, #0
	bx lr
	.balign 4, 0
_0207817C: .word 0x0000FE14
	thumb_func_end sub_02078168

	thumb_func_start sub_02078180
sub_02078180: ; 0x02078180
	ldr r0, _02078184 ; =0x0000079C
	bx lr
	.balign 4, 0
_02078184: .word 0x0000079C
	thumb_func_end sub_02078180

	thumb_func_start sub_02078188
sub_02078188: ; 0x02078188
	push {r4, lr}
	ldr r1, _0207819C ; =0x0000079C
	bl AllocFromHeap
	add r4, r0, #0
	bl sub_020781A0
	add r0, r4, #0
	pop {r4, pc}
	nop
_0207819C: .word 0x0000079C
	thumb_func_end sub_02078188

	thumb_func_start sub_020781A0
sub_020781A0: ; 0x020781A0
	ldr r3, _020781AC ; =sub_020D4790
	add r1, r0, #0
	mov r0, #0
	ldr r2, _020781B0 ; =0x0000079C
	bx r3
	nop
_020781AC: .word sub_020D4790
_020781B0: .word 0x0000079C
	thumb_func_end sub_020781A0

	thumb_func_start sub_020781B4
sub_020781B4: ; 0x020781B4
	ldr r3, _020781BC ; =MIi_CpuCopy8
	ldr r2, _020781C0 ; =0x0000079C
	bx r3
	nop
_020781BC: .word MIi_CpuCopy8
_020781C0: .word 0x0000079C
	thumb_func_end sub_020781B4

	thumb_func_start sub_020781C4
sub_020781C4: ; 0x020781C4
	ldr r1, _020781CC ; =0x00000798
	ldrh r0, [r0, r1]
	bx lr
	nop
_020781CC: .word 0x00000798
	thumb_func_end sub_020781C4

	thumb_func_start sub_020781D0
sub_020781D0: ; 0x020781D0
	ldr r1, _020781D8 ; =0x0000079A
	ldrh r0, [r0, r1]
	bx lr
	nop
_020781D8: .word 0x0000079A
	thumb_func_end sub_020781D0

	thumb_func_start sub_020781DC
sub_020781DC: ; 0x020781DC
	push {r3, r4}
	ldr r3, _02078204 ; =0x00000798
	mov r4, #0
	ldrh r2, [r0, r3]
	cmp r2, #0
	bne _020781EE
	strh r1, [r0, r3]
	mov r4, #1
	b _020781FC
_020781EE:
	add r2, r3, #2
	ldrh r2, [r0, r2]
	cmp r2, #0
	bne _020781FC
	add r2, r3, #2
	strh r1, [r0, r2]
	mov r4, #2
_020781FC:
	add r0, r4, #0
	pop {r3, r4}
	bx lr
	nop
_02078204: .word 0x00000798
	thumb_func_end sub_020781DC

	thumb_func_start sub_02078208
sub_02078208: ; 0x02078208
	push {r3, r4}
	ldr r3, _0207823C ; =0x0000079A
	ldrh r4, [r0, r3]
	cmp r4, r1
	bne _0207821A
	mov r1, #0
	strh r1, [r0, r3]
	pop {r3, r4}
	bx lr
_0207821A:
	sub r2, r3, #2
	ldrh r2, [r0, r2]
	cmp r2, r1
	bne _02078238
	cmp r4, #0
	beq _02078232
	sub r1, r3, #2
	strh r4, [r0, r1]
	mov r1, #0
	strh r1, [r0, r3]
	pop {r3, r4}
	bx lr
_02078232:
	mov r2, #0
	sub r1, r3, #2
	strh r2, [r0, r1]
_02078238:
	pop {r3, r4}
	bx lr
	.balign 4, 0
_0207823C: .word 0x0000079A
	thumb_func_end sub_02078208

	thumb_func_start sub_02078240
sub_02078240: ; 0x02078240
	push {r4, r5, r6, lr}
	add r5, r2, #0
	add r4, r0, #0
	add r0, r1, #0
	ldr r2, [sp, #0x10]
	mov r1, #5
	add r6, r3, #0
	bl sub_02077D88
	cmp r0, #7
	bhi _020782DA
	add r1, r0, r0
	add r1, pc
	ldrh r1, [r1, #6]
	lsl r1, r1, #0x10
	asr r1, r1, #0x10
	add pc, r1
_02078262: ; jump table
	.short _02078280 - _02078262 - 2 ; case 0
	.short _02078296 - _02078262 - 2 ; case 1
	.short _020782A4 - _02078262 - 2 ; case 2
	.short _020782CE - _02078262 - 2 ; case 3
	.short _02078288 - _02078262 - 2 ; case 4
	.short _020782C0 - _02078262 - 2 ; case 5
	.short _020782B2 - _02078262 - 2 ; case 6
	.short _02078272 - _02078262 - 2 ; case 7
_02078272:
	mov r1, #0xa5
	lsl r1, r1, #2
	add r1, r4, r1
	str r1, [r5]
	mov r1, #0x32
	str r1, [r6]
	pop {r4, r5, r6, pc}
_02078280:
	str r4, [r5]
	mov r1, #0xa5
	str r1, [r6]
	pop {r4, r5, r6, pc}
_02078288:
	mov r1, #0x17
	lsl r1, r1, #6
	add r1, r4, r1
	str r1, [r5]
	mov r1, #0x40
	str r1, [r6]
	pop {r4, r5, r6, pc}
_02078296:
	mov r1, #0x52
	lsl r1, r1, #4
	add r1, r4, r1
	str r1, [r5]
	mov r1, #0x28
	str r1, [r6]
	pop {r4, r5, r6, pc}
_020782A4:
	mov r1, #0x1b
	lsl r1, r1, #6
	add r1, r4, r1
	str r1, [r5]
	mov r1, #0x18
	str r1, [r6]
	pop {r4, r5, r6, pc}
_020782B2:
	mov r1, #0x72
	lsl r1, r1, #4
	add r1, r4, r1
	str r1, [r5]
	mov r1, #0x1e
	str r1, [r6]
	pop {r4, r5, r6, pc}
_020782C0:
	mov r1, #0x4f
	lsl r1, r1, #4
	add r1, r4, r1
	str r1, [r5]
	mov r1, #0xc
	str r1, [r6]
	pop {r4, r5, r6, pc}
_020782CE:
	mov r1, #0xd7
	lsl r1, r1, #2
	add r1, r4, r1
	str r1, [r5]
	mov r1, #0x65
	str r1, [r6]
_020782DA:
	pop {r4, r5, r6, pc}
	thumb_func_end sub_02078240

	thumb_func_start sub_020782DC
sub_020782DC: ; 0x020782DC
	push {r4, r5, r6, r7}
	add r5, r1, #0
	mov r1, #0
	add r7, r0, #0
	add r4, r2, #0
	mov ip, r3
	mvn r1, r1
	mov r0, #0
	cmp r5, #0
	bls _0207832A
	add r2, r7, #0
	add r3, r1, #0
_020782F4:
	ldrh r6, [r2]
	cmp r4, r6
	bne _02078312
	lsl r0, r0, #2
	add r0, r7, r0
	ldrh r2, [r0, #2]
	mov r1, ip
	add r2, r1, r2
	add r1, sp, #0
	ldrh r1, [r1, #0x10]
	cmp r2, r1
	ble _0207833C
	mov r0, #0
	pop {r4, r5, r6, r7}
	bx lr
_02078312:
	cmp r1, r3
	bne _02078322
	cmp r6, #0
	bne _02078322
	ldrh r6, [r2, #2]
	cmp r6, #0
	bne _02078322
	add r1, r0, #0
_02078322:
	add r0, r0, #1
	add r2, r2, #4
	cmp r0, r5
	blo _020782F4
_0207832A:
	mov r0, #0
	mvn r0, r0
	cmp r1, r0
	bne _02078338
	mov r0, #0
	pop {r4, r5, r6, r7}
	bx lr
_02078338:
	lsl r0, r1, #2
	add r0, r7, r0
_0207833C:
	pop {r4, r5, r6, r7}
	bx lr
	thumb_func_end sub_020782DC

	thumb_func_start sub_02078340
sub_02078340: ; 0x02078340
	push {r4, r5, lr}
	sub sp, #0xc
	add r4, r2, #0
	str r3, [sp]
	add r2, sp, #8
	add r3, sp, #4
	add r5, r1, #0
	bl sub_02078240
	cmp r0, #3
	bne _0207836A
	mov r0, #0x63
	str r0, [sp]
	ldr r0, [sp, #8]
	ldr r1, [sp, #4]
	add r2, r5, #0
	add r3, r4, #0
	bl sub_020782DC
	add sp, #0xc
	pop {r4, r5, pc}
_0207836A:
	ldr r0, _02078380 ; =0x000003E7
	add r2, r5, #0
	str r0, [sp]
	ldr r0, [sp, #8]
	ldr r1, [sp, #4]
	add r3, r4, #0
	bl sub_020782DC
	add sp, #0xc
	pop {r4, r5, pc}
	nop
_02078380: .word 0x000003E7
	thumb_func_end sub_02078340

	thumb_func_start sub_02078384
sub_02078384: ; 0x02078384
	push {r3, lr}
	bl sub_02078340
	cmp r0, #0
	beq _02078392
	mov r0, #1
	pop {r3, pc}
_02078392:
	mov r0, #0
	pop {r3, pc}
	.balign 4, 0
	thumb_func_end sub_02078384

	thumb_func_start sub_02078398
sub_02078398: ; 0x02078398
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	add r7, r0, #0
	add r5, r1, #0
	add r4, r2, #0
	add r6, r3, #0
	bl sub_02078340
	str r0, [sp, #8]
	cmp r0, #0
	bne _020783B4
	add sp, #0xc
	mov r0, #0
	pop {r4, r5, r6, r7, pc}
_020783B4:
	strh r5, [r0]
	ldr r1, [sp, #8]
	add r2, sp, #8
	ldrh r0, [r1, #2]
	add r3, sp, #4
	add r0, r0, r4
	strh r0, [r1, #2]
	add r0, r7, #0
	add r1, r5, #0
	str r6, [sp]
	bl sub_02078240
	sub r0, r0, #3
	cmp r0, #1
	bhi _020783DA
	ldr r0, [sp, #8]
	ldr r1, [sp, #4]
	bl sub_020785EC
_020783DA:
	mov r0, #1
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
	thumb_func_end sub_02078398

	thumb_func_start sub_020783E0
sub_020783E0: ; 0x020783E0
	push {r3, r4, r5, r6}
	mov r5, #0
	cmp r1, #0
	bls _02078408
	add r6, r0, #0
_020783EA:
	ldrh r4, [r6]
	cmp r2, r4
	bne _02078400
	lsl r1, r5, #2
	add r0, r0, r1
	ldrh r1, [r0, #2]
	cmp r1, r3
	bhs _0207840A
	mov r0, #0
	pop {r3, r4, r5, r6}
	bx lr
_02078400:
	add r5, r5, #1
	add r6, r6, #4
	cmp r5, r1
	blo _020783EA
_02078408:
	mov r0, #0
_0207840A:
	pop {r3, r4, r5, r6}
	bx lr
	.balign 4, 0
	thumb_func_end sub_020783E0

	thumb_func_start sub_02078410
sub_02078410: ; 0x02078410
	push {r4, r5, lr}
	sub sp, #0xc
	add r4, r2, #0
	str r3, [sp]
	add r2, sp, #8
	add r3, sp, #4
	add r5, r1, #0
	bl sub_02078240
	ldr r0, [sp, #8]
	ldr r1, [sp, #4]
	add r2, r5, #0
	add r3, r4, #0
	bl sub_020783E0
	add sp, #0xc
	pop {r4, r5, pc}
	.balign 4, 0
	thumb_func_end sub_02078410

	thumb_func_start sub_02078434
sub_02078434: ; 0x02078434
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	add r6, r0, #0
	add r7, r1, #0
	add r5, r2, #0
	add r4, r3, #0
	bl sub_02078410
	str r0, [sp, #8]
	cmp r0, #0
	bne _02078450
	add sp, #0xc
	mov r0, #0
	pop {r4, r5, r6, r7, pc}
_02078450:
	ldrh r1, [r0, #2]
	sub r1, r1, r5
	strh r1, [r0, #2]
	ldr r1, [sp, #8]
	ldrh r0, [r1, #2]
	cmp r0, #0
	bne _02078462
	mov r0, #0
	strh r0, [r1]
_02078462:
	str r4, [sp]
	add r0, r6, #0
	add r1, r7, #0
	add r2, sp, #8
	add r3, sp, #4
	bl sub_02078240
	ldr r0, [sp, #8]
	ldr r1, [sp, #4]
	bl sub_020785A0
	mov r0, #1
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_02078434

	thumb_func_start sub_02078480
sub_02078480: ; 0x02078480
	push {r4, r5, r6, lr}
	add r5, r0, #0
	add r6, r1, #0
	add r4, r3, #0
	bl sub_020783E0
	cmp r0, #0
	bne _02078494
	mov r0, #0
	pop {r4, r5, r6, pc}
_02078494:
	ldrh r1, [r0, #2]
	sub r1, r1, r4
	strh r1, [r0, #2]
	ldrh r1, [r0, #2]
	cmp r1, #0
	bne _020784A4
	mov r1, #0
	strh r1, [r0]
_020784A4:
	add r0, r5, #0
	add r1, r6, #0
	bl sub_020785A0
	mov r0, #1
	pop {r4, r5, r6, pc}
	thumb_func_end sub_02078480

	thumb_func_start sub_020784B0
sub_020784B0: ; 0x020784B0
	push {r3, lr}
	bl sub_02078410
	cmp r0, #0
	beq _020784BE
	mov r0, #1
	pop {r3, pc}
_020784BE:
	mov r0, #0
	pop {r3, pc}
	.balign 4, 0
	thumb_func_end sub_020784B0

	thumb_func_start sub_020784C4
sub_020784C4: ; 0x020784C4
	cmp r1, #7
	bhi _0207852E
	add r1, r1, r1
	add r1, pc
	ldrh r1, [r1, #6]
	lsl r1, r1, #0x10
	asr r1, r1, #0x10
	add pc, r1
_020784D4: ; jump table
	.short _020784EE - _020784D4 - 2 ; case 0
	.short _020784FC - _020784D4 - 2 ; case 1
	.short _02078506 - _020784D4 - 2 ; case 2
	.short _02078524 - _020784D4 - 2 ; case 3
	.short _020784F2 - _020784D4 - 2 ; case 4
	.short _0207851A - _020784D4 - 2 ; case 5
	.short _02078510 - _020784D4 - 2 ; case 6
	.short _020784E4 - _020784D4 - 2 ; case 7
_020784E4:
	mov r1, #0xa5
	lsl r1, r1, #2
	add r0, r0, r1
	mov r2, #0x32
	b _02078532
_020784EE:
	mov r2, #0xa5
	b _02078532
_020784F2:
	mov r1, #0x17
	lsl r1, r1, #6
	add r0, r0, r1
	mov r2, #0x40
	b _02078532
_020784FC:
	mov r1, #0x52
	lsl r1, r1, #4
	add r0, r0, r1
	mov r2, #0x28
	b _02078532
_02078506:
	mov r1, #0x1b
	lsl r1, r1, #6
	add r0, r0, r1
	mov r2, #0x18
	b _02078532
_02078510:
	mov r1, #0x72
	lsl r1, r1, #4
	add r0, r0, r1
	mov r2, #0x1e
	b _02078532
_0207851A:
	mov r1, #0x4f
	lsl r1, r1, #4
	add r0, r0, r1
	mov r2, #0xc
	b _02078532
_02078524:
	mov r1, #0xd7
	lsl r1, r1, #2
	add r0, r0, r1
	mov r2, #0x65
	b _02078532
_0207852E:
	mov r0, #0
	bx lr
_02078532:
	mov r3, #0
	cmp r2, #0
	bls _0207854A
_02078538:
	ldrh r1, [r0]
	cmp r1, #0
	beq _02078542
	mov r0, #1
	bx lr
_02078542:
	add r3, r3, #1
	add r0, r0, #4
	cmp r3, r2
	blo _02078538
_0207854A:
	mov r0, #0
	bx lr
	.balign 4, 0
	thumb_func_end sub_020784C4

	thumb_func_start sub_02078550
sub_02078550: ; 0x02078550
	push {r3, lr}
	add r3, r2, #0
	mov r2, #1
	bl sub_02078410
	cmp r0, #0
	bne _02078562
	mov r0, #0
	pop {r3, pc}
_02078562:
	ldrh r0, [r0, #2]
	pop {r3, pc}
	.balign 4, 0
	thumb_func_end sub_02078550

	thumb_func_start sub_02078568
sub_02078568: ; 0x02078568
	push {r3, lr}
	mov r3, #1
	bl sub_020783E0
	cmp r0, #0
	bne _02078578
	mov r0, #0
	pop {r3, pc}
_02078578:
	ldrh r0, [r0, #2]
	pop {r3, pc}
	thumb_func_end sub_02078568

	thumb_func_start sub_0207857C
sub_0207857C: ; 0x0207857C
	push {r3}
	sub sp, #4
	ldrh r3, [r0]
	add r2, sp, #0
	strh r3, [r2]
	ldrh r3, [r0, #2]
	strh r3, [r2, #2]
	ldrh r3, [r1]
	strh r3, [r0]
	ldrh r3, [r1, #2]
	strh r3, [r0, #2]
	ldrh r0, [r2]
	strh r0, [r1]
	ldrh r0, [r2, #2]
	strh r0, [r1, #2]
	add sp, #4
	pop {r3}
	bx lr
	thumb_func_end sub_0207857C

	thumb_func_start sub_020785A0
sub_020785A0: ; 0x020785A0
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	str r0, [sp]
	mov r0, #0
	add r7, r1, #0
	str r0, [sp, #4]
	sub r0, r7, #1
	str r0, [sp, #8]
	beq _020785E6
	ldr r4, [sp]
_020785B4:
	ldr r0, [sp, #4]
	add r6, r0, #1
	cmp r6, r7
	bhs _020785D8
	ldr r0, [sp]
	lsl r1, r6, #2
	add r5, r0, r1
_020785C2:
	ldrh r0, [r4, #2]
	cmp r0, #0
	bne _020785D0
	add r0, r4, #0
	add r1, r5, #0
	bl sub_0207857C
_020785D0:
	add r6, r6, #1
	add r5, r5, #4
	cmp r6, r7
	blo _020785C2
_020785D8:
	ldr r0, [sp, #4]
	add r4, r4, #4
	add r1, r0, #1
	ldr r0, [sp, #8]
	str r1, [sp, #4]
	cmp r1, r0
	blo _020785B4
_020785E6:
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_020785A0

	thumb_func_start sub_020785EC
sub_020785EC: ; 0x020785EC
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	str r0, [sp]
	mov r0, #0
	add r7, r1, #0
	str r0, [sp, #4]
	sub r0, r7, #1
	str r0, [sp, #8]
	beq _02078640
	ldr r4, [sp]
_02078600:
	ldr r0, [sp, #4]
	add r6, r0, #1
	cmp r6, r7
	bhs _02078632
	ldr r0, [sp]
	lsl r1, r6, #2
	add r5, r0, r1
_0207860E:
	ldrh r0, [r4, #2]
	cmp r0, #0
	beq _02078622
	ldrh r0, [r5, #2]
	cmp r0, #0
	beq _0207862A
	ldrh r1, [r4]
	ldrh r0, [r5]
	cmp r1, r0
	bls _0207862A
_02078622:
	add r0, r4, #0
	add r1, r5, #0
	bl sub_0207857C
_0207862A:
	add r6, r6, #1
	add r5, r5, #4
	cmp r6, r7
	blo _0207860E
_02078632:
	ldr r0, [sp, #4]
	add r4, r4, #4
	add r1, r0, #1
	ldr r0, [sp, #8]
	str r1, [sp, #4]
	cmp r1, r0
	blo _02078600
_02078640:
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
	thumb_func_end sub_020785EC

	thumb_func_start sub_02078644
sub_02078644: ; 0x02078644
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	lsl r0, r2, #0x18
	add r7, r1, #0
	lsr r0, r0, #0x18
	bl sub_02077878
	add r6, r0, #0
	ldrb r0, [r7]
	mov r4, #0
	cmp r0, #0xff
	beq _02078720
_0207865C:
	ldrb r0, [r7, r4]
	cmp r0, #7
	bhi _02078718
	add r0, r0, r0
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_0207866E: ; jump table
	.short _02078692 - _0207866E - 2 ; case 0
	.short _020786B6 - _0207866E - 2 ; case 1
	.short _020786CA - _0207866E - 2 ; case 2
	.short _02078706 - _0207866E - 2 ; case 3
	.short _020786A2 - _0207866E - 2 ; case 4
	.short _020786F2 - _0207866E - 2 ; case 5
	.short _020786DE - _0207866E - 2 ; case 6
	.short _0207867E - _0207866E - 2 ; case 7
_0207867E:
	mov r1, #0xa5
	lsl r1, r1, #2
	lsl r3, r4, #0x18
	add r0, r6, #0
	add r1, r5, r1
	mov r2, #7
	lsr r3, r3, #0x18
	bl sub_020778BC
	b _02078718
_02078692:
	lsl r3, r4, #0x18
	add r0, r6, #0
	add r1, r5, #0
	mov r2, #0
	lsr r3, r3, #0x18
	bl sub_020778BC
	b _02078718
_020786A2:
	mov r1, #0x17
	lsl r1, r1, #6
	lsl r3, r4, #0x18
	add r0, r6, #0
	add r1, r5, r1
	mov r2, #4
	lsr r3, r3, #0x18
	bl sub_020778BC
	b _02078718
_020786B6:
	mov r1, #0x52
	lsl r1, r1, #4
	lsl r3, r4, #0x18
	add r0, r6, #0
	add r1, r5, r1
	mov r2, #1
	lsr r3, r3, #0x18
	bl sub_020778BC
	b _02078718
_020786CA:
	mov r1, #0x1b
	lsl r1, r1, #6
	lsl r3, r4, #0x18
	add r0, r6, #0
	add r1, r5, r1
	mov r2, #2
	lsr r3, r3, #0x18
	bl sub_020778BC
	b _02078718
_020786DE:
	mov r1, #0x72
	lsl r1, r1, #4
	lsl r3, r4, #0x18
	add r0, r6, #0
	add r1, r5, r1
	mov r2, #6
	lsr r3, r3, #0x18
	bl sub_020778BC
	b _02078718
_020786F2:
	mov r1, #0x4f
	lsl r1, r1, #4
	lsl r3, r4, #0x18
	add r0, r6, #0
	add r1, r5, r1
	mov r2, #5
	lsr r3, r3, #0x18
	bl sub_020778BC
	b _02078718
_02078706:
	mov r1, #0xd7
	lsl r1, r1, #2
	lsl r3, r4, #0x18
	add r0, r6, #0
	add r1, r5, r1
	mov r2, #3
	lsr r3, r3, #0x18
	bl sub_020778BC
_02078718:
	add r4, r4, #1
	ldrb r0, [r7, r4]
	cmp r0, #0xff
	bne _0207865C
_02078720:
	add r0, r6, #0
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_02078644

	thumb_func_start sub_02078724
sub_02078724: ; 0x02078724
	cmp r1, #7
	bhi _0207878C
	add r1, r1, r1
	add r1, pc
	ldrh r1, [r1, #6]
	lsl r1, r1, #0x10
	asr r1, r1, #0x10
	add pc, r1
_02078734: ; jump table
	.short _0207874E - _02078734 - 2 ; case 0
	.short _0207875C - _02078734 - 2 ; case 1
	.short _02078766 - _02078734 - 2 ; case 2
	.short _02078784 - _02078734 - 2 ; case 3
	.short _02078752 - _02078734 - 2 ; case 4
	.short _0207877A - _02078734 - 2 ; case 5
	.short _02078770 - _02078734 - 2 ; case 6
	.short _02078744 - _02078734 - 2 ; case 7
_02078744:
	mov r1, #0xa5
	lsl r1, r1, #2
	add r0, r0, r1
	mov r3, #0x32
	b _0207878C
_0207874E:
	mov r3, #0xa5
	b _0207878C
_02078752:
	mov r1, #0x17
	lsl r1, r1, #6
	add r0, r0, r1
	mov r3, #0x40
	b _0207878C
_0207875C:
	mov r1, #0x52
	lsl r1, r1, #4
	add r0, r0, r1
	mov r3, #0x28
	b _0207878C
_02078766:
	mov r1, #0x1b
	lsl r1, r1, #6
	add r0, r0, r1
	mov r3, #0x18
	b _0207878C
_02078770:
	mov r1, #0x72
	lsl r1, r1, #4
	add r0, r0, r1
	mov r3, #0x1e
	b _0207878C
_0207877A:
	mov r1, #0x4f
	lsl r1, r1, #4
	add r0, r0, r1
	mov r3, #0xc
	b _0207878C
_02078784:
	mov r1, #0xd7
	lsl r1, r1, #2
	add r0, r0, r1
	mov r3, #0x65
_0207878C:
	cmp r2, r3
	blo _02078794
	mov r0, #0
	bx lr
_02078794:
	lsl r1, r2, #2
	add r0, r0, r1
	bx lr
	.balign 4, 0
	thumb_func_end sub_02078724

	thumb_func_start sub_0207879C
sub_0207879C: ; 0x0207879C
	ldr r3, _020787A4 ; =SavArray_get
	mov r1, #3
	bx r3
	nop
_020787A4: .word SavArray_get
	thumb_func_end sub_0207879C

	thumb_func_start sub_020787A8
sub_020787A8: ; 0x020787A8
	push {r4, lr}
	mov r1, #0x24
	bl AllocFromHeap
	add r4, r0, #0
	mov r0, #0
	add r1, r4, #0
	mov r2, #0x24
	bl sub_020D4790
	add r0, r4, #0
	pop {r4, pc}
	thumb_func_end sub_020787A8

	thumb_func_start sub_020787C0
sub_020787C0: ; 0x020787C0
	push {r3, r4}
	add r4, r0, r1
	ldrb r4, [r4, #8]
	strb r4, [r2]
	ldrb r0, [r0, r1]
	strb r0, [r3]
	pop {r3, r4}
	bx lr
	thumb_func_end sub_020787C0

	thumb_func_start sub_020787D0
sub_020787D0: ; 0x020787D0
	ldrh r0, [r0, #0x10]
	bx lr
	thumb_func_end sub_020787D0

	thumb_func_start sub_020787D4
sub_020787D4: ; 0x020787D4
	push {r3, r4}
	add r4, r0, r1
	strb r2, [r4, #8]
	strb r3, [r0, r1]
	pop {r3, r4}
	bx lr
	thumb_func_end sub_020787D4

	thumb_func_start sub_020787E0
sub_020787E0: ; 0x020787E0
	strh r1, [r0, #0x10]
	bx lr
	thumb_func_end sub_020787E0

	thumb_func_start sub_020787E4
sub_020787E4: ; 0x020787E4
	add r1, r0, r1
	ldrb r0, [r1, #0x19]
	strb r0, [r2]
	ldrb r0, [r1, #0x14]
	strb r0, [r3]
	bx lr
	thumb_func_end sub_020787E4

	thumb_func_start sub_020787F0
sub_020787F0: ; 0x020787F0
	ldrh r0, [r0, #0x1e]
	bx lr
	thumb_func_end sub_020787F0

	thumb_func_start sub_020787F4
sub_020787F4: ; 0x020787F4
	ldrh r0, [r0, #0x20]
	bx lr
	thumb_func_end sub_020787F4

	thumb_func_start sub_020787F8
sub_020787F8: ; 0x020787F8
	ldrh r0, [r0, #0x22]
	bx lr
	thumb_func_end sub_020787F8

	thumb_func_start sub_020787FC
sub_020787FC: ; 0x020787FC
	add r0, r0, r1
	strb r2, [r0, #0x19]
	strb r3, [r0, #0x14]
	bx lr
	thumb_func_end sub_020787FC

	thumb_func_start sub_02078804
sub_02078804: ; 0x02078804
	push {r4, r5, r6, lr}
	mov r4, #0
	add r5, r0, #0
	add r6, r4, #0
_0207880C:
	add r0, r5, #0
	add r1, r4, #0
	add r2, r6, #0
	add r3, r6, #0
	bl sub_020787FC
	add r4, r4, #1
	cmp r4, #5
	blo _0207880C
	add r0, r5, #0
	mov r1, #0
	bl sub_02078830
	pop {r4, r5, r6, pc}
	thumb_func_end sub_02078804

	thumb_func_start sub_02078828
sub_02078828: ; 0x02078828
	strh r1, [r0, #0x1e]
	strh r2, [r0, #0x20]
	bx lr
	.balign 4, 0
	thumb_func_end sub_02078828

	thumb_func_start sub_02078830
sub_02078830: ; 0x02078830
	strh r1, [r0, #0x22]
	bx lr
	thumb_func_end sub_02078830

	thumb_func_start sub_02078834
sub_02078834: ; 0x02078834
	push {r4, r5, r6, lr}
	add r6, r0, #0
	bl sub_0205064C
	add r5, r0, #0
	add r0, r6, #0
	bl sub_02050650
	add r4, r0, #0
	ldr r1, [r4, #4]
	cmp r1, #0x19
	bls _0207884E
	b _02078B1C
_0207884E:
	add r1, r1, r1
	add r1, pc
	ldrh r1, [r1, #6]
	lsl r1, r1, #0x10
	asr r1, r1, #0x10
	add pc, r1
_0207885A: ; jump table
	.short _0207888E - _0207885A - 2 ; case 0
	.short _02078894 - _0207885A - 2 ; case 1
	.short _020788B8 - _0207885A - 2 ; case 2
	.short _020788CA - _0207885A - 2 ; case 3
	.short _0207899C - _0207885A - 2 ; case 4
	.short _020789B2 - _0207885A - 2 ; case 5
	.short _020789B8 - _0207885A - 2 ; case 6
	.short _020789C6 - _0207885A - 2 ; case 7
	.short _020789CC - _0207885A - 2 ; case 8
	.short _020789E8 - _0207885A - 2 ; case 9
	.short _020789E8 - _0207885A - 2 ; case 10
	.short _020789E8 - _0207885A - 2 ; case 11
	.short _020789FE - _0207885A - 2 ; case 12
	.short _02078A16 - _0207885A - 2 ; case 13
	.short _02078A2C - _0207885A - 2 ; case 14
	.short _02078A3E - _0207885A - 2 ; case 15
	.short _02078A52 - _0207885A - 2 ; case 16
	.short _02078A66 - _0207885A - 2 ; case 17
	.short _02078A7C - _0207885A - 2 ; case 18
	.short _02078A8E - _0207885A - 2 ; case 19
	.short _02078AA2 - _0207885A - 2 ; case 20
	.short _02078AB6 - _0207885A - 2 ; case 21
	.short _02078ACC - _0207885A - 2 ; case 22
	.short _02078ADE - _0207885A - 2 ; case 23
	.short _02078AF2 - _0207885A - 2 ; case 24
	.short _02078B06 - _0207885A - 2 ; case 25
_0207888E:
	ldr r1, [r5, #0xc]
	ldr r0, [r4]
	str r1, [r0]
_02078894:
	ldr r0, [r4, #4]
	add r0, r0, #1
	str r0, [r4, #4]
	ldr r0, [r4]
	ldr r0, [r0, #4]
	cmp r0, #1
	bne _020788E6
	ldr r0, [r5, #0xc]
	bl sub_0203A05C
	cmp r0, #0
	beq _020788E6
	mov r0, #0xa
	str r0, [r4, #4]
	ldr r0, [r4, #8]
	mov r1, #0
	strh r1, [r0]
	b _02078B20
_020788B8:
	ldr r1, _02078B24 ; =0x02101290
	ldr r2, [r4]
	add r0, r6, #0
	bl sub_02050624
	ldr r0, [r4, #4]
	add r0, r0, #1
	str r0, [r4, #4]
	b _02078B20
_020788CA:
	ldr r0, [r5, #0xc]
	bl sub_0203A05C
	cmp r0, #0
	beq _020788DE
	ldr r0, [r5, #0xc]
	bl SavArray_Flags_get
	bl sub_02066950
_020788DE:
	ldr r0, [r4]
	ldr r0, [r0, #4]
	cmp r0, #0xf
	bls _020788E8
_020788E6:
	b _02078B20
_020788E8:
	add r0, r0, r0
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_020788F4: ; jump table
	.short _02078B20 - _020788F4 - 2 ; case 0
	.short _02078920 - _020788F4 - 2 ; case 1
	.short _0207892E - _020788F4 - 2 ; case 2
	.short _02078914 - _020788F4 - 2 ; case 3
	.short _0207894A - _020788F4 - 2 ; case 4
	.short _02078958 - _020788F4 - 2 ; case 5
	.short _0207893C - _020788F4 - 2 ; case 6
	.short _02078966 - _020788F4 - 2 ; case 7
	.short _02078978 - _020788F4 - 2 ; case 8
	.short _02078996 - _020788F4 - 2 ; case 9
	.short _0207896C - _020788F4 - 2 ; case 10
	.short _02078B20 - _020788F4 - 2 ; case 11
	.short _0207897E - _020788F4 - 2 ; case 12
	.short _02078984 - _020788F4 - 2 ; case 13
	.short _0207898A - _020788F4 - 2 ; case 14
	.short _02078990 - _020788F4 - 2 ; case 15
_02078914:
	mov r0, #0
	strb r0, [r4, #0xc]
	strb r0, [r4, #0xd]
	mov r0, #4
	str r0, [r4, #4]
	b _02078B20
_02078920:
	mov r0, #0x32
	strb r0, [r4, #0xc]
	mov r0, #0
	strb r0, [r4, #0xd]
	mov r0, #4
	str r0, [r4, #4]
	b _02078B20
_0207892E:
	mov r0, #0x64
	strb r0, [r4, #0xc]
	mov r0, #0
	strb r0, [r4, #0xd]
	mov r0, #4
	str r0, [r4, #4]
	b _02078B20
_0207893C:
	mov r0, #0
	strb r0, [r4, #0xc]
	mov r0, #1
	strb r0, [r4, #0xd]
	mov r0, #4
	str r0, [r4, #4]
	b _02078B20
_0207894A:
	mov r0, #0x32
	strb r0, [r4, #0xc]
	mov r0, #1
	strb r0, [r4, #0xd]
	mov r0, #4
	str r0, [r4, #4]
	b _02078B20
_02078958:
	mov r0, #0x64
	strb r0, [r4, #0xc]
	mov r0, #1
	strb r0, [r4, #0xd]
	mov r0, #4
	str r0, [r4, #4]
	b _02078B20
_02078966:
	mov r0, #6
	str r0, [r4, #4]
	b _02078B20
_0207896C:
	ldr r0, [r4, #8]
	mov r1, #1
	strh r1, [r0]
	mov r0, #0xb
	str r0, [r4, #4]
	b _02078B20
_02078978:
	mov r0, #9
	str r0, [r4, #4]
	b _02078B20
_0207897E:
	mov r0, #0xc
	str r0, [r4, #4]
	b _02078B20
_02078984:
	mov r0, #0xe
	str r0, [r4, #4]
	b _02078B20
_0207898A:
	mov r0, #0x12
	str r0, [r4, #4]
	b _02078B20
_02078990:
	mov r0, #0x16
	str r0, [r4, #4]
	b _02078B20
_02078996:
	mov r0, #8
	str r0, [r4, #4]
	b _02078B20
_0207899C:
	ldr r1, [r4]
	ldrb r2, [r4, #0xc]
	ldrb r3, [r4, #0xd]
	ldr r1, [r1, #8]
	add r0, r6, #0
	bl sub_020514A4
	ldr r0, [r4, #4]
	add r0, r0, #1
	str r0, [r4, #4]
	b _02078B20
_020789B2:
	mov r0, #2
	str r0, [r4, #4]
	b _02078B20
_020789B8:
	add r0, r6, #0
	bl sub_0203F4A8
	ldr r0, [r4, #4]
	add r0, r0, #1
	str r0, [r4, #4]
	b _02078B20
_020789C6:
	mov r0, #2
	str r0, [r4, #4]
	b _02078B20
_020789CC:
	ldr r2, _02078B28 ; =0x00040100
	mov r0, #3
	mov r1, #0x35
	bl CreateHeap
	bl LoadOVY13
	mov r0, #0x35
	bl ov13_0221BA00
	mov r0, #0
	bl OS_ResetSystem
	b _02078B20
_020789E8:
	ldr r0, [r4]
	bl FreeToHeap
	add r0, r4, #0
	bl FreeToHeap
	ldr r0, [r4, #4]
	add r0, r0, #1
	str r0, [r4, #4]
	mov r0, #1
	pop {r4, r5, r6, pc}
_020789FE:
	mov r0, #0
	bl sub_020378E4
	add r0, r5, #0
	mov r1, #0
	bl sub_020968B0
	str r0, [r4, #0x10]
	ldr r0, [r4, #4]
	add r0, r0, #1
	str r0, [r4, #4]
	b _02078B20
_02078A16:
	add r0, r5, #0
	bl sub_020505A0
	cmp r0, #0
	bne _02078B20
	ldr r0, [r4, #0x10]
	bl FreeToHeap
	mov r0, #2
	str r0, [r4, #4]
	b _02078B20
_02078A2C:
	add r1, r5, #0
	mov r2, #0xb
	mov r3, #1
	bl sub_02078B9C
	ldr r0, [r4, #4]
	add r0, r0, #1
	str r0, [r4, #4]
	b _02078B20
_02078A3E:
	add r0, r5, #0
	bl sub_020505A0
	cmp r0, #0
	bne _02078B20
	add r0, r4, #0
	bl sub_02078BD8
	str r0, [r4, #4]
	b _02078B20
_02078A52:
	ldr r2, [r4, #0x14]
	add r0, r5, #0
	mov r1, #0xb
	bl sub_02078C18
	str r0, [r4, #0x10]
	ldr r0, [r4, #4]
	add r0, r0, #1
	str r0, [r4, #4]
	b _02078B20
_02078A66:
	add r0, r5, #0
	bl sub_020505A0
	cmp r0, #0
	bne _02078B20
	mov r0, #2
	str r0, [r4, #4]
	ldr r0, [r4, #0x10]
	bl sub_02078C60
	b _02078B20
_02078A7C:
	add r1, r5, #0
	mov r2, #0xb
	mov r3, #2
	bl sub_02078B9C
	ldr r0, [r4, #4]
	add r0, r0, #1
	str r0, [r4, #4]
	b _02078B20
_02078A8E:
	add r0, r5, #0
	bl sub_020505A0
	cmp r0, #0
	bne _02078B20
	add r0, r4, #0
	bl sub_02078BD8
	str r0, [r4, #4]
	b _02078B20
_02078AA2:
	ldr r2, [r4, #0x14]
	add r0, r5, #0
	mov r1, #0xb
	bl sub_02078C74
	str r0, [r4, #0x10]
	ldr r0, [r4, #4]
	add r0, r0, #1
	str r0, [r4, #4]
	b _02078B20
_02078AB6:
	add r0, r5, #0
	bl sub_020505A0
	cmp r0, #0
	bne _02078B20
	mov r0, #2
	str r0, [r4, #4]
	ldr r0, [r4, #0x10]
	bl sub_02078CB4
	b _02078B20
_02078ACC:
	add r1, r5, #0
	mov r2, #0xb
	mov r3, #3
	bl sub_02078B9C
	ldr r0, [r4, #4]
	add r0, r0, #1
	str r0, [r4, #4]
	b _02078B20
_02078ADE:
	add r0, r5, #0
	bl sub_020505A0
	cmp r0, #0
	bne _02078B20
	add r0, r4, #0
	bl sub_02078BD8
	str r0, [r4, #4]
	b _02078B20
_02078AF2:
	ldr r2, [r4, #0x14]
	add r0, r5, #0
	mov r1, #0xb
	bl sub_02078CC8
	str r0, [r4, #0x10]
	ldr r0, [r4, #4]
	add r0, r0, #1
	str r0, [r4, #4]
	b _02078B20
_02078B06:
	add r0, r5, #0
	bl sub_020505A0
	cmp r0, #0
	bne _02078B20
	mov r0, #2
	str r0, [r4, #4]
	ldr r0, [r4, #0x10]
	bl sub_02078D10
	b _02078B20
_02078B1C:
	mov r0, #1
	pop {r4, r5, r6, pc}
_02078B20:
	mov r0, #0
	pop {r4, r5, r6, pc}
	.balign 4, 0
_02078B24: .word 0x02101290
_02078B28: .word 0x00040100
	thumb_func_end sub_02078834

	thumb_func_start sub_02078B2C
sub_02078B2C: ; 0x02078B2C
	push {r4, lr}
	mov r0, #0xb
	mov r1, #0x18
	bl AllocFromHeapAtEnd
	mov r1, #0
	mov r2, #0x18
	add r4, r0, #0
	bl MIi_CpuFill8
	mov r0, #0xb
	mov r1, #0xc
	bl AllocFromHeapAtEnd
	mov r1, #0
	mov r2, #0xc
	str r0, [r4]
	bl MIi_CpuFill8
	add r0, r4, #0
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_02078B2C

	thumb_func_start sub_02078B58
sub_02078B58: ; 0x02078B58
	push {r4, lr}
	add r4, r0, #0
	bl sub_02078B2C
	add r2, r0, #0
	ldr r0, [r2]
	mov r1, #2
	str r1, [r0, #4]
	ldr r1, _02078B74 ; =sub_02078834
	add r0, r4, #0
	bl sub_02050530
	pop {r4, pc}
	nop
_02078B74: .word sub_02078834
	thumb_func_end sub_02078B58

	thumb_func_start sub_02078B78
sub_02078B78: ; 0x02078B78
	push {r3, r4, r5, lr}
	add r5, r0, #0
	add r4, r1, #0
	bl sub_02078B2C
	add r2, r0, #0
	ldr r0, [r2]
	mov r1, #1
	str r1, [r0, #4]
	ldr r1, _02078B98 ; =sub_02078834
	add r0, r5, #0
	str r4, [r2, #8]
	bl sub_02050530
	pop {r3, r4, r5, pc}
	nop
_02078B98: .word sub_02078834
	thumb_func_end sub_02078B78

	thumb_func_start sub_02078B9C
sub_02078B9C: ; 0x02078B9C
	push {r4, r5, r6, lr}
	add r6, r0, #0
	add r5, r1, #0
	add r0, r2, #0
	mov r1, #0xc
	add r4, r3, #0
	bl AllocFromHeap
	add r2, r0, #0
	strb r4, [r2]
	mov r0, #2
	strb r0, [r2, #1]
	ldr r0, _02078BD0 ; =0x0210125C
	ldr r1, _02078BD4 ; =0x02101280
	ldrb r0, [r0, r4]
	strb r0, [r2, #2]
	mov r0, #0
	strb r0, [r2, #3]
	strb r0, [r2, #4]
	ldr r0, [r5, #0xc]
	str r0, [r2, #8]
	add r0, r5, #0
	str r2, [r6, #0x10]
	bl ScrUnk80_AddOvyMan
	pop {r4, r5, r6, pc}
	.balign 4, 0
_02078BD0: .word 0x0210125C
_02078BD4: .word 0x02101280
	thumb_func_end sub_02078B9C

	thumb_func_start sub_02078BD8
sub_02078BD8: ; 0x02078BD8
	push {r4, lr}
	add r4, r0, #0
	ldr r0, [r4, #0x10]
	ldrb r1, [r0, #3]
	cmp r1, #1
	bne _02078C04
	ldrb r1, [r0]
	cmp r1, #1
	beq _02078BF2
	cmp r1, #2
	beq _02078BF8
	cmp r1, #3
	b _02078BFE
_02078BF2:
	mov r1, #0x10
	str r1, [r4, #4]
	b _02078C08
_02078BF8:
	mov r1, #0x14
	str r1, [r4, #4]
	b _02078C08
_02078BFE:
	mov r1, #0x18
	str r1, [r4, #4]
	b _02078C08
_02078C04:
	mov r1, #1
	str r1, [r4, #4]
_02078C08:
	ldrb r0, [r0, #4]
	str r0, [r4, #0x14]
	ldr r0, [r4, #0x10]
	bl FreeToHeap
	ldr r0, [r4, #4]
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_02078BD8

	thumb_func_start sub_02078C18
sub_02078C18: ; 0x02078C18
	push {r4, r5, r6, lr}
	add r5, r0, #0
	add r0, r1, #0
	mov r1, #0x3c
	add r6, r2, #0
	bl AllocFromHeap
	add r4, r0, #0
	mov r1, #0
	mov r2, #0x3c
	bl memset
	add r0, r4, #0
	add r0, #0x38
	strb r6, [r0]
	add r0, r4, #0
	mov r1, #0
	add r0, #0x39
	strb r1, [r0]
	ldr r0, [r5, #0xc]
	mov r1, #2
	str r0, [r4, #0x34]
	ldr r0, _02078C58 ; =SDK_OVERLAY_OVY_90_ID
	bl HandleLoadOverlay
	ldr r1, _02078C5C ; =0x02101260
	add r0, r5, #0
	add r2, r4, #0
	bl ScrUnk80_AddOvyMan
	add r0, r4, #0
	pop {r4, r5, r6, pc}
	.balign 4, 0
_02078C58: .word SDK_OVERLAY_OVY_90_ID
_02078C5C: .word 0x02101260
	thumb_func_end sub_02078C18

	thumb_func_start sub_02078C60
sub_02078C60: ; 0x02078C60
	push {r3, lr}
	bl FreeToHeap
	ldr r0, _02078C70 ; =SDK_OVERLAY_OVY_90_ID
	bl UnloadOverlayByID
	pop {r3, pc}
	nop
_02078C70: .word SDK_OVERLAY_OVY_90_ID
	thumb_func_end sub_02078C60

	thumb_func_start sub_02078C74
sub_02078C74: ; 0x02078C74
	push {r4, r5, r6, lr}
	add r5, r0, #0
	add r0, r1, #0
	mov r1, #0x40
	add r6, r2, #0
	bl AllocFromHeap
	add r4, r0, #0
	mov r1, #0
	mov r2, #0x40
	bl memset
	str r6, [r4, #0x3c]
	mov r0, #0
	str r0, [r4, #0x38]
	ldr r0, [r5, #0xc]
	mov r1, #2
	str r0, [r4, #0x34]
	ldr r0, _02078CAC ; =SDK_OVERLAY_OVY_90_ID
	bl HandleLoadOverlay
	ldr r1, _02078CB0 ; =0x02101270
	add r0, r5, #0
	add r2, r4, #0
	bl ScrUnk80_AddOvyMan
	add r0, r4, #0
	pop {r4, r5, r6, pc}
	.balign 4, 0
_02078CAC: .word SDK_OVERLAY_OVY_90_ID
_02078CB0: .word 0x02101270
	thumb_func_end sub_02078C74

	thumb_func_start sub_02078CB4
sub_02078CB4: ; 0x02078CB4
	push {r3, lr}
	bl FreeToHeap
	ldr r0, _02078CC4 ; =SDK_OVERLAY_OVY_90_ID
	bl UnloadOverlayByID
	pop {r3, pc}
	nop
_02078CC4: .word SDK_OVERLAY_OVY_90_ID
	thumb_func_end sub_02078CB4

	thumb_func_start sub_02078CC8
sub_02078CC8: ; 0x02078CC8
	push {r4, r5, r6, lr}
	add r5, r0, #0
	add r0, r1, #0
	mov r1, #0x3c
	add r6, r2, #0
	bl AllocFromHeap
	add r4, r0, #0
	mov r1, #0
	mov r2, #0x3c
	bl MIi_CpuFill8
	add r0, r4, #0
	add r0, #0x38
	strb r6, [r0]
	add r0, r4, #0
	mov r1, #0
	add r0, #0x39
	strb r1, [r0]
	ldr r0, [r5, #0xc]
	mov r1, #2
	str r0, [r4, #0x34]
	ldr r0, _02078D08 ; =SDK_OVERLAY_OVY_90_ID
	bl HandleLoadOverlay
	ldr r1, _02078D0C ; =0x021012A0
	add r0, r5, #0
	add r2, r4, #0
	bl ScrUnk80_AddOvyMan
	add r0, r4, #0
	pop {r4, r5, r6, pc}
	.balign 4, 0
_02078D08: .word SDK_OVERLAY_OVY_90_ID
_02078D0C: .word 0x021012A0
	thumb_func_end sub_02078CC8

	thumb_func_start sub_02078D10
sub_02078D10: ; 0x02078D10
	push {r3, lr}
	bl FreeToHeap
	ldr r0, _02078D20 ; =SDK_OVERLAY_OVY_90_ID
	bl UnloadOverlayByID
	pop {r3, pc}
	nop
_02078D20: .word SDK_OVERLAY_OVY_90_ID
	thumb_func_end sub_02078D10

	thumb_func_start sub_02078D24
sub_02078D24: ; 0x02078D24
	push {r4, lr}
	add r4, r0, #0
	bl sub_020398C8
	mov r1, #0x24
	ldrb r2, [r0, #0x1b]
	mul r1, r4
	add r0, r0, r1
	add r0, #0x3f
	ldrb r0, [r0]
	cmp r2, #0xc
	bne _02078D44
	cmp r0, #5
	bne _02078D44
	mov r0, #1
	pop {r4, pc}
_02078D44:
	cmp r2, #0xd
	bne _02078D50
	cmp r0, #6
	bne _02078D50
	mov r0, #1
	pop {r4, pc}
_02078D50:
	cmp r2, #0xe
	bne _02078D5C
	cmp r0, #7
	bne _02078D5C
	mov r0, #1
	pop {r4, pc}
_02078D5C:
	cmp r2, #9
	bne _02078D68
	cmp r0, #2
	bne _02078D68
	mov r0, #1
	pop {r4, pc}
_02078D68:
	cmp r2, #0xa
	bne _02078D74
	cmp r0, #3
	bne _02078D74
	mov r0, #1
	pop {r4, pc}
_02078D74:
	cmp r2, #0xb
	bne _02078D80
	cmp r0, #4
	bne _02078D80
	mov r0, #1
	pop {r4, pc}
_02078D80:
	cmp r2, #0xf
	bne _02078D8C
	cmp r0, #8
	bne _02078D8C
	mov r0, #1
	pop {r4, pc}
_02078D8C:
	cmp r2, #0x13
	bne _02078D98
	cmp r0, #0x12
	bne _02078D98
	mov r0, #1
	pop {r4, pc}
_02078D98:
	cmp r2, #0x15
	bne _02078DA4
	cmp r0, #0x14
	bne _02078DA4
	mov r0, #1
	pop {r4, pc}
_02078DA4:
	cmp r2, #0x17
	bne _02078DB0
	cmp r0, #0x16
	bne _02078DB0
	mov r0, #1
	pop {r4, pc}
_02078DB0:
	cmp r2, #0x19
	bne _02078DBC
	cmp r0, #0x18
	bne _02078DBC
	mov r0, #1
	pop {r4, pc}
_02078DBC:
	cmp r2, #0x1b
	bne _02078DC8
	cmp r0, #0x1a
	bne _02078DC8
	mov r0, #1
	pop {r4, pc}
_02078DC8:
	cmp r2, #0x10
	bne _02078DD4
	cmp r0, #1
	bne _02078DD4
	mov r0, #1
	pop {r4, pc}
_02078DD4:
	mov r0, #0
	pop {r4, pc}
	thumb_func_end sub_02078D24

	thumb_func_start sub_02078DD8
sub_02078DD8: ; 0x02078DD8
	push {r3, r4, r5, lr}
	add r5, r0, #0
	add r0, r1, #0
	mov r1, #0x24
	bl AllocFromHeap
	mov r1, #0
	mov r2, #0x24
	add r4, r0, #0
	bl memset
	mov r0, #0x1c
	strb r0, [r4, #0x1b]
	add r0, r5, #0
	bl PlayerProfile_GetTrainerGender
	strb r0, [r4, #0x1e]
	add r0, r5, #0
	bl PlayerProfile_GetAvatar
	strb r0, [r4, #0x1d]
	add r0, r5, #0
	bl PlayerProfile_GetVersion
	strb r0, [r4, #0x18]
	add r0, r5, #0
	bl PlayerProfile_GetLanguage
	strb r0, [r4, #0x19]
	add r0, r4, #0
	mov r1, #0x24
	bl ov00_021E6D60
	cmp r0, #1
	beq _02078E22
	bl GF_AssertFail
_02078E22:
	add r0, r4, #0
	pop {r3, r4, r5, pc}
	.balign 4, 0
	thumb_func_end sub_02078DD8

	thumb_func_start sub_02078E28
sub_02078E28: ; 0x02078E28
	ldr r3, _02078E2C ; =FreeToHeap
	bx r3
	.balign 4, 0
_02078E2C: .word FreeToHeap
	thumb_func_end sub_02078E28

	thumb_func_start sub_02078E30
sub_02078E30: ; 0x02078E30
	push {r4, r5, lr}
	sub sp, #0xc
	add r5, r0, #0
	mov r0, #0
	add r1, r0, #0
	bl sub_0201A0FC
	bl sub_0201A108
	bl sub_02022C54
	bl sub_02022CBC
	mov r0, #1
	lsl r0, r0, #0x1a
	ldr r2, [r0]
	ldr r1, _02079014 ; =0xFFFFE0FF
	ldr r3, _02079018 ; =0x04001000
	and r2, r1
	str r2, [r0]
	ldr r2, [r3]
	add r0, #0x50
	and r1, r2
	str r1, [r3]
	mov r1, #0
	strh r1, [r0]
	add r3, #0x50
	ldr r2, _0207901C ; =0x04000304
	strh r1, [r3]
	ldrh r1, [r2]
	ldr r0, _02079020 ; =0xFFFF7FFF
	and r0, r1
	strh r0, [r2]
	mov r0, #4
	mov r1, #8
	bl sub_0201A71C
	mov r1, #0xc
	mov r0, #3
	lsl r2, r1, #0xe
	bl CreateHeap
	mov r0, #0x15
	mov r1, #0xc
	bl NARC_ctor
	add r4, r0, #0
	add r0, r5, #0
	bl sub_02079BD8
	add r5, r0, #0
	mov r0, #6
	str r0, [sp]
	mov r0, #1
	str r0, [sp, #4]
	mov r0, #0xc
	mov r1, #3
	str r0, [sp, #8]
	mov r0, #2
	add r2, r1, #0
	mov r3, #0
	bl sub_0200FA24
	add r0, r5, #0
	bl sub_02079CE4
	bl sub_02079700
	ldr r0, [r5]
	bl sub_02079758
	add r0, r5, #0
	add r1, r4, #0
	bl sub_02079A14
	bl sub_020210BC
	mov r0, #4
	bl sub_02021148
	mov r1, #0
	mov r0, #0x39
	add r2, r1, #0
	bl sub_02004EC4
	add r0, r5, #0
	bl sub_0207CF98
	add r0, r5, #0
	bl sub_0207CDCC
	add r0, r5, #0
	bl sub_0207EB24
	add r0, r5, #0
	bl sub_0207EDD4
	add r0, r5, #0
	bl sub_02079D38
	add r0, r5, #0
	bl sub_0207A22C
	ldr r1, _02079024 ; =0x00000C65
	add r0, r5, #0
	ldrb r1, [r5, r1]
	mov r2, #1
	bl sub_0207B51C
	ldr r1, _02079028 ; =0x00000654
	ldr r3, [r5, r1]
	add r0, r3, #0
	add r0, #0x24
	ldrb r2, [r0]
	cmp r2, #5
	beq _02078F1C
	cmp r2, #0x10
	bne _02078F32
_02078F1C:
	ldrh r0, [r3, #0x28]
	bl sub_020817C4
	cmp r0, #0
	bne _02078FE4
	add r0, r5, #0
	mov r1, #0x21
	mov r2, #1
	bl sub_0207DAC4
	b _02078FE4
_02078F32:
	cmp r2, #6
	bne _02078F42
	add r0, r5, #0
	mov r1, #0x22
	mov r2, #1
	bl sub_0207DAC4
	b _02078FE4
_02078F42:
	cmp r2, #9
	beq _02078F4A
	cmp r2, #0xe
	bne _02078F56
_02078F4A:
	add r0, r5, #0
	mov r1, #0x20
	mov r2, #1
	bl sub_0207DAC4
	b _02078FE4
_02078F56:
	cmp r2, #7
	beq _02078F6A
	cmp r2, #8
	beq _02078F6A
	add r0, r2, #0
	add r0, #0xf5
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	cmp r0, #1
	bhi _02078F76
_02078F6A:
	ldr r0, _0207902C ; =0x00000678
	mov r1, #1
	ldr r0, [r5, r0]
	bl sub_0200DD08
	b _02078FE4
_02078F76:
	cmp r2, #2
	beq _02078F7E
	cmp r2, #0x11
	bne _02078F8A
_02078F7E:
	add r0, r5, #0
	mov r1, #0x23
	mov r2, #1
	bl sub_0207DAC4
	b _02078FE4
_02078F8A:
	cmp r2, #0xf
	bne _02078F9A
	add r0, r5, #0
	mov r1, #0x23
	mov r2, #1
	bl sub_0207DAC4
	b _02078FE4
_02078F9A:
	cmp r2, #0x15
	bne _02078FAA
	add r0, r5, #0
	mov r1, #0xb8
	mov r2, #1
	bl sub_0207DAC4
	b _02078FE4
_02078FAA:
	cmp r2, #0x16
	bne _02078FBA
	add r0, r5, #0
	mov r1, #0x23
	mov r2, #1
	bl sub_0207DAC4
	b _02078FE4
_02078FBA:
	cmp r2, #0x17
	bne _02078FCA
	add r0, r5, #0
	mov r1, #0x23
	mov r2, #1
	bl sub_0207DAC4
	b _02078FE4
_02078FCA:
	cmp r2, #0xa
	beq _02078FDA
	add r0, r5, #0
	mov r1, #0x1d
	mov r2, #1
	bl sub_0207DAC4
	b _02078FE4
_02078FDA:
	add r1, #0x24
	ldr r0, [r5, r1]
	mov r1, #1
	bl sub_0200DD08
_02078FE4:
	add r0, r5, #0
	bl sub_0207A89C
	mov r0, #1
	bl sub_02002B8C
	ldr r0, _02079030 ; =sub_020796B8
	add r1, r5, #0
	bl sub_0201A0FC
	mov r0, #2
	bl sub_0203A994
	mov r0, #4
	mov r1, #0xc
	bl sub_02002CEC
	add r0, r4, #0
	bl NARC_dtor
	mov r0, #1
	add sp, #0xc
	pop {r4, r5, pc}
	nop
_02079014: .word 0xFFFFE0FF
_02079018: .word 0x04001000
_0207901C: .word 0x04000304
_02079020: .word 0xFFFF7FFF
_02079024: .word 0x00000C65
_02079028: .word 0x00000654
_0207902C: .word 0x00000678
_02079030: .word sub_020796B8
	thumb_func_end sub_02078E30

	thumb_func_start sub_02079034
sub_02079034: ; 0x02079034
	push {r3, r4, r5, lr}
	add r4, r1, #0
	bl OverlayManager_GetData
	ldr r1, [r4]
	add r5, r0, #0
	cmp r1, #0x21
	bhi _020790AE
	add r1, r1, r1
	add r1, pc
	ldrh r1, [r1, #6]
	lsl r1, r1, #0x10
	asr r1, r1, #0x10
	add pc, r1
_02079050: ; jump table
	.short _02079094 - _02079050 - 2 ; case 0
	.short _0207909C - _02079050 - 2 ; case 1
	.short _020790A4 - _02079050 - 2 ; case 2
	.short _020790B6 - _02079050 - 2 ; case 3
	.short _020790BE - _02079050 - 2 ; case 4
	.short _020790C6 - _02079050 - 2 ; case 5
	.short _020790D0 - _02079050 - 2 ; case 6
	.short _020790D8 - _02079050 - 2 ; case 7
	.short _020790E0 - _02079050 - 2 ; case 8
	.short _020790E8 - _02079050 - 2 ; case 9
	.short _020790F0 - _02079050 - 2 ; case 10
	.short _020790F8 - _02079050 - 2 ; case 11
	.short _02079100 - _02079050 - 2 ; case 12
	.short _02079108 - _02079050 - 2 ; case 13
	.short _02079110 - _02079050 - 2 ; case 14
	.short _02079118 - _02079050 - 2 ; case 15
	.short _02079120 - _02079050 - 2 ; case 16
	.short _02079128 - _02079050 - 2 ; case 17
	.short _02079130 - _02079050 - 2 ; case 18
	.short _02079138 - _02079050 - 2 ; case 19
	.short _02079140 - _02079050 - 2 ; case 20
	.short _02079148 - _02079050 - 2 ; case 21
	.short _02079150 - _02079050 - 2 ; case 22
	.short _02079158 - _02079050 - 2 ; case 23
	.short _02079160 - _02079050 - 2 ; case 24
	.short _02079168 - _02079050 - 2 ; case 25
	.short _02079170 - _02079050 - 2 ; case 26
	.short _02079178 - _02079050 - 2 ; case 27
	.short _02079180 - _02079050 - 2 ; case 28
	.short _02079198 - _02079050 - 2 ; case 29
	.short _020791A6 - _02079050 - 2 ; case 30
	.short _020791AE - _02079050 - 2 ; case 31
	.short _020791C8 - _02079050 - 2 ; case 32
	.short _020791D6 - _02079050 - 2 ; case 33
_02079094:
	bl sub_02079280
	str r0, [r4]
	b _020791EE
_0207909C:
	bl sub_02079308
	str r0, [r4]
	b _020791EE
_020790A4:
	add r1, r4, #0
	bl sub_0207BC1C
	cmp r0, #1
	beq _020790B0
_020790AE:
	b _020791EE
_020790B0:
	mov r0, #1
	str r0, [r4]
	b _020791EE
_020790B6:
	bl sub_02080B74
	str r0, [r4]
	b _020791EE
_020790BE:
	bl sub_020793C0
	str r0, [r4]
	b _020791EE
_020790C6:
	ldr r1, _02079214 ; =0x00000C54
	ldr r1, [r5, r1]
	blx r1
	str r0, [r4]
	b _020791EE
_020790D0:
	bl sub_02082738
	str r0, [r4]
	b _020791EE
_020790D8:
	bl sub_02081820
	str r0, [r4]
	b _020791EE
_020790E0:
	bl sub_02079400
	str r0, [r4]
	b _020791EE
_020790E8:
	bl sub_0207C728
	str r0, [r4]
	b _020791EE
_020790F0:
	bl sub_0207C74C
	str r0, [r4]
	b _020791EE
_020790F8:
	bl sub_0207C6BC
	str r0, [r4]
	b _020791EE
_02079100:
	bl sub_0207C6DC
	str r0, [r4]
	b _020791EE
_02079108:
	bl sub_0207C70C
	str r0, [r4]
	b _020791EE
_02079110:
	bl sub_0207C908
	str r0, [r4]
	b _020791EE
_02079118:
	bl sub_02079440
	str r0, [r4]
	b _020791EE
_02079120:
	bl sub_0207C400
	str r0, [r4]
	b _020791EE
_02079128:
	bl sub_0207F694
	str r0, [r4]
	b _020791EE
_02079130:
	bl sub_0207F6E8
	str r0, [r4]
	b _020791EE
_02079138:
	bl sub_0207F720
	str r0, [r4]
	b _020791EE
_02079140:
	bl sub_0207FA08
	str r0, [r4]
	b _020791EE
_02079148:
	bl sub_02079550
	str r0, [r4]
	b _020791EE
_02079150:
	bl sub_02082370
	str r0, [r4]
	b _020791EE
_02079158:
	bl sub_02080610
	str r0, [r4]
	b _020791EE
_02079160:
	bl sub_020794C8
	str r0, [r4]
	b _020791EE
_02079168:
	bl sub_020794EC
	str r0, [r4]
	b _020791EE
_02079170:
	bl sub_020794F0
	str r0, [r4]
	b _020791EE
_02079178:
	bl sub_020794FC
	str r0, [r4]
	b _020791EE
_02079180:
	bl sub_0207B600
	cmp r0, #0
	bne _0207918E
	mov r0, #0x1d
	str r0, [r4]
	b _020791EE
_0207918E:
	cmp r0, #3
	bne _020791EE
	mov r0, #1
	str r0, [r4]
	b _020791EE
_02079198:
	bl sub_0207FD6C
	cmp r0, #1
	bne _020791EE
	mov r0, #1
	str r0, [r4]
	b _020791EE
_020791A6:
	bl sub_0207BD78
	str r0, [r4]
	b _020791EE
_020791AE:
	bl ov94_021E593C
	cmp r0, #1
	bne _020791C2
	add r0, r5, #0
	bl sub_0207CB6C
	mov r0, #0x19
	str r0, [r4]
	b _020791EE
_020791C2:
	mov r0, #0x1f
	str r0, [r4]
	b _020791EE
_020791C8:
	mov r0, #1
	mov r1, #0xc
	bl sub_020880CC
	mov r0, #0x21
	str r0, [r4]
	b _020791EE
_020791D6:
	bl sub_0200FB5C
	cmp r0, #1
	bne _020791EE
	ldr r0, _02079218 ; =0x00000C65
	ldrb r1, [r5, r0]
	ldr r0, _0207921C ; =0x00000654
	ldr r0, [r5, r0]
	add r0, #0x26
	strb r1, [r0]
	mov r0, #1
	pop {r3, r4, r5, pc}
_020791EE:
	add r0, r5, #0
	bl sub_0207F178
	add r0, r5, #0
	bl sub_0207F2F8
	add r0, r5, #0
	bl sub_0207AC20
	add r0, r5, #0
	bl sub_02079230
	ldr r0, _02079220 ; =0x0000065C
	ldr r0, [r5, r0]
	bl sub_0200D020
	mov r0, #0
	pop {r3, r4, r5, pc}
	nop
_02079214: .word 0x00000C54
_02079218: .word 0x00000C65
_0207921C: .word 0x00000654
_02079220: .word 0x0000065C
	thumb_func_end sub_02079034

	thumb_func_start sub_02079224
sub_02079224: ; 0x02079224
	ldr r2, _0207922C ; =0x00000C7C
	str r1, [r0, r2]
	bx lr
	nop
_0207922C: .word 0x00000C7C
	thumb_func_end sub_02079224

	thumb_func_start sub_02079230
sub_02079230: ; 0x02079230
	push {r3, lr}
	ldr r1, _02079278 ; =0x00000C7C
	ldr r2, [r0, r1]
	cmp r2, #0
	beq _02079258
	sub r2, r1, #4
	ldr r3, [r0, r2]
	add r3, #0xc
	str r3, [r0, r2]
	ldr r2, [r0, r2]
	cmp r2, #0x28
	ble _0207924E
	mov r2, #0x28
	sub r1, r1, #4
	str r2, [r0, r1]
_0207924E:
	ldr r1, _0207927C ; =0x00000C78
	ldr r1, [r0, r1]
	bl sub_0207F334
	pop {r3, pc}
_02079258:
	sub r2, r1, #4
	ldr r3, [r0, r2]
	sub r3, #0xc
	str r3, [r0, r2]
	ldr r2, [r0, r2]
	cmp r2, #0
	bge _0207926C
	mov r2, #0
	sub r1, r1, #4
	str r2, [r0, r1]
_0207926C:
	ldr r1, _0207927C ; =0x00000C78
	ldr r1, [r0, r1]
	bl sub_0207F334
	pop {r3, pc}
	nop
_02079278: .word 0x00000C7C
_0207927C: .word 0x00000C78
	thumb_func_end sub_02079230

	thumb_func_start sub_02079280
sub_02079280: ; 0x02079280
	push {r4, lr}
	add r4, r0, #0
	bl sub_0200FB5C
	cmp r0, #1
	bne _020792FA
	ldr r0, _02079300 ; =0x00000654
	ldr r2, [r4, r0]
	add r0, r2, #0
	add r0, #0x24
	ldrb r1, [r0]
	cmp r1, #5
	beq _0207929E
	cmp r1, #0x10
	bne _020792B6
_0207929E:
	ldrh r0, [r2, #0x28]
	bl sub_020817C4
	cmp r0, #1
	bne _020792B2
	ldr r0, _02079304 ; =0x00000C62
	mov r1, #0
	strb r1, [r4, r0]
	mov r0, #7
	pop {r4, pc}
_020792B2:
	mov r0, #4
	pop {r4, pc}
_020792B6:
	cmp r1, #6
	bne _020792BE
	mov r0, #0x15
	pop {r4, pc}
_020792BE:
	cmp r1, #7
	bne _020792CA
	add r0, r4, #0
	bl sub_020822CC
	pop {r4, pc}
_020792CA:
	cmp r1, #8
	bne _020792D6
	add r0, r4, #0
	bl sub_02081ED0
	pop {r4, pc}
_020792D6:
	add r0, r1, #0
	add r0, #0xf5
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	cmp r0, #1
	bhi _020792E6
	mov r0, #0xe
	pop {r4, pc}
_020792E6:
	cmp r1, #9
	bne _020792EE
	mov r0, #8
	pop {r4, pc}
_020792EE:
	cmp r1, #0xa
	bne _020792F6
	mov r0, #0x10
	pop {r4, pc}
_020792F6:
	mov r0, #1
	pop {r4, pc}
_020792FA:
	mov r0, #0
	pop {r4, pc}
	nop
_02079300: .word 0x00000654
_02079304: .word 0x00000C62
	thumb_func_end sub_02079280

	thumb_func_start sub_02079308
sub_02079308: ; 0x02079308
	push {r4, lr}
	add r4, r0, #0
	bl sub_0207ADB8
	cmp r0, #4
	bhi _020793B6
	add r0, r0, r0
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_02079320: ; jump table
	.short _0207932A - _02079320 - 2 ; case 0
	.short _020793B6 - _02079320 - 2 ; case 1
	.short _0207938C - _02079320 - 2 ; case 2
	.short _0207937E - _02079320 - 2 ; case 3
	.short _02079376 - _02079320 - 2 ; case 4
_0207932A:
	ldr r0, _020793BC ; =0x00000654
	ldr r1, [r4, r0]
	add r0, r1, #0
	add r0, #0x24
	ldrb r0, [r0]
	cmp r0, #3
	bgt _0207933C
	beq _0207934E
	b _0207936A
_0207933C:
	cmp r0, #0x14
	bgt _0207936A
	cmp r0, #0xe
	blt _0207936A
	beq _02079358
	cmp r0, #0x13
	beq _02079362
	cmp r0, #0x14
	bne _0207936A
_0207934E:
	mov r0, #0
	add r1, #0x27
	strb r0, [r1]
	mov r0, #0x20
	pop {r4, pc}
_02079358:
	add r0, r4, #0
	bl sub_02082868
	mov r0, #0x18
	pop {r4, pc}
_02079362:
	add r0, r4, #0
	bl sub_0207CA30
	pop {r4, pc}
_0207936A:
	add r0, r4, #0
	mov r1, #1
	bl sub_02079224
	mov r0, #2
	pop {r4, pc}
_02079376:
	add r0, r4, #0
	bl sub_0207B7E0
	pop {r4, pc}
_0207937E:
	ldr r0, _020793BC ; =0x00000654
	mov r1, #0
	ldr r0, [r4, r0]
	add r0, #0x27
	strb r1, [r0]
	mov r0, #0x20
	pop {r4, pc}
_0207938C:
	ldr r0, _020793BC ; =0x00000654
	ldr r2, [r4, r0]
	add r1, r2, #0
	add r1, #0x24
	ldrb r1, [r1]
	cmp r1, #0xf
	beq _020793A4
	mov r0, #1
	add r2, #0x27
	strb r0, [r2]
	mov r0, #0x20
	pop {r4, pc}
_020793A4:
	add r0, #0x24
	ldr r0, [r4, r0]
	mov r1, #1
	bl sub_0200DD08
	add r0, r4, #0
	bl sub_020807AC
	pop {r4, pc}
_020793B6:
	mov r0, #1
	pop {r4, pc}
	nop
_020793BC: .word 0x00000654
	thumb_func_end sub_02079308

	thumb_func_start sub_020793C0
sub_020793C0: ; 0x020793C0
	push {r4, lr}
	add r4, r0, #0
	bl sub_0207C0DC
	cmp r0, #0
	beq _020793D0
	cmp r0, #2
	bne _020793E2
_020793D0:
	ldr r0, _020793F8 ; =0x00000678
	mov r1, #1
	ldr r0, [r4, r0]
	bl sub_0200DD08
	add r0, r4, #0
	bl sub_0207C288
	pop {r4, pc}
_020793E2:
	cmp r0, #3
	bne _020793F4
	ldr r0, _020793FC ; =0x00000654
	mov r1, #0
	ldr r0, [r4, r0]
	add r0, #0x27
	strb r1, [r0]
	mov r0, #0x20
	pop {r4, pc}
_020793F4:
	mov r0, #4
	pop {r4, pc}
	.balign 4, 0
_020793F8: .word 0x00000678
_020793FC: .word 0x00000654
	thumb_func_end sub_020793C0

	thumb_func_start sub_02079400
sub_02079400: ; 0x02079400
	push {r4, lr}
	add r4, r0, #0
	bl sub_0207C0DC
	cmp r0, #0
	beq _02079410
	cmp r0, #2
	bne _02079422
_02079410:
	ldr r0, _02079438 ; =0x00000678
	mov r1, #1
	ldr r0, [r4, r0]
	bl sub_0200DD08
	add r0, r4, #0
	bl sub_0207C400
	pop {r4, pc}
_02079422:
	cmp r0, #3
	bne _02079434
	ldr r0, _0207943C ; =0x00000654
	mov r1, #0
	ldr r0, [r4, r0]
	add r0, #0x27
	strb r1, [r0]
	mov r0, #0x20
	pop {r4, pc}
_02079434:
	mov r0, #8
	pop {r4, pc}
	.balign 4, 0
_02079438: .word 0x00000678
_0207943C: .word 0x00000654
	thumb_func_end sub_02079400

	thumb_func_start sub_02079440
sub_02079440: ; 0x02079440
	push {r3, r4, lr}
	sub sp, #4
	ldr r1, _020794C0 ; =0x00000824
	add r4, r0, #0
	ldr r1, [r4, r1]
	bl sub_0207E93C
	add r2, r0, #0
	mov r0, #1
	mvn r0, r0
	cmp r2, r0
	beq _02079460
	add r0, r0, #1
	cmp r2, r0
	beq _020794BA
	b _020794AE
_02079460:
	mov r0, #0x85
	lsl r0, r0, #2
	add r0, r4, r0
	mov r1, #1
	bl sub_0200E9BC
	mov r0, #0x8d
	lsl r0, r0, #2
	add r0, r4, r0
	mov r1, #1
	bl sub_0200E5D4
	mov r0, #0x8d
	lsl r0, r0, #2
	add r0, r4, r0
	bl sub_0201D8E4
	add r0, r4, #0
	mov r1, #0
	bl sub_02079224
	add r0, r4, #0
	bl sub_0207CB20
	bl sub_0207CB90
	add r0, r4, #0
	mov r1, #0x1d
	mov r2, #1
	bl sub_0207DAC4
	ldr r0, _020794C4 ; =0x00000678
	mov r1, #0
	ldr r0, [r4, r0]
	bl sub_0200DD08
	add sp, #4
	mov r0, #1
	pop {r3, r4, pc}
_020794AE:
	add r0, r4, #0
	add r1, sp, #0
	blx r2
	ldr r0, [sp]
	add sp, #4
	pop {r3, r4, pc}
_020794BA:
	mov r0, #0xf
	add sp, #4
	pop {r3, r4, pc}
	.balign 4, 0
_020794C0: .word 0x00000824
_020794C4: .word 0x00000678
	thumb_func_end sub_02079440

	thumb_func_start sub_020794C8
sub_020794C8: ; 0x020794C8
	push {r4, lr}
	add r4, r0, #0
	ldr r0, _020794E4 ; =0x00000C64
	ldrb r0, [r4, r0]
	bl sub_02020094
	cmp r0, #0
	bne _020794DE
	ldr r0, _020794E8 ; =0x00000C62
	ldrb r0, [r4, r0]
	pop {r4, pc}
_020794DE:
	mov r0, #0x18
	pop {r4, pc}
	nop
_020794E4: .word 0x00000C64
_020794E8: .word 0x00000C62
	thumb_func_end sub_020794C8

	thumb_func_start sub_020794EC
sub_020794EC: ; 0x020794EC
	mov r0, #0x20
	bx lr
	thumb_func_end sub_020794EC

	thumb_func_start sub_020794F0
sub_020794F0: ; 0x020794F0
	push {r3, lr}
	bl sub_0207DBCC
	mov r0, #0x1b
	pop {r3, pc}
	.balign 4, 0
	thumb_func_end sub_020794F0

	thumb_func_start sub_020794FC
sub_020794FC: ; 0x020794FC
	push {r4, lr}
	add r4, r0, #0
	ldr r0, _02079544 ; =0x00000C88
	ldr r0, [r4, r0]
	bl sub_020168F4
	cmp r0, #1
	beq _02079512
	cmp r0, #2
	beq _02079528
	b _0207953E
_02079512:
	ldr r0, _02079544 ; =0x00000C88
	ldr r0, [r4, r0]
	bl sub_02016624
	bl sub_0207CB90
	ldr r1, _02079548 ; =0x00000C58
	add r0, r4, #0
	ldr r1, [r4, r1]
	blx r1
	pop {r4, pc}
_02079528:
	ldr r0, _02079544 ; =0x00000C88
	ldr r0, [r4, r0]
	bl sub_02016624
	bl sub_0207CB90
	ldr r1, _0207954C ; =0x00000C5C
	add r0, r4, #0
	ldr r1, [r4, r1]
	blx r1
	pop {r4, pc}
_0207953E:
	mov r0, #0x1b
	pop {r4, pc}
	nop
_02079544: .word 0x00000C88
_02079548: .word 0x00000C58
_0207954C: .word 0x00000C5C
	thumb_func_end sub_020794FC

	thumb_func_start sub_02079550
sub_02079550: ; 0x02079550
	push {r4, lr}
	add r4, r0, #0
	bl sub_0207C0DC
	cmp r0, #0
	beq _02079560
	cmp r0, #2
	bne _020795B4
_02079560:
	ldr r0, _020795CC ; =0x00000678
	mov r1, #1
	ldr r0, [r4, r0]
	bl sub_0200DD08
	ldr r0, _020795D0 ; =0x00000C65
	mov r1, #0x30
	ldrb r0, [r4, r0]
	add r2, r0, #0
	mul r2, r1
	ldr r0, _020795D4 ; =0x00000838
	add r2, r4, r2
	ldrb r0, [r2, r0]
	cmp r0, #1
	beq _02079586
	add r0, r4, #0
	bl sub_02082134
	pop {r4, pc}
_02079586:
	add r0, r4, #0
	sub r1, #0x31
	mov r2, #1
	bl sub_0207DAEC
	ldr r0, _020795D8 ; =0x00000654
	mov r2, #0x1f
	ldr r0, [r4, r0]
	mov r1, #0
	add r0, #0x27
	strb r1, [r0]
	ldr r0, _020795DC ; =0x00000C62
	mov r1, #0x19
	strb r1, [r4, r0]
	lsl r2, r2, #6
	ldr r0, [r4, r2]
	add r2, #8
	ldr r2, [r4, r2]
	mov r1, #0x66
	bl ReadMsgDataIntoString
	mov r0, #0x18
	pop {r4, pc}
_020795B4:
	cmp r0, #3
	bne _020795C6
	ldr r0, _020795D8 ; =0x00000654
	mov r1, #0
	ldr r0, [r4, r0]
	add r0, #0x27
	strb r1, [r0]
	mov r0, #0x20
	pop {r4, pc}
_020795C6:
	mov r0, #0x15
	pop {r4, pc}
	nop
_020795CC: .word 0x00000678
_020795D0: .word 0x00000C65
_020795D4: .word 0x00000838
_020795D8: .word 0x00000654
_020795DC: .word 0x00000C62
	thumb_func_end sub_02079550

	thumb_func_start sub_020795E0
sub_020795E0: ; 0x020795E0
	push {r3, r4, r5, r6, r7, lr}
	str r0, [sp]
	bl OverlayManager_GetData
	add r6, r0, #0
	mov r0, #0
	bl sub_02002B8C
	mov r0, #0
	add r1, r0, #0
	bl sub_0201A0FC
	add r0, r6, #0
	bl sub_0207EFA4
	add r0, r6, #0
	bl sub_0207CF68
	ldr r0, [r6]
	bl sub_020798C4
	bl sub_02021238
	bl sub_020205AC
	ldr r7, _0207969C ; =0x00000828
	mov r4, #0
	add r5, r6, #0
_02079618:
	ldr r0, [r5, r7]
	bl String_dtor
	add r4, r4, #1
	add r5, #0x30
	cmp r4, #6
	blo _02079618
	ldr r0, _020796A0 ; =0x000007C8
	ldr r0, [r6, r0]
	bl String_dtor
	ldr r0, _020796A4 ; =0x000007CC
	ldr r0, [r6, r0]
	bl String_dtor
	mov r7, #0x7d
	mov r5, #0
	add r4, r6, #0
	lsl r7, r7, #4
_0207963E:
	ldr r0, [r4, r7]
	bl String_dtor
	add r5, r5, #1
	add r4, r4, #4
	cmp r5, #0x14
	blo _0207963E
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r0, [r6, r0]
	bl DestroyMsgData
	ldr r0, _020796A8 ; =0x000007BC
	ldr r0, [r6, r0]
	bl MessagePrinter_delete
	ldr r0, _020796AC ; =0x000007C4
	ldr r0, [r6, r0]
	bl ScrStrBufs_delete
	ldr r0, _020796B0 ; =0x00000C74
	ldr r0, [r6, r0]
	cmp r0, #0
	beq _02079672
	bl sub_0207495C
_02079672:
	ldr r0, _020796B4 ; =0x00000654
	ldr r0, [r6, r0]
	add r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0
	bne _02079682
	bl sub_02004B10
_02079682:
	mov r0, #4
	bl sub_02002DB4
	ldr r0, [sp]
	bl OverlayManager_FreeData
	mov r0, #0xc
	bl DestroyHeap
	bl sub_0203A964
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_0207969C: .word 0x00000828
_020796A0: .word 0x000007C8
_020796A4: .word 0x000007CC
_020796A8: .word 0x000007BC
_020796AC: .word 0x000007C4
_020796B0: .word 0x00000C74
_020796B4: .word 0x00000654
	thumb_func_end sub_020795E0

	thumb_func_start sub_020796B8
sub_020796B8: ; 0x020796B8
	push {r4, lr}
	ldr r3, _020796F4 ; =0x00000C78
	add r4, r0, #0
	ldr r0, [r4]
	ldr r3, [r4, r3]
	mov r1, #4
	mov r2, #3
	bl sub_0201BC8C
	ldr r3, _020796F4 ; =0x00000C78
	ldr r0, [r4]
	ldr r3, [r4, r3]
	mov r1, #6
	mov r2, #3
	bl sub_0201BC8C
	ldr r0, [r4]
	bl sub_0201EEB4
	bl sub_0202061C
	bl sub_0200D034
	ldr r3, _020796F8 ; =OSi_IntrTable
	ldr r1, _020796FC ; =0x00003FF8
	mov r0, #1
	ldr r2, [r3, r1]
	orr r0, r2
	str r0, [r3, r1]
	pop {r4, pc}
	.balign 4, 0
_020796F4: .word 0x00000C78
_020796F8: .word OSi_IntrTable
_020796FC: .word 0x00003FF8
	thumb_func_end sub_020796B8

	thumb_func_start sub_02079700
sub_02079700: ; 0x02079700
	push {r4, lr}
	sub sp, #0x28
	ldr r4, _0207971C ; =0x021013E4
	add r3, sp, #0
	mov r2, #5
_0207970A:
	ldmia r4!, {r0, r1}
	stmia r3!, {r0, r1}
	sub r2, r2, #1
	bne _0207970A
	add r0, sp, #0
	bl GX_SetBanks
	add sp, #0x28
	pop {r4, pc}
	.balign 4, 0
_0207971C: .word 0x021013E4
	thumb_func_end sub_02079700

	thumb_func_start sub_02079720
sub_02079720: ; 0x02079720
	push {r4, r5, lr}
	sub sp, #0x1c
	ldr r5, _02079754 ; =0x02101370
	add r4, r0, #0
	ldmia r5!, {r0, r1}
	add r3, sp, #0
	add r2, r3, #0
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldr r0, [r5]
	mov r1, #0
	str r0, [r3]
	add r0, r4, #0
	add r3, r1, #0
	bl sub_0201B1E4
	add r0, r4, #0
	mov r1, #0
	bl sub_0201CAE0
	add sp, #0x1c
	pop {r4, r5, pc}
	nop
_02079754: .word 0x02101370
	thumb_func_end sub_02079720

	thumb_func_start sub_02079758
sub_02079758: ; 0x02079758
	push {r4, r5, lr}
	sub sp, #0xd4
	ldr r5, _020798A4 ; =0x021012BC
	add r3, sp, #0xc4
	add r4, r0, #0
	add r2, r3, #0
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	add r0, r2, #0
	bl sub_0201ACB0
	ldr r5, _020798A8 ; =0x02101354
	add r3, sp, #0xa8
	ldmia r5!, {r0, r1}
	add r2, r3, #0
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldr r0, [r5]
	mov r1, #0
	str r0, [r3]
	add r0, r4, #0
	add r3, r1, #0
	bl sub_0201B1E4
	add r0, r4, #0
	mov r1, #0
	bl sub_0201CAE0
	ldr r5, _020798AC ; =0x021013A8
	add r3, sp, #0x8c
	ldmia r5!, {r0, r1}
	add r2, r3, #0
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldr r0, [r5]
	mov r1, #1
	str r0, [r3]
	add r0, r4, #0
	mov r3, #0
	bl sub_0201B1E4
	add r0, r4, #0
	mov r1, #1
	bl sub_0201CAE0
	ldr r5, _020798B0 ; =0x0210131C
	add r3, sp, #0x70
	ldmia r5!, {r0, r1}
	add r2, r3, #0
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldr r0, [r5]
	mov r1, #2
	str r0, [r3]
	add r0, r4, #0
	mov r3, #0
	bl sub_0201B1E4
	add r0, r4, #0
	mov r1, #2
	bl sub_0201CAE0
	ldr r5, _020798B4 ; =0x021012E4
	add r3, sp, #0x54
	ldmia r5!, {r0, r1}
	add r2, r3, #0
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldr r0, [r5]
	mov r1, #3
	str r0, [r3]
	add r0, r4, #0
	mov r3, #0
	bl sub_0201B1E4
	ldr r5, _020798B8 ; =0x02101338
	add r3, sp, #0x38
	ldmia r5!, {r0, r1}
	add r2, r3, #0
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldr r0, [r5]
	str r0, [r3]
	add r0, r4, #0
	mov r1, #6
	mov r3, #0
	bl sub_0201B1E4
	add r0, r4, #0
	mov r1, #6
	bl sub_0201CAE0
	ldr r5, _020798BC ; =0x0210138C
	add r3, sp, #0x1c
	ldmia r5!, {r0, r1}
	add r2, r3, #0
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldr r0, [r5]
	mov r1, #4
	str r0, [r3]
	add r0, r4, #0
	mov r3, #0
	bl sub_0201B1E4
	add r0, r4, #0
	mov r1, #4
	bl sub_0201CAE0
	ldr r5, _020798C0 ; =0x02101300
	add r3, sp, #0
	ldmia r5!, {r0, r1}
	add r2, r3, #0
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldr r0, [r5]
	mov r1, #5
	str r0, [r3]
	add r0, r4, #0
	mov r3, #0
	bl sub_0201B1E4
	mov r0, #0
	mov r1, #0x20
	add r2, r0, #0
	mov r3, #0xc
	bl sub_0201C1C4
	mov r0, #4
	mov r1, #0x20
	mov r2, #0
	mov r3, #0xc
	bl sub_0201C1C4
	mov r0, #6
	mov r1, #0x20
	mov r2, #0
	mov r3, #0xc
	bl sub_0201C1C4
	add sp, #0xd4
	pop {r4, r5, pc}
	nop
_020798A4: .word 0x021012BC
_020798A8: .word 0x02101354
_020798AC: .word 0x021013A8
_020798B0: .word 0x0210131C
_020798B4: .word 0x021012E4
_020798B8: .word 0x02101338
_020798BC: .word 0x0210138C
_020798C0: .word 0x02101300
	thumb_func_end sub_02079758

	thumb_func_start sub_020798C4
sub_020798C4: ; 0x020798C4
	push {r4, lr}
	add r4, r0, #0
	mov r0, #0x1f
	mov r1, #0
	bl GX_EngineAToggleLayers
	mov r0, #0x13
	mov r1, #0
	bl sub_02022CC8
	add r0, r4, #0
	mov r1, #6
	bl sub_0201BB4C
	add r0, r4, #0
	mov r1, #5
	bl sub_0201BB4C
	add r0, r4, #0
	mov r1, #4
	bl sub_0201BB4C
	add r0, r4, #0
	mov r1, #3
	bl sub_0201BB4C
	add r0, r4, #0
	mov r1, #2
	bl sub_0201BB4C
	add r0, r4, #0
	mov r1, #1
	bl sub_0201BB4C
	add r0, r4, #0
	mov r1, #0
	bl sub_0201BB4C
	mov r0, #0xc
	add r1, r4, #0
	bl FreeToHeapExplicit
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_020798C4

	thumb_func_start sub_0207991C
sub_0207991C: ; 0x0207991C
	push {r4, lr}
	add r4, r0, #0
	cmp r1, #0
	bne _0207994A
	mov r0, #0
	add r1, r0, #0
	bl sub_0201BC28
	ldr r0, [r4]
	mov r1, #0
	bl sub_0201BB4C
	mov r0, #1
	mov r1, #0
	add r2, r0, #0
	bl sub_020CD9FC
	mov r0, #0xc
	bl sub_0207997C
	ldr r1, _02079978 ; =0x00000C84
	str r0, [r4, r1]
	pop {r4, pc}
_0207994A:
	mov r0, #1
	mov r1, #0
	bl GX_EngineAToggleLayers
	ldr r0, _02079978 ; =0x00000C84
	ldr r0, [r4, r0]
	bl sub_02079A0C
	mov r1, #0
	mov r0, #1
	add r2, r1, #0
	bl sub_020CD9FC
	ldr r0, [r4]
	bl sub_02079720
	mov r0, #0
	mov r1, #0x20
	add r2, r0, #0
	mov r3, #0xc
	bl sub_0201C1C4
	pop {r4, pc}
	.balign 4, 0
_02079978: .word 0x00000C84
	thumb_func_end sub_0207991C

	thumb_func_start sub_0207997C
sub_0207997C: ; 0x0207997C
	push {r3, lr}
	sub sp, #8
	mov r1, #2
	str r1, [sp]
	ldr r1, _02079998 ; =sub_0207999C
	mov r2, #1
	str r1, [sp, #4]
	mov r1, #0
	add r3, r1, #0
	bl sub_02026EB4
	add sp, #8
	pop {r3, pc}
	nop
_02079998: .word sub_0207999C
	thumb_func_end sub_0207997C

	thumb_func_start sub_0207999C
sub_0207999C: ; 0x0207999C
	push {r3, lr}
	ldr r0, _020799F4 ; =0x04000060
	ldr r1, _020799F8 ; =0xFFFFCFFD
	ldrh r2, [r0]
	and r2, r1
	strh r2, [r0]
	ldrh r3, [r0]
	add r2, r1, #2
	add r1, r1, #2
	and r3, r2
	mov r2, #0x10
	orr r2, r3
	strh r2, [r0]
	ldrh r3, [r0]
	ldr r2, _020799FC ; =0x0000CFFB
	and r3, r2
	strh r3, [r0]
	ldrh r3, [r0]
	sub r2, #0x1c
	and r3, r1
	mov r1, #8
	orr r1, r3
	strh r1, [r0]
	ldrh r1, [r0]
	and r1, r2
	strh r1, [r0]
	mov r0, #0
	add r1, r0, #0
	add r2, r0, #0
	add r3, r0, #0
	bl G3X_SetFog
	mov r0, #0
	ldr r2, _02079A00 ; =0x00007FFF
	add r1, r0, #0
	mov r3, #0x3f
	str r0, [sp]
	bl G3X_SetClearColor
	ldr r1, _02079A04 ; =0xBFFF0000
	ldr r0, _02079A08 ; =0x04000580
	str r1, [r0]
	pop {r3, pc}
	nop
_020799F4: .word 0x04000060
_020799F8: .word 0xFFFFCFFD
_020799FC: .word 0x0000CFFB
_02079A00: .word 0x00007FFF
_02079A04: .word 0xBFFF0000
_02079A08: .word 0x04000580
	thumb_func_end sub_0207999C

	thumb_func_start sub_02079A0C
sub_02079A0C: ; 0x02079A0C
	ldr r3, _02079A10 ; =sub_02026F54
	bx r3
	.balign 4, 0
_02079A10: .word sub_02026F54
	thumb_func_end sub_02079A0C

	thumb_func_start sub_02079A14
sub_02079A14: ; 0x02079A14
	push {r4, r5, r6, r7, lr}
	sub sp, #0x14
	add r5, r0, #0
	mov r0, #0
	str r0, [sp]
	str r0, [sp, #4]
	str r0, [sp, #8]
	mov r0, #0xc
	str r0, [sp, #0xc]
	add r4, r1, #0
	ldr r2, [r5]
	add r0, r4, #0
	mov r1, #0xf
	mov r3, #3
	bl sub_02007B44
	mov r0, #0
	str r0, [sp]
	str r0, [sp, #4]
	str r0, [sp, #8]
	mov r0, #0xc
	str r0, [sp, #0xc]
	ldr r2, [r5]
	add r0, r4, #0
	mov r1, #0x11
	mov r3, #3
	bl sub_02007B68
	add r0, r4, #0
	mov r1, #0x10
	mov r2, #0xc
	bl NARC_AllocAndReadWholeMember
	add r1, sp, #0x10
	add r7, r0, #0
	bl NNS_G2dGetUnpackedPaletteData
	ldr r1, [sp, #0x10]
	mov r0, #0xc
	ldr r1, [r1, #8]
	bl AllocFromHeap
	ldr r2, [sp, #0x10]
	add r6, r0, #0
	ldr r1, [r2, #0xc]
	ldr r2, [r2, #8]
	bl memcpy
	mov r3, #0
	strh r3, [r6]
	ldr r2, [sp, #0x10]
	mov r0, #3
	ldr r2, [r2, #8]
	add r1, r6, #0
	lsl r2, r2, #0x10
	lsr r2, r2, #0x10
	bl BG_LoadPlttData
	add r0, r6, #0
	bl FreeToHeap
	ldr r1, [sp, #0x10]
	ldr r0, _02079BCC ; =0x00000554
	ldr r1, [r1, #0xc]
	mov r2, #1
	add r0, r5, r0
	add r1, #0x60
	lsl r2, r2, #8
	bl memcpy
	add r0, r7, #0
	bl FreeToHeap
	mov r1, #0x1a
	mov r0, #0
	lsl r1, r1, #4
	mov r2, #0xc
	bl sub_0200304C
	mov r0, #4
	mov r1, #0x40
	mov r2, #0xc
	bl sub_0200304C
	mov r1, #0
	str r1, [sp]
	mov r0, #0xc
	str r0, [sp, #4]
	ldr r0, [r5]
	mov r2, #1
	mov r3, #0xe
	bl sub_0200E3DC
	mov r0, #0xa
	str r0, [sp]
	mov r3, #0
	str r3, [sp, #4]
	str r3, [sp, #8]
	mov r0, #0xc
	str r0, [sp, #0xc]
	ldr r2, [r5]
	add r0, r4, #0
	mov r1, #0x1a
	bl sub_02007B44
	ldr r0, _02079BD0 ; =0x00000654
	ldr r0, [r5, r0]
	ldr r0, [r0, #0xc]
	bl sub_0202ADCC
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	str r0, [sp]
	mov r0, #0xc
	str r0, [sp, #4]
	ldr r0, [r5]
	mov r1, #0
	mov r2, #0x2a
	mov r3, #0xf
	bl sub_0200E644
	mov r0, #0
	str r0, [sp]
	str r0, [sp, #4]
	str r0, [sp, #8]
	mov r0, #0xc
	str r0, [sp, #0xc]
	ldr r2, [r5]
	add r0, r4, #0
	mov r1, #3
	mov r3, #4
	bl sub_02007B44
	mov r3, #0x20
	mov r1, #4
	str r3, [sp]
	mov r0, #0xc
	str r0, [sp, #4]
	add r0, r4, #0
	add r2, r1, #0
	bl sub_02007B8C
	mov r0, #0
	str r0, [sp]
	str r0, [sp, #4]
	str r0, [sp, #8]
	mov r1, #0xc
	str r1, [sp, #0xc]
	ldr r2, [r5]
	add r0, r4, #0
	mov r3, #5
	bl sub_02007B44
	mov r0, #0
	str r0, [sp]
	str r0, [sp, #4]
	str r0, [sp, #8]
	mov r0, #0xc
	str r0, [sp, #0xc]
	ldr r2, [r5]
	add r0, r4, #0
	mov r1, #0xe
	mov r3, #5
	bl sub_02007B68
	mov r0, #0
	str r0, [sp]
	str r0, [sp, #4]
	str r0, [sp, #8]
	mov r0, #0xc
	str r0, [sp, #0xc]
	ldr r2, [r5]
	add r0, r4, #0
	mov r1, #0x18
	mov r3, #4
	bl sub_02007B44
	mov r0, #0
	str r0, [sp]
	str r0, [sp, #4]
	str r0, [sp, #8]
	mov r0, #0xc
	str r0, [sp, #0xc]
	ldr r2, [r5]
	add r0, r4, #0
	mov r1, #0x19
	mov r3, #4
	bl sub_02007B68
	mov r0, #0x40
	str r0, [sp]
	mov r0, #0xc
	str r0, [sp, #4]
	add r0, r4, #0
	mov r1, #0xd
	mov r2, #4
	mov r3, #0
	bl sub_02007B8C
	mov r2, #0xc5
	lsl r2, r2, #2
	ldr r3, _02079BD4 ; =0x00000494
	add r1, r5, r2
	add r2, #0xc0
	mov r0, #0xc
	add r2, r5, r2
	add r3, r5, r3
	bl sub_0207CAAC
	mov r0, #0
	add r1, r0, #0
	bl sub_0201C2D8
	mov r0, #4
	mov r1, #0
	bl sub_0201C2D8
	add sp, #0x14
	pop {r4, r5, r6, r7, pc}
	nop
_02079BCC: .word 0x00000554
_02079BD0: .word 0x00000654
_02079BD4: .word 0x00000494
	thumb_func_end sub_02079A14

	thumb_func_start sub_02079BD8
sub_02079BD8: ; 0x02079BD8
	push {r3, r4, r5, r6, r7, lr}
	ldr r1, _02079CC4 ; =0x00000CA8
	mov r2, #0xc
	add r5, r0, #0
	bl OverlayManager_CreateAndGetData
	ldr r2, _02079CC4 ; =0x00000CA8
	mov r1, #0
	add r4, r0, #0
	bl memset
	add r0, r5, #0
	bl OverlayManager_GetField18
	ldr r1, _02079CC8 ; =0x00000654
	str r0, [r4, r1]
	mov r0, #0xc
	bl sub_0201AC88
	str r0, [r4]
	ldr r0, _02079CC8 ; =0x00000654
	ldr r1, [r4, r0]
	add r0, r1, #0
	add r0, #0x24
	ldrb r0, [r0]
	cmp r0, #2
	bne _02079C20
	ldr r0, [r1, #0x14]
	cmp r0, #0
	beq _02079C20
	mov r0, #0xc
	bl sub_02074944
	ldr r1, _02079CCC ; =0x00000C74
	str r0, [r4, r1]
	b _02079C26
_02079C20:
	ldr r0, _02079CCC ; =0x00000C74
	mov r1, #0
	str r1, [r4, r0]
_02079C26:
	mov r2, #0x4b
	mov r0, #0
	mov r1, #0x1b
	lsl r2, r2, #2
	mov r3, #0xc
	bl NewMsgDataFromNarc
	mov r1, #0x1f
	lsl r1, r1, #6
	str r0, [r4, r1]
	mov r0, #0xf
	mov r1, #0xe
	mov r2, #0
	mov r3, #0xc
	bl MessagePrinter_new
	ldr r1, _02079CD0 ; =0x000007BC
	str r0, [r4, r1]
	mov r0, #0xc
	bl ScrStrBufs_new
	ldr r1, _02079CD4 ; =0x000007C4
	mov r6, #0
	add r7, r1, #0
	str r0, [r4, r1]
	add r5, r4, #0
	add r7, #0x64
_02079C5C:
	mov r0, #0xb
	mov r1, #0xc
	bl String_ctor
	str r0, [r5, r7]
	add r6, r6, #1
	add r5, #0x30
	cmp r6, #6
	blo _02079C5C
	mov r0, #1
	lsl r0, r0, #8
	mov r1, #0xc
	bl String_ctor
	ldr r1, _02079CD8 ; =0x000007C8
	str r0, [r4, r1]
	mov r0, #1
	lsl r0, r0, #8
	mov r1, #0xc
	bl String_ctor
	ldr r1, _02079CDC ; =0x000007CC
	mov r6, #0
	str r0, [r4, r1]
	add r5, r4, #0
	add r7, r1, #4
_02079C90:
	mov r0, #0x20
	mov r1, #0xc
	bl String_ctor
	str r0, [r5, r7]
	add r6, r6, #1
	add r5, r5, #4
	cmp r6, #0x14
	blo _02079C90
	ldr r1, _02079CE0 ; =0x00000C7C
	mov r0, #0
	str r0, [r4, r1]
	ldr r0, _02079CC8 ; =0x00000654
	ldr r0, [r4, r0]
	add r0, #0x26
	ldrb r2, [r0]
	add r0, r1, #0
	sub r0, #0x17
	strb r2, [r4, r0]
	add r0, r1, #0
	sub r0, #0x17
	ldrb r0, [r4, r0]
	sub r1, #0x16
	strb r0, [r4, r1]
	add r0, r4, #0
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_02079CC4: .word 0x00000CA8
_02079CC8: .word 0x00000654
_02079CCC: .word 0x00000C74
_02079CD0: .word 0x000007BC
_02079CD4: .word 0x000007C4
_02079CD8: .word 0x000007C8
_02079CDC: .word 0x000007CC
_02079CE0: .word 0x00000C7C
	thumb_func_end sub_02079BD8

	thumb_func_start sub_02079CE4
sub_02079CE4: ; 0x02079CE4
	push {r3, r4}
	ldr r2, _02079D30 ; =0x00000654
	mov r3, #0x80
	ldr r1, [r0, r2]
	add r1, #0x24
	ldrb r4, [r1]
	add r1, r4, #0
	tst r1, r3
	beq _02079D10
	ldr r1, _02079D34 ; =0x00000C63
	ldrb r4, [r0, r1]
	orr r4, r3
	strb r4, [r0, r1]
	ldr r1, [r0, r2]
	add r0, r1, #0
	add r0, #0x24
	ldrb r0, [r0]
	add r1, #0x24
	eor r0, r3
	strb r0, [r1]
	pop {r3, r4}
	bx lr
_02079D10:
	cmp r4, #0x15
	bne _02079D20
	ldr r1, _02079D34 ; =0x00000C63
	ldrb r2, [r0, r1]
	orr r2, r3
	strb r2, [r0, r1]
	pop {r3, r4}
	bx lr
_02079D20:
	ldr r2, _02079D34 ; =0x00000C63
	mov r1, #0x80
	ldrb r3, [r0, r2]
	bic r3, r1
	strb r3, [r0, r2]
	pop {r3, r4}
	bx lr
	nop
_02079D30: .word 0x00000654
_02079D34: .word 0x00000C63
	thumb_func_end sub_02079CE4

	thumb_func_start sub_02079D38
sub_02079D38: ; 0x02079D38
	push {r3, r4, r5, lr}
	add r5, r0, #0
	ldr r0, _02079E0C ; =0x00000654
	mov r4, #3
	ldr r1, [r5, r0]
	add r0, r1, #0
	add r0, #0x25
	ldrb r0, [r0]
	cmp r0, #2
	bne _02079D54
	ldr r1, _02079E10 ; =0x0210144C
	ldr r0, _02079E14 ; =0x00000948
	str r1, [r5, r0]
	b _02079D84
_02079D54:
	add r1, #0x24
	ldrb r1, [r1]
	cmp r1, #2
	beq _02079D6C
	cmp r1, #0x11
	beq _02079D6C
	add r0, r1, #0
	add r0, #0xea
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	cmp r0, #1
	bhi _02079D74
_02079D6C:
	ldr r1, _02079E18 ; =0x0210148C
	ldr r0, _02079E14 ; =0x00000948
	str r1, [r5, r0]
	b _02079D84
_02079D74:
	cmp r1, #0x15
	ldr r0, _02079E14 ; =0x00000948
	bne _02079D80
	ldr r1, _02079E1C ; =0x021014CC
	str r1, [r5, r0]
	b _02079D84
_02079D80:
	ldr r1, _02079E20 ; =0x0210140C
	str r1, [r5, r0]
_02079D84:
	ldr r0, _02079E0C ; =0x00000654
	ldr r1, [r5, r0]
	add r1, #0x24
	ldrb r1, [r1]
	cmp r1, #2
	beq _02079DDE
	cmp r1, #0x11
	beq _02079DDE
	cmp r1, #0x17
	beq _02079DDE
	cmp r1, #0x16
	beq _02079DDE
	add r0, #0x2c
	ldr r0, [r5, r0]
	mov r1, #0
	bl sub_02024830
	ldr r0, _02079E24 ; =0x00000684
	mov r1, #0
	ldr r0, [r5, r0]
	bl sub_020248F0
	ldr r0, _02079E24 ; =0x00000684
	add r1, sp, #0
	ldr r0, [r5, r0]
	add r1, #2
	add r2, sp, #0
	bl sub_0200DE00
	ldr r0, _02079E24 ; =0x00000684
	add r3, sp, #0
	mov r2, #0
	ldrsh r2, [r3, r2]
	mov r1, #2
	ldrsh r1, [r3, r1]
	sub r2, #8
	lsl r2, r2, #0x10
	ldr r0, [r5, r0]
	asr r2, r2, #0x10
	bl sub_0200DD88
	mov r0, #1
	eor r0, r4
	lsl r0, r0, #0x18
	lsr r4, r0, #0x18
_02079DDE:
	ldr r0, _02079E0C ; =0x00000654
	ldr r0, [r5, r0]
	add r0, #0x24
	ldrb r0, [r0]
	cmp r0, #4
	beq _02079DEE
	cmp r0, #0x15
	bne _02079E00
_02079DEE:
	ldr r0, _02079E24 ; =0x00000684
	mov r1, #0
	ldr r0, [r5, r0]
	bl sub_02024830
	mov r0, #2
	eor r0, r4
	lsl r0, r0, #0x18
	lsr r4, r0, #0x18
_02079E00:
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0207D998
	pop {r3, r4, r5, pc}
	nop
_02079E0C: .word 0x00000654
_02079E10: .word 0x0210144C
_02079E14: .word 0x00000948
_02079E18: .word 0x0210148C
_02079E1C: .word 0x021014CC
_02079E20: .word 0x0210140C
_02079E24: .word 0x00000684
	thumb_func_end sub_02079D38

	thumb_func_start sub_02079E28
sub_02079E28: ; 0x02079E28
	mov r2, #0x30
	mul r2, r1
	add r1, r0, r2
	ldr r0, _02079E34 ; =0x00000855
	ldrb r0, [r1, r0]
	bx lr
	.balign 4, 0
_02079E34: .word 0x00000855
	thumb_func_end sub_02079E28

	thumb_func_start sub_02079E38
sub_02079E38: ; 0x02079E38
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	str r1, [sp]
	add r5, r0, #0
	ldr r0, [sp]
	mov r1, #0x30
	add r4, r0, #0
	ldr r0, _02079F84 ; =0x00000855
	mul r4, r1
	add r0, r5, r0
	mov r1, #0
	str r0, [sp, #8]
	strb r1, [r0, r4]
	ldr r0, _02079F88 ; =0x00000654
	ldr r0, [r5, r0]
	ldr r0, [r0]
	bl GetPartyCount
	ldr r1, [sp]
	cmp r0, r1
	bgt _02079E68
	add sp, #0xc
	mov r0, #0
	pop {r4, r5, r6, r7, pc}
_02079E68:
	ldr r0, _02079F88 ; =0x00000654
	ldr r0, [r5, r0]
	ldr r0, [r0]
	bl GetPartyMonByIndex
	mov r1, #5
	mov r2, #0
	add r7, r0, #0
	bl GetMonData
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	str r0, [sp, #4]
	bne _02079E8A
	add sp, #0xc
	mov r0, #0
	pop {r4, r5, r6, r7, pc}
_02079E8A:
	ldr r2, [sp]
	add r0, r5, #0
	add r1, r7, #0
	bl sub_0207D294
	ldr r0, [sp]
	mov r1, #0x30
	add r6, r0, #0
	mul r6, r1
	ldr r1, _02079F8C ; =0x0000082C
	ldr r0, [sp, #4]
	add r2, r5, r6
	strh r0, [r2, r1]
	add r0, r7, #0
	mov r1, #0xa3
	mov r2, #0
	bl GetMonData
	ldr r1, _02079F90 ; =0x0000082E
	add r2, r5, r6
	strh r0, [r2, r1]
	add r0, r7, #0
	mov r1, #0xa4
	mov r2, #0
	bl GetMonData
	mov r1, #0x83
	add r2, r5, r6
	lsl r1, r1, #4
	strh r0, [r2, r1]
	add r0, r7, #0
	mov r1, #0xa1
	mov r2, #0
	bl GetMonData
	ldr r1, _02079F94 ; =0x00000832
	add r2, r5, r6
	strh r0, [r2, r1]
	add r0, r7, #0
	mov r1, #6
	mov r2, #0
	bl GetMonData
	ldr r1, _02079F98 ; =0x00000834
	add r2, r5, r6
	strh r0, [r2, r1]
	add r0, r7, #0
	mov r1, #0xa2
	mov r2, #0
	bl GetMonData
	ldr r1, _02079F9C ; =0x0000083A
	add r2, r5, r6
	strh r0, [r2, r1]
	add r0, r7, #0
	mov r1, #0x4c
	mov r2, #0
	bl GetMonData
	ldr r1, _02079FA0 ; =0x00000838
	add r2, r5, r6
	strb r0, [r2, r1]
	add r0, r7, #0
	mov r1, #0x70
	mov r2, #0
	bl GetMonData
	ldr r1, _02079FA4 ; =0x00000839
	add r2, r5, r6
	strb r0, [r2, r1]
	add r0, r7, #0
	mov r1, #0xb0
	mov r2, #0
	bl GetMonData
	cmp r0, #1
	ldr r0, _02079FA8 ; =0x00000836
	bne _02079F30
	add r2, r5, r0
	ldrh r1, [r2, r4]
	ldr r0, _02079FAC ; =0xFFFFEFFF
	and r0, r1
	b _02079F3A
_02079F30:
	add r2, r5, r0
	ldrh r1, [r2, r4]
	mov r0, #1
	lsl r0, r0, #0xc
	orr r0, r1
_02079F3A:
	strh r0, [r2, r4]
	ldr r0, _02079FA8 ; =0x00000836
	add r6, r5, r0
	add r0, r7, #0
	bl sub_0206FF88
	lsl r0, r0, #0x1e
	ldrh r2, [r6, r4]
	ldr r1, _02079FB0 ; =0xFFFF9FFF
	lsr r0, r0, #0x11
	and r1, r2
	orr r0, r1
	strh r0, [r6, r4]
	ldr r0, [sp, #8]
	mov r1, #1
	strb r1, [r0, r4]
	add r0, r7, #0
	bl sub_0208AD64
	lsl r0, r0, #0x18
	ldrh r1, [r6, r4]
	ldr r2, _02079FB4 ; =0xFFFFF000
	lsr r0, r0, #0x18
	and r1, r2
	lsr r2, r2, #0x14
	and r0, r2
	orr r0, r1
	strh r0, [r6, r4]
	ldr r2, [sp]
	add r0, r5, #0
	add r1, r7, #0
	bl sub_02079FB8
	mov r0, #1
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
	nop
_02079F84: .word 0x00000855
_02079F88: .word 0x00000654
_02079F8C: .word 0x0000082C
_02079F90: .word 0x0000082E
_02079F94: .word 0x00000832
_02079F98: .word 0x00000834
_02079F9C: .word 0x0000083A
_02079FA0: .word 0x00000838
_02079FA4: .word 0x00000839
_02079FA8: .word 0x00000836
_02079FAC: .word 0xFFFFEFFF
_02079FB0: .word 0xFFFF9FFF
_02079FB4: .word 0xFFFFF000
	thumb_func_end sub_02079E38

	thumb_func_start sub_02079FB8
sub_02079FB8: ; 0x02079FB8
	push {r3, r4, r5, r6, r7, lr}
	add r7, r0, #0
	ldr r0, _0207A048 ; =0x00000654
	add r5, r1, #0
	ldr r1, [r7, r0]
	add r0, r1, #0
	add r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0xd
	bne _0207A044
	mov r0, #0x30
	add r6, r2, #0
	mul r6, r0
	ldr r0, _0207A04C ; =0x00000838
	add r3, r7, r6
	ldrb r2, [r3, r0]
	cmp r2, #1
	beq _02079FE4
	sub r0, #0xa
	ldrh r0, [r3, r0]
	cmp r0, #0
	bne _02079FF2
_02079FE4:
	ldr r0, _0207A050 ; =0x00000836
	add r2, r7, r0
	ldrh r1, [r2, r6]
	ldr r0, _0207A054 ; =0xFFFF7FFF
	and r0, r1
	strh r0, [r2, r6]
	pop {r3, r4, r5, r6, r7, pc}
_02079FF2:
	add r1, #0x2e
	ldrb r1, [r1]
	add r0, r5, #0
	bl sub_0207A058
	str r0, [sp]
	mov r4, #0
_0207A000:
	add r1, r4, #0
	add r0, r5, #0
	add r1, #0x36
	mov r2, #0
	bl GetMonData
	cmp r0, #0
	beq _0207A016
	add r4, r4, #1
	cmp r4, #4
	blo _0207A000
_0207A016:
	ldr r0, _0207A048 ; =0x00000654
	ldr r0, [r7, r0]
	add r0, #0x2f
	ldrb r1, [r0]
	ldr r0, [sp]
	cmp r1, r0
	bhi _0207A038
	cmp r4, #2
	blo _0207A038
	ldr r0, _0207A050 ; =0x00000836
	add r2, r7, r0
	ldrh r1, [r2, r6]
	mov r0, #2
	lsl r0, r0, #0xe
	orr r0, r1
	strh r0, [r2, r6]
	pop {r3, r4, r5, r6, r7, pc}
_0207A038:
	ldr r0, _0207A050 ; =0x00000836
	add r2, r7, r0
	ldrh r1, [r2, r6]
	ldr r0, _0207A054 ; =0xFFFF7FFF
	and r0, r1
	strh r0, [r2, r6]
_0207A044:
	pop {r3, r4, r5, r6, r7, pc}
	nop
_0207A048: .word 0x00000654
_0207A04C: .word 0x00000838
_0207A050: .word 0x00000836
_0207A054: .word 0xFFFF7FFF
	thumb_func_end sub_02079FB8

	thumb_func_start sub_0207A058
sub_0207A058: ; 0x0207A058
	push {r3, r4, r5, lr}
	add r5, r0, #0
	cmp r1, #4
	bls _0207A062
	b _0207A166
_0207A062:
	add r1, r1, r1
	add r1, pc
	ldrh r1, [r1, #6]
	lsl r1, r1, #0x10
	asr r1, r1, #0x10
	add pc, r1
_0207A06E: ; jump table
	.short _0207A078 - _0207A06E - 2 ; case 0
	.short _0207A0A8 - _0207A06E - 2 ; case 1
	.short _0207A0D8 - _0207A06E - 2 ; case 2
	.short _0207A108 - _0207A06E - 2 ; case 3
	.short _0207A138 - _0207A06E - 2 ; case 4
_0207A078:
	mov r1, #0x7b
	mov r2, #0
	bl GetMonData
	add r4, r0, #0
	add r0, r5, #0
	mov r1, #0x7c
	mov r2, #0
	bl GetMonData
	add r4, r4, r0
	add r0, r5, #0
	mov r1, #0x7d
	mov r2, #0
	bl GetMonData
	add r4, r4, r0
	add r0, r5, #0
	mov r1, #0x7e
	mov r2, #0
	bl GetMonData
	add r4, r4, r0
	b _0207A166
_0207A0A8:
	mov r1, #0x7f
	mov r2, #0
	bl GetMonData
	add r4, r0, #0
	add r0, r5, #0
	mov r1, #0x80
	mov r2, #0
	bl GetMonData
	add r4, r4, r0
	add r0, r5, #0
	mov r1, #0x81
	mov r2, #0
	bl GetMonData
	add r4, r4, r0
	add r0, r5, #0
	mov r1, #0x82
	mov r2, #0
	bl GetMonData
	add r4, r4, r0
	b _0207A166
_0207A0D8:
	mov r1, #0x83
	mov r2, #0
	bl GetMonData
	add r4, r0, #0
	add r0, r5, #0
	mov r1, #0x84
	mov r2, #0
	bl GetMonData
	add r4, r4, r0
	add r0, r5, #0
	mov r1, #0x85
	mov r2, #0
	bl GetMonData
	add r4, r4, r0
	add r0, r5, #0
	mov r1, #0x86
	mov r2, #0
	bl GetMonData
	add r4, r4, r0
	b _0207A166
_0207A108:
	mov r1, #0x87
	mov r2, #0
	bl GetMonData
	add r4, r0, #0
	add r0, r5, #0
	mov r1, #0x88
	mov r2, #0
	bl GetMonData
	add r4, r4, r0
	add r0, r5, #0
	mov r1, #0x89
	mov r2, #0
	bl GetMonData
	add r4, r4, r0
	add r0, r5, #0
	mov r1, #0x8a
	mov r2, #0
	bl GetMonData
	add r4, r4, r0
	b _0207A166
_0207A138:
	mov r1, #0x8b
	mov r2, #0
	bl GetMonData
	add r4, r0, #0
	add r0, r5, #0
	mov r1, #0x8c
	mov r2, #0
	bl GetMonData
	add r4, r4, r0
	add r0, r5, #0
	mov r1, #0x8d
	mov r2, #0
	bl GetMonData
	add r4, r4, r0
	add r0, r5, #0
	mov r1, #0x8e
	mov r2, #0
	bl GetMonData
	add r4, r4, r0
_0207A166:
	add r0, r4, #0
	pop {r3, r4, r5, pc}
	.balign 4, 0
	thumb_func_end sub_0207A058

	thumb_func_start sub_0207A16C
sub_0207A16C: ; 0x0207A16C
	mov r1, #0x11
	lsl r1, r1, #6
	add r0, r0, r1
	bx lr
	thumb_func_end sub_0207A16C

	thumb_func_start sub_0207A174
sub_0207A174: ; 0x0207A174
	push {r4, r5, r6, r7, lr}
	sub sp, #0x1c
	add r4, r1, #0
	add r5, r0, #0
	add r6, r2, #0
	add r7, r3, #0
	cmp r4, #0
	beq _0207A194
	ldr r0, _0207A224 ; =0x00000654
	ldr r0, [r5, r0]
	add r0, #0x25
	ldrb r0, [r0]
	cmp r0, #0
	beq _0207A19C
	cmp r4, #1
	bne _0207A19C
_0207A194:
	mov r0, #0xc5
	lsl r0, r0, #2
	add r0, r5, r0
	b _0207A1A2
_0207A19C:
	mov r0, #0xf5
	lsl r0, r0, #2
	add r0, r5, r0
_0207A1A2:
	mov r1, #0x30
	mul r1, r4
	ldr r2, _0207A228 ; =0x0000083C
	add r1, r5, r1
	strb r6, [r1, r2]
	add r2, r2, #1
	strb r7, [r1, r2]
	mov r2, #0x10
	str r2, [sp]
	mov r1, #6
	str r1, [sp, #4]
	str r0, [sp, #8]
	mov r0, #0
	str r0, [sp, #0xc]
	str r0, [sp, #0x10]
	str r2, [sp, #0x14]
	str r1, [sp, #0x18]
	ldr r0, [r5]
	mov r1, #2
	add r2, r6, #0
	add r3, r7, #0
	bl sub_0201C4EC
	add r0, sp, #0x20
	ldrb r0, [r0, #0x10]
	cmp r0, #0
	bne _0207A1FC
	add r0, r7, #3
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	str r0, [sp]
	mov r0, #9
	str r0, [sp, #4]
	mov r0, #1
	str r0, [sp, #8]
	mov r0, #0x10
	add r3, r6, #6
	str r0, [sp, #0xc]
	lsl r3, r3, #0x18
	ldr r0, [r5]
	mov r1, #2
	mov r2, #0x4b
	lsr r3, r3, #0x18
	bl FillBgTilemapRect
_0207A1FC:
	mov r0, #0x10
	str r0, [sp]
	mov r0, #6
	str r0, [sp, #4]
	add r0, r4, #3
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	str r0, [sp, #8]
	ldr r0, [r5]
	mov r1, #2
	add r2, r6, #0
	add r3, r7, #0
	bl sub_0201CA4C
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0207A7F4
	add sp, #0x1c
	pop {r4, r5, r6, r7, pc}
	.balign 4, 0
_0207A224: .word 0x00000654
_0207A228: .word 0x0000083C
	thumb_func_end sub_0207A174

	thumb_func_start sub_0207A22C
sub_0207A22C: ; 0x0207A22C
	push {r4, lr}
	add r4, r0, #0
	ldr r0, _0207A2A0 ; =0x00000654
	ldr r2, [r4, r0]
	add r0, r2, #0
	add r0, #0x25
	ldrb r0, [r0]
	cmp r0, #2
	bne _0207A242
	ldr r1, _0207A2A4 ; =0x02101554
	b _0207A244
_0207A242:
	ldr r1, _0207A2A8 ; =0x0210150C
_0207A244:
	add r2, #0x24
	ldrb r0, [r2]
	cmp r0, #0x10
	bne _0207A254
	add r0, r4, #0
	bl sub_0207A3C8
	b _0207A28C
_0207A254:
	cmp r0, #6
	bne _0207A260
	add r0, r4, #0
	bl sub_0207A4B4
	b _0207A28C
_0207A260:
	cmp r0, #0xd
	bne _0207A26C
	add r0, r4, #0
	bl sub_0207A5A0
	b _0207A28C
_0207A26C:
	cmp r0, #2
	beq _0207A27E
	cmp r0, #0x11
	beq _0207A27E
	add r0, #0xea
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	cmp r0, #1
	bhi _0207A286
_0207A27E:
	add r0, r4, #0
	bl sub_0207A68C
	b _0207A28C
_0207A286:
	add r0, r4, #0
	bl sub_0207A2AC
_0207A28C:
	ldr r0, [r4]
	mov r1, #2
	bl ScheduleBgTilemapBufferTransfer
	ldr r0, [r4]
	mov r1, #4
	bl ScheduleBgTilemapBufferTransfer
	pop {r4, pc}
	nop
_0207A2A0: .word 0x00000654
_0207A2A4: .word 0x02101554
_0207A2A8: .word 0x0210150C
	thumb_func_end sub_0207A22C

	thumb_func_start sub_0207A2AC
sub_0207A2AC: ; 0x0207A2AC
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	add r5, r0, #0
	add r6, r1, #0
	mov r0, #0x14
	mov r1, #0xc
	bl NARC_ctor
	str r0, [sp, #8]
	mov r4, #0
_0207A2C0:
	add r0, r5, #0
	add r1, r4, #0
	bl sub_02079E38
	cmp r0, #1
	bne _0207A392
	mov r0, #0x30
	mul r0, r4
	add r1, r5, r0
	ldr r0, _0207A3BC ; =0x00000838
	str r1, [sp, #4]
	ldrb r0, [r1, r0]
	cmp r0, #1
	bne _0207A2FE
	mov r0, #0xc
	add r2, r4, #0
	mul r2, r0
	mov r0, #0
	str r0, [sp]
	add r3, r6, r2
	ldrh r2, [r6, r2]
	ldrh r3, [r3, #2]
	add r0, r5, #0
	lsl r2, r2, #0x18
	lsl r3, r3, #0x18
	add r1, r4, #0
	lsr r2, r2, #0x18
	lsr r3, r3, #0x18
	bl sub_0207A174
	b _0207A31E
_0207A2FE:
	mov r0, #0xc
	add r2, r4, #0
	mul r2, r0
	mov r0, #1
	str r0, [sp]
	add r3, r6, r2
	ldrh r2, [r6, r2]
	ldrh r3, [r3, #2]
	add r0, r5, #0
	lsl r2, r2, #0x18
	lsl r3, r3, #0x18
	add r1, r4, #0
	lsr r2, r2, #0x18
	lsr r3, r3, #0x18
	bl sub_0207A174
_0207A31E:
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0207D5DC
	mov r0, #0xc
	mul r0, r4
	add r7, r6, r0
	ldr r0, [sp, #8]
	add r1, r4, #0
	str r0, [sp]
	ldrh r2, [r7, #4]
	ldrh r3, [r7, #6]
	add r0, r5, #0
	bl sub_0207EBE4
	ldrh r2, [r7, #8]
	ldrh r3, [r7, #0xa]
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0207EF5C
	ldr r3, [sp, #4]
	ldr r2, _0207A3C0 ; =0x00000834
	add r0, r5, #0
	ldrh r2, [r3, r2]
	add r1, r4, #0
	bl sub_0207F004
	mov r2, #4
	mov r3, #6
	ldrsh r2, [r7, r2]
	ldrsh r3, [r7, r3]
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0207F064
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0207F0C8
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0207F098
	mov r2, #0x30
	mul r2, r4
	add r3, r5, r2
	ldr r2, _0207A3C4 ; =0x00000836
	add r0, r5, #0
	ldrh r2, [r3, r2]
	add r1, r4, #0
	lsl r2, r2, #0x14
	lsr r2, r2, #0x14
	lsl r2, r2, #0x18
	lsr r2, r2, #0x18
	bl sub_0207EFC4
	b _0207A3A8
_0207A392:
	mov r0, #0xc
	add r2, r4, #0
	mul r2, r0
	add r7, r6, r2
	mov r3, #2
	ldrsh r2, [r6, r2]
	ldrsh r3, [r7, r3]
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0207A780
_0207A3A8:
	add r0, r4, #1
	lsl r0, r0, #0x18
	lsr r4, r0, #0x18
	cmp r4, #6
	blo _0207A2C0
	ldr r0, [sp, #8]
	bl NARC_dtor
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
	.balign 4, 0
_0207A3BC: .word 0x00000838
_0207A3C0: .word 0x00000834
_0207A3C4: .word 0x00000836
	thumb_func_end sub_0207A2AC

	thumb_func_start sub_0207A3C8
sub_0207A3C8: ; 0x0207A3C8
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	add r5, r0, #0
	str r1, [sp, #4]
	mov r0, #0x14
	mov r1, #0xc
	bl NARC_ctor
	str r0, [sp, #8]
	mov r4, #0
_0207A3DC:
	add r0, r5, #0
	add r1, r4, #0
	bl sub_02079E38
	cmp r0, #1
	bne _0207A47C
	mov r0, #0xc
	add r2, r4, #0
	mul r2, r0
	ldr r0, [sp, #4]
	ldr r3, [sp, #4]
	add r6, r0, r2
	mov r0, #0
	str r0, [sp]
	ldrh r2, [r3, r2]
	ldrh r3, [r6, #2]
	add r0, r5, #0
	lsl r2, r2, #0x18
	lsl r3, r3, #0x18
	add r1, r4, #0
	lsr r2, r2, #0x18
	lsr r3, r3, #0x18
	bl sub_0207A174
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0207D710
	ldr r0, [sp, #8]
	add r1, r4, #0
	str r0, [sp]
	ldrh r2, [r6, #4]
	ldrh r3, [r6, #6]
	add r0, r5, #0
	bl sub_0207EBE4
	ldrh r2, [r6, #8]
	ldrh r3, [r6, #0xa]
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0207EF5C
	mov r0, #0x30
	add r7, r4, #0
	mul r7, r0
	ldr r2, _0207A4AC ; =0x00000834
	add r3, r5, r7
	ldrh r2, [r3, r2]
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0207F004
	mov r2, #4
	mov r3, #6
	ldrsh r2, [r6, r2]
	ldrsh r3, [r6, r3]
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0207F064
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0207F0C8
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0207F098
	ldr r2, _0207A4B0 ; =0x00000836
	add r3, r5, r7
	ldrh r2, [r3, r2]
	add r0, r5, #0
	add r1, r4, #0
	lsl r2, r2, #0x14
	lsr r2, r2, #0x14
	lsl r2, r2, #0x18
	lsr r2, r2, #0x18
	bl sub_0207EFC4
	b _0207A496
_0207A47C:
	mov r0, #0xc
	add r2, r4, #0
	mul r2, r0
	ldr r0, [sp, #4]
	ldr r6, [sp, #4]
	add r3, r0, r2
	ldrsh r2, [r6, r2]
	mov r6, #2
	ldrsh r3, [r3, r6]
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0207A780
_0207A496:
	add r0, r4, #1
	lsl r0, r0, #0x18
	lsr r4, r0, #0x18
	cmp r4, #6
	blo _0207A3DC
	ldr r0, [sp, #8]
	bl NARC_dtor
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
	nop
_0207A4AC: .word 0x00000834
_0207A4B0: .word 0x00000836
	thumb_func_end sub_0207A3C8

	thumb_func_start sub_0207A4B4
sub_0207A4B4: ; 0x0207A4B4
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	add r5, r0, #0
	str r1, [sp, #4]
	mov r0, #0x14
	mov r1, #0xc
	bl NARC_ctor
	str r0, [sp, #8]
	mov r4, #0
_0207A4C8:
	add r0, r5, #0
	add r1, r4, #0
	bl sub_02079E38
	cmp r0, #1
	bne _0207A568
	mov r0, #0xc
	add r2, r4, #0
	mul r2, r0
	ldr r0, [sp, #4]
	ldr r3, [sp, #4]
	add r6, r0, r2
	mov r0, #0
	str r0, [sp]
	ldrh r2, [r3, r2]
	ldrh r3, [r6, #2]
	add r0, r5, #0
	lsl r2, r2, #0x18
	lsl r3, r3, #0x18
	add r1, r4, #0
	lsr r2, r2, #0x18
	lsr r3, r3, #0x18
	bl sub_0207A174
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0207D7A8
	ldr r0, [sp, #8]
	add r1, r4, #0
	str r0, [sp]
	ldrh r2, [r6, #4]
	ldrh r3, [r6, #6]
	add r0, r5, #0
	bl sub_0207EBE4
	ldrh r2, [r6, #8]
	ldrh r3, [r6, #0xa]
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0207EF5C
	mov r0, #0x30
	add r7, r4, #0
	mul r7, r0
	ldr r2, _0207A598 ; =0x00000834
	add r3, r5, r7
	ldrh r2, [r3, r2]
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0207F004
	mov r2, #4
	mov r3, #6
	ldrsh r2, [r6, r2]
	ldrsh r3, [r6, r3]
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0207F064
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0207F0C8
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0207F098
	ldr r2, _0207A59C ; =0x00000836
	add r3, r5, r7
	ldrh r2, [r3, r2]
	add r0, r5, #0
	add r1, r4, #0
	lsl r2, r2, #0x14
	lsr r2, r2, #0x14
	lsl r2, r2, #0x18
	lsr r2, r2, #0x18
	bl sub_0207EFC4
	b _0207A582
_0207A568:
	mov r0, #0xc
	add r2, r4, #0
	mul r2, r0
	ldr r0, [sp, #4]
	ldr r6, [sp, #4]
	add r3, r0, r2
	ldrsh r2, [r6, r2]
	mov r6, #2
	ldrsh r3, [r3, r6]
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0207A780
_0207A582:
	add r0, r4, #1
	lsl r0, r0, #0x18
	lsr r4, r0, #0x18
	cmp r4, #6
	blo _0207A4C8
	ldr r0, [sp, #8]
	bl NARC_dtor
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
	nop
_0207A598: .word 0x00000834
_0207A59C: .word 0x00000836
	thumb_func_end sub_0207A4B4

	thumb_func_start sub_0207A5A0
sub_0207A5A0: ; 0x0207A5A0
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	add r5, r0, #0
	str r1, [sp, #4]
	mov r0, #0x14
	mov r1, #0xc
	bl NARC_ctor
	str r0, [sp, #8]
	mov r4, #0
_0207A5B4:
	add r0, r5, #0
	add r1, r4, #0
	bl sub_02079E38
	cmp r0, #1
	bne _0207A654
	mov r0, #0xc
	add r2, r4, #0
	mul r2, r0
	ldr r0, [sp, #4]
	ldr r3, [sp, #4]
	add r6, r0, r2
	mov r0, #0
	str r0, [sp]
	ldrh r2, [r3, r2]
	ldrh r3, [r6, #2]
	add r0, r5, #0
	lsl r2, r2, #0x18
	lsl r3, r3, #0x18
	add r1, r4, #0
	lsr r2, r2, #0x18
	lsr r3, r3, #0x18
	bl sub_0207A174
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0207D840
	ldr r0, [sp, #8]
	add r1, r4, #0
	str r0, [sp]
	ldrh r2, [r6, #4]
	ldrh r3, [r6, #6]
	add r0, r5, #0
	bl sub_0207EBE4
	ldrh r2, [r6, #8]
	ldrh r3, [r6, #0xa]
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0207EF5C
	mov r0, #0x30
	add r7, r4, #0
	mul r7, r0
	ldr r2, _0207A684 ; =0x00000834
	add r3, r5, r7
	ldrh r2, [r3, r2]
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0207F004
	mov r2, #4
	mov r3, #6
	ldrsh r2, [r6, r2]
	ldrsh r3, [r6, r3]
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0207F064
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0207F0C8
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0207F098
	ldr r2, _0207A688 ; =0x00000836
	add r3, r5, r7
	ldrh r2, [r3, r2]
	add r0, r5, #0
	add r1, r4, #0
	lsl r2, r2, #0x14
	lsr r2, r2, #0x14
	lsl r2, r2, #0x18
	lsr r2, r2, #0x18
	bl sub_0207EFC4
	b _0207A66E
_0207A654:
	mov r0, #0xc
	add r2, r4, #0
	mul r2, r0
	ldr r0, [sp, #4]
	ldr r6, [sp, #4]
	add r3, r0, r2
	ldrsh r2, [r6, r2]
	mov r6, #2
	ldrsh r3, [r3, r6]
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0207A780
_0207A66E:
	add r0, r4, #1
	lsl r0, r0, #0x18
	lsr r4, r0, #0x18
	cmp r4, #6
	blo _0207A5B4
	ldr r0, [sp, #8]
	bl NARC_dtor
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
	nop
_0207A684: .word 0x00000834
_0207A688: .word 0x00000836
	thumb_func_end sub_0207A5A0

	thumb_func_start sub_0207A68C
sub_0207A68C: ; 0x0207A68C
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	add r5, r0, #0
	str r1, [sp, #4]
	mov r0, #0x14
	mov r1, #0xc
	bl NARC_ctor
	str r0, [sp, #8]
	mov r4, #0
_0207A6A0:
	add r0, r5, #0
	add r1, r4, #0
	bl sub_02079E38
	cmp r0, #1
	bne _0207A748
	mov r0, #0xc
	add r2, r4, #0
	mul r2, r0
	ldr r0, [sp, #4]
	ldr r3, [sp, #4]
	add r6, r0, r2
	mov r0, #0
	str r0, [sp]
	ldrh r2, [r3, r2]
	ldrh r3, [r6, #2]
	add r0, r5, #0
	lsl r2, r2, #0x18
	lsl r3, r3, #0x18
	add r1, r4, #0
	lsr r2, r2, #0x18
	lsr r3, r3, #0x18
	bl sub_0207A174
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0207D8A4
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0207D8EC
	ldr r0, [sp, #8]
	add r1, r4, #0
	str r0, [sp]
	ldrh r2, [r6, #4]
	ldrh r3, [r6, #6]
	add r0, r5, #0
	bl sub_0207EBE4
	ldrh r2, [r6, #8]
	ldrh r3, [r6, #0xa]
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0207EF5C
	mov r0, #0x30
	add r7, r4, #0
	mul r7, r0
	ldr r2, _0207A778 ; =0x00000834
	add r3, r5, r7
	ldrh r2, [r3, r2]
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0207F004
	mov r2, #4
	mov r3, #6
	ldrsh r2, [r6, r2]
	ldrsh r3, [r6, r3]
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0207F064
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0207F0C8
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0207F098
	ldr r2, _0207A77C ; =0x00000836
	add r3, r5, r7
	ldrh r2, [r3, r2]
	add r0, r5, #0
	add r1, r4, #0
	lsl r2, r2, #0x14
	lsr r2, r2, #0x14
	lsl r2, r2, #0x18
	lsr r2, r2, #0x18
	bl sub_0207EFC4
	b _0207A762
_0207A748:
	mov r0, #0xc
	add r2, r4, #0
	mul r2, r0
	ldr r0, [sp, #4]
	ldr r6, [sp, #4]
	add r3, r0, r2
	ldrsh r2, [r6, r2]
	mov r6, #2
	ldrsh r3, [r3, r6]
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0207A780
_0207A762:
	add r0, r4, #1
	lsl r0, r0, #0x18
	lsr r4, r0, #0x18
	cmp r4, #6
	blo _0207A6A0
	ldr r0, [sp, #8]
	bl NARC_dtor
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
	nop
_0207A778: .word 0x00000834
_0207A77C: .word 0x00000836
	thumb_func_end sub_0207A68C

	thumb_func_start sub_0207A780
sub_0207A780: ; 0x0207A780
	push {r4, r5, r6, r7, lr}
	sub sp, #0x1c
	add r7, r1, #0
	add r4, r2, #0
	mov r1, #0x10
	add r5, r0, #0
	ldr r2, _0207A7F0 ; =0x00000494
	str r1, [sp]
	mov r0, #6
	add r6, r3, #0
	lsl r3, r6, #0x18
	str r0, [sp, #4]
	add r2, r5, r2
	str r2, [sp, #8]
	mov r2, #0
	str r2, [sp, #0xc]
	str r2, [sp, #0x10]
	str r1, [sp, #0x14]
	str r0, [sp, #0x18]
	lsl r2, r4, #0x18
	ldr r0, [r5]
	mov r1, #2
	lsr r2, r2, #0x18
	lsr r3, r3, #0x18
	bl sub_0201C4EC
	mov r0, #0x10
	str r0, [sp]
	mov r0, #6
	str r0, [sp, #4]
	mov r0, #1
	str r0, [sp, #8]
	lsl r2, r4, #0x18
	lsl r3, r6, #0x18
	ldr r0, [r5]
	mov r1, #2
	lsr r2, r2, #0x18
	lsr r3, r3, #0x18
	bl sub_0201CA4C
	add r0, r5, #0
	add r1, r7, #0
	mov r2, #7
	bl sub_0207EFC4
	add r0, r5, #0
	add r1, r7, #0
	mov r2, #0
	bl sub_0207F004
	add r0, r5, #0
	add r1, r7, #0
	bl sub_0207F0C8
	add sp, #0x1c
	pop {r4, r5, r6, r7, pc}
	.balign 4, 0
_0207A7F0: .word 0x00000494
	thumb_func_end sub_0207A780

	thumb_func_start sub_0207A7F4
sub_0207A7F4: ; 0x0207A7F4
	push {r4, r5, r6, lr}
	add r5, r0, #0
	ldr r0, _0207A870 ; =0x00000654
	add r6, r1, #0
	ldr r0, [r5, r0]
	ldr r0, [r0]
	bl GetPartyMonByIndex
	ldr r1, _0207A874 ; =0x00000C63
	ldrb r2, [r5, r1]
	lsl r3, r2, #0x19
	lsr r3, r3, #0x1f
	cmp r3, #1
	bne _0207A824
	add r1, r1, #2
	ldrb r1, [r5, r1]
	cmp r6, r1
	beq _0207A820
	lsl r1, r2, #0x1a
	lsr r1, r1, #0x1a
	cmp r6, r1
	bne _0207A824
_0207A820:
	mov r4, #7
	b _0207A858
_0207A824:
	ldr r1, _0207A878 ; =0x00000C65
	ldrb r1, [r5, r1]
	cmp r6, r1
	bne _0207A830
	mov r4, #4
	b _0207A832
_0207A830:
	mov r4, #0
_0207A832:
	mov r1, #0xa3
	mov r2, #0
	bl GetMonData
	cmp r0, #0
	bne _0207A846
	add r0, r4, #2
	lsl r0, r0, #0x18
	lsr r4, r0, #0x18
	b _0207A858
_0207A846:
	add r0, r5, #0
	add r1, r6, #0
	bl sub_0207A880
	cmp r0, #1
	bne _0207A858
	add r0, r4, #1
	lsl r0, r0, #0x18
	lsr r4, r0, #0x18
_0207A858:
	ldr r1, _0207A87C ; =0x00000554
	add r3, r6, #3
	add r2, r5, r1
	lsl r1, r4, #5
	lsl r3, r3, #0x15
	add r1, r2, r1
	mov r0, #2
	mov r2, #0x10
	lsr r3, r3, #0x10
	bl BG_LoadPlttData
	pop {r4, r5, r6, pc}
	.balign 4, 0
_0207A870: .word 0x00000654
_0207A874: .word 0x00000C63
_0207A878: .word 0x00000C65
_0207A87C: .word 0x00000554
	thumb_func_end sub_0207A7F4

	thumb_func_start sub_0207A880
sub_0207A880: ; 0x0207A880
	ldr r2, _0207A898 ; =0x00000654
	ldr r0, [r0, r2]
	add r0, #0x25
	ldrb r0, [r0]
	cmp r0, #2
	bne _0207A892
	mov r0, #1
	tst r1, r0
	bne _0207A894
_0207A892:
	mov r0, #0
_0207A894:
	bx lr
	nop
_0207A898: .word 0x00000654
	thumb_func_end sub_0207A880

	thumb_func_start sub_0207A89C
sub_0207A89C: ; 0x0207A89C
	push {r4, lr}
	sub sp, #0x10
	add r4, r0, #0
	mov r3, #0
	ldr r0, _0207A8EC ; =0x00000C65
	str r3, [sp]
	ldrb r0, [r4, r0]
	add r1, sp, #0xc
	add r1, #1
	str r0, [sp, #4]
	mov r0, #4
	str r0, [sp, #8]
	ldr r0, _0207A8F0 ; =0x00000948
	add r2, sp, #0xc
	ldr r0, [r4, r0]
	bl sub_02020A24
	ldr r0, _0207A8F4 ; =0x00000654
	ldr r1, _0207A8EC ; =0x00000C65
	ldr r0, [r4, r0]
	ldrb r1, [r4, r1]
	add r0, #0x25
	ldrb r0, [r0]
	bl sub_0207B5EC
	add r1, r0, #0
	ldr r0, _0207A8F8 ; =0x00000678
	ldr r0, [r4, r0]
	bl sub_020248F0
	ldr r0, _0207A8F8 ; =0x00000678
	add r2, sp, #0xc
	ldrb r1, [r2, #1]
	ldrb r2, [r2]
	ldr r0, [r4, r0]
	bl sub_0200DD88
	add sp, #0x10
	pop {r4, pc}
	nop
_0207A8EC: .word 0x00000C65
_0207A8F0: .word 0x00000948
_0207A8F4: .word 0x00000654
_0207A8F8: .word 0x00000678
	thumb_func_end sub_0207A89C

	thumb_func_start sub_0207A8FC
sub_0207A8FC: ; 0x0207A8FC
	push {r3, lr}
	bl sub_0207A99C
	cmp r0, #1
	bne _0207A90A
	mov r0, #1
	pop {r3, pc}
_0207A90A:
	mov r0, #5
	pop {r3, pc}
	.balign 4, 0
	thumb_func_end sub_0207A8FC

	thumb_func_start sub_0207A910
sub_0207A910: ; 0x0207A910
	push {r3, r4, r5, r6, r7, lr}
	add r4, r1, #0
	add r5, r0, #0
	sub r0, r4, #6
	add r6, r2, #0
	add r7, r3, #0
	cmp r0, #1
	bhi _0207A92C
	ldr r0, _0207A97C ; =0x00000678
	mov r1, #0
	ldr r0, [r5, r0]
	bl sub_02024830
	b _0207A960
_0207A92C:
	ldr r0, _0207A980 ; =0x00000654
	lsl r1, r4, #0x18
	ldr r0, [r5, r0]
	lsr r1, r1, #0x18
	add r0, #0x25
	ldrb r0, [r0]
	bl sub_0207B5EC
	add r1, r0, #0
	ldr r0, _0207A97C ; =0x00000678
	ldr r0, [r5, r0]
	bl sub_020248F0
	ldr r0, _0207A97C ; =0x00000678
	mov r1, #1
	ldr r0, [r5, r0]
	bl sub_02024830
	ldr r0, _0207A97C ; =0x00000678
	lsl r1, r6, #0x10
	lsl r2, r7, #0x10
	ldr r0, [r5, r0]
	asr r1, r1, #0x10
	asr r2, r2, #0x10
	bl sub_0200DD88
_0207A960:
	ldr r0, _0207A984 ; =0x00000C65
	mov r2, #0
	ldrb r1, [r5, r0]
	strb r4, [r5, r0]
	add r0, r5, #0
	bl sub_0207B51C
	ldr r1, _0207A984 ; =0x00000C65
	add r0, r5, #0
	ldrb r1, [r5, r1]
	mov r2, #1
	bl sub_0207B51C
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_0207A97C: .word 0x00000678
_0207A980: .word 0x00000654
_0207A984: .word 0x00000C65
	thumb_func_end sub_0207A910

	thumb_func_start sub_0207A988
sub_0207A988: ; 0x0207A988
	push {r3, lr}
	bl sub_0207A910
	ldr r0, _0207A998 ; =0x000005DC
	bl PlaySE
	pop {r3, pc}
	nop
_0207A998: .word 0x000005DC
	thumb_func_end sub_0207A988

	thumb_func_start sub_0207A99C
sub_0207A99C: ; 0x0207A99C
	push {r3, r4, r5, r6, lr}
	sub sp, #4
	add r4, r0, #0
	ldr r0, _0207AABC ; =gMain
	mov r1, #0x40
	ldr r0, [r0, #0x4c]
	mov r3, #4
	tst r1, r0
	beq _0207A9B2
	mov r3, #0
	b _0207A9CE
_0207A9B2:
	mov r1, #0x80
	tst r1, r0
	beq _0207A9BC
	mov r3, #1
	b _0207A9CE
_0207A9BC:
	mov r1, #0x20
	tst r1, r0
	beq _0207A9C6
	mov r3, #2
	b _0207A9CE
_0207A9C6:
	mov r1, #0x10
	tst r0, r1
	beq _0207A9CE
	mov r3, #3
_0207A9CE:
	cmp r3, #4
	bne _0207A9D8
	add sp, #4
	mov r0, #0
	pop {r3, r4, r5, r6, pc}
_0207A9D8:
	ldr r5, _0207AAC0 ; =0x00000C65
	ldrb r0, [r4, r5]
	cmp r0, #6
	bne _0207AA14
	cmp r3, #0
	add r1, sp, #0
	bne _0207AA06
	add r5, r5, #1
	ldrb r6, [r4, r5]
	mov r5, #1
	ldr r3, _0207AAC4 ; =0x021012CC
	and r5, r6
	add r6, r5, #2
	mov r5, #6
	mul r5, r6
	add r0, r4, #0
	add r1, #1
	add r2, sp, #0
	add r3, r3, r5
	bl sub_0207AB20
	add r1, r0, #0
	b _0207AA96
_0207AA06:
	add r0, r4, #0
	add r1, #1
	add r2, sp, #0
	bl sub_0207AAD0
	add r1, r0, #0
	b _0207AA96
_0207AA14:
	cmp r0, #7
	bne _0207AA88
	ldr r0, _0207AAC8 ; =0x00000654
	ldr r0, [r4, r0]
	add r0, #0x24
	ldrb r0, [r0]
	cmp r0, #2
	beq _0207AA56
	cmp r0, #0x11
	beq _0207AA56
	cmp r0, #0x17
	beq _0207AA56
	cmp r0, #0x16
	beq _0207AA56
	cmp r3, #0
	bne _0207AA56
	add r5, r5, #1
	ldrb r6, [r4, r5]
	mov r5, #1
	add r1, sp, #0
	and r5, r6
	add r6, r5, #2
	mov r5, #6
	ldr r3, _0207AAC4 ; =0x021012CC
	mul r5, r6
	add r0, r4, #0
	add r1, #1
	add r2, sp, #0
	add r3, r3, r5
	bl sub_0207AB20
	add r1, r0, #0
	b _0207AA96
_0207AA56:
	cmp r3, #1
	add r1, sp, #0
	bne _0207AA7A
	ldr r5, _0207AACC ; =0x00000C66
	ldr r3, _0207AAC4 ; =0x021012CC
	ldrb r6, [r4, r5]
	mov r5, #1
	add r0, r4, #0
	and r6, r5
	mov r5, #6
	mul r5, r6
	add r1, #1
	add r2, sp, #0
	add r3, r3, r5
	bl sub_0207AB20
	add r1, r0, #0
	b _0207AA96
_0207AA7A:
	add r0, r4, #0
	add r1, #1
	add r2, sp, #0
	bl sub_0207AAD0
	add r1, r0, #0
	b _0207AA96
_0207AA88:
	add r1, sp, #0
	add r0, r4, #0
	add r1, #1
	add r2, sp, #0
	bl sub_0207AAD0
	add r1, r0, #0
_0207AA96:
	ldr r0, _0207AAC0 ; =0x00000C65
	ldrb r0, [r4, r0]
	cmp r1, r0
	beq _0207AAB4
	cmp r1, #0xff
	beq _0207AAB4
	add r3, sp, #0
	ldrb r2, [r3, #1]
	ldrb r3, [r3]
	add r0, r4, #0
	bl sub_0207A988
	add sp, #4
	mov r0, #1
	pop {r3, r4, r5, r6, pc}
_0207AAB4:
	mov r0, #0
	add sp, #4
	pop {r3, r4, r5, r6, pc}
	nop
_0207AABC: .word gMain
_0207AAC0: .word 0x00000C65
_0207AAC4: .word 0x021012CC
_0207AAC8: .word 0x00000654
_0207AACC: .word 0x00000C66
	thumb_func_end sub_0207A99C

	thumb_func_start sub_0207AAD0
sub_0207AAD0: ; 0x0207AAD0
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x10
	add r5, r0, #0
	ldr r0, _0207AB18 ; =0x00000C65
	add r7, r1, #0
	ldrb r4, [r5, r0]
	str r2, [sp, #0xc]
	add r6, r3, #0
_0207AAE0:
	mov r0, #0
	str r0, [sp]
	str r4, [sp, #4]
	ldr r0, _0207AB1C ; =0x00000948
	str r6, [sp, #8]
	ldr r0, [r5, r0]
	ldr r2, [sp, #0xc]
	add r1, r7, #0
	mov r3, #0
	bl sub_02020A24
	add r4, r0, #0
	cmp r4, #6
	beq _0207AB10
	cmp r4, #7
	beq _0207AB10
	cmp r4, #0xff
	beq _0207AB10
	add r0, r5, #0
	add r1, r4, #0
	bl sub_02079E28
	cmp r0, #0
	beq _0207AAE0
_0207AB10:
	add r0, r4, #0
	add sp, #0x10
	pop {r3, r4, r5, r6, r7, pc}
	nop
_0207AB18: .word 0x00000C65
_0207AB1C: .word 0x00000948
	thumb_func_end sub_0207AAD0

	thumb_func_start sub_0207AB20
sub_0207AB20: ; 0x0207AB20
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x10
	add r6, r0, #0
	add r7, r1, #0
	str r2, [sp, #0xc]
	add r5, r3, #0
	mov r4, #0
_0207AB2E:
	cmp r4, #6
	beq _0207AB64
	ldrb r1, [r5, r4]
	add r0, r6, #0
	bl sub_02079E28
	cmp r0, #0
	beq _0207AB5C
	mov r3, #0
	str r3, [sp]
	ldrb r0, [r5, r4]
	ldr r2, [sp, #0xc]
	add r1, r7, #0
	str r0, [sp, #4]
	mov r0, #4
	str r0, [sp, #8]
	ldr r0, _0207AB80 ; =0x00000948
	ldr r0, [r6, r0]
	bl sub_02020A24
	add sp, #0x10
	ldrb r0, [r5, r4]
	pop {r3, r4, r5, r6, r7, pc}
_0207AB5C:
	add r0, r4, #1
	lsl r0, r0, #0x18
	lsr r4, r0, #0x18
	b _0207AB2E
_0207AB64:
	mov r3, #0
	str r3, [sp]
	str r3, [sp, #4]
	mov r0, #4
	str r0, [sp, #8]
	ldr r0, _0207AB80 ; =0x00000948
	ldr r2, [sp, #0xc]
	ldr r0, [r6, r0]
	add r1, r7, #0
	bl sub_02020A24
	mov r0, #0
	add sp, #0x10
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_0207AB80: .word 0x00000948
	thumb_func_end sub_0207AB20

	thumb_func_start sub_0207AB84
sub_0207AB84: ; 0x0207AB84
	push {r3, r4, r5, lr}
	sub sp, #0x10
	add r4, r1, #0
	add r5, r0, #0
	add r0, r4, #0
	add r0, #0xfa
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	cmp r0, #1
	bhi _0207ABA4
	ldr r0, _0207AC10 ; =0x00000678
	mov r1, #0
	ldr r0, [r5, r0]
	bl sub_02024830
	b _0207ABF0
_0207ABA4:
	mov r3, #0
	ldr r0, _0207AC14 ; =0x00000C65
	str r3, [sp]
	ldrb r0, [r5, r0]
	add r1, sp, #0xc
	add r1, #1
	str r0, [sp, #4]
	mov r0, #4
	str r0, [sp, #8]
	ldr r0, _0207AC18 ; =0x00000948
	add r2, sp, #0xc
	ldr r0, [r5, r0]
	bl sub_02020A24
	ldr r0, _0207AC1C ; =0x00000654
	add r1, r4, #0
	ldr r0, [r5, r0]
	add r0, #0x25
	ldrb r0, [r0]
	bl sub_0207B5EC
	add r1, r0, #0
	ldr r0, _0207AC10 ; =0x00000678
	ldr r0, [r5, r0]
	bl sub_020248F0
	ldr r0, _0207AC10 ; =0x00000678
	mov r1, #1
	ldr r0, [r5, r0]
	bl sub_02024830
	ldr r0, _0207AC10 ; =0x00000678
	add r2, sp, #0xc
	ldrb r1, [r2, #1]
	ldrb r2, [r2]
	ldr r0, [r5, r0]
	bl sub_0200DD88
_0207ABF0:
	ldr r0, _0207AC14 ; =0x00000C65
	mov r2, #0
	ldrb r1, [r5, r0]
	strb r4, [r5, r0]
	add r0, r5, #0
	bl sub_0207B51C
	ldr r1, _0207AC14 ; =0x00000C65
	add r0, r5, #0
	ldrb r1, [r5, r1]
	mov r2, #1
	bl sub_0207B51C
	add sp, #0x10
	pop {r3, r4, r5, pc}
	nop
_0207AC10: .word 0x00000678
_0207AC14: .word 0x00000C65
_0207AC18: .word 0x00000948
_0207AC1C: .word 0x00000654
	thumb_func_end sub_0207AB84

	thumb_func_start sub_0207AC20
sub_0207AC20: ; 0x0207AC20
	push {r3, r4, lr}
	sub sp, #4
	add r4, r0, #0
	mov r0, #0xc6
	lsl r0, r0, #4
	ldrb r1, [r4, r0]
	cmp r1, #0
	beq _0207AC6C
	cmp r1, #1
	beq _0207AC3C
	cmp r1, #2
	beq _0207AC68
	add sp, #4
	pop {r3, r4, pc}
_0207AC3C:
	add r0, r0, #1
	ldrb r0, [r4, r0]
	add r1, sp, #0
	add r1, #2
	add r2, sp, #0
	bl sub_0207BBFC
	add r3, sp, #0
	mov r1, #2
	mov r2, #0
	ldrsh r1, [r3, r1]
	ldrsh r2, [r3, r2]
	add r0, r4, #0
	bl sub_0207F2A8
	mov r0, #0xc6
	lsl r0, r0, #4
	ldrb r1, [r4, r0]
	add sp, #4
	add r1, r1, #1
	strb r1, [r4, r0]
	pop {r3, r4, pc}
_0207AC68:
	mov r1, #0
	strb r1, [r4, r0]
_0207AC6C:
	add sp, #4
	pop {r3, r4, pc}
	thumb_func_end sub_0207AC20

	thumb_func_start sub_0207AC70
sub_0207AC70: ; 0x0207AC70
	push {r3, r4, r5, lr}
	add r5, r0, #0
	add r4, r1, #0
	ldr r0, _0207AD50 ; =0x04000050
	mov r1, #0
	strh r1, [r0]
	ldr r0, _0207AD54 ; =0x00000C65
	ldrb r1, [r5, r0]
	cmp r1, #6
	bne _0207AC88
	mov r0, #4
	pop {r3, r4, r5, pc}
_0207AC88:
	cmp r1, #7
	bne _0207ACAA
	mov r0, #0x25
	lsl r0, r0, #6
	bl PlaySE
	ldr r0, _0207AD58 ; =0x00000C63
	ldrb r0, [r5, r0]
	lsl r0, r0, #0x18
	lsr r0, r0, #0x1f
	bne _0207AD4A
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0207CB3C
	mov r0, #3
	pop {r3, r4, r5, pc}
_0207ACAA:
	ldr r0, _0207AD5C ; =0x00000654
	ldr r2, [r5, r0]
	add r2, #0x24
	ldrb r2, [r2]
	cmp r2, #3
	beq _0207ACBA
	cmp r2, #0x13
	bne _0207ACC4
_0207ACBA:
	ldr r0, _0207AD60 ; =0x000005DC
	bl PlaySE
	mov r0, #0
	pop {r3, r4, r5, pc}
_0207ACC4:
	cmp r2, #0x14
	beq _0207ACCC
	cmp r2, #0xe
	bne _0207ACEE
_0207ACCC:
	mov r0, #0x30
	mul r0, r1
	add r1, r5, r0
	ldr r0, _0207AD64 ; =0x00000838
	ldrb r0, [r1, r0]
	cmp r0, #0
	bne _0207ACE4
	ldr r0, _0207AD60 ; =0x000005DC
	bl PlaySE
	mov r0, #0
	pop {r3, r4, r5, pc}
_0207ACE4:
	ldr r0, _0207AD68 ; =0x000005F2
	bl PlaySE
	mov r0, #5
	pop {r3, r4, r5, pc}
_0207ACEE:
	cmp r2, #0xf
	bne _0207AD2A
	mov r2, #0x30
	mul r2, r1
	ldr r1, _0207AD64 ; =0x00000838
	add r2, r5, r2
	ldrb r1, [r2, r1]
	cmp r1, #0
	bne _0207AD20
	sub r0, #0x78
	bl PlaySE
	add r0, r5, #0
	bl sub_0207E068
	ldr r1, _0207AD54 ; =0x00000C65
	add r0, r5, #0
	ldrb r1, [r5, r1]
	bl sub_0207F3A4
	add r0, r5, #0
	bl sub_0207AFC4
	mov r0, #0
	pop {r3, r4, r5, pc}
_0207AD20:
	sub r0, #0x62
	bl PlaySE
	mov r0, #5
	pop {r3, r4, r5, pc}
_0207AD2A:
	sub r0, #0x78
	bl PlaySE
	add r0, r5, #0
	bl sub_0207E068
	ldr r1, _0207AD54 ; =0x00000C65
	add r0, r5, #0
	ldrb r1, [r5, r1]
	bl sub_0207F3A4
	add r0, r5, #0
	bl sub_0207AFC4
	mov r0, #0
	pop {r3, r4, r5, pc}
_0207AD4A:
	mov r0, #5
	pop {r3, r4, r5, pc}
	nop
_0207AD50: .word 0x04000050
_0207AD54: .word 0x00000C65
_0207AD58: .word 0x00000C63
_0207AD5C: .word 0x00000654
_0207AD60: .word 0x000005DC
_0207AD64: .word 0x00000838
_0207AD68: .word 0x000005F2
	thumb_func_end sub_0207AC70

	thumb_func_start sub_0207AD6C
sub_0207AD6C: ; 0x0207AD6C
	push {r3, lr}
	ldr r2, _0207ADAC ; =0x00000654
	mov r1, #0
	ldr r2, [r0, r2]
	add r0, r2, #0
	add r0, #0x24
	ldrb r0, [r0]
	cmp r0, #2
	beq _0207AD8C
	cmp r0, #0x11
	beq _0207AD8C
	add r0, #0xea
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	cmp r0, #1
	bhi _0207AD94
_0207AD8C:
	ldr r0, _0207ADB0 ; =0x02110104
	bl sub_02025224
	pop {r3, pc}
_0207AD94:
	add r2, #0x25
	ldrb r0, [r2]
	cmp r0, #2
	bne _0207AD9E
	mov r1, #1
_0207AD9E:
	ldr r2, _0207ADB4 ; =0x02110128
	lsl r0, r1, #5
	add r0, r2, r0
	bl sub_02025224
	pop {r3, pc}
	nop
_0207ADAC: .word 0x00000654
_0207ADB0: .word 0x02110104
_0207ADB4: .word 0x02110128
	thumb_func_end sub_0207AD6C

	thumb_func_start sub_0207ADB8
sub_0207ADB8: ; 0x0207ADB8
	push {r4, r5, r6, lr}
	mov r1, #0xc9
	add r4, r0, #0
	lsl r1, r1, #4
	add r5, r4, r1
	ldr r1, [r5, #0xc]
	cmp r1, #1
	bne _0207ADDC
	bl sub_0207CC24
	cmp r0, #0
	bne _0207ADD8
	ldr r0, [r5, #8]
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	pop {r4, r5, r6, pc}
_0207ADD8:
	mov r0, #5
	pop {r4, r5, r6, pc}
_0207ADDC:
	bl sub_0207AD6C
	add r5, r0, #0
	mov r0, #0
	mvn r0, r0
	cmp r5, r0
	beq _0207AEBE
	cmp r5, #7
	bhi _0207AE44
	add r0, r5, r5
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_0207ADFA: ; jump table
	.short _0207AE0A - _0207ADFA - 2 ; case 0
	.short _0207AE0A - _0207ADFA - 2 ; case 1
	.short _0207AE0A - _0207ADFA - 2 ; case 2
	.short _0207AE0A - _0207ADFA - 2 ; case 3
	.short _0207AE0A - _0207ADFA - 2 ; case 4
	.short _0207AE0A - _0207ADFA - 2 ; case 5
	.short _0207AE3A - _0207ADFA - 2 ; case 6
	.short _0207AE90 - _0207ADFA - 2 ; case 7
_0207AE0A:
	ldr r0, _0207AFAC ; =0x00000654
	ldr r0, [r4, r0]
	ldr r0, [r0]
	bl GetPartyCount
	cmp r5, r0
	bhs _0207AE44
	ldr r0, _0207AFB0 ; =0x00000948
	lsl r3, r5, #3
	ldr r6, [r4, r0]
	add r0, r4, #0
	ldrb r2, [r6, r3]
	add r3, r6, r3
	ldrb r3, [r3, #1]
	add r1, r5, #0
	bl sub_0207A910
	add r0, r4, #0
	mov r1, #1
	bl sub_0207AC70
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	pop {r4, r5, r6, pc}
_0207AE3A:
	ldr r0, _0207AFB4 ; =0x00000C63
	ldrb r0, [r4, r0]
	lsl r0, r0, #0x18
	lsr r0, r0, #0x1f
	beq _0207AE46
_0207AE44:
	b _0207AFA6
_0207AE46:
	mov r0, #0x25
	lsl r0, r0, #6
	bl PlaySE
	add r0, r4, #0
	mov r1, #0
	bl sub_02079224
	ldr r0, _0207AFB8 ; =0x00000C65
	mov r1, #7
	strb r1, [r4, r0]
	add r0, r4, #0
	mov r1, #1
	bl sub_0207CB3C
	ldr r0, _0207AFBC ; =0x04000050
	mov r1, #0
	strh r1, [r0]
	ldr r0, _0207AFB0 ; =0x00000948
	mov r1, #7
	ldr r3, [r4, r0]
	add r0, r4, #0
	add r2, r3, #0
	add r2, #0x38
	add r3, #0x39
	ldrb r2, [r2]
	ldrb r3, [r3]
	bl sub_0207A910
	add r0, r4, #0
	mov r1, #9
	mov r2, #3
	mov r3, #1
	bl sub_0207CBD0
	mov r0, #5
	pop {r4, r5, r6, pc}
_0207AE90:
	ldr r0, _0207AFB0 ; =0x00000948
	mov r1, #6
	ldr r3, [r4, r0]
	add r0, r4, #0
	add r2, r3, #0
	add r2, #0x30
	add r3, #0x31
	ldrb r2, [r2]
	ldrb r3, [r3]
	bl sub_0207A988
	add r0, r4, #0
	mov r1, #1
	bl sub_0207AC70
	add r2, r0, #0
	add r0, r4, #0
	mov r1, #8
	mov r3, #1
	bl sub_0207CBD0
	mov r0, #5
	pop {r4, r5, r6, pc}
_0207AEBE:
	ldr r0, _0207AFC0 ; =gMain
	ldr r1, [r0, #0x48]
	mov r0, #1
	tst r0, r1
	beq _0207AF36
	ldr r0, _0207AFB8 ; =0x00000C65
	ldrb r1, [r4, r0]
	cmp r1, #7
	bne _0207AEFA
	ldr r0, _0207AFB0 ; =0x00000948
	lsl r5, r1, #3
	ldr r3, [r4, r0]
	add r0, r4, #0
	ldrb r2, [r3, r5]
	add r3, r3, r5
	ldrb r3, [r3, #1]
	bl sub_0207A910
	add r0, r4, #0
	mov r1, #0
	bl sub_0207AC70
	add r2, r0, #0
	add r0, r4, #0
	mov r1, #9
	mov r3, #0
	bl sub_0207CBD0
	mov r0, #5
	pop {r4, r5, r6, pc}
_0207AEFA:
	cmp r1, #6
	bne _0207AF28
	ldr r0, _0207AFB0 ; =0x00000948
	lsl r5, r1, #3
	ldr r3, [r4, r0]
	add r0, r4, #0
	ldrb r2, [r3, r5]
	add r3, r3, r5
	ldrb r3, [r3, #1]
	bl sub_0207A988
	add r0, r4, #0
	mov r1, #0
	bl sub_0207AC70
	add r2, r0, #0
	add r0, r4, #0
	mov r1, #8
	mov r3, #0
	bl sub_0207CBD0
	mov r0, #5
	pop {r4, r5, r6, pc}
_0207AF28:
	add r0, r4, #0
	mov r1, #0
	bl sub_0207AC70
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	pop {r4, r5, r6, pc}
_0207AF36:
	mov r0, #2
	tst r0, r1
	beq _0207AF9E
	ldr r0, _0207AFB4 ; =0x00000C63
	ldrb r0, [r4, r0]
	lsl r0, r0, #0x18
	lsr r0, r0, #0x1f
	bne _0207AF9E
	mov r0, #0x25
	lsl r0, r0, #6
	bl PlaySE
	add r0, r4, #0
	mov r1, #0
	bl sub_02079224
	add r0, r4, #0
	mov r1, #0
	bl sub_0207CB3C
	ldr r0, _0207AFBC ; =0x04000050
	mov r3, #0
	strh r3, [r0]
	ldr r0, _0207AFB8 ; =0x00000C65
	ldrb r0, [r4, r0]
	cmp r0, #7
	bne _0207AF78
	add r0, r4, #0
	mov r1, #9
	mov r2, #3
	bl sub_0207CBD0
	b _0207AF9A
_0207AF78:
	ldr r0, _0207AFB0 ; =0x00000948
	mov r1, #7
	ldr r3, [r4, r0]
	add r0, r4, #0
	add r2, r3, #0
	add r2, #0x38
	add r3, #0x39
	ldrb r2, [r2]
	ldrb r3, [r3]
	bl sub_0207A910
	add r0, r4, #0
	mov r1, #9
	mov r2, #3
	mov r3, #1
	bl sub_0207CBD0
_0207AF9A:
	mov r0, #5
	pop {r4, r5, r6, pc}
_0207AF9E:
	add r0, r4, #0
	bl sub_0207A8FC
	add r6, r0, #0
_0207AFA6:
	add r0, r6, #0
	pop {r4, r5, r6, pc}
	nop
_0207AFAC: .word 0x00000654
_0207AFB0: .word 0x00000948
_0207AFB4: .word 0x00000C63
_0207AFB8: .word 0x00000C65
_0207AFBC: .word 0x04000050
_0207AFC0: .word gMain
	thumb_func_end sub_0207ADB8

	thumb_func_start sub_0207AFC4
sub_0207AFC4: ; 0x0207AFC4
	push {r3, r4, r5, lr}
	add r4, r0, #0
	mov r0, #0x81
	lsl r0, r0, #2
	add r0, r4, r0
	mov r1, #1
	bl sub_0200E9BC
	mov r0, #0xc
	mov r1, #8
	bl AllocFromHeap
	add r5, r0, #0
	ldr r0, _0207B0A8 ; =0x00000654
	ldr r0, [r4, r0]
	add r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0xf
	bgt _0207AFFC
	bge _0207B034
	cmp r0, #2
	bgt _0207B070
	cmp r0, #0
	blt _0207B070
	beq _0207B01C
	cmp r0, #2
	beq _0207B028
	b _0207B070
_0207AFFC:
	sub r0, #0x11
	cmp r0, #6
	bhi _0207B070
	add r0, r0, r0
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_0207B00E: ; jump table
	.short _0207B028 - _0207B00E - 2 ; case 0
	.short _0207B040 - _0207B00E - 2 ; case 1
	.short _0207B070 - _0207B00E - 2 ; case 2
	.short _0207B070 - _0207B00E - 2 ; case 3
	.short _0207B04C - _0207B00E - 2 ; case 4
	.short _0207B058 - _0207B00E - 2 ; case 5
	.short _0207B064 - _0207B00E - 2 ; case 6
_0207B01C:
	add r0, r4, #0
	add r1, r5, #0
	bl sub_0207B0B0
	add r2, r0, #0
	b _0207B07A
_0207B028:
	add r0, r4, #0
	add r1, r5, #0
	bl sub_0207B23C
	add r2, r0, #0
	b _0207B07A
_0207B034:
	add r0, r4, #0
	add r1, r5, #0
	bl sub_0207B1BC
	add r2, r0, #0
	b _0207B07A
_0207B040:
	add r0, r4, #0
	add r1, r5, #0
	bl sub_0207B1C8
	add r2, r0, #0
	b _0207B07A
_0207B04C:
	add r0, r4, #0
	add r1, r5, #0
	bl sub_0207B32C
	add r2, r0, #0
	b _0207B07A
_0207B058:
	add r0, r4, #0
	add r1, r5, #0
	bl sub_0207B28C
	add r2, r0, #0
	b _0207B07A
_0207B064:
	add r0, r4, #0
	add r1, r5, #0
	bl sub_0207B2DC
	add r2, r0, #0
	b _0207B07A
_0207B070:
	add r0, r4, #0
	add r1, r5, #0
	bl sub_0207B200
	add r2, r0, #0
_0207B07A:
	add r0, r4, #0
	add r1, r5, #0
	bl sub_0207D0E4
	mov r0, #0xc
	add r1, r5, #0
	bl FreeToHeapExplicit
	add r0, r4, #0
	bl sub_0207D1C8
	mov r1, #0
	add r0, r4, #0
	mvn r1, r1
	mov r2, #1
	bl sub_0207DAD8
	ldr r0, _0207B0AC ; =0x00000678
	mov r1, #1
	ldr r0, [r4, r0]
	bl sub_0200DD08
	pop {r3, r4, r5, pc}
	.balign 4, 0
_0207B0A8: .word 0x00000654
_0207B0AC: .word 0x00000678
	thumb_func_end sub_0207AFC4

	thumb_func_start sub_0207B0B0
sub_0207B0B0: ; 0x0207B0B0
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	str r1, [sp, #4]
	ldr r1, _0207B1B0 ; =0x00000654
	str r0, [sp]
	ldr r0, [r0, r1]
	ldr r2, _0207B1B4 ; =0x00000C65
	ldr r1, [sp]
	ldr r0, [r0]
	ldrb r1, [r1, r2]
	bl GetPartyMonByIndex
	str r0, [sp, #8]
	ldr r0, [sp, #4]
	mov r1, #1
	strb r1, [r0]
	mov r4, #0
	add r0, r4, #1
	lsl r0, r0, #0x18
	lsr r5, r0, #0x18
	ldr r1, _0207B1B0 ; =0x00000654
	ldr r0, [sp]
	ldr r0, [r0, r1]
	ldr r0, [r0, #0x1c]
	bl sub_02067584
	cmp r0, #0
	bne _0207B19E
	ldr r0, _0207B1B4 ; =0x00000C65
	ldr r1, [sp]
	ldrb r2, [r1, r0]
	mov r1, #0x30
	add r3, r2, #0
	ldr r2, [sp]
	mul r3, r1
	add r3, r2, r3
	ldr r2, _0207B1B8 ; =0x00000838
	ldrb r3, [r3, r2]
	cmp r3, #0
	bne _0207B184
	ldr r3, [sp, #4]
	add r6, r4, #0
	strb r6, [r3, r5]
	add r3, r5, #1
	lsl r3, r3, #0x18
	lsr r5, r3, #0x18
	ldr r3, [sp]
	ldrb r0, [r3, r0]
	mul r1, r0
	add r0, r3, #0
	add r1, r0, r1
	sub r0, r2, #4
	ldrh r0, [r1, r0]
	bl sub_02078068
	cmp r0, #1
	bne _0207B128
	mov r1, #5
	ldr r0, [sp, #4]
	b _0207B12C
_0207B128:
	ldr r0, [sp, #4]
	mov r1, #2
_0207B12C:
	strb r1, [r0, r5]
	add r0, r5, #1
	lsl r0, r0, #0x18
	lsr r2, r0, #0x18
	ldr r0, [sp, #4]
	mov r1, #9
	strb r1, [r0, r2]
	add r0, r2, #1
	lsl r0, r0, #0x18
	lsr r5, r0, #0x18
	mov r6, #0
_0207B142:
	add r1, r6, #0
	ldr r0, [sp, #8]
	add r1, #0x36
	mov r2, #0
	bl GetMonData
	lsl r0, r0, #0x10
	lsr r7, r0, #0x10
	beq _0207B1AA
	add r0, r7, #0
	bl sub_0207BCC0
	cmp r0, #0xff
	beq _0207B178
	ldr r1, [sp, #4]
	add r2, r4, #0
	strb r0, [r1, r5]
	add r0, r5, #1
	lsl r0, r0, #0x18
	lsr r5, r0, #0x18
	ldr r0, [sp]
	add r1, r7, #0
	bl sub_0207D0A0
	add r0, r4, #1
	lsl r0, r0, #0x18
	lsr r4, r0, #0x18
_0207B178:
	add r0, r6, #1
	lsl r0, r0, #0x18
	lsr r6, r0, #0x18
	cmp r6, #4
	blo _0207B142
	b _0207B1AA
_0207B184:
	ldr r0, [sp, #4]
	add r1, r4, #0
	strb r1, [r0, r5]
	add r0, r5, #1
	lsl r0, r0, #0x18
	lsr r2, r0, #0x18
	ldr r0, [sp, #4]
	mov r1, #9
	strb r1, [r0, r2]
	add r0, r2, #1
	lsl r0, r0, #0x18
	lsr r5, r0, #0x18
	b _0207B1AA
_0207B19E:
	ldr r0, [sp, #4]
	mov r1, #9
	strb r1, [r0, r5]
	add r0, r5, #1
	lsl r0, r0, #0x18
	lsr r5, r0, #0x18
_0207B1AA:
	add r0, r5, #0
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
	.balign 4, 0
_0207B1B0: .word 0x00000654
_0207B1B4: .word 0x00000C65
_0207B1B8: .word 0x00000838
	thumb_func_end sub_0207B0B0

	thumb_func_start sub_0207B1BC
sub_0207B1BC: ; 0x0207B1BC
	mov r0, #0xe
	strb r0, [r1]
	mov r0, #9
	strb r0, [r1, #1]
	mov r0, #2
	bx lr
	thumb_func_end sub_0207B1BC

	thumb_func_start sub_0207B1C8
sub_0207B1C8: ; 0x0207B1C8
	ldr r2, _0207B1F8 ; =0x00000C65
	ldrb r3, [r0, r2]
	mov r2, #0x30
	mul r2, r3
	add r2, r0, r2
	ldr r0, _0207B1FC ; =0x00000838
	ldrb r0, [r2, r0]
	cmp r0, #0
	bne _0207B1EA
	mov r0, #8
	strb r0, [r1]
	mov r0, #1
	strb r0, [r1, #1]
	mov r0, #9
	strb r0, [r1, #2]
	mov r0, #3
	bx lr
_0207B1EA:
	mov r0, #1
	strb r0, [r1]
	mov r0, #9
	strb r0, [r1, #1]
	mov r0, #2
	bx lr
	nop
_0207B1F8: .word 0x00000C65
_0207B1FC: .word 0x00000838
	thumb_func_end sub_0207B1C8

	thumb_func_start sub_0207B200
sub_0207B200: ; 0x0207B200
	ldr r2, _0207B234 ; =0x00000C65
	ldrb r3, [r0, r2]
	mov r2, #0x30
	mul r2, r3
	add r2, r0, r2
	ldr r0, _0207B238 ; =0x00000836
	ldrh r0, [r2, r0]
	lsl r0, r0, #0x10
	lsr r0, r0, #0x1f
	cmp r0, #1
	bne _0207B226
	mov r0, #0xd
	strb r0, [r1]
	mov r0, #1
	strb r0, [r1, #1]
	mov r0, #9
	strb r0, [r1, #2]
	mov r0, #3
	bx lr
_0207B226:
	mov r0, #1
	strb r0, [r1]
	mov r0, #9
	strb r0, [r1, #1]
	mov r0, #2
	bx lr
	nop
_0207B234: .word 0x00000C65
_0207B238: .word 0x00000836
	thumb_func_end sub_0207B200

	thumb_func_start sub_0207B23C
sub_0207B23C: ; 0x0207B23C
	push {r4, lr}
	add r4, r1, #0
	ldr r1, _0207B288 ; =0x00000C65
	ldrb r1, [r0, r1]
	bl sub_0207B364
	cmp r0, #0
	beq _0207B256
	cmp r0, #1
	beq _0207B262
	cmp r0, #2
	beq _0207B272
	b _0207B282
_0207B256:
	mov r0, #1
	strb r0, [r4]
	mov r0, #9
	strb r0, [r4, #1]
	mov r0, #2
	pop {r4, pc}
_0207B262:
	mov r0, #0xb
	strb r0, [r4]
	mov r0, #1
	strb r0, [r4, #1]
	mov r0, #9
	strb r0, [r4, #2]
	mov r0, #3
	pop {r4, pc}
_0207B272:
	mov r0, #0xc
	strb r0, [r4]
	mov r0, #1
	strb r0, [r4, #1]
	mov r0, #9
	strb r0, [r4, #2]
	mov r0, #3
	pop {r4, pc}
_0207B282:
	mov r0, #0
	pop {r4, pc}
	nop
_0207B288: .word 0x00000C65
	thumb_func_end sub_0207B23C

	thumb_func_start sub_0207B28C
sub_0207B28C: ; 0x0207B28C
	push {r4, lr}
	add r4, r1, #0
	ldr r1, _0207B2D8 ; =0x00000C65
	ldrb r1, [r0, r1]
	bl sub_0207B418
	cmp r0, #0
	beq _0207B2A6
	cmp r0, #1
	beq _0207B2B2
	cmp r0, #2
	beq _0207B2C2
	b _0207B2D2
_0207B2A6:
	mov r0, #1
	strb r0, [r4]
	mov r0, #9
	strb r0, [r4, #1]
	mov r0, #2
	pop {r4, pc}
_0207B2B2:
	mov r0, #0xb
	strb r0, [r4]
	mov r0, #1
	strb r0, [r4, #1]
	mov r0, #9
	strb r0, [r4, #2]
	mov r0, #3
	pop {r4, pc}
_0207B2C2:
	mov r0, #0xc
	strb r0, [r4]
	mov r0, #1
	strb r0, [r4, #1]
	mov r0, #9
	strb r0, [r4, #2]
	mov r0, #3
	pop {r4, pc}
_0207B2D2:
	mov r0, #0
	pop {r4, pc}
	nop
_0207B2D8: .word 0x00000C65
	thumb_func_end sub_0207B28C

	thumb_func_start sub_0207B2DC
sub_0207B2DC: ; 0x0207B2DC
	push {r4, lr}
	add r4, r1, #0
	ldr r1, _0207B328 ; =0x00000C65
	ldrb r1, [r0, r1]
	bl sub_0207B4A0
	cmp r0, #0
	beq _0207B2F6
	cmp r0, #1
	beq _0207B302
	cmp r0, #2
	beq _0207B312
	b _0207B322
_0207B2F6:
	mov r0, #1
	strb r0, [r4]
	mov r0, #9
	strb r0, [r4, #1]
	mov r0, #2
	pop {r4, pc}
_0207B302:
	mov r0, #0xb
	strb r0, [r4]
	mov r0, #1
	strb r0, [r4, #1]
	mov r0, #9
	strb r0, [r4, #2]
	mov r0, #3
	pop {r4, pc}
_0207B312:
	mov r0, #0xc
	strb r0, [r4]
	mov r0, #1
	strb r0, [r4, #1]
	mov r0, #9
	strb r0, [r4, #2]
	mov r0, #3
	pop {r4, pc}
_0207B322:
	mov r0, #0
	pop {r4, pc}
	nop
_0207B328: .word 0x00000C65
	thumb_func_end sub_0207B2DC

	thumb_func_start sub_0207B32C
sub_0207B32C: ; 0x0207B32C
	ldr r2, _0207B35C ; =0x00000C65
	ldrb r3, [r0, r2]
	mov r2, #0x30
	mul r2, r3
	add r2, r0, r2
	ldr r0, _0207B360 ; =0x00000838
	ldrb r0, [r2, r0]
	cmp r0, #1
	bne _0207B34E
	mov r0, #1
	strb r0, [r1]
	mov r0, #0xf
	strb r0, [r1, #1]
	mov r0, #9
	strb r0, [r1, #2]
	mov r0, #3
	bx lr
_0207B34E:
	mov r0, #1
	strb r0, [r1]
	mov r0, #9
	strb r0, [r1, #1]
	mov r0, #2
	bx lr
	nop
_0207B35C: .word 0x00000C65
_0207B360: .word 0x00000838
	thumb_func_end sub_0207B32C

	thumb_func_start sub_0207B364
sub_0207B364: ; 0x0207B364
	push {r4, r5, r6, lr}
	add r5, r0, #0
	ldr r0, _0207B408 ; =0x00000654
	add r4, r1, #0
	ldr r2, [r5, r0]
	ldr r0, [r2, #0x14]
	cmp r0, #0
	beq _0207B392
	ldr r0, [r2]
	bl GetPartyMonByIndex
	add r1, r0, #0
	ldr r0, _0207B408 ; =0x00000654
	ldr r2, _0207B40C ; =0x00000C74
	ldr r0, [r5, r0]
	ldr r2, [r5, r2]
	ldr r0, [r0, #0x14]
	bl sub_0207496C
	cmp r0, #0
	bne _0207B392
	mov r0, #0
	pop {r4, r5, r6, pc}
_0207B392:
	ldr r0, _0207B408 ; =0x00000654
	ldr r0, [r5, r0]
	add r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x11
	bne _0207B3B8
	mov r0, #0x30
	mul r0, r4
	ldr r1, _0207B410 ; =0x0000082C
	add r2, r5, r0
	ldrh r0, [r2, r1]
	add r1, #0xd
	ldrb r1, [r2, r1]
	bl sub_020726F8
	cmp r0, #1
	bne _0207B3B8
	mov r0, #0
	pop {r4, r5, r6, pc}
_0207B3B8:
	ldr r1, _0207B408 ; =0x00000654
	mov r0, #0
	ldr r2, [r5, r1]
	add r1, r2, #0
	add r1, #0x36
	ldrb r1, [r1]
	lsl r1, r1, #0x18
	lsr r3, r1, #0x1c
	beq _0207B3E4
	add r1, r4, #1
_0207B3CC:
	add r6, r2, r0
	add r6, #0x30
	ldrb r6, [r6]
	cmp r1, r6
	bne _0207B3DA
	mov r0, #2
	pop {r4, r5, r6, pc}
_0207B3DA:
	add r0, r0, #1
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	cmp r0, r3
	blo _0207B3CC
_0207B3E4:
	mov r0, #0x30
	mul r0, r4
	add r3, r5, r0
	ldr r0, _0207B414 ; =0x00000838
	ldrb r1, [r3, r0]
	cmp r1, #1
	beq _0207B3FE
	sub r0, r0, #6
	add r2, #0x37
	ldrh r1, [r3, r0]
	ldrb r0, [r2]
	cmp r1, r0
	ble _0207B402
_0207B3FE:
	mov r0, #0
	pop {r4, r5, r6, pc}
_0207B402:
	mov r0, #1
	pop {r4, r5, r6, pc}
	nop
_0207B408: .word 0x00000654
_0207B40C: .word 0x00000C74
_0207B410: .word 0x0000082C
_0207B414: .word 0x00000838
	thumb_func_end sub_0207B364

	thumb_func_start sub_0207B418
sub_0207B418: ; 0x0207B418
	push {r4, r5, r6, lr}
	add r5, r0, #0
	ldr r0, _0207B494 ; =0x00000654
	add r4, r1, #0
	ldr r0, [r5, r0]
	add r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x16
	bne _0207B444
	mov r0, #0x30
	mul r0, r4
	ldr r1, _0207B498 ; =0x0000082C
	add r2, r5, r0
	ldrh r0, [r2, r1]
	add r1, #0xd
	ldrb r1, [r2, r1]
	bl sub_020726F8
	cmp r0, #1
	bne _0207B444
	mov r0, #0
	pop {r4, r5, r6, pc}
_0207B444:
	ldr r1, _0207B494 ; =0x00000654
	mov r0, #0
	ldr r2, [r5, r1]
	add r1, r2, #0
	add r1, #0x36
	ldrb r1, [r1]
	lsl r1, r1, #0x18
	lsr r3, r1, #0x1c
	beq _0207B470
	add r1, r4, #1
_0207B458:
	add r6, r2, r0
	add r6, #0x30
	ldrb r6, [r6]
	cmp r1, r6
	bne _0207B466
	mov r0, #2
	pop {r4, r5, r6, pc}
_0207B466:
	add r0, r0, #1
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	cmp r0, r3
	blo _0207B458
_0207B470:
	mov r0, #0x30
	mul r0, r4
	add r3, r5, r0
	ldr r0, _0207B49C ; =0x00000838
	ldrb r1, [r3, r0]
	cmp r1, #1
	beq _0207B48A
	sub r0, r0, #6
	add r2, #0x37
	ldrh r1, [r3, r0]
	ldrb r0, [r2]
	cmp r1, r0
	bge _0207B48E
_0207B48A:
	mov r0, #0
	pop {r4, r5, r6, pc}
_0207B48E:
	mov r0, #1
	pop {r4, r5, r6, pc}
	nop
_0207B494: .word 0x00000654
_0207B498: .word 0x0000082C
_0207B49C: .word 0x00000838
	thumb_func_end sub_0207B418

	thumb_func_start sub_0207B4A0
sub_0207B4A0: ; 0x0207B4A0
	push {r4, r5, r6, lr}
	add r5, r0, #0
	ldr r0, _0207B510 ; =0x00000654
	add r4, r1, #0
	ldr r0, [r5, r0]
	add r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x17
	bne _0207B4CC
	mov r0, #0x30
	mul r0, r4
	ldr r1, _0207B514 ; =0x0000082C
	add r2, r5, r0
	ldrh r0, [r2, r1]
	add r1, #0xd
	ldrb r1, [r2, r1]
	bl sub_020726F8
	cmp r0, #1
	bne _0207B4CC
	mov r0, #0
	pop {r4, r5, r6, pc}
_0207B4CC:
	ldr r1, _0207B510 ; =0x00000654
	mov r0, #0
	ldr r2, [r5, r1]
	add r1, r2, #0
	add r1, #0x36
	ldrb r1, [r1]
	lsl r1, r1, #0x18
	lsr r3, r1, #0x1c
	beq _0207B4F8
	add r1, r4, #1
_0207B4E0:
	add r6, r2, r0
	add r6, #0x30
	ldrb r6, [r6]
	cmp r1, r6
	bne _0207B4EE
	mov r0, #2
	pop {r4, r5, r6, pc}
_0207B4EE:
	add r0, r0, #1
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	cmp r0, r3
	blo _0207B4E0
_0207B4F8:
	mov r0, #0x30
	mul r0, r4
	add r1, r5, r0
	ldr r0, _0207B518 ; =0x00000838
	ldrb r0, [r1, r0]
	cmp r0, #1
	bne _0207B50A
	mov r0, #0
	pop {r4, r5, r6, pc}
_0207B50A:
	mov r0, #1
	pop {r4, r5, r6, pc}
	nop
_0207B510: .word 0x00000654
_0207B514: .word 0x0000082C
_0207B518: .word 0x00000838
	thumb_func_end sub_0207B4A0

	thumb_func_start sub_0207B51C
sub_0207B51C: ; 0x0207B51C
	push {r4, r5, r6, lr}
	add r4, r1, #0
	add r5, r0, #0
	add r6, r2, #0
	cmp r4, #6
	bne _0207B556
	mov r0, #0x1a
	lsl r0, r0, #6
	ldr r0, [r5, r0]
	bl sub_020249A8
	lsl r0, r0, #0x18
	lsr r1, r0, #0x18
	cmp r6, #0
	bne _0207B540
	mov r0, #2
	and r0, r1
	b _0207B546
_0207B540:
	mov r0, #2
	and r0, r1
	add r0, r0, #1
_0207B546:
	lsl r0, r0, #0x18
	lsr r1, r0, #0x18
	mov r0, #0x1a
	lsl r0, r0, #6
	ldr r0, [r5, r0]
	bl sub_020248F0
	pop {r4, r5, r6, pc}
_0207B556:
	cmp r4, #7
	bne _0207B584
	ldr r0, _0207B5E4 ; =0x00000684
	ldr r0, [r5, r0]
	bl sub_020249A8
	lsl r0, r0, #0x18
	lsr r1, r0, #0x18
	cmp r6, #0
	bne _0207B570
	mov r0, #2
	and r0, r1
	b _0207B576
_0207B570:
	mov r0, #2
	and r0, r1
	add r0, r0, #1
_0207B576:
	lsl r0, r0, #0x18
	lsr r1, r0, #0x18
	ldr r0, _0207B5E4 ; =0x00000684
	ldr r0, [r5, r0]
	bl sub_020248F0
	pop {r4, r5, r6, pc}
_0207B584:
	cmp r6, #0
	ldr r1, _0207B5E8 ; =0x0000083E
	bne _0207B5B2
	mov r0, #0x30
	add r3, r5, r1
	mul r0, r4
	ldrsh r2, [r3, r0]
	add r1, r1, #2
	sub r2, r2, #2
	strh r2, [r3, r0]
	add r2, r5, r1
	ldrsh r1, [r2, r0]
	sub r1, r1, #2
	strh r1, [r2, r0]
	lsl r0, r4, #2
	add r1, r5, r0
	mov r0, #0x66
	lsl r0, r0, #4
	ldr r0, [r1, r0]
	mov r1, #0
	bl sub_020248F0
	b _0207B5D8
_0207B5B2:
	mov r0, #0x30
	add r3, r5, r1
	mul r0, r4
	ldrsh r2, [r3, r0]
	add r1, r1, #2
	add r2, r2, #2
	strh r2, [r3, r0]
	add r2, r5, r1
	ldrsh r1, [r2, r0]
	add r1, r1, #2
	strh r1, [r2, r0]
	lsl r0, r4, #2
	add r1, r5, r0
	mov r0, #0x66
	lsl r0, r0, #4
	ldr r0, [r1, r0]
	mov r1, #1
	bl sub_020248F0
_0207B5D8:
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0207A7F4
	pop {r4, r5, r6, pc}
	nop
_0207B5E4: .word 0x00000684
_0207B5E8: .word 0x0000083E
	thumb_func_end sub_0207B51C

	thumb_func_start sub_0207B5EC
sub_0207B5EC: ; 0x0207B5EC
	cmp r1, #0
	beq _0207B5F8
	cmp r0, #0
	beq _0207B5FC
	cmp r1, #1
	bne _0207B5FC
_0207B5F8:
	mov r0, #1
	bx lr
_0207B5FC:
	mov r0, #0
	bx lr
	thumb_func_end sub_0207B5EC

	thumb_func_start sub_0207B600
sub_0207B600: ; 0x0207B600
	push {r3, r4, r5, r6, r7, lr}
	mov r1, #0xc9
	add r4, r0, #0
	lsl r1, r1, #4
	add r5, r4, r1
	ldr r1, [r5, #0xc]
	cmp r1, #1
	bne _0207B640
	bl sub_0207CC24
	cmp r0, #0
	bne _0207B63C
	ldr r0, _0207B7C4 ; =0x00000C65
	ldrb r0, [r4, r0]
	cmp r0, #7
	beq _0207B634
	ldr r0, _0207B7C8 ; =0x00000684
	mov r1, #0
	ldr r0, [r4, r0]
	bl sub_020249D4
	ldr r0, _0207B7C8 ; =0x00000684
	mov r1, #0
	ldr r0, [r4, r0]
	bl sub_020248F0
_0207B634:
	ldr r0, [r5, #8]
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	pop {r3, r4, r5, r6, r7, pc}
_0207B63C:
	mov r0, #5
	pop {r3, r4, r5, r6, r7, pc}
_0207B640:
	bl sub_0207AD6C
	add r6, r0, #0
	mov r0, #0
	mvn r0, r0
	cmp r6, r0
	beq _0207B746
	cmp r6, #6
	bhi _0207B67A
	add r0, r6, r6
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_0207B65E: ; jump table
	.short _0207B66C - _0207B65E - 2 ; case 0
	.short _0207B66C - _0207B65E - 2 ; case 1
	.short _0207B66C - _0207B65E - 2 ; case 2
	.short _0207B66C - _0207B65E - 2 ; case 3
	.short _0207B66C - _0207B65E - 2 ; case 4
	.short _0207B66C - _0207B65E - 2 ; case 5
	.short _0207B728 - _0207B65E - 2 ; case 6
_0207B66C:
	ldr r0, _0207B7CC ; =0x00000654
	ldr r0, [r4, r0]
	ldr r0, [r0]
	bl GetPartyCount
	cmp r6, r0
	blo _0207B67C
_0207B67A:
	b _0207B7C0
_0207B67C:
	ldr r0, _0207B7C4 ; =0x00000C65
	ldrb r5, [r4, r0]
	strb r6, [r4, r0]
	ldr r0, _0207B7D0 ; =0x000005DC
	bl PlaySE
	ldr r0, _0207B7D4 ; =0x00000C63
	ldrb r1, [r4, r0]
	add r0, r0, #2
	ldrb r0, [r4, r0]
	lsl r1, r1, #0x1a
	lsr r1, r1, #0x1a
	cmp r0, r1
	bne _0207B6D2
	cmp r5, r0
	beq _0207B6C8
	lsl r1, r5, #0x18
	add r0, r4, #0
	lsr r1, r1, #0x18
	mov r2, #0
	bl sub_0207B51C
	ldr r1, _0207B7C4 ; =0x00000C65
	add r0, r4, #0
	ldrb r1, [r4, r1]
	mov r2, #1
	bl sub_0207B51C
	ldr r0, _0207B7D8 ; =0x00000948
	lsl r3, r6, #3
	ldr r5, [r4, r0]
	add r0, r4, #0
	ldrb r2, [r5, r3]
	add r3, r5, r3
	ldrb r3, [r3, #1]
	add r1, r6, #0
	bl sub_0207A910
_0207B6C8:
	add r0, r4, #0
	bl sub_0207FBC8
	mov r0, #3
	pop {r3, r4, r5, r6, r7, pc}
_0207B6D2:
	cmp r5, r0
	beq _0207B6E6
	cmp r5, r1
	beq _0207B6E6
	lsl r1, r5, #0x18
	add r0, r4, #0
	lsr r1, r1, #0x18
	mov r2, #0
	bl sub_0207B51C
_0207B6E6:
	ldr r0, _0207B7D4 ; =0x00000C63
	ldrb r0, [r4, r0]
	lsl r0, r0, #0x1a
	lsr r1, r0, #0x1a
	cmp r5, r1
	bne _0207B6FA
	add r0, r4, #0
	mov r2, #0
	bl sub_0207B51C
_0207B6FA:
	ldr r0, _0207B7C4 ; =0x00000C65
	ldrb r1, [r4, r0]
	cmp r5, r1
	beq _0207B70A
	add r0, r4, #0
	mov r2, #1
	bl sub_0207B51C
_0207B70A:
	ldr r0, _0207B7D8 ; =0x00000948
	lsl r3, r6, #3
	ldr r5, [r4, r0]
	add r0, r4, #0
	ldrb r2, [r5, r3]
	add r3, r5, r3
	ldrb r3, [r3, #1]
	add r1, r6, #0
	bl sub_0207A910
	add r0, r4, #0
	bl sub_0207FC1C
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_0207B728:
	mov r0, #0x25
	lsl r0, r0, #6
	bl PlaySE
	add r0, r4, #0
	bl sub_0207FBC8
	add r0, r4, #0
	mov r1, #9
	mov r2, #3
	mov r3, #0
	bl sub_0207CBD0
	mov r0, #5
	pop {r3, r4, r5, r6, r7, pc}
_0207B746:
	ldr r0, _0207B7DC ; =gMain
	ldr r1, [r0, #0x48]
	mov r0, #1
	tst r0, r1
	beq _0207B7A0
	ldr r0, _0207B7C4 ; =0x00000C65
	ldrb r1, [r4, r0]
	cmp r1, #7
	blo _0207B776
	mov r0, #0x25
	lsl r0, r0, #6
	bl PlaySE
	add r0, r4, #0
	bl sub_0207FBC8
	add r0, r4, #0
	mov r1, #9
	mov r2, #3
	mov r3, #0
	bl sub_0207CBD0
	mov r0, #5
	pop {r3, r4, r5, r6, r7, pc}
_0207B776:
	sub r0, r0, #2
	ldrb r0, [r4, r0]
	lsl r0, r0, #0x1a
	lsr r0, r0, #0x1a
	cmp r1, r0
	ldr r0, _0207B7D0 ; =0x000005DC
	bne _0207B792
	bl PlaySE
	add r0, r4, #0
	bl sub_0207FBC8
	mov r0, #3
	pop {r3, r4, r5, r6, r7, pc}
_0207B792:
	bl PlaySE
	add r0, r4, #0
	bl sub_0207FC1C
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_0207B7A0:
	mov r0, #2
	tst r0, r1
	beq _0207B7B8
	mov r0, #0x25
	lsl r0, r0, #6
	bl PlaySE
	add r0, r4, #0
	bl sub_0207FBC8
	mov r0, #3
	pop {r3, r4, r5, r6, r7, pc}
_0207B7B8:
	add r0, r4, #0
	bl sub_0207A8FC
	add r7, r0, #0
_0207B7C0:
	add r0, r7, #0
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_0207B7C4: .word 0x00000C65
_0207B7C8: .word 0x00000684
_0207B7CC: .word 0x00000654
_0207B7D0: .word 0x000005DC
_0207B7D4: .word 0x00000C63
_0207B7D8: .word 0x00000948
_0207B7DC: .word gMain
	thumb_func_end sub_0207B600

	thumb_func_start sub_0207B7E0
sub_0207B7E0: ; 0x0207B7E0
	push {r3, r4, r5, lr}
	sub sp, #8
	ldr r1, _0207BA64 ; =0x00000654
	add r4, r0, #0
	ldr r3, [r4, r1]
	mov r0, #0
	add r1, r3, #0
	add r1, #0x36
	ldrb r1, [r1]
	lsl r1, r1, #0x1c
	lsr r1, r1, #0x1c
	beq _0207B88A
_0207B7F8:
	add r2, r3, r0
	add r2, #0x30
	ldrb r2, [r2]
	cmp r2, #0
	bne _0207B880
	add r3, #0x36
	ldrb r0, [r3]
	lsl r0, r0, #0x18
	lsr r0, r0, #0x1c
	cmp r0, #6
	bhi _0207B864
	add r0, r0, r0
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_0207B81A: ; jump table
	.short _0207B864 - _0207B81A - 2 ; case 0
	.short _0207B864 - _0207B81A - 2 ; case 1
	.short _0207B828 - _0207B81A - 2 ; case 2
	.short _0207B834 - _0207B81A - 2 ; case 3
	.short _0207B840 - _0207B81A - 2 ; case 4
	.short _0207B84C - _0207B81A - 2 ; case 5
	.short _0207B858 - _0207B81A - 2 ; case 6
_0207B828:
	add r0, r4, #0
	mov r1, #0x67
	mov r2, #1
	bl sub_0207DAEC
	b _0207B86E
_0207B834:
	add r0, r4, #0
	mov r1, #0x6c
	mov r2, #1
	bl sub_0207DAEC
	b _0207B86E
_0207B840:
	add r0, r4, #0
	mov r1, #0x6d
	mov r2, #1
	bl sub_0207DAEC
	b _0207B86E
_0207B84C:
	add r0, r4, #0
	mov r1, #0x6e
	mov r2, #1
	bl sub_0207DAEC
	b _0207B86E
_0207B858:
	add r0, r4, #0
	mov r1, #0x6f
	mov r2, #1
	bl sub_0207DAEC
	b _0207B86E
_0207B864:
	add r0, r4, #0
	mov r1, #0x1e
	mov r2, #1
	bl sub_0207DAEC
_0207B86E:
	ldr r0, _0207BA68 ; =0x00000C62
	mov r1, #0x17
	strb r1, [r4, r0]
	ldr r0, _0207BA6C ; =0x000005F2
	bl PlaySE
	add sp, #8
	mov r0, #0x18
	pop {r3, r4, r5, pc}
_0207B880:
	add r0, r0, #1
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	cmp r0, r1
	blo _0207B7F8
_0207B88A:
	ldr r0, [r3, #0x14]
	cmp r0, #0
	beq _0207B98E
	ldr r2, _0207BA70 ; =0x00000C74
	ldr r1, [r3]
	ldr r2, [r4, r2]
	add r3, #0x30
	bl sub_02074A6C
	cmp r0, #8
	bhi _0207B98E
	add r0, r0, r0
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_0207B8AC: ; jump table
	.short _0207B98E - _0207B8AC - 2 ; case 0
	.short _0207B8BE - _0207B8AC - 2 ; case 1
	.short _0207B91E - _0207B8AC - 2 ; case 2
	.short _0207B93A - _0207B8AC - 2 ; case 3
	.short _0207B98E - _0207B8AC - 2 ; case 4
	.short _0207B98E - _0207B8AC - 2 ; case 5
	.short _0207B956 - _0207B8AC - 2 ; case 6
	.short _0207B98E - _0207B8AC - 2 ; case 7
	.short _0207B972 - _0207B8AC - 2 ; case 8
_0207B8BE:
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r0, [r4, r0]
	mov r1, #0xa7
	bl NewString_ReadMsgData
	add r5, r0, #0
	ldr r0, _0207BA64 ; =0x00000654
	mov r1, #3
	ldr r0, [r4, r0]
	ldr r0, [r0, #0x14]
	bl sub_020290FC
	mov r1, #0
	add r2, r0, #0
	str r1, [sp]
	mov r0, #1
	str r0, [sp, #4]
	ldr r0, _0207BA74 ; =0x000007C4
	mov r3, #3
	ldr r0, [r4, r0]
	bl BufferIntegerAsString
	ldr r1, _0207BA74 ; =0x000007C4
	add r2, r5, #0
	ldr r0, [r4, r1]
	add r1, r1, #4
	ldr r1, [r4, r1]
	bl StringExpandPlaceholders
	add r0, r5, #0
	bl String_dtor
	mov r1, #0
	add r0, r4, #0
	mvn r1, r1
	mov r2, #1
	bl sub_0207DAEC
	ldr r0, _0207BA68 ; =0x00000C62
	mov r1, #0x17
	strb r1, [r4, r0]
	ldr r0, _0207BA6C ; =0x000005F2
	bl PlaySE
	add sp, #8
	mov r0, #0x18
	pop {r3, r4, r5, pc}
_0207B91E:
	add r0, r4, #0
	mov r1, #0xa5
	mov r2, #1
	bl sub_0207DAEC
	ldr r0, _0207BA68 ; =0x00000C62
	mov r1, #0x17
	strb r1, [r4, r0]
	ldr r0, _0207BA6C ; =0x000005F2
	bl PlaySE
	add sp, #8
	mov r0, #0x18
	pop {r3, r4, r5, pc}
_0207B93A:
	add r0, r4, #0
	mov r1, #0xa6
	mov r2, #1
	bl sub_0207DAEC
	ldr r0, _0207BA68 ; =0x00000C62
	mov r1, #0x17
	strb r1, [r4, r0]
	ldr r0, _0207BA6C ; =0x000005F2
	bl PlaySE
	add sp, #8
	mov r0, #0x18
	pop {r3, r4, r5, pc}
_0207B956:
	add r0, r4, #0
	mov r1, #0xa8
	mov r2, #1
	bl sub_0207DAEC
	ldr r0, _0207BA68 ; =0x00000C62
	mov r1, #0x17
	strb r1, [r4, r0]
	ldr r0, _0207BA6C ; =0x000005F2
	bl PlaySE
	add sp, #8
	mov r0, #0x18
	pop {r3, r4, r5, pc}
_0207B972:
	add r0, r4, #0
	mov r1, #0xbf
	mov r2, #1
	bl sub_0207DAEC
	ldr r0, _0207BA68 ; =0x00000C62
	mov r1, #0x17
	strb r1, [r4, r0]
	ldr r0, _0207BA6C ; =0x000005F2
	bl PlaySE
	add sp, #8
	mov r0, #0x18
	pop {r3, r4, r5, pc}
_0207B98E:
	ldr r0, _0207BA64 ; =0x00000654
	ldr r0, [r4, r0]
	add r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x11
	bne _0207B9E6
	add r0, r4, #0
	bl sub_0207BA78
	cmp r0, #0
	beq _0207B9E6
	cmp r0, #1
	beq _0207B9AE
	cmp r0, #2
	beq _0207B9CA
	b _0207B9E6
_0207B9AE:
	add r0, r4, #0
	mov r1, #0xa5
	mov r2, #1
	bl sub_0207DAEC
	ldr r0, _0207BA68 ; =0x00000C62
	mov r1, #0x17
	strb r1, [r4, r0]
	ldr r0, _0207BA6C ; =0x000005F2
	bl PlaySE
	add sp, #8
	mov r0, #0x18
	pop {r3, r4, r5, pc}
_0207B9CA:
	add r0, r4, #0
	mov r1, #0xa6
	mov r2, #1
	bl sub_0207DAEC
	ldr r0, _0207BA68 ; =0x00000C62
	mov r1, #0x17
	strb r1, [r4, r0]
	ldr r0, _0207BA6C ; =0x000005F2
	bl PlaySE
	add sp, #8
	mov r0, #0x18
	pop {r3, r4, r5, pc}
_0207B9E6:
	ldr r0, _0207BA64 ; =0x00000654
	ldr r0, [r4, r0]
	add r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x16
	bne _0207BA1C
	add r0, r4, #0
	bl sub_0207BB14
	cmp r0, #0
	beq _0207BA1C
	cmp r0, #1
	bne _0207BA1C
	add r0, r4, #0
	mov r1, #0xbb
	mov r2, #1
	bl sub_0207DAEC
	ldr r0, _0207BA68 ; =0x00000C62
	mov r1, #0x17
	strb r1, [r4, r0]
	ldr r0, _0207BA6C ; =0x000005F2
	bl PlaySE
	add sp, #8
	mov r0, #0x18
	pop {r3, r4, r5, pc}
_0207BA1C:
	ldr r0, _0207BA64 ; =0x00000654
	ldr r0, [r4, r0]
	add r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x17
	bne _0207BA52
	add r0, r4, #0
	bl sub_0207BB88
	cmp r0, #0
	beq _0207BA52
	cmp r0, #1
	bne _0207BA52
	add r0, r4, #0
	mov r1, #0xa5
	mov r2, #1
	bl sub_0207DAEC
	ldr r0, _0207BA68 ; =0x00000C62
	mov r1, #0x17
	strb r1, [r4, r0]
	ldr r0, _0207BA6C ; =0x000005F2
	bl PlaySE
	add sp, #8
	mov r0, #0x18
	pop {r3, r4, r5, pc}
_0207BA52:
	ldr r0, _0207BA64 ; =0x00000654
	mov r1, #0
	ldr r0, [r4, r0]
	add r0, #0x27
	strb r1, [r0]
	mov r0, #0x20
	add sp, #8
	pop {r3, r4, r5, pc}
	nop
_0207BA64: .word 0x00000654
_0207BA68: .word 0x00000C62
_0207BA6C: .word 0x000005F2
_0207BA70: .word 0x00000C74
_0207BA74: .word 0x000007C4
	thumb_func_end sub_0207B7E0

	thumb_func_start sub_0207BA78
sub_0207BA78: ; 0x0207BA78
	push {r4, r5, r6, r7}
	add r5, r0, #0
	mov r0, #0
	mov ip, r0
	ldr r0, _0207BB08 ; =0x00000654
	ldr r4, [r5, r0]
_0207BA84:
	mov r0, ip
	add r0, r4, r0
	add r0, #0x30
	ldrb r0, [r0]
	cmp r0, #0
	beq _0207BB02
	mov r0, ip
	add r0, r0, #1
	lsl r0, r0, #0x18
	lsr r3, r0, #0x18
	cmp r3, #6
	bhs _0207BAF4
	mov r0, ip
	add r7, r4, r0
_0207BAA0:
	add r0, r4, r3
	add r0, #0x30
	ldrb r0, [r0]
	cmp r0, #0
	beq _0207BAF4
	add r0, r4, r3
	add r0, #0x30
	ldrb r1, [r0]
	mov r0, #0x30
	ldr r6, _0207BB0C ; =0x000007FC
	mul r0, r1
	add r2, r5, r0
	add r0, r7, #0
	add r0, #0x30
	ldrb r1, [r0]
	mov r0, #0x30
	ldrh r6, [r2, r6]
	mul r0, r1
	add r1, r5, r0
	ldr r0, _0207BB0C ; =0x000007FC
	ldrh r0, [r1, r0]
	cmp r0, r6
	bne _0207BAD4
	mov r0, #1
	pop {r4, r5, r6, r7}
	bx lr
_0207BAD4:
	ldr r0, _0207BB10 ; =0x00000804
	ldrh r0, [r1, r0]
	cmp r0, #0
	beq _0207BAEA
	ldr r1, _0207BB10 ; =0x00000804
	ldrh r1, [r2, r1]
	cmp r0, r1
	bne _0207BAEA
	mov r0, #2
	pop {r4, r5, r6, r7}
	bx lr
_0207BAEA:
	add r0, r3, #1
	lsl r0, r0, #0x18
	lsr r3, r0, #0x18
	cmp r3, #6
	blo _0207BAA0
_0207BAF4:
	mov r0, ip
	add r0, r0, #1
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	mov ip, r0
	cmp r0, #5
	blo _0207BA84
_0207BB02:
	mov r0, #0
	pop {r4, r5, r6, r7}
	bx lr
	.balign 4, 0
_0207BB08: .word 0x00000654
_0207BB0C: .word 0x000007FC
_0207BB10: .word 0x00000804
	thumb_func_end sub_0207BA78

	thumb_func_start sub_0207BB14
sub_0207BB14: ; 0x0207BB14
	push {r4, r5, r6, r7}
	ldr r1, _0207BB80 ; =0x00000654
	mov r3, #0
	ldr r5, [r0, r1]
_0207BB1C:
	add r1, r5, r3
	add r1, #0x30
	ldrb r1, [r1]
	cmp r1, #0
	beq _0207BB7A
	add r1, r3, #1
	lsl r1, r1, #0x18
	lsr r4, r1, #0x18
	cmp r4, #6
	bhs _0207BB70
	add r2, r5, r3
_0207BB32:
	add r1, r5, r4
	add r1, #0x30
	ldrb r1, [r1]
	cmp r1, #0
	beq _0207BB70
	add r1, r2, #0
	add r1, #0x30
	ldrb r6, [r1]
	mov r1, #0x30
	mul r1, r6
	add r6, r0, r1
	ldr r1, _0207BB84 ; =0x000007FC
	ldrh r1, [r6, r1]
	add r6, r5, r4
	add r6, #0x30
	ldrb r7, [r6]
	mov r6, #0x30
	mul r6, r7
	add r7, r0, r6
	ldr r6, _0207BB84 ; =0x000007FC
	ldrh r6, [r7, r6]
	cmp r1, r6
	beq _0207BB66
	mov r0, #1
	pop {r4, r5, r6, r7}
	bx lr
_0207BB66:
	add r1, r4, #1
	lsl r1, r1, #0x18
	lsr r4, r1, #0x18
	cmp r4, #6
	blo _0207BB32
_0207BB70:
	add r1, r3, #1
	lsl r1, r1, #0x18
	lsr r3, r1, #0x18
	cmp r3, #5
	blo _0207BB1C
_0207BB7A:
	mov r0, #0
	pop {r4, r5, r6, r7}
	bx lr
	.balign 4, 0
_0207BB80: .word 0x00000654
_0207BB84: .word 0x000007FC
	thumb_func_end sub_0207BB14

	thumb_func_start sub_0207BB88
sub_0207BB88: ; 0x0207BB88
	push {r4, r5, r6, r7}
	ldr r1, _0207BBF4 ; =0x00000654
	mov r3, #0
	ldr r5, [r0, r1]
_0207BB90:
	add r1, r5, r3
	add r1, #0x30
	ldrb r1, [r1]
	cmp r1, #0
	beq _0207BBEE
	add r1, r3, #1
	lsl r1, r1, #0x18
	lsr r4, r1, #0x18
	cmp r4, #6
	bhs _0207BBE4
	add r2, r5, r3
_0207BBA6:
	add r1, r5, r4
	add r1, #0x30
	ldrb r1, [r1]
	cmp r1, #0
	beq _0207BBE4
	add r1, r2, #0
	add r1, #0x30
	ldrb r6, [r1]
	mov r1, #0x30
	mul r1, r6
	add r6, r0, r1
	ldr r1, _0207BBF8 ; =0x000007FC
	ldrh r1, [r6, r1]
	add r6, r5, r4
	add r6, #0x30
	ldrb r7, [r6]
	mov r6, #0x30
	mul r6, r7
	add r7, r0, r6
	ldr r6, _0207BBF8 ; =0x000007FC
	ldrh r6, [r7, r6]
	cmp r1, r6
	bne _0207BBDA
	mov r0, #1
	pop {r4, r5, r6, r7}
	bx lr
_0207BBDA:
	add r1, r4, #1
	lsl r1, r1, #0x18
	lsr r4, r1, #0x18
	cmp r4, #6
	blo _0207BBA6
_0207BBE4:
	add r1, r3, #1
	lsl r1, r1, #0x18
	lsr r3, r1, #0x18
	cmp r3, #5
	blo _0207BB90
_0207BBEE:
	mov r0, #0
	pop {r4, r5, r6, r7}
	bx lr
	.balign 4, 0
_0207BBF4: .word 0x00000654
_0207BBF8: .word 0x000007FC
	thumb_func_end sub_0207BB88

	thumb_func_start sub_0207BBFC
sub_0207BBFC: ; 0x0207BBFC
	lsl r3, r0, #1
	ldr r0, _0207BC14 ; =0x021012B0
	ldrb r0, [r0, r3]
	lsl r0, r0, #3
	add r0, #0x14
	strh r0, [r1]
	ldr r0, _0207BC18 ; =0x021012B1
	ldrb r0, [r0, r3]
	lsl r0, r0, #3
	add r0, #0x14
	strh r0, [r2]
	bx lr
	.balign 4, 0
_0207BC14: .word 0x021012B0
_0207BC18: .word 0x021012B1
	thumb_func_end sub_0207BBFC

	thumb_func_start sub_0207BC1C
sub_0207BC1C: ; 0x0207BC1C
	push {r3, r4, r5, lr}
	add r4, r1, #0
	ldr r1, _0207BCB4 ; =0x00000824
	add r5, r0, #0
	ldr r1, [r5, r1]
	bl sub_0207E778
	add r2, r0, #0
	mov r0, #1
	mvn r0, r0
	cmp r2, r0
	beq _0207BC3C
	add r0, r0, #1
	cmp r2, r0
	beq _0207BCB0
	b _0207BCAA
_0207BC3C:
	add r0, r5, #0
	mov r1, #0
	bl sub_02079224
	mov r0, #0x85
	lsl r0, r0, #2
	add r0, r5, r0
	mov r1, #1
	bl sub_0200E9BC
	add r0, r5, #0
	bl sub_0207CB20
	bl sub_0207CB90
	ldr r0, _0207BCB8 ; =0x00000654
	ldr r0, [r5, r0]
	add r0, #0x24
	ldrb r1, [r0]
	cmp r1, #2
	beq _0207BC76
	cmp r1, #0x11
	beq _0207BC76
	add r0, r1, #0
	add r0, #0xea
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	cmp r0, #1
	bhi _0207BC82
_0207BC76:
	add r0, r5, #0
	mov r1, #0x23
	mov r2, #1
	bl sub_0207DAC4
	b _0207BC9C
_0207BC82:
	cmp r1, #0x15
	bne _0207BC92
	add r0, r5, #0
	mov r1, #0xb8
	mov r2, #1
	bl sub_0207DAC4
	b _0207BC9C
_0207BC92:
	add r0, r5, #0
	mov r1, #0x1d
	mov r2, #1
	bl sub_0207DAC4
_0207BC9C:
	ldr r0, _0207BCBC ; =0x00000678
	mov r1, #0
	ldr r0, [r5, r0]
	bl sub_0200DD08
	mov r0, #1
	pop {r3, r4, r5, pc}
_0207BCAA:
	add r0, r5, #0
	add r1, r4, #0
	blx r2
_0207BCB0:
	mov r0, #0
	pop {r3, r4, r5, pc}
	.balign 4, 0
_0207BCB4: .word 0x00000824
_0207BCB8: .word 0x00000654
_0207BCBC: .word 0x00000678
	thumb_func_end sub_0207BC1C

	thumb_func_start sub_0207BCC0
sub_0207BCC0: ; 0x0207BCC0
	ldr r2, _0207BCE4 ; =0x021013C4
	mov r3, #0
_0207BCC4:
	lsl r1, r3, #1
	ldrh r1, [r2, r1]
	cmp r0, r1
	bne _0207BCD4
	add r3, #0x10
	lsl r0, r3, #0x18
	lsr r0, r0, #0x18
	bx lr
_0207BCD4:
	add r1, r3, #1
	lsl r1, r1, #0x18
	lsr r3, r1, #0x18
	cmp r3, #0x10
	blo _0207BCC4
	mov r0, #0xff
	bx lr
	nop
_0207BCE4: .word 0x021013C4
	thumb_func_end sub_0207BCC0

	thumb_func_start sub_0207BCE8
sub_0207BCE8: ; 0x0207BCE8
	push {r4, lr}
	add r4, r0, #0
	bl sub_0207BFD8
	cmp r0, #0
	beq _0207BCFE
	cmp r0, #1
	beq _0207BD40
	cmp r0, #2
	beq _0207BD50
	b _0207BD5A
_0207BCFE:
	ldr r0, _0207BD60 ; =0x000005EC
	bl PlaySE
	ldr r0, _0207BD64 ; =0x00000678
	mov r1, #1
	ldr r0, [r4, r0]
	bl sub_0200DD08
	ldr r0, _0207BD68 ; =0x00000C65
	mov r1, #0x30
	ldrb r2, [r4, r0]
	mul r1, r2
	add r3, r4, r1
	mov r1, #0x83
	lsl r1, r1, #4
	ldrh r2, [r3, r1]
	sub r1, r1, #2
	ldrh r1, [r3, r1]
	sub r2, r2, r1
	add r1, r0, #3
	ldrh r1, [r4, r1]
	cmp r2, r1
	bge _0207BD30
	add r0, r0, #3
	strh r2, [r4, r0]
_0207BD30:
	ldr r0, _0207BD6C ; =0x00000C6A
	mov r1, #2
	strh r1, [r4, r0]
	mov r1, #0
	add r0, r0, #2
	strh r1, [r4, r0]
	mov r0, #0x1e
	pop {r4, pc}
_0207BD40:
	ldr r0, _0207BD70 ; =0x000005DC
	bl PlaySE
	ldr r0, _0207BD6C ; =0x00000C6A
	mov r1, #1
	strh r1, [r4, r0]
	mov r0, #0x18
	pop {r4, pc}
_0207BD50:
	ldr r0, _0207BD74 ; =0x000005F2
	bl PlaySE
	mov r0, #0x1e
	pop {r4, pc}
_0207BD5A:
	mov r0, #0x1e
	pop {r4, pc}
	nop
_0207BD60: .word 0x000005EC
_0207BD64: .word 0x00000678
_0207BD68: .word 0x00000C65
_0207BD6C: .word 0x00000C6A
_0207BD70: .word 0x000005DC
_0207BD74: .word 0x000005F2
	thumb_func_end sub_0207BCE8

	thumb_func_start sub_0207BD78
sub_0207BD78: ; 0x0207BD78
	push {r4, r5, r6, lr}
	sub sp, #8
	mov r1, #0xc9
	add r4, r0, #0
	lsl r1, r1, #4
	add r5, r4, r1
	ldr r2, [r5, #0xc]
	cmp r2, #1
	bne _0207BDBA
	bl sub_0207CC24
	cmp r0, #0
	bne _0207BDB4
	ldr r0, _0207BFB0 ; =0x00000C65
	ldrb r0, [r4, r0]
	cmp r0, #7
	beq _0207BDAE
	ldr r0, _0207BFB4 ; =0x00000684
	mov r1, #0
	ldr r0, [r4, r0]
	bl sub_020249D4
	ldr r0, _0207BFB4 ; =0x00000684
	mov r1, #0
	ldr r0, [r4, r0]
	bl sub_020248F0
_0207BDAE:
	add sp, #8
	ldr r0, [r5, #8]
	pop {r4, r5, r6, pc}
_0207BDB4:
	add sp, #8
	mov r0, #0x1e
	pop {r4, r5, r6, pc}
_0207BDBA:
	add r2, r1, #0
	sub r2, #0x26
	ldrh r2, [r4, r2]
	cmp r2, #4
	bhi _0207BE14
	add r2, r2, r2
	add r2, pc
	ldrh r2, [r2, #6]
	lsl r2, r2, #0x10
	asr r2, r2, #0x10
	add pc, r2
_0207BDD0: ; jump table
	.short _0207BDDA - _0207BDD0 - 2 ; case 0
	.short _0207BEB2 - _0207BDD0 - 2 ; case 1
	.short _0207BEDA - _0207BDD0 - 2 ; case 2
	.short _0207BF02 - _0207BDD0 - 2 ; case 3
	.short _0207BF88 - _0207BDD0 - 2 ; case 4
_0207BDDA:
	bl sub_0207AD6C
	add r5, r0, #0
	mov r0, #0
	mvn r0, r0
	cmp r5, r0
	beq _0207BE54
	cmp r5, #6
	bhi _0207BE14
	add r0, r5, r5
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_0207BDF8: ; jump table
	.short _0207BE06 - _0207BDF8 - 2 ; case 0
	.short _0207BE06 - _0207BDF8 - 2 ; case 1
	.short _0207BE06 - _0207BDF8 - 2 ; case 2
	.short _0207BE06 - _0207BDF8 - 2 ; case 3
	.short _0207BE06 - _0207BDF8 - 2 ; case 4
	.short _0207BE06 - _0207BDF8 - 2 ; case 5
	.short _0207BE34 - _0207BDF8 - 2 ; case 6
_0207BE06:
	ldr r0, _0207BFB8 ; =0x00000654
	ldr r0, [r4, r0]
	ldr r0, [r0]
	bl GetPartyCount
	cmp r5, r0
	blo _0207BE16
_0207BE14:
	b _0207BFAA
_0207BE16:
	ldr r0, _0207BFBC ; =0x00000948
	lsl r3, r5, #3
	ldr r6, [r4, r0]
	add r0, r4, #0
	ldrb r2, [r6, r3]
	add r3, r6, r3
	ldrb r3, [r3, #1]
	add r1, r5, #0
	bl sub_0207A910
	add r0, r4, #0
	bl sub_0207BCE8
	add sp, #8
	pop {r4, r5, r6, pc}
_0207BE34:
	mov r0, #0x25
	lsl r0, r0, #6
	bl PlaySE
	add r0, r4, #0
	bl sub_0207FBC8
	add r0, r4, #0
	mov r1, #9
	mov r2, #1
	mov r3, #0
	bl sub_0207CBD0
	add sp, #8
	mov r0, #0x1e
	pop {r4, r5, r6, pc}
_0207BE54:
	ldr r0, _0207BFC0 ; =gMain
	ldr r1, [r0, #0x48]
	mov r0, #1
	tst r0, r1
	beq _0207BE90
	ldr r0, _0207BFB0 ; =0x00000C65
	ldrb r0, [r4, r0]
	cmp r0, #6
	blo _0207BE86
	mov r0, #0x25
	lsl r0, r0, #6
	bl PlaySE
	add r0, r4, #0
	bl sub_0207FBC8
	add r0, r4, #0
	mov r1, #9
	mov r2, #1
	mov r3, #0
	bl sub_0207CBD0
	add sp, #8
	mov r0, #0x1e
	pop {r4, r5, r6, pc}
_0207BE86:
	add r0, r4, #0
	bl sub_0207BCE8
	add sp, #8
	pop {r4, r5, r6, pc}
_0207BE90:
	mov r0, #2
	tst r0, r1
	beq _0207BEAA
	mov r0, #0x25
	lsl r0, r0, #6
	bl PlaySE
	add r0, r4, #0
	bl sub_0207FBC8
	add sp, #8
	mov r0, #1
	pop {r4, r5, r6, pc}
_0207BEAA:
	add r0, r4, #0
	bl sub_0207A8FC
	b _0207BFAA
_0207BEB2:
	mov r0, #0x89
	lsl r0, r0, #2
	add r0, r4, r0
	mov r1, #1
	bl sub_0200E9BC
	ldr r0, _0207BFC4 ; =0x00000678
	mov r1, #0
	ldr r0, [r4, r0]
	bl sub_0200DD08
	add r0, r4, #0
	mov r1, #0x25
	mov r2, #1
	bl sub_0207DAC4
	ldr r0, _0207BFC8 ; =0x00000C6A
	mov r1, #0
	strh r1, [r4, r0]
	b _0207BFAA
_0207BEDA:
	sub r1, #0x2d
	ldrb r1, [r4, r1]
	mov r2, #0
	mvn r2, r2
	lsl r1, r1, #0x1a
	lsr r1, r1, #0x1a
	bl sub_0207C048
	cmp r0, #1
	bne _0207BFAA
	ldr r0, _0207BFCC ; =0x000005EC
	bl PlaySE
	ldr r0, _0207BFC8 ; =0x00000C6A
	mov r1, #3
	strh r1, [r4, r0]
	mov r1, #0
	add r0, r0, #2
	strh r1, [r4, r0]
	b _0207BFAA
_0207BF02:
	sub r1, #0x2b
	ldrb r1, [r4, r1]
	mov r2, #1
	bl sub_0207C048
	cmp r0, #1
	bne _0207BFAA
	ldr r0, _0207BFB8 ; =0x00000654
	ldr r1, _0207BFB0 ; =0x00000C65
	ldr r0, [r4, r0]
	ldrb r1, [r4, r1]
	ldr r0, [r0]
	bl GetPartyMonByIndex
	add r6, r0, #0
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r0, [r4, r0]
	mov r1, #0x41
	bl NewString_ReadMsgData
	add r5, r0, #0
	add r0, r6, #0
	bl sub_02070DB0
	add r2, r0, #0
	ldr r0, _0207BFD0 ; =0x000007C4
	mov r1, #0
	ldr r0, [r4, r0]
	bl BufferBoxMonNickname
	mov r0, #0
	str r0, [sp]
	mov r1, #1
	ldr r2, _0207BFD4 ; =0x00000C6C
	str r1, [sp, #4]
	ldr r0, _0207BFD0 ; =0x000007C4
	ldrh r2, [r4, r2]
	ldr r0, [r4, r0]
	mov r3, #3
	bl BufferIntegerAsString
	ldr r1, _0207BFD0 ; =0x000007C4
	add r2, r5, #0
	ldr r0, [r4, r1]
	add r1, r1, #4
	ldr r1, [r4, r1]
	bl StringExpandPlaceholders
	add r0, r5, #0
	bl String_dtor
	mov r1, #0
	add r0, r4, #0
	mvn r1, r1
	mov r2, #1
	bl sub_0207DAEC
	ldr r0, _0207BFC8 ; =0x00000C6A
	mov r1, #4
	strh r1, [r4, r0]
	mov r1, #0x1e
	sub r0, #8
	strb r1, [r4, r0]
	add sp, #8
	mov r0, #0x18
	pop {r4, r5, r6, pc}
_0207BF88:
	mov r0, #0x89
	lsl r0, r0, #2
	add r0, r4, r0
	mov r1, #1
	bl sub_0200E9BC
	ldr r0, _0207BFC4 ; =0x00000678
	mov r1, #0
	ldr r0, [r4, r0]
	bl sub_0200DD08
	add r0, r4, #0
	bl sub_0207FBC8
	add sp, #8
	mov r0, #1
	pop {r4, r5, r6, pc}
_0207BFAA:
	mov r0, #0x1e
	add sp, #8
	pop {r4, r5, r6, pc}
	.balign 4, 0
_0207BFB0: .word 0x00000C65
_0207BFB4: .word 0x00000684
_0207BFB8: .word 0x00000654
_0207BFBC: .word 0x00000948
_0207BFC0: .word gMain
_0207BFC4: .word 0x00000678
_0207BFC8: .word 0x00000C6A
_0207BFCC: .word 0x000005EC
_0207BFD0: .word 0x000007C4
_0207BFD4: .word 0x00000C6C
	thumb_func_end sub_0207BD78

	thumb_func_start sub_0207BFD8
sub_0207BFD8: ; 0x0207BFD8
	push {r3, r4, r5, lr}
	ldr r2, _0207C038 ; =0x00000C65
	add r4, r0, #0
	ldrb r1, [r4, r2]
	mov r0, #0x30
	ldr r3, _0207C03C ; =0x00000838
	mul r0, r1
	add r0, r4, r0
	ldrb r5, [r0, r3]
	cmp r5, #0
	beq _0207BFF2
	mov r0, #2
	pop {r3, r4, r5, pc}
_0207BFF2:
	sub r2, r2, #2
	ldrb r2, [r4, r2]
	lsl r2, r2, #0x1a
	lsr r2, r2, #0x1a
	cmp r1, r2
	beq _0207C010
	add r1, r3, #0
	sub r1, #0xa
	ldrh r1, [r0, r1]
	cmp r1, #0
	beq _0207C010
	sub r3, #8
	ldrh r0, [r0, r3]
	cmp r1, r0
	bne _0207C032
_0207C010:
	ldr r0, _0207C040 ; =0x00000678
	mov r1, #1
	ldr r0, [r4, r0]
	bl sub_0200DD08
	add r0, r4, #0
	mov r1, #0x78
	mov r2, #1
	bl sub_0207DAEC
	ldr r1, _0207C044 ; =0x00000C6A
	mov r0, #1
	strh r0, [r4, r1]
	mov r2, #0x1e
	sub r1, #8
	strb r2, [r4, r1]
	pop {r3, r4, r5, pc}
_0207C032:
	mov r0, #0
	pop {r3, r4, r5, pc}
	nop
_0207C038: .word 0x00000C65
_0207C03C: .word 0x00000838
_0207C040: .word 0x00000678
_0207C044: .word 0x00000C6A
	thumb_func_end sub_0207BFD8

	thumb_func_start sub_0207C048
sub_0207C048: ; 0x0207C048
	push {r3, r4, r5, r6, r7, lr}
	add r6, r1, #0
	mov r3, #0x30
	add r4, r6, #0
	mul r4, r3
	ldr r3, _0207C0CC ; =0x0000082E
	add r5, r0, #0
	add r7, r5, r3
	lsl r2, r2, #0x10
	ldrh r3, [r7, r4]
	lsr r2, r2, #0x10
	add r2, r3, r2
	ldr r3, _0207C0D0 ; =0x00000C6C
	strh r2, [r7, r4]
	ldrh r2, [r5, r3]
	add r2, r2, #1
	strh r2, [r5, r3]
	bl sub_0207D480
	lsl r1, r6, #2
	add r1, r6, r1
	add r1, r1, #3
	add r0, r5, #4
	lsl r1, r1, #4
	add r0, r0, r1
	mov r1, #0
	bl FillWindowPixelBuffer
	add r0, r5, #0
	add r1, r6, #0
	bl sub_0207D440
	add r0, r5, #0
	add r1, r6, #0
	bl sub_0207D4EC
	ldr r1, _0207C0D4 ; =0x00000C68
	ldrh r0, [r5, r1]
	add r1, r1, #4
	ldrh r1, [r5, r1]
	cmp r0, r1
	beq _0207C0AA
	mov r1, #0x83
	add r2, r5, r4
	lsl r1, r1, #4
	ldrh r0, [r7, r4]
	ldrh r1, [r2, r1]
	cmp r0, r1
	bne _0207C0C6
_0207C0AA:
	ldr r0, _0207C0D8 ; =0x00000654
	add r1, r6, #0
	ldr r0, [r5, r0]
	ldr r0, [r0]
	bl GetPartyMonByIndex
	ldrh r1, [r7, r4]
	add r2, sp, #0
	str r1, [sp]
	mov r1, #0xa3
	bl sub_0206EC40
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_0207C0C6:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
	nop
_0207C0CC: .word 0x0000082E
_0207C0D0: .word 0x00000C6C
_0207C0D4: .word 0x00000C68
_0207C0D8: .word 0x00000654
	thumb_func_end sub_0207C048

	thumb_func_start sub_0207C0DC
sub_0207C0DC: ; 0x0207C0DC
	push {r4, r5, r6, lr}
	mov r1, #0xc9
	add r4, r0, #0
	lsl r1, r1, #4
	add r5, r4, r1
	ldr r1, [r5, #0xc]
	cmp r1, #1
	bne _0207C100
	bl sub_0207CC24
	cmp r0, #0
	bne _0207C0FC
	ldr r0, [r5, #8]
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	pop {r4, r5, r6, pc}
_0207C0FC:
	mov r0, #5
	pop {r4, r5, r6, pc}
_0207C100:
	bl sub_0207AD6C
	add r5, r0, #0
	mov r0, #0
	mvn r0, r0
	cmp r5, r0
	beq _0207C1AE
	cmp r5, #6
	bhi _0207C204
	add r0, r5, r5
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_0207C11E: ; jump table
	.short _0207C12C - _0207C11E - 2 ; case 0
	.short _0207C12C - _0207C11E - 2 ; case 1
	.short _0207C12C - _0207C11E - 2 ; case 2
	.short _0207C12C - _0207C11E - 2 ; case 3
	.short _0207C12C - _0207C11E - 2 ; case 4
	.short _0207C12C - _0207C11E - 2 ; case 5
	.short _0207C176 - _0207C11E - 2 ; case 6
_0207C12C:
	ldr r0, _0207C268 ; =0x00000654
	ldr r0, [r4, r0]
	ldr r0, [r0]
	bl GetPartyCount
	cmp r5, r0
	bhs _0207C204
	ldr r0, _0207C26C ; =0x00000948
	lsl r3, r5, #3
	ldr r6, [r4, r0]
	add r0, r4, #0
	ldrb r2, [r6, r3]
	add r3, r6, r3
	ldrb r3, [r3, #1]
	add r1, r5, #0
	bl sub_0207A910
	ldr r0, _0207C270 ; =0x00000C65
	strb r5, [r4, r0]
	ldrb r1, [r4, r0]
	mov r0, #0x30
	mul r0, r1
	add r1, r4, r0
	ldr r0, _0207C274 ; =0x00000838
	ldrb r0, [r1, r0]
	cmp r0, #0
	bne _0207C16C
	ldr r0, _0207C278 ; =0x000005DC
	bl PlaySE
	mov r0, #0
	pop {r4, r5, r6, pc}
_0207C16C:
	ldr r0, _0207C27C ; =0x000005F2
	bl PlaySE
	mov r0, #5
	pop {r4, r5, r6, pc}
_0207C176:
	ldr r0, _0207C280 ; =0x00000C63
	ldrb r0, [r4, r0]
	lsl r0, r0, #0x18
	lsr r0, r0, #0x1f
	bne _0207C204
	mov r0, #0x25
	lsl r0, r0, #6
	bl PlaySE
	ldr r0, _0207C26C ; =0x00000948
	mov r1, #7
	ldr r3, [r4, r0]
	add r0, r4, #0
	add r2, r3, #0
	add r2, #0x38
	add r3, #0x39
	ldrb r2, [r2]
	ldrb r3, [r3]
	bl sub_0207A910
	add r0, r4, #0
	mov r1, #9
	mov r2, #3
	mov r3, #1
	bl sub_0207CBD0
	mov r0, #5
	pop {r4, r5, r6, pc}
_0207C1AE:
	ldr r0, _0207C284 ; =gMain
	ldr r1, [r0, #0x48]
	mov r0, #1
	tst r0, r1
	beq _0207C204
	ldr r0, _0207C270 ; =0x00000C65
	ldrb r1, [r4, r0]
	cmp r1, #7
	bne _0207C1E2
	sub r0, r0, #2
	ldrb r0, [r4, r0]
	lsl r0, r0, #0x18
	lsr r0, r0, #0x1f
	bne _0207C200
	mov r0, #0x25
	lsl r0, r0, #6
	bl PlaySE
	add r0, r4, #0
	mov r1, #9
	mov r2, #3
	mov r3, #0
	bl sub_0207CBD0
	mov r0, #5
	pop {r4, r5, r6, pc}
_0207C1E2:
	mov r0, #0x30
	mul r0, r1
	add r1, r4, r0
	ldr r0, _0207C274 ; =0x00000838
	ldrb r0, [r1, r0]
	cmp r0, #0
	bne _0207C1FA
	ldr r0, _0207C278 ; =0x000005DC
	bl PlaySE
	mov r0, #0
	pop {r4, r5, r6, pc}
_0207C1FA:
	ldr r0, _0207C27C ; =0x000005F2
	bl PlaySE
_0207C200:
	mov r0, #5
	pop {r4, r5, r6, pc}
_0207C204:
	ldr r0, _0207C284 ; =gMain
	ldr r1, [r0, #0x48]
	mov r0, #2
	tst r0, r1
	beq _0207C260
	ldr r0, _0207C280 ; =0x00000C63
	ldrb r0, [r4, r0]
	lsl r0, r0, #0x18
	lsr r0, r0, #0x1f
	bne _0207C25C
	mov r0, #0x25
	lsl r0, r0, #6
	bl PlaySE
	ldr r0, _0207C270 ; =0x00000C65
	ldrb r0, [r4, r0]
	cmp r0, #7
	bne _0207C236
	add r0, r4, #0
	mov r1, #9
	mov r2, #3
	mov r3, #0
	bl sub_0207CBD0
	b _0207C258
_0207C236:
	ldr r0, _0207C26C ; =0x00000948
	mov r1, #7
	ldr r3, [r4, r0]
	add r0, r4, #0
	add r2, r3, #0
	add r2, #0x38
	add r3, #0x39
	ldrb r2, [r2]
	ldrb r3, [r3]
	bl sub_0207A910
	add r0, r4, #0
	mov r1, #9
	mov r2, #3
	mov r3, #1
	bl sub_0207CBD0
_0207C258:
	mov r0, #5
	pop {r4, r5, r6, pc}
_0207C25C:
	mov r0, #5
	pop {r4, r5, r6, pc}
_0207C260:
	add r0, r4, #0
	bl sub_0207A8FC
	pop {r4, r5, r6, pc}
	.balign 4, 0
_0207C268: .word 0x00000654
_0207C26C: .word 0x00000948
_0207C270: .word 0x00000C65
_0207C274: .word 0x00000838
_0207C278: .word 0x000005DC
_0207C27C: .word 0x000005F2
_0207C280: .word 0x00000C63
_0207C284: .word gMain
	thumb_func_end sub_0207C0DC

	thumb_func_start sub_0207C288
sub_0207C288: ; 0x0207C288
	push {r3, r4, r5, lr}
	add r5, r0, #0
	ldr r0, _0207C3C0 ; =0x00000654
	mov r1, #0
	ldr r0, [r5, r0]
	mov r2, #0xc
	ldrh r0, [r0, #0x28]
	bl sub_02077CE8
	add r4, r0, #0
	ldr r0, _0207C3C0 ; =0x00000654
	ldr r2, [r5, r0]
	ldr r0, _0207C3C4 ; =0x000001D2
	ldrh r1, [r2, #0x28]
	cmp r1, r0
	bne _0207C2D2
	ldr r1, _0207C3C8 ; =0x00000C65
	ldr r0, [r2]
	ldrb r1, [r5, r1]
	bl GetPartyMonByIndex
	bl sub_02071DB4
	cmp r0, #1
	bne _0207C2D2
	ldr r0, _0207C3C0 ; =0x00000654
	mov r1, #1
	ldr r0, [r5, r0]
	strh r1, [r0, #0x3c]
	add r0, r4, #0
	bl FreeToHeap
	add r0, r5, #0
	bl sub_0207CB54
	mov r0, #0x1f
	pop {r3, r4, r5, pc}
_0207C2D2:
	add r0, r4, #0
	mov r1, #0x22
	bl sub_02077DAC
	cmp r0, #0
	bne _0207C2EA
	add r0, r4, #0
	mov r1, #0x23
	bl sub_02077DAC
	cmp r0, #0
	beq _0207C2FC
_0207C2EA:
	add r0, r4, #0
	bl FreeToHeap
	add r0, r5, #0
	mov r1, #0
	bl sub_02082654
	mov r0, #6
	pop {r3, r4, r5, pc}
_0207C2FC:
	add r0, r4, #0
	mov r1, #0x24
	bl sub_02077DAC
	cmp r0, #0
	beq _0207C326
	add r0, r4, #0
	mov r1, #0x25
	bl sub_02077DAC
	cmp r0, #0
	bne _0207C326
	add r0, r4, #0
	bl FreeToHeap
	add r0, r5, #0
	mov r1, #1
	bl sub_02082654
	mov r0, #6
	pop {r3, r4, r5, pc}
_0207C326:
	ldr r0, _0207C3C0 ; =0x00000654
	ldr r2, _0207C3C8 ; =0x00000C65
	ldr r1, [r5, r0]
	mov r0, #0xc
	str r0, [sp]
	ldr r0, [r1]
	ldrh r1, [r1, #0x28]
	ldrb r2, [r5, r2]
	mov r3, #0
	bl sub_020902B8
	cmp r0, #1
	bne _0207C3A0
	ldr r0, _0207C3C0 ; =0x00000654
	mov r2, #1
	ldr r1, [r5, r0]
	mov r3, #0xc
	ldr r0, [r1, #4]
	ldrh r1, [r1, #0x28]
	bl sub_02078434
	add r0, r4, #0
	mov r1, #0x1a
	bl sub_02077DAC
	cmp r0, #0
	beq _0207C398
	ldr r0, _0207C3C0 ; =0x00000654
	ldr r1, _0207C3C8 ; =0x00000C65
	ldr r0, [r5, r0]
	ldrb r1, [r5, r1]
	ldr r0, [r0]
	bl GetPartyMonByIndex
	add r1, r0, #0
	ldr r0, _0207C3C0 ; =0x00000654
	mov r2, #3
	ldr r3, [r5, r0]
	add r0, r3, #0
	add r0, #0x40
	str r0, [sp]
	ldrh r3, [r3, #0x28]
	mov r0, #0
	bl sub_02070E34
	ldr r1, _0207C3C0 ; =0x00000654
	ldr r2, [r5, r1]
	strh r0, [r2, #0x3c]
	ldr r0, [r5, r1]
	mov r2, #8
	add r0, #0x27
	strb r2, [r0]
	add r0, r4, #0
	bl FreeToHeap
	mov r0, #0x20
	pop {r3, r4, r5, pc}
_0207C398:
	add r0, r5, #0
	bl sub_020812E8
	b _0207C3B6
_0207C3A0:
	add r0, r5, #0
	mov r1, #0x66
	mov r2, #1
	bl sub_0207DAEC
	ldr r0, _0207C3C8 ; =0x00000C65
	mov r1, #7
	strb r1, [r5, r0]
	ldr r1, _0207C3CC ; =sub_02081378
	sub r0, #0x11
	str r1, [r5, r0]
_0207C3B6:
	add r0, r4, #0
	bl FreeToHeap
	mov r0, #5
	pop {r3, r4, r5, pc}
	.balign 4, 0
_0207C3C0: .word 0x00000654
_0207C3C4: .word 0x000001D2
_0207C3C8: .word 0x00000C65
_0207C3CC: .word sub_02081378
	thumb_func_end sub_0207C288

	thumb_func_start sub_0207C3D0
sub_0207C3D0: ; 0x0207C3D0
	push {r3, lr}
	ldr r1, _0207C3F8 ; =0x00000C65
	ldrb r2, [r0, r1]
	mov r1, #0x30
	mul r1, r2
	add r1, r0, r1
	ldr r0, _0207C3FC ; =0x00000834
	ldrh r0, [r1, r0]
	cmp r0, #0
	bne _0207C3E8
	mov r0, #0
	pop {r3, pc}
_0207C3E8:
	bl sub_02078068
	cmp r0, #1
	bne _0207C3F4
	mov r0, #2
	pop {r3, pc}
_0207C3F4:
	mov r0, #1
	pop {r3, pc}
	.balign 4, 0
_0207C3F8: .word 0x00000C65
_0207C3FC: .word 0x00000834
	thumb_func_end sub_0207C3D0

	thumb_func_start sub_0207C400
sub_0207C400: ; 0x0207C400
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	ldr r0, _0207C5C4 ; =0x00000654
	ldr r1, _0207C5C8 ; =0x00000C65
	ldr r0, [r5, r0]
	ldrb r1, [r5, r1]
	mov r4, #0
	ldr r0, [r0]
	mvn r4, r4
	bl GetPartyMonByIndex
	ldr r1, _0207C5C4 ; =0x00000654
	add r7, r0, #0
	ldr r1, [r5, r1]
	ldr r6, [r1, #0x1c]
	ldrh r1, [r1, #0x28]
	cmp r1, #0x70
	bne _0207C4B6
	mov r1, #5
	mov r2, #0
	bl GetMonData
	ldr r1, _0207C5CC ; =0x000001E7
	cmp r0, r1
	beq _0207C478
	mov r2, #0x1f
	lsl r2, r2, #6
	ldr r0, [r5, r2]
	add r2, #0xc
	ldr r2, [r5, r2]
	mov r1, #0xbd
	bl ReadMsgDataIntoString
	add r0, r7, #0
	bl sub_02070DB0
	add r2, r0, #0
	ldr r0, _0207C5D0 ; =0x000007C4
	mov r1, #0
	ldr r0, [r5, r0]
	bl BufferBoxMonNickname
	ldr r2, _0207C5C4 ; =0x00000654
	ldr r0, _0207C5D0 ; =0x000007C4
	ldr r2, [r5, r2]
	ldr r0, [r5, r0]
	ldrh r2, [r2, #0x28]
	mov r1, #1
	bl BufferItemNameWithIndefArticle
	ldr r2, _0207C5D0 ; =0x000007C4
	add r1, r2, #4
	ldr r0, [r5, r2]
	add r2, #8
	ldr r1, [r5, r1]
	ldr r2, [r5, r2]
	bl StringExpandPlaceholders
	mov r4, #0xb
	b _0207C4B6
_0207C478:
	cmp r6, #0
	beq _0207C4B6
	ldr r0, [r6, #0x20]
	ldr r0, [r0]
	cmp r0, #2
	bne _0207C4B6
	mov r2, #0x1f
	lsl r2, r2, #6
	ldr r0, [r5, r2]
	add r2, #0xc
	ldr r2, [r5, r2]
	mov r1, #0xbe
	bl ReadMsgDataIntoString
	ldr r2, _0207C5C4 ; =0x00000654
	ldr r0, _0207C5D0 ; =0x000007C4
	ldr r2, [r5, r2]
	ldr r0, [r5, r0]
	ldrh r2, [r2, #0x28]
	mov r1, #0
	bl BufferItemName
	ldr r2, _0207C5D0 ; =0x000007C4
	add r1, r2, #4
	ldr r0, [r5, r2]
	add r2, #8
	ldr r1, [r5, r1]
	ldr r2, [r5, r2]
	bl StringExpandPlaceholders
	mov r4, #0xb
_0207C4B6:
	mov r0, #0
	mvn r0, r0
	cmp r4, r0
	bne _0207C59E
	add r0, r5, #0
	bl sub_0207C3D0
	cmp r0, #0
	beq _0207C4D2
	cmp r0, #1
	beq _0207C53E
	cmp r0, #2
	beq _0207C58C
	b _0207C59E
_0207C4D2:
	ldr r0, _0207C5C4 ; =0x00000654
	ldr r0, [r5, r0]
	ldrh r0, [r0, #0x28]
	bl sub_02078068
	cmp r0, #1
	bne _0207C4EE
	ldr r0, _0207C5C4 ; =0x00000654
	mov r1, #6
	ldr r0, [r5, r0]
	add r0, #0x27
	strb r1, [r0]
	mov r0, #0x20
	pop {r3, r4, r5, r6, r7, pc}
_0207C4EE:
	add r0, r5, #0
	add r1, r7, #0
	add r2, sp, #0
	bl sub_0207C5D4
	mov r2, #0x1f
	lsl r2, r2, #6
	add r4, r0, #0
	ldr r0, [r5, r2]
	add r2, #0xc
	ldr r2, [r5, r2]
	mov r1, #0x6b
	bl ReadMsgDataIntoString
	add r0, r7, #0
	bl sub_02070DB0
	add r2, r0, #0
	ldr r0, _0207C5D0 ; =0x000007C4
	mov r1, #0
	ldr r0, [r5, r0]
	bl BufferBoxMonNickname
	ldr r2, _0207C5C4 ; =0x00000654
	ldr r0, _0207C5D0 ; =0x000007C4
	ldr r2, [r5, r2]
	ldr r0, [r5, r0]
	ldrh r2, [r2, #0x28]
	mov r1, #1
	bl BufferItemName
	ldr r2, _0207C5D0 ; =0x000007C4
	add r1, r2, #4
	ldr r0, [r5, r2]
	add r2, #8
	ldr r1, [r5, r1]
	ldr r2, [r5, r2]
	bl StringExpandPlaceholders
	b _0207C59E
_0207C53E:
	mov r2, #0x1f
	lsl r2, r2, #6
	ldr r0, [r5, r2]
	add r2, #0xc
	ldr r2, [r5, r2]
	mov r1, #0x4f
	bl ReadMsgDataIntoString
	add r0, r7, #0
	bl sub_02070DB0
	add r2, r0, #0
	ldr r0, _0207C5D0 ; =0x000007C4
	mov r1, #0
	ldr r0, [r5, r0]
	bl BufferBoxMonNickname
	ldr r2, _0207C5C8 ; =0x00000C65
	ldr r3, _0207C5D0 ; =0x000007C4
	ldrb r4, [r5, r2]
	mov r2, #0x30
	ldr r0, [r5, r3]
	mul r2, r4
	add r2, r5, r2
	add r3, #0x70
	ldrh r2, [r2, r3]
	mov r1, #1
	bl BufferItemNameWithIndefArticle
	ldr r2, _0207C5D0 ; =0x000007C4
	add r1, r2, #4
	ldr r0, [r5, r2]
	add r2, #8
	ldr r1, [r5, r1]
	ldr r2, [r5, r2]
	bl StringExpandPlaceholders
	mov r4, #9
	b _0207C59E
_0207C58C:
	mov r2, #0x1f
	lsl r2, r2, #6
	ldr r0, [r5, r2]
	add r2, #8
	ldr r2, [r5, r2]
	mov r1, #0x4e
	bl ReadMsgDataIntoString
	mov r4, #0xb
_0207C59E:
	mov r0, #0x89
	lsl r0, r0, #2
	add r0, r5, r0
	mov r1, #1
	mov r2, #0x2a
	mov r3, #0xf
	bl sub_0200E998
	mov r0, #0x89
	lsl r0, r0, #2
	add r0, r5, r0
	mov r1, #0xf
	bl FillWindowPixelBuffer
	add r0, r5, #0
	bl sub_0207DB30
	add r0, r4, #0
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_0207C5C4: .word 0x00000654
_0207C5C8: .word 0x00000C65
_0207C5CC: .word 0x000001E7
_0207C5D0: .word 0x000007C4
	thumb_func_end sub_0207C400

	thumb_func_start sub_0207C5D4
sub_0207C5D4: ; 0x0207C5D4
	push {r3, r4, r5, r6, lr}
	sub sp, #4
	add r5, r0, #0
	ldr r0, _0207C64C ; =0x00000654
	add r6, r1, #0
	ldr r1, [r5, r0]
	add r4, r2, #0
	ldrh r1, [r1, #0x28]
	mov r2, #1
	mov r3, #0xc
	str r1, [sp]
	ldr r1, [r5, r0]
	ldr r0, [r1, #4]
	ldrh r1, [r1, #0x28]
	bl sub_02078434
	add r0, r6, #0
	mov r1, #6
	add r2, sp, #0
	bl sub_0206EC40
	add r0, r6, #0
	bl sub_02071BC8
	add r0, r6, #0
	bl sub_02071CA0
	str r0, [r4]
	ldr r1, _0207C650 ; =0x00000C65
	ldr r0, _0207C64C ; =0x00000654
	ldrb r3, [r5, r1]
	ldr r0, [r5, r0]
	mov r2, #0x30
	add r6, r3, #0
	mul r6, r2
	ldrh r0, [r0, #0x28]
	ldr r3, _0207C654 ; =0x00000834
	add r6, r5, r6
	strh r0, [r6, r3]
	ldrb r1, [r5, r1]
	add r0, r5, #0
	mul r2, r1
	add r2, r5, r2
	ldrh r2, [r2, r3]
	bl sub_0207F004
	ldr r0, [sp]
	cmp r0, #0x70
	bne _0207C646
	mov r0, #0
	ldr r1, [r4]
	mvn r0, r0
	cmp r1, r0
	beq _0207C646
	add sp, #4
	mov r0, #0xc
	pop {r3, r4, r5, r6, pc}
_0207C646:
	mov r0, #0xb
	add sp, #4
	pop {r3, r4, r5, r6, pc}
	.balign 4, 0
_0207C64C: .word 0x00000654
_0207C650: .word 0x00000C65
_0207C654: .word 0x00000834
	thumb_func_end sub_0207C5D4

	thumb_func_start sub_0207C658
sub_0207C658: ; 0x0207C658
	push {r0, r1, r2, r3}
	push {r3, r4, r5, lr}
	add r4, r0, #0
	ldr r0, _0207C6B0 ; =0x00000654
	add r5, r1, #0
	ldr r0, [r4, r0]
	lsl r1, r2, #0x10
	ldr r0, [r0, #4]
	lsr r1, r1, #0x10
	mov r2, #1
	mov r3, #0xc
	bl sub_02078398
	add r0, r5, #0
	mov r1, #6
	add r2, sp, #0x1c
	bl sub_0206EC40
	add r0, r5, #0
	bl sub_02071BC8
	add r0, r5, #0
	bl sub_02071CA0
	ldr r1, _0207C6B4 ; =0x00000C65
	mov r2, #0x30
	ldrb r3, [r4, r1]
	ldr r0, [sp, #0x1c]
	add r5, r3, #0
	mul r5, r2
	ldr r3, _0207C6B8 ; =0x00000834
	add r5, r4, r5
	strh r0, [r5, r3]
	ldrb r1, [r4, r1]
	add r0, r4, #0
	mul r2, r1
	add r2, r4, r2
	ldrh r2, [r2, r3]
	bl sub_0207F004
	pop {r3, r4, r5}
	pop {r3}
	add sp, #0x10
	bx r3
	.balign 4, 0
_0207C6B0: .word 0x00000654
_0207C6B4: .word 0x00000C65
_0207C6B8: .word 0x00000834
	thumb_func_end sub_0207C658

	thumb_func_start sub_0207C6BC
sub_0207C6BC: ; 0x0207C6BC
	push {r4, lr}
	add r4, r0, #0
	ldr r0, _0207C6D8 ; =0x00000C64
	ldrb r0, [r4, r0]
	bl sub_02020094
	cmp r0, #0
	bne _0207C6D4
	add r0, r4, #0
	bl sub_0207C8B4
	pop {r4, pc}
_0207C6D4:
	mov r0, #0xb
	pop {r4, pc}
	.balign 4, 0
_0207C6D8: .word 0x00000C64
	thumb_func_end sub_0207C6BC

	thumb_func_start sub_0207C6DC
sub_0207C6DC: ; 0x0207C6DC
	push {r4, lr}
	add r4, r0, #0
	ldr r0, _0207C708 ; =0x00000C64
	ldrb r0, [r4, r0]
	bl sub_02020094
	cmp r0, #0
	bne _0207C702
	mov r0, #0x89
	lsl r0, r0, #2
	add r0, r4, r0
	mov r1, #1
	bl sub_0200E9BC
	add r0, r4, #0
	bl sub_0207CB54
	mov r0, #0xd
	pop {r4, pc}
_0207C702:
	mov r0, #0xc
	pop {r4, pc}
	nop
_0207C708: .word 0x00000C64
	thumb_func_end sub_0207C6DC

	thumb_func_start sub_0207C70C
sub_0207C70C: ; 0x0207C70C
	push {r4, lr}
	add r4, r0, #0
	bl ov94_021E593C
	cmp r0, #1
	bne _0207C722
	add r0, r4, #0
	bl sub_0207CB6C
	mov r0, #0xb
	pop {r4, pc}
_0207C722:
	mov r0, #0xd
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_0207C70C

	thumb_func_start sub_0207C728
sub_0207C728: ; 0x0207C728
	push {r4, lr}
	add r4, r0, #0
	ldr r0, _0207C748 ; =0x00000C64
	ldrb r0, [r4, r0]
	bl sub_02020094
	cmp r0, #0
	bne _0207C742
	add r0, r4, #0
	bl sub_0207DBCC
	mov r0, #0xa
	pop {r4, pc}
_0207C742:
	mov r0, #9
	pop {r4, pc}
	nop
_0207C748: .word 0x00000C64
	thumb_func_end sub_0207C728

	thumb_func_start sub_0207C74C
sub_0207C74C: ; 0x0207C74C
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #8
	add r5, r0, #0
	ldr r0, _0207C8A0 ; =0x00000C88
	ldr r0, [r5, r0]
	bl sub_020168F4
	cmp r0, #1
	beq _0207C766
	cmp r0, #2
	bne _0207C764
	b _0207C882
_0207C764:
	b _0207C898
_0207C766:
	ldr r0, _0207C8A0 ; =0x00000C88
	ldr r0, [r5, r0]
	bl sub_02016624
	bl sub_0207CB90
	ldr r0, _0207C8A4 ; =0x00000654
	ldr r1, _0207C8A8 ; =0x00000C65
	ldr r0, [r5, r0]
	ldrb r1, [r5, r1]
	ldr r0, [r0]
	bl GetPartyMonByIndex
	str r0, [sp]
	ldr r0, _0207C8A4 ; =0x00000654
	add r2, sp, #4
	ldr r0, [r5, r0]
	ldrh r6, [r0, #0x28]
	ldr r0, _0207C8A8 ; =0x00000C65
	ldrb r1, [r5, r0]
	mov r0, #0x30
	mul r0, r1
	add r1, r5, r0
	ldr r0, _0207C8AC ; =0x00000834
	ldrh r4, [r1, r0]
	ldr r1, [sp]
	add r0, r5, #0
	bl sub_0207C5D4
	add r7, r0, #0
	ldr r0, _0207C8A4 ; =0x00000654
	add r1, r4, #0
	ldr r0, [r5, r0]
	mov r2, #1
	ldr r0, [r0, #4]
	mov r3, #0xc
	bl sub_02078398
	cmp r0, #0
	bne _0207C7D6
	ldr r1, [sp]
	add r0, r5, #0
	add r2, r6, #0
	add r3, r4, #0
	bl sub_0207C658
	mov r2, #0x1f
	lsl r2, r2, #6
	ldr r0, [r5, r2]
	add r2, #8
	ldr r2, [r5, r2]
	mov r1, #0x54
	bl ReadMsgDataIntoString
	mov r7, #0xb
	b _0207C86A
_0207C7D6:
	ldr r0, _0207C8A4 ; =0x00000654
	ldr r0, [r5, r0]
	ldrh r0, [r0, #0x28]
	bl sub_02078068
	cmp r0, #1
	bne _0207C812
	ldr r0, _0207C8A4 ; =0x00000654
	lsl r1, r4, #0x10
	ldr r0, [r5, r0]
	lsr r1, r1, #0x10
	ldr r0, [r0, #4]
	mov r2, #1
	mov r3, #0xc
	bl sub_02078434
	ldr r1, [sp]
	add r0, r5, #0
	add r2, r6, #0
	add r3, r4, #0
	bl sub_0207C658
	ldr r0, _0207C8A4 ; =0x00000654
	mov r1, #6
	ldr r0, [r5, r0]
	add sp, #8
	add r0, #0x27
	strb r1, [r0]
	mov r0, #0x20
	pop {r3, r4, r5, r6, r7, pc}
_0207C812:
	mov r2, #0x1f
	lsl r2, r2, #6
	ldr r0, [r5, r2]
	add r2, #0xc
	ldr r2, [r5, r2]
	mov r1, #0x55
	bl ReadMsgDataIntoString
	ldr r0, _0207C8B0 ; =0x000007C4
	mov r1, #1
	ldr r0, [r5, r0]
	add r2, r4, #0
	bl BufferItemName
	ldr r0, _0207C8B0 ; =0x000007C4
	mov r1, #2
	ldr r0, [r5, r0]
	add r2, r6, #0
	bl BufferItemName
	ldr r2, _0207C8B0 ; =0x000007C4
	add r1, r2, #4
	ldr r0, [r5, r2]
	add r2, #8
	ldr r1, [r5, r1]
	ldr r2, [r5, r2]
	bl StringExpandPlaceholders
	cmp r6, #0x70
	beq _0207C860
	cmp r4, #0x70
	bne _0207C860
	mov r0, #0
	ldr r1, [sp, #4]
	mvn r0, r0
	cmp r1, r0
	beq _0207C860
	mov r7, #0xc
	b _0207C86A
_0207C860:
	cmp r6, #0x70
	bne _0207C86A
	cmp r4, #0x70
	bne _0207C86A
	mov r7, #0xb
_0207C86A:
	mov r0, #0x89
	lsl r0, r0, #2
	add r0, r5, r0
	mov r1, #0xf
	bl FillWindowPixelBuffer
	add r0, r5, #0
	bl sub_0207DB30
	add sp, #8
	add r0, r7, #0
	pop {r3, r4, r5, r6, r7, pc}
_0207C882:
	ldr r0, _0207C8A0 ; =0x00000C88
	ldr r0, [r5, r0]
	bl sub_02016624
	bl sub_0207CB90
	add r0, r5, #0
	bl sub_0207C8B4
	add sp, #8
	pop {r3, r4, r5, r6, r7, pc}
_0207C898:
	mov r0, #0xa
	add sp, #8
	pop {r3, r4, r5, r6, r7, pc}
	nop
_0207C8A0: .word 0x00000C88
_0207C8A4: .word 0x00000654
_0207C8A8: .word 0x00000C65
_0207C8AC: .word 0x00000834
_0207C8B0: .word 0x000007C4
	thumb_func_end sub_0207C74C

	thumb_func_start sub_0207C8B4
sub_0207C8B4: ; 0x0207C8B4
	push {r4, lr}
	add r4, r0, #0
	ldr r0, _0207C900 ; =0x00000654
	ldr r1, [r4, r0]
	add r0, r1, #0
	add r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0xa
	bne _0207C8F4
	mov r0, #0x89
	lsl r0, r0, #2
	add r0, r4, r0
	mov r1, #1
	bl sub_0200E9BC
	add r0, r4, #0
	mov r1, #0x1d
	mov r2, #1
	bl sub_0207DAC4
	ldr r0, _0207C904 ; =0x00000678
	mov r1, #0
	ldr r0, [r4, r0]
	bl sub_0200DD08
	ldr r0, _0207C900 ; =0x00000654
	mov r1, #0
	ldr r0, [r4, r0]
	add r0, #0x24
	strb r1, [r0]
	mov r0, #1
	pop {r4, pc}
_0207C8F4:
	mov r0, #0xa
	add r1, #0x27
	strb r0, [r1]
	mov r0, #0x20
	pop {r4, pc}
	nop
_0207C900: .word 0x00000654
_0207C904: .word 0x00000678
	thumb_func_end sub_0207C8B4

	thumb_func_start sub_0207C908
sub_0207C908: ; 0x0207C908
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #8
	add r5, r0, #0
	ldr r0, _0207CA20 ; =0x00000654
	ldr r1, _0207CA24 ; =0x00000C65
	ldr r0, [r5, r0]
	ldrb r1, [r5, r1]
	ldr r0, [r0]
	bl GetPartyMonByIndex
	add r7, r0, #0
	ldr r0, _0207CA20 ; =0x00000654
	add r2, sp, #4
	ldr r0, [r5, r0]
	ldrh r0, [r0, #0x28]
	str r0, [sp]
	ldr r0, _0207CA24 ; =0x00000C65
	ldrb r1, [r5, r0]
	mov r0, #0x30
	mul r0, r1
	add r1, r5, r0
	ldr r0, _0207CA28 ; =0x00000834
	ldrh r4, [r1, r0]
	add r0, r5, #0
	add r1, r7, #0
	bl sub_0207C5D4
	add r6, r0, #0
	cmp r4, #0x70
	bne _0207C950
	cmp r6, #0xb
	bne _0207C950
	ldr r0, [sp, #4]
	cmp r0, #0
	bne _0207C950
	mov r6, #0xc
_0207C950:
	cmp r4, #0
	bne _0207C998
	mov r2, #0x1f
	lsl r2, r2, #6
	ldr r0, [r5, r2]
	add r2, #0xc
	ldr r2, [r5, r2]
	mov r1, #0x6b
	bl ReadMsgDataIntoString
	add r0, r7, #0
	bl sub_02070DB0
	add r2, r0, #0
	ldr r0, _0207CA2C ; =0x000007C4
	mov r1, #0
	ldr r0, [r5, r0]
	bl BufferBoxMonNickname
	ldr r2, _0207CA20 ; =0x00000654
	ldr r0, _0207CA2C ; =0x000007C4
	ldr r2, [r5, r2]
	ldr r0, [r5, r0]
	ldrh r2, [r2, #0x28]
	mov r1, #1
	bl BufferItemName
	ldr r2, _0207CA2C ; =0x000007C4
	add r1, r2, #4
	ldr r0, [r5, r2]
	add r2, #8
	ldr r1, [r5, r1]
	ldr r2, [r5, r2]
	bl StringExpandPlaceholders
	b _0207C9E2
_0207C998:
	ldr r0, _0207CA20 ; =0x00000654
	lsl r1, r4, #0x10
	ldr r0, [r5, r0]
	lsr r1, r1, #0x10
	ldr r0, [r0, #4]
	mov r2, #1
	mov r3, #0xc
	bl sub_02078398
	mov r2, #0x1f
	lsl r2, r2, #6
	ldr r0, [r5, r2]
	add r2, #0xc
	ldr r2, [r5, r2]
	mov r1, #0x55
	bl ReadMsgDataIntoString
	ldr r0, _0207CA2C ; =0x000007C4
	mov r1, #1
	ldr r0, [r5, r0]
	add r2, r4, #0
	bl BufferItemName
	ldr r0, _0207CA2C ; =0x000007C4
	ldr r2, [sp]
	ldr r0, [r5, r0]
	mov r1, #2
	bl BufferItemName
	ldr r2, _0207CA2C ; =0x000007C4
	add r1, r2, #4
	ldr r0, [r5, r2]
	add r2, #8
	ldr r1, [r5, r1]
	ldr r2, [r5, r2]
	bl StringExpandPlaceholders
_0207C9E2:
	mov r0, #0x89
	lsl r0, r0, #2
	add r0, r5, r0
	mov r1, #1
	mov r2, #0x2a
	mov r3, #0xf
	bl sub_0200E998
	mov r0, #0x89
	lsl r0, r0, #2
	add r0, r5, r0
	mov r1, #0xf
	bl FillWindowPixelBuffer
	add r0, r5, #0
	bl sub_0207DB30
	ldr r0, _0207CA20 ; =0x00000654
	ldr r1, [r5, r0]
	add r0, r1, #0
	add r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0xc
	bne _0207CA18
	mov r0, #0xa
	add r1, #0x24
	strb r0, [r1]
_0207CA18:
	add r0, r6, #0
	add sp, #8
	pop {r3, r4, r5, r6, r7, pc}
	nop
_0207CA20: .word 0x00000654
_0207CA24: .word 0x00000C65
_0207CA28: .word 0x00000834
_0207CA2C: .word 0x000007C4
	thumb_func_end sub_0207C908

	thumb_func_start sub_0207CA30
sub_0207CA30: ; 0x0207CA30
	push {r4, lr}
	add r4, r0, #0
	ldr r0, _0207CA80 ; =0x00000C65
	ldrb r1, [r4, r0]
	mov r0, #0x30
	mul r0, r1
	add r1, r4, r0
	ldr r0, _0207CA84 ; =0x0000083A
	ldrh r0, [r1, r0]
	cmp r0, #0
	bne _0207CA54
	ldr r0, _0207CA88 ; =0x00000654
	mov r1, #0
	ldr r0, [r4, r0]
	add r0, #0x27
	strb r1, [r0]
	mov r0, #0x20
	pop {r4, pc}
_0207CA54:
	ldr r0, _0207CA8C ; =0x00000678
	mov r1, #1
	ldr r0, [r4, r0]
	bl sub_0200DD08
	add r0, r4, #0
	mov r1, #0xb3
	mov r2, #1
	bl sub_0207DAEC
	ldr r0, _0207CA90 ; =sub_0207FAA8
	ldr r1, _0207CA94 ; =0x00000C58
	ldr r2, _0207CA98 ; =sub_0207FAD4
	str r0, [r4, r1]
	add r0, r1, #4
	str r2, [r4, r0]
	mov r0, #0x1a
	add r1, #0xa
	strb r0, [r4, r1]
	mov r0, #0x18
	pop {r4, pc}
	nop
_0207CA80: .word 0x00000C65
_0207CA84: .word 0x0000083A
_0207CA88: .word 0x00000654
_0207CA8C: .word 0x00000678
_0207CA90: .word sub_0207FAA8
_0207CA94: .word 0x00000C58
_0207CA98: .word sub_0207FAD4
	thumb_func_end sub_0207CA30

	thumb_func_start sub_0207CA9C
sub_0207CA9C: ; 0x0207CA9C
	mov r0, #0x14
	bx lr
	thumb_func_end sub_0207CA9C

	thumb_func_start sub_0207CAA0
sub_0207CAA0: ; 0x0207CAA0
	mov r0, #0x15
	bx lr
	thumb_func_end sub_0207CAA0

	thumb_func_start sub_0207CAA4
sub_0207CAA4: ; 0x0207CAA4
	mov r0, #0x13
	bx lr
	thumb_func_end sub_0207CAA4

	thumb_func_start sub_0207CAA8
sub_0207CAA8: ; 0x0207CAA8
	mov r0, #0x12
	bx lr
	thumb_func_end sub_0207CAA8

	thumb_func_start sub_0207CAAC
sub_0207CAAC: ; 0x0207CAAC
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x10
	add r4, r0, #0
	add r5, r1, #0
	add r6, r2, #0
	mov r0, #0x15
	mov r1, #0x16
	add r2, r4, #0
	add r7, r3, #0
	bl AllocAndReadWholeNarcMemberByIdPair
	add r1, sp, #0xc
	str r0, [sp, #8]
	bl NNS_G2dGetUnpackedScreenData
	ldr r0, [sp, #0xc]
	mov r4, #0
	str r0, [sp, #4]
	add r0, #0xc
	str r0, [sp, #4]
	str r0, [sp]
_0207CAD6:
	ldr r1, [sp]
	add r0, r5, #0
	mov r2, #0x20
	bl memcpy
	add r1, r4, #6
	lsl r2, r1, #6
	ldr r1, [sp, #4]
	add r0, r6, #0
	add r1, r1, r2
	mov r2, #0x20
	bl memcpy
	add r1, r4, #0
	add r1, #0xc
	lsl r2, r1, #6
	ldr r1, [sp, #4]
	add r0, r7, #0
	add r1, r1, r2
	mov r2, #0x20
	bl memcpy
	ldr r0, [sp]
	add r4, r4, #1
	add r0, #0x40
	str r0, [sp]
	add r5, #0x20
	add r6, #0x20
	add r7, #0x20
	cmp r4, #6
	blo _0207CAD6
	ldr r0, [sp, #8]
	bl FreeToHeap
	add sp, #0x10
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_0207CAAC

	thumb_func_start sub_0207CB20
sub_0207CB20: ; 0x0207CB20
	push {r4, lr}
	ldr r1, _0207CB38 ; =0x00000824
	add r4, r0, #0
	ldr r1, [r4, r1]
	bl sub_0207E618
	mov r0, #0x82
	lsl r0, r0, #4
	ldr r0, [r4, r0]
	bl ListMenuItems_dtor
	pop {r4, pc}
	.balign 4, 0
_0207CB38: .word 0x00000824
	thumb_func_end sub_0207CB20

	thumb_func_start sub_0207CB3C
sub_0207CB3C: ; 0x0207CB3C
	push {r3, lr}
	ldr r2, _0207CB50 ; =0x00000654
	ldr r0, [r0, r2]
	ldr r0, [r0, #0x20]
	cmp r0, #0
	beq _0207CB4C
	bl sub_02018410
_0207CB4C:
	pop {r3, pc}
	nop
_0207CB50: .word 0x00000654
	thumb_func_end sub_0207CB3C

	thumb_func_start sub_0207CB54
sub_0207CB54: ; 0x0207CB54
	push {r4, lr}
	add r4, r0, #0
	ldr r0, _0207CB68 ; =SDK_OVERLAY_OVY_94_ID
	mov r1, #2
	bl HandleLoadOverlay
	add r0, r4, #0
	bl ov94_021E5900
	pop {r4, pc}
	.balign 4, 0
_0207CB68: .word SDK_OVERLAY_OVY_94_ID
	thumb_func_end sub_0207CB54

	thumb_func_start sub_0207CB6C
sub_0207CB6C: ; 0x0207CB6C
	ldr r3, _0207CB74 ; =UnloadOverlayByID
	ldr r0, _0207CB78 ; =SDK_OVERLAY_OVY_94_ID
	bx r3
	nop
_0207CB74: .word UnloadOverlayByID
_0207CB78: .word SDK_OVERLAY_OVY_94_ID
	thumb_func_end sub_0207CB6C

	thumb_func_start sub_0207CB7C
sub_0207CB7C: ; 0x0207CB7C
	ldr r3, _0207CB88 ; =sub_020CF178
	ldr r0, _0207CB8C ; =0x04000050
	mov r1, #0x1e
	mov r2, #8
	bx r3
	nop
_0207CB88: .word sub_020CF178
_0207CB8C: .word 0x04000050
	thumb_func_end sub_0207CB7C

	thumb_func_start sub_0207CB90
sub_0207CB90: ; 0x0207CB90
	ldr r0, _0207CB98 ; =0x04000050
	mov r1, #0
	strh r1, [r0]
	bx lr
	.balign 4, 0
_0207CB98: .word 0x04000050
	thumb_func_end sub_0207CB90

	thumb_func_start sub_0207CB9C
sub_0207CB9C: ; 0x0207CB9C
	push {r3, r4}
	mov r3, #0xc9
	lsl r3, r3, #4
	add r0, r0, r3
	ldrb r4, [r0, #6]
	mov r3, #0xf
	bic r4, r3
	strb r4, [r0, #6]
	ldrb r4, [r0, #6]
	mov r3, #0xf0
	bic r4, r3
	strb r4, [r0, #6]
	add r3, r1, #4
	str r3, [r0]
	ldrb r3, [r1, #2]
	strb r3, [r0, #4]
	ldrb r3, [r1, #1]
	strb r3, [r0, #5]
	ldrb r1, [r1, #3]
	strb r1, [r0, #7]
	str r2, [r0, #8]
	mov r1, #1
	str r1, [r0, #0xc]
	pop {r3, r4}
	bx lr
	.balign 4, 0
	thumb_func_end sub_0207CB9C

	thumb_func_start sub_0207CBD0
sub_0207CBD0: ; 0x0207CBD0
	push {r3, r4, r5, r6, r7, lr}
	add r7, r2, #0
	mov r2, #0xc9
	lsl r2, r2, #4
	add r5, r0, r2
	str r3, [sp]
	ldrb r3, [r5, #6]
	mov r2, #0xf
	lsl r4, r1, #2
	bic r3, r2
	strb r3, [r5, #6]
	ldrb r3, [r5, #6]
	mov r2, #0xf0
	bic r3, r2
	strb r3, [r5, #6]
	mov r2, #0
	str r2, [r5]
	strb r1, [r5, #5]
	mov r1, #0x66
	lsl r1, r1, #4
	add r6, r0, r1
	ldr r0, [r6, r4]
	bl sub_020249A8
	mov r1, #2
	and r0, r1
	strb r0, [r5, #7]
	ldr r0, [sp]
	cmp r0, #1
	bne _0207CC1C
	ldr r0, [r6, r4]
	mov r1, #0
	bl sub_020249D4
	ldrb r1, [r5, #7]
	ldr r0, [r6, r4]
	bl sub_020248F0
_0207CC1C:
	str r7, [r5, #8]
	mov r0, #1
	str r0, [r5, #0xc]
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_0207CBD0

	thumb_func_start sub_0207CC24
sub_0207CC24: ; 0x0207CC24
	push {r3, r4, r5, lr}
	sub sp, #8
	mov r1, #0xc9
	add r5, r0, #0
	lsl r1, r1, #4
	add r4, r5, r1
	ldrb r2, [r4, #6]
	lsl r1, r2, #0x18
	lsr r1, r1, #0x1c
	beq _0207CC44
	cmp r1, #1
	beq _0207CCB6
	cmp r1, #2
	bne _0207CC42
	b _0207CD54
_0207CC42:
	b _0207CD7E
_0207CC44:
	ldr r1, [r4]
	cmp r1, #0
	beq _0207CC76
	mov r1, #2
	str r1, [sp]
	ldrb r1, [r4, #4]
	ldrb r2, [r4, #5]
	ldrb r3, [r4, #7]
	bl sub_0207E3A8
	ldrb r0, [r4, #7]
	str r0, [sp]
	mov r0, #0
	str r0, [sp, #4]
	ldrb r2, [r4, #4]
	ldrb r3, [r4, #5]
	ldr r1, [r4]
	add r0, r5, #0
	bl sub_0207E28C
	ldr r0, [r5]
	mov r1, #0
	bl BgCommitTilemapBufferToVram
	b _0207CC9A
_0207CC76:
	ldrb r0, [r4, #5]
	lsl r0, r0, #2
	add r1, r5, r0
	mov r0, #0x66
	lsl r0, r0, #4
	ldr r0, [r1, r0]
	mov r1, #0
	bl sub_020249D4
	ldrb r0, [r4, #5]
	lsl r0, r0, #2
	add r1, r5, r0
	mov r0, #0x66
	lsl r0, r0, #4
	ldr r0, [r1, r0]
	ldrb r1, [r4, #7]
	bl sub_020248F0
_0207CC9A:
	ldrb r2, [r4, #6]
	mov r1, #0xf0
	add r0, r2, #0
	bic r0, r1
	lsl r1, r2, #0x18
	lsr r1, r1, #0x1c
	add r1, r1, #1
	lsl r1, r1, #0x18
	lsr r1, r1, #0x18
	lsl r1, r1, #0x1c
	lsr r1, r1, #0x18
	orr r0, r1
	strb r0, [r4, #6]
	b _0207CD7E
_0207CCB6:
	add r1, r2, #0
	lsl r2, r2, #0x1c
	lsr r2, r2, #0x1c
	add r2, r2, #1
	mov r3, #0xf
	lsl r2, r2, #0x18
	bic r1, r3
	lsr r3, r2, #0x18
	mov r2, #0xf
	and r2, r3
	orr r1, r2
	strb r1, [r4, #6]
	ldrb r1, [r4, #6]
	lsl r1, r1, #0x1c
	lsr r1, r1, #0x1c
	cmp r1, #2
	bne _0207CD7E
	ldr r1, [r4]
	cmp r1, #0
	beq _0207CD0A
	mov r1, #1
	str r1, [sp]
	ldrb r1, [r4, #4]
	ldrb r2, [r4, #5]
	ldrb r3, [r4, #7]
	bl sub_0207E3A8
	ldrb r0, [r4, #7]
	str r0, [sp]
	mov r0, #1
	str r0, [sp, #4]
	ldrb r2, [r4, #4]
	ldrb r3, [r4, #5]
	ldr r1, [r4]
	add r0, r5, #0
	bl sub_0207E28C
	ldr r0, [r5]
	mov r1, #0
	bl BgCommitTilemapBufferToVram
	b _0207CD30
_0207CD0A:
	ldrb r0, [r4, #5]
	lsl r0, r0, #2
	add r1, r5, r0
	mov r0, #0x66
	lsl r0, r0, #4
	ldr r0, [r1, r0]
	mov r1, #0
	bl sub_020249D4
	ldrb r0, [r4, #5]
	lsl r0, r0, #2
	add r1, r5, r0
	mov r0, #0x66
	lsl r0, r0, #4
	ldr r0, [r1, r0]
	ldrb r1, [r4, #7]
	add r1, r1, #1
	bl sub_020248F0
_0207CD30:
	ldrb r1, [r4, #6]
	mov r0, #0xf
	bic r1, r0
	strb r1, [r4, #6]
	ldrb r2, [r4, #6]
	mov r1, #0xf0
	add r0, r2, #0
	bic r0, r1
	lsl r1, r2, #0x18
	lsr r1, r1, #0x1c
	add r1, r1, #1
	lsl r1, r1, #0x18
	lsr r1, r1, #0x18
	lsl r1, r1, #0x1c
	lsr r1, r1, #0x18
	orr r0, r1
	strb r0, [r4, #6]
	b _0207CD7E
_0207CD54:
	mov r1, #0xf
	add r0, r2, #0
	bic r0, r1
	lsl r1, r2, #0x1c
	lsr r1, r1, #0x1c
	add r1, r1, #1
	lsl r1, r1, #0x18
	lsr r2, r1, #0x18
	mov r1, #0xf
	and r1, r2
	orr r0, r1
	strb r0, [r4, #6]
	ldrb r0, [r4, #6]
	lsl r0, r0, #0x1c
	lsr r0, r0, #0x1c
	cmp r0, #2
	bne _0207CD7E
	mov r0, #0
	add sp, #8
	str r0, [r4, #0xc]
	pop {r3, r4, r5, pc}
_0207CD7E:
	mov r0, #1
	add sp, #8
	pop {r3, r4, r5, pc}
	thumb_func_end sub_0207CC24

	thumb_func_start sub_0207CD84
sub_0207CD84: ; 0x0207CD84
	push {r4, r5, r6, lr}
	add r5, r1, #0
	add r4, r2, #0
	add r6, r0, #0
	bl AddWindow
	add r1, r5, #0
	add r2, r4, #0
	add r0, r6, #0
	add r1, #0x10
	add r2, #8
	bl AddWindow
	add r1, r5, #0
	add r2, r4, #0
	add r0, r6, #0
	add r1, #0x20
	add r2, #0x10
	bl AddWindow
	add r1, r5, #0
	add r2, r4, #0
	add r0, r6, #0
	add r1, #0x30
	add r2, #0x18
	bl AddWindow
	add r5, #0x40
	add r4, #0x20
	add r0, r6, #0
	add r1, r5, #0
	add r2, r4, #0
	bl AddWindow
	pop {r4, r5, r6, pc}
	.balign 4, 0
	thumb_func_end sub_0207CD84

	thumb_func_start sub_0207CDCC
sub_0207CDCC: ; 0x0207CDCC
	push {r3, r4, r5, lr}
	sub sp, #8
	add r5, r0, #0
	ldr r4, _0207CF38 ; =0x02101734
	ldr r0, [r5]
	add r1, r5, #4
	add r2, r4, #0
	bl sub_0207CD84
	add r1, r5, #0
	ldr r0, [r5]
	ldr r2, _0207CF3C ; =0x02101784
	add r1, #0xa4
	bl sub_0207CD84
	mov r1, #0x51
	lsl r1, r1, #2
	ldr r0, [r5]
	ldr r2, _0207CF40 ; =0x021017D4
	add r1, r5, r1
	bl sub_0207CD84
	ldr r0, _0207CF44 ; =0x00000654
	ldr r0, [r5, r0]
	add r0, #0x25
	ldrb r0, [r0]
	cmp r0, #2
	ldr r0, [r5]
	bne _0207CE34
	add r1, r5, #0
	add r2, r4, #0
	add r1, #0x54
	add r2, #0xf0
	bl sub_0207CD84
	mov r2, #0x46
	add r1, r5, #0
	lsl r2, r2, #2
	ldr r0, [r5]
	add r1, #0xf4
	add r2, r4, r2
	bl sub_0207CD84
	mov r2, #0x65
	lsl r2, r2, #2
	add r1, r5, r2
	sub r2, #0x54
	ldr r0, [r5]
	add r2, r4, r2
	bl sub_0207CD84
	b _0207CE5E
_0207CE34:
	add r1, r5, #0
	add r2, r4, #0
	add r1, #0x54
	add r2, #0x28
	bl sub_0207CD84
	add r1, r5, #0
	add r2, r4, #0
	ldr r0, [r5]
	add r1, #0xf4
	add r2, #0x78
	bl sub_0207CD84
	mov r1, #0x65
	lsl r1, r1, #2
	add r2, r4, #0
	ldr r0, [r5]
	add r1, r5, r1
	add r2, #0xc8
	bl sub_0207CD84
_0207CE5E:
	mov r2, #0x95
	lsl r2, r2, #2
	add r1, r5, r2
	sub r2, #0xec
	ldr r0, [r5]
	add r2, r4, r2
	bl AddWindow
	mov r2, #0x99
	lsl r2, r2, #2
	add r1, r5, r2
	sub r2, #0xf4
	ldr r0, [r5]
	add r2, r4, r2
	bl AddWindow
	mov r2, #0x9d
	lsl r2, r2, #2
	add r1, r5, r2
	sub r2, #0xfc
	ldr r0, [r5]
	add r2, r4, r2
	bl AddWindow
	ldr r0, _0207CF44 ; =0x00000654
	ldr r0, [r5, r0]
	add r0, #0x24
	ldrb r0, [r0]
	cmp r0, #2
	beq _0207CEA8
	cmp r0, #0x11
	beq _0207CEA8
	add r0, #0xea
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	cmp r0, #1
	bhi _0207CED0
_0207CEA8:
	ldr r1, _0207CF48 ; =0x021015EC
	add r0, sp, #0
	ldrh r3, [r1, #0x30]
	add r2, sp, #0
	strh r3, [r0]
	ldrh r3, [r1, #0x32]
	strh r3, [r0, #2]
	ldrh r3, [r1, #0x34]
	ldrh r1, [r1, #0x36]
	strh r3, [r0, #4]
	strh r1, [r0, #6]
	mov r1, #0x16
	strb r1, [r0, #2]
	mov r1, #0x7d
	lsl r1, r1, #2
	ldr r0, [r5]
	add r1, r5, r1
	bl AddWindow
	b _0207CEDE
_0207CED0:
	mov r1, #0x7d
	lsl r1, r1, #2
	ldr r0, [r5]
	ldr r2, _0207CF4C ; =0x0210161C
	add r1, r5, r1
	bl AddWindow
_0207CEDE:
	mov r1, #0x79
	lsl r1, r1, #2
	ldr r0, [r5]
	ldr r2, _0207CF50 ; =0x02101624
	add r1, r5, r1
	bl AddWindow
	mov r1, #0x81
	lsl r1, r1, #2
	ldr r0, [r5]
	ldr r2, _0207CF54 ; =0x0210162C
	add r1, r5, r1
	bl AddWindow
	mov r1, #0x85
	lsl r1, r1, #2
	ldr r0, [r5]
	ldr r2, _0207CF58 ; =0x02101634
	add r1, r5, r1
	bl AddWindow
	mov r1, #0x89
	lsl r1, r1, #2
	ldr r0, [r5]
	ldr r2, _0207CF5C ; =0x0210163C
	add r1, r5, r1
	bl AddWindow
	mov r1, #0x8d
	lsl r1, r1, #2
	ldr r0, [r5]
	ldr r2, _0207CF60 ; =0x02101644
	add r1, r5, r1
	bl AddWindow
	mov r1, #0x91
	lsl r1, r1, #2
	ldr r0, [r5]
	ldr r2, _0207CF64 ; =0x0210164C
	add r1, r5, r1
	bl AddWindow
	add sp, #8
	pop {r3, r4, r5, pc}
	nop
_0207CF38: .word 0x02101734
_0207CF3C: .word 0x02101784
_0207CF40: .word 0x021017D4
_0207CF44: .word 0x00000654
_0207CF48: .word 0x021015EC
_0207CF4C: .word 0x0210161C
_0207CF50: .word 0x02101624
_0207CF54: .word 0x0210162C
_0207CF58: .word 0x02101634
_0207CF5C: .word 0x0210163C
_0207CF60: .word 0x02101644
_0207CF64: .word 0x0210164C
	thumb_func_end sub_0207CDCC

	thumb_func_start sub_0207CF68
sub_0207CF68: ; 0x0207CF68
	push {r4, r5, r6, lr}
	add r6, r0, #0
	mov r5, #0
	add r4, r6, #4
_0207CF70:
	lsl r0, r5, #4
	add r0, r4, r0
	bl RemoveWindow
	add r0, r5, #1
	lsl r0, r0, #0x10
	lsr r5, r0, #0x10
	cmp r5, #0x28
	blo _0207CF70
	mov r4, #0xa1
	lsl r4, r4, #2
	add r0, r6, r4
	bl sub_0201D3F0
	cmp r0, #1
	bne _0207CF96
	add r0, r6, r4
	bl RemoveWindow
_0207CF96:
	pop {r4, r5, r6, pc}
	thumb_func_end sub_0207CF68

	thumb_func_start sub_0207CF98
sub_0207CF98: ; 0x0207CF98
	push {r4, lr}
	mov r2, #0x1f
	add r4, r0, #0
	lsl r2, r2, #6
	ldr r0, [r4, r2]
	add r2, #0x10
	ldr r2, [r4, r2]
	mov r1, #0x80
	bl ReadMsgDataIntoString
	mov r2, #0x1f
	lsl r2, r2, #6
	ldr r0, [r4, r2]
	add r2, #0x14
	ldr r2, [r4, r2]
	mov r1, #0x81
	bl ReadMsgDataIntoString
	mov r2, #0x1f
	lsl r2, r2, #6
	ldr r0, [r4, r2]
	add r2, #0x18
	ldr r2, [r4, r2]
	mov r1, #0x82
	bl ReadMsgDataIntoString
	mov r2, #0x1f
	lsl r2, r2, #6
	ldr r0, [r4, r2]
	add r2, #0x1c
	ldr r2, [r4, r2]
	mov r1, #0x8f
	bl ReadMsgDataIntoString
	mov r2, #0x1f
	lsl r2, r2, #6
	ldr r0, [r4, r2]
	add r2, #0x20
	ldr r2, [r4, r2]
	mov r1, #0x90
	bl ReadMsgDataIntoString
	mov r2, #0x1f
	lsl r2, r2, #6
	ldr r0, [r4, r2]
	add r2, #0x24
	ldr r2, [r4, r2]
	mov r1, #0x83
	bl ReadMsgDataIntoString
	mov r2, #0x1f
	lsl r2, r2, #6
	ldr r0, [r4, r2]
	add r2, #0x28
	ldr r2, [r4, r2]
	mov r1, #0x84
	bl ReadMsgDataIntoString
	mov r2, #0x1f
	lsl r2, r2, #6
	ldr r0, [r4, r2]
	add r2, #0x2c
	ldr r2, [r4, r2]
	mov r1, #0x85
	bl ReadMsgDataIntoString
	mov r2, #0x1f
	lsl r2, r2, #6
	ldr r0, [r4, r2]
	add r2, #0x30
	ldr r2, [r4, r2]
	mov r1, #0x86
	bl ReadMsgDataIntoString
	mov r2, #0x1f
	lsl r2, r2, #6
	ldr r0, [r4, r2]
	add r2, #0x34
	ldr r2, [r4, r2]
	mov r1, #0x87
	bl ReadMsgDataIntoString
	mov r2, #0x1f
	lsl r2, r2, #6
	ldr r0, [r4, r2]
	add r2, #0x38
	ldr r2, [r4, r2]
	mov r1, #0x88
	bl ReadMsgDataIntoString
	mov r2, #0x1f
	lsl r2, r2, #6
	ldr r0, [r4, r2]
	add r2, #0x3c
	ldr r2, [r4, r2]
	mov r1, #0x89
	bl ReadMsgDataIntoString
	mov r2, #0x1f
	lsl r2, r2, #6
	ldr r0, [r4, r2]
	add r2, #0x40
	ldr r2, [r4, r2]
	mov r1, #0x8a
	bl ReadMsgDataIntoString
	mov r2, #0x1f
	lsl r2, r2, #6
	ldr r0, [r4, r2]
	add r2, #0x44
	ldr r2, [r4, r2]
	mov r1, #0x89
	bl ReadMsgDataIntoString
	mov r2, #0x1f
	lsl r2, r2, #6
	ldr r0, [r4, r2]
	add r2, #0x48
	ldr r2, [r4, r2]
	mov r1, #0x95
	bl ReadMsgDataIntoString
	mov r2, #0x1f
	lsl r2, r2, #6
	ldr r0, [r4, r2]
	add r2, #0x4c
	ldr r2, [r4, r2]
	mov r1, #0xba
	bl ReadMsgDataIntoString
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_0207CF98

	thumb_func_start sub_0207D0A0
sub_0207D0A0: ; 0x0207D0A0
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	mov r0, #0x1f
	lsl r0, r0, #6
	add r4, r2, #0
	add r7, r1, #0
	add r1, r4, #0
	ldr r0, [r5, r0]
	add r1, #0x8b
	bl NewString_ReadMsgData
	add r6, r0, #0
	ldr r0, _0207D0E0 ; =0x000007C4
	mov r1, #0
	ldr r0, [r5, r0]
	add r2, r7, #0
	bl BufferMoveName
	ldr r1, _0207D0E0 ; =0x000007C4
	add r4, #0x10
	lsl r2, r4, #2
	ldr r0, [r5, r1]
	add r2, r5, r2
	add r1, #0xc
	ldr r1, [r2, r1]
	add r2, r6, #0
	bl StringExpandPlaceholders
	add r0, r6, #0
	bl String_dtor
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_0207D0E0: .word 0x000007C4
	thumb_func_end sub_0207D0A0

	thumb_func_start sub_0207D0E4
sub_0207D0E4: ; 0x0207D0E4
	push {r4, r5, r6, r7, lr}
	sub sp, #0x14
	add r5, r0, #0
	add r7, r1, #0
	add r0, r2, #0
	mov r1, #0xc
	str r2, [sp, #4]
	bl ListMenuItems_ctor
	mov r1, #0x82
	lsl r1, r1, #4
	str r0, [r5, r1]
	mov r6, #0
	ldr r0, [sp, #4]
	add r4, r6, #0
	cmp r0, #0
	ble _0207D156
_0207D106:
	ldrb r0, [r7, r4]
	cmp r0, #0x10
	blo _0207D12E
	bl sub_0207F42C
	lsl r1, r6, #2
	add r2, r0, #0
	mov r0, #0x82
	add r3, r5, r1
	mov r1, #0x81
	lsl r0, r0, #4
	lsl r1, r1, #4
	ldr r0, [r5, r0]
	ldr r1, [r3, r1]
	bl ListMenuItems_AddItem
	add r0, r6, #1
	lsl r0, r0, #0x10
	lsr r6, r0, #0x10
	b _0207D14A
_0207D12E:
	bl sub_0207F42C
	ldrb r1, [r7, r4]
	add r2, r0, #0
	mov r0, #0x82
	lsl r1, r1, #2
	add r3, r5, r1
	mov r1, #0x7d
	lsl r0, r0, #4
	lsl r1, r1, #4
	ldr r0, [r5, r0]
	ldr r1, [r3, r1]
	bl ListMenuItems_AddItem
_0207D14A:
	add r0, r4, #1
	lsl r0, r0, #0x10
	lsr r4, r0, #0x10
	ldr r0, [sp, #4]
	cmp r4, r0
	blt _0207D106
_0207D156:
	mov r0, #0x82
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	mov r1, #0
	str r0, [sp, #8]
	mov r0, #0xa1
	lsl r0, r0, #2
	add r0, r5, r0
	str r0, [sp, #0xc]
	add r0, sp, #8
	strb r1, [r0, #8]
	mov r1, #1
	strb r1, [r0, #9]
	ldr r1, [sp, #4]
	strb r1, [r0, #0xa]
	ldrb r2, [r0, #0xb]
	mov r1, #0xf
	bic r2, r1
	strb r2, [r0, #0xb]
	ldrb r2, [r0, #0xb]
	mov r1, #0x30
	bic r2, r1
	strb r2, [r0, #0xb]
	ldr r1, [sp, #4]
	ldrb r2, [r0, #0xb]
	cmp r1, #4
	blo _0207D198
	mov r1, #0xc0
	bic r2, r1
	mov r1, #0x40
	orr r1, r2
	strb r1, [r0, #0xb]
	b _0207D19E
_0207D198:
	mov r1, #0xc0
	bic r2, r1
	strb r2, [r0, #0xb]
_0207D19E:
	add r1, sp, #8
	ldrb r1, [r1, #0xa]
	mov r2, #0
	add r0, r5, #0
	add r3, r2, #0
	bl sub_0207E54C
	mov r2, #0
	add r0, r5, #0
	add r1, sp, #8
	mov r3, #0xc
	str r2, [sp]
	bl sub_0207E590
	ldr r1, _0207D1C4 ; =0x00000824
	str r0, [r5, r1]
	add sp, #0x14
	pop {r4, r5, r6, r7, pc}
	nop
_0207D1C4: .word 0x00000824
	thumb_func_end sub_0207D0E4

	thumb_func_start sub_0207D1C8
sub_0207D1C8: ; 0x0207D1C8
	push {r4, r5, r6, lr}
	add r5, r0, #0
	ldr r0, _0207D258 ; =0x00000654
	ldr r0, [r5, r0]
	add r1, r0, #0
	add r1, #0x24
	ldrb r1, [r1]
	cmp r1, #0xf
	bne _0207D1EC
	mov r2, #0x1f
	lsl r2, r2, #6
	ldr r0, [r5, r2]
	add r2, #8
	ldr r2, [r5, r2]
	mov r1, #0x2b
	bl ReadMsgDataIntoString
	pop {r4, r5, r6, pc}
_0207D1EC:
	cmp r1, #0x15
	bne _0207D214
	ldr r1, _0207D25C ; =0x00000C65
	ldrb r2, [r5, r1]
	mov r1, #0x30
	mul r1, r2
	ldr r2, _0207D260 ; =0x00000838
	add r1, r5, r1
	ldrb r1, [r1, r2]
	cmp r1, #1
	bne _0207D214
	add r0, r2, #0
	sub r0, #0x78
	sub r2, #0x70
	ldr r0, [r5, r0]
	ldr r2, [r5, r2]
	mov r1, #0xb7
	bl ReadMsgDataIntoString
	pop {r4, r5, r6, pc}
_0207D214:
	ldr r1, _0207D25C ; =0x00000C65
	ldr r0, [r0]
	ldrb r1, [r5, r1]
	bl GetPartyMonByIndex
	add r6, r0, #0
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r0, [r5, r0]
	mov r1, #0x26
	bl NewString_ReadMsgData
	add r4, r0, #0
	add r0, r6, #0
	bl sub_02070DB0
	add r2, r0, #0
	ldr r0, _0207D264 ; =0x000007C4
	mov r1, #0
	ldr r0, [r5, r0]
	bl BufferBoxMonNickname
	ldr r1, _0207D264 ; =0x000007C4
	add r2, r4, #0
	ldr r0, [r5, r1]
	add r1, r1, #4
	ldr r1, [r5, r1]
	bl StringExpandPlaceholders
	add r0, r4, #0
	bl String_dtor
	pop {r4, r5, r6, pc}
	nop
_0207D258: .word 0x00000654
_0207D25C: .word 0x00000C65
_0207D260: .word 0x00000838
_0207D264: .word 0x000007C4
	thumb_func_end sub_0207D1C8

	thumb_func_start sub_0207D268
sub_0207D268: ; 0x0207D268
	push {r3, r4, lr}
	sub sp, #4
	add r2, r0, #0
	mov r0, #2
	str r0, [sp]
	ldr r0, _0207D290 ; =0x000007BC
	add r4, r1, #0
	ldr r0, [r2, r0]
	add r3, r2, #4
	lsl r2, r4, #2
	add r2, r4, r2
	add r2, r2, #2
	lsl r2, r2, #4
	add r2, r3, r2
	mov r1, #0
	mov r3, #0x1c
	bl sub_0200CDAC
	add sp, #4
	pop {r3, r4, pc}
	.balign 4, 0
_0207D290: .word 0x000007BC
	thumb_func_end sub_0207D268

	thumb_func_start sub_0207D294
sub_0207D294: ; 0x0207D294
	push {r3, r4, r5, r6, r7, lr}
	add r7, r1, #0
	add r4, r2, #0
	add r5, r0, #0
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r1, _0207D2DC ; =0x021015BC
	lsl r2, r4, #3
	ldrh r1, [r1, r2]
	ldr r0, [r5, r0]
	bl NewString_ReadMsgData
	add r6, r0, #0
	add r0, r7, #0
	bl sub_02070DB0
	add r2, r0, #0
	ldr r0, _0207D2E0 ; =0x000007C4
	mov r1, #0
	ldr r0, [r5, r0]
	bl BufferBoxMonNickname
	ldr r2, _0207D2E0 ; =0x000007C4
	mov r1, #0x30
	mul r1, r4
	ldr r0, [r5, r2]
	add r1, r5, r1
	add r2, #0x64
	ldr r1, [r1, r2]
	add r2, r6, #0
	bl StringExpandPlaceholders
	add r0, r6, #0
	bl String_dtor
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_0207D2DC: .word 0x021015BC
_0207D2E0: .word 0x000007C4
	thumb_func_end sub_0207D294

	thumb_func_start sub_0207D2E4
sub_0207D2E4: ; 0x0207D2E4
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x10
	add r5, r0, #0
	lsl r0, r1, #2
	add r0, r1, r0
	lsl r6, r0, #4
	add r7, r1, #0
	mov r0, #0x30
	mul r7, r0
	mov r1, #0
	str r1, [sp]
	mov r0, #0xff
	str r0, [sp, #4]
	ldr r0, _0207D3C8 ; =0x000F0E00
	ldr r2, _0207D3CC ; =0x00000828
	str r0, [sp, #8]
	add r4, r5, #4
	str r1, [sp, #0xc]
	add r3, r5, r7
	ldr r2, [r3, r2]
	add r0, r4, r6
	add r3, r1, #0
	bl sub_020200FC
	ldr r0, _0207D3D0 ; =0x00000838
	add r1, r5, r7
	ldrb r0, [r1, r0]
	cmp r0, #1
	bne _0207D328
	add r0, r4, r6
	bl sub_0201D5C8
	add sp, #0x10
	pop {r3, r4, r5, r6, r7, pc}
_0207D328:
	mov r0, #0x99
	lsl r0, r0, #2
	add r0, r5, r0
	mov r1, #0
	bl FillWindowPixelBuffer
	mov r1, #0
	str r1, [sp]
	ldr r0, _0207D3C8 ; =0x000F0E00
	str r1, [sp, #4]
	str r0, [sp, #8]
	mov r0, #0x99
	lsl r0, r0, #2
	ldr r2, _0207D3D4 ; =0x000007D8
	str r1, [sp, #0xc]
	ldr r2, [r5, r2]
	add r0, r5, r0
	mov r3, #2
	bl sub_020200FC
	ldr r2, _0207D3D8 ; =0x00000836
	add r0, r5, r2
	ldrh r0, [r0, r7]
	lsl r1, r0, #0x13
	lsr r1, r1, #0x1f
	bne _0207D3BE
	lsl r0, r0, #0x11
	lsr r0, r0, #0x1e
	bne _0207D390
	add r0, r2, #0
	sub r0, #0x76
	sub r2, #0x6a
	ldr r0, [r5, r0]
	ldr r2, [r5, r2]
	mov r1, #0x1b
	bl ReadMsgDataIntoString
	mov r1, #0
	str r1, [sp]
	mov r0, #0xff
	str r0, [sp, #4]
	mov r0, #0xc1
	lsl r0, r0, #0xa
	str r0, [sp, #8]
	ldr r2, _0207D3DC ; =0x000007CC
	str r1, [sp, #0xc]
	ldr r2, [r5, r2]
	add r0, r4, r6
	mov r3, #0x40
	bl sub_020200FC
	b _0207D3BE
_0207D390:
	cmp r0, #1
	bne _0207D3BE
	add r0, r2, #0
	sub r0, #0x76
	sub r2, #0x6a
	ldr r0, [r5, r0]
	ldr r2, [r5, r2]
	mov r1, #0x1c
	bl ReadMsgDataIntoString
	mov r1, #0
	str r1, [sp]
	mov r0, #0xff
	str r0, [sp, #4]
	ldr r0, _0207D3E0 ; =0x00050600
	ldr r2, _0207D3DC ; =0x000007CC
	str r0, [sp, #8]
	str r1, [sp, #0xc]
	ldr r2, [r5, r2]
	add r0, r4, r6
	mov r3, #0x40
	bl sub_020200FC
_0207D3BE:
	add r0, r4, r6
	bl sub_0201D5C8
	add sp, #0x10
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_0207D3C8: .word 0x000F0E00
_0207D3CC: .word 0x00000828
_0207D3D0: .word 0x00000838
_0207D3D4: .word 0x000007D8
_0207D3D8: .word 0x00000836
_0207D3DC: .word 0x000007CC
_0207D3E0: .word 0x00050600
	thumb_func_end sub_0207D2E4

	thumb_func_start sub_0207D3E4
sub_0207D3E4: ; 0x0207D3E4
	push {r4, lr}
	sub sp, #0x10
	lsl r2, r1, #2
	add r2, r1, r2
	add r2, r2, #1
	add r3, r0, #4
	lsl r2, r2, #4
	add r4, r3, r2
	mov r2, #0x30
	mul r2, r1
	ldr r3, _0207D43C ; =0x00000836
	add r2, r0, r2
	ldrh r1, [r2, r3]
	lsl r1, r1, #0x14
	lsr r1, r1, #0x14
	cmp r1, #7
	beq _0207D410
	add r0, r4, #0
	bl sub_0201D5C8
	add sp, #0x10
	pop {r4, pc}
_0207D410:
	mov r1, #0
	str r1, [sp]
	str r4, [sp, #4]
	mov r1, #5
	str r1, [sp, #8]
	mov r1, #2
	str r1, [sp, #0xc]
	add r1, r3, #0
	sub r3, r3, #4
	sub r1, #0x7a
	ldrh r2, [r2, r3]
	ldr r0, [r0, r1]
	mov r1, #1
	mov r3, #3
	bl sub_0200CE7C
	add r0, r4, #0
	bl sub_0201D5C8
	add sp, #0x10
	pop {r4, pc}
	nop
_0207D43C: .word 0x00000836
	thumb_func_end sub_0207D3E4

	thumb_func_start sub_0207D440
sub_0207D440: ; 0x0207D440
	push {r4, r5, lr}
	sub sp, #0xc
	add r2, r0, #0
	lsl r0, r1, #2
	add r0, r1, r0
	add r0, r0, #2
	add r3, r2, #4
	lsl r0, r0, #4
	add r4, r3, r0
	mov r3, #0x30
	mul r3, r1
	add r1, r2, r3
	str r4, [sp]
	mov r0, #0
	str r0, [sp, #4]
	mov r0, #2
	ldr r5, _0207D47C ; =0x000007BC
	str r0, [sp, #8]
	ldr r0, [r2, r5]
	add r5, #0x72
	ldrh r1, [r1, r5]
	mov r2, #3
	mov r3, #1
	bl sub_0200CDF0
	add r0, r4, #0
	bl sub_0201D5C8
	add sp, #0xc
	pop {r4, r5, pc}
	.balign 4, 0
_0207D47C: .word 0x000007BC
	thumb_func_end sub_0207D440

	thumb_func_start sub_0207D480
sub_0207D480: ; 0x0207D480
	push {r3, r4, r5, lr}
	sub sp, #8
	add r5, r0, #4
	lsl r0, r1, #2
	add r0, r1, r0
	add r0, r0, #2
	mov r1, #0
	lsl r4, r0, #4
	mov r0, #0x18
	str r0, [sp]
	mov r0, #0x10
	str r0, [sp, #4]
	add r0, r5, r4
	add r2, r1, #0
	add r3, r1, #0
	bl FillWindowPixelRect
	add r0, r5, r4
	bl sub_0201D5C8
	add sp, #8
	pop {r3, r4, r5, pc}
	thumb_func_end sub_0207D480

	thumb_func_start sub_0207D4AC
sub_0207D4AC: ; 0x0207D4AC
	push {r4, r5, lr}
	sub sp, #0xc
	add r2, r0, #0
	lsl r0, r1, #2
	add r0, r1, r0
	add r0, r0, #2
	add r3, r2, #4
	lsl r0, r0, #4
	add r4, r3, r0
	mov r3, #0x30
	mul r3, r1
	add r1, r2, r3
	str r4, [sp]
	mov r0, #0x24
	str r0, [sp, #4]
	mov r0, #2
	ldr r5, _0207D4E8 ; =0x000007BC
	str r0, [sp, #8]
	ldr r0, [r2, r5]
	add r5, #0x74
	ldrh r1, [r1, r5]
	mov r2, #3
	mov r3, #0
	bl sub_0200CDF0
	add r0, r4, #0
	bl sub_0201D5C8
	add sp, #0xc
	pop {r4, r5, pc}
	.balign 4, 0
_0207D4E8: .word 0x000007BC
	thumb_func_end sub_0207D4AC

	thumb_func_start sub_0207D4EC
sub_0207D4EC: ; 0x0207D4EC
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	lsl r2, r1, #2
	add r2, r1, r2
	add r5, r0, #0
	add r2, r2, #3
	add r0, r5, #4
	lsl r2, r2, #4
	add r4, r0, r2
	mov r0, #0x83
	lsl r0, r0, #4
	add r7, r5, r0
	sub r0, r0, #2
	add r0, r5, r0
	mov r2, #0x30
	add r6, r1, #0
	mul r6, r2
	str r0, [sp, #8]
	ldrh r0, [r0, r6]
	ldrh r1, [r7, r6]
	bl sub_020880B0
	cmp r0, #4
	bhi _0207D582
	add r0, r0, r0
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_0207D528: ; jump table
	.short _0207D532 - _0207D528 - 2 ; case 0
	.short _0207D56C - _0207D528 - 2 ; case 1
	.short _0207D554 - _0207D528 - 2 ; case 2
	.short _0207D53C - _0207D528 - 2 ; case 3
	.short _0207D53C - _0207D528 - 2 ; case 4
_0207D532:
	add r0, r4, #0
	bl sub_0201D5C8
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
_0207D53C:
	ldrb r3, [r4, #9]
	ldr r1, _0207D5D0 ; =0x00000566
	mov r0, #1
	lsl r3, r3, #4
	add r3, #9
	lsl r3, r3, #0x11
	add r1, r5, r1
	mov r2, #4
	lsr r3, r3, #0x10
	bl BG_LoadPlttData
	b _0207D582
_0207D554:
	ldrb r3, [r4, #9]
	ldr r1, _0207D5D4 ; =0x00000586
	mov r0, #1
	lsl r3, r3, #4
	add r3, #9
	lsl r3, r3, #0x11
	add r1, r5, r1
	mov r2, #4
	lsr r3, r3, #0x10
	bl BG_LoadPlttData
	b _0207D582
_0207D56C:
	ldrb r3, [r4, #9]
	ldr r1, _0207D5D8 ; =0x000005A6
	mov r0, #1
	lsl r3, r3, #4
	add r3, #9
	lsl r3, r3, #0x11
	add r1, r5, r1
	mov r2, #4
	lsr r3, r3, #0x10
	bl BG_LoadPlttData
_0207D582:
	ldr r0, [sp, #8]
	ldrh r1, [r7, r6]
	ldrh r0, [r0, r6]
	mov r2, #0x30
	bl sub_02088068
	add r5, r0, #0
	str r5, [sp]
	mov r0, #1
	str r0, [sp, #4]
	add r0, r4, #0
	mov r1, #0xa
	mov r2, #0
	mov r3, #2
	bl FillWindowPixelRect
	str r5, [sp]
	mov r0, #2
	str r0, [sp, #4]
	add r0, r4, #0
	mov r1, #9
	mov r2, #0
	mov r3, #3
	bl FillWindowPixelRect
	str r5, [sp]
	mov r0, #1
	str r0, [sp, #4]
	add r0, r4, #0
	mov r1, #0xa
	mov r2, #0
	mov r3, #5
	bl FillWindowPixelRect
	add r0, r4, #0
	bl sub_0201D5C8
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
	.balign 4, 0
_0207D5D0: .word 0x00000566
_0207D5D4: .word 0x00000586
_0207D5D8: .word 0x000005A6
	thumb_func_end sub_0207D4EC

	thumb_func_start sub_0207D5DC
sub_0207D5DC: ; 0x0207D5DC
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x18
	add r6, r1, #0
	add r5, r0, #0
	lsl r0, r6, #2
	add r4, r6, r0
	add r0, r5, #4
	str r0, [sp]
	lsl r0, r4, #4
	ldr r1, [sp]
	str r0, [sp, #4]
	add r0, r1, r0
	mov r1, #0
	bl FillWindowPixelBuffer
	add r0, r4, #1
	lsl r0, r0, #4
	add r7, r5, #4
	str r0, [sp, #8]
	add r0, r7, r0
	mov r1, #0
	bl FillWindowPixelBuffer
	add r0, r7, #0
	str r0, [sp, #0xc]
	add r0, r4, #2
	lsl r0, r0, #4
	ldr r1, [sp, #0xc]
	str r0, [sp, #0x10]
	add r0, r1, r0
	mov r1, #0
	bl FillWindowPixelBuffer
	add r0, r7, #0
	str r0, [sp, #0x14]
	add r0, r4, #3
	lsl r4, r0, #4
	ldr r0, [sp, #0x14]
	mov r1, #0
	add r0, r0, r4
	bl FillWindowPixelBuffer
	add r0, r5, #0
	add r1, r6, #0
	bl sub_0207D2E4
	mov r0, #0x30
	mul r0, r6
	add r1, r5, r0
	ldr r0, _0207D69C ; =0x00000838
	ldrb r0, [r1, r0]
	cmp r0, #1
	bne _0207D66E
	ldr r1, [sp]
	ldr r0, [sp, #4]
	add r0, r1, r0
	bl sub_0201D5C8
	ldr r0, [sp, #8]
	add r0, r7, r0
	bl sub_0201D5C8
	ldr r1, [sp, #0xc]
	ldr r0, [sp, #0x10]
	add r0, r1, r0
	bl sub_0201D5C8
	ldr r0, [sp, #0x14]
	add r0, r0, r4
	bl sub_0201D5C8
	add sp, #0x18
	pop {r3, r4, r5, r6, r7, pc}
_0207D66E:
	add r0, r5, #0
	add r1, r6, #0
	bl sub_0207D268
	add r0, r5, #0
	add r1, r6, #0
	bl sub_0207D3E4
	add r0, r5, #0
	add r1, r6, #0
	bl sub_0207D440
	add r0, r5, #0
	add r1, r6, #0
	bl sub_0207D4AC
	add r0, r5, #0
	add r1, r6, #0
	bl sub_0207D4EC
	add sp, #0x18
	pop {r3, r4, r5, r6, r7, pc}
	nop
_0207D69C: .word 0x00000838
	thumb_func_end sub_0207D5DC

	thumb_func_start sub_0207D6A0
sub_0207D6A0: ; 0x0207D6A0
	push {r3, r4, r5, lr}
	add r5, r0, #0
	lsl r0, r1, #2
	add r4, r1, r0
	add r1, r5, #4
	lsl r0, r4, #4
	add r0, r1, r0
	bl sub_0201D8A0
	add r0, r4, #1
	add r1, r5, #4
	lsl r0, r0, #4
	add r0, r1, r0
	bl sub_0201D8A0
	add r0, r4, #2
	add r1, r5, #4
	lsl r0, r0, #4
	add r0, r1, r0
	bl sub_0201D8A0
	add r0, r4, #3
	add r1, r5, #4
	lsl r0, r0, #4
	add r0, r1, r0
	bl sub_0201D8A0
	pop {r3, r4, r5, pc}
	thumb_func_end sub_0207D6A0

	thumb_func_start sub_0207D6D8
sub_0207D6D8: ; 0x0207D6D8
	push {r3, r4, r5, lr}
	add r5, r0, #0
	lsl r0, r1, #2
	add r4, r1, r0
	add r1, r5, #4
	lsl r0, r4, #4
	add r0, r1, r0
	bl sub_0201D8E4
	add r0, r4, #1
	add r1, r5, #4
	lsl r0, r0, #4
	add r0, r1, r0
	bl sub_0201D8E4
	add r0, r4, #2
	add r1, r5, #4
	lsl r0, r0, #4
	add r0, r1, r0
	bl sub_0201D8E4
	add r0, r4, #3
	add r1, r5, #4
	lsl r0, r0, #4
	add r0, r1, r0
	bl sub_0201D8E4
	pop {r3, r4, r5, pc}
	thumb_func_end sub_0207D6D8

	thumb_func_start sub_0207D710
sub_0207D710: ; 0x0207D710
	push {r3, r4, r5, r6, lr}
	sub sp, #4
	add r4, r1, #0
	add r5, r0, #0
	lsl r0, r4, #2
	add r6, r4, r0
	add r1, r5, #4
	lsl r0, r6, #4
	add r0, r1, r0
	mov r1, #0
	bl FillWindowPixelBuffer
	add r0, r6, #1
	add r1, r5, #4
	lsl r0, r0, #4
	add r0, r1, r0
	mov r1, #0
	bl FillWindowPixelBuffer
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0207D2E4
	mov r0, #0x30
	mul r0, r4
	add r1, r5, r0
	ldr r0, _0207D7A0 ; =0x00000838
	ldrb r0, [r1, r0]
	cmp r0, #1
	bne _0207D75A
	add r0, r5, #0
	add r1, r4, #0
	mov r2, #1
	bl sub_0207DC20
	add sp, #4
	pop {r3, r4, r5, r6, pc}
_0207D75A:
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0207D3E4
	ldr r0, _0207D7A4 ; =0x00000654
	add r1, r4, #0
	ldr r0, [r5, r0]
	ldr r0, [r0]
	bl GetPartyMonByIndex
	add r1, r0, #0
	mov r0, #0
	ldr r3, _0207D7A4 ; =0x00000654
	str r0, [sp]
	ldr r3, [r5, r3]
	mov r2, #3
	ldrh r3, [r3, #0x28]
	bl sub_02070E34
	cmp r0, #0
	bne _0207D792
	add r0, r5, #0
	add r1, r4, #0
	mov r2, #1
	bl sub_0207DC20
	add sp, #4
	pop {r3, r4, r5, r6, pc}
_0207D792:
	add r0, r5, #0
	add r1, r4, #0
	mov r2, #0
	bl sub_0207DC20
	add sp, #4
	pop {r3, r4, r5, r6, pc}
	.balign 4, 0
_0207D7A0: .word 0x00000838
_0207D7A4: .word 0x00000654
	thumb_func_end sub_0207D710

	thumb_func_start sub_0207D7A8
sub_0207D7A8: ; 0x0207D7A8
	push {r4, r5, r6, lr}
	add r4, r1, #0
	add r5, r0, #0
	lsl r0, r4, #2
	add r6, r4, r0
	add r1, r5, #4
	lsl r0, r6, #4
	add r0, r1, r0
	mov r1, #0
	bl FillWindowPixelBuffer
	add r0, r6, #1
	add r1, r5, #4
	lsl r0, r0, #4
	add r0, r1, r0
	mov r1, #0
	bl FillWindowPixelBuffer
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0207D2E4
	mov r0, #0x30
	mul r0, r4
	add r1, r5, r0
	ldr r0, _0207D838 ; =0x00000838
	ldrb r0, [r1, r0]
	cmp r0, #1
	bne _0207D7EE
	add r0, r5, #0
	add r1, r4, #0
	mov r2, #1
	bl sub_0207DC90
	pop {r4, r5, r6, pc}
_0207D7EE:
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0207D3E4
	ldr r0, _0207D83C ; =0x00000654
	add r1, r4, #0
	ldr r0, [r5, r0]
	ldr r0, [r0]
	bl GetPartyMonByIndex
	add r1, r0, #0
	add r0, r5, #0
	bl sub_020820DC
	cmp r0, #0xff
	bne _0207D81A
	add r0, r5, #0
	add r1, r4, #0
	mov r2, #1
	bl sub_0207DC90
	pop {r4, r5, r6, pc}
_0207D81A:
	cmp r0, #0xfd
	bne _0207D82A
	add r0, r5, #0
	add r1, r4, #0
	mov r2, #2
	bl sub_0207DC90
	pop {r4, r5, r6, pc}
_0207D82A:
	add r0, r5, #0
	add r1, r4, #0
	mov r2, #0
	bl sub_0207DC90
	pop {r4, r5, r6, pc}
	nop
_0207D838: .word 0x00000838
_0207D83C: .word 0x00000654
	thumb_func_end sub_0207D7A8

	thumb_func_start sub_0207D840
sub_0207D840: ; 0x0207D840
	push {r4, r5, r6, lr}
	add r4, r1, #0
	add r5, r0, #0
	lsl r0, r4, #2
	add r6, r4, r0
	add r1, r5, #4
	lsl r0, r6, #4
	add r0, r1, r0
	mov r1, #0
	bl FillWindowPixelBuffer
	add r0, r6, #1
	add r1, r5, #4
	lsl r0, r0, #4
	add r0, r1, r0
	mov r1, #0
	bl FillWindowPixelBuffer
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0207D2E4
	mov r0, #0x30
	add r6, r4, #0
	mul r6, r0
	ldr r0, _0207D89C ; =0x00000838
	add r1, r5, r6
	ldrb r0, [r1, r0]
	cmp r0, #1
	beq _0207D884
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0207D3E4
_0207D884:
	ldr r2, _0207D8A0 ; =0x00000836
	add r3, r5, r6
	ldrh r2, [r3, r2]
	add r0, r5, #0
	add r1, r4, #0
	lsl r2, r2, #0x10
	lsr r2, r2, #0x1f
	lsl r2, r2, #0x18
	lsr r2, r2, #0x18
	bl sub_0207DD14
	pop {r4, r5, r6, pc}
	.balign 4, 0
_0207D89C: .word 0x00000838
_0207D8A0: .word 0x00000836
	thumb_func_end sub_0207D840

	thumb_func_start sub_0207D8A4
sub_0207D8A4: ; 0x0207D8A4
	push {r4, r5, r6, lr}
	add r4, r1, #0
	add r5, r0, #0
	lsl r0, r4, #2
	add r6, r4, r0
	add r1, r5, #4
	lsl r0, r6, #4
	add r0, r1, r0
	mov r1, #0
	bl FillWindowPixelBuffer
	add r0, r6, #1
	add r1, r5, #4
	lsl r0, r0, #4
	add r0, r1, r0
	mov r1, #0
	bl FillWindowPixelBuffer
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0207D2E4
	mov r0, #0x30
	mul r0, r4
	add r1, r5, r0
	ldr r0, _0207D8E8 ; =0x00000838
	ldrb r0, [r1, r0]
	cmp r0, #1
	beq _0207D8E6
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0207D3E4
_0207D8E6:
	pop {r4, r5, r6, pc}
	.balign 4, 0
_0207D8E8: .word 0x00000838
	thumb_func_end sub_0207D8A4

	thumb_func_start sub_0207D8EC
sub_0207D8EC: ; 0x0207D8EC
	push {r4, r5, r6, lr}
	add r5, r0, #0
	ldr r0, _0207D984 ; =0x00000654
	add r4, r1, #0
	ldr r1, [r5, r0]
	mov r2, #0
	add r0, r1, #0
	add r0, #0x36
	ldrb r0, [r0]
	lsl r0, r0, #0x18
	lsr r3, r0, #0x1c
	beq _0207D924
	add r0, r4, #1
_0207D906:
	add r6, r1, r2
	add r6, #0x30
	ldrb r6, [r6]
	cmp r0, r6
	bne _0207D91A
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0207DD7C
	pop {r4, r5, r6, pc}
_0207D91A:
	add r2, r2, #1
	lsl r2, r2, #0x18
	lsr r2, r2, #0x18
	cmp r2, r3
	blo _0207D906
_0207D924:
	add r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x16
	bne _0207D944
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0207B418
	cmp r0, #0
	bne _0207D978
	add r0, r5, #0
	add r1, r4, #0
	mov r2, #8
	bl sub_0207DD7C
	pop {r4, r5, r6, pc}
_0207D944:
	cmp r0, #0x17
	bne _0207D960
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0207B4A0
	cmp r0, #0
	bne _0207D978
	add r0, r5, #0
	add r1, r4, #0
	mov r2, #8
	bl sub_0207DD7C
	pop {r4, r5, r6, pc}
_0207D960:
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0207B364
	cmp r0, #0
	bne _0207D978
	add r0, r5, #0
	add r1, r4, #0
	mov r2, #8
	bl sub_0207DD7C
	pop {r4, r5, r6, pc}
_0207D978:
	add r0, r5, #0
	add r1, r4, #0
	mov r2, #7
	bl sub_0207DD7C
	pop {r4, r5, r6, pc}
	.balign 4, 0
_0207D984: .word 0x00000654
	thumb_func_end sub_0207D8EC

	thumb_func_start sub_0207D988
sub_0207D988: ; 0x0207D988
	push {r4, lr}
	add r4, r2, #0
	mov r2, #0
	bl sub_02002F30
	sub r0, r4, r0
	lsr r0, r0, #1
	pop {r4, pc}
	thumb_func_end sub_0207D988

	thumb_func_start sub_0207D998
sub_0207D998: ; 0x0207D998
	push {r3, r4, r5, lr}
	sub sp, #0x10
	add r5, r0, #0
	mov r0, #0x79
	lsl r0, r0, #2
	add r4, r1, #0
	add r0, r5, r0
	mov r1, #0
	bl FillWindowPixelBuffer
	mov r0, #0x7d
	lsl r0, r0, #2
	add r0, r5, r0
	mov r1, #0
	bl FillWindowPixelBuffer
	mov r0, #1
	tst r0, r4
	beq _0207DA04
	mov r2, #0x1f
	lsl r2, r2, #6
	ldr r0, [r5, r2]
	add r2, #0xc
	ldr r2, [r5, r2]
	mov r1, #0
	bl ReadMsgDataIntoString
	ldr r2, _0207DA54 ; =0x000001EB
	ldr r1, _0207DA58 ; =0x000007CC
	ldrb r2, [r5, r2]
	ldr r1, [r5, r1]
	mov r0, #0
	lsl r2, r2, #3
	bl sub_0207D988
	mov r1, #0
	add r3, r0, #0
	str r1, [sp]
	mov r2, #0xff
	str r2, [sp, #4]
	ldr r0, _0207DA5C ; =0x000F0E00
	add r2, #0xe5
	str r0, [sp, #8]
	add r0, r5, r2
	ldr r2, _0207DA58 ; =0x000007CC
	str r1, [sp, #0xc]
	ldr r2, [r5, r2]
	bl sub_020200FC
	mov r0, #0x79
	lsl r0, r0, #2
	add r0, r5, r0
	bl sub_0201D5C8
_0207DA04:
	mov r0, #2
	tst r0, r4
	beq _0207DA50
	mov r2, #0x1f
	lsl r2, r2, #6
	ldr r0, [r5, r2]
	add r2, #0xc
	ldr r2, [r5, r2]
	mov r1, #1
	bl ReadMsgDataIntoString
	ldr r2, _0207DA60 ; =0x000001FB
	ldr r1, _0207DA58 ; =0x000007CC
	ldrb r2, [r5, r2]
	ldr r1, [r5, r1]
	mov r0, #0
	lsl r2, r2, #3
	bl sub_0207D988
	mov r1, #0
	add r3, r0, #0
	str r1, [sp]
	mov r2, #0xff
	str r2, [sp, #4]
	ldr r0, _0207DA5C ; =0x000F0E00
	add r2, #0xf5
	str r0, [sp, #8]
	add r0, r5, r2
	ldr r2, _0207DA58 ; =0x000007CC
	str r1, [sp, #0xc]
	ldr r2, [r5, r2]
	bl sub_020200FC
	mov r0, #0x7d
	lsl r0, r0, #2
	add r0, r5, r0
	bl sub_0201D5C8
_0207DA50:
	add sp, #0x10
	pop {r3, r4, r5, pc}
	.balign 4, 0
_0207DA54: .word 0x000001EB
_0207DA58: .word 0x000007CC
_0207DA5C: .word 0x000F0E00
_0207DA60: .word 0x000001FB
	thumb_func_end sub_0207D998

	thumb_func_start sub_0207DA64
sub_0207DA64: ; 0x0207DA64
	push {r3, r4, r5, r6, lr}
	sub sp, #0xc
	add r5, r0, #0
	add r4, r1, #0
	add r6, r2, #0
	cmp r3, #1
	bne _0207DA7E
	add r0, r4, #0
	mov r1, #1
	mov r2, #0x2a
	mov r3, #0xf
	bl sub_0200E998
_0207DA7E:
	add r0, r4, #0
	mov r1, #0xf
	bl FillWindowPixelBuffer
	mov r0, #0
	mvn r0, r0
	cmp r6, r0
	beq _0207DA9E
	mov r2, #0x1f
	lsl r2, r2, #6
	ldr r0, [r5, r2]
	add r2, #8
	ldr r2, [r5, r2]
	add r1, r6, #0
	bl ReadMsgDataIntoString
_0207DA9E:
	mov r3, #0
	str r3, [sp]
	mov r0, #0xff
	str r0, [sp, #4]
	ldr r2, _0207DAC0 ; =0x000007C8
	str r3, [sp, #8]
	ldr r2, [r5, r2]
	add r0, r4, #0
	mov r1, #1
	bl AddTextPrinterParameterized
	add r0, r4, #0
	bl sub_0201D5C8
	add sp, #0xc
	pop {r3, r4, r5, r6, pc}
	nop
_0207DAC0: .word 0x000007C8
	thumb_func_end sub_0207DA64

	thumb_func_start sub_0207DAC4
sub_0207DAC4: ; 0x0207DAC4
	push {r4, lr}
	add r4, r1, #0
	mov r1, #0x81
	lsl r1, r1, #2
	add r3, r2, #0
	add r1, r0, r1
	add r2, r4, #0
	bl sub_0207DA64
	pop {r4, pc}
	thumb_func_end sub_0207DAC4

	thumb_func_start sub_0207DAD8
sub_0207DAD8: ; 0x0207DAD8
	push {r4, lr}
	add r4, r1, #0
	mov r1, #0x85
	lsl r1, r1, #2
	add r3, r2, #0
	add r1, r0, r1
	add r2, r4, #0
	bl sub_0207DA64
	pop {r4, pc}
	thumb_func_end sub_0207DAD8

	thumb_func_start sub_0207DAEC
sub_0207DAEC: ; 0x0207DAEC
	push {r4, r5, r6, lr}
	mov r6, #0x89
	add r5, r0, #0
	add r4, r1, #0
	lsl r6, r6, #2
	cmp r2, #1
	bne _0207DB06
	add r0, r5, r6
	mov r1, #1
	mov r2, #0x2a
	mov r3, #0xf
	bl sub_0200E998
_0207DB06:
	add r0, r5, r6
	mov r1, #0xf
	bl FillWindowPixelBuffer
	mov r0, #0
	mvn r0, r0
	cmp r4, r0
	beq _0207DB26
	mov r2, #0x1f
	lsl r2, r2, #6
	ldr r0, [r5, r2]
	add r2, #8
	ldr r2, [r5, r2]
	add r1, r4, #0
	bl ReadMsgDataIntoString
_0207DB26:
	add r0, r5, #0
	bl sub_0207DB30
	pop {r4, r5, r6, pc}
	.balign 4, 0
	thumb_func_end sub_0207DAEC

	thumb_func_start sub_0207DB30
sub_0207DB30: ; 0x0207DB30
	push {r3, r4, lr}
	sub sp, #0xc
	add r4, r0, #0
	mov r0, #1
	bl TextFlags_SetCanABSpeedUpPrint
	mov r0, #0
	bl sub_02002B50
	ldr r0, _0207DB70 ; =0x00000654
	ldr r0, [r4, r0]
	ldr r0, [r0, #0xc]
	bl sub_0202AD3C
	mov r3, #0
	str r3, [sp]
	str r0, [sp, #4]
	ldr r0, _0207DB74 ; =sub_0207DB80
	ldr r2, _0207DB78 ; =0x000007C8
	str r0, [sp, #8]
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r2, [r4, r2]
	add r0, r4, r0
	mov r1, #1
	bl AddTextPrinterParameterized
	ldr r1, _0207DB7C ; =0x00000C64
	strb r0, [r4, r1]
	add sp, #0xc
	pop {r3, r4, pc}
	nop
_0207DB70: .word 0x00000654
_0207DB74: .word sub_0207DB80
_0207DB78: .word 0x000007C8
_0207DB7C: .word 0x00000C64
	thumb_func_end sub_0207DB30

	thumb_func_start sub_0207DB80
sub_0207DB80: ; 0x0207DB80
	push {r3, lr}
	cmp r1, #5
	bhi _0207DBC4
	add r0, r1, r1
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_0207DB92: ; jump table
	.short _0207DBC4 - _0207DB92 - 2 ; case 0
	.short _0207DB9E - _0207DB92 - 2 ; case 1
	.short _0207DBA4 - _0207DB92 - 2 ; case 2
	.short _0207DBAA - _0207DB92 - 2 ; case 3
	.short _0207DBB2 - _0207DB92 - 2 ; case 4
	.short _0207DBBC - _0207DB92 - 2 ; case 5
_0207DB9E:
	bl sub_02006198
	pop {r3, pc}
_0207DBA4:
	bl sub_02006BCC
	pop {r3, pc}
_0207DBAA:
	ldr r0, _0207DBC8 ; =0x000005E6
	bl PlaySE
	b _0207DBC4
_0207DBB2:
	mov r0, #0x4a
	lsl r0, r0, #4
	bl sub_02006B24
	b _0207DBC4
_0207DBBC:
	ldr r0, _0207DBC8 ; =0x000005E6
	bl sub_02006184
	pop {r3, pc}
_0207DBC4:
	mov r0, #0
	pop {r3, pc}
	.balign 4, 0
_0207DBC8: .word 0x000005E6
	thumb_func_end sub_0207DB80

	thumb_func_start sub_0207DBCC
sub_0207DBCC: ; 0x0207DBCC
	push {r4, r5, lr}
	sub sp, #0x14
	add r4, r0, #0
	mov r0, #0xc
	bl sub_0201660C
	ldr r2, _0207DC1C ; =0x00000C88
	mov r1, #0x26
	str r0, [r4, r2]
	ldr r0, [r4]
	lsl r1, r1, #4
	str r0, [sp]
	mov r0, #0
	str r1, [sp, #8]
	mov r1, #0xb
	str r1, [sp, #0xc]
	str r0, [sp, #4]
	mov r1, #0x19
	add r3, sp, #0
	strb r1, [r3, #0x10]
	mov r1, #0xa
	strb r1, [r3, #0x11]
	ldrb r5, [r3, #0x12]
	mov r1, #0xf
	bic r5, r1
	strb r5, [r3, #0x12]
	ldrb r5, [r3, #0x12]
	mov r1, #0xf0
	bic r5, r1
	strb r5, [r3, #0x12]
	strb r0, [r3, #0x13]
	ldr r0, [r4, r2]
	add r1, sp, #0
	bl sub_020166FC
	bl sub_0207CB7C
	add sp, #0x14
	pop {r4, r5, pc}
	nop
_0207DC1C: .word 0x00000C88
	thumb_func_end sub_0207DBCC

	thumb_func_start sub_0207DC20
sub_0207DC20: ; 0x0207DC20
	push {r4, r5, r6, r7, lr}
	sub sp, #0x14
	add r5, r0, #0
	lsl r0, r1, #2
	add r0, r1, r0
	add r0, r0, #4
	add r4, r5, #4
	lsl r6, r0, #4
	add r0, r4, r6
	mov r1, #0
	add r7, r2, #0
	bl FillWindowPixelBuffer
	cmp r7, #0
	beq _0207DC44
	cmp r7, #1
	beq _0207DC54
	b _0207DC62
_0207DC44:
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r0, [r5, r0]
	mov r1, #0xa1
	bl NewString_ReadMsgData
	str r0, [sp, #0x10]
	b _0207DC62
_0207DC54:
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r0, [r5, r0]
	mov r1, #0xa2
	bl NewString_ReadMsgData
	str r0, [sp, #0x10]
_0207DC62:
	mov r1, #0
	str r1, [sp]
	mov r0, #0xff
	str r0, [sp, #4]
	ldr r0, _0207DC8C ; =0x000F0E00
	ldr r2, [sp, #0x10]
	str r0, [sp, #8]
	add r0, r4, r6
	add r3, r1, #0
	str r1, [sp, #0xc]
	bl sub_020200FC
	ldr r0, [sp, #0x10]
	bl String_dtor
	add r0, r4, r6
	bl sub_0201D5C8
	add sp, #0x14
	pop {r4, r5, r6, r7, pc}
	nop
_0207DC8C: .word 0x000F0E00
	thumb_func_end sub_0207DC20

	thumb_func_start sub_0207DC90
sub_0207DC90: ; 0x0207DC90
	push {r4, r5, r6, r7, lr}
	sub sp, #0x14
	add r5, r0, #0
	lsl r0, r1, #2
	add r0, r1, r0
	add r0, r0, #4
	add r4, r5, #4
	lsl r7, r0, #4
	add r0, r4, r7
	mov r1, #0
	add r6, r2, #0
	bl FillWindowPixelBuffer
	cmp r6, #0
	beq _0207DCB8
	cmp r6, #1
	beq _0207DCC8
	cmp r6, #2
	beq _0207DCD8
	b _0207DCE6
_0207DCB8:
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r0, [r5, r0]
	mov r1, #0x9e
	bl NewString_ReadMsgData
	str r0, [sp, #0x10]
	b _0207DCE6
_0207DCC8:
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r0, [r5, r0]
	mov r1, #0x9f
	bl NewString_ReadMsgData
	str r0, [sp, #0x10]
	b _0207DCE6
_0207DCD8:
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r0, [r5, r0]
	mov r1, #0xa0
	bl NewString_ReadMsgData
	str r0, [sp, #0x10]
_0207DCE6:
	mov r1, #0
	str r1, [sp]
	mov r0, #0xff
	str r0, [sp, #4]
	ldr r0, _0207DD10 ; =0x000F0E00
	ldr r2, [sp, #0x10]
	str r0, [sp, #8]
	add r0, r4, r7
	add r3, r1, #0
	str r1, [sp, #0xc]
	bl sub_020200FC
	ldr r0, [sp, #0x10]
	bl String_dtor
	add r0, r4, r7
	bl sub_0201D5C8
	add sp, #0x14
	pop {r4, r5, r6, r7, pc}
	nop
_0207DD10: .word 0x000F0E00
	thumb_func_end sub_0207DC90

	thumb_func_start sub_0207DD14
sub_0207DD14: ; 0x0207DD14
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x10
	add r5, r0, #0
	lsl r0, r1, #2
	add r0, r1, r0
	add r0, r0, #4
	add r4, r5, #4
	lsl r6, r0, #4
	add r0, r4, r6
	mov r1, #0
	add r7, r2, #0
	bl FillWindowPixelBuffer
	cmp r7, #0
	bne _0207DD40
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r0, [r5, r0]
	mov r1, #0xa4
	bl NewString_ReadMsgData
	b _0207DD4C
_0207DD40:
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r0, [r5, r0]
	mov r1, #0xa3
	bl NewString_ReadMsgData
_0207DD4C:
	mov r1, #0
	add r5, r0, #0
	str r1, [sp]
	mov r0, #0xff
	str r0, [sp, #4]
	ldr r0, _0207DD78 ; =0x000F0E00
	add r2, r5, #0
	str r0, [sp, #8]
	add r0, r4, r6
	add r3, r1, #0
	str r1, [sp, #0xc]
	bl sub_020200FC
	add r0, r5, #0
	bl String_dtor
	add r0, r4, r6
	bl sub_0201D5C8
	add sp, #0x10
	pop {r3, r4, r5, r6, r7, pc}
	nop
_0207DD78: .word 0x000F0E00
	thumb_func_end sub_0207DD14

	thumb_func_start sub_0207DD7C
sub_0207DD7C: ; 0x0207DD7C
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x10
	add r5, r0, #0
	lsl r0, r1, #2
	add r0, r1, r0
	add r0, r0, #4
	add r4, r5, #4
	lsl r7, r0, #4
	add r0, r4, r7
	mov r1, #0
	add r6, r2, #0
	bl FillWindowPixelBuffer
	cmp r6, #6
	bhs _0207DDAC
	mov r0, #0x1f
	lsl r0, r0, #6
	add r6, #0x98
	ldr r0, [r5, r0]
	add r1, r6, #0
	bl NewString_ReadMsgData
	add r5, r0, #0
	b _0207DDCE
_0207DDAC:
	cmp r6, #7
	bne _0207DDC0
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r0, [r5, r0]
	mov r1, #0x96
	bl NewString_ReadMsgData
	add r5, r0, #0
	b _0207DDCE
_0207DDC0:
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r0, [r5, r0]
	mov r1, #0x97
	bl NewString_ReadMsgData
	add r5, r0, #0
_0207DDCE:
	mov r1, #0
	str r1, [sp]
	mov r0, #0xff
	str r0, [sp, #4]
	ldr r0, _0207DDF8 ; =0x000F0E00
	add r2, r5, #0
	str r0, [sp, #8]
	add r0, r4, r7
	add r3, r1, #0
	str r1, [sp, #0xc]
	bl sub_020200FC
	add r0, r5, #0
	bl String_dtor
	add r0, r4, r7
	bl sub_0201D5C8
	add sp, #0x10
	pop {r3, r4, r5, r6, r7, pc}
	nop
_0207DDF8: .word 0x000F0E00
	thumb_func_end sub_0207DD7C

	thumb_func_start sub_0207DDFC
sub_0207DDFC: ; 0x0207DDFC
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x30
	add r5, r0, #0
	ldr r0, _0207DF84 ; =0x00000654
	ldr r1, _0207DF88 ; =0x00000C65
	ldr r0, [r5, r0]
	ldrb r1, [r5, r1]
	ldr r0, [r0]
	bl GetPartyMonByIndex
	mov r1, #0xa4
	mov r2, #0
	add r4, r0, #0
	bl GetMonData
	add r1, sp, #0x24
	strh r0, [r1]
	add r0, r4, #0
	mov r1, #0xa5
	mov r2, #0
	bl GetMonData
	add r1, sp, #0x24
	strh r0, [r1, #2]
	add r0, r4, #0
	mov r1, #0xa6
	mov r2, #0
	bl GetMonData
	add r1, sp, #0x24
	strh r0, [r1, #4]
	add r0, r4, #0
	mov r1, #0xa8
	mov r2, #0
	bl GetMonData
	add r1, sp, #0x24
	strh r0, [r1, #6]
	add r0, r4, #0
	mov r1, #0xa9
	mov r2, #0
	bl GetMonData
	add r1, sp, #0x24
	strh r0, [r1, #8]
	add r0, r4, #0
	mov r1, #0xa7
	mov r2, #0
	bl GetMonData
	add r1, sp, #0x24
	strh r0, [r1, #0xa]
	mov r3, #1
	mov r1, #0x26
	str r3, [sp]
	mov r0, #0xe
	str r0, [sp, #4]
	mov r0, #0xc
	str r0, [sp, #8]
	mov r2, #0
	str r2, [sp, #0xc]
	lsl r1, r1, #4
	str r1, [sp, #0x10]
	add r1, #0x24
	ldr r0, [r5]
	add r1, r5, r1
	bl sub_0201D40C
	mov r0, #0xa1
	lsl r0, r0, #2
	mov r1, #1
	add r0, r5, r0
	add r2, r1, #0
	mov r3, #0xe
	bl sub_0200E580
	mov r0, #0xa1
	lsl r0, r0, #2
	add r0, r5, r0
	mov r1, #0xf
	bl FillWindowPixelBuffer
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r0, [r5, r0]
	mov r1, #0xaf
	bl NewString_ReadMsgData
	mov r4, #0
	str r0, [sp, #0x18]
	str r4, [sp, #0x14]
	add r7, r5, #0
	add r6, sp, #0x24
_0207DEB6:
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r1, [sp, #0x14]
	ldr r0, [r5, r0]
	add r1, #0xa9
	bl NewString_ReadMsgData
	str r0, [sp, #0x1c]
	mov r1, #0
	str r4, [sp]
	mov r0, #0xff
	str r0, [sp, #4]
	mov r0, #0
	str r0, [sp, #8]
	mov r0, #0xa1
	lsl r0, r0, #2
	ldr r2, [sp, #0x1c]
	add r0, r5, r0
	add r3, r1, #0
	bl AddTextPrinterParameterized
	ldr r0, [sp, #0x1c]
	bl String_dtor
	str r4, [sp]
	mov r0, #0xff
	str r0, [sp, #4]
	mov r0, #0
	str r0, [sp, #8]
	mov r0, #0xa1
	lsl r0, r0, #2
	ldr r2, [sp, #0x18]
	add r0, r5, r0
	mov r1, #0
	mov r3, #0x50
	bl AddTextPrinterParameterized
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r0, [r5, r0]
	mov r1, #0xb0
	bl NewString_ReadMsgData
	str r0, [sp, #0x20]
	mov r0, #0
	str r0, [sp]
	mov r0, #1
	str r0, [sp, #4]
	ldr r2, _0207DF8C ; =0x00000C68
	ldr r0, _0207DF90 ; =0x000007C4
	ldrh r3, [r6]
	ldrh r2, [r7, r2]
	ldr r0, [r5, r0]
	mov r1, #0
	sub r2, r3, r2
	mov r3, #2
	bl BufferIntegerAsString
	ldr r0, _0207DF90 ; =0x000007C4
	ldr r1, _0207DF94 ; =0x000007C8
	ldr r0, [r5, r0]
	ldr r1, [r5, r1]
	ldr r2, [sp, #0x20]
	bl StringExpandPlaceholders
	ldr r0, [sp, #0x20]
	bl String_dtor
	str r4, [sp]
	mov r0, #0xff
	str r0, [sp, #4]
	mov r0, #0
	str r0, [sp, #8]
	ldr r2, _0207DF94 ; =0x000007C8
	mov r0, #0xa1
	lsl r0, r0, #2
	ldr r2, [r5, r2]
	add r0, r5, r0
	mov r1, #0
	mov r3, #0x5e
	bl AddTextPrinterParameterized
	ldrh r1, [r6]
	ldr r0, _0207DF8C ; =0x00000C68
	add r4, #0x10
	strh r1, [r7, r0]
	ldr r0, [sp, #0x14]
	add r7, r7, #2
	add r0, r0, #1
	add r6, r6, #2
	str r0, [sp, #0x14]
	cmp r0, #6
	blo _0207DEB6
	ldr r0, [sp, #0x18]
	bl String_dtor
	mov r0, #0xa1
	lsl r0, r0, #2
	add r0, r5, r0
	bl sub_0201D5C8
	add sp, #0x30
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_0207DF84: .word 0x00000654
_0207DF88: .word 0x00000C65
_0207DF8C: .word 0x00000C68
_0207DF90: .word 0x000007C4
_0207DF94: .word 0x000007C8
	thumb_func_end sub_0207DDFC

	thumb_func_start sub_0207DF98
sub_0207DF98: ; 0x0207DF98
	push {r4, r5, r6, r7, lr}
	sub sp, #0x14
	add r5, r0, #0
	mov r0, #0x20
	str r0, [sp]
	mov r0, #0x70
	str r0, [sp, #4]
	mov r0, #0xa1
	lsl r0, r0, #2
	add r0, r5, r0
	mov r1, #0xf
	mov r2, #0x50
	mov r3, #0
	bl FillWindowPixelRect
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r0, [r5, r0]
	mov r1, #0xb0
	bl NewString_ReadMsgData
	str r0, [sp, #0xc]
	mov r0, #0
	str r0, [sp, #0x10]
	add r6, r5, #0
	add r4, r0, #0
_0207DFCC:
	mov r0, #0
	str r0, [sp]
	mov r0, #1
	str r0, [sp, #4]
	ldr r2, _0207E040 ; =0x00000C68
	ldr r0, _0207E044 ; =0x000007C4
	ldrh r2, [r6, r2]
	ldr r0, [r5, r0]
	mov r1, #0
	mov r3, #3
	bl BufferIntegerAsString
	ldr r0, _0207E044 ; =0x000007C4
	ldr r1, _0207E048 ; =0x000007C8
	ldr r0, [r5, r0]
	ldr r1, [r5, r1]
	ldr r2, [sp, #0xc]
	bl StringExpandPlaceholders
	ldr r1, _0207E048 ; =0x000007C8
	mov r0, #0
	ldr r1, [r5, r1]
	add r2, r0, #0
	bl sub_02002F30
	add r7, r0, #0
	mov r3, #0x68
	str r4, [sp]
	mov r0, #0xff
	str r0, [sp, #4]
	mov r0, #0
	str r0, [sp, #8]
	ldr r2, _0207E048 ; =0x000007C8
	mov r0, #0xa1
	lsl r0, r0, #2
	ldr r2, [r5, r2]
	add r0, r5, r0
	mov r1, #0
	sub r3, r3, r7
	bl AddTextPrinterParameterized
	ldr r0, [sp, #0x10]
	add r6, r6, #2
	add r0, r0, #1
	add r4, #0x10
	str r0, [sp, #0x10]
	cmp r0, #6
	blo _0207DFCC
	ldr r0, [sp, #0xc]
	bl String_dtor
	mov r0, #0xa1
	lsl r0, r0, #2
	add r0, r5, r0
	bl sub_0201D5C8
	add sp, #0x14
	pop {r4, r5, r6, r7, pc}
	.balign 4, 0
_0207E040: .word 0x00000C68
_0207E044: .word 0x000007C4
_0207E048: .word 0x000007C8
	thumb_func_end sub_0207DF98

	thumb_func_start sub_0207E04C
sub_0207E04C: ; 0x0207E04C
	push {r4, lr}
	add r4, r0, #0
	mov r0, #0xa1
	lsl r0, r0, #2
	add r0, r4, r0
	mov r1, #0
	bl sub_0200E5D4
	mov r0, #0xa1
	lsl r0, r0, #2
	add r0, r4, r0
	bl RemoveWindow
	pop {r4, pc}
	thumb_func_end sub_0207E04C

	thumb_func_start sub_0207E068
sub_0207E068: ; 0x0207E068
	push {r4, r5, r6, lr}
	sub sp, #0x10
	add r5, r0, #0
	mov r0, #0x95
	lsl r0, r0, #2
	add r0, r5, r0
	mov r1, #0
	bl FillWindowPixelBuffer
	mov r0, #0x9d
	lsl r0, r0, #2
	add r0, r5, r0
	mov r1, #0
	bl FillWindowPixelBuffer
	ldr r0, _0207E168 ; =0x00000654
	ldr r1, _0207E16C ; =0x00000C65
	ldr r0, [r5, r0]
	ldrb r1, [r5, r1]
	ldr r0, [r0]
	bl GetPartyMonByIndex
	add r6, r0, #0
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r0, [r5, r0]
	mov r1, #8
	bl NewString_ReadMsgData
	add r4, r0, #0
	add r0, r6, #0
	bl sub_02070DB0
	add r2, r0, #0
	ldr r0, _0207E170 ; =0x000007C4
	mov r1, #0
	ldr r0, [r5, r0]
	bl BufferBoxMonNickname
	ldr r1, _0207E170 ; =0x000007C4
	add r2, r4, #0
	ldr r0, [r5, r1]
	add r1, r1, #4
	ldr r1, [r5, r1]
	bl StringExpandPlaceholders
	mov r1, #0
	str r1, [sp]
	mov r0, #0xff
	str r0, [sp, #4]
	ldr r0, _0207E174 ; =0x000F0E00
	ldr r2, _0207E178 ; =0x000007C8
	str r0, [sp, #8]
	str r1, [sp, #0xc]
	mov r0, #0x95
	lsl r0, r0, #2
	ldr r2, [r5, r2]
	add r0, r5, r0
	add r3, r1, #0
	bl sub_020200FC
	add r0, r4, #0
	bl String_dtor
	ldr r0, _0207E168 ; =0x00000654
	ldr r1, _0207E16C ; =0x00000C65
	ldr r0, [r5, r0]
	ldrb r1, [r5, r1]
	ldr r0, [r0]
	bl GetPartyMonByIndex
	add r6, r0, #0
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r0, [r5, r0]
	mov r1, #0xb6
	bl NewString_ReadMsgData
	add r4, r0, #0
	add r0, r6, #0
	mov r1, #6
	mov r2, #0
	bl GetMonData
	add r2, r0, #0
	ldr r0, _0207E170 ; =0x000007C4
	mov r1, #1
	ldr r0, [r5, r0]
	bl BufferItemName
	ldr r1, _0207E170 ; =0x000007C4
	add r2, r4, #0
	ldr r0, [r5, r1]
	add r1, r1, #4
	ldr r1, [r5, r1]
	bl StringExpandPlaceholders
	mov r0, #4
	str r0, [sp]
	mov r0, #0xff
	str r0, [sp, #4]
	ldr r0, _0207E174 ; =0x000F0E00
	mov r1, #0
	str r0, [sp, #8]
	mov r0, #0x9d
	lsl r0, r0, #2
	ldr r2, _0207E178 ; =0x000007C8
	str r1, [sp, #0xc]
	ldr r2, [r5, r2]
	add r0, r5, r0
	mov r3, #2
	bl sub_020200FC
	add r0, r4, #0
	bl String_dtor
	mov r0, #0x95
	lsl r0, r0, #2
	add r0, r5, r0
	bl sub_0201D5C8
	mov r0, #0x9d
	lsl r0, r0, #2
	add r0, r5, r0
	bl sub_0201D5C8
	add sp, #0x10
	pop {r4, r5, r6, pc}
	.balign 4, 0
_0207E168: .word 0x00000654
_0207E16C: .word 0x00000C65
_0207E170: .word 0x000007C4
_0207E174: .word 0x000F0E00
_0207E178: .word 0x000007C8
	thumb_func_end sub_0207E068

	thumb_func_start sub_0207E17C
sub_0207E17C: ; 0x0207E17C
	push {r3, r4, r5, r6, r7, lr}
	add r7, r1, #0
	add r4, r2, #0
	str r0, [sp]
	cmp r7, #8
	ble _0207E18C
	bl GF_AssertFail
_0207E18C:
	mov r6, #0
	cmp r7, #0
	ble _0207E1D2
	sub r0, r7, #1
	ldr r1, _0207E1D4 ; =0x021016B4
	lsl r0, r0, #4
	add r1, r1, r0
	lsl r0, r4, #3
	add r5, r1, r0
	mov r1, #0xa5
	ldr r0, [sp]
	lsl r1, r1, #2
	add r4, r0, r1
_0207E1A6:
	mov r0, #0
	ldrsb r2, [r5, r0]
	ldr r0, [sp]
	lsl r1, r2, #4
	lsl r3, r2, #3
	ldr r2, _0207E1D8 ; =0x02101654
	ldr r0, [r0]
	add r1, r4, r1
	add r2, r2, r3
	bl AddWindow
	mov r0, #0
	ldrsb r0, [r5, r0]
	mov r1, #4
	lsl r0, r0, #4
	add r0, r4, r0
	bl FillWindowPixelBuffer
	add r6, r6, #1
	add r5, r5, #1
	cmp r6, r7
	blt _0207E1A6
_0207E1D2:
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_0207E1D4: .word 0x021016B4
_0207E1D8: .word 0x02101654
	thumb_func_end sub_0207E17C

	thumb_func_start sub_0207E1DC
sub_0207E1DC: ; 0x0207E1DC
	push {r4, r5, r6, r7, lr}
	sub sp, #0x14
	add r6, r1, #0
	add r5, r2, #0
	str r0, [sp, #0x10]
	cmp r6, #8
	ble _0207E1EE
	bl GF_AssertFail
_0207E1EE:
	mov r4, #0
	cmp r6, #0
	ble _0207E21C
	sub r0, r6, #1
	ldr r1, _0207E260 ; =0x021016B4
	lsl r0, r0, #4
	add r1, r1, r0
	lsl r0, r5, #3
	add r5, r1, r0
	mov r1, #0xa5
	ldr r0, [sp, #0x10]
	lsl r1, r1, #2
	add r7, r0, r1
_0207E208:
	mov r0, #0
	ldrsb r0, [r5, r0]
	lsl r0, r0, #4
	add r0, r7, r0
	bl RemoveWindow
	add r4, r4, #1
	add r5, r5, #1
	cmp r4, r6
	blt _0207E208
_0207E21C:
	mov r1, #0
	str r1, [sp]
	mov r0, #0x20
	str r0, [sp, #4]
	mov r0, #0x12
	str r0, [sp, #8]
	ldr r0, [sp, #0x10]
	str r1, [sp, #0xc]
	ldr r0, [r0]
	add r2, r1, #0
	add r3, r1, #0
	bl FillBgTilemapRect
	mov r0, #0x13
	str r0, [sp]
	mov r0, #7
	str r0, [sp, #4]
	mov r0, #5
	str r0, [sp, #8]
	mov r1, #0
	ldr r0, [sp, #0x10]
	str r1, [sp, #0xc]
	ldr r0, [r0]
	add r2, r1, #0
	mov r3, #0x19
	bl FillBgTilemapRect
	ldr r0, [sp, #0x10]
	mov r1, #0
	ldr r0, [r0]
	bl BgCommitTilemapBufferToVram
	add sp, #0x14
	pop {r4, r5, r6, r7, pc}
	.balign 4, 0
_0207E260: .word 0x021016B4
	thumb_func_end sub_0207E1DC

	thumb_func_start sub_0207E264
sub_0207E264: ; 0x0207E264
	cmp r0, #4
	bge _0207E26C
	ldr r0, _0207E270 ; =0x000E0F0B
	bx lr
_0207E26C:
	ldr r0, _0207E274 ; =0x00090A0B
	bx lr
	.balign 4, 0
_0207E270: .word 0x000E0F0B
_0207E274: .word 0x00090A0B
	thumb_func_end sub_0207E264

	thumb_func_start sub_0207E278
sub_0207E278: ; 0x0207E278
	cmp r0, #4
	bge _0207E280
	ldr r0, _0207E284 ; =0x000E0F04
	bx lr
_0207E280:
	ldr r0, _0207E288 ; =0x00090A04
	bx lr
	.balign 4, 0
_0207E284: .word 0x000E0F04
_0207E288: .word 0x00090A04
	thumb_func_end sub_0207E278

	thumb_func_start sub_0207E28C
sub_0207E28C: ; 0x0207E28C
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x20
	add r4, r0, #0
	mov r0, #0
	str r0, [sp, #0x14]
	sub r0, r2, #1
	add r5, r3, #0
	lsl r3, r0, #4
	ldr r2, _0207E34C ; =0x021016B4
	ldr r0, [sp, #0x38]
	str r1, [sp, #0x10]
	lsl r1, r0, #3
	add r0, r2, r3
	add r0, r1, r0
	ldrb r7, [r5, r0]
	cmp r7, #7
	bne _0207E2EC
	ldr r0, [sp, #0x3c]
	cmp r0, #0
	bne _0207E2BC
	ldr r0, _0207E350 ; =0x000E0F04
	mov r6, #4
	str r0, [sp, #0x1c]
	b _0207E2C2
_0207E2BC:
	ldr r0, _0207E354 ; =0x000E0F0B
	mov r6, #0xb
	str r0, [sp, #0x1c]
_0207E2C2:
	mov r0, #4
	str r0, [sp, #0x18]
	mov r0, #0xa5
	lsl r0, r0, #2
	add r1, r4, r0
	lsl r0, r7, #4
	add r0, r1, r0
	bl GetWindowWidth
	add r3, r0, #0
	ldr r1, [sp, #0x10]
	mov r0, #4
	ldr r2, [r1]
	lsl r1, r5, #3
	ldr r1, [r2, r1]
	mov r2, #0
	lsl r3, r3, #3
	bl sub_020030A0
	str r0, [sp, #0x14]
	b _0207E30C
_0207E2EC:
	ldr r0, [sp, #0x3c]
	cmp r0, #0
	bne _0207E2FE
	add r0, r5, #0
	mov r6, #4
	bl sub_0207E278
	str r0, [sp, #0x1c]
	b _0207E308
_0207E2FE:
	add r0, r5, #0
	mov r6, #0xb
	bl sub_0207E264
	str r0, [sp, #0x1c]
_0207E308:
	mov r0, #0
	str r0, [sp, #0x18]
_0207E30C:
	mov r0, #0xa5
	lsl r0, r0, #2
	lsl r1, r6, #0x18
	add r4, r4, r0
	lsl r7, r7, #4
	add r0, r4, r7
	lsr r1, r1, #0x18
	bl FillWindowPixelBuffer
	ldr r0, [sp, #0x18]
	ldr r2, [sp, #0x10]
	str r0, [sp]
	mov r0, #0xff
	str r0, [sp, #4]
	ldr r0, [sp, #0x1c]
	mov r1, #4
	str r0, [sp, #8]
	mov r0, #0
	str r0, [sp, #0xc]
	ldr r3, [r2]
	lsl r2, r5, #3
	ldr r2, [r3, r2]
	ldr r3, [sp, #0x14]
	add r0, r4, r7
	bl sub_020200FC
	add r0, r4, r7
	bl sub_0201D5C8
	add sp, #0x20
	pop {r3, r4, r5, r6, r7, pc}
	nop
_0207E34C: .word 0x021016B4
_0207E350: .word 0x000E0F04
_0207E354: .word 0x000E0F0B
	thumb_func_end sub_0207E28C

	thumb_func_start sub_0207E358
sub_0207E358: ; 0x0207E358
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x10
	add r5, r2, #0
	add r7, r0, #0
	str r1, [sp, #8]
	str r3, [sp, #0xc]
	ldr r6, [sp, #0x28]
	cmp r5, #8
	ble _0207E36E
	bl GF_AssertFail
_0207E36E:
	mov r4, #0
	cmp r5, #0
	ble _0207E3A4
_0207E374:
	ldr r0, [sp, #0xc]
	cmp r0, r4
	str r6, [sp]
	bne _0207E38E
	mov r0, #1
	str r0, [sp, #4]
	ldr r1, [sp, #8]
	add r0, r7, #0
	add r2, r5, #0
	add r3, r4, #0
	bl sub_0207E28C
	b _0207E39E
_0207E38E:
	mov r0, #0
	str r0, [sp, #4]
	ldr r1, [sp, #8]
	add r0, r7, #0
	add r2, r5, #0
	add r3, r4, #0
	bl sub_0207E28C
_0207E39E:
	add r4, r4, #1
	cmp r4, r5
	blt _0207E374
_0207E3A4:
	add sp, #0x10
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_0207E358

	thumb_func_start sub_0207E3A8
sub_0207E3A8: ; 0x0207E3A8
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x20
	sub r1, r1, #1
	lsl r4, r1, #4
	ldr r1, _0207E538 ; =0x021016B4
	lsl r3, r3, #3
	add r1, r1, r4
	add r1, r3, r1
	ldrsb r1, [r2, r1]
	add r5, r0, #0
	ldr r0, _0207E53C ; =0x021015EC
	lsl r1, r1, #2
	add r4, r0, r1
	ldr r0, [sp, #0x38]
	cmp r0, #0
	bne _0207E3CE
	mov r2, #2
	lsl r2, r2, #0xc
	b _0207E3D8
_0207E3CE:
	cmp r0, #1
	bne _0207E3D6
	ldr r2, _0207E540 ; =0x00002009
	b _0207E3D8
_0207E3D6:
	ldr r2, _0207E544 ; =0x00002012
_0207E3D8:
	ldr r6, _0207E548 ; =0x021015AC
	mov r1, #0
	add r2, #0xa
	add r7, sp, #0x10
_0207E3E0:
	lsl r0, r1, #1
	ldrh r3, [r6, r0]
	add r3, r2, r3
	strh r3, [r7, r0]
	add r0, r1, #1
	lsl r0, r0, #0x10
	lsr r1, r0, #0x10
	cmp r1, #8
	blo _0207E3E0
	ldrb r0, [r4, #1]
	mov r1, #0
	add r2, r7, #0
	str r0, [sp]
	mov r0, #1
	str r0, [sp, #4]
	str r0, [sp, #8]
	ldrb r3, [r4]
	ldr r0, [r5]
	bl sub_0201C4C4
	ldrb r0, [r4, #1]
	add r2, sp, #0x10
	mov r1, #0
	str r0, [sp]
	mov r0, #1
	str r0, [sp, #4]
	str r0, [sp, #8]
	ldrb r6, [r4]
	ldrb r3, [r4, #2]
	ldr r0, [r5]
	add r2, #2
	add r3, r6, r3
	sub r3, r3, #1
	lsl r3, r3, #0x18
	lsr r3, r3, #0x18
	bl sub_0201C4C4
	ldrb r1, [r4, #1]
	ldrb r0, [r4, #3]
	add r2, sp, #0x14
	add r0, r1, r0
	sub r0, r0, #1
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	str r0, [sp]
	mov r0, #1
	str r0, [sp, #4]
	str r0, [sp, #8]
	ldrb r3, [r4]
	ldr r0, [r5]
	mov r1, #0
	bl sub_0201C4C4
	add r2, sp, #0x14
	ldrb r1, [r4, #1]
	ldrb r0, [r4, #3]
	add r2, #2
	add r0, r1, r0
	sub r0, r0, #1
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	str r0, [sp]
	mov r0, #1
	str r0, [sp, #4]
	str r0, [sp, #8]
	ldrb r6, [r4]
	ldrb r3, [r4, #2]
	ldr r0, [r5]
	mov r1, #0
	add r3, r6, r3
	sub r3, r3, #1
	lsl r3, r3, #0x18
	lsr r3, r3, #0x18
	bl sub_0201C4C4
	ldrb r0, [r4, #1]
	add r2, sp, #0x10
	mov r1, #0
	add r0, r0, #1
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	str r0, [sp]
	mov r0, #1
	str r0, [sp, #4]
	ldrb r0, [r4, #3]
	sub r0, r0, #2
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	str r0, [sp, #8]
	mov r0, #0x11
	str r0, [sp, #0xc]
	ldrh r2, [r2, #8]
	ldrb r3, [r4]
	ldr r0, [r5]
	bl FillBgTilemapRect
	ldrb r0, [r4, #1]
	add r2, sp, #0x10
	mov r1, #0
	add r0, r0, #1
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	str r0, [sp]
	mov r0, #1
	str r0, [sp, #4]
	ldrb r0, [r4, #3]
	sub r0, r0, #2
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	str r0, [sp, #8]
	mov r0, #0x11
	str r0, [sp, #0xc]
	ldrb r6, [r4]
	ldrb r3, [r4, #2]
	ldrh r2, [r2, #0xa]
	ldr r0, [r5]
	add r3, r6, r3
	sub r3, r3, #1
	lsl r3, r3, #0x18
	lsr r3, r3, #0x18
	bl FillBgTilemapRect
	ldrb r0, [r4, #1]
	add r2, sp, #0x10
	mov r1, #0
	str r0, [sp]
	ldrb r0, [r4, #2]
	sub r0, r0, #2
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	str r0, [sp, #4]
	mov r0, #1
	str r0, [sp, #8]
	mov r0, #0x11
	str r0, [sp, #0xc]
	ldrb r3, [r4]
	ldrh r2, [r2, #0xc]
	ldr r0, [r5]
	add r3, r3, #1
	lsl r3, r3, #0x18
	lsr r3, r3, #0x18
	bl FillBgTilemapRect
	ldrb r1, [r4, #1]
	ldrb r0, [r4, #3]
	add r2, sp, #0x10
	add r0, r1, r0
	sub r0, r0, #1
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	str r0, [sp]
	ldrb r0, [r4, #2]
	mov r1, #0
	sub r0, r0, #2
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	str r0, [sp, #4]
	mov r0, #1
	str r0, [sp, #8]
	mov r0, #0x11
	str r0, [sp, #0xc]
	ldrb r3, [r4]
	ldrh r2, [r2, #0xe]
	ldr r0, [r5]
	add r3, r3, #1
	lsl r3, r3, #0x18
	lsr r3, r3, #0x18
	bl FillBgTilemapRect
	add sp, #0x20
	pop {r3, r4, r5, r6, r7, pc}
	nop
_0207E538: .word 0x021016B4
_0207E53C: .word 0x021015EC
_0207E540: .word 0x00002009
_0207E544: .word 0x00002012
_0207E548: .word 0x021015AC
	thumb_func_end sub_0207E3A8

	thumb_func_start sub_0207E54C
sub_0207E54C: ; 0x0207E54C
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #8
	add r5, r1, #0
	add r6, r0, #0
	str r2, [sp, #4]
	add r7, r3, #0
	mov r4, #0
	cmp r5, #0
	ble _0207E58C
_0207E55E:
	ldr r0, [sp, #4]
	cmp r0, r4
	bne _0207E576
	mov r0, #1
	str r0, [sp]
	add r0, r6, #0
	add r1, r5, #0
	add r2, r4, #0
	add r3, r7, #0
	bl sub_0207E3A8
	b _0207E586
_0207E576:
	mov r0, #0
	str r0, [sp]
	add r0, r6, #0
	add r1, r5, #0
	add r2, r4, #0
	add r3, r7, #0
	bl sub_0207E3A8
_0207E586:
	add r4, r4, #1
	cmp r4, r5
	blt _0207E55E
_0207E58C:
	add sp, #8
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_0207E54C

	thumb_func_start sub_0207E590
sub_0207E590: ; 0x0207E590
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	add r6, r1, #0
	add r0, r3, #0
	mov r1, #0x10
	add r7, r2, #0
	bl AllocFromHeap
	add r4, r0, #0
	ldmia r6!, {r0, r1}
	add r2, r4, #4
	stmia r2!, {r0, r1}
	ldr r0, [r6]
	str r0, [r2]
	ldrb r0, [r4, #0xe]
	strb r0, [r4, #2]
	lsl r0, r7, #0x18
	lsr r0, r0, #0x18
	strb r0, [r4]
	strb r0, [r4, #1]
	ldr r0, [sp, #0x18]
	strb r0, [r4, #3]
	ldrb r1, [r4, #0xe]
	ldrb r2, [r4, #3]
	add r0, r5, #0
	bl sub_0207E17C
	ldrb r0, [r4, #3]
	add r1, r4, #4
	str r0, [sp]
	ldrb r2, [r4, #0xe]
	ldrb r3, [r4]
	add r0, r5, #0
	bl sub_0207E358
	bl sub_0207CB7C
	ldr r0, _0207E610 ; =0x00000684
	mov r1, #0
	ldr r0, [r5, r0]
	bl sub_02024830
	ldr r0, _0207E614 ; =0x00000654
	ldr r0, [r5, r0]
	add r0, #0x24
	ldrb r0, [r0]
	cmp r0, #2
	beq _0207E5FE
	cmp r0, #0x11
	beq _0207E5FE
	add r0, #0xea
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	cmp r0, #1
	bhi _0207E60A
_0207E5FE:
	mov r0, #0x1a
	lsl r0, r0, #6
	ldr r0, [r5, r0]
	mov r1, #0
	bl sub_02024830
_0207E60A:
	add r0, r4, #0
	pop {r3, r4, r5, r6, r7, pc}
	nop
_0207E610: .word 0x00000684
_0207E614: .word 0x00000654
	thumb_func_end sub_0207E590

	thumb_func_start sub_0207E618
sub_0207E618: ; 0x0207E618
	push {r3, r4, r5, lr}
	add r5, r1, #0
	ldrb r1, [r5, #2]
	ldrb r2, [r5, #3]
	add r4, r0, #0
	bl sub_0207E1DC
	add r0, r5, #0
	bl FreeToHeap
	ldr r0, _0207E67C ; =0x00000654
	ldr r1, [r4, r0]
	add r1, #0x24
	ldrb r1, [r1]
	cmp r1, #4
	beq _0207E63C
	cmp r1, #0x15
	bne _0207E648
_0207E63C:
	ldr r0, _0207E680 ; =0x00000684
	mov r1, #0
	ldr r0, [r4, r0]
	bl sub_02024830
	b _0207E652
_0207E648:
	add r0, #0x30
	ldr r0, [r4, r0]
	mov r1, #1
	bl sub_02024830
_0207E652:
	ldr r0, _0207E67C ; =0x00000654
	ldr r0, [r4, r0]
	add r0, #0x24
	ldrb r0, [r0]
	cmp r0, #2
	beq _0207E66C
	cmp r0, #0x11
	beq _0207E66C
	add r0, #0xea
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	cmp r0, #1
	bhi _0207E678
_0207E66C:
	mov r0, #0x1a
	lsl r0, r0, #6
	ldr r0, [r4, r0]
	mov r1, #1
	bl sub_02024830
_0207E678:
	pop {r3, r4, r5, pc}
	nop
_0207E67C: .word 0x00000654
_0207E680: .word 0x00000684
	thumb_func_end sub_0207E618

	thumb_func_start sub_0207E684
sub_0207E684: ; 0x0207E684
	push {r3, r4}
	sub r1, r1, #1
	ldr r4, _0207E6B0 ; =0x021016B4
	lsl r1, r1, #4
	mov r3, #0
	add r1, r4, r1
	lsl r0, r0, #3
	add r4, r1, r0
	add r0, r3, #0
_0207E696:
	ldrsb r1, [r4, r0]
	cmp r2, r1
	bne _0207E6A2
	mov r0, #1
	pop {r3, r4}
	bx lr
_0207E6A2:
	add r3, r3, #1
	add r4, r4, #1
	cmp r3, #8
	blt _0207E696
	mov r0, #0
	pop {r3, r4}
	bx lr
	.balign 4, 0
_0207E6B0: .word 0x021016B4
	thumb_func_end sub_0207E684

	thumb_func_start sub_0207E6B4
sub_0207E6B4: ; 0x0207E6B4
	push {r3, r4}
	sub r1, r1, #1
	ldr r4, _0207E6E4 ; =0x021016B4
	lsl r1, r1, #4
	mov r3, #0
	add r1, r4, r1
	lsl r0, r0, #3
	add r4, r1, r0
	add r0, r3, #0
_0207E6C6:
	ldrsb r1, [r4, r0]
	cmp r2, r1
	bne _0207E6D2
	add r0, r3, #0
	pop {r3, r4}
	bx lr
_0207E6D2:
	add r3, r3, #1
	add r4, r4, #1
	cmp r3, #8
	blt _0207E6C6
	mov r0, #0
	mvn r0, r0
	pop {r3, r4}
	bx lr
	nop
_0207E6E4: .word 0x021016B4
	thumb_func_end sub_0207E6B4

	thumb_func_start sub_0207E6E8
sub_0207E6E8: ; 0x0207E6E8
	push {r3, r4}
	sub r1, r1, #1
	lsl r4, r1, #4
	ldr r3, _0207E710 ; =0x021016B4
	lsl r1, r0, #3
	add r0, r3, r4
	add r0, r1, r0
	ldrsb r1, [r2, r0]
	mov r0, #0
	mvn r0, r0
	cmp r1, r0
	beq _0207E70A
	cmp r1, #7
	beq _0207E70A
	mov r0, #1
	pop {r3, r4}
	bx lr
_0207E70A:
	mov r0, #0
	pop {r3, r4}
	bx lr
	.balign 4, 0
_0207E710: .word 0x021016B4
	thumb_func_end sub_0207E6E8

	thumb_func_start sub_0207E714
sub_0207E714: ; 0x0207E714
	push {r3, r4, r5, r6}
	sub r3, r1, #2
	add r6, r3, #0
	ldrb r3, [r0]
	mov r1, #0x60
	mul r6, r1
	ldr r4, _0207E744 ; =0x02110244
	add r5, r3, #0
	mov r1, #0xc
	mul r5, r1
	add r4, r4, r6
	lsl r3, r2, #2
	add r2, r5, r4
	ldr r2, [r3, r2]
	sub r1, #0xd
	cmp r2, r1
	beq _0207E73E
	strb r2, [r0]
	mov r0, #1
	pop {r3, r4, r5, r6}
	bx lr
_0207E73E:
	mov r0, #0
	pop {r3, r4, r5, r6}
	bx lr
	.balign 4, 0
_0207E744: .word 0x02110244
	thumb_func_end sub_0207E714

	thumb_func_start sub_0207E748
sub_0207E748: ; 0x0207E748
	push {r3, r4, r5, r6}
	sub r3, r1, #2
	add r6, r3, #0
	ldrb r3, [r0]
	mov r1, #0x28
	mul r6, r1
	ldr r4, _0207E774 ; =0x021101A4
	lsl r5, r3, #3
	add r4, r4, r6
	lsl r3, r2, #2
	add r2, r5, r4
	ldr r2, [r3, r2]
	sub r1, #0x29
	cmp r2, r1
	beq _0207E76E
	strb r2, [r0]
	mov r0, #1
	pop {r3, r4, r5, r6}
	bx lr
_0207E76E:
	mov r0, #0
	pop {r3, r4, r5, r6}
	bx lr
	.balign 4, 0
_0207E774: .word 0x021101A4
	thumb_func_end sub_0207E748

	thumb_func_start sub_0207E778
sub_0207E778: ; 0x0207E778
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #8
	add r5, r1, #0
	mov r1, #0xc9
	add r6, r0, #0
	lsl r1, r1, #4
	add r7, r6, r1
	ldr r1, [r7, #0xc]
	mov r4, #0
	cmp r1, #1
	bne _0207E7A2
	bl sub_0207CC24
	cmp r0, #0
	bne _0207E79C
	add sp, #8
	ldr r0, [r7, #8]
	pop {r3, r4, r5, r6, r7, pc}
_0207E79C:
	add sp, #8
	sub r0, r4, #1
	pop {r3, r4, r5, r6, r7, pc}
_0207E7A2:
	ldr r0, _0207E930 ; =0x02110180
	bl sub_02025224
	add r7, r0, #0
	sub r0, r4, #1
	cmp r7, r0
	beq _0207E81E
	ldrb r0, [r5, #3]
	ldrb r1, [r5, #2]
	add r2, r7, #0
	bl sub_0207E684
	cmp r0, #1
	beq _0207E7C0
	b _0207E900
_0207E7C0:
	cmp r7, #7
	bne _0207E7CE
	mov r0, #0x25
	lsl r0, r0, #6
	bl PlaySE
	b _0207E7D4
_0207E7CE:
	ldr r0, _0207E934 ; =0x000005DC
	bl PlaySE
_0207E7D4:
	mov r0, #0
	str r0, [sp]
	ldrb r1, [r5, #2]
	ldrb r2, [r5, #1]
	ldrb r3, [r5, #3]
	add r0, r6, #0
	bl sub_0207E3A8
	ldrb r0, [r5, #3]
	add r1, r5, #4
	str r0, [sp]
	mov r0, #0
	str r0, [sp, #4]
	ldrb r2, [r5, #2]
	ldrb r3, [r5, #1]
	add r0, r6, #0
	bl sub_0207E28C
	ldrb r0, [r5, #3]
	ldrb r1, [r5, #2]
	add r2, r7, #0
	bl sub_0207E6B4
	strb r0, [r5, #1]
	ldrb r2, [r5, #1]
	ldr r3, [r5, #4]
	add r0, r6, #0
	lsl r2, r2, #3
	add r2, r3, r2
	ldr r2, [r2, #4]
	add r1, r5, #0
	bl sub_0207CB9C
	mov r0, #0
	add sp, #8
	mvn r0, r0
	pop {r3, r4, r5, r6, r7, pc}
_0207E81E:
	ldr r0, _0207E938 ; =gMain
	mov r2, #0x40
	ldr r1, [r0, #0x4c]
	tst r2, r1
	beq _0207E83A
	ldrb r1, [r5, #2]
	add r0, r5, #1
	add r2, r4, #0
	bl sub_0207E714
	cmp r0, #0
	beq _0207E900
	add r4, r4, #1
	b _0207E900
_0207E83A:
	mov r2, #0x80
	tst r2, r1
	beq _0207E852
	ldrb r1, [r5, #2]
	add r0, r5, #1
	mov r2, #1
	bl sub_0207E714
	cmp r0, #0
	beq _0207E900
	add r4, r4, #1
	b _0207E900
_0207E852:
	mov r2, #0x20
	tst r2, r1
	bne _0207E85E
	mov r2, #0x10
	tst r1, r2
	beq _0207E870
_0207E85E:
	ldrb r1, [r5, #2]
	add r0, r5, #1
	mov r2, #2
	bl sub_0207E714
	cmp r0, #0
	beq _0207E900
	add r4, r4, #1
	b _0207E900
_0207E870:
	ldr r1, [r0, #0x48]
	mov r0, #1
	tst r0, r1
	beq _0207E8B2
	ldrb r0, [r5, #3]
	ldrb r1, [r5, #2]
	mov r2, #7
	bl sub_0207E6B4
	ldrb r1, [r5, #1]
	cmp r1, r0
	bne _0207E892
	mov r0, #0x25
	lsl r0, r0, #6
	bl PlaySE
	b _0207E898
_0207E892:
	ldr r0, _0207E934 ; =0x000005DC
	bl PlaySE
_0207E898:
	ldrb r2, [r5, #1]
	ldr r3, [r5, #4]
	add r0, r6, #0
	lsl r2, r2, #3
	add r2, r3, r2
	ldr r2, [r2, #4]
	add r1, r5, #0
	bl sub_0207CB9C
	mov r0, #0
	add sp, #8
	mvn r0, r0
	pop {r3, r4, r5, r6, r7, pc}
_0207E8B2:
	mov r0, #2
	tst r0, r1
	beq _0207E900
	mov r0, #0x25
	lsl r0, r0, #6
	bl PlaySE
	add r0, r4, #0
	str r0, [sp]
	ldrb r1, [r5, #2]
	ldrb r2, [r5, #1]
	ldrb r3, [r5, #3]
	add r0, r6, #0
	bl sub_0207E3A8
	ldrb r0, [r5, #3]
	add r1, r5, #4
	str r0, [sp]
	add r0, r4, #0
	str r0, [sp, #4]
	ldrb r2, [r5, #2]
	ldrb r3, [r5, #1]
	add r0, r6, #0
	bl sub_0207E28C
	ldrb r0, [r5, #3]
	ldrb r1, [r5, #2]
	mov r2, #7
	bl sub_0207E6B4
	strb r0, [r5, #1]
	add r0, r6, #0
	add r1, r5, #0
	sub r2, r4, #2
	bl sub_0207CB9C
	add sp, #8
	sub r0, r4, #1
	pop {r3, r4, r5, r6, r7, pc}
_0207E900:
	cmp r4, #0
	beq _0207E926
	ldr r0, _0207E934 ; =0x000005DC
	bl PlaySE
	ldrb r1, [r5, #2]
	ldrb r2, [r5, #1]
	ldrb r3, [r5, #3]
	add r0, r6, #0
	bl sub_0207E54C
	ldrb r0, [r5, #3]
	add r1, r5, #4
	str r0, [sp]
	ldrb r2, [r5, #2]
	ldrb r3, [r5, #1]
	add r0, r6, #0
	bl sub_0207E358
_0207E926:
	mov r0, #0
	mvn r0, r0
	add sp, #8
	pop {r3, r4, r5, r6, r7, pc}
	nop
_0207E930: .word 0x02110180
_0207E934: .word 0x000005DC
_0207E938: .word gMain
	thumb_func_end sub_0207E778

	thumb_func_start sub_0207E93C
sub_0207E93C: ; 0x0207E93C
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #8
	add r4, r1, #0
	mov r1, #0xc9
	add r5, r0, #0
	lsl r1, r1, #4
	add r7, r5, r1
	ldr r1, [r7, #0xc]
	mov r6, #0
	cmp r1, #1
	bne _0207E966
	bl sub_0207CC24
	cmp r0, #0
	bne _0207E960
	add sp, #8
	ldr r0, [r7, #8]
	pop {r3, r4, r5, r6, r7, pc}
_0207E960:
	add sp, #8
	sub r0, r6, #1
	pop {r3, r4, r5, r6, r7, pc}
_0207E966:
	ldr r0, _0207EB18 ; =0x02110168
	bl sub_02025224
	add r7, r0, #0
	sub r0, r6, #1
	cmp r7, r0
	beq _0207EA0E
	cmp r7, #4
	bne _0207E9BA
	mov r0, #0x25
	lsl r0, r0, #6
	bl PlaySE
	add r0, r6, #0
	str r0, [sp]
	ldrb r1, [r4, #2]
	ldrb r2, [r4, #1]
	ldrb r3, [r4, #3]
	add r0, r5, #0
	bl sub_0207E3A8
	ldrb r0, [r4, #3]
	add r1, r4, #4
	str r0, [sp]
	add r0, r6, #0
	str r0, [sp, #4]
	ldrb r2, [r4, #2]
	ldrb r3, [r4, #1]
	add r0, r5, #0
	bl sub_0207E28C
	ldrb r0, [r4, #2]
	add r1, r4, #0
	sub r2, r6, #2
	sub r0, r0, #1
	strb r0, [r4, #1]
	add r0, r5, #0
	bl sub_0207CB9C
	add sp, #8
	sub r0, r6, #1
	pop {r3, r4, r5, r6, r7, pc}
_0207E9BA:
	ldrb r0, [r4, #3]
	ldrb r1, [r4, #2]
	add r2, r7, #0
	bl sub_0207E6E8
	cmp r0, #1
	beq _0207E9CA
	b _0207EAEA
_0207E9CA:
	ldr r0, _0207EB1C ; =0x000005DC
	bl PlaySE
	add r0, r6, #0
	str r0, [sp]
	ldrb r1, [r4, #2]
	ldrb r2, [r4, #1]
	ldrb r3, [r4, #3]
	add r0, r5, #0
	bl sub_0207E3A8
	ldrb r0, [r4, #3]
	add r1, r4, #4
	str r0, [sp]
	add r0, r6, #0
	str r0, [sp, #4]
	ldrb r2, [r4, #2]
	ldrb r3, [r4, #1]
	add r0, r5, #0
	bl sub_0207E28C
	strb r7, [r4, #1]
	ldrb r2, [r4, #1]
	ldr r3, [r4, #4]
	add r0, r5, #0
	lsl r2, r2, #3
	add r2, r3, r2
	ldr r2, [r2, #4]
	add r1, r4, #0
	bl sub_0207CB9C
	add sp, #8
	sub r0, r6, #1
	pop {r3, r4, r5, r6, r7, pc}
_0207EA0E:
	ldr r2, _0207EB20 ; =gMain
	mov r1, #0x40
	ldr r0, [r2, #0x4c]
	tst r1, r0
	beq _0207EA2A
	ldrb r1, [r4, #2]
	add r0, r4, #1
	add r2, r6, #0
	bl sub_0207E748
	cmp r0, #0
	beq _0207EAEA
	add r6, r6, #1
	b _0207EAEA
_0207EA2A:
	mov r1, #0x80
	tst r0, r1
	beq _0207EA42
	ldrb r1, [r4, #2]
	add r0, r4, #1
	mov r2, #1
	bl sub_0207E748
	cmp r0, #0
	beq _0207EAEA
	add r6, r6, #1
	b _0207EAEA
_0207EA42:
	ldr r1, [r2, #0x48]
	mov r0, #1
	tst r0, r1
	beq _0207EAA2
	ldrb r0, [r4, #2]
	ldrb r1, [r4, #1]
	sub r0, r0, #1
	cmp r1, r0
	bne _0207EA5E
	mov r0, #0x25
	lsl r0, r0, #6
	bl PlaySE
	b _0207EA64
_0207EA5E:
	ldr r0, _0207EB1C ; =0x000005DC
	bl PlaySE
_0207EA64:
	mov r0, #0
	str r0, [sp]
	ldrb r1, [r4, #2]
	ldrb r2, [r4, #1]
	ldrb r3, [r4, #3]
	add r0, r5, #0
	bl sub_0207E3A8
	ldrb r0, [r4, #3]
	add r1, r4, #4
	str r0, [sp]
	mov r0, #0
	str r0, [sp, #4]
	ldrb r2, [r4, #2]
	ldrb r3, [r4, #1]
	add r0, r5, #0
	bl sub_0207E28C
	ldrb r2, [r4, #1]
	ldr r3, [r4, #4]
	add r0, r5, #0
	lsl r2, r2, #3
	add r2, r3, r2
	ldr r2, [r2, #4]
	add r1, r4, #0
	bl sub_0207CB9C
	mov r0, #0
	add sp, #8
	mvn r0, r0
	pop {r3, r4, r5, r6, r7, pc}
_0207EAA2:
	mov r0, #2
	tst r0, r1
	beq _0207EAEA
	mov r0, #0x25
	lsl r0, r0, #6
	bl PlaySE
	add r0, r6, #0
	str r0, [sp]
	ldrb r1, [r4, #2]
	ldrb r2, [r4, #1]
	ldrb r3, [r4, #3]
	add r0, r5, #0
	bl sub_0207E3A8
	ldrb r0, [r4, #3]
	add r1, r4, #4
	str r0, [sp]
	add r0, r6, #0
	str r0, [sp, #4]
	ldrb r2, [r4, #2]
	ldrb r3, [r4, #1]
	add r0, r5, #0
	bl sub_0207E28C
	ldrb r0, [r4, #2]
	add r1, r4, #0
	sub r2, r6, #2
	sub r0, r0, #1
	strb r0, [r4, #1]
	add r0, r5, #0
	bl sub_0207CB9C
	add sp, #8
	sub r0, r6, #1
	pop {r3, r4, r5, r6, r7, pc}
_0207EAEA:
	cmp r6, #0
	beq _0207EB10
	ldr r0, _0207EB1C ; =0x000005DC
	bl PlaySE
	ldrb r1, [r4, #2]
	ldrb r2, [r4, #1]
	ldrb r3, [r4, #3]
	add r0, r5, #0
	bl sub_0207E54C
	ldrb r0, [r4, #3]
	add r1, r4, #4
	str r0, [sp]
	ldrb r2, [r4, #2]
	ldrb r3, [r4, #1]
	add r0, r5, #0
	bl sub_0207E358
_0207EB10:
	mov r0, #0
	mvn r0, r0
	add sp, #8
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_0207EB18: .word 0x02110168
_0207EB1C: .word 0x000005DC
_0207EB20: .word gMain
	thumb_func_end sub_0207E93C

	thumb_func_start sub_0207EB24
sub_0207EB24: ; 0x0207EB24
	push {r4, r5, r6, r7, lr}
	sub sp, #0x44
	add r4, r0, #0
	mov r0, #0x10
	mov r1, #1
	bl GX_EngineAToggleLayers
	mov r0, #0x10
	mov r1, #1
	bl sub_02022CC8
	mov r0, #0x20
	mov r1, #0xc
	bl sub_0202055C
	mov r0, #0xc
	bl sub_0200CF18
	ldr r1, _0207EBD0 ; =0x00000658
	str r0, [r4, r1]
	ldr r0, [r4, r1]
	bl sub_0200CF38
	ldr r7, _0207EBD4 ; =0x0000065C
	add r2, sp, #0x24
	ldr r3, _0207EBD8 ; =0x021018D8
	str r0, [r4, r7]
	ldmia r3!, {r0, r1}
	add r6, r2, #0
	stmia r2!, {r0, r1}
	ldmia r3!, {r0, r1}
	stmia r2!, {r0, r1}
	ldmia r3!, {r0, r1}
	stmia r2!, {r0, r1}
	ldmia r3!, {r0, r1}
	ldr r5, _0207EBDC ; =0x021018C4
	stmia r2!, {r0, r1}
	add r3, sp, #0x10
	ldmia r5!, {r0, r1}
	add r2, r3, #0
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldr r0, [r5]
	add r1, r6, #0
	str r0, [r3]
	sub r0, r7, #4
	ldr r0, [r4, r0]
	mov r3, #0x20
	bl sub_0200CF70
	sub r1, r7, #4
	ldr r0, [r4, r1]
	add r1, r1, #4
	ldr r1, [r4, r1]
	mov r2, #0x31
	bl sub_0200CFF4
	sub r0, r7, #4
	ldr r0, [r4, r0]
	bl sub_0200CF6C
	mov r2, #1
	mov r1, #0
	lsl r2, r2, #0x14
	bl sub_02009FC8
	ldr r3, _0207EBE0 ; =0x021018B4
	add r2, sp, #0
	mov r1, #7
_0207EBB0:
	ldrh r0, [r3]
	add r3, r3, #2
	strh r0, [r2]
	add r2, r2, #2
	sub r1, r1, #1
	bne _0207EBB0
	ldr r1, _0207EBD0 ; =0x00000658
	add r2, sp, #0
	ldr r0, [r4, r1]
	add r1, r1, #4
	ldr r1, [r4, r1]
	bl sub_0200D294
	add sp, #0x44
	pop {r4, r5, r6, r7, pc}
	nop
_0207EBD0: .word 0x00000658
_0207EBD4: .word 0x0000065C
_0207EBD8: .word 0x021018D8
_0207EBDC: .word 0x021018C4
_0207EBE0: .word 0x021018B4
	thumb_func_end sub_0207EB24

	thumb_func_start sub_0207EBE4
sub_0207EBE4: ; 0x0207EBE4
	push {r4, r5, r6, r7, lr}
	sub sp, #0x44
	add r5, r0, #0
	ldr r0, _0207ECCC ; =0x00000654
	str r3, [sp, #8]
	ldr r0, [r5, r0]
	add r4, r2, #0
	ldr r0, [r0]
	add r7, r1, #0
	bl GetPartyMonByIndex
	lsl r1, r4, #0x10
	asr r6, r1, #0x10
	add r4, r7, #0
	mov r1, #0x30
	mul r4, r1
	ldr r2, _0207ECD0 ; =0x0000083E
	add r3, r5, r4
	strh r6, [r3, r2]
	ldr r1, [sp, #8]
	add r2, r2, #2
	lsl r1, r1, #0x10
	asr r1, r1, #0x10
	str r1, [sp, #0xc]
	ldr r1, [sp, #0xc]
	str r0, [sp, #0x10]
	strh r1, [r3, r2]
	add r7, r7, #4
	bl sub_020741B0
	add r3, r0, #0
	mov r0, #0
	str r0, [sp]
	ldr r1, _0207ECD4 ; =0x00000658
	str r7, [sp, #4]
	ldr r0, [r5, r1]
	add r1, r1, #4
	ldr r1, [r5, r1]
	ldr r2, [sp, #0x58]
	bl sub_0200E2B8
	ldr r0, [sp, #0x10]
	mov r1, #0x4c
	mov r2, #0
	bl GetMonData
	str r0, [sp, #0x14]
	str r7, [sp, #0x1c]
	add r1, sp, #0x1c
	strh r6, [r1, #4]
	ldr r0, [sp, #0xc]
	ldr r2, [sp, #0x14]
	strh r0, [r1, #6]
	mov r0, #0
	strh r0, [r1, #8]
	strh r0, [r1, #0xa]
	str r0, [sp, #0x28]
	ldr r0, _0207ECD8 ; =0x00000839
	add r7, r5, r0
	sub r0, #0xd
	add r0, r5, r0
	str r0, [sp, #0x18]
	ldrh r0, [r0, r4]
	ldrb r1, [r7, r4]
	bl sub_02074364
	add r0, r0, #3
	str r0, [sp, #0x2c]
	mov r0, #1
	str r0, [sp, #0x30]
	mov r0, #0
	ldr r1, _0207ECD4 ; =0x00000658
	str r0, [sp, #0x34]
	str r0, [sp, #0x38]
	str r0, [sp, #0x3c]
	str r0, [sp, #0x40]
	ldr r0, [r5, r1]
	add r1, r1, #4
	ldr r1, [r5, r1]
	add r2, sp, #0x1c
	bl sub_0200D2B4
	ldr r1, _0207ECDC ; =0x0000084C
	add r2, r5, r4
	str r0, [r2, r1]
	mov r0, #1
	str r0, [sp, #0x30]
	ldr r0, [sp, #0x18]
	ldrb r1, [r7, r4]
	ldrh r0, [r0, r4]
	ldr r2, [sp, #0x14]
	bl sub_02074364
	add r0, r0, #1
	str r0, [sp, #0x2c]
	add r2, sp, #0x1c
	strh r6, [r2, #4]
	mov r1, #1
	ldr r0, [sp, #8]
	lsl r1, r1, #8
	add r0, r0, r1
	strh r0, [r2, #6]
	ldr r1, _0207ECD4 ; =0x00000658
	add r2, sp, #0x1c
	ldr r0, [r5, r1]
	add r1, r1, #4
	ldr r1, [r5, r1]
	bl sub_0200D2B4
	mov r1, #0x85
	add r2, r5, r4
	lsl r1, r1, #4
	str r0, [r2, r1]
	add sp, #0x44
	pop {r4, r5, r6, r7, pc}
	nop
_0207ECCC: .word 0x00000654
_0207ECD0: .word 0x0000083E
_0207ECD4: .word 0x00000658
_0207ECD8: .word 0x00000839
_0207ECDC: .word 0x0000084C
	thumb_func_end sub_0207EBE4

	thumb_func_start sub_0207ECE0
sub_0207ECE0: ; 0x0207ECE0
	push {r4, r5, r6, r7, lr}
	sub sp, #0x1c
	add r5, r0, #0
	ldr r0, _0207EDCC ; =0x00000654
	add r6, r1, #0
	ldr r0, [r5, r0]
	ldr r0, [r0]
	bl GetPartyMonByIndex
	add r7, r0, #0
	mov r1, #5
	mov r2, #0
	bl GetMonData
	str r0, [sp, #0xc]
	add r0, r7, #0
	mov r1, #0x70
	mov r2, #0
	bl GetMonData
	str r0, [sp, #8]
	mov r0, #0x14
	mov r1, #0xc
	bl NARC_ctor
	str r0, [sp, #0x10]
	mov r0, #0x30
	add r4, r6, #0
	mul r4, r0
	ldr r0, _0207EDD0 ; =0x0000084C
	add r6, r5, r0
	ldr r0, [r6, r4]
	bl sub_02024B1C
	mov r1, #1
	bl sub_020B802C
	str r0, [sp, #0x14]
	add r0, r7, #0
	bl sub_020741B0
	add r1, r0, #0
	mov r0, #1
	str r0, [sp]
	ldr r0, [sp, #0x10]
	mov r2, #0
	mov r3, #0xc
	bl sub_02007C98
	add r1, sp, #0x18
	str r0, [sp, #4]
	bl NNS_G2dGetUnpackedCharacterData
	cmp r0, #0
	beq _0207ED8E
	ldr r1, [sp, #0x18]
	ldr r0, [r1, #0x14]
	ldr r1, [r1, #0x10]
	bl DC_FlushRange
	ldr r2, [sp, #0x18]
	ldr r1, [sp, #0x14]
	ldr r0, [r2, #0x14]
	ldr r2, [r2, #0x10]
	bl sub_020CFE74
	mov r0, #0x85
	add r1, r5, r4
	lsl r0, r0, #4
	ldr r0, [r1, r0]
	bl sub_02024B1C
	mov r1, #2
	bl sub_020B802C
	ldr r1, [sp, #0x18]
	add r7, r0, #0
	ldr r0, [r1, #0x14]
	ldr r1, [r1, #0x10]
	bl DC_FlushRange
	ldr r2, [sp, #0x18]
	add r1, r7, #0
	ldr r0, [r2, #0x14]
	ldr r2, [r2, #0x10]
	bl sub_020CFECC
_0207ED8E:
	ldr r0, [sp, #4]
	bl FreeToHeap
	ldr r0, [sp, #0xc]
	ldr r1, [sp, #8]
	mov r2, #0
	bl sub_02074364
	add r1, r0, #0
	ldr r0, [r6, r4]
	add r1, r1, #3
	bl sub_0200DD08
	ldr r0, [sp, #0xc]
	ldr r1, [sp, #8]
	mov r2, #0
	bl sub_02074364
	add r2, r0, #0
	mov r0, #0x85
	add r1, r5, r4
	lsl r0, r0, #4
	ldr r0, [r1, r0]
	add r1, r2, #1
	bl sub_0200DD08
	ldr r0, [sp, #0x10]
	bl NARC_dtor
	add sp, #0x1c
	pop {r4, r5, r6, r7, pc}
	.balign 4, 0
_0207EDCC: .word 0x00000654
_0207EDD0: .word 0x0000084C
	thumb_func_end sub_0207ECE0

	thumb_func_start sub_0207EDD4
sub_0207EDD4: ; 0x0207EDD4
	push {r4, r5, r6, r7, lr}
	sub sp, #0x14
	ldr r1, _0207EF1C ; =0x00000658
	add r5, r0, #0
	ldr r0, [r5, r1]
	add r1, r1, #4
	ldr r1, [r5, r1]
	ldr r2, _0207EF20 ; =0x021018F8
	bl sub_0200D2B4
	ldr r1, _0207EF24 ; =0x00000678
	ldr r2, _0207EF28 ; =0x02101920
	str r0, [r5, r1]
	add r0, r1, #0
	sub r0, #0x20
	sub r1, #0x1c
	ldr r0, [r5, r0]
	ldr r1, [r5, r1]
	bl sub_0200D2B4
	ldr r1, _0207EF2C ; =0x0000067C
	ldr r2, _0207EF30 ; =0x02101948
	str r0, [r5, r1]
	add r0, r1, #0
	sub r0, #0x24
	sub r1, #0x20
	ldr r0, [r5, r0]
	ldr r1, [r5, r1]
	bl sub_0200D2B4
	mov r1, #0x1a
	lsl r1, r1, #6
	str r0, [r5, r1]
	add r0, r1, #0
	sub r0, #0x28
	sub r1, #0x24
	ldr r0, [r5, r0]
	ldr r1, [r5, r1]
	ldr r2, _0207EF34 ; =0x02101970
	bl sub_0200D2B4
	ldr r1, _0207EF38 ; =0x00000684
	ldr r2, _0207EF3C ; =0x02101C68
	str r0, [r5, r1]
	add r0, r1, #0
	sub r0, #0x2c
	sub r1, #0x28
	ldr r0, [r5, r0]
	ldr r1, [r5, r1]
	bl sub_0200D2B4
	mov r1, #0x6d
	lsl r1, r1, #4
	str r0, [r5, r1]
	ldr r0, _0207EF20 ; =0x021018F8
	mov r4, #0
	str r4, [sp, #4]
	add r6, r5, #0
	str r0, [sp]
	add r7, r5, #0
	str r0, [sp, #8]
	str r0, [sp, #0xc]
	str r0, [sp, #0x10]
_0207EE52:
	ldr r0, _0207EF1C ; =0x00000658
	ldr r1, _0207EF40 ; =0x0000065C
	add r3, r4, #0
	ldr r2, [sp, #8]
	add r3, #0xa0
	ldr r0, [r5, r0]
	ldr r1, [r5, r1]
	add r2, r2, r3
	bl sub_0200D2B4
	ldr r1, _0207EF44 ; =0x00000688
	str r0, [r6, r1]
	ldr r1, [sp]
	mov r0, #0xa4
	ldrsh r1, [r1, r0]
	ldr r0, _0207EF48 ; =0x00000842
	strh r1, [r7, r0]
	ldr r1, [sp]
	mov r0, #0xa6
	ldrsh r1, [r1, r0]
	ldr r0, _0207EF4C ; =0x00000844
	strh r1, [r7, r0]
	ldr r0, _0207EF44 ; =0x00000688
	mov r1, #0
	ldr r0, [r6, r0]
	bl sub_02024830
	mov r2, #0x19
	ldr r0, _0207EF1C ; =0x00000658
	ldr r1, _0207EF40 ; =0x0000065C
	lsl r2, r2, #4
	add r3, r4, r2
	ldr r2, [sp, #0xc]
	ldr r0, [r5, r0]
	ldr r1, [r5, r1]
	add r2, r2, r3
	bl sub_0200D2B4
	mov r1, #0x6a
	lsl r1, r1, #4
	mov r2, #0xa
	str r0, [r6, r1]
	add r0, r1, #0
	lsl r2, r2, #6
	sub r0, #0x48
	sub r1, #0x44
	add r3, r4, r2
	ldr r2, [sp, #0x10]
	ldr r0, [r5, r0]
	ldr r1, [r5, r1]
	add r2, r2, r3
	bl sub_0200D2B4
	ldr r1, _0207EF50 ; =0x000006B8
	add r4, #0x28
	str r0, [r6, r1]
	ldr r0, [sp]
	add r6, r6, #4
	add r0, #0x28
	str r0, [sp]
	ldr r0, [sp, #4]
	add r7, #0x30
	add r0, r0, #1
	str r0, [sp, #4]
	cmp r0, #6
	blo _0207EE52
	add r7, r1, #0
	mov r6, #0
	add r4, r5, #0
	add r7, #0x90
_0207EEDE:
	ldr r0, _0207EF1C ; =0x00000658
	ldr r1, _0207EF40 ; =0x0000065C
	ldr r0, [r5, r0]
	ldr r1, [r5, r1]
	ldr r2, _0207EF54 ; =0x02101C90
	bl sub_0200D2B4
	ldr r1, _0207EF58 ; =0x00000748
	str r0, [r4, r1]
	ldr r0, [r4, r7]
	mov r1, #0
	bl sub_02024830
	add r6, r6, #1
	add r4, r4, #4
	cmp r6, #6
	blo _0207EEDE
	ldr r0, _0207EF2C ; =0x0000067C
	mov r1, #0
	ldr r0, [r5, r0]
	bl sub_02024830
	mov r0, #0x6d
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	mov r1, #0
	bl sub_02024830
	add sp, #0x14
	pop {r4, r5, r6, r7, pc}
	nop
_0207EF1C: .word 0x00000658
_0207EF20: .word 0x021018F8
_0207EF24: .word 0x00000678
_0207EF28: .word 0x02101920
_0207EF2C: .word 0x0000067C
_0207EF30: .word 0x02101948
_0207EF34: .word 0x02101970
_0207EF38: .word 0x00000684
_0207EF3C: .word 0x02101C68
_0207EF40: .word 0x0000065C
_0207EF44: .word 0x00000688
_0207EF48: .word 0x00000842
_0207EF4C: .word 0x00000844
_0207EF50: .word 0x000006B8
_0207EF54: .word 0x02101C90
_0207EF58: .word 0x00000748
	thumb_func_end sub_0207EDD4

	thumb_func_start sub_0207EF5C
sub_0207EF5C: ; 0x0207EF5C
	push {r3, r4, r5, lr}
	sub sp, #0x28
	add r4, r1, #0
	mov r1, #0
	add r5, r0, #0
	str r1, [sp]
	add r0, sp, #0
	strh r2, [r0, #4]
	strh r3, [r0, #6]
	strh r1, [r0, #8]
	strh r1, [r0, #0xa]
	mov r0, #1
	str r1, [sp, #0x10]
	str r1, [sp, #0x18]
	str r1, [sp, #0x1c]
	str r1, [sp, #0x20]
	str r1, [sp, #0x24]
	ldr r1, _0207EFA0 ; =0x00000658
	str r0, [sp, #0xc]
	str r0, [sp, #0x14]
	ldr r0, [r5, r1]
	add r1, r1, #4
	ldr r1, [r5, r1]
	add r2, sp, #0
	bl sub_0200D2B4
	lsl r1, r4, #2
	add r2, r5, r1
	mov r1, #0x66
	lsl r1, r1, #4
	str r0, [r2, r1]
	add sp, #0x28
	pop {r3, r4, r5, pc}
	nop
_0207EFA0: .word 0x00000658
	thumb_func_end sub_0207EF5C

	thumb_func_start sub_0207EFA4
sub_0207EFA4: ; 0x0207EFA4
	push {r4, lr}
	ldr r1, _0207EFC0 ; =0x00000658
	add r4, r0, #0
	ldr r0, [r4, r1]
	add r1, r1, #4
	ldr r1, [r4, r1]
	bl sub_0200D0E4
	ldr r0, _0207EFC0 ; =0x00000658
	ldr r0, [r4, r0]
	bl sub_0200D108
	pop {r4, pc}
	nop
_0207EFC0: .word 0x00000658
	thumb_func_end sub_0207EFA4

	thumb_func_start sub_0207EFC4
sub_0207EFC4: ; 0x0207EFC4
	push {r3, r4, r5, r6, r7, lr}
	add r6, r2, #0
	mov r2, #0x66
	lsl r2, r2, #4
	add r3, r1, #0
	add r5, r0, r2
	add r3, #0xa
	add r2, #0xe8
	add r7, r0, r2
	lsl r0, r1, #2
	lsl r4, r3, #2
	str r0, [sp]
	cmp r6, #7
	ldr r0, [r5, r4]
	bne _0207EFEA
	mov r1, #0
	bl sub_02024830
	pop {r3, r4, r5, r6, r7, pc}
_0207EFEA:
	add r1, r6, #0
	bl sub_020248F0
	ldr r0, [sp]
	add r1, r6, #0
	ldr r0, [r7, r0]
	bl sub_020248F0
	ldr r0, [r5, r4]
	mov r1, #1
	bl sub_02024830
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_0207EFC4

	thumb_func_start sub_0207F004
sub_0207F004: ; 0x0207F004
	push {r3, r4, r5, lr}
	mov r3, #0x66
	lsl r3, r3, #4
	add r1, #0x10
	add r5, r0, r3
	lsl r4, r1, #2
	cmp r2, #0
	bne _0207F01E
	ldr r0, [r5, r4]
	mov r1, #0
	bl sub_02024830
	pop {r3, r4, r5, pc}
_0207F01E:
	add r0, r2, #0
	bl sub_02078068
	cmp r0, #1
	ldr r0, [r5, r4]
	bne _0207F032
	mov r1, #1
	bl sub_020248F0
	b _0207F038
_0207F032:
	mov r1, #0
	bl sub_020248F0
_0207F038:
	ldr r0, [r5, r4]
	mov r1, #1
	bl sub_02024830
	pop {r3, r4, r5, pc}
	.balign 4, 0
	thumb_func_end sub_0207F004

	thumb_func_start sub_0207F044
sub_0207F044: ; 0x0207F044
	push {r3, r4, r5, lr}
	mov r2, #0x66
	lsl r2, r2, #4
	add r1, #0x10
	lsl r4, r1, #2
	add r5, r0, r2
	ldr r0, [r5, r4]
	mov r1, #1
	bl sub_020248F0
	ldr r0, [r5, r4]
	mov r1, #1
	bl sub_02024830
	pop {r3, r4, r5, pc}
	.balign 4, 0
	thumb_func_end sub_0207F044

	thumb_func_start sub_0207F064
sub_0207F064: ; 0x0207F064
	push {r4, r5, r6, lr}
	ldr r6, _0207F094 ; =0x00000846
	add r5, r1, #0
	mov r4, #0x30
	mul r5, r4
	add r1, #0x10
	lsl r1, r1, #2
	add r4, r0, r6
	add r2, #8
	strh r2, [r4, r5]
	add r2, r6, #2
	add r2, r0, r2
	add r3, #8
	add r1, r0, r1
	mov r0, #0x66
	strh r3, [r2, r5]
	lsl r0, r0, #4
	ldr r0, [r1, r0]
	ldrsh r1, [r4, r5]
	ldrsh r2, [r2, r5]
	bl sub_0200DD88
	pop {r4, r5, r6, pc}
	nop
_0207F094: .word 0x00000846
	thumb_func_end sub_0207F064

	thumb_func_start sub_0207F098
sub_0207F098: ; 0x0207F098
	add r2, r0, #0
	add r3, r1, #0
	mov r0, #0x30
	mul r3, r0
	add r1, #0x16
	lsl r0, r1, #2
	add r1, r2, r0
	mov r0, #0x66
	add r3, r2, r3
	lsl r0, r0, #4
	ldr r2, _0207F0C0 ; =0x00000846
	ldr r0, [r1, r0]
	ldrsh r1, [r3, r2]
	add r2, r2, #2
	ldrsh r2, [r3, r2]
	add r1, #8
	lsl r1, r1, #0x10
	ldr r3, _0207F0C4 ; =sub_0200DD88
	asr r1, r1, #0x10
	bx r3
	.balign 4, 0
_0207F0C0: .word 0x00000846
_0207F0C4: .word sub_0200DD88
	thumb_func_end sub_0207F098

	thumb_func_start sub_0207F0C8
sub_0207F0C8: ; 0x0207F0C8
	push {r4, lr}
	mov r2, #0x66
	mov r4, #0x30
	lsl r2, r2, #4
	add r3, r0, r2
	add r2, r1, #0
	mul r4, r1
	add r1, r0, r4
	ldr r0, _0207F0F8 ; =0x0000083A
	add r2, #0x16
	ldrh r0, [r1, r0]
	lsl r2, r2, #2
	cmp r0, #0
	ldr r0, [r3, r2]
	bne _0207F0EE
	mov r1, #0
	bl sub_02024830
	pop {r4, pc}
_0207F0EE:
	mov r1, #1
	bl sub_02024830
	pop {r4, pc}
	nop
_0207F0F8: .word 0x0000083A
	thumb_func_end sub_0207F0C8

	thumb_func_start sub_0207F0FC
sub_0207F0FC: ; 0x0207F0FC
	push {r3, r4, r5, lr}
	add r5, r0, #0
	add r4, r1, #0
	bl sub_020249A8
	cmp r4, r0
	beq _0207F11A
	add r0, r5, #0
	mov r1, #0
	bl sub_020249D4
	add r0, r5, #0
	add r1, r4, #0
	bl sub_020248F0
_0207F11A:
	pop {r3, r4, r5, pc}
	thumb_func_end sub_0207F0FC

	thumb_func_start sub_0207F11C
sub_0207F11C: ; 0x0207F11C
	push {r3, lr}
	add r2, r0, #0
	ldrh r0, [r2, #6]
	cmp r0, #0
	bne _0207F12A
	mov r0, #0
	pop {r3, pc}
_0207F12A:
	ldrh r1, [r2, #0xe]
	lsl r1, r1, #0x14
	lsr r1, r1, #0x14
	cmp r1, #7
	beq _0207F140
	cmp r1, #0
	beq _0207F140
	cmp r1, #6
	beq _0207F140
	mov r0, #5
	pop {r3, pc}
_0207F140:
	ldrh r1, [r2, #8]
	mov r2, #0x30
	bl sub_020880B0
	cmp r0, #4
	bhi _0207F172
	add r0, r0, r0
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_0207F158: ; jump table
	.short _0207F172 - _0207F158 - 2 ; case 0
	.short _0207F16E - _0207F158 - 2 ; case 1
	.short _0207F16A - _0207F158 - 2 ; case 2
	.short _0207F166 - _0207F158 - 2 ; case 3
	.short _0207F162 - _0207F158 - 2 ; case 4
_0207F162:
	mov r0, #1
	pop {r3, pc}
_0207F166:
	mov r0, #2
	pop {r3, pc}
_0207F16A:
	mov r0, #3
	pop {r3, pc}
_0207F16E:
	mov r0, #4
	pop {r3, pc}
_0207F172:
	mov r0, #0
	pop {r3, pc}
	.balign 4, 0
	thumb_func_end sub_0207F11C

	thumb_func_start sub_0207F178
sub_0207F178: ; 0x0207F178
	push {r3, r4, r5, r6, r7, lr}
	add r6, r0, #0
	ldr r0, _0207F230 ; =0x00000828
	mov r5, #0
	add r0, r6, r0
	str r0, [sp]
_0207F184:
	mov r0, #0x30
	add r1, r5, #0
	mul r1, r0
	ldr r0, [sp]
	add r4, r0, r1
	add r0, r4, #0
	add r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _0207F224
	mov r0, #0xc5
	lsl r0, r0, #4
	ldrb r0, [r6, r0]
	cmp r0, #1
	bne _0207F1B6
	ldr r0, _0207F234 ; =0x00000C4C
	ldrb r0, [r6, r0]
	cmp r0, r5
	beq _0207F1B2
	ldr r0, _0207F238 ; =0x00000C4D
	ldrb r0, [r6, r0]
	cmp r0, r5
	bne _0207F1B6
_0207F1B2:
	mov r7, #0
	b _0207F1BE
_0207F1B6:
	add r0, r4, #0
	bl sub_0207F11C
	add r7, r0, #0
_0207F1BE:
	lsl r1, r7, #0x18
	ldr r0, [r4, #0x24]
	lsr r1, r1, #0x18
	bl sub_0207F0FC
	mov r1, #1
	ldr r0, [r4, #0x24]
	lsl r1, r1, #0xc
	bl sub_020249B0
	ldr r0, _0207F23C ; =0x00000C65
	ldrb r0, [r6, r0]
	cmp r0, r5
	bne _0207F216
	cmp r7, #0
	beq _0207F216
	cmp r7, #5
	beq _0207F216
	ldr r0, [r4, #0x24]
	bl sub_020249F8
	cmp r0, #0
	ldr r0, [r4, #0x24]
	bne _0207F202
	mov r2, #0x18
	ldrsh r2, [r4, r2]
	mov r1, #0x16
	ldrsh r1, [r4, r1]
	sub r2, r2, #3
	lsl r2, r2, #0x10
	asr r2, r2, #0x10
	bl sub_0200DD88
	b _0207F224
_0207F202:
	mov r2, #0x18
	ldrsh r2, [r4, r2]
	mov r1, #0x16
	ldrsh r1, [r4, r1]
	add r2, r2, #1
	lsl r2, r2, #0x10
	asr r2, r2, #0x10
	bl sub_0200DD88
	b _0207F224
_0207F216:
	mov r1, #0x16
	mov r2, #0x18
	ldrsh r1, [r4, r1]
	ldrsh r2, [r4, r2]
	ldr r0, [r4, #0x24]
	bl sub_0200DD88
_0207F224:
	add r0, r5, #1
	lsl r0, r0, #0x10
	lsr r5, r0, #0x10
	cmp r5, #6
	blo _0207F184
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_0207F230: .word 0x00000828
_0207F234: .word 0x00000C4C
_0207F238: .word 0x00000C4D
_0207F23C: .word 0x00000C65
	thumb_func_end sub_0207F178

	thumb_func_start sub_0207F240
sub_0207F240: ; 0x0207F240
	push {r3, r4, r5, r6, lr}
	sub sp, #4
	add r5, r0, #0
	ldr r0, _0207F29C ; =0x00000948
	add r4, r1, #0
	ldr r1, [r5, r0]
	lsl r0, r4, #3
	add r0, r1, r0
	add r1, sp, #0
	add r6, r2, #0
	add r1, #1
	add r2, sp, #0
	bl sub_02020A0C
	ldr r0, _0207F2A0 ; =0x00000654
	add r1, r4, #0
	ldr r0, [r5, r0]
	add r0, #0x25
	ldrb r0, [r0]
	bl sub_0207B5EC
	add r1, r0, #0
	ldr r0, _0207F2A4 ; =0x00000678
	ldr r0, [r5, r0]
	bl sub_020248F0
	ldr r0, _0207F2A4 ; =0x00000678
	mov r1, #1
	ldr r0, [r5, r0]
	bl sub_02024830
	ldr r0, _0207F2A4 ; =0x00000678
	add r2, sp, #0
	ldrb r1, [r2, #1]
	ldrb r2, [r2]
	ldr r0, [r5, r0]
	bl sub_0200DD88
	ldr r0, _0207F2A4 ; =0x00000678
	add r1, r6, #0
	ldr r0, [r5, r0]
	bl sub_0200DD08
	add sp, #4
	pop {r3, r4, r5, r6, pc}
	nop
_0207F29C: .word 0x00000948
_0207F2A0: .word 0x00000654
_0207F2A4: .word 0x00000678
	thumb_func_end sub_0207F240

	thumb_func_start sub_0207F2A8
sub_0207F2A8: ; 0x0207F2A8
	push {r3, r4, lr}
	sub sp, #0xc
	add r4, r0, #0
	lsl r0, r1, #0xc
	str r0, [sp]
	mov r0, #1
	lsl r1, r2, #0xc
	lsl r0, r0, #0x14
	str r1, [sp, #4]
	add r0, r1, r0
	str r0, [sp, #4]
	mov r0, #0
	str r0, [sp, #8]
	mov r0, #0x6d
	lsl r0, r0, #4
	ldr r0, [r4, r0]
	add r1, sp, #0
	bl sub_020247D4
	mov r0, #0x6d
	lsl r0, r0, #4
	ldr r0, [r4, r0]
	mov r1, #1
	bl sub_02024830
	mov r0, #0x6d
	lsl r0, r0, #4
	ldr r0, [r4, r0]
	mov r1, #0
	bl sub_020249D4
	mov r0, #0x6d
	lsl r0, r0, #4
	ldr r0, [r4, r0]
	mov r1, #0
	bl sub_020248F0
	add sp, #0xc
	pop {r3, r4, pc}
	.balign 4, 0
	thumb_func_end sub_0207F2A8

	thumb_func_start sub_0207F2F8
sub_0207F2F8: ; 0x0207F2F8
	push {r4, lr}
	add r4, r0, #0
	mov r0, #0x6d
	lsl r0, r0, #4
	ldr r0, [r4, r0]
	bl sub_020248B8
	cmp r0, #1
	bne _0207F332
	mov r0, #0x6d
	lsl r0, r0, #4
	mov r1, #1
	ldr r0, [r4, r0]
	lsl r1, r1, #0xc
	bl sub_020249B0
	mov r0, #0x6d
	lsl r0, r0, #4
	ldr r0, [r4, r0]
	bl sub_020249F8
	cmp r0, #2
	bne _0207F332
	mov r0, #0x6d
	lsl r0, r0, #4
	ldr r0, [r4, r0]
	mov r1, #0
	bl sub_02024830
_0207F332:
	pop {r4, pc}
	thumb_func_end sub_0207F2F8

	thumb_func_start sub_0207F334
sub_0207F334: ; 0x0207F334
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	add r7, r0, #0
	ldr r0, _0207F39C ; =0x00000654
	str r1, [sp]
	ldr r0, [r7, r0]
	mov r4, #0
	ldr r0, [r0]
	bl GetPartyCount
	cmp r0, #0
	ble _0207F398
	mov r0, #0x72
	ldr r1, [sp]
	lsl r0, r0, #2
	sub r1, r0, r1
	lsl r1, r1, #0x10
	asr r1, r1, #0x10
	ldr r2, [sp]
	add r0, #0x14
	sub r0, r0, r2
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add r6, r7, #0
	add r5, r7, #0
	str r1, [sp, #4]
	str r0, [sp, #8]
_0207F36A:
	mov r0, #0x85
	lsl r0, r0, #4
	ldr r0, [r6, r0]
	ldr r2, [sp, #4]
	mov r1, #0x1e
	bl sub_0200DD88
	ldr r0, _0207F3A0 ; =0x00000748
	ldr r2, [sp, #8]
	ldr r0, [r5, r0]
	mov r1, #0x32
	bl sub_0200DD88
	ldr r0, _0207F39C ; =0x00000654
	add r6, #0x30
	ldr r0, [r7, r0]
	add r5, r5, #4
	ldr r0, [r0]
	add r4, r4, #1
	bl GetPartyCount
	cmp r4, r0
	blt _0207F36A
_0207F398:
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
	.balign 4, 0
_0207F39C: .word 0x00000654
_0207F3A0: .word 0x00000748
	thumb_func_end sub_0207F334

	thumb_func_start sub_0207F3A4
sub_0207F3A4: ; 0x0207F3A4
	push {r3, r4, r5, r6, r7, lr}
	add r7, r0, #0
	ldr r0, _0207F420 ; =0x00000654
	str r1, [sp]
	ldr r0, [r7, r0]
	mov r4, #0
	ldr r0, [r0]
	bl GetPartyCount
	cmp r0, #0
	ble _0207F3E8
	add r6, r7, #0
	add r5, r7, #0
_0207F3BE:
	mov r0, #0x85
	lsl r0, r0, #4
	ldr r0, [r6, r0]
	mov r1, #0
	bl sub_02024830
	ldr r0, _0207F424 ; =0x00000748
	mov r1, #0
	ldr r0, [r5, r0]
	bl sub_02024830
	ldr r0, _0207F420 ; =0x00000654
	add r6, #0x30
	ldr r0, [r7, r0]
	add r5, r5, #4
	ldr r0, [r0]
	add r4, r4, #1
	bl GetPartyCount
	cmp r4, r0
	blt _0207F3BE
_0207F3E8:
	ldr r0, [sp]
	mov r1, #0x30
	add r4, r0, #0
	mul r4, r1
	mov r0, #0x85
	add r1, r7, r4
	lsl r0, r0, #4
	ldr r0, [r1, r0]
	mov r1, #1
	bl sub_02024830
	ldr r1, _0207F428 ; =0x00000836
	add r0, r7, r4
	ldrh r0, [r0, r1]
	lsl r0, r0, #0x14
	lsr r0, r0, #0x14
	cmp r0, #7
	beq _0207F41C
	ldr r0, [sp]
	sub r1, #0xee
	lsl r0, r0, #2
	add r0, r7, r0
	ldr r0, [r0, r1]
	mov r1, #1
	bl sub_02024830
_0207F41C:
	pop {r3, r4, r5, r6, r7, pc}
	nop
_0207F420: .word 0x00000654
_0207F424: .word 0x00000748
_0207F428: .word 0x00000836
	thumb_func_end sub_0207F3A4

	thumb_func_start sub_0207F42C
sub_0207F42C: ; 0x0207F42C
	lsl r1, r0, #2
	ldr r0, _0207F434 ; =0x02101CB8
	ldr r0, [r0, r1]
	bx lr
	.balign 4, 0
_0207F434: .word 0x02101CB8
	thumb_func_end sub_0207F42C

	thumb_func_start sub_0207F438
sub_0207F438: ; 0x0207F438
	push {r4, r5, r6, lr}
	sub sp, #0x10
	add r5, r0, #0
	add r4, r1, #0
	bl sub_0207CB20
	add r0, r5, #0
	mov r1, #0x27
	mov r2, #0
	bl sub_0207DAD8
	mov r0, #3
	mov r1, #0xc
	bl ListMenuItems_ctor
	mov r1, #0x82
	lsl r1, r1, #4
	str r0, [r5, r1]
	mov r0, #3
	bl sub_0207F42C
	mov r1, #0x82
	lsl r1, r1, #4
	add r2, r0, #0
	ldr r0, [r5, r1]
	sub r1, #0x44
	ldr r1, [r5, r1]
	bl ListMenuItems_AddItem
	mov r0, #4
	bl sub_0207F42C
	mov r1, #0x82
	lsl r1, r1, #4
	add r2, r0, #0
	ldr r0, [r5, r1]
	sub r1, #0x40
	ldr r1, [r5, r1]
	bl ListMenuItems_AddItem
	mov r0, #9
	bl sub_0207F42C
	mov r1, #0x82
	lsl r1, r1, #4
	add r2, r0, #0
	ldr r0, [r5, r1]
	sub r1, #0x2c
	ldr r1, [r5, r1]
	bl ListMenuItems_AddItem
	mov r0, #0x82
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	mov r2, #0
	str r0, [sp, #4]
	mov r0, #0x8d
	lsl r0, r0, #2
	add r0, r5, r0
	str r0, [sp, #8]
	add r1, sp, #4
	strb r2, [r1, #8]
	mov r3, #1
	strb r3, [r1, #9]
	mov r0, #3
	strb r0, [r1, #0xa]
	ldrb r6, [r1, #0xb]
	mov r0, #0xf
	bic r6, r0
	strb r6, [r1, #0xb]
	ldrb r6, [r1, #0xb]
	mov r0, #0x30
	bic r6, r0
	strb r6, [r1, #0xb]
	ldrb r6, [r1, #0xb]
	mov r0, #0xc0
	bic r6, r0
	strb r6, [r1, #0xb]
	ldrb r1, [r1, #0xa]
	add r0, r5, #0
	bl sub_0207E54C
	mov r0, #1
	str r0, [sp]
	add r0, r5, #0
	add r1, sp, #4
	mov r2, #0
	mov r3, #0xc
	bl sub_0207E590
	ldr r1, _0207F4F8 ; =0x00000824
	str r0, [r5, r1]
	mov r0, #0xf
	str r0, [r4]
	add sp, #0x10
	pop {r4, r5, r6, pc}
	.balign 4, 0
_0207F4F8: .word 0x00000824
	thumb_func_end sub_0207F438

	thumb_func_start sub_0207F4FC
sub_0207F4FC: ; 0x0207F4FC
	push {r3, r4, r5, lr}
	add r5, r0, #0
	add r4, r1, #0
	bl sub_0207CB20
	bl sub_0207CB90
	ldr r0, _0207F51C ; =0x00000654
	mov r1, #3
	ldr r0, [r5, r0]
	add r0, #0x27
	strb r1, [r0]
	mov r0, #0x20
	str r0, [r4]
	pop {r3, r4, r5, pc}
	nop
_0207F51C: .word 0x00000654
	thumb_func_end sub_0207F4FC

	thumb_func_start sub_0207F520
sub_0207F520: ; 0x0207F520
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	mov r0, #0x8d
	lsl r0, r0, #2
	add r7, r1, #0
	add r0, r5, r0
	mov r1, #1
	mov r4, #0x11
	bl sub_0200E5D4
	add r0, r5, #0
	bl sub_0207CB20
	bl sub_0207CB90
	ldr r0, _0207F684 ; =0x00000C65
	ldrb r1, [r5, r0]
	mov r0, #0x30
	mul r0, r1
	add r2, r5, r0
	ldr r0, _0207F688 ; =0x00000834
	ldrh r2, [r2, r0]
	ldr r0, _0207F68C ; =0x00000654
	cmp r2, #0
	bne _0207F590
	ldr r0, [r5, r0]
	ldr r0, [r0]
	bl GetPartyMonByIndex
	mov r2, #0x1f
	lsl r2, r2, #6
	add r6, r0, #0
	ldr r0, [r5, r2]
	add r2, #0xc
	ldr r2, [r5, r2]
	mov r1, #0x52
	bl ReadMsgDataIntoString
	add r0, r6, #0
	bl sub_02070DB0
	add r2, r0, #0
	ldr r0, _0207F690 ; =0x000007C4
	mov r1, #0
	ldr r0, [r5, r0]
	bl BufferBoxMonNickname
	ldr r2, _0207F690 ; =0x000007C4
	add r1, r2, #4
	ldr r0, [r5, r2]
	add r2, #8
	ldr r1, [r5, r1]
	ldr r2, [r5, r2]
	bl StringExpandPlaceholders
	b _0207F65E
_0207F590:
	ldr r0, [r5, r0]
	add r1, r2, #0
	ldr r0, [r0, #4]
	mov r2, #1
	mov r3, #0xc
	bl sub_02078398
	cmp r0, #1
	bne _0207F64E
	ldr r0, _0207F68C ; =0x00000654
	ldr r1, _0207F684 ; =0x00000C65
	ldr r0, [r5, r0]
	ldrb r1, [r5, r1]
	ldr r0, [r0]
	bl GetPartyMonByIndex
	mov r1, #0
	str r1, [sp]
	add r6, r0, #0
	mov r1, #6
	add r2, sp, #0
	bl sub_0206EC40
	add r0, r6, #0
	bl sub_02071BC8
	add r0, r6, #0
	bl sub_02071CA0
	ldr r1, _0207F684 ; =0x00000C65
	ldrb r2, [r5, r1]
	mov r1, #0x30
	mul r1, r2
	add r2, r5, r1
	ldr r1, _0207F688 ; =0x00000834
	ldrh r1, [r2, r1]
	cmp r1, #0x70
	bne _0207F5E2
	cmp r0, #0
	bne _0207F5E2
	mov r4, #0x12
_0207F5E2:
	mov r2, #0x1f
	lsl r2, r2, #6
	ldr r0, [r5, r2]
	add r2, #0xc
	ldr r2, [r5, r2]
	mov r1, #0x53
	bl ReadMsgDataIntoString
	add r0, r6, #0
	bl sub_02070DB0
	add r2, r0, #0
	ldr r0, _0207F690 ; =0x000007C4
	mov r1, #0
	ldr r0, [r5, r0]
	bl BufferBoxMonNickname
	ldr r2, _0207F684 ; =0x00000C65
	ldr r3, _0207F690 ; =0x000007C4
	ldrb r6, [r5, r2]
	mov r2, #0x30
	ldr r0, [r5, r3]
	mul r2, r6
	add r2, r5, r2
	add r3, #0x70
	ldrh r2, [r2, r3]
	mov r1, #1
	bl BufferItemName
	ldr r2, _0207F690 ; =0x000007C4
	add r1, r2, #4
	ldr r0, [r5, r2]
	add r2, #8
	ldr r1, [r5, r1]
	ldr r2, [r5, r2]
	bl StringExpandPlaceholders
	ldr r6, _0207F684 ; =0x00000C65
	mov r3, #0x30
	ldrb r1, [r5, r6]
	mov r0, #0
	add r2, r1, #0
	mul r2, r3
	add r1, r5, r2
	ldr r2, _0207F688 ; =0x00000834
	strh r0, [r1, r2]
	ldrb r1, [r5, r6]
	add r0, r5, #0
	mul r3, r1
	add r3, r5, r3
	ldrh r2, [r3, r2]
	bl sub_0207F004
	b _0207F65E
_0207F64E:
	mov r2, #0x1f
	lsl r2, r2, #6
	ldr r0, [r5, r2]
	add r2, #8
	ldr r2, [r5, r2]
	mov r1, #0x54
	bl ReadMsgDataIntoString
_0207F65E:
	mov r0, #0x89
	lsl r0, r0, #2
	add r0, r5, r0
	mov r1, #1
	mov r2, #0x2a
	mov r3, #0xf
	bl sub_0200E998
	mov r0, #0x89
	lsl r0, r0, #2
	add r0, r5, r0
	mov r1, #0xf
	bl FillWindowPixelBuffer
	add r0, r5, #0
	bl sub_0207DB30
	str r4, [r7]
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_0207F684: .word 0x00000C65
_0207F688: .word 0x00000834
_0207F68C: .word 0x00000654
_0207F690: .word 0x000007C4
	thumb_func_end sub_0207F520

	thumb_func_start sub_0207F694
sub_0207F694: ; 0x0207F694
	push {r4, lr}
	add r4, r0, #0
	ldr r0, _0207F6DC ; =0x00000C64
	ldrb r0, [r4, r0]
	bl sub_02020094
	cmp r0, #0
	bne _0207F6D6
	mov r0, #0x89
	lsl r0, r0, #2
	add r0, r4, r0
	mov r1, #1
	bl sub_0200E9BC
	add r0, r4, #0
	mov r1, #0x1d
	mov r2, #1
	bl sub_0207DAC4
	ldr r0, _0207F6E0 ; =0x00000678
	mov r1, #0
	ldr r0, [r4, r0]
	bl sub_0200DD08
	add r0, r4, #0
	mov r1, #0
	bl sub_02079224
	ldr r0, _0207F6E4 ; =0x04000050
	mov r1, #0
	strh r1, [r0]
	mov r0, #1
	pop {r4, pc}
_0207F6D6:
	mov r0, #0x11
	pop {r4, pc}
	nop
_0207F6DC: .word 0x00000C64
_0207F6E0: .word 0x00000678
_0207F6E4: .word 0x04000050
	thumb_func_end sub_0207F694

	thumb_func_start sub_0207F6E8
sub_0207F6E8: ; 0x0207F6E8
	push {r4, lr}
	add r4, r0, #0
	ldr r0, _0207F71C ; =0x00000C64
	ldrb r0, [r4, r0]
	bl sub_02020094
	cmp r0, #0
	bne _0207F716
	mov r0, #0x89
	lsl r0, r0, #2
	add r0, r4, r0
	mov r1, #1
	bl sub_0200E9BC
	add r0, r4, #0
	bl sub_0207CB54
	add r0, r4, #0
	mov r1, #0
	bl sub_02079224
	mov r0, #0x13
	pop {r4, pc}
_0207F716:
	mov r0, #0x12
	pop {r4, pc}
	nop
_0207F71C: .word 0x00000C64
	thumb_func_end sub_0207F6E8

	thumb_func_start sub_0207F720
sub_0207F720: ; 0x0207F720
	push {r4, lr}
	add r4, r0, #0
	bl ov94_021E593C
	cmp r0, #1
	bne _0207F736
	add r0, r4, #0
	bl sub_0207CB6C
	mov r0, #0x11
	pop {r4, pc}
_0207F736:
	mov r0, #0x13
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_0207F720

	thumb_func_start sub_0207F73C
sub_0207F73C: ; 0x0207F73C
	push {r4, r5, r6, lr}
	sub sp, #0x10
	add r5, r0, #0
	add r4, r1, #0
	bl sub_0207CB20
	add r0, r5, #0
	mov r1, #0x28
	mov r2, #0
	bl sub_0207DAD8
	mov r0, #3
	mov r1, #0xc
	bl ListMenuItems_ctor
	mov r1, #0x82
	lsl r1, r1, #4
	str r0, [r5, r1]
	mov r0, #6
	bl sub_0207F42C
	mov r1, #0x82
	lsl r1, r1, #4
	add r2, r0, #0
	ldr r0, [r5, r1]
	sub r1, #0x38
	ldr r1, [r5, r1]
	bl ListMenuItems_AddItem
	mov r0, #7
	bl sub_0207F42C
	mov r1, #0x82
	lsl r1, r1, #4
	add r2, r0, #0
	ldr r0, [r5, r1]
	sub r1, #0x34
	ldr r1, [r5, r1]
	bl ListMenuItems_AddItem
	mov r0, #9
	bl sub_0207F42C
	mov r1, #0x82
	lsl r1, r1, #4
	add r2, r0, #0
	ldr r0, [r5, r1]
	sub r1, #0x2c
	ldr r1, [r5, r1]
	bl ListMenuItems_AddItem
	mov r0, #0x82
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	mov r2, #0
	str r0, [sp, #4]
	mov r0, #0x8d
	lsl r0, r0, #2
	add r0, r5, r0
	str r0, [sp, #8]
	add r1, sp, #4
	strb r2, [r1, #8]
	mov r3, #1
	strb r3, [r1, #9]
	mov r0, #3
	strb r0, [r1, #0xa]
	ldrb r6, [r1, #0xb]
	mov r0, #0xf
	bic r6, r0
	strb r6, [r1, #0xb]
	ldrb r6, [r1, #0xb]
	mov r0, #0x30
	bic r6, r0
	strb r6, [r1, #0xb]
	ldrb r6, [r1, #0xb]
	mov r0, #0xc0
	bic r6, r0
	strb r6, [r1, #0xb]
	ldrb r1, [r1, #0xa]
	add r0, r5, #0
	bl sub_0207E54C
	mov r0, #1
	str r0, [sp]
	add r0, r5, #0
	add r1, sp, #4
	mov r2, #0
	mov r3, #0xc
	bl sub_0207E590
	ldr r1, _0207F7FC ; =0x00000824
	str r0, [r5, r1]
	mov r0, #0xf
	str r0, [r4]
	add sp, #0x10
	pop {r4, r5, r6, pc}
	.balign 4, 0
_0207F7FC: .word 0x00000824
	thumb_func_end sub_0207F73C

	thumb_func_start sub_0207F800
sub_0207F800: ; 0x0207F800
	push {r3, r4, r5, lr}
	add r5, r0, #0
	add r4, r1, #0
	bl sub_0207CB20
	bl sub_0207CB90
	ldr r0, _0207F820 ; =0x00000654
	mov r1, #7
	ldr r0, [r5, r0]
	add r0, #0x27
	strb r1, [r0]
	mov r0, #0x20
	str r0, [r4]
	pop {r3, r4, r5, pc}
	nop
_0207F820: .word 0x00000654
	thumb_func_end sub_0207F800

	thumb_func_start sub_0207F824
sub_0207F824: ; 0x0207F824
	push {r3, r4, r5, lr}
	add r5, r0, #0
	mov r0, #0x8d
	lsl r0, r0, #2
	add r4, r1, #0
	add r0, r5, r0
	mov r1, #1
	bl sub_0200E5D4
	add r0, r5, #0
	bl sub_0207CB20
	bl sub_0207CB90
	add r0, r5, #0
	mov r1, #0x2c
	mov r2, #1
	bl sub_0207DAEC
	ldr r0, _0207F864 ; =sub_0207F870
	ldr r1, _0207F868 ; =0x00000C58
	ldr r2, _0207F86C ; =sub_0207F8F4
	str r0, [r5, r1]
	add r0, r1, #4
	str r2, [r5, r0]
	mov r0, #0x1a
	add r1, #0xa
	strb r0, [r5, r1]
	mov r0, #0x18
	str r0, [r4]
	pop {r3, r4, r5, pc}
	nop
_0207F864: .word sub_0207F870
_0207F868: .word 0x00000C58
_0207F86C: .word sub_0207F8F4
	thumb_func_end sub_0207F824

	thumb_func_start sub_0207F870
sub_0207F870: ; 0x0207F870
	push {r3, r4, r5, lr}
	add r4, r0, #0
	ldr r0, _0207F8E0 ; =0x04000050
	mov r1, #0
	strh r1, [r0]
	ldr r0, _0207F8E4 ; =0x00000654
	ldr r1, _0207F8E8 ; =0x00000C65
	ldr r0, [r4, r0]
	ldrb r1, [r4, r1]
	ldr r0, [r0]
	bl GetPartyMonByIndex
	add r1, r0, #0
	ldr r0, _0207F8E4 ; =0x00000654
	mov r2, #0xc
	ldr r0, [r4, r0]
	ldr r0, [r0, #8]
	bl sub_02090FA8
	mov r1, #0
	mvn r1, r1
	cmp r0, r1
	beq _0207F8CA
	ldr r1, _0207F8E8 ; =0x00000C65
	mov r2, #0x30
	ldrb r3, [r4, r1]
	mov r0, #0
	add r5, r3, #0
	mul r5, r2
	ldr r3, _0207F8EC ; =0x00000834
	add r5, r4, r5
	strh r0, [r5, r3]
	ldrb r1, [r4, r1]
	add r0, r4, #0
	mul r2, r1
	add r2, r4, r2
	ldrh r2, [r2, r3]
	bl sub_0207F004
	add r0, r4, #0
	mov r1, #0x2f
	mov r2, #0
	bl sub_0207DAEC
	b _0207F8D4
_0207F8CA:
	add r0, r4, #0
	mov r1, #0x33
	mov r2, #0
	bl sub_0207DAEC
_0207F8D4:
	ldr r0, _0207F8F0 ; =0x00000C62
	mov r1, #0x14
	strb r1, [r4, r0]
	mov r0, #0x18
	pop {r3, r4, r5, pc}
	nop
_0207F8E0: .word 0x04000050
_0207F8E4: .word 0x00000654
_0207F8E8: .word 0x00000C65
_0207F8EC: .word 0x00000834
_0207F8F0: .word 0x00000C62
	thumb_func_end sub_0207F870

	thumb_func_start sub_0207F8F4
sub_0207F8F4: ; 0x0207F8F4
	push {r4, lr}
	mov r1, #0x30
	mov r2, #0
	add r4, r0, #0
	bl sub_0207DAEC
	ldr r0, _0207F918 ; =sub_0207F924
	ldr r1, _0207F91C ; =0x00000C58
	ldr r2, _0207F920 ; =sub_0207F9CC
	str r0, [r4, r1]
	add r0, r1, #4
	str r2, [r4, r0]
	mov r0, #0x1a
	add r1, #0xa
	strb r0, [r4, r1]
	mov r0, #0x18
	pop {r4, pc}
	nop
_0207F918: .word sub_0207F924
_0207F91C: .word 0x00000C58
_0207F920: .word sub_0207F9CC
	thumb_func_end sub_0207F8F4

	thumb_func_start sub_0207F924
sub_0207F924: ; 0x0207F924
	push {r3, r4, r5, lr}
	add r4, r0, #0
	ldr r0, _0207F9B8 ; =0x04000050
	mov r1, #0
	strh r1, [r0]
	ldr r1, _0207F9BC ; =0x00000C65
	ldr r0, _0207F9C0 ; =0x00000654
	ldrb r2, [r4, r1]
	mov r1, #0x30
	ldr r0, [r4, r0]
	mul r1, r2
	add r2, r4, r1
	ldr r1, _0207F9C4 ; =0x00000834
	ldr r0, [r0, #4]
	ldrh r1, [r2, r1]
	mov r2, #1
	mov r3, #0xc
	bl sub_02078398
	cmp r0, #1
	bne _0207F9A2
	ldr r0, _0207F9C0 ; =0x00000654
	ldr r1, _0207F9BC ; =0x00000C65
	ldr r0, [r4, r0]
	ldrb r1, [r4, r1]
	ldr r0, [r0]
	bl GetPartyMonByIndex
	mov r1, #0
	str r1, [sp]
	add r5, r0, #0
	mov r1, #6
	add r2, sp, #0
	bl sub_0206EC40
	add r0, r5, #0
	bl sub_02071BC8
	add r0, r5, #0
	bl sub_02071CA0
	ldr r1, _0207F9BC ; =0x00000C65
	mov r2, #0x30
	ldrb r3, [r4, r1]
	mov r0, #0
	add r5, r3, #0
	mul r5, r2
	ldr r3, _0207F9C4 ; =0x00000834
	add r5, r4, r5
	strh r0, [r5, r3]
	ldrb r1, [r4, r1]
	add r0, r4, #0
	mul r2, r1
	add r2, r4, r2
	ldrh r2, [r2, r3]
	bl sub_0207F004
	add r0, r4, #0
	mov r1, #0x34
	mov r2, #0
	bl sub_0207DAEC
	b _0207F9AC
_0207F9A2:
	add r0, r4, #0
	mov r1, #0x54
	mov r2, #0
	bl sub_0207DAEC
_0207F9AC:
	ldr r0, _0207F9C8 ; =0x00000C62
	mov r1, #0x14
	strb r1, [r4, r0]
	mov r0, #0x18
	pop {r3, r4, r5, pc}
	nop
_0207F9B8: .word 0x04000050
_0207F9BC: .word 0x00000C65
_0207F9C0: .word 0x00000654
_0207F9C4: .word 0x00000834
_0207F9C8: .word 0x00000C62
	thumb_func_end sub_0207F924

	thumb_func_start sub_0207F9CC
sub_0207F9CC: ; 0x0207F9CC
	push {r4, lr}
	ldr r2, _0207FA00 ; =0x04000050
	mov r1, #0
	add r4, r0, #0
	strh r1, [r2]
	bl sub_02079224
	mov r0, #0x89
	lsl r0, r0, #2
	add r0, r4, r0
	mov r1, #1
	bl sub_0200E9BC
	add r0, r4, #0
	mov r1, #0x1d
	mov r2, #1
	bl sub_0207DAC4
	ldr r0, _0207FA04 ; =0x00000678
	mov r1, #0
	ldr r0, [r4, r0]
	bl sub_0200DD08
	mov r0, #1
	pop {r4, pc}
	nop
_0207FA00: .word 0x04000050
_0207FA04: .word 0x00000678
	thumb_func_end sub_0207F9CC

	thumb_func_start sub_0207FA08
sub_0207FA08: ; 0x0207FA08
	push {r4, lr}
	add r4, r0, #0
	mov r0, #0x89
	lsl r0, r0, #2
	add r0, r4, r0
	mov r1, #1
	bl sub_0200E9BC
	add r0, r4, #0
	mov r1, #0x1d
	mov r2, #1
	bl sub_0207DAC4
	ldr r0, _0207FA38 ; =0x00000678
	mov r1, #0
	ldr r0, [r4, r0]
	bl sub_0200DD08
	add r0, r4, #0
	mov r1, #0
	bl sub_02079224
	mov r0, #1
	pop {r4, pc}
	.balign 4, 0
_0207FA38: .word 0x00000678
	thumb_func_end sub_0207FA08

	thumb_func_start sub_0207FA3C
sub_0207FA3C: ; 0x0207FA3C
	push {r3, r4, r5, lr}
	add r5, r0, #0
	add r4, r1, #0
	bl sub_0207CB20
	bl sub_0207CB90
	ldr r0, _0207FA90 ; =0x00000C65
	ldrb r1, [r5, r0]
	mov r0, #0x30
	mul r0, r1
	add r1, r5, r0
	ldr r0, _0207FA94 ; =0x0000083A
	ldrh r0, [r1, r0]
	cmp r0, #0
	bne _0207FA6C
	ldr r0, _0207FA98 ; =0x00000654
	mov r1, #0
	ldr r0, [r5, r0]
	add r0, #0x27
	strb r1, [r0]
	mov r0, #0x20
	str r0, [r4]
	pop {r3, r4, r5, pc}
_0207FA6C:
	add r0, r5, #0
	mov r1, #0xb3
	mov r2, #1
	bl sub_0207DAEC
	ldr r0, _0207FA9C ; =sub_0207FAA8
	ldr r1, _0207FAA0 ; =0x00000C58
	ldr r2, _0207FAA4 ; =sub_0207FAD4
	str r0, [r5, r1]
	add r0, r1, #4
	str r2, [r5, r0]
	mov r0, #0x1a
	add r1, #0xa
	strb r0, [r5, r1]
	mov r0, #0x18
	str r0, [r4]
	pop {r3, r4, r5, pc}
	nop
_0207FA90: .word 0x00000C65
_0207FA94: .word 0x0000083A
_0207FA98: .word 0x00000654
_0207FA9C: .word sub_0207FAA8
_0207FAA0: .word 0x00000C58
_0207FAA4: .word sub_0207FAD4
	thumb_func_end sub_0207FA3C

	thumb_func_start sub_0207FAA8
sub_0207FAA8: ; 0x0207FAA8
	push {r4, lr}
	add r4, r0, #0
	ldr r0, _0207FACC ; =0x00000654
	ldr r1, _0207FAD0 ; =0x00000C65
	ldr r0, [r4, r0]
	ldrb r1, [r4, r1]
	ldr r0, [r0]
	bl GetPartyMonByIndex
	bl sub_02072894
	ldr r0, _0207FACC ; =0x00000654
	mov r1, #0
	ldr r0, [r4, r0]
	add r0, #0x27
	strb r1, [r0]
	mov r0, #0x20
	pop {r4, pc}
	.balign 4, 0
_0207FACC: .word 0x00000654
_0207FAD0: .word 0x00000C65
	thumb_func_end sub_0207FAA8

	thumb_func_start sub_0207FAD4
sub_0207FAD4: ; 0x0207FAD4
	push {r4, lr}
	add r4, r0, #0
	ldr r0, _0207FB04 ; =0x04000050
	mov r1, #0
	strh r1, [r0]
	mov r0, #0x89
	lsl r0, r0, #2
	add r0, r4, r0
	mov r1, #1
	bl sub_0200E9BC
	add r0, r4, #0
	mov r1, #0x1d
	mov r2, #1
	bl sub_0207DAC4
	ldr r0, _0207FB08 ; =0x00000678
	mov r1, #0
	ldr r0, [r4, r0]
	bl sub_0200DD08
	mov r0, #1
	pop {r4, pc}
	nop
_0207FB04: .word 0x04000050
_0207FB08: .word 0x00000678
	thumb_func_end sub_0207FAD4

	thumb_func_start sub_0207FB0C
sub_0207FB0C: ; 0x0207FB0C
	push {r3, r4, r5, lr}
	add r5, r0, #0
	ldr r0, _0207FBB8 ; =0x00000C63
	add r4, r1, #0
	ldrb r2, [r5, r0]
	mov r1, #0x40
	orr r1, r2
	strb r1, [r5, r0]
	ldrb r1, [r5, r0]
	mov r2, #0x3f
	bic r1, r2
	add r2, r0, #2
	ldrb r3, [r5, r2]
	mov r2, #0x3f
	and r2, r3
	orr r1, r2
	strb r1, [r5, r0]
	ldr r0, _0207FBBC ; =0x00000678
	mov r1, #0
	ldr r0, [r5, r0]
	bl sub_0200DD08
	ldr r0, _0207FBBC ; =0x00000678
	add r1, sp, #0
	ldr r0, [r5, r0]
	add r1, #2
	add r2, sp, #0
	bl sub_0200DE00
	ldr r0, _0207FBC0 ; =0x0000067C
	add r3, sp, #0
	mov r1, #2
	mov r2, #0
	ldrsh r1, [r3, r1]
	ldrsh r2, [r3, r2]
	ldr r0, [r5, r0]
	bl sub_0200DD88
	ldr r0, _0207FBC4 ; =0x00000654
	ldr r1, _0207FBB8 ; =0x00000C63
	ldr r0, [r5, r0]
	ldrb r1, [r5, r1]
	add r0, #0x25
	ldrb r0, [r0]
	lsl r1, r1, #0x1a
	lsr r1, r1, #0x1a
	bl sub_0207B5EC
	add r1, r0, #0
	ldr r0, _0207FBC0 ; =0x0000067C
	add r1, r1, #2
	ldr r0, [r5, r0]
	bl sub_020248F0
	ldr r0, _0207FBC0 ; =0x0000067C
	mov r1, #1
	ldr r0, [r5, r0]
	bl sub_02024830
	ldr r1, _0207FBB8 ; =0x00000C63
	add r0, r5, #0
	ldrb r1, [r5, r1]
	lsl r1, r1, #0x1a
	lsr r1, r1, #0x1a
	bl sub_0207A7F4
	mov r0, #0x85
	lsl r0, r0, #2
	add r0, r5, r0
	mov r1, #1
	bl sub_0200E9BC
	add r0, r5, #0
	bl sub_0207CB20
	bl sub_0207CB90
	add r0, r5, #0
	mov r1, #0x1f
	mov r2, #1
	bl sub_0207DAC4
	mov r0, #0x1c
	str r0, [r4]
	pop {r3, r4, r5, pc}
	nop
_0207FBB8: .word 0x00000C63
_0207FBBC: .word 0x00000678
_0207FBC0: .word 0x0000067C
_0207FBC4: .word 0x00000654
	thumb_func_end sub_0207FB0C

	thumb_func_start sub_0207FBC8
sub_0207FBC8: ; 0x0207FBC8
	push {r4, lr}
	ldr r1, _0207FC10 ; =0x00000C63
	add r4, r0, #0
	ldrb r2, [r4, r1]
	mov r0, #0x40
	bic r2, r0
	strb r2, [r4, r1]
	ldr r0, _0207FC14 ; =0x0000067C
	mov r1, #0
	ldr r0, [r4, r0]
	bl sub_02024830
	ldr r0, _0207FC18 ; =0x00000C65
	ldrb r1, [r4, r0]
	cmp r1, #6
	bhs _0207FBEE
	add r0, r4, #0
	bl sub_0207A7F4
_0207FBEE:
	add r0, r4, #0
	mov r1, #0
	bl sub_02079224
	ldr r1, _0207FC10 ; =0x00000C63
	add r0, r4, #0
	ldrb r1, [r4, r1]
	lsl r1, r1, #0x1a
	lsr r1, r1, #0x1a
	bl sub_0207A7F4
	add r0, r4, #0
	mov r1, #0x1d
	mov r2, #1
	bl sub_0207DAC4
	pop {r4, pc}
	.balign 4, 0
_0207FC10: .word 0x00000C63
_0207FC14: .word 0x0000067C
_0207FC18: .word 0x00000C65
	thumb_func_end sub_0207FBC8

	thumb_func_start sub_0207FC1C
sub_0207FC1C: ; 0x0207FC1C
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x28
	ldr r2, _0207FD44 ; =0x00000C65
	add r6, r0, #0
	ldrb r1, [r6, r2]
	add r0, r2, #0
	sub r0, #0x19
	strb r1, [r6, r0]
	sub r0, r2, #2
	ldrb r0, [r6, r0]
	add r3, r2, #0
	sub r3, #0x13
	lsl r0, r0, #0x1a
	lsr r1, r0, #0x1a
	add r0, r2, #0
	sub r0, #0x18
	strb r1, [r6, r0]
	add r0, r2, #0
	mov r1, #1
	sub r0, #0x15
	strb r1, [r6, r0]
	mov r0, #0
	strb r0, [r6, r3]
	add r3, r2, #0
	sub r3, #0x14
	strb r0, [r6, r3]
	add r3, r2, #0
	sub r3, #0x19
	ldrb r3, [r6, r3]
	tst r3, r1
	beq _0207FC60
	sub r2, #0x17
	strb r1, [r6, r2]
	b _0207FC64
_0207FC60:
	sub r2, #0x17
	strb r0, [r6, r2]
_0207FC64:
	ldr r0, _0207FD48 ; =0x00000C4D
	mov r1, #1
	ldrb r2, [r6, r0]
	tst r2, r1
	beq _0207FC70
	b _0207FC72
_0207FC70:
	mov r1, #0
_0207FC72:
	add r0, r0, #2
	strb r1, [r6, r0]
	ldr r0, [r6]
	mov r1, #2
	bl GetBgTilemapBuffer
	str r0, [sp, #0x14]
	ldr r0, [r6]
	mov r1, #1
	bl GetBgTilemapBuffer
	ldr r1, _0207FD4C ; =0x00000C4C
	str r0, [sp, #0x10]
	ldrb r3, [r6, r1]
	add r1, r1, #1
	mov r2, #0x30
	add r0, r3, #0
	ldrb r3, [r6, r1]
	mul r0, r2
	mov r4, #0
	add r1, r3, #0
	add r3, r6, r0
	ldr r0, _0207FD50 ; =0x0000083D
	mul r1, r2
	ldrsb r2, [r3, r0]
	str r2, [sp, #0xc]
	sub r2, r0, #1
	ldrsb r2, [r3, r2]
	str r2, [sp, #8]
	add r2, r6, r1
	ldrsb r1, [r2, r0]
	sub r0, r0, #1
	ldrsb r0, [r2, r0]
	str r1, [sp, #4]
	str r0, [sp]
	ldr r0, _0207FD54 ; =0x0000094C
	add r0, r6, r0
	str r0, [sp, #0x18]
	ldr r0, _0207FD58 ; =0x00000ACC
	add r0, r6, r0
	str r0, [sp, #0x1c]
	ldr r0, _0207FD5C ; =0x00000A0C
	add r0, r6, r0
	str r0, [sp, #0x20]
	ldr r0, _0207FD60 ; =0x00000B8C
	add r0, r6, r0
	str r0, [sp, #0x24]
_0207FCD0:
	ldr r0, [sp, #0xc]
	lsl r5, r4, #5
	add r0, r0, r4
	lsl r1, r0, #5
	ldr r0, [sp, #8]
	mov r2, #0x20
	add r0, r0, r1
	lsl r7, r0, #1
	ldr r0, [sp, #0x18]
	ldr r1, [sp, #0x14]
	add r0, r0, r5
	add r1, r1, r7
	bl memcpy
	ldr r0, [sp, #0x1c]
	ldr r1, [sp, #0x10]
	add r0, r0, r5
	add r1, r1, r7
	mov r2, #0x20
	bl memcpy
	ldr r0, [sp, #4]
	mov r2, #0x20
	add r0, r0, r4
	lsl r1, r0, #5
	ldr r0, [sp]
	add r0, r0, r1
	lsl r7, r0, #1
	ldr r0, [sp, #0x20]
	ldr r1, [sp, #0x14]
	add r0, r0, r5
	add r1, r1, r7
	bl memcpy
	ldr r0, [sp, #0x24]
	ldr r1, [sp, #0x10]
	add r0, r0, r5
	add r1, r1, r7
	mov r2, #0x20
	bl memcpy
	add r0, r4, #1
	lsl r0, r0, #0x10
	lsr r4, r0, #0x10
	cmp r4, #6
	blo _0207FCD0
	ldr r0, _0207FD64 ; =0x00000678
	mov r1, #0
	ldr r0, [r6, r0]
	bl sub_02024830
	ldr r0, _0207FD68 ; =0x0000067C
	mov r1, #0
	ldr r0, [r6, r0]
	bl sub_02024830
	add sp, #0x28
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_0207FD44: .word 0x00000C65
_0207FD48: .word 0x00000C4D
_0207FD4C: .word 0x00000C4C
_0207FD50: .word 0x0000083D
_0207FD54: .word 0x0000094C
_0207FD58: .word 0x00000ACC
_0207FD5C: .word 0x00000A0C
_0207FD60: .word 0x00000B8C
_0207FD64: .word 0x00000678
_0207FD68: .word 0x0000067C
	thumb_func_end sub_0207FC1C

	thumb_func_start sub_0207FD6C
sub_0207FD6C: ; 0x0207FD6C
	push {r3, r4, r5, lr}
	ldr r1, _0207FEC4 ; =0x0000094C
	add r5, r0, #0
	ldr r2, _0207FEC8 ; =0x00000305
	add r4, r5, r1
	ldrb r1, [r4, r2]
	cmp r1, #4
	bls _0207FD7E
	b _0207FEBE
_0207FD7E:
	add r1, r1, r1
	add r1, pc
	ldrh r1, [r1, #6]
	lsl r1, r1, #0x10
	asr r1, r1, #0x10
	add pc, r1
_0207FD8A: ; jump table
	.short _0207FD94 - _0207FD8A - 2 ; case 0
	.short _0207FDAA - _0207FD8A - 2 ; case 1
	.short _0207FDFA - _0207FD8A - 2 ; case 2
	.short _0207FE0C - _0207FD8A - 2 ; case 3
	.short _0207FE6A - _0207FD8A - 2 ; case 4
_0207FD94:
	ldr r0, _0207FECC ; =0x0000069F
	bl PlaySE
	add r0, r5, #0
	mov r1, #0
	bl sub_02079224
	ldr r0, _0207FEC8 ; =0x00000305
	mov r1, #1
	strb r1, [r4, r0]
	b _0207FEBE
_0207FDAA:
	add r1, r2, #1
	ldrb r1, [r4, r1]
	add r3, r1, #1
	add r1, r2, #1
	strb r3, [r4, r1]
	mov r1, #0
	bl sub_0207FEE8
	add r0, r5, #0
	mov r1, #1
	bl sub_0207FEE8
	ldr r2, _0207FED0 ; =0x00000302
	add r0, r5, #0
	ldrb r2, [r4, r2]
	mov r1, #0
	bl sub_02080040
	ldr r2, _0207FED4 ; =0x00000303
	add r0, r5, #0
	ldrb r2, [r4, r2]
	mov r1, #1
	bl sub_02080040
	ldr r0, [r5]
	mov r1, #2
	bl ScheduleBgTilemapBufferTransfer
	ldr r0, [r5]
	mov r1, #1
	bl ScheduleBgTilemapBufferTransfer
	ldr r0, _0207FED8 ; =0x00000306
	ldrb r1, [r4, r0]
	cmp r1, #0x10
	bne _0207FEBE
	mov r1, #2
	sub r0, r0, #1
	strb r1, [r4, r0]
	b _0207FEBE
_0207FDFA:
	bl sub_02080198
	ldr r0, _0207FECC ; =0x0000069F
	bl PlaySE
	ldr r0, _0207FEC8 ; =0x00000305
	mov r1, #3
	strb r1, [r4, r0]
	b _0207FEBE
_0207FE0C:
	add r1, r2, #1
	ldrb r1, [r4, r1]
	sub r3, r1, #1
	add r1, r2, #1
	strb r3, [r4, r1]
	mov r1, #0
	bl sub_0207FEE8
	add r0, r5, #0
	mov r1, #1
	bl sub_0207FEE8
	ldr r2, _0207FED0 ; =0x00000302
	add r0, r5, #0
	ldrb r3, [r4, r2]
	mov r2, #1
	mov r1, #0
	eor r2, r3
	lsl r2, r2, #0x18
	lsr r2, r2, #0x18
	bl sub_02080040
	ldr r2, _0207FED4 ; =0x00000303
	mov r1, #1
	ldrb r2, [r4, r2]
	add r0, r5, #0
	eor r2, r1
	lsl r2, r2, #0x18
	lsr r2, r2, #0x18
	bl sub_02080040
	ldr r0, [r5]
	mov r1, #2
	bl ScheduleBgTilemapBufferTransfer
	ldr r0, [r5]
	mov r1, #1
	bl ScheduleBgTilemapBufferTransfer
	ldr r0, _0207FED8 ; =0x00000306
	ldrb r1, [r4, r0]
	cmp r1, #0
	bne _0207FEBE
	mov r1, #4
	sub r0, r0, #1
	strb r1, [r4, r0]
	b _0207FEBE
_0207FE6A:
	ldr r0, _0207FEDC ; =0x00000654
	sub r1, r2, #5
	ldr r0, [r5, r0]
	sub r2, r2, #4
	ldrb r1, [r4, r1]
	ldrb r2, [r4, r2]
	ldr r0, [r0]
	bl sub_020747BC
	ldr r0, _0207FEE0 ; =0x00000678
	mov r1, #1
	ldr r0, [r5, r0]
	bl sub_02024830
	mov r0, #0xc1
	mov r1, #0
	lsl r0, r0, #2
	strb r1, [r4, r0]
	ldr r1, _0207FEE4 ; =0x00000C63
	mov r0, #0x40
	ldrb r2, [r5, r1]
	bic r2, r0
	strb r2, [r5, r1]
	add r1, r1, #2
	ldrb r1, [r5, r1]
	add r0, r5, #0
	bl sub_0207A7F4
	ldr r1, _0207FEE4 ; =0x00000C63
	add r0, r5, #0
	ldrb r1, [r5, r1]
	lsl r1, r1, #0x1a
	lsr r1, r1, #0x1a
	bl sub_0207A7F4
	add r0, r5, #0
	mov r1, #0x1d
	mov r2, #0
	bl sub_0207DAC4
	mov r0, #1
	pop {r3, r4, r5, pc}
_0207FEBE:
	mov r0, #0
	pop {r3, r4, r5, pc}
	nop
_0207FEC4: .word 0x0000094C
_0207FEC8: .word 0x00000305
_0207FECC: .word 0x0000069F
_0207FED0: .word 0x00000302
_0207FED4: .word 0x00000303
_0207FED8: .word 0x00000306
_0207FEDC: .word 0x00000654
_0207FEE0: .word 0x00000678
_0207FEE4: .word 0x00000C63
	thumb_func_end sub_0207FD6C

	thumb_func_start sub_0207FEE8
sub_0207FEE8: ; 0x0207FEE8
	push {r4, r5, r6, r7, lr}
	sub sp, #0x2c
	add r5, r0, #0
	ldr r0, _02080030 ; =0x0000094C
	add r7, r1, #0
	add r4, r5, r0
	mov r0, #3
	add r1, r4, r7
	lsl r0, r0, #8
	ldrb r1, [r1, r0]
	mov r0, #0x30
	mul r0, r1
	ldr r1, _02080034 ; =0x0000083C
	add r2, r5, r0
	ldrsb r0, [r2, r1]
	str r0, [sp, #0x28]
	add r0, r1, #1
	ldrb r6, [r2, r0]
	ldr r0, [sp, #0x28]
	mov r1, #0x10
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	str r0, [sp, #0x1c]
	str r6, [sp]
	str r1, [sp, #4]
	mov r0, #6
	str r0, [sp, #8]
	str r1, [sp, #0xc]
	ldr r0, [r5]
	ldr r3, [sp, #0x1c]
	mov r1, #2
	mov r2, #0
	bl FillBgTilemapRect
	str r6, [sp]
	mov r1, #0x10
	str r1, [sp, #4]
	mov r0, #6
	str r0, [sp, #8]
	str r1, [sp, #0xc]
	ldr r0, [r5]
	ldr r3, [sp, #0x1c]
	mov r1, #1
	mov r2, #0
	bl FillBgTilemapRect
	ldr r1, _02080038 ; =0x00000302
	add r0, r4, r7
	ldrb r0, [r0, r1]
	cmp r0, #0
	bne _0207FFB8
	add r0, r1, #4
	ldrb r2, [r4, r0]
	mov r0, #0xc0
	mul r0, r7
	str r0, [sp, #0x24]
	mov r0, #0x10
	sub r1, r0, r2
	lsl r1, r1, #0x18
	lsr r1, r1, #0x18
	ldr r3, [sp, #0x24]
	str r1, [sp]
	mov r1, #6
	str r1, [sp, #4]
	add r3, r4, r3
	str r3, [sp, #8]
	str r2, [sp, #0xc]
	mov r2, #0
	str r2, [sp, #0x10]
	str r0, [sp, #0x14]
	str r1, [sp, #0x18]
	ldr r0, [r5]
	ldr r2, [sp, #0x1c]
	mov r1, #2
	add r3, r6, #0
	bl sub_0201C4EC
	ldr r0, _0208003C ; =0x00000306
	ldrb r2, [r4, r0]
	mov r0, #0x10
	sub r1, r0, r2
	lsl r1, r1, #0x18
	lsr r1, r1, #0x18
	str r1, [sp]
	mov r1, #6
	lsl r3, r1, #6
	add r4, r4, r3
	ldr r3, [sp, #0x24]
	str r1, [sp, #4]
	add r3, r4, r3
	str r3, [sp, #8]
	str r2, [sp, #0xc]
	mov r2, #0
	str r2, [sp, #0x10]
	str r0, [sp, #0x14]
	str r1, [sp, #0x18]
	ldr r0, [r5]
	ldr r2, [sp, #0x1c]
	mov r1, #1
	add r3, r6, #0
	bl sub_0201C4EC
	add sp, #0x2c
	pop {r4, r5, r6, r7, pc}
_0207FFB8:
	mov r0, #0xc0
	mul r0, r7
	str r0, [sp, #0x20]
	add r0, r1, #4
	ldrb r2, [r4, r0]
	mov r0, #0x10
	ldr r3, [sp, #0x20]
	sub r1, r0, r2
	lsl r1, r1, #0x18
	lsr r1, r1, #0x18
	str r1, [sp]
	mov r1, #6
	str r1, [sp, #4]
	add r3, r4, r3
	str r3, [sp, #8]
	mov r3, #0
	str r3, [sp, #0xc]
	str r3, [sp, #0x10]
	str r0, [sp, #0x14]
	str r1, [sp, #0x18]
	ldr r3, [sp, #0x28]
	ldr r0, [r5]
	add r2, r3, r2
	lsl r2, r2, #0x18
	mov r1, #2
	lsr r2, r2, #0x18
	add r3, r6, #0
	bl sub_0201C4EC
	ldr r0, _0208003C ; =0x00000306
	ldrb r2, [r4, r0]
	mov r0, #0x10
	sub r1, r0, r2
	lsl r1, r1, #0x18
	lsr r1, r1, #0x18
	str r1, [sp]
	mov r1, #6
	lsl r3, r1, #6
	add r4, r4, r3
	ldr r3, [sp, #0x20]
	str r1, [sp, #4]
	add r3, r4, r3
	str r3, [sp, #8]
	mov r3, #0
	str r3, [sp, #0xc]
	str r3, [sp, #0x10]
	str r0, [sp, #0x14]
	str r1, [sp, #0x18]
	ldr r3, [sp, #0x28]
	ldr r0, [r5]
	add r2, r3, r2
	lsl r2, r2, #0x18
	mov r1, #1
	lsr r2, r2, #0x18
	add r3, r6, #0
	bl sub_0201C4EC
	add sp, #0x2c
	pop {r4, r5, r6, r7, pc}
	nop
_02080030: .word 0x0000094C
_02080034: .word 0x0000083C
_02080038: .word 0x00000302
_0208003C: .word 0x00000306
	thumb_func_end sub_0207FEE8

	thumb_func_start sub_02080040
sub_02080040: ; 0x02080040
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	ldr r0, _02080184 ; =0x0000094C
	add r4, r1, #0
	add r1, r5, r0
	mov r0, #3
	lsl r0, r0, #8
	add r6, r1, r0
	ldrb r0, [r6, r4]
	add r7, r2, #0
	add r2, sp, #0
	lsl r0, r0, #2
	add r1, r5, r0
	mov r0, #0x66
	lsl r0, r0, #4
	ldr r0, [r1, r0]
	add r1, sp, #0
	add r1, #2
	bl sub_0200DE00
	cmp r7, #0
	ldr r0, _02080188 ; =0x0000083E
	bne _020800A8
	ldrb r3, [r6, r4]
	mov r7, #0x30
	add r2, r5, r0
	add r1, r3, #0
	mul r1, r7
	ldrsh r3, [r2, r1]
	sub r3, #8
	strh r3, [r2, r1]
	ldrb r3, [r6, r4]
	add r1, r0, #4
	add r2, r5, r1
	add r1, r3, #0
	mul r1, r7
	ldrsh r3, [r2, r1]
	add r0, #8
	add r0, r5, r0
	sub r3, #8
	strh r3, [r2, r1]
	ldrb r1, [r6, r4]
	add r2, r1, #0
	mul r2, r7
	ldrsh r1, [r0, r2]
	sub r1, #8
	strh r1, [r0, r2]
	add r1, sp, #0
	mov r0, #2
	ldrsh r0, [r1, r0]
	sub r0, #8
	b _020800E0
_020800A8:
	ldrb r3, [r6, r4]
	mov r7, #0x30
	add r2, r5, r0
	add r1, r3, #0
	mul r1, r7
	ldrsh r3, [r2, r1]
	add r3, #8
	strh r3, [r2, r1]
	ldrb r3, [r6, r4]
	add r1, r0, #4
	add r2, r5, r1
	add r1, r3, #0
	mul r1, r7
	ldrsh r3, [r2, r1]
	add r0, #8
	add r0, r5, r0
	add r3, #8
	strh r3, [r2, r1]
	ldrb r1, [r6, r4]
	add r2, r1, #0
	mul r2, r7
	ldrsh r1, [r0, r2]
	add r1, #8
	strh r1, [r0, r2]
	add r1, sp, #0
	mov r0, #2
	ldrsh r0, [r1, r0]
	add r0, #8
_020800E0:
	strh r0, [r1, #2]
	ldrb r1, [r6, r4]
	mov r0, #0x30
	ldr r2, _0208018C ; =0x0000084C
	mul r0, r1
	add r3, r5, r0
	add r1, r2, #0
	ldr r0, [r3, r2]
	sub r1, #0xe
	sub r2, #0xc
	ldrsh r1, [r3, r1]
	ldrsh r2, [r3, r2]
	bl sub_0200DD88
	ldrb r2, [r6, r4]
	mov r0, #0x30
	ldr r3, _02080190 ; =0x00000842
	add r1, r2, #0
	add r2, #0xa
	mul r1, r0
	lsl r0, r2, #2
	add r2, r5, r0
	mov r0, #0x66
	lsl r0, r0, #4
	ldr r0, [r2, r0]
	add r2, r5, r1
	ldrsh r1, [r2, r3]
	add r3, r3, #2
	ldrsh r2, [r2, r3]
	bl sub_0200DD88
	ldrb r2, [r6, r4]
	mov r0, #0x30
	ldr r3, _02080194 ; =0x00000846
	add r1, r2, #0
	add r2, #0x10
	mul r1, r0
	lsl r0, r2, #2
	add r2, r5, r0
	mov r0, #0x66
	lsl r0, r0, #4
	ldr r0, [r2, r0]
	add r2, r5, r1
	ldrsh r1, [r2, r3]
	add r3, r3, #2
	ldrsh r2, [r2, r3]
	bl sub_0200DD88
	ldrb r2, [r6, r4]
	mov r0, #0x30
	ldr r3, _02080194 ; =0x00000846
	add r1, r2, #0
	add r2, #0x16
	mul r1, r0
	lsl r0, r2, #2
	add r2, r5, r0
	mov r0, #0x66
	lsl r0, r0, #4
	ldr r0, [r2, r0]
	add r2, r5, r1
	ldrsh r1, [r2, r3]
	add r3, r3, #2
	ldrsh r2, [r2, r3]
	add r1, #8
	lsl r1, r1, #0x10
	asr r1, r1, #0x10
	bl sub_0200DD88
	ldrb r0, [r6, r4]
	add r3, sp, #0
	mov r2, #0
	lsl r0, r0, #2
	add r1, r5, r0
	mov r0, #0x66
	lsl r0, r0, #4
	ldr r0, [r1, r0]
	mov r1, #2
	ldrsh r1, [r3, r1]
	ldrsh r2, [r3, r2]
	bl sub_0200DD88
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_02080184: .word 0x0000094C
_02080188: .word 0x0000083E
_0208018C: .word 0x0000084C
_02080190: .word 0x00000842
_02080194: .word 0x00000846
	thumb_func_end sub_02080040

	thumb_func_start sub_02080198
sub_02080198: ; 0x02080198
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x18
	add r5, r0, #0
	ldr r0, _02080464 ; =0x0000094C
	mov r1, #0x30
	add r4, r5, r0
	mov r0, #0xc
	bl AllocFromHeap
	add r7, r0, #0
	mov r0, #3
	lsl r0, r0, #8
	ldrb r1, [r4, r0]
	mov r0, #0x30
	add r3, r7, #0
	mul r0, r1
	add r1, r5, r0
	ldr r0, _02080468 ; =0x00000828
	mov r2, #6
	add r6, r1, r0
_020801C0:
	ldmia r6!, {r0, r1}
	stmia r3!, {r0, r1}
	sub r2, r2, #1
	bne _020801C0
	mov r1, #3
	lsl r1, r1, #8
	ldrb r0, [r4, r1]
	add r1, r1, #1
	ldrb r1, [r4, r1]
	mov r2, #0x30
	add r3, r0, #0
	mul r3, r2
	mul r2, r1
	ldr r1, _02080468 ; =0x00000828
	add r0, r5, r3
	add r2, r5, r2
	add r6, r2, r1
	add r3, r0, r1
	mov r2, #6
_020801E6:
	ldmia r6!, {r0, r1}
	stmia r3!, {r0, r1}
	sub r2, r2, #1
	bne _020801E6
	ldr r0, _0208046C ; =0x00000301
	add r6, r7, #0
	ldrb r1, [r4, r0]
	mov r0, #0x30
	mov r2, #6
	mul r0, r1
	add r1, r5, r0
	ldr r0, _02080468 ; =0x00000828
	add r3, r1, r0
_02080200:
	ldmia r6!, {r0, r1}
	stmia r3!, {r0, r1}
	sub r2, r2, #1
	bne _02080200
	mov r0, #0xc
	add r1, r7, #0
	bl FreeToHeapExplicit
	mov r1, #3
	lsl r1, r1, #8
	ldrb r3, [r4, r1]
	ldr r0, _02080470 ; =0x0000083E
	add r2, r5, r0
	mov r0, #0x30
	add r7, r3, #0
	mul r7, r0
	ldrsh r3, [r2, r7]
	str r3, [sp]
	add r3, r1, #1
	ldrb r3, [r4, r3]
	add r6, r3, #0
	mul r6, r0
	ldr r3, _02080470 ; =0x0000083E
	add r6, r5, r6
	ldrsh r3, [r6, r3]
	strh r3, [r2, r7]
	add r2, r1, #1
	ldrb r2, [r4, r2]
	add r3, r2, #0
	mul r3, r0
	add r6, r5, r3
	ldr r3, [sp]
	ldr r2, _02080470 ; =0x0000083E
	strh r3, [r6, r2]
	add r2, r2, #2
	add r3, r5, r2
	ldrb r2, [r4, r1]
	add r7, r2, #0
	mul r7, r0
	ldrsh r2, [r3, r7]
	str r2, [sp, #4]
	add r2, r1, #1
	ldrb r2, [r4, r2]
	add r6, r2, #0
	mul r6, r0
	add r2, r5, r6
	ldr r6, _02080470 ; =0x0000083E
	add r6, r6, #2
	ldrsh r2, [r2, r6]
	strh r2, [r3, r7]
	add r2, r1, #1
	ldrb r2, [r4, r2]
	add r3, r2, #0
	mul r3, r0
	add r2, r5, r3
	ldr r3, _02080470 ; =0x0000083E
	add r6, r3, #2
	ldr r3, [sp, #4]
	strh r3, [r2, r6]
	ldr r2, _02080470 ; =0x0000083E
	add r2, r2, #4
	add r3, r5, r2
	ldrb r2, [r4, r1]
	add r7, r2, #0
	mul r7, r0
	ldrsh r2, [r3, r7]
	str r2, [sp, #8]
	add r2, r1, #1
	ldrb r2, [r4, r2]
	add r6, r2, #0
	mul r6, r0
	add r2, r5, r6
	ldr r6, _02080470 ; =0x0000083E
	add r6, r6, #4
	ldrsh r2, [r2, r6]
	strh r2, [r3, r7]
	add r2, r1, #1
	ldrb r2, [r4, r2]
	add r3, r2, #0
	mul r3, r0
	add r2, r5, r3
	ldr r3, _02080470 ; =0x0000083E
	add r6, r3, #4
	ldr r3, [sp, #8]
	strh r3, [r2, r6]
	ldr r2, _02080470 ; =0x0000083E
	add r2, r2, #6
	add r3, r5, r2
	ldrb r2, [r4, r1]
	add r7, r2, #0
	mul r7, r0
	ldrsh r2, [r3, r7]
	str r2, [sp, #0xc]
	add r2, r1, #1
	ldrb r2, [r4, r2]
	add r6, r2, #0
	mul r6, r0
	add r2, r5, r6
	ldr r6, _02080470 ; =0x0000083E
	add r6, r6, #6
	ldrsh r2, [r2, r6]
	strh r2, [r3, r7]
	add r2, r1, #1
	ldrb r2, [r4, r2]
	add r3, r2, #0
	mul r3, r0
	add r2, r5, r3
	ldr r3, _02080470 ; =0x0000083E
	add r6, r3, #6
	ldr r3, [sp, #0xc]
	strh r3, [r2, r6]
	ldrb r3, [r4, r1]
	ldr r2, _02080470 ; =0x0000083E
	add r2, #8
	add r7, r3, #0
	add r2, r5, r2
	mul r7, r0
	ldrsh r3, [r2, r7]
	str r3, [sp, #0x10]
	add r3, r1, #1
	ldrb r3, [r4, r3]
	add r6, r3, #0
	ldr r3, _02080470 ; =0x0000083E
	mul r6, r0
	add r6, r5, r6
	add r3, #8
	ldrsh r3, [r6, r3]
	strh r3, [r2, r7]
	add r2, r1, #1
	ldrb r2, [r4, r2]
	add r3, r2, #0
	mul r3, r0
	add r6, r5, r3
	ldr r3, _02080470 ; =0x0000083E
	ldr r2, [sp, #0x10]
	add r3, #8
	strh r2, [r6, r3]
	ldrb r3, [r4, r1]
	ldr r2, _02080470 ; =0x0000083E
	add r2, #0xa
	add r7, r3, #0
	add r2, r5, r2
	mul r7, r0
	ldrsh r3, [r2, r7]
	str r3, [sp, #0x14]
	add r3, r1, #1
	ldrb r3, [r4, r3]
	add r6, r3, #0
	ldr r3, _02080470 ; =0x0000083E
	mul r6, r0
	add r6, r5, r6
	add r3, #0xa
	ldrsh r3, [r6, r3]
	strh r3, [r2, r7]
	add r2, r1, #1
	ldrb r2, [r4, r2]
	add r3, r2, #0
	mul r3, r0
	add r6, r5, r3
	ldr r3, _02080470 ; =0x0000083E
	ldr r2, [sp, #0x14]
	add r3, #0xa
	strh r2, [r6, r3]
	ldr r2, _02080470 ; =0x0000083E
	sub r2, r2, #2
	add r6, r5, r2
	ldrb r2, [r4, r1]
	add r3, r2, #0
	mul r3, r0
	add r3, r6, r3
	mov r2, #0
	ldrsb r7, [r3, r2]
	add r2, r1, #1
	ldrb r2, [r4, r2]
	add r6, r2, #0
	mul r6, r0
	add r2, r5, r6
	ldr r6, _02080470 ; =0x0000083E
	sub r6, r6, #2
	ldrsb r2, [r2, r6]
	strb r2, [r3]
	add r2, r1, #1
	ldrb r2, [r4, r2]
	add r3, r2, #0
	mul r3, r0
	add r2, r5, r3
	ldr r3, _02080470 ; =0x0000083E
	sub r3, r3, #2
	strb r7, [r2, r3]
	ldr r2, _02080470 ; =0x0000083E
	sub r2, r2, #1
	add r6, r5, r2
	ldrb r2, [r4, r1]
	add r7, r2, #0
	mul r7, r0
	ldrsb r2, [r6, r7]
	mov ip, r2
	add r2, r1, #1
	ldrb r2, [r4, r2]
	add r3, r2, #0
	ldr r2, _02080470 ; =0x0000083E
	mul r3, r0
	add r3, r5, r3
	sub r2, r2, #1
	ldrsb r2, [r3, r2]
	strb r2, [r6, r7]
	add r2, r1, #1
	ldrb r2, [r4, r2]
	mul r0, r2
	ldr r2, _02080470 ; =0x0000083E
	add r0, r5, r0
	sub r3, r2, #1
	mov r2, ip
	strb r2, [r0, r3]
	ldrb r1, [r4, r1]
	add r0, r5, #0
	bl sub_0207D5DC
	ldr r1, _0208046C ; =0x00000301
	add r0, r5, #0
	ldrb r1, [r4, r1]
	bl sub_0207D5DC
	mov r1, #3
	lsl r1, r1, #8
	ldrb r1, [r4, r1]
	add r0, r5, #0
	bl sub_0207D6D8
	ldr r1, _0208046C ; =0x00000301
	add r0, r5, #0
	ldrb r1, [r4, r1]
	bl sub_0207D6D8
	add r0, r5, #0
	mov r1, #0
	bl sub_0208047C
	add r0, r5, #0
	mov r1, #1
	bl sub_0208047C
	mov r0, #3
	lsl r0, r0, #8
	ldrb r1, [r4, r0]
	mov r2, #0x30
	add r0, r5, #0
	mul r2, r1
	add r3, r5, r2
	ldr r2, _02080474 ; =0x00000836
	ldrh r2, [r3, r2]
	lsl r2, r2, #0x14
	lsr r2, r2, #0x14
	lsl r2, r2, #0x18
	lsr r2, r2, #0x18
	bl sub_0207EFC4
	ldr r0, _0208046C ; =0x00000301
	mov r2, #0x30
	ldrb r1, [r4, r0]
	add r0, r5, #0
	mul r2, r1
	add r3, r5, r2
	ldr r2, _02080474 ; =0x00000836
	ldrh r2, [r3, r2]
	lsl r2, r2, #0x14
	lsr r2, r2, #0x14
	lsl r2, r2, #0x18
	lsr r2, r2, #0x18
	bl sub_0207EFC4
	mov r0, #3
	lsl r0, r0, #8
	ldrb r1, [r4, r0]
	mov r2, #0x30
	add r0, r5, #0
	mul r2, r1
	add r3, r5, r2
	ldr r2, _02080478 ; =0x00000834
	ldrh r2, [r3, r2]
	bl sub_0207F004
	ldr r0, _0208046C ; =0x00000301
	mov r2, #0x30
	ldrb r1, [r4, r0]
	add r0, r5, #0
	mul r2, r1
	add r3, r5, r2
	ldr r2, _02080478 ; =0x00000834
	ldrh r2, [r3, r2]
	bl sub_0207F004
	mov r1, #3
	lsl r1, r1, #8
	ldrb r1, [r4, r1]
	add r0, r5, #0
	bl sub_0207F0C8
	ldr r1, _0208046C ; =0x00000301
	add r0, r5, #0
	ldrb r1, [r4, r1]
	bl sub_0207F0C8
	add sp, #0x18
	pop {r3, r4, r5, r6, r7, pc}
	nop
_02080464: .word 0x0000094C
_02080468: .word 0x00000828
_0208046C: .word 0x00000301
_02080470: .word 0x0000083E
_02080474: .word 0x00000836
_02080478: .word 0x00000834
	thumb_func_end sub_02080198

	thumb_func_start sub_0208047C
sub_0208047C: ; 0x0208047C
	push {r3, r4, r5, r6, r7, lr}
	add r7, r1, #0
	ldr r1, _02080500 ; =0x0000094C
	add r6, r0, #0
	add r4, r6, r1
	mov r1, #0xc0
	mul r1, r7
	add r5, r4, r1
	bl sub_0207A16C
	add r3, r0, #0
	mov r0, #3
	add r1, r4, r7
	lsl r0, r0, #8
	ldrb r1, [r1, r0]
	mov r0, #0x30
	mul r0, r1
	add r1, r6, r0
	ldr r0, _02080504 ; =0x00000838
	ldrb r0, [r1, r0]
	cmp r0, #1
	bne _020804D2
	mov r3, #0xf
	mov r1, #0
	lsl r3, r3, #0xc
	mov r4, #0x4b
_020804B0:
	lsl r0, r1, #1
	add r2, r5, r0
	add r2, #0x6c
	ldrh r2, [r2]
	add r0, r5, r0
	add r0, #0x6c
	and r2, r3
	lsl r2, r2, #0x10
	lsr r2, r2, #0x10
	orr r2, r4
	strh r2, [r0]
	add r0, r1, #1
	lsl r0, r0, #0x10
	lsr r1, r0, #0x10
	cmp r1, #9
	blo _020804B0
	pop {r3, r4, r5, r6, r7, pc}
_020804D2:
	mov r6, #0xf
	ldr r0, _02080508 ; =0x00000FFF
	mov r4, #0
	lsl r6, r6, #0xc
_020804DA:
	lsl r2, r4, #1
	add r1, r5, r2
	add r1, #0x6c
	ldrh r1, [r1]
	ldrh r7, [r3, r2]
	and r1, r6
	lsl r1, r1, #0x10
	lsr r1, r1, #0x10
	and r7, r0
	orr r7, r1
	add r1, r5, r2
	add r1, #0x6c
	strh r7, [r1]
	add r1, r4, #1
	lsl r1, r1, #0x10
	lsr r4, r1, #0x10
	cmp r4, #9
	blo _020804DA
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_02080500: .word 0x0000094C
_02080504: .word 0x00000838
_02080508: .word 0x00000FFF
	thumb_func_end sub_0208047C

	thumb_func_start sub_0208050C
sub_0208050C: ; 0x0208050C
	push {r4, r5, r6, lr}
	add r5, r0, #0
	mov r0, #0x85
	lsl r0, r0, #2
	add r6, r1, #0
	add r0, r5, r0
	mov r1, #1
	bl sub_0200E9BC
	add r0, r5, #0
	bl sub_0207CB20
	bl sub_0207CB90
	add r0, r5, #0
	mov r1, #0
	bl sub_02079224
	ldr r0, _02080600 ; =0x00000654
	mov r4, #0
	ldr r0, [r5, r0]
	add r1, r0, #0
	add r1, #0x36
	ldrb r1, [r1]
	lsl r1, r1, #0x18
	lsr r1, r1, #0x1c
	beq _0208059E
_02080542:
	add r2, r0, r4
	add r2, #0x30
	ldrb r2, [r2]
	cmp r2, #0
	bne _02080594
	ldr r1, _02080604 ; =0x00000C65
	add r0, r0, r4
	ldrb r2, [r5, r1]
	add r0, #0x30
	add r2, r2, #1
	strb r2, [r0]
	ldrb r1, [r5, r1]
	add r0, r5, #0
	bl sub_0207D8EC
	add r0, r5, #0
	mov r1, #0x23
	mov r2, #1
	bl sub_0207DAC4
	ldr r0, _02080608 ; =0x00000678
	mov r1, #0
	ldr r0, [r5, r0]
	bl sub_0200DD08
	ldr r0, _02080600 ; =0x00000654
	ldr r0, [r5, r0]
	add r0, #0x36
	ldrb r0, [r0]
	lsl r0, r0, #0x18
	lsr r0, r0, #0x1c
	sub r0, r0, #1
	cmp r4, r0
	bne _0208058E
	add r0, r5, #0
	mov r1, #6
	bl sub_0207AB84
_0208058E:
	mov r0, #1
	str r0, [r6]
	pop {r4, r5, r6, pc}
_02080594:
	add r2, r4, #1
	lsl r2, r2, #0x18
	lsr r4, r2, #0x18
	cmp r4, r1
	blo _02080542
_0208059E:
	cmp r1, #5
	bhi _020805F4
	add r0, r1, r1
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_020805AE: ; jump table
	.short _020805F4 - _020805AE - 2 ; case 0
	.short _020805BA - _020805AE - 2 ; case 1
	.short _020805C6 - _020805AE - 2 ; case 2
	.short _020805D2 - _020805AE - 2 ; case 3
	.short _020805DE - _020805AE - 2 ; case 4
	.short _020805EA - _020805AE - 2 ; case 5
_020805BA:
	add r0, r5, #0
	mov r1, #0x70
	mov r2, #1
	bl sub_0207DAEC
	b _020805F4
_020805C6:
	add r0, r5, #0
	mov r1, #0x63
	mov r2, #1
	bl sub_0207DAEC
	b _020805F4
_020805D2:
	add r0, r5, #0
	mov r1, #0x71
	mov r2, #1
	bl sub_0207DAEC
	b _020805F4
_020805DE:
	add r0, r5, #0
	mov r1, #0x72
	mov r2, #1
	bl sub_0207DAEC
	b _020805F4
_020805EA:
	add r0, r5, #0
	mov r1, #0x73
	mov r2, #1
	bl sub_0207DAEC
_020805F4:
	ldr r0, _0208060C ; =0x00000C62
	mov r1, #0x17
	strb r1, [r5, r0]
	mov r0, #0x18
	str r0, [r6]
	pop {r4, r5, r6, pc}
	.balign 4, 0
_02080600: .word 0x00000654
_02080604: .word 0x00000C65
_02080608: .word 0x00000678
_0208060C: .word 0x00000C62
	thumb_func_end sub_0208050C

	thumb_func_start sub_02080610
sub_02080610: ; 0x02080610
	push {r4, lr}
	add r4, r0, #0
	mov r0, #0x89
	lsl r0, r0, #2
	add r0, r4, r0
	mov r1, #1
	bl sub_0200E9BC
	add r0, r4, #0
	mov r1, #0x23
	mov r2, #1
	bl sub_0207DAC4
	ldr r0, _02080638 ; =0x00000678
	mov r1, #0
	ldr r0, [r4, r0]
	bl sub_0200DD08
	mov r0, #1
	pop {r4, pc}
	.balign 4, 0
_02080638: .word 0x00000678
	thumb_func_end sub_02080610

	thumb_func_start sub_0208063C
sub_0208063C: ; 0x0208063C
	push {r3, r4, r5, r6, r7, lr}
	str r1, [sp]
	mov r1, #0
	add r5, r0, #0
	bl sub_02079224
	ldr r0, _02080718 ; =0x00000654
	mov r4, #0
	ldr r1, [r5, r0]
	add r0, r1, #0
	add r0, #0x36
	ldrb r0, [r0]
	lsl r0, r0, #0x18
	lsr r2, r0, #0x1c
	beq _020806C2
	ldr r0, _0208071C ; =0x00000C65
	ldrb r0, [r5, r0]
	add r0, r0, #1
_02080660:
	add r3, r1, r4
	add r3, #0x30
	ldrb r3, [r3]
	cmp r0, r3
	bne _020806B8
	add r0, r1, r4
	mov r2, #0
	add r0, #0x30
	strb r2, [r0]
	ldr r0, _02080718 ; =0x00000654
	ldr r6, [r5, r0]
	add r0, r6, #0
	add r0, #0x36
	ldrb r0, [r0]
	lsl r0, r0, #0x18
	lsr r0, r0, #0x1c
	sub r0, r0, #1
	cmp r4, r0
	bge _020806C2
	ldr r0, _02080718 ; =0x00000654
	add r1, r0, #0
_0208068A:
	add r3, r6, r4
	add r3, #0x31
	ldrb r3, [r3]
	add r6, r6, r4
	add r6, #0x30
	strb r3, [r6]
	ldr r3, [r5, r0]
	add r3, r3, r4
	add r3, #0x31
	strb r2, [r3]
	add r3, r4, #1
	lsl r3, r3, #0x18
	ldr r6, [r5, r1]
	lsr r4, r3, #0x18
	add r3, r6, #0
	add r3, #0x36
	ldrb r3, [r3]
	lsl r3, r3, #0x18
	lsr r3, r3, #0x1c
	sub r3, r3, #1
	cmp r4, r3
	blt _0208068A
	b _020806C2
_020806B8:
	add r3, r4, #1
	lsl r3, r3, #0x18
	lsr r4, r3, #0x18
	cmp r4, r2
	blo _02080660
_020806C2:
	ldr r6, _02080720 ; =0x00000855
	mov r4, #0
	mov r7, #0x30
_020806C8:
	add r0, r4, #0
	mul r0, r7
	add r0, r5, r0
	ldrb r0, [r0, r6]
	cmp r0, #0
	beq _020806DC
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0207D8EC
_020806DC:
	add r0, r4, #1
	lsl r0, r0, #0x18
	lsr r4, r0, #0x18
	cmp r4, #6
	blo _020806C8
	mov r0, #0x85
	lsl r0, r0, #2
	add r0, r5, r0
	mov r1, #1
	bl sub_0200E9BC
	add r0, r5, #0
	bl sub_0207CB20
	bl sub_0207CB90
	add r0, r5, #0
	mov r1, #0x23
	mov r2, #1
	bl sub_0207DAC4
	ldr r0, _02080724 ; =0x00000678
	mov r1, #0
	ldr r0, [r5, r0]
	bl sub_0200DD08
	ldr r0, [sp]
	mov r1, #1
	str r1, [r0]
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_02080718: .word 0x00000654
_0208071C: .word 0x00000C65
_02080720: .word 0x00000855
_02080724: .word 0x00000678
	thumb_func_end sub_0208063C

	thumb_func_start sub_02080728
sub_02080728: ; 0x02080728
	push {r4, lr}
	add r4, r1, #0
	ldr r1, _02080744 ; =0x00000654
	mov r2, #0
	ldr r1, [r0, r1]
	add r1, #0x27
	strb r2, [r1]
	bl sub_0207CB20
	bl sub_0207CB90
	mov r0, #0x20
	str r0, [r4]
	pop {r4, pc}
	.balign 4, 0
_02080744: .word 0x00000654
	thumb_func_end sub_02080728

	thumb_func_start sub_02080748
sub_02080748: ; 0x02080748
	push {r4, lr}
	add r4, r1, #0
	ldr r1, _02080764 ; =0x00000654
	mov r2, #0
	ldr r1, [r0, r1]
	add r1, #0x27
	strb r2, [r1]
	bl sub_0207CB20
	bl sub_0207CB90
	mov r0, #0x20
	str r0, [r4]
	pop {r4, pc}
	.balign 4, 0
_02080764: .word 0x00000654
	thumb_func_end sub_02080748

	thumb_func_start sub_02080768
sub_02080768: ; 0x02080768
	push {r4, lr}
	add r4, r1, #0
	ldr r1, _02080784 ; =0x00000654
	mov r2, #1
	ldr r1, [r0, r1]
	add r1, #0x27
	strb r2, [r1]
	bl sub_0207CB20
	bl sub_0207CB90
	mov r0, #0x20
	str r0, [r4]
	pop {r4, pc}
	.balign 4, 0
_02080784: .word 0x00000654
	thumb_func_end sub_02080768

	thumb_func_start sub_02080788
sub_02080788: ; 0x02080788
	push {r3, r4, r5, lr}
	add r5, r0, #0
	add r4, r1, #0
	bl sub_0207CB20
	bl sub_0207CB90
	mov r0, #0x85
	lsl r0, r0, #2
	add r0, r5, r0
	mov r1, #1
	bl sub_0200E9BC
	add r0, r5, #0
	bl sub_020807AC
	str r0, [r4]
	pop {r3, r4, r5, pc}
	thumb_func_end sub_02080788

	thumb_func_start sub_020807AC
sub_020807AC: ; 0x020807AC
	push {r4, lr}
	add r4, r0, #0
	ldr r0, _02080828 ; =0x00000654
	ldr r1, _0208082C ; =0x00000C65
	ldr r0, [r4, r0]
	ldrb r1, [r4, r1]
	ldr r0, [r0]
	bl GetPartyMonByIndex
	mov r1, #0xa2
	mov r2, #0
	bl GetMonData
	cmp r0, #0
	bne _020807F2
	mov r2, #0x1f
	lsl r2, r2, #6
	ldr r0, [r4, r2]
	add r2, #8
	ldr r2, [r4, r2]
	mov r1, #0x76
	bl ReadMsgDataIntoString
	ldr r0, _0208082C ; =0x00000C65
	ldrb r0, [r4, r0]
	add r0, #0x16
	lsl r0, r0, #2
	add r1, r4, r0
	mov r0, #0x66
	lsl r0, r0, #4
	ldr r0, [r1, r0]
	mov r1, #1
	bl sub_02024830
	b _02080808
_020807F2:
	mov r2, #0x1f
	lsl r2, r2, #6
	ldr r0, [r4, r2]
	add r2, #8
	ldr r2, [r4, r2]
	mov r1, #0x77
	bl ReadMsgDataIntoString
	ldr r0, _0208082C ; =0x00000C65
	mov r1, #7
	strb r1, [r4, r0]
_02080808:
	mov r1, #0
	add r0, r4, #0
	mvn r1, r1
	mov r2, #1
	bl sub_0207DAEC
	ldr r0, _02080828 ; =0x00000654
	mov r1, #0
	ldr r0, [r4, r0]
	add r0, #0x27
	strb r1, [r0]
	ldr r0, _02080830 ; =0x00000C62
	mov r1, #0x19
	strb r1, [r4, r0]
	mov r0, #0x18
	pop {r4, pc}
	.balign 4, 0
_02080828: .word 0x00000654
_0208082C: .word 0x00000C65
_02080830: .word 0x00000C62
	thumb_func_end sub_020807AC

	thumb_func_start sub_02080834
sub_02080834: ; 0x02080834
	push {r4, r5, r6, lr}
	add r6, r1, #0
	add r4, r0, #0
	ldr r1, _020808C8 ; =0x00000654
	mov r0, #1
	ldr r1, [r4, r1]
	add r1, #0x27
	ldrb r1, [r1]
	sub r1, #0xb
	lsl r1, r1, #0x10
	lsr r1, r1, #0x10
	bl sub_02067DF4
	add r1, r0, #0
	beq _0208085C
	ldr r0, _020808C8 ; =0x00000654
	ldr r0, [r4, r0]
	ldr r0, [r0, #0x18]
	blx r1
	b _0208085E
_0208085C:
	mov r0, #1
_0208085E:
	cmp r0, #5
	bhi _0208089C
	add r0, r0, r0
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_0208086E: ; jump table
	.short _0208087A - _0208086E - 2 ; case 0
	.short _0208088A - _0208086E - 2 ; case 1
	.short _0208088E - _0208086E - 2 ; case 2
	.short _02080892 - _0208086E - 2 ; case 3
	.short _02080896 - _0208086E - 2 ; case 4
	.short _0208089A - _0208086E - 2 ; case 5
_0208087A:
	add r0, r4, #0
	bl sub_0207CB20
	bl sub_0207CB90
	mov r0, #0x20
	str r0, [r6]
	pop {r4, r5, r6, pc}
_0208088A:
	mov r5, #0x65
	b _0208089C
_0208088E:
	mov r5, #0x4d
	b _0208089C
_02080892:
	mov r5, #0xb4
	b _0208089C
_02080896:
	mov r5, #0x64
	b _0208089C
_0208089A:
	mov r5, #0xb5
_0208089C:
	mov r0, #0x85
	lsl r0, r0, #2
	add r0, r4, r0
	mov r1, #1
	bl sub_0200E9BC
	add r0, r4, #0
	bl sub_0207CB20
	bl sub_0207CB90
	add r0, r4, #0
	add r1, r5, #0
	mov r2, #1
	bl sub_0207DAEC
	ldr r0, _020808CC ; =0x00000C62
	mov r1, #3
	strb r1, [r4, r0]
	mov r0, #0x18
	str r0, [r6]
	pop {r4, r5, r6, pc}
	.balign 4, 0
_020808C8: .word 0x00000654
_020808CC: .word 0x00000C62
	thumb_func_end sub_02080834

	thumb_func_start sub_020808D0
sub_020808D0: ; 0x020808D0
	ldr r2, _020808E0 ; =0x00000654
	mov r3, #0xb
	ldr r2, [r0, r2]
	add r2, #0x27
	strb r3, [r2]
	ldr r3, _020808E4 ; =sub_02080834
	bx r3
	nop
_020808E0: .word 0x00000654
_020808E4: .word sub_02080834
	thumb_func_end sub_020808D0

	thumb_func_start sub_020808E8
sub_020808E8: ; 0x020808E8
	ldr r2, _020808F8 ; =0x00000654
	mov r3, #0xf
	ldr r2, [r0, r2]
	add r2, #0x27
	strb r3, [r2]
	ldr r3, _020808FC ; =sub_02080834
	bx r3
	nop
_020808F8: .word 0x00000654
_020808FC: .word sub_02080834
	thumb_func_end sub_020808E8

	thumb_func_start sub_02080900
sub_02080900: ; 0x02080900
	ldr r2, _02080910 ; =0x00000654
	mov r3, #0xe
	ldr r2, [r0, r2]
	add r2, #0x27
	strb r3, [r2]
	ldr r3, _02080914 ; =sub_02080834
	bx r3
	nop
_02080910: .word 0x00000654
_02080914: .word sub_02080834
	thumb_func_end sub_02080900

	thumb_func_start sub_02080918
sub_02080918: ; 0x02080918
	ldr r2, _02080928 ; =0x00000654
	mov r3, #0xd
	ldr r2, [r0, r2]
	add r2, #0x27
	strb r3, [r2]
	ldr r3, _0208092C ; =sub_02080834
	bx r3
	nop
_02080928: .word 0x00000654
_0208092C: .word sub_02080834
	thumb_func_end sub_02080918

	thumb_func_start sub_02080930
sub_02080930: ; 0x02080930
	ldr r2, _02080940 ; =0x00000654
	mov r3, #0x11
	ldr r2, [r0, r2]
	add r2, #0x27
	strb r3, [r2]
	ldr r3, _02080944 ; =sub_02080834
	bx r3
	nop
_02080940: .word 0x00000654
_02080944: .word sub_02080834
	thumb_func_end sub_02080930

	thumb_func_start sub_02080948
sub_02080948: ; 0x02080948
	ldr r2, _02080958 ; =0x00000654
	mov r3, #0xc
	ldr r2, [r0, r2]
	add r2, #0x27
	strb r3, [r2]
	ldr r3, _0208095C ; =sub_02080834
	bx r3
	nop
_02080958: .word 0x00000654
_0208095C: .word sub_02080834
	thumb_func_end sub_02080948

	thumb_func_start sub_02080960
sub_02080960: ; 0x02080960
	ldr r2, _02080970 ; =0x00000654
	mov r3, #0x10
	ldr r2, [r0, r2]
	add r2, #0x27
	strb r3, [r2]
	ldr r3, _02080974 ; =sub_02080834
	bx r3
	nop
_02080970: .word 0x00000654
_02080974: .word sub_02080834
	thumb_func_end sub_02080960

	thumb_func_start sub_02080978
sub_02080978: ; 0x02080978
	ldr r2, _02080988 ; =0x00000654
	mov r3, #0x17
	ldr r2, [r0, r2]
	add r2, #0x27
	strb r3, [r2]
	ldr r3, _0208098C ; =sub_02080834
	bx r3
	nop
_02080988: .word 0x00000654
_0208098C: .word sub_02080834
	thumb_func_end sub_02080978

	thumb_func_start sub_02080990
sub_02080990: ; 0x02080990
	ldr r2, _020809A0 ; =0x00000654
	mov r3, #0x12
	ldr r2, [r0, r2]
	add r2, #0x27
	strb r3, [r2]
	ldr r3, _020809A4 ; =sub_02080834
	bx r3
	nop
_020809A0: .word 0x00000654
_020809A4: .word sub_02080834
	thumb_func_end sub_02080990

	thumb_func_start sub_020809A8
sub_020809A8: ; 0x020809A8
	ldr r2, _020809B8 ; =0x00000654
	mov r3, #0x13
	ldr r2, [r0, r2]
	add r2, #0x27
	strb r3, [r2]
	ldr r3, _020809BC ; =sub_02080834
	bx r3
	nop
_020809B8: .word 0x00000654
_020809BC: .word sub_02080834
	thumb_func_end sub_020809A8

	thumb_func_start sub_020809C0
sub_020809C0: ; 0x020809C0
	ldr r2, _020809D0 ; =0x00000654
	mov r3, #0x14
	ldr r2, [r0, r2]
	add r2, #0x27
	strb r3, [r2]
	ldr r3, _020809D4 ; =sub_02080834
	bx r3
	nop
_020809D0: .word 0x00000654
_020809D4: .word sub_02080834
	thumb_func_end sub_020809C0

	thumb_func_start sub_020809D8
sub_020809D8: ; 0x020809D8
	ldr r2, _020809E8 ; =0x00000654
	mov r3, #0x15
	ldr r2, [r0, r2]
	add r2, #0x27
	strb r3, [r2]
	ldr r3, _020809EC ; =sub_02080834
	bx r3
	nop
_020809E8: .word 0x00000654
_020809EC: .word sub_02080834
	thumb_func_end sub_020809D8

	thumb_func_start sub_020809F0
sub_020809F0: ; 0x020809F0
	ldr r2, _02080A00 ; =0x00000654
	mov r3, #0x16
	ldr r2, [r0, r2]
	add r2, #0x27
	strb r3, [r2]
	ldr r3, _02080A04 ; =sub_02080834
	bx r3
	nop
_02080A00: .word 0x00000654
_02080A04: .word sub_02080834
	thumb_func_end sub_020809F0

	thumb_func_start sub_02080A08
sub_02080A08: ; 0x02080A08
	push {r3, r4, r5, lr}
	add r4, r0, #0
	add r5, r1, #0
	bl sub_02080A58
	str r0, [r5]
	cmp r0, #0x1e
	bne _02080A1E
	ldr r0, _02080A20 ; =0x00000C6E
	mov r1, #0xe
	strh r1, [r4, r0]
_02080A1E:
	pop {r3, r4, r5, pc}
	.balign 4, 0
_02080A20: .word 0x00000C6E
	thumb_func_end sub_02080A08

	thumb_func_start sub_02080A24
sub_02080A24: ; 0x02080A24
	push {r3, r4, r5, lr}
	add r4, r0, #0
	add r5, r1, #0
	bl sub_02080A58
	str r0, [r5]
	cmp r0, #0x1e
	bne _02080A3A
	ldr r0, _02080A3C ; =0x00000C6E
	mov r1, #0xf
	strh r1, [r4, r0]
_02080A3A:
	pop {r3, r4, r5, pc}
	.balign 4, 0
_02080A3C: .word 0x00000C6E
	thumb_func_end sub_02080A24

	thumb_func_start sub_02080A40
sub_02080A40: ; 0x02080A40
	ldr r2, _02080A50 ; =0x00000654
	mov r3, #0x18
	ldr r2, [r0, r2]
	add r2, #0x27
	strb r3, [r2]
	ldr r3, _02080A54 ; =sub_02080834
	bx r3
	nop
_02080A50: .word 0x00000654
_02080A54: .word sub_02080834
	thumb_func_end sub_02080A40

	thumb_func_start sub_02080A58
sub_02080A58: ; 0x02080A58
	push {r3, r4, lr}
	sub sp, #4
	add r4, r0, #0
	mov r0, #0x85
	lsl r0, r0, #2
	add r0, r4, r0
	mov r1, #1
	bl sub_0200E9BC
	add r0, r4, #0
	bl sub_0207CB20
	bl sub_0207CB90
	ldr r0, _02080B50 ; =0x00000C65
	ldrb r1, [r4, r0]
	mov r0, #0x30
	mul r0, r1
	add r1, r4, r0
	mov r0, #0x83
	lsl r0, r0, #4
	ldrh r0, [r1, r0]
	mov r1, #5
	bl _s32_div_f
	ldr r1, _02080B54 ; =0x00000C68
	strh r0, [r4, r1]
	sub r0, r1, #3
	ldrb r2, [r4, r0]
	mov r0, #0x30
	mul r0, r2
	add r2, r4, r0
	ldr r0, _02080B58 ; =0x0000082E
	ldrh r2, [r2, r0]
	ldrh r0, [r4, r1]
	cmp r2, r0
	bhi _02080AB8
	add r0, r4, #0
	mov r1, #0x7f
	mov r2, #1
	bl sub_0207DAEC
	ldr r0, _02080B5C ; =0x00000C62
	mov r1, #3
	strb r1, [r4, r0]
	add sp, #4
	mov r0, #0x18
	pop {r3, r4, pc}
_02080AB8:
	sub r0, r1, #5
	ldrb r2, [r4, r0]
	mov r0, #0x40
	orr r2, r0
	sub r0, r1, #5
	strb r2, [r4, r0]
	ldrb r0, [r4, r0]
	mov r2, #0x3f
	bic r0, r2
	sub r2, r1, #3
	ldrb r3, [r4, r2]
	mov r2, #0x3f
	and r2, r3
	orr r2, r0
	sub r0, r1, #5
	strb r2, [r4, r0]
	ldr r0, _02080B60 ; =0x00000678
	mov r1, #0
	ldr r0, [r4, r0]
	bl sub_0200DD08
	ldr r0, _02080B60 ; =0x00000678
	add r1, sp, #0
	ldr r0, [r4, r0]
	add r1, #2
	add r2, sp, #0
	bl sub_0200DE00
	ldr r0, _02080B64 ; =0x0000067C
	add r3, sp, #0
	mov r1, #2
	mov r2, #0
	ldrsh r1, [r3, r1]
	ldrsh r2, [r3, r2]
	ldr r0, [r4, r0]
	bl sub_0200DD88
	ldr r0, _02080B68 ; =0x00000654
	ldr r1, _02080B6C ; =0x00000C63
	ldr r0, [r4, r0]
	ldrb r1, [r4, r1]
	add r0, #0x25
	ldrb r0, [r0]
	lsl r1, r1, #0x1a
	lsr r1, r1, #0x1a
	bl sub_0207B5EC
	add r1, r0, #0
	ldr r0, _02080B64 ; =0x0000067C
	add r1, r1, #2
	ldr r0, [r4, r0]
	bl sub_020248F0
	ldr r0, _02080B64 ; =0x0000067C
	mov r1, #1
	ldr r0, [r4, r0]
	bl sub_02024830
	ldr r1, _02080B6C ; =0x00000C63
	add r0, r4, #0
	ldrb r1, [r4, r1]
	lsl r1, r1, #0x1a
	lsr r1, r1, #0x1a
	bl sub_0207A7F4
	add r0, r4, #0
	mov r1, #0x25
	mov r2, #1
	bl sub_0207DAC4
	ldr r0, _02080B70 ; =0x00000C6A
	mov r1, #0
	strh r1, [r4, r0]
	mov r0, #0x1e
	add sp, #4
	pop {r3, r4, pc}
	.balign 4, 0
_02080B50: .word 0x00000C65
_02080B54: .word 0x00000C68
_02080B58: .word 0x0000082E
_02080B5C: .word 0x00000C62
_02080B60: .word 0x00000678
_02080B64: .word 0x0000067C
_02080B68: .word 0x00000654
_02080B6C: .word 0x00000C63
_02080B70: .word 0x00000C6A
	thumb_func_end sub_02080A58

	thumb_func_start sub_02080B74
sub_02080B74: ; 0x02080B74
	push {r4, lr}
	add r4, r0, #0
	mov r0, #0x89
	lsl r0, r0, #2
	add r0, r4, r0
	mov r1, #1
	bl sub_0200E9BC
	add r0, r4, #0
	mov r1, #0x1d
	mov r2, #1
	bl sub_0207DAC4
	add r0, r4, #0
	mov r1, #0
	bl sub_02079224
	ldr r0, _02080BAC ; =0x00000678
	mov r1, #0
	ldr r0, [r4, r0]
	bl sub_0200DD08
	ldr r0, _02080BB0 ; =0x04000050
	mov r1, #0
	strh r1, [r0]
	mov r0, #1
	pop {r4, pc}
	nop
_02080BAC: .word 0x00000678
_02080BB0: .word 0x04000050
	thumb_func_end sub_02080B74

	thumb_func_start sub_02080BB4
sub_02080BB4: ; 0x02080BB4
	push {r3, r4, r5, lr}
	mov r1, #0
	mov r2, #0xc
	bl sub_02077CE8
	mov r1, #0xe
	add r4, r0, #0
	bl sub_02077DAC
	cmp r0, #1
	beq _02080BD4
	add r0, r4, #0
	bl FreeToHeap
	mov r0, #0x1c
	pop {r3, r4, r5, pc}
_02080BD4:
	add r0, r4, #0
	mov r1, #0x1b
	bl sub_02077DAC
	cmp r0, #0
	bne _02080C28
	add r0, r4, #0
	mov r1, #0x1c
	bl sub_02077DAC
	cmp r0, #0
	bne _02080C28
	add r0, r4, #0
	mov r1, #0x1d
	bl sub_02077DAC
	cmp r0, #0
	bne _02080C28
	add r0, r4, #0
	mov r1, #0x1e
	bl sub_02077DAC
	cmp r0, #0
	bne _02080C28
	add r0, r4, #0
	mov r1, #0x1f
	bl sub_02077DAC
	cmp r0, #0
	bne _02080C28
	add r0, r4, #0
	mov r1, #0x20
	bl sub_02077DAC
	cmp r0, #0
	bne _02080C28
	add r0, r4, #0
	mov r1, #0x21
	bl sub_02077DAC
	cmp r0, #0
	beq _02080C32
_02080C28:
	add r0, r4, #0
	bl FreeToHeap
	mov r0, #0
	pop {r3, r4, r5, pc}
_02080C32:
	add r0, r4, #0
	mov r1, #0x18
	bl sub_02077DAC
	cmp r0, #0
	beq _02080C48
	add r0, r4, #0
	bl FreeToHeap
	mov r0, #1
	pop {r3, r4, r5, pc}
_02080C48:
	add r0, r4, #0
	mov r1, #0x19
	bl sub_02077DAC
	cmp r0, #0
	beq _02080C5E
	add r0, r4, #0
	bl FreeToHeap
	mov r0, #2
	pop {r3, r4, r5, pc}
_02080C5E:
	add r0, r4, #0
	mov r1, #0xf
	bl sub_02077DAC
	add r5, r0, #0
	add r0, r4, #0
	mov r1, #0x10
	bl sub_02077DAC
	lsl r0, r0, #1
	add r5, r5, r0
	add r0, r4, #0
	mov r1, #0x11
	bl sub_02077DAC
	lsl r0, r0, #2
	add r5, r5, r0
	add r0, r4, #0
	mov r1, #0x12
	bl sub_02077DAC
	lsl r0, r0, #3
	add r5, r5, r0
	add r0, r4, #0
	mov r1, #0x13
	bl sub_02077DAC
	lsl r0, r0, #4
	add r5, r5, r0
	add r0, r4, #0
	mov r1, #0x14
	bl sub_02077DAC
	lsl r0, r0, #5
	add r5, r5, r0
	cmp r5, #0x10
	bgt _02080CCC
	bge _02080D02
	cmp r5, #8
	bhi _02080D36
	add r0, r5, r5
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_02080CBA: ; jump table
	.short _02080D36 - _02080CBA - 2 ; case 0
	.short _02080CDA - _02080CBA - 2 ; case 1
	.short _02080CE4 - _02080CBA - 2 ; case 2
	.short _02080D36 - _02080CBA - 2 ; case 3
	.short _02080CEE - _02080CBA - 2 ; case 4
	.short _02080D36 - _02080CBA - 2 ; case 5
	.short _02080D36 - _02080CBA - 2 ; case 6
	.short _02080D36 - _02080CBA - 2 ; case 7
	.short _02080CF8 - _02080CBA - 2 ; case 8
_02080CCC:
	cmp r5, #0x20
	bgt _02080CD4
	beq _02080D0C
	b _02080D36
_02080CD4:
	cmp r5, #0x3f
	beq _02080D16
	b _02080D36
_02080CDA:
	add r0, r4, #0
	bl FreeToHeap
	mov r0, #3
	pop {r3, r4, r5, pc}
_02080CE4:
	add r0, r4, #0
	bl FreeToHeap
	mov r0, #4
	pop {r3, r4, r5, pc}
_02080CEE:
	add r0, r4, #0
	bl FreeToHeap
	mov r0, #5
	pop {r3, r4, r5, pc}
_02080CF8:
	add r0, r4, #0
	bl FreeToHeap
	mov r0, #6
	pop {r3, r4, r5, pc}
_02080D02:
	add r0, r4, #0
	bl FreeToHeap
	mov r0, #7
	pop {r3, r4, r5, pc}
_02080D0C:
	add r0, r4, #0
	bl FreeToHeap
	mov r0, #8
	pop {r3, r4, r5, pc}
_02080D16:
	add r0, r4, #0
	mov r1, #0x26
	bl sub_02077DAC
	cmp r0, #0
	beq _02080D2C
	add r0, r4, #0
	bl FreeToHeap
	mov r0, #0xb
	pop {r3, r4, r5, pc}
_02080D2C:
	add r0, r4, #0
	bl FreeToHeap
	mov r0, #9
	pop {r3, r4, r5, pc}
_02080D36:
	add r0, r4, #0
	mov r1, #0x15
	bl sub_02077DAC
	cmp r0, #0
	beq _02080D4C
	add r0, r4, #0
	bl FreeToHeap
	mov r0, #0xa
	pop {r3, r4, r5, pc}
_02080D4C:
	add r0, r4, #0
	mov r1, #0x26
	bl sub_02077DAC
	cmp r0, #0
	beq _02080D62
	add r0, r4, #0
	bl FreeToHeap
	mov r0, #0xb
	pop {r3, r4, r5, pc}
_02080D62:
	add r0, r4, #0
	mov r1, #0x30
	bl sub_02077DAC
	cmp r0, #0
	ble _02080D78
	add r0, r4, #0
	bl FreeToHeap
	mov r0, #0xc
	pop {r3, r4, r5, pc}
_02080D78:
	bge _02080D84
	add r0, r4, #0
	bl FreeToHeap
	mov r0, #0x12
	pop {r3, r4, r5, pc}
_02080D84:
	add r0, r4, #0
	mov r1, #0x31
	bl sub_02077DAC
	cmp r0, #0
	ble _02080D9A
	add r0, r4, #0
	bl FreeToHeap
	mov r0, #0xd
	pop {r3, r4, r5, pc}
_02080D9A:
	bge _02080DA6
	add r0, r4, #0
	bl FreeToHeap
	mov r0, #0x13
	pop {r3, r4, r5, pc}
_02080DA6:
	add r0, r4, #0
	mov r1, #0x32
	bl sub_02077DAC
	cmp r0, #0
	ble _02080DBC
	add r0, r4, #0
	bl FreeToHeap
	mov r0, #0xe
	pop {r3, r4, r5, pc}
_02080DBC:
	bge _02080DC8
	add r0, r4, #0
	bl FreeToHeap
	mov r0, #0x14
	pop {r3, r4, r5, pc}
_02080DC8:
	add r0, r4, #0
	mov r1, #0x33
	bl sub_02077DAC
	cmp r0, #0
	ble _02080DDE
	add r0, r4, #0
	bl FreeToHeap
	mov r0, #0xf
	pop {r3, r4, r5, pc}
_02080DDE:
	bge _02080DEA
	add r0, r4, #0
	bl FreeToHeap
	mov r0, #0x15
	pop {r3, r4, r5, pc}
_02080DEA:
	add r0, r4, #0
	mov r1, #0x34
	bl sub_02077DAC
	cmp r0, #0
	ble _02080E00
	add r0, r4, #0
	bl FreeToHeap
	mov r0, #0x10
	pop {r3, r4, r5, pc}
_02080E00:
	bge _02080E0C
	add r0, r4, #0
	bl FreeToHeap
	mov r0, #0x16
	pop {r3, r4, r5, pc}
_02080E0C:
	add r0, r4, #0
	mov r1, #0x35
	bl sub_02077DAC
	cmp r0, #0
	ble _02080E22
	add r0, r4, #0
	bl FreeToHeap
	mov r0, #0x11
	pop {r3, r4, r5, pc}
_02080E22:
	bge _02080E2E
	add r0, r4, #0
	bl FreeToHeap
	mov r0, #0x17
	pop {r3, r4, r5, pc}
_02080E2E:
	add r0, r4, #0
	mov r1, #0x1a
	bl sub_02077DAC
	cmp r0, #0
	beq _02080E44
	add r0, r4, #0
	bl FreeToHeap
	mov r0, #0x18
	pop {r3, r4, r5, pc}
_02080E44:
	add r0, r4, #0
	mov r1, #0x22
	bl sub_02077DAC
	cmp r0, #0
	beq _02080E5A
	add r0, r4, #0
	bl FreeToHeap
	mov r0, #0x19
	pop {r3, r4, r5, pc}
_02080E5A:
	add r0, r4, #0
	mov r1, #0x23
	bl sub_02077DAC
	cmp r0, #0
	beq _02080E70
	add r0, r4, #0
	bl FreeToHeap
	mov r0, #0x1a
	pop {r3, r4, r5, pc}
_02080E70:
	add r0, r4, #0
	mov r1, #0x24
	bl sub_02077DAC
	cmp r0, #0
	bne _02080E88
	add r0, r4, #0
	mov r1, #0x25
	bl sub_02077DAC
	cmp r0, #0
	beq _02080E92
_02080E88:
	add r0, r4, #0
	bl FreeToHeap
	mov r0, #0x1b
	pop {r3, r4, r5, pc}
_02080E92:
	add r0, r4, #0
	bl FreeToHeap
	mov r0, #0x1c
	pop {r3, r4, r5, pc}
	thumb_func_end sub_02080BB4

	thumb_func_start sub_02080E9C
sub_02080E9C: ; 0x02080E9C
	push {r4, r5, r6, lr}
	add r4, r0, #0
	ldr r0, _0208123C ; =0x00000654
	add r6, r1, #0
	ldr r1, _02081240 ; =0x00000C65
	ldr r0, [r4, r0]
	ldrb r1, [r4, r1]
	ldr r0, [r0]
	add r5, r2, #0
	bl GetPartyMonByIndex
	bl sub_02070DB0
	add r2, r0, #0
	ldr r0, _02081244 ; =0x000007C4
	mov r1, #0
	ldr r0, [r4, r0]
	bl BufferBoxMonNickname
	add r0, r6, #0
	bl sub_02080BB4
	cmp r0, #0x1b
	bls _02080ECE
	b _020812D0
_02080ECE:
	add r0, r0, r0
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_02080EDA: ; jump table
	.short _020812D0 - _02080EDA - 2 ; case 0
	.short _020812D0 - _02080EDA - 2 ; case 1
	.short _020812D0 - _02080EDA - 2 ; case 2
	.short _02080F36 - _02080EDA - 2 ; case 3
	.short _02080F12 - _02080EDA - 2 ; case 4
	.short _02080F5A - _02080EDA - 2 ; case 5
	.short _02080F7E - _02080EDA - 2 ; case 6
	.short _02080FA2 - _02080EDA - 2 ; case 7
	.short _02080FC6 - _02080EDA - 2 ; case 8
	.short _0208100E - _02080EDA - 2 ; case 9
	.short _02080FEA - _02080EDA - 2 ; case 10
	.short _020812D0 - _02080EDA - 2 ; case 11
	.short _02081032 - _02080EDA - 2 ; case 12
	.short _02081062 - _02080EDA - 2 ; case 13
	.short _02081092 - _02080EDA - 2 ; case 14
	.short _020810C2 - _02080EDA - 2 ; case 15
	.short _020810F2 - _02080EDA - 2 ; case 16
	.short _02081122 - _02080EDA - 2 ; case 17
	.short _02081152 - _02080EDA - 2 ; case 18
	.short _02081184 - _02080EDA - 2 ; case 19
	.short _020811B6 - _02080EDA - 2 ; case 20
	.short _020811E8 - _02080EDA - 2 ; case 21
	.short _0208121A - _02080EDA - 2 ; case 22
	.short _0208125C - _02080EDA - 2 ; case 23
	.short _020812D0 - _02080EDA - 2 ; case 24
	.short _0208128E - _02080EDA - 2 ; case 25
	.short _0208128E - _02080EDA - 2 ; case 26
	.short _020812BE - _02080EDA - 2 ; case 27
_02080F12:
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r0, [r4, r0]
	mov r1, #0x42
	bl NewString_ReadMsgData
	add r5, r0, #0
	ldr r1, _02081244 ; =0x000007C4
	add r2, r5, #0
	ldr r0, [r4, r1]
	add r1, r1, #4
	ldr r1, [r4, r1]
	bl StringExpandPlaceholders
	add r0, r5, #0
	bl String_dtor
	pop {r4, r5, r6, pc}
_02080F36:
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r0, [r4, r0]
	mov r1, #0x5c
	bl NewString_ReadMsgData
	add r5, r0, #0
	ldr r1, _02081244 ; =0x000007C4
	add r2, r5, #0
	ldr r0, [r4, r1]
	add r1, r1, #4
	ldr r1, [r4, r1]
	bl StringExpandPlaceholders
	add r0, r5, #0
	bl String_dtor
	pop {r4, r5, r6, pc}
_02080F5A:
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r0, [r4, r0]
	mov r1, #0x44
	bl NewString_ReadMsgData
	add r5, r0, #0
	ldr r1, _02081244 ; =0x000007C4
	add r2, r5, #0
	ldr r0, [r4, r1]
	add r1, r1, #4
	ldr r1, [r4, r1]
	bl StringExpandPlaceholders
	add r0, r5, #0
	bl String_dtor
	pop {r4, r5, r6, pc}
_02080F7E:
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r0, [r4, r0]
	mov r1, #0x45
	bl NewString_ReadMsgData
	add r5, r0, #0
	ldr r1, _02081244 ; =0x000007C4
	add r2, r5, #0
	ldr r0, [r4, r1]
	add r1, r1, #4
	ldr r1, [r4, r1]
	bl StringExpandPlaceholders
	add r0, r5, #0
	bl String_dtor
	pop {r4, r5, r6, pc}
_02080FA2:
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r0, [r4, r0]
	mov r1, #0x43
	bl NewString_ReadMsgData
	add r5, r0, #0
	ldr r1, _02081244 ; =0x000007C4
	add r2, r5, #0
	ldr r0, [r4, r1]
	add r1, r1, #4
	ldr r1, [r4, r1]
	bl StringExpandPlaceholders
	add r0, r5, #0
	bl String_dtor
	pop {r4, r5, r6, pc}
_02080FC6:
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r0, [r4, r0]
	mov r1, #0x4a
	bl NewString_ReadMsgData
	add r5, r0, #0
	ldr r1, _02081244 ; =0x000007C4
	add r2, r5, #0
	ldr r0, [r4, r1]
	add r1, r1, #4
	ldr r1, [r4, r1]
	bl StringExpandPlaceholders
	add r0, r5, #0
	bl String_dtor
	pop {r4, r5, r6, pc}
_02080FEA:
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r0, [r4, r0]
	mov r1, #0x4b
	bl NewString_ReadMsgData
	add r5, r0, #0
	ldr r1, _02081244 ; =0x000007C4
	add r2, r5, #0
	ldr r0, [r4, r1]
	add r1, r1, #4
	ldr r1, [r4, r1]
	bl StringExpandPlaceholders
	add r0, r5, #0
	bl String_dtor
	pop {r4, r5, r6, pc}
_0208100E:
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r0, [r4, r0]
	mov r1, #0x48
	bl NewString_ReadMsgData
	add r5, r0, #0
	ldr r1, _02081244 ; =0x000007C4
	add r2, r5, #0
	ldr r0, [r4, r1]
	add r1, r1, #4
	ldr r1, [r4, r1]
	bl StringExpandPlaceholders
	add r0, r5, #0
	bl String_dtor
	pop {r4, r5, r6, pc}
_02081032:
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r0, [r4, r0]
	mov r1, #0x4c
	bl NewString_ReadMsgData
	add r5, r0, #0
	ldr r0, _02081244 ; =0x000007C4
	mov r1, #1
	ldr r0, [r4, r0]
	mov r2, #0
	bl BufferStatName
	ldr r1, _02081244 ; =0x000007C4
	add r2, r5, #0
	ldr r0, [r4, r1]
	add r1, r1, #4
	ldr r1, [r4, r1]
	bl StringExpandPlaceholders
	add r0, r5, #0
	bl String_dtor
	pop {r4, r5, r6, pc}
_02081062:
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r0, [r4, r0]
	mov r1, #0x4c
	bl NewString_ReadMsgData
	add r5, r0, #0
	ldr r0, _02081244 ; =0x000007C4
	mov r1, #1
	ldr r0, [r4, r0]
	add r2, r1, #0
	bl BufferStatName
	ldr r1, _02081244 ; =0x000007C4
	add r2, r5, #0
	ldr r0, [r4, r1]
	add r1, r1, #4
	ldr r1, [r4, r1]
	bl StringExpandPlaceholders
	add r0, r5, #0
	bl String_dtor
	pop {r4, r5, r6, pc}
_02081092:
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r0, [r4, r0]
	mov r1, #0x4c
	bl NewString_ReadMsgData
	add r5, r0, #0
	ldr r0, _02081244 ; =0x000007C4
	mov r1, #1
	ldr r0, [r4, r0]
	mov r2, #2
	bl BufferStatName
	ldr r1, _02081244 ; =0x000007C4
	add r2, r5, #0
	ldr r0, [r4, r1]
	add r1, r1, #4
	ldr r1, [r4, r1]
	bl StringExpandPlaceholders
	add r0, r5, #0
	bl String_dtor
	pop {r4, r5, r6, pc}
_020810C2:
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r0, [r4, r0]
	mov r1, #0x4c
	bl NewString_ReadMsgData
	add r5, r0, #0
	ldr r0, _02081244 ; =0x000007C4
	mov r1, #1
	ldr r0, [r4, r0]
	mov r2, #3
	bl BufferStatName
	ldr r1, _02081244 ; =0x000007C4
	add r2, r5, #0
	ldr r0, [r4, r1]
	add r1, r1, #4
	ldr r1, [r4, r1]
	bl StringExpandPlaceholders
	add r0, r5, #0
	bl String_dtor
	pop {r4, r5, r6, pc}
_020810F2:
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r0, [r4, r0]
	mov r1, #0x4c
	bl NewString_ReadMsgData
	add r5, r0, #0
	ldr r0, _02081244 ; =0x000007C4
	mov r1, #1
	ldr r0, [r4, r0]
	mov r2, #4
	bl BufferStatName
	ldr r1, _02081244 ; =0x000007C4
	add r2, r5, #0
	ldr r0, [r4, r1]
	add r1, r1, #4
	ldr r1, [r4, r1]
	bl StringExpandPlaceholders
	add r0, r5, #0
	bl String_dtor
	pop {r4, r5, r6, pc}
_02081122:
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r0, [r4, r0]
	mov r1, #0x4c
	bl NewString_ReadMsgData
	add r5, r0, #0
	ldr r0, _02081244 ; =0x000007C4
	mov r1, #1
	ldr r0, [r4, r0]
	mov r2, #5
	bl BufferStatName
	ldr r1, _02081244 ; =0x000007C4
	add r2, r5, #0
	ldr r0, [r4, r1]
	add r1, r1, #4
	ldr r1, [r4, r1]
	bl StringExpandPlaceholders
	add r0, r5, #0
	bl String_dtor
	pop {r4, r5, r6, pc}
_02081152:
	mov r0, #0x1f
	lsl r0, r0, #6
	add r5, #0x68
	ldr r0, [r4, r0]
	add r1, r5, #0
	bl NewString_ReadMsgData
	add r5, r0, #0
	ldr r0, _02081244 ; =0x000007C4
	mov r1, #1
	ldr r0, [r4, r0]
	mov r2, #0
	bl BufferStatName
	ldr r1, _02081244 ; =0x000007C4
	add r2, r5, #0
	ldr r0, [r4, r1]
	add r1, r1, #4
	ldr r1, [r4, r1]
	bl StringExpandPlaceholders
	add r0, r5, #0
	bl String_dtor
	pop {r4, r5, r6, pc}
_02081184:
	mov r0, #0x1f
	lsl r0, r0, #6
	add r5, #0x68
	ldr r0, [r4, r0]
	add r1, r5, #0
	bl NewString_ReadMsgData
	add r5, r0, #0
	ldr r0, _02081244 ; =0x000007C4
	mov r1, #1
	ldr r0, [r4, r0]
	add r2, r1, #0
	bl BufferStatName
	ldr r1, _02081244 ; =0x000007C4
	add r2, r5, #0
	ldr r0, [r4, r1]
	add r1, r1, #4
	ldr r1, [r4, r1]
	bl StringExpandPlaceholders
	add r0, r5, #0
	bl String_dtor
	pop {r4, r5, r6, pc}
_020811B6:
	mov r0, #0x1f
	lsl r0, r0, #6
	add r5, #0x68
	ldr r0, [r4, r0]
	add r1, r5, #0
	bl NewString_ReadMsgData
	add r5, r0, #0
	ldr r0, _02081244 ; =0x000007C4
	mov r1, #1
	ldr r0, [r4, r0]
	mov r2, #2
	bl BufferStatName
	ldr r1, _02081244 ; =0x000007C4
	add r2, r5, #0
	ldr r0, [r4, r1]
	add r1, r1, #4
	ldr r1, [r4, r1]
	bl StringExpandPlaceholders
	add r0, r5, #0
	bl String_dtor
	pop {r4, r5, r6, pc}
_020811E8:
	mov r0, #0x1f
	lsl r0, r0, #6
	add r5, #0x68
	ldr r0, [r4, r0]
	add r1, r5, #0
	bl NewString_ReadMsgData
	add r5, r0, #0
	ldr r0, _02081244 ; =0x000007C4
	mov r1, #1
	ldr r0, [r4, r0]
	mov r2, #3
	bl BufferStatName
	ldr r1, _02081244 ; =0x000007C4
	add r2, r5, #0
	ldr r0, [r4, r1]
	add r1, r1, #4
	ldr r1, [r4, r1]
	bl StringExpandPlaceholders
	add r0, r5, #0
	bl String_dtor
	pop {r4, r5, r6, pc}
_0208121A:
	mov r0, #0x1f
	lsl r0, r0, #6
	add r5, #0x68
	ldr r0, [r4, r0]
	add r1, r5, #0
	bl NewString_ReadMsgData
	add r5, r0, #0
	ldr r0, _02081244 ; =0x000007C4
	mov r1, #1
	ldr r0, [r4, r0]
	mov r2, #4
	bl BufferStatName
	ldr r1, _02081244 ; =0x000007C4
	b _02081248
	nop
_0208123C: .word 0x00000654
_02081240: .word 0x00000C65
_02081244: .word 0x000007C4
_02081248:
	add r2, r5, #0
	ldr r0, [r4, r1]
	add r1, r1, #4
	ldr r1, [r4, r1]
	bl StringExpandPlaceholders
	add r0, r5, #0
	bl String_dtor
	pop {r4, r5, r6, pc}
_0208125C:
	mov r0, #0x1f
	lsl r0, r0, #6
	add r5, #0x68
	ldr r0, [r4, r0]
	add r1, r5, #0
	bl NewString_ReadMsgData
	add r5, r0, #0
	ldr r0, _020812E4 ; =0x000007C4
	mov r1, #1
	ldr r0, [r4, r0]
	mov r2, #5
	bl BufferStatName
	ldr r1, _020812E4 ; =0x000007C4
	add r2, r5, #0
	ldr r0, [r4, r1]
	add r1, r1, #4
	ldr r1, [r4, r1]
	bl StringExpandPlaceholders
	add r0, r5, #0
	bl String_dtor
	pop {r4, r5, r6, pc}
_0208128E:
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r0, [r4, r0]
	mov r1, #0x49
	bl NewString_ReadMsgData
	add r6, r0, #0
	ldr r0, _020812E4 ; =0x000007C4
	mov r1, #0
	ldr r0, [r4, r0]
	add r2, r5, #0
	bl BufferMoveName
	ldr r1, _020812E4 ; =0x000007C4
	add r2, r6, #0
	ldr r0, [r4, r1]
	add r1, r1, #4
	ldr r1, [r4, r1]
	bl StringExpandPlaceholders
	add r0, r6, #0
	bl String_dtor
	pop {r4, r5, r6, pc}
_020812BE:
	mov r2, #0x1f
	lsl r2, r2, #6
	ldr r0, [r4, r2]
	add r2, #8
	ldr r2, [r4, r2]
	mov r1, #0x46
	bl ReadMsgDataIntoString
	pop {r4, r5, r6, pc}
_020812D0:
	mov r2, #0x1f
	lsl r2, r2, #6
	ldr r0, [r4, r2]
	add r2, #8
	ldr r2, [r4, r2]
	mov r1, #0x66
	bl ReadMsgDataIntoString
	pop {r4, r5, r6, pc}
	nop
_020812E4: .word 0x000007C4
	thumb_func_end sub_02080E9C

	thumb_func_start sub_020812E8
sub_020812E8: ; 0x020812E8
	push {r4, lr}
	add r4, r0, #0
	ldr r0, _02081360 ; =0x00000654
	ldr r0, [r4, r0]
	ldrh r0, [r0, #0x28]
	bl sub_02080BB4
	cmp r0, #0x1c
	bhi _0208135E
	add r0, r0, r0
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_02081306: ; jump table
	.short _0208135E - _02081306 - 2 ; case 0
	.short _0208135E - _02081306 - 2 ; case 1
	.short _02081340 - _02081306 - 2 ; case 2
	.short _02081348 - _02081306 - 2 ; case 3
	.short _02081348 - _02081306 - 2 ; case 4
	.short _02081348 - _02081306 - 2 ; case 5
	.short _02081348 - _02081306 - 2 ; case 6
	.short _02081348 - _02081306 - 2 ; case 7
	.short _02081348 - _02081306 - 2 ; case 8
	.short _02081348 - _02081306 - 2 ; case 9
	.short _02081348 - _02081306 - 2 ; case 10
	.short _02081358 - _02081306 - 2 ; case 11
	.short _02081348 - _02081306 - 2 ; case 12
	.short _02081348 - _02081306 - 2 ; case 13
	.short _02081348 - _02081306 - 2 ; case 14
	.short _02081348 - _02081306 - 2 ; case 15
	.short _02081348 - _02081306 - 2 ; case 16
	.short _02081348 - _02081306 - 2 ; case 17
	.short _02081350 - _02081306 - 2 ; case 18
	.short _02081350 - _02081306 - 2 ; case 19
	.short _02081350 - _02081306 - 2 ; case 20
	.short _02081350 - _02081306 - 2 ; case 21
	.short _02081350 - _02081306 - 2 ; case 22
	.short _02081350 - _02081306 - 2 ; case 23
	.short _0208135E - _02081306 - 2 ; case 24
	.short _02081348 - _02081306 - 2 ; case 25
	.short _02081348 - _02081306 - 2 ; case 26
	.short _02081348 - _02081306 - 2 ; case 27
	.short _0208135E - _02081306 - 2 ; case 28
_02081340:
	ldr r1, _02081364 ; =sub_02081A74
	ldr r0, _02081368 ; =0x00000C54
	str r1, [r4, r0]
	pop {r4, pc}
_02081348:
	ldr r1, _0208136C ; =sub_020813A4
	ldr r0, _02081368 ; =0x00000C54
	str r1, [r4, r0]
	pop {r4, pc}
_02081350:
	ldr r1, _02081370 ; =sub_02081444
	ldr r0, _02081368 ; =0x00000C54
	str r1, [r4, r0]
	pop {r4, pc}
_02081358:
	ldr r1, _02081374 ; =sub_020815E4
	ldr r0, _02081368 ; =0x00000C54
	str r1, [r4, r0]
_0208135E:
	pop {r4, pc}
	.balign 4, 0
_02081360: .word 0x00000654
_02081364: .word sub_02081A74
_02081368: .word 0x00000C54
_0208136C: .word sub_020813A4
_02081370: .word sub_02081444
_02081374: .word sub_020815E4
	thumb_func_end sub_020812E8

	thumb_func_start sub_02081378
sub_02081378: ; 0x02081378
	push {r4, lr}
	add r4, r0, #0
	ldr r0, _0208139C ; =0x00000C64
	ldrb r0, [r4, r0]
	bl sub_02020094
	cmp r0, #0
	beq _0208138C
	mov r0, #5
	pop {r4, pc}
_0208138C:
	ldr r0, _020813A0 ; =0x00000654
	mov r1, #0
	ldr r0, [r4, r0]
	add r0, #0x27
	strb r1, [r0]
	mov r0, #0x20
	pop {r4, pc}
	nop
_0208139C: .word 0x00000C64
_020813A0: .word 0x00000654
	thumb_func_end sub_02081378

	thumb_func_start sub_020813A4
sub_020813A4: ; 0x020813A4
	push {r3, r4, r5, lr}
	sub sp, #8
	ldr r1, _0208142C ; =0x00000654
	add r5, r0, #0
	ldr r4, [r5, r1]
	bl sub_020828EC
	str r0, [sp]
	mov r0, #0xc
	str r0, [sp, #4]
	ldr r2, _02081430 ; =0x00000C65
	ldrh r1, [r4, #0x28]
	ldrb r2, [r5, r2]
	ldr r0, [r4]
	mov r3, #0
	bl sub_020908AC
	ldr r1, _02081430 ; =0x00000C65
	add r0, r5, #0
	ldrb r1, [r5, r1]
	bl sub_02079E38
	ldr r1, _02081430 ; =0x00000C65
	add r0, r5, #0
	ldrb r1, [r5, r1]
	bl sub_0207D5DC
	ldr r1, _02081430 ; =0x00000C65
	add r0, r5, #0
	ldrb r1, [r5, r1]
	bl sub_0207D6A0
	ldr r0, _02081430 ; =0x00000C65
	mov r2, #0x30
	ldrb r1, [r5, r0]
	add r0, r5, #0
	mul r2, r1
	add r3, r5, r2
	ldr r2, _02081434 ; =0x00000836
	ldrh r2, [r3, r2]
	lsl r2, r2, #0x14
	lsr r2, r2, #0x14
	lsl r2, r2, #0x18
	lsr r2, r2, #0x18
	bl sub_0207EFC4
	ldr r1, _0208142C ; =0x00000654
	add r0, r5, #0
	ldr r1, [r5, r1]
	mov r2, #0
	ldrh r1, [r1, #0x28]
	bl sub_02080E9C
	mov r1, #0
	add r0, r5, #0
	mvn r1, r1
	mov r2, #1
	bl sub_0207DAEC
	ldr r0, _02081438 ; =0x000005EC
	bl PlaySE
	ldr r1, _0208143C ; =sub_02081378
	ldr r0, _02081440 ; =0x00000C54
	str r1, [r5, r0]
	mov r0, #5
	add sp, #8
	pop {r3, r4, r5, pc}
	.balign 4, 0
_0208142C: .word 0x00000654
_02081430: .word 0x00000C65
_02081434: .word 0x00000836
_02081438: .word 0x000005EC
_0208143C: .word sub_02081378
_02081440: .word 0x00000C54
	thumb_func_end sub_020813A4

	thumb_func_start sub_02081444
sub_02081444: ; 0x02081444
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x20
	add r5, r0, #0
	ldr r0, _020815D0 ; =0x00000654
	ldr r1, _020815D4 ; =0x00000C65
	ldr r0, [r5, r0]
	ldrb r1, [r5, r1]
	ldr r0, [r0]
	bl GetPartyMonByIndex
	mov r1, #0xd
	mov r2, #0
	add r4, r0, #0
	bl GetMonData
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	str r0, [sp, #0x1c]
	add r0, r4, #0
	mov r1, #0xe
	mov r2, #0
	bl GetMonData
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	str r0, [sp, #0x18]
	add r0, r4, #0
	mov r1, #0xf
	mov r2, #0
	bl GetMonData
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	str r0, [sp, #0x14]
	add r0, r4, #0
	mov r1, #0x10
	mov r2, #0
	bl GetMonData
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	str r0, [sp, #0x10]
	add r0, r4, #0
	mov r1, #0x11
	mov r2, #0
	bl GetMonData
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	str r0, [sp, #0xc]
	add r0, r4, #0
	mov r1, #0x12
	mov r2, #0
	bl GetMonData
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	str r0, [sp, #8]
	add r0, r4, #0
	mov r1, #9
	mov r2, #0
	bl GetMonData
	lsl r0, r0, #0x18
	lsr r7, r0, #0x18
	ldr r0, _020815D0 ; =0x00000654
	ldr r6, [r5, r0]
	add r0, r5, #0
	bl sub_020828EC
	str r0, [sp]
	mov r0, #0xc
	str r0, [sp, #4]
	ldr r2, _020815D4 ; =0x00000C65
	ldrh r1, [r6, #0x28]
	ldrb r2, [r5, r2]
	ldr r0, [r6]
	mov r3, #0
	bl sub_020908AC
	ldr r1, _020815D4 ; =0x00000C65
	add r0, r5, #0
	ldrb r1, [r5, r1]
	bl sub_02079E38
	ldr r1, _020815D4 ; =0x00000C65
	add r0, r5, #0
	ldrb r1, [r5, r1]
	bl sub_0207D5DC
	ldr r1, _020815D4 ; =0x00000C65
	add r0, r5, #0
	ldrb r1, [r5, r1]
	bl sub_0207D6A0
	ldr r0, _020815D4 ; =0x00000C65
	mov r2, #0x30
	ldrb r1, [r5, r0]
	add r0, r5, #0
	mul r2, r1
	add r3, r5, r2
	ldr r2, _020815D8 ; =0x00000836
	ldrh r2, [r3, r2]
	lsl r2, r2, #0x14
	lsr r2, r2, #0x14
	lsl r2, r2, #0x18
	lsr r2, r2, #0x18
	bl sub_0207EFC4
	add r0, r4, #0
	mov r1, #0xd
	mov r2, #0
	bl GetMonData
	ldr r1, [sp, #0x1c]
	cmp r1, r0
	bne _0208157E
	add r0, r4, #0
	mov r1, #0xe
	mov r2, #0
	bl GetMonData
	ldr r1, [sp, #0x18]
	cmp r1, r0
	bne _0208157E
	add r0, r4, #0
	mov r1, #0xf
	mov r2, #0
	bl GetMonData
	ldr r1, [sp, #0x14]
	cmp r1, r0
	bne _0208157E
	add r0, r4, #0
	mov r1, #0x10
	mov r2, #0
	bl GetMonData
	ldr r1, [sp, #0x10]
	cmp r1, r0
	bne _0208157E
	add r0, r4, #0
	mov r1, #0x11
	mov r2, #0
	bl GetMonData
	ldr r1, [sp, #0xc]
	cmp r1, r0
	bne _0208157E
	add r0, r4, #0
	mov r1, #0x12
	mov r2, #0
	bl GetMonData
	ldr r1, [sp, #8]
	cmp r1, r0
	beq _020815AA
_0208157E:
	add r0, r4, #0
	mov r1, #9
	mov r2, #0
	bl GetMonData
	cmp r7, r0
	ldr r1, _020815D0 ; =0x00000654
	beq _0208159C
	ldr r1, [r5, r1]
	add r0, r5, #0
	ldrh r1, [r1, #0x28]
	mov r2, #0
	bl sub_02080E9C
	b _020815B8
_0208159C:
	ldr r1, [r5, r1]
	add r0, r5, #0
	ldrh r1, [r1, #0x28]
	mov r2, #1
	bl sub_02080E9C
	b _020815B8
_020815AA:
	ldr r1, _020815D0 ; =0x00000654
	add r0, r5, #0
	ldr r1, [r5, r1]
	mov r2, #2
	ldrh r1, [r1, #0x28]
	bl sub_02080E9C
_020815B8:
	mov r1, #0
	add r0, r5, #0
	mvn r1, r1
	mov r2, #1
	bl sub_0207DAEC
	ldr r1, _020815DC ; =sub_02081378
	ldr r0, _020815E0 ; =0x00000C54
	str r1, [r5, r0]
	mov r0, #5
	add sp, #0x20
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_020815D0: .word 0x00000654
_020815D4: .word 0x00000C65
_020815D8: .word 0x00000836
_020815DC: .word sub_02081378
_020815E0: .word 0x00000C54
	thumb_func_end sub_02081444

	thumb_func_start sub_020815E4
sub_020815E4: ; 0x020815E4
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	ldr r1, _020816FC ; =0x00000654
	add r5, r0, #0
	ldr r4, [r5, r1]
	bl sub_020828EC
	str r0, [sp]
	mov r0, #0xc
	str r0, [sp, #4]
	ldr r2, _02081700 ; =0x00000C65
	ldrh r1, [r4, #0x28]
	ldrb r2, [r5, r2]
	ldr r0, [r4]
	mov r3, #0
	bl sub_020908AC
	ldr r0, _020816FC ; =0x00000654
	ldr r1, _02081700 ; =0x00000C65
	ldr r0, [r5, r0]
	ldrb r1, [r5, r1]
	ldr r0, [r0]
	bl GetPartyMonByIndex
	mov r1, #0xa3
	mov r2, #0
	str r0, [sp, #8]
	bl GetMonData
	add r4, r0, #0
	ldr r0, _02081700 ; =0x00000C65
	ldrb r1, [r5, r0]
	mov r0, #0x30
	mul r0, r1
	add r1, r5, r0
	ldr r0, _02081704 ; =0x0000082E
	ldrh r1, [r1, r0]
	cmp r1, #0
	bne _02081640
	sub r0, #0x6e
	ldr r0, [r5, r0]
	mov r1, #0x47
	bl NewString_ReadMsgData
	add r7, r0, #0
	b _0208165E
_02081640:
	cmp r4, r1
	bne _02081652
	sub r0, #0x6e
	ldr r0, [r5, r0]
	mov r1, #0x48
	bl NewString_ReadMsgData
	add r7, r0, #0
	b _0208165E
_02081652:
	sub r0, #0x6e
	ldr r0, [r5, r0]
	mov r1, #0x41
	bl NewString_ReadMsgData
	add r7, r0, #0
_0208165E:
	ldr r0, [sp, #8]
	bl sub_02070DB0
	add r2, r0, #0
	ldr r0, _02081708 ; =0x000007C4
	mov r1, #0
	ldr r0, [r5, r0]
	bl BufferBoxMonNickname
	mov r0, #0
	str r0, [sp]
	mov r1, #1
	ldr r2, _02081700 ; =0x00000C65
	str r1, [sp, #4]
	ldrb r6, [r5, r2]
	ldr r3, _02081708 ; =0x000007C4
	mov r2, #0x30
	mul r2, r6
	ldr r0, [r5, r3]
	add r2, r5, r2
	add r3, #0x6a
	ldrh r2, [r2, r3]
	mov r3, #3
	sub r2, r4, r2
	bl BufferIntegerAsString
	ldr r1, _02081708 ; =0x000007C4
	add r2, r7, #0
	ldr r0, [r5, r1]
	add r1, r1, #4
	ldr r1, [r5, r1]
	bl StringExpandPlaceholders
	add r0, r7, #0
	bl String_dtor
	ldr r0, [sp, #8]
	bl sub_0208AD64
	add r4, r0, #0
	ldr r1, _02081700 ; =0x00000C65
	lsl r2, r4, #0x18
	ldrb r1, [r5, r1]
	add r0, r5, #0
	lsr r2, r2, #0x18
	bl sub_0207EFC4
	cmp r4, #7
	bne _020816E0
	ldr r1, _02081700 ; =0x00000C65
	ldr r0, _0208170C ; =0x00000836
	ldrb r3, [r5, r1]
	add r2, r5, r0
	mov r0, #0x30
	mul r0, r3
	ldrh r4, [r2, r0]
	ldr r3, _02081710 ; =0xFFFFF000
	and r4, r3
	mov r3, #7
	orr r3, r4
	strh r3, [r2, r0]
	ldrb r1, [r5, r1]
	add r0, r5, #0
	bl sub_0207D3E4
_020816E0:
	ldr r1, _02081700 ; =0x00000C65
	add r0, r5, #0
	ldrb r1, [r5, r1]
	bl sub_0207A7F4
	ldr r1, _02081714 ; =sub_02081720
	ldr r0, _02081718 ; =0x00000C54
	str r1, [r5, r0]
	ldr r0, _0208171C ; =0x000005EC
	bl PlaySE
	mov r0, #5
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
	.balign 4, 0
_020816FC: .word 0x00000654
_02081700: .word 0x00000C65
_02081704: .word 0x0000082E
_02081708: .word 0x000007C4
_0208170C: .word 0x00000836
_02081710: .word 0xFFFFF000
_02081714: .word sub_02081720
_02081718: .word 0x00000C54
_0208171C: .word 0x000005EC
	thumb_func_end sub_020815E4

	thumb_func_start sub_02081720
sub_02081720: ; 0x02081720
	push {r3, r4, r5, lr}
	add r5, r0, #0
	ldr r0, _020817B0 ; =0x00000654
	ldr r1, _020817B4 ; =0x00000C65
	ldr r0, [r5, r0]
	ldrb r1, [r5, r1]
	ldr r0, [r0]
	bl GetPartyMonByIndex
	mov r1, #0xa3
	mov r2, #0
	bl GetMonData
	ldr r1, _020817B4 ; =0x00000C65
	add r4, r0, #0
	ldrb r2, [r5, r1]
	ldr r0, _020817B8 ; =0x0000082E
	mov r1, #0x30
	add r3, r2, #0
	add r0, r5, r0
	mul r3, r1
	ldrh r1, [r0, r3]
	cmp r4, r1
	beq _02081754
	add r1, r1, #1
	strh r1, [r0, r3]
_02081754:
	ldr r1, _020817B4 ; =0x00000C65
	add r0, r5, #0
	ldrb r1, [r5, r1]
	bl sub_0207D480
	ldr r1, _020817B4 ; =0x00000C65
	add r0, r5, #4
	ldrb r2, [r5, r1]
	lsl r1, r2, #2
	add r1, r2, r1
	add r1, r1, #3
	lsl r1, r1, #4
	add r0, r0, r1
	mov r1, #0
	bl FillWindowPixelBuffer
	ldr r1, _020817B4 ; =0x00000C65
	add r0, r5, #0
	ldrb r1, [r5, r1]
	bl sub_0207D440
	ldr r1, _020817B4 ; =0x00000C65
	add r0, r5, #0
	ldrb r1, [r5, r1]
	bl sub_0207D4EC
	ldr r0, _020817B4 ; =0x00000C65
	mov r1, #0x30
	ldrb r0, [r5, r0]
	add r2, r0, #0
	mul r2, r1
	ldr r0, _020817B8 ; =0x0000082E
	add r2, r5, r2
	ldrh r0, [r2, r0]
	cmp r4, r0
	bne _020817AC
	add r0, r5, #0
	sub r1, #0x31
	mov r2, #1
	bl sub_0207DAEC
	ldr r1, _020817BC ; =sub_02081378
	ldr r0, _020817C0 ; =0x00000C54
	str r1, [r5, r0]
_020817AC:
	mov r0, #5
	pop {r3, r4, r5, pc}
	.balign 4, 0
_020817B0: .word 0x00000654
_020817B4: .word 0x00000C65
_020817B8: .word 0x0000082E
_020817BC: .word sub_02081378
_020817C0: .word 0x00000C54
	thumb_func_end sub_02081720

	thumb_func_start sub_020817C4
sub_020817C4: ; 0x020817C4
	push {r3, lr}
	mov r1, #0x18
	mov r2, #0xc
	bl sub_02077D88
	cmp r0, #0
	beq _020817D6
	mov r0, #1
	pop {r3, pc}
_020817D6:
	mov r0, #0
	pop {r3, pc}
	.balign 4, 0
	thumb_func_end sub_020817C4

	thumb_func_start sub_020817DC
sub_020817DC: ; 0x020817DC
	push {r3, r4, r5, r6}
	cmp r1, #6
	blo _020817E8
	mov r0, #0xff
	pop {r3, r4, r5, r6}
	bx lr
_020817E8:
	bhs _02081814
	ldr r2, _0208181C ; =0x0000082E
	mov r3, #0x30
	add r4, r2, #0
	add r4, #0x27
_020817F2:
	add r5, r1, #0
	mul r5, r3
	add r6, r0, r5
	ldrb r5, [r6, r4]
	cmp r5, #0
	beq _0208180A
	ldrh r5, [r6, r2]
	cmp r5, #0
	bne _0208180A
	add r0, r1, #0
	pop {r3, r4, r5, r6}
	bx lr
_0208180A:
	add r1, r1, #1
	lsl r1, r1, #0x18
	lsr r1, r1, #0x18
	cmp r1, #6
	blo _020817F2
_02081814:
	mov r0, #0xff
	pop {r3, r4, r5, r6}
	bx lr
	nop
_0208181C: .word 0x0000082E
	thumb_func_end sub_020817DC

	thumb_func_start sub_02081820
sub_02081820: ; 0x02081820
	push {r3, r4, r5, r6, r7, lr}
	ldr r1, _02081A4C ; =0x00000C62
	add r4, r0, #0
	ldrb r2, [r4, r1]
	cmp r2, #3
	bls _0208182E
	b _02081A46
_0208182E:
	add r2, r2, r2
	add r2, pc
	ldrh r2, [r2, #6]
	lsl r2, r2, #0x10
	asr r2, r2, #0x10
	add pc, r2
_0208183A: ; jump table
	.short _02081842 - _0208183A - 2 ; case 0
	.short _02081894 - _0208183A - 2 ; case 1
	.short _0208195C - _0208183A - 2 ; case 2
	.short _020819E0 - _0208183A - 2 ; case 3
_02081842:
	mov r1, #0
	bl sub_020817DC
	ldr r1, _02081A50 ; =0x00000C65
	strb r0, [r4, r1]
	ldrb r0, [r4, r1]
	cmp r0, #0xff
	bne _02081888
	mov r2, #0x1f
	lsl r2, r2, #6
	ldr r0, [r4, r2]
	add r2, #8
	ldr r2, [r4, r2]
	mov r1, #0x66
	bl ReadMsgDataIntoString
	mov r1, #0
	add r0, r4, #0
	mvn r1, r1
	mov r2, #1
	bl sub_0207DAEC
	ldr r1, _02081A54 ; =sub_02081378
	ldr r0, _02081A58 ; =0x00000C54
	mov r2, #1
	str r1, [r4, r0]
	add r0, r4, #0
	mov r1, #0
	bl sub_0207F240
	ldr r0, _02081A50 ; =0x00000C65
	mov r1, #7
	strb r1, [r4, r0]
	mov r0, #5
	pop {r3, r4, r5, r6, r7, pc}
_02081888:
	cmp r0, #0
	beq _02081894
	add r0, r4, #0
	mov r1, #0
	bl sub_0207A7F4
_02081894:
	ldr r0, _02081A5C ; =0x00000654
	ldr r1, _02081A50 ; =0x00000C65
	ldr r0, [r4, r0]
	ldrb r1, [r4, r1]
	ldr r0, [r0]
	bl GetPartyMonByIndex
	add r5, r0, #0
	add r0, r4, #0
	bl sub_020828EC
	add r3, r0, #0
	mov r0, #0xc
	str r0, [sp]
	ldr r1, _02081A5C ; =0x00000654
	add r0, r5, #0
	ldr r1, [r4, r1]
	mov r2, #0
	ldrh r1, [r1, #0x28]
	bl sub_020902D0
	add r0, r5, #0
	mov r1, #0xa3
	mov r2, #0
	bl GetMonData
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r0, [r4, r0]
	mov r1, #0x47
	bl NewString_ReadMsgData
	add r6, r0, #0
	add r0, r5, #0
	bl sub_02070DB0
	add r2, r0, #0
	ldr r0, _02081A60 ; =0x000007C4
	mov r1, #0
	ldr r0, [r4, r0]
	bl BufferBoxMonNickname
	ldr r1, _02081A60 ; =0x000007C4
	add r2, r6, #0
	ldr r0, [r4, r1]
	add r1, r1, #4
	ldr r1, [r4, r1]
	bl StringExpandPlaceholders
	add r0, r6, #0
	bl String_dtor
	ldr r7, _02081A50 ; =0x00000C65
	ldr r3, _02081A64 ; =0x00000836
	ldrb r5, [r4, r7]
	mov r2, #0x30
	add r1, r4, r3
	add r0, r5, #0
	mul r0, r2
	ldrh r6, [r1, r0]
	ldr r5, _02081A68 ; =0xFFFFF000
	and r6, r5
	mov r5, #7
	orr r5, r6
	strh r5, [r1, r0]
	ldrb r1, [r4, r7]
	add r0, r4, #0
	mul r2, r1
	add r2, r4, r2
	ldrh r2, [r2, r3]
	lsl r2, r2, #0x14
	lsr r2, r2, #0x14
	lsl r2, r2, #0x18
	lsr r2, r2, #0x18
	bl sub_0207EFC4
	add r1, r7, #0
	ldrb r1, [r4, r1]
	add r0, r4, #0
	bl sub_0207D3E4
	add r1, r7, #0
	ldrb r1, [r4, r1]
	add r0, r4, #0
	bl sub_0207A7F4
	add r1, r7, #0
	ldrb r1, [r4, r1]
	add r0, r4, #0
	mov r2, #1
	bl sub_0207F240
	ldr r0, _02081A6C ; =0x000005EC
	bl PlaySE
	sub r0, r7, #3
	ldrb r1, [r4, r0]
	add r1, r1, #1
	strb r1, [r4, r0]
	b _02081A46
_0208195C:
	ldr r0, _02081A5C ; =0x00000654
	add r1, r1, #3
	ldr r0, [r4, r0]
	ldrb r1, [r4, r1]
	ldr r0, [r0]
	bl GetPartyMonByIndex
	mov r1, #0xa3
	mov r2, #0
	bl GetMonData
	ldr r2, _02081A50 ; =0x00000C65
	add r5, r0, #0
	ldr r0, _02081A70 ; =0x0000082E
	ldrb r3, [r4, r2]
	add r1, r4, r0
	mov r0, #0x30
	mul r0, r3
	ldrh r3, [r1, r0]
	add r3, r3, #1
	strh r3, [r1, r0]
	ldrb r1, [r4, r2]
	add r0, r4, #0
	bl sub_0207D480
	ldr r1, _02081A50 ; =0x00000C65
	add r0, r4, #4
	ldrb r2, [r4, r1]
	lsl r1, r2, #2
	add r1, r2, r1
	add r1, r1, #3
	lsl r1, r1, #4
	add r0, r0, r1
	mov r1, #0
	bl FillWindowPixelBuffer
	ldr r1, _02081A50 ; =0x00000C65
	add r0, r4, #0
	ldrb r1, [r4, r1]
	bl sub_0207D440
	ldr r1, _02081A50 ; =0x00000C65
	add r0, r4, #0
	ldrb r1, [r4, r1]
	bl sub_0207D4EC
	ldr r0, _02081A50 ; =0x00000C65
	mov r1, #0x30
	ldrb r0, [r4, r0]
	add r2, r0, #0
	mul r2, r1
	ldr r0, _02081A70 ; =0x0000082E
	add r2, r4, r2
	ldrh r0, [r2, r0]
	cmp r5, r0
	bne _02081A46
	add r0, r4, #0
	sub r1, #0x31
	mov r2, #1
	bl sub_0207DAEC
	ldr r0, _02081A4C ; =0x00000C62
	ldrb r1, [r4, r0]
	add r1, r1, #1
	strb r1, [r4, r0]
	b _02081A46
_020819E0:
	add r0, r1, #2
	ldrb r0, [r4, r0]
	bl sub_02020094
	cmp r0, #0
	bne _02081A46
	ldr r0, _02081A50 ; =0x00000C65
	ldrb r5, [r4, r0]
	add r0, r4, #0
	add r1, r5, #1
	lsl r1, r1, #0x18
	lsr r1, r1, #0x18
	bl sub_020817DC
	ldr r1, _02081A50 ; =0x00000C65
	strb r0, [r4, r1]
	ldrb r0, [r4, r1]
	cmp r0, #0xff
	beq _02081A22
	mov r0, #0x89
	lsl r0, r0, #2
	add r0, r4, r0
	mov r1, #0
	bl sub_0200E9BC
	add r0, r4, #0
	add r1, r5, #0
	bl sub_0207A7F4
	ldr r0, _02081A4C ; =0x00000C62
	mov r1, #1
	strb r1, [r4, r0]
	b _02081A46
_02081A22:
	ldr r0, _02081A5C ; =0x00000654
	mov r2, #1
	ldr r1, [r4, r0]
	mov r3, #0xc
	ldr r0, [r1, #4]
	ldrh r1, [r1, #0x28]
	bl sub_02078434
	ldr r0, _02081A5C ; =0x00000654
	mov r1, #0
	ldr r0, [r4, r0]
	add r0, #0x27
	strb r1, [r0]
	ldr r0, _02081A50 ; =0x00000C65
	mov r1, #7
	strb r1, [r4, r0]
	mov r0, #0x20
	pop {r3, r4, r5, r6, r7, pc}
_02081A46:
	mov r0, #7
	pop {r3, r4, r5, r6, r7, pc}
	nop
_02081A4C: .word 0x00000C62
_02081A50: .word 0x00000C65
_02081A54: .word sub_02081378
_02081A58: .word 0x00000C54
_02081A5C: .word 0x00000654
_02081A60: .word 0x000007C4
_02081A64: .word 0x00000836
_02081A68: .word 0xFFFFF000
_02081A6C: .word 0x000005EC
_02081A70: .word 0x0000082E
	thumb_func_end sub_02081820

	thumb_func_start sub_02081A74
sub_02081A74: ; 0x02081A74
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #8
	add r5, r0, #0
	ldr r0, _02081C14 ; =0x00000654
	ldr r1, _02081C18 ; =0x00000C65
	ldr r0, [r5, r0]
	ldrb r1, [r5, r1]
	ldr r0, [r0]
	bl GetPartyMonByIndex
	mov r1, #0xa4
	mov r2, #0
	add r4, r0, #0
	bl GetMonData
	ldr r1, _02081C1C ; =0x00000C68
	mov r2, #0
	strh r0, [r5, r1]
	add r0, r4, #0
	mov r1, #0xa5
	bl GetMonData
	ldr r1, _02081C20 ; =0x00000C6A
	mov r2, #0
	strh r0, [r5, r1]
	add r0, r4, #0
	mov r1, #0xa6
	bl GetMonData
	ldr r1, _02081C24 ; =0x00000C6C
	mov r2, #0
	strh r0, [r5, r1]
	add r0, r4, #0
	mov r1, #0xa8
	bl GetMonData
	ldr r1, _02081C28 ; =0x00000C6E
	mov r2, #0
	strh r0, [r5, r1]
	add r0, r4, #0
	mov r1, #0xa9
	bl GetMonData
	mov r1, #0xc7
	lsl r1, r1, #4
	strh r0, [r5, r1]
	add r0, r4, #0
	mov r1, #0xa7
	mov r2, #0
	bl GetMonData
	ldr r1, _02081C2C ; =0x00000C72
	strh r0, [r5, r1]
	ldr r0, _02081C14 ; =0x00000654
	ldr r6, [r5, r0]
	add r0, r5, #0
	bl sub_020828EC
	str r0, [sp]
	mov r0, #0xc
	str r0, [sp, #4]
	ldr r2, _02081C18 ; =0x00000C65
	ldrh r1, [r6, #0x28]
	ldrb r2, [r5, r2]
	ldr r0, [r6]
	mov r3, #0
	bl sub_020908AC
	add r0, r4, #0
	mov r1, #0xa1
	mov r2, #0
	bl GetMonData
	ldr r1, _02081C18 ; =0x00000C65
	ldrb r2, [r5, r1]
	mov r1, #0x30
	mul r1, r2
	add r2, r5, r1
	ldr r1, _02081C30 ; =0x00000832
	strh r0, [r2, r1]
	add r0, r4, #0
	mov r1, #0xa3
	mov r2, #0
	bl GetMonData
	ldr r1, _02081C18 ; =0x00000C65
	ldrb r2, [r5, r1]
	mov r1, #0x30
	mul r1, r2
	add r2, r5, r1
	ldr r1, _02081C34 ; =0x0000082E
	strh r0, [r2, r1]
	add r0, r4, #0
	mov r1, #0xa4
	mov r2, #0
	bl GetMonData
	ldr r1, _02081C18 ; =0x00000C65
	ldrb r2, [r5, r1]
	mov r1, #0x30
	mul r1, r2
	add r2, r5, r1
	mov r1, #0x83
	lsl r1, r1, #4
	strh r0, [r2, r1]
	sub r1, #0x70
	ldr r0, [r5, r1]
	mov r1, #0xb1
	bl NewString_ReadMsgData
	add r7, r0, #0
	add r0, r4, #0
	bl sub_02070DB0
	add r2, r0, #0
	ldr r0, _02081C38 ; =0x000007C4
	mov r1, #0
	ldr r0, [r5, r0]
	bl BufferBoxMonNickname
	mov r0, #0
	str r0, [sp]
	mov r1, #1
	ldr r2, _02081C18 ; =0x00000C65
	str r1, [sp, #4]
	ldrb r6, [r5, r2]
	ldr r3, _02081C38 ; =0x000007C4
	mov r2, #0x30
	mul r2, r6
	ldr r0, [r5, r3]
	add r2, r5, r2
	add r3, #0x6e
	ldrh r2, [r2, r3]
	mov r3, #3
	bl BufferIntegerAsString
	ldr r1, _02081C38 ; =0x000007C4
	add r2, r7, #0
	ldr r0, [r5, r1]
	add r1, r1, #4
	ldr r1, [r5, r1]
	bl StringExpandPlaceholders
	add r0, r7, #0
	bl String_dtor
	add r0, r4, #0
	bl sub_0208AD64
	add r4, r0, #0
	ldr r1, _02081C18 ; =0x00000C65
	lsl r2, r4, #0x18
	ldrb r1, [r5, r1]
	add r0, r5, #0
	lsr r2, r2, #0x18
	bl sub_0207EFC4
	cmp r4, #7
	bne _02081BD2
	ldr r1, _02081C18 ; =0x00000C65
	ldr r0, _02081C3C ; =0x00000836
	ldrb r3, [r5, r1]
	add r2, r5, r0
	mov r0, #0x30
	mul r0, r3
	ldrh r4, [r2, r0]
	ldr r3, _02081C40 ; =0xFFFFF000
	and r4, r3
	mov r3, #7
	orr r3, r4
	strh r3, [r2, r0]
	ldrb r1, [r5, r1]
	add r0, r5, #0
	bl sub_0207D3E4
_02081BD2:
	ldr r1, _02081C18 ; =0x00000C65
	add r0, r5, #0
	ldrb r1, [r5, r1]
	bl sub_0207A7F4
	ldr r0, _02081C44 ; =sub_02081720
	ldr r1, _02081C48 ; =0x00000C54
	str r0, [r5, r1]
	add r1, #0x11
	ldrb r1, [r5, r1]
	add r0, r5, #0
	bl sub_0207D5DC
	ldr r1, _02081C18 ; =0x00000C65
	add r0, r5, #0
	ldrb r1, [r5, r1]
	bl sub_0207D6A0
	mov r1, #0
	add r0, r5, #0
	mvn r1, r1
	mov r2, #1
	bl sub_0207DAEC
	ldr r1, _02081C4C ; =sub_02081C50
	ldr r0, _02081C48 ; =0x00000C54
	str r1, [r5, r0]
	mov r1, #0
	add r0, #0x13
	strb r1, [r5, r0]
	mov r0, #5
	add sp, #8
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_02081C14: .word 0x00000654
_02081C18: .word 0x00000C65
_02081C1C: .word 0x00000C68
_02081C20: .word 0x00000C6A
_02081C24: .word 0x00000C6C
_02081C28: .word 0x00000C6E
_02081C2C: .word 0x00000C72
_02081C30: .word 0x00000832
_02081C34: .word 0x0000082E
_02081C38: .word 0x000007C4
_02081C3C: .word 0x00000836
_02081C40: .word 0xFFFFF000
_02081C44: .word sub_02081720
_02081C48: .word 0x00000C54
_02081C4C: .word sub_02081C50
	thumb_func_end sub_02081A74

	thumb_func_start sub_02081C50
sub_02081C50: ; 0x02081C50
	push {r3, r4, r5, lr}
	ldr r1, _02081EAC ; =0x00000C67
	add r4, r0, #0
	ldrb r0, [r4, r1]
	cmp r0, #6
	bhi _02081D0C
	add r0, r0, r0
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_02081C68: ; jump table
	.short _02081C76 - _02081C68 - 2 ; case 0
	.short _02081C90 - _02081C68 - 2 ; case 1
	.short _02081CB6 - _02081C68 - 2 ; case 2
	.short _02081CE4 - _02081C68 - 2 ; case 3
	.short _02081DDC - _02081C68 - 2 ; case 4
	.short _02081DF0 - _02081C68 - 2 ; case 5
	.short _02081E54 - _02081C68 - 2 ; case 6
_02081C76:
	sub r0, r1, #3
	ldrb r0, [r4, r0]
	bl sub_02020094
	cmp r0, #0
	bne _02081D0C
	add r0, r4, #0
	bl sub_0207DDFC
	ldr r0, _02081EAC ; =0x00000C67
	mov r1, #1
	strb r1, [r4, r0]
	b _02081EA8
_02081C90:
	ldr r0, _02081EB0 ; =gMain
	ldr r1, [r0, #0x48]
	mov r0, #3
	tst r0, r1
	bne _02081CA2
	bl sub_02025358
	cmp r0, #1
	bne _02081D0C
_02081CA2:
	ldr r0, _02081EB4 ; =0x000005DC
	bl PlaySE
	add r0, r4, #0
	bl sub_0207DF98
	ldr r0, _02081EAC ; =0x00000C67
	mov r1, #2
	strb r1, [r4, r0]
	b _02081EA8
_02081CB6:
	ldr r0, _02081EB0 ; =gMain
	ldr r1, [r0, #0x48]
	mov r0, #3
	tst r0, r1
	bne _02081CC8
	bl sub_02025358
	cmp r0, #1
	bne _02081D0C
_02081CC8:
	ldr r0, _02081EB4 ; =0x000005DC
	bl PlaySE
	add r0, r4, #0
	bl sub_0207E04C
	ldr r0, _02081EAC ; =0x00000C67
	mov r1, #3
	strb r1, [r4, r0]
	ldr r0, _02081EB8 ; =0x00000654
	mov r1, #0
	ldr r0, [r4, r0]
	str r1, [r0, #0x38]
	b _02081EA8
_02081CE4:
	ldr r0, _02081EB8 ; =0x00000654
	sub r1, r1, #2
	ldr r0, [r4, r0]
	ldrb r1, [r4, r1]
	ldr r0, [r0]
	bl GetPartyMonByIndex
	ldr r1, _02081EB8 ; =0x00000654
	add r5, r0, #0
	ldr r2, [r4, r1]
	add r1, r2, #0
	add r1, #0x38
	add r2, #0x2a
	bl sub_02071534
	cmp r0, #0
	beq _02081D16
	ldr r1, _02081EBC ; =0x0000FFFE
	cmp r0, r1
	bne _02081D0E
_02081D0C:
	b _02081EA8
_02081D0E:
	add r1, r1, #1
	cmp r0, r1
	beq _02081D1E
	b _02081D84
_02081D16:
	ldr r0, _02081EAC ; =0x00000C67
	mov r1, #6
	strb r1, [r4, r0]
	b _02081EA8
_02081D1E:
	add r0, r5, #0
	bl sub_02070DB0
	add r2, r0, #0
	ldr r0, _02081EC0 ; =0x000007C4
	mov r1, #0
	ldr r0, [r4, r0]
	bl BufferBoxMonNickname
	ldr r2, _02081EB8 ; =0x00000654
	ldr r0, _02081EC0 ; =0x000007C4
	ldr r2, [r4, r2]
	ldr r0, [r4, r0]
	ldrh r2, [r2, #0x2a]
	mov r1, #1
	bl BufferMoveName
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r0, [r4, r0]
	mov r1, #0x35
	bl NewString_ReadMsgData
	add r5, r0, #0
	ldr r1, _02081EC0 ; =0x000007C4
	add r2, r5, #0
	ldr r0, [r4, r1]
	add r1, r1, #4
	ldr r1, [r4, r1]
	bl StringExpandPlaceholders
	add r0, r5, #0
	bl String_dtor
	mov r1, #0
	add r0, r4, #0
	mvn r1, r1
	mov r2, #0
	bl sub_0207DAEC
	ldr r0, _02081EC4 ; =sub_02081F8C
	ldr r1, _02081EC8 ; =0x00000C58
	ldr r2, _02081ECC ; =sub_02081FE0
	str r0, [r4, r1]
	add r0, r1, #4
	str r2, [r4, r0]
	mov r0, #0x1a
	add r1, #0xa
	strb r0, [r4, r1]
	mov r0, #0x18
	pop {r3, r4, r5, pc}
_02081D84:
	add r0, r5, #0
	bl sub_02070DB0
	add r2, r0, #0
	ldr r0, _02081EC0 ; =0x000007C4
	mov r1, #0
	ldr r0, [r4, r0]
	bl BufferBoxMonNickname
	ldr r2, _02081EB8 ; =0x00000654
	ldr r0, _02081EC0 ; =0x000007C4
	ldr r2, [r4, r2]
	ldr r0, [r4, r0]
	ldrh r2, [r2, #0x2a]
	mov r1, #1
	bl BufferMoveName
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r0, [r4, r0]
	mov r1, #0xb2
	bl NewString_ReadMsgData
	add r5, r0, #0
	ldr r1, _02081EC0 ; =0x000007C4
	add r2, r5, #0
	ldr r0, [r4, r1]
	add r1, r1, #4
	ldr r1, [r4, r1]
	bl StringExpandPlaceholders
	add r0, r5, #0
	bl String_dtor
	mov r1, #0
	add r0, r4, #0
	mvn r1, r1
	mov r2, #0
	bl sub_0207DAEC
	ldr r0, _02081EAC ; =0x00000C67
	mov r1, #4
	strb r1, [r4, r0]
	b _02081EA8
_02081DDC:
	sub r0, r1, #3
	ldrb r0, [r4, r0]
	bl sub_02020094
	cmp r0, #0
	bne _02081EA8
	ldr r0, _02081EAC ; =0x00000C67
	mov r1, #3
	strb r1, [r4, r0]
	b _02081EA8
_02081DF0:
	ldr r0, _02081EB8 ; =0x00000654
	sub r1, r1, #2
	ldr r0, [r4, r0]
	ldrb r1, [r4, r1]
	ldr r0, [r0]
	bl GetPartyMonByIndex
	ldr r2, _02081EB8 ; =0x00000654
	add r1, r0, #0
	ldr r2, [r4, r2]
	add r0, r4, #0
	add r2, #0x2c
	ldrb r2, [r2]
	bl sub_0208254C
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r0, [r4, r0]
	mov r1, #0x3e
	bl NewString_ReadMsgData
	ldr r2, _02081EB8 ; =0x00000654
	add r5, r0, #0
	ldr r2, [r4, r2]
	ldr r0, _02081EC0 ; =0x000007C4
	ldrh r2, [r2, #0x2a]
	ldr r0, [r4, r0]
	mov r1, #1
	bl BufferMoveName
	ldr r1, _02081EC0 ; =0x000007C4
	add r2, r5, #0
	ldr r0, [r4, r1]
	add r1, r1, #4
	ldr r1, [r4, r1]
	bl StringExpandPlaceholders
	add r0, r5, #0
	bl String_dtor
	mov r1, #0
	add r0, r4, #0
	mvn r1, r1
	mov r2, #0
	bl sub_0207DAEC
	ldr r0, _02081EAC ; =0x00000C67
	mov r1, #4
	strb r1, [r4, r0]
	b _02081EA8
_02081E54:
	ldr r0, _02081EB8 ; =0x00000654
	sub r1, r1, #2
	ldr r0, [r4, r0]
	ldrb r1, [r4, r1]
	ldr r0, [r0]
	bl GetPartyMonByIndex
	add r5, r0, #0
	ldr r0, _02081EB8 ; =0x00000654
	ldr r0, [r4, r0]
	ldr r0, [r0, #0x1c]
	ldr r0, [r0, #0x20]
	ldr r0, [r0]
	bl MapHeader_GetMapEvolutionMethod
	add r3, r0, #0
	ldr r0, _02081EB8 ; =0x00000654
	lsl r3, r3, #0x10
	ldr r1, [r4, r0]
	mov r2, #0
	add r0, r1, #0
	add r0, #0x40
	str r0, [sp]
	ldr r0, [r1]
	add r1, r5, #0
	lsr r3, r3, #0x10
	bl sub_02070E34
	ldr r1, _02081EB8 ; =0x00000654
	ldr r2, [r4, r1]
	strh r0, [r2, #0x3c]
	ldr r1, [r4, r1]
	ldrh r0, [r1, #0x3c]
	cmp r0, #0
	beq _02081E9E
	mov r0, #9
	b _02081EA0
_02081E9E:
	mov r0, #0
_02081EA0:
	add r1, #0x27
	strb r0, [r1]
	mov r0, #0x20
	pop {r3, r4, r5, pc}
_02081EA8:
	mov r0, #5
	pop {r3, r4, r5, pc}
	.balign 4, 0
_02081EAC: .word 0x00000C67
_02081EB0: .word gMain
_02081EB4: .word 0x000005DC
_02081EB8: .word 0x00000654
_02081EBC: .word 0x0000FFFE
_02081EC0: .word 0x000007C4
_02081EC4: .word sub_02081F8C
_02081EC8: .word 0x00000C58
_02081ECC: .word sub_02081FE0
	thumb_func_end sub_02081C50

	thumb_func_start sub_02081ED0
sub_02081ED0: ; 0x02081ED0
	push {r3, r4, r5, lr}
	add r4, r0, #0
	ldr r0, _02081F78 ; =sub_02081C50
	ldr r1, _02081F7C ; =0x00000C54
	mov r2, #3
	str r0, [r4, r1]
	add r0, r1, #0
	add r0, #0x13
	strb r2, [r4, r0]
	ldr r0, _02081F80 ; =0x00000654
	add r1, #0x11
	ldr r0, [r4, r0]
	ldrb r1, [r4, r1]
	ldr r0, [r0]
	bl GetPartyMonByIndex
	add r5, r0, #0
	bl sub_02070DB0
	add r2, r0, #0
	ldr r0, _02081F84 ; =0x000007C4
	mov r1, #0
	ldr r0, [r4, r0]
	bl BufferBoxMonNickname
	ldr r0, _02081F80 ; =0x00000654
	ldr r2, [r4, r0]
	add r0, r2, #0
	add r0, #0x2c
	ldrb r1, [r0]
	cmp r1, #4
	bne _02081F24
	ldr r0, _02081F84 ; =0x000007C4
	ldrh r2, [r2, #0x2a]
	ldr r0, [r4, r0]
	mov r1, #1
	bl BufferMoveName
	add r0, r4, #0
	bl sub_02081FE0
	pop {r3, r4, r5, pc}
_02081F24:
	add r0, r5, #0
	add r1, #0x36
	mov r2, #0
	bl GetMonData
	add r2, r0, #0
	ldr r0, _02081F84 ; =0x000007C4
	mov r1, #1
	ldr r0, [r4, r0]
	bl BufferMoveName
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r0, [r4, r0]
	mov r1, #0x3d
	bl NewString_ReadMsgData
	add r5, r0, #0
	ldr r1, _02081F84 ; =0x000007C4
	add r2, r5, #0
	ldr r0, [r4, r1]
	add r1, r1, #4
	ldr r1, [r4, r1]
	bl StringExpandPlaceholders
	add r0, r5, #0
	bl String_dtor
	mov r1, #0
	add r0, r4, #0
	mvn r1, r1
	mov r2, #1
	bl sub_0207DAEC
	ldr r0, _02081F88 ; =0x00000C62
	mov r1, #5
	strb r1, [r4, r0]
	add r0, r0, #5
	strb r1, [r4, r0]
	mov r0, #0x18
	pop {r3, r4, r5, pc}
	nop
_02081F78: .word sub_02081C50
_02081F7C: .word 0x00000C54
_02081F80: .word 0x00000654
_02081F84: .word 0x000007C4
_02081F88: .word 0x00000C62
	thumb_func_end sub_02081ED0

	thumb_func_start sub_02081F8C
sub_02081F8C: ; 0x02081F8C
	push {r3, r4, r5, lr}
	add r5, r0, #0
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r0, [r5, r0]
	mov r1, #0x3c
	bl NewString_ReadMsgData
	add r4, r0, #0
	ldr r1, _02081FD4 ; =0x000007C4
	add r2, r4, #0
	ldr r0, [r5, r1]
	add r1, r1, #4
	ldr r1, [r5, r1]
	bl StringExpandPlaceholders
	add r0, r4, #0
	bl String_dtor
	mov r1, #0
	add r0, r5, #0
	mvn r1, r1
	mov r2, #0
	bl sub_0207DAEC
	ldr r0, _02081FD8 ; =0x00000654
	mov r1, #5
	ldr r0, [r5, r0]
	add r0, #0x27
	strb r1, [r0]
	ldr r0, _02081FDC ; =0x00000C62
	mov r1, #0x19
	strb r1, [r5, r0]
	mov r0, #0x18
	pop {r3, r4, r5, pc}
	nop
_02081FD4: .word 0x000007C4
_02081FD8: .word 0x00000654
_02081FDC: .word 0x00000C62
	thumb_func_end sub_02081F8C

	thumb_func_start sub_02081FE0
sub_02081FE0: ; 0x02081FE0
	push {r3, r4, r5, lr}
	add r5, r0, #0
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r0, [r5, r0]
	mov r1, #0x38
	bl NewString_ReadMsgData
	add r4, r0, #0
	ldr r1, _02082028 ; =0x000007C4
	add r2, r4, #0
	ldr r0, [r5, r1]
	add r1, r1, #4
	ldr r1, [r5, r1]
	bl StringExpandPlaceholders
	add r0, r4, #0
	bl String_dtor
	mov r1, #0
	add r0, r5, #0
	mvn r1, r1
	mov r2, #1
	bl sub_0207DAEC
	ldr r0, _0208202C ; =sub_02082038
	ldr r1, _02082030 ; =0x00000C58
	ldr r2, _02082034 ; =sub_02082084
	str r0, [r5, r1]
	add r0, r1, #4
	str r2, [r5, r0]
	mov r0, #0x1a
	add r1, #0xa
	strb r0, [r5, r1]
	mov r0, #0x18
	pop {r3, r4, r5, pc}
	.balign 4, 0
_02082028: .word 0x000007C4
_0208202C: .word sub_02082038
_02082030: .word 0x00000C58
_02082034: .word sub_02082084
	thumb_func_end sub_02081FE0

	thumb_func_start sub_02082038
sub_02082038: ; 0x02082038
	push {r3, r4, r5, lr}
	add r5, r0, #0
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r0, [r5, r0]
	mov r1, #0x3b
	bl NewString_ReadMsgData
	add r4, r0, #0
	ldr r1, _0208207C ; =0x000007C4
	add r2, r4, #0
	ldr r0, [r5, r1]
	add r1, r1, #4
	ldr r1, [r5, r1]
	bl StringExpandPlaceholders
	add r0, r4, #0
	bl String_dtor
	mov r1, #0
	add r0, r5, #0
	mvn r1, r1
	mov r2, #0
	bl sub_0207DAEC
	ldr r0, _02082080 ; =0x00000C62
	mov r1, #5
	strb r1, [r5, r0]
	mov r1, #4
	add r0, r0, #5
	strb r1, [r5, r0]
	mov r0, #0x18
	pop {r3, r4, r5, pc}
	nop
_0208207C: .word 0x000007C4
_02082080: .word 0x00000C62
	thumb_func_end sub_02082038

	thumb_func_start sub_02082084
sub_02082084: ; 0x02082084
	push {r3, r4, r5, lr}
	add r5, r0, #0
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r0, [r5, r0]
	mov r1, #0x35
	bl NewString_ReadMsgData
	add r4, r0, #0
	ldr r1, _020820CC ; =0x000007C4
	add r2, r4, #0
	ldr r0, [r5, r1]
	add r1, r1, #4
	ldr r1, [r5, r1]
	bl StringExpandPlaceholders
	add r0, r4, #0
	bl String_dtor
	mov r1, #0
	add r0, r5, #0
	mvn r1, r1
	mov r2, #0
	bl sub_0207DAEC
	ldr r0, _020820D0 ; =sub_02081F8C
	ldr r1, _020820D4 ; =0x00000C58
	ldr r2, _020820D8 ; =sub_02081FE0
	str r0, [r5, r1]
	add r0, r1, #4
	str r2, [r5, r0]
	mov r0, #0x1a
	add r1, #0xa
	strb r0, [r5, r1]
	mov r0, #0x18
	pop {r3, r4, r5, pc}
	.balign 4, 0
_020820CC: .word 0x000007C4
_020820D0: .word sub_02081F8C
_020820D4: .word 0x00000C58
_020820D8: .word sub_02081FE0
	thumb_func_end sub_02082084

	thumb_func_start sub_020820DC
sub_020820DC: ; 0x020820DC
	push {r3, r4, r5, r6, r7, lr}
	ldr r7, _02082130 ; =0x00000654
	add r5, r0, #0
	add r6, r1, #0
	mov r4, #0
_020820E6:
	add r1, r4, #0
	add r0, r6, #0
	add r1, #0x36
	mov r2, #0
	bl GetMonData
	lsl r0, r0, #0x10
	lsr r2, r0, #0x10
	ldr r0, [r5, r7]
	ldrh r1, [r0, #0x2a]
	cmp r2, r1
	bne _02082102
	mov r0, #0xfd
	pop {r3, r4, r5, r6, r7, pc}
_02082102:
	cmp r2, #0
	beq _02082110
	add r1, r4, #1
	lsl r1, r1, #0x18
	lsr r4, r1, #0x18
	cmp r4, #4
	blo _020820E6
_02082110:
	ldrh r0, [r0, #0x28]
	bl sub_0207804C
	add r1, r0, #0
	add r0, r6, #0
	bl sub_0207224C
	cmp r0, #0
	bne _02082126
	mov r0, #0xff
	pop {r3, r4, r5, r6, r7, pc}
_02082126:
	cmp r4, #4
	bne _0208212C
	mov r4, #0xfe
_0208212C:
	add r0, r4, #0
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_02082130: .word 0x00000654
	thumb_func_end sub_020820DC

	thumb_func_start sub_02082134
sub_02082134: ; 0x02082134
	push {r4, r5, r6, lr}
	add r4, r0, #0
	ldr r0, _020822B0 ; =0x00000654
	ldr r1, _020822B4 ; =0x00000C65
	ldr r0, [r4, r0]
	ldrb r1, [r4, r1]
	ldr r0, [r0]
	bl GetPartyMonByIndex
	add r6, r0, #0
	add r0, r4, #0
	add r1, r6, #0
	bl sub_020820DC
	add r5, r0, #0
	add r0, r6, #0
	bl sub_02070DB0
	add r2, r0, #0
	ldr r0, _020822B8 ; =0x000007C4
	mov r1, #0
	ldr r0, [r4, r0]
	bl BufferBoxMonNickname
	ldr r2, _020822B0 ; =0x00000654
	ldr r0, _020822B8 ; =0x000007C4
	ldr r2, [r4, r2]
	ldr r0, [r4, r0]
	ldrh r2, [r2, #0x2a]
	mov r1, #1
	bl BufferMoveName
	cmp r5, #0xfd
	bhi _02082192
	bhs _020821EA
	cmp r5, #3
	bhi _02082198
	add r0, r5, r5
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_0208218A: ; jump table
	.short _020821A0 - _0208218A - 2 ; case 0
	.short _020821A0 - _0208218A - 2 ; case 1
	.short _020821A0 - _0208218A - 2 ; case 2
	.short _020821A0 - _0208218A - 2 ; case 3
_02082192:
	cmp r5, #0xfe
	bhi _0208219A
	beq _0208222A
_02082198:
	b _020822AA
_0208219A:
	cmp r5, #0xff
	beq _0208226C
	b _020822AA
_020821A0:
	add r0, r4, #0
	add r1, r6, #0
	add r2, r5, #0
	bl sub_0208254C
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r0, [r4, r0]
	mov r1, #0x3e
	bl NewString_ReadMsgData
	add r5, r0, #0
	ldr r1, _020822B8 ; =0x000007C4
	add r2, r5, #0
	ldr r0, [r4, r1]
	add r1, r1, #4
	ldr r1, [r4, r1]
	bl StringExpandPlaceholders
	add r0, r5, #0
	bl String_dtor
	mov r1, #0
	add r0, r4, #0
	mvn r1, r1
	mov r2, #1
	bl sub_0207DAEC
	ldr r0, _020822B0 ; =0x00000654
	mov r1, #0
	ldr r0, [r4, r0]
	add r0, #0x27
	strb r1, [r0]
	ldr r0, _020822BC ; =0x00000C62
	mov r1, #0x19
	strb r1, [r4, r0]
	b _020822AA
_020821EA:
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r0, [r4, r0]
	mov r1, #0x40
	bl NewString_ReadMsgData
	add r5, r0, #0
	ldr r1, _020822B8 ; =0x000007C4
	add r2, r5, #0
	ldr r0, [r4, r1]
	add r1, r1, #4
	ldr r1, [r4, r1]
	bl StringExpandPlaceholders
	add r0, r5, #0
	bl String_dtor
	mov r1, #0
	add r0, r4, #0
	mvn r1, r1
	mov r2, #1
	bl sub_0207DAEC
	ldr r0, _020822B0 ; =0x00000654
	mov r1, #0
	ldr r0, [r4, r0]
	add r0, #0x27
	strb r1, [r0]
	ldr r0, _020822BC ; =0x00000C62
	mov r1, #0x19
	strb r1, [r4, r0]
	b _020822AA
_0208222A:
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r0, [r4, r0]
	mov r1, #0x35
	bl NewString_ReadMsgData
	add r5, r0, #0
	ldr r1, _020822B8 ; =0x000007C4
	add r2, r5, #0
	ldr r0, [r4, r1]
	add r1, r1, #4
	ldr r1, [r4, r1]
	bl StringExpandPlaceholders
	add r0, r5, #0
	bl String_dtor
	mov r1, #0
	add r0, r4, #0
	mvn r1, r1
	mov r2, #1
	bl sub_0207DAEC
	ldr r0, _020822C0 ; =sub_020823F4
	ldr r1, _020822C4 ; =0x00000C58
	ldr r2, _020822C8 ; =sub_02082448
	str r0, [r4, r1]
	add r0, r1, #4
	str r2, [r4, r0]
	mov r0, #0x1a
	add r1, #0xa
	strb r0, [r4, r1]
	b _020822AA
_0208226C:
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r0, [r4, r0]
	mov r1, #0x3f
	bl NewString_ReadMsgData
	add r5, r0, #0
	ldr r1, _020822B8 ; =0x000007C4
	add r2, r5, #0
	ldr r0, [r4, r1]
	add r1, r1, #4
	ldr r1, [r4, r1]
	bl StringExpandPlaceholders
	add r0, r5, #0
	bl String_dtor
	mov r1, #0
	add r0, r4, #0
	mvn r1, r1
	mov r2, #1
	bl sub_0207DAEC
	ldr r0, _020822B0 ; =0x00000654
	mov r1, #0
	ldr r0, [r4, r0]
	add r0, #0x27
	strb r1, [r0]
	ldr r0, _020822BC ; =0x00000C62
	mov r1, #0x19
	strb r1, [r4, r0]
_020822AA:
	mov r0, #0x18
	pop {r4, r5, r6, pc}
	nop
_020822B0: .word 0x00000654
_020822B4: .word 0x00000C65
_020822B8: .word 0x000007C4
_020822BC: .word 0x00000C62
_020822C0: .word sub_020823F4
_020822C4: .word 0x00000C58
_020822C8: .word sub_02082448
	thumb_func_end sub_02082134

	thumb_func_start sub_020822CC
sub_020822CC: ; 0x020822CC
	push {r3, r4, r5, lr}
	add r4, r0, #0
	ldr r0, _02082360 ; =0x00000654
	ldr r1, _02082364 ; =0x00000C65
	ldr r0, [r4, r0]
	ldrb r1, [r4, r1]
	ldr r0, [r0]
	bl GetPartyMonByIndex
	add r5, r0, #0
	bl sub_02070DB0
	add r2, r0, #0
	ldr r0, _02082368 ; =0x000007C4
	mov r1, #0
	ldr r0, [r4, r0]
	bl BufferBoxMonNickname
	ldr r0, _02082360 ; =0x00000654
	ldr r2, [r4, r0]
	add r0, r2, #0
	add r0, #0x2c
	ldrb r1, [r0]
	cmp r1, #4
	bne _02082312
	ldr r0, _02082368 ; =0x000007C4
	ldrh r2, [r2, #0x2a]
	ldr r0, [r4, r0]
	mov r1, #1
	bl BufferMoveName
	add r0, r4, #0
	bl sub_02082448
	pop {r3, r4, r5, pc}
_02082312:
	add r0, r5, #0
	add r1, #0x36
	mov r2, #0
	bl GetMonData
	add r2, r0, #0
	ldr r0, _02082368 ; =0x000007C4
	mov r1, #1
	ldr r0, [r4, r0]
	bl BufferMoveName
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r0, [r4, r0]
	mov r1, #0x3d
	bl NewString_ReadMsgData
	add r5, r0, #0
	ldr r1, _02082368 ; =0x000007C4
	add r2, r5, #0
	ldr r0, [r4, r1]
	add r1, r1, #4
	ldr r1, [r4, r1]
	bl StringExpandPlaceholders
	add r0, r5, #0
	bl String_dtor
	mov r1, #0
	add r0, r4, #0
	mvn r1, r1
	mov r2, #1
	bl sub_0207DAEC
	ldr r0, _0208236C ; =0x00000C62
	mov r1, #0x16
	strb r1, [r4, r0]
	mov r0, #0x18
	pop {r3, r4, r5, pc}
	.balign 4, 0
_02082360: .word 0x00000654
_02082364: .word 0x00000C65
_02082368: .word 0x000007C4
_0208236C: .word 0x00000C62
	thumb_func_end sub_020822CC

	thumb_func_start sub_02082370
sub_02082370: ; 0x02082370
	push {r3, r4, r5, lr}
	add r5, r0, #0
	ldr r0, _020823E4 ; =0x00000654
	ldr r1, _020823E8 ; =0x00000C65
	ldr r0, [r5, r0]
	ldrb r1, [r5, r1]
	ldr r0, [r0]
	bl GetPartyMonByIndex
	ldr r2, _020823E4 ; =0x00000654
	add r1, r0, #0
	ldr r2, [r5, r2]
	add r0, r5, #0
	add r2, #0x2c
	ldrb r2, [r2]
	bl sub_0208254C
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r0, [r5, r0]
	mov r1, #0x3e
	bl NewString_ReadMsgData
	ldr r2, _020823E4 ; =0x00000654
	add r4, r0, #0
	ldr r2, [r5, r2]
	ldr r0, _020823EC ; =0x000007C4
	ldrh r2, [r2, #0x2a]
	ldr r0, [r5, r0]
	mov r1, #1
	bl BufferMoveName
	ldr r1, _020823EC ; =0x000007C4
	add r2, r4, #0
	ldr r0, [r5, r1]
	add r1, r1, #4
	ldr r1, [r5, r1]
	bl StringExpandPlaceholders
	add r0, r4, #0
	bl String_dtor
	mov r1, #0
	add r0, r5, #0
	mvn r1, r1
	mov r2, #0
	bl sub_0207DAEC
	ldr r0, _020823E4 ; =0x00000654
	mov r1, #0
	ldr r0, [r5, r0]
	add r0, #0x27
	strb r1, [r0]
	ldr r0, _020823F0 ; =0x00000C62
	mov r1, #0x19
	strb r1, [r5, r0]
	mov r0, #0x18
	pop {r3, r4, r5, pc}
	.balign 4, 0
_020823E4: .word 0x00000654
_020823E8: .word 0x00000C65
_020823EC: .word 0x000007C4
_020823F0: .word 0x00000C62
	thumb_func_end sub_02082370

	thumb_func_start sub_020823F4
sub_020823F4: ; 0x020823F4
	push {r3, r4, r5, lr}
	add r5, r0, #0
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r0, [r5, r0]
	mov r1, #0x3c
	bl NewString_ReadMsgData
	add r4, r0, #0
	ldr r1, _0208243C ; =0x000007C4
	add r2, r4, #0
	ldr r0, [r5, r1]
	add r1, r1, #4
	ldr r1, [r5, r1]
	bl StringExpandPlaceholders
	add r0, r4, #0
	bl String_dtor
	mov r1, #0
	add r0, r5, #0
	mvn r1, r1
	mov r2, #0
	bl sub_0207DAEC
	ldr r0, _02082440 ; =0x00000654
	mov r1, #4
	ldr r0, [r5, r0]
	add r0, #0x27
	strb r1, [r0]
	ldr r0, _02082444 ; =0x00000C62
	mov r1, #0x19
	strb r1, [r5, r0]
	mov r0, #0x18
	pop {r3, r4, r5, pc}
	nop
_0208243C: .word 0x000007C4
_02082440: .word 0x00000654
_02082444: .word 0x00000C62
	thumb_func_end sub_020823F4

	thumb_func_start sub_02082448
sub_02082448: ; 0x02082448
	push {r3, r4, r5, lr}
	add r5, r0, #0
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r0, [r5, r0]
	mov r1, #0x38
	bl NewString_ReadMsgData
	add r4, r0, #0
	ldr r1, _02082490 ; =0x000007C4
	add r2, r4, #0
	ldr r0, [r5, r1]
	add r1, r1, #4
	ldr r1, [r5, r1]
	bl StringExpandPlaceholders
	add r0, r4, #0
	bl String_dtor
	mov r1, #0
	add r0, r5, #0
	mvn r1, r1
	mov r2, #1
	bl sub_0207DAEC
	ldr r0, _02082494 ; =sub_020824A0
	ldr r1, _02082498 ; =0x00000C58
	ldr r2, _0208249C ; =sub_020824F4
	str r0, [r5, r1]
	add r0, r1, #4
	str r2, [r5, r0]
	mov r0, #0x1a
	add r1, #0xa
	strb r0, [r5, r1]
	mov r0, #0x18
	pop {r3, r4, r5, pc}
	.balign 4, 0
_02082490: .word 0x000007C4
_02082494: .word sub_020824A0
_02082498: .word 0x00000C58
_0208249C: .word sub_020824F4
	thumb_func_end sub_02082448

	thumb_func_start sub_020824A0
sub_020824A0: ; 0x020824A0
	push {r3, r4, r5, lr}
	add r5, r0, #0
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r0, [r5, r0]
	mov r1, #0x3b
	bl NewString_ReadMsgData
	add r4, r0, #0
	ldr r1, _020824E8 ; =0x000007C4
	add r2, r4, #0
	ldr r0, [r5, r1]
	add r1, r1, #4
	ldr r1, [r5, r1]
	bl StringExpandPlaceholders
	add r0, r4, #0
	bl String_dtor
	mov r1, #0
	add r0, r5, #0
	mvn r1, r1
	mov r2, #0
	bl sub_0207DAEC
	ldr r0, _020824EC ; =0x00000654
	mov r1, #0
	ldr r0, [r5, r0]
	add r0, #0x27
	strb r1, [r0]
	ldr r0, _020824F0 ; =0x00000C62
	mov r1, #0x19
	strb r1, [r5, r0]
	mov r0, #0x18
	pop {r3, r4, r5, pc}
	nop
_020824E8: .word 0x000007C4
_020824EC: .word 0x00000654
_020824F0: .word 0x00000C62
	thumb_func_end sub_020824A0

	thumb_func_start sub_020824F4
sub_020824F4: ; 0x020824F4
	push {r3, r4, r5, lr}
	add r5, r0, #0
	mov r0, #0x1f
	lsl r0, r0, #6
	ldr r0, [r5, r0]
	mov r1, #0x35
	bl NewString_ReadMsgData
	add r4, r0, #0
	ldr r1, _0208253C ; =0x000007C4
	add r2, r4, #0
	ldr r0, [r5, r1]
	add r1, r1, #4
	ldr r1, [r5, r1]
	bl StringExpandPlaceholders
	add r0, r4, #0
	bl String_dtor
	mov r1, #0
	add r0, r5, #0
	mvn r1, r1
	mov r2, #0
	bl sub_0207DAEC
	ldr r0, _02082540 ; =sub_020823F4
	ldr r1, _02082544 ; =0x00000C58
	ldr r2, _02082548 ; =sub_02082448
	str r0, [r5, r1]
	add r0, r1, #4
	str r2, [r5, r0]
	mov r0, #0x1a
	add r1, #0xa
	strb r0, [r5, r1]
	mov r0, #0x18
	pop {r3, r4, r5, pc}
	.balign 4, 0
_0208253C: .word 0x000007C4
_02082540: .word sub_020823F4
_02082544: .word 0x00000C58
_02082548: .word sub_02082448
	thumb_func_end sub_020824F4

	thumb_func_start sub_0208254C
sub_0208254C: ; 0x0208254C
	push {r3, r4, r5, r6, lr}
	sub sp, #4
	add r5, r0, #0
	ldr r0, _020825D4 ; =0x00000654
	add r6, r2, #0
	ldr r0, [r5, r0]
	add r4, r1, #0
	ldrh r0, [r0, #0x2a]
	add r1, r6, #0
	add r1, #0x36
	str r0, [sp]
	add r0, r4, #0
	add r2, sp, #0
	bl sub_0206EC40
	mov r0, #0
	add r1, r6, #0
	str r0, [sp]
	add r0, r4, #0
	add r1, #0x3e
	add r2, sp, #0
	bl sub_0206EC40
	ldr r0, _020825D4 ; =0x00000654
	mov r1, #0
	ldr r0, [r5, r0]
	ldrh r0, [r0, #0x2a]
	bl sub_0207332C
	add r6, #0x3a
	str r0, [sp]
	add r0, r4, #0
	add r1, r6, #0
	add r2, sp, #0
	bl sub_0206EC40
	ldr r0, _020825D4 ; =0x00000654
	ldr r1, [r5, r0]
	ldrh r0, [r1, #0x28]
	cmp r0, #0
	beq _020825D0
	ldrh r0, [r1, #0x2a]
	bl sub_02078024
	cmp r0, #0
	bne _020825B8
	ldr r0, _020825D4 ; =0x00000654
	mov r2, #1
	ldr r1, [r5, r0]
	mov r3, #0xc
	ldr r0, [r1, #4]
	ldrh r1, [r1, #0x28]
	bl sub_02078434
_020825B8:
	add r0, r5, #0
	bl sub_020828EC
	add r2, r0, #0
	add r0, r4, #0
	mov r1, #4
	bl sub_0206FE90
	add r0, r4, #0
	mov r1, #3
	bl sub_02097F0C
_020825D0:
	add sp, #4
	pop {r3, r4, r5, r6, pc}
	.balign 4, 0
_020825D4: .word 0x00000654
	thumb_func_end sub_0208254C

	thumb_func_start sub_020825D8
sub_020825D8: ; 0x020825D8
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	ldr r0, _02082648 ; =0x00000654
	add r6, r1, #0
	ldr r1, _0208264C ; =0x00000C65
	ldr r0, [r5, r0]
	ldrb r1, [r5, r1]
	ldr r0, [r0]
	bl GetPartyMonByIndex
	add r1, r6, #0
	add r1, #0x36
	mov r2, #0
	bl GetMonData
	lsl r0, r0, #0x10
	lsr r4, r0, #0x10
	mov r0, #0x1f
	lsl r0, r0, #6
	add r1, r6, #0
	ldr r0, [r5, r0]
	add r1, #0x91
	bl NewString_ReadMsgData
	add r7, r0, #0
	ldr r0, _02082650 ; =0x000007C4
	mov r1, #0
	ldr r0, [r5, r0]
	add r2, r4, #0
	bl BufferMoveName
	ldr r1, _02082650 ; =0x000007C4
	add r2, r7, #0
	ldr r0, [r5, r1]
	add r1, #8
	ldr r1, [r5, r1]
	bl StringExpandPlaceholders
	add r0, r7, #0
	bl String_dtor
	cmp r4, #0
	bne _02082632
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_02082632:
	mov r1, #0x82
	lsl r1, r1, #4
	ldr r0, [r5, r1]
	sub r1, #0x54
	ldr r1, [r5, r1]
	add r2, r6, #0
	bl ListMenuItems_AddItem
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
	nop
_02082648: .word 0x00000654
_0208264C: .word 0x00000C65
_02082650: .word 0x000007C4
	thumb_func_end sub_020825D8

	thumb_func_start sub_02082654
sub_02082654: ; 0x02082654
	push {r3, r4, r5, lr}
	sub sp, #0x10
	add r5, r0, #0
	mov r0, #0x81
	lsl r0, r0, #2
	add r4, r1, #0
	add r0, r5, r0
	mov r1, #1
	bl sub_0200E9BC
	cmp r4, #0
	bne _02082678
	add r0, r5, #0
	mov r1, #0x2a
	mov r2, #1
	bl sub_0207DAD8
	b _02082682
_02082678:
	add r0, r5, #0
	mov r1, #0x29
	mov r2, #1
	bl sub_0207DAD8
_02082682:
	mov r0, #5
	mov r1, #0xc
	bl ListMenuItems_ctor
	mov r1, #0x82
	lsl r1, r1, #4
	str r0, [r5, r1]
	add r0, r5, #0
	mov r1, #0
	bl sub_020825D8
	add r4, r0, #0
	add r0, r5, #0
	mov r1, #1
	bl sub_020825D8
	add r0, r4, r0
	lsl r0, r0, #0x18
	lsr r4, r0, #0x18
	add r0, r5, #0
	mov r1, #2
	bl sub_020825D8
	add r0, r4, r0
	lsl r0, r0, #0x18
	lsr r4, r0, #0x18
	add r0, r5, #0
	mov r1, #3
	bl sub_020825D8
	add r0, r4, r0
	lsl r0, r0, #0x18
	lsr r4, r0, #0x18
	mov r0, #9
	bl sub_0207F42C
	mov r1, #0x82
	lsl r1, r1, #4
	add r2, r0, #0
	ldr r0, [r5, r1]
	sub r1, #0x2c
	ldr r1, [r5, r1]
	bl ListMenuItems_AddItem
	mov r0, #0x82
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	mov r2, #0
	str r0, [sp, #4]
	mov r0, #0x91
	lsl r0, r0, #2
	add r0, r5, r0
	str r0, [sp, #8]
	add r1, sp, #4
	strb r2, [r1, #8]
	mov r3, #1
	strb r3, [r1, #9]
	add r0, r4, #1
	strb r0, [r1, #0xa]
	ldrb r4, [r1, #0xb]
	mov r0, #0xf
	bic r4, r0
	strb r4, [r1, #0xb]
	ldrb r4, [r1, #0xb]
	mov r0, #0x30
	bic r4, r0
	strb r4, [r1, #0xb]
	ldrb r4, [r1, #0xb]
	mov r0, #0xc0
	bic r4, r0
	mov r0, #0x40
	orr r0, r4
	strb r0, [r1, #0xb]
	ldrb r1, [r1, #0xa]
	add r0, r5, #0
	bl sub_0207E54C
	mov r0, #1
	str r0, [sp]
	add r0, r5, #0
	add r1, sp, #4
	mov r2, #0
	mov r3, #0xc
	bl sub_0207E590
	ldr r1, _02082734 ; =0x00000824
	str r0, [r5, r1]
	add sp, #0x10
	pop {r3, r4, r5, pc}
	.balign 4, 0
_02082734: .word 0x00000824
	thumb_func_end sub_02082654

	thumb_func_start sub_02082738
sub_02082738: ; 0x02082738
	push {r4, r5, r6, lr}
	sub sp, #8
	ldr r1, _02082850 ; =0x00000824
	add r5, r0, #0
	ldr r1, [r5, r1]
	bl sub_0207E93C
	add r4, r0, #0
	mov r0, #1
	mvn r0, r0
	cmp r4, r0
	beq _02082758
	add r0, r0, #1
	cmp r4, r0
	beq _0208284A
	b _02082794
_02082758:
	mov r0, #0x85
	lsl r0, r0, #2
	add r0, r5, r0
	mov r1, #1
	bl sub_0200E9BC
	mov r0, #0x91
	lsl r0, r0, #2
	add r0, r5, r0
	mov r1, #1
	bl sub_0200E5D4
	add r0, r5, #0
	bl sub_0207CB20
	bl sub_0207CB90
	add r0, r5, #0
	mov r1, #0x21
	mov r2, #1
	bl sub_0207DAC4
	ldr r0, _02082854 ; =0x00000678
	mov r1, #0
	ldr r0, [r5, r0]
	bl sub_0200DD08
	add sp, #8
	mov r0, #4
	pop {r4, r5, r6, pc}
_02082794:
	mov r0, #0x85
	lsl r0, r0, #2
	add r0, r5, r0
	mov r1, #1
	bl sub_0200E9BC
	mov r0, #0x91
	lsl r0, r0, #2
	add r0, r5, r0
	mov r1, #1
	bl sub_0200E5D4
	add r0, r5, #0
	bl sub_0207CB20
	bl sub_0207CB90
	ldr r0, _02082858 ; =0x00000654
	ldr r6, [r5, r0]
	add r0, r5, #0
	bl sub_020828EC
	str r0, [sp]
	mov r0, #0xc
	str r0, [sp, #4]
	ldr r2, _0208285C ; =0x00000C65
	lsl r3, r4, #0x18
	ldrh r1, [r6, #0x28]
	ldrb r2, [r5, r2]
	ldr r0, [r6]
	lsr r3, r3, #0x18
	bl sub_020908AC
	cmp r0, #1
	bne _02082818
	ldr r0, _02082858 ; =0x00000654
	ldr r1, _0208285C ; =0x00000C65
	ldr r0, [r5, r0]
	ldrb r1, [r5, r1]
	ldr r0, [r0]
	bl GetPartyMonByIndex
	add r4, #0x36
	add r1, r4, #0
	mov r2, #0
	bl GetMonData
	ldr r1, _02082858 ; =0x00000654
	add r2, r0, #0
	ldr r1, [r5, r1]
	add r0, r5, #0
	ldrh r1, [r1, #0x28]
	bl sub_02080E9C
	ldr r0, _02082858 ; =0x00000654
	mov r2, #1
	ldr r1, [r5, r0]
	mov r3, #0xc
	ldr r0, [r1, #4]
	ldrh r1, [r1, #0x28]
	bl sub_02078434
	ldr r0, _02082860 ; =0x000005EC
	bl PlaySE
	b _02082828
_02082818:
	mov r2, #0x1f
	lsl r2, r2, #6
	ldr r0, [r5, r2]
	add r2, #8
	ldr r2, [r5, r2]
	mov r1, #0x66
	bl ReadMsgDataIntoString
_02082828:
	mov r1, #0
	add r0, r5, #0
	mvn r1, r1
	mov r2, #1
	bl sub_0207DAEC
	ldr r0, _02082858 ; =0x00000654
	mov r1, #0
	ldr r0, [r5, r0]
	add sp, #8
	add r0, #0x27
	strb r1, [r0]
	ldr r0, _02082864 ; =0x00000C62
	mov r1, #0x19
	strb r1, [r5, r0]
	mov r0, #0x18
	pop {r4, r5, r6, pc}
_0208284A:
	mov r0, #6
	add sp, #8
	pop {r4, r5, r6, pc}
	.balign 4, 0
_02082850: .word 0x00000824
_02082854: .word 0x00000678
_02082858: .word 0x00000654
_0208285C: .word 0x00000C65
_02082860: .word 0x000005EC
_02082864: .word 0x00000C62
	thumb_func_end sub_02082738

	thumb_func_start sub_02082868
sub_02082868: ; 0x02082868
	push {r4, lr}
	add r4, r0, #0
	mov r0, #0x81
	lsl r0, r0, #2
	add r0, r4, r0
	mov r1, #1
	bl sub_0200E9BC
	ldr r0, _020828DC ; =0x00000C65
	ldr r2, _020828E0 ; =0x00000834
	ldrb r1, [r4, r0]
	mov r0, #0x30
	mul r0, r1
	add r0, r4, r0
	ldrh r0, [r0, r2]
	cmp r0, #0
	bne _020828A6
	add r0, r2, #0
	sub r0, #0x74
	sub r2, #0x6c
	ldr r0, [r4, r0]
	ldr r2, [r4, r2]
	mov r1, #0x74
	bl ReadMsgDataIntoString
	ldr r1, _020828DC ; =0x00000C65
	add r0, r4, #0
	ldrb r1, [r4, r1]
	bl sub_0207F044
	b _020828BC
_020828A6:
	add r0, r2, #0
	sub r0, #0x74
	sub r2, #0x6c
	ldr r0, [r4, r0]
	ldr r2, [r4, r2]
	mov r1, #0x75
	bl ReadMsgDataIntoString
	ldr r0, _020828DC ; =0x00000C65
	mov r1, #7
	strb r1, [r4, r0]
_020828BC:
	mov r1, #0
	add r0, r4, #0
	mvn r1, r1
	mov r2, #1
	bl sub_0207DAEC
	ldr r0, _020828E4 ; =0x00000654
	mov r1, #0
	ldr r0, [r4, r0]
	add r0, #0x27
	strb r1, [r0]
	ldr r0, _020828E8 ; =0x00000C62
	mov r1, #0x19
	strb r1, [r4, r0]
	pop {r4, pc}
	nop
_020828DC: .word 0x00000C65
_020828E0: .word 0x00000834
_020828E4: .word 0x00000654
_020828E8: .word 0x00000C62
	thumb_func_end sub_02082868

	thumb_func_start sub_020828EC
sub_020828EC: ; 0x020828EC
	push {r3, lr}
	ldr r1, _02082904 ; =0x00000654
	ldr r0, [r0, r1]
	ldr r0, [r0, #0x1c]
	ldr r0, [r0, #0x20]
	ldr r0, [r0]
	bl MapHeader_GetMapSec
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	pop {r3, pc}
	nop
_02082904: .word 0x00000654
	thumb_func_end sub_020828EC

	thumb_func_start sub_02082908
sub_02082908: ; 0x02082908
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	add r5, r1, #0
	ldr r1, [r5]
	add r6, r0, #0
	cmp r1, #0
	beq _0208291E
	cmp r1, #1
	bne _0208291C
	b _02082A88
_0208291C:
	b _02082AC2
_0208291E:
	mov r0, #0
	add r1, r0, #0
	bl sub_0201A0FC
	bl sub_0201A108
	bl sub_02022C54
	bl sub_02022CBC
	mov r2, #1
	lsl r2, r2, #0x1a
	ldr r1, [r2]
	ldr r0, _02082AC8 ; =0xFFFFE0FF
	and r1, r0
	str r1, [r2]
	ldr r2, _02082ACC ; =0x04001000
	ldr r1, [r2]
	and r0, r1
	str r0, [r2]
	mov r2, #0xa
	mov r0, #3
	mov r1, #0x12
	lsl r2, r2, #0xe
	bl CreateHeap
	ldr r1, _02082AD0 ; =0x000005D4
	add r0, r6, #0
	mov r2, #0x12
	bl OverlayManager_CreateAndGetData
	ldr r2, _02082AD0 ; =0x000005D4
	mov r1, #0
	add r4, r0, #0
	bl memset
	mov r0, #0x12
	bl sub_0201AC88
	mov r1, #0x16
	lsl r1, r1, #4
	str r0, [r4, r1]
	mov r0, #0x1f
	mov r1, #0x12
	bl NARC_ctor
	add r7, r0, #0
	mov r0, #0x12
	bl ScrStrBufs_new
	mov r1, #0x5a
	lsl r1, r1, #2
	str r0, [r4, r1]
	mov r0, #0
	mov r1, #0x1b
	mov r2, #0xf9
	mov r3, #0x12
	bl NewMsgDataFromNarc
	mov r1, #0x5b
	lsl r1, r1, #2
	str r0, [r4, r1]
	mov r0, #1
	mov r1, #0x1b
	mov r2, #0xfe
	mov r3, #0x12
	bl NewMsgDataFromNarc
	mov r1, #0x17
	lsl r1, r1, #4
	str r0, [r4, r1]
	mov r0, #1
	mov r1, #0x1b
	mov r2, #0xc5
	mov r3, #0x12
	bl NewMsgDataFromNarc
	mov r1, #0x5d
	lsl r1, r1, #2
	str r0, [r4, r1]
	mov r0, #4
	mov r1, #8
	bl sub_0201A71C
	bl sub_02083184
	mov r0, #0x16
	lsl r0, r0, #4
	ldr r0, [r4, r0]
	bl sub_020831A4
	add r0, r6, #0
	bl OverlayManager_GetField18
	add r1, r0, #0
	add r0, r4, #0
	bl sub_02083160
	add r0, r4, #0
	add r1, r7, #0
	bl sub_02083654
	mov r0, #2
	mov r1, #0x12
	bl sub_02002CEC
	ldr r0, _02082AD4 ; =sub_02083140
	mov r1, #0
	bl sub_0201A0FC
	add r0, r4, #0
	add r1, r6, #0
	bl sub_02083334
	mov r0, #0
	mov r1, #0x12
	bl sub_02002D40
	bl sub_0208377C
	add r0, r4, #0
	add r1, r7, #0
	bl sub_020837AC
	add r0, r4, #0
	bl sub_020839EC
	add r0, r4, #0
	add r1, r6, #0
	add r2, r7, #0
	bl sub_02083F9C
	ldr r0, _02082AD8 ; =0x000004C4
	mov r3, #0x5f
	add r1, r4, r0
	lsl r3, r3, #2
	str r1, [sp]
	ldr r1, [r4, r3]
	add r2, r3, #0
	str r1, [sp, #4]
	sub r2, #0x24
	sub r0, #0xcc
	add r1, r4, #0
	sub r3, #0x22
	ldrh r2, [r4, r2]
	add r0, r4, r0
	add r1, #0xd8
	add r3, r4, r3
	bl sub_02084740
	mov r1, #0
	mov r0, #0x34
	add r2, r1, #0
	bl sub_02004EC4
	mov r0, #0x10
	str r0, [sp]
	mov r1, #1
	str r1, [sp, #4]
	mov r0, #0x12
	str r0, [sp, #8]
	mov r0, #0
	add r2, r1, #0
	add r3, r0, #0
	bl sub_0200FA24
	mov r0, #1
	bl sub_020832E4
	ldr r0, _02082ADC ; =gMain + 0x60
	mov r1, #1
	strb r1, [r0, #9]
	bl sub_02022D3C
	add r0, r7, #0
	bl NARC_dtor
	ldr r0, [r5]
	add r0, r0, #1
	str r0, [r5]
	b _02082AC2
_02082A88:
	bl OverlayManager_GetData
	add r4, r0, #0
	ldr r0, [r4]
	cmp r0, #1
	bne _02082AA4
	ldr r1, _02082AE0 ; =0x000004B8
	ldr r2, [r4, #4]
	ldr r0, [r4, r1]
	add r1, #8
	ldr r1, [r4, r1]
	ldr r3, [r4, #8]
	bl sub_02082AEC
_02082AA4:
	ldr r0, _02082AE4 ; =0x021D43B0
	mov r1, #1
	str r4, [r0]
	mov r0, #0
	mov r2, #0xc
	mov r3, #0x12
	bl sub_020163E0
	ldr r1, _02082AE8 ; =0x000005C4
	add sp, #0xc
	str r0, [r4, r1]
	mov r0, #0
	str r0, [r5]
	mov r0, #1
	pop {r4, r5, r6, r7, pc}
_02082AC2:
	mov r0, #0
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
	.balign 4, 0
_02082AC8: .word 0xFFFFE0FF
_02082ACC: .word 0x04001000
_02082AD0: .word 0x000005D4
_02082AD4: .word sub_02083140
_02082AD8: .word 0x000004C4
_02082ADC: .word gMain + 0x60
_02082AE0: .word 0x000004B8
_02082AE4: .word 0x021D43B0
_02082AE8: .word 0x000005C4
	thumb_func_end sub_02082908

	thumb_func_start sub_02082AEC
sub_02082AEC: ; 0x02082AEC
	push {r4, r5, r6, lr}
	add r4, r1, #0
	add r5, r2, #0
	mov r2, #2
	ldr r0, [r0, #0x14]
	ldr r1, _02082B1C ; =0x000057E0
	add r6, r3, #0
	lsl r2, r2, #8
	bl sub_020CFE74
	ldr r4, [r4, #0xc]
	add r0, r5, #0
	add r1, r6, #0
	mov r2, #0
	bl sub_02074364
	lsl r0, r0, #5
	add r0, r4, r0
	mov r1, #0xc0
	mov r2, #0x20
	bl GX_LoadOBJPltt
	pop {r4, r5, r6, pc}
	nop
_02082B1C: .word 0x000057E0
	thumb_func_end sub_02082AEC

	thumb_func_start sub_02082B20
sub_02082B20: ; 0x02082B20
	push {r4, r5, r6, lr}
	sub sp, #0x10
	add r5, r1, #0
	add r6, r0, #0
	bl OverlayManager_GetData
	ldr r1, [r5]
	add r4, r0, #0
	cmp r1, #3
	bhi _02082B84
	add r2, r1, r1
	add r2, pc
	ldrh r2, [r2, #6]
	lsl r2, r2, #0x10
	asr r2, r2, #0x10
	add pc, r2
_02082B40: ; jump table
	.short _02082B48 - _02082B40 - 2 ; case 0
	.short _02082B5C - _02082B40 - 2 ; case 1
	.short _02082B90 - _02082B40 - 2 ; case 2
	.short _02082CBE - _02082B40 - 2 ; case 3
_02082B48:
	bl sub_0200FB5C
	cmp r0, #0
	beq _02082B84
	mov r0, #1
	str r0, [r5]
	ldr r0, _02082CDC ; =0x000005CC
	mov r1, #0
	str r1, [r4, r0]
	b _02082CCC
_02082B5C:
	ldr r1, _02082CDC ; =0x000005CC
	ldr r2, [r4, r1]
	add r2, r2, #1
	str r2, [r4, r1]
	bl sub_02084FCC
	mov r2, #0x49
	lsl r2, r2, #4
	add r0, r4, r2
	mov r1, #0xcb
	sub r2, #0x30
	lsl r1, r1, #2
	ldr r2, [r4, r2]
	add r1, r4, r1
	bl sub_02084F3C
	ldr r0, _02082CDC ; =0x000005CC
	ldr r1, [r4, r0]
	cmp r1, #5
	bgt _02082B86
_02082B84:
	b _02082CCC
_02082B86:
	mov r1, #2
	str r1, [r5]
	mov r1, #0
	str r1, [r4, r0]
	b _02082CCC
_02082B90:
	ldr r3, _02082CE0 ; =0x0000045C
	ldr r2, [r4, r3]
	cmp r2, #7
	bhi _02082C6A
	add r2, r2, r2
	add r2, pc
	ldrh r2, [r2, #6]
	lsl r2, r2, #0x10
	asr r2, r2, #0x10
	add pc, r2
_02082BA4: ; jump table
	.short _02082C6A - _02082BA4 - 2 ; case 0
	.short _02082C6A - _02082BA4 - 2 ; case 1
	.short _02082C6A - _02082BA4 - 2 ; case 2
	.short _02082C6A - _02082BA4 - 2 ; case 3
	.short _02082BB4 - _02082BA4 - 2 ; case 4
	.short _02082BC8 - _02082BA4 - 2 ; case 5
	.short _02082C14 - _02082BA4 - 2 ; case 6
	.short _02082C40 - _02082BA4 - 2 ; case 7
_02082BB4:
	ldr r2, [r4, #0x34]
	cmp r2, #0
	bne _02082BC0
	bl sub_02082CF8
	str r0, [r5]
_02082BC0:
	add r0, r4, #0
	bl sub_02084FCC
	b _02082C6A
_02082BC8:
	add r1, r6, #0
	bl sub_020834FC
	ldr r0, _02082CE4 ; =0x00000448
	mov r1, #0xf
	add r0, r4, r0
	bl FillWindowPixelBuffer
	ldr r0, _02082CE4 ; =0x00000448
	mov r2, #1
	add r0, r4, r0
	mov r1, #0
	lsl r2, r2, #8
	mov r3, #0xa
	bl sub_0200E998
	mov r3, #0
	mov r2, #6
	ldr r0, _02082CE4 ; =0x00000448
	str r3, [sp]
	mov r1, #1
	str r1, [sp, #4]
	str r3, [sp, #8]
	lsl r2, r2, #6
	ldr r2, [r4, r2]
	add r0, r4, r0
	bl AddTextPrinterParameterized
	ldr r1, _02082CE8 ; =0x00000458
	str r0, [r4, r1]
	sub r1, #0x10
	add r0, r4, r1
	bl CopyWindowToVram
	ldr r0, _02082CE0 ; =0x0000045C
	mov r1, #6
	str r1, [r4, r0]
	b _02082C6A
_02082C14:
	sub r0, r3, #4
	ldr r0, [r4, r0]
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	bl sub_02020094
	cmp r0, #0
	bne _02082C6A
	ldr r0, _02082CEC ; =0x000005E2
	bl PlaySE
	ldr r1, _02082CF0 ; =0x000004A8
	mov r2, #0
	ldr r0, [r4, r1]
	add r0, r0, #1
	str r0, [r4, r1]
	ldr r0, _02082CDC ; =0x000005CC
	sub r1, #0x4c
	str r2, [r4, r0]
	mov r0, #7
	str r0, [r4, r1]
	b _02082C6A
_02082C40:
	ldr r0, _02082CDC ; =0x000005CC
	ldr r1, [r4, r0]
	add r1, r1, #1
	str r1, [r4, r0]
	ldr r0, [r4, r0]
	cmp r0, #0x1e
	ble _02082C6A
	mov r0, #0x10
	str r0, [sp]
	mov r1, #0
	mov r0, #1
	str r0, [sp, #4]
	mov r0, #0x12
	str r0, [sp, #8]
	mov r0, #2
	add r2, r1, #0
	add r3, r1, #0
	bl sub_0200FA24
	mov r0, #3
	str r0, [r5]
_02082C6A:
	ldr r3, _02082CF4 ; =0x00000464
	mov r1, #0xcb
	add r0, r4, r3
	str r0, [sp]
	add r0, r3, #4
	add r0, r4, r0
	lsl r1, r1, #2
	str r0, [sp, #4]
	add r0, r4, r1
	str r0, [sp, #8]
	add r0, r3, #0
	add r0, #0x4c
	ldr r0, [r4, r0]
	add r2, r3, #0
	ldr r0, [r0, #0x14]
	add r1, #0x8c
	str r0, [sp, #0xc]
	mov r0, #0x16
	lsl r0, r0, #4
	sub r3, r3, #4
	sub r2, #8
	ldr r0, [r4, r0]
	ldr r3, [r4, r3]
	add r1, r4, r1
	add r2, r4, r2
	bl sub_02083D34
	mov r2, #0x49
	lsl r2, r2, #4
	add r0, r4, r2
	mov r1, #0xcb
	sub r2, #0x30
	lsl r1, r1, #2
	ldr r2, [r4, r2]
	add r1, r4, r1
	bl sub_02084F3C
	add r0, r4, #0
	add r0, #0x38
	bl sub_02084500
	b _02082CCC
_02082CBE:
	bl sub_0200FB5C
	cmp r0, #0
	beq _02082CCC
	add sp, #0x10
	mov r0, #1
	pop {r4, r5, r6, pc}
_02082CCC:
	mov r0, #0x62
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	bl sub_0202457C
	mov r0, #0
	add sp, #0x10
	pop {r4, r5, r6, pc}
	.balign 4, 0
_02082CDC: .word 0x000005CC
_02082CE0: .word 0x0000045C
_02082CE4: .word 0x00000448
_02082CE8: .word 0x00000458
_02082CEC: .word 0x000005E2
_02082CF0: .word 0x000004A8
_02082CF4: .word 0x00000464
	thumb_func_end sub_02082B20

	thumb_func_start sub_02082CF8
sub_02082CF8: ; 0x02082CF8
	push {r3, r4, r5, lr}
	add r5, r0, #0
	add r4, r1, #0
	bl sub_0208432C
	ldr r0, _02082E10 ; =gMain
	mov r1, #4
	ldr r0, [r0, #0x48]
	tst r1, r0
	beq _02082D9C
	mov r0, #0xd3
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	bl sub_020248B8
	cmp r0, #0
	bne _02082D2A
	mov r0, #0xd3
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	mov r1, #1
	bl sub_02024830
	add r0, r4, #0
	pop {r3, r4, r5, pc}
_02082D2A:
	ldr r0, [r5]
	cmp r0, #4
	beq _02082D74
	ldr r1, _02082E14 ; =0x0000045C
	mov r0, #0
	str r0, [r5, r1]
	add r2, r1, #4
	ldr r2, [r5, r2]
	add r3, r2, #1
	add r2, r1, #4
	str r3, [r5, r2]
	ldr r2, [r5, r2]
	cmp r2, #3
	blt _02082D4A
	add r1, r1, #4
	str r0, [r5, r1]
_02082D4A:
	mov r2, #0x49
	lsl r2, r2, #4
	add r1, r2, #0
	sub r1, #0x30
	ldr r1, [r5, r1]
	add r0, r5, r2
	lsl r3, r1, #2
	ldr r1, [r0, r3]
	sub r2, #0x30
	add r1, r1, #1
	str r1, [r0, r3]
	add r0, r5, #0
	ldr r1, [r5, r2]
	add r0, #0x3a
	bl sub_02084830
	ldr r0, _02082E18 ; =0x0000069D
	bl PlaySE
	mov r0, #1
	str r0, [r5, #0x30]
_02082D74:
	mov r2, #0x49
	lsl r2, r2, #4
	add r1, r2, #0
	sub r1, #0x30
	ldr r1, [r5, r1]
	add r0, r5, r2
	lsl r3, r1, #2
	ldr r1, [r0, r3]
	sub r2, #0x30
	add r1, r1, #1
	str r1, [r0, r3]
	add r0, r5, #0
	ldr r1, [r5, r2]
	add r0, #0x3a
	bl sub_02084830
	ldr r0, _02082E18 ; =0x0000069D
	bl PlaySE
	b _02082E0A
_02082D9C:
	mov r2, #1
	add r1, r0, #0
	tst r1, r2
	beq _02082DC2
	ldr r3, [r5, #0x20]
	mov r1, #0x1a
	mul r1, r3
	add r3, r5, r1
	ldr r1, [r5, #0x1c]
	add r0, r5, #0
	lsl r1, r1, #1
	add r1, r3, r1
	ldrh r1, [r1, #0x3a]
	bl sub_02084884
	add r4, r0, #0
	mov r0, #1
	str r0, [r5, #0x30]
	b _02082E0A
_02082DC2:
	ldr r1, _02082E1C ; =0x000005C8
	ldr r1, [r5, r1]
	cmp r1, #1
	bne _02082DE6
	ldr r2, [r5, #0x20]
	mov r1, #0x1a
	mul r1, r2
	add r2, r5, r1
	ldr r1, [r5, #0x1c]
	add r0, r5, #0
	lsl r1, r1, #1
	add r1, r2, r1
	ldrh r1, [r1, #0x3a]
	mov r2, #0
	bl sub_02084884
	add r4, r0, #0
	b _02082E0A
_02082DE6:
	mov r1, #2
	add r3, r0, #0
	tst r3, r1
	beq _02082DFA
	ldr r1, _02082E20 ; =0x0000E007
	add r0, r5, #0
	bl sub_02084884
	add r4, r0, #0
	b _02082E0A
_02082DFA:
	add r1, #0xfe
	tst r0, r1
	beq _02082E0A
	ldr r1, _02082E24 ; =0x0000E006
	add r0, r5, #0
	bl sub_02084884
	add r4, r0, #0
_02082E0A:
	add r0, r4, #0
	pop {r3, r4, r5, pc}
	nop
_02082E10: .word gMain
_02082E14: .word 0x0000045C
_02082E18: .word 0x0000069D
_02082E1C: .word 0x000005C8
_02082E20: .word 0x0000E007
_02082E24: .word 0x0000E006
	thumb_func_end sub_02082CF8

	thumb_func_start sub_02082E28
sub_02082E28: ; 0x02082E28
	push {r4, r5, r6, lr}
	add r5, r0, #0
	ldr r0, [r5]
	add r4, r1, #0
	cmp r0, #0
	bne _02082E8A
	ldr r0, [r5, #4]
	cmp r0, #0
	bne _02082E52
	bl LCRandom
	mov r1, #0x12
	bl _s32_div_f
	mov r0, #0x17
	lsl r0, r0, #4
	ldr r0, [r5, r0]
#ifndef HEARTGOLD
	add r1, #0x2A
#endif
	bl NewString_ReadMsgData
	add r6, r0, #0
	b _02082E6E
_02082E52:
	cmp r0, #1
	bne _02082E6E
	bl LCRandom
	mov r1, #0x12
	bl _s32_div_f
	mov r0, #0x17
	lsl r0, r0, #4
	ldr r0, [r5, r0]
#ifdef HEARTGOLD
	add r1, #0x12
#else
	add r1, #0x3C
#endif
	bl NewString_ReadMsgData
	add r6, r0, #0
_02082E6E:
	ldr r0, [r4, #0x18]
	add r1, r6, #0
	bl StringCopy
	add r0, r6, #0
	bl String_dtor
	ldr r0, [r4, #0x18]
	add r4, #0x1c
	add r1, r4, #0
	mov r2, #0xa
	bl CopyStringToU16Array
	pop {r4, r5, r6, pc}
_02082E8A:
	cmp r0, #3
	bne _02082EB8
	mov r0, #0x17
	lsl r0, r0, #4
	ldr r0, [r5, r0]
#ifdef HEARTGOLD
	mov r1, #0x54
#else
	mov r1, #0x55
#endif
	bl NewString_ReadMsgData
	add r5, r0, #0
	ldr r0, [r4, #0x18]
	add r1, r5, #0
	bl StringCopy
	add r0, r5, #0
	bl String_dtor
	ldr r0, [r4, #0x18]
	add r4, #0x1c
	add r1, r4, #0
	mov r2, #0xa
	bl CopyStringToU16Array
	pop {r4, r5, r6, pc}
_02082EB8:
	mov r0, #1
	str r0, [r4, #0x14]
	pop {r4, r5, r6, pc}
	.balign 4, 0
	thumb_func_end sub_02082E28

	thumb_func_start sub_02082EC0
sub_02082EC0: ; 0x02082EC0
	push {r4, r5}
	ldr r1, _02082EE0 ; =0x000001DE
	ldr r2, _02082EE4 ; =0x0000FFFF
	mov r5, #1
	mov r3, #0
_02082ECA:
	ldrh r4, [r0]
	cmp r4, r2
	beq _02082EDA
	cmp r4, r1
	beq _02082ED6
	add r5, r3, #0
_02082ED6:
	add r0, r0, #2
	b _02082ECA
_02082EDA:
	add r0, r5, #0
	pop {r4, r5}
	bx lr
	.balign 4, 0
_02082EE0: .word 0x000001DE
_02082EE4: .word 0x0000FFFF
	thumb_func_end sub_02082EC0

	thumb_func_start sub_02082EE8
sub_02082EE8: ; 0x02082EE8
	push {r4, r5, r6, r7, lr}
	sub sp, #0x14
	str r0, [sp, #0x10]
	bl OverlayManager_GetData
	add r4, r0, #0
	ldr r0, [sp, #0x10]
	bl OverlayManager_GetField18
	add r5, r0, #0
	mov r0, #0x56
	lsl r0, r0, #2
	ldrh r0, [r4, r0]
	ldr r1, _020830C0 ; =0x0000FFFF
	lsl r0, r0, #1
	add r0, r4, r0
	add r0, #0xd8
	strh r1, [r0]
	ldr r0, [r4]
	cmp r0, #1
	bne _02082F32
	mov r0, #0x12
	bl AllocMonZeroed
	mov r3, #0xa
	str r3, [sp]
	str r3, [sp, #4]
	str r3, [sp, #8]
	str r3, [sp, #0xc]
	ldr r1, [r4, #4]
	add r6, r0, #0
	mov r2, #5
	bl sub_0206DE38
	add r0, r6, #0
	bl FreeToHeap
_02082F32:
	mov r1, #0x56
	lsl r1, r1, #2
	ldrh r0, [r4, r1]
	cmp r0, #0
	beq _02082F58
	add r0, r4, #0
	sub r1, #0x40
	add r0, #0xd8
	add r1, r4, r1
	bl StringNotEqual
	cmp r0, #0
	beq _02082F58
	add r0, r4, #0
	add r0, #0xd8
	bl sub_02082EC0
	cmp r0, #0
	beq _02082F62
_02082F58:
	add r0, r4, #0
	add r1, r5, #0
	bl sub_02082E28
	b _02082F86
_02082F62:
	mov r0, #0x46
	lsl r0, r0, #2
	add r1, r4, #0
	add r0, r4, r0
	add r1, #0xd8
	bl CopyU16StringArray
	add r0, r5, #0
	add r1, r4, #0
	add r0, #0x1c
	add r1, #0xd8
	bl CopyU16StringArray
	add r1, r4, #0
	ldr r0, [r5, #0x18]
	add r1, #0xd8
	bl CopyU16ArrayToString
_02082F86:
	mov r0, #0x61
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	bl String_dtor
	mov r7, #0xe7
	mov r6, #0
	add r5, r4, #0
	lsl r7, r7, #2
_02082F98:
	ldr r0, [r5, r7]
	bl sub_02007234
	add r6, r6, #1
	add r5, r5, #4
	cmp r6, #7
	blt _02082F98
	mov r0, #0xb1
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	bl sub_0200AEB0
	mov r0, #0xb5
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	bl sub_0200AEB0
	mov r0, #0xb2
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	bl sub_0200B0A8
	mov r0, #0xb6
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	bl sub_0200B0A8
	mov r7, #0xad
	mov r6, #0
	add r5, r4, #0
	lsl r7, r7, #2
_02082FD6:
	ldr r0, [r5, r7]
	bl sub_0200A0D0
	add r6, r6, #1
	add r5, r5, #4
	cmp r6, #4
	blt _02082FD6
	mov r0, #0x62
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	bl sub_02024504
	bl sub_0200B244
	ldr r1, _020830C4 ; =0x000004AC
	mov r0, #0x12
	ldr r1, [r4, r1]
	bl FreeToHeapExplicit
	ldr r0, [r4]
	cmp r0, #1
	bne _02083016
	ldr r1, _020830C8 ; =0x000004B4
	mov r0, #0x12
	ldr r1, [r4, r1]
	bl FreeToHeapExplicit
	ldr r1, _020830CC ; =0x000004BC
	mov r0, #0x12
	ldr r1, [r4, r1]
	bl FreeToHeapExplicit
_02083016:
	mov r0, #0x16
	lsl r0, r0, #4
	ldr r0, [r4, r0]
	mov r1, #7
	bl sub_0201BB4C
	bl sub_0202168C
	bl sub_02022608
	mov r0, #0x16
	lsl r0, r0, #4
	mov r1, #0xee
	lsl r1, r1, #2
	ldr r0, [r4, r0]
	add r1, r4, r1
	bl sub_02083614
	mov r0, #0
	bl sub_02002D7C
	mov r2, #1
	lsl r2, r2, #0x1a
	ldr r1, [r2]
	ldr r0, _020830D0 ; =0xFFFF1FFF
	and r0, r1
	str r0, [r2]
	mov r0, #2
	bl sub_02002DB4
	mov r0, #6
	lsl r0, r0, #6
	ldr r0, [r4, r0]
	cmp r0, #0
	beq _02083060
	bl String_dtor
_02083060:
	mov r0, #0x5e
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	bl String_dtor
	mov r0, #0x5f
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	bl String_dtor
	mov r0, #0x5d
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	bl DestroyMsgData
	mov r0, #0x17
	lsl r0, r0, #4
	ldr r0, [r4, r0]
	bl DestroyMsgData
	mov r0, #0x5b
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	bl DestroyMsgData
	mov r0, #0x5a
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	bl ScrStrBufs_delete
	ldr r0, [sp, #0x10]
	bl OverlayManager_FreeData
	mov r0, #0
	add r1, r0, #0
	bl sub_0201A0FC
	mov r0, #0x12
	bl DestroyHeap
	ldr r0, _020830D4 ; =gMain + 0x60
	mov r1, #0
	strb r1, [r0, #9]
	bl sub_02022D3C
	mov r0, #1
	add sp, #0x14
	pop {r4, r5, r6, r7, pc}
	.balign 4, 0
_020830C0: .word 0x0000FFFF
_020830C4: .word 0x000004AC
_020830C8: .word 0x000004B4
_020830CC: .word 0x000004BC
_020830D0: .word 0xFFFF1FFF
_020830D4: .word gMain + 0x60
	thumb_func_end sub_02082EE8

	thumb_func_start sub_020830D8
sub_020830D8: ; 0x020830D8
	push {r3, r4, r5, r6, r7, lr}
	add r5, r1, #0
	mov r1, #0x54
	str r0, [sp]
	add r6, r2, #0
	add r7, r3, #0
	bl AllocFromHeap
	add r4, r0, #0
	str r5, [r4]
	str r6, [r4, #4]
	str r7, [r4, #0xc]
	mov r0, #0
	str r0, [r4, #0x14]
	ldr r0, _02083118 ; =0x0000FFFF
	ldr r1, [sp]
	strh r0, [r4, #0x1c]
	mov r0, #0x20
	bl String_ctor
	str r0, [r4, #0x18]
	mov r1, #0
	str r1, [r4, #0x44]
	str r1, [r4, #0x48]
	ldr r0, [sp, #0x18]
	str r1, [r4, #0x10]
	str r0, [r4, #0x4c]
	ldr r0, [sp, #0x1c]
	str r1, [r4, #8]
	str r0, [r4, #0x50]
	add r0, r4, #0
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_02083118: .word 0x0000FFFF
	thumb_func_end sub_020830D8

	thumb_func_start sub_0208311C
sub_0208311C: ; 0x0208311C
	push {r4, lr}
	add r4, r0, #0
	ldr r0, [r4, #0x18]
	cmp r0, #0
	bne _0208312A
	bl GF_AssertFail
_0208312A:
	cmp r4, #0
	bne _02083132
	bl GF_AssertFail
_02083132:
	ldr r0, [r4, #0x18]
	bl String_dtor
	add r0, r4, #0
	bl FreeToHeap
	pop {r4, pc}
	thumb_func_end sub_0208311C

	thumb_func_start sub_02083140
sub_02083140: ; 0x02083140
	push {r3, lr}
	bl sub_0202061C
	bl sub_0200B224
	ldr r3, _02083158 ; =OSi_IntrTable
	ldr r1, _0208315C ; =0x00003FF8
	mov r0, #1
	ldr r2, [r3, r1]
	orr r0, r2
	str r0, [r3, r1]
	pop {r3, pc}
	.balign 4, 0
_02083158: .word OSi_IntrTable
_0208315C: .word 0x00003FF8
	thumb_func_end sub_02083140

	thumb_func_start sub_02083160
sub_02083160: ; 0x02083160
	ldr r2, [r1]
	str r2, [r0]
	ldr r2, [r1, #4]
	str r2, [r0, #4]
	ldr r2, [r1, #8]
	str r2, [r0, #8]
	ldr r2, [r1, #0xc]
	str r2, [r0, #0xc]
	ldr r2, [r1, #0x10]
	str r2, [r0, #0x10]
	ldr r2, [r1, #0x4c]
	str r2, [r0, #0x18]
	ldr r2, [r1, #0x50]
	mov r1, #0x5d
	lsl r1, r1, #4
	str r2, [r0, r1]
	bx lr
	.balign 4, 0
	thumb_func_end sub_02083160

	thumb_func_start sub_02083184
sub_02083184: ; 0x02083184
	push {r4, lr}
	sub sp, #0x28
	ldr r4, _020831A0 ; =0x02102140
	add r3, sp, #0
	mov r2, #5
_0208318E:
	ldmia r4!, {r0, r1}
	stmia r3!, {r0, r1}
	sub r2, r2, #1
	bne _0208318E
	add r0, sp, #0
	bl GX_SetBanks
	add sp, #0x28
	pop {r4, pc}
	.balign 4, 0
_020831A0: .word 0x02102140
	thumb_func_end sub_02083184

	thumb_func_start sub_020831A4
sub_020831A4: ; 0x020831A4
	push {r3, r4, r5, lr}
	sub sp, #0x80
	ldr r5, _020832C8 ; =0x02101D60
	add r3, sp, #0x70
	add r4, r0, #0
	add r2, r3, #0
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	add r0, r2, #0
	bl sub_0201ACB0
	ldr r5, _020832CC ; =0x02101ED4
	add r3, sp, #0x54
	ldmia r5!, {r0, r1}
	add r2, r3, #0
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldr r0, [r5]
	mov r1, #0
	str r0, [r3]
	add r0, r4, #0
	add r3, r1, #0
	bl sub_0201B1E4
	add r0, r4, #0
	mov r1, #0
	bl sub_0201CAE0
	ldr r5, _020832D0 ; =0x02101FB4
	add r3, sp, #0x38
	ldmia r5!, {r0, r1}
	add r2, r3, #0
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldr r0, [r5]
	mov r1, #1
	str r0, [r3]
	add r0, r4, #0
	mov r3, #0
	bl sub_0201B1E4
	add r0, r4, #0
	mov r1, #1
	bl sub_0201CAE0
	ldr r5, _020832D4 ; =0x02102078
	add r3, sp, #0x1c
	ldmia r5!, {r0, r1}
	add r2, r3, #0
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldr r0, [r5]
	mov r1, #2
	str r0, [r3]
	add r0, r4, #0
	mov r3, #0
	bl sub_0201B1E4
	add r0, r4, #0
	mov r1, #2
	bl sub_0201CAE0
	ldr r5, _020832D8 ; =0x02101E10
	add r3, sp, #0
	ldmia r5!, {r0, r1}
	add r2, r3, #0
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldr r0, [r5]
	mov r1, #4
	str r0, [r3]
	add r0, r4, #0
	mov r3, #0
	bl sub_0201B1E4
	add r0, r4, #0
	mov r1, #4
	bl sub_0201CAE0
	mov r0, #0
	bl sub_020832E4
	mov r0, #0
	mov r1, #0x20
	add r2, r0, #0
	mov r3, #0x12
	bl sub_0201C1C4
	mov r0, #4
	mov r1, #0x20
	mov r2, #0
	mov r3, #0x12
	bl sub_0201C1C4
	mov r0, #1
	lsl r0, r0, #0x1a
	add r4, r0, #0
	ldr r2, [r0]
	ldr r1, _020832DC ; =0xFFFF1FFF
	add r4, #0x48
	and r2, r1
	lsr r1, r0, #0xd
	orr r1, r2
	str r1, [r0]
	ldrh r3, [r4]
	mov r2, #0x3f
	mov r1, #0x14
	bic r3, r2
	orr r1, r3
	mov r3, #0x20
	orr r1, r3
	strh r1, [r4]
	add r4, r0, #0
	add r4, #0x4a
	ldrh r5, [r4]
	mov r1, #0x1f
	bic r5, r2
	orr r1, r5
	orr r1, r3
	strh r1, [r4]
	add r1, r0, #0
	mov r2, #0xff
	add r1, #0x40
	strh r2, [r1]
	mov r1, #0x40
	add r0, #0x44
	strh r1, [r0]
	ldr r0, _020832E0 ; =0x04001050
	mov r1, #0
	strh r1, [r0]
	add sp, #0x80
	pop {r3, r4, r5, pc}
	.balign 4, 0
_020832C8: .word 0x02101D60
_020832CC: .word 0x02101ED4
_020832D0: .word 0x02101FB4
_020832D4: .word 0x02102078
_020832D8: .word 0x02101E10
_020832DC: .word 0xFFFF1FFF
_020832E0: .word 0x04001050
	thumb_func_end sub_020831A4

	thumb_func_start sub_020832E4
sub_020832E4: ; 0x020832E4
	push {r4, lr}
	add r4, r0, #0
	lsl r1, r4, #0x18
	mov r0, #1
	lsr r1, r1, #0x18
	bl GX_EngineAToggleLayers
	lsl r1, r4, #0x18
	mov r0, #2
	lsr r1, r1, #0x18
	bl GX_EngineAToggleLayers
	lsl r1, r4, #0x18
	mov r0, #4
	lsr r1, r1, #0x18
	bl GX_EngineAToggleLayers
	mov r0, #8
	mov r1, #0
	bl GX_EngineAToggleLayers
	lsl r1, r4, #0x18
	mov r0, #0x10
	lsr r1, r1, #0x18
	bl GX_EngineAToggleLayers
	lsl r1, r4, #0x18
	mov r0, #1
	lsr r1, r1, #0x18
	bl sub_02022CC8
	mov r0, #2
	mov r1, #0
	bl sub_02022CC8
	mov r0, #0x10
	mov r1, #0
	bl sub_02022CC8
	pop {r4, pc}
	thumb_func_end sub_020832E4

	thumb_func_start sub_02083334
sub_02083334: ; 0x02083334
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x10
	add r4, r0, #0
	add r0, r1, #0
	bl OverlayManager_GetField18
	add r7, r0, #0
	ldr r0, _020834E4 ; =0x0000045C
	mov r1, #4
	str r1, [r4, r0]
	add r0, #0xc
	add r0, r4, r0
	mov r1, #0
	bl sub_0208423C
	ldr r6, _020834E8 ; =0x00000464
	mov r0, #0x16
	ldr r3, [r4, r6]
	mov r5, #0xc
	lsl r0, r0, #4
	lsl r1, r3, #0x18
	mul r5, r3
	add r3, r4, r5
	add r5, r6, #4
	ldr r0, [r4, r0]
	ldr r3, [r3, r5]
	lsr r1, r1, #0x18
	mov r2, #0
	bl sub_0201BC8C
	ldr r3, [r4, r6]
	mov r5, #0xc
	mov r0, #0x16
	lsl r0, r0, #4
	lsl r1, r3, #0x18
	mul r5, r3
	add r3, r4, r5
	add r6, #8
	ldr r0, [r4, r0]
	ldr r3, [r3, r6]
	lsr r1, r1, #0x18
	mov r2, #3
	bl sub_0201BC8C
	ldr r6, _020834E8 ; =0x00000464
	mov r0, #1
	ldr r1, [r4, r6]
	mov r5, #0xc
	add r3, r1, #0
	eor r3, r0
	mov r0, #0x16
	lsl r0, r0, #4
	lsl r1, r3, #0x18
	mul r5, r3
	add r3, r4, r5
	add r5, r6, #4
	ldr r0, [r4, r0]
	ldr r3, [r3, r5]
	lsr r1, r1, #0x18
	mov r2, #0
	bl sub_0201BC8C
	ldr r1, [r4, r6]
	mov r0, #1
	add r3, r1, #0
	eor r3, r0
	mov r5, #0xc
	mov r0, #0x16
	lsl r0, r0, #4
	lsl r1, r3, #0x18
	mul r5, r3
	add r3, r4, r5
	add r6, #8
	ldr r0, [r4, r0]
	ldr r3, [r3, r6]
	lsr r1, r1, #0x18
	mov r2, #3
	bl sub_0201BC8C
	mov r1, #0x46
	ldr r0, _020834EC ; =0x0000FFFF
	lsl r1, r1, #2
	strh r0, [r4, r1]
	ldr r0, [r7, #0x18]
	cmp r0, #0
	beq _020833E8
	add r1, r4, r1
	mov r2, #0x20
	bl CopyStringToU16Array
_020833E8:
	add r1, r4, #0
	mov r0, #1
	add r1, #0xd8
	mov r2, #0x40
	bl sub_020D4790
	ldr r0, [r4]
	cmp r0, #1
	bne _0208342E
	mov r0, #0x12
	bl AllocMonZeroed
	mov r3, #0xa
	str r3, [sp]
	str r3, [sp, #4]
	str r3, [sp, #8]
	str r3, [sp, #0xc]
	ldr r1, [r4, #4]
	add r5, r0, #0
	mov r2, #5
	bl sub_0206DE38
	add r0, r5, #0
	bl sub_02070DB0
	add r2, r0, #0
	mov r0, #0x5a
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0
	bl BufferBoxMonSpeciesName
	add r0, r5, #0
	bl FreeToHeap
_0208342E:
	ldr r0, [r7, #0x44]
	cmp r0, #0
	beq _02083438
	mov r0, #1
	str r0, [r4, #0x14]
_02083438:
	ldr r2, [r4]
	mov r1, #0x5a
	lsl r1, r1, #2
	lsl r3, r2, #2
	ldr r2, _020834F0 ; =0x021020B4
	ldr r0, [r4, r1]
	add r1, r1, #4
	ldr r2, [r2, r3]
	ldr r1, [r4, r1]
	mov r3, #0x12
	bl ReadMsgData_ExpandPlaceholders
	mov r1, #0x5e
	lsl r1, r1, #2
	str r0, [r4, r1]
	add r0, r1, #0
	sub r0, #0x10
	sub r1, #0xc
	ldr r0, [r4, r0]
	ldr r1, [r4, r1]
	mov r2, #9
	mov r3, #0x12
	bl ReadMsgData_ExpandPlaceholders
	mov r1, #0x5f
	lsl r1, r1, #2
	str r0, [r4, r1]
	sub r1, #0x10
	ldr r0, [r4, r1]
	mov r1, #7
	bl NewString_ReadMsgData
	mov r1, #0x61
	lsl r1, r1, #2
	str r0, [r4, r1]
	sub r1, #0x6c
	add r0, r4, r1
	bl StringLength
	mov r1, #0x56
	lsl r1, r1, #2
	strh r0, [r4, r1]
	mov r0, #0
	mov r2, #1
	str r0, [r4, #0x1c]
	str r2, [r4, #0x20]
	sub r1, r2, #2
	str r1, [r4, #0x24]
	str r1, [r4, #0x28]
	str r2, [r4, #0x30]
	ldr r2, _020834F4 ; =0x00000484
	str r0, [r4, #0x34]
	str r1, [r4, r2]
	add r1, r2, #4
	str r0, [r4, r1]
	add r2, #8
	str r0, [r4, r2]
	ldr r1, [r4, #0xc]
	ldr r2, _020834EC ; =0x0000FFFF
	lsl r1, r1, #1
	add r1, r4, r1
	add r1, #0xd8
	strh r2, [r1]
	mov r1, #0x49
	add r3, r4, #0
	add r2, r0, #0
	lsl r1, r1, #4
_020834BE:
	add r0, r0, #1
	str r2, [r3, r1]
	add r3, r3, #4
	cmp r0, #7
	blt _020834BE
	ldr r0, [r4]
	cmp r0, #4
	bne _020834D8
	ldr r0, _020834F8 ; =0x0000049C
	mov r1, #1
	add sp, #0x10
	str r1, [r4, r0]
	pop {r3, r4, r5, r6, r7, pc}
_020834D8:
	mov r0, #0x49
	mov r1, #1
	lsl r0, r0, #4
	str r1, [r4, r0]
	add sp, #0x10
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_020834E4: .word 0x0000045C
_020834E8: .word 0x00000464
_020834EC: .word 0x0000FFFF
_020834F0: .word 0x021020B4
_020834F4: .word 0x00000484
_020834F8: .word 0x0000049C
	thumb_func_end sub_02083334

	thumb_func_start sub_020834FC
sub_020834FC: ; 0x020834FC
	push {r4, r5, r6, r7, lr}
	sub sp, #0x14
	add r5, r0, #0
	add r0, r1, #0
	bl OverlayManager_GetField18
	add r4, r0, #0
	ldr r0, [r4, #0x44]
	cmp r0, #0
	beq _0208360C
	mov r0, #0xc8
	mov r1, #0x12
	bl String_ctor
	add r7, r0, #0
	mov r0, #6
	mov r1, #0
	lsl r0, r0, #6
	str r1, [r5, r0]
	ldr r0, [r4, #0x48]
	bl sub_02073D4C
	add r6, r0, #0
	ldr r0, [r4, #0x48]
	bl sub_02073D54
	str r0, [sp, #0x10]
	mov r0, #0x5a
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	ldr r2, [r4, #0x48]
	mov r1, #1
	add r3, r6, #0
	bl sub_0200C490
	ldr r0, [sp, #0x10]
	cmp r6, r0
	beq _02083560
	mov r0, #0x5a
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	ldr r2, [r4, #0x48]
	ldr r3, [sp, #0x10]
	mov r1, #2
	bl sub_0200C490
	ldr r0, [r4, #0x44]
	add r0, r0, #2
	str r0, [r4, #0x44]
	b _02083570
_02083560:
	mov r0, #0x5a
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	ldr r2, [r4, #0x48]
	mov r1, #2
	add r3, r6, #0
	bl sub_0200C490
_02083570:
	mov r0, #0x56
	lsl r0, r0, #2
	ldrh r0, [r5, r0]
	cmp r0, #0
	beq _02083586
	add r0, r5, #0
	add r0, #0xd8
	bl sub_02082EC0
	cmp r0, #0
	beq _020835BC
_02083586:
	mov r0, #0x12
	bl AllocMonZeroed
	mov r3, #0
	str r3, [sp]
	str r3, [sp, #4]
	str r3, [sp, #8]
	str r3, [sp, #0xc]
	ldr r1, [r5, #4]
	add r6, r0, #0
	mov r2, #1
	bl sub_0206DE38
	add r0, r6, #0
	bl sub_02070DB0
	add r2, r0, #0
	mov r0, #0x5a
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	mov r1, #0
	bl BufferBoxMonSpeciesName
	add r0, r6, #0
	bl FreeToHeap
	b _020835EA
_020835BC:
	mov r1, #0x56
	lsl r1, r1, #2
	ldrh r1, [r5, r1]
	ldr r0, _02083610 ; =0x0000FFFF
	lsl r1, r1, #1
	add r1, r5, r1
	add r1, #0xd8
	strh r0, [r1]
	add r1, r5, #0
	add r0, r7, #0
	add r1, #0xd8
	bl CopyU16ArrayToString
	mov r1, #0
	str r1, [sp]
	mov r0, #0x5a
	str r1, [sp, #4]
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	add r2, r7, #0
	add r3, r1, #0
	bl BufferString
_020835EA:
	mov r1, #0x5a
	lsl r1, r1, #2
	ldr r0, [r5, r1]
	add r1, #0xc
	ldr r1, [r5, r1]
	ldr r2, [r4, #0x44]
	mov r3, #0x12
	bl ReadMsgData_ExpandPlaceholders
	mov r1, #6
	lsl r1, r1, #6
	str r0, [r5, r1]
	mov r0, #1
	str r0, [r5, #0x14]
	add r0, r7, #0
	bl String_dtor
_0208360C:
	add sp, #0x14
	pop {r4, r5, r6, r7, pc}
	.balign 4, 0
_02083610: .word 0x0000FFFF
	thumb_func_end sub_020834FC

	thumb_func_start sub_02083614
sub_02083614: ; 0x02083614
	push {r4, r5, r6, lr}
	add r6, r0, #0
	add r5, r1, #0
	mov r4, #0
_0208361C:
	add r0, r5, #0
	bl RemoveWindow
	add r4, r4, #1
	add r5, #0x10
	cmp r4, #0xa
	blt _0208361C
	add r0, r6, #0
	mov r1, #4
	bl sub_0201BB4C
	add r0, r6, #0
	mov r1, #2
	bl sub_0201BB4C
	add r0, r6, #0
	mov r1, #1
	bl sub_0201BB4C
	add r0, r6, #0
	mov r1, #0
	bl sub_0201BB4C
	mov r0, #0x12
	add r1, r6, #0
	bl FreeToHeapExplicit
	pop {r4, r5, r6, pc}
	thumb_func_end sub_02083614

	thumb_func_start sub_02083654
sub_02083654: ; 0x02083654
	push {r4, r5, r6, lr}
	sub sp, #0x10
	add r5, r0, #0
	mov r0, #0x16
	lsl r0, r0, #4
	ldr r6, [r5, r0]
	mov r0, #0x60
	add r4, r1, #0
	mov r1, #0
	str r0, [sp]
	mov r0, #0x12
	str r0, [sp, #4]
	add r0, r4, #0
	add r2, r1, #0
	add r3, r1, #0
	bl sub_02007B8C
	mov r0, #0x20
	str r0, [sp]
	mov r0, #0x12
	str r0, [sp, #4]
	mov r0, #0xe
	mov r1, #0x47
	mov r2, #4
	mov r3, #0
	bl GfGfxLoader_GXLoadPal
	mov r0, #4
	mov r1, #0
	bl sub_0201C2D8
	mov r0, #0
	str r0, [sp]
	mov r0, #2
	lsl r0, r0, #0xc
	str r0, [sp, #4]
	mov r0, #1
	str r0, [sp, #8]
	mov r0, #0x12
	mov r1, #2
	str r0, [sp, #0xc]
	add r0, r4, #0
	add r2, r6, #0
	add r3, r1, #0
	bl sub_02007B44
	mov r0, #0
	str r0, [sp]
	mov r0, #6
	lsl r0, r0, #8
	str r0, [sp, #4]
	mov r0, #1
	str r0, [sp, #8]
	mov r0, #0x12
	str r0, [sp, #0xc]
	add r0, r4, #0
	mov r1, #4
	add r2, r6, #0
	mov r3, #2
	bl sub_02007B68
	mov r0, #0
	str r0, [sp]
	mov r0, #2
	lsl r0, r0, #0xc
	str r0, [sp, #4]
	mov r3, #1
	str r3, [sp, #8]
	mov r0, #0x12
	str r0, [sp, #0xc]
	add r0, r4, #0
	mov r1, #2
	add r2, r6, #0
	bl sub_02007B44
	mov r0, #0
	str r0, [sp]
	mov r0, #0xe
	lsl r0, r0, #6
	str r0, [sp, #4]
	mov r3, #1
	str r3, [sp, #8]
	mov r0, #0x12
	str r0, [sp, #0xc]
	add r0, r4, #0
	mov r1, #6
	add r2, r6, #0
	bl sub_02007B68
	mov r3, #0
	mov r0, #0xe
	str r3, [sp]
	lsl r0, r0, #6
	str r0, [sp, #4]
	mov r0, #1
	str r0, [sp, #8]
	mov r0, #0x12
	str r0, [sp, #0xc]
	add r0, r4, #0
	mov r1, #7
	add r2, r6, #0
	bl sub_02007B68
	mov r1, #6
	mov r0, #0
	lsl r1, r1, #6
	mov r2, #0x12
	bl sub_0200304C
	ldr r0, [r5, #0x18]
	bl sub_0202ADCC
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	str r0, [sp]
	mov r0, #0x12
	str r0, [sp, #4]
	mov r0, #0x16
	lsl r0, r0, #4
	mov r1, #4
	add r2, r1, #0
	ldr r0, [r5, r0]
	add r2, #0xfc
	mov r3, #0xa
	bl sub_0200E644
	mov r1, #6
	mov r0, #4
	lsl r1, r1, #6
	mov r2, #0x12
	bl sub_0200304C
	mov r3, #0x4b
	mov r0, #0x12
	lsl r3, r3, #4
	str r0, [sp]
	add r0, r4, #0
	mov r1, #0x10
	mov r2, #1
	add r3, r5, r3
	bl sub_02007C10
	ldr r1, _02083778 ; =0x000004AC
	str r0, [r5, r1]
	add sp, #0x10
	pop {r4, r5, r6, pc}
	.balign 4, 0
_02083778: .word 0x000004AC
	thumb_func_end sub_02083654

	thumb_func_start sub_0208377C
sub_0208377C: ; 0x0208377C
	push {r4, lr}
	sub sp, #0x10
	ldr r4, _020837A8 ; =0x02101D70
	add r3, sp, #0
	add r2, r3, #0
	ldmia r4!, {r0, r1}
	stmia r3!, {r0, r1}
	ldmia r4!, {r0, r1}
	stmia r3!, {r0, r1}
	add r0, r2, #0
	bl sub_020215A0
	mov r0, #0x14
	mov r1, #0x12
	bl sub_02022588
	bl sub_020216C8
	bl sub_02022638
	add sp, #0x10
	pop {r4, pc}
	.balign 4, 0
_020837A8: .word 0x02101D70
	thumb_func_end sub_0208377C

	thumb_func_start sub_020837AC
sub_020837AC: ; 0x020837AC
	push {r4, r5, r6, r7, lr}
	sub sp, #0x14
	add r5, r0, #0
	add r7, r1, #0
	bl sub_020B78D4
	mov r2, #1
	lsl r2, r2, #0x1a
	ldr r1, [r2]
	ldr r0, _020839A4 ; =0xFFCFFFEF
	add r3, r1, #0
	and r3, r0
	mov r1, #0x10
	orr r3, r1
	str r3, [r2]
	ldr r3, _020839A8 ; =0x04001000
	ldr r2, [r3]
	and r0, r2
	orr r0, r1
	str r0, [r3]
	mov r0, #0
	str r0, [sp]
	mov r1, #0x80
	str r1, [sp, #4]
	str r0, [sp, #8]
	mov r3, #0x20
	str r3, [sp, #0xc]
	mov r2, #0x12
	str r2, [sp, #0x10]
	add r2, r0, #0
	bl sub_0200B150
	mov r1, #0x63
	lsl r1, r1, #2
	mov r0, #0x2c
	add r1, r5, r1
	mov r2, #0x12
	bl sub_02009F40
	mov r1, #0x62
	lsl r1, r1, #2
	str r0, [r5, r1]
	add r0, r1, #4
	mov r2, #1
	add r0, r5, r0
	mov r1, #0
	lsl r2, r2, #0x14
	bl sub_02009FC8
	mov r6, #0
	add r4, r5, #0
_02083812:
	mov r0, #2
	add r1, r6, #0
	mov r2, #0x12
	bl sub_0200A090
	mov r1, #0xad
	lsl r1, r1, #2
	str r0, [r4, r1]
	add r6, r6, #1
	add r4, r4, #4
	cmp r6, #4
	blt _02083812
	mov r0, #0
	str r0, [sp]
	mov r3, #1
	str r3, [sp, #4]
	mov r0, #0x12
	str r0, [sp, #8]
	add r0, r1, #0
	ldr r0, [r5, r0]
	add r1, r7, #0
	mov r2, #0xa
	bl sub_0200A3C8
	mov r1, #0xb1
	lsl r1, r1, #2
	str r0, [r5, r1]
	mov r3, #0
	str r3, [sp]
	mov r2, #1
	str r2, [sp, #4]
	mov r0, #9
	str r0, [sp, #8]
	mov r0, #0x12
	sub r1, #0xc
	str r0, [sp, #0xc]
	ldr r0, [r5, r1]
	add r1, r7, #0
	bl sub_0200A480
	mov r1, #0xb2
	lsl r1, r1, #2
	str r0, [r5, r1]
	mov r0, #0
	str r0, [sp]
	mov r0, #2
	str r0, [sp, #4]
	mov r0, #0x12
	sub r1, #0xc
	str r0, [sp, #8]
	ldr r0, [r5, r1]
	add r1, r7, #0
	mov r2, #0xc
	mov r3, #1
	bl sub_0200A540
	mov r1, #0xb3
	lsl r1, r1, #2
	str r0, [r5, r1]
	mov r0, #0
	str r0, [sp]
	mov r0, #3
	str r0, [sp, #4]
	mov r0, #0x12
	sub r1, #0xc
	str r0, [sp, #8]
	ldr r0, [r5, r1]
	add r1, r7, #0
	mov r2, #0xe
	mov r3, #1
	bl sub_0200A540
	mov r1, #0x2d
	lsl r1, r1, #4
	str r0, [r5, r1]
	ldr r0, [r5]
	cmp r0, #1
	bne _020838FC
	ldr r0, [r5, #4]
	ldr r2, [r5, #8]
	mov r1, #0
	bl sub_020741BC
	ldr r3, _020839AC ; =0x000004B8
	add r1, r0, #0
	mov r0, #0x12
	str r0, [sp]
	mov r0, #0x14
	mov r2, #0
	add r3, r5, r3
	bl GfGfxLoader_GetCharData
	ldr r1, _020839B0 ; =0x000004B4
	str r0, [r5, r1]
	add r0, r1, #4
	mov r1, #2
	ldr r0, [r5, r0]
	lsl r1, r1, #8
	bl DC_FlushRange
	bl sub_02074490
	mov r2, #0x13
	lsl r2, r2, #6
	add r1, r0, #0
	mov r0, #0x14
	add r2, r5, r2
	mov r3, #0x12
	bl GfGfxLoader_GetPlttData
	ldr r1, _020839B4 ; =0x000004BC
	str r0, [r5, r1]
	add r0, r1, #4
	ldr r0, [r5, r0]
	mov r1, #0x80
	bl DC_FlushRange
_020838FC:
	mov r3, #1
	str r3, [sp]
	mov r0, #2
	str r0, [sp, #4]
	mov r0, #0x12
	str r0, [sp, #8]
	mov r0, #0xad
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	add r1, r7, #0
	mov r2, #0xb
	bl sub_0200A3C8
	mov r1, #0xb5
	lsl r1, r1, #2
	str r0, [r5, r1]
	mov r2, #1
	str r2, [sp]
	mov r0, #2
	str r0, [sp, #4]
	mov r0, #3
	str r0, [sp, #8]
	mov r0, #0x12
	sub r1, #0x1c
	str r0, [sp, #0xc]
	ldr r0, [r5, r1]
	add r1, r7, #0
	mov r3, #0
	bl sub_0200A480
	mov r1, #0xb6
	lsl r1, r1, #2
	str r0, [r5, r1]
	mov r3, #1
	str r3, [sp]
	mov r0, #2
	str r0, [sp, #4]
	mov r0, #0x12
	sub r1, #0x1c
	str r0, [sp, #8]
	ldr r0, [r5, r1]
	add r1, r7, #0
	mov r2, #0xd
	bl sub_0200A540
	mov r1, #0xb7
	lsl r1, r1, #2
	str r0, [r5, r1]
	mov r3, #1
	str r3, [sp]
	mov r0, #3
	str r0, [sp, #4]
	mov r0, #0x12
	sub r1, #0x1c
	str r0, [sp, #8]
	ldr r0, [r5, r1]
	add r1, r7, #0
	mov r2, #0xf
	bl sub_0200A540
	mov r1, #0x2e
	lsl r1, r1, #4
	str r0, [r5, r1]
	sub r1, #0x1c
	ldr r0, [r5, r1]
	bl sub_0200ACF0
	mov r0, #0xb5
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	bl sub_0200ACF0
	mov r0, #0xb2
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	bl sub_0200AF94
	mov r0, #0xb6
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	bl sub_0200AF94
	add sp, #0x14
	pop {r4, r5, r6, r7, pc}
	.balign 4, 0
_020839A4: .word 0xFFCFFFEF
_020839A8: .word 0x04001000
_020839AC: .word 0x000004B8
_020839B0: .word 0x000004B4
_020839B4: .word 0x000004BC
	thumb_func_end sub_020837AC

	thumb_func_start sub_020839B8
sub_020839B8: ; 0x020839B8
	push {r3, r4, lr}
	sub sp, #0xc
	add r4, r1, #0
	ldr r0, [r4]
	bl sub_020248AC
	ldr r1, [r0]
	ldr r0, [r4, #8]
	add r0, r1, r0
	str r0, [sp]
	ldr r0, [r4, #0xc]
	lsl r1, r0, #4
	ldr r0, _020839E8 ; =0x021021EC
	ldr r0, [r0, r1]
	add r1, sp, #0
	lsl r0, r0, #0xc
	str r0, [sp, #4]
	mov r0, #0
	str r0, [sp, #8]
	ldr r0, [r4, #4]
	bl sub_020247D4
	add sp, #0xc
	pop {r3, r4, pc}
	.balign 4, 0
_020839E8: .word 0x021021EC
	thumb_func_end sub_020839B8

	thumb_func_start sub_020839EC
sub_020839EC: ; 0x020839EC
	push {r4, r5, r6, r7, lr}
	sub sp, #0x5c
	mov r1, #0
	add r6, r0, #0
	str r1, [sp]
	sub r0, r1, #1
	str r0, [sp, #4]
	str r0, [sp, #8]
	mov r2, #0xad
	str r1, [sp, #0xc]
	mov r0, #1
	lsl r2, r2, #2
	str r0, [sp, #0x10]
	ldr r0, [r6, r2]
	add r3, r1, #0
	str r0, [sp, #0x14]
	add r0, r2, #4
	ldr r0, [r6, r0]
	str r0, [sp, #0x18]
	add r0, r2, #0
	add r0, #8
	ldr r0, [r6, r0]
	str r0, [sp, #0x1c]
	add r0, r2, #0
	add r0, #0xc
	ldr r0, [r6, r0]
	add r2, #0x30
	str r0, [sp, #0x20]
	str r1, [sp, #0x24]
	add r0, r6, r2
	add r2, r1, #0
	str r1, [sp, #0x28]
	bl sub_02009D48
	mov r1, #1
	mov r3, #0xad
	str r1, [sp]
	sub r0, r1, #2
	str r0, [sp, #4]
	str r0, [sp, #8]
	mov r0, #0
	str r0, [sp, #0xc]
	str r0, [sp, #0x10]
	lsl r3, r3, #2
	ldr r2, [r6, r3]
	str r2, [sp, #0x14]
	add r2, r3, #4
	ldr r2, [r6, r2]
	str r2, [sp, #0x18]
	add r2, r3, #0
	add r2, #8
	ldr r2, [r6, r2]
	str r2, [sp, #0x1c]
	add r2, r3, #0
	add r2, #0xc
	ldr r2, [r6, r2]
	add r3, #0x54
	str r2, [sp, #0x20]
	str r0, [sp, #0x24]
	str r0, [sp, #0x28]
	add r0, r6, r3
	add r2, r1, #0
	add r3, r1, #0
	bl sub_02009D48
	mov r0, #0x62
	lsl r0, r0, #2
	ldr r0, [r6, r0]
	mov r1, #2
	str r0, [sp, #0x2c]
	mov r0, #0xb9
	lsl r0, r0, #2
	add r0, r6, r0
	str r0, [sp, #0x30]
	mov r0, #6
	lsl r1, r1, #0x10
	lsl r0, r0, #0x10
	str r0, [sp, #0x38]
	lsr r0, r1, #5
	mov r7, #0
	str r1, [sp, #0x34]
	str r7, [sp, #0x3c]
	str r0, [sp, #0x40]
	str r0, [sp, #0x44]
	str r0, [sp, #0x48]
	add r0, sp, #0x2c
	strh r7, [r0, #0x20]
	mov r0, #1
	str r0, [sp, #0x50]
	str r0, [sp, #0x54]
	mov r0, #0x12
	ldr r4, _02083BAC ; =0x021021E8
	str r0, [sp, #0x58]
	add r5, r6, #0
_02083AA8:
	ldr r0, [r4]
	lsl r0, r0, #0xc
	str r0, [sp, #0x34]
	ldr r0, [r4, #4]
	lsl r0, r0, #0xc
	str r0, [sp, #0x38]
	add r0, sp, #0x2c
	bl sub_02024624
	mov r1, #0xcb
	lsl r1, r1, #2
	str r0, [r5, r1]
	add r0, r1, #0
	ldr r0, [r5, r0]
	mov r1, #1
	bl sub_0202484C
	mov r0, #0xcb
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	ldr r1, [r4, #8]
	bl sub_020248F0
	mov r0, #0xcb
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	ldr r1, [r4, #0xc]
	bl sub_02024ADC
	add r7, r7, #1
	add r4, #0x10
	add r5, r5, #4
	cmp r7, #9
	blt _02083AA8
	mov r0, #0xcf
	lsl r0, r0, #2
	ldr r0, [r6, r0]
	mov r1, #0
	bl sub_02024830
	ldr r7, _02083BAC ; =0x021021E8
	mov r5, #0
	add r4, r6, #0
_02083AFE:
	ldr r0, _02083BB0 ; =sub_020839B8
	mov r1, #0x10
	mov r2, #5
	mov r3, #0x12
	bl sub_02007200
	mov r1, #0xe7
	lsl r1, r1, #2
	str r0, [r4, r1]
	add r0, r1, #0
	ldr r0, [r4, r0]
	bl sub_0201F988
	mov r1, #0xd2
	lsl r1, r1, #2
	ldr r1, [r6, r1]
	str r1, [r0]
	mov r1, #0xcb
	lsl r1, r1, #2
	ldr r1, [r4, r1]
	add r4, r4, #4
	str r1, [r0, #4]
	ldr r1, [r7]
	add r7, #0x10
	lsl r1, r1, #0xc
	str r1, [r0, #8]
	str r5, [r0, #0xc]
	add r5, r5, #1
	cmp r5, #7
	blt _02083AFE
	ldr r2, [r6, #0xc]
	mov r7, #0
	cmp r2, #0
	ble _02083B7E
	mov r5, #0x50
	add r4, r6, #0
_02083B46:
	lsl r0, r5, #0xc
	str r0, [sp, #0x34]
	mov r0, #0x27
	lsl r0, r0, #0xc
	str r0, [sp, #0x38]
	add r0, sp, #0x2c
	bl sub_02024624
	mov r1, #0xd9
	lsl r1, r1, #2
	str r0, [r4, r1]
	add r0, r1, #0
	ldr r0, [r4, r0]
	mov r1, #1
	bl sub_0202484C
	mov r0, #0xd9
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0x2b
	bl sub_020248F0
	ldr r2, [r6, #0xc]
	add r7, r7, #1
	add r5, #0xc
	add r4, r4, #4
	cmp r7, r2
	blt _02083B46
_02083B7E:
	mov r1, #0x56
	lsl r1, r1, #2
	mov r0, #0xd9
	lsl r0, r0, #2
	ldrh r1, [r6, r1]
	add r0, r6, r0
	bl sub_02084E18
	add r0, r6, #0
	add r1, sp, #0x2c
	bl sub_02083BB4
	mov r0, #0x10
	mov r1, #1
	bl GX_EngineAToggleLayers
	mov r0, #0x10
	mov r1, #1
	bl sub_02022CC8
	add sp, #0x5c
	pop {r4, r5, r6, r7, pc}
	nop
_02083BAC: .word 0x021021E8
_02083BB0: .word sub_020839B8
	thumb_func_end sub_020839EC

	thumb_func_start sub_02083BB4
sub_02083BB4: ; 0x02083BB4
	push {r3, r4, r5, lr}
	add r4, r0, #0
	mov r0, #6
	add r5, r1, #0
	lsl r0, r0, #0xe
	str r0, [r5, #8]
	mov r0, #2
	lsl r0, r0, #0xe
	str r0, [r5, #0xc]
	add r0, r5, #0
	bl sub_02024624
	mov r1, #0xe5
	lsl r1, r1, #2
	str r0, [r4, r1]
	ldr r0, [r4, r1]
	mov r1, #1
	bl sub_0202484C
	ldr r0, [r4]
	cmp r0, #7
	bhi _02083CAA
	add r0, r0, r0
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_02083BEC: ; jump table
	.short _02083BFC - _02083BEC - 2 ; case 0
	.short _02083C64 - _02083BEC - 2 ; case 1
	.short _02083C56 - _02083BEC - 2 ; case 2
	.short _02083C1E - _02083BEC - 2 ; case 3
	.short _02083C48 - _02083BEC - 2 ; case 4
	.short _02083C3A - _02083BEC - 2 ; case 5
	.short _02083C2C - _02083BEC - 2 ; case 6
	.short _02083C48 - _02083BEC - 2 ; case 7
_02083BFC:
	ldr r0, [r4, #4]
	cmp r0, #0
	bne _02083C10
	mov r0, #0xe5
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0x30
	bl sub_020248F0
	pop {r3, r4, r5, pc}
_02083C10:
	mov r0, #0xe5
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0x31
	bl sub_020248F0
	pop {r3, r4, r5, pc}
_02083C1E:
	mov r0, #0xe5
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0x33
	bl sub_020248F0
	pop {r3, r4, r5, pc}
_02083C2C:
	mov r0, #0xe5
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0x37
	bl sub_020248F0
	pop {r3, r4, r5, pc}
_02083C3A:
	mov r0, #0xe5
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0x36
	bl sub_020248F0
	pop {r3, r4, r5, pc}
_02083C48:
	mov r0, #0xe5
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0x35
	bl sub_020248F0
	pop {r3, r4, r5, pc}
_02083C56:
	mov r0, #0xe5
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0x2f
	bl sub_020248F0
	pop {r3, r4, r5, pc}
_02083C64:
	mov r0, #0xe5
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0x32
	bl sub_020248F0
	ldr r0, [r4, #0x10]
	cmp r0, #2
	beq _02083CAA
	ldr r1, [r4, #0xc]
	mov r0, #0xd
	mul r0, r1
	add r0, #0x50
	lsl r0, r0, #0xc
	str r0, [r5, #8]
	mov r0, #0x1b
	lsl r0, r0, #0xc
	str r0, [r5, #0xc]
	add r0, r5, #0
	bl sub_02024624
	mov r1, #0xe6
	lsl r1, r1, #2
	str r0, [r4, r1]
	ldr r0, [r4, #0x10]
	cmp r0, #0
	ldr r0, [r4, r1]
	bne _02083CA4
	mov r1, #0x2d
	bl sub_020248F0
	pop {r3, r4, r5, pc}
_02083CA4:
	mov r1, #0x2e
	bl sub_020248F0
_02083CAA:
	pop {r3, r4, r5, pc}
	thumb_func_end sub_02083BB4

	thumb_func_start sub_02083CAC
sub_02083CAC: ; 0x02083CAC
	push {r4, r5, lr}
	sub sp, #0xc
	add r4, r1, #0
	add r5, r0, #0
	ldr r0, [r4, #0xc]
	str r0, [sp, #4]
	mov r0, #0
	str r0, [sp, #8]
	ldr r0, [r4, #4]
	cmp r0, #6
	bhi _02083D2A
	add r0, r0, r0
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_02083CCE: ; jump table
	.short _02083CDC - _02083CCE - 2 ; case 0
	.short _02083D2A - _02083CCE - 2 ; case 1
	.short _02083CF0 - _02083CCE - 2 ; case 2
	.short _02083D2A - _02083CCE - 2 ; case 3
	.short _02083D04 - _02083CCE - 2 ; case 4
	.short _02083D2A - _02083CCE - 2 ; case 5
	.short _02083D18 - _02083CCE - 2 ; case 6
_02083CDC:
	mov r0, #1
	ldr r1, [r4, #8]
	lsl r0, r0, #0xe
	add r0, r1, r0
	str r0, [sp]
	ldr r0, [r4]
	add r1, sp, #0
	bl sub_020247D4
	b _02083D2A
_02083CF0:
	mov r0, #3
	ldr r1, [r4, #8]
	lsl r0, r0, #0xc
	sub r0, r1, r0
	str r0, [sp]
	ldr r0, [r4]
	add r1, sp, #0
	bl sub_020247D4
	b _02083D2A
_02083D04:
	mov r0, #2
	ldr r1, [r4, #8]
	lsl r0, r0, #0xc
	add r0, r1, r0
	str r0, [sp]
	ldr r0, [r4]
	add r1, sp, #0
	bl sub_020247D4
	b _02083D2A
_02083D18:
	ldr r0, [r4, #8]
	add r1, sp, #0
	str r0, [sp]
	ldr r0, [r4]
	bl sub_020247D4
	add r0, r5, #0
	bl sub_02007234
_02083D2A:
	ldr r0, [r4, #4]
	add r0, r0, #1
	str r0, [r4, #4]
	add sp, #0xc
	pop {r4, r5, pc}
	thumb_func_end sub_02083CAC

	thumb_func_start sub_02083D34
sub_02083D34: ; 0x02083D34
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x28
	str r1, [sp, #0x14]
	ldr r1, [sp, #0x40]
	add r5, r2, #0
	str r1, [sp, #0x40]
	ldr r1, [sp, #0x48]
	mov r2, #1
	str r1, [sp, #0x48]
	ldr r1, [sp, #0x40]
	str r0, [sp, #0x10]
	ldr r6, [r1]
	add r7, r3, #0
	add r1, r6, #0
	eor r1, r2
	str r1, [sp, #0x18]
	ldr r1, [r5]
	ldr r4, [sp, #0x44]
	cmp r1, #4
	bls _02083D5E
	b _02083F02
_02083D5E:
	add r1, r1, r1
	add r1, pc
	ldrh r1, [r1, #6]
	lsl r1, r1, #0x10
	asr r1, r1, #0x10
	add pc, r1
_02083D6A: ; jump table
	.short _02083D74 - _02083D6A - 2 ; case 0
	.short _02083DC0 - _02083D6A - 2 ; case 1
	.short _02083DE6 - _02083D6A - 2 ; case 2
	.short _02083E80 - _02083D6A - 2 ; case 3
	.short _02083F02 - _02083D6A - 2 ; case 4
_02083D74:
	mov r0, #0
	str r0, [sp]
	mov r0, #0xe
	lsl r0, r0, #6
	str r0, [sp, #4]
	str r2, [sp, #8]
	mov r0, #0x12
	str r0, [sp, #0xc]
	ldr r2, [sp, #0x10]
	mov r0, #0x1f
	add r1, r7, #6
	add r3, r6, #0
	bl GfGfxLoader_LoadScrnData
	add r0, r4, #0
	add r1, r6, #0
	bl sub_0208423C
	ldr r0, _02083F08 ; =0x02101D40
	lsl r2, r6, #4
	ldrb r1, [r0, r7]
	ldr r0, [sp, #0x4c]
	ldr r3, _02083F0C ; =0x000E0F00
	str r0, [sp]
	ldr r0, [sp, #0x14]
	add r0, r0, r2
	lsl r2, r1, #4
	orr r1, r2
	lsl r1, r1, #0x10
	lsr r1, r1, #0x10
	add r2, r7, #0
	bl sub_02084E54
	ldr r0, [r5]
	add sp, #0x28
	add r0, r0, #1
	str r0, [r5]
	pop {r3, r4, r5, r6, r7, pc}
_02083DC0:
	lsl r1, r6, #0x18
	lsr r1, r1, #0x18
	mov r2, #0
	mov r3, #0xee
	bl sub_0201BC8C
	mov r2, #3
	lsl r1, r6, #0x18
	add r3, r2, #0
	ldr r0, [sp, #0x10]
	lsr r1, r1, #0x18
	sub r3, #0x53
	bl sub_0201BC8C
	ldr r0, [r5]
	add sp, #0x28
	add r0, r0, #1
	str r0, [r5]
	pop {r3, r4, r5, r6, r7, pc}
_02083DE6:
	mov r1, #0xc
	add r0, r6, #0
	mul r0, r1
	ldr r2, [r4, r0]
	str r0, [sp, #0x1c]
	sub r2, #0x18
	str r2, [r4, r0]
	ldr r0, [r4, r0]
	sub r1, #0xd
	cmp r0, r1
	bge _02083E3E
	ldr r0, _02083F10 ; =sub_02083CAC
	mov r1, #0x10
	mov r2, #0
	mov r3, #0x12
	bl sub_02007200
	bl sub_0201F988
	add r7, r0, #0
	ldr r0, [sp, #0x48]
	ldr r0, [r0, #0x1c]
	str r0, [r7]
	mov r0, #0
	str r0, [r7, #4]
	ldr r0, [sp, #0x48]
	ldr r0, [r0, #0x1c]
	bl sub_020248AC
	ldr r0, [r0]
	str r0, [r7, #8]
	ldr r0, [sp, #0x48]
	ldr r0, [r0, #0x1c]
	bl sub_020248AC
	ldr r0, [r0, #4]
	mov r1, #0xa
	str r0, [r7, #0xc]
	ldr r0, [sp, #0x1c]
	mvn r1, r1
	str r1, [r4, r0]
	ldr r0, [r5]
	add r0, r0, #1
	str r0, [r5]
_02083E3E:
	ldr r0, [sp, #0x18]
	mov r1, #0xc
	add r7, r0, #0
	add r5, r4, #4
	mul r7, r1
	ldr r0, [r5, r7]
	sub r0, #0xa
	str r0, [r5, r7]
	add r0, r1, #0
	ldr r2, [r5, r7]
	sub r0, #0xd0
	cmp r2, r0
	bge _02083E5C
	sub r1, #0xd0
	str r1, [r5, r7]
_02083E5C:
	ldr r3, [sp, #0x1c]
	lsl r1, r6, #0x18
	ldr r0, [sp, #0x10]
	ldr r3, [r4, r3]
	lsr r1, r1, #0x18
	mov r2, #0
	bl sub_0201BC8C
	ldr r1, [sp, #0x18]
	ldr r0, [sp, #0x10]
	lsl r1, r1, #0x18
	ldr r3, [r5, r7]
	lsr r1, r1, #0x18
	mov r2, #3
	bl sub_0201BC8C
	add sp, #0x28
	pop {r3, r4, r5, r6, r7, pc}
_02083E80:
	ldr r1, [sp, #0x18]
	mov r0, #0xc
	add r2, r1, #0
	mul r2, r0
	str r2, [sp, #0x20]
	add r7, r4, #4
	ldr r2, [r7, r2]
	ldr r1, [sp, #0x20]
	sub r2, #0xa
	str r2, [r7, r1]
	ldr r2, [r7, r1]
	add r1, r0, #0
	sub r1, #0xd0
	cmp r2, r1
	bge _02083EA4
	ldr r1, [sp, #0x20]
	sub r0, #0xd0
	str r0, [r7, r1]
_02083EA4:
	mov r0, #0xc
	mul r0, r6
	str r0, [sp, #0x24]
	ldr r3, [sp, #0x24]
	lsl r1, r6, #0x18
	ldr r0, [sp, #0x10]
	ldr r3, [r4, r3]
	lsr r1, r1, #0x18
	mov r2, #0
	bl sub_0201BC8C
	ldr r1, [sp, #0x18]
	ldr r3, [sp, #0x20]
	lsl r1, r1, #0x18
	ldr r0, [sp, #0x10]
	ldr r3, [r7, r3]
	lsr r1, r1, #0x18
	mov r2, #3
	bl sub_0201BC8C
	ldr r0, [sp, #0x24]
	mov r1, #0xa
	ldr r0, [r4, r0]
	mvn r1, r1
	cmp r0, r1
	bne _02083F02
	ldr r0, [sp, #0x20]
	sub r1, #0xb9
	ldr r0, [r7, r0]
	cmp r0, r1
	bne _02083F02
	ldr r0, [r5]
	add r2, r4, #0
	add r0, r0, #1
	str r0, [r5]
	ldr r0, [sp, #0x40]
	ldr r1, [r0]
	mov r0, #1
	eor r1, r0
	ldr r0, [sp, #0x40]
	str r1, [r0]
	ldr r0, [sp, #0x10]
	bl sub_0208421C
	ldr r0, _02083F14 ; =0x0000069A
	bl PlaySE
_02083F02:
	add sp, #0x28
	pop {r3, r4, r5, r6, r7, pc}
	nop
_02083F08: .word 0x02101D40
_02083F0C: .word 0x000E0F00
_02083F10: .word sub_02083CAC
_02083F14: .word 0x0000069A
	thumb_func_end sub_02083D34

	thumb_func_start sub_02083F18
sub_02083F18: ; 0x02083F18
	push {r4, r5, lr}
	sub sp, #0xc
	add r4, r2, #0
	mov r2, #1
	mov r1, #0
	lsl r2, r2, #8
	mov r3, #0xa
	add r5, r0, #0
	bl sub_0200E998
	mov r3, #0
	str r3, [sp]
	str r3, [sp, #4]
	add r0, r5, #0
	mov r1, #1
	add r2, r4, #0
	str r3, [sp, #8]
	bl AddTextPrinterParameterized
	add r0, r5, #0
	bl CopyWindowToVram
	add sp, #0xc
	pop {r4, r5, pc}
	thumb_func_end sub_02083F18

	thumb_func_start sub_02083F48
sub_02083F48: ; 0x02083F48
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x10
	add r5, r0, #0
	add r7, r2, #0
	mov r0, #0
	add r1, r7, #0
	add r2, r0, #0
	mov r4, #0x10
	bl sub_02002F30
	add r6, r0, #0
	add r0, r5, #0
	bl GetWindowWidth
	lsl r1, r0, #3
	add r0, r6, #0
	add r0, #0x10
	cmp r0, r1
	ble _02083F70
	sub r4, r1, r6
_02083F70:
	add r0, r5, #0
	mov r1, #1
	bl FillWindowPixelBuffer
	mov r1, #0
	str r1, [sp]
	ldr r0, _02083F98 ; =0x000E0F01
	str r1, [sp, #4]
	str r0, [sp, #8]
	add r0, r5, #0
	add r2, r7, #0
	add r3, r4, #0
	str r1, [sp, #0xc]
	bl sub_020200FC
	add r0, r5, #0
	bl CopyWindowToVram
	add sp, #0x10
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_02083F98: .word 0x000E0F01
	thumb_func_end sub_02083F48

	thumb_func_start sub_02083F9C
sub_02083F9C: ; 0x02083F9C
	push {r4, r5, r6, r7, lr}
	sub sp, #0x14
	add r6, r1, #0
	mov r1, #1
	add r5, r0, #0
	str r1, [sp]
	mov r0, #0x1a
	str r0, [sp, #4]
	mov r0, #0xc
	str r0, [sp, #8]
	str r1, [sp, #0xc]
	add r0, #0xf4
	str r0, [sp, #0x10]
	mov r0, #0x16
	lsl r0, r0, #4
	mov r1, #0xee
	lsl r1, r1, #2
	add r4, r2, #0
	ldr r0, [r5, r0]
	add r1, r5, r1
	mov r2, #0
	mov r3, #2
	bl sub_0201D40C
	mov r2, #1
	mov r1, #0xf2
	lsl r1, r1, #2
	str r2, [sp]
	mov r0, #0x1a
	str r0, [sp, #4]
	mov r0, #0xc
	str r0, [sp, #8]
	mov r0, #0x8e
	str r2, [sp, #0xc]
	lsl r0, r0, #2
	str r0, [sp, #0x10]
	sub r0, #0xd8
	ldr r0, [r5, r0]
	add r1, r5, r1
	mov r3, #2
	bl sub_0201D40C
	ldr r0, [r5]
	cmp r0, #4
	bne _02084040
	mov r0, #0
	str r0, [sp]
	mov r0, #0xe
	lsl r0, r0, #6
	str r0, [sp, #4]
	mov r3, #1
	mov r2, #0x16
	str r3, [sp, #8]
	mov r0, #0x12
	str r0, [sp, #0xc]
	lsl r2, r2, #4
	ldr r2, [r5, r2]
	add r0, r4, #0
	mov r1, #9
	bl sub_02007B68
	mov r0, #0x46
	mov r1, #4
	lsl r0, r0, #4
	str r1, [r5, r0]
	add r0, r5, #0
	add r0, #0x3a
	bl sub_02084830
	mov r0, #0x4b
	lsl r0, r0, #4
	ldr r1, [r5, r0]
	sub r0, #0xe8
	ldr r1, [r1, #0x14]
	ldr r3, _02084200 ; =0x000E0F00
	str r1, [sp]
	ldr r1, _02084204 ; =0x00000A0A
	add r0, r5, r0
	mov r2, #4
	bl sub_02084E54
	b _0208406A
_02084040:
	mov r0, #0x46
	mov r1, #0
	lsl r0, r0, #4
	str r1, [r5, r0]
	add r0, r5, #0
	add r0, #0x3a
	bl sub_02084830
	mov r1, #0x4b
	lsl r1, r1, #4
	ldr r0, [r5, r1]
	ldr r3, _02084200 ; =0x000E0F00
	ldr r0, [r0, #0x14]
	mov r2, #0
	str r0, [sp]
	add r0, r1, #0
	sub r0, #0xe8
	add r0, r5, r0
	sub r1, #0xac
	bl sub_02084E54
_0208406A:
	mov r2, #2
	str r2, [sp]
	mov r3, #0x16
	str r3, [sp, #4]
	mov r1, #0x37
	str r2, [sp, #8]
	mov r0, #0
	str r0, [sp, #0xc]
	lsl r1, r1, #4
	str r1, [sp, #0x10]
	lsl r0, r3, #4
	add r1, #0x68
	ldr r0, [r5, r0]
	add r1, r5, r1
	mov r3, #7
	bl sub_0201D40C
	ldr r1, [r5, #0xc]
	mov r0, #0xc
	add r2, r1, #0
	mul r2, r0
	asr r0, r2, #2
	lsr r0, r0, #0x1d
	add r0, r2, r0
	asr r0, r0, #3
	add r4, r0, #1
	mov r0, #3
	str r0, [sp]
	lsl r0, r4, #0x18
	lsr r0, r0, #0x18
	str r0, [sp, #4]
	mov r2, #2
	mov r1, #0xe7
	str r2, [sp, #8]
	mov r0, #0
	str r0, [sp, #0xc]
	lsl r1, r1, #2
	mov r0, #0x16
	str r1, [sp, #0x10]
	lsl r0, r0, #4
	add r1, #0x4c
	ldr r0, [r5, r0]
	add r1, r5, r1
	mov r3, #0xa
	bl sub_0201D40C
	mov r0, #0xfa
	lsl r0, r0, #2
	add r0, r5, r0
	mov r1, #1
	bl FillWindowPixelBuffer
	mov r0, #3
	str r0, [sp]
	mov r0, #7
	str r0, [sp, #4]
	mov r2, #2
	mov r1, #0xf
	add r4, #9
	lsl r3, r4, #0x18
	str r2, [sp, #8]
	mov r0, #0
	str r0, [sp, #0xc]
	lsl r1, r1, #6
	mov r0, #0x16
	str r1, [sp, #0x10]
	lsl r0, r0, #4
	add r1, #0x78
	ldr r0, [r5, r0]
	add r1, r5, r1
	lsr r3, r3, #0x18
	bl sub_0201D40C
	ldr r0, _02084208 ; =0x00000438
	mov r1, #1
	add r0, r5, r0
	bl FillWindowPixelBuffer
	ldr r1, [r5]
	cmp r1, #5
	bne _02084122
	mov r2, #0x61
	ldr r0, _02084208 ; =0x00000438
	lsl r2, r2, #2
	ldr r2, [r5, r2]
	add r0, r5, r0
	bl sub_02083F48
	ldr r0, _02084208 ; =0x00000438
	add r0, r5, r0
	bl CopyWindowToVram
_02084122:
	mov r0, #0x13
	str r0, [sp]
	mov r0, #0x1b
	str r0, [sp, #4]
	mov r2, #4
	ldr r1, _0208420C ; =0x00000448
	str r2, [sp, #8]
	mov r0, #0xc
	str r0, [sp, #0xc]
	mov r0, #0x84
	str r0, [sp, #0x10]
	add r0, #0xdc
	ldr r0, [r5, r0]
	add r1, r5, r1
	mov r3, #2
	bl sub_0201D40C
	ldr r0, _0208420C ; =0x00000448
	mov r1, #0xf
	add r0, r5, r0
	bl FillWindowPixelBuffer
	mov r2, #0x5e
	ldr r0, _0208420C ; =0x00000448
	lsl r2, r2, #2
	ldr r1, [r5]
	ldr r2, [r5, r2]
	add r0, r5, r0
	bl sub_02083F18
	add r0, r6, #0
	bl OverlayManager_GetField18
	mov r1, #0x46
	lsl r1, r1, #2
	ldrh r2, [r5, r1]
	ldr r0, _02084210 ; =0x0000FFFF
	cmp r2, r0
	beq _02084198
	add r0, r5, #0
	add r0, #0xd8
	add r1, r5, r1
	bl CopyU16StringArray
	mov r0, #0xc
	str r0, [sp]
	mov r2, #0
	add r1, r5, #0
	ldr r0, _02084214 ; =0x000E0F01
	str r2, [sp, #4]
	str r0, [sp, #8]
	mov r0, #0xfa
	lsl r0, r0, #2
	add r0, r5, r0
	add r1, #0xd8
	add r3, r2, #0
	str r2, [sp, #0xc]
	bl sub_02084540
_02084198:
	mov r0, #0xee
	lsl r0, r0, #2
	mov r4, #0
	add r7, r5, r0
_020841A0:
	add r0, r4, #4
	lsl r6, r0, #4
	mov r0, #0
	str r0, [sp]
	mov r0, #2
	str r0, [sp, #4]
	str r0, [sp, #8]
	mov r0, #0
	str r0, [sp, #0xc]
	mov r0, #0x78
	str r0, [sp, #0x10]
	add r0, #0xe8
	ldr r0, [r5, r0]
	add r1, r7, r6
	mov r2, #2
	mov r3, #0
	bl sub_0201D40C
	add r0, r7, r6
	mov r1, #0
	bl FillWindowPixelBuffer
	add r4, r4, #1
	cmp r4, #3
	blt _020841A0
	mov r3, #0
	str r3, [sp]
	mov r0, #0x10
	str r0, [sp, #4]
	mov r2, #2
	str r2, [sp, #8]
	ldr r1, _02084218 ; =0x00000428
	str r3, [sp, #0xc]
	mov r0, #0x84
	str r0, [sp, #0x10]
	add r0, #0xdc
	ldr r0, [r5, r0]
	add r1, r5, r1
	bl sub_0201D40C
	ldr r0, _02084218 ; =0x00000428
	mov r1, #0
	add r0, r5, r0
	bl FillWindowPixelBuffer
	add sp, #0x14
	pop {r4, r5, r6, r7, pc}
	nop
_02084200: .word 0x000E0F00
_02084204: .word 0x00000A0A
_02084208: .word 0x00000438
_0208420C: .word 0x00000448
_02084210: .word 0x0000FFFF
_02084214: .word 0x000E0F01
_02084218: .word 0x00000428
	thumb_func_end sub_02083F9C

	thumb_func_start sub_0208421C
sub_0208421C: ; 0x0208421C
	push {r4, lr}
	add r4, r1, #0
	lsl r0, r4, #0x18
	lsr r0, r0, #0x18
	mov r1, #1
	bl sub_0201BB68
	mov r0, #1
	eor r0, r4
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	mov r1, #2
	bl sub_0201BB68
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_0208421C

	thumb_func_start sub_0208423C
sub_0208423C: ; 0x0208423C
	push {r3, r4}
	mov r3, #0xc
	add r4, r1, #0
	mul r4, r3
	mov r2, #0xee
	str r2, [r0, r4]
	add r2, r3, #0
	sub r2, #0x5c
	add r4, r0, r4
	str r2, [r4, #4]
	mov r4, #1
	eor r1, r4
	mul r3, r1
	sub r4, #0xc
	str r4, [r0, r3]
	add r0, r0, r3
	str r2, [r0, #4]
	pop {r3, r4}
	bx lr
	.balign 4, 0
	thumb_func_end sub_0208423C

	thumb_func_start sub_02084264
sub_02084264: ; 0x02084264
	cmp r0, r2
	blt _0208426A
	add r0, r1, #0
_0208426A:
	cmp r0, r1
	bge _02084270
	sub r0, r2, #1
_02084270:
	bx lr
	.balign 4, 0
	thumb_func_end sub_02084264

	thumb_func_start sub_02084274
sub_02084274: ; 0x02084274
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	cmp r1, #0
	beq _02084318
	ldr r3, [r5, #0x20]
	mov r2, #0x1a
	mul r2, r3
	ldr r0, [r5, #0x1c]
	add r3, r5, r2
	lsl r2, r0, #1
	add r2, r3, r2
	ldrh r2, [r2, #0x3a]
	lsl r6, r1, #3
	ldr r1, _0208431C ; =0x02102168
	str r2, [sp]
	ldr r1, [r1, r6]
	mov r2, #0xd
	add r0, r0, r1
	mov r1, #0
	bl sub_02084264
	add r4, r0, #0
	ldr r0, _02084320 ; =0x0210216C
	ldr r1, [r5, #0x20]
	ldr r0, [r0, r6]
	mov r2, #6
	add r0, r1, r0
	mov r1, #0
	bl sub_02084264
	add r7, r0, #0
	ldr r0, _0208431C ; =0x02102168
	add r6, r0, r6
	b _020842F6
_020842B8:
	ldr r1, [r5, #0x28]
	cmp r1, #0
	bne _020842DA
	ldr r1, _02084324 ; =0x0000D004
	cmp r0, r1
	bne _020842DA
	ldr r0, [r6, #4]
	cmp r0, #0
	beq _020842DA
	ldr r0, [r5, #0x2c]
	mov r1, #0
	add r0, r4, r0
	mov r2, #0xd
	bl sub_02084264
	add r4, r0, #0
	b _020842F6
_020842DA:
	ldr r0, [r6]
	mov r1, #0
	add r0, r4, r0
	mov r2, #0xd
	bl sub_02084264
	add r4, r0, #0
	ldr r0, [r6, #4]
	mov r1, #0
	add r0, r7, r0
	mov r2, #6
	bl sub_02084264
	add r7, r0, #0
_020842F6:
	mov r0, #0x1a
	mul r0, r7
	lsl r1, r4, #1
	add r0, r5, r0
	add r0, r1, r0
	ldrh r0, [r0, #0x3a]
	ldr r1, _02084324 ; =0x0000D004
	cmp r0, r1
	beq _020842B8
	ldr r1, [sp]
	cmp r1, r0
	bne _02084314
	ldr r1, _02084328 ; =0x0000E001
	cmp r0, r1
	bhi _020842B8
_02084314:
	str r4, [r5, #0x1c]
	str r7, [r5, #0x20]
_02084318:
	pop {r3, r4, r5, r6, r7, pc}
	nop
_0208431C: .word 0x02102168
_02084320: .word 0x0210216C
_02084324: .word 0x0000D004
_02084328: .word 0x0000E001
	thumb_func_end sub_02084274

	thumb_func_start sub_0208432C
sub_0208432C: ; 0x0208432C
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	mov r0, #0xd3
	lsl r0, r0, #2
	mov r4, #0
	ldr r0, [r5, r0]
	add r6, r4, #0
	add r7, r4, #0
	bl sub_020248B8
	cmp r0, #0
	bne _02084346
	mov r7, #1
_02084346:
	ldr r0, _02084424 ; =gMain
	ldr r1, [r0, #0x4c]
	mov r0, #0x40
	tst r0, r1
	beq _02084366
	ldr r0, _02084428 ; =0x000005DC
	bl PlaySE
	mov r0, #0xd3
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	mov r1, #1
	bl sub_02024830
	mov r6, #1
	add r4, r4, #1
_02084366:
	ldr r0, _02084424 ; =gMain
	ldr r1, [r0, #0x4c]
	mov r0, #0x80
	tst r0, r1
	beq _02084386
	ldr r0, _02084428 ; =0x000005DC
	bl PlaySE
	mov r0, #0xd3
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	mov r1, #1
	bl sub_02024830
	mov r6, #2
	add r4, r4, #1
_02084386:
	ldr r0, _02084424 ; =gMain
	ldr r1, [r0, #0x4c]
	mov r0, #0x20
	tst r0, r1
	beq _020843A6
	ldr r0, _02084428 ; =0x000005DC
	bl PlaySE
	mov r0, #0xd3
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	mov r1, #1
	bl sub_02024830
	mov r6, #3
	add r4, r4, #1
_020843A6:
	ldr r0, _02084424 ; =gMain
	ldr r1, [r0, #0x4c]
	mov r0, #0x10
	tst r0, r1
	beq _020843C6
	ldr r0, _02084428 ; =0x000005DC
	bl PlaySE
	mov r0, #0xd3
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	mov r1, #1
	bl sub_02024830
	mov r6, #4
	add r4, r4, #1
_020843C6:
	ldr r0, _02084424 ; =gMain
	ldr r1, [r0, #0x48]
	mov r0, #8
	tst r0, r1
	beq _020843EC
	ldr r0, _02084428 ; =0x000005DC
	bl PlaySE
	mov r0, #0xd3
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	mov r1, #1
	bl sub_02024830
	mov r0, #0xc
	str r0, [r5, #0x1c]
	mov r0, #0
	str r0, [r5, #0x20]
	add r4, r4, #1
_020843EC:
	add r0, r5, #0
	bl sub_0208503C
	ldr r1, _0208442C ; =0x000005C8
	str r0, [r5, r1]
	ldr r0, [r5, r1]
	cmp r0, #1
	bne _02084400
	mov r6, #0
	add r4, r4, #1
_02084400:
	cmp r7, #1
	bne _0208440E
	add r0, r5, #0
	add r1, r6, #0
	mov r4, #0
	bl sub_02084430
_0208440E:
	cmp r4, #0
	beq _02084422
	add r0, r5, #0
	add r1, r6, #0
	bl sub_02084274
	add r0, r5, #0
	add r1, r6, #0
	bl sub_02084430
_02084422:
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_02084424: .word gMain
_02084428: .word 0x000005DC
_0208442C: .word 0x000005C8
	thumb_func_end sub_0208432C

	thumb_func_start sub_02084430
sub_02084430: ; 0x02084430
	push {r3, r4, r5, lr}
	sub sp, #0x18
	add r5, r0, #0
	add r4, r1, #0
	ldr r1, [r5, #0x20]
	cmp r1, #0
	beq _0208448A
	ldr r0, [r5, #0x28]
	cmp r0, #0
	bne _02084454
	cmp r0, r1
	beq _02084454
	mov r0, #0xd3
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	mov r1, #0x27
	bl sub_020248F0
_02084454:
	cmp r4, #0
	beq _02084464
	mov r0, #0xd3
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	mov r1, #0x27
	bl sub_020248F0
_02084464:
	ldr r0, [r5, #0x1c]
	lsl r0, r0, #4
	add r0, #0x1a
	lsl r0, r0, #0xc
	str r0, [sp, #0xc]
	ldr r0, [r5, #0x20]
	sub r1, r0, #1
	mov r0, #0x13
	mul r0, r1
	add r0, #0x5b
	lsl r0, r0, #0xc
	str r0, [sp, #0x10]
	mov r0, #0xd3
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	add r1, sp, #0xc
	bl sub_020247D4
	b _020844C6
_0208448A:
	mov r0, #0x1a
	mul r0, r1
	add r1, r5, r0
	ldr r0, [r5, #0x1c]
	lsl r0, r0, #1
	add r0, r1, r0
	ldrh r1, [r0, #0x3a]
	ldr r0, _020844F0 ; =0x0000E002
	sub r1, r1, r0
	ldr r0, _020844F4 ; =0x02101D80
	lsl r2, r1, #1
	ldrh r0, [r0, r2]
	ldr r2, _020844F8 ; =0x02101D4C
	lsl r0, r0, #0xc
	str r0, [sp]
	mov r0, #0x11
	lsl r0, r0, #0xe
	str r0, [sp, #4]
	mov r0, #0xd3
	lsl r0, r0, #2
	ldrb r1, [r2, r1]
	ldr r0, [r5, r0]
	bl sub_020248F0
	mov r0, #0xd3
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	add r1, sp, #0
	bl sub_020247D4
_020844C6:
	mov r0, #0xb4
	strh r0, [r5, #0x38]
	mov r0, #0xd3
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	mov r1, #0
	bl sub_020249D4
	ldr r0, [r5, #0x1c]
	lsl r1, r4, #3
	str r0, [r5, #0x24]
	ldr r0, [r5, #0x20]
	str r0, [r5, #0x28]
	ldr r0, _020844FC ; =0x02102168
	ldr r0, [r0, r1]
	cmp r0, #0
	beq _020844EA
	str r0, [r5, #0x2c]
_020844EA:
	add sp, #0x18
	pop {r3, r4, r5, pc}
	nop
_020844F0: .word 0x0000E002
_020844F4: .word 0x02101D80
_020844F8: .word 0x02101D4C
_020844FC: .word 0x02102168
	thumb_func_end sub_02084430

	thumb_func_start sub_02084500
sub_02084500: ; 0x02084500
	push {r3, lr}
	ldrh r1, [r0]
	add r1, #0x14
	strh r1, [r0]
	ldrh r2, [r0]
	mov r1, #0x5a
	lsl r1, r1, #2
	cmp r2, r1
	bls _02084516
	mov r1, #0
	strh r1, [r0]
_02084516:
	ldrh r0, [r0]
	bl sub_0201FCAC
	mov r1, #0xa
	mul r1, r0
	asr r0, r1, #0xb
	lsr r0, r0, #0x14
	add r0, r1, r0
	asr r0, r0, #0xc
	add r0, #0xf
	lsl r1, r0, #5
	mov r0, #0x1d
	orr r1, r0
	add r0, sp, #0
	strh r1, [r0]
	add r0, sp, #0
	mov r1, #0x3a
	mov r2, #2
	bl GX_LoadOBJPltt
	pop {r3, pc}
	thumb_func_end sub_02084500

	thumb_func_start sub_02084540
sub_02084540: ; 0x02084540
	push {r4, r5, r6, r7, lr}
	sub sp, #0x3c
	str r0, [sp, #0x18]
	add r7, r1, #0
	mov r0, #2
	mov r1, #0x12
	str r2, [sp, #0x1c]
	str r3, [sp, #0x20]
	mov r4, #0
	bl String_ctor
	str r0, [sp, #0x28]
	ldrh r1, [r7]
	ldr r0, _02084630 ; =0x0000FFFF
	cmp r1, r0
	beq _02084626
	ldr r0, [sp, #0x54]
	ldr r6, [sp, #0x50]
	str r0, [sp, #0x24]
	ldr r0, [sp, #0x58]
	str r0, [sp, #0x34]
	ldr r0, [sp, #0x20]
	add r0, r0, #2
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	str r0, [sp, #0x2c]
	ldr r0, [sp, #0x5c]
	str r0, [sp, #0x30]
_02084578:
	lsl r0, r4, #1
	ldrh r1, [r7, r0]
	ldr r0, _02084634 ; =0x00002FFF
	add r0, r1, r0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	cmp r0, #2
	bhi _020845C4
	mov r0, #0xc
	str r0, [sp]
	str r0, [sp, #4]
	add r2, r4, #0
	ldr r0, [sp, #0x1c]
	mul r2, r6
	add r0, r0, r2
	ldr r2, _02084638 ; =0x0000D001
	lsl r0, r0, #0x10
	sub r1, r1, r2
	lsl r1, r1, #0x10
	lsr r0, r0, #0x10
	lsr r2, r1, #8
	str r0, [sp, #8]
	ldr r0, [sp, #0x2c]
	lsr r1, r2, #0x1f
	add r1, r2, r1
	str r0, [sp, #0xc]
	mov r0, #0xc
	asr r2, r1, #1
	ldr r1, [sp, #0x30]
	str r0, [sp, #0x10]
	str r0, [sp, #0x14]
	add r1, r1, r2
	mov r2, #0
	ldr r0, [sp, #0x18]
	add r3, r2, #0
	bl BlitBitmapRectToWindow
	b _0208461A
_020845C4:
	ldr r0, _0208463C ; =0x0000D004
	cmp r1, r0
	bne _020845CE
	add r4, r4, #1
	b _0208461C
_020845CE:
	add r0, sp, #0x38
	strh r1, [r0]
	ldr r1, _02084630 ; =0x0000FFFF
	strh r1, [r0, #2]
	mov r0, #0
	add r1, sp, #0x38
	add r2, r0, #0
	bl sub_02002EC8
	add r5, r0, #0
	ldr r0, [sp, #0x28]
	add r1, sp, #0x38
	bl CopyU16ArrayToString
	ldr r0, [sp, #0x20]
	sub r3, r6, r5
	str r0, [sp]
	ldr r0, [sp, #0x24]
	lsr r5, r3, #0x1f
	add r5, r3, r5
	asr r3, r5, #1
	str r0, [sp, #4]
	ldr r0, [sp, #0x34]
	mov ip, r3
	add r5, r4, #0
	str r0, [sp, #8]
	mov r0, #0
	str r0, [sp, #0xc]
	ldr r3, [sp, #0x1c]
	mul r5, r6
	add r3, r3, r5
	mov r5, ip
	ldr r0, [sp, #0x18]
	ldr r2, [sp, #0x28]
	mov r1, #0
	add r3, r5, r3
	bl sub_020200FC
_0208461A:
	add r4, r4, #1
_0208461C:
	lsl r0, r4, #1
	ldrh r1, [r7, r0]
	ldr r0, _02084630 ; =0x0000FFFF
	cmp r1, r0
	bne _02084578
_02084626:
	ldr r0, [sp, #0x28]
	bl String_dtor
	add sp, #0x3c
	pop {r4, r5, r6, r7, pc}
	.balign 4, 0
_02084630: .word 0x0000FFFF
_02084634: .word 0x00002FFF
_02084638: .word 0x0000D001
_0208463C: .word 0x0000D004
	thumb_func_end sub_02084540

	thumb_func_start sub_02084640
sub_02084640: ; 0x02084640
	push {r4, r5, r6, lr}
	sub sp, #0x10
	mov r5, #0
	add r6, r1, #0
	str r5, [sp]
	mov r1, #0xff
	str r1, [sp, #4]
	str r3, [sp, #8]
	add r1, r2, #0
	add r2, r6, #0
	add r3, r5, #0
	add r4, r0, #0
	str r5, [sp, #0xc]
	bl sub_020200FC
	ldr r0, [r4, #0xc]
	add sp, #0x10
	pop {r4, r5, r6, pc}
	thumb_func_end sub_02084640

	thumb_func_start sub_02084664
sub_02084664: ; 0x02084664
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x38
	add r6, r0, #0
	str r1, [sp, #8]
	add r0, #0x30
	mov r1, #0
	add r5, r2, #0
	add r4, r3, #0
	bl FillWindowPixelBuffer
	add r0, r6, #0
	ldr r3, _02084730 ; =0x000D0E0F
	add r0, #0x30
	add r1, r4, #0
	mov r2, #2
	bl sub_02084640
	mov r1, #2
	lsl r1, r1, #0xa
	bl DC_FlushRange
	add r7, r6, #0
	mov r4, #0
	add r7, #0x30
_02084694:
	mov r0, #0
	str r0, [sp]
	add r0, r7, #0
	mov r1, #4
	mov r2, #2
	lsl r3, r4, #2
	str r5, [sp, #4]
	bl sub_02013A50
	mov r1, #1
	add r0, r5, #0
	lsl r1, r1, #8
	bl DC_FlushRange
	ldr r1, _02084734 ; =0x02101D3C
	mov r2, #1
	ldrb r1, [r1, r4]
	add r0, r5, #0
	lsl r2, r2, #8
	lsl r1, r1, #5
	bl sub_020CFECC
	add r0, r4, #1
	lsl r0, r0, #0x10
	lsr r4, r0, #0x10
	cmp r4, #4
	blo _02084694
	mov r0, #0x15
	mov r1, #0x12
	bl String_ctor
	add r4, r0, #0
	mov r5, #0
_020846D6:
	ldr r0, [sp, #8]
	lsl r1, r5, #1
	ldrh r1, [r0, r1]
	add r0, sp, #0xc
	lsl r7, r5, #4
	strh r1, [r0]
	ldr r1, _02084738 ; =0x0000FFFF
	strh r1, [r0, #2]
	add r0, r6, r7
	mov r1, #0
	bl FillWindowPixelBuffer
	add r0, r4, #0
	add r1, sp, #0xc
	bl CopyU16ArrayToString
	ldr r3, _02084730 ; =0x000D0E0F
	add r0, r6, r7
	add r1, r4, #0
	mov r2, #2
	bl sub_02084640
	mov r1, #0x80
	add r7, r0, #0
	bl DC_FlushRange
	ldr r1, _0208473C ; =0x02101D54
	lsl r2, r5, #2
	ldr r1, [r1, r2]
	add r0, r7, #0
	lsl r1, r1, #5
	mov r2, #0x80
	bl sub_020CFECC
	add r0, r5, #1
	lsl r0, r0, #0x10
	lsr r5, r0, #0x10
	cmp r5, #3
	blo _020846D6
	add r0, r4, #0
	bl String_dtor
	add sp, #0x38
	pop {r3, r4, r5, r6, r7, pc}
	nop
_02084730: .word 0x000D0E0F
_02084734: .word 0x02101D3C
_02084738: .word 0x0000FFFF
_0208473C: .word 0x02101D54
	thumb_func_end sub_02084664

	thumb_func_start sub_02084740
sub_02084740: ; 0x02084740
	push {r3, r4, r5, lr}
	cmp r2, #0
	bne _0208474A
	ldr r1, _0208481C ; =0x0000D003
	b _02084750
_0208474A:
	sub r2, r2, #1
	lsl r2, r2, #1
	ldrh r1, [r1, r2]
_02084750:
	ldr r4, _02084820 ; =0x0000E003
	cmp r1, r4
	bgt _02084780
	bge _020847A6
	ldr r2, _02084824 ; =0x0000D004
	cmp r1, r2
	bgt _02084778
	sub r2, r2, #3
	sub r2, r1, r2
	bmi _020847A8
	add r2, r2, r2
	add r2, pc
	ldrh r2, [r2, #6]
	lsl r2, r2, #0x10
	asr r2, r2, #0x10
	add pc, r2
_02084770: ; jump table
	.short _020847A6 - _02084770 - 2 ; case 0
	.short _020847A6 - _02084770 - 2 ; case 1
	.short _020847A6 - _02084770 - 2 ; case 2
	.short _020847A6 - _02084770 - 2 ; case 3
_02084778:
	ldr r2, _02084828 ; =0x0000E002
	cmp r1, r2
	beq _020847A6
	b _020847A8
_02084780:
	add r2, r4, #1
	cmp r1, r2
	bgt _0208478A
	beq _020847A6
	b _020847A8
_0208478A:
	add r2, r4, #2
	sub r2, r1, r2
	cmp r2, #3
	bhi _020847A8
	add r2, r2, r2
	add r2, pc
	ldrh r2, [r2, #6]
	lsl r2, r2, #0x10
	asr r2, r2, #0x10
	add pc, r2
_0208479E: ; jump table
	.short _020847A6 - _0208479E - 2 ; case 0
	.short _020847A6 - _0208479E - 2 ; case 1
	.short _020847A6 - _0208479E - 2 ; case 2
	.short _020847A6 - _0208479E - 2 ; case 3
_020847A6:
	mov r1, #1
_020847A8:
	mov r4, #0
	add r5, r3, #0
	mov r2, #1
_020847AE:
	add r4, r4, #1
	strh r2, [r5]
	add r5, r5, #2
	cmp r4, #3
	blt _020847AE
	strh r1, [r3]
	cmp r1, #1
	beq _0208480E
	ldr r5, _0208482C ; =0x02102422
	mov r2, #0
_020847C2:
	ldrh r4, [r5]
	cmp r1, r4
	bne _020847E4
	mov r4, #6
	ldr r5, _0208482C ; =0x02102422
	mul r4, r2
	add r4, r5, r4
	mov r1, #0
	add r5, r3, #0
_020847D4:
	ldrh r2, [r4]
	add r1, r1, #1
	add r4, r4, #2
	strh r2, [r5]
	add r5, r5, #2
	cmp r1, #3
	blt _020847D4
	b _0208480E
_020847E4:
	ldrh r4, [r5, #4]
	cmp r1, r4
	bne _02084806
	mov r4, #6
	ldr r5, _0208482C ; =0x02102422
	mul r4, r2
	add r4, r5, r4
	mov r1, #0
	add r5, r3, #0
_020847F6:
	ldrh r2, [r4]
	add r1, r1, #1
	add r4, r4, #2
	strh r2, [r5]
	add r5, r5, #2
	cmp r1, #3
	blt _020847F6
	b _0208480E
_02084806:
	add r2, r2, #1
	add r5, r5, #6
	cmp r2, #0x52
	blo _020847C2
_0208480E:
	add r1, r3, #0
	ldr r2, [sp, #0x10]
	ldr r3, [sp, #0x14]
	bl sub_02084664
	pop {r3, r4, r5, pc}
	nop
_0208481C: .word 0x0000D003
_02084820: .word 0x0000E003
_02084824: .word 0x0000D004
_02084828: .word 0x0000E002
_0208482C: .word 0x02102422
	thumb_func_end sub_02084740

	thumb_func_start sub_02084830
sub_02084830: ; 0x02084830
	push {r4, r5, r6, r7}
	mov r4, #0
	ldr r3, _0208487C ; =0x021104E4
	add r5, r4, #0
	add r6, r0, #0
	lsl r2, r1, #2
_0208483C:
	ldr r7, [r3, r2]
	add r4, r4, #1
	ldrh r7, [r7, r5]
	add r5, r5, #2
	strh r7, [r6]
	add r6, r6, #2
	cmp r4, #0xd
	blt _0208483C
	mov r3, #0x14
	ldr r4, _02084880 ; =0x021104F8
	mul r3, r1
	mov r2, #0
	add r3, r4, r3
	add r1, r2, #0
_02084858:
	add r6, r1, #0
	add r4, r1, #0
	add r5, r0, #0
_0208485E:
	ldr r7, [r3]
	add r6, r6, #1
	ldrh r7, [r7, r4]
	add r4, r4, #2
	strh r7, [r5, #0x1a]
	add r5, r5, #2
	cmp r6, #0xd
	blt _0208485E
	add r2, r2, #1
	add r3, r3, #4
	add r0, #0x1a
	cmp r2, #5
	blt _02084858
	pop {r4, r5, r6, r7}
	bx lr
	.balign 4, 0
_0208487C: .word 0x021104E4
_02084880: .word 0x021104F8
	thumb_func_end sub_02084830

	thumb_func_start sub_02084884
sub_02084884: ; 0x02084884
	push {r4, r5, r6, lr}
	sub sp, #0x10
	add r4, r0, #0
	ldr r0, _02084BBC ; =0x00002FFD
	add r5, r1, #0
	add r0, r5, r0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	add r6, r2, #0
	cmp r0, #1
	bhi _0208489C
	mov r5, #1
_0208489C:
	ldr r0, [r4]
	cmp r0, #4
	bne _020848B0
	ldr r0, _02084BC0 ; =0x00001FFE
	add r0, r5, r0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	cmp r0, #3
	bhi _020848B0
	mov r5, #1
_020848B0:
	mov r0, #0xd3
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	bl sub_020248B8
	cmp r0, #0
	bne _020848D8
	ldr r0, _02084BC4 ; =gMain + 0x40
	ldrh r0, [r0, #0x24]
	cmp r0, #0
	bne _020848D8
	mov r0, #0xd3
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #1
	bl sub_02024830
	add sp, #0x10
	mov r0, #2
	pop {r4, r5, r6, pc}
_020848D8:
	ldr r0, _02084BC8 ; =0x0000E002
	cmp r5, r0
	bgt _020848F6
	blt _020848E2
	b _02084A0A
_020848E2:
	ldr r3, _02084BCC ; =0x0000D002
	cmp r5, r3
	bgt _020848F4
	sub r0, r3, #1
	cmp r5, r0
	blt _020848F4
	beq _02084918
	cmp r5, r3
	beq _0208496A
_020848F4:
	b _02084B2E
_020848F6:
	add r0, r0, #1
	sub r0, r5, r0
	cmp r0, #5
	bls _02084900
	b _02084B2E
_02084900:
	add r0, r0, r0
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_0208490C: ; jump table
	.short _02084A0A - _0208490C - 2 ; case 0
	.short _02084A0A - _0208490C - 2 ; case 1
	.short _02084A0A - _0208490C - 2 ; case 2
	.short _020849B8 - _0208490C - 2 ; case 3
	.short _02084A40 - _0208490C - 2 ; case 4
	.short _02084AE4 - _0208490C - 2 ; case 5
_02084918:
	add r0, r4, #0
	add r0, #0xd8
	str r0, [sp]
	mov r0, #0x56
	lsl r0, r0, #2
	ldrh r0, [r4, r0]
	ldr r3, _02084BD0 ; =0x0000D001
	mov r1, #0x52
	str r0, [sp, #4]
	mov r0, #0x2a
	mov r2, #1
	bl sub_02084D04
	cmp r0, #0
	bne _02084938
	b _02084C4E
_02084938:
	mov r0, #0xfa
	lsl r0, r0, #2
	add r0, r4, r0
	mov r1, #1
	bl FillWindowPixelBuffer
	mov r0, #0xc
	str r0, [sp]
	mov r2, #0
	ldr r0, _02084BD4 ; =0x000E0F01
	str r2, [sp, #4]
	str r0, [sp, #8]
	mov r0, #0xfa
	lsl r0, r0, #2
	add r0, r4, r0
	add r4, #0xd8
	add r1, r4, #0
	add r3, r2, #0
	str r2, [sp, #0xc]
	bl sub_02084540
	ldr r0, _02084BD8 ; =0x000005EB
	bl PlaySE
	b _02084C4E
_0208496A:
	add r0, r4, #0
	add r0, #0xd8
	str r0, [sp]
	mov r0, #0x56
	lsl r0, r0, #2
	ldrh r0, [r4, r0]
	mov r1, #0x52
	mov r2, #2
	str r0, [sp, #4]
	mov r0, #0x48
	bl sub_02084D04
	cmp r0, #0
	beq _02084A4A
	mov r0, #0xfa
	lsl r0, r0, #2
	add r0, r4, r0
	mov r1, #1
	bl FillWindowPixelBuffer
	mov r0, #0xc
	str r0, [sp]
	mov r2, #0
	ldr r0, _02084BD4 ; =0x000E0F01
	str r2, [sp, #4]
	str r0, [sp, #8]
	mov r0, #0xfa
	lsl r0, r0, #2
	add r0, r4, r0
	add r4, #0xd8
	add r1, r4, #0
	add r3, r2, #0
	str r2, [sp, #0xc]
	bl sub_02084540
	ldr r0, _02084BD8 ; =0x000005EB
	bl PlaySE
	b _02084C4E
_020849B8:
	mov r3, #0x56
	lsl r3, r3, #2
	ldrh r3, [r4, r3]
	add r2, r4, #0
	mov r0, #0
	mov r1, #0x52
	add r2, #0xd8
	bl sub_02084C98
	cmp r0, #0
	beq _02084A4A
	mov r0, #0xfa
	lsl r0, r0, #2
	add r0, r4, r0
	mov r1, #1
	bl FillWindowPixelBuffer
	mov r0, #0xc
	str r0, [sp]
	mov r2, #0
	add r1, r4, #0
	ldr r0, _02084BD4 ; =0x000E0F01
	str r2, [sp, #4]
	str r0, [sp, #8]
	mov r0, #0xfa
	lsl r0, r0, #2
	add r0, r4, r0
	add r1, #0xd8
	add r3, r2, #0
	str r2, [sp, #0xc]
	bl sub_02084540
	mov r0, #0x4a
	lsl r0, r0, #4
	ldr r1, [r4, r0]
	add r1, r1, #1
	str r1, [r4, r0]
	ldr r0, _02084BD8 ; =0x000005EB
	bl PlaySE
	b _02084C4E
_02084A0A:
	mov r1, #0x46
	lsl r1, r1, #4
	ldr r0, _02084BC8 ; =0x0000E002
	ldr r2, [r4, r1]
	sub r5, r5, r0
	cmp r2, r5
	beq _02084A4A
	mov r2, #0
	sub r0, r1, #4
	str r2, [r4, r0]
	str r5, [r4, r1]
	add r0, r4, #0
	ldr r1, [r4, r1]
	add r0, #0x3a
	bl sub_02084830
	mov r0, #0x49
	lsl r0, r0, #4
	add r2, r4, r0
	lsl r1, r5, #2
	ldr r0, [r2, r1]
	add r0, r0, #1
	str r0, [r2, r1]
	ldr r0, _02084BDC ; =0x0000069D
	bl PlaySE
	b _02084C4E
_02084A40:
	mov r1, #0x56
	lsl r1, r1, #2
	ldrh r0, [r4, r1]
	cmp r0, #0
	bne _02084A4C
_02084A4A:
	b _02084C4E
_02084A4C:
	sub r0, r0, #1
	lsl r0, r0, #1
	add r0, r4, r0
	ldr r2, _02084BE0 ; =0x0000FFFF
	add r0, #0xd8
	strh r2, [r0]
	ldrh r0, [r4, r1]
	sub r0, r0, #1
	strh r0, [r4, r1]
	mov r0, #0xfa
	lsl r0, r0, #2
	add r0, r4, r0
	mov r1, #1
	bl FillWindowPixelBuffer
	mov r0, #0x56
	lsl r0, r0, #2
	ldrh r0, [r4, r0]
	cmp r0, #0
	bne _02084A80
	mov r0, #0xfa
	lsl r0, r0, #2
	add r0, r4, r0
	bl CopyWindowToVram
	b _02084A9E
_02084A80:
	mov r0, #0xc
	str r0, [sp]
	mov r2, #0
	ldr r0, _02084BD4 ; =0x000E0F01
	str r2, [sp, #4]
	str r0, [sp, #8]
	mov r0, #0xfa
	lsl r0, r0, #2
	add r1, r4, #0
	add r0, r4, r0
	add r1, #0xd8
	add r3, r2, #0
	str r2, [sp, #0xc]
	bl sub_02084540
_02084A9E:
	ldr r0, _02084BE4 ; =0x000004C4
	mov r3, #0x5f
	add r1, r4, r0
	lsl r3, r3, #2
	str r1, [sp]
	ldr r1, [r4, r3]
	add r2, r3, #0
	str r1, [sp, #4]
	sub r2, #0x24
	sub r0, #0xcc
	add r1, r4, #0
	sub r3, #0x22
	ldrh r2, [r4, r2]
	add r0, r4, r0
	add r1, #0xd8
	add r3, r4, r3
	bl sub_02084740
	mov r1, #0x56
	lsl r1, r1, #2
	mov r0, #0xd9
	lsl r0, r0, #2
	ldrh r1, [r4, r1]
	ldr r2, [r4, #0xc]
	add r0, r4, r0
	bl sub_02084E18
	ldr r0, _02084BE8 ; =0x000004A4
	ldr r1, [r4, r0]
	add r1, r1, #1
	str r1, [r4, r0]
	ldr r0, _02084BEC ; =0x000005DC
	bl PlaySE
	b _02084C4E
_02084AE4:
	ldr r0, _02084BF0 ; =0x000005C4
	ldr r0, [r4, r0]
	bl sub_020164C4
	ldr r0, [r4, #0x14]
	cmp r0, #0
	bne _02084B26
	ldr r0, _02084BF4 ; =0x000005E2
	bl PlaySE
	ldr r0, _02084BF8 ; =0x000004A8
	ldr r1, [r4, r0]
	add r1, r1, #1
	str r1, [r4, r0]
	mov r1, #0
	mov r0, #0x10
	str r0, [sp]
	mov r0, #1
	str r0, [sp, #4]
	mov r0, #0x12
	str r0, [sp, #8]
	mov r0, #2
	add r2, r1, #0
	add r3, r1, #0
	bl sub_0200FA24
	add r0, r4, #0
	add r1, r6, #0
	bl sub_02084C58
	add sp, #0x10
	mov r0, #3
	pop {r4, r5, r6, pc}
_02084B26:
	ldr r0, _02084BFC ; =0x0000045C
	mov r1, #5
	str r1, [r4, r0]
	b _02084C4E
_02084B2E:
	mov r0, #0x46
	lsl r0, r0, #4
	ldr r0, [r4, r0]
	cmp r0, #4
	bne _02084B42
	cmp r5, #1
	bne _02084B42
	add sp, #0x10
	mov r0, #2
	pop {r4, r5, r6, pc}
_02084B42:
	mov r0, #0x56
	lsl r0, r0, #2
	ldrh r1, [r4, r0]
	ldr r0, [r4, #0xc]
	cmp r1, r0
	beq _02084C4E
	lsl r0, r1, #1
	add r0, r4, r0
	add r0, #0xd8
	strh r5, [r0]
	mov r0, #0xfa
	lsl r0, r0, #2
	add r0, r4, r0
	mov r1, #1
	bl FillWindowPixelBuffer
	mov r0, #0xc
	str r0, [sp]
	mov r2, #0
	add r1, r4, #0
	ldr r0, _02084BD4 ; =0x000E0F01
	str r2, [sp, #4]
	str r0, [sp, #8]
	mov r0, #0xfa
	lsl r0, r0, #2
	add r0, r4, r0
	add r1, #0xd8
	add r3, r2, #0
	str r2, [sp, #0xc]
	bl sub_02084540
	mov r1, #0x56
	lsl r1, r1, #2
	ldrh r0, [r4, r1]
	add r0, r0, #1
	strh r0, [r4, r1]
	mov r0, #0xd9
	lsl r0, r0, #2
	ldrh r1, [r4, r1]
	ldr r2, [r4, #0xc]
	add r0, r4, r0
	bl sub_02084E18
	ldr r0, _02084BD8 ; =0x000005EB
	bl PlaySE
	mov r0, #0xd3
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #1
	bl sub_02024830
	mov r0, #0xd3
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #1
	bl sub_02024B78
	mov r3, #8
	ldr r0, _02084C00 ; =0x04000050
	b _02084C04
	.balign 4, 0
_02084BBC: .word 0x00002FFD
_02084BC0: .word 0x00001FFE
_02084BC4: .word gMain + 0x40
_02084BC8: .word 0x0000E002
_02084BCC: .word 0x0000D002
_02084BD0: .word 0x0000D001
_02084BD4: .word 0x000E0F01
_02084BD8: .word 0x000005EB
_02084BDC: .word 0x0000069D
_02084BE0: .word 0x0000FFFF
_02084BE4: .word 0x000004C4
_02084BE8: .word 0x000004A4
_02084BEC: .word 0x000005DC
_02084BF0: .word 0x000005C4
_02084BF4: .word 0x000005E2
_02084BF8: .word 0x000004A8
_02084BFC: .word 0x0000045C
_02084C00: .word 0x04000050
_02084C04:
	mov r1, #0
	mov r2, #7
	str r3, [sp]
	bl sub_020CF15C
	mov r0, #0xd3
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0x3c
	bl sub_020248F0
	mov r0, #0x56
	lsl r0, r0, #2
	ldrh r1, [r4, r0]
	ldr r0, [r4, #0xc]
	cmp r1, r0
	bne _02084C2A
	mov r0, #1
	str r0, [r4, #0x34]
_02084C2A:
	ldr r0, _02084C54 ; =0x000004C4
	mov r3, #0x5f
	add r1, r4, r0
	lsl r3, r3, #2
	str r1, [sp]
	ldr r1, [r4, r3]
	add r2, r3, #0
	str r1, [sp, #4]
	sub r2, #0x24
	sub r0, #0xcc
	add r1, r4, #0
	sub r3, #0x22
	ldrh r2, [r4, r2]
	add r0, r4, r0
	add r1, #0xd8
	add r3, r4, r3
	bl sub_02084740
_02084C4E:
	mov r0, #2
	add sp, #0x10
	pop {r4, r5, r6, pc}
	.balign 4, 0
_02084C54: .word 0x000004C4
	thumb_func_end sub_02084884

	thumb_func_start sub_02084C58
sub_02084C58: ; 0x02084C58
	push {r3, lr}
	mov r2, #0x5d
	lsl r2, r2, #4
	ldr r0, [r0, r2]
	cmp r0, #0
	beq _02084C76
	cmp r1, #1
	bne _02084C70
	mov r1, #0
	bl sub_02018410
	pop {r3, pc}
_02084C70:
	mov r1, #1
	bl sub_02018410
_02084C76:
	pop {r3, pc}
	thumb_func_end sub_02084C58

	thumb_func_start sub_02084C78
sub_02084C78: ; 0x02084C78
	push {r4, r5, r6, lr}
	add r5, r0, #0
	mov r4, #0
	mov r6, #3
_02084C80:
	add r0, r1, #1
	add r1, r4, #0
	add r2, r6, #0
	bl sub_02084264
	add r1, r0, #0
	lsl r0, r1, #1
	ldrh r0, [r5, r0]
	cmp r0, #1
	beq _02084C80
	pop {r4, r5, r6, pc}
	.balign 4, 0
	thumb_func_end sub_02084C78

	thumb_func_start sub_02084C98
sub_02084C98: ; 0x02084C98
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #8
	add r4, r0, #0
	add r0, r1, #0
	str r2, [sp]
	cmp r3, #0
	bne _02084CAC
	add sp, #8
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_02084CAC:
	sub r1, r3, #1
	lsl r1, r1, #1
	str r1, [sp, #4]
	ldrh r3, [r2, r1]
	cmp r4, r0
	bge _02084CFA
	mov r1, #6
	ldr r2, _02084D00 ; =0x02102422
	mul r1, r4
	add r5, r2, r1
	mov r7, #0
_02084CC2:
	add r2, r7, #0
	add r6, r5, #0
_02084CC6:
	ldrh r1, [r6]
	cmp r3, r1
	bne _02084CEA
	cmp r3, #1
	beq _02084CEA
	mov r0, #6
	ldr r1, _02084D00 ; =0x02102422
	mul r0, r4
	add r0, r1, r0
	add r1, r2, #0
	bl sub_02084C78
	ldr r2, [sp]
	ldr r1, [sp, #4]
	add sp, #8
	strh r0, [r2, r1]
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_02084CEA:
	add r2, r2, #1
	add r6, r6, #2
	cmp r2, #3
	blt _02084CC6
	add r4, r4, #1
	add r5, r5, #6
	cmp r4, r0
	blt _02084CC2
_02084CFA:
	mov r0, #0
	add sp, #8
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_02084D00: .word 0x02102422
	thumb_func_end sub_02084C98

	thumb_func_start sub_02084D04
sub_02084D04: ; 0x02084D04
	push {r3, r4, r5, r6, r7, lr}
	add r4, r0, #0
	add r0, r1, #0
	ldr r1, [sp, #0x1c]
	mov lr, r2
	mov ip, r3
	cmp r1, #0
	beq _02084D20
	sub r1, r1, #1
	ldr r6, [sp, #0x18]
	lsl r7, r1, #1
	ldrh r5, [r6, r7]
	cmp r5, #1
	bne _02084D24
_02084D20:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_02084D24:
	add r2, r4, #0
	cmp r4, r0
	bge _02084D56
	mov r1, #6
	ldr r3, _02084DFC ; =0x02102422
	mul r1, r4
	add r3, r3, r1
_02084D32:
	ldrh r1, [r3]
	cmp r5, r1
	bne _02084D4E
	add r3, r2, #0
	mov r0, #6
	mul r3, r0
	mov r0, lr
	ldr r2, _02084DFC ; =0x02102422
	lsl r1, r0, #1
	add r0, r2, r3
	ldrh r0, [r1, r0]
	strh r0, [r6, r7]
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_02084D4E:
	add r2, r2, #1
	add r3, r3, #6
	cmp r2, r0
	blt _02084D32
_02084D56:
	cmp r4, r0
	bge _02084D86
	mov r2, lr
	ldr r1, _02084DFC ; =0x02102422
	lsl r2, r2, #1
	add r1, r1, r2
	mov r2, #6
	mul r2, r4
	add r2, r1, r2
_02084D68:
	ldrh r1, [r2]
	cmp r5, r1
	bne _02084D7E
	mov r0, #6
	add r1, r4, #0
	mul r1, r0
	ldr r0, _02084DFC ; =0x02102422
	ldrh r0, [r0, r1]
	strh r0, [r6, r7]
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_02084D7E:
	add r4, r4, #1
	add r2, r2, #6
	cmp r4, r0
	blt _02084D68
_02084D86:
	ldr r1, _02084E00 ; =0x0000D001
	mov r0, ip
	cmp r0, r1
	beq _02084DA0
	add r1, r1, #1
	mov r0, ip
	cmp r0, r1
	beq _02084DC0
	ldr r1, _02084E04 ; =0x0000E006
	mov r0, ip
	cmp r0, r1
	beq _02084DE0
	b _02084DF8
_02084DA0:
	ldr r1, _02084E08 ; =0x021021B8
	mov r2, #0
_02084DA4:
	ldrh r0, [r1]
	cmp r5, r0
	bne _02084DB6
	ldr r0, _02084E0C ; =0x021021BA
	lsl r1, r2, #2
	ldrh r0, [r0, r1]
	strh r0, [r6, r7]
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_02084DB6:
	add r2, r2, #1
	add r1, r1, #4
	cmp r2, #0xc
	blo _02084DA4
	b _02084DF8
_02084DC0:
	ldr r1, _02084E10 ; =0x02102190
	mov r2, #0
_02084DC4:
	ldrh r0, [r1]
	cmp r5, r0
	bne _02084DD6
	ldr r0, _02084E14 ; =0x02102192
	lsl r1, r2, #2
	ldrh r0, [r0, r1]
	strh r0, [r6, r7]
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_02084DD6:
	add r2, r2, #1
	add r1, r1, #4
	cmp r2, #0xa
	blo _02084DC4
	b _02084DF8
_02084DE0:
	cmp r5, #0x26
	bne _02084DEC
	mov r0, #0x24
	strh r0, [r6, r7]
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_02084DEC:
	cmp r5, #0x76
	bne _02084DF8
	mov r0, #0x74
	strh r0, [r6, r7]
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_02084DF8:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_02084DFC: .word 0x02102422
_02084E00: .word 0x0000D001
_02084E04: .word 0x0000E006
_02084E08: .word 0x021021B8
_02084E0C: .word 0x021021BA
_02084E10: .word 0x02102190
_02084E14: .word 0x02102192
	thumb_func_end sub_02084D04

	thumb_func_start sub_02084E18
sub_02084E18: ; 0x02084E18
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #8
	add r6, r2, #0
	mov r4, #0
	str r0, [sp]
	str r1, [sp, #4]
	cmp r6, #0
	ble _02084E3C
	add r5, r0, #0
	mov r7, #0x2b
_02084E2C:
	ldr r0, [r5]
	add r1, r7, #0
	bl sub_020248F0
	add r4, r4, #1
	add r5, r5, #4
	cmp r4, r6
	blt _02084E2C
_02084E3C:
	ldr r0, [sp, #4]
	cmp r0, r6
	beq _02084E4E
	lsl r1, r0, #2
	ldr r0, [sp]
	ldr r0, [r0, r1]
	mov r1, #0x2c
	bl sub_020248F0
_02084E4E:
	add sp, #8
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_02084E18

	thumb_func_start sub_02084E54
sub_02084E54: ; 0x02084E54
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x18
	str r2, [sp, #0x10]
	ldr r2, [sp, #0x30]
	lsl r1, r1, #0x18
	lsr r1, r1, #0x18
	add r5, r0, #0
	str r3, [sp, #0x14]
	str r2, [sp, #0x30]
	bl FillWindowPixelBuffer
	ldr r1, _02084F34 ; =0x02101D44
	ldr r0, [sp, #0x10]
	mov r7, #0
	ldrb r4, [r1, r0]
	mov r6, #0x10
_02084E74:
	mov r0, #0x10
	str r0, [sp]
	mov r0, #0x13
	lsl r2, r6, #0x10
	str r0, [sp, #4]
	add r0, r5, #0
	add r1, r4, #0
	lsr r2, r2, #0x10
	mov r3, #0
	bl FillWindowPixelRect
	mov r0, #0x10
	str r0, [sp]
	mov r0, #0x13
	lsl r2, r6, #0x10
	str r0, [sp, #4]
	add r0, r5, #0
	add r1, r4, #0
	lsr r2, r2, #0x10
	mov r3, #0x26
	bl FillWindowPixelRect
	mov r0, #0x10
	str r0, [sp]
	mov r0, #0x13
	lsl r2, r6, #0x10
	str r0, [sp, #4]
	add r0, r5, #0
	add r1, r4, #0
	lsr r2, r2, #0x10
	mov r3, #0x4c
	bl FillWindowPixelRect
	add r7, r7, #1
	add r6, #0x20
	cmp r7, #6
	blt _02084E74
	mov r7, #0
	add r6, r7, #0
_02084EC2:
	mov r0, #0x10
	str r0, [sp]
	mov r0, #0x13
	lsl r2, r6, #0x10
	str r0, [sp, #4]
	add r0, r5, #0
	add r1, r4, #0
	lsr r2, r2, #0x10
	mov r3, #0x13
	bl FillWindowPixelRect
	mov r0, #0x10
	str r0, [sp]
	mov r0, #0x13
	lsl r2, r6, #0x10
	str r0, [sp, #4]
	add r0, r5, #0
	add r1, r4, #0
	lsr r2, r2, #0x10
	mov r3, #0x39
	bl FillWindowPixelRect
	add r7, r7, #1
	add r6, #0x20
	cmp r7, #7
	blt _02084EC2
	ldr r0, [sp, #0x10]
	mov r1, #0x14
	ldr r2, _02084F38 ; =0x021104F8
	mul r1, r0
	mov r7, #0
	mov r6, #4
	add r4, r2, r1
_02084F04:
	mov r0, #0x10
	str r0, [sp]
	mov r0, #0xff
	str r0, [sp, #4]
	ldr r0, [sp, #0x14]
	mov r2, #0
	str r0, [sp, #8]
	ldr r0, [sp, #0x30]
	add r3, r6, #0
	str r0, [sp, #0xc]
	ldr r1, [r4]
	add r0, r5, #0
	bl sub_02084540
	add r7, r7, #1
	add r6, #0x13
	add r4, r4, #4
	cmp r7, #5
	blt _02084F04
	add r0, r5, #0
	bl CopyWindowToVram
	add sp, #0x18
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_02084F34: .word 0x02101D44
_02084F38: .word 0x021104F8
	thumb_func_end sub_02084E54

	thumb_func_start sub_02084F3C
sub_02084F3C: ; 0x02084F3C
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #8
	add r6, r1, #0
	str r0, [sp]
	mov r7, #0
	add r1, r0, #0
_02084F48:
	ldr r0, [r1]
	cmp r0, #0
	beq _02084F7E
	mov r0, #0
	ldr r4, _02084FC0 ; =0x021021E8
	str r0, [sp, #4]
	add r5, r6, #0
_02084F56:
	ldr r0, [r5]
	ldr r1, [r4, #8]
	bl sub_020248F0
	ldr r0, [sp, #4]
	add r4, #0x10
	add r0, r0, #1
	add r5, r5, #4
	str r0, [sp, #4]
	cmp r0, #3
	blt _02084F56
	ldr r1, _02084FC4 ; =0x021021F0
	lsl r2, r7, #4
	lsl r0, r7, #2
	ldr r1, [r1, r2]
	ldr r0, [r6, r0]
	sub r1, r1, #3
	bl sub_020248F0
	b _02084F86
_02084F7E:
	add r7, r7, #1
	add r1, r1, #4
	cmp r7, #3
	blt _02084F48
_02084F86:
	ldr r4, [sp]
	ldr r5, _02084FC8 ; =0x02102238
	mov r7, #5
	add r4, #0x14
	add r6, #0x14
_02084F90:
	ldr r0, [r4]
	cmp r0, #0
	beq _02084FA0
	ldr r1, [r5, #8]
	ldr r0, [r6]
	add r1, r1, #1
	bl sub_020248F0
_02084FA0:
	add r7, r7, #1
	add r4, r4, #4
	add r5, #0x10
	add r6, r6, #4
	cmp r7, #7
	blt _02084F90
	mov r2, #0
	add r1, r2, #0
_02084FB0:
	ldr r0, [sp]
	add r2, r2, #1
	stmia r0!, {r1}
	str r0, [sp]
	cmp r2, #7
	blt _02084FB0
	add sp, #8
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_02084FC0: .word 0x021021E8
_02084FC4: .word 0x021021F0
_02084FC8: .word 0x02102238
	thumb_func_end sub_02084F3C

	thumb_func_start sub_02084FCC
sub_02084FCC: ; 0x02084FCC
	push {r4, lr}
	add r4, r0, #0
	mov r0, #0xd3
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	bl sub_02024B68
	cmp r0, #0
	bne _02085038
	mov r0, #0x56
	lsl r0, r0, #2
	ldrh r1, [r4, r0]
	ldr r0, [r4, #0xc]
	cmp r1, r0
	bne _02085004
	mov r0, #0xc
	str r0, [r4, #0x1c]
	mov r0, #0
	str r0, [r4, #0x20]
	mov r0, #0xd3
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0x27
	bl sub_020248F0
	mov r0, #0
	str r0, [r4, #0x34]
	b _02085010
_02085004:
	mov r0, #0xd3
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0x27
	bl sub_020248F0
_02085010:
	ldr r0, [r4, #0x30]
	cmp r0, #0
	bne _02085024
	mov r0, #0xd3
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0
	bl sub_02024830
	b _0208502C
_02085024:
	add r0, r4, #0
	mov r1, #0
	bl sub_02084430
_0208502C:
	mov r0, #0xd3
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0
	bl sub_02024B78
_02085038:
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_02084FCC

	thumb_func_start sub_0208503C
sub_0208503C: ; 0x0208503C
	push {r3, r4, r5, r6, r7, lr}
	str r0, [sp]
	mov r0, #0
	mov ip, r0
	ldr r0, [sp]
	ldr r0, [r0]
	cmp r0, #4
	bne _02085050
	mov r0, #4
	mov ip, r0
_02085050:
	ldr r2, _020850EC ; =gMain + 0x40
	ldrh r0, [r2, #0x24]
	cmp r0, #0
	beq _020850E6
	ldrh r0, [r2, #0x20]
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	mov lr, r0
	ldrh r0, [r2, #0x22]
	lsl r0, r0, #0x18
	lsr r7, r0, #0x18
	mov r0, ip
	cmp r0, #0x47
	bhs _020850E6
	mov r0, #6
	mov r2, ip
	mul r0, r2
	ldr r2, _020850F0 ; =0x02102278
	add r2, r2, r0
	add r3, r2, #0
_02085078:
	ldrh r4, [r3, #2]
	ldrb r0, [r2]
	ldrb r6, [r2, #1]
	lsl r4, r4, #0x1e
	lsr r4, r4, #0x1e
	beq _0208508E
	cmp r4, #1
	beq _02085094
	cmp r4, #2
	beq _0208509A
	b _0208509E
_0208508E:
	mov r5, #0x1f
	mov r1, #0x16
	b _0208509E
_02085094:
	mov r5, #0x20
	mov r1, #0x16
	b _0208509E
_0208509A:
	mov r5, #0x10
	mov r1, #0x13
_0208509E:
	mov r4, lr
	cmp r4, r0
	blo _020850D8
	cmp r7, r6
	blo _020850D8
	add r4, r0, r5
	mov r0, lr
	cmp r0, r4
	bgt _020850D8
	add r0, r6, r1
	cmp r7, r0
	bgt _020850D8
	ldr r2, _020850F0 ; =0x02102278
	mov r1, #6
	mov r0, ip
	mul r1, r0
	add r2, r2, r1
	ldrb r0, [r2, #4]
	lsl r0, r0, #0x1b
	lsr r1, r0, #0x1b
	ldr r0, [sp]
	str r1, [r0, #0x1c]
	ldrb r0, [r2, #5]
	lsl r0, r0, #0x1b
	lsr r1, r0, #0x1b
	ldr r0, [sp]
	str r1, [r0, #0x20]
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_020850D8:
	mov r0, ip
	add r0, r0, #1
	add r2, r2, #6
	add r3, r3, #6
	mov ip, r0
	cmp r0, #0x47
	blo _02085078
_020850E6:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
	nop
_020850EC: .word gMain + 0x40
_020850F0: .word 0x02102278
	thumb_func_end sub_0208503C

	thumb_func_start sub_020850F4
sub_020850F4: ; 0x020850F4
	push {r3, r4, r5, lr}
	mov r2, #1
	add r5, r0, #0
	mov r0, #3
	mov r1, #0x6c
	lsl r2, r2, #0x12
	bl CreateHeap
	mov r1, #0xfd
	add r0, r5, #0
	lsl r1, r1, #2
	mov r2, #0x6c
	bl OverlayManager_CreateAndGetData
	mov r2, #0xfd
	mov r1, #0
	lsl r2, r2, #2
	add r4, r0, #0
	bl memset
	add r0, r5, #0
	bl OverlayManager_GetField18
	add r5, r0, #0
	mov r0, #0xee
	lsl r0, r0, #2
	add r3, r4, r0
	mov r2, #6
_0208512C:
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	sub r2, r2, #1
	bne _0208512C
	ldr r0, [r5]
	str r0, [r3]
	mov r0, #0
	add r1, r0, #0
	bl sub_0201A0FC
	bl sub_0201A108
	bl sub_02022C54
	bl sub_02022CBC
	mov r2, #1
	lsl r2, r2, #0x1a
	ldr r1, [r2]
	ldr r0, _02085238 ; =0xFFFFE0FF
	and r1, r0
	str r1, [r2]
	ldr r2, _0208523C ; =0x04001000
	ldr r1, [r2]
	and r0, r1
	str r0, [r2]
	mov r0, #0xbe
	mov r1, #0x6c
	bl NARC_ctor
	mov r1, #0xbb
	lsl r1, r1, #2
	str r0, [r4, r1]
	mov r0, #0x6c
	bl sub_0201AC88
	mov r1, #0xbe
	lsl r1, r1, #2
	str r0, [r4, r1]
	mov r0, #0x6c
	bl sub_020030E8
	mov r1, #0xbf
	lsl r1, r1, #2
	str r0, [r4, r1]
	ldr r0, [r4, r1]
	mov r1, #1
	bl sub_02003B50
	mov r2, #0xbf
	lsl r2, r2, #2
	ldr r0, [r4, r2]
	mov r1, #0
	sub r2, #0xfc
	mov r3, #0x6c
	bl PaletteData_AllocBuffers
	mov r0, #0xbf
	lsl r0, r0, #2
	mov r1, #1
	ldr r0, [r4, r0]
	lsl r2, r1, #9
	mov r3, #0x6c
	bl PaletteData_AllocBuffers
	mov r0, #0xbf
	lsl r0, r0, #2
	mov r1, #2
	ldr r0, [r4, r0]
	lsl r2, r1, #8
	mov r3, #0x6c
	bl PaletteData_AllocBuffers
	mov r2, #0xbf
	lsl r2, r2, #2
	ldr r0, [r4, r2]
	mov r1, #3
	sub r2, #0xfc
	mov r3, #0x6c
	bl PaletteData_AllocBuffers
	mov r0, #0xbe
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	bl sub_0208545C
	add r0, r4, #0
	bl sub_020863F4
	add r0, r4, #0
	bl sub_02085688
	bl sub_020210BC
	mov r0, #4
	bl sub_02021148
	add r0, r4, #0
	bl sub_020860B8
	mov r0, #0xfa
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	cmp r0, #0
	beq _0208520A
	bl sub_0203A880
	mov r0, #1
	mov r1, #0x6c
	bl sub_0203A948
_0208520A:
	mov r0, #7
	str r0, [sp]
	ldr r0, _02085240 ; =0x04000050
	mov r1, #0
	mov r2, #6
	mov r3, #0xf
	bl sub_020CF15C
	mov r0, #8
	str r0, [sp]
	ldr r0, _02085244 ; =0x04001050
	mov r1, #0
	mov r2, #0xe
	mov r3, #7
	bl sub_020CF15C
	ldr r0, _02085248 ; =sub_020855CC
	add r1, r4, #0
	bl sub_0201A0FC
	mov r0, #1
	pop {r3, r4, r5, pc}
	nop
_02085238: .word 0xFFFFE0FF
_0208523C: .word 0x04001000
_02085240: .word 0x04000050
_02085244: .word 0x04001050
_02085248: .word sub_020855CC
	thumb_func_end sub_020850F4

	thumb_func_start sub_0208524C
sub_0208524C: ; 0x0208524C
	push {r3, r4, r5, lr}
	bl OverlayManager_GetData
	add r4, r0, #0
	bl sub_02085BEC
	add r5, r0, #0
	mov r0, #0xfa
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	cmp r0, #0
	beq _02085270
	bl ov00_021EC9D4
	mov r1, #3
	sub r0, r1, r0
	bl sub_0203A930
_02085270:
	cmp r5, #0
	beq _02085278
	mov r0, #1
	pop {r3, r4, r5, pc}
_02085278:
	mov r0, #0
	pop {r3, r4, r5, pc}
	thumb_func_end sub_0208524C

	thumb_func_start sub_0208527C
sub_0208527C: ; 0x0208527C
	push {r3, r4, r5, lr}
	add r5, r0, #0
	bl OverlayManager_GetData
	add r4, r0, #0
	mov r0, #0xfa
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	cmp r0, #0
	beq _02085294
	bl sub_0203A914
_02085294:
	add r0, r4, #0
	bl sub_020866CC
	mov r0, #1
	mov r1, #0
	bl GX_EngineAToggleLayers
	mov r0, #2
	mov r1, #0
	bl GX_EngineAToggleLayers
	mov r0, #4
	mov r1, #0
	bl GX_EngineAToggleLayers
	mov r0, #8
	mov r1, #0
	bl GX_EngineAToggleLayers
	mov r0, #1
	mov r1, #0
	bl sub_02022CC8
	mov r0, #2
	mov r1, #0
	bl sub_02022CC8
	mov r0, #4
	mov r1, #0
	bl sub_02022CC8
	mov r0, #8
	mov r1, #0
	bl sub_02022CC8
	mov r0, #0xbe
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #1
	bl sub_0201BB4C
	mov r0, #0xbe
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #2
	bl sub_0201BB4C
	mov r0, #0xbe
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #3
	bl sub_0201BB4C
	mov r0, #0xbe
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #4
	bl sub_0201BB4C
	mov r0, #0xbe
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #5
	bl sub_0201BB4C
	mov r0, #0xbe
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #6
	bl sub_0201BB4C
	mov r0, #0xbe
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #7
	bl sub_0201BB4C
	mov r0, #0xbe
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	bl FreeToHeap
	mov r0, #0xbf
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0
	bl PaletteData_FreeBuffers
	mov r0, #0xbf
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #1
	bl PaletteData_FreeBuffers
	mov r0, #0xbf
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #2
	bl PaletteData_FreeBuffers
	mov r0, #0xbf
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #3
	bl PaletteData_FreeBuffers
	mov r0, #0xbf
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	bl sub_02003104
	mov r0, #0xbb
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	bl NARC_dtor
	bl sub_02021238
	mov r1, #0x2f
	lsl r1, r1, #4
	ldr r0, [r4, r1]
	add r1, r1, #4
	ldr r1, [r4, r1]
	bl sub_0200D998
	mov r0, #0x2f
	lsl r0, r0, #4
	ldr r0, [r4, r0]
	bl sub_0200D108
	mov r0, #3
	lsl r0, r0, #8
	ldr r0, [r4, r0]
	bl sub_02026CAC
	add r0, r5, #0
	bl OverlayManager_FreeData
	mov r0, #0x6c
	bl DestroyHeap
	mov r0, #1
	pop {r3, r4, r5, pc}
	.balign 4, 0
	thumb_func_end sub_0208527C

	thumb_func_start sub_020853B4
sub_020853B4: ; 0x020853B4
	push {r3, r4, r5, r6, r7, lr}
	add r6, r1, #0
	str r0, [sp]
	mov r1, #0x34
	add r5, r2, #0
	add r7, r3, #0
	bl AllocFromHeap
	add r4, r0, #0
	ldr r1, [sp]
	add r0, r6, #1
	str r6, [r4]
	bl String_ctor
	str r0, [r4, #0x1c]
	str r7, [r4, #0x20]
	mov r2, #0
	add r1, r5, #0
	add r3, r4, #0
_020853DA:
	ldr r0, [r1]
	add r2, r2, #1
	str r0, [r3, #4]
	add r1, r1, #4
	add r3, r3, #4
	cmp r2, #4
	blt _020853DA
	sub r0, r2, #1
	lsl r0, r0, #2
	ldr r1, [r5, r0]
	lsl r0, r2, #2
	add r0, r4, r0
	str r1, [r0, #4]
	ldr r0, [sp, #0x18]
	str r0, [r4, #0x2c]
	ldr r0, [sp, #0x1c]
	str r0, [r4, #0x30]
	add r0, r4, #0
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_020853B4

	thumb_func_start sub_02085400
sub_02085400: ; 0x02085400
	push {r4, lr}
	sub sp, #8
	ldr r4, [sp, #0x10]
	str r4, [sp]
	ldr r4, [sp, #0x14]
	str r4, [sp, #4]
	bl sub_020853B4
	mov r1, #0
	str r1, [r0, #0x24]
	str r1, [r0, #0x28]
	add sp, #8
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_02085400

	thumb_func_start sub_0208541C
sub_0208541C: ; 0x0208541C
	push {r4, lr}
	sub sp, #8
	ldr r4, [sp, #0x10]
	str r4, [sp]
	ldr r4, [sp, #0x14]
	str r4, [sp, #4]
	bl sub_020853B4
	ldr r1, [sp, #0x18]
	str r1, [r0, #0x24]
	ldr r1, [sp, #0x1c]
	str r1, [r0, #0x28]
	add sp, #8
	pop {r4, pc}
	thumb_func_end sub_0208541C

	thumb_func_start sub_02085438
sub_02085438: ; 0x02085438
	push {r4, lr}
	add r4, r0, #0
	ldr r0, [r4, #0x1c]
	cmp r0, #0
	bne _02085446
	bl GF_AssertFail
_02085446:
	cmp r4, #0
	bne _0208544E
	bl GF_AssertFail
_0208544E:
	ldr r0, [r4, #0x1c]
	bl String_dtor
	add r0, r4, #0
	bl FreeToHeap
	pop {r4, pc}
	thumb_func_end sub_02085438

	thumb_func_start sub_0208545C
sub_0208545C: ; 0x0208545C
	push {r4, r5, lr}
	sub sp, #0xec
	add r4, r0, #0
	bl sub_02022C54
	ldr r5, _020855BC ; =0x02102630
	add r3, sp, #0
	mov r2, #5
_0208546C:
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	sub r2, r2, #1
	bne _0208546C
	add r0, sp, #0
	bl GX_SetBanks
	mov r1, #6
	mov r2, #2
	mov r0, #0
	lsl r1, r1, #0x18
	lsl r2, r2, #0x12
	bl MIi_CpuClear32
	mov r1, #0x62
	mov r2, #2
	mov r0, #0
	lsl r1, r1, #0x14
	lsl r2, r2, #0x10
	bl MIi_CpuClear32
	mov r1, #0x19
	mov r2, #1
	mov r0, #0
	lsl r1, r1, #0x16
	lsl r2, r2, #0x12
	bl MIi_CpuClear32
	mov r1, #0x66
	mov r2, #2
	mov r0, #0
	lsl r1, r1, #0x14
	lsl r2, r2, #0x10
	bl MIi_CpuClear32
	ldr r5, _020855C0 ; =0x02102658
	add r3, sp, #0x98
	mov r2, #0xa
_020854B8:
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	sub r2, r2, #1
	bne _020854B8
	ldr r0, [r5]
	mov r1, #1
	str r0, [r3]
	add r0, r4, #0
	add r2, sp, #0x98
	mov r3, #0
	bl sub_0201B1E4
	add r0, r4, #0
	mov r1, #2
	add r2, sp, #0xb4
	mov r3, #0
	bl sub_0201B1E4
	add r0, r4, #0
	mov r1, #3
	add r2, sp, #0xd0
	mov r3, #0
	bl sub_0201B1E4
	add r0, r4, #0
	mov r1, #1
	bl sub_0201CAE0
	add r0, r4, #0
	mov r1, #2
	bl sub_0201CAE0
	add r0, r4, #0
	mov r1, #3
	bl sub_0201CAE0
	mov r0, #1
	mov r1, #0
	bl GX_EngineAToggleLayers
	mov r0, #2
	mov r1, #1
	bl GX_EngineAToggleLayers
	mov r0, #4
	mov r1, #0
	bl GX_EngineAToggleLayers
	mov r0, #8
	mov r1, #0
	bl GX_EngineAToggleLayers
	ldr r5, _020855C4 ; =0x021026AC
	add r3, sp, #0x28
	mov r2, #0xe
_02085526:
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	sub r2, r2, #1
	bne _02085526
	add r0, r4, #0
	mov r1, #4
	add r2, sp, #0x28
	mov r3, #0
	bl sub_0201B1E4
	add r0, r4, #0
	mov r1, #5
	add r2, sp, #0x44
	mov r3, #0
	bl sub_0201B1E4
	add r0, r4, #0
	mov r1, #6
	add r2, sp, #0x60
	mov r3, #0
	bl sub_0201B1E4
	add r0, r4, #0
	mov r1, #7
	add r2, sp, #0x7c
	mov r3, #0
	bl sub_0201B1E4
	add r0, r4, #0
	mov r1, #4
	bl sub_0201CAE0
	add r0, r4, #0
	mov r1, #5
	bl sub_0201CAE0
	add r0, r4, #0
	mov r1, #6
	bl sub_0201CAE0
	add r0, r4, #0
	mov r1, #7
	bl sub_0201CAE0
	mov r0, #1
	add r1, r0, #0
	bl sub_02022CC8
	mov r0, #2
	mov r1, #1
	bl sub_02022CC8
	mov r0, #4
	mov r1, #0
	bl sub_02022CC8
	mov r0, #8
	mov r1, #0
	bl sub_02022CC8
	ldr r0, _020855C8 ; =gMain + 0x60
	mov r1, #1
	strb r1, [r0, #9]
	bl sub_02022D3C
	mov r0, #0x10
	mov r1, #1
	bl GX_EngineAToggleLayers
	mov r0, #0x10
	mov r1, #1
	bl sub_02022CC8
	add sp, #0xec
	pop {r4, r5, pc}
	.balign 4, 0
_020855BC: .word 0x02102630
_020855C0: .word 0x02102658
_020855C4: .word 0x021026AC
_020855C8: .word gMain + 0x60
	thumb_func_end sub_0208545C

	thumb_func_start sub_020855CC
sub_020855CC: ; 0x020855CC
	push {r4, lr}
	add r4, r0, #0
	bl sub_0202061C
	bl sub_0200D034
	mov r0, #0xbf
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	bl sub_0200398C
	mov r0, #0xbe
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	bl sub_0201EEB4
	ldr r3, _020855FC ; =OSi_IntrTable
	ldr r1, _02085600 ; =0x00003FF8
	mov r0, #1
	ldr r2, [r3, r1]
	orr r0, r2
	str r0, [r3, r1]
	pop {r4, pc}
	nop
_020855FC: .word OSi_IntrTable
_02085600: .word 0x00003FF8
	thumb_func_end sub_020855CC

	thumb_func_start sub_02085604
sub_02085604: ; 0x02085604
	push {r3, r4}
	mov r2, #0xb5
	lsl r2, r2, #2
	ldr r4, [r0, r2]
	add r3, r2, #4
	str r4, [r0, r3]
	str r1, [r0, r2]
	add r1, r2, #0
	mov r3, #0
	add r1, #8
	str r3, [r0, r1]
	add r1, r2, #0
	add r1, #0xc
	str r3, [r0, r1]
	add r1, r2, #0
	add r1, #0x10
	str r3, [r0, r1]
	add r1, r2, #0
	add r1, #0x14
	str r3, [r0, r1]
	ldr r1, [r0, r2]
	cmp r1, #0
	beq _02085656
	sub r1, r1, #1
	lsl r1, r1, #2
	add r3, r0, r1
	add r1, r2, #0
	sub r1, #0x2a
	ldrh r3, [r3, r1]
	add r1, r2, #0
	add r1, #8
	str r3, [r0, r1]
	ldr r1, [r0, r2]
	sub r1, r1, #1
	lsl r1, r1, #2
	add r3, r0, r1
	add r1, r2, #0
	sub r1, #0x28
	ldrh r1, [r3, r1]
	add r2, #0xc
	str r1, [r0, r2]
_02085656:
	mov r2, #0xb6
	lsl r2, r2, #2
	ldr r1, [r0, r2]
	cmp r1, #0
	beq _02085684
	sub r1, r1, #1
	lsl r1, r1, #2
	add r3, r0, r1
	add r1, r2, #0
	sub r1, #0x2e
	ldrh r3, [r3, r1]
	add r1, r2, #0
	add r1, #0xc
	str r3, [r0, r1]
	ldr r1, [r0, r2]
	sub r1, r1, #1
	lsl r1, r1, #2
	add r3, r0, r1
	add r1, r2, #0
	sub r1, #0x2c
	ldrh r1, [r3, r1]
	add r2, #0x10
	str r1, [r0, r2]
_02085684:
	pop {r3, r4}
	bx lr
	thumb_func_end sub_02085604

	thumb_func_start sub_02085688
sub_02085688: ; 0x02085688
	push {r3, r4, r5, r6, r7, lr}
	add r4, r0, #0
	mov r0, #0xdd
	lsl r0, r0, #2
	mov r1, #1
	str r1, [r4, r0]
	add r7, r0, #0
	mov r5, #0
	mov r1, #0xab
	add r3, r5, #0
	add r6, r4, #0
	sub r7, #0xca
	add r0, #0x48
	lsl r1, r1, #2
_020856A4:
	strh r5, [r6, r7]
	ldr r2, [r6, r0]
	add r3, r3, #1
	add r2, r5, r2
	lsl r2, r2, #0x10
	lsr r5, r2, #0x10
	strh r5, [r6, r1]
	add r6, r6, #4
	cmp r3, #5
	blt _020856A4
	mov r1, #0xf7
	lsl r1, r1, #2
	ldr r1, [r4, r1]
	add r0, r4, #0
	add r1, r1, #1
	bl sub_02085604
	mov r1, #0xfb
	lsl r1, r1, #2
	mov r0, #0x2d
	add r7, r1, #0
	mov r6, #0
	add r5, r4, #0
	lsl r0, r0, #4
	sub r7, #0x30
_020856D6:
	ldr r3, [r5, r7]
	cmp r3, #0
	beq _020856F0
	ldr r2, [r4, r0]
	add r6, r6, #1
	add r2, r2, r3
	str r2, [r4, r0]
	ldr r2, [r4, r1]
	add r5, r5, #4
	add r2, r2, #1
	str r2, [r4, r1]
	cmp r6, #4
	blt _020856D6
_020856F0:
	mov r0, #0xfb
	lsl r0, r0, #2
	ldr r1, [r4, r0]
	ldr r7, _02085804 ; =0x000002A2
	sub r1, r1, #1
	str r1, [r4, r0]
	mov r1, #0x2d
	lsl r1, r1, #4
	ldr r2, [r4, r1]
	ldr r0, [r4, r0]
	sub r1, #0x30
	add r0, r2, r0
	lsl r2, r0, #3
	lsr r0, r2, #0x1f
	add r0, r2, r0
	asr r2, r0, #1
	mov r0, #0x70
	sub r0, r0, r2
	strh r0, [r4, r1]
	mov r6, #0
	add r3, r4, #0
	add r5, r4, #0
_0208571C:
	mov r0, #0xef
	lsl r0, r0, #2
	ldr r2, [r3, r0]
	add r0, #0x30
	ldr r0, [r4, r0]
	add r6, r6, #1
	lsl r1, r0, #3
	mov r0, #0x2d
	lsl r0, r0, #4
	ldr r0, [r4, r0]
	add r3, r3, #4
	sub r0, r0, r2
	lsl r0, r0, #3
	lsl r2, r2, #5
	add r0, r0, r2
	add r1, r1, r0
	lsr r0, r1, #0x1f
	add r0, r1, r0
	asr r1, r0, #1
	mov r0, #0x70
	sub r0, r0, r1
	strh r0, [r5, r7]
	add r5, r5, #2
	cmp r6, #4
	blt _0208571C
	ldr r0, _02085804 ; =0x000002A2
	ldrsh r1, [r4, r0]
	add r1, #0xc
	strh r1, [r4, r0]
	mov r1, #0xfb
	lsl r1, r1, #2
	mov r0, #0
	ldr r1, [r4, r1]
	add r3, r0, #0
	cmp r1, #0
	ble _02085788
	mov r7, #7
	mov r6, #0xfb
	add r1, r4, #0
	add r2, r4, #0
	lsl r7, r7, #6
	lsl r6, r6, #2
_02085770:
	mov r5, #0xef
	lsl r5, r5, #2
	ldr r5, [r1, r5]
	add r3, r3, #1
	add r0, r0, r5
	sub r5, r0, #1
	str r5, [r2, r7]
	ldr r5, [r4, r6]
	add r1, r1, #4
	add r2, #0x1c
	cmp r3, r5
	blt _02085770
_02085788:
	mov r3, #0
	mov ip, r3
	str r4, [sp]
	add r2, r4, #0
_02085790:
	mov r1, #0xef
	ldr r5, [sp]
	lsl r1, r1, #2
	ldr r1, [r5, r1]
	mov r0, #0
	cmp r1, #0
	ble _020857BE
	mov r5, ip
	lsl r5, r5, #2
	add r7, r4, r5
	mov r5, ip
	add r1, r2, #0
	add r6, r5, #1
_020857AA:
	mov r5, #0xef
	str r6, [r1, #4]
	lsl r5, r5, #2
	ldr r5, [r7, r5]
	add r0, r0, #1
	add r1, #0x1c
	add r2, #0x1c
	add r3, r3, #1
	cmp r0, r5
	blt _020857AA
_020857BE:
	ldr r0, [sp]
	add r0, r0, #4
	str r0, [sp]
	mov r0, ip
	add r0, r0, #1
	mov ip, r0
	mov r0, #0x2d
	lsl r0, r0, #4
	ldr r0, [r4, r0]
	cmp r3, r0
	blt _02085790
	mov r0, #0xf7
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0
	cmp r0, #0
	ble _02085800
	mov r5, #0x3f
	lsl r5, r5, #4
	add r2, r5, #0
	add r3, r5, #0
	add r0, r4, #0
	sub r2, #0x34
	sub r3, #0x14
_020857EE:
	ldr r6, [r0, r2]
	ldr r7, [r4, r5]
	add r1, r1, #1
	add r6, r7, r6
	str r6, [r4, r5]
	ldr r6, [r4, r3]
	add r0, r0, #4
	cmp r1, r6
	blt _020857EE
_02085800:
	pop {r3, r4, r5, r6, r7, pc}
	nop
_02085804: .word 0x000002A2
	thumb_func_end sub_02085688

	thumb_func_start sub_02085808
sub_02085808: ; 0x02085808
	mov r2, #0xb
	lsl r2, r2, #6
	str r1, [r0, r2]
	mov r3, #0
	add r1, r2, #4
	str r3, [r0, r1]
	add r1, r2, #0
	add r1, #8
	str r3, [r0, r1]
	add r2, #0xc
	str r3, [r0, r2]
	bx lr
	thumb_func_end sub_02085808

	thumb_func_start sub_02085820
sub_02085820: ; 0x02085820
	push {r3, r4, r5, lr}
	sub sp, #0x18
	add r5, r0, #0
	bl sub_02086490
	add r0, r5, #0
	bl sub_02086DA4
	add r0, r5, #0
	bl sub_02086758
	add r0, r5, #0
	mov r1, #0
	bl sub_02086DE4
	add r0, r5, #0
	bl sub_020868A0
	add r0, r5, #0
	bl sub_020869BC
	add r0, r5, #0
	bl sub_02086F44
	add r0, r5, #0
	bl sub_02086FCC
	add r0, r5, #0
	bl sub_02087064
	mov r0, #0x15
	str r0, [sp]
	mov r0, #0x1b
	str r0, [sp, #4]
	mov r3, #2
	mov r1, #0xf9
	str r3, [sp, #8]
	mov r0, #0x64
	lsl r1, r1, #2
	str r0, [sp, #0xc]
	ldr r0, [r5, r1]
	mov r2, #4
	str r0, [sp, #0x10]
	add r0, r1, #0
	sub r0, #0xec
	sub r1, #0x48
	ldr r0, [r5, r0]
	add r1, r5, r1
	bl sub_020871C4
	mov r0, #0xfa
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	cmp r0, #0
	beq _020858B8
	mov r0, #0x6c
	bl sub_0203A4AC
	add r1, sp, #0x14
	add r4, r0, #0
	bl NNS_G2dGetUnpackedPaletteData
	mov r0, #0x20
	str r0, [sp]
	mov r0, #0xbf
	ldr r1, [sp, #0x14]
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	ldr r1, [r1, #0xc]
	mov r2, #3
	mov r3, #0xe0
	bl PaletteData_LoadPalette
	add r0, r4, #0
	bl FreeToHeap
_020858B8:
	add r0, r5, #0
	mov r1, #1
	bl sub_02085808
	mov r0, #6
	str r0, [sp]
	mov r1, #1
	str r1, [sp, #4]
	mov r0, #0x6c
	str r0, [sp, #8]
	mov r0, #0
	add r2, r1, #0
	add r3, r0, #0
	bl sub_0200FA24
	mov r0, #0
	add sp, #0x18
	pop {r3, r4, r5, pc}
	thumb_func_end sub_02085820

	thumb_func_start sub_020858DC
sub_020858DC: ; 0x020858DC
	push {r3, r4, lr}
	sub sp, #0xc
	add r4, r0, #0
	mov r0, #0xb2
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	cmp r0, #0
	beq _020858F2
	cmp r0, #1
	beq _02085916
	b _0208592A
_020858F2:
	mov r0, #6
	str r0, [sp]
	mov r0, #1
	str r0, [sp, #4]
	mov r0, #0x6c
	str r0, [sp, #8]
	mov r0, #0
	add r1, r0, #0
	add r2, r0, #0
	add r3, r0, #0
	bl sub_0200FA24
	mov r0, #0xb2
	lsl r0, r0, #2
	ldr r1, [r4, r0]
	add r1, r1, #1
	str r1, [r4, r0]
	b _02085930
_02085916:
	bl sub_0200FB5C
	cmp r0, #1
	bne _02085930
	mov r0, #0xb2
	lsl r0, r0, #2
	ldr r1, [r4, r0]
	add r1, r1, #1
	str r1, [r4, r0]
	b _02085930
_0208592A:
	add sp, #0xc
	mov r0, #1
	pop {r3, r4, pc}
_02085930:
	mov r0, #0
	add sp, #0xc
	pop {r3, r4, pc}
	.balign 4, 0
	thumb_func_end sub_020858DC

	thumb_func_start sub_02085938
sub_02085938: ; 0x02085938
	push {r4, lr}
	mov r1, #0xb2
	add r4, r0, #0
	lsl r1, r1, #2
	ldr r1, [r4, r1]
	cmp r1, #0
	bne _0208595A
	bl sub_0200FB5C
	cmp r0, #1
	bne _0208596E
	mov r0, #0xb2
	lsl r0, r0, #2
	ldr r1, [r4, r0]
	add r1, r1, #1
	str r1, [r4, r0]
	b _0208596E
_0208595A:
	bl sub_02086328
	mov r0, #3
	lsl r0, r0, #8
	ldr r0, [r4, r0]
	bl sub_02026CC4
	add r0, r4, #0
	bl sub_02085C20
_0208596E:
	mov r0, #0
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_02085938

	thumb_func_start sub_02085974
sub_02085974: ; 0x02085974
	push {r3, r4, r5, r6, r7, lr}
	mov r1, #0xb2
	add r5, r0, #0
	lsl r1, r1, #2
	ldr r2, [r5, r1]
	cmp r2, #0
	beq _0208598A
	cmp r2, #1
	bne _02085988
	b _02085AF0
_02085988:
	b _02085B84
_0208598A:
	mov r1, #0
	add r2, r1, #0
	bl sub_02086AB4
	mov r0, #0x2d
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	mov r6, #0
	cmp r0, #0
	ble _02085A1C
	ldr r7, _02085BE0 ; =0x0211055C
	add r4, r5, #0
_020859A2:
	ldrb r0, [r4, #0x18]
	cmp r0, #0
	beq _02085A0E
	mov r1, #0x14
	mov r2, #0x16
	ldrsh r1, [r4, r1]
	ldrsh r2, [r4, r2]
	ldr r0, [r4, #0xc]
	bl sub_0200DED0
	ldrb r0, [r4, #0x18]
	sub r0, r0, #1
	strb r0, [r4, #0x18]
	mov r0, #0xb7
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	cmp r6, r0
	blt _020859E4
	mov r0, #0x2e
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	cmp r6, r0
	bge _020859E4
	ldrb r0, [r4, #0x19]
	lsl r1, r0, #2
	ldr r1, [r7, r1]
	ldr r0, [r4, #0xc]
	add r2, r1, #0
	bl sub_0200E024
	ldrb r0, [r4, #0x19]
	add r0, r0, #1
	strb r0, [r4, #0x19]
_020859E4:
	mov r0, #0xb9
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	cmp r6, r0
	blt _02085A0E
	mov r0, #0xba
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	cmp r6, r0
	bge _02085A0E
	ldrb r0, [r4, #0x19]
	ldr r1, _02085BE4 ; =0x02110578
	lsl r2, r0, #2
	ldr r1, [r1, r2]
	ldr r0, [r4, #0xc]
	add r2, r1, #0
	bl sub_0200E024
	ldrb r0, [r4, #0x19]
	add r0, r0, #1
	strb r0, [r4, #0x19]
_02085A0E:
	mov r0, #0x2d
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	add r6, r6, #1
	add r4, #0x1c
	cmp r6, r0
	blt _020859A2
_02085A1C:
	mov r0, #0xfb
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	mov r6, #0
	cmp r0, #0
	ble _02085A64
	mov r7, #0x76
	add r4, r5, #0
	lsl r7, r7, #2
_02085A2E:
	ldrb r0, [r4, r7]
	cmp r0, #0
	beq _02085A56
	mov r1, #0x75
	ldr r2, _02085BE8 ; =0x000001D6
	mov r0, #0x73
	lsl r1, r1, #2
	lsl r0, r0, #2
	ldrsh r1, [r4, r1]
	ldrsh r2, [r4, r2]
	ldr r0, [r4, r0]
	bl sub_0200DED0
	mov r0, #0x76
	lsl r0, r0, #2
	ldrb r0, [r4, r0]
	sub r1, r0, #1
	mov r0, #0x76
	lsl r0, r0, #2
	strb r1, [r4, r0]
_02085A56:
	mov r0, #0xfb
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	add r6, r6, #1
	add r4, #0x1c
	cmp r6, r0
	blt _02085A2E
_02085A64:
	ldrb r0, [r5, #0x18]
	cmp r0, #0
	bne _02085AE4
	mov r0, #0xb7
	lsl r0, r0, #2
	ldr r6, [r5, r0]
	add r0, r0, #4
	ldr r0, [r5, r0]
	cmp r6, r0
	bge _02085AA2
	mov r0, #0x1c
	mul r0, r6
	mov r7, #0x2e
	add r4, r5, r0
	lsl r7, r7, #4
_02085A82:
	ldr r0, [r4]
	ldr r1, [r4, #8]
	bl sub_02086D98
	add r1, r0, #0
	ldr r0, [r4, #0xc]
	bl sub_0200DC4C
	ldr r0, [r4, #0xc]
	bl sub_0200DC18
	ldr r0, [r5, r7]
	add r6, r6, #1
	add r4, #0x1c
	cmp r6, r0
	blt _02085A82
_02085AA2:
	mov r0, #0xb9
	lsl r0, r0, #2
	ldr r6, [r5, r0]
	add r0, r0, #4
	ldr r0, [r5, r0]
	cmp r6, r0
	bge _02085ADA
	mov r0, #0x1c
	mul r0, r6
	mov r7, #0xba
	add r4, r5, r0
	lsl r7, r7, #2
_02085ABA:
	ldr r0, [r4]
	ldr r1, [r4, #8]
	bl sub_02086D98
	add r1, r0, #0
	ldr r0, [r4, #0xc]
	bl sub_0200DC4C
	ldr r0, [r4, #0xc]
	bl sub_0200DC18
	ldr r0, [r5, r7]
	add r6, r6, #1
	add r4, #0x1c
	cmp r6, r0
	blt _02085ABA
_02085ADA:
	mov r0, #0xb2
	lsl r0, r0, #2
	ldr r1, [r5, r0]
	add r1, r1, #1
	str r1, [r5, r0]
_02085AE4:
	mov r0, #0xb3
	lsl r0, r0, #2
	ldr r1, [r5, r0]
	add r1, r1, #1
	str r1, [r5, r0]
	b _02085BDA
_02085AF0:
	add r0, r1, #0
	add r0, #0x14
	add r1, #0x18
	ldr r6, [r5, r0]
	ldr r0, [r5, r1]
	cmp r6, r0
	bge _02085B2C
	mov r0, #0x1c
	mul r0, r6
	ldr r7, _02085BE0 ; =0x0211055C
	add r4, r5, r0
_02085B06:
	ldrb r0, [r4, #0x19]
	cmp r0, #6
	beq _02085B1E
	lsl r1, r0, #2
	ldr r1, [r7, r1]
	ldr r0, [r4, #0xc]
	add r2, r1, #0
	bl sub_0200E024
	ldrb r0, [r4, #0x19]
	add r0, r0, #1
	strb r0, [r4, #0x19]
_02085B1E:
	mov r0, #0x2e
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	add r6, r6, #1
	add r4, #0x1c
	cmp r6, r0
	blt _02085B06
_02085B2C:
	mov r0, #0xb9
	lsl r0, r0, #2
	ldr r6, [r5, r0]
	add r0, r0, #4
	ldr r0, [r5, r0]
	cmp r6, r0
	bge _02085B68
	mov r0, #0x1c
	mul r0, r6
	ldr r7, _02085BE4 ; =0x02110578
	add r4, r5, r0
_02085B42:
	ldrb r0, [r4, #0x19]
	cmp r0, #6
	beq _02085B5A
	lsl r1, r0, #2
	ldr r1, [r7, r1]
	ldr r0, [r4, #0xc]
	add r2, r1, #0
	bl sub_0200E024
	ldrb r0, [r4, #0x19]
	add r0, r0, #1
	strb r0, [r4, #0x19]
_02085B5A:
	mov r0, #0xba
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	add r6, r6, #1
	add r4, #0x1c
	cmp r6, r0
	blt _02085B42
_02085B68:
	mov r1, #0xb3
	lsl r1, r1, #2
	ldr r0, [r5, r1]
	add r0, r0, #1
	str r0, [r5, r1]
	ldr r0, [r5, r1]
	cmp r0, #6
	bne _02085BDA
	sub r0, r1, #4
	ldr r0, [r5, r0]
	add r2, r0, #1
	sub r0, r1, #4
	str r2, [r5, r0]
	b _02085BDA
_02085B84:
	bl sub_02086F44
	mov r1, #0xed
	lsl r1, r1, #2
	ldr r0, [r5, r1]
	cmp r0, #0
	bne _02085BA6
	sub r1, r1, #4
	ldr r1, [r5, r1]
	add r0, r5, #0
	bl sub_02086398
	add r1, r0, #0
	add r0, r5, #0
	bl sub_02086AE4
	b _02085BB8
_02085BA6:
	sub r1, r1, #4
	ldr r1, [r5, r1]
	add r0, r5, #0
	bl sub_020863C0
	add r1, r0, #0
	add r0, r5, #0
	bl sub_02086AE4
_02085BB8:
	mov r0, #0xb5
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	cmp r0, #0
	beq _02085BCC
	add r0, r5, #0
	mov r1, #0
	mov r2, #1
	bl sub_02086AB4
_02085BCC:
	add r0, r5, #0
	bl sub_02086384
	add r0, r5, #0
	mov r1, #1
	bl sub_02085808
_02085BDA:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
	nop
_02085BE0: .word 0x0211055C
_02085BE4: .word 0x02110578
_02085BE8: .word 0x000001D6
	thumb_func_end sub_02085974

	thumb_func_start sub_02085BEC
sub_02085BEC: ; 0x02085BEC
	push {r3, r4, r5, lr}
	mov r1, #0xb
	add r5, r0, #0
	lsl r1, r1, #6
	ldr r1, [r5, r1]
	lsl r2, r1, #2
	ldr r1, _02085C1C ; =0x0210271C
	ldr r1, [r1, r2]
	blx r1
	add r4, r0, #0
	add r0, r5, #0
	bl sub_02086BB4
	add r0, r5, #0
	bl sub_02086C8C
	mov r0, #0xbd
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	bl sub_0200D020
	add r0, r4, #0
	pop {r3, r4, r5, pc}
	nop
_02085C1C: .word 0x0210271C
	thumb_func_end sub_02085BEC

	thumb_func_start sub_02085C20
sub_02085C20: ; 0x02085C20
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x40
	ldr r5, _02085F00 ; =0x0210272C
	add r4, r0, #0
	add r3, sp, #4
	mov r2, #7
_02085C2C:
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	sub r2, r2, #1
	bne _02085C2C
	ldr r0, [r5]
	mov r1, #0x14
	str r0, [r3]
	mov r3, #0x91
	lsl r3, r3, #2
	add r0, r3, #2
	ldrsh r0, [r4, r0]
	ldrsh r7, [r4, r3]
	mov r6, #0
	mov ip, r0
	mul r1, r0
	add r0, sp, #4
	lsl r2, r7, #2
	add r0, r0, r1
	ldr r5, [r2, r0]
	add r0, r3, #0
	add r0, #0x7c
	ldr r0, [r4, r0]
	cmp r0, #1
	bne _02085C80
	mov r2, #0xeb
	lsl r2, r2, #2
	ldr r0, [r4, r2]
	cmp r0, #1
	beq _02085C80
	add r0, r2, #0
	sub r0, #0x38
	ldr r0, [r4, r0]
	cmp r0, #1
	bne _02085CBC
	ldr r0, _02085F04 ; =gMain
	ldr r0, [r0, #0x48]
	cmp r0, #0
	beq _02085C80
	bl sub_0202534C
	cmp r0, #0
	beq _02085C82
_02085C80:
	b _02085F78
_02085C82:
	mov r0, #0xdd
	add r1, r6, #0
	lsl r0, r0, #2
	str r1, [r4, r0]
	add r0, r4, #0
	add r1, r5, #0
	bl sub_02086B2C
	sub r5, #0xa
	cmp r5, #1
	bhi _02085CAA
	mov r0, #0x23
	lsl r0, r0, #4
	ldr r1, [r4, r0]
	cmp r1, #2
	beq _02085D8C
	mov r1, #2
	add sp, #0x40
	str r1, [r4, r0]
	pop {r3, r4, r5, r6, r7, pc}
_02085CAA:
	mov r0, #0x23
	lsl r0, r0, #4
	ldr r1, [r4, r0]
	cmp r1, #1
	beq _02085D8C
	mov r1, #1
	add sp, #0x40
	str r1, [r4, r0]
	pop {r3, r4, r5, r6, r7, pc}
_02085CBC:
	ldr r0, _02085F04 ; =gMain
	mov r1, #0x40
	ldr r0, [r0, #0x4c]
	tst r1, r0
	beq _02085CDE
	mov r0, ip
	cmp r0, #0
	ble _02085CD4
	add r0, r3, #2
	ldrsh r0, [r4, r0]
	sub r1, r0, #1
	b _02085CD6
_02085CD4:
	mov r1, #2
_02085CD6:
	add r0, r3, #2
	strh r1, [r4, r0]
	mov r6, #1
	b _02085F2A
_02085CDE:
	mov r1, #0x80
	tst r1, r0
	beq _02085CFE
	add r0, r3, #2
	ldrsh r0, [r4, r0]
	add r1, r0, #1
	add r0, r3, #2
	strh r1, [r4, r0]
	ldrsh r0, [r4, r0]
	mov r1, #3
	bl _s32_div_f
	ldr r0, _02085F08 ; =0x00000246
	mov r6, #1
	strh r1, [r4, r0]
	b _02085F2A
_02085CFE:
	mov r1, #0x10
	tst r1, r0
	beq _02085D2C
	cmp r5, #0xa
	bne _02085D0E
	mov r0, #3
	strh r0, [r4, r3]
	b _02085D28
_02085D0E:
	cmp r5, #0xb
	bne _02085D16
	strh r6, [r4, r3]
	b _02085D28
_02085D16:
	add r0, r7, #1
	strh r0, [r4, r3]
	ldrsh r0, [r4, r3]
	mov r1, #5
	bl _s32_div_f
	mov r0, #0x91
	lsl r0, r0, #2
	strh r1, [r4, r0]
_02085D28:
	mov r6, #1
	b _02085F2A
_02085D2C:
	mov r1, #0x20
	tst r1, r0
	beq _02085D56
	cmp r5, #0xa
	bne _02085D3C
	mov r0, #3
	strh r0, [r4, r3]
	b _02085D52
_02085D3C:
	cmp r5, #0xb
	bne _02085D44
	strh r6, [r4, r3]
	b _02085D52
_02085D44:
	cmp r7, #0
	ble _02085D4E
	sub r0, r7, #1
	strh r0, [r4, r3]
	b _02085D52
_02085D4E:
	mov r0, #4
	strh r0, [r4, r3]
_02085D52:
	mov r6, #1
	b _02085F2A
_02085D56:
	ldr r1, _02085F04 ; =gMain
	ldr r7, [r1, #0x48]
	mov r1, #1
	tst r1, r7
	beq _02085E3C
	cmp r5, #0xa
	bne _02085D72
	add r0, r4, #0
	bl sub_02085FFC
	ldr r0, _02085F0C ; =0x000005E5
	bl PlaySE
	b _02085F2A
_02085D72:
	cmp r5, #0xb
	bne _02085D84
	add r0, r4, #0
	bl sub_02085F80
	ldr r0, _02085F10 ; =0x000005E2
	bl PlaySE
	b _02085F2A
_02085D84:
	sub r2, #0xd8
	ldr r0, [r4, r2]
	cmp r0, #0
	bne _02085D8E
_02085D8C:
	b _02085F78
_02085D8E:
	sub r3, #0x30
	ldr r0, [r4, r3]
	mov r1, #0x1c
	add r7, r0, #0
	str r0, [sp]
	mul r7, r1
	add r0, r5, #1
	str r0, [r4, r7]
	add r0, r4, #0
	mov r1, #1
	add r2, r6, #0
	bl sub_02086AB4
	add r0, r4, #0
	mov r1, #2
	mov r2, #1
	bl sub_02086AB4
	add r0, r4, #0
	add r1, r5, #0
	mov r2, #2
	bl sub_02086B6C
	add r1, r4, r7
	ldr r0, [r4, r7]
	ldr r1, [r1, #8]
	bl sub_02086D98
	add r1, r0, #0
	add r0, r4, r7
	ldr r0, [r0, #0xc]
	bl sub_0200DC4C
	mov r0, #0x96
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #3
	bl sub_0200DC4C
	add r0, r4, r7
	ldr r3, [r0, #4]
	ldr r0, [sp]
	add r2, r0, #1
	mov r0, #0x2d
	lsl r0, r0, #4
	ldr r1, [r4, r0]
	cmp r2, r1
	bne _02085E0E
	add r1, r0, #0
	mov r6, #1
	add r1, #0xdc
	str r6, [r4, r1]
	add r1, r0, #0
	mov r2, #0
	add r1, #0xe0
	str r2, [r4, r1]
	add r1, r0, #0
	mov r2, #3
	sub r1, #0x8c
	strh r2, [r4, r1]
	mov r1, #2
	sub r0, #0x8a
	strh r1, [r4, r0]
	b _02085F2A
_02085E0E:
	mov r1, #0x1c
	mul r1, r2
	add r1, r4, r1
	ldr r1, [r1, #4]
	cmp r3, r1
	beq _02085E28
	add r2, r0, #0
	mov r3, #1
	add r2, #0xdc
	str r3, [r4, r2]
	add r0, #0xe0
	str r1, [r4, r0]
	b _02085E34
_02085E28:
	add r1, r0, #0
	mov r3, #2
	add r1, #0xdc
	str r3, [r4, r1]
	add r0, #0xe0
	str r2, [r4, r0]
_02085E34:
	ldr r0, _02085F0C ; =0x000005E5
	bl PlaySE
	b _02085F2A
_02085E3C:
	mov r1, #2
	add r5, r7, #0
	tst r5, r1
	beq _02085E52
	add r0, r4, #0
	bl sub_02085FFC
	ldr r0, _02085F0C ; =0x000005E5
	bl PlaySE
	b _02085F2A
_02085E52:
	lsl r5, r1, #8
	tst r5, r0
	beq _02085EB6
	add r0, r3, #0
	sub r0, #0x30
	ldr r1, [r4, r0]
	add r0, r2, #0
	add r0, #0x44
	ldr r0, [r4, r0]
	cmp r1, r0
	bne _02085E6E
	sub r2, #0xdc
	ldr r0, [r4, r2]
	b _02085E74
_02085E6E:
	add r0, r3, #0
	sub r0, #0x30
	ldr r0, [r4, r0]
_02085E74:
	sub r0, r0, #1
	sub r3, #0x30
	str r0, [r4, r3]
	mov r0, #0x85
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0x1c
	mul r1, r0
	add r2, r4, r1
	ldr r1, [r2, #8]
	cmp r1, #1
	bne _02085E9A
	mov r1, #0xeb
	mov r2, #2
	lsl r1, r1, #2
	str r2, [r4, r1]
	add r1, r1, #4
	str r0, [r4, r1]
	b _02085EAC
_02085E9A:
	mov r1, #0xeb
	lsl r1, r1, #2
	mov r3, #1
	str r3, [r4, r1]
	add r0, r1, #4
	ldr r2, [r2, #4]
	add r1, #8
	str r2, [r4, r0]
	str r3, [r4, r1]
_02085EAC:
	mov r0, #0x5e
	lsl r0, r0, #4
	bl PlaySE
	b _02085F2A
_02085EB6:
	add r1, #0xfe
	tst r0, r1
	beq _02085F2A
	add r1, r2, #0
	add r0, r3, #0
	sub r1, #0xdc
	sub r0, #0x30
	ldr r1, [r4, r1]
	ldr r0, [r4, r0]
	sub r1, r1, #1
	cmp r0, r1
	bne _02085ED4
	add r2, #0x44
	ldr r0, [r4, r2]
	b _02085EDC
_02085ED4:
	add r0, r3, #0
	sub r0, #0x30
	ldr r0, [r4, r0]
	add r0, r0, #1
_02085EDC:
	sub r3, #0x30
	str r0, [r4, r3]
	mov r0, #0x85
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0x1c
	mul r1, r0
	add r2, r4, r1
	ldr r1, [r2, #8]
	cmp r1, #1
	bne _02085F14
	mov r1, #0xeb
	mov r2, #2
	lsl r1, r1, #2
	str r2, [r4, r1]
	add r1, r1, #4
	str r0, [r4, r1]
	b _02085F22
	.balign 4, 0
_02085F00: .word 0x0210272C
_02085F04: .word gMain
_02085F08: .word 0x00000246
_02085F0C: .word 0x000005E5
_02085F10: .word 0x000005E2
_02085F14:
	mov r0, #0xeb
	mov r1, #1
	lsl r0, r0, #2
	str r1, [r4, r0]
	ldr r1, [r2, #4]
	add r0, r0, #4
	str r1, [r4, r0]
_02085F22:
	mov r0, #0x5e
	lsl r0, r0, #4
	bl PlaySE
_02085F2A:
	cmp r6, #1
	bne _02085F78
	mov r0, #0x5e
	lsl r0, r0, #4
	bl PlaySE
	ldr r1, _02085F7C ; =0x00000246
	mov r0, #0x14
	ldrsh r2, [r4, r1]
	sub r1, r1, #2
	ldrsh r1, [r4, r1]
	mul r0, r2
	add r2, sp, #4
	lsl r1, r1, #2
	add r0, r2, r0
	ldr r5, [r1, r0]
	add r0, r4, #0
	add r1, r5, #0
	bl sub_02086B2C
	sub r5, #0xa
	cmp r5, #1
	bhi _02085F6A
	mov r0, #0x23
	lsl r0, r0, #4
	ldr r1, [r4, r0]
	cmp r1, #2
	beq _02085F78
	mov r1, #2
	add sp, #0x40
	str r1, [r4, r0]
	pop {r3, r4, r5, r6, r7, pc}
_02085F6A:
	mov r0, #0x23
	lsl r0, r0, #4
	ldr r1, [r4, r0]
	cmp r1, #1
	beq _02085F78
	mov r1, #1
	str r1, [r4, r0]
_02085F78:
	add sp, #0x40
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_02085F7C: .word 0x00000246
	thumb_func_end sub_02085C20

	thumb_func_start sub_02085F80
sub_02085F80: ; 0x02085F80
	push {r3, r4, r5, r6, r7, lr}
	add r6, r0, #0
	mov r0, #0x64
	mov r1, #0x6c
	bl String_ctor
	mov r1, #0xa1
	add r7, r0, #0
	mov r0, #1
	lsl r1, r1, #2
	str r0, [r6, r1]
	add r0, r1, #0
	mov r4, #0
	add r0, #0x18
	add r1, #0x4c
	strb r4, [r6, r0]
	ldr r0, [r6, r1]
	cmp r0, #0
	ble _02085FEC
	add r5, r6, #0
_02085FA8:
	ldr r0, [r5]
	cmp r0, #0
	bne _02085FC0
	mov r0, #1
	str r0, [r5]
	ldr r1, [r5, #8]
	bl sub_02086D98
	add r1, r0, #0
	ldr r0, [r5, #0xc]
	bl sub_0200DC4C
_02085FC0:
	mov r0, #1
	str r0, [sp]
	ldr r1, [r5]
	mov r2, #1
	add r0, r7, #0
	sub r1, r1, #1
	add r3, r2, #0
	bl String16_FormatInteger
	mov r0, #0xf5
	lsl r0, r0, #2
	ldr r0, [r6, r0]
	add r1, r7, #0
	bl StringCat
	mov r0, #0x2d
	lsl r0, r0, #4
	ldr r0, [r6, r0]
	add r4, r4, #1
	add r5, #0x1c
	cmp r4, r0
	blt _02085FA8
_02085FEC:
	add r0, r7, #0
	bl String_dtor
	add r0, r6, #0
	mov r1, #3
	bl sub_02085808
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_02085F80

	thumb_func_start sub_02085FFC
sub_02085FFC: ; 0x02085FFC
	push {r3, r4, r5, r6, r7, lr}
	mov r2, #0x9a
	lsl r2, r2, #2
	add r5, r0, #0
	mov r1, #1
	add r3, r2, #0
	str r1, [r5, r2]
	mov r0, #0
	add r3, #0x18
	strb r0, [r5, r3]
	add r3, r2, #0
	add r3, #0x6c
	ldr r3, [r5, r3]
	cmp r3, #0
	bne _02086044
	add r0, r2, #0
	add r0, #0x68
	ldr r0, [r5, r0]
	sub r3, r0, #1
	add r0, r2, #0
	sub r0, #0x54
	str r3, [r5, r0]
	sub r2, #0x54
	ldr r2, [r5, r2]
	mov r0, #0x1c
	mul r0, r2
	add r0, r5, r0
	mov r2, #0xeb
	ldr r3, [r0, #4]
	lsl r2, r2, #2
	str r1, [r5, r2]
	add r0, r2, #4
	str r3, [r5, r0]
	add r2, #8
	str r1, [r5, r2]
	pop {r3, r4, r5, r6, r7, pc}
_02086044:
	sub r2, #0x54
	ldr r6, [r5, r2]
	mov r1, #0x1c
	add r4, r6, #0
	mul r4, r1
	str r0, [r5, r4]
	add r1, r5, r4
	ldr r0, [r5, r4]
	ldr r1, [r1, #8]
	bl sub_02086D98
	add r1, r0, #0
	add r0, r5, r4
	ldr r0, [r0, #0xc]
	bl sub_0200DC4C
	add r0, r5, r4
	ldr r7, [r0, #4]
	mov r0, #0x3f
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	cmp r6, r0
	ble _020860B6
	sub r1, r6, #1
	mov r0, #0x1c
	add r4, r1, #0
	mul r4, r0
	add r1, r5, r4
	ldr r0, [r5, r4]
	ldr r1, [r1, #8]
	bl sub_02086D98
	add r1, r0, #0
	add r0, r5, r4
	ldr r0, [r0, #0xc]
	bl sub_0200DC4C
	add r0, r5, r4
	ldr r3, [r0, #4]
	cmp r7, r3
	beq _020860A8
	mov r1, #0xeb
	lsl r1, r1, #2
	mov r2, #1
	str r2, [r5, r1]
	add r0, r1, #4
	str r3, [r5, r0]
	add r1, #8
	str r2, [r5, r1]
	pop {r3, r4, r5, r6, r7, pc}
_020860A8:
	mov r0, #0xeb
	mov r1, #2
	lsl r0, r0, #2
	str r1, [r5, r0]
	sub r1, r6, #1
	add r0, r0, #4
	str r1, [r5, r0]
_020860B6:
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_02085FFC

	thumb_func_start sub_020860B8
sub_020860B8: ; 0x020860B8
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x68
	str r0, [sp, #4]
	mov r2, #0xc1
	ldr r1, [sp, #4]
	lsl r2, r2, #2
	add r1, r1, r2
	ldr r2, [sp, #4]
	mov r0, #0
_020860CA:
	add r0, r0, #1
	str r1, [r2, #0x10]
	add r1, r1, #4
	add r2, #0x1c
	cmp r0, #0x10
	blt _020860CA
	ldr r4, _0208616C ; =0x02102768
	add r3, sp, #8
	mov r2, #0x30
_020860DC:
	ldrh r1, [r4]
	add r4, r4, #2
	strh r1, [r3]
	add r3, r3, #2
	sub r2, r2, #1
	bne _020860DC
	cmp r0, #0x1c
	bge _0208614A
	add r2, sp, #8
	lsl r1, r0, #3
	add r1, r2, r1
	mov r7, #0x7f
	ldr r2, [sp, #4]
	lsl r3, r0, #2
	mvn r7, r7
	add r2, r2, r3
	ldr r4, _02086170 ; =0x00000307
	add r3, r7, #4
_02086100:
	mov r5, #0x7d
	mov r6, #0x79
	mvn r5, r5
	mvn r6, r6
	ldrsh r5, [r1, r5]
	ldrsh r6, [r1, r6]
	add r0, r0, #1
	sub r6, r5, r6
	mov r5, #0xc1
	lsl r5, r5, #2
	strb r6, [r2, r5]
	mov r5, #0x7f
	mov r6, #0x7b
	mvn r5, r5
	mvn r6, r6
	ldrsh r5, [r1, r5]
	ldrsh r6, [r1, r6]
	sub r6, r5, r6
	ldr r5, _02086174 ; =0x00000306
	strb r6, [r2, r5]
	mov r5, #0x7d
	mov r6, #0x79
	mvn r5, r5
	mvn r6, r6
	ldrsh r5, [r1, r5]
	ldrsh r6, [r1, r6]
	add r6, r5, r6
	ldr r5, _02086178 ; =0x00000305
	strb r6, [r2, r5]
	ldrsh r6, [r1, r7]
	ldrsh r5, [r1, r3]
	add r1, #8
	add r5, r6, r5
	strb r5, [r2, r4]
	add r2, r2, #4
	cmp r0, #0x1c
	blt _02086100
_0208614A:
	mov r0, #0x6c
	str r0, [sp]
	mov r1, #0xc1
	ldr r0, [sp, #4]
	lsl r1, r1, #2
	add r0, r0, r1
	ldr r2, _0208617C ; =sub_02086180
	ldr r3, [sp, #4]
	mov r1, #0x1c
	bl sub_02026C44
	mov r2, #3
	ldr r1, [sp, #4]
	lsl r2, r2, #8
	str r0, [r1, r2]
	add sp, #0x68
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_0208616C: .word 0x02102768
_02086170: .word 0x00000307
_02086174: .word 0x00000306
_02086178: .word 0x00000305
_0208617C: .word sub_02086180
	thumb_func_end sub_020860B8

	thumb_func_start sub_02086180
sub_02086180: ; 0x02086180
	push {r3, r4, r5, r6, r7, lr}
	add r4, r2, #0
	mov r2, #0xb
	lsl r2, r2, #6
	add r5, r0, #0
	ldr r0, [r4, r2]
	cmp r0, #1
	bne _020861B4
	add r0, r2, #0
	add r0, #0xb4
	ldr r0, [r4, r0]
	cmp r0, #1
	beq _020861A0
	mov r0, #1
	add r2, #0xb4
	str r0, [r4, r2]
_020861A0:
	cmp r1, #0
	beq _020861A6
	b _0208631A
_020861A6:
	cmp r5, #0x10
	bhs _020861E6
	mov r1, #0x3f
	lsl r1, r1, #4
	ldr r0, [r4, r1]
	cmp r5, r0
	bhs _020861B6
_020861B4:
	b _0208631A
_020861B6:
	mov r0, #0x1c
	mul r0, r5
	add r3, r4, r0
	ldr r0, [r3, #8]
	cmp r0, #1
	bne _020861D0
	add r0, r1, #0
	mov r2, #2
	sub r0, #0x44
	str r2, [r4, r0]
	sub r1, #0x40
	str r5, [r4, r1]
	b _020861DE
_020861D0:
	add r0, r1, #0
	mov r2, #1
	sub r0, #0x44
	str r2, [r4, r0]
	ldr r0, [r3, #4]
	sub r1, #0x40
	str r0, [r4, r1]
_020861DE:
	ldr r0, _0208631C ; =0x000005E5
	bl PlaySE
	pop {r3, r4, r5, r6, r7, pc}
_020861E6:
	cmp r5, #0x1a
	bne _02086200
	mov r0, #0x91
	mov r1, #0
	lsl r0, r0, #2
	strh r1, [r4, r0]
	mov r1, #2
	add r0, r0, #2
	strh r1, [r4, r0]
	ldr r0, _0208631C ; =0x000005E5
	bl PlaySE
	b _0208623E
_02086200:
	cmp r5, #0x1b
	bne _0208621A
	mov r0, #0x91
	mov r1, #3
	lsl r0, r0, #2
	strh r1, [r4, r0]
	mov r1, #2
	add r0, r0, #2
	strh r1, [r4, r0]
	ldr r0, _02086320 ; =0x000005E2
	bl PlaySE
	b _0208623E
_0208621A:
	add r0, r5, #0
	sub r0, #0x10
	mov r1, #5
	bl _u32_div_f
	mov r0, #0x91
	lsl r0, r0, #2
	strh r1, [r4, r0]
	add r0, r5, #0
	sub r0, #0x10
	mov r1, #5
	bl _u32_div_f
	ldr r1, _02086324 ; =0x00000246
	strh r0, [r4, r1]
	ldr r0, _0208631C ; =0x000005E5
	bl PlaySE
_0208623E:
	cmp r5, #0x10
	blo _02086308
	cmp r5, #0x19
	bhi _02086308
	mov r0, #0xb5
	lsl r0, r0, #2
	ldr r1, [r4, r0]
	cmp r1, #0
	beq _0208631A
	sub r0, #0xc0
	ldr r7, [r4, r0]
	mov r0, #0x1c
	add r6, r7, #0
	mul r6, r0
	add r0, r5, #0
	sub r0, #0xf
	str r0, [r4, r6]
	add r1, r4, r6
	ldr r0, [r4, r6]
	ldr r1, [r1, #8]
	bl sub_02086D98
	add r1, r0, #0
	add r0, r4, r6
	ldr r0, [r0, #0xc]
	bl sub_0200DC4C
	mov r1, #1
	add r0, r4, #0
	add r2, r1, #0
	bl sub_02086AB4
	sub r5, #0x10
	add r0, r4, #0
	add r1, r5, #0
	bl sub_02086B2C
	add r0, r4, #0
	mov r1, #1
	mov r2, #0
	bl sub_02086AB4
	add r0, r4, #0
	mov r1, #2
	mov r2, #1
	bl sub_02086AB4
	add r0, r4, #0
	add r1, r5, #0
	mov r2, #2
	bl sub_02086B6C
	mov r0, #0x96
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #3
	bl sub_0200DC4C
	add r0, r4, r6
	ldr r2, [r0, #4]
	mov r0, #0x2d
	lsl r0, r0, #4
	ldr r3, [r4, r0]
	add r1, r7, #1
	cmp r1, r3
	bne _020862D8
	add r1, r0, #0
	mov r2, #1
	add r1, #0xdc
	str r2, [r4, r1]
	add r1, r0, #0
	mov r2, #0
	add r1, #0xe0
	str r2, [r4, r1]
	add r0, #0xe4
	str r2, [r4, r0]
	pop {r3, r4, r5, r6, r7, pc}
_020862D8:
	mov r3, #0x1c
	mul r3, r1
	add r3, r4, r3
	ldr r3, [r3, #4]
	cmp r2, r3
	beq _020862FA
	add r1, r0, #0
	mov r2, #1
	add r1, #0xdc
	str r2, [r4, r1]
	add r1, r0, #0
	add r1, #0xe0
	str r3, [r4, r1]
	mov r1, #0
	add r0, #0xe4
	str r1, [r4, r0]
	pop {r3, r4, r5, r6, r7, pc}
_020862FA:
	add r2, r0, #0
	mov r3, #2
	add r2, #0xdc
	str r3, [r4, r2]
	add r0, #0xe0
	str r1, [r4, r0]
	pop {r3, r4, r5, r6, r7, pc}
_02086308:
	cmp r5, #0x1a
	bne _02086314
	add r0, r4, #0
	bl sub_02085FFC
	pop {r3, r4, r5, r6, r7, pc}
_02086314:
	add r0, r4, #0
	bl sub_02085F80
_0208631A:
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_0208631C: .word 0x000005E5
_02086320: .word 0x000005E2
_02086324: .word 0x00000246
	thumb_func_end sub_02086180

	thumb_func_start sub_02086328
sub_02086328: ; 0x02086328
	push {r4, lr}
	mov r1, #0xeb
	add r4, r0, #0
	lsl r1, r1, #2
	ldr r2, [r4, r1]
	cmp r2, #2
	bgt _02086346
	cmp r2, #0
	blt _02086380
	beq _02086380
	cmp r2, #1
	beq _0208634A
	cmp r2, #2
	beq _02086372
	pop {r4, pc}
_02086346:
	cmp r2, #0xff
	pop {r4, pc}
_0208634A:
	add r1, r1, #4
	ldr r1, [r4, r1]
	bl sub_02085604
	add r0, r4, #0
	bl sub_02086DA4
	add r0, r4, #0
	mov r1, #1
	bl sub_02086DE4
	add r0, r4, #0
	mov r1, #2
	bl sub_02085808
	mov r0, #0xeb
	mov r1, #0xff
	lsl r0, r0, #2
	str r1, [r4, r0]
	pop {r4, pc}
_02086372:
	add r1, r1, #4
	ldr r1, [r4, r1]
	bl sub_02086AE4
	add r0, r4, #0
	bl sub_02086384
_02086380:
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_02086328

	thumb_func_start sub_02086384
sub_02086384: ; 0x02086384
	mov r2, #0xeb
	lsl r2, r2, #2
	mov r3, #0
	str r3, [r0, r2]
	add r1, r2, #4
	str r3, [r0, r1]
	add r2, #8
	str r3, [r0, r2]
	bx lr
	.balign 4, 0
	thumb_func_end sub_02086384

	thumb_func_start sub_02086398
sub_02086398: ; 0x02086398
	push {r3, r4}
	mov r2, #0x2d
	lsl r2, r2, #4
	ldr r4, [r0, r2]
	mov r3, #0
	cmp r4, #0
	ble _020863BA
_020863A6:
	ldr r2, [r0, #4]
	cmp r1, r2
	bne _020863B2
	add r0, r3, #0
	pop {r3, r4}
	bx lr
_020863B2:
	add r3, r3, #1
	add r0, #0x1c
	cmp r3, r4
	blt _020863A6
_020863BA:
	mov r0, #0
	pop {r3, r4}
	bx lr
	thumb_func_end sub_02086398

	thumb_func_start sub_020863C0
sub_020863C0: ; 0x020863C0
	push {r3, r4, r5, r6}
	mov r2, #0x2d
	lsl r2, r2, #4
	ldr r6, [r0, r2]
	mov r5, #0
	add r4, r5, #0
	cmp r6, #0
	ble _020863EE
	mov r2, #1
_020863D2:
	ldr r3, [r0, #4]
	cmp r1, r3
	bne _020863DC
	add r5, r2, #0
	b _020863E6
_020863DC:
	cmp r5, #1
	bne _020863E6
	sub r0, r4, #1
	pop {r3, r4, r5, r6}
	bx lr
_020863E6:
	add r4, r4, #1
	add r0, #0x1c
	cmp r4, r6
	blt _020863D2
_020863EE:
	sub r0, r6, #1
	pop {r3, r4, r5, r6}
	bx lr
	thumb_func_end sub_020863C0

	thumb_func_start sub_020863F4
sub_020863F4: ; 0x020863F4
	push {r4, r5, r6, r7, lr}
	sub sp, #0x4c
	add r4, r0, #0
	mov r0, #0x6c
	bl sub_0200CF18
	mov r7, #0x2f
	lsl r7, r7, #4
	add r2, sp, #0x2c
	ldr r3, _02086484 ; =0x021027F4
	str r0, [r4, r7]
	ldmia r3!, {r0, r1}
	add r6, r2, #0
	stmia r2!, {r0, r1}
	ldmia r3!, {r0, r1}
	stmia r2!, {r0, r1}
	ldmia r3!, {r0, r1}
	stmia r2!, {r0, r1}
	ldmia r3!, {r0, r1}
	ldr r5, _02086488 ; =0x021027C8
	stmia r2!, {r0, r1}
	add r3, sp, #0x18
	ldmia r5!, {r0, r1}
	add r2, r3, #0
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldr r0, [r5]
	add r1, r6, #0
	str r0, [r3]
	ldr r0, [r4, r7]
	mov r3, #0x20
	bl sub_0200CF70
	ldr r3, _0208648C ; =0x021027DC
	add r2, sp, #0
	ldmia r3!, {r0, r1}
	stmia r2!, {r0, r1}
	ldmia r3!, {r0, r1}
	stmia r2!, {r0, r1}
	ldmia r3!, {r0, r1}
	stmia r2!, {r0, r1}
	add r0, r7, #0
	ldr r0, [r4, r0]
	bl sub_0200CF38
	add r1, r7, #4
	str r0, [r4, r1]
	sub r0, r1, #4
	ldr r0, [r4, r0]
	ldr r1, [r4, r1]
	mov r2, #0x80
	bl sub_0200CFF4
	cmp r0, #0
	bne _02086468
	bl GF_AssertFail
_02086468:
	mov r1, #0x2f
	lsl r1, r1, #4
	ldr r0, [r4, r1]
	add r1, r1, #4
	ldr r1, [r4, r1]
	add r2, sp, #0
	bl sub_0200D3F8
	cmp r0, #0
	bne _02086480
	bl GF_AssertFail
_02086480:
	add sp, #0x4c
	pop {r4, r5, r6, r7, pc}
	.balign 4, 0
_02086484: .word 0x021027F4
_02086488: .word 0x021027C8
_0208648C: .word 0x021027DC
	thumb_func_end sub_020863F4

	thumb_func_start sub_02086490
sub_02086490: ; 0x02086490
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x20
	mov r1, #0x2f
	lsl r1, r1, #4
	add r7, r0, #0
	add r0, r1, #4
	ldr r5, [r7, r0]
	add r0, r1, #0
	add r0, #0xc
	ldr r0, [r7, r0]
	ldr r6, [r7, r1]
	str r0, [sp, #0x18]
	add r0, r1, #0
	add r0, #8
	ldr r0, [r7, r0]
	mov r3, #1
	str r0, [sp, #0x1c]
	sub r0, r1, #4
	ldr r4, [r7, r0]
	mov r0, #0
	str r0, [sp]
	str r0, [sp, #4]
	str r0, [sp, #8]
	mov r0, #0x6c
	str r0, [sp, #0xc]
	ldr r2, [sp, #0x1c]
	add r0, r4, #0
	mov r1, #0xc
	bl sub_02007B44
	mov r0, #0
	str r0, [sp]
	str r0, [sp, #4]
	str r0, [sp, #8]
	mov r0, #0x6c
	str r0, [sp, #0xc]
	ldr r2, [sp, #0x1c]
	add r0, r4, #0
	mov r1, #0xe
	mov r3, #1
	bl sub_02007B68
	mov r1, #0
	str r1, [sp]
	mov r0, #0x20
	str r0, [sp, #4]
	str r1, [sp, #8]
	ldr r0, [sp, #0x18]
	mov r1, #0xbe
	mov r2, #0xd
	mov r3, #0x6c
	bl PaletteData_LoadNarc
	mov r0, #0
	str r0, [sp]
	str r0, [sp, #4]
	str r0, [sp, #8]
	mov r0, #0x6c
	str r0, [sp, #0xc]
	ldr r2, [sp, #0x1c]
	add r0, r4, #0
	mov r1, #0xf
	mov r3, #5
	bl sub_02007B44
	mov r0, #0
	str r0, [sp]
	str r0, [sp, #4]
	str r0, [sp, #8]
	mov r0, #0x6c
	str r0, [sp, #0xc]
	ldr r2, [sp, #0x1c]
	add r0, r4, #0
	mov r1, #0x11
	mov r3, #5
	bl sub_02007B68
	mov r0, #1
	str r0, [sp]
	mov r0, #0x20
	str r0, [sp, #4]
	mov r0, #0
	str r0, [sp, #8]
	ldr r0, [sp, #0x18]
	mov r1, #0xbe
	mov r2, #0x10
	mov r3, #0x6c
	bl PaletteData_LoadNarc
	str r4, [sp]
	mov r1, #1
	str r1, [sp, #4]
	mov r0, #0
	str r0, [sp, #8]
	str r1, [sp, #0xc]
	mov r0, #0xfa
	str r1, [sp, #0x10]
	lsl r0, r0, #2
	str r0, [sp, #0x14]
	ldr r0, [sp, #0x18]
	mov r1, #2
	add r2, r6, #0
	add r3, r5, #0
	bl sub_0200D68C
	mov r3, #0
	str r3, [sp]
	mov r0, #1
	str r0, [sp, #4]
	mov r0, #0xfa
	lsl r0, r0, #2
	str r0, [sp, #8]
	add r0, r6, #0
	add r1, r5, #0
	add r2, r4, #0
	bl sub_0200D504
	mov r0, #0
	str r0, [sp]
	mov r0, #0xfa
	lsl r0, r0, #2
	str r0, [sp, #4]
	add r0, r6, #0
	add r1, r5, #0
	add r2, r4, #0
	mov r3, #2
	bl sub_0200D6EC
	mov r0, #0
	str r0, [sp]
	mov r0, #0xfa
	lsl r0, r0, #2
	str r0, [sp, #4]
	add r0, r6, #0
	add r1, r5, #0
	add r2, r4, #0
	mov r3, #3
	bl sub_0200D71C
	str r4, [sp]
	mov r0, #5
	str r0, [sp, #4]
	mov r0, #0
	str r0, [sp, #8]
	mov r0, #1
	str r0, [sp, #0xc]
	str r0, [sp, #0x10]
	ldr r0, _020866C4 ; =0x000003E9
	mov r1, #2
	str r0, [sp, #0x14]
	ldr r0, [sp, #0x18]
	add r2, r6, #0
	add r3, r5, #0
	bl sub_0200D68C
	mov r0, #0
	str r0, [sp]
	mov r0, #1
	str r0, [sp, #4]
	ldr r0, _020866C4 ; =0x000003E9
	add r1, r5, #0
	str r0, [sp, #8]
	add r0, r6, #0
	add r2, r4, #0
	mov r3, #4
	bl sub_0200D504
	mov r0, #0
	str r0, [sp]
	ldr r0, _020866C4 ; =0x000003E9
	add r1, r5, #0
	str r0, [sp, #4]
	add r0, r6, #0
	add r2, r4, #0
	mov r3, #6
	bl sub_0200D6EC
	mov r0, #0
	str r0, [sp]
	ldr r0, _020866C4 ; =0x000003E9
	add r1, r5, #0
	str r0, [sp, #4]
	add r0, r6, #0
	add r2, r4, #0
	mov r3, #7
	bl sub_0200D71C
	str r4, [sp]
	mov r0, #9
	str r0, [sp, #4]
	mov r0, #0
	str r0, [sp, #8]
	mov r1, #2
	str r1, [sp, #0xc]
	mov r0, #1
	str r0, [sp, #0x10]
	ldr r0, _020866C8 ; =0x000003EA
	add r2, r6, #0
	str r0, [sp, #0x14]
	ldr r0, [sp, #0x18]
	add r3, r5, #0
	bl sub_0200D68C
	mov r0, #0
	str r0, [sp]
	mov r0, #1
	str r0, [sp, #4]
	ldr r0, _020866C8 ; =0x000003EA
	add r1, r5, #0
	str r0, [sp, #8]
	add r0, r6, #0
	add r2, r4, #0
	mov r3, #8
	bl sub_0200D504
	mov r0, #0
	str r0, [sp]
	ldr r0, _020866C8 ; =0x000003EA
	add r1, r5, #0
	str r0, [sp, #4]
	add r0, r6, #0
	add r2, r4, #0
	mov r3, #0xa
	bl sub_0200D6EC
	mov r0, #0
	str r0, [sp]
	ldr r0, _020866C8 ; =0x000003EA
	add r1, r5, #0
	str r0, [sp, #4]
	add r0, r6, #0
	add r2, r4, #0
	mov r3, #0xb
	bl sub_0200D71C
	mov r0, #0xf6
	lsl r0, r0, #2
	ldr r0, [r7, r0]
	bl sub_0202ADCC
	add r4, r0, #0
	lsl r0, r4, #0x18
	lsr r0, r0, #0x18
	str r0, [sp]
	mov r0, #0x6c
	str r0, [sp, #4]
	ldr r0, [sp, #0x1c]
	mov r1, #4
	mov r2, #1
	mov r3, #0xa
	bl sub_0200E644
	add r0, r4, #0
	bl sub_0200E640
	add r2, r0, #0
	mov r0, #1
	str r0, [sp]
	mov r0, #0x20
	str r0, [sp, #4]
	mov r0, #0xb0
	str r0, [sp, #8]
	ldr r0, [sp, #0x18]
	mov r1, #0x26
	mov r3, #0x6c
	bl PaletteData_LoadNarc
	mov r0, #1
	str r0, [sp]
	mov r0, #0x20
	str r0, [sp, #4]
	mov r0, #0xc0
	str r0, [sp, #8]
	ldr r0, [sp, #0x18]
	mov r1, #0x10
	mov r2, #8
	mov r3, #0x6c
	bl PaletteData_LoadNarc
	add sp, #0x20
	pop {r3, r4, r5, r6, r7, pc}
	nop
_020866C4: .word 0x000003E9
_020866C8: .word 0x000003EA
	thumb_func_end sub_02086490

	thumb_func_start sub_020866CC
sub_020866CC: ; 0x020866CC
	push {r3, r4, r5, r6, r7, lr}
	add r6, r0, #0
	mov r0, #0x2d
	lsl r0, r0, #4
	ldr r0, [r6, r0]
	mov r4, #0
	cmp r0, #0
	ble _020866F2
	mov r7, #0x2d
	add r5, r6, #0
	lsl r7, r7, #4
_020866E2:
	ldr r0, [r5, #0xc]
	bl sub_0200D9DC
	ldr r0, [r6, r7]
	add r4, r4, #1
	add r5, #0x1c
	cmp r4, r0
	blt _020866E2
_020866F2:
	mov r0, #0xfb
	lsl r0, r0, #2
	ldr r0, [r6, r0]
	mov r5, #0
	cmp r0, #0
	ble _02086718
	mov r7, #0xfb
	add r4, r6, #0
	lsl r7, r7, #2
_02086704:
	mov r0, #0x73
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	bl sub_0200D9DC
	ldr r0, [r6, r7]
	add r5, r5, #1
	add r4, #0x1c
	cmp r5, r0
	blt _02086704
_02086718:
	mov r7, #0x9d
	mov r5, #0
	add r4, r6, #0
	lsl r7, r7, #2
_02086720:
	ldr r0, [r4, r7]
	bl sub_0200D9DC
	add r5, r5, #1
	add r4, #0x1c
	cmp r5, #2
	blt _02086720
	mov r7, #0x22
	mov r5, #0
	add r4, r6, #0
	lsl r7, r7, #4
_02086736:
	ldr r0, [r4, r7]
	bl sub_0200D9DC
	add r5, r5, #1
	add r4, #0x1c
	cmp r5, #3
	blt _02086736
	add r0, r6, #0
	bl sub_02086FE8
	mov r0, #0xe7
	lsl r0, r0, #2
	add r0, r6, r0
	bl RemoveWindow
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_020866CC

	thumb_func_start sub_02086758
sub_02086758: ; 0x02086758
	push {r4, r5, r6, r7, lr}
	sub sp, #0x44
	str r0, [sp]
	mov r0, #0
	str r0, [sp, #0xc]
	mov r0, #0x2f
	lsl r0, r0, #4
	ldr r1, [sp]
	add r2, r0, #4
	ldr r1, [r1, r0]
	str r1, [sp, #8]
	ldr r1, [sp]
	ldr r1, [r1, r2]
	add r2, sp, #0x10
	str r1, [sp, #4]
	ldr r1, [sp, #0xc]
	strh r1, [r2]
	strh r1, [r2, #2]
	strh r1, [r2, #4]
	strh r1, [r2, #6]
	mov r1, #0xa
	str r1, [sp, #0x18]
	ldr r1, [sp, #0xc]
	mov r2, #1
	str r1, [sp, #0x3c]
	str r1, [sp, #0x40]
	str r1, [sp, #0x1c]
	add r1, r0, #0
	add r1, #0xf8
	str r1, [sp, #0x24]
	str r1, [sp, #0x28]
	str r1, [sp, #0x2c]
	str r1, [sp, #0x30]
	sub r1, r2, #2
	str r1, [sp, #0x34]
	str r1, [sp, #0x38]
	ldr r1, [sp]
	str r2, [sp, #0x20]
	add r0, #0xf0
	ldr r4, [r1, r0]
	mov r1, #0x3f
	ldr r0, [sp]
	lsl r1, r1, #4
	ldr r0, [r0, r1]
	sub r6, r0, #1
	bmi _020867DC
	mov r0, #0x1c
	add r1, r6, #0
	mul r1, r0
	ldr r0, [sp]
	mov r7, #0xa
	add r5, r0, r1
_020867C0:
	add r0, r4, #0
	add r1, r7, #0
	bl _u32_div_f
	add r0, r1, #1
	str r0, [r5]
	add r0, r4, #0
	mov r1, #0xa
	bl _u32_div_f
	add r4, r0, #0
	sub r5, #0x1c
	sub r6, r6, #1
	bpl _020867C0
_020867DC:
	mov r1, #0xfb
	ldr r0, [sp]
	lsl r1, r1, #2
	ldr r0, [r0, r1]
	mov r2, #0x2d
	ldr r1, [sp]
	lsl r2, r2, #4
	ldr r1, [r1, r2]
	mov r6, #0
	add r1, r1, r0
	cmp r1, #0
	ble _0208689C
	ldr r4, [sp]
	mov r7, #0x4c
	add r5, r4, #0
_020867FA:
	cmp r0, #0
	beq _0208684C
	mov r0, #7
	lsl r0, r0, #6
	ldr r1, [r4, r0]
	ldr r0, [sp, #0xc]
	add r0, r0, r1
	add r0, r0, #1
	cmp r6, r0
	bne _0208684C
	ldr r0, [sp, #8]
	ldr r1, [sp, #4]
	add r2, sp, #0x10
	bl sub_0200D734
	mov r1, #0x73
	lsl r1, r1, #2
	str r0, [r4, r1]
	add r0, r1, #0
	lsl r1, r7, #0x10
	ldr r0, [r4, r0]
	asr r1, r1, #0x10
	mov r2, #0x18
	bl sub_0200DDB8
	mov r0, #0x73
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0x16
	bl sub_0200DC4C
	mov r0, #0x73
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	bl sub_0200DC18
	ldr r0, [sp, #0xc]
	add r4, #0x1c
	add r0, r0, #1
	str r0, [sp, #0xc]
	b _02086882
_0208684C:
	ldr r0, [sp, #8]
	ldr r1, [sp, #4]
	add r2, sp, #0x10
	bl sub_0200D734
	lsl r1, r7, #0x10
	str r0, [r5, #0xc]
	asr r1, r1, #0x10
	mov r2, #0x18
	bl sub_0200DDB8
	ldr r0, [r5]
	ldr r1, [r5, #8]
	bl sub_02086D98
	add r1, r0, #0
	ldr r0, [r5, #0xc]
	bl sub_0200DC4C
	ldr r0, [r5, #0xc]
	mov r1, #2
	bl sub_0200DF98
	ldr r0, [r5, #0xc]
	bl sub_0200DC18
	add r5, #0x1c
_02086882:
	ldr r1, [sp]
	mov r0, #0xfb
	lsl r0, r0, #2
	ldr r0, [r1, r0]
	add r2, r1, #0
	mov r1, #0x2d
	lsl r1, r1, #4
	ldr r1, [r2, r1]
	add r6, r6, #1
	add r1, r1, r0
	add r7, #8
	cmp r6, r1
	blt _020867FA
_0208689C:
	add sp, #0x44
	pop {r4, r5, r6, r7, pc}
	thumb_func_end sub_02086758

	thumb_func_start sub_020868A0
sub_020868A0: ; 0x020868A0
	push {r3, r4, r5, r6, lr}
	sub sp, #0x34
	mov r1, #0x2f
	lsl r1, r1, #4
	add r5, r0, #0
	add r0, r1, #4
	ldr r6, [r5, r1]
	ldr r4, [r5, r0]
	mov r2, #0
	add r0, sp, #0
	strh r2, [r0]
	strh r2, [r0, #2]
	strh r2, [r0, #4]
	strh r2, [r0, #6]
	add r1, #0xf9
	mov r0, #1
	str r0, [sp, #0x10]
	sub r0, r0, #2
	str r2, [sp, #8]
	str r2, [sp, #0x2c]
	str r2, [sp, #0x30]
	str r2, [sp, #0xc]
	str r1, [sp, #0x14]
	str r1, [sp, #0x18]
	str r1, [sp, #0x1c]
	str r1, [sp, #0x20]
	str r0, [sp, #0x24]
	str r0, [sp, #0x28]
	add r0, r6, #0
	add r1, r4, #0
	add r2, sp, #0
	bl sub_0200D734
	mov r1, #0x22
	lsl r1, r1, #4
	str r0, [r5, r1]
	add r0, r6, #0
	add r1, r4, #0
	add r2, sp, #0
	bl sub_0200D734
	mov r1, #0x8f
	lsl r1, r1, #2
	str r0, [r5, r1]
	add r0, r6, #0
	add r1, r4, #0
	add r2, sp, #0
	bl sub_0200D734
	mov r1, #0x96
	lsl r1, r1, #2
	str r0, [r5, r1]
	mov r1, #0x3f
	lsl r1, r1, #4
	ldr r1, [r5, r1]
	add r0, r5, #0
	bl sub_02086AE4
	mov r0, #0x22
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	mov r1, #0
	bl sub_0200DC4C
	mov r0, #0x22
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	bl sub_0200DC18
	mov r2, #0x91
	lsl r2, r2, #2
	mov r1, #0
	strh r1, [r5, r2]
	add r0, r2, #2
	strh r1, [r5, r0]
	mov r0, #1
	sub r2, #0x14
	str r0, [r5, r2]
	add r0, r5, #0
	bl sub_02086B2C
	mov r1, #0x8f
	lsl r1, r1, #2
	ldr r0, [r5, r1]
	sub r1, #0xc
	ldr r1, [r5, r1]
	bl sub_0200DC4C
	mov r0, #0x8f
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	bl sub_0200DC18
	mov r0, #0x8f
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	mov r1, #1
	bl sub_0200E0FC
	mov r2, #0x26
	lsl r2, r2, #4
	mov r1, #0
	strh r1, [r5, r2]
	add r0, r2, #2
	strh r1, [r5, r0]
	mov r0, #1
	sub r2, #0x14
	str r0, [r5, r2]
	add r0, r5, #0
	bl sub_02086B2C
	mov r1, #0x96
	lsl r1, r1, #2
	ldr r0, [r5, r1]
	sub r1, #0xc
	ldr r1, [r5, r1]
	bl sub_0200DC4C
	mov r0, #0x96
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	bl sub_0200DC18
	mov r0, #0x96
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	mov r1, #1
	bl sub_0200E0FC
	add r0, r5, #0
	mov r1, #1
	mov r2, #0
	bl sub_02086AB4
	add r0, r5, #0
	mov r1, #2
	mov r2, #0
	bl sub_02086AB4
	add sp, #0x34
	pop {r3, r4, r5, r6, pc}
	.balign 4, 0
	thumb_func_end sub_020868A0

	thumb_func_start sub_020869BC
sub_020869BC: ; 0x020869BC
	push {r3, r4, r5, r6, lr}
	sub sp, #0x34
	mov r2, #0x2f
	lsl r2, r2, #4
	add r5, r0, #0
	add r0, r2, #4
	ldr r6, [r5, r2]
	ldr r4, [r5, r0]
	mov r0, #0
	add r1, sp, #0
	strh r0, [r1]
	strh r0, [r1, #2]
	strh r0, [r1, #4]
	strh r0, [r1, #6]
	add r2, #0xfa
	mov r1, #0xa
	str r1, [sp, #8]
	mov r1, #1
	str r1, [sp, #0x10]
	sub r1, r1, #2
	str r0, [sp, #0xc]
	str r0, [sp, #0x2c]
	str r0, [sp, #0x30]
	str r0, [sp, #0xc]
	str r2, [sp, #0x14]
	str r2, [sp, #0x18]
	str r2, [sp, #0x1c]
	str r2, [sp, #0x20]
	str r1, [sp, #0x24]
	str r1, [sp, #0x28]
	add r0, r6, #0
	add r1, r4, #0
	add r2, sp, #0
	bl sub_0200D734
	mov r1, #0x9d
	lsl r1, r1, #2
	str r0, [r5, r1]
	mov r0, #1
	str r0, [sp, #0xc]
	add r0, r6, #0
	add r1, r4, #0
	add r2, sp, #0
	bl sub_0200D734
	mov r2, #0x29
	lsl r2, r2, #4
	add r1, r2, #0
	str r0, [r5, r2]
	add r1, #0xde
	ldrb r3, [r5, r1]
	add r1, r2, #0
	add r1, #0xdf
	ldrb r1, [r5, r1]
	add r0, r2, #0
	sub r0, #0x1c
	add r3, r3, r1
	lsr r1, r3, #0x1f
	add r1, r3, r1
	add r3, r2, #0
	add r3, #0xdc
	add r2, #0xdd
	lsl r1, r1, #0xf
	ldrb r3, [r5, r3]
	ldrb r2, [r5, r2]
	ldr r0, [r5, r0]
	asr r1, r1, #0x10
	add r3, r3, r2
	lsr r2, r3, #0x1f
	add r2, r3, r2
	lsl r2, r2, #0xf
	asr r2, r2, #0x10
	bl sub_0200DDB8
	mov r0, #0x9d
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	mov r1, #0
	bl sub_0200DC4C
	mov r0, #0x9d
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	bl sub_0200DC18
	mov r2, #0x29
	lsl r2, r2, #4
	add r1, r2, #0
	add r1, #0xe2
	ldrb r3, [r5, r1]
	add r1, r2, #0
	add r1, #0xe3
	ldrb r1, [r5, r1]
	ldr r0, [r5, r2]
	add r3, r3, r1
	lsr r1, r3, #0x1f
	add r1, r3, r1
	add r3, r2, #0
	add r3, #0xe0
	add r2, #0xe1
	lsl r1, r1, #0xf
	ldrb r3, [r5, r3]
	ldrb r2, [r5, r2]
	asr r1, r1, #0x10
	add r3, r3, r2
	lsr r2, r3, #0x1f
	add r2, r3, r2
	lsl r2, r2, #0xf
	asr r2, r2, #0x10
	bl sub_0200DDB8
	mov r0, #0x29
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	mov r1, #0
	bl sub_0200DC4C
	mov r0, #0x29
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	bl sub_0200DC18
	add sp, #0x34
	pop {r3, r4, r5, r6, pc}
	thumb_func_end sub_020869BC

	thumb_func_start sub_02086AB4
sub_02086AB4: ; 0x02086AB4
	push {r3, lr}
	cmp r2, #1
	bne _02086ACE
	mov r2, #0x1c
	mul r2, r1
	add r1, r0, r2
	mov r0, #0x22
	lsl r0, r0, #4
	ldr r0, [r1, r0]
	mov r1, #1
	bl sub_0200DCE8
	pop {r3, pc}
_02086ACE:
	mov r2, #0x1c
	mul r2, r1
	add r1, r0, r2
	mov r0, #0x22
	lsl r0, r0, #4
	ldr r0, [r1, r0]
	mov r1, #0
	bl sub_0200DCE8
	pop {r3, pc}
	.balign 4, 0
	thumb_func_end sub_02086AB4

	thumb_func_start sub_02086AE4
sub_02086AE4: ; 0x02086AE4
	push {r3, r4, lr}
	sub sp, #4
	add r4, r0, #0
	mov r0, #0x3f
	lsl r0, r0, #4
	ldr r0, [r4, r0]
	cmp r1, r0
	blt _02086B26
	mov r0, #0x1c
	mul r0, r1
	add r0, r4, r0
	mov r2, #0x85
	ldr r0, [r0, #0xc]
	lsl r2, r2, #2
	str r1, [r4, r2]
	add r1, sp, #0
	add r1, #2
	add r2, sp, #0
	bl sub_0200DE44
	mov r0, #0x22
	lsl r0, r0, #4
	add r3, sp, #0
	mov r2, #0
	ldrsh r2, [r3, r2]
	mov r1, #2
	ldrsh r1, [r3, r1]
	add r2, #0x10
	lsl r2, r2, #0x10
	ldr r0, [r4, r0]
	asr r2, r2, #0x10
	bl sub_0200DDB8
_02086B26:
	add sp, #4
	pop {r3, r4, pc}
	.balign 4, 0
	thumb_func_end sub_02086AE4

	thumb_func_start sub_02086B2C
sub_02086B2C: ; 0x02086B2C
	push {r4, lr}
	add r1, #0x10
	mov r2, #0x8f
	add r3, r0, #0
	lsl r2, r2, #2
	lsl r1, r1, #2
	ldr r0, [r3, r2]
	add r3, r3, r1
	add r1, r2, #0
	add r1, #0xca
	ldrb r4, [r3, r1]
	add r1, r2, #0
	add r1, #0xcb
	ldrb r1, [r3, r1]
	add r4, r4, r1
	lsr r1, r4, #0x1f
	add r1, r4, r1
	add r4, r2, #0
	add r4, #0xc8
	add r2, #0xc9
	lsl r1, r1, #0xf
	ldrb r4, [r3, r4]
	ldrb r2, [r3, r2]
	asr r1, r1, #0x10
	add r3, r4, r2
	lsr r2, r3, #0x1f
	add r2, r3, r2
	lsl r2, r2, #0xf
	asr r2, r2, #0x10
	bl sub_0200DDB8
	pop {r4, pc}
	thumb_func_end sub_02086B2C

	thumb_func_start sub_02086B6C
sub_02086B6C: ; 0x02086B6C
	push {r4, lr}
	add r3, r0, #0
	mov r0, #0x1c
	mul r0, r2
	add r1, #0x10
	mov r2, #0x22
	lsl r1, r1, #2
	add r0, r3, r0
	lsl r2, r2, #4
	add r3, r3, r1
	add r1, r2, #0
	add r1, #0xe6
	ldrb r4, [r3, r1]
	add r1, r2, #0
	add r1, #0xe7
	ldrb r1, [r3, r1]
	ldr r0, [r0, r2]
	add r4, r4, r1
	lsr r1, r4, #0x1f
	add r1, r4, r1
	add r4, r2, #0
	add r4, #0xe4
	add r2, #0xe5
	lsl r1, r1, #0xf
	ldrb r4, [r3, r4]
	ldrb r2, [r3, r2]
	asr r1, r1, #0x10
	add r3, r4, r2
	lsr r2, r3, #0x1f
	add r2, r3, r2
	lsl r2, r2, #0xf
	asr r2, r2, #0x10
	bl sub_0200DDB8
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_02086B6C

	thumb_func_start sub_02086BB4
sub_02086BB4: ; 0x02086BB4
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	mov r0, #0x22
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	bl sub_0200DC18
	mov r0, #0x8f
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	bl sub_0200DC18
	mov r0, #0x96
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	bl sub_0200DC18
	add r4, r5, #0
	mov r7, #0x22
	mov r6, #1
	add r4, #0x1c
	lsl r7, r7, #4
_02086BE0:
	ldr r0, [r4, r7]
	bl sub_0200DC64
	cmp r0, #3
	bne _02086C34
	mov r0, #0x22
	lsl r0, r0, #4
	ldr r0, [r4, r0]
	bl sub_0200DCA0
	cmp r0, #0
	bne _02086C76
	mov r0, #0x22
	mov r1, #0x85
	lsl r0, r0, #4
	lsl r1, r1, #2
	ldr r0, [r4, r0]
	ldr r1, [r4, r1]
	bl sub_0200DC4C
	mov r0, #0xdd
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	cmp r0, #1
	bne _02086C1E
	add r0, r5, #0
	mov r1, #1
	mov r2, #0
	bl sub_02086AB4
	b _02086C28
_02086C1E:
	mov r1, #1
	add r0, r5, #0
	add r2, r1, #0
	bl sub_02086AB4
_02086C28:
	add r0, r5, #0
	mov r1, #2
	mov r2, #0
	bl sub_02086AB4
	b _02086C76
_02086C34:
	mov r1, #0x85
	lsl r1, r1, #2
	ldr r1, [r4, r1]
	cmp r0, r1
	beq _02086C48
	mov r0, #0x22
	lsl r0, r0, #4
	ldr r0, [r4, r0]
	bl sub_0200DC4C
_02086C48:
	mov r0, #0x96
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	bl sub_0200DC64
	cmp r0, #3
	beq _02086C76
	mov r0, #0xdd
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	cmp r0, #1
	bne _02086C6C
	add r0, r5, #0
	mov r1, #1
	mov r2, #0
	bl sub_02086AB4
	b _02086C76
_02086C6C:
	mov r1, #1
	add r0, r5, #0
	add r2, r1, #0
	bl sub_02086AB4
_02086C76:
	add r6, r6, #1
	add r4, #0x1c
	cmp r6, #3
	blt _02086BE0
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_02086BB4

	thumb_func_start sub_02086C80
sub_02086C80: ; 0x02086C80
	push {r3, lr}
	cmp r0, #0
	beq _02086C8A
	bl sub_020136B4
_02086C8A:
	pop {r3, pc}
	thumb_func_end sub_02086C80

	thumb_func_start sub_02086C8C
sub_02086C8C: ; 0x02086C8C
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	mov r0, #0
	str r0, [sp]
	add r4, r5, #0
_02086C96:
	ldr r0, _02086D94 ; =0x0000036E
	ldrb r1, [r5, r0]
	add r0, r0, #1
	ldrb r0, [r5, r0]
	add r1, r1, r0
	lsr r0, r1, #0x1f
	add r0, r1, r0
	lsl r0, r0, #0xf
	asr r0, r0, #0x10
	sub r0, #0x28
	lsl r0, r0, #0x10
	asr r7, r0, #0x10
	mov r0, #0xdb
	lsl r0, r0, #2
	ldrb r1, [r5, r0]
	add r0, r0, #1
	ldrb r0, [r5, r0]
	add r1, r1, r0
	lsr r0, r1, #0x1f
	add r0, r1, r0
	lsl r0, r0, #0xf
	asr r0, r0, #0x10
	sub r0, r0, #7
	lsl r0, r0, #0x10
	asr r6, r0, #0x10
	mov r0, #0x9a
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	cmp r0, #0
	beq _02086CD8
	cmp r0, #1
	beq _02086CE2
	b _02086D60
_02086CD8:
	mov r0, #0xa
	mov r1, #0
	lsl r0, r0, #6
	strb r1, [r4, r0]
	b _02086D82
_02086CE2:
	mov r0, #0xa
	lsl r0, r0, #6
	ldrb r0, [r4, r0]
	add r1, r0, #1
	mov r0, #0xa
	lsl r0, r0, #6
	strb r1, [r4, r0]
	ldrb r0, [r4, r0]
	cmp r0, #1
	bne _02086D12
	mov r0, #0x9d
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #1
	bl sub_0200DC4C
	mov r0, #0xdf
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	add r1, r7, #0
	add r2, r6, #0
	bl sub_02086C80
	b _02086D82
_02086D12:
	cmp r0, #2
	bne _02086D32
	mov r0, #0x9d
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #2
	bl sub_0200DC4C
	mov r0, #0xdf
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	add r1, r7, #0
	sub r2, r6, #1
	bl sub_02086C80
	b _02086D82
_02086D32:
	cmp r0, #0xa
	bne _02086D82
	mov r0, #0x9d
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0
	bl sub_0200DC4C
	mov r0, #0xdf
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	add r1, r7, #0
	add r2, r6, #0
	bl sub_02086C80
	mov r0, #0x9a
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	add r1, r0, #1
	mov r0, #0x9a
	lsl r0, r0, #2
	str r1, [r4, r0]
	b _02086D82
_02086D60:
	mov r0, #0x9d
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0
	bl sub_0200DC4C
	mov r0, #0xdf
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	add r1, r7, #0
	add r2, r6, #0
	bl sub_02086C80
	mov r0, #0x9a
	mov r1, #0
	lsl r0, r0, #2
	str r1, [r4, r0]
_02086D82:
	ldr r0, [sp]
	add r5, r5, #4
	add r0, r0, #1
	add r4, #0x1c
	str r0, [sp]
	cmp r0, #2
	blt _02086C96
	pop {r3, r4, r5, r6, r7, pc}
	nop
_02086D94: .word 0x0000036E
	thumb_func_end sub_02086C8C

	thumb_func_start sub_02086D98
sub_02086D98: ; 0x02086D98
	mov r2, #0
	cmp r1, #0
	bne _02086DA0
	mov r2, #0xb
_02086DA0:
	add r0, r2, r0
	bx lr
	thumb_func_end sub_02086D98

	thumb_func_start sub_02086DA4
sub_02086DA4: ; 0x02086DA4
	push {r4, r5, r6, r7}
	mov r1, #0x2d
	lsl r1, r1, #4
	ldr r1, [r0, r1]
	mov r3, #0
	cmp r1, #0
	ble _02086DDE
	mov r6, #0x2e
	lsl r6, r6, #4
	add r4, r0, #0
	add r1, r3, #0
	mov r2, #1
	sub r7, r6, #4
_02086DBE:
	ldr r5, [r0, r7]
	cmp r3, r5
	blt _02086DCE
	ldr r5, [r0, r6]
	cmp r3, r5
	bge _02086DCE
	str r2, [r4, #8]
	b _02086DD0
_02086DCE:
	str r1, [r4, #8]
_02086DD0:
	mov r5, #0x2d
	lsl r5, r5, #4
	ldr r5, [r0, r5]
	add r3, r3, #1
	add r4, #0x1c
	cmp r3, r5
	blt _02086DBE
_02086DDE:
	pop {r4, r5, r6, r7}
	bx lr
	.balign 4, 0
	thumb_func_end sub_02086DA4

	thumb_func_start sub_02086DE4
sub_02086DE4: ; 0x02086DE4
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x10
	str r1, [sp, #4]
	mov r1, #0xb5
	lsl r1, r1, #2
	str r0, [sp]
	ldr r0, [r0, r1]
	mov r4, #0
	lsl r2, r0, #1
	ldr r0, [sp]
	str r4, [sp, #8]
	add r2, r0, r2
	add r0, r1, #0
	sub r0, #0x34
	ldrsh r5, [r2, r0]
	ldr r0, [sp]
	sub r1, r1, #4
	ldr r0, [r0, r1]
	cmp r0, #0
	bgt _02086E0E
	b _02086F3E
_02086E0E:
	ldr r7, [sp]
	add r6, r7, #0
_02086E12:
	mov r0, #0xb7
	ldr r1, [sp]
	lsl r0, r0, #2
	ldr r0, [r1, r0]
	cmp r4, r0
	blt _02086E3E
	add r2, r1, #0
	mov r1, #0x2e
	lsl r1, r1, #4
	ldr r1, [r2, r1]
	cmp r4, r1
	bge _02086E3E
	cmp r4, r0
	bne _02086E36
	add r5, #0x14
	lsl r0, r5, #0x10
	asr r5, r0, #0x10
	b _02086E50
_02086E36:
	add r5, #0x20
	lsl r0, r5, #0x10
	asr r5, r0, #0x10
	b _02086E50
_02086E3E:
	cmp r4, #0
	bne _02086E4A
	add r5, #0x14
	lsl r0, r5, #0x10
	asr r5, r0, #0x10
	b _02086E50
_02086E4A:
	add r5, #8
	lsl r0, r5, #0x10
	asr r5, r0, #0x10
_02086E50:
	add r1, sp, #0xc
	ldr r0, [r7, #0xc]
	add r1, #2
	add r2, sp, #0xc
	bl sub_0200DE44
	ldr r0, [sp, #4]
	cmp r0, #0
	bne _02086E72
	add r3, sp, #0xc
	mov r2, #0
	ldrsh r2, [r3, r2]
	ldr r0, [r7, #0xc]
	add r1, r5, #0
	bl sub_0200DDB8
	b _02086E8E
_02086E72:
	add r1, sp, #0xc
	mov r0, #2
	ldrsh r0, [r1, r0]
	sub r1, r5, r0
	lsr r0, r1, #0x1f
	add r0, r1, r0
	asr r0, r0, #1
	strh r0, [r7, #0x14]
	mov r0, #0
	strh r0, [r7, #0x16]
	mov r0, #2
	strb r0, [r7, #0x18]
	mov r0, #0
	strb r0, [r7, #0x19]
_02086E8E:
	mov r0, #7
	lsl r0, r0, #6
	ldr r0, [r6, r0]
	cmp r4, r0
	bne _02086F2C
	mov r0, #0xfb
	ldr r1, [sp]
	lsl r0, r0, #2
	ldr r1, [r1, r0]
	ldr r0, [sp, #8]
	cmp r0, r1
	beq _02086F2C
	mov r0, #0x73
	lsl r0, r0, #2
	add r1, sp, #0xc
	ldr r0, [r6, r0]
	add r1, #2
	add r2, sp, #0xc
	bl sub_0200DE44
	ldr r1, [sp]
	mov r0, #0x2e
	lsl r0, r0, #4
	ldr r0, [r1, r0]
	add r2, r1, #0
	mov r1, #0xb7
	lsl r1, r1, #2
	ldr r1, [r2, r1]
	cmp r1, r0
	bne _02086ED2
	add r5, #8
	lsl r0, r5, #0x10
	asr r5, r0, #0x10
	b _02086EE8
_02086ED2:
	cmp r4, r1
	ble _02086EE2
	cmp r4, r0
	bge _02086EE2
	add r5, #0x14
	lsl r0, r5, #0x10
	asr r5, r0, #0x10
	b _02086EE8
_02086EE2:
	add r5, #8
	lsl r0, r5, #0x10
	asr r5, r0, #0x10
_02086EE8:
	ldr r0, [sp, #4]
	cmp r0, #0
	bne _02086F02
	mov r0, #0x73
	lsl r0, r0, #2
	add r3, sp, #0xc
	mov r2, #0
	ldrsh r2, [r3, r2]
	ldr r0, [r6, r0]
	add r1, r5, #0
	bl sub_0200DDB8
	b _02086F24
_02086F02:
	add r1, sp, #0xc
	mov r0, #2
	ldrsh r0, [r1, r0]
	sub r1, r5, r0
	lsr r0, r1, #0x1f
	add r0, r1, r0
	asr r1, r0, #1
	mov r0, #0x75
	lsl r0, r0, #2
	strh r1, [r6, r0]
	mov r1, #0
	add r0, r0, #2
	strh r1, [r6, r0]
	mov r0, #0x76
	mov r1, #2
	lsl r0, r0, #2
	strb r1, [r6, r0]
_02086F24:
	ldr r0, [sp, #8]
	add r6, #0x1c
	add r0, r0, #1
	str r0, [sp, #8]
_02086F2C:
	mov r0, #0x2d
	ldr r1, [sp]
	lsl r0, r0, #4
	ldr r0, [r1, r0]
	add r4, r4, #1
	add r7, #0x1c
	cmp r4, r0
	bge _02086F3E
	b _02086E12
_02086F3E:
	add sp, #0x10
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_02086DE4

	thumb_func_start sub_02086F44
sub_02086F44: ; 0x02086F44
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #8
	add r6, r0, #0
	mov r0, #0x2d
	lsl r0, r0, #4
	ldr r0, [r6, r0]
	mov r4, #0
	cmp r0, #0
	ble _02086FC8
	add r5, r6, #0
_02086F58:
	mov r0, #0xb7
	lsl r0, r0, #2
	ldr r0, [r6, r0]
	cmp r4, r0
	blt _02086F74
	mov r0, #0x2e
	lsl r0, r0, #4
	ldr r0, [r6, r0]
	cmp r4, r0
	bge _02086F74
	mov r0, #0x10
	str r0, [sp]
	add r7, r0, #0
	b _02086F7A
_02086F74:
	mov r0, #4
	str r0, [sp]
	mov r7, #8
_02086F7A:
	add r2, sp, #4
	ldr r0, [r5, #0xc]
	add r1, sp, #4
	add r2, #2
	bl sub_0200DE44
	add r1, sp, #4
	mov r0, #2
	ldrsh r0, [r1, r0]
	add r4, r4, #1
	sub r1, r0, r7
	ldr r0, [r5, #0x10]
	strb r1, [r0]
	add r1, sp, #4
	mov r0, #0
	ldrsh r1, [r1, r0]
	ldr r0, [sp]
	sub r1, r1, r0
	ldr r0, [r5, #0x10]
	strb r1, [r0, #2]
	add r1, sp, #4
	mov r0, #2
	ldrsh r0, [r1, r0]
	add r1, r0, r7
	ldr r0, [r5, #0x10]
	strb r1, [r0, #1]
	add r1, sp, #4
	mov r0, #0
	ldrsh r1, [r1, r0]
	ldr r0, [sp]
	add r1, r1, r0
	ldr r0, [r5, #0x10]
	add r5, #0x1c
	strb r1, [r0, #3]
	mov r0, #0x2d
	lsl r0, r0, #4
	ldr r0, [r6, r0]
	cmp r4, r0
	blt _02086F58
_02086FC8:
	add sp, #8
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_02086F44

	thumb_func_start sub_02086FCC
sub_02086FCC: ; 0x02086FCC
	push {r4, lr}
	add r4, r0, #0
	mov r0, #2
	mov r1, #0x6c
	bl sub_02013534
	mov r1, #0xde
	lsl r1, r1, #2
	str r0, [r4, r1]
	mov r0, #2
	mov r1, #0x6c
	bl sub_02002CEC
	pop {r4, pc}
	thumb_func_end sub_02086FCC

	thumb_func_start sub_02086FE8
sub_02086FE8: ; 0x02086FE8
	push {r4, lr}
	add r4, r0, #0
	mov r0, #2
	bl sub_02002DB4
	mov r0, #0xdf
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	bl sub_02013660
	mov r0, #0xe1
	lsl r0, r0, #2
	add r0, r4, r0
	bl sub_02021B5C
	mov r0, #0xe
	lsl r0, r0, #6
	ldr r0, [r4, r0]
	bl sub_02013660
	mov r0, #0x39
	lsl r0, r0, #4
	add r0, r4, r0
	bl sub_02021B5C
	mov r0, #0xde
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	bl sub_020135AC
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_02086FE8

	thumb_func_start sub_02087028
sub_02087028: ; 0x02087028
	push {r4, lr}
	sub sp, #0x18
	add r3, r0, #0
	mov r0, #0x10
	str r0, [sp]
	mov r0, #8
	str r0, [sp, #4]
	mov r0, #0
	str r0, [sp, #8]
	mov r0, #1
	ldr r4, _02087060 ; =0x000003EB
	str r0, [sp, #0xc]
	str r0, [sp, #0x10]
	add r0, r4, #0
	add r2, r4, #0
	str r4, [sp, #0x14]
	sub r0, #0xef
	sub r2, #0xfb
	sub r4, #0xf7
	ldr r0, [r3, r0]
	ldr r2, [r3, r2]
	ldr r3, [r3, r4]
	mov r1, #2
	bl sub_0200D644
	add sp, #0x18
	pop {r4, pc}
	nop
_02087060: .word 0x000003EB
	thumb_func_end sub_02087028

	thumb_func_start sub_02087064
sub_02087064: ; 0x02087064
	push {r3, r4, lr}
	sub sp, #4
	add r4, r0, #0
	bl sub_02087028
	mov r1, #0
	add r0, r4, #0
	mov r2, #0x4e
	mov r3, #0xa5
	str r1, [sp]
	bl sub_02087090
	mov r0, #0
	str r0, [sp]
	add r0, r4, #0
	mov r1, #1
	mov r2, #0xac
	mov r3, #0xa5
	bl sub_02087090
	add sp, #4
	pop {r3, r4, pc}
	thumb_func_end sub_02087064

	thumb_func_start sub_02087090
sub_02087090: ; 0x02087090
	push {r4, r5, r6, r7, lr}
	sub sp, #0x5c
	add r5, r0, #0
	add r4, r1, #0
	mov r0, #0
	mov r1, #0x1b
	mov r2, #0x26
	mov r3, #0x6c
	bl NewMsgDataFromNarc
	add r1, r4, #2
	str r0, [sp, #0x14]
	bl NewString_ReadMsgData
	str r0, [sp, #0x18]
	add r0, sp, #0x1c
	bl sub_0201D3C4
	mov r0, #0
	str r0, [sp]
	str r0, [sp, #4]
	mov r0, #0xbe
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	add r1, sp, #0x1c
	mov r2, #0xa
	mov r3, #2
	bl sub_0201D494
	ldr r1, [sp, #0x18]
	mov r0, #2
	mov r2, #0
	mov r3, #0x50
	bl sub_020030A0
	mov r1, #0
	add r3, r0, #0
	str r1, [sp]
	mov r0, #0xff
	str r0, [sp, #4]
	ldr r0, _020871BC ; =0x000F0D02
	ldr r2, [sp, #0x18]
	str r0, [sp, #8]
	str r1, [sp, #0xc]
	add r0, sp, #0x1c
	mov r1, #2
	bl sub_020200FC
	add r0, sp, #0x1c
	mov r1, #1
	mov r2, #0x6c
	bl sub_02013688
	mov r3, #0xe1
	lsl r3, r3, #2
	mov r1, #0xc
	add r6, r4, #0
	mul r6, r1
	mov r1, #1
	add r3, r5, r3
	add r2, r1, #0
	add r3, r3, r6
	bl sub_02021AC8
	add r0, r4, #0
	add r0, #0x1a
	lsl r0, r0, #2
	add r3, r5, r0
	ldr r0, _020871C0 ; =0x00000306
	add r2, r0, #1
	ldrb r1, [r3, r0]
	ldrb r2, [r3, r2]
	add r2, r1, r2
	lsr r1, r2, #0x1f
	add r1, r2, r1
	lsl r1, r1, #0xf
	asr r7, r1, #0x10
	sub r1, r0, #2
	ldrb r2, [r3, r1]
	sub r1, r0, #1
	ldrb r1, [r3, r1]
	add r2, r2, r1
	lsr r1, r2, #0x1f
	add r1, r2, r1
	lsl r1, r1, #0xf
	asr r1, r1, #0x10
	str r1, [sp, #0x10]
	add r1, r0, #0
	add r1, #0x72
	ldr r1, [r5, r1]
	sub r0, #0x12
	str r1, [sp, #0x2c]
	add r1, sp, #0x1c
	str r1, [sp, #0x30]
	ldr r0, [r5, r0]
	bl sub_0200E2B0
	mov r1, #0xbd
	lsl r1, r1, #2
	str r0, [sp, #0x34]
	ldr r0, [r5, r1]
	add r1, #0xf7
	bl sub_0200D934
	str r0, [sp, #0x38]
	mov r1, #0
	mov r0, #0xe2
	str r1, [sp, #0x3c]
	add r2, r5, r6
	lsl r0, r0, #2
	ldr r2, [r2, r0]
	sub r0, #0xc
	add r5, r5, r0
	sub r7, #0x28
	str r2, [sp, #0x40]
	lsl r2, r7, #0x10
	asr r2, r2, #0x10
	str r2, [sp, #0x44]
	ldr r2, [sp, #0x10]
	lsl r4, r4, #2
	sub r2, r2, #7
	lsl r2, r2, #0x10
	asr r2, r2, #0x10
	str r1, [sp, #0x4c]
	str r1, [sp, #0x50]
	mov r1, #1
	str r1, [sp, #0x54]
	mov r1, #0x6c
	str r2, [sp, #0x48]
	str r1, [sp, #0x58]
	add r0, sp, #0x2c
	bl sub_020135D8
	str r0, [r5, r4]
	ldr r0, [r5, r4]
	ldr r1, [sp, #0x70]
	bl sub_020138E0
	ldr r0, [sp, #0x18]
	bl String_dtor
	ldr r0, [sp, #0x14]
	bl DestroyMsgData
	add r0, sp, #0x1c
	bl RemoveWindow
	add sp, #0x5c
	pop {r4, r5, r6, r7, pc}
	nop
_020871BC: .word 0x000F0D02
_020871C0: .word 0x00000306
	thumb_func_end sub_02087090

	thumb_func_start sub_020871C4
sub_020871C4: ; 0x020871C4
	push {r4, r5, r6, r7, lr}
	sub sp, #0x14
	add r5, r1, #0
	add r7, r0, #0
	add r0, r5, #0
	add r4, r2, #0
	add r6, r3, #0
	bl sub_0201D3C4
	ldr r0, [sp, #0x28]
	lsl r2, r4, #0x18
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	str r0, [sp]
	ldr r0, [sp, #0x2c]
	lsl r3, r6, #0x18
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	str r0, [sp, #4]
	ldr r0, [sp, #0x30]
	add r1, r5, #0
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	str r0, [sp, #8]
	mov r0, #0xc
	str r0, [sp, #0xc]
	ldr r0, [sp, #0x34]
	lsr r2, r2, #0x18
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	str r0, [sp, #0x10]
	add r0, r7, #0
	lsr r3, r3, #0x18
	bl sub_0201D40C
	mov r1, #1
	add r0, r5, #0
	add r2, r1, #0
	mov r3, #0xb
	bl sub_0200E998
	add r0, r5, #0
	mov r1, #0xf
	bl FillWindowPixelBuffer
	add r0, r5, #0
	bl CopyWindowToVram
	ldr r1, [sp, #0x38]
	add r0, r5, #0
	bl sub_02087230
	add sp, #0x14
	pop {r4, r5, r6, r7, pc}
	thumb_func_end sub_020871C4

	thumb_func_start sub_02087230
sub_02087230: ; 0x02087230
	push {r3, r4, r5, r6, lr}
	sub sp, #0xc
	add r5, r1, #0
	mov r1, #0xf
	add r4, r0, #0
	bl FillWindowPixelBuffer
	mov r0, #0
	mov r1, #0x1b
	mov r2, #0x26
	mov r3, #0x6c
	bl NewMsgDataFromNarc
	add r1, r5, #0
	add r6, r0, #0
	bl NewString_ReadMsgData
	add r5, r0, #0
	add r0, r4, #0
	mov r1, #0xf
	bl FillWindowPixelBuffer
	mov r3, #0
	str r3, [sp]
	str r3, [sp, #4]
	add r0, r4, #0
	mov r1, #1
	add r2, r5, #0
	str r3, [sp, #8]
	bl AddTextPrinterParameterized
	add r0, r4, #0
	bl CopyWindowToVram
	add r0, r5, #0
	bl String_dtor
	add r0, r6, #0
	bl DestroyMsgData
	add sp, #0xc
	pop {r3, r4, r5, r6, pc}
	thumb_func_end sub_02087230

	thumb_func_start sub_02087284
sub_02087284: ; 0x02087284
	push {r0, r1, r2, r3}
	push {r4, lr}
	ldr r4, [sp, #0xc]
	mov r1, #0x42
	add r0, r4, #0
	lsl r1, r1, #2
	bl AllocFromHeap
	ldr r1, [sp, #8]
	mov r3, #0
	str r1, [r0, #0x10]
	ldr r1, [sp, #0x10]
	str r4, [r0, #0x14]
	str r1, [r0, #0x18]
	ldr r1, [sp, #0x14]
	mov r2, #0xf
	str r1, [r0, #0x1c]
	ldr r1, [sp, #0x18]
	str r1, [r0, #0x20]
	ldr r1, [sp, #0x1c]
	str r1, [r0, #4]
	ldr r1, [sp, #0x20]
	str r1, [r0, #8]
	ldr r1, [sp, #0x24]
	str r1, [r0, #0xc]
	add r1, r0, #0
	add r1, #0xe4
	str r3, [r1]
	add r1, r0, #0
	add r1, #0xfc
	str r2, [r1]
	add r1, r2, #0
	add r1, #0xf1
	str r2, [r0, r1]
	add r1, r0, #0
	add r1, #0xf4
	str r3, [r1]
	add r1, r0, #0
	add r1, #0xf0
	str r3, [r1]
	pop {r4}
	pop {r3}
	add sp, #0x10
	bx r3
	thumb_func_end sub_02087284

	thumb_func_start sub_020872DC
sub_020872DC: ; 0x020872DC
	push {r4, r5, r6, lr}
	sub sp, #0x18
	add r5, r1, #0
	mov r1, #0
	add r4, r2, #0
	add r6, r3, #0
	str r1, [sp]
	str r1, [sp, #4]
	bl _itof
	add r1, r4, #0
	bl _fsub
	str r0, [sp, #8]
	add r0, r5, #0
	bl _itof
	add r1, r6, #0
	bl _fsub
	str r0, [sp, #0xc]
	mov r0, #0
	str r0, [sp, #0x10]
	str r0, [sp, #0x14]
	ldr r0, [sp, #8]
	add r1, r0, #0
	bl _fmul
	add r4, r0, #0
	ldr r0, [sp, #0xc]
	add r1, r0, #0
	bl _fmul
	add r1, r0, #0
	add r0, r4, #0
	bl _fadd
	mov r1, #0
	add r4, r0, #0
	bl _fgr
	ldr r0, _020873D0 ; =0x45800000
	bls _02087344
	add r1, r4, #0
	bl _fmul
	add r1, r0, #0
	mov r0, #0x3f
	lsl r0, r0, #0x18
	bl _fadd
	b _02087352
_02087344:
	add r1, r4, #0
	bl _fmul
	mov r1, #0x3f
	lsl r1, r1, #0x18
	bl _fsub
_02087352:
	bl _ftoi
	bl FX_Sqrt
	bl _itof
	ldr r1, _020873D0 ; =0x45800000
	bl _fdiv
	ldr r1, [sp, #0x30]
	add r4, r0, #0
	bl _fls
	blo _0208738A
	add r1, sp, #0x18
	mov r0, #0x1c
	ldrsh r0, [r1, r0]
	bl _itof
	add r1, r4, #0
	bl _fgr
	bhi _0208738A
	mov r0, #0
	add r1, r4, #0
	bl _feq
	bne _02087390
_0208738A:
	add sp, #0x18
	mov r0, #0
	pop {r4, r5, r6, pc}
_02087390:
	ldr r0, [sp, #8]
	ldr r1, [sp, #0x30]
	bl _fmul
	add r1, r4, #0
	bl _fdiv
	str r0, [sp, #0x10]
	ldr r0, [sp, #0xc]
	ldr r1, [sp, #0x30]
	bl _fmul
	add r1, r4, #0
	bl _fdiv
	str r0, [sp, #0x14]
	ldr r0, [sp, #0x10]
	ldr r1, [sp]
	bl _fadd
	ldr r1, [sp, #0x28]
	str r0, [r1]
	ldr r0, [sp, #0x14]
	ldr r1, [sp, #4]
	bl _fadd
	ldr r1, [sp, #0x2c]
	str r0, [r1]
	mov r0, #1
	add sp, #0x18
	pop {r4, r5, r6, pc}
	nop
_020873D0: .word 0x45800000
	thumb_func_end sub_020872DC

	thumb_func_start sub_020873D4
sub_020873D4: ; 0x020873D4
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x50
	add r6, r1, #0
	add r0, r6, #0
	add r0, #0xf0
	ldr r0, [r0]
	cmp r0, #0
	bne _020873E6
	b _02087632
_020873E6:
	ldr r0, [r6, #0x10]
	mov r4, #0
	str r4, [sp, #0x1c]
	cmp r0, #0
	bgt _020873F2
	b _02087632
_020873F2:
	add r0, r6, #0
	mov r7, #0x3f
	str r0, [sp, #0x30]
	add r0, #0xec
	add r5, r6, #0
	lsl r7, r7, #0x18
	str r0, [sp, #0x30]
_02087400:
	cmp r4, #0
	beq _02087410
	mov r0, #0x18
	ldrsh r0, [r5, r0]
	strh r0, [r5, #0x28]
	mov r0, #0x1a
	ldrsh r0, [r5, r0]
	strh r0, [r5, #0x2a]
_02087410:
	ldr r0, [r5, #0x24]
	ldr r3, [r6, #0x20]
	add r1, sp, #0x4c
	add r2, sp, #0x48
	bl sub_0200DF70
	ldr r0, [sp, #0x4c]
	bl _itof
	ldr r1, _02087638 ; =0x45800000
	bl _fdiv
	str r0, [sp, #0x20]
	ldr r0, [sp, #0x48]
	bl _itof
	ldr r1, _02087638 ; =0x45800000
	bl _fdiv
	str r0, [sp, #0x24]
	ldr r0, [sp, #0x1c]
	sub r0, r4, r0
	bl _itof
	add r1, r0, #0
	add r0, r7, #0
	bl _fmul
	add r1, r0, #0
	mov r0, #0x41
	lsl r0, r0, #0x18
	bl _fsub
	mov r1, #1
	lsl r1, r1, #0x1e
	bl _fdiv
	add r1, sp, #0x44
	str r1, [sp]
	add r1, sp, #0x40
	str r1, [sp, #4]
	str r0, [sp, #8]
	mov r0, #0x10
	str r0, [sp, #0xc]
	mov r0, #0x28
	mov r1, #0x2a
	ldrsh r0, [r5, r0]
	ldrsh r1, [r5, r1]
	ldr r2, [sp, #0x20]
	ldr r3, [sp, #0x24]
	bl sub_020872DC
	cmp r0, #0
	beq _020874EE
	ldr r0, [r5, #0x2c]
	cmp r0, #0
	bne _020874EE
	ldr r0, [sp, #0x40]
	mov r1, #0
	bl _fgr
	ldr r0, _02087638 ; =0x45800000
	bls _020874A0
	ldr r1, [sp, #0x40]
	bl _fmul
	add r1, r0, #0
	add r0, r7, #0
	bl _fadd
	str r0, [sp, #0x14]
	b _020874AE
_020874A0:
	ldr r1, [sp, #0x40]
	bl _fmul
	add r1, r7, #0
	bl _fsub
	str r0, [sp, #0x14]
_020874AE:
	ldr r0, [sp, #0x44]
	mov r1, #0
	bl _fgr
	ldr r0, _02087638 ; =0x45800000
	bls _020874CA
	ldr r1, [sp, #0x44]
	bl _fmul
	add r1, r0, #0
	add r0, r7, #0
	bl _fadd
	b _020874D6
_020874CA:
	ldr r1, [sp, #0x44]
	bl _fmul
	add r1, r7, #0
	bl _fsub
_020874D6:
	bl _ftoi
	str r0, [sp, #0x28]
	ldr r0, [sp, #0x14]
	bl _ftoi
	add r2, r0, #0
	ldr r0, [r5, #0x24]
	ldr r1, [sp, #0x28]
	bl sub_0200DEDC
	b _02087626
_020874EE:
	ldr r0, [r5, #0x2c]
	cmp r0, #0
	beq _020874FA
	cmp r0, #1
	beq _020875CA
	b _02087620
_020874FA:
	add r1, sp, #0x3c
	ldr r0, [r5, #0x24]
	ldr r3, [r6, #0x20]
	add r1, #2
	add r2, sp, #0x3c
	bl sub_0200DE94
	add r0, r6, #0
	add r0, #0xe8
	ldr r0, [r0]
	str r0, [sp, #0x18]
	cmp r0, #0xff
	bne _0208758E
	add r0, r6, #0
	add r0, #0xe8
	str r4, [r0]
	mov r0, #0x28
	add r2, sp, #0x3c
	mov r1, #2
	ldrsh r0, [r6, r0]
	ldrsh r1, [r2, r1]
	sub r0, r0, r1
	cmp r0, #0
	ble _0208753C
	lsl r0, r0, #0xc
	bl _itof
	add r1, r0, #0
	add r0, r7, #0
	bl _fadd
	str r0, [sp, #0x10]
	b _0208754A
_0208753C:
	lsl r0, r0, #0xc
	bl _itof
	add r1, r7, #0
	bl _fsub
	str r0, [sp, #0x10]
_0208754A:
	mov r0, #0x2a
	add r2, sp, #0x3c
	mov r1, #0
	ldrsh r0, [r6, r0]
	ldrsh r1, [r2, r1]
	sub r0, r0, r1
	cmp r0, #0
	ble _0208756A
	lsl r0, r0, #0xc
	bl _itof
	add r1, r0, #0
	add r0, r7, #0
	bl _fadd
	b _02087576
_0208756A:
	lsl r0, r0, #0xc
	bl _itof
	add r1, r7, #0
	bl _fsub
_02087576:
	bl _ftoi
	str r0, [sp, #0x2c]
	ldr r0, [sp, #0x10]
	bl _ftoi
	add r1, r0, #0
	ldr r0, [sp, #0x2c]
	bl FX_Atan2Idx
	str r0, [r5, #0x30]
	b _020875AC
_0208758E:
	mov r0, #0x2d
	ldr r1, [r6, #0x10]
	lsl r0, r0, #4
	bl _s32_div_f
	ldr r1, [sp, #0x18]
	add r2, r6, #0
	lsl r1, r1, #4
	add r2, #0xec
	add r1, r6, r1
	ldr r2, [r2]
	ldr r1, [r1, #0x30]
	mul r2, r0
	sub r0, r1, r2
	str r0, [r5, #0x30]
_020875AC:
	mov r1, #0x2d
	ldr r0, [r5, #0x30]
	lsl r1, r1, #4
	bl _s32_div_f
	ldr r0, [sp, #0x30]
	str r1, [r5, #0x30]
	ldr r0, [r0]
	add r1, r0, #1
	ldr r0, [sp, #0x30]
	str r1, [r0]
	ldr r0, [r5, #0x2c]
	add r0, r0, #1
	str r0, [r5, #0x2c]
	b _02087620
_020875CA:
	ldr r0, [r5, #0x30]
	mov r1, #0x2d
	add r0, r0, #4
	lsl r1, r1, #4
	str r0, [r5, #0x30]
	bl _s32_div_f
	lsl r0, r1, #0x10
	lsr r0, r0, #0x10
	str r1, [r5, #0x30]
	bl sub_0201FCAC
	mov r1, #0x28
	ldrsh r1, [r6, r1]
	lsl r1, r1, #0xc
	str r1, [sp, #0x34]
	add r1, r6, #0
	add r1, #0xfc
	ldr r1, [r1]
	mul r0, r1
	str r0, [sp, #0x38]
	ldr r0, [r5, #0x30]
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	bl sub_0201FCC0
	mov r1, #0x2a
	ldrsh r1, [r6, r1]
	ldr r2, [sp, #0x34]
	lsl r3, r1, #0xc
	mov r1, #1
	lsl r1, r1, #8
	ldr r1, [r6, r1]
	mul r0, r1
	ldr r1, [sp, #0x38]
	mov ip, r0
	add r1, r2, r1
	mov r2, ip
	add r2, r3, r2
	ldr r0, [r5, #0x24]
	ldr r3, [r6, #0x20]
	bl sub_0200DF44
_02087620:
	ldr r0, [sp, #0x1c]
	add r0, r0, #1
	str r0, [sp, #0x1c]
_02087626:
	ldr r0, [r6, #0x10]
	add r4, r4, #1
	add r5, #0x10
	cmp r4, r0
	bge _02087632
	b _02087400
_02087632:
	add sp, #0x50
	pop {r3, r4, r5, r6, r7, pc}
	nop
_02087638: .word 0x45800000
	thumb_func_end sub_020873D4

	thumb_func_start sub_0208763C
sub_0208763C: ; 0x0208763C
	push {r4, r5, r6, r7, lr}
	sub sp, #0x1c
	add r6, r1, #0
	ldr r1, [r0, #4]
	ldr r5, [r0, #8]
	str r1, [sp, #0x18]
	ldr r1, _020876A4 ; =0x000056CF
	ldr r7, [r0, #0xc]
	ldr r4, [r0]
	add r0, r5, #0
	bl sub_0200D968
	ldr r1, _020876A8 ; =0x000056D0
	add r0, r5, #0
	bl sub_0200D968
	ldr r0, _020876AC ; =0x02102814
	lsl r1, r6, #2
	ldr r6, [r0, r1]
	str r4, [sp]
	str r6, [sp, #4]
	mov r0, #0
	str r0, [sp, #8]
	mov r0, #1
	str r0, [sp, #0xc]
	str r0, [sp, #0x10]
	ldr r0, _020876A4 ; =0x000056CF
	ldr r2, [sp, #0x18]
	str r0, [sp, #0x14]
	add r0, r7, #0
	mov r1, #2
	add r3, r5, #0
	bl sub_0200D68C
	str r4, [sp]
	str r6, [sp, #4]
	mov r0, #0
	str r0, [sp, #8]
	mov r0, #1
	str r0, [sp, #0xc]
	mov r0, #2
	str r0, [sp, #0x10]
	ldr r0, _020876A8 ; =0x000056D0
	ldr r2, [sp, #0x18]
	str r0, [sp, #0x14]
	add r0, r7, #0
	mov r1, #3
	add r3, r5, #0
	bl sub_0200D68C
	add sp, #0x1c
	pop {r4, r5, r6, r7, pc}
	.balign 4, 0
_020876A4: .word 0x000056CF
_020876A8: .word 0x000056D0
_020876AC: .word 0x02102814
	thumb_func_end sub_0208763C

	thumb_func_start sub_020876B0
sub_020876B0: ; 0x020876B0
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x18
	add r2, r1, #0
	ldr r3, [r0, #0x18]
	ldr r1, _020877AC ; =0x000056CE
	ldr r7, [r0, #4]
	add r5, r3, r1
	ldr r6, [r0, #8]
	ldr r1, [r0, #0xc]
	ldr r4, [r0]
	cmp r3, #1
	ldr r0, [r0, #0x1c]
	bne _02087726
	cmp r0, #0
	str r4, [sp]
	bne _020876F2
	ldr r0, _020877B0 ; =0x02102814
	lsl r2, r2, #2
	ldr r0, [r0, r2]
	add r2, r7, #0
	str r0, [sp, #4]
	mov r0, #0
	str r0, [sp, #8]
	mov r0, #1
	str r0, [sp, #0xc]
	str r0, [sp, #0x10]
	add r0, r1, #0
	mov r1, #2
	add r3, r6, #0
	str r5, [sp, #0x14]
	bl sub_0200D68C
	b _0208770E
_020876F2:
	mov r0, #0x60
	str r0, [sp, #4]
	mov r0, #0
	str r0, [sp, #8]
	mov r0, #1
	str r0, [sp, #0xc]
	str r0, [sp, #0x10]
	add r0, r1, #0
	mov r1, #2
	add r2, r7, #0
	add r3, r6, #0
	str r5, [sp, #0x14]
	bl sub_0200D68C
_0208770E:
	mov r0, #0
	str r0, [sp]
	mov r0, #1
	str r0, [sp, #4]
	add r0, r7, #0
	add r1, r6, #0
	add r2, r4, #0
	mov r3, #0x5f
	str r5, [sp, #8]
	bl sub_0200D504
	b _02087784
_02087726:
	cmp r0, #0
	str r4, [sp]
	bne _02087750
	ldr r0, _020877B0 ; =0x02102814
	lsl r2, r2, #2
	ldr r0, [r0, r2]
	add r2, r7, #0
	str r0, [sp, #4]
	mov r0, #0
	str r0, [sp, #8]
	mov r0, #1
	str r0, [sp, #0xc]
	mov r0, #2
	str r0, [sp, #0x10]
	add r0, r1, #0
	mov r1, #3
	add r3, r6, #0
	str r5, [sp, #0x14]
	bl sub_0200D68C
	b _0208776E
_02087750:
	mov r0, #0x60
	str r0, [sp, #4]
	mov r0, #0
	str r0, [sp, #8]
	mov r0, #1
	str r0, [sp, #0xc]
	mov r0, #2
	str r0, [sp, #0x10]
	add r0, r1, #0
	mov r1, #3
	add r2, r7, #0
	add r3, r6, #0
	str r5, [sp, #0x14]
	bl sub_0200D68C
_0208776E:
	mov r0, #0
	str r0, [sp]
	mov r0, #2
	str r0, [sp, #4]
	add r0, r7, #0
	add r1, r6, #0
	add r2, r4, #0
	mov r3, #0x5f
	str r5, [sp, #8]
	bl sub_0200D504
_02087784:
	mov r0, #0
	str r0, [sp]
	add r0, r7, #0
	add r1, r6, #0
	add r2, r4, #0
	mov r3, #0x5d
	str r5, [sp, #4]
	bl sub_0200D6EC
	mov r0, #0
	str r0, [sp]
	add r0, r7, #0
	add r1, r6, #0
	add r2, r4, #0
	mov r3, #0x5e
	str r5, [sp, #4]
	bl sub_0200D71C
	add sp, #0x18
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_020877AC: .word 0x000056CE
_020877B0: .word 0x02102814
	thumb_func_end sub_020876B0

	thumb_func_start sub_020877B4
sub_020877B4: ; 0x020877B4
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x38
	add r5, r0, #0
	ldr r0, [r5, #4]
	ldr r7, [r5, #8]
	str r0, [sp]
	mov r1, #0x80
	add r0, sp, #4
	strh r1, [r0]
	mov r1, #0x60
	strh r1, [r0, #2]
	mov r6, #0
	strh r6, [r0, #4]
	strh r6, [r0, #6]
	str r6, [sp, #0xc]
	ldr r0, [r5, #0x18]
	str r0, [sp, #0x14]
	str r6, [sp, #0x30]
	str r6, [sp, #0x34]
	str r6, [sp, #0x10]
	ldr r1, [r5, #0x18]
	ldr r0, _0208782C ; =0x000056CE
	add r1, r1, r0
	str r1, [sp, #0x18]
	ldr r1, [r5, #0x18]
	add r1, r1, r0
	str r1, [sp, #0x1c]
	ldr r1, [r5, #0x18]
	add r1, r1, r0
	str r1, [sp, #0x20]
	ldr r1, [r5, #0x18]
	add r0, r1, r0
	str r0, [sp, #0x24]
	sub r0, r6, #1
	str r0, [sp, #0x28]
	str r0, [sp, #0x2c]
	ldr r0, [r5, #0x10]
	cmp r0, #0
	ble _02087828
	add r4, r5, #0
_02087804:
	ldr r0, [sp]
	add r1, r7, #0
	add r2, sp, #4
	bl sub_0200D734
	str r0, [r4, #0x24]
	bl sub_0200DC18
	ldr r0, [r4, #0x24]
	mov r1, #0x80
	mov r2, #0x60
	bl sub_0200DDB8
	ldr r0, [r5, #0x10]
	add r6, r6, #1
	add r4, #0x10
	cmp r6, r0
	blt _02087804
_02087828:
	add sp, #0x38
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_0208782C: .word 0x000056CE
	thumb_func_end sub_020877B4

	thumb_func_start sub_02087830
sub_02087830: ; 0x02087830
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	ldr r0, [r5, #0x10]
	mov r6, #0
	cmp r0, #0
	ble _02087872
	ldr r7, _02087874 ; =0x000056CE
	add r4, r5, #0
_02087840:
	ldr r2, [r5, #0x18]
	ldr r1, _02087874 ; =0x000056CE
	ldr r0, [r5, #8]
	add r1, r2, r1
	bl sub_0200D958
	ldr r2, [r5, #0x18]
	ldr r1, _02087874 ; =0x000056CE
	ldr r0, [r5, #8]
	add r1, r2, r1
	bl sub_0200D978
	ldr r1, [r5, #0x18]
	ldr r0, [r5, #8]
	add r1, r1, r7
	bl sub_0200D988
	ldr r0, [r4, #0x24]
	bl sub_0200D9DC
	ldr r0, [r5, #0x10]
	add r6, r6, #1
	add r4, #0x10
	cmp r6, r0
	blt _02087840
_02087872:
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_02087874: .word 0x000056CE
	thumb_func_end sub_02087830

	thumb_func_start sub_02087878
sub_02087878: ; 0x02087878
	push {r3, r4, r5, lr}
	add r5, r0, #0
	add r4, r1, #0
	ldr r1, [r5, #0x14]
	mov r0, #0xbf
	bl NARC_ctor
	str r0, [r5]
	add r0, r5, #0
	add r1, r4, #0
	bl sub_020876B0
	add r0, r5, #0
	bl sub_020877B4
	mov r2, #1
	ldr r0, _020878AC ; =sub_020873D4
	add r1, r5, #0
	lsl r2, r2, #0xc
	bl sub_0200E33C
	add r5, #0xf4
	str r0, [r5]
	mov r0, #1
	pop {r3, r4, r5, pc}
	nop
_020878AC: .word sub_020873D4
	thumb_func_end sub_02087878

	thumb_func_start sub_020878B0
sub_020878B0: ; 0x020878B0
	add r0, #0xf0
	str r1, [r0]
	mov r0, #1
	bx lr
	thumb_func_end sub_020878B0

	thumb_func_start sub_020878B8
sub_020878B8: ; 0x020878B8
	push {r3, r4}
	strh r1, [r0, #0x28]
	add r1, r0, #0
	strh r2, [r0, #0x2a]
	mov r2, #0xff
	add r1, #0xe8
	str r2, [r1]
	add r1, r0, #0
	mov r3, #0
	add r1, #0xec
	str r3, [r1]
	ldr r1, [r0, #0x10]
	cmp r1, #0
	ble _020878E4
	add r4, r0, #0
	add r2, r3, #0
_020878D8:
	str r2, [r4, #0x2c]
	ldr r1, [r0, #0x10]
	add r3, r3, #1
	add r4, #0x10
	cmp r3, r1
	blt _020878D8
_020878E4:
	mov r0, #1
	pop {r3, r4}
	bx lr
	.balign 4, 0
	thumb_func_end sub_020878B8

	thumb_func_start sub_020878EC
sub_020878EC: ; 0x020878EC
	push {r4, r5, r6, lr}
	add r5, r0, #0
	add r4, r1, #0
	add r6, r2, #0
	bl sub_02087930
	cmp r0, #0
	bne _02087900
	mov r0, #0
	pop {r4, r5, r6, pc}
_02087900:
	strh r4, [r5, #0x28]
	add r0, r5, #0
	strh r6, [r5, #0x2a]
	mov r1, #0xff
	add r0, #0xe8
	str r1, [r0]
	add r0, r5, #0
	mov r2, #0
	add r0, #0xec
	str r2, [r0]
	ldr r0, [r5, #0x10]
	cmp r0, #0
	ble _0208792A
	add r3, r5, #0
	add r1, r2, #0
_0208791E:
	str r1, [r3, #0x2c]
	ldr r0, [r5, #0x10]
	add r2, r2, #1
	add r3, #0x10
	cmp r2, r0
	blt _0208791E
_0208792A:
	mov r0, #1
	pop {r4, r5, r6, pc}
	.balign 4, 0
	thumb_func_end sub_020878EC

	thumb_func_start sub_02087930
sub_02087930: ; 0x02087930
	mov r3, #0x28
	ldrsh r3, [r0, r3]
	cmp r3, r1
	bne _02087944
	mov r1, #0x2a
	ldrsh r0, [r0, r1]
	cmp r0, r2
	bne _02087944
	mov r0, #0
	bx lr
_02087944:
	mov r0, #1
	bx lr
	thumb_func_end sub_02087930

	thumb_func_start sub_02087948
sub_02087948: ; 0x02087948
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	add r6, r1, #0
	str r2, [sp]
	mov r1, #0xff
	add r0, #0xe8
	str r1, [r0]
	add r0, r5, #0
	mov r7, #0
	add r0, #0xec
	str r7, [r0]
	ldr r0, [r5, #0x10]
	cmp r0, #0
	ble _02087982
	add r4, r5, #0
_02087966:
	strh r6, [r4, #0x28]
	ldr r0, [sp]
	add r1, r6, #0
	strh r0, [r4, #0x2a]
	ldr r0, [r4, #0x24]
	ldr r2, [sp]
	ldr r3, [r5, #0x20]
	bl sub_0200DDF4
	ldr r0, [r5, #0x10]
	add r7, r7, #1
	add r4, #0x10
	cmp r7, r0
	blt _02087966
_02087982:
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_02087948

	thumb_func_start sub_02087988
sub_02087988: ; 0x02087988
	push {r4, lr}
	add r4, r0, #0
	add r1, r4, #0
	add r1, #0xe4
	ldr r1, [r1]
	cmp r1, #0
	beq _0208799C
	cmp r1, #1
	beq _020879B0
	b _020879C6
_0208799C:
	mov r1, #0
	bl sub_020878B0
	add r0, r4, #0
	add r0, #0xe4
	ldr r0, [r0]
	add r4, #0xe4
	add r0, r0, #1
	str r0, [r4]
	b _020879DA
_020879B0:
	add r0, #0xf4
	ldr r0, [r0]
	bl sub_0200E390
	add r0, r4, #0
	add r0, #0xe4
	ldr r0, [r0]
	add r4, #0xe4
	add r0, r0, #1
	str r0, [r4]
	b _020879DA
_020879C6:
	bl sub_02087830
	ldr r0, [r4]
	bl NARC_dtor
	add r0, r4, #0
	bl FreeToHeap
	mov r0, #0
	pop {r4, pc}
_020879DA:
	mov r0, #1
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_02087988

	thumb_func_start sub_020879E0
sub_020879E0: ; 0x020879E0
	push {r3, r4, r5, r6, r7, lr}
	add r6, r0, #0
	ldr r0, [r6, #0x10]
	add r7, r1, #0
	mov r4, #0
	cmp r0, #0
	ble _02087A02
	add r5, r6, #0
_020879F0:
	ldr r0, [r5, #0x24]
	add r1, r7, #0
	bl sub_0200DCE8
	ldr r0, [r6, #0x10]
	add r4, r4, #1
	add r5, #0x10
	cmp r4, r0
	blt _020879F0
_02087A02:
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_020879E0

	thumb_func_start sub_02087A08
sub_02087A08: ; 0x02087A08
	cmp r1, #0
	beq _02087A1E
	cmp r2, #0
	beq _02087A1E
	add r3, r0, #0
	add r3, #0xfc
	str r1, [r3]
	mov r1, #1
	lsl r1, r1, #8
	str r2, [r0, r1]
	bx lr
_02087A1E:
	add r1, r0, #0
	mov r2, #0xf
	add r1, #0xfc
	str r2, [r1]
	add r1, r2, #0
	add r1, #0xf1
	str r2, [r0, r1]
	bx lr
	.balign 4, 0
	thumb_func_end sub_02087A08

	thumb_func_start sub_02087A30
sub_02087A30: ; 0x02087A30
	push {r3, r4, r5, r6, r7, lr}
	add r6, r0, #0
	ldr r0, [r6, #0x10]
	mov r4, #0
	cmp r0, #0
	ble _02087A52
	add r5, r6, #0
	mov r7, #1
_02087A40:
	ldr r0, [r5, #0x24]
	add r1, r7, #0
	bl sub_0200DC4C
	ldr r0, [r6, #0x10]
	add r4, r4, #1
	add r5, #0x10
	cmp r4, r0
	blt _02087A40
_02087A52:
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_02087A30

	thumb_func_start sub_02087A54
sub_02087A54: ; 0x02087A54
	push {r3, r4, r5, r6, r7, lr}
	add r6, r0, #0
	ldr r0, [r6, #0x10]
	mov r4, #0
	cmp r0, #0
	ble _02087A76
	add r5, r6, #0
	add r7, r4, #0
_02087A64:
	ldr r0, [r5, #0x24]
	add r1, r7, #0
	bl sub_0200DC4C
	ldr r0, [r6, #0x10]
	add r4, r4, #1
	add r5, #0x10
	cmp r4, r0
	blt _02087A64
_02087A76:
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_02087A54

	thumb_func_start sub_02087A78
sub_02087A78: ; 0x02087A78
	push {r3, lr}
	bl OverlayManager_GetField18
	ldr r0, [r0, #0x14]
	pop {r3, pc}
	.balign 4, 0
	thumb_func_end sub_02087A78

	thumb_func_start sub_02087A84
sub_02087A84: ; 0x02087A84
	str r1, [r0]
	str r2, [r0, #4]
	bx lr
	.balign 4, 0
	thumb_func_end sub_02087A84

	thumb_func_start sub_02087A8C
sub_02087A8C: ; 0x02087A8C
	push {r4, r5, r6, lr}
	mov r2, #1
	add r5, r0, #0
	add r6, r1, #0
	mov r0, #3
	mov r1, #0x7e
	lsl r2, r2, #0x10
	bl CreateHeap
	add r0, r5, #0
	mov r1, #0x2c
	mov r2, #0x7e
	bl OverlayManager_CreateAndGetData
	mov r1, #0
	mov r2, #0x2c
	add r4, r0, #0
	bl MIi_CpuFill8
	add r0, r5, #0
	bl OverlayManager_GetField18
	str r0, [r4, #0x28]
	ldr r0, [r0, #0xc]
	ldr r1, _02087B00 ; =0x00004170
	str r0, [r4, #0xc]
	mov r0, #0x7e
	bl AllocFromHeap
	ldr r2, _02087B00 ; =0x00004170
	str r0, [r4, #0x14]
	mov r1, #0
	bl MIi_CpuFill8
	add r2, r4, #0
	ldr r1, [r4, #0x14]
	ldr r0, _02087B04 ; =0x00000868
	add r2, #0x18
	str r2, [r1, r0]
	ldr r2, [r4, #0xc]
	ldr r1, [r4, #0x14]
	sub r0, #0x38
	str r2, [r1, r0]
	ldr r0, [r4, #0x14]
	str r6, [r0]
	ldr r4, [r4, #0x14]
	ldr r1, [r4]
	add r0, r4, #0
	bl sub_02087FF8
	ldr r1, _02087B08 ; =0x000006D8
	ldr r1, [r4, r1]
	lsl r1, r1, #2
	add r2, r4, r1
	ldr r1, _02087B0C ; =0x0000081C
	str r0, [r2, r1]
	pop {r4, r5, r6, pc}
	nop
_02087B00: .word 0x00004170
_02087B04: .word 0x00000868
_02087B08: .word 0x000006D8
_02087B0C: .word 0x0000081C
	thumb_func_end sub_02087A8C

	thumb_func_start sub_02087B10
sub_02087B10: ; 0x02087B10
	push {r3, lr}
	mov r1, #0
	bl sub_02087A8C
	mov r0, #1
	pop {r3, pc}
	thumb_func_end sub_02087B10

	thumb_func_start sub_02087B1C
sub_02087B1C: ; 0x02087B1C
	push {r3, lr}
	mov r1, #1
	bl sub_02087A8C
	mov r0, #1
	pop {r3, pc}
	thumb_func_end sub_02087B1C

	thumb_func_start sub_02087B28
sub_02087B28: ; 0x02087B28
	push {r3, lr}
	mov r1, #2
	bl sub_02087A8C
	mov r0, #1
	pop {r3, pc}
	thumb_func_end sub_02087B28

	thumb_func_start sub_02087B34
sub_02087B34: ; 0x02087B34
	push {r3, lr}
	mov r1, #3
	bl sub_02087A8C
	mov r0, #1
	pop {r3, pc}
	thumb_func_end sub_02087B34

	thumb_func_start sub_02087B40
sub_02087B40: ; 0x02087B40
	push {r3, lr}
	mov r1, #4
	bl sub_02087A8C
	mov r0, #1
	pop {r3, pc}
	thumb_func_end sub_02087B40

	thumb_func_start sub_02087B4C
sub_02087B4C: ; 0x02087B4C
	push {r3, lr}
	mov r1, #5
	bl sub_02087A8C
	mov r0, #1
	pop {r3, pc}
	thumb_func_end sub_02087B4C

	thumb_func_start sub_02087B58
sub_02087B58: ; 0x02087B58
	push {r3, lr}
	mov r1, #6
	bl sub_02087A8C
	mov r0, #1
	pop {r3, pc}
	thumb_func_end sub_02087B58

	thumb_func_start sub_02087B64
sub_02087B64: ; 0x02087B64
	push {r3, r4, r5, lr}
	add r5, r1, #0
	bl OverlayManager_GetData
	ldr r1, [r5]
	add r4, r0, #0
	cmp r1, #0
	beq _02087B7A
	cmp r1, #1
	beq _02087B98
	b _02087BA8
_02087B7A:
	mov r1, #0x7e
	bl sub_02087BE8
	cmp r0, #0
	beq _02087BA8
	ldr r0, [r4, #0x18]
	cmp r0, #1
	bne _02087B94
	mov r0, #1
	str r0, [r5]
	mov r0, #0
	str r0, [r4]
	b _02087BA8
_02087B94:
	mov r0, #1
	pop {r3, r4, r5, pc}
_02087B98:
	mov r1, #0x7e
	bl sub_02087C38
	cmp r0, #0
	beq _02087BA8
	mov r0, #0
	str r0, [r5]
	str r0, [r4]
_02087BA8:
	mov r0, #0
	pop {r3, r4, r5, pc}
	thumb_func_end sub_02087B64

	thumb_func_start sub_02087BAC
sub_02087BAC: ; 0x02087BAC
	push {r3, r4, r5, lr}
	add r5, r0, #0
	bl OverlayManager_GetData
	add r4, r0, #0
	bl sub_0202FC48
	cmp r0, #1
	bne _02087BC2
	bl sub_0202FC24
_02087BC2:
	ldr r0, [r4, #0x14]
	bl FreeToHeap
	add r0, r5, #0
	bl OverlayManager_FreeData
	mov r0, #1
	mov r1, #0x7f
	bl sub_02005B50
	mov r0, #7
	mov r1, #0x7f
	bl sub_02005B50
	mov r0, #0x7e
	bl DestroyHeap
	mov r0, #1
	pop {r3, r4, r5, pc}
	thumb_func_end sub_02087BAC

	thumb_func_start sub_02087BE8
sub_02087BE8: ; 0x02087BE8
	push {r4, lr}
	add r4, r0, #0
	ldr r0, [r4]
	add r2, r1, #0
	cmp r0, #0
	bne _02087C18
	ldr r0, [r4, #0x14]
	ldr r0, [r0]
	cmp r0, #0
	bne _02087C06
	ldr r0, _02087C30 ; =0x021028B4
	add r1, r4, #0
	bl OverlayManager_new
	b _02087C0E
_02087C06:
	ldr r0, _02087C34 ; =0x021028C4
	add r1, r4, #0
	bl OverlayManager_new
_02087C0E:
	str r0, [r4, #8]
	ldr r0, [r4]
	add r0, r0, #1
	str r0, [r4]
	b _02087C2C
_02087C18:
	ldr r0, [r4, #8]
	bl OverlayManager_run
	cmp r0, #0
	beq _02087C2C
	ldr r0, [r4, #8]
	bl OverlayManager_delete
	mov r0, #1
	pop {r4, pc}
_02087C2C:
	mov r0, #0
	pop {r4, pc}
	.balign 4, 0
_02087C30: .word 0x021028B4
_02087C34: .word 0x021028C4
	thumb_func_end sub_02087BE8

	thumb_func_start sub_02087C38
sub_02087C38: ; 0x02087C38
	push {r4, r5, r6, lr}
	sub sp, #8
	add r5, r0, #0
	ldr r0, [r5]
	add r4, r1, #0
	cmp r0, #0
	beq _02087C50
	cmp r0, #1
	beq _02087C6A
	cmp r0, #2
	beq _02087D0C
	b _02087D5A
_02087C50:
	ldr r0, [r5, #0x14]
	ldr r0, [r0]
	cmp r0, #0
	beq _02087C62
	ldr r0, _02087DF4 ; =SDK_OVERLAY_OVY_39_ID
	bl UnloadOverlayByID
	bl UnloadOVY38
_02087C62:
	ldr r0, [r5]
	add r0, r0, #1
	str r0, [r5]
	b _02087DEC
_02087C6A:
	add r0, r4, #0
	mov r1, #0
	bl sub_020518D8
	str r0, [r5, #0x10]
	bl sub_0202FC48
	cmp r0, #0
	bne _02087C92
	ldr r1, [r5, #0x14]
	ldr r0, _02087DF8 ; =0x0000086C
	add r2, sp, #4
	ldr r0, [r1, r0]
	add r1, r4, #0
	str r0, [sp]
	ldr r0, [r5, #0xc]
	ldr r3, [r5, #0x10]
	bl sub_0202FC90
	b _02087C9E
_02087C92:
	ldr r0, [r5, #0x10]
	ldr r1, [r5, #0xc]
	bl sub_020304F0
	mov r0, #1
	str r0, [sp, #4]
_02087C9E:
	add r0, r4, #0
	bl sub_020787A8
	mov r1, #0x43
	ldr r2, [r5, #0x10]
	lsl r1, r1, #2
	str r0, [r2, r1]
	ldr r0, [r5, #0xc]
	bl Sav2_GameStats_get
	mov r1, #0x51
	ldr r2, [r5, #0x10]
	lsl r1, r1, #2
	str r0, [r2, r1]
	ldr r6, _02087DFC ; =SDK_OVERLAY_OVY_40_ID
	mov r1, #2
	add r0, r6, #0
	bl HandleLoadOverlay
	cmp r0, #1
	bne _02087CDA
	bl sub_0202FC5C
	ldr r1, [r5, #0x10]
	add r2, r4, #0
	bl ov40_02244920
	add r0, r6, #0
	bl UnloadOverlayByID
_02087CDA:
	ldr r1, [r5, #0x14]
	ldr r0, _02087E00 ; =0x00000874
	mov r2, #1
	str r2, [r1, r0]
	ldr r0, [sp, #4]
	cmp r0, #1
	beq _02087D04
	mov r0, #0x43
	ldr r1, [r5, #0x10]
	lsl r0, r0, #2
	ldr r0, [r1, r0]
	bl FreeToHeap
	ldr r0, [r5, #0x10]
	bl sub_02051BF8
	mov r0, #0
	str r0, [r5]
	add sp, #8
	mov r0, #1
	pop {r4, r5, r6, pc}
_02087D04:
	ldr r0, [r5]
	add r0, r0, #1
	str r0, [r5]
	b _02087DEC
_02087D0C:
	mov r0, #1
	mov r1, #0x7f
	bl sub_02005B50
	mov r0, #7
	mov r1, #0x7f
	bl sub_02005B50
	mov r0, #1
	bl sub_02005B68
	ldr r0, [r5, #0x10]
	add r0, #0x5d
	ldrb r0, [r0]
	bl sub_02087E34
	cmp r0, #1
	bne _02087D3C
	ldr r1, _02087E04 ; =0x0000047B
	mov r0, #5
	mov r2, #1
	bl sub_02004EC4
	b _02087D46
_02087D3C:
	ldr r1, _02087E08 ; =0x0000045D
	mov r0, #5
	mov r2, #1
	bl sub_02004EC4
_02087D46:
	ldr r0, _02087E0C ; =0x020FA484
	ldr r1, [r5, #0x10]
	add r2, r4, #0
	bl OverlayManager_new
	str r0, [r5, #8]
	ldr r0, [r5]
	add r0, r0, #1
	str r0, [r5]
	b _02087DEC
_02087D5A:
	ldr r0, [r5, #8]
	bl OverlayManager_run
	cmp r0, #0
	beq _02087DEC
	mov r0, #0x71
	ldr r1, [r5, #0x10]
	lsl r0, r0, #2
	ldr r2, [r1, r0]
	ldr r1, [r5, #0x14]
	ldr r0, _02087E00 ; =0x00000874
	str r2, [r1, r0]
	ldr r2, [r5, #0x14]
	ldr r1, [r2]
	cmp r1, #0
	beq _02087D88
	ldr r1, [r2, r0]
	cmp r1, #0
	bne _02087D88
	add r0, r0, #4
	ldr r0, [r2, r0]
	mov r1, #1
	strb r1, [r0]
_02087D88:
	mov r0, #0x43
	ldr r1, [r5, #0x10]
	lsl r0, r0, #2
	ldr r0, [r1, r0]
	bl FreeToHeap
	ldr r0, [r5, #0x10]
	bl sub_02051BF8
	ldr r0, [r5, #8]
	bl OverlayManager_delete
	mov r0, #0
	bl sub_02005B68
	mov r0, #0
	bl sub_02004AD8
	ldr r0, [r5, #0x28]
	ldr r1, [r0, #0x20]
	ldr r1, [r1]
	bl sub_02054F60
	add r4, r0, #0
	ldr r0, [r5, #0x28]
	ldr r1, [r0, #0x20]
	ldr r1, [r1]
	bl GetMapMusic
	bl sub_02004AC8
	mov r0, #0
	add r1, r4, #0
	bl sub_02055198
	mov r0, #0
	str r0, [r5]
	ldr r0, [r5, #0x14]
	ldr r0, [r0]
	cmp r0, #0
	beq _02087DE6
	bl LoadOVY38
	ldr r0, _02087DF4 ; =SDK_OVERLAY_OVY_39_ID
	mov r1, #2
	bl HandleLoadOverlay
_02087DE6:
	add sp, #8
	mov r0, #1
	pop {r4, r5, r6, pc}
_02087DEC:
	mov r0, #0
	add sp, #8
	pop {r4, r5, r6, pc}
	nop
_02087DF4: .word SDK_OVERLAY_OVY_39_ID
_02087DF8: .word 0x0000086C
_02087DFC: .word SDK_OVERLAY_OVY_40_ID
_02087E00: .word 0x00000874
_02087E04: .word 0x0000047B
_02087E08: .word 0x0000045D
_02087E0C: .word 0x020FA484
	thumb_func_end sub_02087C38

	thumb_func_start sub_02087E10
sub_02087E10: ; 0x02087E10
	lsl r1, r0, #2
	ldr r0, _02087E18 ; =0x02110594
	ldr r0, [r0, r1]
	bx lr
	.balign 4, 0
_02087E18: .word 0x02110594
	thumb_func_end sub_02087E10

	thumb_func_start sub_02087E1C
sub_02087E1C: ; 0x02087E1C
	push {r3, lr}
	mov r1, #0x83
	lsl r1, r1, #4
	ldr r0, [r0, r1]
	bl SavArray_Flags_get
	mov r1, #2
	mov r2, #0x1b
	bl sub_02066930
	pop {r3, pc}
	.balign 4, 0
	thumb_func_end sub_02087E1C

	thumb_func_start sub_02087E34
sub_02087E34: ; 0x02087E34
	push {r3, r4, r5}
	sub sp, #0x14
	ldr r5, _02087E6C ; =0x021028A0
	add r3, r0, #0
	ldmia r5!, {r0, r1}
	add r4, sp, #0
	add r2, r4, #0
	stmia r4!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r4!, {r0, r1}
	ldr r0, [r5]
	mov r1, #0
	str r0, [r4]
_02087E4E:
	ldr r0, [r2]
	cmp r3, r0
	bne _02087E5C
	add sp, #0x14
	mov r0, #1
	pop {r3, r4, r5}
	bx lr
_02087E5C:
	add r1, r1, #1
	add r2, r2, #4
	cmp r1, #5
	blo _02087E4E
	mov r0, #0
	add sp, #0x14
	pop {r3, r4, r5}
	bx lr
	.balign 4, 0
_02087E6C: .word 0x021028A0
	thumb_func_end sub_02087E34

	thumb_func_start sub_02087E70
sub_02087E70: ; 0x02087E70
	push {r3, r4, r5, lr}
	add r4, r0, #0
	mov r0, #0
	add r5, r2, #0
	bl sub_0200616C
	mov r2, #0x55
	mov r0, #3
	mov r1, #0x6d
	lsl r2, r2, #0xc
	bl CreateHeap
	add r0, r4, #0
	bl sub_02087A78
	add r4, r0, #0
	bl ov40_0222C480
	mov r0, #1
	mov r1, #0x2a
	bl sub_02005B50
	mov r0, #7
	mov r1, #0x2a
	bl sub_02005B50
	cmp r5, #0
	beq _02087EB0
	ldr r1, _02087EF0 ; =0x00000482
	mov r0, #0
	bl sub_02055198
_02087EB0:
	cmp r5, #0
	bne _02087EE2
	mov r0, #0x83
	lsl r0, r0, #4
	ldr r0, [r4, r0]
	bl sub_0202A954
	add r1, r4, #0
	add r1, #0x5c
	bl sub_0202AC0C
	add r0, r4, #0
	add r0, #0x5c
	ldrb r0, [r0]
	cmp r0, #7
	blo _02087ED8
	add r0, r4, #0
	mov r1, #0
	add r0, #0x5c
	strb r1, [r0]
_02087ED8:
	add r0, r4, #0
	bl ov40_0222DAC0
	str r0, [r4, #0x58]
	b _02087EE6
_02087EE2:
	ldr r0, _02087EF4 ; =0x00007FDD
	str r0, [r4, #0x58]
_02087EE6:
	add r0, r4, #0
	bl ov40_0222B6E0
	mov r0, #1
	pop {r3, r4, r5, pc}
	.balign 4, 0
_02087EF0: .word 0x00000482
_02087EF4: .word 0x00007FDD
	thumb_func_end sub_02087E70

	thumb_func_start sub_02087EF8
sub_02087EF8: ; 0x02087EF8
	ldr r3, _02087F00 ; =sub_02087E70
	mov r2, #0
	bx r3
	nop
_02087F00: .word sub_02087E70
	thumb_func_end sub_02087EF8

	thumb_func_start sub_02087F04
sub_02087F04: ; 0x02087F04
	ldr r3, _02087F0C ; =sub_02087E70
	mov r2, #1
	bx r3
	nop
_02087F0C: .word sub_02087E70
	thumb_func_end sub_02087F04

	thumb_func_start sub_02087F10
sub_02087F10: ; 0x02087F10
	push {r4, lr}
	add r4, r1, #0
	bl sub_02087A78
	add r1, r4, #0
	str r4, [r0, #0x10]
	bl ov40_0222BD30
	cmp r0, #0
	beq _02087F28
	mov r0, #1
	pop {r4, pc}
_02087F28:
	mov r0, #0
	pop {r4, pc}
	thumb_func_end sub_02087F10

	thumb_func_start sub_02087F2C
sub_02087F2C: ; 0x02087F2C
	push {r3, r4, r5, lr}
	add r4, r1, #0
	bl sub_02087A78
	ldr r1, [r4]
	add r5, r0, #0
	cmp r1, #3
	bhi _02087F9E
	add r1, r1, r1
	add r1, pc
	ldrh r1, [r1, #6]
	lsl r1, r1, #0x10
	asr r1, r1, #0x10
	add pc, r1
_02087F48: ; jump table
	.short _02087F50 - _02087F48 - 2 ; case 0
	.short _02087F5C - _02087F48 - 2 ; case 1
	.short _02087F74 - _02087F48 - 2 ; case 2
	.short _02087F8A - _02087F48 - 2 ; case 3
_02087F50:
	bl ov40_0222CABC
	ldr r0, [r4]
	add r0, r0, #1
	str r0, [r4]
	b _02087FC2
_02087F5C:
	bl ov40_0222CA8C
	add r0, r5, #0
	bl ov40_0222CF94
	add r0, r5, #0
	bl ov40_0222D55C
	ldr r0, [r4]
	add r0, r0, #1
	str r0, [r4]
	b _02087FC2
_02087F74:
	mov r0, #0x6f
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	bl sub_02087988
	cmp r0, #0
	bne _02087FC2
	ldr r0, [r4]
	add r0, r0, #1
	str r0, [r4]
	b _02087FC2
_02087F8A:
	ldr r0, _02087FC8 ; =0x000006F4
	ldr r0, [r5, r0]
	bl sub_02087988
	cmp r0, #0
	bne _02087FC2
	ldr r0, [r4]
	add r0, r0, #1
	str r0, [r4]
	b _02087FC2
_02087F9E:
	add r0, r5, #0
	bl ov40_0222B934
	mov r0, #0x6d
	bl DestroyHeap
	ldr r0, _02087FCC ; =SDK_OVERLAY_OVY_40_ID
	bl UnloadOverlayByID
	ldr r0, _02087FD0 ; =gMain + 0x60
	mov r1, #0
	strb r1, [r0, #9]
	bl sub_02022D3C
	bl sub_0203E354
	mov r0, #1
	pop {r3, r4, r5, pc}
_02087FC2:
	mov r0, #0
	pop {r3, r4, r5, pc}
	nop
_02087FC8: .word 0x000006F4
_02087FCC: .word SDK_OVERLAY_OVY_40_ID
_02087FD0: .word gMain + 0x60
	thumb_func_end sub_02087F2C

	thumb_func_start sub_02087FD4
sub_02087FD4: ; 0x02087FD4
	push {r3, lr}
	cmp r0, #7
	blt _02087FE6
	blt _02087FE0
	bl GF_AssertFail
_02087FE0:
	ldr r0, _02087FF0 ; =0x02103754
	ldr r0, [r0, #0x64]
	pop {r3, pc}
_02087FE6:
	mov r1, #0x24
	mul r1, r0
	ldr r0, _02087FF4 ; =0x021037B8
	ldr r0, [r0, r1]
	pop {r3, pc}
	.balign 4, 0
_02087FF0: .word 0x02103754
_02087FF4: .word 0x021037B8
	thumb_func_end sub_02087FD4

	thumb_func_start sub_02087FF8
sub_02087FF8: ; 0x02087FF8
	push {r3, r4, r5, lr}
	add r5, r0, #0
	add r4, r1, #0
	bne _0208800C
	bl sub_02087E1C
	cmp r0, #0
	bne _0208800C
	ldr r0, _02088028 ; =0x0210357C
	pop {r3, r4, r5, pc}
_0208800C:
	cmp r4, #3
	bne _0208801E
	add r0, r5, #0
	bl sub_02087E1C
	cmp r0, #0
	bne _0208801E
	ldr r0, _0208802C ; =0x02102DC0
	pop {r3, r4, r5, pc}
_0208801E:
	add r0, r4, #0
	bl sub_02087FD4
	pop {r3, r4, r5, pc}
	nop
_02088028: .word 0x0210357C
_0208802C: .word 0x02102DC0
	thumb_func_end sub_02087FF8

	thumb_func_start sub_02088030
sub_02088030: ; 0x02088030
	push {r3, r4}
	ldr r1, _02088058 ; =0x00000818
	mov r3, #0
	ldr r4, [r0, r1]
	mov r1, #0x6e
	lsl r1, r1, #4
	str r3, [r0, r1]
_0208803E:
	ldr r2, [r4]
	cmp r2, #0
	beq _0208804A
	ldr r2, [r0, r1]
	add r2, r2, #1
	str r2, [r0, r1]
_0208804A:
	add r3, r3, #1
	add r4, #0x24
	cmp r3, #5
	blt _0208803E
	pop {r3, r4}
	bx lr
	nop
_02088058: .word 0x00000818
	thumb_func_end sub_02088030

	thumb_func_start sub_0208805C
sub_0208805C: ; 0x0208805C
	lsl r1, r0, #1
	ldr r0, _02088064 ; =0x02103894
	ldrh r0, [r0, r1]
	bx lr
	.balign 4, 0
_02088064: .word 0x02103894
	thumb_func_end sub_0208805C

	thumb_func_start sub_02088068
sub_02088068: ; 0x02088068
	push {r4, lr}
	add r4, r0, #0
	mul r0, r2
	bl _u32_div_f
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	bne _0208807E
	cmp r4, #0
	beq _0208807E
	mov r0, #1
_0208807E:
	pop {r4, pc}
	thumb_func_end sub_02088068

	thumb_func_start sub_02088080
sub_02088080: ; 0x02088080
	push {r4, lr}
	add r4, r0, #0
	lsl r0, r1, #8
	lsl r4, r4, #8
	lsr r1, r0, #1
	cmp r4, r1
	bls _02088092
	mov r0, #3
	pop {r4, pc}
_02088092:
	mov r1, #5
	bl _u32_div_f
	cmp r4, r0
	bls _020880A0
	mov r0, #2
	pop {r4, pc}
_020880A0:
	cmp r4, #0
	beq _020880A8
	mov r0, #1
	b _020880AA
_020880A8:
	mov r0, #0
_020880AA:
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	pop {r4, pc}
	thumb_func_end sub_02088080

	thumb_func_start sub_020880B0
sub_020880B0: ; 0x020880B0
	push {r4, lr}
	add r4, r2, #0
	cmp r0, r1
	bne _020880BC
	mov r0, #4
	pop {r4, pc}
_020880BC:
	lsl r2, r4, #0x18
	lsr r2, r2, #0x18
	bl sub_02088068
	add r1, r4, #0
	bl sub_02088080
	pop {r4, pc}
	thumb_func_end sub_020880B0

	thumb_func_start sub_020880CC
sub_020880CC: ; 0x020880CC
	push {lr}
	sub sp, #0xc
	cmp r0, #0
	bne _020880EC
	mov r0, #6
	str r0, [sp]
	mov r2, #1
	str r2, [sp, #4]
	mov r0, #0
	str r1, [sp, #8]
	add r1, r2, #0
	add r3, r0, #0
	bl sub_0200FA24
	add sp, #0xc
	pop {pc}
_020880EC:
	mov r0, #6
	str r0, [sp]
	mov r0, #1
	str r0, [sp, #4]
	mov r0, #0
	str r1, [sp, #8]
	mov r1, #8
	add r2, r0, #0
	add r3, r0, #0
	bl sub_0200FA24
	add sp, #0xc
	pop {pc}
	.balign 4, 0
	thumb_func_end sub_020880CC

	thumb_func_start sub_02088108
sub_02088108: ; 0x02088108
	push {r4, r5}
	mov r5, #0
	ldrsh r3, [r0, r5]
	cmp r2, #1
	bgt _0208812A
	sub r4, r5, #1
	cmp r2, r4
	blt _02088120
	beq _02088130
	cmp r2, #1
	beq _02088174
	b _020881B8
_02088120:
	add r1, r5, #0
	sub r1, #0xa
	cmp r2, r1
	beq _02088150
	b _020881B8
_0208812A:
	cmp r2, #0xa
	beq _02088196
	b _020881B8
_02088130:
	sub r2, r3, #1
	strh r2, [r0]
	ldrsh r2, [r0, r5]
	cmp r2, #0
	bgt _0208813C
	strh r1, [r0]
_0208813C:
	mov r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, r3
	bne _0208814A
	add r0, r1, #0
	pop {r4, r5}
	bx lr
_0208814A:
	mov r0, #2
	pop {r4, r5}
	bx lr
_02088150:
	add r1, r3, #0
	sub r1, #0xa
	strh r1, [r0]
	ldrsh r1, [r0, r5]
	cmp r1, #0
	bgt _02088160
	mov r1, #1
	strh r1, [r0]
_02088160:
	mov r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, r3
	bne _0208816E
	add r0, r1, #0
	pop {r4, r5}
	bx lr
_0208816E:
	mov r0, #2
	pop {r4, r5}
	bx lr
_02088174:
	add r2, r3, #1
	strh r2, [r0]
	ldrsh r2, [r0, r5]
	cmp r2, r1
	ble _02088182
	mov r1, #1
	strh r1, [r0]
_02088182:
	mov r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, r3
	bne _02088190
	add r0, r1, #0
	pop {r4, r5}
	bx lr
_02088190:
	mov r0, #1
	pop {r4, r5}
	bx lr
_02088196:
	add r2, r3, #0
	add r2, #0xa
	strh r2, [r0]
	ldrsh r2, [r0, r5]
	cmp r2, r1
	ble _020881A4
	strh r1, [r0]
_020881A4:
	mov r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, r3
	bne _020881B2
	add r0, r1, #0
	pop {r4, r5}
	bx lr
_020881B2:
	mov r0, #1
	pop {r4, r5}
	bx lr
_020881B8:
	mov r0, #0
	pop {r4, r5}
	bx lr
	.balign 4, 0
	thumb_func_end sub_02088108

	thumb_func_start sub_020881C0
sub_020881C0: ; 0x020881C0
	push {r4, lr}
	ldr r2, _02088208 ; =gMain
	ldr r3, [r2, #0x4c]
	mov r2, #0x40
	tst r2, r3
	beq _020881D4
	mov r2, #1
	bl sub_02088108
	pop {r4, pc}
_020881D4:
	mov r2, #0x80
	add r4, r3, #0
	tst r4, r2
	beq _020881E4
	sub r2, #0x81
	bl sub_02088108
	pop {r4, pc}
_020881E4:
	mov r2, #0x20
	add r4, r3, #0
	tst r4, r2
	beq _020881F4
	sub r2, #0x2a
	bl sub_02088108
	pop {r4, pc}
_020881F4:
	mov r2, #0x10
	tst r2, r3
	beq _02088202
	mov r2, #0xa
	bl sub_02088108
	pop {r4, pc}
_02088202:
	mov r0, #0
	pop {r4, pc}
	nop
_02088208: .word gMain
	thumb_func_end sub_020881C0

	thumb_func_start sub_0208820C
sub_0208820C: ; 0x0208820C
	push {r4, r5, r6, lr}
	sub sp, #0x10
	ldr r6, [sp, #0x28]
	add r5, r0, #0
	ldr r4, [sp, #0x20]
	ldr r0, [sp, #0x2c]
	ldr r3, [sp, #0x30]
	cmp r6, #0
	beq _0208822A
	cmp r6, #1
	beq _02088244
	cmp r6, #2
	beq _0208825E
	add sp, #0x10
	pop {r4, r5, r6, pc}
_0208822A:
	str r3, [sp]
	str r0, [sp, #4]
	mov r0, #0
	str r0, [sp, #8]
	str r1, [sp, #0xc]
	add r0, r2, #0
	ldr r3, [sp, #0x24]
	add r1, r4, #0
	add r2, r5, #0
	bl sub_02007B44
	add sp, #0x10
	pop {r4, r5, r6, pc}
_02088244:
	str r3, [sp]
	str r0, [sp, #4]
	mov r0, #0
	str r0, [sp, #8]
	str r1, [sp, #0xc]
	add r0, r2, #0
	ldr r3, [sp, #0x24]
	add r1, r4, #0
	add r2, r5, #0
	bl sub_02007B68
	add sp, #0x10
	pop {r4, r5, r6, pc}
_0208825E:
	ldr r5, [sp, #0x24]
	str r0, [sp]
	cmp r5, #3
	bgt _02088276
	str r1, [sp, #4]
	add r0, r2, #0
	add r1, r4, #0
	mov r2, #0
	bl sub_02007B8C
	add sp, #0x10
	pop {r4, r5, r6, pc}
_02088276:
	str r1, [sp, #4]
	add r0, r2, #0
	add r1, r4, #0
	mov r2, #4
	bl sub_02007B8C
	add sp, #0x10
	pop {r4, r5, r6, pc}
	.balign 4, 0
	thumb_func_end sub_0208820C

	thumb_func_start sub_02088288
sub_02088288: ; 0x02088288
	mov r0, #1
	bx lr
	thumb_func_end sub_02088288

	thumb_func_start sub_0208828C
sub_0208828C: ; 0x0208828C
	push {r3, lr}
	bl SavArray_Flags_get
	bl sub_020669F0
	pop {r3, pc}
	thumb_func_end sub_0208828C

	thumb_func_start sub_02088298
sub_02088298: ; 0x02088298
	push {r3, r4, r5, r6, r7, lr}
	add r6, r0, #0
	mov r0, #0
	add r1, r0, #0
	bl sub_0201A0FC
	bl sub_0201A108
	bl sub_02022C54
	bl sub_02022CBC
	mov r1, #1
	lsl r1, r1, #0x1a
	ldr r0, [r1]
	ldr r2, _02088408 ; =0xFFFFE0FF
	and r0, r2
	str r0, [r1]
	ldr r0, _0208840C ; =0x04001000
	ldr r3, [r0]
	and r2, r3
	str r2, [r0]
	ldr r3, [r1]
	ldr r2, _02088410 ; =0xFFFF1FFF
	and r3, r2
	str r3, [r1]
	ldr r3, [r0]
	add r1, #0x50
	and r2, r3
	str r2, [r0]
	mov r2, #0
	strh r2, [r1]
	add r0, #0x50
	strh r2, [r0]
	mov r0, #4
	mov r1, #8
	bl sub_0201A71C
	mov r2, #0x45
	mov r0, #3
	mov r1, #0x13
	lsl r2, r2, #0xc
	bl CreateHeap
	mov r0, #0x27
	mov r1, #0x13
	bl NARC_ctor
	add r7, r0, #0
	mov r0, #0xa2
	mov r1, #0x13
	bl NARC_ctor
	add r5, r0, #0
	ldr r1, _02088414 ; =0x000007D8
	add r0, r6, #0
	mov r2, #0x13
	bl OverlayManager_CreateAndGetData
	ldr r2, _02088414 ; =0x000007D8
	mov r1, #0
	add r4, r0, #0
	bl memset
	add r0, r6, #0
	bl OverlayManager_GetField18
	mov r1, #0x8b
	lsl r1, r1, #2
	str r0, [r4, r1]
	mov r0, #0x13
	bl sub_0201AC88
	str r0, [r4]
	mov r0, #0x8b
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0
	str r1, [r0, #0x38]
	mov r1, #1
	mov r0, #0x13
	add r2, r1, #0
	bl sub_02016EDC
	mov r1, #0xb3
	lsl r1, r1, #2
	str r0, [r4, r1]
	mov r0, #0xb4
	mov r1, #0x13
	bl NARC_ctor
	ldr r1, _02088418 ; =0x000007B8
	str r0, [r4, r1]
	mov r0, #0
	mov r1, #0x13
	bl sub_02002D40
	bl sub_020210BC
	mov r0, #4
	bl sub_02021148
	bl sub_02088610
	ldr r0, [r4]
	bl sub_02088630
	add r0, r4, #0
	add r1, r7, #0
	add r2, r5, #0
	bl sub_020887C4
	bl sub_0208887C
	add r0, r4, #0
	bl sub_0208DE40
	mov r0, #4
	mov r1, #0x13
	bl sub_02002CEC
	add r0, r4, #0
	bl sub_02088894
	add r0, r4, #0
	add r1, r5, #0
	bl sub_020889D0
	add r0, r4, #0
	bl sub_020897C0
	add r0, r4, #0
	bl sub_0208B1AC
	add r0, r4, #0
	bl sub_0208B2C0
	add r0, r4, #0
	bl sub_0208E3AC
	add r0, r4, #0
	bl sub_0208B48C
	add r0, r4, #0
	bl sub_0208B4EC
	add r0, r4, #0
	bl sub_0208BECC
	add r0, r4, #0
	bl sub_0208C3E4
	add r0, r4, #0
	bl sub_02089CB4
	add r0, r4, #0
	bl sub_0208DF2C
	ldr r0, _0208841C ; =sub_020885DC
	add r1, r4, #0
	bl sub_0201A0FC
	ldr r2, _02088420 ; =0x04000304
	ldrh r1, [r2]
	lsr r0, r2, #0xb
	orr r0, r1
	strh r0, [r2]
	bl sub_02022D24
	mov r1, #0
	mov r0, #0x3d
	add r2, r1, #0
	bl sub_02004EC4
	bl sub_0203A964
	add r0, r5, #0
	bl NARC_dtor
	add r0, r7, #0
	bl NARC_dtor
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_02088408: .word 0xFFFFE0FF
_0208840C: .word 0x04001000
_02088410: .word 0xFFFF1FFF
_02088414: .word 0x000007D8
_02088418: .word 0x000007B8
_0208841C: .word sub_020885DC
_02088420: .word 0x04000304
	thumb_func_end sub_02088298

	thumb_func_start sub_02088424
sub_02088424: ; 0x02088424
	push {r3, r4, r5, lr}
	add r4, r1, #0
	bl OverlayManager_GetData
	ldr r1, [r4]
	add r5, r0, #0
	cmp r1, #0x16
	bls _02088436
	b _0208854A
_02088436:
	add r1, r1, r1
	add r1, pc
	ldrh r1, [r1, #6]
	lsl r1, r1, #0x10
	asr r1, r1, #0x10
	add pc, r1
_02088442: ; jump table
	.short _02088470 - _02088442 - 2 ; case 0
	.short _0208848C - _02088442 - 2 ; case 1
	.short _02088494 - _02088442 - 2 ; case 2
	.short _0208849C - _02088442 - 2 ; case 3
	.short _020884A4 - _02088442 - 2 ; case 4
	.short _020884AC - _02088442 - 2 ; case 5
	.short _020884BC - _02088442 - 2 ; case 6
	.short _020884B4 - _02088442 - 2 ; case 7
	.short _020884C4 - _02088442 - 2 ; case 8
	.short _020884CC - _02088442 - 2 ; case 9
	.short _020884D4 - _02088442 - 2 ; case 10
	.short _020884DC - _02088442 - 2 ; case 11
	.short _020884E4 - _02088442 - 2 ; case 12
	.short _020884EC - _02088442 - 2 ; case 13
	.short _020884F4 - _02088442 - 2 ; case 14
	.short _020884FC - _02088442 - 2 ; case 15
	.short _02088504 - _02088442 - 2 ; case 16
	.short _0208850C - _02088442 - 2 ; case 17
	.short _02088514 - _02088442 - 2 ; case 18
	.short _02088530 - _02088442 - 2 ; case 19
	.short _02088544 - _02088442 - 2 ; case 20
	.short _0208851C - _02088442 - 2 ; case 21
	.short _02088524 - _02088442 - 2 ; case 22
_02088470:
	mov r0, #0
	mov r1, #0x13
	bl sub_020880CC
	mov r0, #0x2d
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	mov r1, #6
	mov r2, #0
	bl sub_020087A4
	mov r0, #1
	str r0, [r4]
	b _0208854A
_0208848C:
	bl sub_02088B08
	str r0, [r4]
	b _0208854A
_02088494:
	bl sub_02088B40
	str r0, [r4]
	b _0208854A
_0208849C:
	bl sub_02088D18
	str r0, [r4]
	b _0208854A
_020884A4:
	bl sub_02088D34
	str r0, [r4]
	b _0208854A
_020884AC:
	bl sub_02088D48
	str r0, [r4]
	b _0208854A
_020884B4:
	bl sub_02088E68
	str r0, [r4]
	b _0208854A
_020884BC:
	bl sub_02088E98
	str r0, [r4]
	b _0208854A
_020884C4:
	bl sub_02089028
	str r0, [r4]
	b _0208854A
_020884CC:
	bl sub_02089208
	str r0, [r4]
	b _0208854A
_020884D4:
	bl sub_020892F4
	str r0, [r4]
	b _0208854A
_020884DC:
	bl sub_02089308
	str r0, [r4]
	b _0208854A
_020884E4:
	bl sub_0208931C
	str r0, [r4]
	b _0208854A
_020884EC:
	bl sub_0208942C
	str r0, [r4]
	b _0208854A
_020884F4:
	bl sub_02089454
	str r0, [r4]
	b _0208854A
_020884FC:
	bl sub_02089698
	str r0, [r4]
	b _0208854A
_02088504:
	bl sub_02089478
	str r0, [r4]
	b _0208854A
_0208850C:
	bl sub_02089608
	str r0, [r4]
	b _0208854A
_02088514:
	bl sub_02089658
	str r0, [r4]
	b _0208854A
_0208851C:
	bl sub_02089670
	str r0, [r4]
	b _0208854A
_02088524:
	bl sub_02089680
	cmp r0, #1
	bne _0208854A
	mov r0, #1
	pop {r3, r4, r5, pc}
_02088530:
	mov r0, #0x2d
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	mov r1, #6
	mov r2, #0
	bl sub_020087A4
	mov r0, #2
	str r0, [r4]
	b _0208854A
_02088544:
	bl sub_02089794
	str r0, [r4]
_0208854A:
	add r0, r5, #0
	bl sub_0208B278
	add r0, r5, #0
	bl sub_0208C3C0
	mov r0, #1
	lsl r0, r0, #0xa
	ldr r0, [r5, r0]
	bl sub_0200D020
	add r0, r5, #0
	bl sub_0208DEDC
	mov r0, #0
	pop {r3, r4, r5, pc}
	.balign 4, 0
	thumb_func_end sub_02088424

	thumb_func_start sub_0208856C
sub_0208856C: ; 0x0208856C
	push {r3, r4, r5, lr}
	add r5, r0, #0
	bl OverlayManager_GetData
	add r4, r0, #0
	mov r0, #0
	add r1, r0, #0
	bl sub_0201A0FC
	add r0, r4, #0
	bl sub_0208DEFC
	add r0, r4, #0
	bl sub_0208B258
	add r0, r4, #0
	bl sub_0208C560
	ldr r0, [r4]
	bl sub_0208877C
	bl sub_02021238
	bl sub_020205AC
	add r0, r4, #0
	bl sub_02088AF8
	add r0, r4, #0
	bl sub_0208895C
	mov r0, #4
	bl sub_02002DB4
	ldr r0, _020885D4 ; =0x000007B8
	ldr r0, [r4, r0]
	bl NARC_dtor
	mov r0, #0
	bl sub_02002D7C
	ldr r0, _020885D8 ; =0x04000050
	mov r1, #0
	strh r1, [r0]
	add r0, r5, #0
	bl OverlayManager_FreeData
	mov r0, #0x13
	bl DestroyHeap
	mov r0, #1
	pop {r3, r4, r5, pc}
	.balign 4, 0
_020885D4: .word 0x000007B8
_020885D8: .word 0x04000050
	thumb_func_end sub_0208856C

	thumb_func_start sub_020885DC
sub_020885DC: ; 0x020885DC
	push {r4, lr}
	add r4, r0, #0
	ldr r0, [r4]
	bl sub_0201EEB4
	mov r0, #0x2a
	lsl r0, r0, #4
	ldr r0, [r4, r0]
	bl sub_02009418
	bl sub_0202061C
	bl sub_0200D034
	ldr r3, _02088608 ; =OSi_IntrTable
	ldr r1, _0208860C ; =0x00003FF8
	mov r0, #1
	ldr r2, [r3, r1]
	orr r0, r2
	str r0, [r3, r1]
	pop {r4, pc}
	nop
_02088608: .word OSi_IntrTable
_0208860C: .word 0x00003FF8
	thumb_func_end sub_020885DC

	thumb_func_start sub_02088610
sub_02088610: ; 0x02088610
	push {r4, lr}
	sub sp, #0x28
	ldr r4, _0208862C ; =0x02103990
	add r3, sp, #0
	mov r2, #5
_0208861A:
	ldmia r4!, {r0, r1}
	stmia r3!, {r0, r1}
	sub r2, r2, #1
	bne _0208861A
	add r0, sp, #0
	bl GX_SetBanks
	add sp, #0x28
	pop {r4, pc}
	.balign 4, 0
_0208862C: .word 0x02103990
	thumb_func_end sub_02088610

	thumb_func_start sub_02088630
sub_02088630: ; 0x02088630
	push {r3, r4, r5, lr}
	sub sp, #0xb8
	ldr r5, _02088760 ; =0x021038C4
	add r3, sp, #0xa8
	add r4, r0, #0
	add r2, r3, #0
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	add r0, r2, #0
	bl sub_0201ACB0
	ldr r5, _02088764 ; =0x021038E8
	add r3, sp, #0x8c
	ldmia r5!, {r0, r1}
	add r2, r3, #0
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldr r0, [r5]
	mov r1, #1
	str r0, [r3]
	add r0, r4, #0
	mov r3, #0
	bl sub_0201B1E4
	add r0, r4, #0
	mov r1, #1
	bl sub_0201CAE0
	ldr r5, _02088768 ; =0x02103904
	add r3, sp, #0x70
	ldmia r5!, {r0, r1}
	add r2, r3, #0
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldr r0, [r5]
	mov r1, #2
	str r0, [r3]
	add r0, r4, #0
	mov r3, #0
	bl sub_0201B1E4
	add r0, r4, #0
	mov r1, #2
	bl sub_0201CAE0
	mov r2, #0
	add r0, r4, #0
	mov r1, #2
	add r3, r2, #0
	bl sub_0201F238
	add r0, r4, #0
	mov r1, #2
	mov r2, #3
	mov r3, #0
	bl sub_0201F238
	ldr r5, _0208876C ; =0x02103920
	add r3, sp, #0x54
	ldmia r5!, {r0, r1}
	add r2, r3, #0
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldr r0, [r5]
	mov r1, #3
	str r0, [r3]
	add r0, r4, #0
	mov r3, #0
	bl sub_0201B1E4
	ldr r5, _02088770 ; =0x0210393C
	add r3, sp, #0x38
	ldmia r5!, {r0, r1}
	add r2, r3, #0
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldr r0, [r5]
	str r0, [r3]
	add r0, r4, #0
	mov r1, #4
	mov r3, #0
	bl sub_0201B1E4
	add r0, r4, #0
	mov r1, #4
	bl sub_0201CAE0
	ldr r5, _02088774 ; =0x02103958
	add r3, sp, #0x1c
	ldmia r5!, {r0, r1}
	add r2, r3, #0
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldr r0, [r5]
	mov r1, #5
	str r0, [r3]
	add r0, r4, #0
	mov r3, #0
	bl sub_0201B1E4
	add r0, r4, #0
	mov r1, #5
	bl sub_0201CAE0
	ldr r5, _02088778 ; =0x02103974
	add r3, sp, #0
	ldmia r5!, {r0, r1}
	add r2, r3, #0
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldr r0, [r5]
	mov r1, #6
	str r0, [r3]
	add r0, r4, #0
	mov r3, #0
	bl sub_0201B1E4
	mov r0, #1
	mov r1, #0x20
	mov r2, #0
	mov r3, #0x13
	bl sub_0201C1C4
	mov r0, #4
	mov r1, #0x20
	mov r2, #0
	mov r3, #0x13
	bl sub_0201C1C4
	add sp, #0xb8
	pop {r3, r4, r5, pc}
	nop
_02088760: .word 0x021038C4
_02088764: .word 0x021038E8
_02088768: .word 0x02103904
_0208876C: .word 0x02103920
_02088770: .word 0x0210393C
_02088774: .word 0x02103958
_02088778: .word 0x02103974
	thumb_func_end sub_02088630

	thumb_func_start sub_0208877C
sub_0208877C: ; 0x0208877C
	push {r4, lr}
	add r4, r0, #0
	bl sub_02022C54
	bl sub_02022CBC
	add r0, r4, #0
	mov r1, #6
	bl sub_0201BB4C
	add r0, r4, #0
	mov r1, #5
	bl sub_0201BB4C
	add r0, r4, #0
	mov r1, #4
	bl sub_0201BB4C
	add r0, r4, #0
	mov r1, #3
	bl sub_0201BB4C
	add r0, r4, #0
	mov r1, #2
	bl sub_0201BB4C
	add r0, r4, #0
	mov r1, #1
	bl sub_0201BB4C
	mov r0, #0x13
	add r1, r4, #0
	bl FreeToHeapExplicit
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_0208877C

	thumb_func_start sub_020887C4
sub_020887C4: ; 0x020887C4
	push {r3, r4, r5, lr}
	sub sp, #0x10
	add r5, r0, #0
	mov r0, #2
	lsl r0, r0, #8
	str r0, [sp]
	mov r0, #0x13
	mov r1, #0
	add r4, r2, #0
	str r0, [sp, #4]
	add r0, r4, #0
	add r2, r1, #0
	add r3, r1, #0
	bl sub_02007B8C
	mov r1, #0
	mov r0, #0x11
	str r1, [sp]
	lsl r0, r0, #0xa
	str r0, [sp, #4]
	str r1, [sp, #8]
	mov r0, #0x13
	str r0, [sp, #0xc]
	ldr r2, [r5]
	add r0, r4, #0
	mov r1, #2
	mov r3, #3
	bl sub_02007B44
	mov r0, #0
	str r0, [sp]
	str r0, [sp, #4]
	str r0, [sp, #8]
	mov r0, #0x13
	str r0, [sp, #0xc]
	ldr r2, [r5]
	add r0, r4, #0
	mov r1, #0xd
	mov r3, #3
	bl sub_02007B68
	mov r0, #2
	lsl r0, r0, #8
	str r0, [sp]
	mov r0, #0x13
	mov r1, #0
	str r0, [sp, #4]
	add r0, r4, #0
	mov r2, #4
	add r3, r1, #0
	bl sub_02007B8C
	mov r1, #0
	mov r0, #0x11
	str r1, [sp]
	lsl r0, r0, #0xa
	str r0, [sp, #4]
	str r1, [sp, #8]
	mov r0, #0x13
	str r0, [sp, #0xc]
	ldr r2, [r5]
	add r0, r4, #0
	mov r1, #1
	mov r3, #6
	bl sub_02007B44
	mov r0, #0
	str r0, [sp]
	str r0, [sp, #4]
	str r0, [sp, #8]
	mov r0, #0x13
	str r0, [sp, #0xc]
	ldr r2, [r5]
	add r0, r4, #0
	mov r1, #0x14
	mov r3, #5
	bl sub_02007B44
	mov r0, #0
	str r0, [sp]
	str r0, [sp, #4]
	str r0, [sp, #8]
	mov r0, #0x13
	str r0, [sp, #0xc]
	ldr r2, [r5]
	add r0, r4, #0
	mov r1, #0x15
	mov r3, #5
	bl sub_02007B68
	add sp, #0x10
	pop {r3, r4, r5, pc}
	thumb_func_end sub_020887C4

	thumb_func_start sub_0208887C
sub_0208887C: ; 0x0208887C
	push {r3, lr}
	mov r0, #8
	str r0, [sp]
	ldr r0, _02088890 ; =0x04000050
	mov r1, #1
	mov r2, #0x1e
	mov r3, #0x17
	bl sub_020CF15C
	pop {r3, pc}
	.balign 4, 0
_02088890: .word 0x04000050
	thumb_func_end sub_0208887C

	thumb_func_start sub_02088894
sub_02088894: ; 0x02088894
	push {r4, lr}
	ldr r2, _02088940 ; =0x0000012E
	add r4, r0, #0
	mov r0, #0
	mov r1, #0x1b
	mov r3, #0x13
	bl NewMsgDataFromNarc
	mov r1, #0x7a
	lsl r1, r1, #4
	str r0, [r4, r1]
	mov r2, #0x6a
	mov r0, #1
	mov r1, #0x1b
	lsl r2, r2, #2
	mov r3, #0x13
	bl NewMsgDataFromNarc
	ldr r1, _02088944 ; =0x000007A4
	mov r2, #0
	str r0, [r4, r1]
	mov r0, #1
	mov r1, #2
	mov r3, #0x13
	bl MessagePrinter_new
	ldr r1, _02088948 ; =0x0000079C
	str r0, [r4, r1]
	mov r0, #0x13
	bl ScrStrBufs_new
	ldr r1, _0208894C ; =0x000007A8
	str r0, [r4, r1]
	mov r0, #0xc
	mov r1, #0x13
	bl String_ctor
	mov r1, #0x23
	lsl r1, r1, #4
	str r0, [r4, r1]
	mov r0, #0xc
	mov r1, #0x13
	bl String_ctor
	mov r1, #0x8d
	lsl r1, r1, #2
	str r0, [r4, r1]
	mov r0, #8
	mov r1, #0x13
	bl String_ctor
	mov r1, #0x8e
	lsl r1, r1, #2
	str r0, [r4, r1]
	mov r0, #0x80
	mov r1, #0x13
	bl String_ctor
	ldr r1, _02088950 ; =0x000007AC
	ldr r2, _02088954 ; =0x000002EE
	str r0, [r4, r1]
	mov r0, #0
	mov r1, #0x1b
	mov r3, #0x13
	bl NewMsgDataFromNarc
	ldr r1, _02088958 ; =0x000007B4
	str r0, [r4, r1]
	mov r0, #8
	mov r1, #0x13
	bl String_ctor
	mov r2, #0x7b
	lsl r2, r2, #4
	str r0, [r4, r2]
	mov r0, #0x8b
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	ldr r1, [r0, #8]
	cmp r1, #0
	beq _0208893C
	ldr r0, [r4, r2]
	bl CopyU16ArrayToString
_0208893C:
	pop {r4, pc}
	nop
_02088940: .word 0x0000012E
_02088944: .word 0x000007A4
_02088948: .word 0x0000079C
_0208894C: .word 0x000007A8
_02088950: .word 0x000007AC
_02088954: .word 0x000002EE
_02088958: .word 0x000007B4
	thumb_func_end sub_02088894

	thumb_func_start sub_0208895C
sub_0208895C: ; 0x0208895C
	push {r4, lr}
	add r4, r0, #0
	ldr r0, _020889BC ; =0x000007B4
	ldr r0, [r4, r0]
	bl DestroyMsgData
	ldr r0, _020889C0 ; =0x000007A4
	ldr r0, [r4, r0]
	bl DestroyMsgData
	mov r0, #0x7a
	lsl r0, r0, #4
	ldr r0, [r4, r0]
	bl DestroyMsgData
	ldr r0, _020889C4 ; =0x0000079C
	ldr r0, [r4, r0]
	bl MessagePrinter_delete
	ldr r0, _020889C8 ; =0x000007A8
	ldr r0, [r4, r0]
	bl ScrStrBufs_delete
	mov r0, #0x23
	lsl r0, r0, #4
	ldr r0, [r4, r0]
	bl String_dtor
	mov r0, #0x8d
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	bl String_dtor
	mov r0, #0x8e
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	bl String_dtor
	ldr r0, _020889CC ; =0x000007AC
	ldr r0, [r4, r0]
	bl String_dtor
	mov r0, #0x7b
	lsl r0, r0, #4
	ldr r0, [r4, r0]
	bl String_dtor
	pop {r4, pc}
	.balign 4, 0
_020889BC: .word 0x000007B4
_020889C0: .word 0x000007A4
_020889C4: .word 0x0000079C
_020889C8: .word 0x000007A8
_020889CC: .word 0x000007AC
	thumb_func_end sub_0208895C

	thumb_func_start sub_020889D0
sub_020889D0: ; 0x020889D0
	push {r3, r4, r5, lr}
	add r5, r0, #0
	ldr r0, [r5]
	add r4, r1, #0
	mov r1, #2
	mov r2, #7
	mov r3, #0x13
	bl sub_0201956C
	mov r1, #0x7d
	lsl r1, r1, #4
	str r0, [r5, r1]
	mov r2, #6
	str r2, [sp]
	ldr r0, [r5, r1]
	mov r1, #0
	mov r3, #0x11
	bl sub_020195F4
	mov r1, #0
	mov r0, #0x7d
	str r1, [sp]
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	add r2, r4, #0
	mov r3, #0x45
	bl sub_020196B8
	mov r2, #6
	mov r0, #0x7d
	str r2, [sp]
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	mov r1, #1
	mov r3, #0x11
	bl sub_020195F4
	mov r0, #0
	str r0, [sp]
	mov r0, #0x7d
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	mov r1, #1
	add r2, r4, #0
	mov r3, #0x46
	bl sub_020196B8
	mov r0, #4
	str r0, [sp]
	mov r0, #0x7d
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	mov r1, #2
	mov r2, #6
	mov r3, #0xa
	bl sub_020195F4
	mov r0, #0
	str r0, [sp]
	mov r0, #0x7d
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	mov r1, #2
	add r2, r4, #0
	mov r3, #0x47
	bl sub_020196B8
	mov r0, #4
	str r0, [sp]
	mov r0, #0x7d
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	mov r1, #3
	mov r2, #6
	mov r3, #0xa
	bl sub_020195F4
	mov r0, #0
	str r0, [sp]
	mov r0, #0x7d
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	mov r1, #3
	add r2, r4, #0
	mov r3, #0x48
	bl sub_020196B8
	mov r0, #0xe
	str r0, [sp]
	mov r0, #0x7d
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	mov r1, #4
	mov r2, #6
	mov r3, #0xb
	bl sub_020195F4
	mov r0, #0
	str r0, [sp]
	mov r0, #0x7d
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	mov r1, #4
	add r2, r4, #0
	mov r3, #0x49
	bl sub_020196B8
	mov r0, #3
	str r0, [sp]
	mov r0, #0x7d
	lsl r0, r0, #4
	mov r2, #6
	ldr r0, [r5, r0]
	mov r1, #5
	add r3, r2, #0
	bl sub_020195F4
	mov r0, #0
	str r0, [sp]
	mov r0, #0x7d
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	mov r1, #5
	add r2, r4, #0
	mov r3, #0x4a
	bl sub_020196B8
	mov r1, #6
	mov r0, #3
	str r0, [sp]
	mov r0, #0x7d
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	add r2, r1, #0
	add r3, r1, #0
	bl sub_020195F4
	mov r0, #0
	str r0, [sp]
	mov r0, #0x7d
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	mov r1, #6
	add r2, r4, #0
	mov r3, #0x4b
	bl sub_020196B8
	pop {r3, r4, r5, pc}
	thumb_func_end sub_020889D0

	thumb_func_start sub_02088AF8
sub_02088AF8: ; 0x02088AF8
	mov r1, #0x7d
	lsl r1, r1, #4
	ldr r3, _02088B04 ; =sub_020195C0
	ldr r0, [r0, r1]
	bx r3
	nop
_02088B04: .word sub_020195C0
	thumb_func_end sub_02088AF8

	thumb_func_start sub_02088B08
sub_02088B08: ; 0x02088B08
	push {r4, lr}
	add r4, r0, #0
	bl sub_0200FB5C
	cmp r0, #1
	bne _02088B3C
	add r0, r4, #0
	bl sub_0208E444
	add r0, r4, #0
	bl sub_02089C50
	mov r0, #0x8b
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	ldrb r0, [r0, #0x12]
	cmp r0, #2
	bne _02088B30
	mov r0, #8
	pop {r4, pc}
_02088B30:
	cmp r0, #4
	bne _02088B38
	mov r0, #0x10
	pop {r4, pc}
_02088B38:
	mov r0, #2
	pop {r4, pc}
_02088B3C:
	mov r0, #1
	pop {r4, pc}
	thumb_func_end sub_02088B08

	thumb_func_start sub_02088B40
sub_02088B40: ; 0x02088B40
	push {r4, r5, r6, lr}
	ldr r2, _02088CF8 ; =0x000007BF
	add r5, r0, #0
	ldrb r1, [r5, r2]
	lsl r1, r1, #0x18
	lsr r1, r1, #0x1c
	cmp r1, #1
	bne _02088B5E
	mov r0, #0x8b
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	mov r1, #1
	strb r1, [r0, #0x17]
	mov r0, #0x15
	pop {r4, r5, r6, pc}
_02088B5E:
	ldr r3, _02088CFC ; =gMain
	mov r1, #0x20
	ldr r4, [r3, #0x4c]
	add r6, r4, #0
	tst r6, r1
	beq _02088B74
	sub r1, #0x21
	bl sub_02089E30
	mov r0, #2
	pop {r4, r5, r6, pc}
_02088B74:
	mov r1, #0x10
	tst r1, r4
	beq _02088B84
	mov r1, #1
	bl sub_02089E30
	mov r0, #2
	pop {r4, r5, r6, pc}
_02088B84:
	mov r1, #0x40
	add r6, r4, #0
	tst r6, r1
	beq _02088B96
	sub r1, #0x41
	bl sub_0208A2C0
	mov r0, #0x13
	pop {r4, r5, r6, pc}
_02088B96:
	mov r1, #0x80
	tst r1, r4
	beq _02088BA6
	mov r1, #1
	bl sub_0208A2C0
	mov r0, #0x13
	pop {r4, r5, r6, pc}
_02088BA6:
	ldr r1, [r3, #0x48]
	mov r0, #2
	tst r0, r1
	beq _02088BD2
	mov r0, #0x25
	lsl r0, r0, #6
	bl PlaySE
	mov r0, #0x8b
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	mov r1, #1
	strb r1, [r0, #0x17]
	add r0, r5, #0
	mov r1, #0
	bl sub_0208ADB8
	add r0, r5, #0
	mov r1, #0x15
	bl sub_0208B044
	pop {r4, r5, r6, pc}
_02088BD2:
	mov r0, #1
	tst r0, r1
	beq _02088C12
	sub r0, r2, #3
	ldrsb r0, [r5, r0]
	cmp r0, #1
	beq _02088BE6
	cmp r0, #2
	beq _02088BFA
	b _02088C12
_02088BE6:
	ldr r0, _02088D00 ; =0x0000069B
	bl PlaySE
	ldr r1, _02088D04 ; =0x000007BD
	mov r0, #0xf
	ldrb r2, [r5, r1]
	bic r2, r0
	strb r2, [r5, r1]
	mov r0, #3
	pop {r4, r5, r6, pc}
_02088BFA:
	add r0, r2, #7
	ldrb r0, [r5, r0]
	cmp r0, #0
	beq _02088C12
	ldr r0, _02088D08 ; =0x000005DD
	bl PlaySE
	ldr r0, _02088D0C ; =0x000007C4
	mov r1, #0
	strb r1, [r5, r0]
	mov r0, #0xa
	pop {r4, r5, r6, pc}
_02088C12:
	ldr r0, _02088D10 ; =0x000007BC
	ldrsb r0, [r5, r0]
	cmp r0, #1
	bne _02088C56
	add r0, r5, #0
	bl sub_0208ADCC
	add r4, r0, #0
	mov r0, #0
	mvn r0, r0
	cmp r4, r0
	beq _02088C56
	lsl r0, r4, #1
	add r1, r5, r0
	mov r0, #0x99
	lsl r0, r0, #2
	ldrh r0, [r1, r0]
	cmp r0, #0
	beq _02088C56
	ldr r0, _02088D00 ; =0x0000069B
	bl PlaySE
	ldr r2, _02088D04 ; =0x000007BD
	mov r1, #0xf
	ldrb r0, [r5, r2]
	bic r0, r1
	lsl r1, r4, #0x18
	lsr r3, r1, #0x18
	mov r1, #0xf
	and r1, r3
	orr r0, r1
	strb r0, [r5, r2]
	mov r0, #3
	pop {r4, r5, r6, pc}
_02088C56:
	ldr r0, _02088D10 ; =0x000007BC
	ldrsb r0, [r5, r0]
	cmp r0, #2
	bne _02088C88
	add r0, r5, #0
	bl sub_0208AEC4
	add r4, r0, #0
	mov r0, #0
	mvn r0, r0
	cmp r4, r0
	beq _02088C88
	cmp r4, #9
	bge _02088C88
	ldr r0, _02088D14 ; =0x000007C6
	ldrb r0, [r5, r0]
	cmp r4, r0
	bge _02088C88
	ldr r0, _02088D08 ; =0x000005DD
	bl PlaySE
	ldr r0, _02088D0C ; =0x000007C4
	strb r4, [r5, r0]
	mov r0, #0xa
	pop {r4, r5, r6, pc}
_02088C88:
	mov r0, #0x8b
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	ldrb r0, [r0, #0x11]
	cmp r0, #2
	bne _02088CF0
	add r0, r5, #0
	bl sub_0208AEB4
	cmp r0, #0
	bne _02088CC6
	mov r1, #0
	add r0, r5, #0
	mvn r1, r1
	bl sub_0208A2E0
	mov r1, #0
	mvn r1, r1
	cmp r0, r1
	beq _02088CC2
	ldr r0, _02088D08 ; =0x000005DD
	bl PlaySE
	add r0, r5, #0
	mov r1, #0
	mov r2, #0x14
	bl sub_0208B0B0
	pop {r4, r5, r6, pc}
_02088CC2:
	mov r0, #2
	pop {r4, r5, r6, pc}
_02088CC6:
	cmp r0, #1
	bne _02088CF0
	add r0, r5, #0
	mov r1, #1
	bl sub_0208A2E0
	mov r1, #0
	mvn r1, r1
	cmp r0, r1
	beq _02088CEC
	ldr r0, _02088D08 ; =0x000005DD
	bl PlaySE
	add r0, r5, #0
	mov r1, #1
	mov r2, #0x14
	bl sub_0208B0B0
	pop {r4, r5, r6, pc}
_02088CEC:
	mov r0, #2
	pop {r4, r5, r6, pc}
_02088CF0:
	add r0, r5, #0
	bl sub_02089E98
	pop {r4, r5, r6, pc}
	.balign 4, 0
_02088CF8: .word 0x000007BF
_02088CFC: .word gMain
_02088D00: .word 0x0000069B
_02088D04: .word 0x000007BD
_02088D08: .word 0x000005DD
_02088D0C: .word 0x000007C4
_02088D10: .word 0x000007BC
_02088D14: .word 0x000007C6
	thumb_func_end sub_02088B40

	thumb_func_start sub_02088D18
sub_02088D18: ; 0x02088D18
	push {r4, lr}
	add r4, r0, #0
	bl sub_0208A564
	cmp r0, #1
	bne _02088D30
	add r0, r4, #0
	mov r1, #1
	bl sub_0208AFA0
	mov r0, #5
	pop {r4, pc}
_02088D30:
	mov r0, #3
	pop {r4, pc}
	thumb_func_end sub_02088D18

	thumb_func_start sub_02088D34
sub_02088D34: ; 0x02088D34
	push {r3, lr}
	bl sub_0208A63C
	cmp r0, #1
	bne _02088D42
	mov r0, #2
	pop {r3, pc}
_02088D42:
	mov r0, #4
	pop {r3, pc}
	.balign 4, 0
	thumb_func_end sub_02088D34

	thumb_func_start sub_02088D48
sub_02088D48: ; 0x02088D48
	push {r4, lr}
	ldr r1, _02088E58 ; =gMain
	add r4, r0, #0
	ldr r2, [r1, #0x48]
	mov r1, #0x40
	add r3, r2, #0
	tst r3, r1
	beq _02088D72
	sub r1, #0x41
	bl sub_0208A71C
	cmp r0, #1
	bne _02088D6E
	ldr r0, _02088E5C ; =0x000005DC
	bl PlaySE
	add r0, r4, #0
	bl sub_0208A79C
_02088D6E:
	mov r0, #5
	pop {r4, pc}
_02088D72:
	mov r1, #0x80
	tst r1, r2
	beq _02088D92
	mov r1, #1
	bl sub_0208A71C
	cmp r0, #1
	bne _02088D8E
	ldr r0, _02088E5C ; =0x000005DC
	bl PlaySE
	add r0, r4, #0
	bl sub_0208A79C
_02088D8E:
	mov r0, #5
	pop {r4, pc}
_02088D92:
	mov r0, #1
	tst r0, r2
	beq _02088DB4
	mov r0, #0x8b
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	ldrb r0, [r0, #0x12]
	cmp r0, #1
	beq _02088DB4
	ldr r0, _02088E60 ; =0x000005DD
	bl PlaySE
	add r0, r4, #0
	mov r1, #7
	bl sub_0208B08C
	pop {r4, pc}
_02088DB4:
	mov r0, #2
	tst r0, r2
	beq _02088DD4
	mov r0, #0x25
	lsl r0, r0, #6
	bl PlaySE
	add r0, r4, #0
	mov r1, #0
	bl sub_0208AFA0
	add r0, r4, #0
	mov r1, #4
	bl sub_0208B044
	pop {r4, pc}
_02088DD4:
	add r0, r4, #0
	bl sub_0208AE08
	cmp r0, #4
	bne _02088DFA
	mov r0, #0x8b
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	ldrb r0, [r0, #0x12]
	cmp r0, #1
	beq _02088E52
	ldr r0, _02088E60 ; =0x000005DD
	bl PlaySE
	add r0, r4, #0
	mov r1, #7
	bl sub_0208B08C
	pop {r4, pc}
_02088DFA:
	cmp r0, #5
	bne _02088E18
	mov r0, #0x25
	lsl r0, r0, #6
	bl PlaySE
	add r0, r4, #0
	mov r1, #0
	bl sub_0208AFA0
	add r0, r4, #0
	mov r1, #4
	bl sub_0208B044
	pop {r4, pc}
_02088E18:
	mov r1, #0
	mvn r1, r1
	cmp r0, r1
	beq _02088E52
	lsl r1, r0, #1
	add r2, r4, r1
	mov r1, #0x99
	lsl r1, r1, #2
	ldrh r1, [r2, r1]
	cmp r1, #0
	beq _02088E52
	ldr r3, _02088E64 ; =0x000007BD
	mov r2, #0xf
	ldrb r1, [r4, r3]
	lsl r0, r0, #0x18
	bic r1, r2
	lsr r2, r0, #0x18
	mov r0, #0xf
	and r0, r2
	orr r0, r1
	strb r0, [r4, r3]
	ldr r0, _02088E5C ; =0x000005DC
	bl PlaySE
	add r0, r4, #0
	bl sub_0208A79C
	mov r0, #5
	pop {r4, pc}
_02088E52:
	mov r0, #5
	pop {r4, pc}
	nop
_02088E58: .word gMain
_02088E5C: .word 0x000005DC
_02088E60: .word 0x000005DD
_02088E64: .word 0x000007BD
	thumb_func_end sub_02088D48

	thumb_func_start sub_02088E68
sub_02088E68: ; 0x02088E68
	push {r4, lr}
	add r4, r0, #0
	mov r1, #0
	bl sub_0208AFA0
	add r0, r4, #0
	bl sub_0208BC78
	ldr r2, _02088E94 ; =0x000007BD
	mov r1, #0xf0
	ldrb r3, [r4, r2]
	add r0, r3, #0
	bic r0, r1
	lsl r1, r3, #0x1c
	lsr r1, r1, #0x1c
	lsl r1, r1, #0x1c
	lsr r1, r1, #0x18
	orr r0, r1
	strb r0, [r4, r2]
	mov r0, #6
	pop {r4, pc}
	nop
_02088E94: .word 0x000007BD
	thumb_func_end sub_02088E68

	thumb_func_start sub_02088E98
sub_02088E98: ; 0x02088E98
	push {r3, r4, r5, lr}
	ldr r1, _02089014 ; =gMain
	add r5, r0, #0
	ldr r2, [r1, #0x48]
	mov r1, #0x40
	add r3, r2, #0
	tst r3, r1
	beq _02088EC2
	sub r1, #0x41
	bl sub_0208A71C
	cmp r0, #1
	bne _02088EBE
	ldr r0, _02089018 ; =0x000005DC
	bl PlaySE
	add r0, r5, #0
	bl sub_0208A79C
_02088EBE:
	mov r0, #6
	pop {r3, r4, r5, pc}
_02088EC2:
	mov r1, #0x80
	tst r1, r2
	beq _02088EE2
	mov r1, #1
	bl sub_0208A71C
	cmp r0, #1
	bne _02088EDE
	ldr r0, _02089018 ; =0x000005DC
	bl PlaySE
	add r0, r5, #0
	bl sub_0208A79C
_02088EDE:
	mov r0, #6
	pop {r3, r4, r5, pc}
_02088EE2:
	mov r1, #1
	add r3, r2, #0
	tst r3, r1
	beq _02088F3E
	bl sub_0208AFA0
	ldr r0, _0208901C ; =0x0000042C
	mov r1, #0
	ldr r0, [r5, r0]
	bl sub_02024830
	ldr r0, _02089020 ; =0x000007BD
	ldrb r0, [r5, r0]
	lsl r1, r0, #0x1c
	lsl r0, r0, #0x18
	lsr r1, r1, #0x1c
	lsr r0, r0, #0x1c
	cmp r1, r0
	beq _02088F34
	ldr r0, _02089024 ; =0x000005DD
	bl PlaySE
	add r0, r5, #0
	bl sub_0208A834
	ldr r1, _02089020 ; =0x000007BD
	add r0, r5, #0
	ldrb r2, [r5, r1]
	lsl r1, r2, #0x1c
	lsl r2, r2, #0x18
	lsr r1, r1, #0x1c
	lsr r2, r2, #0x1c
	bl sub_0208BB24
	add r0, r5, #0
	bl sub_0208DB64
	add r0, r5, #0
	bl sub_0208A79C
	b _02088F3A
_02088F34:
	ldr r0, _02089018 ; =0x000005DC
	bl PlaySE
_02088F3A:
	mov r0, #5
	pop {r3, r4, r5, pc}
_02088F3E:
	mov r1, #2
	tst r1, r2
	beq _02088F68
	mov r0, #0x25
	lsl r0, r0, #6
	bl PlaySE
	add r0, r5, #0
	mov r1, #1
	bl sub_0208AFA0
	ldr r0, _0208901C ; =0x0000042C
	mov r1, #0
	ldr r0, [r5, r0]
	bl sub_02024830
	add r0, r5, #0
	mov r1, #5
	bl sub_0208B044
	pop {r3, r4, r5, pc}
_02088F68:
	bl sub_0208ADDC
	add r4, r0, #0
	cmp r4, #4
	bne _02088F96
	mov r0, #0x25
	lsl r0, r0, #6
	bl PlaySE
	add r0, r5, #0
	mov r1, #1
	bl sub_0208AFA0
	ldr r0, _0208901C ; =0x0000042C
	mov r1, #0
	ldr r0, [r5, r0]
	bl sub_02024830
	add r0, r5, #0
	mov r1, #5
	bl sub_0208B044
	pop {r3, r4, r5, pc}
_02088F96:
	mov r0, #0
	mvn r0, r0
	cmp r4, r0
	beq _02089010
	lsl r0, r4, #1
	add r1, r5, r0
	mov r0, #0x99
	lsl r0, r0, #2
	ldrh r0, [r1, r0]
	cmp r0, #0
	beq _02089010
	add r0, r5, #0
	mov r1, #1
	bl sub_0208AFA0
	ldr r0, _0208901C ; =0x0000042C
	mov r1, #0
	ldr r0, [r5, r0]
	bl sub_02024830
	ldr r2, _02089020 ; =0x000007BD
	ldrb r0, [r5, r2]
	lsl r1, r0, #0x18
	lsr r1, r1, #0x1c
	cmp r4, r1
	beq _02089006
	mov r1, #0xf
	bic r0, r1
	lsl r1, r4, #0x18
	lsr r3, r1, #0x18
	mov r1, #0xf
	and r1, r3
	orr r0, r1
	strb r0, [r5, r2]
	ldr r0, _02089024 ; =0x000005DD
	bl PlaySE
	add r0, r5, #0
	bl sub_0208A834
	ldr r1, _02089020 ; =0x000007BD
	add r0, r5, #0
	ldrb r2, [r5, r1]
	lsl r1, r2, #0x1c
	lsl r2, r2, #0x18
	lsr r1, r1, #0x1c
	lsr r2, r2, #0x1c
	bl sub_0208BB24
	add r0, r5, #0
	bl sub_0208DB64
	add r0, r5, #0
	bl sub_0208A79C
	b _0208900C
_02089006:
	ldr r0, _02089018 ; =0x000005DC
	bl PlaySE
_0208900C:
	mov r0, #5
	pop {r3, r4, r5, pc}
_02089010:
	mov r0, #6
	pop {r3, r4, r5, pc}
	.balign 4, 0
_02089014: .word gMain
_02089018: .word 0x000005DC
_0208901C: .word 0x0000042C
_02089020: .word 0x000007BD
_02089024: .word 0x000005DD
	thumb_func_end sub_02088E98

	thumb_func_start sub_02089028
sub_02089028: ; 0x02089028
	push {r3, r4, r5, r6, r7, lr}
	ldr r1, _020891F4 ; =gMain
	add r5, r0, #0
	ldr r2, [r1, #0x48]
	mov r1, #0x40
	add r3, r2, #0
	tst r3, r1
	beq _02089052
	sub r1, #0x41
	bl sub_0208A71C
	cmp r0, #1
	bne _0208904E
	ldr r0, _020891F8 ; =0x000005DC
	bl PlaySE
	add r0, r5, #0
	bl sub_0208A79C
_0208904E:
	mov r0, #8
	pop {r3, r4, r5, r6, r7, pc}
_02089052:
	mov r1, #0x80
	tst r1, r2
	beq _02089072
	mov r1, #1
	bl sub_0208A71C
	cmp r0, #1
	bne _0208906E
	ldr r0, _020891F8 ; =0x000005DC
	bl PlaySE
	add r0, r5, #0
	bl sub_0208A79C
_0208906E:
	mov r0, #8
	pop {r3, r4, r5, r6, r7, pc}
_02089072:
	mov r1, #1
	tst r1, r2
	beq _020890D8
	ldr r0, _020891FC ; =0x000005DD
	bl PlaySE
	ldr r0, _02089200 ; =0x000007BD
	ldrb r0, [r5, r0]
	lsl r0, r0, #0x1c
	lsr r0, r0, #0x1c
	cmp r0, #4
	bne _0208909E
	mov r0, #0x8b
	lsl r0, r0, #2
	ldr r1, [r5, r0]
	mov r2, #4
	strb r2, [r1, #0x16]
	ldr r0, [r5, r0]
	mov r1, #0
	strb r1, [r0, #0x17]
	mov r0, #0x15
	pop {r3, r4, r5, r6, r7, pc}
_0208909E:
	lsl r0, r0, #1
	add r1, r5, r0
	mov r0, #0x99
	lsl r0, r0, #2
	ldrh r0, [r1, r0]
	bl sub_02078024
	cmp r0, #1
	bne _020890D0
	mov r0, #0x8b
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	ldrh r0, [r0, #0x18]
	cmp r0, #0
	beq _020890D0
	ldr r0, _02089204 ; =0x0000044C
	mov r1, #0
	ldr r0, [r5, r0]
	bl sub_0200DCE0
	add r0, r5, #0
	bl sub_0208DBF0
	mov r0, #8
	pop {r3, r4, r5, r6, r7, pc}
_020890D0:
	add r0, r5, #0
	bl sub_0208AED4
	pop {r3, r4, r5, r6, r7, pc}
_020890D8:
	mov r1, #2
	tst r1, r2
	beq _02089100
	mov r0, #0x25
	lsl r0, r0, #6
	bl PlaySE
	mov r0, #0x8b
	lsl r0, r0, #2
	ldr r1, [r5, r0]
	mov r2, #4
	strb r2, [r1, #0x16]
	ldr r0, [r5, r0]
	mov r1, #1
	strb r1, [r0, #0x17]
	add r0, r5, #0
	mov r1, #0x15
	bl sub_0208B044
	pop {r3, r4, r5, r6, r7, pc}
_02089100:
	bl sub_0208AE48
	add r4, r0, #0
	mov r0, #0
	mvn r0, r0
	cmp r4, r0
	beq _020891F0
	cmp r4, #4
	beq _02089118
	cmp r4, #5
	beq _02089140
	b _02089170
_02089118:
	mov r0, #0x8b
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	ldrh r0, [r0, #0x18]
	cmp r0, #0
	beq _020891F0
	ldr r0, _020891FC ; =0x000005DD
	bl PlaySE
	ldr r1, _02089200 ; =0x000007BD
	mov r0, #0xf
	ldrb r2, [r5, r1]
	bic r2, r0
	mov r0, #4
	orr r0, r2
	strb r0, [r5, r1]
	add r0, r5, #0
	bl sub_0208A79C
	b _020891F0
_02089140:
	mov r0, #0x25
	lsl r0, r0, #6
	bl PlaySE
	ldr r1, _02089200 ; =0x000007BD
	mov r0, #0xf
	ldrb r2, [r5, r1]
	bic r2, r0
	mov r0, #5
	orr r0, r2
	strb r0, [r5, r1]
	mov r0, #0x8b
	lsl r0, r0, #2
	ldr r1, [r5, r0]
	mov r2, #4
	strb r2, [r1, #0x16]
	ldr r0, [r5, r0]
	mov r1, #0
	strb r1, [r0, #0x17]
	add r0, r5, #0
	mov r1, #0x15
	bl sub_0208B044
	pop {r3, r4, r5, r6, r7, pc}
_02089170:
	mov r0, #0x99
	lsl r0, r0, #2
	add r6, r5, r0
	lsl r7, r4, #1
	ldrh r0, [r6, r7]
	bl sub_02078024
	cmp r0, #1
	bne _020891C2
	mov r0, #0x8b
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	ldrh r0, [r0, #0x18]
	cmp r0, #0
	beq _020891C2
	ldr r0, _020891FC ; =0x000005DD
	bl PlaySE
	ldr r2, _02089200 ; =0x000007BD
	mov r1, #0xf
	ldrb r0, [r5, r2]
	bic r0, r1
	lsl r1, r4, #0x18
	lsr r3, r1, #0x18
	mov r1, #0xf
	and r1, r3
	orr r0, r1
	strb r0, [r5, r2]
	ldr r0, _02089204 ; =0x0000044C
	mov r1, #0
	ldr r0, [r5, r0]
	bl sub_0200DCE0
	add r0, r5, #0
	bl sub_0208BBDC
	add r0, r5, #0
	bl sub_0208DBF0
	mov r0, #8
	pop {r3, r4, r5, r6, r7, pc}
_020891C2:
	ldrh r0, [r6, r7]
	cmp r0, #0
	beq _020891F0
	ldr r0, _020891FC ; =0x000005DD
	bl PlaySE
	ldr r2, _02089200 ; =0x000007BD
	mov r1, #0xf
	ldrb r0, [r5, r2]
	bic r0, r1
	lsl r1, r4, #0x18
	lsr r3, r1, #0x18
	mov r1, #0xf
	and r1, r3
	orr r0, r1
	strb r0, [r5, r2]
	add r0, r5, #0
	bl sub_0208A79C
	add r0, r5, #0
	bl sub_0208AED4
	pop {r3, r4, r5, r6, r7, pc}
_020891F0:
	mov r0, #8
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_020891F4: .word gMain
_020891F8: .word 0x000005DC
_020891FC: .word 0x000005DD
_02089200: .word 0x000007BD
_02089204: .word 0x0000044C
	thumb_func_end sub_02089028

	thumb_func_start sub_02089208
sub_02089208: ; 0x02089208
	push {r4, lr}
	ldr r1, _020892E0 ; =gMain
	add r4, r0, #0
	ldr r2, [r1, #0x48]
	mov r1, #1
	tst r1, r2
	beq _0208923C
	ldr r0, _020892E4 ; =0x000005DD
	bl PlaySE
	ldr r0, _020892E8 ; =0x000007BD
	ldrb r0, [r4, r0]
	lsl r0, r0, #0x1c
	lsr r2, r0, #0x1c
	mov r0, #0x8b
	lsl r0, r0, #2
	ldr r1, [r4, r0]
	strb r2, [r1, #0x16]
	ldr r0, [r4, r0]
	mov r1, #0
	strb r1, [r0, #0x17]
	add r0, r4, #0
	mov r1, #0x15
	bl sub_0208B068
	pop {r4, pc}
_0208923C:
	mov r1, #2
	tst r1, r2
	beq _02089270
	mov r0, #0x25
	lsl r0, r0, #6
	bl PlaySE
	ldr r0, _020892EC ; =0x00000428
	mov r1, #0
	ldr r0, [r4, r0]
	bl sub_020248F0
	ldr r0, _020892F0 ; =0x0000042C
	mov r1, #0
	ldr r0, [r4, r0]
	bl sub_02024830
	add r0, r4, #0
	mov r1, #0
	bl sub_0208AF08
	add r0, r4, #0
	mov r1, #8
	bl sub_0208B044
	pop {r4, pc}
_02089270:
	bl sub_0208AE88
	mov r1, #0
	mvn r1, r1
	cmp r0, r1
	beq _020892DA
	cmp r0, #0
	beq _02089286
	cmp r0, #1
	beq _020892AC
	b _020892DA
_02089286:
	ldr r0, _020892E4 ; =0x000005DD
	bl PlaySE
	ldr r0, _020892E8 ; =0x000007BD
	ldrb r0, [r4, r0]
	lsl r0, r0, #0x1c
	lsr r2, r0, #0x1c
	mov r0, #0x8b
	lsl r0, r0, #2
	ldr r1, [r4, r0]
	strb r2, [r1, #0x16]
	ldr r0, [r4, r0]
	mov r1, #0
	strb r1, [r0, #0x17]
	add r0, r4, #0
	mov r1, #0x15
	bl sub_0208B068
	pop {r4, pc}
_020892AC:
	mov r0, #0x25
	lsl r0, r0, #6
	bl PlaySE
	ldr r0, _020892EC ; =0x00000428
	mov r1, #0
	ldr r0, [r4, r0]
	bl sub_020248F0
	ldr r0, _020892F0 ; =0x0000042C
	mov r1, #0
	ldr r0, [r4, r0]
	bl sub_02024830
	add r0, r4, #0
	mov r1, #0
	bl sub_0208AF08
	add r0, r4, #0
	mov r1, #8
	bl sub_0208B044
	pop {r4, pc}
_020892DA:
	mov r0, #9
	pop {r4, pc}
	nop
_020892E0: .word gMain
_020892E4: .word 0x000005DD
_020892E8: .word 0x000007BD
_020892EC: .word 0x00000428
_020892F0: .word 0x0000042C
	thumb_func_end sub_02089208

	thumb_func_start sub_020892F4
sub_020892F4: ; 0x020892F4
	push {r3, lr}
	bl sub_0208A9C4
	cmp r0, #1
	bne _02089302
	mov r0, #0xc
	pop {r3, pc}
_02089302:
	mov r0, #0xa
	pop {r3, pc}
	.balign 4, 0
	thumb_func_end sub_020892F4

	thumb_func_start sub_02089308
sub_02089308: ; 0x02089308
	push {r3, lr}
	bl sub_0208AA9C
	cmp r0, #1
	bne _02089316
	mov r0, #2
	pop {r3, pc}
_02089316:
	mov r0, #0xb
	pop {r3, pc}
	.balign 4, 0
	thumb_func_end sub_02089308

	thumb_func_start sub_0208931C
sub_0208931C: ; 0x0208931C
	push {r3, r4, r5, lr}
	ldr r3, _02089418 ; =gMain
	mov r1, #0x20
	ldr r2, [r3, #0x4c]
	add r4, r0, #0
	add r5, r2, #0
	tst r5, r1
	beq _02089336
	sub r1, #0x21
	bl sub_0208AB58
	mov r0, #0xc
	pop {r3, r4, r5, pc}
_02089336:
	mov r1, #0x10
	tst r1, r2
	beq _02089346
	mov r1, #1
	bl sub_0208AB58
	mov r0, #0xc
	pop {r3, r4, r5, pc}
_02089346:
	mov r1, #0x40
	add r5, r2, #0
	tst r5, r1
	beq _02089358
	sub r1, #0x43
	bl sub_0208AB58
	mov r0, #0xc
	pop {r3, r4, r5, pc}
_02089358:
	mov r1, #0x80
	tst r1, r2
	beq _02089368
	mov r1, #3
	bl sub_0208AB58
	mov r0, #0xc
	pop {r3, r4, r5, pc}
_02089368:
	ldr r2, [r3, #0x48]
	mov r1, #3
	tst r1, r2
	beq _02089382
	mov r0, #0x25
	lsl r0, r0, #6
	bl PlaySE
	add r0, r4, #0
	mov r1, #0xb
	bl sub_0208B0F4
	pop {r3, r4, r5, pc}
_02089382:
	bl sub_0208AEC4
	mov r1, #0
	mvn r1, r1
	cmp r0, r1
	bgt _02089392
	beq _02089414
	b _020893F8
_02089392:
	cmp r0, #0xb
	bgt _020893F8
	cmp r0, #9
	blt _020893F8
	beq _020893A6
	cmp r0, #0xa
	beq _020893C6
	cmp r0, #0xb
	beq _020893E6
	b _020893F8
_020893A6:
	ldr r0, _0208941C ; =0x00000504
	ldr r0, [r4, r0]
	bl sub_020248B8
	cmp r0, #1
	bne _02089414
	ldr r0, _02089420 ; =0x000005DC
	bl PlaySE
	ldr r0, _0208941C ; =0x00000504
	mov r1, #2
	ldr r0, [r4, r0]
	bl sub_020248F0
	mov r0, #0xd
	pop {r3, r4, r5, pc}
_020893C6:
	ldr r0, _02089424 ; =0x00000508
	ldr r0, [r4, r0]
	bl sub_020248B8
	cmp r0, #1
	bne _02089414
	ldr r0, _02089420 ; =0x000005DC
	bl PlaySE
	ldr r0, _02089424 ; =0x00000508
	mov r1, #3
	ldr r0, [r4, r0]
	bl sub_020248F0
	mov r0, #0xe
	pop {r3, r4, r5, pc}
_020893E6:
	mov r0, #0x25
	lsl r0, r0, #6
	bl PlaySE
	add r0, r4, #0
	mov r1, #0xb
	bl sub_0208B0F4
	pop {r3, r4, r5, pc}
_020893F8:
	ldr r1, _02089428 ; =0x000007C4
	ldrb r2, [r4, r1]
	cmp r2, r0
	beq _02089410
	strb r0, [r4, r1]
	ldr r0, _02089420 ; =0x000005DC
	bl PlaySE
	add r0, r4, #0
	mov r1, #0
	bl sub_0208AB58
_02089410:
	mov r0, #0xc
	pop {r3, r4, r5, pc}
_02089414:
	mov r0, #0xc
	pop {r3, r4, r5, pc}
	.balign 4, 0
_02089418: .word gMain
_0208941C: .word 0x00000504
_02089420: .word 0x000005DC
_02089424: .word 0x00000508
_02089428: .word 0x000007C4
	thumb_func_end sub_0208931C

	thumb_func_start sub_0208942C
sub_0208942C: ; 0x0208942C
	push {r4, lr}
	add r4, r0, #0
	ldr r0, _02089450 ; =0x00000504
	ldr r0, [r4, r0]
	bl sub_02024B68
	cmp r0, #0
	bne _0208944A
	mov r1, #8
	add r0, r4, #0
	mvn r1, r1
	bl sub_0208AB58
	mov r0, #0xc
	pop {r4, pc}
_0208944A:
	mov r0, #0xd
	pop {r4, pc}
	nop
_02089450: .word 0x00000504
	thumb_func_end sub_0208942C

	thumb_func_start sub_02089454
sub_02089454: ; 0x02089454
	push {r4, lr}
	add r4, r0, #0
	ldr r0, _02089474 ; =0x00000508
	ldr r0, [r4, r0]
	bl sub_02024B68
	cmp r0, #0
	bne _02089470
	add r0, r4, #0
	mov r1, #9
	bl sub_0208AB58
	mov r0, #0xc
	pop {r4, pc}
_02089470:
	mov r0, #0xe
	pop {r4, pc}
	.balign 4, 0
_02089474: .word 0x00000508
	thumb_func_end sub_02089454

	thumb_func_start sub_02089478
sub_02089478: ; 0x02089478
	push {r4, r5, r6, lr}
	sub sp, #8
	ldr r1, _020895E8 ; =gMain
	add r5, r0, #0
	ldr r2, [r1, #0x48]
	mov r1, #3
	tst r1, r2
	bne _0208948A
	b _020895E0
_0208948A:
	mov r1, #0x8b
	lsl r1, r1, #2
	ldr r1, [r5, r1]
	ldrb r1, [r1, #0x11]
	cmp r1, #2
	bne _020894AE
	bl sub_0208A520
	add r6, r0, #0
	mov r0, #0x13
	bl AllocMonZeroed
	add r4, r0, #0
	add r0, r6, #0
	add r1, r4, #0
	bl CopyBoxPokemonToPokemon
	b _020894B4
_020894AE:
	bl sub_0208A520
	add r4, r0, #0
_020894B4:
	ldr r0, _020895EC ; =0x000007BE
	mov r2, #0
	strb r2, [r5, r0]
	ldr r0, _020895F0 ; =0x00000275
	mov r1, #0x13
	ldrb r6, [r5, r0]
	add r0, r4, #0
	bl GetMonData
	ldr r1, _020895F0 ; =0x00000275
	strb r0, [r5, r1]
	ldrb r0, [r5, r1]
	cmp r6, r0
	beq _020894DA
	ldr r1, _020895EC ; =0x000007BE
	mov r0, #1
	ldrb r2, [r5, r1]
	orr r0, r2
	strb r0, [r5, r1]
_020894DA:
	ldr r0, _020895F4 ; =0x00000276
	mov r1, #0x14
	ldrb r6, [r5, r0]
	add r0, r4, #0
	mov r2, #0
	bl GetMonData
	ldr r1, _020895F4 ; =0x00000276
	strb r0, [r5, r1]
	ldrb r0, [r5, r1]
	cmp r6, r0
	beq _020894FC
	ldr r1, _020895EC ; =0x000007BE
	mov r0, #2
	ldrb r2, [r5, r1]
	orr r0, r2
	strb r0, [r5, r1]
_020894FC:
	ldr r0, _020895F8 ; =0x00000277
	mov r1, #0x15
	ldrb r6, [r5, r0]
	add r0, r4, #0
	mov r2, #0
	bl GetMonData
	ldr r1, _020895F8 ; =0x00000277
	strb r0, [r5, r1]
	ldrb r0, [r5, r1]
	cmp r6, r0
	beq _0208951E
	ldr r1, _020895EC ; =0x000007BE
	mov r0, #4
	ldrb r2, [r5, r1]
	orr r0, r2
	strb r0, [r5, r1]
_0208951E:
	mov r0, #0x9e
	lsl r0, r0, #2
	ldrb r6, [r5, r0]
	add r0, r4, #0
	mov r1, #0x16
	mov r2, #0
	bl GetMonData
	mov r1, #0x9e
	lsl r1, r1, #2
	strb r0, [r5, r1]
	ldrb r0, [r5, r1]
	cmp r6, r0
	beq _02089544
	ldr r1, _020895EC ; =0x000007BE
	mov r0, #8
	ldrb r2, [r5, r1]
	orr r0, r2
	strb r0, [r5, r1]
_02089544:
	ldr r0, _020895FC ; =0x00000279
	mov r1, #0x17
	ldrb r6, [r5, r0]
	add r0, r4, #0
	mov r2, #0
	bl GetMonData
	ldr r1, _020895FC ; =0x00000279
	strb r0, [r5, r1]
	ldrb r0, [r5, r1]
	cmp r6, r0
	beq _02089566
	ldr r1, _020895EC ; =0x000007BE
	mov r0, #0x10
	ldrb r2, [r5, r1]
	orr r0, r2
	strb r0, [r5, r1]
_02089566:
	add r0, r4, #0
	mov r1, #0x18
	mov r2, #0
	bl GetMonData
	ldr r1, _02089600 ; =0x0000027A
	strb r0, [r5, r1]
	sub r1, #0x4e
	ldr r0, [r5, r1]
	ldrb r0, [r0, #0x11]
	cmp r0, #2
	bne _02089584
	add r0, r4, #0
	bl FreeToHeap
_02089584:
	mov r1, #7
	mov r0, #0
	lsl r1, r1, #6
	mov r2, #0x13
	bl sub_0200304C
	mov r0, #0x8b
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	ldr r0, [r0, #4]
	bl sub_0202ADCC
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	str r0, [sp]
	mov r0, #0x13
	str r0, [sp, #4]
	ldr r0, [r5]
	ldr r2, _02089604 ; =0x000003E2
	mov r1, #1
	mov r3, #0xd
	bl sub_0200E644
	ldr r0, _020895EC ; =0x000007BE
	ldrb r0, [r5, r0]
	cmp r0, #0
	bne _020895C8
	add r0, r5, #0
	mov r1, #0xfe
	bl sub_0208DDA0
	add sp, #8
	mov r0, #0x12
	pop {r4, r5, r6, pc}
_020895C8:
	add r0, r5, #0
	bl sub_0208E174
	add r0, r5, #0
	bl sub_0208BCD4
	add r0, r5, #0
	bl sub_0208BDC8
	add sp, #8
	mov r0, #0x11
	pop {r4, r5, r6, pc}
_020895E0:
	mov r0, #0x10
	add sp, #8
	pop {r4, r5, r6, pc}
	nop
_020895E8: .word gMain
_020895EC: .word 0x000007BE
_020895F0: .word 0x00000275
_020895F4: .word 0x00000276
_020895F8: .word 0x00000277
_020895FC: .word 0x00000279
_02089600: .word 0x0000027A
_02089604: .word 0x000003E2
	thumb_func_end sub_02089478

	thumb_func_start sub_02089608
sub_02089608: ; 0x02089608
	push {r3, r4, r5, lr}
	add r5, r0, #0
	ldr r0, _02089650 ; =gMain
	ldr r1, [r0, #0x48]
	mov r0, #3
	tst r0, r1
	beq _0208964A
	ldr r0, _02089654 ; =0x000007BE
	mov r1, #0
	ldrb r2, [r5, r0]
	mov r0, #1
_0208961E:
	add r4, r0, #0
	lsl r4, r1
	add r3, r2, #0
	tst r3, r4
	beq _02089640
	add r0, r5, #0
	bl sub_0208DDA0
	ldr r0, _02089654 ; =0x000007BE
	ldrb r1, [r5, r0]
	eor r1, r4
	strb r1, [r5, r0]
	ldrb r0, [r5, r0]
	cmp r0, #0
	bne _0208964A
	mov r0, #0x12
	pop {r3, r4, r5, pc}
_02089640:
	add r1, r1, #1
	lsl r1, r1, #0x18
	lsr r1, r1, #0x18
	cmp r1, #5
	blo _0208961E
_0208964A:
	mov r0, #0x11
	pop {r3, r4, r5, pc}
	nop
_02089650: .word gMain
_02089654: .word 0x000007BE
	thumb_func_end sub_02089608

	thumb_func_start sub_02089658
sub_02089658: ; 0x02089658
	ldr r0, _0208966C ; =gMain
	ldr r1, [r0, #0x48]
	mov r0, #3
	tst r0, r1
	beq _02089666
	mov r0, #0x15
	bx lr
_02089666:
	mov r0, #0x12
	bx lr
	nop
_0208966C: .word gMain
	thumb_func_end sub_02089658

	thumb_func_start sub_02089670
sub_02089670: ; 0x02089670
	push {r3, lr}
	mov r0, #1
	mov r1, #0x13
	bl sub_020880CC
	mov r0, #0x16
	pop {r3, pc}
	.balign 4, 0
	thumb_func_end sub_02089670

	thumb_func_start sub_02089680
sub_02089680: ; 0x02089680
	push {r3, lr}
	bl sub_0200FB5C
	cmp r0, #1
	bne _0208968E
	mov r0, #1
	b _02089690
_0208968E:
	mov r0, #0
_02089690:
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	pop {r3, pc}
	.balign 4, 0
	thumb_func_end sub_02089680

	thumb_func_start sub_02089698
sub_02089698: ; 0x02089698
	push {r3, r4, lr}
	sub sp, #0xc
	ldr r3, _02089788 ; =0x000007BE
	add r4, r0, #0
	ldrb r0, [r4, r3]
	cmp r0, #0
	beq _020896B0
	cmp r0, #1
	beq _020896F6
	cmp r0, #2
	beq _0208975E
	b _02089782
_020896B0:
	add r0, r3, #0
	add r0, #0xc
	ldrb r0, [r4, r0]
	add r1, r3, #0
	add r2, r3, #0
	str r0, [sp]
	add r0, r3, #0
	add r0, #0xd
	ldrb r0, [r4, r0]
	add r1, #0xf
	add r2, #0xa
	str r0, [sp, #4]
	add r0, r3, #0
	add r0, #0xe
	ldrb r0, [r4, r0]
	add r3, #0xb
	lsl r0, r0, #0x1c
	lsr r0, r0, #0x1c
	str r0, [sp, #8]
	ldrb r1, [r4, r1]
	ldrb r2, [r4, r2]
	ldrb r3, [r4, r3]
	ldr r0, [r4]
	bl sub_0201CA4C
	ldr r1, _0208978C ; =0x000007CD
	ldr r0, [r4]
	ldrb r1, [r4, r1]
	bl ScheduleBgTilemapBufferTransfer
	ldr r0, _02089788 ; =0x000007BE
	ldrb r1, [r4, r0]
	add r1, r1, #1
	strb r1, [r4, r0]
	b _02089782
_020896F6:
	add r0, r3, #0
	add r0, #0x10
	ldrb r0, [r4, r0]
	add r1, r0, #1
	add r0, r3, #0
	add r0, #0x10
	strb r1, [r4, r0]
	add r0, r3, #0
	add r0, #0x10
	ldrb r0, [r4, r0]
	cmp r0, #4
	bne _02089782
	add r0, r3, #0
	add r0, #0xc
	ldrb r0, [r4, r0]
	add r1, r3, #0
	add r2, r3, #0
	str r0, [sp]
	add r0, r3, #0
	add r0, #0xd
	ldrb r0, [r4, r0]
	add r1, #0xf
	add r2, #0xa
	str r0, [sp, #4]
	add r0, r3, #0
	add r0, #0xe
	ldrb r0, [r4, r0]
	add r3, #0xb
	lsl r0, r0, #0x18
	lsr r0, r0, #0x1c
	str r0, [sp, #8]
	ldrb r1, [r4, r1]
	ldrb r2, [r4, r2]
	ldrb r3, [r4, r3]
	ldr r0, [r4]
	bl sub_0201CA4C
	ldr r1, _0208978C ; =0x000007CD
	ldr r0, [r4]
	ldrb r1, [r4, r1]
	bl ScheduleBgTilemapBufferTransfer
	ldr r1, _02089790 ; =0x000007CE
	mov r0, #0
	strb r0, [r4, r1]
	add r0, r1, #0
	sub r0, #0x10
	ldrb r0, [r4, r0]
	sub r1, #0x10
	add r0, r0, #1
	strb r0, [r4, r1]
	b _02089782
_0208975E:
	add r0, r3, #0
	add r0, #0x10
	ldrb r0, [r4, r0]
	add r1, r0, #1
	add r0, r3, #0
	add r0, #0x10
	strb r1, [r4, r0]
	add r0, r3, #0
	add r0, #0x10
	ldrb r0, [r4, r0]
	cmp r0, #2
	bne _02089782
	mov r0, #0
	strb r0, [r4, r3]
	add r3, #0x11
	add sp, #0xc
	ldrb r0, [r4, r3]
	pop {r3, r4, pc}
_02089782:
	mov r0, #0xf
	add sp, #0xc
	pop {r3, r4, pc}
	.balign 4, 0
_02089788: .word 0x000007BE
_0208978C: .word 0x000007CD
_02089790: .word 0x000007CE
	thumb_func_end sub_02089698

	thumb_func_start sub_02089794
sub_02089794: ; 0x02089794
	push {r4, lr}
	ldr r1, _020897BC ; =0x000007C9
	add r4, r0, #0
	ldrb r1, [r4, r1]
	cmp r1, #5
	bne _020897AA
	mov r1, #0
	mvn r1, r1
	bl sub_0208A2C0
	b _020897B0
_020897AA:
	mov r1, #1
	bl sub_0208A2C0
_020897B0:
	add r0, r4, #0
	bl sub_0208B118
	mov r0, #0x13
	pop {r4, pc}
	nop
_020897BC: .word 0x000007C9
	thumb_func_end sub_02089794

	thumb_func_start sub_020897C0
sub_020897C0: ; 0x020897C0
	push {r4, lr}
	add r4, r0, #0
	bl sub_0208A520
	mov r2, #0x8b
	lsl r2, r2, #2
	add r1, r0, #0
	ldr r0, [r4, r2]
	ldrb r0, [r0, #0x11]
	cmp r0, #2
	bne _020897E2
	add r2, r2, #4
	add r0, r4, #0
	add r2, r4, r2
	bl sub_020897F0
	pop {r4, pc}
_020897E2:
	add r2, r2, #4
	add r0, r4, #0
	add r2, r4, r2
	bl sub_0208981C
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_020897C0

	thumb_func_start sub_020897F0
sub_020897F0: ; 0x020897F0
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	mov r0, #0x13
	add r6, r1, #0
	add r7, r2, #0
	bl AllocMonZeroed
	add r4, r0, #0
	add r0, r6, #0
	add r1, r4, #0
	bl CopyBoxPokemonToPokemon
	add r0, r5, #0
	add r1, r4, #0
	add r2, r7, #0
	bl sub_0208981C
	add r0, r4, #0
	bl FreeToHeap
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_020897F0

	thumb_func_start sub_0208981C
sub_0208981C: ; 0x0208981C
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #8
	add r5, r1, #0
	add r7, r0, #0
	add r0, r5, #0
	add r4, r2, #0
	bl sub_0206DD40
	str r0, [sp, #4]
	add r0, r5, #0
	mov r1, #5
	mov r2, #0
	bl GetMonData
	strh r0, [r4, #0xc]
	add r0, r5, #0
	bl sub_02070DB0
	mov r2, #0x7a
	lsl r2, r2, #4
	add r6, r0, #0
	ldr r0, [r7, r2]
	add r2, #0xc
	ldr r2, [r7, r2]
	mov r1, #0xb
	bl ReadMsgDataIntoString
	ldr r0, _02089BC0 ; =0x000007A8
	mov r1, #0
	ldr r0, [r7, r0]
	add r2, r6, #0
	bl BufferBoxMonSpeciesName
	ldr r2, _02089BC0 ; =0x000007A8
	mov r1, #0x23
	ldr r0, [r7, r2]
	lsl r1, r1, #4
	add r2, r2, #4
	ldr r1, [r7, r1]
	ldr r2, [r7, r2]
	bl StringExpandPlaceholders
	mov r2, #0x7a
	lsl r2, r2, #4
	ldr r0, [r7, r2]
	add r2, #0xc
	ldr r2, [r7, r2]
	mov r1, #0
	bl ReadMsgDataIntoString
	ldr r0, _02089BC0 ; =0x000007A8
	mov r1, #0
	ldr r0, [r7, r0]
	add r2, r6, #0
	bl BufferBoxMonNickname
	ldr r2, _02089BC0 ; =0x000007A8
	mov r1, #0x8d
	ldr r0, [r7, r2]
	lsl r1, r1, #2
	add r2, r2, #4
	ldr r1, [r7, r1]
	ldr r2, [r7, r2]
	bl StringExpandPlaceholders
	mov r2, #0x7a
	lsl r2, r2, #4
	ldr r0, [r7, r2]
	add r2, #0xc
	ldr r2, [r7, r2]
	mov r1, #0xe
	bl ReadMsgDataIntoString
	ldr r0, _02089BC0 ; =0x000007A8
	mov r1, #0
	ldr r0, [r7, r0]
	add r2, r6, #0
	bl BufferBoxMonOTName
	ldr r2, _02089BC0 ; =0x000007A8
	mov r1, #0x8e
	ldr r0, [r7, r2]
	lsl r1, r1, #2
	add r2, r2, #4
	ldr r1, [r7, r1]
	ldr r2, [r7, r2]
	bl StringExpandPlaceholders
	add r0, r5, #0
	mov r1, #6
	mov r2, #0
	bl GetMonData
	strh r0, [r4, #0xe]
	add r0, r5, #0
	mov r1, #0xa1
	mov r2, #0
	bl GetMonData
	ldrb r1, [r4, #0x12]
	mov r2, #0x7f
	lsl r0, r0, #0x18
	bic r1, r2
	lsr r2, r0, #0x18
	mov r0, #0x7f
	and r0, r2
	orr r0, r1
	strb r0, [r4, #0x12]
	add r0, r5, #0
	mov r1, #0x4c
	mov r2, #0
	bl GetMonData
	lsl r0, r0, #0x1f
	ldr r2, [r4, #0x50]
	ldr r1, _02089BC4 ; =0xEFFFFFFF
	lsr r0, r0, #3
	and r1, r2
	orr r0, r1
	str r0, [r4, #0x50]
	add r0, r5, #0
	mov r1, #0xb0
	mov r2, #0
	bl GetMonData
	cmp r0, #1
	bne _0208992C
	ldr r0, [r4, #0x50]
	lsl r0, r0, #3
	lsr r0, r0, #0x1f
	bne _0208992C
	ldrb r1, [r4, #0x12]
	mov r0, #0x80
	bic r1, r0
	strb r1, [r4, #0x12]
	b _02089934
_0208992C:
	ldrb r1, [r4, #0x12]
	mov r0, #0x80
	orr r0, r1
	strb r0, [r4, #0x12]
_02089934:
	add r0, r5, #0
	bl sub_0206FF88
	ldrb r1, [r4, #0x13]
	mov r2, #3
	bic r1, r2
	mov r2, #3
	and r0, r2
	orr r0, r1
	strb r0, [r4, #0x13]
	add r0, r5, #0
	mov r1, #0x9b
	mov r2, #0
	bl GetMonData
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	lsl r0, r0, #0x1a
	ldrb r1, [r4, #0x13]
	mov r2, #0xfc
	lsr r0, r0, #0x18
	bic r1, r2
	orr r0, r1
	strb r0, [r4, #0x13]
	add r0, r5, #0
	mov r1, #0xb1
	mov r2, #0
	bl GetMonData
	strb r0, [r4, #0x10]
	add r0, r5, #0
	mov r1, #0xb2
	mov r2, #0
	bl GetMonData
	strb r0, [r4, #0x11]
	add r0, r5, #0
	mov r1, #7
	mov r2, #0
	bl GetMonData
	str r0, [r4, #0x14]
	add r0, r5, #0
	mov r1, #8
	mov r2, #0
	bl GetMonData
	str r0, [r4, #0x18]
	add r0, r5, #0
	mov r1, #0x9d
	mov r2, #0
	bl GetMonData
	add r1, r4, #0
	add r1, #0x44
	strb r0, [r1]
	ldrb r1, [r4, #0x12]
	ldrh r0, [r4, #0xc]
	lsl r1, r1, #0x19
	lsr r1, r1, #0x19
	bl sub_0206FD00
	str r0, [r4, #0x1c]
	ldrb r0, [r4, #0x12]
	lsl r0, r0, #0x19
	lsr r1, r0, #0x19
	cmp r1, #0x64
	bne _020899C0
	ldr r0, [r4, #0x1c]
	b _020899C8
_020899C0:
	ldrh r0, [r4, #0xc]
	add r1, r1, #1
	bl sub_0206FD00
_020899C8:
	str r0, [r4, #0x20]
	add r0, r5, #0
	mov r1, #0xa3
	mov r2, #0
	bl GetMonData
	strh r0, [r4, #0x24]
	add r0, r5, #0
	mov r1, #0xa4
	mov r2, #0
	bl GetMonData
	strh r0, [r4, #0x26]
	add r0, r5, #0
	mov r1, #0xa5
	mov r2, #0
	bl GetMonData
	strh r0, [r4, #0x28]
	add r0, r5, #0
	mov r1, #0xa6
	mov r2, #0
	bl GetMonData
	strh r0, [r4, #0x2a]
	add r0, r5, #0
	mov r1, #0xa8
	mov r2, #0
	bl GetMonData
	strh r0, [r4, #0x2c]
	add r0, r5, #0
	mov r1, #0xa9
	mov r2, #0
	bl GetMonData
	strh r0, [r4, #0x2e]
	add r0, r5, #0
	mov r1, #0xa7
	mov r2, #0
	bl GetMonData
	strh r0, [r4, #0x30]
	add r0, r5, #0
	mov r1, #0xa
	mov r2, #0
	bl GetMonData
	add r1, r4, #0
	add r1, #0x32
	strb r0, [r1]
	add r0, r5, #0
	bl sub_0206FDFC
	add r1, r4, #0
	add r1, #0x33
	strb r0, [r1]
	mov r6, #0
_02089A3C:
	lsl r0, r6, #1
	add r0, r4, r0
	add r1, r6, #0
	str r0, [sp]
	add r0, r5, #0
	add r1, #0x36
	mov r2, #0
	bl GetMonData
	ldr r1, [sp]
	mov r2, #0
	strh r0, [r1, #0x34]
	add r1, r6, #0
	add r0, r5, #0
	add r1, #0x3a
	bl GetMonData
	add r1, r4, r6
	add r1, #0x3c
	strb r0, [r1]
	add r1, r6, #0
	add r0, r5, #0
	add r1, #0x3e
	mov r2, #0
	bl GetMonData
	lsl r0, r0, #0x18
	lsr r1, r0, #0x18
	ldr r0, [sp]
	ldrh r0, [r0, #0x34]
	bl sub_0207332C
	add r1, r4, r6
	add r1, #0x40
	strb r0, [r1]
	add r0, r6, #1
	lsl r0, r0, #0x10
	lsr r6, r0, #0x10
	cmp r6, #4
	blo _02089A3C
	add r0, r5, #0
	mov r1, #0x13
	mov r2, #0
	bl GetMonData
	add r1, r4, #0
	add r1, #0x45
	strb r0, [r1]
	add r0, r5, #0
	mov r1, #0x14
	mov r2, #0
	bl GetMonData
	add r1, r4, #0
	add r1, #0x46
	strb r0, [r1]
	add r0, r5, #0
	mov r1, #0x15
	mov r2, #0
	bl GetMonData
	add r1, r4, #0
	add r1, #0x47
	strb r0, [r1]
	add r0, r5, #0
	mov r1, #0x16
	mov r2, #0
	bl GetMonData
	add r1, r4, #0
	add r1, #0x48
	strb r0, [r1]
	add r0, r5, #0
	mov r1, #0x17
	mov r2, #0
	bl GetMonData
	add r1, r4, #0
	add r1, #0x49
	strb r0, [r1]
	add r0, r5, #0
	mov r1, #0x18
	mov r2, #0
	bl GetMonData
	add r1, r4, #0
	add r1, #0x4a
	strb r0, [r1]
	add r0, r4, #0
	mov r1, #5
	add r0, #0x4b
	strb r1, [r0]
	mov r6, #0
_02089AF6:
	add r0, r5, #0
	add r1, r6, #0
	bl sub_020718CC
	cmp r0, #1
	bne _02089B0A
	add r0, r4, #0
	add r0, #0x4b
	strb r6, [r0]
	b _02089B14
_02089B0A:
	add r0, r6, #1
	lsl r0, r0, #0x10
	lsr r6, r0, #0x10
	cmp r6, #5
	blo _02089AF6
_02089B14:
	add r0, r5, #0
	mov r1, #0xb
	mov r2, #0
	bl GetMonData
	add r1, r4, #0
	add r1, #0x4c
	strh r0, [r1]
	add r0, r5, #0
	mov r1, #0x70
	mov r2, #0
	bl GetMonData
	add r1, r4, #0
	add r1, #0x4e
	strh r0, [r1]
	add r0, r5, #0
	bl sub_0208AD64
	mov r1, #0xf
	ldr r2, [r4, #0x50]
	lsl r1, r1, #0x1c
	and r2, r1
	ldr r1, _02089BC8 ; =0x0FFFFFFF
	and r0, r1
	orr r0, r2
	str r0, [r4, #0x50]
	add r0, r5, #0
	bl sub_02071B98
	cmp r0, #1
	bne _02089B64
	ldr r1, [r4, #0x50]
	ldr r0, _02089BCC ; =0x3FFFFFFF
	and r1, r0
	mov r0, #2
	lsl r0, r0, #0x1e
	orr r0, r1
	str r0, [r4, #0x50]
	b _02089B9A
_02089B64:
	add r0, r5, #0
	bl sub_02071B78
	cmp r0, #1
	bne _02089B92
	ldr r2, [r4, #0x50]
	ldr r1, _02089BCC ; =0x3FFFFFFF
	add r0, r4, #0
	and r2, r1
	add r1, r1, #1
	orr r1, r2
	str r1, [r4, #0x50]
	lsl r1, r1, #4
	lsr r1, r1, #4
	add r0, #0x50
	cmp r1, #7
	bne _02089B9A
	mov r1, #0xf
	ldr r2, [r0]
	lsl r1, r1, #0x1c
	and r1, r2
	str r1, [r0]
	b _02089B9A
_02089B92:
	ldr r1, [r4, #0x50]
	ldr r0, _02089BCC ; =0x3FFFFFFF
	and r0, r1
	str r0, [r4, #0x50]
_02089B9A:
	add r0, r5, #0
	bl sub_0207003C
	cmp r0, #1
	ldr r1, [r4, #0x50]
	bne _02089BAE
	mov r0, #2
	lsl r0, r0, #0x1c
	orr r0, r1
	b _02089BB2
_02089BAE:
	ldr r0, _02089BD0 ; =0xDFFFFFFF
	and r0, r1
_02089BB2:
	str r0, [r4, #0x50]
	mov r6, #0
	str r6, [r4, #0x54]
	str r6, [r4, #0x58]
	str r6, [r4, #0x5c]
	ldr r0, _02089BD4 ; =0x000007C6
	b _02089BD8
	.balign 4, 0
_02089BC0: .word 0x000007A8
_02089BC4: .word 0xEFFFFFFF
_02089BC8: .word 0x0FFFFFFF
_02089BCC: .word 0x3FFFFFFF
_02089BD0: .word 0xDFFFFFFF
_02089BD4: .word 0x000007C6
_02089BD8:
	str r6, [r4, #0x60]
	strb r6, [r7, r0]
_02089BDC:
	lsl r0, r6, #0x18
	lsr r0, r0, #0x18
	mov r1, #0
	bl sub_0208E55C
	add r1, r0, #0
	add r0, r5, #0
	mov r2, #0
	bl GetMonData
	cmp r0, #0
	beq _02089C14
	lsr r0, r6, #5
	lsl r0, r0, #2
	add r0, r4, r0
	mov r1, #0x1f
	add r2, r6, #0
	and r2, r1
	mov r1, #1
	ldr r3, [r0, #0x54]
	lsl r1, r2
	orr r1, r3
	str r1, [r0, #0x54]
	ldr r0, _02089C4C ; =0x000007C6
	ldrb r0, [r7, r0]
	add r1, r0, #1
	ldr r0, _02089C4C ; =0x000007C6
	strb r1, [r7, r0]
_02089C14:
	add r0, r6, #1
	lsl r0, r0, #0x10
	lsr r6, r0, #0x10
	cmp r6, #0x50
	blo _02089BDC
	mov r6, #0xa5
	mov r4, #0
	lsl r6, r6, #2
_02089C24:
	add r1, r4, #0
	add r0, r5, #0
	add r1, #0xb5
	mov r2, #0
	bl GetMonData
	add r1, r7, r4
	strb r0, [r1, r6]
	add r0, r4, #1
	lsl r0, r0, #0x10
	lsr r4, r0, #0x10
	cmp r4, #6
	blo _02089C24
	ldr r1, [sp, #4]
	add r0, r5, #0
	bl sub_0206DD8C
	add sp, #8
	pop {r3, r4, r5, r6, r7, pc}
	nop
_02089C4C: .word 0x000007C6
	thumb_func_end sub_0208981C

	thumb_func_start sub_02089C50
sub_02089C50: ; 0x02089C50
	push {r4, lr}
	sub sp, #8
	mov r2, #0xa
	add r4, r0, #0
	lsl r2, r2, #6
	ldr r0, [r4, r2]
	lsl r0, r0, #3
	lsr r0, r0, #0x1f
	bne _02089CAA
	ldr r0, _02089CB0 ; =0x000007B8
	sub r2, #0x44
	ldrh r2, [r4, r2]
	ldr r0, [r4, r0]
	add r1, sp, #4
	mov r3, #1
	bl sub_020729A4
	mov r2, #0x8f
	lsl r2, r2, #2
	add r1, r2, #0
	ldrh r0, [r4, r2]
	sub r1, #0x83
	cmp r0, r1
	bne _02089C9A
	add r0, sp, #4
	ldrb r0, [r0]
	mov r1, #0
	sub r2, #0x10
	str r0, [sp]
	ldr r0, [r4, r2]
	mov r2, #0x64
	ldr r0, [r0, #0x28]
	add r3, r1, #0
	bl sub_02006EA0
	add sp, #8
	pop {r4, pc}
_02089C9A:
	add r2, #0x42
	ldrh r2, [r4, r2]
	add r1, sp, #4
	ldrb r1, [r1]
	lsl r2, r2, #0x18
	lsr r2, r2, #0x18
	bl sub_020062E0
_02089CAA:
	add sp, #8
	pop {r4, pc}
	nop
_02089CB0: .word 0x000007B8
	thumb_func_end sub_02089C50

	thumb_func_start sub_02089CB4
sub_02089CB4: ; 0x02089CB4
	push {r4, lr}
	add r4, r0, #0
	mov r0, #0x8b
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	ldrb r0, [r0, #0x12]
	cmp r0, #0
	beq _02089CCE
	cmp r0, #1
	beq _02089CCE
	cmp r0, #2
	beq _02089CD6
	b _02089CDC
_02089CCE:
	ldr r0, _02089D3C ; =0x000007BC
	mov r1, #0
	strb r1, [r4, r0]
	b _02089CDC
_02089CD6:
	ldr r0, _02089D3C ; =0x000007BC
	mov r1, #1
	strb r1, [r4, r0]
_02089CDC:
	add r0, r4, #0
	bl sub_0208B448
	add r0, r4, #0
	bl sub_0208B5A8
	add r0, r4, #0
	bl sub_0208C2A0
	add r0, r4, #0
	bl sub_0208BD38
	add r0, r4, #0
	bl sub_0208BCD4
	add r0, r4, #0
	bl sub_0208C42C
	add r0, r4, #0
	bl sub_0208CBD4
	add r0, r4, #0
	bl sub_02089F98
	add r0, r4, #0
	bl sub_0208B9C8
	mov r0, #0x8b
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	ldrb r0, [r0, #0x12]
	cmp r0, #2
	bne _02089D26
	add r0, r4, #0
	bl sub_0208A8F4
	pop {r4, pc}
_02089D26:
	add r0, r4, #0
	bl sub_0208B400
	add r0, r4, #0
	bl sub_0208BF9C
	add r0, r4, #0
	bl sub_0208BFD0
	pop {r4, pc}
	nop
_02089D3C: .word 0x000007BC
	thumb_func_end sub_02089CB4

	thumb_func_start sub_02089D40
sub_02089D40: ; 0x02089D40
	push {r3, r4, r5, r6}
	mov r6, #0
	strb r6, [r0, #0x15]
	add r0, #0x15
	mov r3, #1
_02089D4A:
	ldrb r5, [r1, r6]
	cmp r5, #4
	beq _02089D64
	add r2, r3, #0
	ldrb r4, [r0]
	lsl r2, r5
	orr r2, r4
	strb r2, [r0]
	add r2, r6, #1
	lsl r2, r2, #0x18
	lsr r6, r2, #0x18
	cmp r6, #4
	blo _02089D4A
_02089D64:
	pop {r3, r4, r5, r6}
	bx lr
	thumb_func_end sub_02089D40

	thumb_func_start sub_02089D68
sub_02089D68: ; 0x02089D68
	push {r3, r4, r5, lr}
	sub sp, #0x10
	add r4, r1, #0
	ldr r1, _02089E10 ; =0x000007BC
	add r5, r0, #0
	ldrsb r1, [r5, r1]
	cmp r1, r4
	beq _02089E0C
	bl sub_0208C4E0
	ldr r0, _02089E10 ; =0x000007BC
	strb r4, [r5, r0]
	add r0, r5, #0
	bl sub_0208B448
	add r0, r5, #0
	bl sub_0208B5A8
	add r0, r5, #0
	bl sub_0208B89C
	add r0, r5, #0
	bl sub_0208B9C8
	add r0, r5, #0
	bl sub_0208C2A0
	add r0, r5, #0
	bl sub_0208BCD4
	add r0, r5, #0
	bl sub_0208C42C
	mov r0, #3
	str r0, [sp]
	mov r0, #0x12
	str r0, [sp, #4]
	mov r0, #0x14
	mov r2, #0
	str r0, [sp, #8]
	str r2, [sp, #0xc]
	ldr r0, [r5]
	mov r1, #1
	add r3, r2, #0
	bl FillBgTilemapRect
	ldr r0, [r5]
	mov r1, #1
	bl BgCommitTilemapBufferToVram
	mov r0, #3
	str r0, [sp]
	mov r0, #0x12
	str r0, [sp, #4]
	mov r0, #0x14
	mov r2, #0
	str r0, [sp, #8]
	str r2, [sp, #0xc]
	ldr r0, [r5]
	mov r1, #4
	add r3, r2, #0
	bl FillBgTilemapRect
	ldr r0, [r5]
	mov r1, #4
	bl BgCommitTilemapBufferToVram
	add r0, r5, #0
	bl sub_0208CBD4
	add r0, r5, #0
	bl sub_02089F98
	mov r0, #0x8b
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	ldrb r0, [r0, #0x12]
	cmp r0, #2
	bne _02089E0C
	add r0, r5, #0
	bl sub_0208A950
_02089E0C:
	add sp, #0x10
	pop {r3, r4, r5, pc}
	.balign 4, 0
_02089E10: .word 0x000007BC
	thumb_func_end sub_02089D68

	thumb_func_start sub_02089E14
sub_02089E14: ; 0x02089E14
	push {r3, r4, r5, lr}
	add r5, r0, #0
	ldr r0, _02089E2C ; =0x000005E1
	add r4, r1, #0
	bl PlaySE
	lsl r1, r4, #0x18
	add r0, r5, #0
	lsr r1, r1, #0x18
	bl sub_02089D68
	pop {r3, r4, r5, pc}
	.balign 4, 0
_02089E2C: .word 0x000005E1
	thumb_func_end sub_02089E14

	thumb_func_start sub_02089E30
sub_02089E30: ; 0x02089E30
	push {r3, r4, r5, r6, r7, lr}
	add r3, r0, #0
	ldr r0, _02089E7C ; =0x000007BC
	add r2, r1, #0
	ldrsb r1, [r3, r0]
	mov r0, #0xa
	lsl r0, r0, #6
	ldr r4, [r3, r0]
	mov ip, r1
	lsl r4, r4, #3
	lsr r4, r4, #0x1f
	bne _02089E7A
	sub r0, #0x54
	ldr r0, [r3, r0]
	mov r7, #0
	ldrb r0, [r0, #0x15]
	mov r6, #2
	mov r4, #1
_02089E54:
	add r1, r1, r2
	lsl r1, r1, #0x18
	asr r1, r1, #0x18
	bpl _02089E60
	add r1, r6, #0
	b _02089E66
_02089E60:
	cmp r1, #2
	ble _02089E66
	add r1, r7, #0
_02089E66:
	add r5, r4, #0
	lsl r5, r1
	tst r5, r0
	beq _02089E54
	mov r0, ip
	cmp r1, r0
	beq _02089E7A
	add r0, r3, #0
	bl sub_02089E14
_02089E7A:
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_02089E7C: .word 0x000007BC
	thumb_func_end sub_02089E30

	thumb_func_start sub_02089E80
sub_02089E80: ; 0x02089E80
	mov r2, #0x8b
	lsl r2, r2, #2
	ldr r0, [r0, r2]
	ldrb r3, [r0, #0x15]
	mov r0, #1
	add r2, r0, #0
	lsl r2, r1
	add r1, r3, #0
	tst r1, r2
	bne _02089E96
	mov r0, #0
_02089E96:
	bx lr
	thumb_func_end sub_02089E80

	thumb_func_start sub_02089E98
sub_02089E98: ; 0x02089E98
	push {r3, r4, r5, lr}
	add r4, r0, #0
	bl sub_0208E544
	add r5, r0, #0
	cmp r5, #0xff
	bne _02089EAA
	mov r0, #2
	pop {r3, r4, r5, pc}
_02089EAA:
	cmp r5, #9
	bhi _02089F4C
	add r0, r5, r5
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_02089EBA: ; jump table
	.short _02089ECE - _02089EBA - 2 ; case 0
	.short _02089EE6 - _02089EBA - 2 ; case 1
	.short _02089EE6 - _02089EBA - 2 ; case 2
	.short _02089F0A - _02089EBA - 2 ; case 3
	.short _02089F24 - _02089EBA - 2 ; case 4
	.short _02089F24 - _02089EBA - 2 ; case 5
	.short _02089F24 - _02089EBA - 2 ; case 6
	.short _02089F24 - _02089EBA - 2 ; case 7
	.short _02089F24 - _02089EBA - 2 ; case 8
	.short _02089F24 - _02089EBA - 2 ; case 9
_02089ECE:
	add r0, r4, #0
	add r1, r5, #0
	bl sub_02089E80
	cmp r0, #0
	beq _02089F4C
	lsl r1, r5, #0x18
	add r0, r4, #0
	asr r1, r1, #0x18
	bl sub_02089E14
	b _02089F4C
_02089EE6:
	mov r0, #0xa
	lsl r0, r0, #6
	ldr r0, [r4, r0]
	lsl r0, r0, #3
	lsr r0, r0, #0x1f
	bne _02089F4C
	add r0, r4, #0
	add r1, r5, #0
	bl sub_02089E80
	cmp r0, #0
	beq _02089F4C
	lsl r1, r5, #0x18
	add r0, r4, #0
	asr r1, r1, #0x18
	bl sub_02089E14
	b _02089F4C
_02089F0A:
	add r0, r4, #0
	mov r1, #1
	bl sub_0208ADB8
	mov r0, #0x25
	lsl r0, r0, #6
	bl PlaySE
	add r0, r4, #0
	mov r1, #0x15
	bl sub_0208B044
	pop {r3, r4, r5, pc}
_02089F24:
	mov r0, #0x8b
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	sub r5, r5, #4
	ldrb r0, [r0, #0x14]
	cmp r0, r5
	beq _02089F4C
	add r0, r4, #0
	add r1, r5, #0
	bl sub_0208A310
	cmp r0, #0
	beq _02089F4C
	lsl r1, r5, #0x18
	add r0, r4, #0
	lsr r1, r1, #0x18
	bl sub_0208A234
	mov r0, #0x13
	pop {r3, r4, r5, pc}
_02089F4C:
	mov r0, #2
	pop {r3, r4, r5, pc}
	thumb_func_end sub_02089E98

	thumb_func_start sub_02089F50
sub_02089F50: ; 0x02089F50
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x10
	add r5, r0, #0
	add r6, r1, #0
	add r1, r2, #0
	mov r0, #0xa2
	mov r2, #0x13
	add r4, r3, #0
	bl AllocAndReadWholeNarcMemberByIdPair
	add r1, sp, #0xc
	add r7, r0, #0
	bl NNS_G2dGetUnpackedScreenData
	mov r3, #0
	lsl r1, r4, #0x18
	str r3, [sp]
	mov r0, #0x20
	str r0, [sp, #4]
	str r0, [sp, #8]
	ldr r2, [sp, #0xc]
	ldr r0, [r5]
	lsr r1, r1, #0x18
	add r2, #0xc
	bl sub_0201C4C4
	lsl r1, r4, #0x18
	add r0, r6, #0
	lsr r1, r1, #0x18
	bl ScheduleBgTilemapBufferTransfer
	add r0, r7, #0
	bl FreeToHeap
	add sp, #0x10
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_02089F50

	thumb_func_start sub_02089F98
sub_02089F98: ; 0x02089F98
	push {r3, r4, r5, lr}
	mov r1, #0x8b
	add r4, r0, #0
	lsl r1, r1, #2
	ldr r1, [r4, r1]
	ldr r1, [r1, #0x34]
	cmp r1, #0
	bne _02089FBC
	ldr r1, _0208A0DC ; =0x000007BC
	ldrsb r1, [r4, r1]
	cmp r1, #2
	bne _02089FBC
	ldr r1, [r4]
	mov r2, #0xb
	mov r3, #3
	bl sub_02089F50
	b _02089FD4
_02089FBC:
	ldr r2, _0208A0DC ; =0x000007BC
	ldr r1, [r4]
	ldrsb r3, [r4, r2]
	mov r2, #0xc
	add r0, r4, #0
	add r5, r3, #0
	mul r5, r2
	ldr r2, _0208A0E0 ; =0x021039B8
	mov r3, #3
	ldr r2, [r2, r5]
	bl sub_02089F50
_02089FD4:
	mov r0, #0x8b
	lsl r0, r0, #2
	ldr r1, [r4, r0]
	ldrb r1, [r1, #0x12]
	cmp r1, #2
	bne _0208A024
	ldr r2, _0208A0DC ; =0x000007BC
	ldr r1, [r4]
	ldrsb r3, [r4, r2]
	mov r2, #0xc
	add r0, r4, #0
	add r5, r3, #0
	mul r5, r2
	ldr r2, _0208A0E4 ; =0x021039C0
	mov r3, #6
	ldr r2, [r2, r5]
	bl sub_02089F50
	ldr r0, [r4]
	mov r1, #5
	mov r2, #0
	mov r3, #0x80
	bl sub_0201F238
	ldr r0, [r4]
	mov r1, #5
	mov r2, #3
	mov r3, #0
	bl sub_0201F238
	mov r0, #0x8b
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	ldrh r0, [r0, #0x18]
	cmp r0, #0
	bne _0208A090
	add r0, r4, #0
	bl sub_0208AF70
	b _0208A090
_0208A024:
	add r0, #0x54
	ldr r0, [r4, r0]
	lsl r0, r0, #3
	lsr r0, r0, #0x1f
	beq _0208A048
	ldr r2, _0208A0DC ; =0x000007BC
	ldr r1, [r4]
	ldrsb r3, [r4, r2]
	mov r2, #0xc
	add r0, r4, #0
	add r5, r3, #0
	mul r5, r2
	ldr r2, _0208A0E4 ; =0x021039C0
	mov r3, #6
	ldr r2, [r2, r5]
	bl sub_02089F50
	b _0208A090
_0208A048:
	add r0, r4, #0
	mov r1, #2
	bl sub_02089E80
	cmp r0, #0
	beq _0208A06E
	ldr r2, _0208A0DC ; =0x000007BC
	ldr r1, [r4]
	ldrsb r3, [r4, r2]
	mov r2, #0xc
	add r0, r4, #0
	add r5, r3, #0
	mul r5, r2
	ldr r2, _0208A0E8 ; =0x021039BC
	mov r3, #6
	ldr r2, [r2, r5]
	bl sub_02089F50
	b _0208A090
_0208A06E:
	ldr r0, _0208A0DC ; =0x000007BC
	ldrsb r0, [r4, r0]
	cmp r0, #0
	bne _0208A084
	ldr r1, [r4]
	add r0, r4, #0
	mov r2, #0x4d
	mov r3, #6
	bl sub_02089F50
	b _0208A090
_0208A084:
	ldr r1, [r4]
	add r0, r4, #0
	mov r2, #0x4e
	mov r3, #6
	bl sub_02089F50
_0208A090:
	mov r0, #0x8b
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	ldrb r0, [r0, #0x11]
	cmp r0, #2
	bne _0208A0B2
	mov r0, #0x7d
	lsl r0, r0, #4
	mov r1, #4
	ldr r0, [r4, r0]
	mov r2, #0x14
	add r3, r1, #0
	bl sub_020196E8
	add r0, r4, #0
	bl sub_0208B118
_0208A0B2:
	mov r0, #0xa
	lsl r0, r0, #6
	ldr r0, [r4, r0]
	lsl r0, r0, #3
	lsr r0, r0, #0x1f
	bne _0208A0D8
	ldr r0, _0208A0DC ; =0x000007BC
	ldrsb r0, [r4, r0]
	cmp r0, #0
	bne _0208A0CE
	add r0, r4, #0
	bl sub_0208A1A0
	pop {r3, r4, r5, pc}
_0208A0CE:
	cmp r0, #1
	bne _0208A0D8
	add r0, r4, #0
	bl sub_0208A0EC
_0208A0D8:
	pop {r3, r4, r5, pc}
	nop
_0208A0DC: .word 0x000007BC
_0208A0E0: .word 0x021039B8
_0208A0E4: .word 0x021039C0
_0208A0E8: .word 0x021039BC
	thumb_func_end sub_02089F98

	thumb_func_start sub_0208A0EC
sub_0208A0EC: ; 0x0208A0EC
	push {r4, r5, r6, r7, lr}
	sub sp, #0x14
	mov r1, #0x95
	add r6, r0, #0
	lsl r1, r1, #2
	ldrh r0, [r6, r1]
	add r1, r1, #2
	ldrh r1, [r6, r1]
	mov r2, #0x30
	bl sub_020880B0
	cmp r0, #4
	bhi _0208A126
	add r0, r0, r0
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_0208A112: ; jump table
	.short _0208A11C - _0208A112 - 2 ; case 0
	.short _0208A124 - _0208A112 - 2 ; case 1
	.short _0208A120 - _0208A112 - 2 ; case 2
	.short _0208A11C - _0208A112 - 2 ; case 3
	.short _0208A11C - _0208A112 - 2 ; case 4
_0208A11C:
	ldr r7, _0208A194 ; =0x0000F097
	b _0208A126
_0208A120:
	ldr r7, _0208A198 ; =0x0000F0B7
	b _0208A126
_0208A124:
	ldr r7, _0208A19C ; =0x0000F0D7
_0208A126:
	mov r1, #0x95
	lsl r1, r1, #2
	ldrh r0, [r6, r1]
	add r1, r1, #2
	ldrh r1, [r6, r1]
	mov r2, #0x30
	bl sub_02088068
	add r4, r0, #0
	add r0, r7, #0
	add r0, #8
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	mov r5, #0
	str r0, [sp, #0x10]
_0208A144:
	cmp r4, #8
	blo _0208A14C
	ldr r2, [sp, #0x10]
	b _0208A152
_0208A14C:
	add r0, r7, r4
	lsl r0, r0, #0x10
	lsr r2, r0, #0x10
_0208A152:
	mov r0, #5
	str r0, [sp]
	mov r0, #1
	str r0, [sp, #4]
	add r3, r5, #0
	str r0, [sp, #8]
	mov r0, #0x11
	add r3, #0xa
	str r0, [sp, #0xc]
	lsl r3, r3, #0x18
	ldr r0, [r6]
	mov r1, #3
	lsr r3, r3, #0x18
	bl FillBgTilemapRect
	cmp r4, #8
	bhs _0208A178
	mov r4, #0
	b _0208A17E
_0208A178:
	sub r4, #8
	lsl r0, r4, #0x18
	lsr r4, r0, #0x18
_0208A17E:
	add r0, r5, #1
	lsl r0, r0, #0x18
	lsr r5, r0, #0x18
	cmp r5, #6
	blo _0208A144
	ldr r0, [r6]
	mov r1, #3
	bl ScheduleBgTilemapBufferTransfer
	add sp, #0x14
	pop {r4, r5, r6, r7, pc}
	.balign 4, 0
_0208A194: .word 0x0000F097
_0208A198: .word 0x0000F0B7
_0208A19C: .word 0x0000F0D7
	thumb_func_end sub_0208A0EC

	thumb_func_start sub_0208A1A0
sub_0208A1A0: ; 0x0208A1A0
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x10
	ldr r2, _0208A228 ; =0x00000242
	add r6, r0, #0
	ldrb r0, [r6, r2]
	lsl r0, r0, #0x19
	lsr r0, r0, #0x19
	cmp r0, #0x64
	bhs _0208A1C8
	add r0, r2, #0
	add r1, r2, #0
	add r0, #0xa
	add r1, #0xe
	add r2, r2, #6
	ldr r0, [r6, r0]
	ldr r1, [r6, r1]
	ldr r2, [r6, r2]
	sub r1, r1, r0
	sub r0, r2, r0
	b _0208A1CC
_0208A1C8:
	mov r1, #0
	add r0, r1, #0
_0208A1CC:
	mov r2, #0x38
	bl sub_02088068
	add r4, r0, #0
	mov r5, #0
	mov r7, #0x13
_0208A1D8:
	cmp r4, #8
	blo _0208A1E0
	ldr r2, _0208A22C ; =0x0000E03F
	b _0208A1E8
_0208A1E0:
	ldr r0, _0208A230 ; =0x0000E037
	add r0, r4, r0
	lsl r0, r0, #0x10
	lsr r2, r0, #0x10
_0208A1E8:
	str r7, [sp]
	mov r0, #1
	str r0, [sp, #4]
	add r3, r5, #0
	str r0, [sp, #8]
	mov r0, #0x11
	add r3, #9
	str r0, [sp, #0xc]
	lsl r3, r3, #0x18
	ldr r0, [r6]
	mov r1, #6
	lsr r3, r3, #0x18
	bl FillBgTilemapRect
	cmp r4, #8
	bhs _0208A20C
	mov r4, #0
	b _0208A212
_0208A20C:
	sub r4, #8
	lsl r0, r4, #0x18
	lsr r4, r0, #0x18
_0208A212:
	add r0, r5, #1
	lsl r0, r0, #0x18
	lsr r5, r0, #0x18
	cmp r5, #7
	blo _0208A1D8
	ldr r0, [r6]
	mov r1, #6
	bl ScheduleBgTilemapBufferTransfer
	add sp, #0x10
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_0208A228: .word 0x00000242
_0208A22C: .word 0x0000E03F
_0208A230: .word 0x0000E037
	thumb_func_end sub_0208A1A0

	thumb_func_start sub_0208A234
sub_0208A234: ; 0x0208A234
	push {r4, lr}
	mov r2, #0x8b
	add r4, r0, #0
	lsl r2, r2, #2
	ldr r2, [r4, r2]
	strb r1, [r2, #0x14]
	bl sub_020897C0
	add r0, r4, #0
	bl sub_02089C50
	add r0, r4, #0
	bl sub_0208C57C
	add r0, r4, #0
	bl sub_0208C614
	add r0, r4, #0
	bl sub_0208C6B4
	add r0, r4, #0
	bl sub_02089F98
	add r0, r4, #0
	bl sub_0208E4B4
	add r0, r4, #0
	bl sub_0208B448
	add r0, r4, #0
	bl sub_0208BA60
	add r0, r4, #0
	bl sub_0208B5A8
	add r0, r4, #0
	bl sub_0208B89C
	add r0, r4, #0
	bl sub_0208B9C8
	add r0, r4, #0
	bl sub_0208C2A0
	add r0, r4, #0
	bl sub_0208BE70
	add r0, r4, #0
	bl sub_0208B48C
	add r0, r4, #0
	bl sub_0208B4EC
	add r0, r4, #0
	bl sub_0208BCD4
	add r0, r4, #0
	bl sub_0208BD38
	add r0, r4, #0
	bl sub_0208CBD4
	add r0, r4, #0
	bl sub_0208B400
	add r0, r4, #0
	bl sub_0208BFD0
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_0208A234

	thumb_func_start sub_0208A2C0
sub_0208A2C0: ; 0x0208A2C0
	push {r4, lr}
	add r4, r0, #0
	bl sub_0208A2E0
	add r1, r0, #0
	mov r0, #0
	mvn r0, r0
	cmp r1, r0
	beq _0208A2DC
	lsl r1, r1, #0x18
	add r0, r4, #0
	lsr r1, r1, #0x18
	bl sub_0208A234
_0208A2DC:
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_0208A2C0

	thumb_func_start sub_0208A2E0
sub_0208A2E0: ; 0x0208A2E0
	push {r3, lr}
	mov r2, #0x8b
	lsl r2, r2, #2
	ldr r2, [r0, r2]
	ldrb r2, [r2, #0x11]
	cmp r2, #0
	beq _0208A2F8
	cmp r2, #1
	beq _0208A2FE
	cmp r2, #2
	beq _0208A304
	b _0208A30A
_0208A2F8:
	bl sub_0208A3F4
	pop {r3, pc}
_0208A2FE:
	bl sub_0208A45C
	pop {r3, pc}
_0208A304:
	bl sub_0208A4B8
	pop {r3, pc}
_0208A30A:
	mov r0, #0
	mvn r0, r0
	pop {r3, pc}
	thumb_func_end sub_0208A2E0

	thumb_func_start sub_0208A310
sub_0208A310: ; 0x0208A310
	push {r4, r5, r6, lr}
	add r4, r0, #0
	mov r0, #0x8b
	lsl r0, r0, #2
	ldr r2, [r4, r0]
	add r5, r1, #0
	ldrb r0, [r2, #0x11]
	cmp r0, #0
	beq _0208A32C
	cmp r0, #1
	beq _0208A35C
	cmp r0, #2
	beq _0208A396
	b _0208A3C6
_0208A32C:
	bl sub_02070D90
	mov r1, #0x8b
	lsl r1, r1, #2
	ldr r1, [r4, r1]
	add r6, r5, #0
	ldr r4, [r1]
	mul r6, r0
	add r0, r4, r6
	mov r1, #5
	mov r2, #0
	bl GetMonData
	cmp r0, #0
	beq _0208A3C6
	add r0, r4, r6
	mov r1, #0x4c
	mov r2, #0
	bl GetMonData
	cmp r0, #0
	beq _0208A3C6
	mov r0, #1
	pop {r4, r5, r6, pc}
_0208A35C:
	ldrb r0, [r2, #0x13]
	cmp r5, r0
	bge _0208A3C6
	ldr r0, [r2]
	bl GetPartyMonByIndex
	mov r1, #5
	mov r2, #0
	add r5, r0, #0
	bl GetMonData
	cmp r0, #0
	beq _0208A3C6
	add r0, r5, #0
	mov r1, #0x4c
	mov r2, #0
	bl GetMonData
	cmp r0, #0
	beq _0208A392
	add r0, r4, #0
	bl sub_0208A3CC
	cmp r0, #1
	bne _0208A3C6
	mov r0, #1
	pop {r4, r5, r6, pc}
_0208A392:
	mov r0, #1
	pop {r4, r5, r6, pc}
_0208A396:
	bl sub_02070D94
	mov r1, #0x8b
	lsl r1, r1, #2
	ldr r1, [r4, r1]
	add r6, r5, #0
	ldr r4, [r1]
	mul r6, r0
	add r0, r4, r6
	mov r1, #5
	mov r2, #0
	bl GetBoxMonData
	cmp r0, #0
	beq _0208A3C6
	add r0, r4, r6
	mov r1, #0x4c
	mov r2, #0
	bl GetBoxMonData
	cmp r0, #0
	beq _0208A3C6
	mov r0, #1
	pop {r4, r5, r6, pc}
_0208A3C6:
	mov r0, #0
	pop {r4, r5, r6, pc}
	.balign 4, 0
	thumb_func_end sub_0208A310

	thumb_func_start sub_0208A3CC
sub_0208A3CC: ; 0x0208A3CC
	mov r1, #0x8b
	lsl r1, r1, #2
	ldr r1, [r0, r1]
	ldrb r1, [r1, #0x12]
	cmp r1, #3
	bne _0208A3DC
	mov r0, #0
	bx lr
_0208A3DC:
	ldr r1, _0208A3F0 ; =0x000007BC
	ldrsb r0, [r0, r1]
	cmp r0, #0
	beq _0208A3EC
	cmp r0, #3
	beq _0208A3EC
	mov r0, #0
	bx lr
_0208A3EC:
	mov r0, #1
	bx lr
	.balign 4, 0
_0208A3F0: .word 0x000007BC
	thumb_func_end sub_0208A3CC

	thumb_func_start sub_0208A3F4
sub_0208A3F4: ; 0x0208A3F4
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	mov r0, #0x8b
	lsl r0, r0, #2
	str r1, [sp]
	ldr r1, [r5, r0]
	mov r0, #0x14
	ldrsb r4, [r1, r0]
_0208A404:
	ldr r0, [sp]
	add r0, r4, r0
	lsl r0, r0, #0x18
	asr r4, r0, #0x18
	bmi _0208A41A
	mov r0, #0x8b
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	ldrb r0, [r0, #0x13]
	cmp r4, r0
	blt _0208A420
_0208A41A:
	mov r0, #0
	mvn r0, r0
	pop {r3, r4, r5, r6, r7, pc}
_0208A420:
	bl sub_02070D90
	mov r1, #0x8b
	lsl r1, r1, #2
	ldr r1, [r5, r1]
	add r7, r4, #0
	ldr r6, [r1]
	mul r7, r0
	add r0, r6, r7
	mov r1, #5
	mov r2, #0
	bl GetMonData
	cmp r0, #0
	beq _0208A404
	add r0, r6, r7
	mov r1, #0x4c
	mov r2, #0
	bl GetMonData
	cmp r0, #0
	beq _0208A456
	add r0, r5, #0
	bl sub_0208A3CC
	cmp r0, #1
	bne _0208A404
_0208A456:
	add r0, r4, #0
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_0208A3F4

	thumb_func_start sub_0208A45C
sub_0208A45C: ; 0x0208A45C
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	mov r0, #0x8b
	lsl r0, r0, #2
	add r7, r1, #0
	ldr r1, [r5, r0]
	mov r0, #0x14
	ldrsb r4, [r1, r0]
_0208A46C:
	add r0, r4, r7
	lsl r0, r0, #0x18
	asr r4, r0, #0x18
	bmi _0208A480
	mov r0, #0x8b
	lsl r0, r0, #2
	ldr r1, [r5, r0]
	ldrb r0, [r1, #0x13]
	cmp r4, r0
	blt _0208A486
_0208A480:
	mov r0, #0
	mvn r0, r0
	pop {r3, r4, r5, r6, r7, pc}
_0208A486:
	ldr r0, [r1]
	add r1, r4, #0
	bl GetPartyMonByIndex
	mov r1, #5
	mov r2, #0
	add r6, r0, #0
	bl GetMonData
	cmp r0, #0
	beq _0208A46C
	add r0, r6, #0
	mov r1, #0x4c
	mov r2, #0
	bl GetMonData
	cmp r0, #0
	beq _0208A4B4
	add r0, r5, #0
	bl sub_0208A3CC
	cmp r0, #1
	bne _0208A46C
_0208A4B4:
	add r0, r4, #0
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_0208A45C

	thumb_func_start sub_0208A4B8
sub_0208A4B8: ; 0x0208A4B8
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	mov r0, #0x8b
	lsl r0, r0, #2
	str r1, [sp]
	ldr r1, [r5, r0]
	mov r0, #0x14
	ldrsb r4, [r1, r0]
_0208A4C8:
	ldr r0, [sp]
	add r0, r4, r0
	lsl r0, r0, #0x18
	asr r4, r0, #0x18
	bmi _0208A4DE
	mov r0, #0x8b
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	ldrb r0, [r0, #0x13]
	cmp r4, r0
	blt _0208A4E4
_0208A4DE:
	mov r0, #0
	mvn r0, r0
	pop {r3, r4, r5, r6, r7, pc}
_0208A4E4:
	bl sub_02070D94
	mov r1, #0x8b
	lsl r1, r1, #2
	ldr r1, [r5, r1]
	add r7, r4, #0
	ldr r6, [r1]
	mul r7, r0
	add r0, r6, r7
	mov r1, #5
	mov r2, #0
	bl GetBoxMonData
	cmp r0, #0
	beq _0208A4C8
	add r0, r6, r7
	mov r1, #0x4c
	mov r2, #0
	bl GetBoxMonData
	cmp r0, #0
	beq _0208A51A
	add r0, r5, #0
	bl sub_0208A3CC
	cmp r0, #1
	bne _0208A4C8
_0208A51A:
	add r0, r4, #0
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_0208A4B8

	thumb_func_start sub_0208A520
sub_0208A520: ; 0x0208A520
	push {r4, lr}
	mov r1, #0x8b
	lsl r1, r1, #2
	ldr r4, [r0, r1]
	ldrb r0, [r4, #0x11]
	cmp r0, #0
	beq _0208A538
	cmp r0, #1
	beq _0208A546
	cmp r0, #2
	beq _0208A550
	b _0208A55E
_0208A538:
	bl sub_02070D90
	ldrb r1, [r4, #0x14]
	ldr r2, [r4]
	mul r0, r1
	add r0, r2, r0
	pop {r4, pc}
_0208A546:
	ldrb r1, [r4, #0x14]
	ldr r0, [r4]
	bl GetPartyMonByIndex
	pop {r4, pc}
_0208A550:
	bl sub_02070D94
	ldrb r1, [r4, #0x14]
	ldr r2, [r4]
	mul r0, r1
	add r0, r2, r0
	pop {r4, pc}
_0208A55E:
	mov r0, #0
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_0208A520

	thumb_func_start sub_0208A564
sub_0208A564: ; 0x0208A564
	push {r4, lr}
	ldr r1, _0208A630 ; =0x000007BE
	add r4, r0, #0
	ldrb r1, [r4, r1]
	cmp r1, #0
	beq _0208A57A
	cmp r1, #1
	beq _0208A5B6
	cmp r1, #2
	beq _0208A5E2
	b _0208A62A
_0208A57A:
	ldr r0, _0208A634 ; =0x00000428
	mov r1, #0
	ldr r0, [r4, r0]
	bl sub_02024830
	ldr r0, _0208A634 ; =0x00000428
	mov r1, #0
	ldr r0, [r4, r0]
	bl sub_020248F0
	mov r2, #0
	ldr r0, [r4]
	mov r1, #5
	add r3, r2, #0
	bl sub_0201F238
	ldr r0, [r4]
	mov r1, #5
	mov r2, #3
	mov r3, #0
	bl sub_0201F238
	add r0, r4, #0
	add r0, #0x44
	bl sub_0201D8E4
	ldr r0, _0208A630 ; =0x000007BE
	mov r1, #1
	strb r1, [r4, r0]
	b _0208A62A
_0208A5B6:
	ldr r0, [r4]
	mov r1, #5
	bl sub_0201BDF4
	cmp r0, #0x80
	ldr r0, [r4]
	blt _0208A5D6
	mov r1, #5
	mov r2, #0
	mov r3, #0x80
	bl sub_0201F238
	ldr r0, _0208A630 ; =0x000007BE
	mov r1, #2
	strb r1, [r4, r0]
	b _0208A62A
_0208A5D6:
	mov r1, #5
	mov r2, #1
	mov r3, #0x40
	bl sub_0201F238
	b _0208A62A
_0208A5E2:
	bl sub_0208DB1C
	add r0, r4, #0
	bl sub_0208A79C
	mov r0, #0x43
	lsl r0, r0, #4
	ldr r0, [r4, r0]
	mov r1, #1
	bl sub_0200DCE0
	add r0, r4, #0
	bl sub_0208C068
	mov r0, #9
	lsl r0, r0, #6
	ldrb r1, [r4, r0]
	add r0, r0, #1
	ldrb r0, [r4, r0]
	cmp r1, r0
	beq _0208A616
	ldr r0, _0208A638 ; =0x00000434
	mov r1, #1
	ldr r0, [r4, r0]
	bl sub_0200DCE0
_0208A616:
	ldr r0, _0208A634 ; =0x00000428
	mov r1, #1
	ldr r0, [r4, r0]
	bl sub_02024830
	ldr r0, _0208A630 ; =0x000007BE
	mov r1, #0
	strb r1, [r4, r0]
	mov r0, #1
	pop {r4, pc}
_0208A62A:
	mov r0, #0
	pop {r4, pc}
	nop
_0208A630: .word 0x000007BE
_0208A634: .word 0x00000428
_0208A638: .word 0x00000434
	thumb_func_end sub_0208A564

	thumb_func_start sub_0208A63C
sub_0208A63C: ; 0x0208A63C
	push {r4, lr}
	add r4, r0, #0
	ldr r0, _0208A70C ; =0x000007BE
	ldrb r0, [r4, r0]
	cmp r0, #0
	beq _0208A652
	cmp r0, #1
	beq _0208A69C
	cmp r0, #2
	beq _0208A6C8
	b _0208A706
_0208A652:
	mov r0, #0x43
	lsl r0, r0, #4
	ldr r0, [r4, r0]
	mov r1, #0
	bl sub_0200DCE0
	ldr r0, _0208A710 ; =0x00000434
	mov r1, #0
	ldr r0, [r4, r0]
	bl sub_0200DCE0
	ldr r0, _0208A714 ; =0x0000044C
	mov r1, #0
	ldr r0, [r4, r0]
	bl sub_0200DCE0
	mov r0, #0x45
	lsl r0, r0, #4
	ldr r0, [r4, r0]
	mov r1, #0
	bl sub_0200DCE0
	ldr r0, _0208A718 ; =0x00000428
	mov r1, #0
	ldr r0, [r4, r0]
	bl sub_02024830
	add r0, r4, #0
	bl sub_0208DB58
	add r0, r4, #0
	bl sub_0208DAD4
	ldr r0, _0208A70C ; =0x000007BE
	mov r1, #1
	strb r1, [r4, r0]
	b _0208A706
_0208A69C:
	ldr r0, [r4]
	mov r1, #5
	bl sub_0201BDF4
	cmp r0, #0x80
	ldr r0, [r4]
	bgt _0208A6BC
	mov r2, #0
	mov r1, #5
	add r3, r2, #0
	bl sub_0201F238
	ldr r0, _0208A70C ; =0x000007BE
	mov r1, #2
	strb r1, [r4, r0]
	b _0208A706
_0208A6BC:
	mov r1, #5
	mov r2, #2
	mov r3, #0x40
	bl sub_0201F238
	b _0208A706
_0208A6C8:
	mov r0, #0x81
	lsl r0, r0, #2
	add r0, r4, r0
	bl sub_0201D5C8
	add r0, r4, #0
	add r0, #0x64
	bl sub_0201D5C8
	mov r0, #0x7d
	lsl r0, r0, #2
	add r0, r4, r0
	bl sub_0201D5C8
	add r0, r4, #0
	add r0, #0x44
	bl sub_0201D5C8
	ldr r0, _0208A718 ; =0x00000428
	mov r1, #1
	ldr r0, [r4, r0]
	bl sub_02024830
	add r0, r4, #0
	bl sub_0208B400
	ldr r0, _0208A70C ; =0x000007BE
	mov r1, #0
	strb r1, [r4, r0]
	mov r0, #1
	pop {r4, pc}
_0208A706:
	mov r0, #0
	pop {r4, pc}
	nop
_0208A70C: .word 0x000007BE
_0208A710: .word 0x00000434
_0208A714: .word 0x0000044C
_0208A718: .word 0x00000428
	thumb_func_end sub_0208A63C

	thumb_func_start sub_0208A71C
sub_0208A71C: ; 0x0208A71C
	push {r4, r5, r6, r7}
	add r5, r0, #0
	ldr r0, _0208A798 ; =0x000007BD
	ldrb r0, [r5, r0]
	lsl r0, r0, #0x1c
	lsr r4, r0, #0x1c
	lsl r0, r4, #0x18
	asr r2, r0, #0x18
	mov r0, #0x8b
	lsl r0, r0, #2
	ldr r3, [r5, r0]
	ldrb r0, [r3, #0x12]
	cmp r0, #2
	bne _0208A746
	ldrh r0, [r3, #0x18]
	cmp r0, #0
	beq _0208A742
	mov r3, #4
	b _0208A748
_0208A742:
	mov r3, #3
	b _0208A748
_0208A746:
	mov r3, #3
_0208A748:
	mov r6, #0x99
	mov r0, #0
	lsl r6, r6, #2
_0208A74E:
	add r2, r2, r1
	lsl r2, r2, #0x18
	asr r2, r2, #0x18
	bpl _0208A75A
	add r2, r3, #0
	b _0208A760
_0208A75A:
	cmp r2, r3
	ble _0208A760
	add r2, r0, #0
_0208A760:
	cmp r2, #4
	beq _0208A772
	lsl r7, r2, #1
	add r7, r5, r7
	ldrh r7, [r7, r6]
	cmp r7, #0
	bne _0208A772
	cmp r2, r4
	bne _0208A74E
_0208A772:
	cmp r2, r4
	beq _0208A790
	ldr r3, _0208A798 ; =0x000007BD
	mov r1, #0xf
	ldrb r0, [r5, r3]
	bic r0, r1
	lsl r1, r2, #0x18
	lsr r2, r1, #0x18
	mov r1, #0xf
	and r1, r2
	orr r0, r1
	strb r0, [r5, r3]
	mov r0, #1
	pop {r4, r5, r6, r7}
	bx lr
_0208A790:
	mov r0, #0
	pop {r4, r5, r6, r7}
	bx lr
	nop
_0208A798: .word 0x000007BD
	thumb_func_end sub_0208A71C

	thumb_func_start sub_0208A79C
sub_0208A79C: ; 0x0208A79C
	push {r4, lr}
	add r4, r0, #0
	bl sub_0208BBDC
	ldr r0, _0208A7F4 ; =0x000007BD
	ldrb r0, [r4, r0]
	lsl r0, r0, #0x1c
	lsr r1, r0, #0x1c
	cmp r1, #4
	bne _0208A7D0
	mov r0, #0x8b
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	ldrh r1, [r0, #0x18]
	cmp r1, #0
	beq _0208A7C4
	add r0, r4, #0
	bl sub_0208A7F8
	pop {r4, pc}
_0208A7C4:
	mov r1, #0
	add r0, r4, #0
	mvn r1, r1
	bl sub_0208A7F8
	pop {r4, pc}
_0208A7D0:
	cmp r1, #5
	bne _0208A7E0
	mov r1, #0
	add r0, r4, #0
	mvn r1, r1
	bl sub_0208A7F8
	pop {r4, pc}
_0208A7E0:
	lsl r1, r1, #1
	add r2, r4, r1
	mov r1, #0x99
	lsl r1, r1, #2
	ldrh r1, [r2, r1]
	add r0, r4, #0
	bl sub_0208A7F8
	pop {r4, pc}
	nop
_0208A7F4: .word 0x000007BD
	thumb_func_end sub_0208A79C

	thumb_func_start sub_0208A7F8
sub_0208A7F8: ; 0x0208A7F8
	push {r3, r4, r5, lr}
	mov r2, #0
	add r4, r1, #0
	mvn r2, r2
	add r5, r0, #0
	cmp r4, r2
	bne _0208A816
	bl sub_0208DAD4
	ldr r0, _0208A830 ; =0x0000044C
	mov r1, #0
	ldr r0, [r5, r0]
	bl sub_0200DCE0
	pop {r3, r4, r5, pc}
_0208A816:
	bl sub_0208D9A0
	add r0, r5, #0
	add r1, r4, #0
	bl sub_0208BB8C
	ldr r0, _0208A830 ; =0x0000044C
	mov r1, #1
	ldr r0, [r5, r0]
	bl sub_0200DCE0
	pop {r3, r4, r5, pc}
	nop
_0208A830: .word 0x0000044C
	thumb_func_end sub_0208A7F8

	thumb_func_start sub_0208A834
sub_0208A834: ; 0x0208A834
	push {r3, r4, r5, r6, r7, lr}
	add r4, r0, #0
	bl sub_0208A520
	mov r1, #0x8b
	lsl r1, r1, #2
	ldr r1, [r4, r1]
	ldrb r1, [r1, #0x11]
	cmp r1, #2
	ldr r1, _0208A8F0 ; =0x000007BD
	bne _0208A85A
	ldrb r2, [r4, r1]
	lsl r1, r2, #0x1c
	lsl r2, r2, #0x18
	lsr r1, r1, #0x1c
	lsr r2, r2, #0x1c
	bl sub_02071604
	b _0208A868
_0208A85A:
	ldrb r2, [r4, r1]
	lsl r1, r2, #0x1c
	lsl r2, r2, #0x18
	lsr r1, r1, #0x1c
	lsr r2, r2, #0x1c
	bl sub_020715FC
_0208A868:
	ldr r0, _0208A8F0 ; =0x000007BD
	mov r1, #0x99
	ldrb r6, [r4, r0]
	lsl r1, r1, #2
	add r5, r4, r1
	lsl r2, r6, #0x1c
	lsl r6, r6, #0x18
	lsr r6, r6, #0x1c
	lsl r6, r6, #1
	lsr r3, r2, #0x1b
	add r6, r4, r6
	ldrh r2, [r5, r3]
	ldrh r6, [r6, r1]
	strh r6, [r5, r3]
	ldrb r3, [r4, r0]
	lsl r3, r3, #0x18
	lsr r3, r3, #0x1c
	lsl r3, r3, #1
	add r3, r4, r3
	strh r2, [r3, r1]
	add r2, r1, #0
	add r2, #8
	ldrb r6, [r4, r0]
	add r5, r4, r2
	lsl r2, r6, #0x1c
	lsl r6, r6, #0x18
	lsr r6, r6, #0x1c
	add r7, r4, r6
	add r6, r1, #0
	lsr r3, r2, #0x1c
	add r6, #8
	ldrb r2, [r5, r3]
	ldrb r6, [r7, r6]
	strb r6, [r5, r3]
	ldrb r3, [r4, r0]
	lsl r3, r3, #0x18
	lsr r3, r3, #0x1c
	add r5, r4, r3
	add r3, r1, #0
	add r3, #8
	strb r2, [r5, r3]
	add r2, r1, #0
	add r2, #0xc
	ldrb r6, [r4, r0]
	add r5, r4, r2
	lsl r2, r6, #0x1c
	lsl r6, r6, #0x18
	lsr r6, r6, #0x1c
	add r7, r4, r6
	add r6, r1, #0
	lsr r3, r2, #0x1c
	add r6, #0xc
	ldrb r2, [r5, r3]
	ldrb r6, [r7, r6]
	strb r6, [r5, r3]
	ldrb r0, [r4, r0]
	lsl r0, r0, #0x18
	lsr r0, r0, #0x1c
	add r3, r4, r0
	add r0, r1, #0
	add r0, #0xc
	strb r2, [r3, r0]
	sub r1, #0x38
	ldr r0, [r4, r1]
	mov r2, #1
	str r2, [r0, #0x38]
	pop {r3, r4, r5, r6, r7, pc}
	nop
_0208A8F0: .word 0x000007BD
	thumb_func_end sub_0208A834

	thumb_func_start sub_0208A8F4
sub_0208A8F4: ; 0x0208A8F4
	push {r4, lr}
	add r4, r0, #0
	mov r2, #0
	ldr r0, [r4]
	mov r1, #2
	add r3, r2, #0
	bl sub_0201F238
	add r0, r4, #0
	bl sub_0208DB1C
	add r0, r4, #0
	bl sub_0208A79C
	mov r0, #0x43
	lsl r0, r0, #4
	ldr r0, [r4, r0]
	mov r1, #1
	bl sub_0200DCE0
	add r0, r4, #0
	bl sub_0208C068
	mov r0, #9
	lsl r0, r0, #6
	ldrb r1, [r4, r0]
	add r0, r0, #1
	ldrb r0, [r4, r0]
	cmp r1, r0
	beq _0208A93A
	ldr r0, _0208A948 ; =0x00000434
	mov r1, #1
	ldr r0, [r4, r0]
	bl sub_0200DCE0
_0208A93A:
	ldr r0, _0208A94C ; =0x00000428
	mov r1, #1
	ldr r0, [r4, r0]
	bl sub_02024830
	pop {r4, pc}
	nop
_0208A948: .word 0x00000434
_0208A94C: .word 0x00000428
	thumb_func_end sub_0208A8F4

	thumb_func_start sub_0208A950
sub_0208A950: ; 0x0208A950
	push {r4, lr}
	add r4, r0, #0
	bl sub_0208DB1C
	add r0, r4, #0
	bl sub_0208A79C
	add r0, r4, #0
	bl sub_0208C068
	ldr r0, _0208A9BC ; =0x000007BC
	ldrsb r0, [r4, r0]
	cmp r0, #1
	bne _0208A9A4
	add r0, r4, #0
	bl sub_0208C208
	mov r0, #0x43
	lsl r0, r0, #4
	ldr r0, [r4, r0]
	mov r1, #1
	bl sub_0200DCE0
	mov r0, #9
	lsl r0, r0, #6
	ldrb r1, [r4, r0]
	add r0, r0, #1
	ldrb r0, [r4, r0]
	cmp r1, r0
	beq _0208A996
	ldr r0, _0208A9C0 ; =0x00000434
	mov r1, #1
	ldr r0, [r4, r0]
	bl sub_0200DCE0
_0208A996:
	ldr r0, [r4]
	mov r1, #2
	mov r2, #3
	mov r3, #0
	bl sub_0201F238
	pop {r4, pc}
_0208A9A4:
	add r0, r4, #0
	bl sub_0208C0E8
	mov r2, #3
	add r3, r2, #0
	ldr r0, [r4]
	mov r1, #2
	add r3, #0xfd
	bl sub_0201F238
	pop {r4, pc}
	nop
_0208A9BC: .word 0x000007BC
_0208A9C0: .word 0x00000434
	thumb_func_end sub_0208A950

	thumb_func_start sub_0208A9C4
sub_0208A9C4: ; 0x0208A9C4
	push {r4, lr}
	add r4, r0, #0
	ldr r0, _0208AA8C ; =0x000007BE
	ldrb r0, [r4, r0]
	cmp r0, #0
	beq _0208A9DA
	cmp r0, #1
	beq _0208AA32
	cmp r0, #2
	beq _0208AA5E
	b _0208AA86
_0208A9DA:
	mov r2, #0
	ldr r0, [r4]
	mov r1, #5
	add r3, r2, #0
	bl sub_0201F238
	ldr r0, [r4]
	mov r1, #5
	mov r2, #3
	mov r3, #0
	bl sub_0201F238
	ldr r0, _0208AA90 ; =0x00000428
	mov r1, #3
	ldr r0, [r4, r0]
	bl sub_02024A04
	ldr r0, _0208AA90 ; =0x00000428
	mov r1, #0
	ldr r0, [r4, r0]
	bl sub_0200DD08
	mov r0, #0x75
	lsl r0, r0, #2
	add r0, r4, r0
	bl sub_0201D8E4
	mov r0, #0x5d
	lsl r0, r0, #2
	add r0, r4, r0
	bl sub_0201D8E4
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	bl sub_0201D8E4
	ldr r0, _0208AA94 ; =0x000007C5
	mov r1, #0
	strb r1, [r4, r0]
	mov r1, #1
	sub r0, r0, #7
	strb r1, [r4, r0]
	b _0208AA86
_0208AA32:
	ldr r0, [r4]
	mov r1, #5
	bl sub_0201BE00
	cmp r0, #0x48
	ldr r0, [r4]
	blt _0208AA52
	mov r1, #5
	mov r2, #3
	mov r3, #0x48
	bl sub_0201F238
	ldr r0, _0208AA8C ; =0x000007BE
	mov r1, #2
	strb r1, [r4, r0]
	b _0208AA86
_0208AA52:
	mov r1, #5
	mov r2, #4
	mov r3, #0x24
	bl sub_0201F238
	b _0208AA86
_0208AA5E:
	mov r0, #5
	lsl r0, r0, #8
	ldr r0, [r4, r0]
	mov r1, #1
	bl sub_02024830
	ldr r0, _0208AA98 ; =0x0000050C
	mov r1, #1
	ldr r0, [r4, r0]
	bl sub_02024830
	add r0, r4, #0
	mov r1, #0
	bl sub_0208AB58
	ldr r0, _0208AA8C ; =0x000007BE
	mov r1, #0
	strb r1, [r4, r0]
	mov r0, #1
	pop {r4, pc}
_0208AA86:
	mov r0, #0
	pop {r4, pc}
	nop
_0208AA8C: .word 0x000007BE
_0208AA90: .word 0x00000428
_0208AA94: .word 0x000007C5
_0208AA98: .word 0x0000050C
	thumb_func_end sub_0208A9C4

	thumb_func_start sub_0208AA9C
sub_0208AA9C: ; 0x0208AA9C
	push {r4, lr}
	ldr r1, _0208AB50 ; =0x000007BE
	add r4, r0, #0
	ldrb r0, [r4, r1]
	cmp r0, #0
	beq _0208AAB2
	cmp r0, #1
	beq _0208AAE2
	cmp r0, #2
	beq _0208AB0E
	b _0208AB4A
_0208AAB2:
	mov r2, #0
	add r0, r1, #6
	strb r2, [r4, r0]
	add r0, r1, #7
	strb r2, [r4, r0]
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	add r0, #0x10
	bl sub_0201D8E4
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	add r0, #0x20
	bl sub_0201D8E4
	add r0, r4, #0
	bl sub_0208C2A0
	ldr r0, _0208AB50 ; =0x000007BE
	mov r1, #1
	strb r1, [r4, r0]
	b _0208AB4A
_0208AAE2:
	ldr r0, [r4]
	mov r1, #5
	bl sub_0201BE00
	cmp r0, #0
	ldr r0, [r4]
	bgt _0208AB02
	mov r1, #5
	mov r2, #3
	mov r3, #0
	bl sub_0201F238
	ldr r0, _0208AB50 ; =0x000007BE
	mov r1, #2
	strb r1, [r4, r0]
	b _0208AB4A
_0208AB02:
	mov r1, #5
	add r2, r1, #0
	mov r3, #0x24
	bl sub_0201F238
	b _0208AB4A
_0208AB0E:
	mov r0, #0x75
	lsl r0, r0, #2
	add r0, r4, r0
	bl sub_0201D5C8
	mov r0, #0x5d
	lsl r0, r0, #2
	add r0, r4, r0
	bl sub_0201D5C8
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	bl sub_0201D5C8
	ldr r0, _0208AB54 ; =0x00000428
	mov r1, #0
	ldr r0, [r4, r0]
	bl sub_02024A04
	ldr r0, _0208AB54 ; =0x00000428
	mov r1, #2
	ldr r0, [r4, r0]
	bl sub_0200DD08
	ldr r0, _0208AB50 ; =0x000007BE
	mov r1, #0
	strb r1, [r4, r0]
	mov r0, #1
	pop {r4, pc}
_0208AB4A:
	mov r0, #0
	pop {r4, pc}
	nop
_0208AB50: .word 0x000007BE
_0208AB54: .word 0x00000428
	thumb_func_end sub_0208AA9C

	thumb_func_start sub_0208AB58
sub_0208AB58: ; 0x0208AB58
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	ldr r0, _0208ACC4 ; =0x000007C4
	add r4, r1, #0
	add r1, r0, #1
	ldrb r7, [r5, r0]
	ldrb r6, [r5, r1]
	cmp r4, #1
	bne _0208AB80
	add r0, r7, #0
	mov r1, #3
	bl _s32_div_f
	cmp r1, #2
	beq _0208AB94
	ldr r0, _0208ACC4 ; =0x000007C4
	ldrb r1, [r5, r0]
	add r1, r1, #1
	strb r1, [r5, r0]
	b _0208AC34
_0208AB80:
	mov r2, #0
	mvn r2, r2
	cmp r4, r2
	bne _0208ABA0
	add r0, r7, #0
	mov r1, #3
	bl _s32_div_f
	cmp r1, #0
	bne _0208AB96
_0208AB94:
	b _0208ACC0
_0208AB96:
	ldr r0, _0208ACC4 ; =0x000007C4
	ldrb r1, [r5, r0]
	sub r1, r1, #1
	strb r1, [r5, r0]
	b _0208AC34
_0208ABA0:
	cmp r4, #3
	bne _0208ABD4
	cmp r7, #6
	blo _0208ABCE
	add r2, r6, #1
	lsl r1, r2, #3
	add r1, r2, r1
	add r2, r0, #2
	ldrb r2, [r5, r2]
	cmp r1, r2
	bge _0208AC34
	add r1, r0, #1
	ldrb r1, [r5, r1]
	add r2, r1, #1
	add r1, r0, #1
	strb r2, [r5, r1]
	ldrb r0, [r5, r0]
	mov r1, #3
	bl _s32_div_f
	ldr r0, _0208ACC4 ; =0x000007C4
	strb r1, [r5, r0]
	b _0208AC34
_0208ABCE:
	add r1, r7, #3
	strb r1, [r5, r0]
	b _0208AC34
_0208ABD4:
	sub r1, r2, #2
	cmp r4, r1
	bne _0208AC02
	cmp r7, #2
	bhi _0208ABFC
	cmp r6, #0
	beq _0208AC34
	add r1, r0, #1
	ldrb r1, [r5, r1]
	sub r2, r1, #1
	add r1, r0, #1
	strb r2, [r5, r1]
	ldrb r0, [r5, r0]
	mov r1, #3
	bl _s32_div_f
	ldr r0, _0208ACC4 ; =0x000007C4
	add r1, r1, #6
	strb r1, [r5, r0]
	b _0208AC34
_0208ABFC:
	sub r1, r7, #3
	strb r1, [r5, r0]
	b _0208AC34
_0208AC02:
	cmp r4, #9
	bne _0208AC20
	add r2, r6, #1
	lsl r1, r2, #3
	add r1, r2, r1
	add r2, r0, #2
	ldrb r2, [r5, r2]
	cmp r1, r2
	bge _0208AC34
	add r1, r0, #1
	ldrb r1, [r5, r1]
	add r0, r0, #1
	add r1, r1, #1
	strb r1, [r5, r0]
	b _0208AC34
_0208AC20:
	sub r2, #8
	cmp r4, r2
	bne _0208AC34
	cmp r6, #0
	beq _0208AC34
	add r1, r0, #1
	ldrb r1, [r5, r1]
	add r0, r0, #1
	sub r1, r1, #1
	strb r1, [r5, r0]
_0208AC34:
	ldr r0, _0208ACC4 ; =0x000007C4
	ldrb r1, [r5, r0]
	cmp r7, r1
	bne _0208AC44
	add r0, r0, #1
	ldrb r0, [r5, r0]
	cmp r6, r0
	beq _0208AC56
_0208AC44:
	cmp r4, #9
	beq _0208AC56
	mov r0, #8
	mvn r0, r0
	cmp r4, r0
	beq _0208AC56
	ldr r0, _0208ACC8 ; =0x000005DC
	bl PlaySE
_0208AC56:
	ldr r1, _0208ACC4 ; =0x000007C4
	add r0, r5, #0
	ldrb r1, [r5, r1]
	bl sub_0208ACDC
	ldr r1, _0208ACCC ; =0x000007C7
	strb r0, [r5, r1]
	add r0, r5, #0
	bl sub_0208C380
	ldr r0, _0208ACD0 ; =0x000007C5
	ldrb r0, [r5, r0]
	cmp r6, r0
	beq _0208AC78
	add r0, r5, #0
	bl sub_0208C320
_0208AC78:
	add r0, r5, #0
	bl sub_0208D7C4
	ldr r0, _0208ACD0 ; =0x000007C5
	ldrb r0, [r5, r0]
	cmp r0, #0
	ldr r0, _0208ACD4 ; =0x00000504
	beq _0208AC92
	ldr r0, [r5, r0]
	mov r1, #1
	bl sub_02024830
	b _0208AC9A
_0208AC92:
	ldr r0, [r5, r0]
	mov r1, #0
	bl sub_02024830
_0208AC9A:
	ldr r0, _0208ACD0 ; =0x000007C5
	ldrb r1, [r5, r0]
	add r0, r0, #1
	ldrb r0, [r5, r0]
	add r2, r1, #1
	lsl r1, r2, #3
	add r1, r2, r1
	cmp r1, r0
	ldr r0, _0208ACD8 ; =0x00000508
	bge _0208ACB8
	ldr r0, [r5, r0]
	mov r1, #1
	bl sub_02024830
	pop {r3, r4, r5, r6, r7, pc}
_0208ACB8:
	ldr r0, [r5, r0]
	mov r1, #0
	bl sub_02024830
_0208ACC0:
	pop {r3, r4, r5, r6, r7, pc}
	nop
_0208ACC4: .word 0x000007C4
_0208ACC8: .word 0x000005DC
_0208ACCC: .word 0x000007C7
_0208ACD0: .word 0x000007C5
_0208ACD4: .word 0x00000504
_0208ACD8: .word 0x00000508
	thumb_func_end sub_0208AB58

	thumb_func_start sub_0208ACDC
sub_0208ACDC: ; 0x0208ACDC
	push {r4, r5, r6, r7}
	ldr r2, _0208AD30 ; =0x000007C5
	mov r6, #0
	ldrb r3, [r0, r2]
	add r4, r6, #0
	lsl r2, r3, #3
	add r2, r3, r2
	add r1, r1, r2
	lsl r1, r1, #0x18
	lsr r5, r1, #0x18
	mov r1, #0xa1
	mov r2, #1
	lsl r1, r1, #2
_0208ACF6:
	mov r3, #0x1f
	add r7, r4, #0
	and r7, r3
	add r3, r2, #0
	lsl r3, r7
	lsr r7, r4, #5
	lsl r7, r7, #2
	add r7, r0, r7
	ldr r7, [r7, r1]
	tst r3, r7
	beq _0208AD1E
	cmp r5, r6
	bne _0208AD18
	lsl r0, r4, #0x18
	lsr r0, r0, #0x18
	pop {r4, r5, r6, r7}
	bx lr
_0208AD18:
	add r3, r6, #1
	lsl r3, r3, #0x18
	lsr r6, r3, #0x18
_0208AD1E:
	add r3, r4, #1
	lsl r3, r3, #0x10
	lsr r4, r3, #0x10
	cmp r4, #0x50
	blo _0208ACF6
	mov r0, #0
	pop {r4, r5, r6, r7}
	bx lr
	nop
_0208AD30: .word 0x000007C5
	thumb_func_end sub_0208ACDC

	thumb_func_start sub_0208AD34
sub_0208AD34: ; 0x0208AD34
	push {r3, r4, r5, lr}
	add r4, r1, #0
	add r5, r0, #0
	add r0, r4, #0
	bl PlayerProfile_GetNamePtr
	str r0, [r5, #8]
	add r0, r4, #0
	bl PlayerProfile_GetTrainerID
	str r0, [r5, #0xc]
	add r0, r4, #0
	bl PlayerProfile_GetTrainerGender
	strb r0, [r5, #0x10]
	pop {r3, r4, r5, pc}
	thumb_func_end sub_0208AD34

	thumb_func_start sub_0208AD54
sub_0208AD54: ; 0x0208AD54
	mov r0, #0x40
	bx lr
	thumb_func_end sub_0208AD54

	thumb_func_start sub_0208AD58
sub_0208AD58: ; 0x0208AD58
	mov r0, #0x41
	bx lr
	thumb_func_end sub_0208AD58

	thumb_func_start sub_0208AD5C
sub_0208AD5C: ; 0x0208AD5C
	mov r0, #0x3f
	bx lr
	thumb_func_end sub_0208AD5C

	thumb_func_start sub_0208AD60
sub_0208AD60: ; 0x0208AD60
	mov r0, #0x3e
	bx lr
	thumb_func_end sub_0208AD60

	thumb_func_start sub_0208AD64
sub_0208AD64: ; 0x0208AD64
	push {r3, r4, r5, lr}
	add r5, r0, #0
	mov r1, #0xa0
	mov r2, #0
	bl GetMonData
	add r4, r0, #0
	add r0, r5, #0
	mov r1, #0xa3
	mov r2, #0
	bl GetMonData
	cmp r0, #0
	bne _0208AD84
	mov r0, #6
	pop {r3, r4, r5, pc}
_0208AD84:
	mov r0, #0x88
	tst r0, r4
	beq _0208AD8E
	mov r0, #4
	pop {r3, r4, r5, pc}
_0208AD8E:
	mov r0, #7
	add r1, r4, #0
	tst r1, r0
	beq _0208AD9A
	mov r0, #3
	pop {r3, r4, r5, pc}
_0208AD9A:
	mov r1, #0x10
	tst r1, r4
	beq _0208ADA4
	mov r0, #5
	pop {r3, r4, r5, pc}
_0208ADA4:
	mov r1, #0x20
	tst r1, r4
	beq _0208ADAE
	mov r0, #2
	pop {r3, r4, r5, pc}
_0208ADAE:
	mov r1, #0x40
	tst r1, r4
	beq _0208ADB6
	mov r0, #1
_0208ADB6:
	pop {r3, r4, r5, pc}
	thumb_func_end sub_0208AD64

	thumb_func_start sub_0208ADB8
sub_0208ADB8: ; 0x0208ADB8
	push {r3, lr}
	mov r2, #0x8b
	lsl r2, r2, #2
	ldr r0, [r0, r2]
	ldr r0, [r0, #0x30]
	cmp r0, #0
	beq _0208ADCA
	bl sub_02018410
_0208ADCA:
	pop {r3, pc}
	thumb_func_end sub_0208ADB8

	thumb_func_start sub_0208ADCC
sub_0208ADCC: ; 0x0208ADCC
	ldr r3, _0208ADD4 ; =sub_02025224
	ldr r0, _0208ADD8 ; =0x021038D4
	bx r3
	nop
_0208ADD4: .word sub_02025224
_0208ADD8: .word 0x021038D4
	thumb_func_end sub_0208ADCC

	thumb_func_start sub_0208ADDC
sub_0208ADDC: ; 0x0208ADDC
	push {r3, lr}
	ldr r0, _0208AE00 ; =0x021038D4
	bl sub_02025224
	mov r1, #0
	mvn r1, r1
	cmp r0, r1
	bne _0208ADFE
	ldr r0, _0208AE04 ; =0x021038AC
	bl sub_02025320
	cmp r0, #1
	bne _0208ADFA
	mov r0, #4
	pop {r3, pc}
_0208ADFA:
	mov r0, #0
	mvn r0, r0
_0208ADFE:
	pop {r3, pc}
	.balign 4, 0
_0208AE00: .word 0x021038D4
_0208AE04: .word 0x021038AC
	thumb_func_end sub_0208ADDC

	thumb_func_start sub_0208AE08
sub_0208AE08: ; 0x0208AE08
	push {r3, lr}
	ldr r0, _0208AE3C ; =0x021038D4
	bl sub_02025224
	mov r1, #0
	mvn r1, r1
	cmp r0, r1
	bne _0208AE38
	ldr r0, _0208AE40 ; =0x021038B0
	bl sub_02025320
	cmp r0, #1
	bne _0208AE26
	mov r0, #4
	pop {r3, pc}
_0208AE26:
	ldr r0, _0208AE44 ; =0x021038AC
	bl sub_02025320
	cmp r0, #1
	bne _0208AE34
	mov r0, #5
	pop {r3, pc}
_0208AE34:
	mov r0, #0
	mvn r0, r0
_0208AE38:
	pop {r3, pc}
	nop
_0208AE3C: .word 0x021038D4
_0208AE40: .word 0x021038B0
_0208AE44: .word 0x021038AC
	thumb_func_end sub_0208AE08

	thumb_func_start sub_0208AE48
sub_0208AE48: ; 0x0208AE48
	push {r3, lr}
	ldr r0, _0208AE7C ; =0x021038D4
	bl sub_02025224
	mov r1, #0
	mvn r1, r1
	cmp r0, r1
	bne _0208AE78
	ldr r0, _0208AE80 ; =0x021038B4
	bl sub_02025320
	cmp r0, #1
	bne _0208AE66
	mov r0, #4
	pop {r3, pc}
_0208AE66:
	ldr r0, _0208AE84 ; =0x021038AC
	bl sub_02025320
	cmp r0, #1
	bne _0208AE74
	mov r0, #5
	pop {r3, pc}
_0208AE74:
	mov r0, #0
	mvn r0, r0
_0208AE78:
	pop {r3, pc}
	nop
_0208AE7C: .word 0x021038D4
_0208AE80: .word 0x021038B4
_0208AE84: .word 0x021038AC
	thumb_func_end sub_0208AE48

	thumb_func_start sub_0208AE88
sub_0208AE88: ; 0x0208AE88
	push {r3, lr}
	ldr r0, _0208AEAC ; =0x021038B4
	bl sub_02025320
	cmp r0, #1
	bne _0208AE98
	mov r0, #0
	pop {r3, pc}
_0208AE98:
	ldr r0, _0208AEB0 ; =0x021038AC
	bl sub_02025320
	cmp r0, #1
	bne _0208AEA6
	mov r0, #1
	pop {r3, pc}
_0208AEA6:
	mov r0, #0
	mvn r0, r0
	pop {r3, pc}
	.balign 4, 0
_0208AEAC: .word 0x021038B4
_0208AEB0: .word 0x021038AC
	thumb_func_end sub_0208AE88

	thumb_func_start sub_0208AEB4
sub_0208AEB4: ; 0x0208AEB4
	ldr r3, _0208AEBC ; =sub_02025224
	ldr r0, _0208AEC0 ; =0x021038B8
	bx r3
	nop
_0208AEBC: .word sub_02025224
_0208AEC0: .word 0x021038B8
	thumb_func_end sub_0208AEB4

	thumb_func_start sub_0208AEC4
sub_0208AEC4: ; 0x0208AEC4
	ldr r3, _0208AECC ; =sub_02025224
	ldr r0, _0208AED0 ; =0x021039E8
	bx r3
	nop
_0208AECC: .word sub_02025224
_0208AED0: .word 0x021039E8
	thumb_func_end sub_0208AEC4

	thumb_func_start sub_0208AED4
sub_0208AED4: ; 0x0208AED4
	push {r4, lr}
	add r4, r0, #0
	ldr r0, _0208AF00 ; =0x00000428
	mov r1, #1
	ldr r0, [r4, r0]
	bl sub_020248F0
	ldr r0, _0208AF04 ; =0x0000042C
	mov r1, #1
	ldr r0, [r4, r0]
	bl sub_02024830
	add r0, r4, #0
	bl sub_0208BCB4
	add r0, r4, #0
	mov r1, #1
	bl sub_0208AF08
	mov r0, #9
	pop {r4, pc}
	nop
_0208AF00: .word 0x00000428
_0208AF04: .word 0x0000042C
	thumb_func_end sub_0208AED4

	thumb_func_start sub_0208AF08
sub_0208AF08: ; 0x0208AF08
	push {r4, lr}
	add r4, r0, #0
	cmp r1, #1
	bne _0208AF34
	mov r0, #0x7d
	lsl r0, r0, #4
	mov r1, #0
	ldr r0, [r4, r0]
	add r2, r1, #0
	mov r3, #0x12
	bl sub_020196E8
	ldr r0, _0208AF6C ; =0x00000448
	mov r1, #0
	ldr r0, [r4, r0]
	bl sub_02024830
	add r0, r4, #0
	mov r1, #1
	bl sub_0208DC68
	pop {r4, pc}
_0208AF34:
	mov r1, #0x8b
	lsl r1, r1, #2
	ldr r1, [r4, r1]
	ldrh r1, [r1, #0x18]
	cmp r1, #0
	beq _0208AF5C
	mov r0, #0x7d
	lsl r0, r0, #4
	ldr r0, [r4, r0]
	mov r1, #1
	mov r2, #0
	mov r3, #0x12
	bl sub_020196E8
	ldr r0, _0208AF6C ; =0x00000448
	mov r1, #1
	ldr r0, [r4, r0]
	bl sub_02024830
	b _0208AF60
_0208AF5C:
	bl sub_0208AF70
_0208AF60:
	add r0, r4, #0
	mov r1, #0
	bl sub_0208DC68
	pop {r4, pc}
	nop
_0208AF6C: .word 0x00000448
	thumb_func_end sub_0208AF08

	thumb_func_start sub_0208AF70
sub_0208AF70: ; 0x0208AF70
	push {r4, lr}
	sub sp, #0x10
	add r4, r0, #0
	mov r0, #0x12
	str r0, [sp]
	mov r0, #0x11
	str r0, [sp, #4]
	mov r1, #6
	str r1, [sp, #8]
	str r0, [sp, #0xc]
	ldr r0, [r4]
	ldr r2, _0208AF9C ; =0x00003006
	mov r3, #0
	bl FillBgTilemapRect
	ldr r0, [r4]
	mov r1, #6
	bl ScheduleBgTilemapBufferTransfer
	add sp, #0x10
	pop {r4, pc}
	nop
_0208AF9C: .word 0x00003006
	thumb_func_end sub_0208AF70

	thumb_func_start sub_0208AFA0
sub_0208AFA0: ; 0x0208AFA0
	push {r4, lr}
	add r4, r0, #0
	mov r0, #0x8b
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	ldrb r0, [r0, #0x12]
	cmp r0, #1
	beq _0208AFE6
	cmp r1, #1
	bne _0208AFCE
	mov r0, #0x7d
	lsl r0, r0, #4
	ldr r0, [r4, r0]
	mov r1, #2
	mov r2, #1
	mov r3, #0x10
	bl sub_020196E8
	add r0, r4, #0
	mov r1, #1
	bl sub_0208DD20
	pop {r4, pc}
_0208AFCE:
	mov r0, #0x7d
	lsl r0, r0, #4
	ldr r0, [r4, r0]
	mov r1, #3
	mov r2, #1
	mov r3, #0x10
	bl sub_020196E8
	add r0, r4, #0
	mov r1, #0
	bl sub_0208DD20
_0208AFE6:
	pop {r4, pc}
	thumb_func_end sub_0208AFA0

	thumb_func_start sub_0208AFE8
sub_0208AFE8: ; 0x0208AFE8
	push {r3, r4, r5, r6}
	ldr r5, _0208B040 ; =0x000007C8
	add r4, r0, #0
	strb r2, [r4, r5]
	add r0, r5, #1
	strb r3, [r4, r0]
	add r2, sp, #0
	ldrb r3, [r2, #0x10]
	add r0, r5, #2
	strb r3, [r4, r0]
	ldrb r3, [r2, #0x14]
	add r0, r5, #3
	strb r3, [r4, r0]
	add r0, r5, #4
	ldrb r3, [r4, r0]
	mov r0, #0xf
	ldrb r6, [r2, #0x18]
	bic r3, r0
	mov r0, #0xf
	and r6, r0
	orr r6, r3
	add r3, r5, #4
	strb r6, [r4, r3]
	ldrb r2, [r2, #0x1c]
	ldrb r3, [r4, r3]
	mov r6, #0xf0
	lsl r2, r2, #0x1c
	bic r3, r6
	lsr r2, r2, #0x18
	orr r3, r2
	add r2, r5, #4
	strb r3, [r4, r2]
	add r2, r5, #5
	strb r1, [r4, r2]
	mov r2, #0
	add r1, r5, #6
	strb r2, [r4, r1]
	add r1, sp, #0x20
	ldrb r2, [r1]
	add r1, r5, #7
	strb r2, [r4, r1]
	pop {r3, r4, r5, r6}
	bx lr
	nop
_0208B040: .word 0x000007C8
	thumb_func_end sub_0208AFE8

	thumb_func_start sub_0208B044
sub_0208B044: ; 0x0208B044
	push {lr}
	sub sp, #0x14
	mov r2, #9
	str r2, [sp]
	mov r2, #4
	str r2, [sp, #4]
	mov r2, #1
	str r2, [sp, #8]
	mov r2, #0
	str r2, [sp, #0xc]
	str r1, [sp, #0x10]
	mov r1, #6
	mov r2, #0x17
	mov r3, #0x14
	bl sub_0208AFE8
	add sp, #0x14
	pop {pc}
	thumb_func_end sub_0208B044

	thumb_func_start sub_0208B068
sub_0208B068: ; 0x0208B068
	push {lr}
	sub sp, #0x14
	mov r2, #0xf
	str r2, [sp]
	mov r2, #4
	str r2, [sp, #4]
	mov r2, #1
	str r2, [sp, #8]
	mov r3, #0
	str r3, [sp, #0xc]
	str r1, [sp, #0x10]
	mov r1, #6
	mov r3, #0x13
	bl sub_0208AFE8
	add sp, #0x14
	pop {pc}
	.balign 4, 0
	thumb_func_end sub_0208B068

	thumb_func_start sub_0208B08C
sub_0208B08C: ; 0x0208B08C
	push {lr}
	sub sp, #0x14
	mov r2, #0xa
	str r2, [sp]
	mov r2, #2
	str r2, [sp, #4]
	mov r2, #1
	str r2, [sp, #8]
	mov r3, #0
	str r3, [sp, #0xc]
	str r1, [sp, #0x10]
	mov r1, #6
	mov r3, #0x11
	bl sub_0208AFE8
	add sp, #0x14
	pop {pc}
	.balign 4, 0
	thumb_func_end sub_0208B08C

	thumb_func_start sub_0208B0B0
sub_0208B0B0: ; 0x0208B0B0
	push {lr}
	sub sp, #0x14
	cmp r1, #0
	bne _0208B0D6
	mov r1, #6
	str r1, [sp]
	mov r3, #3
	str r3, [sp, #4]
	mov r3, #1
	str r3, [sp, #8]
	mov r3, #0
	str r3, [sp, #0xc]
	str r2, [sp, #0x10]
	mov r2, #0x18
	mov r3, #5
	bl sub_0208AFE8
	add sp, #0x14
	pop {pc}
_0208B0D6:
	mov r1, #6
	str r1, [sp]
	mov r3, #3
	str r3, [sp, #4]
	mov r3, #1
	str r3, [sp, #8]
	mov r3, #0
	str r3, [sp, #0xc]
	str r2, [sp, #0x10]
	mov r2, #0x18
	mov r3, #0xd
	bl sub_0208AFE8
	add sp, #0x14
	pop {pc}
	thumb_func_end sub_0208B0B0

	thumb_func_start sub_0208B0F4
sub_0208B0F4: ; 0x0208B0F4
	push {lr}
	sub sp, #0x14
	mov r2, #6
	str r2, [sp]
	mov r2, #4
	str r2, [sp, #4]
	mov r2, #1
	str r2, [sp, #8]
	mov r2, #0
	str r2, [sp, #0xc]
	str r1, [sp, #0x10]
	mov r1, #5
	mov r2, #0x1a
	mov r3, #0x1d
	bl sub_0208AFE8
	add sp, #0x14
	pop {pc}
	thumb_func_end sub_0208B0F4

	thumb_func_start sub_0208B118
sub_0208B118: ; 0x0208B118
	push {r4, lr}
	sub sp, #0x10
	mov r1, #0
	mvn r1, r1
	add r4, r0, #0
	bl sub_0208A2E0
	mov r1, #0
	mvn r1, r1
	cmp r0, r1
	beq _0208B140
	mov r0, #0x7d
	lsl r0, r0, #4
	mov r1, #5
	ldr r0, [r4, r0]
	mov r2, #0x18
	add r3, r1, #0
	bl sub_020196E8
	b _0208B162
_0208B140:
	mov r0, #5
	str r0, [sp]
	mov r1, #6
	str r1, [sp, #4]
	mov r0, #3
	str r0, [sp, #8]
	mov r0, #0x10
	str r0, [sp, #0xc]
	ldr r0, [r4]
	mov r2, #1
	mov r3, #0x18
	bl FillBgTilemapRect
	ldr r0, [r4]
	mov r1, #6
	bl ScheduleBgTilemapBufferTransfer
_0208B162:
	add r0, r4, #0
	mov r1, #1
	bl sub_0208A2E0
	mov r1, #0
	mvn r1, r1
	cmp r0, r1
	beq _0208B186
	mov r0, #0x7d
	lsl r0, r0, #4
	ldr r0, [r4, r0]
	mov r1, #6
	mov r2, #0x18
	mov r3, #0xd
	bl sub_020196E8
	add sp, #0x10
	pop {r4, pc}
_0208B186:
	mov r0, #0xd
	str r0, [sp]
	mov r1, #6
	str r1, [sp, #4]
	mov r0, #3
	str r0, [sp, #8]
	mov r0, #0x10
	str r0, [sp, #0xc]
	ldr r0, [r4]
	mov r2, #1
	mov r3, #0x18
	bl FillBgTilemapRect
	ldr r0, [r4]
	mov r1, #6
	bl ScheduleBgTilemapBufferTransfer
	add sp, #0x10
	pop {r4, pc}
	thumb_func_end sub_0208B118

	thumb_func_start sub_0208B1AC
sub_0208B1AC: ; 0x0208B1AC
	push {r4, r5, r6, r7, lr}
	sub sp, #0x44
	add r4, r0, #0
	mov r0, #0x10
	mov r1, #1
	bl GX_EngineAToggleLayers
	mov r0, #0x10
	mov r1, #1
	bl sub_02022CC8
	mov r0, #0x20
	mov r1, #0x13
	bl sub_0202055C
	mov r0, #0x13
	bl sub_0200CF18
	mov r1, #0xff
	lsl r1, r1, #2
	str r0, [r4, r1]
	ldr r0, [r4, r1]
	bl sub_0200CF38
	mov r7, #1
	lsl r7, r7, #0xa
	add r2, sp, #0x24
	ldr r3, _0208B24C ; =0x02103A50
	str r0, [r4, r7]
	ldmia r3!, {r0, r1}
	add r6, r2, #0
	stmia r2!, {r0, r1}
	ldmia r3!, {r0, r1}
	stmia r2!, {r0, r1}
	ldmia r3!, {r0, r1}
	stmia r2!, {r0, r1}
	ldmia r3!, {r0, r1}
	ldr r5, _0208B250 ; =0x02103A3C
	stmia r2!, {r0, r1}
	add r3, sp, #0x10
	ldmia r5!, {r0, r1}
	add r2, r3, #0
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldr r0, [r5]
	add r1, r6, #0
	str r0, [r3]
	sub r0, r7, #4
	ldr r0, [r4, r0]
	mov r3, #0x20
	bl sub_0200CF70
	sub r1, r7, #4
	ldr r0, [r4, r1]
	add r1, r1, #4
	ldr r1, [r4, r1]
	mov r2, #0x73
	bl sub_0200CFF4
	ldr r3, _0208B254 ; =0x02103A2C
	add r2, sp, #0
	mov r1, #7
_0208B22A:
	ldrh r0, [r3]
	add r3, r3, #2
	strh r0, [r2]
	add r2, r2, #2
	sub r1, r1, #1
	bne _0208B22A
	mov r1, #0xff
	lsl r1, r1, #2
	ldr r0, [r4, r1]
	add r1, r1, #4
	ldr r1, [r4, r1]
	add r2, sp, #0
	bl sub_0200D294
	add sp, #0x44
	pop {r4, r5, r6, r7, pc}
	nop
_0208B24C: .word 0x02103A50
_0208B250: .word 0x02103A3C
_0208B254: .word 0x02103A2C
	thumb_func_end sub_0208B1AC

	thumb_func_start sub_0208B258
sub_0208B258: ; 0x0208B258
	push {r4, lr}
	mov r1, #0xff
	add r4, r0, #0
	lsl r1, r1, #2
	ldr r0, [r4, r1]
	add r1, r1, #4
	ldr r1, [r4, r1]
	bl sub_0200D0E4
	mov r0, #0xff
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	bl sub_0200D108
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_0208B258

	thumb_func_start sub_0208B278
sub_0208B278: ; 0x0208B278
	push {r4, lr}
	add r4, r0, #0
	ldr r0, _0208B2B0 ; =0x00000458
	mov r1, #1
	ldr r0, [r4, r0]
	lsl r1, r1, #0xc
	bl sub_020249B0
	ldr r0, _0208B2B4 ; =0x0000045C
	mov r1, #1
	ldr r0, [r4, r0]
	lsl r1, r1, #0xc
	bl sub_020249B0
	ldr r0, _0208B2B8 ; =0x00000504
	mov r1, #1
	ldr r0, [r4, r0]
	lsl r1, r1, #0xc
	bl sub_020249B0
	ldr r0, _0208B2BC ; =0x00000508
	mov r1, #1
	ldr r0, [r4, r0]
	lsl r1, r1, #0xc
	bl sub_020249B0
	pop {r4, pc}
	nop
_0208B2B0: .word 0x00000458
_0208B2B4: .word 0x0000045C
_0208B2B8: .word 0x00000504
_0208B2BC: .word 0x00000508
	thumb_func_end sub_0208B278

	thumb_func_start sub_0208B2C0
sub_0208B2C0: ; 0x0208B2C0
	push {r3, r4, r5, r6, r7, lr}
	ldr r6, _0208B3C4 ; =0x02103A70
	ldr r7, _0208B3C8 ; =0x00000404
	add r5, r0, #0
	mov r4, #0
_0208B2CA:
	mov r0, #0xff
	mov r1, #1
	lsl r0, r0, #2
	lsl r1, r1, #0xa
	mov r2, #0x28
	mul r2, r4
	ldr r0, [r5, r0]
	ldr r1, [r5, r1]
	add r2, r6, r2
	bl sub_0200D2B4
	lsl r1, r4, #2
	add r1, r5, r1
	str r0, [r1, r7]
	add r0, r4, #1
	lsl r0, r0, #0x10
	lsr r4, r0, #0x10
	cmp r4, #0x73
	blo _0208B2CA
	add r0, r5, #0
	bl sub_0208B55C
	ldr r0, _0208B3CC ; =0x0000042C
	mov r1, #0
	ldr r0, [r5, r0]
	bl sub_02024830
	ldr r0, _0208B3D0 ; =0x000004A8
	mov r1, #0
	ldr r0, [r5, r0]
	bl sub_02024830
	ldr r0, _0208B3D4 ; =0x000004AC
	mov r1, #0
	ldr r0, [r5, r0]
	bl sub_02024830
	mov r0, #0x4b
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	mov r1, #0
	bl sub_02024830
	ldr r0, _0208B3D8 ; =0x000004B4
	mov r1, #0
	ldr r0, [r5, r0]
	bl sub_02024830
	ldr r0, _0208B3DC ; =0x000004B8
	mov r1, #0
	ldr r0, [r5, r0]
	bl sub_02024830
	ldr r0, _0208B3E0 ; =0x000004BC
	mov r1, #0
	ldr r0, [r5, r0]
	bl sub_02024830
	mov r0, #0x13
	lsl r0, r0, #6
	ldr r0, [r5, r0]
	mov r1, #0
	bl sub_02024830
	ldr r0, _0208B3E4 ; =0x000004C4
	mov r1, #0
	ldr r0, [r5, r0]
	bl sub_02024830
	ldr r0, _0208B3E8 ; =0x000004C8
	mov r1, #0
	ldr r0, [r5, r0]
	bl sub_02024830
	ldr r0, _0208B3EC ; =0x000004CC
	mov r1, #0
	ldr r0, [r5, r0]
	bl sub_02024830
	mov r0, #0x4d
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	mov r1, #0
	bl sub_02024830
	mov r0, #0x51
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	mov r1, #0
	bl sub_02024830
	ldr r0, _0208B3F0 ; =0x00000514
	mov r1, #0
	ldr r0, [r5, r0]
	bl sub_02024830
	ldr r0, _0208B3F4 ; =0x00000518
	mov r1, #0
	ldr r0, [r5, r0]
	bl sub_02024830
	ldr r0, _0208B3F8 ; =0x0000051C
	mov r1, #0
	ldr r0, [r5, r0]
	bl sub_02024830
	mov r0, #0x52
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	mov r1, #0
	bl sub_02024830
	add r0, r5, #0
	bl sub_0208B714
	add r0, r5, #0
	bl sub_0208B74C
	ldr r0, _0208B3FC ; =0x00000524
	mov r1, #0
	ldr r0, [r5, r0]
	bl sub_02024830
	pop {r3, r4, r5, r6, r7, pc}
	nop
_0208B3C4: .word 0x02103A70
_0208B3C8: .word 0x00000404
_0208B3CC: .word 0x0000042C
_0208B3D0: .word 0x000004A8
_0208B3D4: .word 0x000004AC
_0208B3D8: .word 0x000004B4
_0208B3DC: .word 0x000004B8
_0208B3E0: .word 0x000004BC
_0208B3E4: .word 0x000004C4
_0208B3E8: .word 0x000004C8
_0208B3EC: .word 0x000004CC
_0208B3F0: .word 0x00000514
_0208B3F4: .word 0x00000518
_0208B3F8: .word 0x0000051C
_0208B3FC: .word 0x00000524
	thumb_func_end sub_0208B2C0

	thumb_func_start sub_0208B400
sub_0208B400: ; 0x0208B400
	push {r4, lr}
	add r4, r0, #0
	mov r0, #0x8b
	lsl r0, r0, #2
	ldr r1, [r4, r0]
	ldrb r0, [r1, #0x11]
	cmp r0, #2
	beq _0208B430
	ldrb r0, [r1, #0x14]
	ldr r1, _0208B43C ; =0x021105B0
	ldr r2, _0208B440 ; =0x021105B1
	lsl r3, r0, #1
	ldr r0, _0208B444 ; =0x00000428
	ldrb r1, [r1, r3]
	ldrb r2, [r2, r3]
	ldr r0, [r4, r0]
	bl sub_0200DD88
	ldr r0, _0208B444 ; =0x00000428
	mov r1, #2
	ldr r0, [r4, r0]
	bl sub_020248F0
	pop {r4, pc}
_0208B430:
	ldr r0, _0208B444 ; =0x00000428
	mov r1, #0
	ldr r0, [r4, r0]
	bl sub_02024830
	pop {r4, pc}
	.balign 4, 0
_0208B43C: .word 0x021105B0
_0208B440: .word 0x021105B1
_0208B444: .word 0x00000428
	thumb_func_end sub_0208B400

	thumb_func_start sub_0208B448
sub_0208B448: ; 0x0208B448
	push {r3, r4, r5, r6, r7, lr}
	add r7, r0, #0
	ldr r0, _0208B480 ; =0x00000404
	mov r5, #0
	add r4, r7, r0
	add r6, r5, #0
_0208B454:
	lsl r0, r5, #2
	ldr r0, [r4, r0]
	add r1, r6, #0
	bl sub_02024830
	add r0, r5, #1
	lsl r0, r0, #0x18
	lsr r5, r0, #0x18
	cmp r5, #8
	blo _0208B454
	ldr r0, _0208B484 ; =0x00000458
	mov r1, #0
	ldr r0, [r7, r0]
	bl sub_02024830
	ldr r0, _0208B488 ; =0x0000045C
	mov r1, #0
	ldr r0, [r7, r0]
	bl sub_02024830
	pop {r3, r4, r5, r6, r7, pc}
	nop
_0208B480: .word 0x00000404
_0208B484: .word 0x00000458
_0208B488: .word 0x0000045C
	thumb_func_end sub_0208B448

	thumb_func_start sub_0208B48C
sub_0208B48C: ; 0x0208B48C
	push {r4, lr}
	sub sp, #8
	add r4, r0, #0
	ldr r0, _0208B4E4 ; =0x00000243
	ldrb r0, [r4, r0]
	lsl r0, r0, #0x18
	lsr r3, r0, #0x1a
	bne _0208B4A0
	mov r3, #0x19
	b _0208B4A2
_0208B4A0:
	add r3, #0x18
_0208B4A2:
	mov r0, #0
	mov r1, #0xff
	str r0, [sp]
	lsl r1, r1, #2
	str r0, [sp, #4]
	ldr r0, [r4, r1]
	add r1, r1, #4
	ldr r1, [r4, r1]
	mov r2, #0xa2
	bl sub_0200E248
	mov r0, #0
	str r0, [sp]
	mov r0, #6
	mov r1, #0xff
	ldr r3, _0208B4E4 ; =0x00000243
	str r0, [sp, #4]
	ldrb r3, [r4, r3]
	lsl r1, r1, #2
	ldr r0, [r4, r1]
	add r1, r1, #4
	lsl r3, r3, #0x18
	ldr r1, [r4, r1]
	lsr r4, r3, #0x1a
	ldr r3, _0208B4E8 ; =0x02104C68
	mov r2, #0xa2
	ldrb r3, [r3, r4]
	add r3, #0x31
	bl sub_0200E27C
	add sp, #8
	pop {r4, pc}
	nop
_0208B4E4: .word 0x00000243
_0208B4E8: .word 0x02104C68
	thumb_func_end sub_0208B48C

	thumb_func_start sub_0208B4EC
sub_0208B4EC: ; 0x0208B4EC
	push {r4, lr}
	add r4, r0, #0
	mov r0, #0xa
	lsl r0, r0, #6
	ldr r0, [r4, r0]
	lsl r0, r0, #4
	lsr r0, r0, #4
	cmp r0, #7
	bne _0208B514
	ldr r0, _0208B554 ; =0x00000454
	mov r1, #0
	ldr r0, [r4, r0]
	bl sub_02024830
	ldr r0, _0208B558 ; =0x00000524
	mov r1, #0
	ldr r0, [r4, r0]
	bl sub_02024830
	pop {r4, pc}
_0208B514:
	cmp r0, #0
	ldr r0, _0208B558 ; =0x00000524
	beq _0208B540
	ldr r0, [r4, r0]
	mov r1, #0
	bl sub_02024830
	ldr r0, _0208B554 ; =0x00000454
	mov r1, #1
	ldr r0, [r4, r0]
	bl sub_02024830
	mov r1, #0xa
	lsl r1, r1, #6
	ldr r0, _0208B554 ; =0x00000454
	ldr r1, [r4, r1]
	ldr r0, [r4, r0]
	lsl r1, r1, #4
	lsr r1, r1, #4
	bl sub_020248F0
	pop {r4, pc}
_0208B540:
	ldr r0, [r4, r0]
	mov r1, #1
	bl sub_02024830
	ldr r0, _0208B554 ; =0x00000454
	mov r1, #0
	ldr r0, [r4, r0]
	bl sub_02024830
	pop {r4, pc}
	.balign 4, 0
_0208B554: .word 0x00000454
_0208B558: .word 0x00000524
	thumb_func_end sub_0208B4EC

	thumb_func_start sub_0208B55C
sub_0208B55C: ; 0x0208B55C
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	bl sub_0208BA60
	mov r6, #0x99
	mov r4, #0
	mov r7, #3
	lsl r6, r6, #2
_0208B56C:
	lsl r0, r4, #1
	add r0, r5, r0
	ldrh r0, [r0, r6]
	cmp r0, #0
	beq _0208B596
	add r1, r7, #0
	bl sub_02073314
	add r3, r0, #0
	add r1, r4, #0
	add r1, #0xd
	add r2, r4, #5
	lsl r1, r1, #0x18
	lsl r2, r2, #0x18
	lsl r3, r3, #0x18
	add r0, r5, #0
	lsr r1, r1, #0x18
	lsr r2, r2, #0x18
	lsr r3, r3, #0x18
	bl sub_0208BA88
_0208B596:
	add r0, r4, #1
	lsl r0, r0, #0x10
	lsr r4, r0, #0x10
	cmp r4, #4
	blo _0208B56C
	add r0, r5, #0
	bl sub_0208BE70
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_0208B55C

	thumb_func_start sub_0208B5A8
sub_0208B5A8: ; 0x0208B5A8
	push {r3, r4, r5, r6, r7, lr}
	ldr r6, _0208B6FC ; =0x00000404
	add r5, r0, #0
	mov r4, #0xb
	mov r7, #0
_0208B5B2:
	lsl r0, r4, #2
	add r0, r5, r0
	ldr r0, [r0, r6]
	add r1, r7, #0
	bl sub_0200DCE0
	add r0, r4, #1
	lsl r0, r0, #0x10
	lsr r4, r0, #0x10
	cmp r4, #0x13
	bls _0208B5B2
	mov r0, #0xa
	lsl r0, r0, #6
	ldr r0, [r5, r0]
	lsl r0, r0, #3
	lsr r0, r0, #0x1f
	beq _0208B5D6
	b _0208B6F8
_0208B5D6:
	ldr r0, _0208B700 ; =0x000007BC
	ldrsb r0, [r5, r0]
	cmp r0, #0
	beq _0208B5E4
	cmp r0, #1
	beq _0208B634
	pop {r3, r4, r5, r6, r7, pc}
_0208B5E4:
	mov r0, #0x43
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	mov r1, #1
	bl sub_0200DCE0
	mov r0, #9
	lsl r0, r0, #6
	ldrb r1, [r5, r0]
	add r0, r0, #1
	ldrb r0, [r5, r0]
	cmp r1, r0
	bne _0208B60E
	mov r0, #0x43
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	mov r1, #0x6c
	mov r2, #0x30
	bl sub_0200DD88
	pop {r3, r4, r5, r6, r7, pc}
_0208B60E:
	mov r0, #0x43
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	mov r1, #0x5b
	mov r2, #0x30
	bl sub_0200DD88
	ldr r0, _0208B704 ; =0x00000434
	mov r1, #1
	ldr r0, [r5, r0]
	bl sub_0200DCE0
	ldr r0, _0208B704 ; =0x00000434
	mov r1, #0x7d
	ldr r0, [r5, r0]
	mov r2, #0x30
	bl sub_0200DD88
	pop {r3, r4, r5, r6, r7, pc}
_0208B634:
	mov r7, #0x99
	mov r4, #0
	lsl r7, r7, #2
_0208B63A:
	lsl r0, r4, #1
	add r0, r5, r0
	ldrh r0, [r0, r7]
	cmp r0, #0
	beq _0208B684
	mov r1, #3
	bl sub_02073314
	add r3, r0, #0
	add r1, r4, #0
	add r1, #0xd
	add r2, r4, #5
	lsl r1, r1, #0x18
	lsl r2, r2, #0x18
	lsl r3, r3, #0x18
	add r0, r5, #0
	lsr r1, r1, #0x18
	lsr r2, r2, #0x18
	lsr r3, r3, #0x18
	bl sub_0208BA88
	lsl r0, r4, #2
	add r6, r5, r0
	ldr r0, _0208B708 ; =0x00000438
	mov r1, #1
	ldr r0, [r6, r0]
	bl sub_0200DCE0
	ldr r0, _0208B708 ; =0x00000438
	lsl r2, r4, #5
	add r2, #0x10
	lsl r2, r2, #0x10
	ldr r0, [r6, r0]
	mov r1, #0x18
	asr r2, r2, #0x10
	bl sub_0200DD88
_0208B684:
	add r0, r4, #1
	lsl r0, r0, #0x10
	lsr r4, r0, #0x10
	cmp r4, #4
	blo _0208B63A
	mov r0, #0x8b
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	ldrh r0, [r0, #0x18]
	cmp r0, #0
	beq _0208B6C8
	mov r1, #3
	bl sub_02073314
	add r3, r0, #0
	lsl r3, r3, #0x18
	add r0, r5, #0
	mov r1, #0x11
	mov r2, #9
	lsr r3, r3, #0x18
	bl sub_0208BA88
	ldr r0, _0208B70C ; =0x00000448
	mov r1, #1
	ldr r0, [r5, r0]
	bl sub_0200DCE0
	ldr r0, _0208B70C ; =0x00000448
	mov r1, #0x18
	ldr r0, [r5, r0]
	mov r2, #0xa0
	bl sub_0200DD88
	b _0208B6D2
_0208B6C8:
	ldr r0, _0208B70C ; =0x00000448
	mov r1, #0
	ldr r0, [r5, r0]
	bl sub_0200DCE0
_0208B6D2:
	mov r0, #0x43
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	mov r1, #0xc8
	mov r2, #0x18
	bl sub_0200DD88
	ldr r0, _0208B704 ; =0x00000434
	mov r1, #0xea
	ldr r0, [r5, r0]
	mov r2, #0x18
	bl sub_0200DD88
	ldr r0, _0208B710 ; =0x0000044C
	mov r1, #0xe8
	ldr r0, [r5, r0]
	mov r2, #0x28
	bl sub_0200DD88
_0208B6F8:
	pop {r3, r4, r5, r6, r7, pc}
	nop
_0208B6FC: .word 0x00000404
_0208B700: .word 0x000007BC
_0208B704: .word 0x00000434
_0208B708: .word 0x00000438
_0208B70C: .word 0x00000448
_0208B710: .word 0x0000044C
	thumb_func_end sub_0208B5A8

	thumb_func_start sub_0208B714
sub_0208B714: ; 0x0208B714
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	mov r7, #0x15
	mov r6, #0
	add r4, r5, #0
	lsl r7, r7, #6
_0208B720:
	ldr r0, [r4, r7]
	mov r1, #0
	bl sub_02024830
	add r6, r6, #1
	add r4, r4, #4
	cmp r6, #0x19
	blt _0208B720
	mov r4, #0
	ldr r6, _0208B748 ; =0x000005A4
	add r7, r4, #0
_0208B736:
	ldr r0, [r5, r6]
	add r1, r7, #0
	bl sub_02024830
	add r4, r4, #1
	add r5, r5, #4
	cmp r4, #5
	blt _0208B736
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_0208B748: .word 0x000005A4
	thumb_func_end sub_0208B714

	thumb_func_start sub_0208B74C
sub_0208B74C: ; 0x0208B74C
	push {r3, r4, r5, r6, r7, lr}
	ldr r7, _0208B77C ; =0x000005B8
	add r5, r0, #0
	mov r4, #0
	mov r6, #6
_0208B756:
	ldr r0, _0208B77C ; =0x000005B8
	mov r1, #0
	ldr r0, [r5, r0]
	bl sub_02024830
	ldr r0, _0208B77C ; =0x000005B8
	mov r1, #1
	ldr r0, [r5, r0]
	bl sub_0202484C
	ldr r0, [r5, r7]
	sub r1, r6, r4
	bl sub_02024ADC
	add r4, r4, #1
	add r5, r5, #4
	cmp r4, #6
	blt _0208B756
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_0208B77C: .word 0x000005B8
	thumb_func_end sub_0208B74C

	thumb_func_start sub_0208B780
sub_0208B780: ; 0x0208B780
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x10
	add r7, r0, #0
	ldr r0, [sp, #0x2c]
	add r5, r1, #0
	add r1, r2, #0
	add r2, r3, #0
	str r0, [sp]
	ldr r3, [sp, #0x28]
	add r0, sp, #8
	bl sub_0208B85C
	str r0, [sp, #4]
	lsl r0, r5, #2
	mov r6, #0
	add r4, sp, #8
	add r5, r7, r0
_0208B7A2:
	ldrb r0, [r4]
	cmp r0, #0
	bne _0208B7B2
	ldr r0, [r5]
	mov r1, #0
	bl sub_02024830
	b _0208B808
_0208B7B2:
	cmp r0, #1
	bne _0208B7C8
	ldr r0, [r5]
	mov r1, #1
	bl sub_02024830
	ldr r0, [r5]
	mov r1, #3
	bl sub_020248F0
	b _0208B808
_0208B7C8:
	cmp r0, #2
	bne _0208B7DE
	ldr r0, [r5]
	mov r1, #1
	bl sub_02024830
	ldr r0, [r5]
	mov r1, #0
	bl sub_020248F0
	b _0208B808
_0208B7DE:
	cmp r0, #3
	bne _0208B7F4
	ldr r0, [r5]
	mov r1, #1
	bl sub_02024830
	ldr r0, [r5]
	mov r1, #1
	bl sub_020248F0
	b _0208B808
_0208B7F4:
	cmp r0, #4
	bne _0208B808
	ldr r0, [r5]
	mov r1, #1
	bl sub_02024830
	ldr r0, [r5]
	mov r1, #2
	bl sub_020248F0
_0208B808:
	add r6, r6, #1
	add r4, r4, #1
	add r5, r5, #4
	cmp r6, #5
	blt _0208B7A2
	ldr r0, [sp, #4]
	cmp r0, #0
	bne _0208B828
	ldr r0, [sp, #0x30]
	mov r1, #0
	lsl r0, r0, #2
	ldr r0, [r7, r0]
	bl sub_02024830
	add sp, #0x10
	pop {r3, r4, r5, r6, r7, pc}
_0208B828:
	ble _0208B842
	ldr r0, [sp, #0x30]
	mov r1, #1
	lsl r4, r0, #2
	ldr r0, [r7, r4]
	bl sub_02024830
	ldr r0, [r7, r4]
	mov r1, #4
	bl sub_020248F0
	add sp, #0x10
	pop {r3, r4, r5, r6, r7, pc}
_0208B842:
	bge _0208B858
	ldr r0, [sp, #0x30]
	mov r1, #1
	lsl r4, r0, #2
	ldr r0, [r7, r4]
	bl sub_02024830
	ldr r0, [r7, r4]
	mov r1, #5
	bl sub_020248F0
_0208B858:
	add sp, #0x10
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_0208B780

	thumb_func_start sub_0208B85C
sub_0208B85C: ; 0x0208B85C
	push {r3, r4, r5, r6}
	add r3, r3, #2
	mov r4, #0
	lsl r3, r3, #0x18
	lsr r3, r3, #0x18
	mov r5, #1
	add r6, r4, #0
_0208B86A:
	cmp r4, r1
	ble _0208B872
	strb r6, [r0, r4]
	b _0208B87C
_0208B872:
	cmp r4, r2
	ble _0208B87A
	strb r5, [r0, r4]
	b _0208B87C
_0208B87A:
	strb r3, [r0, r4]
_0208B87C:
	add r4, r4, #1
	cmp r4, #5
	blt _0208B86A
	ldr r0, [sp, #0x10]
	cmp r0, #0
	ble _0208B88E
	mov r0, #1
	pop {r3, r4, r5, r6}
	bx lr
_0208B88E:
	bge _0208B894
	mov r0, #1
	b _0208B896
_0208B894:
	mov r0, #0
_0208B896:
	neg r0, r0
	pop {r3, r4, r5, r6}
	bx lr
	thumb_func_end sub_0208B85C

	thumb_func_start sub_0208B89C
sub_0208B89C: ; 0x0208B89C
	push {r3, r4, r5, lr}
	sub sp, #0x30
	ldr r1, _0208B9C0 ; =0x000007BC
	add r5, r0, #0
	ldrsb r1, [r5, r1]
	cmp r1, #2
	beq _0208B8AC
	b _0208B9B6
_0208B8AC:
	mov r1, #0x8b
	lsl r1, r1, #2
	ldr r1, [r5, r1]
	ldr r1, [r1, #0x34]
	cmp r1, #0
	beq _0208B9B6
	bl sub_0208A520
	add r4, r0, #0
	add r0, sp, #0x14
	mov r1, #0
	mov r2, #5
	bl MIi_CpuFill8
	add r1, sp, #0x18
	add r0, r4, #0
	add r1, #2
	bl sub_020730B4
	mov r0, #0x8b
	lsl r0, r0, #2
	ldr r2, [r5, r0]
	ldrb r0, [r2, #0x11]
	cmp r0, #1
	bne _0208B8E8
	ldr r0, [r2]
	ldrb r2, [r2, #0x14]
	add r1, sp, #0x14
	bl sub_02074670
_0208B8E8:
	add r0, sp, #0xc
	add r1, r4, #0
	add r2, sp, #0x14
	mov r3, #0x13
	bl sub_02073248
	add r3, sp, #0xc
	ldrb r0, [r3, #6]
	mov r1, #0x4f
	str r0, [sp]
	mov r0, #0xc
	ldrsb r0, [r3, r0]
	str r0, [sp, #4]
	mov r0, #0x68
	str r0, [sp, #8]
	ldrh r2, [r3, #0x1e]
	ldrh r3, [r3]
	ldr r0, _0208B9C4 ; =0x00000404
	lsl r2, r2, #0x1a
	lsl r3, r3, #0x11
	add r0, r5, r0
	lsr r2, r2, #0x1d
	lsr r3, r3, #0x1d
	bl sub_0208B780
	add r3, sp, #0xc
	ldrb r0, [r3, #2]
	mov r1, #0x54
	str r0, [sp]
	mov r0, #8
	ldrsb r0, [r3, r0]
	str r0, [sp, #4]
	mov r0, #0x69
	str r0, [sp, #8]
	ldrh r2, [r3, #0xe]
	ldrh r3, [r3]
	ldr r0, _0208B9C4 ; =0x00000404
	lsl r2, r2, #0x1a
	lsl r3, r3, #0x1d
	add r0, r5, r0
	lsr r2, r2, #0x1d
	lsr r3, r3, #0x1d
	bl sub_0208B780
	add r3, sp, #0xc
	ldrb r0, [r3, #4]
	mov r1, #0x59
	str r0, [sp]
	mov r0, #0xa
	ldrsb r0, [r3, r0]
	str r0, [sp, #4]
	mov r0, #0x6a
	str r0, [sp, #8]
	ldrh r2, [r3, #0x16]
	ldrh r3, [r3]
	ldr r0, _0208B9C4 ; =0x00000404
	lsl r2, r2, #0x1a
	lsl r3, r3, #0x17
	add r0, r5, r0
	lsr r2, r2, #0x1d
	lsr r3, r3, #0x1d
	bl sub_0208B780
	add r3, sp, #0xc
	ldrb r0, [r3, #3]
	mov r1, #0x5e
	str r0, [sp]
	mov r0, #9
	ldrsb r0, [r3, r0]
	str r0, [sp, #4]
	mov r0, #0x6b
	str r0, [sp, #8]
	ldrh r2, [r3, #0x12]
	ldrh r3, [r3]
	ldr r0, _0208B9C4 ; =0x00000404
	lsl r2, r2, #0x1a
	lsl r3, r3, #0x1a
	add r0, r5, r0
	lsr r2, r2, #0x1d
	lsr r3, r3, #0x1d
	bl sub_0208B780
	add r3, sp, #0xc
	ldrb r0, [r3, #5]
	mov r1, #0x63
	str r0, [sp]
	mov r0, #0xb
	ldrsb r0, [r3, r0]
	str r0, [sp, #4]
	mov r0, #0x6c
	str r0, [sp, #8]
	ldrh r2, [r3, #0x1a]
	ldrh r3, [r3]
	ldr r0, _0208B9C4 ; =0x00000404
	lsl r2, r2, #0x1a
	lsl r3, r3, #0x14
	add r0, r5, r0
	lsr r2, r2, #0x1d
	lsr r3, r3, #0x1d
	bl sub_0208B780
	add sp, #0x30
	pop {r3, r4, r5, pc}
_0208B9B6:
	add r0, r5, #0
	bl sub_0208B714
	add sp, #0x30
	pop {r3, r4, r5, pc}
	.balign 4, 0
_0208B9C0: .word 0x000007BC
_0208B9C4: .word 0x00000404
	thumb_func_end sub_0208B89C

	thumb_func_start sub_0208B9C8
sub_0208B9C8: ; 0x0208B9C8
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	ldr r0, _0208BA50 ; =0x000007BC
	ldrsb r0, [r5, r0]
	cmp r0, #0
	bne _0208BA36
	ldr r0, _0208BA54 ; =0x00000299
	ldrb r0, [r5, r0]
	cmp r0, #0
	beq _0208B9FE
	ldr r0, _0208BA58 ; =0x000005CC
	mov r1, #1
	ldr r0, [r5, r0]
	bl sub_02024830
	mov r4, #0
	ldr r6, _0208BA5C ; =0x000005B8
	add r7, r4, #0
_0208B9EC:
	ldr r0, [r5, r6]
	add r1, r7, #0
	bl sub_02024830
	add r4, r4, #1
	add r5, r5, #4
	cmp r4, #5
	blt _0208B9EC
	pop {r3, r4, r5, r6, r7, pc}
_0208B9FE:
	mov r7, #0xa5
	mov r6, #0
	add r4, r5, #0
	lsl r7, r7, #2
_0208BA06:
	add r0, r5, r6
	ldrb r0, [r0, r7]
	cmp r0, #0
	ldr r0, _0208BA5C ; =0x000005B8
	beq _0208BA1A
	ldr r0, [r4, r0]
	mov r1, #1
	bl sub_02024830
	b _0208BA22
_0208BA1A:
	ldr r0, [r4, r0]
	mov r1, #0
	bl sub_02024830
_0208BA22:
	add r6, r6, #1
	add r4, r4, #4
	cmp r6, #5
	blt _0208BA06
	ldr r0, _0208BA58 ; =0x000005CC
	mov r1, #0
	ldr r0, [r5, r0]
	bl sub_02024830
	pop {r3, r4, r5, r6, r7, pc}
_0208BA36:
	mov r4, #0
	ldr r6, _0208BA5C ; =0x000005B8
	add r7, r4, #0
_0208BA3C:
	ldr r0, [r5, r6]
	add r1, r7, #0
	bl sub_02024830
	add r4, r4, #1
	add r5, r5, #4
	cmp r4, #6
	blt _0208BA3C
	pop {r3, r4, r5, r6, r7, pc}
	nop
_0208BA50: .word 0x000007BC
_0208BA54: .word 0x00000299
_0208BA58: .word 0x000005CC
_0208BA5C: .word 0x000005B8
	thumb_func_end sub_0208B9C8

	thumb_func_start sub_0208BA60
sub_0208BA60: ; 0x0208BA60
	push {r4, lr}
	mov r3, #9
	add r4, r0, #0
	lsl r3, r3, #6
	ldrb r3, [r4, r3]
	mov r1, #0xb
	mov r2, #3
	bl sub_0208BA88
	ldr r3, _0208BA84 ; =0x00000241
	add r0, r4, #0
	ldrb r3, [r4, r3]
	mov r1, #0xc
	mov r2, #4
	bl sub_0208BA88
	pop {r4, pc}
	nop
_0208BA84: .word 0x00000241
	thumb_func_end sub_0208BA60

	thumb_func_start sub_0208BA88
sub_0208BA88: ; 0x0208BA88
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	add r7, r3, #0
	add r5, r0, #0
	add r4, r1, #0
	add r6, r2, #0
	bl sub_020776B4
	str r0, [sp, #8]
	add r0, r7, #0
	bl sub_02077678
	add r3, r0, #0
	mov r0, #1
	str r0, [sp]
	mov r1, #0xff
	str r6, [sp, #4]
	lsl r1, r1, #2
	ldr r0, [r5, r1]
	add r1, r1, #4
	ldr r1, [r5, r1]
	ldr r2, [sp, #8]
	bl sub_0200E248
	add r0, r7, #0
	bl sub_0207769C
	add r2, r0, #0
	lsl r0, r4, #2
	add r1, r5, r0
	ldr r0, _0208BAD4 ; =0x00000404
	ldr r0, [r1, r0]
	add r1, r2, #3
	bl sub_0200DD08
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
	nop
_0208BAD4: .word 0x00000404
	thumb_func_end sub_0208BA88

	thumb_func_start sub_0208BAD8
sub_0208BAD8: ; 0x0208BAD8
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #8
	add r5, r0, #0
	add r0, r1, #0
	ldrb r0, [r0]
	str r1, [sp]
	str r2, [sp, #4]
	lsl r0, r0, #5
	add r0, #0x10
	lsl r0, r0, #0x10
	add r4, r3, #0
	asr r7, r0, #0x10
	mov r6, #0
_0208BAF2:
	ldr r0, _0208BB20 ; =0x00000438
	ldr r1, [sp, #4]
	ldr r0, [r5, r0]
	add r2, r4, #0
	bl sub_0200DE00
	mov r0, #0
	ldrsh r0, [r4, r0]
	cmp r7, r0
	bne _0208BB0E
	ldr r0, [sp]
	add sp, #8
	strb r6, [r0]
	pop {r3, r4, r5, r6, r7, pc}
_0208BB0E:
	add r0, r6, #1
	lsl r0, r0, #0x10
	asr r6, r0, #0x10
	add r5, r5, #4
	cmp r6, #4
	blt _0208BAF2
	add sp, #8
	pop {r3, r4, r5, r6, r7, pc}
	nop
_0208BB20: .word 0x00000438
	thumb_func_end sub_0208BAD8

	thumb_func_start sub_0208BB24
sub_0208BB24: ; 0x0208BB24
	push {r0, r1, r2, r3}
	push {r4, lr}
	sub sp, #8
	add r2, sp, #4
	add r1, sp, #0x14
	add r2, #2
	add r3, sp, #4
	add r4, r0, #0
	bl sub_0208BAD8
	add r2, sp, #0
	add r0, r4, #0
	add r1, sp, #0x18
	add r2, #2
	add r3, sp, #0
	bl sub_0208BAD8
	add r0, sp, #0x10
	ldrb r0, [r0, #4]
	add r3, sp, #0
	mov r2, #0
	add r0, #0xd
	lsl r0, r0, #2
	add r1, r4, r0
	ldr r0, _0208BB88 ; =0x00000404
	ldrsh r2, [r3, r2]
	ldr r0, [r1, r0]
	mov r1, #2
	ldrsh r1, [r3, r1]
	bl sub_0200DD88
	add r0, sp, #0x10
	ldrb r0, [r0, #8]
	add r3, sp, #0
	mov r2, #4
	add r0, #0xd
	lsl r0, r0, #2
	add r1, r4, r0
	ldr r0, _0208BB88 ; =0x00000404
	ldrsh r2, [r3, r2]
	ldr r0, [r1, r0]
	mov r1, #6
	ldrsh r1, [r3, r1]
	bl sub_0200DD88
	add sp, #8
	pop {r4}
	pop {r3}
	add sp, #0x10
	bx r3
	.balign 4, 0
_0208BB88: .word 0x00000404
	thumb_func_end sub_0208BB24

	thumb_func_start sub_0208BB8C
sub_0208BB8C: ; 0x0208BB8C
	push {r4, r5, r6, lr}
	sub sp, #8
	add r5, r0, #0
	add r0, r1, #0
	mov r1, #1
	bl sub_02073314
	add r4, r0, #0
	bl sub_02077830
	add r6, r0, #0
	add r0, r4, #0
	bl sub_02077800
	add r3, r0, #0
	mov r0, #1
	mov r1, #0xff
	str r0, [sp]
	mov r0, #0xa
	lsl r1, r1, #2
	str r0, [sp, #4]
	ldr r0, [r5, r1]
	add r1, r1, #4
	ldr r1, [r5, r1]
	add r2, r6, #0
	bl sub_0200E248
	add r0, r4, #0
	bl sub_02077818
	add r1, r0, #0
	ldr r0, _0208BBD8 ; =0x0000044C
	add r1, r1, #3
	ldr r0, [r5, r0]
	bl sub_0200DD08
	add sp, #8
	pop {r4, r5, r6, pc}
	.balign 4, 0
_0208BBD8: .word 0x0000044C
	thumb_func_end sub_0208BB8C

	thumb_func_start sub_0208BBDC
sub_0208BBDC: ; 0x0208BBDC
	push {r4, lr}
	add r4, r0, #0
	ldr r0, _0208BC70 ; =0x000007BD
	ldrb r0, [r4, r0]
	lsl r0, r0, #0x1c
	lsr r2, r0, #0x1c
	cmp r2, #4
	beq _0208BBF2
	cmp r2, #5
	beq _0208BC2E
	b _0208BC52
_0208BBF2:
	mov r0, #0x8b
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	ldrb r0, [r0, #0x12]
	cmp r0, #2
	ldr r0, _0208BC74 ; =0x00000428
	bne _0208BC12
	lsl r2, r2, #5
	add r2, #0x28
	lsl r2, r2, #0x10
	ldr r0, [r4, r0]
	mov r1, #0x44
	asr r2, r2, #0x10
	bl sub_0200DD88
	b _0208BC22
_0208BC12:
	lsl r2, r2, #5
	add r2, #0x18
	lsl r2, r2, #0x10
	ldr r0, [r4, r0]
	mov r1, #0x44
	asr r2, r2, #0x10
	bl sub_0200DD88
_0208BC22:
	ldr r0, _0208BC74 ; =0x00000428
	mov r1, #0
	ldr r0, [r4, r0]
	bl sub_020248F0
	pop {r4, pc}
_0208BC2E:
	mov r0, #0x8b
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	ldrb r0, [r0, #0x12]
	cmp r0, #2
	bne _0208BC6E
	ldr r0, _0208BC74 ; =0x00000428
	mov r1, #0xdc
	ldr r0, [r4, r0]
	mov r2, #0xb0
	bl sub_0200DD88
	ldr r0, _0208BC74 ; =0x00000428
	mov r1, #3
	ldr r0, [r4, r0]
	bl sub_020248F0
	pop {r4, pc}
_0208BC52:
	ldr r0, _0208BC74 ; =0x00000428
	lsl r2, r2, #5
	add r2, #0x18
	lsl r2, r2, #0x10
	ldr r0, [r4, r0]
	mov r1, #0x44
	asr r2, r2, #0x10
	bl sub_0200DD88
	ldr r0, _0208BC74 ; =0x00000428
	mov r1, #0
	ldr r0, [r4, r0]
	bl sub_020248F0
_0208BC6E:
	pop {r4, pc}
	.balign 4, 0
_0208BC70: .word 0x000007BD
_0208BC74: .word 0x00000428
	thumb_func_end sub_0208BBDC

	thumb_func_start sub_0208BC78
sub_0208BC78: ; 0x0208BC78
	push {r3, r4, lr}
	sub sp, #4
	add r4, r0, #0
	ldr r0, _0208BCAC ; =0x00000428
	add r1, sp, #0
	ldr r0, [r4, r0]
	add r1, #2
	add r2, sp, #0
	bl sub_0200DE00
	ldr r0, _0208BCB0 ; =0x0000042C
	add r3, sp, #0
	mov r1, #2
	mov r2, #0
	ldrsh r1, [r3, r1]
	ldrsh r2, [r3, r2]
	ldr r0, [r4, r0]
	bl sub_0200DD88
	ldr r0, _0208BCB0 ; =0x0000042C
	mov r1, #1
	ldr r0, [r4, r0]
	bl sub_02024830
	add sp, #4
	pop {r3, r4, pc}
	.balign 4, 0
_0208BCAC: .word 0x00000428
_0208BCB0: .word 0x0000042C
	thumb_func_end sub_0208BC78

	thumb_func_start sub_0208BCB4
sub_0208BCB4: ; 0x0208BCB4
	push {r4, lr}
	add r4, r0, #0
	ldr r0, _0208BCD0 ; =0x0000042C
	mov r1, #0x44
	ldr r0, [r4, r0]
	mov r2, #0xa8
	bl sub_0200DD88
	ldr r0, _0208BCD0 ; =0x0000042C
	mov r1, #0
	ldr r0, [r4, r0]
	bl sub_020248F0
	pop {r4, pc}
	.balign 4, 0
_0208BCD0: .word 0x0000042C
	thumb_func_end sub_0208BCB4

	thumb_func_start sub_0208BCD4
sub_0208BCD4: ; 0x0208BCD4
	push {r3, r4, r5, r6, r7, lr}
	mov r2, #0x1f
	lsl r2, r2, #6
	mov r1, #0
	strb r1, [r0, r2]
	add r3, r2, #3
	strb r1, [r0, r3]
	add r3, r2, #2
	strb r1, [r0, r3]
	ldr r3, _0208BD30 ; =0x0000027A
	ldrb r3, [r0, r3]
	cmp r3, #0
	bne _0208BCF4
	add r2, r2, #1
	strb r1, [r0, r2]
	b _0208BD0A
_0208BCF4:
	cmp r3, #0xff
	bne _0208BD00
	mov r3, #0xc
	add r1, r2, #1
	strb r3, [r0, r1]
	b _0208BD0A
_0208BD00:
	mov r1, #0xc
	mul r1, r3
	asr r3, r1, #8
	add r1, r2, #1
	strb r3, [r0, r1]
_0208BD0A:
	ldr r7, _0208BD34 ; =0x00000404
	add r5, r0, #0
	mov r4, #0x1d
	add r5, #0x74
	add r6, r7, #0
_0208BD14:
	ldr r0, [r5, r7]
	mov r1, #0
	bl sub_02024830
	ldr r0, [r5, r6]
	mov r1, #0
	bl sub_020249D4
	add r4, r4, #1
	add r5, r5, #4
	cmp r4, #0x28
	bls _0208BD14
	pop {r3, r4, r5, r6, r7, pc}
	nop
_0208BD30: .word 0x0000027A
_0208BD34: .word 0x00000404
	thumb_func_end sub_0208BCD4

	thumb_func_start sub_0208BD38
sub_0208BD38: ; 0x0208BD38
	push {r3, r4, r5, r6, r7, lr}
	add r6, r0, #0
	mov r4, #0
	add r5, r6, #0
	mov r7, #1
_0208BD42:
	mov r0, #0x9f
	lsl r0, r0, #2
	ldrh r1, [r6, r0]
	add r0, r7, #0
	lsl r0, r4
	tst r0, r1
	beq _0208BD5E
	mov r0, #0x46
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	add r1, r7, #0
	bl sub_020248F0
	b _0208BD6A
_0208BD5E:
	mov r0, #0x46
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	mov r1, #0
	bl sub_020248F0
_0208BD6A:
	add r4, r4, #1
	add r5, r5, #4
	cmp r4, #6
	blo _0208BD42
	mov r0, #0xa
	lsl r0, r0, #6
	ldr r0, [r6, r0]
	lsl r1, r0, #2
	lsr r1, r1, #0x1f
	cmp r1, #1
	bne _0208BD92
	lsl r0, r0, #3
	lsr r0, r0, #0x1f
	bne _0208BD92
	ldr r0, _0208BDC0 ; =0x000004D4
	mov r1, #1
	ldr r0, [r6, r0]
	bl sub_0200DCE0
	b _0208BD9C
_0208BD92:
	ldr r0, _0208BDC0 ; =0x000004D4
	mov r1, #0
	ldr r0, [r6, r0]
	bl sub_0200DCE0
_0208BD9C:
	mov r0, #0xa
	lsl r0, r0, #6
	ldr r0, [r6, r0]
	lsr r0, r0, #0x1e
	cmp r0, #2
	ldr r0, _0208BDC4 ; =0x000004D8
	bne _0208BDB4
	ldr r0, [r6, r0]
	mov r1, #1
	bl sub_0200DCE0
	pop {r3, r4, r5, r6, r7, pc}
_0208BDB4:
	ldr r0, [r6, r0]
	mov r1, #0
	bl sub_0200DCE0
	pop {r3, r4, r5, r6, r7, pc}
	nop
_0208BDC0: .word 0x000004D4
_0208BDC4: .word 0x000004D8
	thumb_func_end sub_0208BD38

	thumb_func_start sub_0208BDC8
sub_0208BDC8: ; 0x0208BDC8
	push {r3, r4, r5, r6, r7, lr}
	ldr r7, _0208BDF8 ; =0x000007BE
	add r5, r0, #0
	mov r4, #0
	mov r6, #1
_0208BDD2:
	add r0, r6, #0
	ldrb r1, [r5, r7]
	lsl r0, r4
	tst r0, r1
	beq _0208BDEA
	lsl r0, r4, #2
	add r1, r5, r0
	ldr r0, _0208BDFC ; =0x000004A8
	ldr r0, [r1, r0]
	add r1, r6, #0
	bl sub_02024830
_0208BDEA:
	add r0, r4, #1
	lsl r0, r0, #0x18
	lsr r4, r0, #0x18
	cmp r4, #5
	blo _0208BDD2
	pop {r3, r4, r5, r6, r7, pc}
	nop
_0208BDF8: .word 0x000007BE
_0208BDFC: .word 0x000004A8
	thumb_func_end sub_0208BDC8

	thumb_func_start sub_0208BE00
sub_0208BE00: ; 0x0208BE00
	push {r4, r5, r6, lr}
	sub sp, #8
	add r5, r0, #0
	lsl r0, r2, #2
	add r4, r1, #0
	add r1, r5, r0
	ldr r0, _0208BE6C ; =0x00000404
	ldr r0, [r1, r0]
	bl sub_02024B1C
	mov r1, #2
	bl sub_020B802C
	add r6, r0, #0
	mov r0, #0x8b
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	ldrb r0, [r0, #0x11]
	cmp r0, #2
	bne _0208BE30
	add r0, r4, #0
	bl sub_02074170
	b _0208BE36
_0208BE30:
	add r0, r4, #0
	bl sub_020741B0
_0208BE36:
	add r1, r0, #0
	mov r0, #0x13
	str r0, [sp]
	mov r0, #0x14
	mov r2, #0
	add r3, sp, #4
	bl GfGfxLoader_GetCharData
	add r4, r0, #0
	ldr r0, [sp, #4]
	mov r1, #2
	ldr r0, [r0, #0x14]
	lsl r1, r1, #8
	bl DC_FlushRange
	ldr r0, [sp, #4]
	mov r2, #2
	ldr r0, [r0, #0x14]
	add r1, r6, #0
	lsl r2, r2, #8
	bl sub_020CFECC
	add r0, r4, #0
	bl FreeToHeap
	add sp, #8
	pop {r4, r5, r6, pc}
	.balign 4, 0
_0208BE6C: .word 0x00000404
	thumb_func_end sub_0208BE00

	thumb_func_start sub_0208BE70
sub_0208BE70: ; 0x0208BE70
	push {r4, lr}
	add r4, r0, #0
	bl sub_0208A520
	add r1, r0, #0
	add r0, r4, #0
	mov r2, #0x13
	bl sub_0208BE00
	mov r2, #0x8f
	lsl r2, r2, #2
	add r1, r2, #0
	ldrh r0, [r4, r2]
	add r2, #0x44
	add r1, #0x42
	ldr r2, [r4, r2]
	ldrh r1, [r4, r1]
	lsl r2, r2, #3
	lsr r2, r2, #0x1f
	bl sub_02074364
	add r1, r0, #0
	mov r0, #0x45
	lsl r0, r0, #4
	ldr r0, [r4, r0]
	add r1, #0xc
	bl sub_0200DD08
	mov r1, #0x8f
	lsl r1, r1, #2
	ldrh r0, [r4, r1]
	add r1, #0x42
	ldrh r1, [r4, r1]
	mov r2, #0x1c
	bl sub_0206FBC4
	add r2, r0, #0
	mov r0, #0x45
	lsl r0, r0, #4
	mov r1, #1
	ldr r0, [r4, r0]
	eor r1, r2
	bl sub_02024890
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_0208BE70

	thumb_func_start sub_0208BECC
sub_0208BECC: ; 0x0208BECC
	push {r3, r4, r5, r6, r7, lr}
	add r6, r0, #0
	bl sub_0208A520
	add r7, r0, #0
	mov r0, #0x8b
	lsl r0, r0, #2
	ldr r1, [r6, r0]
	ldrb r0, [r1, #0x11]
	cmp r0, #0
	beq _0208BEEC
	cmp r0, #1
	beq _0208BEF8
	cmp r0, #2
	beq _0208BEF2
	b _0208BEFC
_0208BEEC:
	mov r0, #1
	str r0, [sp]
	b _0208BEFC
_0208BEF2:
	mov r0, #0
	str r0, [sp]
	b _0208BEFC
_0208BEF8:
	ldrb r0, [r1, #0x13]
	str r0, [sp]
_0208BEFC:
	ldr r0, [sp]
	mov r4, #0
	cmp r0, #0
	ble _0208BF7A
	add r5, r6, #0
_0208BF06:
	mov r0, #0x8b
	lsl r0, r0, #2
	ldr r1, [r6, r0]
	ldrb r0, [r1, #0x11]
	cmp r0, #0
	beq _0208BF1C
	cmp r0, #1
	beq _0208BF4A
	cmp r0, #2
	beq _0208BF36
	b _0208BF64
_0208BF1C:
	add r0, r6, #0
	bl sub_0208A520
	add r7, r0, #0
	bl sub_02074484
	add r1, r0, #0
	ldr r0, _0208BF98 ; =0x00000528
	add r1, #0xc
	ldr r0, [r5, r0]
	bl sub_0200DD08
	b _0208BF64
_0208BF36:
	add r0, r7, #0
	bl sub_02074444
	add r1, r0, #0
	ldr r0, _0208BF98 ; =0x00000528
	add r1, #0xc
	ldr r0, [r5, r0]
	bl sub_0200DD08
	b _0208BF64
_0208BF4A:
	ldr r0, [r1]
	add r1, r4, #0
	bl GetPartyMonByIndex
	add r7, r0, #0
	bl sub_02074484
	add r1, r0, #0
	ldr r0, _0208BF98 ; =0x00000528
	add r1, #0xc
	ldr r0, [r5, r0]
	bl sub_0200DD08
_0208BF64:
	add r2, r4, #0
	add r0, r6, #0
	add r1, r7, #0
	add r2, #0x49
	bl sub_0208BE00
	ldr r0, [sp]
	add r4, r4, #1
	add r5, r5, #4
	cmp r4, r0
	blt _0208BF06
_0208BF7A:
	cmp r4, #6
	bge _0208BF96
	lsl r0, r4, #2
	add r5, r6, r0
	ldr r6, _0208BF98 ; =0x00000528
	mov r7, #0
_0208BF86:
	ldr r0, [r5, r6]
	add r1, r7, #0
	bl sub_0200DCE0
	add r4, r4, #1
	add r5, r5, #4
	cmp r4, #6
	blt _0208BF86
_0208BF96:
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_0208BF98: .word 0x00000528
	thumb_func_end sub_0208BECC

	thumb_func_start sub_0208BF9C
sub_0208BF9C: ; 0x0208BF9C
	push {r4, lr}
	add r4, r0, #0
	mov r0, #0x8b
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	ldrb r0, [r0, #0x11]
	cmp r0, #2
	bne _0208BFC4
	ldr r0, _0208BFC8 ; =0x00000528
	mov r1, #0xd7
	ldr r0, [r4, r0]
	mov r2, #0x50
	bl sub_0200DD88
	ldr r0, _0208BFCC ; =0x0000052C
	mov r1, #0xd7
	ldr r0, [r4, r0]
	mov r2, #0x50
	bl sub_0200DD88
_0208BFC4:
	pop {r4, pc}
	nop
_0208BFC8: .word 0x00000528
_0208BFCC: .word 0x0000052C
	thumb_func_end sub_0208BF9C

	thumb_func_start sub_0208BFD0
sub_0208BFD0: ; 0x0208BFD0
	push {r3, r4, r5, lr}
	mov r1, #0x8b
	add r5, r0, #0
	lsl r1, r1, #2
	ldr r1, [r5, r1]
	ldrb r1, [r1, #0x11]
	cmp r1, #2
	bne _0208C058
	bl sub_0208A520
	add r4, r0, #0
	ldr r0, _0208C05C ; =0x000007D4
	ldr r0, [r5, r0]
	cmp r0, #0
	ldr r0, _0208C060 ; =0x00000528
	bne _0208C020
	ldr r0, [r5, r0]
	mov r1, #1
	bl sub_0200DCE0
	ldr r0, _0208C064 ; =0x0000052C
	mov r1, #0
	ldr r0, [r5, r0]
	bl sub_0200DCE0
	add r0, r5, #0
	add r1, r4, #0
	mov r2, #0x49
	bl sub_0208BE00
	add r0, r4, #0
	bl sub_02074444
	add r1, r0, #0
	ldr r0, _0208C060 ; =0x00000528
	add r1, #0xc
	ldr r0, [r5, r0]
	bl sub_0200DD08
	b _0208C04E
_0208C020:
	ldr r0, [r5, r0]
	mov r1, #0
	bl sub_0200DCE0
	ldr r0, _0208C064 ; =0x0000052C
	mov r1, #1
	ldr r0, [r5, r0]
	bl sub_0200DCE0
	add r0, r5, #0
	add r1, r4, #0
	mov r2, #0x4a
	bl sub_0208BE00
	add r0, r4, #0
	bl sub_02074444
	add r1, r0, #0
	ldr r0, _0208C064 ; =0x0000052C
	add r1, #0xc
	ldr r0, [r5, r0]
	bl sub_0200DD08
_0208C04E:
	ldr r1, _0208C05C ; =0x000007D4
	mov r0, #1
	ldr r2, [r5, r1]
	eor r0, r2
	str r0, [r5, r1]
_0208C058:
	pop {r3, r4, r5, pc}
	nop
_0208C05C: .word 0x000007D4
_0208C060: .word 0x00000528
_0208C064: .word 0x0000052C
	thumb_func_end sub_0208BFD0

	thumb_func_start sub_0208C068
sub_0208C068: ; 0x0208C068
	push {r4, lr}
	add r4, r0, #0
	ldr r0, _0208C0A0 ; =0x000007BC
	ldrsb r0, [r4, r0]
	cmp r0, #1
	bne _0208C084
	mov r0, #0x45
	lsl r0, r0, #4
	ldr r0, [r4, r0]
	mov r1, #0xa0
	mov r2, #0x10
	bl sub_0200DD88
	b _0208C092
_0208C084:
	mov r0, #0x45
	lsl r0, r0, #4
	ldr r0, [r4, r0]
	mov r1, #0x20
	mov r2, #0x44
	bl sub_0200DD88
_0208C092:
	mov r0, #0x45
	lsl r0, r0, #4
	ldr r0, [r4, r0]
	mov r1, #1
	bl sub_0200DCE0
	pop {r4, pc}
	.balign 4, 0
_0208C0A0: .word 0x000007BC
	thumb_func_end sub_0208C068

	thumb_func_start sub_0208C0A4
sub_0208C0A4: ; 0x0208C0A4
	push {r4, lr}
	add r4, r2, #0
	cmp r4, r1
	ble _0208C0CA
	add r0, #0x2c
	sub r1, r4, r1
	mul r1, r0
	lsl r0, r1, #0x10
	mov r1, #0x4b
	lsl r1, r1, #2
	bl _u32_div_f
	lsr r0, r0, #0x10
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	sub r0, r4, r0
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	pop {r4, pc}
_0208C0CA:
	add r0, #0x2c
	sub r1, r1, r4
	mul r1, r0
	lsl r0, r1, #0x10
	mov r1, #0x4b
	lsl r1, r1, #2
	bl _u32_div_f
	lsr r0, r0, #0x10
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add r0, r4, r0
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	pop {r4, pc}
	thumb_func_end sub_0208C0A4

	thumb_func_start sub_0208C0E8
sub_0208C0E8: ; 0x0208C0E8
	push {r3, r4, r5, lr}
	add r4, r0, #0
	ldr r0, _0208C1EC ; =0x00000275
	mov r1, #0x58
	ldrb r0, [r4, r0]
	add r2, r1, #0
	bl sub_0208C0A4
	add r5, r0, #0
	ldr r0, _0208C1EC ; =0x00000275
	mov r1, #0x31
	ldrb r0, [r4, r0]
	mov r2, #0x49
	bl sub_0208C0A4
	add r2, r0, #0
	mov r0, #0x13
	lsl r0, r0, #6
	ldr r0, [r4, r0]
	add r1, r5, #0
	bl sub_0200DD88
	ldr r0, _0208C1F0 ; =0x00000276
	mov r1, #0x6e
	ldrb r0, [r4, r0]
	mov r2, #0x58
	bl sub_0208C0A4
	add r5, r0, #0
	ldr r0, _0208C1F0 ; =0x00000276
	mov r1, #0x41
	ldrb r0, [r4, r0]
	mov r2, #0x49
	bl sub_0208C0A4
	add r2, r0, #0
	ldr r0, _0208C1F4 ; =0x000004C4
	add r1, r5, #0
	ldr r0, [r4, r0]
	bl sub_0200DD88
	ldr r0, _0208C1F8 ; =0x00000277
	mov r1, #0x67
	ldrb r0, [r4, r0]
	mov r2, #0x58
	bl sub_0208C0A4
	add r5, r0, #0
	ldr r0, _0208C1F8 ; =0x00000277
	mov r1, #0x5c
	ldrb r0, [r4, r0]
	mov r2, #0x49
	bl sub_0208C0A4
	add r2, r0, #0
	ldr r0, _0208C1FC ; =0x000004C8
	add r1, r5, #0
	ldr r0, [r4, r0]
	bl sub_0200DD88
	mov r0, #0x9e
	lsl r0, r0, #2
	ldrb r0, [r4, r0]
	mov r1, #0x48
	mov r2, #0x57
	bl sub_0208C0A4
	add r5, r0, #0
	mov r0, #0x9e
	lsl r0, r0, #2
	ldrb r0, [r4, r0]
	mov r1, #0x5c
	mov r2, #0x49
	bl sub_0208C0A4
	add r2, r0, #0
	ldr r0, _0208C200 ; =0x000004CC
	add r1, r5, #0
	ldr r0, [r4, r0]
	bl sub_0200DD88
	ldr r0, _0208C204 ; =0x00000279
	mov r1, #0x41
	ldrb r0, [r4, r0]
	mov r2, #0x57
	bl sub_0208C0A4
	add r5, r0, #0
	ldr r0, _0208C204 ; =0x00000279
	mov r1, #0x41
	ldrb r0, [r4, r0]
	mov r2, #0x49
	bl sub_0208C0A4
	add r2, r0, #0
	mov r0, #0x4d
	lsl r0, r0, #4
	ldr r0, [r4, r0]
	add r1, r5, #0
	bl sub_0200DD88
	mov r0, #0x13
	lsl r0, r0, #6
	ldr r0, [r4, r0]
	mov r1, #1
	bl sub_02024830
	ldr r0, _0208C1F4 ; =0x000004C4
	mov r1, #1
	ldr r0, [r4, r0]
	bl sub_02024830
	ldr r0, _0208C1FC ; =0x000004C8
	mov r1, #1
	ldr r0, [r4, r0]
	bl sub_02024830
	ldr r0, _0208C200 ; =0x000004CC
	mov r1, #1
	ldr r0, [r4, r0]
	bl sub_02024830
	mov r0, #0x4d
	lsl r0, r0, #4
	ldr r0, [r4, r0]
	mov r1, #1
	bl sub_02024830
	pop {r3, r4, r5, pc}
	nop
_0208C1EC: .word 0x00000275
_0208C1F0: .word 0x00000276
_0208C1F4: .word 0x000004C4
_0208C1F8: .word 0x00000277
_0208C1FC: .word 0x000004C8
_0208C200: .word 0x000004CC
_0208C204: .word 0x00000279
	thumb_func_end sub_0208C0E8

	thumb_func_start sub_0208C208
sub_0208C208: ; 0x0208C208
	push {r4, lr}
	add r4, r0, #0
	mov r0, #0x13
	lsl r0, r0, #6
	ldr r0, [r4, r0]
	mov r1, #0
	bl sub_02024830
	ldr r0, _0208C244 ; =0x000004C4
	mov r1, #0
	ldr r0, [r4, r0]
	bl sub_02024830
	ldr r0, _0208C248 ; =0x000004C8
	mov r1, #0
	ldr r0, [r4, r0]
	bl sub_02024830
	ldr r0, _0208C24C ; =0x000004CC
	mov r1, #0
	ldr r0, [r4, r0]
	bl sub_02024830
	mov r0, #0x4d
	lsl r0, r0, #4
	ldr r0, [r4, r0]
	mov r1, #0
	bl sub_02024830
	pop {r4, pc}
	.balign 4, 0
_0208C244: .word 0x000004C4
_0208C248: .word 0x000004C8
_0208C24C: .word 0x000004CC
	thumb_func_end sub_0208C208

	thumb_func_start sub_0208C250
sub_0208C250: ; 0x0208C250
	push {r4, r5, r6, lr}
	sub sp, #8
	add r6, r1, #0
	add r5, r0, #0
	add r0, r6, #0
	mov r1, #1
	add r4, r2, #0
	bl sub_0208E55C
	add r3, r0, #0
	mov r0, #0
	str r0, [sp]
	add r0, r4, #0
	mov r1, #0xff
	add r0, #0x19
	lsl r1, r1, #2
	str r0, [sp, #4]
	ldr r0, [r5, r1]
	add r1, r1, #4
	ldr r1, [r5, r1]
	mov r2, #0x27
	bl sub_0200E248
	add r0, r6, #0
	mov r1, #2
	bl sub_0208E55C
	add r4, #0x36
	add r2, r0, #0
	lsl r0, r4, #2
	add r1, r5, r0
	ldr r0, _0208C29C ; =0x00000404
	ldr r0, [r1, r0]
	add r1, r2, #7
	bl sub_0200DD08
	add sp, #8
	pop {r4, r5, r6, pc}
	.balign 4, 0
_0208C29C: .word 0x00000404
	thumb_func_end sub_0208C250

	thumb_func_start sub_0208C2A0
sub_0208C2A0: ; 0x0208C2A0
	push {r3, r4, r5, r6, r7, lr}
	ldr r6, _0208C30C ; =0x00000404
	add r5, r0, #0
	mov r4, #0x36
	mov r7, #0
_0208C2AA:
	lsl r0, r4, #2
	add r0, r5, r0
	ldr r0, [r0, r6]
	add r1, r7, #0
	bl sub_02024830
	add r0, r4, #1
	lsl r0, r0, #0x10
	lsr r4, r0, #0x10
	cmp r4, #0x42
	bls _0208C2AA
	ldr r0, _0208C310 ; =0x000007BC
	ldrsb r0, [r5, r0]
	cmp r0, #2
	bne _0208C30A
	ldr r7, _0208C314 ; =0x000004DC
	ldr r6, _0208C318 ; =0x000007C6
	mov r4, #0
_0208C2CE:
	ldrb r0, [r5, r6]
	cmp r4, r0
	bge _0208C2F6
	lsl r0, r4, #2
	add r0, r5, r0
	ldr r0, [r0, r7]
	mov r1, #1
	bl sub_02024830
	lsl r1, r4, #0x18
	add r0, r5, #0
	lsr r1, r1, #0x18
	bl sub_0208ACDC
	lsl r2, r4, #0x18
	add r1, r0, #0
	add r0, r5, #0
	lsr r2, r2, #0x18
	bl sub_0208C250
_0208C2F6:
	add r0, r4, #1
	lsl r0, r0, #0x10
	lsr r4, r0, #0x10
	cmp r4, #9
	blo _0208C2CE
	ldr r0, _0208C31C ; =0x0000050C
	mov r1, #0
	ldr r0, [r5, r0]
	bl sub_020248F0
_0208C30A:
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_0208C30C: .word 0x00000404
_0208C310: .word 0x000007BC
_0208C314: .word 0x000004DC
_0208C318: .word 0x000007C6
_0208C31C: .word 0x0000050C
	thumb_func_end sub_0208C2A0

	thumb_func_start sub_0208C320
sub_0208C320: ; 0x0208C320
	push {r3, r4, r5, r6, r7, lr}
	ldr r7, _0208C378 ; =0x000007C5
	add r5, r0, #0
	mov r4, #0
	add r6, r7, #1
_0208C32A:
	ldrb r1, [r5, r7]
	lsl r0, r1, #3
	add r0, r1, r0
	add r1, r4, r0
	ldrb r0, [r5, r6]
	cmp r1, r0
	bge _0208C35E
	lsl r0, r4, #2
	add r1, r5, r0
	ldr r0, _0208C37C ; =0x000004DC
	ldr r0, [r1, r0]
	mov r1, #1
	bl sub_02024830
	lsl r1, r4, #0x18
	add r0, r5, #0
	lsr r1, r1, #0x18
	bl sub_0208ACDC
	lsl r2, r4, #0x18
	add r1, r0, #0
	add r0, r5, #0
	lsr r2, r2, #0x18
	bl sub_0208C250
	b _0208C36C
_0208C35E:
	lsl r0, r4, #2
	add r1, r5, r0
	ldr r0, _0208C37C ; =0x000004DC
	ldr r0, [r1, r0]
	mov r1, #0
	bl sub_02024830
_0208C36C:
	add r0, r4, #1
	lsl r0, r0, #0x10
	lsr r4, r0, #0x10
	cmp r4, #9
	blo _0208C32A
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_0208C378: .word 0x000007C5
_0208C37C: .word 0x000004DC
	thumb_func_end sub_0208C320

	thumb_func_start sub_0208C380
sub_0208C380: ; 0x0208C380
	push {r4, r5, r6, lr}
	add r5, r0, #0
	ldr r0, _0208C3BC ; =0x000007C4
	mov r1, #3
	ldrb r6, [r5, r0]
	add r0, r6, #0
	bl _s32_div_f
	add r4, r1, #0
	add r0, r6, #0
	mov r1, #3
	bl _s32_div_f
	add r2, r0, #0
	mov r3, #0x28
	mov r0, #5
	lsl r1, r4, #5
	mul r3, r2
	lsl r0, r0, #8
	add r1, #0x20
	add r3, #0x18
	lsl r1, r1, #0x10
	lsl r2, r3, #0x10
	ldr r0, [r5, r0]
	asr r1, r1, #0x10
	asr r2, r2, #0x10
	bl sub_0200DD88
	pop {r4, r5, r6, pc}
	nop
_0208C3BC: .word 0x000007C4
	thumb_func_end sub_0208C380

	thumb_func_start sub_0208C3C0
sub_0208C3C0: ; 0x0208C3C0
	push {r4, lr}
	add r4, r0, #0
	ldr r0, _0208C3E0 ; =0x0000050C
	ldr r0, [r4, r0]
	bl sub_020248B8
	cmp r0, #1
	bne _0208C3DC
	ldr r0, _0208C3E0 ; =0x0000050C
	mov r1, #1
	ldr r0, [r4, r0]
	lsl r1, r1, #0xc
	bl sub_020249B0
_0208C3DC:
	pop {r4, pc}
	nop
_0208C3E0: .word 0x0000050C
	thumb_func_end sub_0208C3C0

	thumb_func_start sub_0208C3E4
sub_0208C3E4: ; 0x0208C3E4
	push {r3, r4, r5, r6, r7, lr}
	add r7, r0, #0
	mov r5, #0
	add r4, r7, #4
_0208C3EC:
	ldr r2, _0208C428 ; =0x02104D94
	lsl r6, r5, #4
	lsl r3, r5, #3
	ldr r0, [r7]
	add r1, r4, r6
	add r2, r2, r3
	bl AddWindow
	add r0, r4, r6
	mov r1, #0
	bl FillWindowPixelBuffer
	add r0, r5, #1
	lsl r0, r0, #0x10
	lsr r5, r0, #0x10
	cmp r5, #0x22
	blo _0208C3EC
	add r0, r7, #0
	bl sub_0208C9A4
	add r0, r7, #0
	bl sub_0208C57C
	add r0, r7, #0
	bl sub_0208C614
	add r0, r7, #0
	bl sub_0208C6B4
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_0208C428: .word 0x02104D94
	thumb_func_end sub_0208C3E4

	thumb_func_start sub_0208C42C
sub_0208C42C: ; 0x0208C42C
	push {r3, r4, r5, r6, r7, lr}
	add r4, r0, #0
	ldr r0, _0208C4D0 ; =0x000007BC
	ldrsb r0, [r4, r0]
	cmp r0, #3
	bhi _0208C4CE
	add r0, r0, r0
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_0208C444: ; jump table
	.short _0208C44C - _0208C444 - 2 ; case 0
	.short _0208C458 - _0208C444 - 2 ; case 1
	.short _0208C464 - _0208C444 - 2 ; case 2
	.short _0208C470 - _0208C444 - 2 ; case 3
_0208C44C:
	mov r0, #0x8a
	mov r1, #8
	lsl r0, r0, #2
	ldr r7, _0208C4D4 ; =0x02104CC4
	str r1, [r4, r0]
	b _0208C48C
_0208C458:
	mov r0, #0x8a
	mov r1, #0x12
	lsl r0, r0, #2
	ldr r7, _0208C4D8 ; =0x02104D04
	str r1, [r4, r0]
	b _0208C48C
_0208C464:
	mov r0, #0x8a
	mov r1, #8
	lsl r0, r0, #2
	ldr r7, _0208C4DC ; =0x02104C84
	str r1, [r4, r0]
	b _0208C48C
_0208C470:
	mov r0, #0x8b
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	ldrb r0, [r0, #0x12]
	cmp r0, #3
	beq _0208C480
	cmp r0, #4
	bne _0208C4CE
_0208C480:
	mov r0, #0x8a
	mov r1, #3
	lsl r0, r0, #2
	str r1, [r4, r0]
	b _0208C48C
_0208C48A:
	pop {r3, r4, r5, r6, r7, pc}
_0208C48C:
	mov r1, #0x8a
	lsl r1, r1, #2
	ldr r1, [r4, r1]
	mov r0, #0x13
	lsl r1, r1, #0x18
	lsr r1, r1, #0x18
	bl AllocWindows
	mov r1, #0x89
	lsl r1, r1, #2
	str r0, [r4, r1]
	add r0, r1, #4
	ldr r0, [r4, r0]
	mov r5, #0
	cmp r0, #0
	bls _0208C4CE
	add r6, r5, #0
_0208C4AE:
	mov r1, #0x89
	lsl r1, r1, #2
	ldr r1, [r4, r1]
	ldr r0, [r4]
	add r1, r1, r6
	add r2, r7, #0
	bl AddWindow
	mov r0, #0x8a
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	add r5, r5, #1
	add r7, #8
	add r6, #0x10
	cmp r5, r0
	blo _0208C4AE
_0208C4CE:
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_0208C4D0: .word 0x000007BC
_0208C4D4: .word 0x02104CC4
_0208C4D8: .word 0x02104D04
_0208C4DC: .word 0x02104C84
	thumb_func_end sub_0208C42C

	thumb_func_start sub_0208C4E0
sub_0208C4E0: ; 0x0208C4E0
	push {r3, r4, r5, r6, r7, lr}
	add r4, r0, #0
	ldr r0, _0208C55C ; =0x000007BC
	ldrsb r0, [r4, r0]
	cmp r0, #3
	bhi _0208C55A
	add r0, r0, r0
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_0208C4F8: ; jump table
	.short _0208C500 - _0208C4F8 - 2 ; case 0
	.short _0208C500 - _0208C4F8 - 2 ; case 1
	.short _0208C52A - _0208C4F8 - 2 ; case 2
	.short _0208C536 - _0208C4F8 - 2 ; case 3
_0208C500:
	mov r0, #0x8a
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r6, #0
	cmp r0, #0
	bls _0208C548
	mov r7, #0x8a
	add r5, r6, #0
	lsl r7, r7, #2
_0208C512:
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	add r0, r0, r5
	bl ClearWindowTilemapAndCopyToVram
	ldr r0, [r4, r7]
	add r6, r6, #1
	add r5, #0x10
	cmp r6, r0
	blo _0208C512
	b _0208C548
_0208C52A:
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	bl ClearWindowTilemapAndCopyToVram
	b _0208C548
_0208C536:
	mov r0, #0x8b
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	ldrb r0, [r0, #0x12]
	cmp r0, #3
	beq _0208C548
	cmp r0, #4
	beq _0208C548
	pop {r3, r4, r5, r6, r7, pc}
_0208C548:
	mov r1, #0x89
	lsl r1, r1, #2
	ldr r0, [r4, r1]
	add r1, r1, #4
	ldr r1, [r4, r1]
	lsl r1, r1, #0x18
	lsr r1, r1, #0x18
	bl sub_0201D54C
_0208C55A:
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_0208C55C: .word 0x000007BC
	thumb_func_end sub_0208C4E0

	thumb_func_start sub_0208C560
sub_0208C560: ; 0x0208C560
	push {r3, r4, r5, lr}
	add r5, r0, #0
	bl sub_0208C4E0
	mov r4, #0
	add r5, r5, #4
_0208C56C:
	add r0, r5, #0
	bl RemoveWindow
	add r4, r4, #1
	add r5, #0x10
	cmp r4, #0x22
	blo _0208C56C
	pop {r3, r4, r5, pc}
	thumb_func_end sub_0208C560

	thumb_func_start sub_0208C57C
sub_0208C57C: ; 0x0208C57C
	push {r3, r4, r5, lr}
	sub sp, #0x10
	mov r4, #0x85
	add r5, r0, #0
	lsl r4, r4, #2
	add r0, r5, r4
	mov r1, #0
	bl FillWindowPixelBuffer
	mov r1, #0
	add r2, r4, #0
	str r1, [sp]
	mov r0, #0xff
	str r0, [sp, #4]
	ldr r0, _0208C60C ; =0x000E0F00
	add r2, #0x20
	str r0, [sp, #8]
	str r1, [sp, #0xc]
	ldr r2, [r5, r2]
	add r0, r5, r4
	add r3, r1, #0
	bl sub_020200FC
	add r0, r4, #0
	add r0, #0x2e
	ldrb r1, [r5, r0]
	lsl r1, r1, #0x18
	lsr r1, r1, #0x1f
	bne _0208C600
	add r0, r0, #1
	ldrb r0, [r5, r0]
	lsl r0, r0, #0x1e
	lsr r0, r0, #0x1e
	bne _0208C5E0
	mov r2, #0x7a
	lsl r2, r2, #4
	ldr r0, [r5, r2]
	add r2, #0xc
	ldr r2, [r5, r2]
	mov r1, #1
	bl ReadMsgDataIntoString
	mov r2, #0xc1
	add r0, r5, #0
	add r1, r5, r4
	lsl r2, r2, #0xa
	mov r3, #1
	bl sub_0208C778
	b _0208C600
_0208C5E0:
	cmp r0, #1
	bne _0208C600
	mov r2, #0x7a
	lsl r2, r2, #4
	ldr r0, [r5, r2]
	add r2, #0xc
	ldr r2, [r5, r2]
	mov r1, #2
	bl ReadMsgDataIntoString
	ldr r2, _0208C610 ; =0x00050600
	add r0, r5, #0
	add r1, r5, r4
	mov r3, #1
	bl sub_0208C778
_0208C600:
	add r0, r5, r4
	bl sub_0201D5C8
	add sp, #0x10
	pop {r3, r4, r5, pc}
	nop
_0208C60C: .word 0x000E0F00
_0208C610: .word 0x00050600
	thumb_func_end sub_0208C57C

	thumb_func_start sub_0208C614
sub_0208C614: ; 0x0208C614
	push {r4, r5, r6, lr}
	sub sp, #0x10
	mov r6, #0x81
	add r5, r0, #0
	lsl r6, r6, #2
	add r0, r5, r6
	mov r1, #0
	bl FillWindowPixelBuffer
	add r0, r6, #0
	add r0, #0x7c
	ldr r0, [r5, r0]
	lsl r0, r0, #3
	lsr r0, r0, #0x1f
	bne _0208C69C
	mov r0, #5
	str r0, [sp]
	ldr r0, _0208C6A8 ; =0x0000079C
	mov r1, #1
	ldr r0, [r5, r0]
	add r2, r5, r6
	mov r3, #0
	bl sub_0200CDAC
	mov r0, #0x7a
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	mov r1, #3
	bl NewString_ReadMsgData
	mov r1, #0
	add r4, r0, #0
	add r2, r6, #0
	str r1, [sp]
	mov r0, #1
	str r0, [sp, #4]
	add r2, #0x3e
	ldrb r2, [r5, r2]
	ldr r0, _0208C6AC ; =0x000007A8
	mov r3, #3
	lsl r2, r2, #0x19
	ldr r0, [r5, r0]
	lsr r2, r2, #0x19
	bl BufferIntegerAsString
	ldr r1, _0208C6AC ; =0x000007A8
	add r2, r4, #0
	ldr r0, [r5, r1]
	add r1, r1, #4
	ldr r1, [r5, r1]
	bl StringExpandPlaceholders
	add r0, r4, #0
	bl String_dtor
	mov r1, #0
	str r1, [sp]
	mov r0, #0xff
	str r0, [sp, #4]
	lsl r0, r6, #7
	str r0, [sp, #8]
	ldr r2, _0208C6B0 ; =0x000007AC
	str r1, [sp, #0xc]
	ldr r2, [r5, r2]
	add r0, r5, r6
	mov r3, #0x10
	bl sub_020200FC
_0208C69C:
	add r0, r5, r6
	bl sub_0201D5C8
	add sp, #0x10
	pop {r4, r5, r6, pc}
	nop
_0208C6A8: .word 0x0000079C
_0208C6AC: .word 0x000007A8
_0208C6B0: .word 0x000007AC
	thumb_func_end sub_0208C614

	thumb_func_start sub_0208C6B4
sub_0208C6B4: ; 0x0208C6B4
	push {r3, r4, r5, lr}
	add r5, r0, #0
	mov r0, #0x7d
	lsl r0, r0, #2
	add r0, r5, r0
	mov r1, #0
	bl FillWindowPixelBuffer
	ldr r0, _0208C730 ; =0x0000023E
	ldrh r2, [r5, r0]
	cmp r2, #0
	beq _0208C6FA
	ldr r0, _0208C734 ; =0x000007A8
	mov r1, #0
	ldr r0, [r5, r0]
	bl BufferItemName
	mov r0, #0x7a
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	mov r1, #5
	bl NewString_ReadMsgData
	add r4, r0, #0
	ldr r1, _0208C734 ; =0x000007A8
	add r2, r4, #0
	ldr r0, [r5, r1]
	add r1, r1, #4
	ldr r1, [r5, r1]
	bl StringExpandPlaceholders
	add r0, r4, #0
	bl String_dtor
	b _0208C70A
_0208C6FA:
	mov r2, #0x7a
	lsl r2, r2, #4
	ldr r0, [r5, r2]
	add r2, #0xc
	ldr r2, [r5, r2]
	mov r1, #6
	bl ReadMsgDataIntoString
_0208C70A:
	mov r1, #0x7d
	lsl r1, r1, #2
	ldr r2, _0208C738 ; =0x00010200
	add r0, r5, #0
	add r1, r5, r1
	mov r3, #0
	bl sub_0208C778
	add r0, r5, #0
	add r0, #0x64
	bl sub_0201D5C8
	mov r0, #0x7d
	lsl r0, r0, #2
	add r0, r5, r0
	bl sub_0201D5C8
	pop {r3, r4, r5, pc}
	nop
_0208C730: .word 0x0000023E
_0208C734: .word 0x000007A8
_0208C738: .word 0x00010200
	thumb_func_end sub_0208C6B4

	thumb_func_start sub_0208C73C
sub_0208C73C: ; 0x0208C73C
	push {r4, lr}
	mov r3, #0x8b
	lsl r3, r3, #2
	add r1, r0, #0
	add r2, r3, #0
	add r2, #0x18
	ldr r0, [r1, r3]
	ldr r4, [r1, r2]
	ldr r2, [r0, #0xc]
	cmp r4, r2
	bne _0208C774
	add r2, r3, #0
	add r2, #0x48
	ldrb r2, [r1, r2]
	ldrb r0, [r0, #0x10]
	cmp r2, r0
	bne _0208C774
	mov r2, #0x7b
	add r3, #0xc
	lsl r2, r2, #4
	ldr r0, [r1, r3]
	ldr r1, [r1, r2]
	bl StringCompare
	cmp r0, #0
	bne _0208C774
	mov r0, #1
	pop {r4, pc}
_0208C774:
	mov r0, #0
	pop {r4, pc}
	thumb_func_end sub_0208C73C

	thumb_func_start sub_0208C778
sub_0208C778: ; 0x0208C778
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x10
	add r4, r0, #0
	add r6, r1, #0
	add r7, r2, #0
	cmp r3, #0
	beq _0208C790
	cmp r3, #1
	beq _0208C794
	cmp r3, #2
	beq _0208C7B6
	b _0208C7DA
_0208C790:
	mov r3, #0
	b _0208C7DA
_0208C794:
	ldr r1, _0208C7F4 ; =0x000007AC
	mov r0, #0
	ldr r1, [r4, r1]
	add r2, r0, #0
	bl sub_02002F30
	lsl r0, r0, #0x18
	lsr r5, r0, #0x18
	add r0, r6, #0
	bl GetWindowWidth
	lsl r0, r0, #0x1b
	lsr r0, r0, #0x18
	sub r0, r0, r5
	lsl r0, r0, #0x18
	lsr r3, r0, #0x18
	b _0208C7DA
_0208C7B6:
	ldr r1, _0208C7F4 ; =0x000007AC
	mov r0, #0
	ldr r1, [r4, r1]
	add r2, r0, #0
	bl sub_02002F30
	lsl r0, r0, #0x18
	lsr r5, r0, #0x18
	add r0, r6, #0
	bl GetWindowWidth
	lsl r0, r0, #0x1b
	lsr r0, r0, #0x18
	sub r1, r0, r5
	lsr r0, r1, #0x1f
	add r0, r1, r0
	lsl r0, r0, #0x17
	lsr r3, r0, #0x18
_0208C7DA:
	mov r1, #0
	str r1, [sp]
	mov r0, #0xff
	str r0, [sp, #4]
	str r7, [sp, #8]
	ldr r2, _0208C7F4 ; =0x000007AC
	str r1, [sp, #0xc]
	ldr r2, [r4, r2]
	add r0, r6, #0
	bl sub_020200FC
	add sp, #0x10
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_0208C7F4: .word 0x000007AC
	thumb_func_end sub_0208C778

	thumb_func_start sub_0208C7F8
sub_0208C7F8: ; 0x0208C7F8
	push {r4, r5, r6, lr}
	add r5, r0, #0
	ldr r0, _0208C83C ; =0x00000263
	add r6, r1, #0
	ldrb r1, [r5, r0]
	ldr r4, _0208C840 ; =0x000E0F00
	lsl r0, r1, #2
	add r1, r1, r0
	ldr r0, _0208C844 ; =0x020FF639
	add r0, r0, r1
	ldrsb r0, [r3, r0]
	cmp r0, #0
	bge _0208C816
	ldr r4, _0208C848 ; =0x000E0800
	b _0208C81A
_0208C816:
	ble _0208C81A
	ldr r4, _0208C84C ; =0x000E0700
_0208C81A:
	mov r3, #0x7a
	lsl r3, r3, #4
	ldr r0, [r5, r3]
	add r3, #0xc
	add r1, r2, #0
	ldr r2, [r5, r3]
	bl ReadMsgDataIntoString
	add r2, r5, #4
	lsl r1, r6, #4
	add r1, r2, r1
	ldr r3, [sp, #0x10]
	add r0, r5, #0
	add r2, r4, #0
	bl sub_0208C778
	pop {r4, r5, r6, pc}
	.balign 4, 0
_0208C83C: .word 0x00000263
_0208C840: .word 0x000E0F00
_0208C844: .word 0x020FF639
_0208C848: .word 0x000E0800
_0208C84C: .word 0x000E0700
	thumb_func_end sub_0208C7F8

	thumb_func_start sub_0208C850
sub_0208C850: ; 0x0208C850
	push {r4, r5, r6, lr}
	add r6, r3, #0
	mov r3, #0x7a
	add r5, r0, #0
	lsl r3, r3, #4
	ldr r0, [r5, r3]
	add r4, r1, #0
	add r3, #0xc
	add r1, r2, #0
	ldr r2, [r5, r3]
	bl ReadMsgDataIntoString
	add r2, r5, #4
	lsl r1, r4, #4
	add r1, r2, r1
	ldr r3, [sp, #0x10]
	add r0, r5, #0
	add r2, r6, #0
	bl sub_0208C778
	pop {r4, r5, r6, pc}
	.balign 4, 0
	thumb_func_end sub_0208C850

	thumb_func_start sub_0208C87C
sub_0208C87C: ; 0x0208C87C
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #8
	add r5, r0, #0
	mov r0, #0x7a
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	add r6, r2, #0
	add r7, r3, #0
	bl NewString_ReadMsgData
	add r4, r0, #0
	add r0, sp, #0x10
	ldrb r0, [r0, #0x10]
	mov r1, #0
	add r2, r6, #0
	str r0, [sp]
	mov r0, #1
	str r0, [sp, #4]
	ldr r0, _0208C8C4 ; =0x000007A8
	add r3, r7, #0
	ldr r0, [r5, r0]
	bl BufferIntegerAsString
	ldr r1, _0208C8C4 ; =0x000007A8
	add r2, r4, #0
	ldr r0, [r5, r1]
	add r1, r1, #4
	ldr r1, [r5, r1]
	bl StringExpandPlaceholders
	add r0, r4, #0
	bl String_dtor
	add sp, #8
	pop {r3, r4, r5, r6, r7, pc}
	nop
_0208C8C4: .word 0x000007A8
	thumb_func_end sub_0208C87C

	thumb_func_start sub_0208C8C8
sub_0208C8C8: ; 0x0208C8C8
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x20
	add r4, r0, #0
	str r3, [sp, #0x10]
	mov r0, #0x89
	mov r3, #0x7a
	lsl r0, r0, #2
	lsl r7, r1, #4
	lsl r3, r3, #4
	ldr r5, [r4, r0]
	ldr r0, [r4, r3]
	add r3, #0xc
	add r1, r2, #0
	ldr r2, [r4, r3]
	bl ReadMsgDataIntoString
	ldr r1, _0208C99C ; =0x000007AC
	mov r0, #0
	ldr r1, [r4, r1]
	add r2, r0, #0
	bl sub_02002F30
	add r1, sp, #0x48
	ldrb r2, [r1]
	lsr r1, r0, #1
	sub r1, r2, r1
	lsl r1, r1, #0x10
	lsr r1, r1, #0x10
	add r0, r1, r0
	str r1, [sp, #0x14]
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	str r0, [sp, #0x18]
	add r0, sp, #0x4c
	ldrb r0, [r0]
	mov r1, #0
	ldr r2, _0208C99C ; =0x000007AC
	str r0, [sp, #0x1c]
	str r0, [sp]
	mov r0, #0xff
	str r0, [sp, #4]
	ldr r0, _0208C9A0 ; =0x00010200
	ldr r3, [sp, #0x14]
	str r0, [sp, #8]
	str r1, [sp, #0xc]
	ldr r2, [r4, r2]
	add r0, r5, r7
	bl sub_020200FC
	mov r0, #0
	str r0, [sp]
	add r3, sp, #0x28
	ldrh r2, [r3, #0x14]
	ldrb r3, [r3, #0x1c]
	ldr r1, [sp, #0x10]
	add r0, r4, #0
	bl sub_0208C87C
	ldr r1, _0208C99C ; =0x000007AC
	mov r0, #0
	ldr r1, [r4, r1]
	add r2, r0, #0
	bl sub_02002F30
	mov ip, r0
	ldr r0, [sp, #0x1c]
	mov r1, #0
	str r0, [sp]
	mov r0, #0xff
	str r0, [sp, #4]
	ldr r0, _0208C9A0 ; =0x00010200
	ldr r2, _0208C99C ; =0x000007AC
	str r0, [sp, #8]
	str r1, [sp, #0xc]
	ldr r3, [sp, #0x14]
	mov r6, ip
	ldr r2, [r4, r2]
	add r0, r5, r7
	sub r3, r3, r6
	bl sub_020200FC
	mov r0, #0
	str r0, [sp]
	add r3, sp, #0x28
	ldrh r2, [r3, #0x18]
	ldrb r3, [r3, #0x1c]
	ldr r1, [sp, #0x38]
	add r0, r4, #0
	bl sub_0208C87C
	ldr r0, [sp, #0x1c]
	mov r1, #0
	str r0, [sp]
	mov r0, #0xff
	str r0, [sp, #4]
	ldr r0, _0208C9A0 ; =0x00010200
	ldr r2, _0208C99C ; =0x000007AC
	str r0, [sp, #8]
	str r1, [sp, #0xc]
	ldr r2, [r4, r2]
	ldr r3, [sp, #0x18]
	add r0, r5, r7
	bl sub_020200FC
	add sp, #0x20
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_0208C99C: .word 0x000007AC
_0208C9A0: .word 0x00010200
	thumb_func_end sub_0208C8C8

	thumb_func_start sub_0208C9A4
sub_0208C9A4: ; 0x0208C9A4
	push {r4, lr}
	sub sp, #0x10
	ldr r3, _0208CBC8 ; =0x000E0F00
	mov r1, #0
	mov r2, #7
	add r4, r0, #0
	str r1, [sp]
	bl sub_0208C850
	mov r0, #0
	str r0, [sp]
	ldr r3, _0208CBC8 ; =0x000E0F00
	add r0, r4, #0
	mov r1, #1
	mov r2, #0x17
	bl sub_0208C850
	mov r0, #0
	str r0, [sp]
	ldr r3, _0208CBC8 ; =0x000E0F00
	add r0, r4, #0
	mov r1, #2
	mov r2, #0x6d
	bl sub_0208C850
	mov r0, #0
	str r0, [sp]
	ldr r3, _0208CBC8 ; =0x000E0F00
	add r0, r4, #0
	mov r1, #3
	mov r2, #0x7e
	bl sub_0208C850
	mov r0, #0
	str r0, [sp]
	ldr r3, _0208CBC8 ; =0x000E0F00
	add r0, r4, #0
	mov r1, #4
	mov r2, #0x80
	bl sub_0208C850
	mov r0, #0x8b
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	ldr r0, [r0, #0x34]
	cmp r0, #0
	beq _0208CA14
	mov r0, #0
	str r0, [sp]
	ldr r3, _0208CBC8 ; =0x000E0F00
	add r0, r4, #0
	mov r1, #5
	mov r2, #0x9d
	bl sub_0208C850
	b _0208CA1E
_0208CA14:
	add r0, r4, #0
	add r0, #0x54
	mov r1, #0
	bl FillWindowPixelBuffer
_0208CA1E:
	mov r0, #0
	str r0, [sp]
	ldr r3, _0208CBC8 ; =0x000E0F00
	add r0, r4, #0
	mov r1, #6
	mov r2, #4
	bl sub_0208C850
	mov r0, #0
	str r0, [sp]
	ldr r3, _0208CBC8 ; =0x000E0F00
	add r0, r4, #0
	mov r1, #7
	mov r2, #8
	bl sub_0208C850
	mov r0, #0
	str r0, [sp]
	ldr r3, _0208CBC8 ; =0x000E0F00
	add r0, r4, #0
	mov r1, #8
	mov r2, #0xa
	bl sub_0208C850
	mov r0, #0
	str r0, [sp]
	ldr r3, _0208CBC8 ; =0x000E0F00
	add r0, r4, #0
	mov r1, #9
	mov r2, #0xc
	bl sub_0208C850
	mov r0, #0
	str r0, [sp]
	ldr r3, _0208CBC8 ; =0x000E0F00
	add r0, r4, #0
	mov r1, #0xa
	mov r2, #0xd
	bl sub_0208C850
	mov r0, #0
	str r0, [sp]
	ldr r3, _0208CBC8 ; =0x000E0F00
	add r0, r4, #0
	mov r1, #0xb
	mov r2, #0xf
	bl sub_0208C850
	mov r0, #0
	str r0, [sp]
	ldr r3, _0208CBC8 ; =0x000E0F00
	add r0, r4, #0
	mov r1, #0xc
	mov r2, #0x11
	bl sub_0208C850
	mov r0, #0
	str r0, [sp]
	ldr r3, _0208CBC8 ; =0x000E0F00
	add r0, r4, #0
	mov r1, #0xd
	mov r2, #0x13
	bl sub_0208C850
	mov r0, #0
	str r0, [sp]
	ldr r3, _0208CBC8 ; =0x000E0F00
	add r0, r4, #0
	mov r1, #0xf
	mov r2, #0x6e
	bl sub_0208C850
	mov r3, #0
	add r0, r4, #0
	mov r1, #0x10
	mov r2, #0x6f
	str r3, [sp]
	bl sub_0208C7F8
	mov r0, #0
	str r0, [sp]
	add r0, r4, #0
	mov r1, #0x11
	mov r2, #0x70
	mov r3, #1
	bl sub_0208C7F8
	mov r0, #0
	str r0, [sp]
	add r0, r4, #0
	mov r1, #0x12
	mov r2, #0x71
	mov r3, #3
	bl sub_0208C7F8
	mov r0, #0
	str r0, [sp]
	add r0, r4, #0
	mov r1, #0x13
	mov r2, #0x72
	mov r3, #4
	bl sub_0208C7F8
	mov r0, #0
	str r0, [sp]
	add r0, r4, #0
	mov r1, #0x14
	mov r2, #0x73
	mov r3, #2
	bl sub_0208C7F8
	mov r2, #0x7a
	lsl r2, r2, #4
	ldr r0, [r4, r2]
	add r2, #0xc
	ldr r2, [r4, r2]
	mov r1, #0x74
	bl ReadMsgDataIntoString
	mov r1, #0
	str r1, [sp]
	mov r2, #0xff
	str r2, [sp, #4]
	ldr r0, _0208CBC8 ; =0x000E0F00
	add r2, #0x55
	str r0, [sp, #8]
	add r0, r4, r2
	ldr r2, _0208CBCC ; =0x000007AC
	str r1, [sp, #0xc]
	ldr r2, [r4, r2]
	mov r3, #3
	bl sub_020200FC
	mov r2, #0x7a
	lsl r2, r2, #4
	ldr r0, [r4, r2]
	add r2, #0xc
	ldr r2, [r4, r2]
	mov r1, #0x92
	bl ReadMsgDataIntoString
	mov r3, #0
	str r3, [sp]
	mov r1, #0xff
	str r1, [sp, #4]
	ldr r0, _0208CBC8 ; =0x000E0F00
	ldr r2, _0208CBCC ; =0x000007AC
	str r0, [sp, #8]
	str r3, [sp, #0xc]
	add r1, #0x75
	add r0, r4, r1
	ldr r2, [r4, r2]
	mov r1, #4
	bl sub_020200FC
	mov r0, #0
	str r0, [sp]
	ldr r3, _0208CBC8 ; =0x000E0F00
	add r0, r4, #0
	mov r1, #0x18
	mov r2, #0x95
	bl sub_0208C850
	mov r0, #0
	str r0, [sp]
	ldr r3, _0208CBC8 ; =0x000E0F00
	add r0, r4, #0
	mov r1, #0x19
	mov r2, #0x93
	bl sub_0208C850
	mov r0, #0
	str r0, [sp]
	ldr r3, _0208CBC8 ; =0x000E0F00
	add r0, r4, #0
	mov r1, #0x1a
	mov r2, #0x94
	bl sub_0208C850
	mov r0, #2
	str r0, [sp]
	ldr r3, _0208CBC8 ; =0x000E0F00
	add r0, r4, #0
	mov r1, #0x1b
	mov r2, #0xa2
	bl sub_0208C850
	mov r0, #2
	str r0, [sp]
	ldr r3, _0208CBD0 ; =0x00010200
	add r0, r4, #0
	mov r1, #0x1c
	mov r2, #0xa0
	bl sub_0208C850
	mov r0, #0
	str r0, [sp]
	ldr r3, _0208CBD0 ; =0x00010200
	add r0, r4, #0
	mov r1, #0x1d
	mov r2, #0xb6
	bl sub_0208C850
	mov r0, #0
	str r0, [sp]
	ldr r3, _0208CBC8 ; =0x000E0F00
	add r0, r4, #0
	mov r1, #0x1e
	mov r2, #0xb3
	bl sub_0208C850
	add sp, #0x10
	pop {r4, pc}
	.balign 4, 0
_0208CBC8: .word 0x000E0F00
_0208CBCC: .word 0x000007AC
_0208CBD0: .word 0x00010200
	thumb_func_end sub_0208C9A4

	thumb_func_start sub_0208CBD4
sub_0208CBD4: ; 0x0208CBD4
	push {r4, lr}
	sub sp, #0x10
	mov r2, #0
	add r4, r0, #0
	str r2, [sp]
	mov r0, #0x20
	str r0, [sp, #4]
	mov r0, #2
	str r0, [sp, #8]
	mov r0, #0x10
	str r0, [sp, #0xc]
	ldr r0, [r4]
	mov r1, #1
	add r3, r2, #0
	bl FillBgTilemapRect
	mov r0, #2
	str r0, [sp]
	mov r0, #0x12
	str r0, [sp, #4]
	mov r0, #0x16
	str r0, [sp, #8]
	mov r0, #0x10
	str r0, [sp, #0xc]
	mov r2, #0
	ldr r0, [r4]
	mov r1, #1
	add r3, r2, #0
	bl FillBgTilemapRect
	mov r0, #1
	str r0, [sp]
	mov r0, #0x12
	str r0, [sp, #4]
	mov r0, #0x17
	str r0, [sp, #8]
	mov r0, #0x10
	str r0, [sp, #0xc]
	mov r2, #0
	ldr r0, [r4]
	mov r1, #4
	add r3, r2, #0
	bl FillBgTilemapRect
	ldr r0, _0208CC84 ; =0x000007BC
	ldrsb r0, [r4, r0]
	cmp r0, #3
	bhi _0208CC7E
	add r0, r0, r0
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_0208CC40: ; jump table
	.short _0208CC48 - _0208CC40 - 2 ; case 0
	.short _0208CC58 - _0208CC40 - 2 ; case 1
	.short _0208CC68 - _0208CC40 - 2 ; case 2
	.short _0208CC78 - _0208CC40 - 2 ; case 3
_0208CC48:
	add r0, r4, #0
	bl sub_0208CC88
	add r0, r4, #0
	bl sub_0208D0A4
	add sp, #0x10
	pop {r4, pc}
_0208CC58:
	add r0, r4, #0
	bl sub_0208D178
	add r0, r4, #0
	bl sub_0208D474
	add sp, #0x10
	pop {r4, pc}
_0208CC68:
	add r0, r4, #0
	bl sub_0208D520
	add r0, r4, #0
	bl sub_0208D6B8
	add sp, #0x10
	pop {r4, pc}
_0208CC78:
	add r0, r4, #0
	bl sub_0208D728
_0208CC7E:
	add sp, #0x10
	pop {r4, pc}
	nop
_0208CC84: .word 0x000007BC
	thumb_func_end sub_0208CBD4

	thumb_func_start sub_0208CC88
sub_0208CC88: ; 0x0208CC88
	push {r3, r4, r5, lr}
	sub sp, #0x10
	add r4, r0, #0
	mov r0, #0x5d
	lsl r0, r0, #2
	add r0, r4, r0
	bl sub_0201D5C8
	mov r0, #0xa
	lsl r0, r0, #6
	ldr r0, [r4, r0]
	lsl r0, r0, #3
	lsr r0, r0, #0x1f
	beq _0208CD34
	add r0, r4, #4
	bl sub_0201D8E4
	add r0, r4, #0
	add r0, #0x74
	bl sub_0201D8E4
	add r0, r4, #0
	add r0, #0x84
	bl sub_0201D8E4
	add r0, r4, #0
	add r0, #0x94
	bl sub_0201D8E4
	add r0, r4, #0
	add r0, #0xa4
	bl sub_0201D8E4
	add r0, r4, #0
	add r0, #0xb4
	bl sub_0201D8E4
	add r0, r4, #0
	add r0, #0xc4
	bl sub_0201D8E4
	add r0, r4, #0
	add r0, #0xd4
	bl sub_0201D8E4
	add r0, r4, #0
	add r0, #0xe4
	bl sub_0201D8E4
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	bl sub_0201D8E4
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	add r0, #0x10
	bl sub_0201D8E4
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	add r0, #0x20
	bl sub_0201D8E4
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	add r0, #0x30
	bl sub_0201D8E4
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	add r0, #0x40
	bl sub_0201D8E4
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	add r0, #0x50
	bl sub_0201D8E4
	add sp, #0x10
	pop {r3, r4, r5, pc}
_0208CD34:
	add r0, r4, #4
	bl sub_0201D5C8
	add r0, r4, #0
	add r0, #0x74
	bl sub_0201D5C8
	add r0, r4, #0
	add r0, #0x84
	bl sub_0201D5C8
	add r0, r4, #0
	add r0, #0x94
	bl sub_0201D5C8
	add r0, r4, #0
	add r0, #0xa4
	bl sub_0201D5C8
	add r0, r4, #0
	add r0, #0xb4
	bl sub_0201D5C8
	add r0, r4, #0
	add r0, #0xc4
	bl sub_0201D5C8
	add r0, r4, #0
	add r0, #0xd4
	bl sub_0201D5C8
	add r0, r4, #0
	add r0, #0xe4
	bl sub_0201D5C8
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0
	bl FillWindowPixelBuffer
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0
	add r0, #0x10
	bl FillWindowPixelBuffer
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0
	add r0, #0x20
	bl FillWindowPixelBuffer
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0
	add r0, #0x30
	bl FillWindowPixelBuffer
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0
	add r0, #0x40
	bl FillWindowPixelBuffer
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0
	add r0, #0x50
	bl FillWindowPixelBuffer
	mov r1, #0x8b
	lsl r1, r1, #2
	ldr r0, [r4, r1]
	add r1, #0x10
	ldrh r1, [r4, r1]
	ldr r0, [r0, #0x1c]
	bl sub_02074930
	add r2, r0, #0
	beq _0208CDF0
	mov r0, #2
	str r0, [sp]
	add r0, r4, #0
	mov r1, #9
	mov r3, #3
	bl sub_0208C87C
	b _0208CE00
_0208CDF0:
	mov r2, #0x7a
	lsl r2, r2, #4
	ldr r0, [r4, r2]
	add r2, #0xc
	ldr r2, [r4, r2]
	mov r1, #0x16
	bl ReadMsgDataIntoString
_0208CE00:
	mov r1, #0xa
	lsl r1, r1, #6
	ldr r0, [r4, r1]
	lsl r0, r0, #2
	lsr r0, r0, #0x1f
	bne _0208CE1C
	sub r1, #0x5c
	ldr r1, [r4, r1]
	ldr r2, _0208CFA8 ; =0x00010200
	add r0, r4, #0
	mov r3, #2
	bl sub_0208C778
	b _0208CE2A
_0208CE1C:
	sub r1, #0x5c
	ldr r1, [r4, r1]
	ldr r2, _0208CFAC ; =0x00050600
	add r0, r4, #0
	mov r3, #2
	bl sub_0208C778
_0208CE2A:
	mov r1, #0x23
	lsl r1, r1, #4
	mov r0, #0
	ldr r1, [r4, r1]
	add r2, r0, #0
	mov r3, #0x48
	bl sub_020030A0
	mov r1, #0
	add r3, r0, #0
	mov r2, #0x89
	str r1, [sp]
	mov r0, #0xff
	str r0, [sp, #4]
	ldr r0, _0208CFA8 ; =0x00010200
	lsl r2, r2, #2
	str r0, [sp, #8]
	str r1, [sp, #0xc]
	ldr r0, [r4, r2]
	add r2, #0xc
	ldr r2, [r4, r2]
	add r0, #0x10
	bl sub_020200FC
	mov r1, #0x9d
	lsl r1, r1, #2
	ldrb r0, [r4, r1]
	cmp r0, #0
	bne _0208CE96
	sub r1, #0x3c
	mov r0, #0
	ldr r1, [r4, r1]
	add r2, r0, #0
	mov r3, #0x48
	bl sub_020030A0
	mov r1, #0
	add r3, r0, #0
	mov r2, #0x89
	str r1, [sp]
	mov r0, #0xff
	str r0, [sp, #4]
	mov r0, #0xc1
	lsl r0, r0, #0xa
	str r0, [sp, #8]
	str r1, [sp, #0xc]
	lsl r2, r2, #2
	ldr r0, [r4, r2]
	add r2, #0x14
	ldr r2, [r4, r2]
	add r0, #0x20
	bl sub_020200FC
	b _0208CEC4
_0208CE96:
	sub r1, #0x3c
	mov r0, #0
	ldr r1, [r4, r1]
	add r2, r0, #0
	mov r3, #0x48
	bl sub_020030A0
	mov r1, #0
	add r3, r0, #0
	mov r2, #0x89
	str r1, [sp]
	mov r0, #0xff
	str r0, [sp, #4]
	ldr r0, _0208CFAC ; =0x00050600
	lsl r2, r2, #2
	str r0, [sp, #8]
	str r1, [sp, #0xc]
	ldr r0, [r4, r2]
	add r2, #0x14
	ldr r2, [r4, r2]
	add r0, #0x20
	bl sub_020200FC
_0208CEC4:
	mov r0, #2
	mov r2, #0x91
	str r0, [sp]
	lsl r2, r2, #2
	ldr r2, [r4, r2]
	add r0, r4, #0
	lsl r2, r2, #0x10
	mov r1, #0x10
	lsr r2, r2, #0x10
	mov r3, #5
	bl sub_0208C87C
	mov r1, #0x89
	lsl r1, r1, #2
	ldr r1, [r4, r1]
	ldr r2, _0208CFA8 ; =0x00010200
	add r0, r4, #0
	add r1, #0x30
	mov r3, #2
	bl sub_0208C778
	mov r0, #0
	mov r2, #0x92
	str r0, [sp]
	lsl r2, r2, #2
	ldr r2, [r4, r2]
	add r0, r4, #0
	mov r1, #0x12
	mov r3, #7
	bl sub_0208C87C
	mov r1, #0x89
	lsl r1, r1, #2
	ldr r1, [r4, r1]
	ldr r2, _0208CFA8 ; =0x00010200
	add r0, r4, #0
	add r1, #0x40
	mov r3, #1
	bl sub_0208C778
	ldr r3, _0208CFB0 ; =0x00000242
	ldrb r0, [r4, r3]
	lsl r0, r0, #0x19
	lsr r0, r0, #0x19
	cmp r0, #0x64
	bhs _0208CF3C
	mov r0, #0
	add r2, r3, #0
	str r0, [sp]
	add r2, #0xe
	ldr r5, [r4, r2]
	add r2, r3, #6
	ldr r2, [r4, r2]
	add r0, r4, #0
	mov r1, #0x15
	sub r2, r5, r2
	mov r3, #7
	bl sub_0208C87C
	b _0208CF4A
_0208CF3C:
	mov r2, #0
	add r0, r4, #0
	mov r1, #0x15
	mov r3, #7
	str r2, [sp]
	bl sub_0208C87C
_0208CF4A:
	mov r1, #0x89
	lsl r1, r1, #2
	ldr r1, [r4, r1]
	ldr r2, _0208CFA8 ; =0x00010200
	add r0, r4, #0
	add r1, #0x50
	mov r3, #1
	bl sub_0208C778
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	bl sub_0201D5C8
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	add r0, #0x10
	bl sub_0201D5C8
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	add r0, #0x20
	bl sub_0201D5C8
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	add r0, #0x30
	bl sub_0201D5C8
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	add r0, #0x40
	bl sub_0201D5C8
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	add r0, #0x50
	bl sub_0201D5C8
	add sp, #0x10
	pop {r3, r4, r5, pc}
	nop
_0208CFA8: .word 0x00010200
_0208CFAC: .word 0x00050600
_0208CFB0: .word 0x00000242
	thumb_func_end sub_0208CC88

	thumb_func_start sub_0208CFB4
sub_0208CFB4: ; 0x0208CFB4
	push {r3, r4, r5, lr}
	sub sp, #0x10
	add r5, r0, #0
	add r0, r1, #0
	add r1, r2, #0
	mov r2, #0x13
	bl sub_0208E600
	add r4, r0, #0
	ldr r2, [r4, #0x18]
	cmp r2, #0
	beq _0208CFE8
	ldr r0, [r4, #0x14]
	mov r1, #0
	sub r0, r0, #1
	lsl r0, r0, #4
	str r0, [sp]
	mov r0, #0xff
	str r0, [sp, #4]
	ldr r0, _0208D074 ; =0x00010200
	mov r3, #6
	str r0, [sp, #8]
	add r0, r5, #0
	str r1, [sp, #0xc]
	bl sub_020200FC
_0208CFE8:
	ldr r2, [r4, #0x20]
	cmp r2, #0
	beq _0208D00A
	ldr r0, [r4, #0x1c]
	mov r1, #0
	sub r0, r0, #1
	lsl r0, r0, #4
	str r0, [sp]
	mov r0, #0xff
	str r0, [sp, #4]
	ldr r0, _0208D074 ; =0x00010200
	mov r3, #6
	str r0, [sp, #8]
	add r0, r5, #0
	str r1, [sp, #0xc]
	bl sub_020200FC
_0208D00A:
	ldr r2, [r4, #0x28]
	cmp r2, #0
	beq _0208D02C
	ldr r0, [r4, #0x24]
	mov r1, #0
	sub r0, r0, #1
	lsl r0, r0, #4
	str r0, [sp]
	mov r0, #0xff
	str r0, [sp, #4]
	ldr r0, _0208D074 ; =0x00010200
	mov r3, #6
	str r0, [sp, #8]
	add r0, r5, #0
	str r1, [sp, #0xc]
	bl sub_020200FC
_0208D02C:
	ldr r2, [r4, #0x38]
	cmp r2, #0
	beq _0208D04E
	ldr r0, [r4, #0x34]
	mov r1, #0
	sub r0, r0, #1
	lsl r0, r0, #4
	str r0, [sp]
	mov r0, #0xff
	str r0, [sp, #4]
	ldr r0, _0208D074 ; =0x00010200
	mov r3, #6
	str r0, [sp, #8]
	add r0, r5, #0
	str r1, [sp, #0xc]
	bl sub_020200FC
_0208D04E:
	mov r0, #5
	str r0, [sp]
	mov r0, #2
	str r0, [sp, #4]
	mov r0, #0x12
	str r0, [sp, #8]
	mov r2, #0
	str r2, [sp, #0xc]
	ldr r0, [r5]
	mov r1, #1
	mov r3, #0x10
	bl FillBgTilemapRect
	add r0, r4, #0
	bl sub_0208E994
	add sp, #0x10
	pop {r3, r4, r5, pc}
	nop
_0208D074: .word 0x00010200
	thumb_func_end sub_0208CFB4

	thumb_func_start sub_0208D078
sub_0208D078: ; 0x0208D078
	push {r3, r4, r5, r6}
	ldr r6, _0208D0A0 ; =0x00000299
	sub r1, r6, #1
	ldrb r4, [r0, r1]
	sub r1, r6, #2
	ldrb r3, [r0, r1]
	sub r1, r6, #3
	ldrb r2, [r0, r1]
	sub r1, r6, #5
	ldrb r5, [r0, r6]
	sub r6, r6, #4
	ldrb r1, [r0, r1]
	ldrb r0, [r0, r6]
	add r0, r1, r0
	add r0, r2, r0
	add r0, r3, r0
	add r0, r4, r0
	add r0, r5, r0
	pop {r3, r4, r5, r6}
	bx lr
	.balign 4, 0
_0208D0A0: .word 0x00000299
	thumb_func_end sub_0208D078

	thumb_func_start sub_0208D0A4
sub_0208D0A4: ; 0x0208D0A4
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x10
	add r5, r0, #0
	add r0, #0x14
	bl sub_0201D5C8
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	mov r1, #0
	add r0, #0x60
	bl FillWindowPixelBuffer
	add r0, r5, #0
	bl sub_0208A520
	add r6, r0, #0
	add r0, r5, #0
	bl sub_0208C73C
	add r7, r0, #0
	mov r0, #0x8b
	lsl r0, r0, #2
	ldr r1, [r5, r0]
	ldrb r1, [r1, #0x11]
	cmp r1, #2
	bne _0208D102
	mov r0, #0x13
	bl AllocMonZeroed
	add r4, r0, #0
	add r0, r6, #0
	add r1, r4, #0
	bl CopyBoxPokemonToPokemon
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	add r1, r4, #0
	add r0, #0x60
	add r2, r7, #0
	bl sub_0208CFB4
	add r0, r4, #0
	bl FreeToHeap
	b _0208D110
_0208D102:
	sub r0, #8
	ldr r0, [r5, r0]
	add r1, r6, #0
	add r0, #0x60
	add r2, r7, #0
	bl sub_0208CFB4
_0208D110:
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	add r0, #0x60
	bl sub_0201D5C8
	add r0, r5, #0
	bl sub_0208D078
	cmp r0, #0
	beq _0208D170
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	mov r1, #0
	add r0, #0x70
	bl FillWindowPixelBuffer
	mov r0, #0x7a
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	mov r1, #0xc0
	bl NewString_ReadMsgData
	mov r1, #0
	add r4, r0, #0
	str r1, [sp]
	ldr r0, _0208D174 ; =0x00010200
	str r1, [sp, #4]
	str r0, [sp, #8]
	mov r0, #0x89
	str r1, [sp, #0xc]
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	add r2, r4, #0
	add r0, #0x70
	add r3, r1, #0
	bl sub_020200FC
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	add r0, #0x70
	bl sub_0201D5C8
	add r0, r4, #0
	bl String_dtor
_0208D170:
	add sp, #0x10
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_0208D174: .word 0x00010200
	thumb_func_end sub_0208D0A4

	thumb_func_start sub_0208D178
sub_0208D178: ; 0x0208D178
	push {r3, r4, r5, lr}
	sub sp, #0x18
	mov r3, #0
	mov r1, #0x10
	mov r2, #0x6f
	add r4, r0, #0
	str r3, [sp]
	bl sub_0208C7F8
	mov r0, #0
	str r0, [sp]
	add r0, r4, #0
	mov r1, #0x11
	mov r2, #0x70
	mov r3, #1
	bl sub_0208C7F8
	mov r0, #0
	str r0, [sp]
	add r0, r4, #0
	mov r1, #0x12
	mov r2, #0x71
	mov r3, #3
	bl sub_0208C7F8
	mov r0, #0
	str r0, [sp]
	add r0, r4, #0
	mov r1, #0x13
	mov r2, #0x72
	mov r3, #4
	bl sub_0208C7F8
	mov r0, #0
	str r0, [sp]
	add r0, r4, #0
	mov r1, #0x14
	mov r2, #0x73
	mov r3, #2
	bl sub_0208C7F8
	add r0, r4, #0
	add r0, #0x24
	bl sub_0201D5C8
	add r0, r4, #0
	add r0, #0xf4
	bl sub_0201D5C8
	mov r0, #0x41
	lsl r0, r0, #2
	add r0, r4, r0
	bl sub_0201D5C8
	mov r0, #0x45
	lsl r0, r0, #2
	add r0, r4, r0
	bl sub_0201D5C8
	mov r0, #0x49
	lsl r0, r0, #2
	add r0, r4, r0
	bl sub_0201D5C8
	mov r0, #0x4d
	lsl r0, r0, #2
	add r0, r4, r0
	bl sub_0201D5C8
	mov r0, #0x51
	lsl r0, r0, #2
	add r0, r4, r0
	bl sub_0201D5C8
	mov r0, #0x55
	lsl r0, r0, #2
	add r0, r4, r0
	bl sub_0201D5C8
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0
	bl FillWindowPixelBuffer
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0
	add r0, #0x10
	bl FillWindowPixelBuffer
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0
	add r0, #0x20
	bl FillWindowPixelBuffer
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0
	add r0, #0x30
	bl FillWindowPixelBuffer
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0
	add r0, #0x40
	bl FillWindowPixelBuffer
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0
	add r0, #0x50
	bl FillWindowPixelBuffer
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0
	add r0, #0x60
	bl FillWindowPixelBuffer
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0
	add r0, #0x70
	bl FillWindowPixelBuffer
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	bl GetWindowWidth
	mov r1, #0x76
	str r1, [sp]
	mov r1, #0x95
	lsl r1, r1, #2
	ldrh r2, [r4, r1]
	lsl r0, r0, #0x1a
	add r1, r1, #2
	str r2, [sp, #4]
	ldrh r1, [r4, r1]
	lsr r0, r0, #0x18
	mov r2, #0x75
	str r1, [sp, #8]
	mov r1, #3
	str r1, [sp, #0xc]
	str r0, [sp, #0x10]
	mov r1, #0
	add r0, r4, #0
	mov r3, #0x77
	str r1, [sp, #0x14]
	bl sub_0208C8C8
	mov r0, #0
	mov r2, #0x96
	str r0, [sp]
	lsl r2, r2, #2
	ldrh r2, [r4, r2]
	add r0, r4, #0
	mov r1, #0x78
	mov r3, #3
	bl sub_0208C87C
	mov r1, #0x89
	lsl r1, r1, #2
	ldr r1, [r4, r1]
	ldr r2, _0208D458 ; =0x00010200
	add r0, r4, #0
	add r1, #0x10
	mov r3, #1
	bl sub_0208C778
	mov r0, #0
	str r0, [sp]
	ldr r2, _0208D45C ; =0x0000025A
	add r0, r4, #0
	ldrh r2, [r4, r2]
	mov r1, #0x79
	mov r3, #3
	bl sub_0208C87C
	mov r1, #0x89
	lsl r1, r1, #2
	ldr r1, [r4, r1]
	ldr r2, _0208D458 ; =0x00010200
	add r0, r4, #0
	add r1, #0x20
	mov r3, #1
	bl sub_0208C778
	mov r0, #0
	mov r2, #0x97
	str r0, [sp]
	lsl r2, r2, #2
	ldrh r2, [r4, r2]
	add r0, r4, #0
	mov r1, #0x7a
	mov r3, #3
	bl sub_0208C87C
	mov r1, #0x89
	lsl r1, r1, #2
	ldr r1, [r4, r1]
	ldr r2, _0208D458 ; =0x00010200
	add r0, r4, #0
	add r1, #0x30
	mov r3, #1
	bl sub_0208C778
	mov r0, #0
	str r0, [sp]
	ldr r2, _0208D460 ; =0x0000025E
	add r0, r4, #0
	ldrh r2, [r4, r2]
	mov r1, #0x7b
	mov r3, #3
	bl sub_0208C87C
	mov r1, #0x89
	lsl r1, r1, #2
	ldr r1, [r4, r1]
	ldr r2, _0208D458 ; =0x00010200
	add r0, r4, #0
	add r1, #0x40
	mov r3, #1
	bl sub_0208C778
	mov r0, #0
	mov r2, #0x26
	str r0, [sp]
	lsl r2, r2, #4
	ldrh r2, [r4, r2]
	add r0, r4, #0
	mov r1, #0x7c
	mov r3, #3
	bl sub_0208C87C
	mov r1, #0x89
	lsl r1, r1, #2
	ldr r1, [r4, r1]
	ldr r2, _0208D458 ; =0x00010200
	add r0, r4, #0
	add r1, #0x50
	mov r3, #1
	bl sub_0208C778
	ldr r2, _0208D464 ; =0x00000262
	ldr r0, _0208D468 ; =0x000007A8
	ldrb r2, [r4, r2]
	ldr r0, [r4, r0]
	mov r1, #0
	bl BufferAbilityName
	mov r0, #0x7a
	lsl r0, r0, #4
	ldr r0, [r4, r0]
	mov r1, #0x7d
	bl NewString_ReadMsgData
	add r5, r0, #0
	ldr r1, _0208D468 ; =0x000007A8
	add r2, r5, #0
	ldr r0, [r4, r1]
	add r1, r1, #4
	ldr r1, [r4, r1]
	bl StringExpandPlaceholders
	add r0, r5, #0
	bl String_dtor
	mov r1, #0x89
	lsl r1, r1, #2
	ldr r1, [r4, r1]
	ldr r2, _0208D458 ; =0x00010200
	add r0, r4, #0
	add r1, #0x60
	mov r3, #0
	bl sub_0208C778
	ldr r2, _0208D46C ; =0x000002D2
	mov r0, #1
	mov r1, #0x1b
	mov r3, #0x13
	bl NewMsgDataFromNarc
	ldr r1, _0208D464 ; =0x00000262
	ldr r2, _0208D470 ; =0x000007AC
	ldrb r1, [r4, r1]
	ldr r2, [r4, r2]
	add r5, r0, #0
	bl ReadMsgDataIntoString
	add r0, r5, #0
	bl DestroyMsgData
	mov r1, #0
	str r1, [sp]
	mov r0, #0xff
	str r0, [sp, #4]
	ldr r0, _0208D458 ; =0x00010200
	ldr r2, _0208D470 ; =0x000007AC
	str r0, [sp, #8]
	mov r0, #0x89
	str r1, [sp, #0xc]
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	ldr r2, [r4, r2]
	add r0, #0x70
	mov r3, #3
	bl sub_020200FC
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	bl sub_0201D5C8
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	add r0, #0x10
	bl sub_0201D5C8
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	add r0, #0x20
	bl sub_0201D5C8
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	add r0, #0x30
	bl sub_0201D5C8
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	add r0, #0x40
	bl sub_0201D5C8
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	add r0, #0x50
	bl sub_0201D5C8
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	add r0, #0x60
	bl sub_0201D5C8
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	add r0, #0x70
	bl sub_0201D5C8
	add sp, #0x18
	pop {r3, r4, r5, pc}
	nop
_0208D458: .word 0x00010200
_0208D45C: .word 0x0000025A
_0208D460: .word 0x0000025E
_0208D464: .word 0x00000262
_0208D468: .word 0x000007A8
_0208D46C: .word 0x000002D2
_0208D470: .word 0x000007AC
	thumb_func_end sub_0208D178

	thumb_func_start sub_0208D474
sub_0208D474: ; 0x0208D474
	push {r4, lr}
	add r4, r0, #0
	mov r0, #0x8b
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	ldrb r0, [r0, #0x12]
	cmp r0, #2
	beq _0208D48C
	add r0, r4, #0
	add r0, #0x44
	bl sub_0201D5C8
_0208D48C:
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0
	add r0, #0x80
	bl FillWindowPixelBuffer
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0
	add r0, #0x90
	bl FillWindowPixelBuffer
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0
	add r0, #0xa0
	bl FillWindowPixelBuffer
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0
	add r0, #0xb0
	bl FillWindowPixelBuffer
	add r0, r4, #0
	mov r1, #0
	bl sub_0208D884
	add r0, r4, #0
	mov r1, #1
	bl sub_0208D884
	add r0, r4, #0
	mov r1, #2
	bl sub_0208D884
	add r0, r4, #0
	mov r1, #3
	bl sub_0208D884
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	add r0, #0x80
	bl sub_0201D5C8
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	add r0, #0x90
	bl sub_0201D5C8
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	add r0, #0xa0
	bl sub_0201D5C8
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	add r0, #0xb0
	bl sub_0201D5C8
	mov r0, #0x5d
	lsl r0, r0, #2
	add r0, r4, r0
	bl sub_0201D5C8
	pop {r4, pc}
	thumb_func_end sub_0208D474

	thumb_func_start sub_0208D520
sub_0208D520: ; 0x0208D520
	push {r4, lr}
	sub sp, #0x10
	add r4, r0, #0
	add r0, #0x54
	bl sub_0201D5C8
	mov r0, #0x8b
	lsl r0, r0, #2
	ldr r1, [r4, r0]
	ldr r1, [r1, #0x34]
	cmp r1, #0
	bne _0208D53A
	b _0208D6AA
_0208D53A:
	sub r0, #8
	ldr r0, [r4, r0]
	mov r1, #0
	add r0, #0x30
	bl FillWindowPixelBuffer
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0
	add r0, #0x40
	bl FillWindowPixelBuffer
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0
	add r0, #0x50
	bl FillWindowPixelBuffer
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0
	add r0, #0x60
	bl FillWindowPixelBuffer
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0
	add r0, #0x70
	bl FillWindowPixelBuffer
	mov r2, #0x7a
	lsl r2, r2, #4
	ldr r0, [r4, r2]
	add r2, #0xc
	ldr r2, [r4, r2]
	mov r1, #0xbb
	bl ReadMsgDataIntoString
	mov r1, #0
	str r1, [sp]
	mov r0, #0xff
	str r0, [sp, #4]
	ldr r0, _0208D6B0 ; =0x00010200
	ldr r2, _0208D6B4 ; =0x000007AC
	str r0, [sp, #8]
	mov r0, #0x89
	str r1, [sp, #0xc]
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	ldr r2, [r4, r2]
	add r0, #0x30
	mov r3, #4
	bl sub_020200FC
	mov r2, #0x7a
	lsl r2, r2, #4
	ldr r0, [r4, r2]
	add r2, #0xc
	ldr r2, [r4, r2]
	mov r1, #0xbc
	bl ReadMsgDataIntoString
	mov r1, #0
	str r1, [sp]
	mov r0, #0xff
	str r0, [sp, #4]
	ldr r0, _0208D6B0 ; =0x00010200
	ldr r2, _0208D6B4 ; =0x000007AC
	str r0, [sp, #8]
	mov r0, #0x89
	str r1, [sp, #0xc]
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	ldr r2, [r4, r2]
	add r0, #0x40
	mov r3, #4
	bl sub_020200FC
	mov r2, #0x7a
	lsl r2, r2, #4
	ldr r0, [r4, r2]
	add r2, #0xc
	ldr r2, [r4, r2]
	mov r1, #0xbd
	bl ReadMsgDataIntoString
	mov r1, #0
	str r1, [sp]
	mov r0, #0xff
	str r0, [sp, #4]
	ldr r0, _0208D6B0 ; =0x00010200
	ldr r2, _0208D6B4 ; =0x000007AC
	str r0, [sp, #8]
	mov r0, #0x89
	str r1, [sp, #0xc]
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	ldr r2, [r4, r2]
	add r0, #0x50
	mov r3, #4
	bl sub_020200FC
	mov r2, #0x7a
	lsl r2, r2, #4
	ldr r0, [r4, r2]
	add r2, #0xc
	ldr r2, [r4, r2]
	mov r1, #0xbe
	bl ReadMsgDataIntoString
	mov r1, #0
	str r1, [sp]
	mov r0, #0xff
	str r0, [sp, #4]
	ldr r0, _0208D6B0 ; =0x00010200
	ldr r2, _0208D6B4 ; =0x000007AC
	str r0, [sp, #8]
	mov r0, #0x89
	str r1, [sp, #0xc]
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	ldr r2, [r4, r2]
	add r0, #0x60
	mov r3, #4
	bl sub_020200FC
	mov r2, #0x7a
	lsl r2, r2, #4
	ldr r0, [r4, r2]
	add r2, #0xc
	ldr r2, [r4, r2]
	mov r1, #0xbf
	bl ReadMsgDataIntoString
	mov r1, #0
	str r1, [sp]
	mov r0, #0xff
	str r0, [sp, #4]
	ldr r0, _0208D6B0 ; =0x00010200
	ldr r2, _0208D6B4 ; =0x000007AC
	str r0, [sp, #8]
	mov r0, #0x89
	str r1, [sp, #0xc]
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	ldr r2, [r4, r2]
	add r0, #0x70
	mov r3, #4
	bl sub_020200FC
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	add r0, #0x30
	bl sub_0201D5C8
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	add r0, #0x40
	bl sub_0201D5C8
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	add r0, #0x50
	bl sub_0201D5C8
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	add r0, #0x60
	bl sub_0201D5C8
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	add r0, #0x70
	bl sub_0201D5C8
_0208D6AA:
	add sp, #0x10
	pop {r4, pc}
	nop
_0208D6B0: .word 0x00010200
_0208D6B4: .word 0x000007AC
	thumb_func_end sub_0208D520

	thumb_func_start sub_0208D6B8
sub_0208D6B8: ; 0x0208D6B8
	push {r3, r4, lr}
	sub sp, #4
	add r4, r0, #0
	mov r0, #0x79
	lsl r0, r0, #2
	add r0, r4, r0
	bl sub_0201D5C8
	mov r0, #0x75
	lsl r0, r0, #2
	add r0, r4, r0
	bl sub_0201D5C8
	mov r0, #0x5d
	lsl r0, r0, #2
	add r0, r4, r0
	bl sub_0201D5C8
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0
	bl FillWindowPixelBuffer
	mov r0, #0
	str r0, [sp]
	ldr r2, _0208D720 ; =0x000007C6
	add r0, r4, #0
	ldrb r2, [r4, r2]
	mov r1, #0xb7
	mov r3, #3
	bl sub_0208C87C
	mov r1, #0x89
	lsl r1, r1, #2
	ldr r1, [r4, r1]
	ldr r2, _0208D724 ; =0x00010200
	add r0, r4, #0
	mov r3, #0
	bl sub_0208C778
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	bl sub_0201D5C8
	ldr r0, [r4]
	mov r1, #4
	bl BgCommitTilemapBufferToVram
	add sp, #4
	pop {r3, r4, pc}
	.balign 4, 0
_0208D720: .word 0x000007C6
_0208D724: .word 0x00010200
	thumb_func_end sub_0208D6B8

	thumb_func_start sub_0208D728
sub_0208D728: ; 0x0208D728
	push {r4, lr}
	sub sp, #0x10
	add r4, r0, #0
	mov r0, #0x8b
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	ldrb r0, [r0, #0x12]
	cmp r0, #3
	beq _0208D73E
	cmp r0, #4
	bne _0208D7B0
_0208D73E:
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0
	add r0, #0x10
	bl FillWindowPixelBuffer
	mov r2, #0x7a
	lsl r2, r2, #4
	ldr r0, [r4, r2]
	add r2, #0xc
	ldr r2, [r4, r2]
	mov r1, #0xa5
	bl ReadMsgDataIntoString
	mov r1, #0x89
	lsl r1, r1, #2
	ldr r1, [r4, r1]
	ldr r2, _0208D7B4 ; =0x000E0F00
	add r0, r4, #0
	add r1, #0x10
	mov r3, #0
	bl sub_0208C778
	ldr r1, _0208D7B8 ; =0x0000027B
	mov r2, #0x7a
	lsl r2, r2, #4
	ldrb r1, [r4, r1]
	ldr r0, [r4, r2]
	add r2, #0xc
	ldr r2, [r4, r2]
	add r1, #0xa6
	bl ReadMsgDataIntoString
	mov r0, #0x10
	str r0, [sp]
	mov r0, #0xff
	str r0, [sp, #4]
	ldr r0, _0208D7BC ; =0x00010200
	mov r1, #0
	str r0, [sp, #8]
	mov r0, #0x89
	str r1, [sp, #0xc]
	lsl r0, r0, #2
	ldr r2, _0208D7C0 ; =0x000007AC
	ldr r0, [r4, r0]
	ldr r2, [r4, r2]
	add r0, #0x10
	add r3, r1, #0
	bl sub_020200FC
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	add r0, #0x10
	bl sub_0201D5C8
_0208D7B0:
	add sp, #0x10
	pop {r4, pc}
	.balign 4, 0
_0208D7B4: .word 0x000E0F00
_0208D7B8: .word 0x0000027B
_0208D7BC: .word 0x00010200
_0208D7C0: .word 0x000007AC
	thumb_func_end sub_0208D728

	thumb_func_start sub_0208D7C4
sub_0208D7C4: ; 0x0208D7C4
	push {r4, lr}
	add r4, r0, #0
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0
	add r0, #0x10
	bl FillWindowPixelBuffer
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0
	add r0, #0x20
	bl FillWindowPixelBuffer
	ldr r0, _0208D870 ; =0x000007C4
	add r1, r0, #1
	ldrb r2, [r4, r1]
	ldrb r3, [r4, r0]
	lsl r1, r2, #3
	add r1, r2, r1
	add r2, r3, r1
	add r1, r0, #2
	ldrb r1, [r4, r1]
	cmp r2, r1
	bge _0208D854
	add r0, r0, #3
	ldrb r0, [r4, r0]
	mov r1, #3
	bl sub_0208E55C
	ldr r2, _0208D874 ; =0x000007A4
	add r1, r0, #0
	ldr r0, [r4, r2]
	add r2, #8
	ldr r2, [r4, r2]
	bl ReadMsgDataIntoString
	mov r1, #0x89
	lsl r1, r1, #2
	ldr r1, [r4, r1]
	ldr r2, _0208D878 ; =0x000E0F00
	add r0, r4, #0
	add r1, #0x10
	mov r3, #0
	bl sub_0208C778
	mov r0, #0x8b
	lsl r0, r0, #2
	ldr r1, _0208D87C ; =0x000007C7
	ldr r0, [r4, r0]
	ldrb r1, [r4, r1]
	ldr r0, [r0, #0x20]
	bl sub_0208E5C0
	ldr r2, _0208D874 ; =0x000007A4
	add r1, r0, #0
	ldr r0, [r4, r2]
	add r2, #8
	ldr r2, [r4, r2]
	bl ReadMsgDataIntoString
	mov r1, #0x89
	lsl r1, r1, #2
	ldr r1, [r4, r1]
	ldr r2, _0208D880 ; =0x00010200
	add r0, r4, #0
	add r1, #0x20
	mov r3, #0
	bl sub_0208C778
_0208D854:
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	add r0, #0x10
	bl sub_0201D5C8
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	add r0, #0x20
	bl sub_0201D5C8
	pop {r4, pc}
	nop
_0208D870: .word 0x000007C4
_0208D874: .word 0x000007A4
_0208D878: .word 0x000E0F00
_0208D87C: .word 0x000007C7
_0208D880: .word 0x00010200
	thumb_func_end sub_0208D7C4

	thumb_func_start sub_0208D884
sub_0208D884: ; 0x0208D884
	push {r4, r5, r6, r7, lr}
	sub sp, #0x24
	add r5, r0, #0
	mov r0, #0x89
	add r4, r1, #0
	lsl r0, r0, #2
	add r1, #8
	lsl r7, r1, #4
	ldr r6, [r5, r0]
	cmp r4, #4
	beq _0208D8B8
	lsl r1, r4, #1
	add r2, r5, r1
	add r1, r0, #0
	add r1, #0x40
	ldrh r1, [r2, r1]
	add r2, r0, #0
	add r2, #0x48
	str r1, [sp, #0x20]
	add r1, r5, r4
	ldrb r2, [r1, r2]
	add r0, #0x4c
	str r2, [sp, #0x1c]
	ldrb r0, [r1, r0]
	str r0, [sp, #0x18]
	b _0208D8CA
_0208D8B8:
	add r0, #8
	ldr r0, [r5, r0]
	mov r1, #0
	ldrh r0, [r0, #0x18]
	str r0, [sp, #0x20]
	bl sub_0207332C
	str r0, [sp, #0x1c]
	str r0, [sp, #0x18]
_0208D8CA:
	ldr r2, _0208D994 ; =0x000007B4
	ldr r1, [sp, #0x20]
	ldr r0, [r5, r2]
	sub r2, #8
	ldr r2, [r5, r2]
	bl ReadMsgDataIntoString
	mov r0, #2
	str r0, [sp]
	mov r0, #0xff
	str r0, [sp, #4]
	ldr r0, _0208D998 ; =0x00010200
	mov r1, #0
	str r0, [sp, #8]
	ldr r2, _0208D99C ; =0x000007AC
	str r1, [sp, #0xc]
	ldr r2, [r5, r2]
	add r0, r6, r7
	mov r3, #1
	bl sub_020200FC
	ldr r0, [sp, #0x20]
	cmp r0, #0
	beq _0208D952
	mov r2, #0x7a
	lsl r2, r2, #4
	ldr r0, [r5, r2]
	add r2, #0xc
	ldr r2, [r5, r2]
	mov r1, #0x87
	bl ReadMsgDataIntoString
	mov r3, #0x10
	str r3, [sp]
	mov r0, #0xff
	str r0, [sp, #4]
	ldr r0, _0208D998 ; =0x00010200
	mov r1, #0
	str r0, [sp, #8]
	ldr r2, _0208D99C ; =0x000007AC
	str r1, [sp, #0xc]
	ldr r2, [r5, r2]
	add r0, r6, r7
	bl sub_020200FC
	add r0, r4, #0
	add r1, r4, #0
	add r0, #0x8d
	str r0, [sp]
	ldr r0, [sp, #0x1c]
	add r4, #0x88
	str r0, [sp, #4]
	ldr r0, [sp, #0x18]
	add r1, #8
	str r0, [sp, #8]
	mov r0, #2
	str r0, [sp, #0xc]
	mov r0, #0x3c
	str r0, [sp, #0x10]
	mov r0, #0x10
	str r0, [sp, #0x14]
	add r0, r5, #0
	mov r2, #0x75
	add r3, r4, #0
	bl sub_0208C8C8
	add sp, #0x24
	pop {r4, r5, r6, r7, pc}
_0208D952:
	mov r2, #0x7a
	lsl r2, r2, #4
	ldr r0, [r5, r2]
	add r2, #0xc
	ldr r2, [r5, r2]
	mov r1, #0x99
	bl ReadMsgDataIntoString
	ldr r1, _0208D99C ; =0x000007AC
	mov r0, #0
	ldr r1, [r5, r1]
	add r2, r0, #0
	bl sub_02002F30
	add r3, r0, #0
	mov r0, #0x10
	str r0, [sp]
	mov r0, #0xff
	str r0, [sp, #4]
	ldr r0, _0208D998 ; =0x00010200
	lsr r4, r3, #1
	str r0, [sp, #8]
	mov r1, #0
	mov r3, #0x3c
	ldr r2, _0208D99C ; =0x000007AC
	str r1, [sp, #0xc]
	ldr r2, [r5, r2]
	add r0, r6, r7
	sub r3, r3, r4
	bl sub_020200FC
	add sp, #0x24
	pop {r4, r5, r6, r7, pc}
	.balign 4, 0
_0208D994: .word 0x000007B4
_0208D998: .word 0x00010200
_0208D99C: .word 0x000007AC
	thumb_func_end sub_0208D884

	thumb_func_start sub_0208D9A0
sub_0208D9A0: ; 0x0208D9A0
	push {r3, r4, r5, r6, lr}
	sub sp, #4
	add r5, r0, #0
	mov r0, #0x61
	lsl r0, r0, #2
	add r0, r5, r0
	add r4, r1, #0
	bl sub_0201D5C8
	mov r0, #0x65
	lsl r0, r0, #2
	add r0, r5, r0
	bl sub_0201D5C8
	mov r0, #0x69
	lsl r0, r0, #2
	add r0, r5, r0
	bl sub_0201D5C8
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	mov r1, #0
	add r0, #0xd0
	bl FillWindowPixelBuffer
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	mov r1, #0
	add r0, #0xe0
	bl FillWindowPixelBuffer
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	mov r1, #0
	add r0, #0xf0
	bl FillWindowPixelBuffer
	add r0, r4, #0
	mov r1, #2
	bl sub_02073314
	add r2, r0, #0
	cmp r2, #1
	bhi _0208DA10
	mov r2, #0x7a
	lsl r2, r2, #4
	ldr r0, [r5, r2]
	add r2, #0xc
	ldr r2, [r5, r2]
	mov r1, #0x9a
	bl ReadMsgDataIntoString
	b _0208DA1E
_0208DA10:
	mov r0, #0
	str r0, [sp]
	add r0, r5, #0
	mov r1, #0x96
	mov r3, #3
	bl sub_0208C87C
_0208DA1E:
	mov r1, #0x89
	lsl r1, r1, #2
	ldr r1, [r5, r1]
	ldr r2, _0208DAC8 ; =0x00010200
	add r0, r5, #0
	add r1, #0xd0
	mov r3, #1
	bl sub_0208C778
	add r0, r4, #0
	mov r1, #4
	bl sub_02073314
	add r2, r0, #0
	bne _0208DA4E
	mov r2, #0x7a
	lsl r2, r2, #4
	ldr r0, [r5, r2]
	add r2, #0xc
	ldr r2, [r5, r2]
	mov r1, #0x9a
	bl ReadMsgDataIntoString
	b _0208DA5C
_0208DA4E:
	mov r0, #0
	str r0, [sp]
	add r0, r5, #0
	mov r1, #0x97
	mov r3, #3
	bl sub_0208C87C
_0208DA5C:
	mov r1, #0x89
	lsl r1, r1, #2
	ldr r1, [r5, r1]
	ldr r2, _0208DAC8 ; =0x00010200
	add r0, r5, #0
	add r1, #0xe0
	mov r3, #1
	bl sub_0208C778
	ldr r2, _0208DACC ; =0x000002ED
	mov r0, #1
	mov r1, #0x1b
	mov r3, #0x13
	bl NewMsgDataFromNarc
	ldr r2, _0208DAD0 ; =0x000007AC
	add r1, r4, #0
	ldr r2, [r5, r2]
	add r6, r0, #0
	bl ReadMsgDataIntoString
	mov r1, #0x89
	lsl r1, r1, #2
	ldr r1, [r5, r1]
	ldr r2, _0208DAC8 ; =0x00010200
	add r0, r5, #0
	add r1, #0xf0
	mov r3, #0
	bl sub_0208C778
	add r0, r6, #0
	bl DestroyMsgData
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	add r0, #0xd0
	bl sub_0201D5C8
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	add r0, #0xe0
	bl sub_0201D5C8
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	add r0, #0xf0
	bl sub_0201D5C8
	add sp, #4
	pop {r3, r4, r5, r6, pc}
	nop
_0208DAC8: .word 0x00010200
_0208DACC: .word 0x000002ED
_0208DAD0: .word 0x000007AC
	thumb_func_end sub_0208D9A0

	thumb_func_start sub_0208DAD4
sub_0208DAD4: ; 0x0208DAD4
	push {r4, lr}
	add r4, r0, #0
	mov r0, #0x61
	lsl r0, r0, #2
	add r0, r4, r0
	bl sub_0201D8E4
	mov r0, #0x65
	lsl r0, r0, #2
	add r0, r4, r0
	bl sub_0201D8E4
	mov r0, #0x69
	lsl r0, r0, #2
	add r0, r4, r0
	bl sub_0201D8E4
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	add r0, #0xd0
	bl sub_0201D8E4
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	add r0, #0xe0
	bl sub_0201D8E4
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	add r0, #0xf0
	bl sub_0201D8E4
	pop {r4, pc}
	thumb_func_end sub_0208DAD4

	thumb_func_start sub_0208DB1C
sub_0208DB1C: ; 0x0208DB1C
	push {r4, lr}
	add r4, r0, #0
	mov r0, #0x8b
	lsl r0, r0, #2
	ldr r1, [r4, r0]
	ldrh r1, [r1, #0x18]
	cmp r1, #0
	beq _0208DB4E
	sub r0, #8
	ldr r0, [r4, r0]
	mov r1, #0
	add r0, #0xc0
	bl FillWindowPixelBuffer
	add r0, r4, #0
	mov r1, #4
	bl sub_0208D884
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	add r0, #0xc0
	bl sub_0201D5C8
	pop {r4, pc}
_0208DB4E:
	sub r0, #0xb8
	add r0, r4, r0
	bl sub_0201D5C8
	pop {r4, pc}
	thumb_func_end sub_0208DB1C

	thumb_func_start sub_0208DB58
sub_0208DB58: ; 0x0208DB58
	ldr r3, _0208DB60 ; =ScheduleBgTilemapBufferTransfer
	ldr r0, [r0]
	mov r1, #1
	bx r3
	.balign 4, 0
_0208DB60: .word ScheduleBgTilemapBufferTransfer
	thumb_func_end sub_0208DB58

	thumb_func_start sub_0208DB64
sub_0208DB64: ; 0x0208DB64
	push {r4, lr}
	add r4, r0, #0
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r1, [r4, r0]
	ldr r0, _0208DBEC ; =0x000007BD
	ldrb r0, [r4, r0]
	lsl r0, r0, #0x1c
	lsr r0, r0, #0x1c
	add r0, #8
	lsl r0, r0, #4
	add r0, r1, r0
	mov r1, #0
	bl FillWindowPixelBuffer
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r1, [r4, r0]
	ldr r0, _0208DBEC ; =0x000007BD
	ldrb r0, [r4, r0]
	lsl r0, r0, #0x18
	lsr r0, r0, #0x1c
	add r0, #8
	lsl r0, r0, #4
	add r0, r1, r0
	mov r1, #0
	bl FillWindowPixelBuffer
	ldr r1, _0208DBEC ; =0x000007BD
	add r0, r4, #0
	ldrb r1, [r4, r1]
	lsl r1, r1, #0x1c
	lsr r1, r1, #0x1c
	bl sub_0208D884
	ldr r1, _0208DBEC ; =0x000007BD
	add r0, r4, #0
	ldrb r1, [r4, r1]
	lsl r1, r1, #0x18
	lsr r1, r1, #0x1c
	bl sub_0208D884
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r1, [r4, r0]
	ldr r0, _0208DBEC ; =0x000007BD
	ldrb r0, [r4, r0]
	lsl r0, r0, #0x1c
	lsr r0, r0, #0x1c
	add r0, #8
	lsl r0, r0, #4
	add r0, r1, r0
	bl sub_0201D5C8
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r1, [r4, r0]
	ldr r0, _0208DBEC ; =0x000007BD
	ldrb r0, [r4, r0]
	lsl r0, r0, #0x18
	lsr r0, r0, #0x1c
	add r0, #8
	lsl r0, r0, #4
	add r0, r1, r0
	bl sub_0201D5C8
	pop {r4, pc}
	nop
_0208DBEC: .word 0x000007BD
	thumb_func_end sub_0208DB64

	thumb_func_start sub_0208DBF0
sub_0208DBF0: ; 0x0208DBF0
	push {r3, r4, r5, lr}
	add r5, r0, #0
	ldr r0, _0208DC60 ; =0x000007BC
	ldrsb r0, [r5, r0]
	cmp r0, #1
	bne _0208DC2A
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	add r0, #0xd0
	bl sub_0201D8E4
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	add r0, #0xe0
	bl sub_0201D8E4
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	add r0, #0xf0
	bl sub_0201D8E4
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r4, [r5, r0]
	add r4, #0xf0
	b _0208DC32
_0208DC2A:
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r4, [r5, r0]
	add r4, #0x50
_0208DC32:
	add r0, r4, #0
	mov r1, #0
	bl FillWindowPixelBuffer
	mov r2, #0x7a
	lsl r2, r2, #4
	ldr r0, [r5, r2]
	add r2, #0xc
	ldr r2, [r5, r2]
	mov r1, #0x9c
	bl ReadMsgDataIntoString
	ldr r2, _0208DC64 ; =0x00010200
	add r0, r5, #0
	add r1, r4, #0
	mov r3, #0
	bl sub_0208C778
	add r0, r4, #0
	bl sub_0201D5C8
	pop {r3, r4, r5, pc}
	nop
_0208DC60: .word 0x000007BC
_0208DC64: .word 0x00010200
	thumb_func_end sub_0208DBF0

	thumb_func_start sub_0208DC68
sub_0208DC68: ; 0x0208DC68
	push {r4, lr}
	sub sp, #0x10
	add r4, r0, #0
	cmp r1, #1
	bne _0208DCD6
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r1, [r4, r0]
	mov r0, #1
	lsl r0, r0, #8
	add r0, r1, r0
	mov r1, #0
	bl FillWindowPixelBuffer
	mov r2, #0x7a
	lsl r2, r2, #4
	ldr r0, [r4, r2]
	add r2, #0xc
	ldr r2, [r4, r2]
	mov r1, #0xc1
	bl ReadMsgDataIntoString
	mov r3, #0
	str r3, [sp]
	mov r2, #0xff
	ldr r0, _0208DD18 ; =0x000E0F00
	str r2, [sp, #4]
	str r0, [sp, #8]
	mov r0, #0x89
	str r3, [sp, #0xc]
	lsl r0, r0, #2
	ldr r1, [r4, r0]
	add r0, r2, #1
	ldr r2, _0208DD1C ; =0x000007AC
	add r0, r1, r0
	ldr r2, [r4, r2]
	mov r1, #4
	bl sub_020200FC
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	add r0, #0xc0
	bl sub_0201D8E4
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r1, [r4, r0]
	mov r0, #1
	lsl r0, r0, #8
	add r0, r1, r0
	bl sub_0201D5C8
	add sp, #0x10
	pop {r4, pc}
_0208DCD6:
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r1, [r4, r0]
	mov r0, #1
	lsl r0, r0, #8
	add r0, r1, r0
	bl sub_0201D8E4
	mov r0, #0x8b
	lsl r0, r0, #2
	ldr r1, [r4, r0]
	ldrh r1, [r1, #0x18]
	cmp r1, #0
	beq _0208DD12
	sub r0, #8
	ldr r0, [r4, r0]
	mov r1, #0
	add r0, #0xc0
	bl FillWindowPixelBuffer
	add r0, r4, #0
	mov r1, #4
	bl sub_0208D884
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	add r0, #0xc0
	bl sub_0201D5C8
_0208DD12:
	add sp, #0x10
	pop {r4, pc}
	nop
_0208DD18: .word 0x000E0F00
_0208DD1C: .word 0x000007AC
	thumb_func_end sub_0208DC68

	thumb_func_start sub_0208DD20
sub_0208DD20: ; 0x0208DD20
	push {r4, lr}
	sub sp, #0x10
	add r4, r0, #0
	cmp r1, #1
	bne _0208DD82
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r1, [r4, r0]
	mov r0, #0x11
	lsl r0, r0, #4
	add r0, r1, r0
	mov r1, #0
	bl FillWindowPixelBuffer
	mov r2, #0x7a
	lsl r2, r2, #4
	ldr r0, [r4, r2]
	add r2, #0xc
	ldr r2, [r4, r2]
	mov r1, #0xc2
	bl ReadMsgDataIntoString
	mov r3, #0
	str r3, [sp]
	mov r1, #0xff
	str r1, [sp, #4]
	ldr r0, _0208DD98 ; =0x000E0F00
	ldr r2, _0208DD9C ; =0x000007AC
	str r0, [sp, #8]
	mov r0, #0x89
	str r3, [sp, #0xc]
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	add r1, #0x11
	add r0, r0, r1
	ldr r2, [r4, r2]
	mov r1, #4
	bl sub_020200FC
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r1, [r4, r0]
	mov r0, #0x11
	lsl r0, r0, #4
	add r0, r1, r0
	bl sub_0201D5C8
	add sp, #0x10
	pop {r4, pc}
_0208DD82:
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r1, [r4, r0]
	mov r0, #0x11
	lsl r0, r0, #4
	add r0, r1, r0
	bl sub_0201D8E4
	add sp, #0x10
	pop {r4, pc}
	nop
_0208DD98: .word 0x000E0F00
_0208DD9C: .word 0x000007AC
	thumb_func_end sub_0208DD20

	thumb_func_start sub_0208DDA0
sub_0208DDA0: ; 0x0208DDA0
	push {r4, r5, r6, lr}
	sub sp, #0x10
	add r4, r0, #0
	cmp r1, #4
	bgt _0208DDC4
	cmp r1, #0
	blt _0208DDE2
	add r0, r1, r1
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_0208DDBA: ; jump table
	.short _0208DDCA - _0208DDBA - 2 ; case 0
	.short _0208DDCE - _0208DDBA - 2 ; case 1
	.short _0208DDD2 - _0208DDBA - 2 ; case 2
	.short _0208DDD6 - _0208DDBA - 2 ; case 3
	.short _0208DDDA - _0208DDBA - 2 ; case 4
_0208DDC4:
	cmp r1, #0xfe
	beq _0208DDDE
	b _0208DDE2
_0208DDCA:
	mov r5, #0xac
	b _0208DDE4
_0208DDCE:
	mov r5, #0xae
	b _0208DDE4
_0208DDD2:
	mov r5, #0xaf
	b _0208DDE4
_0208DDD6:
	mov r5, #0xb0
	b _0208DDE4
_0208DDDA:
	mov r5, #0xad
	b _0208DDE4
_0208DDDE:
	mov r5, #0xb1
	b _0208DDE4
_0208DDE2:
	mov r5, #0xb2
_0208DDE4:
	mov r0, #0x89
	lsl r0, r0, #2
	ldr r6, [r4, r0]
	ldr r2, _0208DE34 ; =0x000003E2
	add r6, #0x20
	add r0, r6, #0
	mov r1, #1
	mov r3, #0xd
	bl sub_0200E998
	add r0, r6, #0
	mov r1, #0xf
	bl FillWindowPixelBuffer
	mov r2, #0x7a
	lsl r2, r2, #4
	ldr r0, [r4, r2]
	add r2, #0xc
	ldr r2, [r4, r2]
	add r1, r5, #0
	bl ReadMsgDataIntoString
	mov r3, #0
	str r3, [sp]
	mov r0, #0xff
	str r0, [sp, #4]
	ldr r0, _0208DE38 ; =0x0001020F
	ldr r2, _0208DE3C ; =0x000007AC
	str r0, [sp, #8]
	str r3, [sp, #0xc]
	ldr r2, [r4, r2]
	add r0, r6, #0
	mov r1, #1
	bl sub_020200FC
	add r0, r6, #0
	bl sub_0201D5C8
	add sp, #0x10
	pop {r4, r5, r6, pc}
	.balign 4, 0
_0208DE34: .word 0x000003E2
_0208DE38: .word 0x0001020F
_0208DE3C: .word 0x000007AC
	thumb_func_end sub_0208DDA0

	thumb_func_start sub_0208DE40
sub_0208DE40: ; 0x0208DE40
	push {r3, r4, lr}
	sub sp, #4
	bl sub_020C2698
	bl sub_020CF564
	bl sub_020CF704
	ldr r0, _0208DEC0 ; =0x04000060
	ldr r1, _0208DEC4 ; =0xFFFFCFFD
	ldrh r2, [r0]
	ldr r3, _0208DEC8 ; =0x0000CFFB
	and r2, r1
	strh r2, [r0]
	ldrh r2, [r0]
	and r2, r3
	strh r2, [r0]
	add r2, r1, #2
	ldrh r4, [r0]
	add r1, r1, #2
	sub r3, #0x1c
	and r4, r2
	mov r2, #8
	orr r2, r4
	strh r2, [r0]
	ldrh r2, [r0]
	and r2, r1
	mov r1, #0x10
	orr r1, r2
	strh r1, [r0]
	ldrh r1, [r0]
	and r1, r3
	strh r1, [r0]
	mov r0, #0
	add r1, r0, #0
	add r2, r0, #0
	add r3, r0, #0
	bl G3X_SetFog
	mov r0, #0
	ldr r2, _0208DECC ; =0x00007FFF
	add r1, r0, #0
	mov r3, #0x3f
	str r0, [sp]
	bl G3X_SetClearColor
	ldr r1, _0208DED0 ; =0x04000540
	mov r0, #0
	str r0, [r1]
	ldr r0, _0208DED4 ; =0xBFFF0000
	str r0, [r1, #0x40]
	mov r0, #1
	add r1, r0, #0
	bl GX_EngineAToggleLayers
	ldr r1, _0208DED8 ; =0x04000008
	mov r0, #3
	ldrh r2, [r1]
	bic r2, r0
	mov r0, #2
	orr r0, r2
	strh r0, [r1]
	add sp, #4
	pop {r3, r4, pc}
	.balign 4, 0
_0208DEC0: .word 0x04000060
_0208DEC4: .word 0xFFFFCFFD
_0208DEC8: .word 0x0000CFFB
_0208DECC: .word 0x00007FFF
_0208DED0: .word 0x04000540
_0208DED4: .word 0xBFFF0000
_0208DED8: .word 0x04000008
	thumb_func_end sub_0208DE40

	thumb_func_start sub_0208DEDC
sub_0208DEDC: ; 0x0208DEDC
	push {r4, lr}
	add r4, r0, #0
	bl sub_020B7350
	mov r0, #0x2a
	lsl r0, r0, #4
	ldr r0, [r4, r0]
	bl sub_02008120
	ldr r0, _0208DEF8 ; =0x04000540
	mov r1, #1
	str r1, [r0]
	pop {r4, pc}
	nop
_0208DEF8: .word 0x04000540
	thumb_func_end sub_0208DEDC

	thumb_func_start sub_0208DEFC
sub_0208DEFC: ; 0x0208DEFC
	push {r4, lr}
	add r4, r0, #0
	mov r0, #0xa7
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	bl sub_02023120
	mov r0, #0xb3
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0
	bl sub_02017088
	mov r0, #0xb3
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	bl sub_02016F2C
	mov r0, #0x2a
	lsl r0, r0, #4
	ldr r0, [r4, r0]
	bl sub_02008524
	pop {r4, pc}
	thumb_func_end sub_0208DEFC

	thumb_func_start sub_0208DF2C
sub_0208DF2C: ; 0x0208DF2C
	push {r3, r4, lr}
	sub sp, #0x1c
	ldr r3, _0208DF94 ; =0x02104EA4
	add r4, r0, #0
	ldmia r3!, {r0, r1}
	add r2, sp, #0x10
	stmia r2!, {r0, r1}
	ldr r0, [r3]
	add r1, sp, #8
	str r0, [r2]
	mov r0, #0
	strh r0, [r1]
	strh r0, [r1, #2]
	strh r0, [r1, #4]
	strh r0, [r1, #6]
	mov r0, #0x13
	bl sub_02023114
	mov r1, #0xa7
	lsl r1, r1, #2
	str r0, [r4, r1]
	mov r2, #1
	str r2, [sp]
	ldr r0, [r4, r1]
	lsl r1, r2, #0x10
	str r0, [sp, #4]
	ldr r3, _0208DF98 ; =0x000005C1
	add r0, sp, #0x10
	add r2, sp, #8
	bl sub_020232BC
	mov r2, #0xa7
	lsl r2, r2, #2
	mov r1, #0x19
	ldr r2, [r4, r2]
	mov r0, #0
	lsl r1, r1, #0xe
	bl sub_02023240
	mov r0, #0xa7
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	bl sub_02023234
	mov r0, #0xa7
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	bl sub_0202313C
	add sp, #0x1c
	pop {r3, r4, pc}
	nop
_0208DF94: .word 0x02104EA4
_0208DF98: .word 0x000005C1
	thumb_func_end sub_0208DF2C

	thumb_func_start sub_0208DF9C
sub_0208DF9C: ; 0x0208DF9C
	push {r4, r5}
	cmp r2, #0xff
	bne _0208DFB2
	ldrh r2, [r0]
	strh r2, [r1]
	ldrh r2, [r0, #2]
	strh r2, [r1, #2]
	ldrh r0, [r0, #4]
	strh r0, [r1, #4]
	pop {r4, r5}
	bx lr
_0208DFB2:
	cmp r2, #0
	bne _0208DFC6
	ldrh r2, [r0, #6]
	strh r2, [r1]
	ldrh r2, [r0, #8]
	strh r2, [r1, #2]
	ldrh r0, [r0, #0xa]
	strh r0, [r1, #4]
	pop {r4, r5}
	bx lr
_0208DFC6:
	mov r3, #6
	ldrsh r5, [r0, r3]
	mov r3, #0xc
	ldrsh r3, [r0, r3]
	add r4, r3, #0
	mul r4, r2
	add r3, r5, r4
	strh r3, [r1]
	mov r3, #8
	ldrsh r5, [r0, r3]
	mov r3, #0xe
	ldrsh r3, [r0, r3]
	add r4, r3, #0
	mul r4, r2
	add r3, r5, r4
	strh r3, [r1, #2]
	mov r3, #0xa
	ldrsh r4, [r0, r3]
	mov r3, #0x10
	ldrsh r0, [r0, r3]
	mul r2, r0
	add r0, r4, r2
	strh r0, [r1, #4]
	pop {r4, r5}
	bx lr
	thumb_func_end sub_0208DF9C

	thumb_func_start sub_0208DFF8
sub_0208DFF8: ; 0x0208DFF8
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	add r4, r1, #0
	mov r0, #0
	ldrsh r1, [r4, r0]
	ldrsh r0, [r5, r0]
	add r6, r2, #0
	sub r7, r1, r0
	add r0, r7, #0
	bl _itof
	ldr r1, _0208E16C ; =0x45800000
	bl _fdiv
	ldr r1, _0208E170 ; =0x40800000
	bl _fdiv
	mov r1, #0
	bl _fgr
	bls _0208E04C
	add r0, r7, #0
	bl _itof
	ldr r1, _0208E16C ; =0x45800000
	bl _fdiv
	ldr r1, _0208E170 ; =0x40800000
	bl _fdiv
	add r1, r0, #0
	ldr r0, _0208E16C ; =0x45800000
	bl _fmul
	add r1, r0, #0
	mov r0, #0x3f
	lsl r0, r0, #0x18
	bl _fadd
	bl _ftoi
	b _0208E072
_0208E04C:
	add r0, r7, #0
	bl _itof
	ldr r1, _0208E16C ; =0x45800000
	bl _fdiv
	ldr r1, _0208E170 ; =0x40800000
	bl _fdiv
	add r1, r0, #0
	ldr r0, _0208E16C ; =0x45800000
	bl _fmul
	mov r1, #0x3f
	lsl r1, r1, #0x18
	bl _fsub
	bl _ftoi
_0208E072:
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	strh r0, [r6]
	mov r0, #2
	ldrsh r1, [r4, r0]
	ldrsh r0, [r5, r0]
	sub r7, r1, r0
	add r0, r7, #0
	bl _itof
	ldr r1, _0208E16C ; =0x45800000
	bl _fdiv
	ldr r1, _0208E170 ; =0x40800000
	bl _fdiv
	mov r1, #0
	bl _fgr
	bls _0208E0C4
	add r0, r7, #0
	bl _itof
	ldr r1, _0208E16C ; =0x45800000
	bl _fdiv
	ldr r1, _0208E170 ; =0x40800000
	bl _fdiv
	add r1, r0, #0
	ldr r0, _0208E16C ; =0x45800000
	bl _fmul
	add r1, r0, #0
	mov r0, #0x3f
	lsl r0, r0, #0x18
	bl _fadd
	bl _ftoi
	b _0208E0EA
_0208E0C4:
	add r0, r7, #0
	bl _itof
	ldr r1, _0208E16C ; =0x45800000
	bl _fdiv
	ldr r1, _0208E170 ; =0x40800000
	bl _fdiv
	add r1, r0, #0
	ldr r0, _0208E16C ; =0x45800000
	bl _fmul
	mov r1, #0x3f
	lsl r1, r1, #0x18
	bl _fsub
	bl _ftoi
_0208E0EA:
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	strh r0, [r6, #2]
	mov r0, #4
	ldrsh r1, [r4, r0]
	ldrsh r0, [r5, r0]
	sub r4, r1, r0
	add r0, r4, #0
	bl _itof
	ldr r1, _0208E16C ; =0x45800000
	bl _fdiv
	ldr r1, _0208E170 ; =0x40800000
	bl _fdiv
	mov r1, #0
	bl _fgr
	bls _0208E13C
	add r0, r4, #0
	bl _itof
	ldr r1, _0208E16C ; =0x45800000
	bl _fdiv
	ldr r1, _0208E170 ; =0x40800000
	bl _fdiv
	add r1, r0, #0
	ldr r0, _0208E16C ; =0x45800000
	bl _fmul
	add r1, r0, #0
	mov r0, #0x3f
	lsl r0, r0, #0x18
	bl _fadd
	bl _ftoi
	b _0208E162
_0208E13C:
	add r0, r4, #0
	bl _itof
	ldr r1, _0208E16C ; =0x45800000
	bl _fdiv
	ldr r1, _0208E170 ; =0x40800000
	bl _fdiv
	add r1, r0, #0
	ldr r0, _0208E16C ; =0x45800000
	bl _fmul
	mov r1, #0x3f
	lsl r1, r1, #0x18
	bl _fsub
	bl _ftoi
_0208E162:
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	strh r0, [r6, #4]
	pop {r3, r4, r5, r6, r7, pc}
	nop
_0208E16C: .word 0x45800000
_0208E170: .word 0x40800000
	thumb_func_end sub_0208DFF8

	thumb_func_start sub_0208E174
sub_0208E174: ; 0x0208E174
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x28
	ldr r2, _0208E33C ; =0x00000275
	add r5, r0, #0
	mov r1, #0xe6
	lsl r1, r1, #2
	ldrb r2, [r5, r2]
	ldr r0, _0208E340 ; =0x02104EB0
	add r1, r5, r1
	bl sub_0208DF9C
	ldr r2, _0208E344 ; =0x00000276
	ldr r1, _0208E348 ; =0x0000039E
	ldrb r2, [r5, r2]
	ldr r0, _0208E34C ; =0x02104EC2
	add r1, r5, r1
	bl sub_0208DF9C
	ldr r2, _0208E350 ; =0x00000277
	ldr r1, _0208E354 ; =0x000003AA
	ldrb r2, [r5, r2]
	ldr r0, _0208E358 ; =0x02104ED4
	add r1, r5, r1
	bl sub_0208DF9C
	mov r1, #0xe9
	lsl r1, r1, #2
	ldr r0, _0208E35C ; =0x02104EE6
	add r1, r5, r1
	mov r2, #0
	bl sub_0208DF9C
	ldr r2, _0208E360 ; =0x00000279
	mov r1, #0x3b
	lsl r1, r1, #4
	ldrb r2, [r5, r2]
	ldr r0, _0208E364 ; =0x02104EF8
	add r1, r5, r1
	bl sub_0208DF9C
	ldr r2, _0208E33C ; =0x00000275
	ldr r1, _0208E368 ; =0x000003B6
	ldrb r2, [r5, r2]
	ldr r0, _0208E36C ; =0x02104F0A
	add r1, r5, r1
	bl sub_0208DF9C
	ldr r1, _0208E370 ; =0x000003C2
	ldr r0, _0208E374 ; =0x02104F1C
	add r1, r5, r1
	mov r2, #0
	bl sub_0208DF9C
	mov r2, #0x9e
	lsl r2, r2, #2
	mov r1, #0xef
	lsl r1, r1, #2
	ldrb r2, [r5, r2]
	ldr r0, _0208E378 ; =0x02104F2E
	add r1, r5, r1
	bl sub_0208DF9C
	ldr r2, _0208E360 ; =0x00000279
	mov r1, #0xf2
	lsl r1, r1, #2
	ldrb r2, [r5, r2]
	ldr r0, _0208E37C ; =0x02104F40
	add r1, r5, r1
	bl sub_0208DF9C
	ldr r1, _0208E380 ; =0x000003CE
	ldr r0, _0208E384 ; =0x02104F52
	add r1, r5, r1
	mov r2, #0
	bl sub_0208DF9C
	ldr r2, _0208E350 ; =0x00000277
	ldr r1, _0208E388 ; =0x000003DA
	ldrb r2, [r5, r2]
	ldr r0, _0208E38C ; =0x02104F64
	add r1, r5, r1
	bl sub_0208DF9C
	mov r2, #0x9e
	lsl r2, r2, #2
	mov r1, #0xf5
	lsl r1, r1, #2
	ldrb r2, [r5, r2]
	ldr r0, _0208E390 ; =0x02104F76
	add r1, r5, r1
	bl sub_0208DF9C
	mov r1, #0x3e
	lsl r1, r1, #4
	ldr r0, _0208E394 ; =0x02104F88
	add r1, r5, r1
	mov r2, #0
	bl sub_0208DF9C
	ldr r2, _0208E344 ; =0x00000276
	ldr r1, _0208E398 ; =0x000003E6
	ldrb r2, [r5, r2]
	ldr r0, _0208E39C ; =0x02104F9A
	add r1, r5, r1
	bl sub_0208DF9C
	ldr r2, _0208E350 ; =0x00000277
	ldr r1, _0208E3A0 ; =0x000003F2
	ldrb r2, [r5, r2]
	ldr r0, _0208E3A4 ; =0x02104FAC
	add r1, r5, r1
	bl sub_0208DF9C
	mov r2, #0x9e
	lsl r2, r2, #2
	mov r1, #0xfb
	lsl r1, r1, #2
	ldrb r2, [r5, r2]
	ldr r0, _0208E3A8 ; =0x02104FBE
	add r1, r5, r1
	bl sub_0208DF9C
	mov r0, #0
	str r0, [sp, #0x24]
	mov r0, #0xce
	lsl r0, r0, #2
	add r1, r5, r0
	str r1, [sp, #0x20]
	add r1, r0, #0
	add r1, #0x60
	add r1, r5, r1
	str r1, [sp, #0x1c]
	add r1, r0, #0
	sub r1, #0x60
	add r1, r5, r1
	str r1, [sp, #0x18]
	add r1, r0, #6
	add r1, r5, r1
	str r1, [sp, #0x14]
	add r1, r0, #0
	add r1, #0x66
	add r1, r5, r1
	str r1, [sp, #0x10]
	add r1, r0, #0
	sub r1, #0x5a
	add r1, r5, r1
	str r1, [sp, #0xc]
	add r1, r0, #0
	add r1, #0xc
	add r1, r5, r1
	str r1, [sp, #8]
	add r1, r0, #0
	add r1, #0x6c
	add r1, r5, r1
	str r1, [sp, #4]
	add r1, r0, #0
	sub r1, #0x54
	add r1, r5, r1
	str r1, [sp]
	add r1, r0, #0
	add r1, #0x12
	add r7, r5, r1
	add r1, r0, #0
	add r1, #0x72
	sub r0, #0x4e
	add r6, r5, r1
	add r4, r5, r0
_0208E2C2:
	ldr r0, [sp, #0x18]
	ldr r1, [sp, #0x1c]
	ldr r2, [sp, #0x20]
	bl sub_0208DFF8
	ldr r0, [sp, #0xc]
	ldr r1, [sp, #0x10]
	ldr r2, [sp, #0x14]
	bl sub_0208DFF8
	ldr r0, [sp]
	ldr r1, [sp, #4]
	ldr r2, [sp, #8]
	bl sub_0208DFF8
	add r0, r4, #0
	add r1, r6, #0
	add r2, r7, #0
	bl sub_0208DFF8
	ldr r0, [sp, #0x20]
	add r7, #0x18
	add r0, #0x18
	str r0, [sp, #0x20]
	ldr r0, [sp, #0x1c]
	add r6, #0x18
	add r0, #0x18
	str r0, [sp, #0x1c]
	ldr r0, [sp, #0x18]
	add r4, #0x18
	add r0, #0x18
	str r0, [sp, #0x18]
	ldr r0, [sp, #0x14]
	add r0, #0x18
	str r0, [sp, #0x14]
	ldr r0, [sp, #0x10]
	add r0, #0x18
	str r0, [sp, #0x10]
	ldr r0, [sp, #0xc]
	add r0, #0x18
	str r0, [sp, #0xc]
	ldr r0, [sp, #8]
	add r0, #0x18
	str r0, [sp, #8]
	ldr r0, [sp, #4]
	add r0, #0x18
	str r0, [sp, #4]
	ldr r0, [sp]
	add r0, #0x18
	str r0, [sp]
	ldr r0, [sp, #0x24]
	add r0, r0, #1
	str r0, [sp, #0x24]
	cmp r0, #4
	blo _0208E2C2
	mov r0, #0xfe
	mov r1, #0
	lsl r0, r0, #2
	str r1, [r5, r0]
	add sp, #0x28
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_0208E33C: .word 0x00000275
_0208E340: .word 0x02104EB0
_0208E344: .word 0x00000276
_0208E348: .word 0x0000039E
_0208E34C: .word 0x02104EC2
_0208E350: .word 0x00000277
_0208E354: .word 0x000003AA
_0208E358: .word 0x02104ED4
_0208E35C: .word 0x02104EE6
_0208E360: .word 0x00000279
_0208E364: .word 0x02104EF8
_0208E368: .word 0x000003B6
_0208E36C: .word 0x02104F0A
_0208E370: .word 0x000003C2
_0208E374: .word 0x02104F1C
_0208E378: .word 0x02104F2E
_0208E37C: .word 0x02104F40
_0208E380: .word 0x000003CE
_0208E384: .word 0x02104F52
_0208E388: .word 0x000003DA
_0208E38C: .word 0x02104F64
_0208E390: .word 0x02104F76
_0208E394: .word 0x02104F88
_0208E398: .word 0x000003E6
_0208E39C: .word 0x02104F9A
_0208E3A0: .word 0x000003F2
_0208E3A4: .word 0x02104FAC
_0208E3A8: .word 0x02104FBE
	thumb_func_end sub_0208E174

	thumb_func_start sub_0208E3AC
sub_0208E3AC: ; 0x0208E3AC
	push {r4, lr}
	sub sp, #0x20
	add r4, r0, #0
	mov r0, #0x13
	bl sub_02007FD4
	mov r1, #0x2a
	lsl r1, r1, #4
	str r0, [r4, r1]
	add r0, r4, #0
	bl sub_0208A520
	add r1, r0, #0
	mov r0, #0x8b
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	ldrb r0, [r0, #0x11]
	cmp r0, #2
	add r0, sp, #0x10
	bne _0208E3DE
	mov r2, #2
	mov r3, #0
	bl sub_0207013C
	b _0208E3E4
_0208E3DE:
	mov r2, #2
	bl sub_02070124
_0208E3E4:
	mov r2, #0xa9
	lsl r2, r2, #2
	ldr r0, _0208E440 ; =0x000007B8
	add r1, r4, r2
	sub r2, #0x68
	ldrh r2, [r4, r2]
	ldr r0, [r4, r0]
	mov r3, #1
	bl sub_02072914
	mov r1, #0xb5
	lsl r1, r1, #2
	mov r2, #0
	str r2, [r4, r1]
	add r0, r1, #0
	str r2, [sp]
	sub r0, #0x30
	str r2, [sp, #4]
	add r0, r4, r0
	str r0, [sp, #8]
	str r2, [sp, #0xc]
	sub r1, #0x34
	ldr r0, [r4, r1]
	add r1, sp, #0x10
	mov r2, #0xd0
	mov r3, #0x68
	bl sub_020085EC
	mov r1, #0x2d
	lsl r1, r1, #4
	str r0, [r4, r1]
	ldr r0, [r4, r1]
	mov r1, #6
	mov r2, #1
	bl sub_020087A4
	mov r0, #0x2d
	lsl r0, r0, #4
	ldr r0, [r4, r0]
	mov r1, #0x23
	mov r2, #0
	bl sub_020087A4
	add sp, #0x20
	pop {r4, pc}
	nop
_0208E440: .word 0x000007B8
	thumb_func_end sub_0208E3AC

	thumb_func_start sub_0208E444
sub_0208E444: ; 0x0208E444
	push {r3, r4, lr}
	sub sp, #0xc
	mov r2, #0xa
	add r4, r0, #0
	lsl r2, r2, #6
	ldr r0, [r4, r2]
	lsl r0, r0, #3
	lsr r0, r0, #0x1f
	beq _0208E47C
	mov r0, #2
	str r0, [sp]
	add r0, r2, #0
	add r0, #0x54
	ldr r0, [r4, r0]
	add r1, r2, #0
	str r0, [sp, #4]
	mov r3, #0
	ldr r0, _0208E4B0 ; =0x000007B8
	str r3, [sp, #8]
	add r1, #0x4c
	add r2, #0x50
	ldr r0, [r4, r0]
	ldr r1, [r4, r1]
	ldr r2, [r4, r2]
	bl sub_0207294C
	add sp, #0xc
	pop {r3, r4, pc}
_0208E47C:
	add r2, #0x50
	ldr r0, [r4, r2]
	mov r1, #1
	bl sub_02008550
	mov r3, #0xb5
	lsl r3, r3, #2
	mov r0, #2
	str r0, [sp]
	ldr r0, [r4, r3]
	add r1, r3, #0
	str r0, [sp, #4]
	mov r0, #0
	str r0, [sp, #8]
	sub r2, r3, #4
	ldr r0, _0208E4B0 ; =0x000007B8
	sub r3, #0x98
	sub r1, #8
	ldrh r3, [r4, r3]
	ldr r0, [r4, r0]
	ldr r1, [r4, r1]
	ldr r2, [r4, r2]
	bl sub_0207294C
	add sp, #0xc
	pop {r3, r4, pc}
	.balign 4, 0
_0208E4B0: .word 0x000007B8
	thumb_func_end sub_0208E444

	thumb_func_start sub_0208E4B4
sub_0208E4B4: ; 0x0208E4B4
	push {r4, lr}
	add r4, r0, #0
	mov r0, #0xb3
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0
	bl sub_02017088
	mov r0, #0x2a
	lsl r0, r0, #4
	ldr r0, [r4, r0]
	bl sub_02008524
	add r0, r4, #0
	bl sub_0208E3AC
	add r0, r4, #0
	bl sub_0208E444
	pop {r4, pc}
	thumb_func_end sub_0208E4B4

	thumb_func_start sub_0208E4DC
sub_0208E4DC: ; 0x0208E4DC
	push {r3, lr}
	ldr r1, _0208E538 ; =0x000007BF
	ldrb r1, [r0, r1]
	lsl r1, r1, #0x1c
	lsr r1, r1, #0x1c
	cmp r1, #0xf
	bne _0208E4F0
	mov r0, #0
	mvn r0, r0
	pop {r3, pc}
_0208E4F0:
	mov r1, #0x8b
	lsl r1, r1, #2
	ldr r0, [r0, r1]
	ldrb r0, [r0, #0x11]
	cmp r0, #2
	beq _0208E512
	ldr r0, _0208E53C ; =0x02104FFC
	bl sub_02025224
	mov r1, #0
	mvn r1, r1
	cmp r0, r1
	beq _0208E534
	lsl r1, r0, #2
	ldr r0, _0208E540 ; =0x02104FD0
	ldrb r0, [r0, r1]
	pop {r3, pc}
_0208E512:
	ldr r0, _0208E53C ; =0x02104FFC
	bl sub_02025224
	cmp r0, #4
	blt _0208E526
	cmp r0, #9
	bgt _0208E526
	mov r0, #0
	mvn r0, r0
	pop {r3, pc}
_0208E526:
	mov r1, #0
	mvn r1, r1
	cmp r0, r1
	beq _0208E534
	lsl r1, r0, #2
	ldr r0, _0208E540 ; =0x02104FD0
	ldrb r0, [r0, r1]
_0208E534:
	pop {r3, pc}
	nop
_0208E538: .word 0x000007BF
_0208E53C: .word 0x02104FFC
_0208E540: .word 0x02104FD0
	thumb_func_end sub_0208E4DC

	thumb_func_start sub_0208E544
sub_0208E544: ; 0x0208E544
	push {r3, lr}
	bl sub_0208E4DC
	mov r1, #0
	mvn r1, r1
	cmp r0, r1
	beq _0208E558
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	pop {r3, pc}
_0208E558:
	mov r0, #0xff
	pop {r3, pc}
	thumb_func_end sub_0208E544

	thumb_func_start sub_0208E55C
sub_0208E55C: ; 0x0208E55C
	cmp r1, #4
	bhi _0208E5A8
	add r1, r1, r1
	add r1, pc
	ldrh r1, [r1, #6]
	lsl r1, r1, #0x10
	asr r1, r1, #0x10
	add pc, r1
_0208E56C: ; jump table
	.short _0208E576 - _0208E56C - 2 ; case 0
	.short _0208E580 - _0208E56C - 2 ; case 1
	.short _0208E58A - _0208E56C - 2 ; case 2
	.short _0208E594 - _0208E56C - 2 ; case 3
	.short _0208E59E - _0208E56C - 2 ; case 4
_0208E576:
	mov r1, #0xc
	mul r1, r0
	ldr r0, _0208E5AC ; =0x02105028
	ldr r0, [r0, r1]
	bx lr
_0208E580:
	mov r1, #0xc
	mul r1, r0
	ldr r0, _0208E5B0 ; =0x0210502C
	ldrh r0, [r0, r1]
	bx lr
_0208E58A:
	mov r1, #0xc
	mul r1, r0
	ldr r0, _0208E5B4 ; =0x0210502E
	ldrh r0, [r0, r1]
	bx lr
_0208E594:
	mov r1, #0xc
	mul r1, r0
	ldr r0, _0208E5B8 ; =0x02105030
	ldrh r0, [r0, r1]
	bx lr
_0208E59E:
	mov r1, #0xc
	mul r1, r0
	ldr r0, _0208E5BC ; =0x02105032
	ldrh r0, [r0, r1]
	bx lr
_0208E5A8:
	mov r0, #0
	bx lr
	.balign 4, 0
_0208E5AC: .word 0x02105028
_0208E5B0: .word 0x0210502C
_0208E5B4: .word 0x0210502E
_0208E5B8: .word 0x02105030
_0208E5BC: .word 0x02105032
	thumb_func_end sub_0208E55C

	thumb_func_start sub_0208E5C0
sub_0208E5C0: ; 0x0208E5C0
	mov r2, #0xc
	mul r2, r1
	ldr r1, _0208E5DC ; =0x02105032
	ldrh r2, [r1, r2]
	mov r1, #2
	lsl r1, r1, #0xe
	tst r1, r2
	beq _0208E5D8
	lsl r1, r2, #0x18
	lsr r1, r1, #0x18
	ldrb r2, [r0, r1]
	add r2, #0x92
_0208E5D8:
	add r0, r2, #0
	bx lr
	.balign 4, 0
_0208E5DC: .word 0x02105032
	thumb_func_end sub_0208E5C0

	thumb_func_start sub_0208E5E0
sub_0208E5E0: ; 0x0208E5E0
	mov r1, #0xc
	mul r1, r0
	ldr r0, _0208E5FC ; =0x02105032
	ldrh r1, [r0, r1]
	mov r0, #2
	lsl r0, r0, #0xe
	tst r0, r1
	beq _0208E5F6
	lsl r0, r1, #0x18
	lsr r0, r0, #0x18
	bx lr
_0208E5F6:
	mov r0, #0xff
	bx lr
	nop
_0208E5FC: .word 0x02105032
	thumb_func_end sub_0208E5E0

	thumb_func_start sub_0208E600
sub_0208E600: ; 0x0208E600
	push {r3, r4, r5, r6, r7, lr}
	add r7, r2, #0
	add r5, r0, #0
	add r6, r1, #0
	add r0, r7, #0
	mov r1, #0x3c
	bl AllocFromHeap
	add r4, r0, #0
	ldr r2, _0208E974 ; =0x0000012E
	str r7, [r4]
	mov r0, #1
	mov r1, #0x1b
	add r3, r7, #0
	bl NewMsgDataFromNarc
	str r0, [r4, #4]
	ldr r2, [r4]
	mov r0, #9
	mov r1, #0x20
	bl ScrStrBufs_new_custom
	str r0, [r4, #8]
	str r5, [r4, #0xc]
	str r6, [r4, #0x10]
	mov r0, #0
	str r0, [r4, #0x14]
	str r0, [r4, #0x18]
	str r0, [r4, #0x1c]
	str r0, [r4, #0x20]
	str r0, [r4, #0x24]
	str r0, [r4, #0x28]
	str r0, [r4, #0x2c]
	str r0, [r4, #0x30]
	str r0, [r4, #0x34]
	str r0, [r4, #0x38]
	ldr r0, [r4, #0xc]
	ldr r1, [r4, #0x10]
	bl sub_0208F070
	cmp r0, #0x14
	bls _0208E656
	b _0208E990
_0208E656:
	add r0, r0, r0
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_0208E662: ; jump table
	.short _0208E68C - _0208E662 - 2 ; case 0
	.short _0208E6B8 - _0208E662 - 2 ; case 1
	.short _0208E6E4 - _0208E662 - 2 ; case 2
	.short _0208E710 - _0208E662 - 2 ; case 3
	.short _0208E73C - _0208E662 - 2 ; case 4
	.short _0208E768 - _0208E662 - 2 ; case 5
	.short _0208E794 - _0208E662 - 2 ; case 6
	.short _0208E7C0 - _0208E662 - 2 ; case 7
	.short _0208E7EC - _0208E662 - 2 ; case 8
	.short _0208E818 - _0208E662 - 2 ; case 9
	.short _0208E83A - _0208E662 - 2 ; case 10
	.short _0208E85C - _0208E662 - 2 ; case 11
	.short _0208E87E - _0208E662 - 2 ; case 12
	.short _0208E8A0 - _0208E662 - 2 ; case 13
	.short _0208E8C2 - _0208E662 - 2 ; case 14
	.short _0208E8E4 - _0208E662 - 2 ; case 15
	.short _0208E910 - _0208E662 - 2 ; case 16
	.short _0208E92A - _0208E662 - 2 ; case 17
	.short _0208E942 - _0208E662 - 2 ; case 18
	.short _0208E95C - _0208E662 - 2 ; case 19
	.short _0208E978 - _0208E662 - 2 ; case 20
_0208E68C:
	mov r0, #1
	str r0, [r4, #0x14]
	add r0, r4, #0
	bl sub_0208EA5C
	mov r0, #2
	str r0, [r4, #0x1c]
	add r0, r4, #0
	mov r1, #0x31
	bl sub_0208EA84
	mov r0, #6
	str r0, [r4, #0x24]
	add r0, r4, #0
	bl sub_0208EE08
	mov r0, #7
	str r0, [r4, #0x2c]
	add r0, r4, #0
	bl sub_0208EFF4
	b _0208E990
_0208E6B8:
	mov r0, #1
	str r0, [r4, #0x14]
	add r0, r4, #0
	bl sub_0208EA5C
	mov r0, #2
	str r0, [r4, #0x1c]
	add r0, r4, #0
	mov r1, #0x32
	bl sub_0208EA84
	mov r0, #6
	str r0, [r4, #0x24]
	add r0, r4, #0
	bl sub_0208EE08
	mov r0, #7
	str r0, [r4, #0x2c]
	add r0, r4, #0
	bl sub_0208EFF4
	b _0208E990
_0208E6E4:
	mov r0, #1
	str r0, [r4, #0x14]
	add r0, r4, #0
	bl sub_0208EA5C
	mov r0, #2
	str r0, [r4, #0x1c]
	add r0, r4, #0
	mov r1, #0x33
	bl sub_0208EA84
	mov r0, #6
	str r0, [r4, #0x24]
	add r0, r4, #0
	bl sub_0208EE08
	mov r0, #7
	str r0, [r4, #0x2c]
	add r0, r4, #0
	bl sub_0208EFF4
	b _0208E990
_0208E710:
	mov r0, #1
	str r0, [r4, #0x14]
	add r0, r4, #0
	bl sub_0208EA5C
	mov r0, #2
	str r0, [r4, #0x1c]
	add r0, r4, #0
	mov r1, #0x34
	bl sub_0208EA84
	mov r0, #8
	str r0, [r4, #0x24]
	add r0, r4, #0
	bl sub_0208EE08
	mov r0, #9
	str r0, [r4, #0x2c]
	add r0, r4, #0
	bl sub_0208EFF4
	b _0208E990
_0208E73C:
	mov r0, #1
	str r0, [r4, #0x14]
	add r0, r4, #0
	bl sub_0208EA5C
	mov r0, #2
	str r0, [r4, #0x1c]
	add r0, r4, #0
	mov r1, #0x35
	bl sub_0208EA84
	mov r0, #8
	str r0, [r4, #0x24]
	add r0, r4, #0
	bl sub_0208EE08
	mov r0, #9
	str r0, [r4, #0x2c]
	add r0, r4, #0
	bl sub_0208EFF4
	b _0208E990
_0208E768:
	mov r0, #1
	str r0, [r4, #0x14]
	add r0, r4, #0
	bl sub_0208EA5C
	mov r0, #2
	str r0, [r4, #0x1c]
	add r0, r4, #0
	mov r1, #0x36
	bl sub_0208EA84
	mov r0, #8
	str r0, [r4, #0x24]
	add r0, r4, #0
	bl sub_0208EE08
	mov r0, #9
	str r0, [r4, #0x2c]
	add r0, r4, #0
	bl sub_0208EFF4
	b _0208E990
_0208E794:
	mov r0, #1
	str r0, [r4, #0x14]
	add r0, r4, #0
	bl sub_0208EA5C
	mov r0, #2
	str r0, [r4, #0x1c]
	add r0, r4, #0
	mov r1, #0x37
	bl sub_0208EA84
	mov r0, #8
	str r0, [r4, #0x24]
	add r0, r4, #0
	bl sub_0208EE08
	mov r0, #9
	str r0, [r4, #0x2c]
	add r0, r4, #0
	bl sub_0208EFF4
	b _0208E990
_0208E7C0:
	mov r0, #1
	str r0, [r4, #0x14]
	add r0, r4, #0
	bl sub_0208EA5C
	mov r0, #2
	str r0, [r4, #0x1c]
	add r0, r4, #0
	mov r1, #0x38
	bl sub_0208EA84
	mov r0, #7
	str r0, [r4, #0x24]
	add r0, r4, #0
	bl sub_0208EE08
	mov r0, #8
	str r0, [r4, #0x2c]
	add r0, r4, #0
	bl sub_0208EFF4
	b _0208E990
_0208E7EC:
	mov r0, #1
	str r0, [r4, #0x14]
	add r0, r4, #0
	bl sub_0208EA5C
	mov r0, #2
	str r0, [r4, #0x1c]
	add r0, r4, #0
	mov r1, #0x39
	bl sub_0208EA84
	mov r0, #7
	str r0, [r4, #0x24]
	add r0, r4, #0
	bl sub_0208EE08
	mov r0, #8
	str r0, [r4, #0x2c]
	add r0, r4, #0
	bl sub_0208EFF4
	b _0208E990
_0208E818:
	mov r0, #1
	str r0, [r4, #0x14]
	add r0, r4, #0
	bl sub_0208EA5C
	mov r0, #2
	str r0, [r4, #0x1c]
	add r0, r4, #0
	mov r1, #0x3a
	bl sub_0208EA84
	mov r0, #9
	str r0, [r4, #0x24]
	add r0, r4, #0
	bl sub_0208EE08
	b _0208E990
_0208E83A:
	mov r0, #1
	str r0, [r4, #0x14]
	add r0, r4, #0
	bl sub_0208EA5C
	mov r0, #2
	str r0, [r4, #0x1c]
	add r0, r4, #0
	mov r1, #0x3b
	bl sub_0208EA84
	mov r0, #9
	str r0, [r4, #0x24]
	add r0, r4, #0
	bl sub_0208EE08
	b _0208E990
_0208E85C:
	mov r0, #1
	str r0, [r4, #0x14]
	add r0, r4, #0
	bl sub_0208EA5C
	mov r0, #2
	str r0, [r4, #0x1c]
	add r0, r4, #0
	mov r1, #0x3c
	bl sub_0208EA84
	mov r0, #9
	str r0, [r4, #0x24]
	add r0, r4, #0
	bl sub_0208EE08
	b _0208E990
_0208E87E:
	mov r0, #1
	str r0, [r4, #0x14]
	add r0, r4, #0
	bl sub_0208EA5C
	mov r0, #2
	str r0, [r4, #0x1c]
	add r0, r4, #0
	mov r1, #0x3d
	bl sub_0208EA84
	mov r0, #9
	str r0, [r4, #0x24]
	add r0, r4, #0
	bl sub_0208EE08
	b _0208E990
_0208E8A0:
	mov r0, #1
	str r0, [r4, #0x14]
	add r0, r4, #0
	bl sub_0208EA5C
	mov r0, #2
	str r0, [r4, #0x1c]
	add r0, r4, #0
	mov r1, #0x3e
	bl sub_0208EA84
	mov r0, #9
	str r0, [r4, #0x24]
	add r0, r4, #0
	bl sub_0208EE08
	b _0208E990
_0208E8C2:
	mov r0, #1
	str r0, [r4, #0x14]
	add r0, r4, #0
	bl sub_0208EA5C
	mov r0, #2
	str r0, [r4, #0x1c]
	add r0, r4, #0
	mov r1, #0x3f
	bl sub_0208EA84
	mov r0, #9
	str r0, [r4, #0x24]
	add r0, r4, #0
	bl sub_0208EE08
	b _0208E990
_0208E8E4:
	mov r0, #1
	str r0, [r4, #0x14]
	add r0, r4, #0
	bl sub_0208EA5C
	mov r0, #2
	str r0, [r4, #0x1c]
	add r0, r4, #0
	mov r1, #0x40
	bl sub_0208EBA4
	mov r0, #6
	str r0, [r4, #0x24]
	add r0, r4, #0
	bl sub_0208EE08
	mov r0, #7
	str r0, [r4, #0x2c]
	add r0, r4, #0
	bl sub_0208EFF4
	b _0208E990
_0208E910:
	mov r0, #1
	str r0, [r4, #0x1c]
	add r0, r4, #0
	mov r1, #0x65
	mov r2, #0
	bl sub_0208ED00
	mov r0, #6
	str r0, [r4, #0x34]
	add r0, r4, #0
	bl sub_0208F030
	b _0208E990
_0208E92A:
	mov r2, #1
	add r0, r4, #0
	mov r1, #0x66
	str r2, [r4, #0x1c]
	bl sub_0208ED00
	mov r0, #6
	str r0, [r4, #0x34]
	add r0, r4, #0
	bl sub_0208F030
	b _0208E990
_0208E942:
	mov r0, #1
	str r0, [r4, #0x1c]
	add r0, r4, #0
	mov r1, #0x67
	mov r2, #0
	bl sub_0208ED00
	mov r0, #6
	str r0, [r4, #0x34]
	add r0, r4, #0
	bl sub_0208F030
	b _0208E990
_0208E95C:
	mov r2, #1
	add r0, r4, #0
	mov r1, #0x67
	str r2, [r4, #0x1c]
	bl sub_0208ED00
	mov r0, #6
	str r0, [r4, #0x34]
	add r0, r4, #0
	bl sub_0208F030
	b _0208E990
	.balign 4, 0
_0208E974: .word 0x0000012E
_0208E978:
	mov r0, #1
	str r0, [r4, #0x1c]
	add r0, r4, #0
	mov r1, #0x68
	mov r2, #0
	bl sub_0208ED00
	mov r0, #6
	str r0, [r4, #0x34]
	add r0, r4, #0
	bl sub_0208F030
_0208E990:
	add r0, r4, #0
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_0208E600

	thumb_func_start sub_0208E994
sub_0208E994: ; 0x0208E994
	push {r4, lr}
	add r4, r0, #0
	ldr r0, [r4, #0x18]
	cmp r0, #0
	beq _0208E9A2
	bl FreeToHeap
_0208E9A2:
	ldr r0, [r4, #0x20]
	cmp r0, #0
	beq _0208E9AC
	bl FreeToHeap
_0208E9AC:
	ldr r0, [r4, #0x28]
	cmp r0, #0
	beq _0208E9B6
	bl FreeToHeap
_0208E9B6:
	ldr r0, [r4, #0x30]
	cmp r0, #0
	beq _0208E9C0
	bl FreeToHeap
_0208E9C0:
	ldr r0, [r4, #0x38]
	cmp r0, #0
	beq _0208E9CA
	bl FreeToHeap
_0208E9CA:
	ldr r0, [r4, #8]
	bl ScrStrBufs_delete
	ldr r0, [r4, #4]
	bl DestroyMsgData
	add r0, r4, #0
	bl FreeToHeap
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_0208E994

	thumb_func_start sub_0208E9E0
sub_0208E9E0: ; 0x0208E9E0
	push {r4, r5, r6, lr}
	add r6, r1, #0
	add r4, r0, #0
	add r0, r6, #0
	add r1, r2, #0
	bl sub_0208F070
	lsl r0, r0, #0x18
	lsr r5, r0, #0x18
	add r0, r6, #0
	mov r1, #0x7a
	mov r2, #0
	bl GetMonData
	add r1, r5, #0
	add r1, #0xf9
	lsl r1, r1, #0x18
	lsl r0, r0, #0x18
	lsr r1, r1, #0x18
	lsr r0, r0, #0x18
	cmp r1, #1
	bhi _0208EA14
	cmp r4, #1
	beq _0208EA14
	mov r0, #1
	pop {r4, r5, r6, pc}
_0208EA14:
	cmp r4, #3
	bhi _0208EA58
	add r1, r4, r4
	add r1, pc
	ldrh r1, [r1, #6]
	lsl r1, r1, #0x10
	asr r1, r1, #0x10
	add pc, r1
_0208EA24: ; jump table
	.short _0208EA58 - _0208EA24 - 2 ; case 0
	.short _0208EA2C - _0208EA24 - 2 ; case 1
	.short _0208EA58 - _0208EA24 - 2 ; case 2
	.short _0208EA58 - _0208EA24 - 2 ; case 3
_0208EA2C:
	cmp r5, #1
	bne _0208EA58
	cmp r0, #0xa
	beq _0208EA3C
	cmp r0, #0xb
	beq _0208EA3C
	cmp r0, #0xc
	bne _0208EA58
_0208EA3C:
	add r0, r6, #0
	mov r1, #0x99
	mov r2, #0
	bl GetMonData
	add r4, r0, #0
	mov r0, #0
	mov r1, #0x56
	bl sub_02017FE4
	cmp r4, r0
	bne _0208EA58
	mov r0, #1
	pop {r4, r5, r6, pc}
_0208EA58:
	mov r0, #0
	pop {r4, r5, r6, pc}
	thumb_func_end sub_0208E9E0

	thumb_func_start sub_0208EA5C
sub_0208EA5C: ; 0x0208EA5C
	push {r3, r4, r5, lr}
	add r5, r0, #0
	ldr r0, [r5, #0xc]
	bl sub_0206FDFC
	add r4, r0, #0
	cmp r4, #0x18
	bgt _0208EA82
	ldr r1, [r5]
	mov r0, #0x48
	bl String_ctor
	str r0, [r5, #0x18]
	add r4, #0x18
	ldr r0, [r5, #4]
	ldr r2, [r5, #0x18]
	add r1, r4, #0
	bl ReadMsgDataIntoString
_0208EA82:
	pop {r3, r4, r5, pc}
	thumb_func_end sub_0208EA5C

	thumb_func_start sub_0208EA84
sub_0208EA84: ; 0x0208EA84
	push {r4, r5, r6, lr}
	sub sp, #8
	add r5, r0, #0
	add r6, r1, #0
	mov r0, #9
	ldr r1, [r5]
	lsl r0, r0, #6
	bl String_ctor
	add r4, r0, #0
	mov r0, #9
	ldr r1, [r5]
	lsl r0, r0, #6
	bl String_ctor
	str r0, [r5, #0x20]
	ldr r0, [r5, #4]
	add r1, r6, #0
	add r2, r4, #0
	bl ReadMsgDataIntoString
	ldr r0, [r5, #0xc]
	mov r1, #0x95
	mov r2, #0
	bl GetMonData
	mov r3, #2
	add r2, r0, #0
	str r3, [sp]
	mov r0, #1
	str r0, [sp, #4]
	ldr r0, [r5, #8]
	mov r1, #0
	bl BufferIntegerAsString
	ldr r0, [r5, #0xc]
	mov r1, #0x96
	mov r2, #0
	bl GetMonData
	add r2, r0, #0
	ldr r0, [r5, #8]
	mov r1, #1
	bl BufferMonthNameAbbr
	ldr r0, [r5, #0xc]
	mov r1, #0x97
	mov r2, #0
	bl GetMonData
	add r2, r0, #0
	mov r0, #0
	str r0, [sp]
	mov r0, #1
	str r0, [sp, #4]
	mov r1, #2
	ldr r0, [r5, #8]
	add r3, r1, #0
	bl BufferIntegerAsString
	ldr r0, [r5, #0xc]
	mov r1, #0x9c
	mov r2, #0
	bl GetMonData
	add r2, r0, #0
	mov r0, #0
	str r0, [sp]
	mov r0, #1
	str r0, [sp, #4]
	mov r1, #3
	ldr r0, [r5, #8]
	add r3, r1, #0
	bl BufferIntegerAsString
	ldr r0, [r5, #0xc]
	mov r1, #0x99
	mov r2, #0
	bl GetMonData
	add r2, r0, #0
	ldr r0, [r5, #8]
	mov r1, #4
	bl BufferLocationName
	ldr r0, [r5, #0xc]
	mov r1, #0x92
	mov r2, #0
	bl GetMonData
	mov r3, #2
	add r2, r0, #0
	str r3, [sp]
	mov r0, #1
	str r0, [sp, #4]
	ldr r0, [r5, #8]
	mov r1, #5
	bl BufferIntegerAsString
	ldr r0, [r5, #0xc]
	mov r1, #0x93
	mov r2, #0
	bl GetMonData
	add r2, r0, #0
	ldr r0, [r5, #8]
	mov r1, #6
	bl BufferMonthNameAbbr
	ldr r0, [r5, #0xc]
	mov r1, #0x94
	mov r2, #0
	bl GetMonData
	add r2, r0, #0
	mov r0, #0
	str r0, [sp]
	mov r0, #1
	str r0, [sp, #4]
	ldr r0, [r5, #8]
	mov r1, #7
	mov r3, #2
	bl BufferIntegerAsString
	ldr r0, [r5, #0xc]
	mov r1, #0x98
	mov r2, #0
	bl GetMonData
	add r2, r0, #0
	ldr r0, [r5, #8]
	mov r1, #8
	bl BufferLocationName
	ldr r0, [r5, #8]
	ldr r1, [r5, #0x20]
	add r2, r4, #0
	bl StringExpandPlaceholders
	add r0, r4, #0
	bl String_dtor
	add sp, #8
	pop {r4, r5, r6, pc}
	thumb_func_end sub_0208EA84

	thumb_func_start sub_0208EBA4
sub_0208EBA4: ; 0x0208EBA4
	push {r4, r5, r6, lr}
	sub sp, #8
	add r4, r0, #0
	add r6, r1, #0
	mov r0, #0x12
	ldr r1, [r4]
	lsl r0, r0, #4
	bl String_ctor
	add r5, r0, #0
	mov r0, #0x12
	ldr r1, [r4]
	lsl r0, r0, #4
	bl String_ctor
	str r0, [r4, #0x20]
	ldr r0, [r4, #4]
	add r1, r6, #0
	add r2, r5, #0
	bl ReadMsgDataIntoString
	ldr r0, [r4, #0xc]
	mov r1, #0x95
	mov r2, #0
	bl GetMonData
	mov r3, #2
	add r2, r0, #0
	str r3, [sp]
	mov r0, #1
	str r0, [sp, #4]
	ldr r0, [r4, #8]
	mov r1, #0
	bl BufferIntegerAsString
	ldr r0, [r4, #0xc]
	mov r1, #0x96
	mov r2, #0
	bl GetMonData
	add r2, r0, #0
	ldr r0, [r4, #8]
	mov r1, #1
	bl BufferMonthNameAbbr
	ldr r0, [r4, #0xc]
	mov r1, #0x97
	mov r2, #0
	bl GetMonData
	add r2, r0, #0
	mov r0, #0
	str r0, [sp]
	mov r0, #1
	str r0, [sp, #4]
	mov r1, #2
	ldr r0, [r4, #8]
	add r3, r1, #0
	bl BufferIntegerAsString
	ldr r0, [r4, #0xc]
	mov r1, #0x9c
	mov r2, #0
	bl GetMonData
	add r2, r0, #0
	mov r0, #0
	str r0, [sp]
	mov r0, #1
	str r0, [sp, #4]
	mov r1, #3
	ldr r0, [r4, #8]
	add r3, r1, #0
	bl BufferIntegerAsString
	ldr r0, [r4, #0xc]
	mov r1, #0x7a
	mov r2, #0
	bl GetMonData
	cmp r0, #0xf
	bhi _0208EC74
	add r0, r0, r0
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_0208EC54: ; jump table
	.short _0208EC74 - _0208EC54 - 2 ; case 0
	.short _0208ECB0 - _0208EC54 - 2 ; case 1
	.short _0208ECB0 - _0208EC54 - 2 ; case 2
	.short _0208ECB0 - _0208EC54 - 2 ; case 3
	.short _0208EC88 - _0208EC54 - 2 ; case 4
	.short _0208EC88 - _0208EC54 - 2 ; case 5
	.short _0208EC74 - _0208EC54 - 2 ; case 6
	.short _0208EC9C - _0208EC54 - 2 ; case 7
	.short _0208EC9C - _0208EC54 - 2 ; case 8
	.short _0208EC74 - _0208EC54 - 2 ; case 9
	.short _0208ECD8 - _0208EC54 - 2 ; case 10
	.short _0208ECD8 - _0208EC54 - 2 ; case 11
	.short _0208ECD8 - _0208EC54 - 2 ; case 12
	.short _0208EC74 - _0208EC54 - 2 ; case 13
	.short _0208EC74 - _0208EC54 - 2 ; case 14
	.short _0208ECC4 - _0208EC54 - 2 ; case 15
_0208EC74:
	mov r0, #1
	mov r1, #7
	bl sub_02017FE4
	add r2, r0, #0
	ldr r0, [r4, #8]
	mov r1, #4
	bl BufferLocationName
	b _0208ECEA
_0208EC88:
	mov r0, #1
	mov r1, #3
	bl sub_02017FE4
	add r2, r0, #0
	ldr r0, [r4, #8]
	mov r1, #4
	bl BufferLocationName
	b _0208ECEA
_0208EC9C:
	mov r0, #1
	mov r1, #4
	bl sub_02017FE4
	add r2, r0, #0
	ldr r0, [r4, #8]
	mov r1, #4
	bl BufferLocationName
	b _0208ECEA
_0208ECB0:
	mov r0, #1
	mov r1, #5
	bl sub_02017FE4
	add r2, r0, #0
	ldr r0, [r4, #8]
	mov r1, #4
	bl BufferLocationName
	b _0208ECEA
_0208ECC4:
	mov r0, #1
	mov r1, #8
	bl sub_02017FE4
	add r2, r0, #0
	ldr r0, [r4, #8]
	mov r1, #4
	bl BufferLocationName
	b _0208ECEA
_0208ECD8:
	mov r0, #1
	mov r1, #7
	bl sub_02017FE4
	add r2, r0, #0
	ldr r0, [r4, #8]
	mov r1, #4
	bl BufferLocationName
_0208ECEA:
	ldr r0, [r4, #8]
	ldr r1, [r4, #0x20]
	add r2, r5, #0
	bl StringExpandPlaceholders
	add r0, r5, #0
	bl String_dtor
	add sp, #8
	pop {r4, r5, r6, pc}
	.balign 4, 0
	thumb_func_end sub_0208EBA4

	thumb_func_start sub_0208ED00
sub_0208ED00: ; 0x0208ED00
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #8
	add r5, r0, #0
	add r7, r1, #0
	mov r0, #0x5a
	ldr r1, [r5]
	lsl r0, r0, #2
	add r6, r2, #0
	bl String_ctor
	add r4, r0, #0
	mov r0, #0x5a
	ldr r1, [r5]
	lsl r0, r0, #2
	bl String_ctor
	str r0, [r5, #0x20]
	ldr r0, [r5, #4]
	add r1, r7, #0
	add r2, r4, #0
	bl ReadMsgDataIntoString
	cmp r6, #0
	ldr r0, [r5, #0xc]
	bne _0208ED94
	mov r1, #0x92
	mov r2, #0
	bl GetMonData
	mov r3, #2
	add r2, r0, #0
	str r3, [sp]
	mov r0, #1
	str r0, [sp, #4]
	ldr r0, [r5, #8]
	mov r1, #5
	bl BufferIntegerAsString
	ldr r0, [r5, #0xc]
	mov r1, #0x93
	mov r2, #0
	bl GetMonData
	add r2, r0, #0
	ldr r0, [r5, #8]
	mov r1, #6
	bl BufferMonthNameAbbr
	ldr r0, [r5, #0xc]
	mov r1, #0x94
	mov r2, #0
	bl GetMonData
	add r2, r0, #0
	mov r0, #0
	str r0, [sp]
	mov r0, #1
	str r0, [sp, #4]
	ldr r0, [r5, #8]
	mov r1, #7
	mov r3, #2
	bl BufferIntegerAsString
	ldr r0, [r5, #0xc]
	mov r1, #0x98
	mov r2, #0
	bl GetMonData
	add r2, r0, #0
	ldr r0, [r5, #8]
	mov r1, #8
	bl BufferLocationName
	b _0208EDF4
_0208ED94:
	mov r1, #0x95
	mov r2, #0
	bl GetMonData
	mov r3, #2
	add r2, r0, #0
	str r3, [sp]
	mov r0, #1
	str r0, [sp, #4]
	ldr r0, [r5, #8]
	mov r1, #5
	bl BufferIntegerAsString
	ldr r0, [r5, #0xc]
	mov r1, #0x96
	mov r2, #0
	bl GetMonData
	add r2, r0, #0
	ldr r0, [r5, #8]
	mov r1, #6
	bl BufferMonthNameAbbr
	ldr r0, [r5, #0xc]
	mov r1, #0x97
	mov r2, #0
	bl GetMonData
	add r2, r0, #0
	mov r0, #0
	str r0, [sp]
	mov r0, #1
	str r0, [sp, #4]
	ldr r0, [r5, #8]
	mov r1, #7
	mov r3, #2
	bl BufferIntegerAsString
	ldr r0, [r5, #0xc]
	mov r1, #0x99
	mov r2, #0
	bl GetMonData
	add r2, r0, #0
	ldr r0, [r5, #8]
	mov r1, #8
	bl BufferLocationName
_0208EDF4:
	ldr r0, [r5, #8]
	ldr r1, [r5, #0x20]
	add r2, r4, #0
	bl StringExpandPlaceholders
	add r0, r4, #0
	bl String_dtor
	add sp, #8
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_0208ED00

	thumb_func_start sub_0208EE08
sub_0208EE08: ; 0x0208EE08
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x10
	add r4, r0, #0
	ldr r1, [r4]
	mov r0, #0x48
	bl String_ctor
	str r0, [r4, #0x28]
	ldr r0, [r4, #0xc]
	mov r1, #0x46
	mov r2, #0
	bl GetMonData
	str r0, [sp, #0xc]
	ldr r0, [r4, #0xc]
	mov r1, #0x47
	mov r2, #0
	bl GetMonData
	str r0, [sp, #8]
	ldr r0, [r4, #0xc]
	mov r1, #0x48
	mov r2, #0
	bl GetMonData
	str r0, [sp, #4]
	ldr r0, [r4, #0xc]
	mov r1, #0x49
	mov r2, #0
	bl GetMonData
	str r0, [sp]
	ldr r0, [r4, #0xc]
	mov r1, #0x4a
	mov r2, #0
	bl GetMonData
	add r7, r0, #0
	ldr r0, [r4, #0xc]
	mov r1, #0x4b
	mov r2, #0
	bl GetMonData
	add r6, r0, #0
	mov r1, #0
	ldr r0, [r4, #0xc]
	add r2, r1, #0
	bl GetMonData
	mov r1, #6
	bl _u32_div_f
	cmp r1, #5
	bhi _0208EE8C
	add r0, r1, r1
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_0208EE80: ; jump table
	.short _0208EE8C - _0208EE80 - 2 ; case 0
	.short _0208EEC4 - _0208EE80 - 2 ; case 1
	.short _0208EEFA - _0208EE80 - 2 ; case 2
	.short _0208EF30 - _0208EE80 - 2 ; case 3
	.short _0208EF66 - _0208EE80 - 2 ; case 4
	.short _0208EF9C - _0208EE80 - 2 ; case 5
_0208EE8C:
	ldr r0, [sp, #0xc]
	ldr r1, [sp, #8]
	add r2, r0, #0
	mov r5, #0
	cmp r2, r1
	bge _0208EE9C
	mov r5, #1
	add r0, r1, #0
_0208EE9C:
	ldr r1, [sp, #4]
	cmp r0, r1
	bge _0208EEA6
	mov r5, #2
	add r0, r1, #0
_0208EEA6:
	ldr r1, [sp]
	cmp r0, r1
	bge _0208EEB0
	mov r5, #3
	add r0, r1, #0
_0208EEB0:
	cmp r0, r7
	bge _0208EEB8
	mov r5, #4
	add r0, r7, #0
_0208EEB8:
	cmp r0, r6
	blt _0208EEBE
	b _0208EFD0
_0208EEBE:
	mov r5, #5
	add r0, r6, #0
	b _0208EFD0
_0208EEC4:
	ldr r0, [sp, #8]
	ldr r1, [sp, #4]
	add r2, r0, #0
	mov r5, #1
	cmp r2, r1
	bge _0208EED4
	mov r5, #2
	add r0, r1, #0
_0208EED4:
	ldr r1, [sp]
	cmp r0, r1
	bge _0208EEDE
	mov r5, #3
	add r0, r1, #0
_0208EEDE:
	cmp r0, r7
	bge _0208EEE6
	mov r5, #4
	add r0, r7, #0
_0208EEE6:
	cmp r0, r6
	bge _0208EEEE
	mov r5, #5
	add r0, r6, #0
_0208EEEE:
	ldr r1, [sp, #0xc]
	cmp r0, r1
	bge _0208EFD0
	mov r5, #0
	add r0, r1, #0
	b _0208EFD0
_0208EEFA:
	ldr r0, [sp, #4]
	ldr r1, [sp]
	add r2, r0, #0
	mov r5, #2
	cmp r2, r1
	bge _0208EF0A
	mov r5, #3
	add r0, r1, #0
_0208EF0A:
	cmp r0, r7
	bge _0208EF12
	mov r5, #4
	add r0, r7, #0
_0208EF12:
	cmp r0, r6
	bge _0208EF1A
	mov r5, #5
	add r0, r6, #0
_0208EF1A:
	ldr r1, [sp, #0xc]
	cmp r0, r1
	bge _0208EF24
	mov r5, #0
	add r0, r1, #0
_0208EF24:
	ldr r1, [sp, #8]
	cmp r0, r1
	bge _0208EFD0
	mov r5, #1
	add r0, r1, #0
	b _0208EFD0
_0208EF30:
	ldr r0, [sp]
	mov r5, #3
	add r1, r0, #0
	cmp r1, r7
	bge _0208EF3E
	mov r5, #4
	add r0, r7, #0
_0208EF3E:
	cmp r0, r6
	bge _0208EF46
	mov r5, #5
	add r0, r6, #0
_0208EF46:
	ldr r1, [sp, #0xc]
	cmp r0, r1
	bge _0208EF50
	mov r5, #0
	add r0, r1, #0
_0208EF50:
	ldr r1, [sp, #8]
	cmp r0, r1
	bge _0208EF5A
	mov r5, #1
	add r0, r1, #0
_0208EF5A:
	ldr r1, [sp, #4]
	cmp r0, r1
	bge _0208EFD0
	mov r5, #2
	add r0, r1, #0
	b _0208EFD0
_0208EF66:
	mov r5, #4
	add r0, r7, #0
	cmp r7, r6
	bge _0208EF72
	mov r5, #5
	add r0, r6, #0
_0208EF72:
	ldr r1, [sp, #0xc]
	cmp r0, r1
	bge _0208EF7C
	mov r5, #0
	add r0, r1, #0
_0208EF7C:
	ldr r1, [sp, #8]
	cmp r0, r1
	bge _0208EF86
	mov r5, #1
	add r0, r1, #0
_0208EF86:
	ldr r1, [sp, #4]
	cmp r0, r1
	bge _0208EF90
	mov r5, #2
	add r0, r1, #0
_0208EF90:
	ldr r1, [sp]
	cmp r0, r1
	bge _0208EFD0
	mov r5, #3
	add r0, r1, #0
	b _0208EFD0
_0208EF9C:
	ldr r1, [sp, #0xc]
	mov r5, #5
	add r0, r6, #0
	cmp r6, r1
	bge _0208EFAA
	mov r5, #0
	add r0, r1, #0
_0208EFAA:
	ldr r1, [sp, #8]
	cmp r0, r1
	bge _0208EFB4
	mov r5, #1
	add r0, r1, #0
_0208EFB4:
	ldr r1, [sp, #4]
	cmp r0, r1
	bge _0208EFBE
	mov r5, #2
	add r0, r1, #0
_0208EFBE:
	ldr r1, [sp]
	cmp r0, r1
	bge _0208EFC8
	mov r5, #3
	add r0, r1, #0
_0208EFC8:
	cmp r0, r7
	bge _0208EFD0
	mov r5, #4
	add r0, r7, #0
_0208EFD0:
	mov r1, #5
	bl _s32_div_f
	mov r2, #0xa
	add r6, r5, #0
	mul r6, r2
	ldr r3, _0208EFF0 ; =0x021053F4
	lsl r2, r1, #1
	add r1, r3, r6
	ldrh r1, [r2, r1]
	ldr r0, [r4, #4]
	ldr r2, [r4, #0x28]
	bl ReadMsgDataIntoString
	add sp, #0x10
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_0208EFF0: .word 0x021053F4
	thumb_func_end sub_0208EE08

	thumb_func_start sub_0208EFF4
sub_0208EFF4: ; 0x0208EFF4
	push {r4, r5, r6, lr}
	add r5, r0, #0
	ldr r1, [r5]
	mov r0, #0x48
	bl String_ctor
	mov r6, #0
	str r0, [r5, #0x30]
	add r4, r6, #0
_0208F006:
	ldr r0, [r5, #0xc]
	add r1, r4, #0
	bl sub_020718CC
	cmp r0, #1
	bne _0208F014
	add r6, r4, #1
_0208F014:
	add r4, r4, #1
	cmp r4, #5
	blt _0208F006
	ldr r1, _0208F02C ; =0x021053E8
	lsl r2, r6, #1
	ldrh r1, [r1, r2]
	ldr r0, [r5, #4]
	ldr r2, [r5, #0x30]
	bl ReadMsgDataIntoString
	pop {r4, r5, r6, pc}
	nop
_0208F02C: .word 0x021053E8
	thumb_func_end sub_0208EFF4

	thumb_func_start sub_0208F030
sub_0208F030: ; 0x0208F030
	push {r3, r4, r5, lr}
	add r5, r0, #0
	ldr r0, [r5, #0xc]
	mov r1, #9
	mov r2, #0
	bl GetMonData
	add r4, r0, #0
	mov r0, #0x12
	ldr r1, [r5]
	lsl r0, r0, #4
	bl String_ctor
	str r0, [r5, #0x38]
	cmp r4, #5
	bgt _0208F054
	mov r1, #0x69
	b _0208F066
_0208F054:
	cmp r4, #0xa
	bgt _0208F05C
	mov r1, #0x6a
	b _0208F066
_0208F05C:
	cmp r4, #0x28
	bgt _0208F064
	mov r1, #0x6b
	b _0208F066
_0208F064:
	mov r1, #0x6c
_0208F066:
	ldr r0, [r5, #4]
	ldr r2, [r5, #0x38]
	bl ReadMsgDataIntoString
	pop {r3, r4, r5, pc}
	thumb_func_end sub_0208F030

	thumb_func_start sub_0208F070
sub_0208F070: ; 0x0208F070
	push {r4, r5, r6, lr}
	add r4, r1, #0
	mov r1, #0x4c
	mov r2, #0
	add r5, r0, #0
	bl GetMonData
	cmp r0, #0
	beq _0208F084
	b _0208F212
_0208F084:
	add r0, r5, #0
	mov r1, #0x98
	mov r2, #0
	bl GetMonData
	cmp r0, #0
	bne _0208F0F0
	add r0, r5, #0
	mov r1, #0x99
	mov r2, #0
	bl GetMonData
	add r6, r0, #0
	mov r0, #0
	mov r1, #0x37
	bl sub_02017FE4
	cmp r6, r0
	bne _0208F0AE
	mov r0, #0xf
	pop {r4, r5, r6, pc}
_0208F0AE:
	add r0, r5, #0
	mov r1, #0x6e
	mov r2, #0
	bl GetMonData
	cmp r0, #1
	bne _0208F0C8
	cmp r4, #1
	bne _0208F0C4
	mov r0, #7
	pop {r4, r5, r6, pc}
_0208F0C4:
	mov r0, #8
	pop {r4, r5, r6, pc}
_0208F0C8:
	add r0, r5, #0
	mov r1, #0x99
	mov r2, #0
	bl GetMonData
	add r5, r0, #0
	mov r0, #1
	add r1, r0, #0
	bl sub_02017FE4
	cmp r5, r0
	bne _0208F0E4
	mov r0, #2
	pop {r4, r5, r6, pc}
_0208F0E4:
	cmp r4, #1
	bne _0208F0EC
	mov r0, #0
	pop {r4, r5, r6, pc}
_0208F0EC:
	mov r0, #1
	pop {r4, r5, r6, pc}
_0208F0F0:
	add r0, r5, #0
	mov r1, #0x6e
	mov r2, #0
	bl GetMonData
	cmp r0, #1
	bne _0208F152
	add r0, r5, #0
	mov r1, #0x98
	mov r2, #0
	bl GetMonData
	add r6, r0, #0
	mov r0, #1
	mov r1, #2
	bl sub_02017FE4
	cmp r6, r0
	bne _0208F122
	cmp r4, #1
	bne _0208F11E
	mov r0, #0xd
	pop {r4, r5, r6, pc}
_0208F11E:
	mov r0, #0xe
	pop {r4, r5, r6, pc}
_0208F122:
	add r0, r5, #0
	mov r1, #0x98
	mov r2, #0
	bl GetMonData
	add r5, r0, #0
	mov r0, #2
	mov r1, #1
	bl sub_02017FE4
	cmp r5, r0
	bne _0208F146
	cmp r4, #1
	bne _0208F142
	mov r0, #0xb
	pop {r4, r5, r6, pc}
_0208F142:
	mov r0, #0xc
	pop {r4, r5, r6, pc}
_0208F146:
	cmp r4, #1
	bne _0208F14E
	mov r0, #9
	pop {r4, r5, r6, pc}
_0208F14E:
	mov r0, #0xa
	pop {r4, r5, r6, pc}
_0208F152:
	add r0, r5, #0
	mov r1, #0x98
	mov r2, #0
	bl GetMonData
	add r6, r0, #0
	mov r0, #1
	add r1, r0, #0
	bl sub_02017FE4
	cmp r6, r0
	beq _0208F1FA
	add r0, r5, #0
	mov r1, #0x98
	mov r2, #0
	bl GetMonData
	add r6, r0, #0
	mov r0, #1
	mov r1, #0
	bl sub_02017FE4
	cmp r6, r0
	beq _0208F1FA
	add r0, r5, #0
	mov r1, #0x98
	mov r2, #0
	bl GetMonData
	add r6, r0, #0
	mov r0, #1
	mov r1, #9
	bl sub_02017FE4
	cmp r6, r0
	beq _0208F1FA
	add r0, r5, #0
	mov r1, #0x98
	mov r2, #0
	bl GetMonData
	add r6, r0, #0
	mov r0, #1
	mov r1, #0xa
	bl sub_02017FE4
	cmp r6, r0
	beq _0208F1FA
	add r0, r5, #0
	mov r1, #0x98
	mov r2, #0
	bl GetMonData
	add r6, r0, #0
	mov r0, #1
	mov r1, #0xb
	bl sub_02017FE4
	cmp r6, r0
	beq _0208F1FA
	add r0, r5, #0
	mov r1, #0x98
	mov r2, #0
	bl GetMonData
	add r6, r0, #0
	mov r0, #1
	mov r1, #0xd
	bl sub_02017FE4
	cmp r6, r0
	beq _0208F1FA
	add r0, r5, #0
	mov r1, #0x98
	mov r2, #0
	bl GetMonData
	add r5, r0, #0
	mov r0, #1
	mov r1, #0xe
	bl sub_02017FE4
	cmp r5, r0
	bne _0208F206
_0208F1FA:
	cmp r4, #1
	bne _0208F202
	mov r0, #5
	pop {r4, r5, r6, pc}
_0208F202:
	mov r0, #6
	pop {r4, r5, r6, pc}
_0208F206:
	cmp r4, #1
	bne _0208F20E
	mov r0, #3
	pop {r4, r5, r6, pc}
_0208F20E:
	mov r0, #4
	pop {r4, r5, r6, pc}
_0208F212:
	cmp r4, #1
	bne _0208F248
	add r0, r5, #0
	mov r1, #0x6e
	mov r2, #0
	bl GetMonData
	cmp r0, #1
	bne _0208F244
	add r0, r5, #0
	mov r1, #0x98
	mov r2, #0
	bl GetMonData
	add r4, r0, #0
	mov r0, #2
	mov r1, #1
	bl sub_02017FE4
	cmp r4, r0
	bne _0208F240
	mov r0, #0x14
	pop {r4, r5, r6, pc}
_0208F240:
	mov r0, #0x12
	pop {r4, r5, r6, pc}
_0208F244:
	mov r0, #0x10
	pop {r4, r5, r6, pc}
_0208F248:
	add r0, r5, #0
	mov r1, #0x6e
	mov r2, #0
	bl GetMonData
	cmp r0, #1
	bne _0208F25A
	mov r0, #0x13
	pop {r4, r5, r6, pc}
_0208F25A:
	mov r0, #0x11
	pop {r4, r5, r6, pc}
	.balign 4, 0
	thumb_func_end sub_0208F070

	thumb_func_start sub_0208F260
sub_0208F260: ; 0x0208F260
	push {r3, r4, lr}
	sub sp, #4
	ldr r4, [sp, #0x10]
	str r4, [sp]
	bl sub_0208F270
	add sp, #4
	pop {r3, r4, pc}
	thumb_func_end sub_0208F260

	thumb_func_start sub_0208F270
sub_0208F270: ; 0x0208F270
	push {r3, r4, r5, r6, r7, lr}
	add r4, r0, #0
	add r7, r1, #0
	add r5, r3, #0
	ldr r6, [sp, #0x18]
	cmp r2, #7
	bls _0208F280
	b _0208F500
_0208F280:
	add r2, r2, r2
	add r2, pc
	ldrh r2, [r2, #6]
	lsl r2, r2, #0x10
	asr r2, r2, #0x10
	add pc, r2
_0208F28C: ; jump table
	.short _0208F29C - _0208F28C - 2 ; case 0
	.short _0208F34A - _0208F28C - 2 ; case 1
	.short _0208F394 - _0208F28C - 2 ; case 2
	.short _0208F3B4 - _0208F28C - 2 ; case 3
	.short _0208F3D0 - _0208F28C - 2 ; case 4
	.short _0208F458 - _0208F28C - 2 ; case 5
	.short _0208F478 - _0208F28C - 2 ; case 6
	.short _0208F2F8 - _0208F28C - 2 ; case 7
_0208F29C:
	mov r0, #1
	mov r1, #0
	bl sub_02017FE4
	cmp r5, r0
	ble _0208F2B2
	mov r0, #2
	add r1, r0, #0
	bl sub_02017FE4
	add r5, r0, #0
_0208F2B2:
	add r0, r4, #0
	mov r1, #0x4c
	mov r2, #0
	bl GetBoxMonData
	cmp r0, #0
	bne _0208F2DA
	add r0, r4, #0
	mov r1, #0
	bl sub_0208F5C8
	add r0, r4, #0
	add r1, r5, #0
	mov r2, #1
	bl sub_0208F550
	add r0, r4, #0
	bl sub_0208F628
	b _0208F2EC
_0208F2DA:
	add r0, r4, #0
	add r1, r5, #0
	mov r2, #0
	bl sub_0208F550
	add r0, r4, #0
	mov r1, #1
	bl sub_0208F5C8
_0208F2EC:
	add r0, r4, #0
	add r1, r7, #0
	add r2, r6, #0
	bl sub_0208F504
	pop {r3, r4, r5, r6, r7, pc}
_0208F2F8:
	mov r0, #1
	mov r1, #0
	bl sub_02017FE4
	cmp r5, r0
	ble _0208F30E
	mov r0, #2
	add r1, r0, #0
	bl sub_02017FE4
	add r5, r0, #0
_0208F30E:
	add r0, r4, #0
	mov r1, #0x4c
	mov r2, #0
	bl GetBoxMonData
	cmp r0, #0
	bne _0208F336
	add r0, r4, #0
	mov r1, #0
	bl sub_0208F5C8
	add r0, r4, #0
	add r1, r5, #0
	mov r2, #1
	bl sub_0208F550
	add r0, r4, #0
	bl sub_0208F628
	pop {r3, r4, r5, r6, r7, pc}
_0208F336:
	add r0, r4, #0
	add r1, r5, #0
	mov r2, #0
	bl sub_0208F550
	add r0, r4, #0
	mov r1, #1
	bl sub_0208F5C8
	pop {r3, r4, r5, r6, r7, pc}
_0208F34A:
	mov r1, #0x4c
	mov r2, #0
	bl GetBoxMonData
	cmp r0, #0
	bne _0208F378
	add r0, r4, #0
	mov r1, #0
	bl sub_0208F5C8
	mov r0, #1
	add r1, r0, #0
	bl sub_02017FE4
	add r1, r0, #0
	add r0, r4, #0
	mov r2, #1
	bl sub_0208F550
	add r0, r4, #0
	bl sub_0208F628
	pop {r3, r4, r5, r6, r7, pc}
_0208F378:
	add r0, r4, #0
	mov r1, #0
	bl sub_0208F5C8
	mov r0, #1
	add r1, r0, #0
	bl sub_02017FE4
	add r1, r0, #0
	add r0, r4, #0
	mov r2, #1
	bl sub_0208F550
	pop {r3, r4, r5, r6, r7, pc}
_0208F394:
	mov r1, #0
	bl sub_0208F5C8
	mov r0, #0
	mov r1, #0x37
	bl sub_02017FE4
	add r1, r0, #0
	add r0, r4, #0
	mov r2, #1
	bl sub_0208F550
	add r0, r4, #0
	bl sub_0208F628
	pop {r3, r4, r5, r6, r7, pc}
_0208F3B4:
	add r1, r5, #0
	mov r2, #0
	bl sub_0208F550
	add r0, r4, #0
	mov r1, #1
	bl sub_0208F5C8
	add r0, r4, #0
	add r1, r7, #0
	add r2, r6, #0
	bl sub_0208F504
	pop {r3, r4, r5, r6, r7, pc}
_0208F3D0:
	add r2, r6, #0
	bl sub_02072788
	cmp r0, #1
	bne _0208F416
	add r0, r4, #0
	mov r1, #0x4c
	mov r2, #0
	bl GetBoxMonData
	cmp r0, #0
	bne _0208F402
	add r0, r4, #0
	mov r1, #0
	bl sub_0208F5C8
	add r0, r4, #0
	add r1, r5, #0
	mov r2, #1
	bl sub_0208F550
	add r0, r4, #0
	bl sub_0208F628
	b _0208F450
_0208F402:
	add r0, r4, #0
	add r1, r5, #0
	mov r2, #0
	bl sub_0208F550
	add r0, r4, #0
	mov r1, #1
	bl sub_0208F5C8
	b _0208F450
_0208F416:
	add r0, r4, #0
	mov r1, #0x4c
	mov r2, #0
	bl GetBoxMonData
	cmp r0, #0
	bne _0208F43E
	add r0, r4, #0
	mov r1, #0
	bl sub_0208F5C8
	add r0, r4, #0
	add r1, r5, #0
	mov r2, #1
	bl sub_0208F550
	add r0, r4, #0
	bl sub_0208F628
	b _0208F450
_0208F43E:
	add r0, r4, #0
	mov r1, #0
	bl sub_0208F5C8
	add r0, r4, #0
	add r1, r5, #0
	mov r2, #1
	bl sub_0208F550
_0208F450:
	add r0, r4, #0
	bl sub_0208F648
	pop {r3, r4, r5, r6, r7, pc}
_0208F458:
	mov r1, #0x4c
	mov r2, #0
	bl GetBoxMonData
	cmp r0, #0
	beq _0208F500
	mov r0, #1
	mov r1, #2
	bl sub_02017FE4
	add r1, r0, #0
	add r0, r4, #0
	mov r2, #1
	bl sub_0208F550
	pop {r3, r4, r5, r6, r7, pc}
_0208F478:
	mov r0, #1
	mov r1, #0
	bl sub_02017FE4
	cmp r5, r0
	ble _0208F486
	mov r5, #0
_0208F486:
	add r0, r4, #0
	add r1, r7, #0
	add r2, r6, #0
	bl sub_02072788
	cmp r0, #0
	bne _0208F4EC
	add r0, r4, #0
	mov r1, #0x99
	mov r2, #0
	bl GetBoxMonData
	str r0, [sp]
	add r0, r4, #0
	mov r1, #0x98
	add r2, sp, #0
	bl sub_0206ED70
	add r0, r4, #0
	mov r1, #0x95
	mov r2, #0
	bl GetBoxMonData
	str r0, [sp]
	add r0, r4, #0
	mov r1, #0x92
	add r2, sp, #0
	bl sub_0206ED70
	add r0, r4, #0
	mov r1, #0x96
	mov r2, #0
	bl GetBoxMonData
	str r0, [sp]
	add r0, r4, #0
	mov r1, #0x93
	add r2, sp, #0
	bl sub_0206ED70
	add r0, r4, #0
	mov r1, #0x97
	mov r2, #0
	bl GetBoxMonData
	str r0, [sp]
	add r0, r4, #0
	mov r1, #0x94
	add r2, sp, #0
	bl sub_0206ED70
_0208F4EC:
	add r0, r4, #0
	add r1, r5, #0
	mov r2, #1
	bl sub_0208F550
	add r0, r4, #0
	add r1, r7, #0
	add r2, r6, #0
	bl sub_0208F504
_0208F500:
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_0208F270

	thumb_func_start sub_0208F504
sub_0208F504: ; 0x0208F504
	push {r4, r5, r6, lr}
	sub sp, #8
	add r4, r1, #0
	add r5, r0, #0
	add r0, r4, #0
	add r6, r2, #0
	bl PlayerProfile_GetTrainerID
	str r0, [sp, #4]
	add r0, r4, #0
	bl PlayerProfile_GetTrainerGender
	str r0, [sp]
	add r0, r4, #0
	add r1, r6, #0
	bl PlayerProfile_GetPlayerName_NewString
	add r4, r0, #0
	add r0, r5, #0
	mov r1, #7
	add r2, sp, #4
	bl sub_0206ED70
	add r0, r5, #0
	mov r1, #0x9d
	add r2, sp, #0
	bl sub_0206ED70
	add r0, r5, #0
	mov r1, #0x91
	add r2, r4, #0
	bl sub_0206ED70
	add r0, r4, #0
	bl String_dtor
	add sp, #8
	pop {r4, r5, r6, pc}
	thumb_func_end sub_0208F504

	thumb_func_start sub_0208F550
sub_0208F550: ; 0x0208F550
	push {r0, r1, r2, r3}
	push {r3, r4, r5, lr}
	sub sp, #0x10
	add r5, r0, #0
	add r0, sp, #0
	add r4, r2, #0
	bl GF_RTC_CopyDate
	cmp r4, #0
	add r2, sp, #0x24
	bne _0208F596
	add r0, r5, #0
	mov r1, #0x98
	bl sub_0206ED70
	add r0, r5, #0
	mov r1, #0x92
	add r2, sp, #0
	bl sub_0206ED70
	add r0, r5, #0
	mov r1, #0x93
	add r2, sp, #4
	bl sub_0206ED70
	add r0, r5, #0
	mov r1, #0x94
	add r2, sp, #8
	bl sub_0206ED70
	add sp, #0x10
	pop {r3, r4, r5}
	pop {r3}
	add sp, #0x10
	bx r3
_0208F596:
	add r0, r5, #0
	mov r1, #0x99
	bl sub_0206ED70
	add r0, r5, #0
	mov r1, #0x95
	add r2, sp, #0
	bl sub_0206ED70
	add r0, r5, #0
	mov r1, #0x96
	add r2, sp, #4
	bl sub_0206ED70
	add r0, r5, #0
	mov r1, #0x97
	add r2, sp, #8
	bl sub_0206ED70
	add sp, #0x10
	pop {r3, r4, r5}
	pop {r3}
	add sp, #0x10
	bx r3
	.balign 4, 0
	thumb_func_end sub_0208F550

	thumb_func_start sub_0208F5C8
sub_0208F5C8: ; 0x0208F5C8
	push {r3, r4, lr}
	sub sp, #4
	mov r2, #0
	add r4, r0, #0
	str r2, [sp]
	cmp r1, #0
	add r2, sp, #0
	bne _0208F600
	mov r1, #0x98
	bl sub_0206ED70
	add r0, r4, #0
	mov r1, #0x92
	add r2, sp, #0
	bl sub_0206ED70
	add r0, r4, #0
	mov r1, #0x93
	add r2, sp, #0
	bl sub_0206ED70
	add r0, r4, #0
	mov r1, #0x94
	add r2, sp, #0
	bl sub_0206ED70
	add sp, #4
	pop {r3, r4, pc}
_0208F600:
	mov r1, #0x99
	bl sub_0206ED70
	add r0, r4, #0
	mov r1, #0x95
	add r2, sp, #0
	bl sub_0206ED70
	add r0, r4, #0
	mov r1, #0x96
	add r2, sp, #0
	bl sub_0206ED70
	add r0, r4, #0
	mov r1, #0x97
	add r2, sp, #0
	bl sub_0206ED70
	add sp, #4
	pop {r3, r4, pc}
	thumb_func_end sub_0208F5C8

	thumb_func_start sub_0208F628
sub_0208F628: ; 0x0208F628
	push {r3, r4, lr}
	sub sp, #4
	add r4, r0, #0
	mov r1, #0xa1
	mov r2, #0
	bl GetBoxMonData
	str r0, [sp]
	add r0, r4, #0
	mov r1, #0x9c
	add r2, sp, #0
	bl sub_0206ED70
	add sp, #4
	pop {r3, r4, pc}
	.balign 4, 0
	thumb_func_end sub_0208F628

	thumb_func_start sub_0208F648
sub_0208F648: ; 0x0208F648
	push {r3, lr}
	mov r1, #1
	str r1, [sp]
	mov r1, #0x6e
	add r2, sp, #0
	bl sub_0206ED70
	pop {r3, pc}
	thumb_func_end sub_0208F648

	thumb_func_start sub_0208F658
sub_0208F658: ; 0x0208F658
	ldr r3, _0208F664 ; =sub_0203410C
	add r2, r0, #0
	ldr r0, _0208F668 ; =0x02105430
	mov r1, #0xb
	bx r3
	nop
_0208F664: .word sub_0203410C
_0208F668: .word 0x02105430
	thumb_func_end sub_0208F658

	thumb_func_start sub_0208F66C
sub_0208F66C: ; 0x0208F66C
	cmp r0, #0xc
	bne _0208F674
	mov r0, #0xc
	bx lr
_0208F674:
	cmp r0, #6
	bhs _0208F67C
	add r0, r0, #6
	bx lr
_0208F67C:
	sub r0, r0, #6
	bx lr
	thumb_func_end sub_0208F66C

	thumb_func_start sub_0208F680
sub_0208F680: ; 0x0208F680
	push {r4, r5, r6, lr}
	add r3, #0x88
	add r5, r0, #0
	add r6, r2, #0
	ldr r4, [r3]
	bl sub_0203769C
	cmp r5, r0
	beq _0208F6EA
	ldr r0, _0208F6EC ; =0x00002228
	mov r2, #0x59
	ldr r0, [r4, r0]
	add r1, r6, #0
	lsl r2, r2, #4
	bl memcpy
	ldr r0, [r4, #0x64]
	add r2, r0, #1
	mov r0, #0x59
	lsl r0, r0, #4
	add r1, r2, #0
	mul r1, r0
	str r2, [r4, #0x64]
	cmp r1, r0
	blt _0208F6D6
	bl sub_0203769C
	cmp r0, #1
	bne _0208F6C6
	add r0, r4, #0
	mov r1, #0x1b
	mov r2, #0
	bl ov65_0221DE24
	b _0208F6E4
_0208F6C6:
	bl sub_0203769C
	ldr r1, _0208F6F0 ; =0x00002224
	ldr r2, [r4, #0x5c]
	ldr r1, [r4, r1]
	bl ov65_0221DE64
	b _0208F6E4
_0208F6D6:
	bl sub_0203769C
	ldr r1, _0208F6F0 ; =0x00002224
	ldr r2, [r4, #0x5c]
	ldr r1, [r4, r1]
	bl ov65_0221DE64
_0208F6E4:
	ldr r0, [r4, #0x5c]
	add r0, r0, #1
	str r0, [r4, #0x5c]
_0208F6EA:
	pop {r4, r5, r6, pc}
	.balign 4, 0
_0208F6EC: .word 0x00002228
_0208F6F0: .word 0x00002224
	thumb_func_end sub_0208F680

	thumb_func_start sub_0208F6F4
sub_0208F6F4: ; 0x0208F6F4
	push {r4, r5, r6, lr}
	add r3, #0x88
	add r5, r0, #0
	add r6, r2, #0
	ldr r4, [r3]
	bl sub_0203769C
	cmp r5, r0
	beq _0208F710
	ldrb r0, [r6]
	bl sub_0208F66C
	add r4, #0x98
	str r0, [r4]
_0208F710:
	pop {r4, r5, r6, pc}
	.balign 4, 0
	thumb_func_end sub_0208F6F4

	thumb_func_start sub_0208F714
sub_0208F714: ; 0x0208F714
	add r3, #0x88
	ldrb r2, [r2]
	ldr r1, [r3]
	lsl r0, r0, #2
	add r0, r1, r0
	str r2, [r0, #0x6c]
	bx lr
	.balign 4, 0
	thumb_func_end sub_0208F714

	thumb_func_start sub_0208F724
sub_0208F724: ; 0x0208F724
	bx lr
	.balign 4, 0
	thumb_func_end sub_0208F724

	thumb_func_start sub_0208F728
sub_0208F728: ; 0x0208F728
	bx lr
	.balign 4, 0
	thumb_func_end sub_0208F728

	thumb_func_start sub_0208F72C
sub_0208F72C: ; 0x0208F72C
	add r3, #0x88
	ldr r0, [r3]
	mov r1, #2
	str r1, [r0, #0x60]
	bx lr
	.balign 4, 0
	thumb_func_end sub_0208F72C

	thumb_func_start sub_0208F738
sub_0208F738: ; 0x0208F738
	bx lr
	.balign 4, 0
	thumb_func_end sub_0208F738

	thumb_func_start sub_0208F73C
sub_0208F73C: ; 0x0208F73C
	add r3, #0x88
	ldrb r2, [r2]
	ldr r1, [r3]
	ldr r0, _0208F748 ; =0x000022CC
	str r2, [r1, r0]
	bx lr
	.balign 4, 0
_0208F748: .word 0x000022CC
	thumb_func_end sub_0208F73C

	thumb_func_start sub_0208F74C
sub_0208F74C: ; 0x0208F74C
	push {r4, r5, r6, lr}
	add r6, r0, #0
	ldr r0, [r3, #0xc]
	add r5, r2, #0
	bl sub_0202D95C
	add r4, r0, #0
	bl sub_0203769C
	cmp r6, r0
	beq _0208F778
	mov r2, #0
_0208F764:
	ldrb r1, [r5, r2]
	cmp r1, #0
	beq _0208F772
	ldrb r0, [r4, r2]
	cmp r0, r1
	beq _0208F772
	strb r1, [r4, r2]
_0208F772:
	add r2, r2, #1
	cmp r2, #0xe
	blt _0208F764
_0208F778:
	pop {r4, r5, r6, pc}
	.balign 4, 0
	thumb_func_end sub_0208F74C

	thumb_func_start sub_0208F77C
sub_0208F77C: ; 0x0208F77C
	push {r4, r5, r6, lr}
	add r3, #0x88
	add r5, r0, #0
	add r6, r2, #0
	ldr r4, [r3]
	bl sub_0203769C
	cmp r5, r0
	beq _0208F7A0
	ldr r0, _0208F7A4 ; =0x00002230
	add r1, r6, #0
	ldr r0, [r4, r0]
	mov r2, #1
	mov r3, #0x1a
	bl sub_0202AF28
	mov r0, #3
	str r0, [r4, #0x60]
_0208F7A0:
	pop {r4, r5, r6, pc}
	nop
_0208F7A4: .word 0x00002230
	thumb_func_end sub_0208F77C

	thumb_func_start sub_0208F7A8
sub_0208F7A8: ; 0x0208F7A8
	push {r4, r5, r6, lr}
	add r3, #0x88
	add r5, r0, #0
	add r6, r2, #0
	ldr r4, [r3]
	bl sub_0203769C
	cmp r5, r0
	beq _0208F7DA
	ldr r1, _0208F7DC ; =0x00002E20
	mov r2, #0xfb
	add r3, r4, r1
	lsl r2, r2, #2
	add r1, r5, #0
	mul r1, r2
	add r0, r6, #0
	add r1, r3, r1
	sub r2, r2, #4
	bl sub_020D48B4
	mov r0, #4
	str r0, [r4, #0x60]
	mov r0, #0
	bl sub_020378E4
_0208F7DA:
	pop {r4, r5, r6, pc}
	.balign 4, 0
_0208F7DC: .word 0x00002E20
	thumb_func_end sub_0208F7A8

	thumb_func_start sub_0208F7E0
sub_0208F7E0: ; 0x0208F7E0
	add r0, #0x88
	str r1, [r0]
	bx lr
	.balign 4, 0
	thumb_func_end sub_0208F7E0

	thumb_func_start sub_0208F7E8
sub_0208F7E8: ; 0x0208F7E8
	mov r0, #0xfb
	lsl r0, r0, #2
	bx lr
	.balign 4, 0
	thumb_func_end sub_0208F7E8

	thumb_func_start sub_0208F7F0
sub_0208F7F0: ; 0x0208F7F0
	mov r0, #0xe
	bx lr
	thumb_func_end sub_0208F7F0

	thumb_func_start sub_0208F7F4
sub_0208F7F4: ; 0x0208F7F4
	mov r0, #0x88
	bx lr
	thumb_func_end sub_0208F7F4

	thumb_func_start sub_0208F7F8
sub_0208F7F8: ; 0x0208F7F8
	mov r0, #0x59
	lsl r0, r0, #4
	bx lr
	.balign 4, 0
	thumb_func_end sub_0208F7F8

	thumb_func_start sub_0208F800
sub_0208F800: ; 0x0208F800
	add r1, #0x88
	ldr r2, [r1]
	mov r1, #0x23
	lsl r1, r1, #8
	add r2, r2, r1
	mov r1, #0x59
	lsl r1, r1, #4
	mul r1, r0
	add r0, r2, r1
	bx lr
	thumb_func_end sub_0208F800

	thumb_func_start sub_0208F814
sub_0208F814: ; 0x0208F814
	ldr r3, _0208F820 ; =sub_0203410C
	add r2, r0, #0
	ldr r0, _0208F824 ; =0x021054B4
	mov r1, #0x6e
	bx r3
	nop
_0208F820: .word sub_0203410C
_0208F824: .word 0x021054B4
	thumb_func_end sub_0208F814

	thumb_func_start sub_0208F828
sub_0208F828: ; 0x0208F828
	push {r3, r4, r5, lr}
	add r5, r2, #0
	add r4, r3, #0
	bl sub_0203769C
	cmp r0, #0
	beq _0208F886
	mov r3, #0xfb
	lsl r3, r3, #2
	ldrb r2, [r5, r3]
	sub r0, r3, #4
	add r1, r2, #0
	mul r1, r0
	mov r0, #0xe1
	lsl r0, r0, #6
	cmp r1, r0
	ldr r2, _0208F8B4 ; =0x000043D0
	ble _0208F85C
	add r2, r4, r2
	add r1, r2, r1
	mov r2, #0x19
	add r0, r5, #0
	lsl r2, r2, #4
	bl sub_020D48B4
	b _0208F868
_0208F85C:
	add r2, r4, r2
	add r1, r2, r1
	add r0, r5, #0
	sub r2, r3, #4
	bl sub_020D48B4
_0208F868:
	mov r1, #0xb5
	ldr r0, _0208F8B4 ; =0x000043D0
	lsl r1, r1, #2
	mov r2, #0xe1
	ldr r1, [r4, r1]
	add r0, r4, r0
	lsl r2, r2, #6
	bl sub_020D48B4
	mov r0, #0xb2
	lsl r0, r0, #2
	add r0, r4, r0
	bl CopyWindowToVram
	pop {r3, r4, r5, pc}
_0208F886:
	ldr r1, _0208F8B8 ; =0x000043CC
	mov r0, #0xfa
	ldr r2, [r4, r1]
	lsl r0, r0, #2
	add r3, r2, #0
	mul r3, r0
	mov r0, #0xe1
	lsl r0, r0, #6
	cmp r3, r0
	bge _0208F8A8
	add r0, r2, #1
	str r0, [r4, r1]
	ldr r1, [r4, r1]
	add r0, r4, #0
	bl sub_0208FAF8
	pop {r3, r4, r5, pc}
_0208F8A8:
	mov r1, #0
	mov r0, #0x7c
	add r2, r1, #0
	bl sub_02037108
	pop {r3, r4, r5, pc}
	.balign 4, 0
_0208F8B4: .word 0x000043D0
_0208F8B8: .word 0x000043CC
	thumb_func_end sub_0208F828

	thumb_func_start sub_0208F8BC
sub_0208F8BC: ; 0x0208F8BC
	push {r3, r4}
	cmp r0, #0
	beq _0208F8DA
	add r4, r0, #0
	mov r1, #0xa
	mul r4, r1
	ldr r0, _0208F8E0 ; =0x000093BD
	add r3, r3, r4
	add r3, r3, r0
_0208F8CE:
	ldrb r0, [r2]
	add r2, r2, #1
	strb r0, [r3]
	add r3, r3, #1
	sub r1, r1, #1
	bne _0208F8CE
_0208F8DA:
	pop {r3, r4}
	bx lr
	nop
_0208F8E0: .word 0x000093BD
	thumb_func_end sub_0208F8BC

	thumb_func_start sub_0208F8E4
sub_0208F8E4: ; 0x0208F8E4
	push {r4, r5, r6, r7}
	cmp r3, #0
	beq _0208F90E
	cmp r0, #0
	bne _0208F90E
	ldr r0, _0208F914 ; =0x00004382
	mov r7, #0
_0208F8F2:
	add r6, r2, #0
	add r5, r3, r0
	mov r4, #0xa
_0208F8F8:
	ldrb r1, [r6]
	add r6, r6, #1
	strb r1, [r5]
	add r5, r5, #1
	sub r4, r4, #1
	bne _0208F8F8
	add r7, r7, #1
	add r2, #0xa
	add r3, #0xa
	cmp r7, #5
	blt _0208F8F2
_0208F90E:
	pop {r4, r5, r6, r7}
	bx lr
	nop
_0208F914: .word 0x00004382
	thumb_func_end sub_0208F8E4

	thumb_func_start sub_0208F918
sub_0208F918: ; 0x0208F918
	push {r4, lr}
	add r4, r3, #0
	add r0, r4, #0
	mov r1, #3
	mov r2, #0
	bl ov37_021E6FC8
	ldr r1, _0208F958 ; =0x000043D0
	mov r2, #0xe1
	mov r0, #0
	add r1, r4, r1
	lsl r2, r2, #6
	bl MIi_CpuClearFast
	bl sub_0203769C
	cmp r0, #0
	bne _0208F956
	bl sub_02037454
	mov r1, #0xc6
	lsl r1, r1, #2
	str r0, [r4, r1]
	bl sub_02033250
	mov r1, #0xc7
	lsl r1, r1, #2
	str r0, [r4, r1]
	ldr r0, _0208F95C ; =0x000093F4
	mov r1, #1
	str r1, [r4, r0]
_0208F956:
	pop {r4, pc}
	.balign 4, 0
_0208F958: .word 0x000043D0
_0208F95C: .word 0x000093F4
	thumb_func_end sub_0208F918

	thumb_func_start sub_0208F960
sub_0208F960: ; 0x0208F960
	push {r3, r4, r5, r6, lr}
	sub sp, #4
	add r6, r0, #0
	add r5, r2, #0
	add r4, r3, #0
	cmp r6, #0
	beq _0208F9FA
	bl sub_0203769C
	cmp r0, #0
	bne _0208FA44
	ldrb r0, [r5]
	add r1, sp, #0
	strb r0, [r1]
	ldrb r0, [r5, #1]
	strb r0, [r1, #1]
	ldrb r0, [r5, #2]
	strb r0, [r1, #2]
	ldrb r0, [r5, #3]
	strb r0, [r1, #3]
	mov r0, #0xc6
	strb r6, [r1]
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	strb r0, [r1, #1]
	ldrb r0, [r5, #2]
	cmp r0, #0
	beq _0208F99C
	cmp r0, #1
	b _0208F9EC
_0208F99C:
	bl sub_02037454
	mov r1, #0xc6
	lsl r1, r1, #2
	ldr r1, [r4, r1]
	cmp r1, r0
	bne _0208F9CA
	bl ov37_021E75E0
	mov r1, #0xc6
	lsl r1, r1, #2
	ldr r1, [r4, r1]
	cmp r1, r0
	bne _0208F9CA
	bl sub_02033250
	bl sub_020E3714
	mov r1, #0xc6
	lsl r1, r1, #2
	ldr r1, [r4, r1]
	cmp r1, r0
	beq _0208F9D2
_0208F9CA:
	mov r1, #0
	add r0, sp, #0
	strb r1, [r0, #3]
	b _0208F9EC
_0208F9D2:
	ldr r0, _0208FA48 ; =0x000093B4
	mov r1, #1
	add r2, r1, #0
	ldr r3, [r4, r0]
	lsl r2, r6
	orr r2, r3
	str r2, [r4, r0]
	add r0, sp, #0
	strb r1, [r0, #3]
	bl sub_02037454
	bl sub_02038C1C
_0208F9EC:
	mov r0, #0x7e
	add r1, sp, #0
	mov r2, #4
	bl sub_02037108
	add sp, #4
	pop {r3, r4, r5, r6, pc}
_0208F9FA:
	ldrb r0, [r5, #2]
	cmp r0, #0
	beq _0208FA08
	cmp r0, #1
	beq _0208FA3A
	add sp, #4
	pop {r3, r4, r5, r6, pc}
_0208FA08:
	ldrb r6, [r5]
	bl sub_0203769C
	cmp r6, r0
	bne _0208FA44
	ldrb r0, [r5, #3]
	cmp r0, #0
	bne _0208FA26
	add r0, r4, #0
	mov r1, #9
	add r2, r6, #0
	bl ov37_021E6FC8
	add sp, #4
	pop {r3, r4, r5, r6, pc}
_0208FA26:
	ldrb r1, [r5, #1]
	ldr r0, _0208FA4C ; =0x000093B8
	strh r1, [r4, r0]
	ldrb r2, [r5]
	add r0, r4, #0
	mov r1, #8
	bl ov37_021E6FC8
	add sp, #4
	pop {r3, r4, r5, r6, pc}
_0208FA3A:
	ldrb r2, [r5]
	add r0, r4, #0
	mov r1, #0x15
	bl ov37_021E6FC8
_0208FA44:
	add sp, #4
	pop {r3, r4, r5, r6, pc}
	.balign 4, 0
_0208FA48: .word 0x000093B4
_0208FA4C: .word 0x000093B8
	thumb_func_end sub_0208F960

	thumb_func_start sub_0208FA50
sub_0208FA50: ; 0x0208FA50
	bx lr
	.balign 4, 0
	thumb_func_end sub_0208FA50

	thumb_func_start sub_0208FA54
sub_0208FA54: ; 0x0208FA54
	push {r4, lr}
	ldrb r2, [r2]
	add r4, r3, #0
	add r0, r4, #0
	mov r1, #1
	bl ov37_021E6FC8
	bl sub_0203769C
	cmp r0, #0
	bne _0208FA82
	mov r0, #3
	lsl r0, r0, #8
	ldr r0, [r4, r0]
	cmp r0, #1
	bne _0208FA82
	ldr r1, _0208FA84 ; =0x000043CC
	mov r0, #0
	str r0, [r4, r1]
	ldr r1, [r4, r1]
	add r0, r4, #0
	bl sub_0208FAF8
_0208FA82:
	pop {r4, pc}
	.balign 4, 0
_0208FA84: .word 0x000043CC
	thumb_func_end sub_0208FA54

	thumb_func_start sub_0208FA88
sub_0208FA88: ; 0x0208FA88
	bx lr
	.balign 4, 0
	thumb_func_end sub_0208FA88

	thumb_func_start sub_0208FA8C
sub_0208FA8C: ; 0x0208FA8C
	bx lr
	.balign 4, 0
	thumb_func_end sub_0208FA8C

	thumb_func_start sub_0208FA90
sub_0208FA90: ; 0x0208FA90
	push {r4, lr}
	add r4, r3, #0
	bl sub_0203769C
	cmp r0, #0
	beq _0208FAA6
	add r0, r4, #0
	mov r1, #0xf
	mov r2, #0
	bl ov37_021E6FC8
_0208FAA6:
	pop {r4, pc}
	thumb_func_end sub_0208FA90

	thumb_func_start sub_0208FAA8
sub_0208FAA8: ; 0x0208FAA8
	push {r3, r4, r5, lr}
	add r5, r0, #0
	add r4, r3, #0
	bl sub_0203769C
	cmp r0, #0
	beq _0208FABA
	bl GF_AssertFail
_0208FABA:
	bl sub_0203769C
	cmp r0, #0
	bne _0208FADE
	ldr r0, _0208FAE8 ; =0x000093FC
	ldr r1, [r4, r0]
	cmp r1, #0
	beq _0208FADA
	add r0, sp, #0
	strb r5, [r0]
	mov r0, #0x7b
	add r1, sp, #0
	mov r2, #1
	bl sub_02037108
	b _0208FADE
_0208FADA:
	mov r1, #1
	str r1, [r4, r0]
_0208FADE:
	mov r0, #0
	mov r1, #1
	bl sub_020398D4
	pop {r3, r4, r5, pc}
	.balign 4, 0
_0208FAE8: .word 0x000093FC
	thumb_func_end sub_0208FAA8

	thumb_func_start sub_0208FAEC
sub_0208FAEC: ; 0x0208FAEC
	ldr r0, _0208FAF4 ; =0x000093F4
	mov r1, #1
	str r1, [r3, r0]
	bx lr
	.balign 4, 0
_0208FAF4: .word 0x000093F4
	thumb_func_end sub_0208FAEC

	thumb_func_start sub_0208FAF8
sub_0208FAF8: ; 0x0208FAF8
	push {r3, r4, r5, lr}
	add r5, r0, #0
	mov r0, #0xb5
	mov r2, #0xfa
	add r4, r1, #0
	lsl r0, r0, #2
	ldr r1, [r5, r0]
	lsl r2, r2, #2
	add r0, r4, #0
	mul r0, r2
	add r0, r1, r0
	ldr r1, _0208FB44 ; =0x00007C10
	add r1, r5, r1
	bl sub_020D48B4
	ldr r0, _0208FB44 ; =0x00007C10
	mov r2, #0
	add r1, r2, #0
	add r3, r5, r0
_0208FB1E:
	ldr r0, [r3]
	add r1, r1, #1
	eor r2, r0
	add r3, r3, #4
	cmp r1, #0xfa
	blt _0208FB1E
	ldr r0, _0208FB48 ; =0x00007FF8
	ldr r1, _0208FB44 ; =0x00007C10
	str r2, [r5, r0]
	add r0, r0, #4
	mov r2, #0x3f
	strb r4, [r5, r0]
	mov r0, #0x76
	add r1, r5, r1
	lsl r2, r2, #4
	bl sub_02037088
	pop {r3, r4, r5, pc}
	nop
_0208FB44: .word 0x00007C10
_0208FB48: .word 0x00007FF8
	thumb_func_end sub_0208FAF8

	thumb_func_start sub_0208FB4C
sub_0208FB4C: ; 0x0208FB4C
	mov r2, #2
	lsl r2, r2, #0xe
	add r2, r1, r2
	mov r1, #0x3f
	lsl r1, r1, #4
	mul r1, r0
	add r0, r2, r1
	bx lr
	thumb_func_end sub_0208FB4C

	thumb_func_start sub_0208FB5C
sub_0208FB5C: ; 0x0208FB5C
	mov r0, #4
	bx lr
	thumb_func_end sub_0208FB5C

	thumb_func_start sub_0208FB60
sub_0208FB60: ; 0x0208FB60
	mov r0, #4
	bx lr
	thumb_func_end sub_0208FB60

	thumb_func_start sub_0208FB64
sub_0208FB64: ; 0x0208FB64
	ldr r3, _0208FB70 ; =sub_0203410C
	add r2, r0, #0
	ldr r0, _0208FB74 ; =0x021059DC
	mov r1, #0x6e
	bx r3
	nop
_0208FB70: .word sub_0203410C
_0208FB74: .word 0x021059DC
	thumb_func_end sub_0208FB64

	thumb_func_start sub_0208FB78
sub_0208FB78: ; 0x0208FB78
	ldr r0, _0208FB84 ; =0x00004A08
	ldr r1, [r3, r0]
	add r1, r1, #1
	str r1, [r3, r0]
	bx lr
	nop
_0208FB84: .word 0x00004A08
	thumb_func_end sub_0208FB78

	thumb_func_start sub_0208FB88
sub_0208FB88: ; 0x0208FB88
	cmp r0, #0
	bne _0208FB92
	ldrb r1, [r2]
	ldr r0, _0208FB94 ; =0x00004A10
	str r1, [r3, r0]
_0208FB92:
	bx lr
	.balign 4, 0
_0208FB94: .word 0x00004A10
	thumb_func_end sub_0208FB88

	thumb_func_start sub_0208FB98
sub_0208FB98: ; 0x0208FB98
	push {r3, r4, r5, lr}
	add r5, r0, #0
	ldr r0, _0208FBD8 ; =0x00004A08
	add r4, r3, #0
	mov r1, #0
	str r1, [r4, r0]
	mov r1, #1
	add r0, #0xc
	strb r1, [r4, r0]
	bl sub_0203769C
	add r1, r0, #0
	add r0, r4, #0
	bl sub_0208FD3C
	add r0, r4, #0
	bl ov73_021E6B98
	lsl r2, r5, #0x18
	add r0, r4, #0
	mov r1, #0x19
	lsr r2, r2, #0x18
	bl ov73_021E705C
	mov r0, #1
	add r1, r0, #0
	bl sub_020398D4
	ldr r0, _0208FBDC ; =0x00000657
	bl PlaySE
	pop {r3, r4, r5, pc}
	.balign 4, 0
_0208FBD8: .word 0x00004A08
_0208FBDC: .word 0x00000657
	thumb_func_end sub_0208FB98

	thumb_func_start sub_0208FBE0
sub_0208FBE0: ; 0x0208FBE0
	add r0, r3, #0
	ldr r3, _0208FBEC ; =ov73_021E705C
	mov r1, #2
	mov r2, #0
	bx r3
	nop
_0208FBEC: .word ov73_021E705C
	thumb_func_end sub_0208FBE0

	thumb_func_start sub_0208FBF0
sub_0208FBF0: ; 0x0208FBF0
	push {r3, r4, r5, r6, lr}
	sub sp, #4
	add r6, r0, #0
	add r5, r2, #0
	add r4, r3, #0
	cmp r6, #0
	beq _0208FC86
	bl sub_0203769C
	cmp r0, #0
	bne _0208FCD0
	ldrb r0, [r5]
	add r1, sp, #0
	strb r0, [r1]
	ldrb r0, [r5, #1]
	strb r0, [r1, #1]
	ldrb r0, [r5, #2]
	strb r0, [r1, #2]
	ldrb r0, [r5, #3]
	strb r0, [r1, #3]
	ldr r0, _0208FCD4 ; =0x00004A1C
	strb r6, [r1]
	ldr r0, [r4, r0]
	strb r0, [r1, #1]
	ldrb r0, [r5, #2]
	cmp r0, #0
	beq _0208FC2A
	cmp r0, #1
	b _0208FC78
_0208FC2A:
	bl sub_02037454
	ldr r1, _0208FCD4 ; =0x00004A1C
	ldr r1, [r4, r1]
	cmp r1, r0
	bne _0208FC52
	bl ov73_021E7488
	ldr r1, _0208FCD4 ; =0x00004A1C
	ldr r1, [r4, r1]
	cmp r1, r0
	bne _0208FC52
	bl sub_02033250
	bl sub_020E3714
	ldr r1, _0208FCD4 ; =0x00004A1C
	ldr r2, [r4, r1]
	cmp r2, r0
	beq _0208FC5A
_0208FC52:
	mov r1, #0
	add r0, sp, #0
	strb r1, [r0, #3]
	b _0208FC78
_0208FC5A:
	add r0, r1, #0
	add r0, #8
	mov r2, #1
	ldr r3, [r4, r0]
	add r0, r2, #0
	lsl r0, r6
	orr r0, r3
	add r1, #8
	str r0, [r4, r1]
	add r0, sp, #0
	strb r2, [r0, #3]
	bl sub_02037454
	bl sub_02038C1C
_0208FC78:
	mov r0, #0x70
	add r1, sp, #0
	mov r2, #4
	bl sub_02037030
	add sp, #4
	pop {r3, r4, r5, r6, pc}
_0208FC86:
	ldrb r0, [r5, #2]
	cmp r0, #0
	beq _0208FC94
	cmp r0, #1
	beq _0208FCC6
	add sp, #4
	pop {r3, r4, r5, r6, pc}
_0208FC94:
	ldrb r6, [r5]
	bl sub_0203769C
	cmp r6, r0
	bne _0208FCD0
	ldrb r0, [r5, #3]
	cmp r0, #0
	bne _0208FCB2
	add r0, r4, #0
	mov r1, #8
	add r2, r6, #0
	bl ov73_021E705C
	add sp, #4
	pop {r3, r4, r5, r6, pc}
_0208FCB2:
	ldrb r1, [r5, #1]
	ldr r0, _0208FCD8 ; =0x00004A30
	strh r1, [r4, r0]
	ldrb r2, [r5]
	add r0, r4, #0
	mov r1, #7
	bl ov73_021E705C
	add sp, #4
	pop {r3, r4, r5, r6, pc}
_0208FCC6:
	ldrb r2, [r5]
	add r0, r4, #0
	mov r1, #0x13
	bl ov73_021E705C
_0208FCD0:
	add sp, #4
	pop {r3, r4, r5, r6, pc}
	.balign 4, 0
_0208FCD4: .word 0x00004A1C
_0208FCD8: .word 0x00004A30
	thumb_func_end sub_0208FBF0

	thumb_func_start sub_0208FCDC
sub_0208FCDC: ; 0x0208FCDC
	push {r4, lr}
	ldrb r2, [r2]
	add r4, r3, #0
	add r0, r4, #0
	mov r1, #1
	bl ov73_021E7120
	bl sub_0203769C
	cmp r0, #0
	bne _0208FCFA
	mov r0, #0xe1
	mov r1, #0
	lsl r0, r0, #2
	str r1, [r4, r0]
_0208FCFA:
	pop {r4, pc}
	thumb_func_end sub_0208FCDC

	thumb_func_start sub_0208FCFC
sub_0208FCFC: ; 0x0208FCFC
	bx lr
	.balign 4, 0
	thumb_func_end sub_0208FCFC

	thumb_func_start sub_0208FD00
sub_0208FD00: ; 0x0208FD00
	bx lr
	.balign 4, 0
	thumb_func_end sub_0208FD00

	thumb_func_start sub_0208FD04
sub_0208FD04: ; 0x0208FD04
	push {r4, lr}
	add r4, r3, #0
	bl sub_0203769C
	cmp r0, #0
	beq _0208FD1A
	add r0, r4, #0
	mov r1, #0xd
	mov r2, #0
	bl ov73_021E705C
_0208FD1A:
	pop {r4, pc}
	thumb_func_end sub_0208FD04

	thumb_func_start sub_0208FD1C
sub_0208FD1C: ; 0x0208FD1C
	push {r3, r4, lr}
	sub sp, #4
	add r4, r0, #0
	bl sub_0203769C
	cmp r0, #0
	bne _0208FD38
	add r0, sp, #0
	strb r4, [r0]
	mov r0, #0x6e
	add r1, sp, #0
	mov r2, #1
	bl sub_02037030
_0208FD38:
	add sp, #4
	pop {r3, r4, pc}
	thumb_func_end sub_0208FD1C

	thumb_func_start sub_0208FD3C
sub_0208FD3C: ; 0x0208FD3C
	push {r3, r4, r5, lr}
	add r4, r0, #0
	mov r0, #0xe2
	mov r3, #0
	lsl r0, r0, #2
	add r5, r4, r0
	add r2, r3, #0
	sub r0, #0x9a
_0208FD4C:
	ldr r1, [r5]
	add r2, r2, #1
	eor r3, r1
	add r5, r5, #4
	cmp r2, r0
	blt _0208FD4C
	mov r0, #0x3d
	lsl r0, r0, #6
	str r3, [r4, r0]
	bl LCRandom
	ldr r1, _0208FD78 ; =0x00000F44
	mov r2, #0x2f
	str r0, [r4, r1]
	mov r1, #0xe2
	lsl r1, r1, #2
	mov r0, #0x74
	add r1, r4, r1
	lsl r2, r2, #6
	bl sub_02036FD8
	pop {r3, r4, r5, pc}
	.balign 4, 0
_0208FD78: .word 0x00000F44
	thumb_func_end sub_0208FD3C

	thumb_func_start sub_0208FD7C
sub_0208FD7C: ; 0x0208FD7C
	mov r0, #0
	bx lr
	thumb_func_end sub_0208FD7C

	thumb_func_start sub_0208FD80
sub_0208FD80: ; 0x0208FD80
	mov r0, #1
	bx lr
	thumb_func_end sub_0208FD80

	thumb_func_start sub_0208FD84
sub_0208FD84: ; 0x0208FD84
	mov r0, #4
	bx lr
	thumb_func_end sub_0208FD84

	thumb_func_start sub_0208FD88
sub_0208FD88: ; 0x0208FD88
	ldr r2, _0208FD98 ; =0x00000F48
	add r2, r1, r2
	mov r1, #0x2f
	lsl r1, r1, #6
	mul r1, r0
	add r0, r2, r1
	bx lr
	nop
_0208FD98: .word 0x00000F48
	thumb_func_end sub_0208FD88

	thumb_func_start sub_0208FD9C
sub_0208FD9C: ; 0x0208FD9C
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x18
	str r1, [sp, #4]
	add r6, r0, #0
	add r7, r2, #0
	ldr r0, [sp, #4]
	mov r1, #0
	add r2, r3, #0
	bl sub_02077CE8
	mov r1, #0xe
	add r4, r0, #0
	bl sub_02077DAC
	cmp r0, #1
	beq _0208FDC8
	add r0, r4, #0
	bl FreeToHeap
	add sp, #0x18
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_0208FDC8:
	add r0, r6, #0
	mov r1, #0xa0
	mov r2, #0
	bl GetMonData
	add r5, r0, #0
	add r0, r4, #0
	mov r1, #0xf
	bl sub_02077DAC
	cmp r0, #0
	beq _0208FDF2
	mov r0, #7
	tst r0, r5
	beq _0208FDF2
	add r0, r4, #0
	bl FreeToHeap
	add sp, #0x18
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_0208FDF2:
	add r0, r4, #0
	mov r1, #0x10
	bl sub_02077DAC
	cmp r0, #0
	beq _0208FE10
	mov r0, #0x88
	tst r0, r5
	beq _0208FE10
	add r0, r4, #0
	bl FreeToHeap
	add sp, #0x18
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_0208FE10:
	add r0, r4, #0
	mov r1, #0x11
	bl sub_02077DAC
	cmp r0, #0
	beq _0208FE2E
	mov r0, #0x10
	tst r0, r5
	beq _0208FE2E
	add r0, r4, #0
	bl FreeToHeap
	add sp, #0x18
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_0208FE2E:
	add r0, r4, #0
	mov r1, #0x12
	bl sub_02077DAC
	cmp r0, #0
	beq _0208FE4C
	mov r0, #0x20
	tst r0, r5
	beq _0208FE4C
	add r0, r4, #0
	bl FreeToHeap
	add sp, #0x18
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_0208FE4C:
	add r0, r4, #0
	mov r1, #0x13
	bl sub_02077DAC
	cmp r0, #0
	beq _0208FE6A
	mov r0, #0x40
	tst r0, r5
	beq _0208FE6A
	add r0, r4, #0
	bl FreeToHeap
	add sp, #0x18
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_0208FE6A:
	add r0, r6, #0
	mov r1, #0xa3
	mov r2, #0
	bl GetMonData
	add r5, r0, #0
	add r0, r4, #0
	mov r1, #0x17
	bl sub_02077DAC
	cmp r0, #0
	bne _0208FE8E
	add r0, r4, #0
	mov r1, #0x18
	bl sub_02077DAC
	cmp r0, #0
	beq _0208FEAA
_0208FE8E:
	add r0, r4, #0
	mov r1, #0x19
	bl sub_02077DAC
	cmp r0, #0
	bne _0208FEAA
	cmp r5, #0
	bne _0208FED4
	add r0, r4, #0
	bl FreeToHeap
	add sp, #0x18
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_0208FEAA:
	add r0, r4, #0
	mov r1, #0x26
	bl sub_02077DAC
	cmp r0, #0
	beq _0208FED4
	cmp r5, #0
	beq _0208FED4
	add r0, r6, #0
	mov r1, #0xa4
	mov r2, #0
	bl GetMonData
	cmp r5, r0
	bhs _0208FED4
	add r0, r4, #0
	bl FreeToHeap
	add sp, #0x18
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_0208FED4:
	add r0, r4, #0
	mov r1, #0x19
	bl sub_02077DAC
	cmp r0, #0
	beq _0208FEFA
	add r0, r6, #0
	mov r1, #0xa1
	mov r2, #0
	bl GetMonData
	cmp r0, #0x64
	bhs _0208FEFA
	add r0, r4, #0
	bl FreeToHeap
	add sp, #0x18
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_0208FEFA:
	add r0, r4, #0
	mov r1, #0x1a
	bl sub_02077DAC
	cmp r0, #0
	beq _0208FF24
	mov r0, #0
	str r0, [sp]
	ldr r3, [sp, #4]
	add r1, r6, #0
	mov r2, #3
	bl sub_02070E34
	cmp r0, #0
	beq _0208FF24
	add r0, r4, #0
	bl FreeToHeap
	add sp, #0x18
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_0208FF24:
	add r0, r4, #0
	mov r1, #0x22
	bl sub_02077DAC
	cmp r0, #0
	bne _0208FF3C
	add r0, r4, #0
	mov r1, #0x23
	bl sub_02077DAC
	cmp r0, #0
	beq _0208FF72
_0208FF3C:
	add r1, r7, #0
	add r0, r6, #0
	add r1, #0x3e
	mov r2, #0
	bl GetMonData
	cmp r0, #3
	bhs _0208FF72
	add r1, r7, #0
	add r0, r6, #0
	add r1, #0x36
	mov r2, #0
	bl GetMonData
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	mov r1, #0
	bl sub_0207332C
	cmp r0, #5
	blo _0208FF72
	add r0, r4, #0
	bl FreeToHeap
	add sp, #0x18
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_0208FF72:
	add r0, r4, #0
	mov r1, #0x24
	bl sub_02077DAC
	cmp r0, #0
	beq _0208FF96
	add r0, r6, #0
	add r1, r7, #0
	bl sub_020908CC
	cmp r0, #1
	bne _0208FF96
	add r0, r4, #0
	bl FreeToHeap
	add sp, #0x18
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_0208FF96:
	add r0, r4, #0
	mov r1, #0x25
	bl sub_02077DAC
	cmp r0, #0
	beq _0208FFC2
	mov r5, #0
_0208FFA4:
	add r0, r6, #0
	add r1, r5, #0
	bl sub_020908CC
	cmp r0, #1
	bne _0208FFBC
	add r0, r4, #0
	bl FreeToHeap
	add sp, #0x18
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_0208FFBC:
	add r5, r5, #1
	cmp r5, #4
	blt _0208FFA4
_0208FFC2:
	add r0, r6, #0
	mov r1, #0xd
	mov r2, #0
	bl GetMonData
	add r5, r0, #0
	add r0, r6, #0
	mov r1, #0xe
	mov r2, #0
	bl GetMonData
	str r0, [sp, #0x14]
	add r0, r6, #0
	mov r1, #0xf
	mov r2, #0
	bl GetMonData
	str r0, [sp, #0x10]
	add r0, r6, #0
	mov r1, #0x10
	mov r2, #0
	bl GetMonData
	str r0, [sp, #0xc]
	add r0, r6, #0
	mov r1, #0x11
	mov r2, #0
	bl GetMonData
	str r0, [sp, #8]
	add r0, r6, #0
	mov r1, #0x12
	mov r2, #0
	bl GetMonData
	add r7, r0, #0
	add r0, r6, #0
	mov r1, #5
	mov r2, #0
	bl GetMonData
	mov r1, #0x49
	lsl r1, r1, #2
	cmp r0, r1
	beq _02090086
	add r0, r4, #0
	mov r1, #0x27
	bl sub_02077DAC
	cmp r0, #0
	beq _02090086
	add r0, r4, #0
	mov r1, #0x30
	bl sub_02077DAC
	cmp r0, #0
	ble _0209005C
	cmp r5, #0x64
	bge _02090086
	ldr r0, [sp, #0x14]
	add r1, r5, r0
	ldr r0, [sp, #0x10]
	add r1, r0, r1
	ldr r0, [sp, #0xc]
	add r1, r0, r1
	ldr r0, [sp, #8]
	add r0, r0, r1
	add r1, r7, r0
	ldr r0, _020902B4 ; =0x000001FE
	cmp r1, r0
	bge _02090086
	add r0, r4, #0
	bl FreeToHeap
	add sp, #0x18
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_0209005C:
	bge _02090086
	cmp r5, #0
	ble _0209006E
	add r0, r4, #0
	bl FreeToHeap
	add sp, #0x18
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_0209006E:
	add r0, r6, #0
	add r1, r4, #0
	bl sub_02090ADC
	cmp r0, #1
	bne _02090086
	add r0, r4, #0
	bl FreeToHeap
	add sp, #0x18
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_02090086:
	add r0, r4, #0
	mov r1, #0x28
	bl sub_02077DAC
	cmp r0, #0
	beq _020900F2
	add r0, r4, #0
	mov r1, #0x31
	bl sub_02077DAC
	cmp r0, #0
	ble _020900C6
	ldr r0, [sp, #0x14]
	cmp r0, #0x64
	bge _020900F2
	add r1, r5, r0
	ldr r0, [sp, #0x10]
	add r1, r0, r1
	ldr r0, [sp, #0xc]
	add r1, r0, r1
	ldr r0, [sp, #8]
	add r0, r0, r1
	add r1, r7, r0
	ldr r0, _020902B4 ; =0x000001FE
	cmp r1, r0
	bge _020900F2
	add r0, r4, #0
	bl FreeToHeap
	add sp, #0x18
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_020900C6:
	bge _020900F2
	ldr r0, [sp, #0x14]
	cmp r0, #0
	ble _020900DA
	add r0, r4, #0
	bl FreeToHeap
	add sp, #0x18
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_020900DA:
	add r0, r6, #0
	add r1, r4, #0
	bl sub_02090ADC
	cmp r0, #1
	bne _020900F2
	add r0, r4, #0
	bl FreeToHeap
	add sp, #0x18
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_020900F2:
	add r0, r4, #0
	mov r1, #0x29
	bl sub_02077DAC
	cmp r0, #0
	beq _02090160
	add r0, r4, #0
	mov r1, #0x32
	bl sub_02077DAC
	cmp r0, #0
	ble _02090134
	ldr r0, [sp, #0x10]
	cmp r0, #0x64
	bge _02090160
	ldr r0, [sp, #0x14]
	add r1, r5, r0
	ldr r0, [sp, #0x10]
	add r1, r0, r1
	ldr r0, [sp, #0xc]
	add r1, r0, r1
	ldr r0, [sp, #8]
	add r0, r0, r1
	add r1, r7, r0
	ldr r0, _020902B4 ; =0x000001FE
	cmp r1, r0
	bge _02090160
	add r0, r4, #0
	bl FreeToHeap
	add sp, #0x18
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_02090134:
	bge _02090160
	ldr r0, [sp, #0x10]
	cmp r0, #0
	ble _02090148
	add r0, r4, #0
	bl FreeToHeap
	add sp, #0x18
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_02090148:
	add r0, r6, #0
	add r1, r4, #0
	bl sub_02090ADC
	cmp r0, #1
	bne _02090160
	add r0, r4, #0
	bl FreeToHeap
	add sp, #0x18
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_02090160:
	add r0, r4, #0
	mov r1, #0x2a
	bl sub_02077DAC
	cmp r0, #0
	beq _020901CE
	add r0, r4, #0
	mov r1, #0x33
	bl sub_02077DAC
	cmp r0, #0
	ble _020901A2
	ldr r0, [sp, #0xc]
	cmp r0, #0x64
	bge _020901CE
	ldr r0, [sp, #0x14]
	add r1, r5, r0
	ldr r0, [sp, #0x10]
	add r1, r0, r1
	ldr r0, [sp, #0xc]
	add r1, r0, r1
	ldr r0, [sp, #8]
	add r0, r0, r1
	add r1, r7, r0
	ldr r0, _020902B4 ; =0x000001FE
	cmp r1, r0
	bge _020901CE
	add r0, r4, #0
	bl FreeToHeap
	add sp, #0x18
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_020901A2:
	bge _020901CE
	ldr r0, [sp, #0xc]
	cmp r0, #0
	ble _020901B6
	add r0, r4, #0
	bl FreeToHeap
	add sp, #0x18
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_020901B6:
	add r0, r6, #0
	add r1, r4, #0
	bl sub_02090ADC
	cmp r0, #1
	bne _020901CE
	add r0, r4, #0
	bl FreeToHeap
	add sp, #0x18
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_020901CE:
	add r0, r4, #0
	mov r1, #0x2b
	bl sub_02077DAC
	cmp r0, #0
	beq _0209023C
	add r0, r4, #0
	mov r1, #0x34
	bl sub_02077DAC
	cmp r0, #0
	ble _02090210
	ldr r0, [sp, #8]
	cmp r0, #0x64
	bge _0209023C
	ldr r0, [sp, #0x14]
	add r1, r5, r0
	ldr r0, [sp, #0x10]
	add r1, r0, r1
	ldr r0, [sp, #0xc]
	add r1, r0, r1
	ldr r0, [sp, #8]
	add r0, r0, r1
	add r1, r7, r0
	ldr r0, _020902B4 ; =0x000001FE
	cmp r1, r0
	bge _0209023C
	add r0, r4, #0
	bl FreeToHeap
	add sp, #0x18
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_02090210:
	bge _0209023C
	ldr r0, [sp, #8]
	cmp r0, #0
	ble _02090224
	add r0, r4, #0
	bl FreeToHeap
	add sp, #0x18
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_02090224:
	add r0, r6, #0
	add r1, r4, #0
	bl sub_02090ADC
	cmp r0, #1
	bne _0209023C
	add r0, r4, #0
	bl FreeToHeap
	add sp, #0x18
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_0209023C:
	add r0, r4, #0
	mov r1, #0x2c
	bl sub_02077DAC
	cmp r0, #0
	beq _020902A6
	add r0, r4, #0
	mov r1, #0x35
	bl sub_02077DAC
	cmp r0, #0
	ble _0209027C
	cmp r7, #0x64
	bge _020902A6
	ldr r0, [sp, #0x14]
	add r1, r5, r0
	ldr r0, [sp, #0x10]
	add r1, r0, r1
	ldr r0, [sp, #0xc]
	add r1, r0, r1
	ldr r0, [sp, #8]
	add r0, r0, r1
	add r1, r7, r0
	ldr r0, _020902B4 ; =0x000001FE
	cmp r1, r0
	bge _020902A6
	add r0, r4, #0
	bl FreeToHeap
	add sp, #0x18
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_0209027C:
	bge _020902A6
	cmp r7, #0
	ble _0209028E
	add r0, r4, #0
	bl FreeToHeap
	add sp, #0x18
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_0209028E:
	add r0, r6, #0
	add r1, r4, #0
	bl sub_02090ADC
	cmp r0, #1
	bne _020902A6
	add r0, r4, #0
	bl FreeToHeap
	add sp, #0x18
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_020902A6:
	add r0, r4, #0
	bl FreeToHeap
	mov r0, #0
	add sp, #0x18
	pop {r3, r4, r5, r6, r7, pc}
	nop
_020902B4: .word 0x000001FE
	thumb_func_end sub_0208FD9C

	thumb_func_start sub_020902B8
sub_020902B8: ; 0x020902B8
	push {r3, r4, r5, lr}
	add r5, r1, #0
	add r1, r2, #0
	add r4, r3, #0
	bl GetPartyMonByIndex
	ldr r3, [sp, #0x10]
	add r1, r5, #0
	add r2, r4, #0
	bl sub_0208FD9C
	pop {r3, r4, r5, pc}
	thumb_func_end sub_020902B8

	thumb_func_start sub_020902D0
sub_020902D0: ; 0x020902D0
	push {r4, r5, r6, r7, lr}
	sub sp, #0x74
	str r1, [sp, #4]
	add r5, r0, #0
	ldr r0, [sp, #0x88]
	str r2, [sp, #8]
	str r0, [sp, #0x88]
	str r3, [sp, #0xc]
	ldr r0, [sp, #4]
	ldr r2, [sp, #0x88]
	mov r1, #0
	bl sub_02077CE8
	mov r1, #0xe
	add r4, r0, #0
	bl sub_02077DAC
	cmp r0, #1
	beq _02090302
	add r0, r4, #0
	bl FreeToHeap
	add sp, #0x74
	mov r0, #0
	pop {r4, r5, r6, r7, pc}
_02090302:
	mov r6, #0
	add r0, r5, #0
	mov r1, #0xa0
	add r2, r6, #0
	add r7, r6, #0
	bl GetMonData
	str r0, [sp, #0x54]
	str r0, [sp, #0x58]
	add r0, r4, #0
	mov r1, #0xf
	bl sub_02077DAC
	cmp r0, #0
	beq _0209032A
	ldr r1, [sp, #0x58]
	mov r0, #7
	bic r1, r0
	str r1, [sp, #0x58]
	mov r7, #1
_0209032A:
	add r0, r4, #0
	mov r1, #0x10
	bl sub_02077DAC
	cmp r0, #0
	beq _02090340
	ldr r1, [sp, #0x58]
	ldr r0, _020904EC ; =0xFFFFF077
	mov r7, #1
	and r0, r1
	str r0, [sp, #0x58]
_02090340:
	add r0, r4, #0
	mov r1, #0x11
	bl sub_02077DAC
	cmp r0, #0
	beq _02090356
	ldr r1, [sp, #0x58]
	mov r0, #0x10
	bic r1, r0
	str r1, [sp, #0x58]
	mov r7, #1
_02090356:
	add r0, r4, #0
	mov r1, #0x12
	bl sub_02077DAC
	cmp r0, #0
	beq _0209036C
	ldr r1, [sp, #0x58]
	mov r0, #0x20
	bic r1, r0
	str r1, [sp, #0x58]
	mov r7, #1
_0209036C:
	add r0, r4, #0
	mov r1, #0x13
	bl sub_02077DAC
	cmp r0, #0
	beq _02090382
	ldr r1, [sp, #0x58]
	mov r0, #0x40
	bic r1, r0
	str r1, [sp, #0x58]
	mov r7, #1
_02090382:
	ldr r1, [sp, #0x54]
	ldr r0, [sp, #0x58]
	cmp r1, r0
	beq _02090396
	add r0, r5, #0
	mov r1, #0xa0
	add r2, sp, #0x58
	bl sub_0206EC40
	mov r6, #1
_02090396:
	add r0, r5, #0
	mov r1, #0xa3
	mov r2, #0
	bl GetMonData
	str r0, [sp, #0x54]
	add r0, r5, #0
	mov r1, #0xa4
	mov r2, #0
	bl GetMonData
	str r0, [sp, #0x58]
	add r0, r4, #0
	mov r1, #0x17
	bl sub_02077DAC
	cmp r0, #0
	bne _020903C6
	add r0, r4, #0
	mov r1, #0x18
	bl sub_02077DAC
	cmp r0, #0
	beq _020903F2
_020903C6:
	add r0, r4, #0
	mov r1, #0x19
	bl sub_02077DAC
	cmp r0, #0
	beq _020903F2
	ldr r0, [sp, #0x54]
	cmp r0, #0
	bne _020903EE
	add r0, r4, #0
	mov r1, #0x36
	bl sub_02077DAC
	add r3, r0, #0
	ldr r1, [sp, #0x54]
	ldr r2, [sp, #0x58]
	add r0, r5, #0
	bl sub_02090A44
	mov r6, #1
_020903EE:
	mov r7, #1
	b _0209041E
_020903F2:
	add r0, r4, #0
	mov r1, #0x26
	bl sub_02077DAC
	cmp r0, #0
	beq _0209041E
	ldr r1, [sp, #0x54]
	ldr r0, [sp, #0x58]
	cmp r1, r0
	bge _0209041C
	add r0, r4, #0
	mov r1, #0x36
	bl sub_02077DAC
	add r3, r0, #0
	ldr r1, [sp, #0x54]
	ldr r2, [sp, #0x58]
	add r0, r5, #0
	bl sub_02090A44
	mov r6, #1
_0209041C:
	mov r7, #1
_0209041E:
	add r0, r5, #0
	mov r1, #0xa1
	mov r2, #0
	bl GetMonData
	str r0, [sp, #0x5c]
	add r0, r4, #0
	mov r1, #0x19
	bl sub_02077DAC
	cmp r0, #0
	beq _02090476
	ldr r0, [sp, #0x5c]
	cmp r0, #0x64
	bge _02090474
	add r0, r5, #0
	bl sub_0206FCA0
	add r2, r0, #0
	add r0, r5, #0
	mov r1, #8
	bl sub_0206F558
	add r0, r5, #0
	bl sub_0206E250
	ldr r0, [sp, #0x54]
	cmp r0, #0
	bne _02090472
	add r0, r5, #0
	mov r1, #0xa4
	mov r2, #0
	bl GetMonData
	add r2, r0, #0
	ldr r3, [sp, #0x58]
	ldr r1, [sp, #0x54]
	add r0, r5, #0
	sub r3, r2, r3
	str r2, [sp, #0x60]
	bl sub_02090A44
_02090472:
	mov r6, #1
_02090474:
	mov r7, #1
_02090476:
	add r0, r4, #0
	mov r1, #0x1a
	bl sub_02077DAC
	cmp r0, #0
	beq _02090484
	mov r7, #1
_02090484:
	add r0, r4, #0
	mov r1, #0x22
	bl sub_02077DAC
	cmp r0, #0
	beq _020904A4
	ldr r1, [sp, #8]
	add r0, r5, #0
	mov r2, #1
	bl sub_0209099C
	cmp r0, #1
	bne _020904A0
	mov r6, #1
_020904A0:
	mov r7, #1
	b _020904C2
_020904A4:
	add r0, r4, #0
	mov r1, #0x23
	bl sub_02077DAC
	cmp r0, #0
	beq _020904C2
	ldr r1, [sp, #8]
	add r0, r5, #0
	mov r2, #3
	bl sub_0209099C
	cmp r0, #1
	bne _020904C0
	mov r6, #1
_020904C0:
	mov r7, #1
_020904C2:
	add r0, r4, #0
	mov r1, #0x24
	bl sub_02077DAC
	cmp r0, #0
	beq _020904F0
	add r0, r4, #0
	mov r1, #0x37
	bl sub_02077DAC
	add r2, r0, #0
	ldr r1, [sp, #8]
	add r0, r5, #0
	bl sub_0209091C
	cmp r0, #1
	bne _020904E6
	mov r6, #1
_020904E6:
	mov r7, #1
	b _0209052A
	nop
_020904EC: .word 0xFFFFF077
_020904F0:
	add r0, r4, #0
	mov r1, #0x25
	bl sub_02077DAC
	cmp r0, #0
	beq _0209052A
	mov r0, #0
	str r0, [sp, #0x54]
	cmp r0, #4
	bge _02090528
	mov r7, #0x37
_02090506:
	add r0, r4, #0
	add r1, r7, #0
	bl sub_02077DAC
	add r2, r0, #0
	ldr r1, [sp, #0x54]
	add r0, r5, #0
	bl sub_0209091C
	cmp r0, #1
	bne _0209051E
	mov r6, #1
_0209051E:
	ldr r0, [sp, #0x54]
	add r0, r0, #1
	str r0, [sp, #0x54]
	cmp r0, #4
	blt _02090506
_02090528:
	mov r7, #1
_0209052A:
	add r0, r5, #0
	mov r1, #0xd
	mov r2, #0
	bl GetMonData
	str r0, [sp, #0x54]
	add r0, r5, #0
	mov r1, #0xe
	mov r2, #0
	bl GetMonData
	str r0, [sp, #0x58]
	add r0, r5, #0
	mov r1, #0xf
	mov r2, #0
	bl GetMonData
	str r0, [sp, #0x5c]
	add r0, r5, #0
	mov r1, #0x10
	mov r2, #0
	bl GetMonData
	str r0, [sp, #0x60]
	add r0, r5, #0
	mov r1, #0x11
	mov r2, #0
	bl GetMonData
	str r0, [sp, #0x64]
	add r0, r5, #0
	mov r1, #0x12
	mov r2, #0
	bl GetMonData
	str r0, [sp, #0x68]
	add r0, r5, #0
	mov r1, #5
	mov r2, #0
	bl GetMonData
	mov r1, #0x49
	lsl r1, r1, #2
	cmp r0, r1
	beq _020905E4
	add r0, r4, #0
	mov r1, #0x27
	bl sub_02077DAC
	cmp r0, #0
	beq _020905E4
	add r0, r4, #0
	mov r1, #0x30
	bl sub_02077DAC
	ldr r1, [sp, #0x64]
	ldr r2, [sp, #0x58]
	str r1, [sp, #0x14]
	ldr r1, [sp, #0x60]
	str r0, [sp, #0x10]
	str r1, [sp, #0x18]
	ldr r1, [sp, #0x5c]
	str r0, [sp, #0x70]
	add r2, r2, r1
	ldr r1, [sp, #0x18]
	ldr r3, [sp, #0x68]
	add r2, r1, r2
	ldr r1, [sp, #0x14]
	ldr r0, [sp, #0x54]
	add r1, r1, r2
	ldr r2, [sp, #0x10]
	add r1, r3, r1
	bl sub_02090A84
	mov r1, #0
	mvn r1, r1
	str r0, [sp, #0x6c]
	cmp r0, r1
	beq _020905DC
	str r0, [sp, #0x54]
	add r0, r5, #0
	mov r1, #0xd
	add r2, sp, #0x54
	bl sub_0206EC40
	add r0, r5, #0
	bl sub_0206E250
	mov r6, #1
_020905DC:
	ldr r0, [sp, #0x70]
	cmp r0, #0
	ble _020905E4
	mov r7, #1
_020905E4:
	add r0, r4, #0
	mov r1, #0x28
	bl sub_02077DAC
	cmp r0, #0
	beq _02090644
	add r0, r4, #0
	mov r1, #0x31
	bl sub_02077DAC
	ldr r1, [sp, #0x64]
	ldr r2, [sp, #0x54]
	str r1, [sp, #0x20]
	ldr r1, [sp, #0x60]
	str r0, [sp, #0x1c]
	str r1, [sp, #0x24]
	ldr r1, [sp, #0x5c]
	str r0, [sp, #0x70]
	add r2, r2, r1
	ldr r1, [sp, #0x24]
	ldr r3, [sp, #0x68]
	add r2, r1, r2
	ldr r1, [sp, #0x20]
	ldr r0, [sp, #0x58]
	add r1, r1, r2
	ldr r2, [sp, #0x1c]
	add r1, r3, r1
	bl sub_02090A84
	mov r1, #0
	mvn r1, r1
	str r0, [sp, #0x6c]
	cmp r0, r1
	beq _0209063C
	str r0, [sp, #0x58]
	add r0, r5, #0
	mov r1, #0xe
	add r2, sp, #0x58
	bl sub_0206EC40
	add r0, r5, #0
	bl sub_0206E250
	mov r6, #1
_0209063C:
	ldr r0, [sp, #0x70]
	cmp r0, #0
	ble _02090644
	mov r7, #1
_02090644:
	add r0, r4, #0
	mov r1, #0x29
	bl sub_02077DAC
	cmp r0, #0
	beq _020906A4
	add r0, r4, #0
	mov r1, #0x32
	bl sub_02077DAC
	ldr r1, [sp, #0x64]
	ldr r2, [sp, #0x54]
	str r1, [sp, #0x2c]
	ldr r1, [sp, #0x60]
	str r0, [sp, #0x28]
	str r1, [sp, #0x30]
	ldr r1, [sp, #0x58]
	str r0, [sp, #0x70]
	add r2, r2, r1
	ldr r1, [sp, #0x30]
	ldr r3, [sp, #0x68]
	add r2, r1, r2
	ldr r1, [sp, #0x2c]
	ldr r0, [sp, #0x5c]
	add r1, r1, r2
	ldr r2, [sp, #0x28]
	add r1, r3, r1
	bl sub_02090A84
	mov r1, #0
	mvn r1, r1
	str r0, [sp, #0x6c]
	cmp r0, r1
	beq _0209069C
	str r0, [sp, #0x5c]
	add r0, r5, #0
	mov r1, #0xf
	add r2, sp, #0x5c
	bl sub_0206EC40
	add r0, r5, #0
	bl sub_0206E250
	mov r6, #1
_0209069C:
	ldr r0, [sp, #0x70]
	cmp r0, #0
	ble _020906A4
	mov r7, #1
_020906A4:
	add r0, r4, #0
	mov r1, #0x2a
	bl sub_02077DAC
	cmp r0, #0
	beq _02090704
	add r0, r4, #0
	mov r1, #0x33
	bl sub_02077DAC
	ldr r1, [sp, #0x64]
	ldr r2, [sp, #0x54]
	str r1, [sp, #0x38]
	ldr r1, [sp, #0x5c]
	str r0, [sp, #0x34]
	str r1, [sp, #0x3c]
	ldr r1, [sp, #0x58]
	str r0, [sp, #0x70]
	add r2, r2, r1
	ldr r1, [sp, #0x3c]
	ldr r3, [sp, #0x68]
	add r2, r1, r2
	ldr r1, [sp, #0x38]
	ldr r0, [sp, #0x60]
	add r1, r1, r2
	ldr r2, [sp, #0x34]
	add r1, r3, r1
	bl sub_02090A84
	mov r1, #0
	mvn r1, r1
	str r0, [sp, #0x6c]
	cmp r0, r1
	beq _020906FC
	str r0, [sp, #0x60]
	add r0, r5, #0
	mov r1, #0x10
	add r2, sp, #0x60
	bl sub_0206EC40
	add r0, r5, #0
	bl sub_0206E250
	mov r6, #1
_020906FC:
	ldr r0, [sp, #0x70]
	cmp r0, #0
	ble _02090704
	mov r7, #1
_02090704:
	add r0, r4, #0
	mov r1, #0x2b
	bl sub_02077DAC
	cmp r0, #0
	beq _02090764
	add r0, r4, #0
	mov r1, #0x34
	bl sub_02077DAC
	ldr r1, [sp, #0x60]
	ldr r2, [sp, #0x54]
	str r1, [sp, #0x44]
	ldr r1, [sp, #0x5c]
	str r0, [sp, #0x40]
	str r1, [sp, #0x48]
	ldr r1, [sp, #0x58]
	str r0, [sp, #0x70]
	add r2, r2, r1
	ldr r1, [sp, #0x48]
	ldr r3, [sp, #0x68]
	add r2, r1, r2
	ldr r1, [sp, #0x44]
	ldr r0, [sp, #0x64]
	add r1, r1, r2
	ldr r2, [sp, #0x40]
	add r1, r3, r1
	bl sub_02090A84
	mov r1, #0
	mvn r1, r1
	str r0, [sp, #0x6c]
	cmp r0, r1
	beq _0209075C
	str r0, [sp, #0x64]
	add r0, r5, #0
	mov r1, #0x11
	add r2, sp, #0x64
	bl sub_0206EC40
	add r0, r5, #0
	bl sub_0206E250
	mov r6, #1
_0209075C:
	ldr r0, [sp, #0x70]
	cmp r0, #0
	ble _02090764
	mov r7, #1
_02090764:
	add r0, r4, #0
	mov r1, #0x2c
	bl sub_02077DAC
	cmp r0, #0
	beq _020907C4
	add r0, r4, #0
	mov r1, #0x35
	bl sub_02077DAC
	ldr r1, [sp, #0x60]
	ldr r2, [sp, #0x54]
	str r1, [sp, #0x50]
	ldr r1, [sp, #0x5c]
	str r0, [sp, #0x4c]
	mov ip, r1
	ldr r1, [sp, #0x58]
	str r0, [sp, #0x70]
	add r1, r2, r1
	mov r2, ip
	add r2, r2, r1
	ldr r1, [sp, #0x50]
	ldr r3, [sp, #0x64]
	add r1, r1, r2
	ldr r0, [sp, #0x68]
	ldr r2, [sp, #0x4c]
	add r1, r3, r1
	bl sub_02090A84
	mov r1, #0
	mvn r1, r1
	str r0, [sp, #0x6c]
	cmp r0, r1
	beq _020907BC
	str r0, [sp, #0x68]
	add r0, r5, #0
	mov r1, #0x12
	add r2, sp, #0x68
	bl sub_0206EC40
	add r0, r5, #0
	bl sub_0206E250
	mov r6, #1
_020907BC:
	ldr r0, [sp, #0x70]
	cmp r0, #0
	ble _020907C4
	mov r7, #1
_020907C4:
	cmp r6, #0
	bne _020907D8
	cmp r7, #1
	bne _020907D8
	add r0, r4, #0
	bl FreeToHeap
	add sp, #0x74
	mov r0, #0
	pop {r4, r5, r6, r7, pc}
_020907D8:
	add r0, r5, #0
	mov r1, #9
	mov r2, #0
	bl GetMonData
	str r0, [sp, #0x54]
	cmp r0, #0x64
	bge _02090820
	add r0, r4, #0
	mov r1, #0x2d
	bl sub_02077DAC
	cmp r0, #0
	beq _0209089E
	ldr r1, [sp, #4]
	add r0, r5, #0
	bl sub_02097EF4
	add r0, r4, #0
	mov r1, #0x38
	bl sub_02077DAC
	add r2, r0, #0
	ldr r0, [sp, #0x88]
	str r0, [sp]
	ldr r1, [sp, #0x54]
	ldr r3, [sp, #0xc]
	add r0, r5, #0
	bl sub_02090B68
	add r0, r4, #0
	bl FreeToHeap
	add sp, #0x74
	add r0, r6, #0
	pop {r4, r5, r6, r7, pc}
_02090820:
	blt _0209085E
	cmp r0, #0xc8
	bge _0209085E
	add r0, r4, #0
	mov r1, #0x2e
	bl sub_02077DAC
	cmp r0, #0
	beq _0209089E
	ldr r1, [sp, #4]
	add r0, r5, #0
	bl sub_02097EF4
	add r0, r4, #0
	mov r1, #0x39
	bl sub_02077DAC
	add r2, r0, #0
	ldr r0, [sp, #0x88]
	str r0, [sp]
	ldr r1, [sp, #0x54]
	ldr r3, [sp, #0xc]
	add r0, r5, #0
	bl sub_02090B68
	add r0, r4, #0
	bl FreeToHeap
	add sp, #0x74
	add r0, r6, #0
	pop {r4, r5, r6, r7, pc}
_0209085E:
	cmp r0, #0xc8
	blt _0209089E
	cmp r0, #0xff
	bgt _0209089E
	add r0, r4, #0
	mov r1, #0x2f
	bl sub_02077DAC
	cmp r0, #0
	beq _0209089E
	ldr r1, [sp, #4]
	add r0, r5, #0
	bl sub_02097EF4
	add r0, r4, #0
	mov r1, #0x3a
	bl sub_02077DAC
	add r2, r0, #0
	ldr r0, [sp, #0x88]
	str r0, [sp]
	ldr r1, [sp, #0x54]
	ldr r3, [sp, #0xc]
	add r0, r5, #0
	bl sub_02090B68
	add r0, r4, #0
	bl FreeToHeap
	add sp, #0x74
	add r0, r6, #0
	pop {r4, r5, r6, r7, pc}
_0209089E:
	add r0, r4, #0
	bl FreeToHeap
	add r0, r6, #0
	add sp, #0x74
	pop {r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_020902D0

	thumb_func_start sub_020908AC
sub_020908AC: ; 0x020908AC
	push {r3, r4, r5, lr}
	add r5, r1, #0
	add r1, r2, #0
	add r4, r3, #0
	bl GetPartyMonByIndex
	ldr r1, [sp, #0x14]
	add r3, sp, #0
	str r1, [sp]
	ldrh r3, [r3, #0x10]
	add r1, r5, #0
	add r2, r4, #0
	bl sub_020902D0
	pop {r3, r4, r5, pc}
	.balign 4, 0
	thumb_func_end sub_020908AC

	thumb_func_start sub_020908CC
sub_020908CC: ; 0x020908CC
	push {r3, r4, r5, r6, r7, lr}
	add r6, r1, #0
	add r1, #0x36
	mov r2, #0
	add r5, r0, #0
	bl GetMonData
	lsl r0, r0, #0x10
	lsr r7, r0, #0x10
	bne _020908E4
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_020908E4:
	add r1, r6, #0
	add r0, r5, #0
	add r1, #0x3a
	mov r2, #0
	bl GetMonData
	lsl r0, r0, #0x18
	add r6, #0x3e
	lsr r4, r0, #0x18
	add r0, r5, #0
	add r1, r6, #0
	mov r2, #0
	bl GetMonData
	lsl r0, r0, #0x18
	lsr r1, r0, #0x18
	add r0, r7, #0
	bl sub_0207332C
	cmp r4, r0
	bhs _02090912
	mov r0, #1
	b _02090914
_02090912:
	mov r0, #0
_02090914:
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_020908CC

	thumb_func_start sub_0209091C
sub_0209091C: ; 0x0209091C
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #8
	add r5, r1, #0
	add r4, r2, #0
	add r1, #0x36
	mov r2, #0
	add r6, r0, #0
	bl GetMonData
	lsl r0, r0, #0x10
	lsr r7, r0, #0x10
	bne _0209093A
	add sp, #8
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_0209093A:
	add r0, r5, #0
	str r0, [sp]
	add r0, #0x3a
	str r0, [sp]
	ldr r1, [sp]
	add r0, r6, #0
	mov r2, #0
	bl GetMonData
	add r1, sp, #4
	strb r0, [r1]
	add r5, #0x3e
	add r0, r6, #0
	add r1, r5, #0
	mov r2, #0
	bl GetMonData
	add r1, r0, #0
	lsl r1, r1, #0x18
	add r0, r7, #0
	lsr r1, r1, #0x18
	bl sub_0207332C
	add r1, sp, #4
	ldrb r2, [r1]
	cmp r2, r0
	bhs _02090994
	cmp r4, #0x7f
	bne _02090978
	strb r0, [r1]
	b _02090984
_02090978:
	add r2, r2, r4
	strb r2, [r1]
	ldrb r2, [r1]
	cmp r2, r0
	bls _02090984
	strb r0, [r1]
_02090984:
	ldr r1, [sp]
	add r0, r6, #0
	add r2, sp, #4
	bl sub_0206EC40
	add sp, #8
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_02090994:
	mov r0, #0
	add sp, #8
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_0209091C

	thumb_func_start sub_0209099C
sub_0209099C: ; 0x0209099C
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	add r6, r2, #0
	add r4, r1, #0
	str r1, [sp]
	add r1, #0x3e
	mov r2, #0
	add r5, r0, #0
	str r1, [sp]
	bl GetMonData
	add r1, sp, #8
	strb r0, [r1]
	ldrb r0, [r1]
	cmp r0, #3
	bne _020909C2
	add sp, #0xc
	mov r0, #0
	pop {r4, r5, r6, r7, pc}
_020909C2:
	add r1, r4, #0
	add r0, r5, #0
	add r1, #0x36
	mov r2, #0
	bl GetMonData
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	mov r1, #0
	str r0, [sp, #4]
	bl sub_0207332C
	cmp r0, #5
	bhs _020909E4
	add sp, #0xc
	mov r0, #0
	pop {r4, r5, r6, r7, pc}
_020909E4:
	add r4, #0x3a
	add r0, r5, #0
	add r1, r4, #0
	mov r2, #0
	bl GetMonData
	add r1, sp, #8
	strb r0, [r1, #1]
	ldrb r1, [r1]
	ldr r0, [sp, #4]
	bl sub_0207332C
	add r7, r0, #0
	add r0, sp, #8
	ldrb r0, [r0]
	add r0, r0, r6
	cmp r0, #3
	bls _02090A0C
	mov r0, #3
	b _02090A10
_02090A0C:
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
_02090A10:
	add r1, sp, #8
	strb r0, [r1]
	ldrb r1, [r1]
	ldr r0, [sp, #4]
	bl sub_0207332C
	add r1, sp, #8
	ldrb r2, [r1, #1]
	add r0, r2, r0
	sub r0, r0, r7
	strb r0, [r1, #1]
	ldr r1, [sp]
	add r0, r5, #0
	add r2, sp, #8
	bl sub_0206EC40
	add r2, sp, #8
	add r0, r5, #0
	add r1, r4, #0
	add r2, #1
	bl sub_0206EC40
	mov r0, #1
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_0209099C

	thumb_func_start sub_02090A44
sub_02090A44: ; 0x02090A44
	push {r0, r1, r2, r3}
	push {r3, lr}
	cmp r2, #1
	bne _02090A50
	mov r3, #1
	b _02090A66
_02090A50:
	cmp r3, #0xff
	bne _02090A58
	add r3, r2, #0
	b _02090A66
_02090A58:
	cmp r3, #0xfe
	bne _02090A60
	lsr r3, r2, #1
	b _02090A66
_02090A60:
	cmp r3, #0xfd
	bne _02090A66
	lsr r3, r2, #2
_02090A66:
	ldr r1, [sp, #0xc]
	add r1, r1, r3
	cmp r1, r2
	bls _02090A72
	str r2, [sp, #0xc]
	b _02090A74
_02090A72:
	str r1, [sp, #0xc]
_02090A74:
	mov r1, #0xa3
	add r2, sp, #0xc
	bl sub_0206EC40
	pop {r3}
	pop {r3}
	add sp, #0x10
	bx r3
	thumb_func_end sub_02090A44

	thumb_func_start sub_02090A84
sub_02090A84: ; 0x02090A84
	push {r3, r4}
	cmp r0, #0
	bne _02090A96
	cmp r2, #0
	bge _02090A96
	mov r0, #0
	mvn r0, r0
	pop {r3, r4}
	bx lr
_02090A96:
	cmp r0, #0x64
	blt _02090AA6
	cmp r2, #0
	ble _02090AA6
	mov r0, #0
	mvn r0, r0
	pop {r3, r4}
	bx lr
_02090AA6:
	ldr r3, _02090AD8 ; =0x000001FE
	add r4, r0, r1
	cmp r4, r3
	blt _02090ABA
	cmp r2, #0
	ble _02090ABA
	mov r0, #0
	mvn r0, r0
	pop {r3, r4}
	bx lr
_02090ABA:
	add r0, r0, r2
	cmp r0, #0x64
	ble _02090AC4
	mov r0, #0x64
	b _02090ACA
_02090AC4:
	cmp r0, #0
	bge _02090ACA
	mov r0, #0
_02090ACA:
	ldr r2, _02090AD8 ; =0x000001FE
	add r3, r0, r1
	cmp r3, r2
	ble _02090AD4
	sub r0, r2, r1
_02090AD4:
	pop {r3, r4}
	bx lr
	.balign 4, 0
_02090AD8: .word 0x000001FE
	thumb_func_end sub_02090A84

	thumb_func_start sub_02090ADC
sub_02090ADC: ; 0x02090ADC
	push {r4, lr}
	add r4, r1, #0
	mov r1, #9
	mov r2, #0
	bl GetMonData
	cmp r0, #0xff
	blt _02090AF0
	mov r0, #0
	pop {r4, pc}
_02090AF0:
	cmp r0, #0x64
	bge _02090B14
	add r0, r4, #0
	mov r1, #0x2d
	bl sub_02077DAC
	cmp r0, #0
	beq _02090B10
	add r0, r4, #0
	mov r1, #0x38
	bl sub_02077DAC
	cmp r0, #0
	ble _02090B10
	mov r0, #1
	pop {r4, pc}
_02090B10:
	mov r0, #0
	pop {r4, pc}
_02090B14:
	blt _02090B3A
	cmp r0, #0xc8
	bge _02090B3A
	add r0, r4, #0
	mov r1, #0x2e
	bl sub_02077DAC
	cmp r0, #0
	beq _02090B36
	add r0, r4, #0
	mov r1, #0x39
	bl sub_02077DAC
	cmp r0, #0
	ble _02090B36
	mov r0, #1
	pop {r4, pc}
_02090B36:
	mov r0, #0
	pop {r4, pc}
_02090B3A:
	cmp r0, #0xc8
	blt _02090B62
	cmp r0, #0xff
	bge _02090B62
	add r0, r4, #0
	mov r1, #0x2f
	bl sub_02077DAC
	cmp r0, #0
	beq _02090B5E
	add r0, r4, #0
	mov r1, #0x3a
	bl sub_02077DAC
	cmp r0, #0
	ble _02090B5E
	mov r0, #1
	pop {r4, pc}
_02090B5E:
	mov r0, #0
	pop {r4, pc}
_02090B62:
	mov r0, #0
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_02090ADC

	thumb_func_start sub_02090B68
sub_02090B68: ; 0x02090B68
	push {r0, r1, r2, r3}
	push {r4, r5, r6, lr}
	add r4, r1, #0
	add r5, r0, #0
	add r6, r3, #0
	cmp r4, #0xff
	bne _02090B86
	ldr r0, [sp, #0x18]
	cmp r0, #0
	ble _02090B86
	mov r0, #0
	pop {r4, r5, r6}
	pop {r3}
	add sp, #0x10
	bx r3
_02090B86:
	cmp r4, #0
	bne _02090B9A
	ldr r0, [sp, #0x18]
	cmp r0, #0
	bge _02090B9A
	mov r0, #0
	pop {r4, r5, r6}
	pop {r3}
	add sp, #0x10
	bx r3
_02090B9A:
	ldr r0, [sp, #0x18]
	cmp r0, #0
	ble _02090BF0
	add r0, r5, #0
	mov r1, #0x9b
	mov r2, #0
	bl GetMonData
	cmp r0, #0xb
	bne _02090BB4
	ldr r0, [sp, #0x18]
	add r0, r0, #1
	str r0, [sp, #0x18]
_02090BB4:
	add r0, r5, #0
	mov r1, #0x98
	mov r2, #0
	bl GetMonData
	cmp r6, r0
	bne _02090BC8
	ldr r0, [sp, #0x18]
	add r0, r0, #1
	str r0, [sp, #0x18]
_02090BC8:
	add r0, r5, #0
	mov r1, #6
	mov r2, #0
	bl GetMonData
	lsl r0, r0, #0x10
	ldr r2, [sp, #0x20]
	lsr r0, r0, #0x10
	mov r1, #1
	bl sub_02077D88
	cmp r0, #0x35
	bne _02090BF0
	ldr r1, [sp, #0x18]
	mov r0, #0x96
	mul r0, r1
	mov r1, #0x64
	bl _s32_div_f
	str r0, [sp, #0x18]
_02090BF0:
	ldr r0, [sp, #0x18]
	add r0, r0, r4
	str r0, [sp, #0x18]
	cmp r0, #0xff
	ble _02090BFE
	mov r0, #0xff
	str r0, [sp, #0x18]
_02090BFE:
	ldr r0, [sp, #0x18]
	cmp r0, #0
	bge _02090C08
	mov r0, #0
	str r0, [sp, #0x18]
_02090C08:
	add r0, r5, #0
	mov r1, #9
	add r2, sp, #0x18
	bl sub_0206EC40
	mov r0, #1
	pop {r4, r5, r6}
	pop {r3}
	add sp, #0x10
	bx r3
	thumb_func_end sub_02090B68

	thumb_func_start sub_02090C1C
sub_02090C1C: ; 0x02090C1C
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	str r0, [sp]
	bl GetPartyCount
	mov r7, #0
	str r0, [sp, #4]
	cmp r0, #0
	ble _02090C90
	mov r6, #0x7f
_02090C30:
	ldr r0, [sp]
	add r1, r7, #0
	bl GetPartyMonByIndex
	mov r1, #0xac
	mov r2, #0
	add r5, r0, #0
	bl GetMonData
	cmp r0, #0
	beq _02090C88
	add r0, r5, #0
	mov r1, #0xa4
	mov r2, #0
	bl GetMonData
	str r0, [sp, #8]
	add r0, r5, #0
	mov r1, #0xa3
	add r2, sp, #8
	bl sub_0206EC40
	mov r0, #0
	str r0, [sp, #8]
	add r0, r5, #0
	mov r1, #0xa0
	add r2, sp, #8
	bl sub_0206EC40
	mov r4, #0
_02090C6C:
	add r0, r5, #0
	add r1, r4, #0
	bl sub_020908CC
	cmp r0, #1
	bne _02090C82
	add r0, r5, #0
	add r1, r4, #0
	add r2, r6, #0
	bl sub_0209091C
_02090C82:
	add r4, r4, #1
	cmp r4, #4
	blt _02090C6C
_02090C88:
	ldr r0, [sp, #4]
	add r7, r7, #1
	cmp r7, r0
	blt _02090C30
_02090C90:
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
	thumb_func_end sub_02090C1C

	thumb_func_start sub_02090C94
sub_02090C94: ; 0x02090C94
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	add r7, r1, #0
	ldr r0, [sp, #0x18]
	mov r1, #0x28
	add r6, r2, #0
	str r3, [sp]
	bl AllocFromHeap
	add r4, r0, #0
	strb r5, [r4]
	strb r7, [r4, #1]
	add r0, r6, #0
	bl Sav2_Pokedex_get
	str r0, [r4, #0xc]
	add r0, r6, #0
	bl sub_02015C28
	str r0, [r4, #0x10]
	add r0, r6, #0
	bl SavArray_Flags_get
	bl sub_02066614
	strb r0, [r4, #4]
	mov r1, #0
	strb r1, [r4, #5]
	mov r0, #1
	strb r0, [r4, #2]
	strb r1, [r4, #3]
	add r0, r6, #0
	bl Sav2_PlayerData_GetOptionsAddr
	bl sub_0202ADCC
	str r0, [r4, #8]
	ldr r0, [sp]
	cmp r5, #2
	str r0, [r4, #0x24]
	bne _02090CF2
	add r0, r4, #0
	add r0, #0x14
	mov r1, #3
	bl MailMsg_init_withBank
	b _02090D02
_02090CF2:
	ldr r0, _02090D08 ; =0x0000FFFF
	mov r1, #0
	add r2, r4, #0
_02090CF8:
	add r1, r1, #1
	strh r0, [r2, #0x1c]
	add r2, r2, #2
	cmp r1, #2
	blt _02090CF8
_02090D02:
	add r0, r4, #0
	pop {r3, r4, r5, r6, r7, pc}
	nop
_02090D08: .word 0x0000FFFF
	thumb_func_end sub_02090C94

	thumb_func_start sub_02090D0C
sub_02090D0C: ; 0x02090D0C
	ldr r3, _02090D10 ; =FreeToHeap
	bx r3
	.balign 4, 0
_02090D10: .word FreeToHeap
	thumb_func_end sub_02090D0C

	thumb_func_start sub_02090D14
sub_02090D14: ; 0x02090D14
	strh r1, [r0, #0x1c]
	bx lr
	thumb_func_end sub_02090D14

	thumb_func_start sub_02090D18
sub_02090D18: ; 0x02090D18
	strh r1, [r0, #0x1c]
	strh r2, [r0, #0x1e]
	bx lr
	.balign 4, 0
	thumb_func_end sub_02090D18

	thumb_func_start sub_02090D20
sub_02090D20: ; 0x02090D20
	ldrh r2, [r1]
	strh r2, [r0, #0x14]
	ldrh r2, [r1, #2]
	strh r2, [r0, #0x16]
	ldrh r2, [r1, #4]
	strh r2, [r0, #0x18]
	ldrh r1, [r1, #6]
	strh r1, [r0, #0x1a]
	bx lr
	.balign 4, 0
	thumb_func_end sub_02090D20

	thumb_func_start sub_02090D34
sub_02090D34: ; 0x02090D34
	mov r1, #1
	strb r1, [r0, #2]
	mov r1, #0
	strb r1, [r0, #3]
	bx lr
	.balign 4, 0
	thumb_func_end sub_02090D34

	thumb_func_start sub_02090D40
sub_02090D40: ; 0x02090D40
	mov r1, #1
	strb r1, [r0, #5]
	bx lr
	.balign 4, 0
	thumb_func_end sub_02090D40

	thumb_func_start sub_02090D48
sub_02090D48: ; 0x02090D48
	ldrb r0, [r0, #2]
	bx lr
	thumb_func_end sub_02090D48

	thumb_func_start sub_02090D4C
sub_02090D4C: ; 0x02090D4C
	ldrb r0, [r0, #3]
	bx lr
	thumb_func_end sub_02090D4C

	thumb_func_start sub_02090D50
sub_02090D50: ; 0x02090D50
	ldrh r0, [r0, #0x1c]
	bx lr
	thumb_func_end sub_02090D50

	thumb_func_start sub_02090D54
sub_02090D54: ; 0x02090D54
	ldrh r2, [r0, #0x1c]
	strh r2, [r1]
	ldrh r0, [r0, #0x1e]
	strh r0, [r1, #2]
	bx lr
	.balign 4, 0
	thumb_func_end sub_02090D54

	thumb_func_start sub_02090D60
sub_02090D60: ; 0x02090D60
	add r2, r0, #0
	ldr r3, _02090D6C ; =MailMsg_copy
	add r2, #0x14
	add r0, r1, #0
	add r1, r2, #0
	bx r3
	.balign 4, 0
_02090D6C: .word MailMsg_copy
	thumb_func_end sub_02090D60

	thumb_func_start sub_02090D70
sub_02090D70: ; 0x02090D70
	ldrb r0, [r0]
	bx lr
	thumb_func_end sub_02090D70

	thumb_func_start sub_02090D74
sub_02090D74: ; 0x02090D74
	ldrb r0, [r0, #1]
	bx lr
	thumb_func_end sub_02090D74

	thumb_func_start sub_02090D78
sub_02090D78: ; 0x02090D78
	ldr r0, [r0, #8]
	bx lr
	thumb_func_end sub_02090D78

	thumb_func_start sub_02090D7C
sub_02090D7C: ; 0x02090D7C
	ldr r0, [r0, #0xc]
	bx lr
	thumb_func_end sub_02090D7C

	thumb_func_start sub_02090D80
sub_02090D80: ; 0x02090D80
	ldr r0, [r0, #0x10]
	bx lr
	thumb_func_end sub_02090D80

	thumb_func_start sub_02090D84
sub_02090D84: ; 0x02090D84
	ldrb r0, [r0, #4]
	bx lr
	thumb_func_end sub_02090D84

	thumb_func_start sub_02090D88
sub_02090D88: ; 0x02090D88
	ldrb r0, [r0, #5]
	bx lr
	thumb_func_end sub_02090D88

	thumb_func_start sub_02090D8C
sub_02090D8C: ; 0x02090D8C
	ldrb r3, [r0]
	cmp r3, #0
	beq _02090D9C
	cmp r3, #1
	beq _02090DA2
	cmp r3, #2
	beq _02090DAC
	bx lr
_02090D9C:
	ldrh r0, [r0, #0x1c]
	strh r0, [r1]
	bx lr
_02090DA2:
	ldrh r2, [r0, #0x1c]
	strh r2, [r1]
	ldrh r0, [r0, #0x1e]
	strh r0, [r1, #2]
	bx lr
_02090DAC:
	ldrh r1, [r0, #0x14]
	strh r1, [r2]
	ldrh r1, [r0, #0x16]
	strh r1, [r2, #2]
	ldrh r1, [r0, #0x18]
	strh r1, [r2, #4]
	ldrh r0, [r0, #0x1a]
	strh r0, [r2, #6]
	bx lr
	.balign 4, 0
	thumb_func_end sub_02090D8C

	thumb_func_start sub_02090DC0
sub_02090DC0: ; 0x02090DC0
	push {r3, lr}
	ldrb r3, [r0]
	cmp r3, #0
	beq _02090DD0
	cmp r3, #1
	beq _02090DE0
	cmp r3, #2
	b _02090DF8
_02090DD0:
	ldrh r1, [r1]
	ldrh r0, [r0, #0x1c]
	cmp r1, r0
	bne _02090DDC
	mov r0, #1
	pop {r3, pc}
_02090DDC:
	mov r0, #0
	pop {r3, pc}
_02090DE0:
	ldrh r3, [r1]
	ldrh r2, [r0, #0x1c]
	cmp r3, r2
	bne _02090DF4
	ldrh r1, [r1, #2]
	ldrh r0, [r0, #0x1e]
	cmp r1, r0
	bne _02090DF4
	mov r0, #1
	pop {r3, pc}
_02090DF4:
	mov r0, #0
	pop {r3, pc}
_02090DF8:
	add r0, #0x14
	add r1, r2, #0
	bl MailMsg_compare
	pop {r3, pc}
	.balign 4, 0
	thumb_func_end sub_02090DC0

	thumb_func_start sub_02090E04
sub_02090E04: ; 0x02090E04
	push {r4, r5, r6, lr}
	add r5, r0, #0
	add r4, r1, #0
	add r6, r2, #0
	bl sub_02090DC0
	cmp r0, #0
	bne _02090E18
	mov r0, #1
	b _02090E1A
_02090E18:
	mov r0, #0
_02090E1A:
	strb r0, [r5, #3]
	mov r1, #0
	strb r1, [r5, #2]
	add r2, r5, #0
_02090E22:
	ldrh r0, [r4]
	add r1, r1, #1
	add r4, r4, #2
	strh r0, [r2, #0x1c]
	add r2, r2, #2
	cmp r1, #2
	blt _02090E22
	ldrh r0, [r6]
	strh r0, [r5, #0x14]
	ldrh r0, [r6, #2]
	strh r0, [r5, #0x16]
	ldrh r0, [r6, #4]
	strh r0, [r5, #0x18]
	ldrh r0, [r6, #6]
	strh r0, [r5, #0x1a]
	pop {r4, r5, r6, pc}
	.balign 4, 0
	thumb_func_end sub_02090E04

	thumb_func_start sub_02090E44
sub_02090E44: ; 0x02090E44
	push {r3, lr}
	cmp r0, #0
	beq _02090E50
	ldr r0, [r0, #0x24]
	cmp r0, #0
	bne _02090E54
_02090E50:
	mov r0, #0
	pop {r3, pc}
_02090E54:
	bl sub_020183F0
	pop {r3, pc}
	.balign 4, 0
	thumb_func_end sub_02090E44

	thumb_func_start sub_02090E5C
sub_02090E5C: ; 0x02090E5C
	ldr r3, _02090E64 ; =sub_02018410
	ldr r0, [r0, #0x24]
	bx r3
	nop
_02090E64: .word sub_02018410
	thumb_func_end sub_02090E5C

	thumb_func_start sub_02090E68
sub_02090E68: ; 0x02090E68
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #8
	add r5, r0, #0
	add r7, r1, #0
	add r6, r2, #0
	str r3, [sp]
	bl Sav2_Mailbox_get
	str r0, [sp, #4]
	ldr r0, [sp, #0x20]
	mov r1, #0x20
	bl AllocFromHeapAtEnd
	mov r1, #0
	mov r2, #0x20
	add r4, r0, #0
	bl MIi_CpuFill8
	ldr r0, [sp]
	strb r0, [r4, #0xf]
	ldr r0, [sp, #4]
	strb r6, [r4, #0xe]
	str r0, [r4, #0x18]
	mov r0, #1
	strh r0, [r4]
	str r7, [r4, #8]
	mov r0, #0
	strh r0, [r4, #0xc]
	ldr r0, [sp, #0x20]
	str r5, [r4, #0x10]
	bl Mail_new
	str r0, [r4, #0x14]
	bl Mail_init
	ldr r0, [r4, #0x14]
	mov r1, #0xff
	add r2, r6, #0
	add r3, r5, #0
	bl Mail_SetNewMessageDetails
	add r0, r4, #0
	add sp, #8
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_02090E68

	thumb_func_start sub_02090EC0
sub_02090EC0: ; 0x02090EC0
	push {r3, r4, r5, r6, r7, lr}
	add r7, r0, #0
	add r5, r1, #0
	add r0, r3, #0
	mov r1, #0x20
	add r6, r2, #0
	str r3, [sp]
	bl AllocFromHeapAtEnd
	mov r1, #0
	mov r2, #0x20
	add r4, r0, #0
	bl MIi_CpuFill8
	mov r0, #0
	strh r0, [r4]
	str r5, [r4, #8]
	strh r6, [r4, #0xc]
	add r0, r7, #0
	str r7, [r4, #0x10]
	bl Sav2_Mailbox_get
	ldr r3, [sp]
	add r1, r5, #0
	add r2, r6, #0
	str r0, [r4, #0x18]
	bl Mailbox_AllocAndFetchMailI
	str r0, [r4, #0x14]
	add r0, r4, #0
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_02090EC0

	thumb_func_start sub_02090F00
sub_02090F00: ; 0x02090F00
	push {r3, r4, r5, r6, r7, lr}
	add r7, r2, #0
	add r5, r0, #0
	add r6, r1, #0
	add r0, r7, #0
	mov r1, #0x20
	bl AllocFromHeapAtEnd
	mov r1, #0
	mov r2, #0x20
	add r4, r0, #0
	bl MIi_CpuFill8
	mov r0, #0
	strh r0, [r4]
	str r5, [r4, #0x10]
	add r0, r7, #0
	bl Mail_new
	str r0, [r4, #0x14]
	ldr r2, [r4, #0x14]
	add r0, r6, #0
	mov r1, #0xaa
	bl GetMonData
	add r0, r4, #0
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_02090F00

	thumb_func_start sub_02090F38
sub_02090F38: ; 0x02090F38
	push {r3, r4, r5, r6, r7, lr}
	add r7, r2, #0
	add r5, r0, #0
	add r6, r1, #0
	add r0, r7, #0
	mov r1, #0x20
	bl AllocFromHeapAtEnd
	mov r1, #0
	mov r2, #0x20
	add r4, r0, #0
	bl MIi_CpuFill8
	mov r0, #0
	strh r0, [r4]
	add r0, r7, #0
	str r5, [r4, #0x10]
	bl Mail_new
	add r1, r6, #0
	str r0, [r4, #0x14]
	bl Mail_SetType
	add r0, r4, #0
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_02090F38

	thumb_func_start sub_02090F6C
sub_02090F6C: ; 0x02090F6C
	ldr r0, [r0, #4]
	bx lr
	thumb_func_end sub_02090F6C

	thumb_func_start sub_02090F70
sub_02090F70: ; 0x02090F70
	push {r3, r4, r5, lr}
	add r5, r0, #0
	add r4, r1, #0
	bl sub_02090F6C
	cmp r0, #0
	bne _02090F82
	mov r0, #0
	pop {r3, r4, r5, pc}
_02090F82:
	ldr r2, [r5, #0x14]
	add r0, r4, #0
	mov r1, #0xaa
	bl sub_0206EC40
	mov r0, #1
	pop {r3, r4, r5, pc}
	thumb_func_end sub_02090F70

	thumb_func_start sub_02090F90
sub_02090F90: ; 0x02090F90
	push {r4, lr}
	add r4, r0, #0
	ldr r0, [r4, #0x14]
	cmp r0, #0
	beq _02090F9E
	bl FreeToHeap
_02090F9E:
	add r0, r4, #0
	bl FreeToHeap
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_02090F90

	thumb_func_start sub_02090FA8
sub_02090FA8: ; 0x02090FA8
	push {r3, r4, r5, r6, r7, lr}
	add r5, r1, #0
	mov r1, #0
	add r7, r0, #0
	add r4, r2, #0
	str r1, [sp]
	bl Mailbox_GetFirstEmptySlotIdx
	add r6, r0, #0
	mov r0, #0
	mvn r0, r0
	cmp r6, r0
	beq _02091002
	add r0, r4, #0
	bl Mail_new
	add r4, r0, #0
	add r0, r5, #0
	mov r1, #0xaa
	add r2, r4, #0
	bl GetMonData
	add r0, r7, #0
	mov r1, #0
	add r2, r6, #0
	add r3, r4, #0
	bl Mailbox_CopyMailToSlotI
	add r0, r4, #0
	bl Mail_init
	add r0, r5, #0
	mov r1, #0xaa
	add r2, r4, #0
	bl sub_0206EC40
	add r0, r5, #0
	mov r1, #6
	add r2, sp, #0
	bl sub_0206EC40
	add r0, r4, #0
	bl FreeToHeap
	add r0, r6, #0
_02091002:
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_02090FA8

	thumb_func_start sub_02091004
sub_02091004: ; 0x02091004
	push {r3, r4, r5, r6, r7, lr}
	add r5, r1, #0
	add r4, r2, #0
	mov r1, #0
	add r2, r5, #0
	add r7, r0, #0
	str r1, [sp]
	bl Mailbox_AllocAndFetchMailI
	add r6, r0, #0
	bne _02091020
	mov r0, #0
	mvn r0, r0
	pop {r3, r4, r5, r6, r7, pc}
_02091020:
	bl Mail_GetType
	bl sub_0207808C
	str r0, [sp]
	add r0, r4, #0
	mov r1, #0xaa
	add r2, r6, #0
	bl sub_0206EC40
	add r0, r4, #0
	mov r1, #6
	add r2, sp, #0
	bl sub_0206EC40
	add r0, r7, #0
	mov r1, #0
	add r2, r5, #0
	bl Mailbox_DeleteSlotI
	add r0, r6, #0
	bl FreeToHeap
	add r0, r5, #0
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_02091004

	thumb_func_start sub_02091054
sub_02091054: ; 0x02091054
	push {r4, lr}
	add r4, r0, #0
	cmp r4, #0x51
	blo _02091060
	bl GF_AssertFail
_02091060:
	ldr r0, _02091068 ; =0x02105F04
	lsl r1, r4, #2
	ldrb r0, [r0, r1]
	pop {r4, pc}
	.balign 4, 0
_02091068: .word 0x02105F04
	thumb_func_end sub_02091054

	thumb_func_start sub_0209106C
sub_0209106C: ; 0x0209106C
	push {r4, lr}
	add r4, r0, #0
	cmp r4, #0x51
	blo _02091078
	bl GF_AssertFail
_02091078:
	ldr r0, _02091080 ; =0x02105F05
	lsl r1, r4, #2
	ldrb r0, [r0, r1]
	pop {r4, pc}
	.balign 4, 0
_02091080: .word 0x02105F05
	thumb_func_end sub_0209106C

	thumb_func_start sub_02091084
sub_02091084: ; 0x02091084
	push {r4, lr}
	add r4, r0, #0
	cmp r4, #0x51
	blo _02091090
	bl GF_AssertFail
_02091090:
	ldr r0, _02091098 ; =0x02105F06
	lsl r1, r4, #2
	ldrb r0, [r0, r1]
	pop {r4, pc}
	.balign 4, 0
_02091098: .word 0x02105F06
	thumb_func_end sub_02091084

	thumb_func_start sub_0209109C
sub_0209109C: ; 0x0209109C
	push {r4, lr}
	add r4, r0, #0
	cmp r4, #0x51
	blo _020910A8
	bl GF_AssertFail
_020910A8:
	cmp r4, #0x32
	blo _020910B0
	cmp r4, #0x4d
	bls _020910B4
_020910B0:
	mov r0, #0
	pop {r4, pc}
_020910B4:
	mov r0, #1
	pop {r4, pc}
	thumb_func_end sub_0209109C

	thumb_func_start sub_020910B8
sub_020910B8: ; 0x020910B8
	push {r4, lr}
	add r4, r0, #0
	cmp r4, #0x51
	blo _020910C4
	bl GF_AssertFail
_020910C4:
	ldr r0, _020910D4 ; =0x02105F04
	lsl r1, r4, #2
	add r0, r0, r1
	ldrb r0, [r0, #3]
	lsl r0, r0, #0x18
	lsr r0, r0, #0x1a
	pop {r4, pc}
	nop
_020910D4: .word 0x02105F04
	thumb_func_end sub_020910B8

	thumb_func_start sub_020910D8
sub_020910D8: ; 0x020910D8
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x10
	add r5, r0, #0
	bl sub_02050650
	add r4, r0, #0
	ldr r1, [r4]
	cmp r1, #6
	bls _020910EC
	b _02091232
_020910EC:
	add r1, r1, r1
	add r1, pc
	ldrh r1, [r1, #6]
	lsl r1, r1, #0x10
	asr r1, r1, #0x10
	add pc, r1
_020910F8: ; jump table
	.short _02091106 - _020910F8 - 2 ; case 0
	.short _0209111C - _020910F8 - 2 ; case 1
	.short _0209112E - _020910F8 - 2 ; case 2
	.short _0209119A - _020910F8 - 2 ; case 3
	.short _020911FA - _020910F8 - 2 ; case 4
	.short _0209121A - _020910F8 - 2 ; case 5
	.short _02091228 - _020910F8 - 2 ; case 6
_02091106:
	ldr r0, [r4, #0xc]
	mov r1, #0xb
	bl sub_0206D328
	add r0, r5, #0
	bl sub_0205525C
	ldr r0, [r4]
	add r0, r0, #1
	str r0, [r4]
	b _02091232
_0209111C:
	ldr r1, _02091238 ; =0x02106048
	add r0, r5, #0
	add r2, r4, #0
	bl sub_02050624
	ldr r0, [r4]
	add r0, r0, #1
	str r0, [r4]
	b _02091232
_0209112E:
	add r0, r5, #0
	bl sub_0205064C
	add r6, r0, #0
	ldr r5, [r4, #0xc]
	bl ScriptEnvironment_GetSav2Ptr
	bl Sav2_PlayerData_GetProfileAddr
	add r7, r0, #0
	ldr r0, [r6, #0x20]
	ldr r0, [r0]
	bl MapHeader_GetMapSec
	str r0, [sp, #8]
	mov r0, #0
	str r0, [sp, #0xc]
	add r0, r5, #0
	mov r1, #0x4c
	add r2, sp, #0xc
	bl sub_0206EC40
	mov r0, #0xb
	str r0, [sp]
	ldr r3, [sp, #8]
	add r0, r5, #0
	add r1, r7, #0
	mov r2, #6
	bl sub_0208F260
	add r0, r5, #0
	mov r1, #0xb3
	mov r2, #0
	bl sub_0206EC40
	add r0, r6, #0
	add r1, r5, #0
	bl sub_02093134
	add r0, r6, #0
	bl ScriptEnvironment_GetSav2Ptr
	ldr r1, [r4, #0xc]
	bl sub_0202ECC0
	ldr r0, [r4, #4]
	cmp r0, #1
	bne _02091194
	mov r0, #3
	str r0, [r4]
	b _02091232
_02091194:
	mov r0, #5
	str r0, [r4]
	b _02091232
_0209119A:
	add r0, r5, #0
	bl sub_0205064C
	add r6, r0, #0
	ldr r0, [r4, #0xc]
	mov r1, #5
	mov r2, #0
	bl GetMonData
	add r7, r0, #0
	add r0, r6, #0
	bl ScriptEnvironment_GetSav2Ptr
	bl Sav2_PlayerData_GetOptionsAddr
	str r0, [sp]
	mov r0, #0
	str r0, [sp, #4]
	mov r0, #0xb
	mov r1, #1
	add r2, r7, #0
	mov r3, #0xa
	bl sub_020830D8
	str r0, [r4, #8]
	ldr r0, [r4, #0xc]
	mov r1, #0x6f
	mov r2, #0
	bl GetMonData
	ldr r1, [r4, #8]
	mov r2, #0
	str r0, [r1, #0x10]
	ldr r0, [r4, #0xc]
	mov r1, #0x70
	bl GetMonData
	ldr r1, [r4, #8]
	str r0, [r1, #8]
	ldr r1, _0209123C ; =0x02102610
	ldr r2, [r4, #8]
	add r0, r5, #0
	bl sub_02050624
	ldr r0, [r4]
	add r0, r0, #1
	str r0, [r4]
	b _02091232
_020911FA:
	ldr r2, [r4, #8]
	ldr r0, [r2, #0x14]
	cmp r0, #0
	bne _0209120C
	ldr r0, [r4, #0xc]
	ldr r2, [r2, #0x18]
	mov r1, #0x78
	bl sub_0206EC40
_0209120C:
	ldr r0, [r4, #8]
	bl sub_0208311C
	ldr r0, [r4]
	add r0, r0, #1
	str r0, [r4]
	b _02091232
_0209121A:
	add r0, r5, #0
	bl sub_020552A4
	ldr r0, [r4]
	add r0, r0, #1
	str r0, [r4]
	b _02091232
_02091228:
	bl FreeToHeap
	add sp, #0x10
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_02091232:
	mov r0, #0
	add sp, #0x10
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_02091238: .word 0x02106048
_0209123C: .word 0x02102610
	thumb_func_end sub_020910D8

	thumb_func_start sub_02091240
sub_02091240: ; 0x02091240
	push {r3, r4, r5, lr}
	add r5, r0, #0
	add r4, r1, #0
	mov r0, #0xb
	mov r1, #0x1c
	bl AllocFromHeapAtEnd
	add r2, r0, #0
	add r3, r2, #0
	mov r1, #0x1c
	mov r0, #0
_02091256:
	strb r0, [r3]
	add r3, r3, #1
	sub r1, r1, #1
	bne _02091256
	add r3, r2, #0
	add r3, #0xc
	ldmia r4!, {r0, r1}
	stmia r3!, {r0, r1}
	ldmia r4!, {r0, r1}
	stmia r3!, {r0, r1}
	ldr r1, _02091274 ; =sub_020910D8
	add r0, r5, #0
	bl sub_02050530
	pop {r3, r4, r5, pc}
	.balign 4, 0
_02091274: .word sub_020910D8
	thumb_func_end sub_02091240

	thumb_func_start sub_02091278
sub_02091278: ; 0x02091278
	ldr r3, _02091290 ; =0x02106058
	mov r2, #0
_0209127C:
	ldrb r1, [r3]
	cmp r0, r1
	beq _0209128A
	add r2, r2, #1
	add r3, r3, #1
	cmp r2, #6
	blt _0209127C
_0209128A:
	add r0, r2, #0
	bx lr
	nop
_02091290: .word 0x02106058
	thumb_func_end sub_02091278

	thumb_func_start sub_02091294
sub_02091294: ; 0x02091294
	push {r4, lr}
	add r4, r0, #0
	cmp r4, #6
	blt _020912A0
	bl GF_AssertFail
_020912A0:
	ldr r0, _020912A8 ; =0x02106058
	ldrb r0, [r0, r4]
	pop {r4, pc}
	nop
_020912A8: .word 0x02106058
	thumb_func_end sub_02091294

	thumb_func_start sub_020912AC
sub_020912AC: ; 0x020912AC
	push {r4, lr}
	add r4, r0, #0
	cmp r4, #6
	blt _020912B8
	bl GF_AssertFail
_020912B8:
	cmp r4, #6
	bge _020912C2
	ldr r0, _020912CC ; =0x02106060
	ldrb r0, [r0, r4]
	pop {r4, pc}
_020912C2:
	mov r0, #2
	bl sub_02091278
	pop {r4, pc}
	nop
_020912CC: .word 0x02106060
	thumb_func_end sub_020912AC

	thumb_func_start sub_020912D0
sub_020912D0: ; 0x020912D0
	push {r4, lr}
	ldr r3, _02091304 ; =0x02106060
	mov r4, #0
_020912D6:
	ldrb r2, [r3]
	cmp r2, r0
	bne _020912EE
	add r0, r1, #6
	add r0, r4, r0
	mov r1, #6
	bl _u32_div_f
	ldr r0, _02091304 ; =0x02106060
	add r4, r1, #0
	ldrb r0, [r0, r4]
	pop {r4, pc}
_020912EE:
	add r4, r4, #1
	add r3, r3, #1
	cmp r4, #6
	blo _020912D6
	mov r0, #2
	bl sub_02091278
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	pop {r4, pc}
	nop
_02091304: .word 0x02106060
	thumb_func_end sub_020912D0

	thumb_func_start sub_02091308
sub_02091308: ; 0x02091308
	push {r3, lr}
	mov r1, #0x18
	bl AllocFromHeap
	add r3, r0, #0
	mov r2, #0x18
	mov r1, #0
_02091316:
	strb r1, [r3]
	add r3, r3, #1
	sub r2, r2, #1
	bne _02091316
	pop {r3, pc}
	thumb_func_end sub_02091308

	thumb_func_start sub_02091320
sub_02091320: ; 0x02091320
	push {r4, lr}
	add r4, r0, #0
	bne _0209132A
	bl GF_AssertFail
_0209132A:
	add r0, r4, #0
	bl FreeToHeap
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_02091320

	thumb_func_start sub_02091334
sub_02091334: ; 0x02091334
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	add r7, r1, #0
	add r4, r2, #0
	cmp r5, #0
	bne _02091344
	bl GF_AssertFail
_02091344:
	ldr r0, [r5]
	cmp r0, #0
	beq _0209134E
	bl GF_AssertFail
_0209134E:
	ldr r0, [r5, #4]
	cmp r0, #0
	beq _02091358
	bl GF_AssertFail
_02091358:
	bl sub_02091540
	add r1, r4, #0
	bl NARC_ctor
	add r6, r0, #0
	add r1, r4, #0
	bl sub_02091450
	str r0, [r5]
	add r0, r6, #0
	add r1, r4, #0
	bl sub_02091460
	str r0, [r5, #4]
	cmp r7, #0
	bne _0209139C
	add r1, r5, #0
	add r2, r5, #0
	add r0, r6, #0
	add r1, #8
	add r2, #0xc
	add r3, r4, #0
	bl sub_02091470
	add r1, r5, #0
	add r5, #0x14
	add r0, r6, #0
	add r1, #0x10
	add r2, r5, #0
	add r3, r4, #0
	bl sub_020914C0
	b _020913BC
_0209139C:
	add r1, r5, #0
	add r2, r5, #0
	add r0, r6, #0
	add r1, #8
	add r2, #0xc
	add r3, r4, #0
	bl sub_02091498
	add r1, r5, #0
	add r5, #0x14
	add r0, r6, #0
	add r1, #0x10
	add r2, r5, #0
	add r3, r4, #0
	bl sub_020914E8
_020913BC:
	add r0, r6, #0
	bl NARC_dtor
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_02091334

	thumb_func_start sub_020913C4
sub_020913C4: ; 0x020913C4
	push {r4, lr}
	add r4, r0, #0
	ldr r0, [r4]
	cmp r0, #0
	bne _020913D2
	bl GF_AssertFail
_020913D2:
	ldr r0, [r4, #4]
	cmp r0, #0
	bne _020913DC
	bl GF_AssertFail
_020913DC:
	ldr r0, [r4]
	bl FreeToHeap
	ldr r0, [r4, #4]
	bl FreeToHeap
	ldr r0, [r4, #8]
	bl FreeToHeap
	ldr r0, [r4, #0xc]
	bl FreeToHeap
	ldr r0, [r4, #0x10]
	bl FreeToHeap
	ldr r0, [r4, #0x14]
	bl FreeToHeap
	mov r0, #0
	str r0, [r4]
	str r0, [r4, #4]
	str r0, [r4, #8]
	str r0, [r4, #0xc]
	str r0, [r4, #0x10]
	str r0, [r4, #0x14]
	pop {r4, pc}
	thumb_func_end sub_020913C4

	thumb_func_start sub_02091410
sub_02091410: ; 0x02091410
	push {r3, r4, r5, lr}
	add r5, r0, #0
	add r4, r1, #0
	cmp r5, #0
	bne _0209141E
	bl GF_AssertFail
_0209141E:
	ldr r0, [r5]
	cmp r0, #0
	bne _02091428
	bl GF_AssertFail
_02091428:
	ldr r1, [r5]
	lsl r0, r4, #2
	ldr r0, [r1, r0]
	pop {r3, r4, r5, pc}
	thumb_func_end sub_02091410

	thumb_func_start sub_02091430
sub_02091430: ; 0x02091430
	push {r3, r4, r5, lr}
	add r5, r0, #0
	add r4, r1, #0
	cmp r5, #0
	bne _0209143E
	bl GF_AssertFail
_0209143E:
	ldr r0, [r5, #4]
	cmp r0, #0
	bne _02091448
	bl GF_AssertFail
_02091448:
	ldr r1, [r5, #4]
	lsl r0, r4, #2
	ldr r0, [r1, r0]
	pop {r3, r4, r5, pc}
	thumb_func_end sub_02091430

	thumb_func_start sub_02091450
sub_02091450: ; 0x02091450
	push {r3, lr}
	add r3, r1, #0
	mov r1, #0
	add r2, r1, #0
	str r1, [sp]
	bl sub_02007C98
	pop {r3, pc}
	thumb_func_end sub_02091450

	thumb_func_start sub_02091460
sub_02091460: ; 0x02091460
	push {r3, lr}
	add r3, r1, #0
	mov r2, #0
	mov r1, #1
	str r2, [sp]
	bl sub_02007C98
	pop {r3, pc}
	thumb_func_end sub_02091460

	thumb_func_start sub_02091470
sub_02091470: ; 0x02091470
	push {r3, r4, r5, r6, r7, lr}
	add r4, r2, #0
	mov r2, #0
	add r5, r1, #0
	add r6, r0, #0
	add r7, r3, #0
	str r2, [sp]
	mov r1, #9
	bl sub_02007C98
	str r0, [r5]
	mov r2, #0
	add r0, r6, #0
	mov r1, #0xa
	add r3, r7, #0
	str r2, [sp]
	bl sub_02007C98
	str r0, [r4]
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_02091470

	thumb_func_start sub_02091498
sub_02091498: ; 0x02091498
	push {r3, r4, r5, r6, r7, lr}
	add r4, r2, #0
	mov r2, #0
	add r5, r1, #0
	add r6, r0, #0
	add r7, r3, #0
	str r2, [sp]
	mov r1, #7
	bl sub_02007C98
	str r0, [r5]
	mov r2, #0
	add r0, r6, #0
	mov r1, #8
	add r3, r7, #0
	str r2, [sp]
	bl sub_02007C98
	str r0, [r4]
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_02091498

	thumb_func_start sub_020914C0
sub_020914C0: ; 0x020914C0
	push {r3, r4, r5, r6, r7, lr}
	add r4, r2, #0
	mov r2, #0
	add r5, r1, #0
	add r6, r0, #0
	add r7, r3, #0
	str r2, [sp]
	mov r1, #5
	bl sub_02007C98
	str r0, [r5]
	mov r2, #0
	add r0, r6, #0
	mov r1, #6
	add r3, r7, #0
	str r2, [sp]
	bl sub_02007C98
	str r0, [r4]
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_020914C0

	thumb_func_start sub_020914E8
sub_020914E8: ; 0x020914E8
	push {r3, r4, r5, r6, r7, lr}
	add r4, r2, #0
	mov r2, #0
	add r5, r1, #0
	add r6, r0, #0
	add r7, r3, #0
	str r2, [sp]
	mov r1, #3
	bl sub_02007C98
	str r0, [r5]
	mov r2, #0
	add r0, r6, #0
	mov r1, #4
	add r3, r7, #0
	str r2, [sp]
	bl sub_02007C98
	str r0, [r4]
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_020914E8

	thumb_func_start sub_02091510
sub_02091510: ; 0x02091510
	cmp r0, #0
	bne _02091524
	ldr r0, _02091538 ; =0x021105BC
	mov r1, #0xd8
	str r1, [r0, #4]
	ldr r1, _0209153C ; =0x0000032D
	str r1, [r0]
	add r1, r1, #2
	str r1, [r0, #8]
	bx lr
_02091524:
	ldr r0, _02091538 ; =0x021105BC
	mov r1, #0x4a
	str r1, [r0, #4]
	mov r1, #0xcb
	lsl r1, r1, #2
	str r1, [r0]
	add r1, r1, #2
	str r1, [r0, #8]
	bx lr
	nop
_02091538: .word 0x021105BC
_0209153C: .word 0x0000032D
	thumb_func_end sub_02091510

	thumb_func_start sub_02091540
sub_02091540: ; 0x02091540
	ldr r0, _02091548 ; =0x021105BC
	ldr r0, [r0, #4]
	bx lr
	nop
_02091548: .word 0x021105BC
	thumb_func_end sub_02091540

	thumb_func_start sub_0209154C
sub_0209154C: ; 0x0209154C
	ldr r0, _02091554 ; =0x021105BC
	ldr r0, [r0]
	bx lr
	nop
_02091554: .word 0x021105BC
	thumb_func_end sub_0209154C

	thumb_func_start sub_02091558
sub_02091558: ; 0x02091558
	ldr r0, _02091560 ; =0x021105BC
	ldr r0, [r0, #8]
	bx lr
	nop
_02091560: .word 0x021105BC
	thumb_func_end sub_02091558

	thumb_func_start sub_02091564
sub_02091564: ; 0x02091564
	mov r0, #0x18
	bx lr
	thumb_func_end sub_02091564

	thumb_func_start sub_02091568
sub_02091568: ; 0x02091568
	mov r0, #0x59
	lsl r0, r0, #4
	bx lr
	.balign 4, 0
	thumb_func_end sub_02091568

	thumb_func_start sub_02091570
sub_02091570: ; 0x02091570
	bx lr
	.balign 4, 0
	thumb_func_end sub_02091570

	thumb_func_start sub_02091574
sub_02091574: ; 0x02091574
	ldr r3, _02091580 ; =sub_0203410C
	add r2, r0, #0
	ldr r0, _02091584 ; =0x02106078
	mov r1, #0x71
	bx r3
	nop
_02091580: .word sub_0203410C
_02091584: .word 0x02106078
	thumb_func_end sub_02091574

	thumb_func_start sub_02091588
sub_02091588: ; 0x02091588
	ldr r0, _0209158C ; =0x0000066C
	bx lr
	.balign 4, 0
_0209158C: .word 0x0000066C
	thumb_func_end sub_02091588

	thumb_func_start sub_02091590
sub_02091590: ; 0x02091590
	mov r0, #0x2f
	lsl r0, r0, #6
	bx lr
	.balign 4, 0
	thumb_func_end sub_02091590

	thumb_func_start sub_02091598
sub_02091598: ; 0x02091598
	mov r0, #0x3f
	lsl r0, r0, #4
	bx lr
	.balign 4, 0
	thumb_func_end sub_02091598

	thumb_func_start sub_020915A0
sub_020915A0: ; 0x020915A0
	mov r0, #0xa
	bx lr
	thumb_func_end sub_020915A0

	thumb_func_start sub_020915A4
sub_020915A4: ; 0x020915A4
	mov r0, #0x32
	bx lr
	thumb_func_end sub_020915A4

	thumb_func_start sub_020915A8
sub_020915A8: ; 0x020915A8
	mov r0, #4
	bx lr
	thumb_func_end sub_020915A8

	thumb_func_start sub_020915AC
sub_020915AC: ; 0x020915AC
	mov r0, #4
	bx lr
	thumb_func_end sub_020915AC

	thumb_func_start LoadDwcOverlay
LoadDwcOverlay: ; 0x020915B0
	ldr r3, _020915B8 ; =HandleLoadOverlay
	ldr r0, _020915BC ; =SDK_OVERLAY_OVY_0_ID
	mov r1, #2
	bx r3
	.balign 4, 0
_020915B8: .word HandleLoadOverlay
_020915BC: .word SDK_OVERLAY_OVY_0_ID
	thumb_func_end LoadDwcOverlay

	thumb_func_start UnloadDwcOverlay
UnloadDwcOverlay: ; 0x020915C0
	ldr r3, _020915C8 ; =UnloadOverlayByID
	ldr r0, _020915CC ; =SDK_OVERLAY_OVY_0_ID
	bx r3
	nop
_020915C8: .word UnloadOverlayByID
_020915CC: .word SDK_OVERLAY_OVY_0_ID
	thumb_func_end UnloadDwcOverlay

	thumb_func_start LoadOVY13
LoadOVY13: ; 0x020915D0
	ldr r3, _020915D8 ; =HandleLoadOverlay
	ldr r0, _020915DC ; =SDK_OVERLAY_OVY_13_ID
	mov r1, #2
	bx r3
	.balign 4, 0
_020915D8: .word HandleLoadOverlay
_020915DC: .word SDK_OVERLAY_OVY_13_ID
	thumb_func_end LoadOVY13

	thumb_func_start UnloadOVY13
UnloadOVY13: ; 0x020915E0
	ldr r3, _020915E8 ; =UnloadOverlayByID
	ldr r0, _020915EC ; =SDK_OVERLAY_OVY_13_ID
	bx r3
	nop
_020915E8: .word UnloadOverlayByID
_020915EC: .word SDK_OVERLAY_OVY_13_ID
	thumb_func_end UnloadOVY13

	thumb_func_start sub_020915F0
sub_020915F0: ; 0x020915F0
	push {r4, lr}
	add r4, r1, #0
	bl LoadDwcOverlay
	bl LoadOVY13
	add r0, r4, #0
	bl ov13_0221BA00
	bl UnloadOVY13
	bl UnloadDwcOverlay
	mov r0, #0
	bl OS_ResetSystem
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_020915F0

	thumb_func_start LoadOVY38
LoadOVY38: ; 0x02091614
	ldr r3, _0209161C ; =HandleLoadOverlay
	ldr r0, _02091620 ; =SDK_OVERLAY_OVY_38_ID
	mov r1, #2
	bx r3
	.balign 4, 0
_0209161C: .word HandleLoadOverlay
_02091620: .word SDK_OVERLAY_OVY_38_ID
	thumb_func_end LoadOVY38

	thumb_func_start UnloadOVY38
UnloadOVY38: ; 0x02091624
	ldr r3, _0209162C ; =UnloadOverlayByID
	ldr r0, _02091630 ; =SDK_OVERLAY_OVY_38_ID
	bx r3
	nop
_0209162C: .word UnloadOverlayByID
_02091630: .word SDK_OVERLAY_OVY_38_ID
	thumb_func_end UnloadOVY38

	thumb_func_start sub_02091634
sub_02091634: ; 0x02091634
	push {r4, lr}
	mov r2, #0x41
	add r4, r0, #0
	mov r0, #3
	mov r1, #0x30
	lsl r2, r2, #0xc
	bl CreateHeap
	add r0, r4, #0
	bl OverlayManager_GetField18
	ldr r0, [r0, #8]
	mov r1, #0x30
	bl sub_020915F0
	mov r0, #0x30
	bl DestroyHeap
	mov r0, #0
	bl OS_ResetSystem
	mov r0, #1
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_02091634

	thumb_func_start sub_02091664
sub_02091664: ; 0x02091664
	mov r0, #0x13
	bx lr
	thumb_func_end sub_02091664

	thumb_func_start sub_02091668
sub_02091668: ; 0x02091668
	ldr r3, _02091684 ; =0x02106774
	mov r2, #0
_0209166C:
	ldrb r1, [r3]
	cmp r0, r1
	bne _02091676
	add r0, r2, #0
	bx lr
_02091676:
	add r2, r2, #1
	add r3, #0xc
	cmp r2, #0x13
	blo _0209166C
	mov r0, #0
	bx lr
	nop
_02091684: .word 0x02106774
	thumb_func_end sub_02091668

	thumb_func_start sub_02091688
sub_02091688: ; 0x02091688
	ldr r3, _020916AC ; =0x02106774
	mov r2, #0
_0209168C:
	ldrb r1, [r3]
	cmp r0, r1
	bne _0209169E
	mov r0, #0xc
	add r1, r2, #0
	mul r1, r0
	ldr r0, _020916B0 ; =0x0210677C
	ldr r0, [r0, r1]
	bx lr
_0209169E:
	add r2, r2, #1
	add r3, #0xc
	cmp r2, #0x13
	blo _0209168C
	mov r0, #0
	bx lr
	nop
_020916AC: .word 0x02106774
_020916B0: .word 0x0210677C
	thumb_func_end sub_02091688

	thumb_func_start GetCityNamesMsgdataIdByCountry
GetCityNamesMsgdataIdByCountry: ; 0x020916B4
	push {r3, lr}
	bl sub_02091668
	bl sub_020916C0
	pop {r3, pc}
	thumb_func_end GetCityNamesMsgdataIdByCountry

	thumb_func_start sub_020916C0
sub_020916C0: ; 0x020916C0
	push {r4, lr}
	add r4, r0, #0
	cmp r4, #0x13
	blo _020916CC
	bl GF_AssertFail
_020916CC:
	mov r0, #0xc
	add r1, r4, #0
	mul r1, r0
	ldr r0, _020916D8 ; =0x02106776
	ldrh r0, [r0, r1]
	pop {r4, pc}
	.balign 4, 0
_020916D8: .word 0x02106776
	thumb_func_end sub_020916C0

	thumb_func_start sub_020916DC
sub_020916DC: ; 0x020916DC
	push {r4, lr}
	add r4, r0, #0
	cmp r4, #0x13
	blo _020916E8
	bl GF_AssertFail
_020916E8:
	mov r0, #0xc
	add r1, r4, #0
	mul r1, r0
	ldr r0, _020916F4 ; =0x02106774
	ldrb r0, [r0, r1]
	pop {r4, pc}
	.balign 4, 0
_020916F4: .word 0x02106774
	thumb_func_end sub_020916DC

	thumb_func_start sub_020916F8
sub_020916F8: ; 0x020916F8
	push {r4, lr}
	add r4, r0, #0
	cmp r4, #0x13
	blo _02091704
	bl GF_AssertFail
_02091704:
	mov r0, #0xc
	add r1, r4, #0
	mul r1, r0
	ldr r0, _02091710 ; =0x02106775
	ldrb r0, [r0, r1]
	pop {r4, pc}
	.balign 4, 0
_02091710: .word 0x02106775
	thumb_func_end sub_020916F8

	thumb_func_start sub_02091714
sub_02091714: ; 0x02091714
	push {r4, lr}
	add r4, r0, #0
	cmp r4, #0x13
	blo _02091720
	bl GF_AssertFail
_02091720:
	mov r0, #0xc
	add r1, r4, #0
	mul r1, r0
	ldr r0, _0209172C ; =0x02106778
	ldr r0, [r0, r1]
	pop {r4, pc}
	.balign 4, 0
_0209172C: .word 0x02106778
	thumb_func_end sub_02091714

	thumb_func_start sub_02091730
sub_02091730: ; 0x02091730
	push {r4, lr}
	add r4, r0, #0
	cmp r4, #0x13
	blo _0209173C
	bl GF_AssertFail
_0209173C:
	mov r0, #0xc
	add r1, r4, #0
	mul r1, r0
	ldr r0, _02091748 ; =0x0210677C
	ldr r0, [r0, r1]
	pop {r4, pc}
	.balign 4, 0
_02091748: .word 0x0210677C
	thumb_func_end sub_02091730

	thumb_func_start sub_0209174C
sub_0209174C: ; 0x0209174C
	push {r3, lr}
	mov r1, #0x1c
	bl AllocFromHeap
	add r3, r0, #0
	mov r2, #0x1c
	mov r1, #0
_0209175A:
	strb r1, [r3]
	add r3, r3, #1
	sub r2, r2, #1
	bne _0209175A
	pop {r3, pc}
	thumb_func_end sub_0209174C

	thumb_func_start sub_02091764
sub_02091764: ; 0x02091764
	ldr r3, _02091768 ; =FreeToHeap
	bx r3
	.balign 4, 0
_02091768: .word FreeToHeap
	thumb_func_end sub_02091764

	thumb_func_start sub_0209176C
sub_0209176C: ; 0x0209176C
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x18
	str r1, [sp]
	mov r1, #5
	mov r2, #0
	add r5, r0, #0
	bl GetMonData
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	str r0, [sp, #0xc]
	add r0, r5, #0
	mov r1, #0x70
	mov r2, #0
	bl GetMonData
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	str r0, [sp, #8]
	add r0, r5, #0
	mov r1, #0xa1
	mov r2, #0
	bl GetMonData
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	mov r4, #0
	str r0, [sp, #4]
	add r7, r4, #0
	add r6, sp, #0x10
_020917A8:
	add r1, r4, #0
	add r0, r5, #0
	add r1, #0x36
	add r2, r7, #0
	bl GetMonData
	lsl r1, r4, #1
	strh r0, [r6, r1]
	add r0, r4, #1
	lsl r0, r0, #0x18
	lsr r4, r0, #0x18
	cmp r4, #4
	blo _020917A8
	ldr r0, [sp]
	mov r1, #0x2a
	bl AllocFromHeap
	add r7, r0, #0
	ldr r0, [sp]
	mov r1, #0x2a
	bl AllocFromHeap
	add r4, r0, #0
	ldr r0, [sp, #0xc]
	ldr r1, [sp, #8]
	add r2, r7, #0
	bl sub_02071FC8
	mov r2, #0
	mov ip, r2
_020917E4:
	mov r0, ip
	lsl r0, r0, #1
	ldrh r5, [r7, r0]
	ldr r6, _02091868 ; =0x0000FFFF
	cmp r5, r6
	bne _020917F6
	lsl r0, r2, #1
	strh r6, [r4, r0]
	b _0209185C
_020917F6:
	mov r1, #0xfe
	lsl r1, r1, #8
	and r1, r5
	asr r3, r1, #9
	ldr r1, [sp, #4]
	cmp r3, r1
	bgt _0209184E
	lsr r1, r6, #7
	and r1, r5
	strh r1, [r7, r0]
	ldrh r3, [r7, r0]
	mov r1, #0
	add r6, sp, #0x10
_02091810:
	lsl r5, r1, #1
	ldrh r5, [r6, r5]
	cmp r3, r5
	beq _02091822
	add r1, r1, #1
	lsl r1, r1, #0x18
	lsr r1, r1, #0x18
	cmp r1, #4
	blo _02091810
_02091822:
	cmp r1, #4
	bne _0209184E
	mov r1, #0
	cmp r2, #0
	bls _0209183E
_0209182C:
	lsl r5, r1, #1
	ldrh r5, [r4, r5]
	cmp r5, r3
	beq _0209183E
	add r1, r1, #1
	lsl r1, r1, #0x18
	lsr r1, r1, #0x18
	cmp r1, r2
	blo _0209182C
_0209183E:
	cmp r1, r2
	bne _0209184E
	ldrh r1, [r7, r0]
	lsl r0, r2, #1
	strh r1, [r4, r0]
	add r0, r2, #1
	lsl r0, r0, #0x18
	lsr r2, r0, #0x18
_0209184E:
	mov r0, ip
	add r0, r0, #1
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	mov ip, r0
	cmp r0, #0x15
	blo _020917E4
_0209185C:
	add r0, r7, #0
	bl FreeToHeap
	add r0, r4, #0
	add sp, #0x18
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_02091868: .word 0x0000FFFF
	thumb_func_end sub_0209176C

	thumb_func_start sub_0209186C
sub_0209186C: ; 0x0209186C
	ldrh r1, [r0]
	ldr r0, _0209187C ; =0x0000FFFF
	cmp r1, r0
	beq _02091878
	mov r0, #1
	bx lr
_02091878:
	mov r0, #0
	bx lr
	.balign 4, 0
_0209187C: .word 0x0000FFFF
	thumb_func_end sub_0209186C

	thumb_func_start sub_02091880
sub_02091880: ; 0x02091880
	push {r4, r5, r6, lr}
	add r5, r1, #0
	ldr r1, _020918B8 ; =0x0000195C
	add r6, r0, #0
	bl AllocFromHeap
	add r4, r0, #0
	add r0, r6, #0
	str r5, [r4]
	bl EasyChatManager_new
	str r0, [r4, #4]
	mov r3, #0
	ldr r0, _020918BC ; =0x0000189E
	add r2, r3, #0
_0209189E:
	add r1, r4, r3
	add r3, r3, #1
	strb r2, [r1, r0]
	cmp r3, #0xbb
	blt _0209189E
	add r0, r4, #0
	bl sub_020918D4
	add r0, r4, #0
	bl sub_02091B44
	add r0, r4, #0
	pop {r4, r5, r6, pc}
	.balign 4, 0
_020918B8: .word 0x0000195C
_020918BC: .word 0x0000189E
	thumb_func_end sub_02091880

	thumb_func_start sub_020918C0
sub_020918C0: ; 0x020918C0
	push {r4, lr}
	add r4, r0, #0
	beq _020918D2
	ldr r0, [r4, #4]
	bl EasyChatManager_delete
	add r0, r4, #0
	bl FreeToHeap
_020918D2:
	pop {r4, pc}
	thumb_func_end sub_020918C0

	thumb_func_start sub_020918D4
sub_020918D4: ; 0x020918D4
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	mov r4, #0
	str r0, [sp]
	add r7, r0, #0
	str r0, [sp, #8]
	add r0, #0x68
	ldr r5, _02091910 ; =0x02107028
	str r4, [sp, #4]
	str r0, [sp, #8]
_020918E8:
	ldr r3, [sp, #8]
	str r4, [r7, #0x38]
	lsl r6, r4, #1
	add r3, r3, r6
	ldr r0, [sp]
	ldr r1, [r5, #4]
	ldr r2, [r5, #8]
	ldr r6, [r5]
	blx r6
	str r0, [r7, #8]
	add r4, r4, r0
	ldr r0, [sp, #4]
	add r7, r7, #4
	add r0, r0, #1
	add r5, #0xc
	str r0, [sp, #4]
	cmp r0, #0xc
	blt _020918E8
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
	.balign 4, 0
_02091910: .word 0x02107028
	thumb_func_end sub_020918D4

	thumb_func_start sub_02091914
sub_02091914: ; 0x02091914
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	str r0, [sp]
	ldr r0, [r0]
	str r2, [sp, #4]
	add r5, r1, #0
	add r4, r3, #0
	mov r6, #0
	bl sub_02090D7C
	str r0, [sp, #8]
	ldr r0, [sp, #4]
	add r7, r6, #0
	cmp r0, #0
	bls _0209196A
_02091932:
	ldrh r1, [r5]
	ldr r0, [sp, #8]
	bl Pokedex_CheckMonSeenFlag
	cmp r0, #0
	beq _02091960
	ldrh r3, [r5]
	ldr r0, [sp]
	mov r2, #7
	lsr r1, r3, #3
	add r1, r0, r1
	ldr r0, _02091970 ; =0x0000189E
	and r3, r2
	mov r2, #1
	ldrb r0, [r1, r0]
	lsl r2, r3
	orr r2, r0
	ldr r0, _02091970 ; =0x0000189E
	add r6, r6, #1
	strb r2, [r1, r0]
	ldrh r0, [r5]
	strh r0, [r4]
	add r4, r4, #2
_02091960:
	ldr r0, [sp, #4]
	add r7, r7, #1
	add r5, r5, #2
	cmp r7, r0
	blo _02091932
_0209196A:
	add r0, r6, #0
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
	.balign 4, 0
_02091970: .word 0x0000189E
	thumb_func_end sub_02091914

	thumb_func_start sub_02091974
sub_02091974: ; 0x02091974
	push {r3, r4, r5, r6, r7, lr}
	str r0, [sp]
	ldr r0, [r0]
	add r5, r1, #0
	add r7, r2, #0
	add r4, r3, #0
	bl sub_02090D84
	cmp r0, #0
	beq _020919BA
	mov r2, #0
	cmp r7, #0
	bls _020919B6
_0209198E:
	ldrh r6, [r5]
	ldr r0, [sp]
	mov r3, #7
	lsr r1, r6, #3
	add r1, r0, r1
	ldr r0, _020919C0 ; =0x0000189E
	and r6, r3
	mov r3, #1
	ldrb r0, [r1, r0]
	lsl r3, r6
	orr r3, r0
	ldr r0, _020919C0 ; =0x0000189E
	add r2, r2, #1
	strb r3, [r1, r0]
	ldrh r0, [r5]
	add r5, r5, #2
	strh r0, [r4]
	add r4, r4, #2
	cmp r2, r7
	blo _0209198E
_020919B6:
	add r0, r7, #0
	pop {r3, r4, r5, r6, r7, pc}
_020919BA:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
	nop
_020919C0: .word 0x0000189E
	thumb_func_end sub_02091974

	thumb_func_start sub_020919C4
sub_020919C4: ; 0x020919C4
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x10
	str r0, [sp]
	ldr r0, [r0]
	add r5, r1, #0
	str r2, [sp, #4]
	add r4, r3, #0
	bl sub_02090D80
	str r0, [sp, #0xc]
	ldr r0, _02091A30 ; =0x00000122
	mov r1, #0
	bl GetECWordIndexByPair
	str r0, [sp, #8]
	mov r7, #0
	ldr r0, [sp, #4]
	add r6, r7, #0
	cmp r0, #0
	bls _02091A28
_020919EC:
	ldrh r2, [r5]
	ldr r1, [sp, #8]
	ldr r0, [sp, #0xc]
	sub r1, r2, r1
	bl sub_02015C3C
	cmp r0, #0
	beq _02091A1E
	ldrh r3, [r5]
	ldr r0, [sp]
	mov r2, #7
	lsr r1, r3, #3
	add r1, r0, r1
	ldr r0, _02091A34 ; =0x0000189E
	and r3, r2
	mov r2, #1
	ldrb r0, [r1, r0]
	lsl r2, r3
	orr r2, r0
	ldr r0, _02091A34 ; =0x0000189E
	add r6, r6, #1
	strb r2, [r1, r0]
	ldrh r0, [r5]
	strh r0, [r4]
	add r4, r4, #2
_02091A1E:
	ldr r0, [sp, #4]
	add r7, r7, #1
	add r5, r5, #2
	cmp r7, r0
	blo _020919EC
_02091A28:
	add r0, r6, #0
	add sp, #0x10
	pop {r3, r4, r5, r6, r7, pc}
	nop
_02091A30: .word 0x00000122
_02091A34: .word 0x0000189E
	thumb_func_end sub_020919C4

	thumb_func_start sub_02091A38
sub_02091A38: ; 0x02091A38
	push {r4, r5, r6, r7, lr}
	sub sp, #0x14
	str r0, [sp]
	ldr r0, [r0]
	add r5, r1, #0
	str r2, [sp, #4]
	add r4, r3, #0
	bl sub_02090D80
	str r0, [sp, #0x10]
	ldr r0, _02091AB8 ; =0x0000011F
	mov r1, #0
	bl GetECWordIndexByPair
	add r6, r0, #0
	add r0, r6, #5
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	str r0, [sp, #0xc]
	mov r7, #0
	ldr r0, [sp, #4]
	str r7, [sp, #8]
	cmp r0, #0
	bls _02091AB0
_02091A68:
	ldrh r1, [r5]
	cmp r1, r6
	blo _02091A80
	ldr r0, [sp, #0xc]
	cmp r1, r0
	bhi _02091A80
	ldr r0, [sp, #0x10]
	sub r1, r1, r6
	bl sub_02015CF0
	cmp r0, #0
	beq _02091AA2
_02091A80:
	ldrh r3, [r5]
	ldr r0, [sp]
	mov r2, #7
	lsr r1, r3, #3
	add r1, r0, r1
	ldr r0, _02091ABC ; =0x0000189E
	and r3, r2
	mov r2, #1
	ldrb r0, [r1, r0]
	lsl r2, r3
	orr r2, r0
	ldr r0, _02091ABC ; =0x0000189E
	add r7, r7, #1
	strb r2, [r1, r0]
	ldrh r0, [r5]
	strh r0, [r4]
	add r4, r4, #2
_02091AA2:
	ldr r0, [sp, #8]
	add r5, r5, #2
	add r1, r0, #1
	ldr r0, [sp, #4]
	str r1, [sp, #8]
	cmp r1, r0
	blo _02091A68
_02091AB0:
	add r0, r7, #0
	add sp, #0x14
	pop {r4, r5, r6, r7, pc}
	nop
_02091AB8: .word 0x0000011F
_02091ABC: .word 0x0000189E
	thumb_func_end sub_02091A38

	thumb_func_start sub_02091AC0
sub_02091AC0: ; 0x02091AC0
	push {r3, r4, r5, r6, r7, lr}
	add r6, r0, #0
	mov r0, #0
	mov lr, r2
	mov ip, r0
	mov r0, lr
	add r4, r1, #0
	add r7, r3, #0
	cmp r0, #0
	bls _02091B36
_02091AD4:
	ldrh r2, [r4]
	ldr r0, _02091B3C ; =0x0000FFFE
	cmp r2, r0
	bne _02091B0A
	add r0, r4, #2
	add r4, r4, #4
	ldrh r2, [r0]
	ldrh r0, [r4]
	cmp r2, #0
	strh r0, [r7]
	beq _02091B2A
_02091AEA:
	ldrh r5, [r4]
	mov r3, #7
	add r4, r4, #2
	lsr r0, r5, #3
	add r1, r6, r0
	ldr r0, _02091B40 ; =0x0000189E
	and r5, r3
	mov r3, #1
	ldrb r0, [r1, r0]
	lsl r3, r5
	orr r3, r0
	ldr r0, _02091B40 ; =0x0000189E
	sub r2, r2, #1
	strb r3, [r1, r0]
	bne _02091AEA
	b _02091B2A
_02091B0A:
	lsr r0, r2, #3
	ldr r1, _02091B40 ; =0x0000189E
	add r0, r6, r0
	ldrb r3, [r0, r1]
	mov r1, #7
	mov r5, #1
	and r1, r2
	add r2, r5, #0
	lsl r2, r1
	ldr r1, _02091B40 ; =0x0000189E
	orr r2, r3
	strb r2, [r0, r1]
	ldrh r0, [r4]
	add r4, r4, #2
	strh r0, [r7]
	add r7, r7, #2
_02091B2A:
	mov r0, ip
	add r1, r0, #1
	mov r0, lr
	mov ip, r1
	cmp r1, r0
	blo _02091AD4
_02091B36:
	mov r0, lr
	pop {r3, r4, r5, r6, r7, pc}
	nop
_02091B3C: .word 0x0000FFFE
_02091B40: .word 0x0000189E
	thumb_func_end sub_02091AC0

	thumb_func_start sub_02091B44
sub_02091B44: ; 0x02091B44
	push {r3, r4, r5, r6, r7, lr}
	add r7, r0, #0
	mov r4, #0
	ldr r6, _02091B80 ; =0x02106C9C
	str r4, [sp]
	add r5, r7, #0
_02091B50:
	ldr r0, _02091B84 ; =0x00000C84
	mov r2, #0xcf
	str r4, [r5, r0]
	lsl r2, r2, #4
	ldr r1, [r6]
	add r0, r7, #0
	add r2, r7, r2
	add r3, r4, #0
	bl sub_02091B8C
	ldr r1, _02091B88 ; =0x00000C18
	add r6, r6, #4
	str r0, [r5, r1]
	add r0, r1, #0
	ldr r0, [r5, r0]
	add r5, r5, #4
	add r4, r4, r0
	ldr r0, [sp]
	add r0, r0, #1
	str r0, [sp]
	cmp r0, #0x1b
	blo _02091B50
	pop {r3, r4, r5, r6, r7, pc}
	nop
_02091B80: .word 0x02106C9C
_02091B84: .word 0x00000C84
_02091B88: .word 0x00000C18
	thumb_func_end sub_02091B44

	thumb_func_start sub_02091B8C
sub_02091B8C: ; 0x02091B8C
	push {r3, r4, r5, r6, r7, lr}
	add r7, r1, #0
	add r6, r0, #0
	str r2, [sp]
	mov r0, #0
	mov ip, r0
	ldrh r2, [r7]
	ldr r0, _02091C2C ; =0x0000FFFF
	mov lr, r3
	cmp r2, r0
	beq _02091C28
_02091BA2:
	ldr r0, _02091C30 ; =0x0000FFFE
	cmp r2, r0
	bne _02091BF4
	add r0, r7, #2
	ldrh r5, [r0]
	add r7, r7, #4
	mov r3, #0
	cmp r5, #0
	bls _02091BEE
	add r4, r7, #0
_02091BB6:
	ldrh r2, [r4]
	mov r0, #7
	mov r1, #1
	and r0, r2
	lsl r1, r0
	lsr r0, r2, #3
	add r2, r6, r0
	ldr r0, _02091C34 ; =0x0000189E
	ldrb r0, [r2, r0]
	tst r0, r1
	beq _02091BE6
	lsl r0, r3, #1
	ldrh r1, [r7, r0]
	mov r0, lr
	lsl r2, r0, #1
	mov r0, lr
	add r0, r0, #1
	mov lr, r0
	ldr r0, [sp]
	strh r1, [r0, r2]
	mov r0, ip
	add r0, r0, #1
	mov ip, r0
	b _02091BEE
_02091BE6:
	add r3, r3, #1
	add r4, r4, #2
	cmp r3, r5
	blo _02091BB6
_02091BEE:
	lsl r0, r5, #1
	add r7, r7, r0
	b _02091C20
_02091BF4:
	mov r1, #1
	mov r0, #7
	and r0, r2
	add r3, r1, #0
	lsl r3, r0
	lsr r0, r2, #3
	add r1, r6, r0
	ldr r0, _02091C34 ; =0x0000189E
	ldrb r0, [r1, r0]
	tst r0, r3
	beq _02091C1E
	mov r1, lr
	add r1, r1, #1
	mov r0, lr
	mov lr, r1
	ldr r1, [sp]
	lsl r0, r0, #1
	strh r2, [r1, r0]
	mov r0, ip
	add r0, r0, #1
	mov ip, r0
_02091C1E:
	add r7, r7, #2
_02091C20:
	ldrh r2, [r7]
	ldr r0, _02091C2C ; =0x0000FFFF
	cmp r2, r0
	bne _02091BA2
_02091C28:
	mov r0, ip
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_02091C2C: .word 0x0000FFFF
_02091C30: .word 0x0000FFFE
_02091C34: .word 0x0000189E
	thumb_func_end sub_02091B8C

	thumb_func_start sub_02091C38
sub_02091C38: ; 0x02091C38
	lsl r1, r1, #2
	add r0, r0, r1
	ldr r0, [r0, #8]
	bx lr
	thumb_func_end sub_02091C38

	thumb_func_start sub_02091C40
sub_02091C40: ; 0x02091C40
	push {r4, lr}
	add r4, r0, #0
	lsl r1, r1, #2
	add r1, r4, r1
	ldr r1, [r1, #0x38]
	ldr r0, [r4, #4]
	add r1, r1, r2
	lsl r1, r1, #1
	add r1, r4, r1
	add r1, #0x68
	ldrh r1, [r1]
	add r2, r3, #0
	bl EasyChatManager_ReadWordIntoString
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_02091C40

	thumb_func_start sub_02091C60
sub_02091C60: ; 0x02091C60
	lsl r1, r1, #2
	add r1, r0, r1
	ldr r1, [r1, #0x38]
	add r1, r1, r2
	lsl r1, r1, #1
	add r0, r0, r1
	add r0, #0x68
	ldrh r0, [r0]
	bx lr
	.balign 4, 0
	thumb_func_end sub_02091C60

	thumb_func_start sub_02091C74
sub_02091C74: ; 0x02091C74
	lsl r1, r1, #2
	add r1, r0, r1
	ldr r0, _02091C80 ; =0x00000C18
	ldr r0, [r1, r0]
	bx lr
	nop
_02091C80: .word 0x00000C18
	thumb_func_end sub_02091C74

	thumb_func_start sub_02091C84
sub_02091C84: ; 0x02091C84
	push {r4, r5, r6, lr}
	add r4, r3, #0
	add r5, r0, #0
	lsl r3, r1, #2
	add r6, r5, r3
	ldr r3, _02091CA8 ; =0x00000C18
	ldr r3, [r6, r3]
	cmp r3, #0
	beq _02091CA4
	bl sub_02091CAC
	add r1, r0, #0
	ldr r0, [r5, #4]
	add r2, r4, #0
	bl EasyChatManager_ReadWordIntoString
_02091CA4:
	pop {r4, r5, r6, pc}
	nop
_02091CA8: .word 0x00000C18
	thumb_func_end sub_02091C84

	thumb_func_start sub_02091CAC
sub_02091CAC: ; 0x02091CAC
	push {r3, r4}
	lsl r1, r1, #2
	ldr r3, _02091CD4 ; =0x00000C18
	add r4, r0, r1
	ldr r1, [r4, r3]
	cmp r1, #0
	beq _02091CCE
	add r1, r3, #0
	add r1, #0x6c
	ldr r1, [r4, r1]
	add r3, #0xd8
	add r1, r2, r1
	lsl r1, r1, #1
	add r0, r0, r1
	ldrh r0, [r0, r3]
	pop {r3, r4}
	bx lr
_02091CCE:
	ldr r0, _02091CD8 ; =0x0000FFFF
	pop {r3, r4}
	bx lr
	.balign 4, 0
_02091CD4: .word 0x00000C18
_02091CD8: .word 0x0000FFFF
	thumb_func_end sub_02091CAC

	thumb_func_start sub_02091CDC
sub_02091CDC: ; 0x02091CDC
	push {r3, r4, r5, lr}
	mov r2, #2
	add r5, r0, #0
	mov r0, #3
	mov r1, #0x56
	lsl r2, r2, #0x10
	bl CreateHeap
	add r0, r5, #0
	mov r1, #0x38
	mov r2, #0x56
	bl OverlayManager_CreateAndGetData
	mov r1, #0
	mov r2, #0x38
	add r4, r0, #0
	bl memset
	mov r0, #0x56
	str r0, [r4]
	mov r0, #0
	str r0, [r4, #4]
	add r0, r5, #0
	bl OverlayManager_GetField18
	ldr r0, [r0, #8]
	str r0, [r4, #0x30]
	mov r0, #1
	pop {r3, r4, r5, pc}
	.balign 4, 0
	thumb_func_end sub_02091CDC

	thumb_func_start sub_02091D18
sub_02091D18: ; 0x02091D18
	push {r3, r4, r5, r6, lr}
	sub sp, #0xc
	add r5, r1, #0
	bl OverlayManager_GetData
	ldr r1, [r5]
	add r4, r0, #0
	mov r6, #0
	cmp r1, #3
	bhi _02091E20
	add r1, r1, r1
	add r1, pc
	ldrh r1, [r1, #6]
	lsl r1, r1, #0x10
	asr r1, r1, #0x10
	add pc, r1
_02091D38: ; jump table
	.short _02091D40 - _02091D38 - 2 ; case 0
	.short _02091DCE - _02091D38 - 2 ; case 1
	.short _02091DDC - _02091D38 - 2 ; case 2
	.short _02091E02 - _02091D38 - 2 ; case 3
_02091D40:
	mov r0, #0x3f
	lsl r0, r0, #4
	add r1, r6, #0
	bl sub_02005EB4
	add r0, r6, #0
	bl sub_02005AF8
	add r0, r6, #0
	bl sub_02004AD8
	add r0, r6, #0
	add r1, r0, #0
	bl sub_0200FBF4
	mov r0, #1
	add r1, r6, #0
	bl sub_0200FBF4
	add r0, r6, #0
	add r1, r0, #0
	bl sub_0201A0FC
	add r0, r6, #0
	add r1, r0, #0
	bl sub_0201A120
	bl sub_02022C54
	bl sub_02022CBC
	mov r2, #1
	lsl r2, r2, #0x1a
	ldr r1, [r2]
	ldr r0, _02091E28 ; =0xFFFFE0FF
	and r1, r0
	str r1, [r2]
	ldr r2, _02091E2C ; =0x04001000
	ldr r1, [r2]
	and r0, r1
	str r0, [r2]
	mov r0, #4
	mov r1, #8
	bl sub_0201A71C
	add r0, r4, #0
	bl sub_02091E60
	add r0, r4, #0
	bl sub_02091F78
	ldr r0, _02091E30 ; =sub_02091E54
	add r1, r4, #0
	bl sub_0201A0FC
	bl sub_02022D24
	mov r0, #6
	mov r1, #1
	str r0, [sp]
	str r1, [sp, #4]
	ldr r0, [r4]
	add r2, r1, #0
	str r0, [sp, #8]
	add r0, r6, #0
	add r3, r0, #0
	bl sub_0200FA24
	mov r0, #1
	str r0, [r5]
	b _02091E20
_02091DCE:
	bl sub_0200FB5C
	cmp r0, #1
	bne _02091E20
	mov r0, #2
	str r0, [r5]
	b _02091E20
_02091DDC:
	bl sub_02091FD4
	cmp r0, #1
	bne _02091E20
	mov r0, #6
	str r0, [sp]
	mov r0, #1
	str r0, [sp, #4]
	ldr r0, [r4]
	str r0, [sp, #8]
	add r0, r6, #0
	add r1, r0, #0
	add r2, r0, #0
	add r3, r0, #0
	bl sub_0200FA24
	mov r0, #3
	str r0, [r5]
	b _02091E20
_02091E02:
	bl sub_0200FB5C
	cmp r0, #1
	bne _02091E20
	add r0, r4, #0
	bl sub_02091FC0
	add r0, r4, #0
	bl sub_02091F24
	add r0, r6, #0
	add r1, r0, #0
	bl sub_0201A0FC
	mov r6, #1
_02091E20:
	add r0, r6, #0
	add sp, #0xc
	pop {r3, r4, r5, r6, pc}
	nop
_02091E28: .word 0xFFFFE0FF
_02091E2C: .word 0x04001000
_02091E30: .word sub_02091E54
	thumb_func_end sub_02091D18

	thumb_func_start sub_02091E34
sub_02091E34: ; 0x02091E34
	push {r3, r4, r5, lr}
	add r5, r0, #0
	bl OverlayManager_GetData
	ldr r4, [r0]
	add r0, r5, #0
	bl OverlayManager_FreeData
	add r0, r4, #0
	bl DestroyHeap
	mov r0, #0
	bl OS_ResetSystem
	mov r0, #1
	pop {r3, r4, r5, pc}
	thumb_func_end sub_02091E34

	thumb_func_start sub_02091E54
sub_02091E54: ; 0x02091E54
	ldr r3, _02091E5C ; =sub_0201EEB4
	ldr r0, [r0, #0x14]
	bx r3
	nop
_02091E5C: .word sub_0201EEB4
	thumb_func_end sub_02091E54

	thumb_func_start sub_02091E60
sub_02091E60: ; 0x02091E60
	push {r4, r5, lr}
	sub sp, #0x5c
	ldr r5, _02091F0C ; =0x021081E4
	add r4, r0, #0
	add r3, sp, #0x34
	mov r2, #5
_02091E6C:
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	sub r2, r2, #1
	bne _02091E6C
	add r0, sp, #0x34
	bl GX_SetBanks
	ldr r0, [r4]
	bl sub_0201AC88
	add r3, sp, #0x24
	ldr r5, _02091F10 ; =0x021081B8
	str r0, [r4, #0x14]
	add r2, r3, #0
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	add r0, r2, #0
	bl sub_0201ACB0
	ldr r5, _02091F14 ; =0x021081C8
	add r3, sp, #8
	ldmia r5!, {r0, r1}
	add r2, r3, #0
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldr r0, [r5]
	mov r1, #0
	str r0, [r3]
	ldr r0, [r4, #0x14]
	add r3, r1, #0
	bl sub_0201B1E4
	ldr r0, [r4, #0x14]
	mov r1, #0
	bl sub_0201CAE0
	mov r1, #0
	str r1, [sp]
	ldr r0, [r4]
	ldr r2, _02091F18 ; =0x000001E2
	str r0, [sp, #4]
	ldr r0, [r4, #0x14]
	mov r3, #2
	bl sub_0200E644
	mov r1, #0
	str r1, [sp]
	ldr r0, [r4]
	ldr r2, _02091F1C ; =0x000001D9
	str r0, [sp, #4]
	ldr r0, [r4, #0x14]
	mov r3, #3
	bl sub_0200E3DC
	ldr r2, [r4]
	mov r0, #0
	mov r1, #0x20
	bl sub_02003030
	mov r0, #0
	ldr r3, [r4]
	mov r1, #0x20
	add r2, r0, #0
	bl sub_0201C1C4
	ldr r1, _02091F20 ; =0x00006C21
	mov r0, #0
	bl sub_0201C2D8
	ldr r1, _02091F20 ; =0x00006C21
	mov r0, #4
	bl sub_0201C2D8
	add sp, #0x5c
	pop {r4, r5, pc}
	.balign 4, 0
_02091F0C: .word 0x021081E4
_02091F10: .word 0x021081B8
_02091F14: .word 0x021081C8
_02091F18: .word 0x000001E2
_02091F1C: .word 0x000001D9
_02091F20: .word 0x00006C21
	thumb_func_end sub_02091E60

	thumb_func_start sub_02091F24
sub_02091F24: ; 0x02091F24
	push {r4, lr}
	add r4, r0, #0
	mov r0, #0
	add r1, r0, #0
	bl sub_0201BC28
	mov r0, #1
	mov r1, #0
	bl sub_0201BC28
	mov r0, #2
	mov r1, #0
	bl sub_0201BC28
	mov r0, #3
	mov r1, #0
	bl sub_0201BC28
	mov r0, #4
	mov r1, #0
	bl sub_0201BC28
	mov r0, #5
	mov r1, #0
	bl sub_0201BC28
	mov r0, #6
	mov r1, #0
	bl sub_0201BC28
	mov r0, #7
	mov r1, #0
	bl sub_0201BC28
	ldr r0, [r4, #0x14]
	mov r1, #0
	bl sub_0201BB4C
	ldr r0, [r4, #0x14]
	bl FreeToHeap
	pop {r4, pc}
	thumb_func_end sub_02091F24

	thumb_func_start sub_02091F78
sub_02091F78: ; 0x02091F78
	push {r4, lr}
	sub sp, #8
	add r4, r0, #0
	ldr r3, [r4]
	mov r0, #1
	mov r1, #0x1b
	mov r2, #7
	bl NewMsgDataFromNarc
	str r0, [r4, #0x18]
	bl sub_02020080
	mov r0, #0
	str r0, [r4, #8]
	add r1, r4, #0
	ldr r0, [r4, #0x14]
	ldr r2, _02091FBC ; =0x021081A8
	add r1, #0x1c
	bl AddWindow
	mov r0, #0xd8
	str r0, [sp]
	mov r0, #0x20
	mov r2, #0
	add r4, #0x1c
	str r0, [sp, #4]
	add r0, r4, #0
	mov r1, #0xf
	add r3, r2, #0
	bl FillWindowPixelRect
	add sp, #8
	pop {r4, pc}
	nop
_02091FBC: .word 0x021081A8
	thumb_func_end sub_02091F78

	thumb_func_start sub_02091FC0
sub_02091FC0: ; 0x02091FC0
	push {r4, lr}
	add r4, r0, #0
	add r0, #0x1c
	bl RemoveWindow
	ldr r0, [r4, #0x18]
	bl DestroyMsgData
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_02091FC0

	thumb_func_start sub_02091FD4
sub_02091FD4: ; 0x02091FD4
	push {r3, r4, r5, lr}
	sub sp, #8
	add r4, r0, #0
	ldr r1, [r4, #4]
	mov r5, #0
	cmp r1, #6
	bhi _020920CC
	add r1, r1, r1
	add r1, pc
	ldrh r1, [r1, #6]
	lsl r1, r1, #0x10
	asr r1, r1, #0x10
	add pc, r1
_02091FEE: ; jump table
	.short _02091FFC - _02091FEE - 2 ; case 0
	.short _02092026 - _02091FEE - 2 ; case 1
	.short _02092046 - _02091FEE - 2 ; case 2
	.short _02092070 - _02091FEE - 2 ; case 3
	.short _02092090 - _02091FEE - 2 ; case 4
	.short _020920B0 - _02091FEE - 2 ; case 5
	.short _020920C2 - _02091FEE - 2 ; case 6
_02091FFC:
	add r1, r5, #0
	mov r2, #1
	mov r3, #4
	bl sub_020920E0
	cmp r0, #1
	bne _020920CC
	mov r0, #1
	str r0, [sp]
	ldr r0, [r4]
	ldr r1, _020920D4 ; =0x021081B0
	str r0, [sp, #4]
	ldr r0, [r4, #0x14]
	ldr r2, _020920D8 ; =0x000001D9
	mov r3, #3
	bl CreateYesNoMenu
	str r0, [r4, #0x2c]
	mov r0, #1
	str r0, [r4, #4]
	b _020920CC
_02092026:
	ldr r0, [r4, #0x2c]
	ldr r1, [r4]
	bl sub_02001FDC
	cmp r0, #0
	beq _0209203A
	sub r1, r5, #2
	cmp r0, r1
	beq _02092040
	b _020920CC
_0209203A:
	mov r0, #2
	str r0, [r4, #4]
	b _020920CC
_02092040:
	mov r0, #6
	str r0, [r4, #4]
	b _020920CC
_02092046:
	mov r1, #1
	add r2, r1, #0
	mov r3, #4
	bl sub_020920E0
	cmp r0, #1
	bne _020920CC
	mov r0, #1
	str r0, [sp]
	ldr r0, [r4]
	ldr r1, _020920D4 ; =0x021081B0
	str r0, [sp, #4]
	ldr r0, [r4, #0x14]
	ldr r2, _020920D8 ; =0x000001D9
	mov r3, #3
	bl CreateYesNoMenu
	str r0, [r4, #0x2c]
	mov r0, #3
	str r0, [r4, #4]
	b _020920CC
_02092070:
	ldr r0, [r4, #0x2c]
	ldr r1, [r4]
	bl sub_02001FDC
	cmp r0, #0
	beq _02092084
	sub r1, r5, #2
	cmp r0, r1
	beq _0209208A
	b _020920CC
_02092084:
	mov r0, #4
	str r0, [r4, #4]
	b _020920CC
_0209208A:
	mov r0, #6
	str r0, [r4, #4]
	b _020920CC
_02092090:
	mov r1, #2
	mov r2, #1
	add r3, r5, #0
	bl sub_020920E0
	cmp r0, #1
	bne _020920CC
	add r0, r4, #0
	ldr r1, _020920DC ; =0x000001E2
	add r0, #0x1c
	bl sub_0200F0AC
	str r0, [r4, #0x34]
	mov r0, #5
	str r0, [r4, #4]
	b _020920CC
_020920B0:
	ldr r0, [r4, #0x30]
	bl sub_020272F4
	ldr r0, [r4, #0x34]
	bl sub_0200F450
	mov r0, #6
	str r0, [r4, #4]
	b _020920CC
_020920C2:
	ldr r0, [r4, #0x14]
	add r1, r5, #0
	bl sub_0201CAE0
	mov r5, #1
_020920CC:
	add r0, r5, #0
	add sp, #8
	pop {r3, r4, r5, pc}
	nop
_020920D4: .word 0x021081B0
_020920D8: .word 0x000001D9
_020920DC: .word 0x000001E2
	thumb_func_end sub_02091FD4

	thumb_func_start sub_020920E0
sub_020920E0: ; 0x020920E0
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	add r5, r0, #0
	ldr r0, [r5, #8]
	add r7, r1, #0
	add r4, r3, #0
	mov r6, #0
	cmp r0, #0
	beq _020920FC
	cmp r0, #1
	beq _02092164
	cmp r0, #2
	beq _02092180
	b _02092194
_020920FC:
	mov r0, #0xd8
	str r0, [sp]
	mov r0, #0x20
	str r0, [sp, #4]
	add r0, r5, #0
	add r0, #0x1c
	mov r1, #0xf
	add r2, r6, #0
	add r3, r6, #0
	bl FillWindowPixelRect
	add r0, r5, #0
	ldr r2, _0209219C ; =0x000001E2
	add r0, #0x1c
	add r1, r6, #0
	mov r3, #2
	bl sub_0200E998
	mov r0, #1
	ldr r1, [r5]
	lsl r0, r0, #0xa
	bl String_ctor
	str r0, [r5, #0x10]
	ldr r0, [r5, #0x18]
	ldr r2, [r5, #0x10]
	add r1, r7, #0
	bl ReadMsgDataIntoString
	add r3, r6, #0
	str r3, [sp]
	str r4, [sp, #4]
	str r3, [sp, #8]
	add r0, r5, #0
	ldr r2, [r5, #0x10]
	add r0, #0x1c
	mov r1, #1
	bl AddTextPrinterParameterized
	str r0, [r5, #0xc]
	cmp r4, #0
	bne _0209215C
	ldr r0, [r5, #0x10]
	bl String_dtor
	ldr r0, [r5, #8]
	add r0, r0, #1
	str r0, [r5, #8]
_0209215C:
	ldr r0, [r5, #8]
	add r0, r0, #1
	str r0, [r5, #8]
	b _02092194
_02092164:
	ldr r0, [r5, #0xc]
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	bl sub_02020094
	cmp r0, #0
	bne _02092194
	ldr r0, [r5, #0x10]
	bl String_dtor
	ldr r0, [r5, #8]
	add r0, r0, #1
	str r0, [r5, #8]
	b _02092194
_02092180:
	cmp r2, #0
	bne _0209218E
	ldr r0, _020921A0 ; =gMain
	ldr r1, [r0, #0x48]
	mov r0, #1
	tst r0, r1
	beq _02092194
_0209218E:
	mov r0, #0
	str r0, [r5, #8]
	mov r6, #1
_02092194:
	add r0, r6, #0
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
	nop
_0209219C: .word 0x000001E2
_020921A0: .word gMain
	thumb_func_end sub_020920E0

	thumb_func_start sub_020921A4
sub_020921A4: ; 0x020921A4
	push {r3, r4, r5, lr}
	mov r2, #2
	add r5, r0, #0
	mov r0, #3
	mov r1, #0x56
	lsl r2, r2, #0x10
	bl CreateHeap
	add r0, r5, #0
	mov r1, #0x40
	mov r2, #0x56
	bl OverlayManager_CreateAndGetData
	mov r1, #0
	mov r2, #0x40
	add r4, r0, #0
	bl memset
	mov r0, #0x56
	str r0, [r4]
	mov r0, #0
	str r0, [r4, #4]
	add r0, r5, #0
	bl OverlayManager_GetField18
	ldr r0, [r0, #8]
	str r0, [r4, #0x34]
	mov r0, #1
	bl sub_02002B8C
	mov r0, #1
	pop {r3, r4, r5, pc}
	thumb_func_end sub_020921A4

	thumb_func_start sub_020921E4
sub_020921E4: ; 0x020921E4
	push {r4, r5, r6, lr}
	add r5, r1, #0
	bl OverlayManager_GetData
	ldr r1, [r5]
	add r6, r0, #0
	mov r4, #0
	cmp r1, #0
	beq _02092200
	cmp r1, #1
	beq _0209225A
	cmp r1, #2
	beq _02092268
	b _0209227C
_02092200:
	add r0, r4, #0
	add r1, r4, #0
	bl sub_0200FBF4
	mov r0, #1
	add r1, r4, #0
	bl sub_0200FBF4
	add r0, r4, #0
	add r1, r0, #0
	bl sub_0201A0FC
	add r0, r4, #0
	add r1, r0, #0
	bl sub_0201A120
	bl sub_02022C54
	bl sub_02022CBC
	mov r2, #1
	lsl r2, r2, #0x1a
	ldr r1, [r2]
	ldr r0, _02092280 ; =0xFFFFE0FF
	and r1, r0
	str r1, [r2]
	ldr r2, _02092284 ; =0x04001000
	ldr r1, [r2]
	and r0, r1
	str r0, [r2]
	mov r0, #4
	mov r1, #8
	bl sub_0201A71C
	add r0, r6, #0
	bl sub_020922B8
	add r0, r6, #0
	bl sub_020923CC
	bl sub_02022D24
	mov r0, #1
	str r0, [r5]
	b _0209227C
_0209225A:
	bl sub_02092428
	cmp r0, #1
	bne _0209227C
	mov r0, #2
	str r0, [r5]
	b _0209227C
_02092268:
	bl sub_02092414
	add r0, r6, #0
	bl sub_02092378
	add r0, r4, #0
	add r1, r0, #0
	bl sub_0201A0FC
	mov r4, #1
_0209227C:
	add r0, r4, #0
	pop {r4, r5, r6, pc}
	.balign 4, 0
_02092280: .word 0xFFFFE0FF
_02092284: .word 0x04001000
	thumb_func_end sub_020921E4

	.public ov74_0223B310

	thumb_func_start sub_02092288
sub_02092288: ; 0x02092288
	push {r3, r4, r5, lr}
	add r5, r0, #0
	bl OverlayManager_GetData
	ldr r4, [r0]
	mov r0, #0
	bl sub_02002B8C
	add r0, r5, #0
	bl OverlayManager_FreeData
	add r0, r4, #0
	bl DestroyHeap
	ldr r0, _020922B0 ; =SDK_OVERLAY_OVY_74_ID
	ldr r1, _020922B4 ; =ov74_0223B310
	bl RegisterMainOverlay
	mov r0, #1
	pop {r3, r4, r5, pc}
	.balign 4, 0
_020922B0: .word SDK_OVERLAY_OVY_74_ID
_020922B4: .word ov74_0223B310
	thumb_func_end sub_02092288

	thumb_func_start sub_020922B8
sub_020922B8: ; 0x020922B8
	push {r4, r5, lr}
	sub sp, #0x5c
	ldr r5, _02092364 ; =0x02108250
	add r4, r0, #0
	add r3, sp, #0x34
	mov r2, #5
_020922C4:
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	sub r2, r2, #1
	bne _020922C4
	add r0, sp, #0x34
	bl GX_SetBanks
	ldr r0, [r4]
	bl sub_0201AC88
	add r3, sp, #0x24
	ldr r5, _02092368 ; =0x02108224
	str r0, [r4, #0x18]
	add r2, r3, #0
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	add r0, r2, #0
	bl sub_0201ACB0
	ldr r5, _0209236C ; =0x02108234
	add r3, sp, #8
	ldmia r5!, {r0, r1}
	add r2, r3, #0
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldr r0, [r5]
	mov r1, #0
	str r0, [r3]
	ldr r0, [r4, #0x18]
	add r3, r1, #0
	bl sub_0201B1E4
	ldr r0, [r4, #0x18]
	mov r1, #0
	bl sub_0201CAE0
	mov r1, #0
	str r1, [sp]
	ldr r0, [r4]
	ldr r2, _02092370 ; =0x000001E2
	str r0, [sp, #4]
	ldr r0, [r4, #0x18]
	mov r3, #2
	bl sub_0200E644
	mov r1, #0
	str r1, [sp]
	ldr r0, [r4]
	ldr r2, _02092374 ; =0x000001D9
	str r0, [sp, #4]
	ldr r0, [r4, #0x18]
	mov r3, #3
	bl sub_0200E3DC
	ldr r2, [r4]
	mov r0, #0
	mov r1, #0x20
	bl sub_02003030
	mov r0, #0
	ldr r3, [r4]
	mov r1, #0x20
	add r2, r0, #0
	bl sub_0201C1C4
	mov r0, #0
	add r1, r0, #0
	bl sub_0201C2D8
	mov r0, #4
	mov r1, #0
	bl sub_0201C2D8
	add sp, #0x5c
	pop {r4, r5, pc}
	.balign 4, 0
_02092364: .word 0x02108250
_02092368: .word 0x02108224
_0209236C: .word 0x02108234
_02092370: .word 0x000001E2
_02092374: .word 0x000001D9
	thumb_func_end sub_020922B8

	thumb_func_start sub_02092378
sub_02092378: ; 0x02092378
	push {r4, lr}
	add r4, r0, #0
	mov r0, #0
	add r1, r0, #0
	bl sub_0201BC28
	mov r0, #1
	mov r1, #0
	bl sub_0201BC28
	mov r0, #2
	mov r1, #0
	bl sub_0201BC28
	mov r0, #3
	mov r1, #0
	bl sub_0201BC28
	mov r0, #4
	mov r1, #0
	bl sub_0201BC28
	mov r0, #5
	mov r1, #0
	bl sub_0201BC28
	mov r0, #6
	mov r1, #0
	bl sub_0201BC28
	mov r0, #7
	mov r1, #0
	bl sub_0201BC28
	ldr r0, [r4, #0x18]
	mov r1, #0
	bl sub_0201BB4C
	ldr r0, [r4, #0x18]
	bl FreeToHeap
	pop {r4, pc}
	thumb_func_end sub_02092378

	thumb_func_start sub_020923CC
sub_020923CC: ; 0x020923CC
	push {r4, lr}
	sub sp, #8
	add r4, r0, #0
	ldr r3, [r4]
	mov r0, #1
	mov r1, #0x1b
	mov r2, #0xe5
	bl NewMsgDataFromNarc
	str r0, [r4, #0x1c]
	bl sub_02020080
	mov r0, #0
	str r0, [r4, #0xc]
	add r1, r4, #0
	ldr r0, [r4, #0x18]
	ldr r2, _02092410 ; =0x0210821C
	add r1, #0x20
	bl AddWindow
	mov r0, #0xd8
	str r0, [sp]
	mov r0, #0x20
	mov r2, #0
	add r4, #0x20
	str r0, [sp, #4]
	add r0, r4, #0
	mov r1, #0xf
	add r3, r2, #0
	bl FillWindowPixelRect
	add sp, #8
	pop {r4, pc}
	nop
_02092410: .word 0x0210821C
	thumb_func_end sub_020923CC

	thumb_func_start sub_02092414
sub_02092414: ; 0x02092414
	push {r4, lr}
	add r4, r0, #0
	add r0, #0x20
	bl RemoveWindow
	ldr r0, [r4, #0x1c]
	bl DestroyMsgData
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_02092414

	thumb_func_start sub_02092428
sub_02092428: ; 0x02092428
	push {r4, r5, lr}
	sub sp, #0xc
	add r4, r0, #0
	ldr r1, [r4, #4]
	mov r5, #0
	cmp r1, #6
	bls _02092438
	b _02092562
_02092438:
	add r1, r1, r1
	add r1, pc
	ldrh r1, [r1, #6]
	lsl r1, r1, #0x10
	asr r1, r1, #0x10
	add pc, r1
_02092444: ; jump table
	.short _02092452 - _02092444 - 2 ; case 0
	.short _0209246A - _02092444 - 2 ; case 1
	.short _020924DC - _02092444 - 2 ; case 2
	.short _02092508 - _02092444 - 2 ; case 3
	.short _02092516 - _02092444 - 2 ; case 4
	.short _02092542 - _02092444 - 2 ; case 5
	.short _02092560 - _02092444 - 2 ; case 6
_02092452:
	ldr r0, [r4, #0x34]
	bl sub_020274D4
	str r0, [r4, #0x3c]
	cmp r0, #0
	bne _02092464
	mov r0, #6
	str r0, [r4, #4]
	b _02092562
_02092464:
	mov r0, #1
	str r0, [r4, #4]
	b _02092562
_0209246A:
	mov r1, #2
	str r1, [r4, #4]
	ldr r0, [r4, #0x3c]
	add r2, r0, #0
	tst r2, r1
	beq _02092482
	mov r1, #3
	bic r0, r1
	str r0, [r4, #0x3c]
	mov r0, #1
	str r0, [r4, #8]
	b _02092562
_02092482:
	mov r2, #1
	add r3, r0, #0
	tst r3, r2
	beq _02092492
	eor r0, r2
	str r0, [r4, #0x3c]
	str r5, [r4, #8]
	b _02092562
_02092492:
	mov r2, #8
	tst r2, r0
	beq _020924A4
	mov r1, #0xc
	bic r0, r1
	str r0, [r4, #0x3c]
	mov r0, #5
	str r0, [r4, #8]
	b _02092562
_020924A4:
	mov r2, #4
	add r3, r0, #0
	tst r3, r2
	beq _020924B4
	eor r0, r2
	str r0, [r4, #0x3c]
	str r2, [r4, #8]
	b _02092562
_020924B4:
	mov r2, #0x20
	tst r2, r0
	beq _020924C6
	mov r1, #0x30
	bic r0, r1
	str r0, [r4, #0x3c]
	mov r0, #3
	str r0, [r4, #8]
	b _02092562
_020924C6:
	mov r2, #0x10
	add r3, r0, #0
	tst r3, r2
	beq _020924D6
	eor r0, r2
	str r0, [r4, #0x3c]
	str r1, [r4, #8]
	b _02092562
_020924D6:
	mov r0, #6
	str r0, [r4, #4]
	b _02092562
_020924DC:
	ldr r1, _02092568 ; =0x00006C21
	add r0, r5, #0
	bl sub_0201C2D8
	ldr r1, _02092568 ; =0x00006C21
	mov r0, #4
	bl sub_0201C2D8
	mov r0, #6
	mov r1, #1
	str r0, [sp]
	str r1, [sp, #4]
	ldr r0, [r4]
	add r2, r1, #0
	str r0, [sp, #8]
	add r0, r5, #0
	add r3, r0, #0
	bl sub_0200FA24
	mov r0, #3
	str r0, [r4, #4]
	b _02092562
_02092508:
	bl sub_0200FB5C
	cmp r0, #1
	bne _02092562
	mov r0, #4
	str r0, [r4, #4]
	b _02092562
_02092516:
	ldr r1, [r4, #8]
	add r2, r5, #0
	mov r3, #4
	bl sub_0209256C
	cmp r0, #1
	bne _02092562
	mov r0, #6
	str r0, [sp]
	mov r0, #1
	str r0, [sp, #4]
	ldr r0, [r4]
	str r0, [sp, #8]
	add r0, r5, #0
	add r1, r0, #0
	add r2, r0, #0
	add r3, r0, #0
	bl sub_0200FA24
	mov r0, #5
	str r0, [r4, #4]
	b _02092562
_02092542:
	bl sub_0200FB5C
	cmp r0, #1
	bne _02092562
	add r0, r5, #0
	add r1, r0, #0
	bl sub_0201C2D8
	mov r0, #4
	add r1, r5, #0
	bl sub_0201C2D8
	mov r0, #1
	str r0, [r4, #4]
	b _02092562
_02092560:
	mov r5, #1
_02092562:
	add r0, r5, #0
	add sp, #0xc
	pop {r4, r5, pc}
	.balign 4, 0
_02092568: .word 0x00006C21
	thumb_func_end sub_02092428

	thumb_func_start sub_0209256C
sub_0209256C: ; 0x0209256C
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	add r5, r0, #0
	ldr r0, [r5, #0xc]
	add r7, r1, #0
	add r4, r3, #0
	mov r6, #0
	cmp r0, #0
	beq _02092588
	cmp r0, #1
	beq _020925F0
	cmp r0, #2
	beq _0209260C
	b _02092628
_02092588:
	mov r0, #0xd8
	str r0, [sp]
	mov r0, #0x20
	str r0, [sp, #4]
	add r0, r5, #0
	add r0, #0x20
	mov r1, #0xf
	add r2, r6, #0
	add r3, r6, #0
	bl FillWindowPixelRect
	add r0, r5, #0
	ldr r2, _02092630 ; =0x000001E2
	add r0, #0x20
	add r1, r6, #0
	mov r3, #2
	bl sub_0200E998
	mov r0, #1
	ldr r1, [r5]
	lsl r0, r0, #0xa
	bl String_ctor
	str r0, [r5, #0x14]
	ldr r0, [r5, #0x1c]
	ldr r2, [r5, #0x14]
	add r1, r7, #0
	bl ReadMsgDataIntoString
	add r3, r6, #0
	str r3, [sp]
	str r4, [sp, #4]
	str r3, [sp, #8]
	add r0, r5, #0
	ldr r2, [r5, #0x14]
	add r0, #0x20
	mov r1, #1
	bl AddTextPrinterParameterized
	str r0, [r5, #0x10]
	cmp r4, #0
	bne _020925E8
	ldr r0, [r5, #0x14]
	bl String_dtor
	ldr r0, [r5, #0xc]
	add r0, r0, #1
	str r0, [r5, #0xc]
_020925E8:
	ldr r0, [r5, #0xc]
	add r0, r0, #1
	str r0, [r5, #0xc]
	b _02092628
_020925F0:
	ldr r0, [r5, #0x10]
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	bl sub_02020094
	cmp r0, #0
	bne _02092628
	ldr r0, [r5, #0x14]
	bl String_dtor
	ldr r0, [r5, #0xc]
	add r0, r0, #1
	str r0, [r5, #0xc]
	b _02092628
_0209260C:
	cmp r2, #0
	bne _02092622
	ldr r0, _02092634 ; =gMain
	ldr r1, [r0, #0x48]
	mov r0, #1
	tst r0, r1
	bne _02092622
	ldr r0, _02092638 ; =gMain + 0x40
	ldrh r0, [r0, #0x24]
	cmp r0, #0
	beq _02092628
_02092622:
	mov r0, #0
	str r0, [r5, #0xc]
	mov r6, #1
_02092628:
	add r0, r6, #0
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
	nop
_02092630: .word 0x000001E2
_02092634: .word gMain
_02092638: .word gMain + 0x40
	thumb_func_end sub_0209256C

	thumb_func_start ShowSaveDataReadError
ShowSaveDataReadError: ; 0x0209263C
	push {r3, r4, r5, r6, lr}
	sub sp, #0x1c
	add r4, r0, #0
	mov r0, #0
	add r1, r0, #0
	bl sub_0200FBF4
	mov r0, #1
	mov r1, #0
	bl sub_0200FBF4
	mov r0, #0
	add r1, r0, #0
	bl sub_0201A0FC
	mov r0, #0
	add r1, r0, #0
	bl sub_0201A120
	bl sub_02022C54
	bl sub_02022CBC
	mov r2, #1
	lsl r2, r2, #0x1a
	ldr r1, [r2]
	ldr r0, _020927A0 ; =0xFFFFE0FF
	and r1, r0
	str r1, [r2]
	ldr r2, _020927A4 ; =0x04001000
	ldr r1, [r2]
	and r0, r1
	str r0, [r2]
	mov r0, #4
	mov r1, #8
	bl sub_0201A71C
	ldr r0, _020927A8 ; =gMain + 0x60
	mov r1, #0
	strb r1, [r0, #9]
	bl sub_02022D3C
	ldr r3, _020927AC ; =0x04000050
	mov r0, #0
	strh r0, [r3]
	ldr r2, _020927B0 ; =0x04001050
	sub r3, #0x50
	strh r0, [r2]
	ldr r1, [r3]
	ldr r0, _020927B4 ; =0xFFFF1FFF
	sub r2, #0x50
	and r1, r0
	str r1, [r3]
	ldr r1, [r2]
	and r0, r1
	str r0, [r2]
	ldr r0, _020927B8 ; =0x021082BC
	bl GX_SetBanks
	add r0, r4, #0
	bl sub_0201AC88
	add r5, r0, #0
	ldr r0, _020927BC ; =0x02108290
	bl sub_0201ACB0
	mov r1, #0
	ldr r2, _020927C0 ; =0x021082A0
	add r0, r5, #0
	add r3, r1, #0
	bl sub_0201B1E4
	add r0, r5, #0
	mov r1, #0
	bl sub_0201CAE0
	mov r1, #0
	str r1, [sp]
	ldr r2, _020927C4 ; =0x000001F7
	add r0, r5, #0
	mov r3, #2
	str r4, [sp, #4]
	bl sub_0200E3DC
	mov r0, #0
	mov r1, #0x20
	add r2, r4, #0
	bl sub_02003030
	mov r0, #0
	mov r1, #0x20
	add r2, r0, #0
	add r3, r4, #0
	bl sub_0201C1C4
	ldr r1, _020927C8 ; =0x00006C21
	mov r0, #0
	bl sub_0201C2D8
	ldr r1, _020927C8 ; =0x00006C21
	mov r0, #4
	bl sub_0201C2D8
	mov r0, #1
	mov r1, #0x1b
	mov r2, #8
	add r3, r4, #0
	bl NewMsgDataFromNarc
	add r6, r0, #0
	mov r0, #6
	lsl r0, r0, #6
	add r1, r4, #0
	bl String_ctor
	add r4, r0, #0
	bl sub_02020080
	ldr r2, _020927CC ; =0x02108288
	add r0, r5, #0
	add r1, sp, #0xc
	bl AddWindow
	mov r0, #0xd0
	str r0, [sp]
	mov r0, #0x90
	mov r2, #0
	str r0, [sp, #4]
	add r0, sp, #0xc
	mov r1, #0xf
	add r3, r2, #0
	bl FillWindowPixelRect
	ldr r2, _020927C4 ; =0x000001F7
	add r0, sp, #0xc
	mov r1, #0
	mov r3, #2
	bl sub_0200E580
	add r0, r6, #0
	mov r1, #0
	add r2, r4, #0
	bl ReadMsgDataIntoString
	mov r1, #0
	str r1, [sp]
	str r1, [sp, #4]
	add r0, sp, #0xc
	add r2, r4, #0
	add r3, r1, #0
	str r1, [sp, #8]
	bl AddTextPrinterParameterized
	add r0, r4, #0
	bl String_dtor
	bl sub_02022D24
	mov r0, #0
	bl sub_0200FBE8
	mov r0, #1
	bl sub_0200FBE8
	mov r0, #0
	mov r1, #0x3f
	mov r2, #3
	bl sub_0200B4F0
	mov r4, #1
_02092790:
	bl HandleDSLidAction
	add r0, r4, #0
	add r1, r4, #0
	bl OS_WaitIrq
	b _02092790
	nop
_020927A0: .word 0xFFFFE0FF
_020927A4: .word 0x04001000
_020927A8: .word gMain + 0x60
_020927AC: .word 0x04000050
_020927B0: .word 0x04001050
_020927B4: .word 0xFFFF1FFF
_020927B8: .word 0x021082BC
_020927BC: .word 0x02108290
_020927C0: .word 0x021082A0
_020927C4: .word 0x000001F7
_020927C8: .word 0x00006C21
_020927CC: .word 0x02108288
	thumb_func_end ShowSaveDataReadError

	thumb_func_start sub_020927D0
sub_020927D0: ; 0x020927D0
	push {r3, r4, r5, r6, lr}
	sub sp, #0x1c
	add r4, r0, #0
	mov r0, #0
	add r1, r0, #0
	bl sub_0200FBF4
	mov r0, #1
	mov r1, #0
	bl sub_0200FBF4
	mov r0, #0
	add r1, r0, #0
	bl sub_0201A0FC
	mov r0, #0
	add r1, r0, #0
	bl sub_0201A120
	bl sub_02022C54
	bl sub_02022CBC
	mov r2, #1
	lsl r2, r2, #0x1a
	ldr r1, [r2]
	ldr r0, _02092934 ; =0xFFFFE0FF
	and r1, r0
	str r1, [r2]
	ldr r2, _02092938 ; =0x04001000
	ldr r1, [r2]
	and r0, r1
	str r0, [r2]
	mov r0, #4
	mov r1, #8
	bl sub_0201A71C
	ldr r0, _0209293C ; =gMain + 0x60
	mov r1, #0
	strb r1, [r0, #9]
	bl sub_02022D3C
	ldr r3, _02092940 ; =0x04000050
	mov r0, #0
	strh r0, [r3]
	ldr r2, _02092944 ; =0x04001050
	sub r3, #0x50
	strh r0, [r2]
	ldr r1, [r3]
	ldr r0, _02092948 ; =0xFFFF1FFF
	sub r2, #0x50
	and r1, r0
	str r1, [r3]
	ldr r1, [r2]
	and r0, r1
	str r0, [r2]
	ldr r0, _0209294C ; =0x021082BC
	bl GX_SetBanks
	add r0, r4, #0
	bl sub_0201AC88
	add r5, r0, #0
	ldr r0, _02092950 ; =0x02108290
	bl sub_0201ACB0
	mov r1, #0
	ldr r2, _02092954 ; =0x021082A0
	add r0, r5, #0
	add r3, r1, #0
	bl sub_0201B1E4
	add r0, r5, #0
	mov r1, #0
	bl sub_0201CAE0
	mov r1, #0
	str r1, [sp]
	ldr r2, _02092958 ; =0x000001F7
	add r0, r5, #0
	mov r3, #2
	str r4, [sp, #4]
	bl sub_0200E3DC
	mov r0, #0
	mov r1, #0x20
	add r2, r4, #0
	bl sub_02003030
	mov r0, #0
	mov r1, #0x20
	add r2, r0, #0
	add r3, r4, #0
	bl sub_0201C1C4
	ldr r1, _0209295C ; =0x00006C21
	mov r0, #0
	bl sub_0201C2D8
	ldr r1, _0209295C ; =0x00006C21
	mov r0, #4
	bl sub_0201C2D8
	mov r0, #1
	mov r1, #0x1b
	mov r2, #8
	add r3, r4, #0
	bl NewMsgDataFromNarc
	add r6, r0, #0
	mov r0, #6
	lsl r0, r0, #6
	add r1, r4, #0
	bl String_ctor
	add r4, r0, #0
	bl sub_02020080
	ldr r2, _02092960 ; =0x02108288
	add r0, r5, #0
	add r1, sp, #0xc
	bl AddWindow
	mov r0, #0xd0
	str r0, [sp]
	mov r0, #0x90
	mov r2, #0
	str r0, [sp, #4]
	add r0, sp, #0xc
	mov r1, #0xf
	add r3, r2, #0
	bl FillWindowPixelRect
	ldr r2, _02092958 ; =0x000001F7
	add r0, sp, #0xc
	mov r1, #0
	mov r3, #2
	bl sub_0200E580
	add r0, r6, #0
	mov r1, #1
	add r2, r4, #0
	bl ReadMsgDataIntoString
	mov r1, #0
	str r1, [sp]
	str r1, [sp, #4]
	add r0, sp, #0xc
	add r2, r4, #0
	add r3, r1, #0
	str r1, [sp, #8]
	bl AddTextPrinterParameterized
	add r0, r4, #0
	bl String_dtor
	bl sub_02022D24
	mov r0, #0
	bl sub_0200FBE8
	mov r0, #1
	bl sub_0200FBE8
	mov r0, #0
	mov r1, #0x3f
	mov r2, #3
	bl sub_0200B4F0
	mov r4, #1
_02092924:
	bl HandleDSLidAction
	add r0, r4, #0
	add r1, r4, #0
	bl OS_WaitIrq
	b _02092924
	nop
_02092934: .word 0xFFFFE0FF
_02092938: .word 0x04001000
_0209293C: .word gMain + 0x60
_02092940: .word 0x04000050
_02092944: .word 0x04001050
_02092948: .word 0xFFFF1FFF
_0209294C: .word 0x021082BC
_02092950: .word 0x02108290
_02092954: .word 0x021082A0
_02092958: .word 0x000001F7
_0209295C: .word 0x00006C21
_02092960: .word 0x02108288
	thumb_func_end sub_020927D0

	thumb_func_start ShowSaveDataWriteError
ShowSaveDataWriteError: ; 0x02092964
	push {r4, r5, r6, r7, lr}
	sub sp, #0x1c
	add r4, r0, #0
	cmp r1, #0
	bne _02092972
	mov r6, #1
	b _02092974
_02092972:
	mov r6, #0
_02092974:
	mov r0, #0
	add r1, r0, #0
	bl sub_0200FBF4
	mov r0, #1
	mov r1, #0
	bl sub_0200FBF4
	bl sub_0201A0E0
	mov r0, #0
	add r1, r0, #0
	bl sub_0201A0FC
	mov r0, #0
	add r1, r0, #0
	bl sub_0201A120
	bl sub_02022C54
	bl sub_02022CBC
	mov r2, #1
	lsl r2, r2, #0x1a
	ldr r1, [r2]
	ldr r0, _02092AD4 ; =0xFFFFE0FF
	and r1, r0
	str r1, [r2]
	ldr r2, _02092AD8 ; =0x04001000
	ldr r1, [r2]
	and r0, r1
	str r0, [r2]
	mov r0, #4
	mov r1, #8
	bl sub_0201A71C
	ldr r0, _02092ADC ; =gMain + 0x60
	mov r1, #0
	strb r1, [r0, #9]
	bl sub_02022D3C
	ldr r3, _02092AE0 ; =0x04000050
	mov r1, #0
	strh r1, [r3]
	ldr r0, _02092AE4 ; =0x04001050
	sub r3, #0x50
	strh r1, [r0]
	ldr r2, [r3]
	ldr r1, _02092AE8 ; =0xFFFF1FFF
	sub r0, #0x50
	and r2, r1
	str r2, [r3]
	ldr r2, [r0]
	and r1, r2
	str r1, [r0]
	ldr r0, _02092AEC ; =0x02108318
	bl GX_SetBanks
	add r0, r4, #0
	bl sub_0201AC88
	add r5, r0, #0
	ldr r0, _02092AF0 ; =0x021082EC
	bl sub_0201ACB0
	mov r1, #0
	ldr r2, _02092AF4 ; =0x021082FC
	add r0, r5, #0
	add r3, r1, #0
	bl sub_0201B1E4
	add r0, r5, #0
	mov r1, #0
	bl sub_0201CAE0
	mov r1, #0
	str r1, [sp]
	ldr r2, _02092AF8 ; =0x000001F7
	add r0, r5, #0
	mov r3, #2
	str r4, [sp, #4]
	bl sub_0200E3DC
	mov r0, #0
	mov r1, #0x20
	add r2, r4, #0
	bl sub_02003030
	mov r0, #0
	mov r1, #0x20
	add r2, r0, #0
	add r3, r4, #0
	bl sub_0201C1C4
	ldr r1, _02092AFC ; =0x00006C21
	mov r0, #0
	bl sub_0201C2D8
	ldr r1, _02092AFC ; =0x00006C21
	mov r0, #4
	bl sub_0201C2D8
	mov r0, #1
	mov r1, #0x1b
	mov r2, #9
	add r3, r4, #0
	bl NewMsgDataFromNarc
	add r7, r0, #0
	mov r0, #6
	lsl r0, r0, #6
	add r1, r4, #0
	bl String_ctor
	add r4, r0, #0
	bl sub_02020080
	ldr r2, _02092B00 ; =0x021082E4
	add r0, r5, #0
	add r1, sp, #0xc
	bl AddWindow
	mov r0, #0xd0
	str r0, [sp]
	mov r0, #0x90
	mov r2, #0
	str r0, [sp, #4]
	add r0, sp, #0xc
	mov r1, #0xf
	add r3, r2, #0
	bl FillWindowPixelRect
	ldr r2, _02092AF8 ; =0x000001F7
	add r0, sp, #0xc
	mov r1, #0
	mov r3, #2
	bl sub_0200E580
	add r0, r7, #0
	add r1, r6, #0
	add r2, r4, #0
	bl ReadMsgDataIntoString
	mov r1, #0
	str r1, [sp]
	str r1, [sp, #4]
	add r0, sp, #0xc
	add r2, r4, #0
	add r3, r1, #0
	str r1, [sp, #8]
	bl AddTextPrinterParameterized
	add r0, r4, #0
	bl String_dtor
	bl sub_02022D24
	mov r0, #0
	bl sub_0200FBE8
	mov r0, #1
	bl sub_0200FBE8
	mov r0, #0
	mov r1, #0x3f
	mov r2, #3
	bl sub_0200B4F0
	mov r4, #1
_02092AC6:
	bl HandleDSLidAction
	add r0, r4, #0
	add r1, r4, #0
	bl OS_WaitIrq
	b _02092AC6
	.balign 4, 0
_02092AD4: .word 0xFFFFE0FF
_02092AD8: .word 0x04001000
_02092ADC: .word gMain + 0x60
_02092AE0: .word 0x04000050
_02092AE4: .word 0x04001050
_02092AE8: .word 0xFFFF1FFF
_02092AEC: .word 0x02108318
_02092AF0: .word 0x021082EC
_02092AF4: .word 0x021082FC
_02092AF8: .word 0x000001F7
_02092AFC: .word 0x00006C21
_02092B00: .word 0x021082E4
	thumb_func_end ShowSaveDataWriteError

	thumb_func_start sub_02092B04
sub_02092B04: ; 0x02092B04
	push {r4, r5, r6, lr}
	add r5, r0, #0
	bl sub_0205064C
	add r6, r0, #0
	add r0, r5, #0
	bl sub_02050650
	add r4, r0, #0
	ldr r0, _02092B3C ; =0x00000272
	ldrb r0, [r4, r0]
	cmp r0, #0x18
	beq _02092B24
	cmp r0, #0x19
	beq _02092B32
	b _02092B38
_02092B24:
	add r0, r6, #0
	add r1, r4, #0
	bl sub_02092B40
	ldr r1, _02092B3C ; =0x00000272
	strb r0, [r4, r1]
	b _02092B38
_02092B32:
	add r0, r5, #0
	bl sub_02092B7C
_02092B38:
	mov r0, #0
	pop {r4, r5, r6, pc}
	.balign 4, 0
_02092B3C: .word 0x00000272
	thumb_func_end sub_02092B04

	thumb_func_start sub_02092B40
sub_02092B40: ; 0x02092B40
	push {r3, r4, r5, lr}
	add r5, r0, #0
	add r4, r1, #0
	bl sub_020505A0
	cmp r0, #0
	beq _02092B52
	mov r0, #0x18
	pop {r3, r4, r5, pc}
_02092B52:
	mov r0, #0x2a
	lsl r0, r0, #4
	ldr r0, [r4, r0]
	cmp r0, #0
	beq _02092B6A
	ldr r0, [r4, #4]
	bl sub_0207791C
	mov r1, #0x2a
	lsl r1, r1, #4
	ldr r1, [r4, r1]
	strh r0, [r1, #2]
_02092B6A:
	ldr r0, [r4, #4]
	bl FreeToHeap
	add r0, r5, #0
	bl sub_020505C0
	mov r0, #0x19
	pop {r3, r4, r5, pc}
	.balign 4, 0
	thumb_func_end sub_02092B40

	thumb_func_start sub_02092B7C
sub_02092B7C: ; 0x02092B7C
	push {r4, r5, r6, lr}
	add r5, r0, #0
	bl sub_0205064C
	add r6, r0, #0
	add r0, r5, #0
	bl sub_02050650
	add r4, r0, #0
	add r0, r6, #0
	bl sub_020505C8
	cmp r0, #0
	beq _02092BAE
	mov r0, #1
	bl ov01_021E636C
	ldr r1, _02092BB0 ; =0x02256E2D
	add r0, r5, #0
	add r2, r4, #0
	bl sub_02050510
	ldr r0, _02092BB4 ; =0x00000272
	mov r1, #0x1a
	strb r1, [r4, r0]
_02092BAE:
	pop {r4, r5, r6, pc}
	.balign 4, 0
_02092BB0: .word 0x02256E2D
_02092BB4: .word 0x00000272
	thumb_func_end sub_02092B7C

	thumb_func_start sub_02092BB8
sub_02092BB8: ; 0x02092BB8
	push {r4, lr}
	mov r1, #4
	bl AllocFromHeap
	mov r1, #0
	mov r2, #2
	add r4, r0, #0
	bl sub_02092BD8
	add r0, r4, #0
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_02092BB8

	thumb_func_start sub_02092BD0
sub_02092BD0: ; 0x02092BD0
	ldr r3, _02092BD4 ; =FreeToHeap
	bx r3
	.balign 4, 0
_02092BD4: .word FreeToHeap
	thumb_func_end sub_02092BD0

	thumb_func_start sub_02092BD8
sub_02092BD8: ; 0x02092BD8
	strh r1, [r0]
	strh r2, [r0, #2]
	bx lr
	.balign 4, 0
	thumb_func_end sub_02092BD8

	thumb_func_start sub_02092BE0
sub_02092BE0: ; 0x02092BE0
	ldrh r0, [r0, #2]
	bx lr
	thumb_func_end sub_02092BE0

	thumb_func_start sub_02092BE4
sub_02092BE4: ; 0x02092BE4
	ldrh r0, [r0]
	bx lr
	thumb_func_end sub_02092BE4

	thumb_func_start sub_02092BE8
sub_02092BE8: ; 0x02092BE8
	push {r4, r5, r6, r7, lr}
	sub sp, #0x14
	add r5, r0, #0
	ldr r0, [r5, #0xc]
	add r4, r1, #0
	str r2, [sp]
	bl SavArray_Flags_get
	ldr r0, [r5, #0xc]
	bl sub_0203B9C4
	add r7, r0, #0
	bl sub_0203B964
	add r6, r0, #0
	add r0, r7, #0
	bl sub_0203B958
	str r0, [sp, #4]
	add r0, r5, #0
	bl sub_02092DEC
	add r7, r0, #0
	ldr r0, [r5, #0xc]
	str r0, [r4, #0x24]
	ldr r0, [sp, #4]
	ldr r0, [r0]
	strh r0, [r4, #0x10]
	ldrh r0, [r4, #0x10]
	bl MapHeader_MapIsOnMainMatrix
	cmp r0, #0
	beq _02092C60
	ldr r0, [r5, #0x40]
	bl sub_0205C67C
	str r0, [r4, #8]
	ldr r0, [r5, #0x40]
	bl sub_0205C688
	str r0, [r4, #0xc]
	ldr r1, [r4, #8]
	asr r0, r1, #4
	lsr r0, r0, #0x1b
	add r0, r1, r0
	asr r1, r0, #5
	add r0, r4, #0
	add r0, #0x22
	strb r1, [r0]
	ldr r1, [r4, #0xc]
	asr r0, r1, #4
	lsr r0, r0, #0x1b
	add r0, r1, r0
	asr r1, r0, #5
	add r0, r4, #0
	add r0, #0x23
	strb r1, [r0]
	ldrh r0, [r4, #0x10]
	strh r0, [r4, #0x12]
	b _02092CE2
_02092C60:
	ldr r0, [r6, #8]
	add r1, sp, #8
	str r0, [r4, #8]
	ldr r0, [r6, #0xc]
	add r1, #2
	str r0, [r4, #0xc]
	ldrh r0, [r4, #0x10]
	add r2, sp, #8
	bl MapHeader_GetWorldMapCoords
	bl MapMatrix_New
	add r6, r0, #0
	mov r0, #0x3c
	add r1, r6, #0
	bl sub_0203AFB4
	add r0, sp, #8
	mov r1, #2
	ldrsh r1, [r0, r1]
	cmp r1, #0
	bne _02092CB6
	mov r2, #0
	ldrsh r0, [r0, r2]
	cmp r0, #0
	bne _02092CB6
	ldr r1, [r4, #8]
	asr r0, r1, #4
	lsr r0, r0, #0x1b
	add r0, r1, r0
	asr r1, r0, #5
	add r0, r4, #0
	add r0, #0x22
	strb r1, [r0]
	ldr r1, [r4, #0xc]
	asr r0, r1, #4
	lsr r0, r0, #0x1b
	add r0, r1, r0
	asr r1, r0, #5
	add r0, r4, #0
	add r0, #0x23
	strb r1, [r0]
	b _02092CC8
_02092CB6:
	add r0, r4, #0
	add r0, #0x22
	strb r1, [r0]
	add r1, sp, #8
	mov r0, #0
	ldrsh r1, [r1, r0]
	add r0, r4, #0
	add r0, #0x23
	strb r1, [r0]
_02092CC8:
	add r1, r4, #0
	add r2, r4, #0
	add r1, #0x22
	add r2, #0x23
	ldrb r1, [r1]
	ldrb r2, [r2]
	add r0, r6, #0
	bl sub_0203B024
	strh r0, [r4, #0x12]
	add r0, r6, #0
	bl MapMatrix_Free
_02092CE2:
	add r0, r5, #0
	bl ScriptEnvironment_GetSav2Ptr
	bl Sav2_PlayerData_GetProfileAddr
	bl PlayerProfile_GetTrainerGender
	strb r0, [r4, #7]
	mov r0, #0x43
	lsl r0, r0, #2
	add r0, r5, r0
	str r0, [r4, #0x28]
	add r0, r5, #0
	bl sub_0203DF3C
	strb r0, [r4, #1]
	ldrh r1, [r4, #0x10]
	add r0, r5, #0
	bl sub_02054F60
	strh r0, [r4, #2]
	ldr r0, [sp]
	cmp r0, #0
	bne _02092D7A
	add r0, r7, #0
	bl sub_02092E08
	cmp r0, #0
	beq _02092D76
	add r0, r7, #0
	add r1, sp, #0xc
	bl ov02_02251EE8
	strb r0, [r4, #4]
	ldrb r0, [r4, #4]
	cmp r0, #0x4b
	blo _02092D34
	mov r0, #0
	add sp, #0x14
	strb r0, [r4]
	pop {r4, r5, r6, r7, pc}
_02092D34:
	add r0, sp, #8
	ldrb r1, [r0, #8]
	strb r1, [r4, #6]
	ldrb r0, [r0, #7]
	strb r0, [r4, #5]
	cmp r0, #3
	bne _02092D52
	ldr r0, [r5, #0xc]
	bl sub_0202ED88
	add r1, sp, #8
	ldrb r1, [r1, #6]
	bl sub_0202F050
	b _02092D68
_02092D52:
	cmp r0, #0
	bne _02092D68
	ldr r0, [r5, #0xc]
	bl sub_0202A954
	add r2, sp, #8
	ldrb r1, [r2, #4]
	ldrb r2, [r2, #5]
	ldrb r3, [r4, #4]
	bl sub_0202AB18
_02092D68:
	add r0, r7, #0
	bl sub_02092F64
	mov r0, #1
	add sp, #0x14
	strb r0, [r4]
	pop {r4, r5, r6, r7, pc}
_02092D76:
	mov r0, #0
	strb r0, [r4]
_02092D7A:
	add sp, #0x14
	pop {r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_02092BE8

	thumb_func_start sub_02092D80
sub_02092D80: ; 0x02092D80
	ldr r3, _02092D88 ; =sub_02092BE8
	mov r2, #0
	bx r3
	nop
_02092D88: .word sub_02092BE8
	thumb_func_end sub_02092D80

	thumb_func_start sub_02092D8C
sub_02092D8C: ; 0x02092D8C
	ldr r3, _02092D94 ; =sub_02092BE8
	mov r2, #1
	bx r3
	nop
_02092D94: .word sub_02092BE8
	thumb_func_end sub_02092D8C

	thumb_func_start sub_02092D98
sub_02092D98: ; 0x02092D98
	push {r3, r4, r5, lr}
	add r5, r1, #0
	mov r1, #0x48
	bl AllocFromHeap
	add r4, r0, #0
	mov r1, #0
	mov r2, #0x48
	bl MIi_CpuFill8
	add r0, r4, #0
	bl sub_02092F64
	mov r0, #0xa
	str r0, [r4, #0xc]
	mov r0, #0x1e
	strh r0, [r4, #0x10]
	mov r0, #0x32
	strh r0, [r4, #0x12]
	ldr r0, [r5, #0xc]
	str r0, [r4, #0x38]
	bl sub_0202ED7C
	str r0, [r4, #0x30]
	ldr r0, [r4, #0x38]
	bl sub_0202ED88
	str r0, [r4, #0x34]
	str r5, [r4, #0x3c]
	add r0, r4, #0
	pop {r3, r4, r5, pc}
	.balign 4, 0
	thumb_func_end sub_02092D98

	thumb_func_start sub_02092DD8
sub_02092DD8: ; 0x02092DD8
	push {r4, lr}
	add r4, r0, #0
	mov r1, #0
	mov r2, #0x48
	bl MIi_CpuFill8
	add r0, r4, #0
	bl FreeToHeap
	pop {r4, pc}
	thumb_func_end sub_02092DD8

	thumb_func_start sub_02092DEC
sub_02092DEC: ; 0x02092DEC
	mov r1, #0x45
	lsl r1, r1, #2
	ldr r0, [r0, r1]
	bx lr
	thumb_func_end sub_02092DEC

	thumb_func_start sub_02092DF4
sub_02092DF4: ; 0x02092DF4
	ldrb r2, [r0]
	mov r1, #1
	bic r2, r1
	mov r1, #1
	orr r1, r2
	strb r1, [r0]
	mov r1, #0
	str r1, [r0, #0x14]
	str r1, [r0, #0x18]
	bx lr
	thumb_func_end sub_02092DF4

	thumb_func_start sub_02092E08
sub_02092E08: ; 0x02092E08
	ldrb r0, [r0]
	lsl r0, r0, #0x1f
	lsr r0, r0, #0x1f
	bx lr
	thumb_func_end sub_02092E08

	thumb_func_start sub_02092E10
sub_02092E10: ; 0x02092E10
	add r0, #0x1c
	bx lr
	thumb_func_end sub_02092E10

	thumb_func_start sub_02092E14
sub_02092E14: ; 0x02092E14
	push {r3, r4, r5, lr}
	add r4, r0, #0
	ldr r0, [r4, #0x34]
	add r5, r2, #0
	bl sub_0202F01C
	cmp r5, #0
	beq _02092E30
	ldr r0, [r4, #0xc]
	sub r1, r0, #1
	ldr r0, [r4, #8]
	cmp r0, r1
	bge _02092E30
	str r1, [r4, #8]
_02092E30:
	pop {r3, r4, r5, pc}
	.balign 4, 0
	thumb_func_end sub_02092E14

	thumb_func_start sub_02092E34
sub_02092E34: ; 0x02092E34
	push {r3, lr}
	ldrb r3, [r0]
	lsl r2, r3, #0x1d
	lsr r2, r2, #0x1f
	bne _02092E48
	mov r2, #4
	orr r2, r3
	strb r2, [r0]
	cmp r1, #0xa
	bge _02092E52
_02092E48:
	ldr r2, [r0, #8]
	add r1, r2, r1
	str r1, [r0, #8]
	bl sub_02092E54
_02092E52:
	pop {r3, pc}
	thumb_func_end sub_02092E34

	thumb_func_start sub_02092E54
sub_02092E54: ; 0x02092E54
	push {r3, r4, r5, r6, r7, lr}
	add r4, r0, #0
	ldr r0, [r4, #0x38]
	bl SavArray_Flags_get
	add r5, r0, #0
	ldr r0, [r4, #0x38]
	bl sub_0202F57C
	add r7, r0, #0
	ldr r0, [r4, #0x38]
	bl Sav2_PlayerData_GetIGTAddr
	str r0, [sp]
	add r0, r5, #0
	bl sub_02066E74
	lsl r0, r0, #0x18
	lsr r6, r0, #0x18
	mov r5, #0
_02092E7C:
	add r1, r5, #7
	lsl r1, r1, #0x18
	ldr r0, [r4, #0x34]
	lsr r1, r1, #0x18
	bl sub_0202F08C
	cmp r0, #0
	bne _02092F2E
	add r0, r5, #1
	lsl r0, r0, #0x18
	lsr r5, r0, #0x18
	cmp r5, #5
	blo _02092E7C
	add r0, r7, #0
	bl sub_0202F720
	add r5, r0, #0
	cmp r6, #3
	blo _02092F2E
	cmp r5, #4
	bhs _02092F2E
	cmp r6, #3
	bne _02092EC4
	ldr r1, [sp]
	add r0, r7, #0
	mov r2, #3
	bl sub_0202F798
	cmp r0, #0
	beq _02092F2E
	add r0, r4, #0
	mov r1, #7
	mov r2, #1
	bl sub_02092E14
	pop {r3, r4, r5, r6, r7, pc}
_02092EC4:
	cmp r6, #6
	blo _02092F2E
	ldr r0, [r4, #0x38]
	bl Sav2_Pokedex_get
	bl sub_0202A55C
	cmp r0, #0
	beq _02092F2E
	ldr r1, [sp]
	add r0, r7, #0
	mov r2, #3
	bl sub_0202F798
	cmp r0, #0
	beq _02092F2E
	cmp r0, #1
	bls _02092F04
	cmp r5, #3
	bhs _02092EF8
	add r0, r4, #0
	mov r1, #0xb
	mov r2, #1
	bl sub_02092E14
	pop {r3, r4, r5, r6, r7, pc}
_02092EF8:
	add r0, r4, #0
	mov r1, #0xa
	mov r2, #1
	bl sub_02092E14
	pop {r3, r4, r5, r6, r7, pc}
_02092F04:
	cmp r5, #0
	bne _02092F14
	add r0, r4, #0
	mov r1, #8
	mov r2, #1
	bl sub_02092E14
	pop {r3, r4, r5, r6, r7, pc}
_02092F14:
	cmp r5, #3
	bne _02092F24
	add r0, r4, #0
	mov r1, #0xa
	mov r2, #1
	bl sub_02092E14
	pop {r3, r4, r5, r6, r7, pc}
_02092F24:
	add r0, r4, #0
	mov r1, #9
	mov r2, #1
	bl sub_02092E14
_02092F2E:
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_02092E54

	thumb_func_start sub_02092F30
sub_02092F30: ; 0x02092F30
	push {r4, r5, r6, lr}
	ldrb r3, [r0]
	lsl r3, r3, #0x1f
	lsr r3, r3, #0x1f
	beq _02092F62
	ldr r3, [r0, #0x14]
	mov r4, #0
	ldr r6, [r0, #0x18]
	mov r5, #0
	eor r5, r6
	eor r4, r3
	orr r4, r5
	bne _02092F50
	str r1, [r0, #0x14]
	str r2, [r0, #0x18]
	pop {r4, r5, r6, pc}
_02092F50:
	sub r2, r1, r3
	bmi _02092F5E
	ldrh r1, [r0, #0x10]
	cmp r2, r1
	bgt _02092F5E
	cmp r2, #0x3b
	ble _02092F62
_02092F5E:
	bl sub_02092FA0
_02092F62:
	pop {r4, r5, r6, pc}
	thumb_func_end sub_02092F30

	thumb_func_start sub_02092F64
sub_02092F64: ; 0x02092F64
	push {r4, lr}
	mov r1, #0
	add r4, r0, #0
	bl sub_02093010
	mov r0, #0
	str r0, [r4, #8]
	str r0, [r4, #0x14]
	str r0, [r4, #0x18]
	ldrb r2, [r4]
	mov r1, #1
	bic r2, r1
	strb r2, [r4]
	ldrb r2, [r4]
	mov r1, #2
	bic r2, r1
	strb r2, [r4]
	ldrb r2, [r4]
	mov r1, #8
	bic r2, r1
	strb r2, [r4]
	mov r1, #0xff
	strb r1, [r4, #2]
	strb r0, [r4, #3]
	strb r0, [r4, #4]
	strb r0, [r4, #7]
	strb r1, [r4, #0x1c]
	mov r0, #0x32
	strh r0, [r4, #0x12]
	pop {r4, pc}
	thumb_func_end sub_02092F64

	thumb_func_start sub_02092FA0
sub_02092FA0: ; 0x02092FA0
	ldr r3, _02092FA4 ; =sub_02092F64
	bx r3
	.balign 4, 0
_02092FA4: .word sub_02092F64
	thumb_func_end sub_02092FA0

	thumb_func_start sub_02092FA8
sub_02092FA8: ; 0x02092FA8
	push {r3, lr}
	ldrb r1, [r0]
	lsl r1, r1, #0x1f
	lsr r1, r1, #0x1f
	beq _02092FB6
	bl sub_02092F64
_02092FB6:
	pop {r3, pc}
	thumb_func_end sub_02092FA8

	thumb_func_start sub_02092FB8
sub_02092FB8: ; 0x02092FB8
	push {r4, lr}
	add r4, r1, #0
	add r0, r4, #0
	add r0, #0x44
	ldrb r2, [r0]
	add r0, r4, #0
	add r0, #0x44
	ldrb r0, [r0]
	add r1, r0, #1
	add r0, r4, #0
	add r0, #0x44
	strb r1, [r0]
	cmp r2, #0
	bne _02092FFA
	ldr r0, _0209300C ; =0x00000879
	bl sub_02006184
	cmp r0, #0
	bne _02092FE8
	ldr r0, _0209300C ; =0x00000879
	mov r1, #0
	bl sub_02006134
	b _02092FFA
_02092FE8:
	add r0, r4, #0
	add r0, #0x44
	ldrb r0, [r0]
	cmp r0, #0xf
	bhs _02092FFA
	add r0, r4, #0
	mov r1, #0xf
	add r0, #0x44
	strb r1, [r0]
_02092FFA:
	add r0, r4, #0
	add r0, #0x44
	ldrb r0, [r0]
	cmp r0, #0x1e
	blo _0209300A
	mov r0, #0
	add r4, #0x44
	strb r0, [r4]
_0209300A:
	pop {r4, pc}
	.balign 4, 0
_0209300C: .word 0x00000879
	thumb_func_end sub_02092FB8

	thumb_func_start sub_02093010
sub_02093010: ; 0x02093010
	push {r4, lr}
	add r4, r0, #0
	cmp r1, #0
	ldrb r0, [r4]
	beq _02093044
	lsl r0, r0, #0x1c
	lsr r0, r0, #0x1f
	bne _02093068
	add r0, r4, #0
	add r0, #0x40
	mov r1, #0
	mov r2, #8
	bl MIi_CpuFill8
	mov r2, #0
	ldr r0, _0209306C ; =sub_02092FB8
	add r1, r4, #0
	mvn r2, r2
	bl sub_0200E320
	str r0, [r4, #0x40]
	ldrb r1, [r4]
	mov r0, #8
	orr r0, r1
	strb r0, [r4]
	pop {r4, pc}
_02093044:
	lsl r0, r0, #0x1c
	lsr r0, r0, #0x1f
	beq _02093068
	ldr r0, [r4, #0x40]
	cmp r0, #0
	beq _02093054
	bl sub_0200E390
_02093054:
	add r0, r4, #0
	add r0, #0x40
	mov r1, #0
	mov r2, #8
	bl MIi_CpuFill8
	ldrb r1, [r4]
	mov r0, #8
	bic r1, r0
	strb r1, [r4]
_02093068:
	pop {r4, pc}
	nop
_0209306C: .word sub_02092FB8
	thumb_func_end sub_02093010

	thumb_func_start sub_02093070
sub_02093070: ; 0x02093070
	push {r4, lr}
	add r4, r0, #0
	ldr r0, [r4, #0xc]
	bl sub_0202ED7C
	mov r1, #9
	bl sub_0202EEE4
	cmp r0, #0xff
	bne _02093088
	mov r0, #0
	pop {r4, pc}
_02093088:
	ldr r0, [r4, #0xc]
	bl SavArray_Flags_get
	ldr r1, _020930C0 ; =0x00000985
	bl sub_020503DC
	cmp r0, #0
	beq _0209309C
	mov r0, #0
	pop {r4, pc}
_0209309C:
	ldr r0, [r4, #0xc]
	bl GetStoragePCPointer
	bl sub_02073DFC
	cmp r0, #0
	beq _020930AE
	mov r0, #0
	pop {r4, pc}
_020930AE:
	add r0, r4, #0
	bl sub_02092DEC
	mov r1, #3
	mov r2, #1
	bl sub_02092E14
	mov r0, #1
	pop {r4, pc}
	.balign 4, 0
_020930C0: .word 0x00000985
	thumb_func_end sub_02093070

	thumb_func_start sub_020930C4
sub_020930C4: ; 0x020930C4
	push {r4, r5, r6, lr}
	add r5, r0, #0
	ldr r0, [r5, #0xc]
	bl Sav2_Pokedex_get
	bl sub_02029E0C
	add r6, r0, #0
	ldr r0, [r5, #0xc]
	bl SavArray_Flags_get
	add r4, r0, #0
	ldr r0, [r5, #0xc]
	bl sub_0202ED7C
	mov r1, #2
	bl sub_0202EEE4
	cmp r0, #0xff
	bne _020930F0
	mov r0, #0
	pop {r4, r5, r6, pc}
_020930F0:
	add r0, r6, #0
	mov r1, #0x32
	bl _s32_div_f
	lsl r0, r0, #0x10
	lsr r2, r0, #0x10
	bne _02093102
	mov r0, #0
	pop {r4, r5, r6, pc}
_02093102:
	cmp r2, #9
	bls _02093108
	mov r2, #9
_02093108:
	ldr r1, _02093130 ; =0x00000988
	add r0, r4, #0
	add r1, r2, r1
	lsl r1, r1, #0x10
	lsr r1, r1, #0x10
	bl sub_020503DC
	cmp r0, #0
	bne _0209312C
	add r0, r5, #0
	bl sub_02092DEC
	mov r1, #4
	mov r2, #0
	bl sub_02092E14
	mov r0, #1
	pop {r4, r5, r6, pc}
_0209312C:
	mov r0, #0
	pop {r4, r5, r6, pc}
	.balign 4, 0
_02093130: .word 0x00000988
	thumb_func_end sub_020930C4

	thumb_func_start sub_02093134
sub_02093134: ; 0x02093134
	push {r4, lr}
	add r4, r0, #0
	add r0, r1, #0
	ldr r1, [r4, #0xc]
	bl sub_0206D8D0
	cmp r0, #0
	bne _02093148
	mov r0, #0
	pop {r4, pc}
_02093148:
	add r0, r4, #0
	bl sub_02092DEC
	mov r1, #0
	mov r2, #1
	bl sub_02092E14
	ldr r0, [r4, #0xc]
	bl SavArray_Flags_get
	ldr r1, _02093168 ; =0x00000983
	bl sub_02050408
	mov r0, #1
	pop {r4, pc}
	nop
_02093168: .word 0x00000983
	thumb_func_end sub_02093134

	thumb_func_start sub_0209316C
sub_0209316C: ; 0x0209316C
	push {r3, r4, r5, lr}
	add r5, r0, #0
	ldr r0, [r5, #0xc]
	bl SavArray_Flags_get
	add r4, r0, #0
	ldr r0, [r5, #0xc]
	bl sub_0202ED7C
	mov r1, #6
	bl sub_0202EEE4
	cmp r0, #0xff
	bne _0209318C
	mov r0, #0
	pop {r3, r4, r5, pc}
_0209318C:
	ldr r1, _020931BC ; =0x00000992
	add r0, r4, #0
	bl sub_020503DC
	cmp r0, #0
	beq _020931A8
	ldr r1, _020931C0 ; =0x0000099E
	add r0, r4, #0
	bl sub_020503DC
	cmp r0, #0
	bne _020931A8
	mov r0, #0
	pop {r3, r4, r5, pc}
_020931A8:
	add r0, r5, #0
	bl sub_02092DEC
	mov r1, #5
	mov r2, #1
	bl sub_02092E14
	mov r0, #1
	pop {r3, r4, r5, pc}
	nop
_020931BC: .word 0x00000992
_020931C0: .word 0x0000099E
	thumb_func_end sub_0209316C

	thumb_func_start sub_020931C4
sub_020931C4: ; 0x020931C4
	push {r3, r4, r5, r6, r7, lr}
	mov r7, #0
	ldr r4, _02093228 ; =0x02108374
	add r5, r0, #0
	str r1, [sp]
	add r6, r7, #0
_020931D0:
	lsl r1, r6, #0x18
	add r0, r5, #0
	lsr r1, r1, #0x18
	bl sub_0202F1B4
	cmp r0, #0
	bne _02093212
	ldrh r1, [r4, #2]
	ldr r0, [sp]
	cmp r0, r1
	blo _0209321A
	lsl r1, r6, #0x18
	add r0, r5, #0
	lsr r1, r1, #0x18
	bl sub_0202F198
	ldrh r1, [r4]
	add r0, r5, #0
	mov r2, #1
	bl sub_0202F1C4
	ldrh r2, [r4, #4]
	add r0, r5, #0
	mov r1, #3
	bl sub_0202F14C
	str r0, [sp]
	add r0, r5, #0
	add r7, r7, #1
	bl sub_0202F240
	cmp r0, #0
	bne _0209321A
_02093212:
	add r6, r6, #1
	add r4, r4, #6
	cmp r6, #9
	blt _020931D0
_0209321A:
	cmp r7, #0
	beq _02093222
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_02093222:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
	nop
_02093228: .word 0x02108374
	thumb_func_end sub_020931C4

	thumb_func_start sub_0209322C
sub_0209322C: ; 0x0209322C
	push {r4, r5, r6, lr}
	add r4, r0, #0
	add r5, r1, #0
	add r6, r2, #0
	bl sub_0202F240
	cmp r0, #0
	beq _02093240
	mov r0, #0
	pop {r4, r5, r6, pc}
_02093240:
	add r0, r4, #0
	add r1, r5, #0
	bl sub_020931C4
	cmp r0, #0
	beq _02093250
	mov r0, #1
	pop {r4, r5, r6, pc}
_02093250:
	ldr r1, _0209329C ; =0x00000BB8
	add r0, r5, #0
	bl _u32_div_f
	add r5, r0, #0
	ldr r1, _0209329C ; =0x00000BB8
	add r0, r6, #0
	bl _u32_div_f
	cmp r5, r0
	bhi _0209326A
	mov r0, #0
	pop {r4, r5, r6, pc}
_0209326A:
	bl LCRandom
	mov r1, #0x11
	bl _s32_div_f
	lsl r0, r1, #1
	add r1, r1, r0
	ldr r2, _020932A0 ; =0x02108340
	add r0, r4, #0
	add r5, r2, r1
	ldrb r1, [r2, r1]
	ldrb r2, [r5, #1]
	add r1, #0x95
	lsl r1, r1, #0x10
	lsr r1, r1, #0x10
	bl sub_0202F1C4
	ldrb r2, [r5, #2]
	add r0, r4, #0
	mov r1, #3
	bl sub_0202F14C
	mov r0, #1
	pop {r4, r5, r6, pc}
	nop
_0209329C: .word 0x00000BB8
_020932A0: .word 0x02108340
	thumb_func_end sub_0209322C

	thumb_func_start sub_020932A4
sub_020932A4: ; 0x020932A4
	push {r3, r4, r5, r6, r7, lr}
	add r4, r1, #0
	add r5, r0, #0
	add r0, r4, #0
	add r6, r2, #0
	add r7, r3, #0
	bl sub_0202ED88
	add r1, r5, #0
	bl sub_0202F0E8
	cmp r0, #0
	bne _020932C2
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_020932C2:
	cmp r5, #0x10
	bne _020932CE
	cmp r7, #1
	beq _020932CE
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_020932CE:
	mov r1, #0x14
	ldr r2, [r6, #4]
	mul r1, r5
	add r1, r2, r1
	ldrh r1, [r1, #4]
	add r0, r4, #0
	bl ov26_022598C0
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_020932A4

	thumb_func_start sub_020932E0
sub_020932E0: ; 0x020932E0
	push {r3, r4, r5, r6, r7, lr}
	add r5, r1, #0
	ldr r1, _02093348 ; =0x000046E8
	add r6, r0, #0
	add r7, r2, #0
	bl AllocFromHeap
	ldr r2, _02093348 ; =0x000046E8
	mov r1, #0
	add r4, r0, #0
	bl memset
	cmp r5, #0
	bne _02093300
	bl GF_AssertFail
_02093300:
	str r6, [r4, #4]
	strb r5, [r4, #0xd]
	strb r7, [r4, #0x10]
	ldrb r0, [r4, #0xd]
	cmp r0, #3
	bls _02093314
	bl GF_AssertFail
	mov r0, #3
	strb r0, [r4, #0xd]
_02093314:
	ldrb r2, [r4, #0xd]
	mov r1, #0xc
	ldr r0, [r4, #4]
	mul r1, r2
	bl AllocFromHeap
	mov r1, #0x8d
	lsl r1, r1, #4
	str r0, [r4, r1]
	ldrb r1, [r4, #0xd]
	ldr r0, [r4, #4]
	add r1, #0x22
	lsl r1, r1, #2
	bl AllocFromHeap
	ldr r1, _0209334C ; =0x000007E4
	str r0, [r4, r1]
	add r1, r4, #0
	ldr r0, [r4, #4]
	add r1, #0xf
	bl sub_02095CE0
	ldr r1, _02093350 ; =0x000046B8
	str r0, [r4, r1]
	add r0, r4, #0
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_02093348: .word 0x000046E8
_0209334C: .word 0x000007E4
_02093350: .word 0x000046B8
	thumb_func_end sub_020932E0

	thumb_func_start sub_02093354
sub_02093354: ; 0x02093354
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	ldr r0, _0209341C ; =0x000046B8
	ldr r0, [r5, r0]
	bl sub_02095D2C
	add r0, r5, #0
	bl sub_0209515C
	ldr r0, _02093420 ; =0x00004650
	mov r1, #1
	add r0, r5, r0
	bl sub_020950F8
	ldr r0, _02093424 ; =0x00004670
	add r0, r5, r0
	bl RemoveWindow
	add r0, r5, #0
	bl sub_020950D4
	ldr r0, _02093428 ; =0x000046C8
	ldr r0, [r5, r0]
	bl FreeToHeap
	ldr r0, _0209342C ; =0x000046CC
	ldr r0, [r5, r0]
	bl FreeToHeap
	mov r0, #0x57
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	bl sub_0200AEB0
	mov r0, #0x16
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	bl sub_0200B0A8
	mov r7, #0x51
	mov r6, #0
	add r4, r5, #0
	lsl r7, r7, #2
_020933AA:
	ldr r0, [r4, r7]
	bl sub_0200A0D0
	add r6, r6, #1
	add r4, r4, #4
	cmp r6, #6
	blt _020933AA
	ldr r0, [r5, #0x18]
	bl sub_02024504
	ldr r0, _02093430 ; =0x000046A4
	ldr r0, [r5, r0]
	bl FreeToHeap
	ldr r0, [r5, #8]
	bl sub_02016624
	ldr r0, _02093434 ; =0x000007E4
	ldr r0, [r5, r0]
	bl FreeToHeap
	mov r0, #0x8d
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	bl FreeToHeap
	mov r0, #4
	bl sub_02002DB4
	ldr r0, _02093438 ; =gMain + 0x60
	mov r1, #0
	strb r1, [r0, #9]
	bl sub_02022D3C
	ldr r0, _0209343C ; =0x04000050
	mov r1, #0
	strh r1, [r0]
	ldr r0, [r5]
	bl sub_0201BB4C
	ldr r0, [r5]
	mov r1, #1
	bl sub_0201BB4C
	ldr r0, [r5]
	mov r1, #2
	bl sub_0201BB4C
	ldr r0, [r5]
	mov r1, #3
	bl sub_0201BB4C
	add r0, r5, #0
	bl FreeToHeap
	pop {r3, r4, r5, r6, r7, pc}
	nop
_0209341C: .word 0x000046B8
_02093420: .word 0x00004650
_02093424: .word 0x00004670
_02093428: .word 0x000046C8
_0209342C: .word 0x000046CC
_02093430: .word 0x000046A4
_02093434: .word 0x000007E4
_02093438: .word gMain + 0x60
_0209343C: .word 0x04000050
	thumb_func_end sub_02093354

	thumb_func_start sub_02093440
sub_02093440: ; 0x02093440
	push {r4, r5, r6, r7, lr}
	sub sp, #0x14
	add r5, r0, #0
	ldr r0, [r5, #4]
	add r4, r1, #0
	add r6, r2, #0
	add r7, r3, #0
	bl sub_0201660C
	str r0, [r5, #8]
	ldr r0, _02093580 ; =0x0000463C
	ldr r2, [sp, #0x48]
	str r6, [r5, r0]
	add r1, r0, #4
	str r7, [r5, r1]
	add r1, r0, #0
	str r4, [r5]
	add r1, #0xa0
	str r2, [r5, r1]
	add r1, r0, #0
	ldr r2, [sp, #0x44]
	add r1, #0x9c
	str r2, [r5, r1]
	ldr r1, [sp, #0x34]
	mov r2, #0
	strb r1, [r5, #0xf]
	add r1, r0, #0
	mvn r2, r2
	add r1, #0xa8
	str r2, [r5, r1]
	add r0, #0xa4
	str r2, [r5, r0]
	ldr r0, [sp, #0x30]
	strb r0, [r5, #0x13]
	ldr r0, [r5]
	ldr r1, [r5, #4]
	bl sub_02094D9C
	add r0, r5, #0
	bl sub_02093A50
	add r0, r5, #0
	bl sub_02093B40
	add r0, r5, #0
	bl sub_02094004
	mov r0, #0x10
	mov r1, #1
	bl GX_EngineAToggleLayers
	ldr r1, [r5, #4]
	mov r0, #4
	bl sub_02002CEC
	mov r1, #0x1a
	ldr r2, [r5, #4]
	mov r0, #0
	lsl r1, r1, #4
	bl sub_02003030
	mov r1, #6
	ldr r2, [r5, #4]
	mov r0, #0
	lsl r1, r1, #6
	bl sub_02003030
	ldr r0, [sp, #0x28]
	ldr r1, [sp, #0x30]
	strb r0, [r5, #0x11]
	ldr r0, [sp, #0x2c]
	lsl r1, r1, #0x18
	strb r0, [r5, #0x12]
	ldr r0, _02093584 ; =0x000046B8
	lsr r1, r1, #0x18
	ldr r0, [r5, r0]
	bl sub_02095D1C
	ldr r0, _02093584 ; =0x000046B8
	mov r1, #2
	ldr r0, [r5, r0]
	mov r2, #0
	bl sub_02095D40
	add r0, r5, #0
	bl sub_02093B84
	ldr r0, [sp, #0x38]
	ldr r1, _02093588 ; =0x00004648
	ldr r2, [sp, #0x3c]
	str r0, [r5, r1]
	add r0, r1, #4
	str r2, [r5, r0]
	mov r2, #1
	add r1, #8
	str r2, [sp]
	mov r3, #0xd
	str r3, [sp, #4]
	mov r0, #2
	str r0, [sp, #8]
	str r3, [sp, #0xc]
	mov r0, #0xa0
	str r0, [sp, #0x10]
	ldr r0, [r5]
	add r1, r5, r1
	mov r3, #4
	bl sub_0201D40C
	mov r0, #0x15
	str r0, [sp]
	mov r0, #6
	str r0, [sp, #4]
	mov r0, #2
	str r0, [sp, #8]
	mov r0, #0xc
	str r0, [sp, #0xc]
	mov r0, #0xba
	ldr r1, _0209358C ; =0x00004670
	str r0, [sp, #0x10]
	ldr r0, [r5]
	add r1, r5, r1
	mov r2, #1
	mov r3, #0x19
	bl sub_0201D40C
	add r0, r5, #0
	bl sub_02094D1C
	ldr r1, [r5]
	ldr r2, [r5, #4]
	add r0, r5, #0
	bl sub_020941CC
	add r0, r5, #0
	bl sub_020942B0
	add r0, r5, #0
	bl sub_020943EC
	add r0, r5, #0
	bl sub_020950C0
	bl sub_02095794
	ldr r0, [sp, #0x40]
	ldr r1, _02093590 ; =0x000046B4
	mov r2, #0
	str r0, [r5, r1]
	add r0, r1, #0
	str r2, [r5, #0x14]
	add r0, #8
	str r2, [r5, r0]
	add r0, r1, #0
	add r0, #0xc
	str r2, [r5, r0]
	add r1, #0x10
	str r2, [r5, r1]
	add sp, #0x14
	pop {r4, r5, r6, r7, pc}
	nop
_02093580: .word 0x0000463C
_02093584: .word 0x000046B8
_02093588: .word 0x00004648
_0209358C: .word 0x00004670
_02093590: .word 0x000046B4
	thumb_func_end sub_02093440

	thumb_func_start sub_02093594
sub_02093594: ; 0x02093594
	push {r4, lr}
	add r4, r0, #0
	ldr r0, _020935D0 ; =0x00004644
	ldr r1, [r4, r0]
	cmp r1, #0
	beq _020935B2
	ldr r0, _020935D4 ; =0x000008D4
	add r0, r4, r0
	blx r1
	ldr r0, _020935D0 ; =0x00004644
	mov r1, #0
	str r1, [r4, r0]
	add r0, r4, #0
	bl sub_020956B8
_020935B2:
	bl sub_0202061C
	bl sub_0200B224
	ldr r0, [r4]
	bl sub_0201EEB4
	ldr r3, _020935D8 ; =OSi_IntrTable
	ldr r1, _020935DC ; =0x00003FF8
	mov r0, #1
	ldr r2, [r3, r1]
	orr r0, r2
	str r0, [r3, r1]
	pop {r4, pc}
	nop
_020935D0: .word 0x00004644
_020935D4: .word 0x000008D4
_020935D8: .word OSi_IntrTable
_020935DC: .word 0x00003FF8
	thumb_func_end sub_02093594

	thumb_func_start sub_020935E0
sub_020935E0: ; 0x020935E0
	push {r3, lr}
	ldr r1, [r0, #0x14]
	cmp r1, #6
	bhi _0209362E
	add r1, r1, r1
	add r1, pc
	ldrh r1, [r1, #6]
	lsl r1, r1, #0x10
	asr r1, r1, #0x10
	add pc, r1
_020935F4: ; jump table
	.short _02093602 - _020935F4 - 2 ; case 0
	.short _02093608 - _020935F4 - 2 ; case 1
	.short _02093610 - _020935F4 - 2 ; case 2
	.short _0209362E - _020935F4 - 2 ; case 3
	.short _02093618 - _020935F4 - 2 ; case 4
	.short _02093620 - _020935F4 - 2 ; case 5
	.short _02093628 - _020935F4 - 2 ; case 6
_02093602:
	bl sub_02093630
	pop {r3, pc}
_02093608:
	bl sub_0209389C
	mov r0, #0
	pop {r3, pc}
_02093610:
	bl sub_02093908
	mov r0, #0
	pop {r3, pc}
_02093618:
	bl sub_0209396C
	mov r0, #0
	pop {r3, pc}
_02093620:
	bl sub_020939B8
	mov r0, #0
	pop {r3, pc}
_02093628:
	bl sub_0209511C
	mov r0, #2
_0209362E:
	pop {r3, pc}
	thumb_func_end sub_020935E0

	thumb_func_start sub_02093630
sub_02093630: ; 0x02093630
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x10
	mov r4, #0
	add r5, r0, #0
	str r4, [sp]
	bl sub_0202534C
	cmp r0, #0
	bne _02093714
	ldr r0, _02093874 ; =0x000046C0
	ldr r1, [r5, r0]
	cmp r1, #0
	bne _02093714
	ldr r1, _02093878 ; =gMain
	ldr r4, [r1, #0x48]
	cmp r4, #0
	beq _02093714
	sub r0, #8
	ldr r0, [r5, r0]
	mov r7, #0
	add r6, r7, #0
	bl sub_02095DD8
	cmp r4, #0x20
	bgt _0209367A
	bge _02093688
	cmp r4, #2
	bgt _02093674
	cmp r4, #1
	blt _020936EE
	beq _020936C0
	cmp r4, #2
	beq _020936D8
	b _020936EE
_02093674:
	cmp r4, #0x10
	beq _0209369C
	b _020936EE
_0209367A:
	cmp r4, #0x40
	bgt _02093682
	beq _020936B0
	b _020936EE
_02093682:
	cmp r4, #0x80
	beq _020936B8
	b _020936EE
_02093688:
	cmp r0, #5
	bne _02093694
	add r0, r5, #0
	bl sub_02095540
	b _020936EE
_02093694:
	sub r0, r7, #1
	lsl r0, r0, #0x18
	asr r7, r0, #0x18
	b _020936EE
_0209369C:
	cmp r0, #5
	bne _020936A8
	add r0, r5, #0
	bl sub_020955EC
	b _020936EE
_020936A8:
	add r0, r7, #1
	lsl r0, r0, #0x18
	asr r7, r0, #0x18
	b _020936EE
_020936B0:
	sub r0, r6, #1
	lsl r0, r0, #0x18
	asr r6, r0, #0x18
	b _020936EE
_020936B8:
	add r0, r6, #1
	lsl r0, r0, #0x18
	asr r6, r0, #0x18
	b _020936EE
_020936C0:
	add r0, r5, #0
	bl sub_02095354
	str r0, [sp]
	cmp r0, #0
	beq _020936EE
	cmp r0, #3
	beq _020936EE
	ldr r0, _0209387C ; =0x000005DD
	bl PlaySE
	b _020936EE
_020936D8:
	add r0, r5, #0
	bl sub_020954CC
	str r0, [sp]
	cmp r0, #0
	beq _020936EE
	cmp r0, #3
	beq _020936EE
	ldr r0, _0209387C ; =0x000005DD
	bl PlaySE
_020936EE:
	cmp r7, #0
	bne _020936F6
	cmp r6, #0
	beq _02093714
_020936F6:
	ldr r0, _02093880 ; =0x000046B8
	add r1, r7, #0
	ldr r0, [r5, r0]
	add r2, r6, #0
	bl sub_02095D88
	add r6, r0, #0
	add r0, r5, #0
	bl sub_02095238
	cmp r6, #0
	beq _02093714
	ldr r0, _02093884 ; =0x000005DC
	bl PlaySE
_02093714:
	cmp r4, #0
	bne _02093720
	ldr r0, _02093888 ; =0x000046BC
	ldr r0, [r5, r0]
	cmp r0, #0
	beq _02093722
_02093720:
	b _02093860
_02093722:
	bl sub_02025358
	cmp r0, #0
	bne _0209372C
	b _02093832
_0209372C:
	ldr r0, _0209388C ; =0x00004680
	ldr r1, [r5, r0]
	cmp r1, #0
	bne _02093832
	mov r1, #1
	add r0, #0x44
	str r1, [r5, r0]
	ldr r0, _02093890 ; =0x000007E4
	ldr r0, [r5, r0]
	bl sub_02025224
	add r4, r0, #0
	mov r0, #0
	mvn r0, r0
	cmp r4, r0
	beq _0209382A
	cmp r4, #0x1e
	bge _0209378A
	ldrb r0, [r5, #0xf]
	cmp r0, #0x12
	bne _0209375A
	cmp r4, #6
	bge _02093824
_0209375A:
	ldr r0, _02093880 ; =0x000046B8
	lsl r2, r4, #0x18
	ldr r0, [r5, r0]
	mov r1, #2
	lsr r2, r2, #0x18
	bl sub_02095D40
	add r0, r5, #0
	add r1, r4, #0
	bl sub_02094794
	cmp r0, #1
	bne _02093824
	ldr r0, _02093894 ; =0x000005EB
	bl PlaySE
	add r0, r5, #0
	mov r1, #1
	add r2, r4, #0
	bl sub_020948C4
	mov r0, #1
	str r0, [sp]
	b _02093824
_0209378A:
	cmp r4, #0x21
	blt _020937CE
	ldrb r0, [r5, #0xd]
	add r0, #0x21
	cmp r4, r0
	bge _020937CE
	ldr r0, _02093880 ; =0x000046B8
	add r2, r4, #0
	sub r2, #0x21
	lsl r2, r2, #0x18
	ldr r0, [r5, r0]
	mov r1, #3
	lsr r2, r2, #0x18
	bl sub_02095D40
	add r1, r4, #0
	add r0, r5, #0
	sub r1, #0x21
	bl sub_02094860
	cmp r0, #1
	bne _02093824
	ldr r0, _02093894 ; =0x000005EB
	bl PlaySE
	sub r4, #0x21
	add r0, r5, #0
	mov r1, #2
	add r2, r4, #0
	bl sub_020948C4
	mov r0, #1
	str r0, [sp]
	b _02093824
_020937CE:
	cmp r4, #0x1e
	beq _020937EC
	cmp r4, #0x1f
	beq _020937DC
	cmp r4, #0x20
	beq _020937E4
	b _02093824
_020937DC:
	add r0, r5, #0
	bl sub_02095540
	b _02093824
_020937E4:
	add r0, r5, #0
	bl sub_020955EC
	b _02093824
_020937EC:
	ldrb r0, [r5, #0x13]
	cmp r0, #0
	beq _02093824
	mov r0, #0xe
	lsl r0, r0, #0x10
	str r0, [sp, #4]
	mov r0, #0xb
	lsl r0, r0, #0x10
	str r0, [sp, #8]
	mov r0, #0
	str r0, [sp, #0xc]
	mov r0, #0x23
	lsl r0, r0, #6
	ldr r0, [r5, r0]
	add r1, sp, #4
	bl sub_020247D4
	ldr r0, _02093880 ; =0x000046B8
	mov r1, #1
	ldr r0, [r5, r0]
	mov r2, #0
	bl sub_02095D40
	add r0, r5, #0
	bl sub_0209569C
	mov r0, #3
	str r0, [sp]
_02093824:
	add r0, r5, #0
	bl sub_020956B8
_0209382A:
	ldr r0, _02093874 ; =0x000046C0
	mov r1, #1
	str r1, [r5, r0]
	b _02093860
_02093832:
	bl sub_0202534C
	cmp r0, #0
	beq _02093850
	ldr r0, _02093898 ; =0x000046C4
	ldr r0, [r5, r0]
	cmp r0, #0
	beq _02093850
	add r0, r5, #0
	bl sub_020949F4
	ldr r0, _02093874 ; =0x000046C0
	mov r1, #1
	str r1, [r5, r0]
	b _02093860
_02093850:
	add r0, r5, #0
	bl sub_02094A70
	ldr r0, _02093874 ; =0x000046C0
	mov r1, #0
	str r1, [r5, r0]
	add r0, r0, #4
	str r1, [r5, r0]
_02093860:
	ldrb r1, [r5, #0xe]
	ldrb r0, [r5, #0xd]
	cmp r1, r0
	bne _0209386C
	mov r0, #1
	str r0, [r5, #0x14]
_0209386C:
	ldr r0, [sp]
	add sp, #0x10
	pop {r3, r4, r5, r6, r7, pc}
	nop
_02093874: .word 0x000046C0
_02093878: .word gMain
_0209387C: .word 0x000005DD
_02093880: .word 0x000046B8
_02093884: .word 0x000005DC
_02093888: .word 0x000046BC
_0209388C: .word 0x00004680
_02093890: .word 0x000007E4
_02093894: .word 0x000005EB
_02093898: .word 0x000046C4
	thumb_func_end sub_02093630

	thumb_func_start sub_0209389C
sub_0209389C: ; 0x0209389C
	push {r3, r4, lr}
	sub sp, #0x14
	add r4, r0, #0
	add r0, sp, #0
	mov r1, #0
	mov r2, #0x14
	bl MIi_CpuFill8
	ldr r0, [r4]
	mov r1, #0x19
	str r0, [sp]
	mov r0, #0
	str r0, [sp, #4]
	mov r0, #2
	lsl r0, r0, #8
	str r0, [sp, #8]
	mov r0, #8
	str r0, [sp, #0xc]
	add r0, sp, #0
	strb r1, [r0, #0x10]
	mov r1, #0xf
	strb r1, [r0, #0x11]
	ldr r0, [r4, #8]
	add r1, sp, #0
	bl sub_020166FC
	ldrb r0, [r4, #0xd]
	cmp r0, #1
	bne _020938EC
	ldr r0, _02093904 ; =0x00004660
	mov r1, #0
	add r0, r4, r0
	bl sub_020950F8
	add r0, r4, #0
	mov r1, #3
	mov r2, #1
	bl sub_0209501C
	b _020938F6
_020938EC:
	add r0, r4, #0
	mov r1, #2
	mov r2, #1
	bl sub_0209501C
_020938F6:
	bl sub_02095780
	mov r0, #2
	str r0, [r4, #0x14]
	add sp, #0x14
	pop {r3, r4, pc}
	nop
_02093904: .word 0x00004660
	thumb_func_end sub_0209389C

	thumb_func_start sub_02093908
sub_02093908: ; 0x02093908
	push {r4, lr}
	add r4, r0, #0
	ldr r0, [r4, #8]
	bl sub_020168F4
	cmp r0, #1
	beq _0209391C
	cmp r0, #2
	beq _02093932
	pop {r4, pc}
_0209391C:
	ldr r0, _02093964 ; =0x00004660
	mov r1, #1
	add r0, r4, r0
	bl sub_020950F8
	ldr r0, [r4, #8]
	bl sub_020169CC
	mov r0, #6
	str r0, [r4, #0x14]
	pop {r4, pc}
_02093932:
	ldr r0, _02093964 ; =0x00004660
	mov r1, #1
	add r0, r4, r0
	bl sub_020950F8
	ldr r0, [r4, #8]
	bl sub_020169CC
	ldr r1, _02093968 ; =0x000046B0
	add r0, r4, #0
	ldr r1, [r4, r1]
	bl sub_02094F5C
	add r0, r4, #0
	bl sub_020950C0
	bl sub_02095794
	add r0, r4, #0
	bl sub_020956B8
	mov r0, #0
	str r0, [r4, #0x14]
	pop {r4, pc}
	nop
_02093964: .word 0x00004660
_02093968: .word 0x000046B0
	thumb_func_end sub_02093908

	thumb_func_start sub_0209396C
sub_0209396C: ; 0x0209396C
	push {r3, r4, lr}
	sub sp, #0x14
	add r4, r0, #0
	add r0, sp, #0
	mov r1, #0
	mov r2, #0x14
	bl MIi_CpuFill8
	ldr r0, [r4]
	mov r1, #0x19
	str r0, [sp]
	mov r0, #0
	str r0, [sp, #4]
	mov r0, #2
	lsl r0, r0, #8
	str r0, [sp, #8]
	mov r0, #8
	str r0, [sp, #0xc]
	add r0, sp, #0
	strb r1, [r0, #0x10]
	mov r1, #0xf
	strb r1, [r0, #0x11]
	ldr r0, [r4, #8]
	add r1, sp, #0
	bl sub_020166FC
	add r0, r4, #0
	mov r1, #4
	mov r2, #0
	bl sub_0209501C
	bl sub_02095780
	mov r0, #5
	str r0, [r4, #0x14]
	add sp, #0x14
	pop {r3, r4, pc}
	.balign 4, 0
	thumb_func_end sub_0209396C

	thumb_func_start sub_020939B8
sub_020939B8: ; 0x020939B8
	push {r4, lr}
	add r4, r0, #0
	ldr r0, [r4, #8]
	bl sub_020168F4
	cmp r0, #1
	beq _020939CC
	cmp r0, #2
	beq _02093A10
	pop {r4, pc}
_020939CC:
	ldr r0, _02093A34 ; =0x00004660
	mov r1, #1
	add r0, r4, r0
	bl sub_020950F8
	ldr r0, [r4, #8]
	bl sub_020169CC
	ldr r1, _02093A38 ; =0x00004684
	add r0, r4, #0
	ldr r1, [r4, r1]
	bl sub_02094F5C
	mov r0, #0x23
	lsl r0, r0, #6
	ldr r0, [r4, r0]
	mov r1, #0x2d
	bl sub_020248F0
	add r0, r4, #0
	mov r1, #2
	bl sub_02094A90
	ldr r0, _02093A3C ; =0x000046BC
	mov r1, #0
	str r1, [r4, r0]
	bl sub_02095794
	add r0, r4, #0
	bl sub_020956B8
	mov r0, #0
	str r0, [r4, #0x14]
	pop {r4, pc}
_02093A10:
	ldr r0, _02093A34 ; =0x00004660
	mov r1, #1
	add r0, r4, r0
	bl sub_020950F8
	ldr r0, [r4, #8]
	bl sub_020169CC
	add r0, r4, #0
	mov r1, #0
	bl sub_02094A90
	bl sub_02095794
	mov r0, #0
	str r0, [r4, #0x14]
	pop {r4, pc}
	nop
_02093A34: .word 0x00004660
_02093A38: .word 0x00004684
_02093A3C: .word 0x000046BC
	thumb_func_end sub_020939B8

	thumb_func_start sub_02093A40
sub_02093A40: ; 0x02093A40
	push {r3, lr}
	ldr r0, [r0, #0x18]
	cmp r0, #0
	beq _02093A4C
	bl sub_0202457C
_02093A4C:
	pop {r3, pc}
	.balign 4, 0
	thumb_func_end sub_02093A40

	thumb_func_start sub_02093A50
sub_02093A50: ; 0x02093A50
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x10
	add r5, r0, #0
	add r1, r5, #0
	ldr r2, [r5, #4]
	mov r0, #0x2b
	add r1, #0x1c
	bl sub_02009F40
	str r0, [r5, #0x18]
	add r0, r5, #0
	mov r2, #1
	add r0, #0x1c
	mov r1, #0
	lsl r2, r2, #0x14
	bl sub_02009FC8
	mov r7, #0x51
	mov r6, #0
	add r4, r5, #0
	lsl r7, r7, #2
_02093A7A:
	ldr r2, [r5, #4]
	mov r0, #3
	add r1, r6, #0
	bl sub_0200A090
	str r0, [r4, r7]
	add r6, r6, #1
	add r4, r4, #4
	cmp r6, #6
	blt _02093A7A
	mov r0, #0
	str r0, [sp]
	mov r3, #1
	str r3, [sp, #4]
	ldr r0, [r5, #4]
	mov r1, #0x97
	str r0, [sp, #8]
	mov r0, #0x51
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	mov r2, #8
	bl sub_0200A1D8
	mov r1, #0x57
	lsl r1, r1, #2
	str r0, [r5, r1]
	mov r3, #0
	str r3, [sp]
	mov r0, #1
	str r0, [sp, #4]
	mov r0, #4
	str r0, [sp, #8]
	ldr r0, [r5, #4]
	sub r1, #0x14
	str r0, [sp, #0xc]
	ldr r0, [r5, r1]
	mov r1, #0x97
	mov r2, #5
	bl sub_0200A234
	mov r1, #0x16
	lsl r1, r1, #4
	str r0, [r5, r1]
	mov r0, #0
	str r0, [sp]
	mov r0, #2
	str r0, [sp, #4]
	ldr r0, [r5, #4]
	sub r1, #0x14
	str r0, [sp, #8]
	ldr r0, [r5, r1]
	mov r1, #0x97
	mov r2, #7
	mov r3, #1
	bl sub_0200A294
	mov r1, #0x59
	lsl r1, r1, #2
	str r0, [r5, r1]
	mov r0, #0
	str r0, [sp]
	mov r0, #3
	str r0, [sp, #4]
	ldr r0, [r5, #4]
	sub r1, #0x14
	str r0, [sp, #8]
	ldr r0, [r5, r1]
	mov r1, #0x97
	mov r2, #6
	mov r3, #1
	bl sub_0200A294
	mov r1, #0x5a
	lsl r1, r1, #2
	str r0, [r5, r1]
	sub r1, #0xc
	ldr r0, [r5, r1]
	bl sub_0200ADA4
	mov r0, #0x16
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	bl sub_0200AF94
	bl sub_02074490
	add r1, r0, #0
	mov r0, #0
	str r0, [sp]
	ldr r0, [r5, #4]
	mov r2, #1
	add r3, r2, #0
	str r0, [sp, #4]
	mov r0, #0x14
	add r3, #0xff
	bl GfGfxLoader_GXLoadPal
	add sp, #0x10
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_02093A50

	thumb_func_start sub_02093B40
sub_02093B40: ; 0x02093B40
	push {lr}
	sub sp, #0x2c
	mov r1, #0
	str r1, [sp]
	sub r2, r1, #1
	str r2, [sp, #4]
	str r2, [sp, #8]
	str r1, [sp, #0xc]
	mov r3, #0x51
	str r1, [sp, #0x10]
	lsl r3, r3, #2
	ldr r2, [r0, r3]
	str r2, [sp, #0x14]
	add r2, r3, #4
	ldr r2, [r0, r2]
	str r2, [sp, #0x18]
	add r2, r3, #0
	add r2, #8
	ldr r2, [r0, r2]
	str r2, [sp, #0x1c]
	add r2, r3, #0
	add r2, #0xc
	ldr r2, [r0, r2]
	add r3, #0x30
	str r2, [sp, #0x20]
	str r1, [sp, #0x24]
	add r0, r0, r3
	add r2, r1, #0
	add r3, r1, #0
	str r1, [sp, #0x28]
	bl sub_02009D48
	add sp, #0x2c
	pop {pc}
	thumb_func_end sub_02093B40

	thumb_func_start sub_02093B84
sub_02093B84: ; 0x02093B84
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x40
	add r5, r0, #0
	add r0, sp, #0x10
	add r1, r5, #0
	mov r2, #1
	bl sub_02094150
	ldrb r1, [r5, #0xd]
	ldr r0, [r5, #4]
	lsl r1, r1, #3
	bl AllocFromHeap
	ldr r1, _02093CD0 ; =0x000046A4
	mov r7, #0
	str r0, [r5, r1]
	ldrb r0, [r5, #0xd]
	cmp r0, #0
	ble _02093C78
	mov r0, #0x20
	str r0, [sp, #0xc]
	mov r0, #0x2c
	add r6, r7, #0
	str r7, [sp, #8]
	add r4, r5, #0
	str r0, [sp, #4]
_02093BB8:
	ldr r0, _02093CD0 ; =0x000046A4
	ldr r1, [r5, r0]
	ldr r0, [sp, #0xc]
	strb r0, [r1, r6]
	ldr r0, _02093CD0 ; =0x000046A4
	ldr r0, [r5, r0]
	add r1, r0, r6
	ldrb r0, [r0, r6]
	add r0, #0x18
	strb r0, [r1, #2]
	ldr r0, _02093CD0 ; =0x000046A4
	ldr r0, [r5, r0]
	add r1, r0, r6
	mov r0, #0xc0
	strb r0, [r1, #1]
	ldr r0, _02093CD0 ; =0x000046A4
	ldr r0, [r5, r0]
	add r1, r0, r6
	ldrb r0, [r1, #1]
	add r0, #0x20
	strb r0, [r1, #3]
	ldr r0, _02093CD0 ; =0x000046A4
	ldr r0, [r5, r0]
	add r1, r0, r6
	mov r0, #0
	str r0, [r1, #4]
	mov r0, #0x35
	lsl r0, r0, #0xe
	str r0, [sp, #0x18]
	ldr r0, [sp, #8]
	add r0, #0x28
	lsl r0, r0, #0xc
	str r0, [sp, #0x1c]
	ldr r0, _02093CD4 ; =0x000007E8
	ldr r0, [r4, r0]
	cmp r0, #0
	bne _02093C0C
	add r0, sp, #0x10
	bl sub_02024624
	ldr r1, _02093CD4 ; =0x000007E8
	str r0, [r4, r1]
_02093C0C:
	ldr r0, _02093CD4 ; =0x000007E8
	mov r1, #1
	ldr r0, [r4, r0]
	bl sub_0202484C
	ldr r0, _02093CD4 ; =0x000007E8
	add r1, r7, #0
	ldr r0, [r4, r0]
	add r1, #0x27
	bl sub_020248F0
	ldr r0, _02093CD4 ; =0x000007E8
	mov r1, #1
	ldr r0, [r4, r0]
	bl sub_02024A04
	ldr r0, _02093CD4 ; =0x000007E8
	mov r1, #0
	ldr r0, [r4, r0]
	bl sub_02024830
	ldr r0, _02093CD4 ; =0x000007E8
	mov r1, #6
	ldr r0, [r4, r0]
	bl sub_02024ADC
	mov r0, #0x18
	str r0, [sp]
	ldr r0, _02093CD8 ; =0x000007E4
	ldr r2, [sp, #4]
	ldr r1, [r5, r0]
	add r0, r7, #0
	add r0, #0x21
	lsl r0, r0, #2
	add r0, r1, r0
	mov r1, #0xd4
	mov r3, #0x18
	bl sub_0209428C
	ldr r0, [sp, #0xc]
	add r7, r7, #1
	add r0, #0x28
	str r0, [sp, #0xc]
	ldr r0, [sp, #8]
	add r6, #8
	add r0, #0x28
	str r0, [sp, #8]
	ldr r0, [sp, #4]
	add r4, #0x34
	add r0, #0x28
	str r0, [sp, #4]
	ldrb r0, [r5, #0xd]
	cmp r7, r0
	blt _02093BB8
_02093C78:
	mov r6, #0
	cmp r7, #3
	bge _02093CAE
	mov r0, #0x28
	add r4, r7, #0
	mul r4, r0
	add r4, #0x2c
_02093C86:
	mov r0, #1
	str r0, [sp]
	add r0, r5, #0
	mov r1, #0xd4
	add r2, r4, #0
	mov r3, #0x2f
	bl sub_0209417C
	add r1, r6, #0
	add r2, r6, #1
	lsl r2, r2, #0x18
	lsl r1, r1, #2
	lsr r6, r2, #0x18
	add r2, r5, r1
	ldr r1, _02093CDC ; =0x000008C8
	add r7, r7, #1
	add r4, #0x28
	str r0, [r2, r1]
	cmp r7, #3
	blt _02093C86
_02093CAE:
	ldr r0, _02093CE0 ; =0x000046A8
	mov r1, #0x20
	strb r1, [r5, r0]
	mov r3, #0x97
	add r1, r0, #2
	strb r3, [r5, r1]
	mov r2, #8
	add r1, r0, #1
	strb r2, [r5, r1]
	add r1, r0, #3
	strb r3, [r5, r1]
	mov r1, #0
	add r0, r0, #4
	str r1, [r5, r0]
	add sp, #0x40
	pop {r3, r4, r5, r6, r7, pc}
	nop
_02093CD0: .word 0x000046A4
_02093CD4: .word 0x000007E8
_02093CD8: .word 0x000007E4
_02093CDC: .word 0x000008C8
_02093CE0: .word 0x000046A8
	thumb_func_end sub_02093B84

	thumb_func_start sub_02093CE4
sub_02093CE4: ; 0x02093CE4
	push {r4, r5, r6, r7, lr}
	sub sp, #0x24
	ldr r3, _02093E68 ; =0x0000469C
	add r1, r0, #0
	ldr r1, [r1, r3]
	str r0, [sp]
	cmp r1, #1
	bne _02093DA2
	mov r0, #0
	str r0, [sp, #0x18]
	ldr r0, [sp]
	ldrb r0, [r0, #0xd]
	mov ip, r0
	cmp r0, #0
	ble _02093DA0
	ldr r0, [sp]
	add r3, #8
	ldr r4, [r0, r3]
	ldr r5, [sp, #0x18]
	str r4, [sp, #8]
_02093D0C:
	ldr r0, [r4, #4]
	cmp r0, #0
	ldr r0, _02093E6C ; =0x00004698
	bne _02093D4E
	ldr r1, [sp]
	ldr r7, [r1, r0]
	ldr r0, [sp, #8]
	add r3, r0, r5
	ldrb r6, [r0, r5]
	ldrb r0, [r3, #2]
	ldrb r2, [r3, #1]
	str r0, [sp, #0x1c]
	ldr r0, _02093E70 ; =0x00004694
	ldr r0, [r1, r0]
	ldrb r1, [r3, #3]
	sub r0, r0, r2
	sub r1, r1, r2
	cmp r0, r1
	bhs _02093D90
	ldr r0, [sp, #0x1c]
	sub r1, r7, r6
	sub r0, r0, r6
	cmp r1, r0
	bhs _02093D90
	ldr r1, [sp, #0x18]
	ldr r0, [sp]
	lsl r1, r1, #0x18
	lsr r1, r1, #0x18
	bl sub_02093E7C
	add sp, #0x24
	mov r0, #1
	pop {r4, r5, r6, r7, pc}
_02093D4E:
	ldr r1, [sp]
	ldr r7, [r1, r0]
	ldr r0, [sp, #8]
	add r3, r0, r5
	ldrb r6, [r0, r5]
	ldrb r0, [r3, #2]
	ldrb r2, [r3, #1]
	str r0, [sp, #0x20]
	ldr r0, _02093E70 ; =0x00004694
	ldr r0, [r1, r0]
	ldrb r1, [r3, #3]
	sub r0, r0, r2
	sub r1, r1, r2
	cmp r0, r1
	bhs _02093D90
	ldr r0, [sp, #0x20]
	sub r1, r7, r6
	sub r0, r0, r6
	cmp r1, r0
	bhs _02093D90
	ldr r0, [sp]
	ldr r1, [sp, #0x18]
	bl sub_02094F5C
	ldr r1, [sp, #0x18]
	ldr r0, [sp]
	lsl r1, r1, #0x18
	lsr r1, r1, #0x18
	bl sub_02093E7C
	add sp, #0x24
	mov r0, #1
	pop {r4, r5, r6, r7, pc}
_02093D90:
	ldr r0, [sp, #0x18]
	add r4, #8
	add r1, r0, #1
	mov r0, ip
	add r5, #8
	str r1, [sp, #0x18]
	cmp r1, r0
	blt _02093D0C
_02093DA0:
	b _02093E62
_02093DA2:
	cmp r1, #2
	bne _02093E5E
	sub r2, r3, #4
	add r1, r0, #0
	ldr r1, [r1, r2]
	add r2, r3, #0
	str r1, [sp, #0x14]
	add r2, #0xd
	add r1, r0, #0
	ldrb r6, [r1, r2]
	add r2, r3, #0
	add r2, #0xc
	ldrb r5, [r1, r2]
	add r2, r3, #0
	add r2, #0xe
	ldrb r4, [r1, r2]
	add r2, r3, #0
	sub r2, #8
	ldr r1, [r1, r2]
	add r2, r3, #0
	str r1, [sp, #0x10]
	sub r7, r1, r6
	add r2, #0xf
	add r1, r0, #0
	ldrb r1, [r1, r2]
	sub r1, r1, r6
	cmp r7, r1
	bhs _02093DFA
	ldr r1, [sp, #0x14]
	sub r2, r1, r5
	sub r1, r4, r5
	cmp r2, r1
	bhs _02093DFA
	sub r3, #0x18
	add r1, r0, #0
	ldr r1, [r1, r3]
	bl sub_02094F5C
	ldr r0, [sp]
	bl sub_020956B8
	add sp, #0x24
	mov r0, #2
	pop {r4, r5, r6, r7, pc}
_02093DFA:
	ldr r0, [sp]
	mov r7, #0
	ldrb r0, [r0, #0xd]
	str r0, [sp, #0xc]
	cmp r0, #0
	ble _02093E62
	ldr r1, _02093E74 ; =0x000046A4
	ldr r0, [sp]
	add r6, r7, #0
	ldr r5, [r0, r1]
	str r5, [sp, #4]
_02093E10:
	ldr r0, [r5, #4]
	cmp r0, #0
	bne _02093E50
	ldr r0, [sp, #4]
	add r4, r0, r6
	ldrb r3, [r4, #1]
	ldrb r1, [r4, #2]
	ldrb r2, [r0, r6]
	ldr r0, [sp, #0x10]
	ldrb r4, [r4, #3]
	sub r0, r0, r3
	sub r3, r4, r3
	cmp r0, r3
	bhs _02093E50
	ldr r0, [sp, #0x14]
	sub r3, r0, r2
	sub r0, r1, r2
	cmp r3, r0
	bhs _02093E50
	ldr r0, [sp]
	ldr r2, _02093E78 ; =0x00004684
	add r1, r0, #0
	ldr r1, [r1, r2]
	lsl r2, r7, #0x18
	lsl r1, r1, #0x18
	lsr r1, r1, #0x18
	lsr r2, r2, #0x18
	bl sub_02093F84
	add sp, #0x24
	mov r0, #3
	pop {r4, r5, r6, r7, pc}
_02093E50:
	ldr r0, [sp, #0xc]
	add r7, r7, #1
	add r5, #8
	add r6, #8
	cmp r7, r0
	blt _02093E10
	b _02093E62
_02093E5E:
	bl GF_AssertFail
_02093E62:
	mov r0, #0
	add sp, #0x24
	pop {r4, r5, r6, r7, pc}
	.balign 4, 0
_02093E68: .word 0x0000469C
_02093E6C: .word 0x00004698
_02093E70: .word 0x00004694
_02093E74: .word 0x000046A4
_02093E78: .word 0x00004684
	thumb_func_end sub_02093CE4

	thumb_func_start sub_02093E7C
sub_02093E7C: ; 0x02093E7C
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x10
	add r5, r0, #0
	ldr r0, _02093F70 ; =0x000005EA
	str r1, [sp]
	bl PlaySE
	ldr r2, _02093F74 ; =0x000046A4
	ldr r0, [sp]
	ldr r1, [r5, r2]
	lsl r0, r0, #3
	mov r3, #1
	add r0, r1, r0
	str r3, [r0, #4]
	sub r2, #0x20
	ldr r2, [r5, r2]
	ldr r1, [sp]
	lsl r2, r2, #0x18
	add r0, r5, #0
	lsr r2, r2, #0x18
	mov r3, #0
	bl sub_02094668
	ldrb r1, [r5, #0xd]
	mov r4, #0
	cmp r1, #0
	bls _02093F6A
	mov r0, #0x8d
	lsl r0, r0, #4
	mov r7, #0xc
	add r2, r7, #0
	ldr r0, [r5, r0]
	sub r2, #0xd
_02093EBE:
	add r6, r4, #0
	mul r6, r7
	add r3, r0, r6
	ldr r3, [r3, #4]
	cmp r3, r2
	bne _02093F60
	ldr r0, _02093F78 ; =0x00004688
	add r2, sp, #4
	add r3, r5, r0
	ldmia r3!, {r0, r1}
	add r7, r2, #0
	stmia r2!, {r0, r1}
	ldr r0, [r3]
	str r0, [r2]
	mov r0, #2
	ldr r1, [sp, #4]
	lsl r0, r0, #0xe
	sub r1, r1, r0
	str r1, [sp, #4]
	ldr r1, [sp, #8]
	lsr r0, r0, #1
	sub r0, r1, r0
	str r0, [sp, #8]
	mov r0, #0x8d
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	add r1, r7, #0
	ldr r0, [r0, r6]
	bl sub_020247D4
	mov r0, #0x8d
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	mov r1, #1
	ldr r0, [r0, r6]
	bl sub_02024830
	ldr r0, _02093F7C ; =0x00004684
	lsr r2, r0, #3
	ldr r2, [r5, r2]
	ldr r1, [r5, r0]
	add r2, r2, r6
	str r1, [r2, #4]
	lsr r2, r0, #3
	ldr r2, [r5, r2]
	ldrb r1, [r5, #0xf]
	add r2, r2, r6
	str r1, [r2, #8]
	ldrb r1, [r5, #0xe]
	add r1, r1, #1
	strb r1, [r5, #0xe]
	ldr r1, [r5, r0]
	mov r0, #0x34
	mul r0, r1
	add r1, r5, r0
	mov r0, #0x66
	lsl r0, r0, #2
	ldr r0, [r1, r0]
	mov r1, #1
	bl sub_02024B78
	ldr r0, [sp]
	ldr r3, _02093F80 ; =0x00000888
	lsl r1, r0, #4
	ldr r0, _02093F7C ; =0x00004684
	add r1, r5, r1
	ldr r2, [r5, r0]
	add r0, #0x2c
	str r2, [r1, r3]
	ldrb r6, [r5, #0xf]
	sub r2, r3, #4
	str r6, [r1, r2]
	add r2, r3, #4
	str r4, [r1, r2]
	mov r2, #1
	add r3, #8
	str r2, [r1, r3]
	ldr r1, [sp]
	add sp, #0x10
	str r1, [r5, r0]
	pop {r3, r4, r5, r6, r7, pc}
_02093F60:
	add r3, r4, #1
	lsl r3, r3, #0x18
	lsr r4, r3, #0x18
	cmp r4, r1
	blo _02093EBE
_02093F6A:
	add sp, #0x10
	pop {r3, r4, r5, r6, r7, pc}
	nop
_02093F70: .word 0x000005EA
_02093F74: .word 0x000046A4
_02093F78: .word 0x00004688
_02093F7C: .word 0x00004684
_02093F80: .word 0x00000888
	thumb_func_end sub_02093E7C

	thumb_func_start sub_02093F84
sub_02093F84: ; 0x02093F84
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	ldr r0, _02093FF4 ; =0x000005EA
	add r4, r1, #0
	add r6, r2, #0
	bl PlaySE
	lsl r7, r4, #4
	mov r2, #0x89
	mov r1, #0
	add r0, r5, r7
	lsl r2, r2, #4
	str r1, [r0, r2]
	mov r0, #0x34
	mul r0, r4
	add r0, r5, r0
	sub r2, #0xa8
	ldr r0, [r0, r2]
	bl sub_02024830
	ldr r1, _02093FF8 ; =0x000046A4
	mov r0, #0
	ldr r2, [r5, r1]
	lsl r1, r4, #3
	add r1, r2, r1
	str r0, [r1, #4]
	ldr r0, _02093FF8 ; =0x000046A4
	mov r3, #1
	ldr r1, [r5, r0]
	lsl r0, r6, #3
	add r0, r1, r0
	str r3, [r0, #4]
	add r0, r5, #0
	add r1, r6, #0
	add r2, r4, #0
	bl sub_02094668
	lsl r1, r6, #4
	ldr r0, _02093FFC ; =0x00000888
	add r2, r5, r7
	ldr r3, [r2, r0]
	add r1, r5, r1
	str r3, [r1, r0]
	sub r3, r0, #4
	ldr r4, [r2, r3]
	str r4, [r1, r3]
	add r3, r0, #4
	ldr r3, [r2, r3]
	add r2, r0, #4
	str r3, [r1, r2]
	mov r2, #1
	add r0, #8
	str r2, [r1, r0]
	ldr r0, _02094000 ; =0x000046B0
	str r6, [r5, r0]
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_02093FF4: .word 0x000005EA
_02093FF8: .word 0x000046A4
_02093FFC: .word 0x00000888
_02094000: .word 0x000046B0
	thumb_func_end sub_02093F84

	thumb_func_start sub_02094004
sub_02094004: ; 0x02094004
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	mov r0, #0x20
	str r0, [sp]
	ldr r0, _0209413C ; =0x000007E4
	mov r1, #0xe0
	ldr r0, [r5, r0]
	mov r2, #0xb0
	add r0, #0x78
	mov r3, #0x32
	bl sub_0209428C
	mov r0, #1
	str r0, [sp]
	add r0, r5, #0
	mov r1, #0xe0
	mov r2, #0xb0
	mov r3, #4
	bl sub_0209417C
	ldr r1, _02094140 ; =0x000008B4
	str r0, [r5, r1]
	ldr r0, [r5, r1]
	mov r1, #3
	bl sub_02024A04
	ldrb r0, [r5, #0x13]
	cmp r0, #0
	bne _02094048
	ldr r0, _02094140 ; =0x000008B4
	mov r1, #0
	ldr r0, [r5, r0]
	bl sub_02024830
_02094048:
	mov r3, #0x20
	ldr r0, _0209413C ; =0x000007E4
	str r3, [sp]
	ldr r0, [r5, r0]
	mov r1, #0x90
	add r0, #0x80
	mov r2, #0x10
	bl sub_0209428C
	mov r0, #1
	str r0, [sp]
	add r0, r5, #0
	mov r1, #0x90
	mov r2, #0x10
	mov r3, #2
	bl sub_0209417C
	ldr r1, _02094144 ; =0x000008B8
	mov r3, #0x20
	str r0, [r5, r1]
	str r3, [sp]
	sub r1, #0xd4
	ldr r0, [r5, r1]
	mov r1, #0x10
	add r0, #0x7c
	add r2, r1, #0
	bl sub_0209428C
	mov r0, #1
	mov r1, #0x10
	str r0, [sp]
	add r0, r5, #0
	add r2, r1, #0
	mov r3, #0
	bl sub_0209417C
	ldr r1, _02094148 ; =0x000008BC
	mov r3, #0x32
	str r0, [r5, r1]
	mov r1, #0
	add r0, r5, #0
	add r2, r1, #0
	str r1, [sp]
	bl sub_0209417C
	ldr r1, _0209414C ; =0x000008C4
	mov r2, #0xff
	str r0, [r5, r1]
	ldrb r0, [r5, #0xd]
	sub r1, #0xe0
	ldr r1, [r5, r1]
	add r0, #0x21
	lsl r0, r0, #2
	strb r2, [r1, r0]
	ldrb r0, [r5, #0xd]
	mov r7, #0
	cmp r0, #0
	ble _0209410C
	add r6, r7, #0
	add r4, r7, #0
_020940C0:
	mov r0, #0
	str r0, [sp]
	add r0, r5, #0
	add r1, r6, #0
	mov r2, #0x40
	mov r3, #6
	bl sub_0209417C
	mov r1, #0x8d
	lsl r1, r1, #4
	ldr r1, [r5, r1]
	str r0, [r1, r4]
	mov r0, #0x8d
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	add r1, r0, r4
	mov r0, #0
	mvn r0, r0
	str r0, [r1, #4]
	mov r1, #0x8d
	lsl r1, r1, #4
	ldr r1, [r5, r1]
	ldrb r0, [r5, #0x10]
	add r1, r1, r4
	str r0, [r1, #8]
	mov r0, #0x8d
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	mov r1, #4
	ldr r0, [r0, r4]
	bl sub_02024ADC
	ldrb r0, [r5, #0xd]
	add r7, r7, #1
	add r6, #0x24
	add r4, #0xc
	cmp r7, r0
	blt _020940C0
_0209410C:
	mov r0, #0
	strb r0, [r5, #0xe]
	mov r0, #1
	str r0, [sp]
	add r0, r5, #0
	mov r1, #0x14
	mov r2, #0x28
	mov r3, #0x2d
	bl sub_0209417C
	mov r1, #0x23
	lsl r1, r1, #6
	str r0, [r5, r1]
	ldr r0, [r5, r1]
	mov r1, #1
	bl sub_02024A04
	mov r0, #0x23
	lsl r0, r0, #6
	ldr r0, [r5, r0]
	mov r1, #1
	bl sub_02024ADC
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_0209413C: .word 0x000007E4
_02094140: .word 0x000008B4
_02094144: .word 0x000008B8
_02094148: .word 0x000008BC
_0209414C: .word 0x000008C4
	thumb_func_end sub_02094004

	thumb_func_start sub_02094150
sub_02094150: ; 0x02094150
	push {r3, r4}
	ldr r3, [r1, #0x18]
	mov r4, #0
	str r3, [r0]
	mov r3, #0x5d
	lsl r3, r3, #2
	add r3, r1, r3
	str r3, [r0, #4]
	mov r3, #1
	str r4, [r0, #0x10]
	lsl r3, r3, #0xc
	str r3, [r0, #0x14]
	str r3, [r0, #0x18]
	str r3, [r0, #0x1c]
	strh r4, [r0, #0x20]
	mov r3, #0x14
	str r3, [r0, #0x24]
	str r2, [r0, #0x28]
	ldr r1, [r1, #4]
	str r1, [r0, #0x2c]
	pop {r3, r4}
	bx lr
	thumb_func_end sub_02094150

	thumb_func_start sub_0209417C
sub_0209417C: ; 0x0209417C
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x30
	add r6, r0, #0
	add r5, r1, #0
	add r4, r2, #0
	add r0, sp, #0
	add r1, r6, #0
	mov r2, #1
	add r7, r3, #0
	bl sub_02094150
	lsl r0, r5, #0xc
	str r0, [sp, #8]
	lsl r0, r4, #0xc
	str r0, [sp, #0xc]
	mov r0, #0xa
	str r0, [sp, #0x24]
	add r0, sp, #0
	bl sub_02024624
	add r4, r0, #0
	mov r1, #1
	bl sub_0202484C
	add r0, r4, #0
	add r1, r7, #0
	bl sub_020248F0
	add r0, r4, #0
	mov r1, #1
	bl sub_02024A04
	ldr r1, [sp, #0x48]
	add r0, r4, #0
	bl sub_02024830
	add r0, r4, #0
	add sp, #0x30
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_0209417C

	thumb_func_start sub_020941CC
sub_020941CC: ; 0x020941CC
	push {r4, r5, r6, lr}
	sub sp, #0x10
	add r5, r0, #0
	mov r0, #0
	str r0, [sp]
	mov r0, #6
	lsl r0, r0, #8
	add r6, r1, #0
	str r0, [sp, #4]
	mov r1, #1
	add r4, r2, #0
	str r1, [sp, #8]
	mov r0, #0x97
	add r2, r6, #0
	mov r3, #2
	str r4, [sp, #0xc]
	bl GfGfxLoader_LoadScrnData
	mov r0, #0x20
	str r0, [sp]
	mov r0, #0x18
	str r0, [sp, #4]
	mov r0, #1
	mov r2, #0
	str r0, [sp, #8]
	add r0, r6, #0
	mov r1, #2
	add r3, r2, #0
	bl sub_0201CA4C
	add r0, r6, #0
	mov r1, #2
	bl BgCommitTilemapBufferToVram
	mov r0, #0
	str r0, [sp]
	mov r0, #6
	lsl r0, r0, #8
	str r0, [sp, #4]
	mov r0, #1
	str r0, [sp, #8]
	mov r0, #0x97
	mov r1, #4
	add r2, r6, #0
	mov r3, #3
	str r4, [sp, #0xc]
	bl GfGfxLoader_LoadScrnData
	mov r0, #0x20
	str r0, [sp]
	mov r0, #0x18
	str r0, [sp, #4]
	mov r0, #1
	mov r2, #0
	str r0, [sp, #8]
	add r0, r6, #0
	mov r1, #3
	add r3, r2, #0
	bl sub_0201CA4C
	add r0, r6, #0
	mov r1, #3
	bl BgCommitTilemapBufferToVram
	ldr r3, _02094280 ; =0x000046D0
	mov r0, #0x97
	mov r1, #3
	mov r2, #1
	add r3, r5, r3
	str r4, [sp]
	bl GfGfxLoader_GetScrnData
	ldr r3, _02094284 ; =0x000046C8
	mov r1, #1
	str r0, [r5, r3]
	add r3, #0xc
	mov r0, #0x97
	add r2, r1, #0
	add r3, r5, r3
	str r4, [sp]
	bl GfGfxLoader_GetScrnData
	ldr r1, _02094288 ; =0x000046CC
	str r0, [r5, r1]
	mov r0, #8
	mov r1, #0
	bl GX_EngineAToggleLayers
	add sp, #0x10
	pop {r4, r5, r6, pc}
	.balign 4, 0
_02094280: .word 0x000046D0
_02094284: .word 0x000046C8
_02094288: .word 0x000046CC
	thumb_func_end sub_020941CC

	thumb_func_start sub_0209428C
sub_0209428C: ; 0x0209428C
	push {r4, r5}
	ldr r5, [sp, #8]
	lsr r4, r5, #0x1f
	add r4, r5, r4
	asr r4, r4, #1
	sub r5, r2, r4
	strb r5, [r0]
	lsr r5, r3, #0x1f
	add r5, r3, r5
	asr r5, r5, #1
	sub r3, r1, r5
	strb r3, [r0, #2]
	add r2, r2, r4
	strb r2, [r0, #1]
	add r1, r1, r5
	strb r1, [r0, #3]
	pop {r4, r5}
	bx lr
	thumb_func_end sub_0209428C

	thumb_func_start sub_020942B0
sub_020942B0: ; 0x020942B0
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x48
	str r0, [sp, #4]
	ldr r1, [sp, #4]
	add r0, sp, #0x18
	mov r2, #1
	bl sub_02094150
	mov r6, #0
	mov r0, #0x28
	ldr r4, [sp, #4]
	str r6, [sp, #0x10]
	str r0, [sp, #0xc]
	add r7, r6, #0
_020942CC:
	mov r0, #0
	str r0, [sp, #0x14]
	ldr r0, [sp, #0xc]
	mov r5, #0x14
	lsl r0, r0, #0xc
	str r0, [sp, #8]
_020942D8:
	mov r0, #0x18
	str r0, [sp]
	ldr r1, [sp, #4]
	ldr r0, _020943E8 ; =0x000007E4
	ldr r2, [sp, #0xc]
	ldr r0, [r1, r0]
	add r1, r5, #0
	add r0, r0, r7
	mov r3, #0x18
	bl sub_0209428C
	lsl r0, r5, #0xc
	str r0, [sp, #0x20]
	ldr r0, [sp, #8]
	str r0, [sp, #0x24]
	mov r0, #0x66
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	cmp r0, #0
	bne _0209430C
	add r0, sp, #0x18
	bl sub_02024624
	mov r1, #0x66
	lsl r1, r1, #2
	str r0, [r4, r1]
_0209430C:
	mov r0, #0x66
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #1
	bl sub_0202484C
	mov r0, #0x66
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	add r1, r6, #7
	bl sub_020248F0
	mov r0, #0x66
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #1
	bl sub_02024A04
	mov r0, #0x66
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0
	bl sub_02024830
	mov r0, #0x66
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #6
	bl sub_02024ADC
	ldr r0, [sp, #0x14]
	add r7, r7, #4
	add r0, r0, #1
	add r4, #0x34
	add r6, r6, #1
	add r5, #0x18
	str r0, [sp, #0x14]
	cmp r0, #6
	blt _020942D8
	ldr r0, [sp, #0xc]
	add r0, #0x18
	str r0, [sp, #0xc]
	ldr r0, [sp, #0x10]
	add r0, r0, #1
	str r0, [sp, #0x10]
	cmp r0, #5
	blt _020942CC
	mov r0, #5
	lsl r0, r0, #0xe
	str r0, [sp, #0x20]
	lsl r0, r0, #1
	str r0, [sp, #0x24]
	mov r1, #0x7b
	ldr r0, [sp, #4]
	lsl r1, r1, #4
	ldr r0, [r0, r1]
	cmp r0, #0
	bne _0209438E
	add r0, sp, #0x18
	bl sub_02024624
	mov r2, #0x7b
	ldr r1, [sp, #4]
	lsl r2, r2, #4
	str r0, [r1, r2]
_0209438E:
	mov r1, #0x7b
	ldr r0, [sp, #4]
	lsl r1, r1, #4
	ldr r0, [r0, r1]
	mov r1, #1
	bl sub_0202484C
	mov r1, #0x7b
	ldr r0, [sp, #4]
	lsl r1, r1, #4
	ldr r0, [r0, r1]
	mov r1, #0x30
	bl sub_020248F0
	mov r1, #0x7b
	ldr r0, [sp, #4]
	lsl r1, r1, #4
	ldr r0, [r0, r1]
	mov r1, #1
	bl sub_02024A04
	mov r1, #0x7b
	ldr r0, [sp, #4]
	lsl r1, r1, #4
	ldr r0, [r0, r1]
	mov r1, #0
	bl sub_02024830
	mov r1, #0x7b
	ldr r0, [sp, #4]
	lsl r1, r1, #4
	ldr r0, [r0, r1]
	mov r1, #8
	bl sub_02024ADC
	mov r1, #0x7b
	ldr r0, [sp, #4]
	lsl r1, r1, #4
	ldr r0, [r0, r1]
	mov r1, #1
	bl sub_02024B78
	add sp, #0x48
	pop {r3, r4, r5, r6, r7, pc}
	nop
_020943E8: .word 0x000007E4
	thumb_func_end sub_020942B0

	thumb_func_start sub_020943EC
sub_020943EC: ; 0x020943EC
	push {r3, lr}
	ldrb r1, [r0, #0xf]
	cmp r1, #0x12
	bne _020943FA
	bl sub_02094528
	pop {r3, pc}
_020943FA:
	bl sub_02094400
	pop {r3, pc}
	thumb_func_end sub_020943EC

	thumb_func_start sub_02094400
sub_02094400: ; 0x02094400
	push {r4, r5, r6, r7, lr}
	sub sp, #0x54
	add r5, r0, #0
	ldr r1, [r5, #4]
	mov r0, #0x14
	bl NARC_ctor
	str r0, [sp, #0x1c]
	mov r1, #1
	ldr r0, [r5, #4]
	lsl r1, r1, #0xc
	bl AllocFromHeapAtEnd
	str r0, [sp, #0x20]
	mov r7, #0
	add r4, r5, #0
_02094420:
	mov r0, #0x66
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0
	bl sub_02024B78
	ldr r6, _02094514 ; =0x0000463C
	ldrb r1, [r5, #0xf]
	ldr r0, [r5, r6]
	add r6, #0xc
	ldr r6, [r5, r6]
	add r2, r7, #0
	add r3, sp, #0x24
	blx r6
	cmp r0, #0
	beq _02094494
	mov r0, #0x67
	lsl r0, r0, #2
	add r3, sp, #0x24
	add r2, r4, r0
	mov r6, #6
_0209444A:
	ldmia r3!, {r0, r1}
	stmia r2!, {r0, r1}
	sub r6, r6, #1
	bne _0209444A
	ldr r0, [sp, #0x20]
	mov r3, #0x66
	str r0, [sp]
	ldr r0, [sp, #0x1c]
	ldr r1, _02094518 ; =0x000008D4
	str r0, [sp, #4]
	mov r0, #0x40
	str r0, [sp, #8]
	lsl r3, r3, #2
	ldr r3, [r4, r3]
	add r0, sp, #0x24
	add r1, r5, r1
	add r2, r7, #0
	bl sub_02094C08
	add r0, sp, #0x24
	ldrh r0, [r0, #8]
	cmp r0, #0
	beq _02094486
	mov r0, #0x66
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #1
	bl sub_02024B78
	b _020944BA
_02094486:
	mov r0, #0x66
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0
	bl sub_02024B78
	b _020944BA
_02094494:
	ldr r0, [sp, #0x20]
	ldr r1, _02094518 ; =0x000008D4
	str r0, [sp]
	ldr r0, [sp, #0x1c]
	add r1, r5, r1
	str r0, [sp, #4]
	mov r0, #0x40
	str r0, [sp, #8]
	add r0, sp, #0x24
	add r2, r7, #0
	mov r3, #0
	bl sub_02094C08
	mov r0, #0x66
	lsl r0, r0, #2
	ldr r0, [r4, r0]
	mov r1, #0
	bl sub_02024830
_020944BA:
	add r7, r7, #1
	add r4, #0x34
	cmp r7, #0x1e
	blt _02094420
	ldr r0, [sp, #0x20]
	bl FreeToHeap
	ldr r0, [sp, #0x1c]
	bl NARC_dtor
	ldr r1, _0209451C ; =sub_02094758
	ldr r0, _02094520 ; =0x00004644
	str r1, [r5, r0]
	ldrb r1, [r5, #0xf]
	add r0, r5, #0
	bl sub_02094C88
	add r0, r5, #0
	bl sub_02094EB4
	mov r0, #0x14
	str r0, [sp]
	str r0, [sp, #4]
	ldr r0, _02094524 ; =0x000046D4
	mov r2, #0
	ldr r0, [r5, r0]
	mov r1, #2
	add r0, #0xc
	str r0, [sp, #8]
	str r2, [sp, #0xc]
	str r2, [sp, #0x10]
	mov r0, #0x20
	str r0, [sp, #0x14]
	mov r0, #0x18
	str r0, [sp, #0x18]
	ldr r0, [r5]
	add r3, r2, #0
	bl sub_0201C568
	ldr r0, [r5]
	mov r1, #2
	bl ScheduleBgTilemapBufferTransfer
	add sp, #0x54
	pop {r4, r5, r6, r7, pc}
	.balign 4, 0
_02094514: .word 0x0000463C
_02094518: .word 0x000008D4
_0209451C: .word sub_02094758
_02094520: .word 0x00004644
_02094524: .word 0x000046D4
	thumb_func_end sub_02094400

	thumb_func_start sub_02094528
sub_02094528: ; 0x02094528
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x58
	add r6, r0, #0
	ldr r1, [r6, #4]
	mov r0, #0x14
	bl NARC_ctor
	str r0, [sp, #0x20]
	mov r1, #1
	ldr r0, [r6, #4]
	lsl r1, r1, #0xc
	bl AllocFromHeapAtEnd
	str r0, [sp, #0x24]
	ldr r0, _02094654 ; =0x00004640
	ldr r0, [r6, r0]
	bl GetPartyCount
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	mov r4, #0
	str r0, [sp, #0x1c]
	cmp r0, #0
	ble _020945C0
	add r5, r6, #0
_0209455A:
	add r0, r6, #0
	add r1, r4, #0
	add r2, sp, #0x28
	bl sub_02094F14
	mov r0, #0x67
	lsl r0, r0, #2
	add r3, sp, #0x28
	add r2, r5, r0
	mov r7, #6
_0209456E:
	ldmia r3!, {r0, r1}
	stmia r2!, {r0, r1}
	sub r7, r7, #1
	bne _0209456E
	ldr r0, [sp, #0x24]
	mov r3, #0x66
	str r0, [sp]
	ldr r0, [sp, #0x20]
	ldr r1, _02094658 ; =0x000008D4
	str r0, [sp, #4]
	mov r0, #0x40
	str r0, [sp, #8]
	lsl r3, r3, #2
	ldr r3, [r5, r3]
	add r0, sp, #0x28
	add r1, r6, r1
	add r2, r4, #0
	bl sub_02094C08
	add r0, sp, #0x28
	ldrh r0, [r0, #8]
	cmp r0, #0
	beq _020945AA
	mov r0, #0x66
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	mov r1, #1
	bl sub_02024B78
	b _020945B6
_020945AA:
	mov r0, #0x66
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	mov r1, #0
	bl sub_02024B78
_020945B6:
	ldr r0, [sp, #0x1c]
	add r4, r4, #1
	add r5, #0x34
	cmp r4, r0
	blt _0209455A
_020945C0:
	mov r1, #0
	str r1, [sp, #0x28]
	add r0, sp, #0x28
	strh r1, [r0, #8]
	strh r1, [r0, #0xa]
	strh r1, [r0, #0xc]
	strh r1, [r0, #0xe]
	cmp r4, #0x1e
	bge _02094606
	mov r0, #0x34
	mul r0, r4
	add r5, r6, r0
	mov r7, #0x40
_020945DA:
	ldr r0, [sp, #0x24]
	ldr r1, _02094658 ; =0x000008D4
	str r0, [sp]
	ldr r0, [sp, #0x20]
	add r1, r6, r1
	str r0, [sp, #4]
	add r0, sp, #0x28
	add r2, r4, #0
	mov r3, #0
	str r7, [sp, #8]
	bl sub_02094C08
	mov r0, #0x66
	lsl r0, r0, #2
	ldr r0, [r5, r0]
	mov r1, #0
	bl sub_02024830
	add r4, r4, #1
	add r5, #0x34
	cmp r4, #0x1e
	blt _020945DA
_02094606:
	ldr r0, [sp, #0x24]
	bl FreeToHeap
	ldr r0, [sp, #0x20]
	bl NARC_dtor
	ldr r1, _0209465C ; =sub_02094758
	ldr r0, _02094660 ; =0x00004644
	str r1, [r6, r0]
	ldrb r1, [r6, #0xf]
	add r0, r6, #0
	bl sub_02094C88
	add r0, r6, #0
	bl sub_02094EB4
	mov r1, #0x14
	str r1, [sp]
	mov r2, #0
	ldr r0, _02094664 ; =0x000046D0
	str r1, [sp, #4]
	ldr r0, [r6, r0]
	add r3, r2, #0
	add r0, #0xc
	str r0, [sp, #8]
	str r2, [sp, #0xc]
	str r2, [sp, #0x10]
	str r1, [sp, #0x14]
	str r1, [sp, #0x18]
	ldr r0, [r6]
	mov r1, #2
	bl sub_0201C568
	ldr r0, [r6]
	mov r1, #2
	bl ScheduleBgTilemapBufferTransfer
	add sp, #0x58
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_02094654: .word 0x00004640
_02094658: .word 0x000008D4
_0209465C: .word sub_02094758
_02094660: .word 0x00004644
_02094664: .word 0x000046D0
	thumb_func_end sub_02094528

	thumb_func_start sub_02094668
sub_02094668: ; 0x02094668
	push {r4, r5, r6, r7, lr}
	sub sp, #0x1c
	add r4, r0, #0
	str r1, [sp, #0xc]
	ldr r1, [r4, #4]
	mov r0, #0x14
	add r7, r2, #0
	add r6, r3, #0
	bl NARC_ctor
	str r0, [sp, #0x14]
	mov r1, #1
	ldr r0, [r4, #4]
	lsl r1, r1, #0xc
	bl AllocFromHeapAtEnd
	str r0, [sp, #0x18]
	mov r3, #0
	mov r1, #0x83
	ldr r0, _02094740 ; =0x000008DC
	add r5, r4, #0
	add r2, r3, #0
	lsl r1, r1, #2
_02094696:
	add r3, r3, #1
	str r2, [r5, r0]
	add r5, r5, r1
	cmp r3, #0x1e
	blt _02094696
	cmp r6, #0
	beq _020946E6
	ldr r1, [sp, #0xc]
	ldr r0, _02094744 ; =0x000007EC
	add r3, r7, #0
	mov r2, #0x34
	mul r3, r2
	mul r2, r1
	add r1, r4, r2
	add r5, r4, r0
	mov ip, r2
	add r2, r5, r3
	add r6, r1, r0
	mov r7, #6
_020946BC:
	ldmia r2!, {r0, r1}
	stmia r6!, {r0, r1}
	sub r7, r7, #1
	bne _020946BC
	ldr r0, [sp, #0x18]
	str r0, [sp]
	ldr r0, [sp, #0x14]
	str r0, [sp, #4]
	ldr r0, _02094748 ; =0x00000222
	str r0, [sp, #8]
	add r0, r5, r3
	ldr r5, _0209474C ; =0x000008D4
	mov r3, ip
	add r1, r4, r5
	add r3, r4, r3
	sub r5, #0xec
	ldr r2, [sp, #0xc]
	ldr r3, [r3, r5]
	bl sub_02094C08
	b _0209472A
_020946E6:
	mov r0, #0x67
	lsl r0, r0, #2
	add r6, r4, r0
	add r5, r7, #0
	mov r1, #0x34
	mul r5, r1
	ldr r0, [sp, #0xc]
	add r3, r6, r5
	mul r1, r0
	str r1, [sp, #0x10]
	ldr r0, _02094744 ; =0x000007EC
	add r1, r4, r1
	add r2, r1, r0
	mov r7, #6
_02094702:
	ldmia r3!, {r0, r1}
	stmia r2!, {r0, r1}
	sub r7, r7, #1
	bne _02094702
	ldr r0, [sp, #0x18]
	ldr r3, [sp, #0x10]
	str r0, [sp]
	ldr r0, [sp, #0x14]
	add r3, r4, r3
	str r0, [sp, #4]
	ldr r0, _02094748 ; =0x00000222
	str r0, [sp, #8]
	add r0, r6, r5
	ldr r5, _0209474C ; =0x000008D4
	ldr r2, [sp, #0xc]
	add r1, r4, r5
	sub r5, #0xec
	ldr r3, [r3, r5]
	bl sub_02094C08
_0209472A:
	ldr r0, [sp, #0x18]
	bl FreeToHeap
	ldr r0, [sp, #0x14]
	bl NARC_dtor
	ldr r1, _02094750 ; =sub_02094758
	ldr r0, _02094754 ; =0x00004644
	str r1, [r4, r0]
	add sp, #0x1c
	pop {r4, r5, r6, r7, pc}
	.balign 4, 0
_02094740: .word 0x000008DC
_02094744: .word 0x000007EC
_02094748: .word 0x00000222
_0209474C: .word 0x000008D4
_02094750: .word sub_02094758
_02094754: .word 0x00004644
	thumb_func_end sub_02094668

	thumb_func_start sub_02094758
sub_02094758: ; 0x02094758
	push {r3, r4, r5, r6, r7, lr}
	mov r6, #2
	lsl r6, r6, #8
	add r7, r6, #0
	add r5, r0, #0
	mov r4, #0
	add r7, #0xc
_02094766:
	ldr r0, [r5, #8]
	cmp r0, #0
	beq _0209478A
	add r0, r5, #0
	add r0, #0xc
	add r1, r6, #0
	bl DC_FlushRange
	add r0, r5, #0
	ldr r1, [r5]
	add r0, #0xc
	add r2, r6, #0
	bl sub_020CFE74
	ldr r0, [r5, #8]
	mov r1, #1
	bl sub_02024830
_0209478A:
	add r4, r4, #1
	add r5, r5, r7
	cmp r4, #0x1e
	blt _02094766
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_02094758

	thumb_func_start sub_02094794
sub_02094794: ; 0x02094794
	push {r3, r4, r5, lr}
	add r5, r0, #0
	add r4, r1, #0
	mov r0, #0x34
	mul r0, r4
	add r1, r5, r0
	mov r0, #0x66
	lsl r0, r0, #2
	ldr r0, [r1, r0]
	bl sub_020248AC
	add r1, r0, #0
	mov r0, #0x23
	lsl r0, r0, #6
	ldr r0, [r5, r0]
	bl sub_020247D4
	add r0, r5, #0
	add r1, r4, #0
	bl sub_020947C0
	pop {r3, r4, r5, pc}
	thumb_func_end sub_02094794

	thumb_func_start sub_020947C0
sub_020947C0: ; 0x020947C0
	push {r3, r4, r5, r6, r7, lr}
	add r4, r1, #0
	add r5, r0, #0
	mov r0, #0x34
	add r6, r4, #0
	mul r6, r0
	mov r0, #0x66
	add r1, r5, r6
	lsl r0, r0, #2
	ldr r0, [r1, r0]
	cmp r0, #0
	beq _020947E4
	bl sub_020248B8
	cmp r0, #0
	bne _020947E4
	mov r0, #3
	pop {r3, r4, r5, r6, r7, pc}
_020947E4:
	mov r0, #0x69
	add r1, r5, r6
	lsl r0, r0, #2
	ldrh r0, [r1, r0]
	cmp r0, #0
	beq _020947F4
	mov r0, #3
	pop {r3, r4, r5, r6, r7, pc}
_020947F4:
	mov r1, #0
	mov r0, #0
	mvn r1, r1
	add r2, r0, #0
	b _0209481A
_020947FE:
	mov r3, #0x8d
	lsl r3, r3, #4
	ldr r3, [r5, r3]
	ldrb r6, [r5, #0xf]
	add r7, r3, r2
	ldr r3, [r7, #8]
	cmp r6, r3
	bne _02094816
	ldr r3, [r7, #4]
	cmp r4, r3
	bne _02094816
	add r1, r0, #0
_02094816:
	add r2, #0xc
	add r0, r0, #1
_0209481A:
	mov r3, #0
	mvn r3, r3
	cmp r1, r3
	bne _02094828
	ldrb r3, [r5, #0xd]
	cmp r0, r3
	blt _020947FE
_02094828:
	mov r0, #0
	mvn r0, r0
	cmp r1, r0
	bne _0209485C
	ldrb r3, [r5, #0xd]
	ldrb r0, [r5, #0xe]
	cmp r0, r3
	bne _0209483C
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_0209483C:
	mov r4, #0
	cmp r3, #0
	ble _0209485C
	mov r0, #0x8d
	lsl r0, r0, #4
	ldr r2, [r5, r0]
	sub r0, r4, #1
_0209484A:
	ldr r1, [r2, #4]
	cmp r1, r0
	bne _02094854
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_02094854:
	add r4, r4, #1
	add r2, #0xc
	cmp r4, r3
	blt _0209484A
_0209485C:
	mov r0, #2
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_020947C0

	thumb_func_start sub_02094860
sub_02094860: ; 0x02094860
	push {r4, r5, r6, lr}
	add r5, r0, #0
	add r4, r1, #0
	bl sub_02094894
	ldrb r1, [r5, #0xd]
	add r6, r0, #0
	cmp r4, r1
	bge _0209488E
	mov r0, #0x34
	mul r0, r4
	add r1, r5, r0
	ldr r0, _02094890 ; =0x000007E8
	ldr r0, [r1, r0]
	bl sub_020248AC
	add r1, r0, #0
	mov r0, #0x23
	lsl r0, r0, #6
	ldr r0, [r5, r0]
	bl sub_020247D4
	add r0, r6, #0
_0209488E:
	pop {r4, r5, r6, pc}
	.balign 4, 0
_02094890: .word 0x000007E8
	thumb_func_end sub_02094860

	thumb_func_start sub_02094894
sub_02094894: ; 0x02094894
	push {r3, lr}
	ldrb r2, [r0, #0xd]
	cmp r1, r2
	blt _020948A0
	mov r0, #3
	pop {r3, pc}
_020948A0:
	mov r2, #0x34
	mul r2, r1
	add r1, r0, r2
	ldr r0, _020948C0 ; =0x000007E8
	ldr r0, [r1, r0]
	cmp r0, #0
	beq _020948BA
	bl sub_020248B8
	cmp r0, #0
	bne _020948BA
	mov r0, #3
	pop {r3, pc}
_020948BA:
	mov r0, #1
	pop {r3, pc}
	nop
_020948C0: .word 0x000007E8
	thumb_func_end sub_02094894

	thumb_func_start sub_020948C4
sub_020948C4: ; 0x020948C4
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	add r4, r1, #0
	add r5, r0, #0
	ldr r1, _020949D4 ; =0x00004680
	mov r0, #1
	str r0, [r5, r1]
	add r6, r2, #0
	add r0, r1, #4
	str r6, [r5, r0]
	add r0, r1, #0
	add r0, #0x1c
	str r4, [r5, r0]
	cmp r4, #1
	bne _020948EE
	mov r0, #0x66
	lsl r0, r0, #2
	add r7, r5, r0
	add r1, #0x20
	str r7, [r5, r1]
	b _02094900
_020948EE:
	cmp r4, #2
	bne _020948FC
	ldr r0, _020949D8 ; =0x000007E8
	add r1, #0x20
	add r7, r5, r0
	str r7, [r5, r1]
	b _02094900
_020948FC:
	bl GF_AssertFail
_02094900:
	mov r0, #0x34
	mul r0, r6
	ldr r0, [r7, r0]
	bl sub_020248AC
	add r3, r0, #0
	ldr r0, _020949DC ; =0x00004688
	add r2, r5, r0
	ldmia r3!, {r0, r1}
	stmia r2!, {r0, r1}
	ldr r0, [r3]
	mov r1, #0x2e
	str r0, [r2]
	mov r0, #0x23
	lsl r0, r0, #6
	ldr r0, [r5, r0]
	bl sub_020248F0
	ldr r0, _020949E0 ; =0x000046A0
	ldr r2, [r5, r0]
	sub r0, #0x1c
	ldr r1, [r5, r0]
	mov r0, #0x34
	mul r0, r1
	ldr r0, [r2, r0]
	mov r1, #3
	bl sub_02024ADC
	cmp r4, #1
	bne _020949D0
	ldr r0, _020949E0 ; =0x000046A0
	ldr r2, [r5, r0]
	sub r0, #0x1c
	ldr r1, [r5, r0]
	mov r0, #0x34
	mul r0, r1
	ldr r0, [r2, r0]
	bl sub_020248AC
	add r6, r0, #0
	mov r3, #0
	mov r1, #0x83
	ldr r0, _020949E4 ; =0x000008DC
	add r4, r5, #0
	add r2, r3, #0
	lsl r1, r1, #2
_0209495C:
	add r3, r3, #1
	str r2, [r4, r0]
	add r4, r4, r1
	cmp r3, #0x1e
	blt _0209495C
	ldr r1, [r5, #4]
	mov r0, #0x14
	bl NARC_ctor
	add r4, r0, #0
	mov r1, #1
	ldr r0, [r5, #4]
	lsl r1, r1, #0xc
	bl AllocFromHeapAtEnd
	add r7, r0, #0
	ldr r3, _020949E0 ; =0x000046A0
	str r7, [sp]
	add r1, r3, #0
	ldr r0, _020949E8 ; =0x000002B1
	str r4, [sp, #4]
	str r0, [sp, #8]
	sub r1, #0x1c
	ldr r2, [r5, r1]
	mov r1, #0x34
	mul r1, r2
	ldr r0, [r5, r3]
	mov r2, #0
	add r0, r0, r1
	lsr r1, r3, #3
	mov r3, #0x7b
	lsl r3, r3, #4
	ldr r3, [r5, r3]
	add r0, r0, #4
	add r1, r5, r1
	bl sub_02094C08
	mov r0, #0x7b
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	add r1, r6, #0
	bl sub_020247D4
	mov r0, #0x7b
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	mov r1, #1
	bl sub_02024830
	add r0, r7, #0
	bl FreeToHeap
	add r0, r4, #0
	bl NARC_dtor
	ldr r1, _020949EC ; =sub_02094758
	ldr r0, _020949F0 ; =0x00004644
	str r1, [r5, r0]
_020949D0:
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
	.balign 4, 0
_020949D4: .word 0x00004680
_020949D8: .word 0x000007E8
_020949DC: .word 0x00004688
_020949E0: .word 0x000046A0
_020949E4: .word 0x000008DC
_020949E8: .word 0x000002B1
_020949EC: .word sub_02094758
_020949F0: .word 0x00004644
	thumb_func_end sub_020948C4

	thumb_func_start sub_020949F4
sub_020949F4: ; 0x020949F4
	push {r3, r4, r5, lr}
	sub sp, #0x20
	add r4, r0, #0
	ldr r0, _02094A64 ; =0x00004680
	ldr r0, [r4, r0]
	cmp r0, #0
	beq _02094A5E
	add r0, sp, #4
	add r1, sp, #0
	bl sub_02025364
	ldr r0, [sp, #4]
	add r5, sp, #0x14
	lsl r0, r0, #0xc
	str r0, [sp, #0x14]
	ldr r0, [sp]
	add r3, sp, #8
	lsl r0, r0, #0xc
	str r0, [sp, #0x18]
	mov r0, #0
	str r0, [sp, #0x1c]
	ldmia r5!, {r0, r1}
	add r2, r3, #0
	stmia r3!, {r0, r1}
	ldr r0, [r5]
	str r0, [r3]
	mov r0, #1
	ldr r1, [sp, #0xc]
	lsl r0, r0, #0xe
	sub r0, r1, r0
	str r0, [sp, #0xc]
	ldr r0, _02094A68 ; =0x000046A0
	ldr r3, [r4, r0]
	sub r0, #0x1c
	ldr r1, [r4, r0]
	mov r0, #0x34
	mul r0, r1
	ldr r0, [r3, r0]
	add r1, r2, #0
	bl sub_020247D4
	mov r0, #0x23
	lsl r0, r0, #6
	ldr r0, [r4, r0]
	add r1, sp, #0x14
	bl sub_020247D4
	ldr r1, [sp, #4]
	ldr r0, _02094A6C ; =0x00004694
	str r1, [r4, r0]
	ldr r1, [sp]
	add r0, r0, #4
	str r1, [r4, r0]
_02094A5E:
	add sp, #0x20
	pop {r3, r4, r5, pc}
	nop
_02094A64: .word 0x00004680
_02094A68: .word 0x000046A0
_02094A6C: .word 0x00004694
	thumb_func_end sub_020949F4

	thumb_func_start sub_02094A70
sub_02094A70: ; 0x02094A70
	push {r4, lr}
	ldr r1, _02094A8C ; =0x00004680
	add r4, r0, #0
	ldr r1, [r4, r1]
	cmp r1, #0
	beq _02094A88
	bl sub_02093CE4
	add r1, r0, #0
	add r0, r4, #0
	bl sub_02094A90
_02094A88:
	pop {r4, pc}
	nop
_02094A8C: .word 0x00004680
	thumb_func_end sub_02094A70

	thumb_func_start sub_02094A90
sub_02094A90: ; 0x02094A90
	push {r4, r5, lr}
	sub sp, #0xc
	add r4, r0, #0
	cmp r1, #0
	beq _02094B1A
	ldr r2, _02094BF0 ; =0x0000469C
	ldr r0, [r4, r2]
	cmp r0, #2
	bne _02094AE8
	cmp r1, #2
	bne _02094AC0
	add r0, r2, #0
	sub r0, #0x14
	add r5, r4, r0
	ldmia r5!, {r0, r1}
	add r3, sp, #0
	stmia r3!, {r0, r1}
	ldr r0, [r5]
	sub r2, #0x18
	str r0, [r3]
	ldr r0, [r4, r2]
	lsl r0, r0, #0x18
	lsr r2, r0, #0x18
	b _02094B0E
_02094AC0:
	add r0, r2, #0
	add r0, #0x14
	ldr r0, [r4, r0]
	add r2, #0x14
	lsl r0, r0, #0x18
	lsr r1, r0, #0x18
	mov r0, #0x35
	lsl r0, r0, #0xe
	str r0, [sp]
	add r1, r1, #1
	mov r0, #0x28
	mul r0, r1
	lsl r0, r0, #0xc
	str r0, [sp, #4]
	mov r0, #0
	str r0, [sp, #8]
	ldr r0, [r4, r2]
	lsl r0, r0, #0x18
	lsr r2, r0, #0x18
	b _02094B0E
_02094AE8:
	add r0, r2, #0
	add r0, #0x14
	ldr r0, [r4, r0]
	add r2, #0x14
	lsl r0, r0, #0x18
	lsr r1, r0, #0x18
	mov r0, #0x35
	lsl r0, r0, #0xe
	str r0, [sp]
	add r1, r1, #1
	mov r0, #0x28
	mul r0, r1
	lsl r0, r0, #0xc
	str r0, [sp, #4]
	mov r0, #0
	str r0, [sp, #8]
	ldr r0, [r4, r2]
	lsl r0, r0, #0x18
	lsr r2, r0, #0x18
_02094B0E:
	ldr r0, _02094BF4 ; =0x000046B8
	mov r1, #3
	ldr r0, [r4, r0]
	bl sub_02095D40
	b _02094B5C
_02094B1A:
	ldr r2, _02094BF8 ; =0x00004688
	add r3, sp, #0
	add r5, r4, r2
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldr r0, [r5]
	str r0, [r3]
	add r0, r2, #0
	add r0, #0x14
	ldr r0, [r4, r0]
	cmp r0, #2
	bne _02094B48
	add r0, r2, #0
	sub r2, r2, #4
	ldr r2, [r4, r2]
	add r0, #0x30
	lsl r2, r2, #0x18
	ldr r0, [r4, r0]
	mov r1, #3
	lsr r2, r2, #0x18
	bl sub_02095D40
	b _02094B5C
_02094B48:
	add r0, r2, #0
	sub r2, r2, #4
	ldr r2, [r4, r2]
	add r0, #0x30
	lsl r2, r2, #0x18
	ldr r0, [r4, r0]
	mov r1, #2
	lsr r2, r2, #0x18
	bl sub_02095D40
_02094B5C:
	ldr r1, _02094BFC ; =0x000046A0
	add r0, r1, #0
	sub r0, #0x1c
	ldr r2, [r4, r0]
	ldr r3, [r4, r1]
	mov r0, #0x34
	mul r0, r2
	sub r1, #0x18
	ldr r0, [r3, r0]
	add r1, r4, r1
	bl sub_020247D4
	ldr r0, _02094BFC ; =0x000046A0
	ldr r2, [r4, r0]
	sub r0, #0x1c
	ldr r1, [r4, r0]
	mov r0, #0x34
	mul r0, r1
	ldr r0, [r2, r0]
	mov r1, #6
	bl sub_02024ADC
	mov r0, #0x23
	lsl r0, r0, #6
	ldr r0, [r4, r0]
	add r1, sp, #0
	bl sub_020247D4
	mov r0, #0x23
	lsl r0, r0, #6
	ldr r0, [r4, r0]
	mov r1, #0x2d
	bl sub_020248F0
	ldr r0, _02094C00 ; =0x000046BC
	ldr r1, [r4, r0]
	cmp r1, #0
	beq _02094BAC
	mov r1, #0
	str r1, [r4, r0]
_02094BAC:
	ldr r0, _02094C04 ; =0x00004680
	mov r1, #0
	str r1, [r4, r0]
	sub r3, r1, #1
	add r2, r0, #4
	str r3, [r4, r2]
	add r2, r0, #0
	add r2, #8
	str r1, [r4, r2]
	add r2, r0, #0
	add r2, #0xc
	str r1, [r4, r2]
	add r2, r0, #0
	add r2, #0x10
	str r1, [r4, r2]
	add r2, r0, #0
	add r2, #0x14
	str r1, [r4, r2]
	add r2, r0, #0
	add r2, #0x18
	str r1, [r4, r2]
	add r2, r0, #0
	add r2, #0x20
	str r1, [r4, r2]
	add r0, #0x1c
	str r1, [r4, r0]
	mov r0, #0x7b
	lsl r0, r0, #4
	ldr r0, [r4, r0]
	bl sub_02024830
	add sp, #0xc
	pop {r4, r5, pc}
	nop
_02094BF0: .word 0x0000469C
_02094BF4: .word 0x000046B8
_02094BF8: .word 0x00004688
_02094BFC: .word 0x000046A0
_02094C00: .word 0x000046BC
_02094C04: .word 0x00004680
	thumb_func_end sub_02094A90

	thumb_func_start sub_02094C08
sub_02094C08: ; 0x02094C08
	push {r3, r4, r5, r6, r7, lr}
	add r6, r0, #0
	mov r0, #0x83
	add r7, r2, #0
	lsl r0, r0, #2
	mul r0, r7
	add r5, r3, #0
	add r4, r1, r0
	cmp r5, #0
	beq _02094C64
	ldrh r1, [r6, #8]
	ldrh r2, [r6, #0xa]
	ldr r0, [r6]
	bl sub_020741BC
	ldr r2, [sp, #0x18]
	ldr r3, [sp, #0x1c]
	add r1, sp, #0
	bl sub_02094C6C
	ldr r0, [sp]
	add r1, r4, #0
	mov r2, #2
	ldr r0, [r0, #0x14]
	add r1, #0xc
	lsl r2, r2, #8
	bl sub_020D48B4
	ldr r1, [sp, #0x20]
	lsl r0, r7, #4
	add r0, r1, r0
	lsl r0, r0, #5
	str r0, [r4]
	str r5, [r4, #8]
	ldrh r1, [r6, #0xa]
	ldrh r2, [r6, #8]
	ldr r0, [r6]
	bl sub_02074364
	add r0, #8
	str r0, [r4, #4]
	ldr r1, [r4, #4]
	add r0, r5, #0
	bl sub_02024A14
	pop {r3, r4, r5, r6, r7, pc}
_02094C64:
	mov r0, #0
	str r0, [r4, #8]
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_02094C08

	thumb_func_start sub_02094C6C
sub_02094C6C: ; 0x02094C6C
	push {r4, r5, r6, lr}
	add r6, r0, #0
	add r5, r1, #0
	add r4, r2, #0
	add r0, r3, #0
	add r1, r6, #0
	bl NARC_ReadWholeMember
	add r0, r4, #0
	add r1, r5, #0
	bl NNS_G2dGetUnpackedBGCharacterData
	pop {r4, r5, r6, pc}
	.balign 4, 0
	thumb_func_end sub_02094C6C

	thumb_func_start sub_02094C88
sub_02094C88: ; 0x02094C88
	push {r4, r5, r6, lr}
	sub sp, #0x10
	add r6, r1, #0
	add r5, r0, #0
	cmp r6, #0x12
	bne _02094CB2
	ldr r2, _02094D0C ; =0x0000012A
	ldr r3, [r5, #4]
	mov r0, #1
	mov r1, #0x1b
	bl NewMsgDataFromNarc
	add r6, r0, #0
	mov r1, #1
	bl NewString_ReadMsgData
	add r4, r0, #0
	add r0, r6, #0
	bl DestroyMsgData
	b _02094CC8
_02094CB2:
	ldr r1, [r5, #4]
	mov r0, #0x40
	bl String_ctor
	ldr r3, _02094D10 ; =0x0000463C
	add r2, r6, #0
	ldr r1, [r5, r3]
	add r3, #0x10
	ldr r3, [r5, r3]
	add r4, r0, #0
	blx r3
_02094CC8:
	ldr r0, _02094D14 ; =0x00004650
	mov r1, #0
	add r0, r5, r0
	bl FillWindowPixelBuffer
	mov r0, #0
	add r1, r4, #0
	add r2, r0, #0
	mov r3, #0x60
	bl sub_020030A0
	mov r1, #0
	add r3, r0, #0
	str r1, [sp]
	mov r0, #0xff
	str r0, [sp, #4]
	ldr r0, _02094D18 ; =0x00010200
	add r2, r4, #0
	str r0, [sp, #8]
	ldr r0, _02094D14 ; =0x00004650
	str r1, [sp, #0xc]
	add r0, r5, r0
	bl sub_020200FC
	ldr r0, _02094D14 ; =0x00004650
	add r0, r5, r0
	bl CopyWindowToVram
	add r0, r4, #0
	bl String_dtor
	add sp, #0x10
	pop {r4, r5, r6, pc}
	nop
_02094D0C: .word 0x0000012A
_02094D10: .word 0x0000463C
_02094D14: .word 0x00004650
_02094D18: .word 0x00010200
	thumb_func_end sub_02094C88

	thumb_func_start sub_02094D1C
sub_02094D1C: ; 0x02094D1C
	push {r4, r5, r6, lr}
	sub sp, #0x10
	add r5, r0, #0
	ldr r2, _02094D90 ; =0x0000012A
	ldr r3, [r5, #4]
	mov r0, #1
	mov r1, #0x1b
	bl NewMsgDataFromNarc
	mov r1, #0
	add r6, r0, #0
	bl NewString_ReadMsgData
	add r4, r0, #0
	ldr r0, _02094D94 ; =0x00004670
	mov r1, #0
	add r0, r5, r0
	bl FillWindowPixelBuffer
	ldrb r0, [r5, #0x13]
	cmp r0, #0
	beq _02094D78
	ldr r0, _02094D94 ; =0x00004670
	add r0, r5, r0
	bl GetWindowWidth
	lsl r3, r0, #3
	mov r0, #4
	add r1, r4, #0
	mov r2, #0
	bl sub_020030A0
	mov r1, #0
	add r3, r0, #0
	str r1, [sp]
	mov r0, #0xff
	str r0, [sp, #4]
	ldr r0, _02094D98 ; =0x000F0100
	add r2, r4, #0
	str r0, [sp, #8]
	ldr r0, _02094D94 ; =0x00004670
	str r1, [sp, #0xc]
	add r0, r5, r0
	mov r1, #4
	bl sub_020200FC
_02094D78:
	ldr r0, _02094D94 ; =0x00004670
	add r0, r5, r0
	bl CopyWindowToVram
	add r0, r4, #0
	bl String_dtor
	add r0, r6, #0
	bl DestroyMsgData
	add sp, #0x10
	pop {r4, r5, r6, pc}
	.balign 4, 0
_02094D90: .word 0x0000012A
_02094D94: .word 0x00004670
_02094D98: .word 0x000F0100
	thumb_func_end sub_02094D1C

	thumb_func_start sub_02094D9C
sub_02094D9C: ; 0x02094D9C
	push {r3, r4, r5, lr}
	sub sp, #0x10
	add r5, r0, #0
	add r4, r1, #0
	bl sub_02094DF8
	ldr r0, _02094DF4 ; =gMain + 0x60
	mov r1, #1
	strb r1, [r0, #9]
	bl sub_02022D3C
	mov r1, #0
	mov r0, #0xc0
	str r0, [sp]
	mov r0, #0x97
	add r2, r1, #0
	add r3, r1, #0
	str r4, [sp, #4]
	bl GfGfxLoader_GXLoadPal
	mov r0, #0
	str r0, [sp]
	mov r0, #5
	lsl r0, r0, #0xa
	str r0, [sp, #4]
	mov r0, #1
	str r0, [sp, #8]
	mov r1, #2
	mov r0, #0x97
	add r2, r5, #0
	add r3, r1, #0
	str r4, [sp, #0xc]
	bl GfGfxLoader_LoadCharData
	mov r1, #0
	add r0, r5, #0
	add r2, r1, #0
	mov r3, #1
	str r1, [sp]
	bl sub_0201C1F4
	add sp, #0x10
	pop {r3, r4, r5, pc}
	nop
_02094DF4: .word gMain + 0x60
	thumb_func_end sub_02094D9C

	thumb_func_start sub_02094DF8
sub_02094DF8: ; 0x02094DF8
	push {r3, r4, r5, lr}
	sub sp, #0x70
	ldr r5, _02094EA4 ; =0x021083E4
	add r4, r0, #0
	ldmia r5!, {r0, r1}
	add r3, sp, #0x54
	add r2, r3, #0
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldr r0, [r5]
	mov r1, #0
	str r0, [r3]
	add r0, r4, #0
	add r3, r1, #0
	bl sub_0201B1E4
	add r0, r4, #0
	mov r1, #0
	bl sub_0201CAE0
	ldr r5, _02094EA8 ; =0x021083C8
	add r3, sp, #0x38
	ldmia r5!, {r0, r1}
	add r2, r3, #0
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldr r0, [r5]
	mov r1, #1
	str r0, [r3]
	add r0, r4, #0
	mov r3, #0
	bl sub_0201B1E4
	add r0, r4, #0
	mov r1, #1
	bl sub_0201CAE0
	ldr r5, _02094EAC ; =0x021083AC
	add r3, sp, #0x1c
	ldmia r5!, {r0, r1}
	add r2, r3, #0
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldr r0, [r5]
	mov r1, #2
	str r0, [r3]
	add r0, r4, #0
	mov r3, #0
	bl sub_0201B1E4
	add r0, r4, #0
	mov r1, #2
	bl sub_0201CAE0
	ldr r5, _02094EB0 ; =0x02108400
	add r3, sp, #0
	ldmia r5!, {r0, r1}
	add r2, r3, #0
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r3!, {r0, r1}
	ldr r0, [r5]
	mov r1, #3
	str r0, [r3]
	add r0, r4, #0
	mov r3, #0
	bl sub_0201B1E4
	add r0, r4, #0
	mov r1, #3
	bl sub_0201CAE0
	add sp, #0x70
	pop {r3, r4, r5, pc}
	nop
_02094EA4: .word 0x021083E4
_02094EA8: .word 0x021083C8
_02094EAC: .word 0x021083AC
_02094EB0: .word 0x02108400
	thumb_func_end sub_02094DF8

	thumb_func_start sub_02094EB4
sub_02094EB4: ; 0x02094EB4
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	ldrb r0, [r5, #0xd]
	mov r6, #0
	cmp r0, #0
	ble _02094F12
	add r4, r6, #0
	sub r7, r6, #1
_02094EC4:
	mov r0, #0x8d
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	add r0, r0, r4
	ldr r1, [r0, #4]
	cmp r1, r7
	beq _02094F00
	ldrb r2, [r5, #0xf]
	ldr r1, [r0, #8]
	cmp r2, r1
	bne _02094F00
	ldr r0, [r0]
	mov r1, #1
	bl sub_02024830
	mov r0, #0x8d
	lsl r0, r0, #4
	ldr r0, [r5, r0]
	add r0, r0, r4
	ldr r1, [r0, #4]
	mov r0, #0x34
	mul r0, r1
	add r1, r5, r0
	mov r0, #0x66
	lsl r0, r0, #2
	ldr r0, [r1, r0]
	mov r1, #1
	bl sub_02024B78
	b _02094F08
_02094F00:
	ldr r0, [r0]
	mov r1, #0
	bl sub_02024830
_02094F08:
	ldrb r0, [r5, #0xd]
	add r6, r6, #1
	add r4, #0xc
	cmp r6, r0
	blt _02094EC4
_02094F12:
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_02094EB4

	thumb_func_start sub_02094F14
sub_02094F14: ; 0x02094F14
	push {r3, r4, r5, lr}
	add r4, r2, #0
	ldr r2, _02094F58 ; =0x00004640
	ldr r0, [r0, r2]
	bl GetPartyMonByIndex
	add r5, r0, #0
	mov r1, #5
	mov r2, #0
	bl GetMonData
	str r0, [r4]
	add r0, r5, #0
	mov r1, #0x4c
	mov r2, #0
	bl GetMonData
	strh r0, [r4, #8]
	add r0, r5, #0
	mov r1, #0x70
	mov r2, #0
	bl GetMonData
	strh r0, [r4, #0xa]
	add r0, r5, #0
	mov r1, #6
	mov r2, #0
	bl GetMonData
	strh r0, [r4, #0xc]
	mov r0, #0
	strh r0, [r4, #0xe]
	pop {r3, r4, r5, pc}
	nop
_02094F58: .word 0x00004640
	thumb_func_end sub_02094F14

	thumb_func_start sub_02094F5C
sub_02094F5C: ; 0x02094F5C
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #8
	add r6, r1, #0
	add r5, r0, #0
	lsl r7, r6, #4
	ldr r1, _02095010 ; =0x0000088C
	add r0, r5, r7
	ldr r2, [r0, r1]
	mov r0, #0xc
	add r4, r2, #0
	add r1, #0x44
	mul r4, r0
	ldr r0, [r5, r1]
	add r2, r0, r4
	ldr r1, [r2, #8]
	ldr r0, [r0, r4]
	str r1, [sp, #4]
	ldr r1, [r2, #4]
	str r1, [sp]
	mov r1, #0
	bl sub_02024830
	mov r0, #0x8d
	lsl r0, r0, #4
	ldr r2, [r5, r0]
	mov r1, #0
	mvn r1, r1
	add r2, r2, r4
	str r1, [r2, #4]
	ldrb r1, [r5, #0xe]
	sub r1, r1, #1
	strb r1, [r5, #0xe]
	ldrb r2, [r5, #0xf]
	ldr r1, [sp, #4]
	cmp r1, r2
	bne _02094FBA
	ldr r0, [sp]
	mov r1, #0x34
	mul r1, r0
	mov r0, #0x66
	add r1, r5, r1
	lsl r0, r0, #2
	ldr r0, [r1, r0]
	mov r1, #0
	bl sub_02024B78
	b _02094FE6
_02094FBA:
	mov r1, #0x34
	mul r1, r6
	add r1, r5, r1
	sub r0, #0xe8
	ldr r0, [r1, r0]
	bl sub_020248AC
	add r1, r0, #0
	ldr r0, _02095014 ; =0x000008C4
	ldr r0, [r5, r0]
	bl sub_020247D4
	ldr r0, _02095014 ; =0x000008C4
	mov r1, #1
	ldr r0, [r5, r0]
	bl sub_02024830
	ldr r0, _02095014 ; =0x000008C4
	mov r1, #0x32
	ldr r0, [r5, r0]
	bl sub_020248F0
_02094FE6:
	mov r2, #0x89
	mov r1, #0
	add r0, r5, r7
	lsl r2, r2, #4
	str r1, [r0, r2]
	mov r0, #0x34
	mul r0, r6
	add r0, r5, r0
	sub r2, #0xa8
	ldr r0, [r0, r2]
	bl sub_02024830
	ldr r0, _02095018 ; =0x000046A4
	mov r2, #0
	ldr r1, [r5, r0]
	lsl r0, r6, #3
	add r0, r1, r0
	str r2, [r0, #4]
	add sp, #8
	pop {r3, r4, r5, r6, r7, pc}
	nop
_02095010: .word 0x0000088C
_02095014: .word 0x000008C4
_02095018: .word 0x000046A4
	thumb_func_end sub_02094F5C

	thumb_func_start sub_0209501C
sub_0209501C: ; 0x0209501C
	push {r4, r5, r6, r7, lr}
	sub sp, #0x14
	add r5, r1, #0
	mov r1, #0
	add r4, r0, #0
	str r1, [sp]
	ldr r0, [r4, #4]
	add r6, r2, #0
	str r0, [sp, #4]
	ldr r0, [r4]
	ldr r2, _020950B0 ; =0x000003D2
	mov r3, #0xb
	bl sub_0200E644
	mov r0, #0x15
	str r0, [sp]
	str r0, [sp, #4]
	mov r3, #2
	ldr r1, _020950B4 ; =0x00004660
	str r3, [sp, #8]
	mov r0, #0xd
	str r0, [sp, #0xc]
	mov r0, #0xc6
	str r0, [sp, #0x10]
	ldr r0, [r4]
	add r1, r4, r1
	mov r2, #3
	bl sub_0201D40C
	ldr r2, _020950B8 ; =0x0000012A
	ldr r3, [r4, #4]
	mov r0, #1
	mov r1, #0x1b
	bl NewMsgDataFromNarc
	add r1, r5, #0
	add r7, r0, #0
	bl NewString_ReadMsgData
	add r5, r0, #0
	ldr r0, _020950B4 ; =0x00004660
	mov r1, #0xf
	add r0, r4, r0
	bl FillWindowPixelBuffer
	mov r3, #0
	str r3, [sp]
	mov r0, #0xff
	str r0, [sp, #4]
	ldr r0, _020950BC ; =0x0001020F
	add r1, r6, #0
	str r0, [sp, #8]
	ldr r0, _020950B4 ; =0x00004660
	add r2, r5, #0
	add r0, r4, r0
	str r3, [sp, #0xc]
	bl sub_020200FC
	add r0, r5, #0
	bl String_dtor
	add r0, r7, #0
	bl DestroyMsgData
	ldr r0, _020950B4 ; =0x00004660
	add r0, r4, r0
	bl CopyWindowToVram
	mov r0, #8
	mov r1, #1
	bl GX_EngineAToggleLayers
	add sp, #0x14
	pop {r4, r5, r6, r7, pc}
	.balign 4, 0
_020950B0: .word 0x000003D2
_020950B4: .word 0x00004660
_020950B8: .word 0x0000012A
_020950BC: .word 0x0001020F
	thumb_func_end sub_0209501C

	thumb_func_start sub_020950C0
sub_020950C0: ; 0x020950C0
	push {r3, lr}
	ldrb r1, [r0, #0xd]
	cmp r1, #1
	bne _020950D0
	mov r1, #5
	mov r2, #1
	bl sub_0209501C
_020950D0:
	pop {r3, pc}
	.balign 4, 0
	thumb_func_end sub_020950C0

	thumb_func_start sub_020950D4
sub_020950D4: ; 0x020950D4
	push {r4, lr}
	add r4, r0, #0
	ldrb r0, [r4, #0xd]
	cmp r0, #1
	bne _020950F2
	ldr r0, _020950F4 ; =0x00004660
	add r0, r4, r0
	bl sub_0201EE88
	cmp r0, #0
	beq _020950F2
	ldr r0, _020950F4 ; =0x00004660
	add r0, r4, r0
	bl RemoveWindow
_020950F2:
	pop {r4, pc}
	.balign 4, 0
_020950F4: .word 0x00004660
	thumb_func_end sub_020950D4

	thumb_func_start sub_020950F8
sub_020950F8: ; 0x020950F8
	push {r4, lr}
	add r4, r0, #0
	ldr r0, [r4]
	cmp r0, #0
	beq _0209511A
	cmp r1, #0
	beq _0209510E
	mov r0, #8
	mov r1, #0
	bl GX_EngineAToggleLayers
_0209510E:
	add r0, r4, #0
	bl ClearWindowTilemapAndCopyToVram
	add r0, r4, #0
	bl RemoveWindow
_0209511A:
	pop {r4, pc}
	thumb_func_end sub_020950F8

	thumb_func_start sub_0209511C
sub_0209511C: ; 0x0209511C
	push {r4, r5, r6, r7}
	ldrb r1, [r0, #0xd]
	mov r4, #0
	cmp r1, #0
	ble _0209514C
	ldr r1, _02095150 ; =0x00000888
	ldr r2, _02095154 ; =0x000046B4
	add r5, r0, #0
	add r6, r4, #0
_0209512E:
	ldr r3, _02095158 ; =0x00000884
	ldr r7, _02095154 ; =0x000046B4
	ldr r3, [r5, r3]
	ldr r7, [r0, r7]
	add r4, r4, #1
	str r3, [r7, r6]
	ldr r7, [r0, r2]
	ldr r3, [r5, r1]
	add r7, r7, r6
	str r3, [r7, #4]
	ldrb r3, [r0, #0xd]
	add r5, #0x10
	add r6, #8
	cmp r4, r3
	blt _0209512E
_0209514C:
	pop {r4, r5, r6, r7}
	bx lr
	.balign 4, 0
_02095150: .word 0x00000888
_02095154: .word 0x000046B4
_02095158: .word 0x00000884
	thumb_func_end sub_0209511C

	thumb_func_start sub_0209515C
sub_0209515C: ; 0x0209515C
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	mov r7, #0x66
	mov r6, #0
	add r4, r5, #0
	lsl r7, r7, #2
_02095168:
	ldr r0, [r4, r7]
	cmp r0, #0
	beq _02095172
	bl sub_02024758
_02095172:
	add r6, r6, #1
	add r4, #0x34
	cmp r6, #0x1e
	blt _02095168
	ldrb r0, [r5, #0xd]
	mov r6, #0
	cmp r0, #0
	ble _0209519A
	ldr r7, _02095220 ; =0x000007E8
	add r4, r5, #0
_02095186:
	ldr r0, [r4, r7]
	cmp r0, #0
	beq _02095190
	bl sub_02024758
_02095190:
	ldrb r0, [r5, #0xd]
	add r6, r6, #1
	add r4, #0x34
	cmp r6, r0
	blt _02095186
_0209519A:
	mov r6, #0
	cmp r0, #0
	ble _020951BC
	mov r7, #0x8d
	add r4, r6, #0
	lsl r7, r7, #4
_020951A6:
	ldr r0, [r5, r7]
	ldr r0, [r0, r4]
	cmp r0, #0
	beq _020951B2
	bl sub_02024758
_020951B2:
	ldrb r0, [r5, #0xd]
	add r6, r6, #1
	add r4, #0xc
	cmp r6, r0
	blt _020951A6
_020951BC:
	ldr r0, _02095224 ; =0x000008B4
	ldr r0, [r5, r0]
	cmp r0, #0
	beq _020951C8
	bl sub_02024758
_020951C8:
	ldr r0, _02095228 ; =0x000008BC
	ldr r0, [r5, r0]
	cmp r0, #0
	beq _020951D4
	bl sub_02024758
_020951D4:
	ldr r0, _0209522C ; =0x000008B8
	ldr r0, [r5, r0]
	cmp r0, #0
	beq _020951E0
	bl sub_02024758
_020951E0:
	ldr r0, _02095230 ; =0x000008C4
	ldr r0, [r5, r0]
	cmp r0, #0
	beq _020951EC
	bl sub_02024758
_020951EC:
	mov r0, #0x23
	lsl r0, r0, #6
	ldr r0, [r5, r0]
	cmp r0, #0
	beq _020951FA
	bl sub_02024758
_020951FA:
	ldrb r1, [r5, #0xd]
	mov r0, #3
	mov r4, #0
	sub r0, r0, r1
	lsl r0, r0, #0x18
	lsr r6, r0, #0x18
	cmp r6, #0
	ble _0209521E
	ldr r7, _02095234 ; =0x000008C8
_0209520C:
	ldr r0, [r5, r7]
	cmp r0, #0
	beq _02095216
	bl sub_02024758
_02095216:
	add r4, r4, #1
	add r5, r5, #4
	cmp r4, r6
	blt _0209520C
_0209521E:
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_02095220: .word 0x000007E8
_02095224: .word 0x000008B4
_02095228: .word 0x000008BC
_0209522C: .word 0x000008B8
_02095230: .word 0x000008C4
_02095234: .word 0x000008C8
	thumb_func_end sub_0209515C

	thumb_func_start sub_02095238
sub_02095238: ; 0x02095238
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0x18
	add r4, r0, #0
	ldr r0, _02095348 ; =0x000046B8
	mov r5, #0
	ldr r0, [r4, r0]
	bl sub_02095DD8
	add r7, r0, #0
	ldr r0, _02095348 ; =0x000046B8
	ldr r0, [r4, r0]
	bl sub_02095DE8
	add r1, r5, #0
	add r6, r0, #0
	str r1, [sp, #0x14]
	cmp r7, #6
	bhi _0209532C
	add r1, r7, r7
	add r1, pc
	ldrh r1, [r1, #6]
	lsl r1, r1, #0x10
	asr r1, r1, #0x10
	add pc, r1
_02095268: ; jump table
	.short _0209532C - _02095268 - 2 ; case 0
	.short _0209531E - _02095268 - 2 ; case 1
	.short _02095286 - _02095268 - 2 ; case 2
	.short _020952B4 - _02095268 - 2 ; case 3
	.short _020952C8 - _02095268 - 2 ; case 4
	.short _02095276 - _02095268 - 2 ; case 5
	.short _02095286 - _02095268 - 2 ; case 6
_02095276:
	mov r0, #5
	lsl r0, r0, #0x10
	str r0, [sp, #0xc]
	mov r0, #1
	lsl r0, r0, #0x10
	str r0, [sp, #0x10]
	mov r5, #1
	b _0209532C
_02095286:
	mov r1, #6
	bl _s32_div_f
	lsl r0, r1, #0x18
	lsr r1, r0, #0x18
	mov r0, #0x18
	mul r0, r1
	add r0, #0x14
	lsl r0, r0, #0xc
	str r0, [sp, #0xc]
	add r0, r6, #0
	mov r1, #6
	bl _s32_div_f
	lsl r0, r0, #0x18
	lsr r1, r0, #0x18
	mov r0, #0x18
	mul r0, r1
	add r0, #0x28
	lsl r0, r0, #0xc
	str r0, [sp, #0x10]
	mov r5, #1
	b _0209532C
_020952B4:
	mov r0, #0x35
	lsl r0, r0, #0xe
	str r0, [sp, #0xc]
	add r1, r6, #1
	mov r0, #0x28
	mul r0, r1
	lsl r0, r0, #0xc
	str r0, [sp, #0x10]
	mov r5, #1
	b _0209532C
_020952C8:
	mov r0, #0x35
	lsl r0, r0, #0xe
	add r1, r6, #1
	str r0, [sp, #0xc]
	mov r0, #0x28
	add r5, r1, #0
	mul r5, r0
	lsl r0, r5, #0xc
	ldr r2, _0209534C ; =0x000046BC
	str r0, [sp, #0x10]
	ldr r0, [r4, r2]
	cmp r0, #0
	beq _0209531A
	add r6, sp, #0xc
	ldmia r6!, {r0, r1}
	add r3, sp, #0
	add r7, r3, #0
	stmia r3!, {r0, r1}
	ldr r0, [r6]
	str r0, [r3]
	mov r0, #1
	ldr r1, [sp, #4]
	lsl r0, r0, #0xe
	sub r0, r1, r0
	str r0, [sp, #4]
	add r0, r2, #0
	sub r2, #0x38
	sub r0, #0x1c
	ldr r2, [r4, r2]
	mov r1, #0x34
	ldr r0, [r4, r0]
	mul r1, r2
	ldr r0, [r0, r1]
	add r1, r7, #0
	bl sub_020247D4
	ldr r0, _02095350 ; =0x00004694
	mov r1, #0xd4
	str r1, [r4, r0]
	add r0, r0, #4
	str r5, [r4, r0]
_0209531A:
	mov r5, #1
	b _0209532C
_0209531E:
	mov r0, #0xe
	lsl r0, r0, #0x10
	str r0, [sp, #0xc]
	mov r0, #0xb
	lsl r0, r0, #0x10
	str r0, [sp, #0x10]
	mov r5, #1
_0209532C:
	cmp r5, #0
	beq _02095342
	mov r0, #0x23
	lsl r0, r0, #6
	ldr r0, [r4, r0]
	add r1, sp, #0xc
	bl sub_020247D4
	add r0, r4, #0
	bl sub_020956B8
_02095342:
	add sp, #0x18
	pop {r3, r4, r5, r6, r7, pc}
	nop
_02095348: .word 0x000046B8
_0209534C: .word 0x000046BC
_02095350: .word 0x00004694
	thumb_func_end sub_02095238

	thumb_func_start sub_02095354
sub_02095354: ; 0x02095354
	push {r4, r5, r6, r7, lr}
	sub sp, #0x24
	add r4, r0, #0
	ldr r0, _020954B8 ; =0x000046B8
	mov r5, #0
	ldr r0, [r4, r0]
	bl sub_02095DD8
	add r6, r0, #0
	ldr r0, _020954B8 ; =0x000046B8
	ldr r0, [r4, r0]
	bl sub_02095DE8
	add r7, r0, #0
	cmp r6, #6
	bhi _0209539A
	add r0, r6, r6
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_02095380: ; jump table
	.short _020954B2 - _02095380 - 2 ; case 0
	.short _020954A2 - _02095380 - 2 ; case 1
	.short _0209538E - _02095380 - 2 ; case 2
	.short _02095442 - _02095380 - 2 ; case 3
	.short _020954AC - _02095380 - 2 ; case 4
	.short _020954B2 - _02095380 - 2 ; case 5
	.short _0209538E - _02095380 - 2 ; case 6
_0209538E:
	add r0, r4, #0
	add r1, r7, #0
	bl sub_02094794
	cmp r0, #1
	beq _0209539C
_0209539A:
	b _020954B2
_0209539C:
	add r0, r4, #0
	mov r1, #1
	add r2, r7, #0
	bl sub_020948C4
	ldrb r0, [r4, #0xd]
	cmp r0, #0
	ble _0209543A
	ldr r2, _020954BC ; =0x000046A4
	add r1, r5, #0
	add r6, sp, #0x18
	add r0, r5, #0
_020953B4:
	str r0, [r6]
	str r0, [r6, #4]
	str r0, [r6, #8]
	ldr r3, [r4, r2]
	add r3, r3, r1
	ldr r3, [r3, #4]
	cmp r3, #0
	bne _02095430
	ldr r2, _020954C0 ; =0x00004694
	mov r0, #0xd4
	str r0, [r4, r2]
	lsl r0, r5, #0x18
	lsr r0, r0, #0x18
	add r1, r0, #1
	mov r0, #0x28
	add r3, r1, #0
	mul r3, r0
	add r0, r2, #4
	str r3, [r4, r0]
	ldr r0, [r4, r2]
	add r3, sp, #0xc
	lsl r0, r0, #0xc
	str r0, [sp, #0x18]
	add r0, r2, #4
	ldr r0, [r4, r0]
	add r7, r3, #0
	lsl r0, r0, #0xc
	str r0, [sp, #0x1c]
	ldmia r6!, {r0, r1}
	stmia r3!, {r0, r1}
	ldr r0, [r6]
	str r0, [r3]
	mov r0, #1
	ldr r1, [sp, #0x10]
	lsl r0, r0, #0xe
	sub r0, r1, r0
	str r0, [sp, #0x10]
	add r0, r2, #0
	sub r2, #0x10
	add r0, #0xc
	ldr r2, [r4, r2]
	mov r1, #0x34
	ldr r0, [r4, r0]
	mul r1, r2
	ldr r0, [r0, r1]
	add r1, r7, #0
	bl sub_020247D4
	mov r0, #0x23
	lsl r0, r0, #6
	ldr r0, [r4, r0]
	add r1, sp, #0x18
	bl sub_020247D4
	ldr r0, _020954B8 ; =0x000046B8
	lsl r2, r5, #0x18
	ldr r0, [r4, r0]
	mov r1, #4
	lsr r2, r2, #0x18
	bl sub_02095D40
	b _0209543A
_02095430:
	ldrb r3, [r4, #0xd]
	add r5, r5, #1
	add r1, #8
	cmp r5, r3
	blt _020953B4
_0209543A:
	ldr r0, _020954C4 ; =0x000046BC
	mov r5, #1
	str r5, [r4, r0]
	b _020954B2
_02095442:
	add r0, r4, #0
	add r1, r7, #0
	bl sub_02094860
	cmp r0, #1
	bne _020954B2
	add r0, r4, #0
	mov r1, #2
	add r2, r7, #0
	bl sub_020948C4
	ldr r0, _020954C8 ; =0x000046A0
	ldr r2, [r4, r0]
	sub r0, #0x1c
	ldr r1, [r4, r0]
	mov r0, #0x34
	mul r0, r1
	ldr r0, [r2, r0]
	bl sub_020248AC
	add r5, r0, #0
	add r3, sp, #0
	ldmia r5!, {r0, r1}
	add r2, r3, #0
	stmia r3!, {r0, r1}
	ldr r0, [r5]
	str r0, [r3]
	mov r0, #1
	ldr r1, [sp, #4]
	lsl r0, r0, #0xe
	sub r0, r1, r0
	str r0, [sp, #4]
	ldr r0, _020954C8 ; =0x000046A0
	ldr r3, [r4, r0]
	sub r0, #0x1c
	ldr r1, [r4, r0]
	mov r0, #0x34
	mul r0, r1
	ldr r0, [r3, r0]
	add r1, r2, #0
	bl sub_020247D4
	ldr r0, _020954C4 ; =0x000046BC
	mov r5, #1
	str r5, [r4, r0]
	mov r0, #4
	str r0, [r4, #0x14]
	b _020954B2
_020954A2:
	add r0, r4, #0
	bl sub_0209569C
	mov r5, #3
	b _020954B2
_020954AC:
	add r0, r4, #0
	bl sub_02094A70
_020954B2:
	add r0, r5, #0
	add sp, #0x24
	pop {r4, r5, r6, r7, pc}
	.balign 4, 0
_020954B8: .word 0x000046B8
_020954BC: .word 0x000046A4
_020954C0: .word 0x00004694
_020954C4: .word 0x000046BC
_020954C8: .word 0x000046A0
	thumb_func_end sub_02095354

	thumb_func_start sub_020954CC
sub_020954CC: ; 0x020954CC
	push {r4, r5, lr}
	sub sp, #0xc
	add r5, r0, #0
	ldr r0, _02095538 ; =0x000046B8
	mov r4, #0
	ldr r0, [r5, r0]
	bl sub_02095DD8
	cmp r0, #1
	beq _020954F4
	cmp r0, #4
	bne _020954FE
	ldr r0, _0209553C ; =0x000005DC
	bl PlaySE
	add r0, r5, #0
	add r1, r4, #0
	bl sub_02094A90
	b _02095532
_020954F4:
	add r0, r5, #0
	bl sub_0209569C
	mov r4, #3
	b _02095532
_020954FE:
	ldrb r0, [r5, #0x13]
	cmp r0, #0
	beq _02095532
	ldr r0, _02095538 ; =0x000046B8
	mov r1, #1
	ldr r0, [r5, r0]
	add r2, r4, #0
	bl sub_02095D40
	mov r0, #0xe
	lsl r0, r0, #0x10
	str r0, [sp]
	mov r0, #0xb
	lsl r0, r0, #0x10
	str r0, [sp, #4]
	add r0, r4, #0
	str r0, [sp, #8]
	mov r0, #0x23
	lsl r0, r0, #6
	ldr r0, [r5, r0]
	add r1, sp, #0
	bl sub_020247D4
	ldr r0, _0209553C ; =0x000005DC
	bl PlaySE
_02095532:
	add r0, r4, #0
	add sp, #0xc
	pop {r4, r5, pc}
	.balign 4, 0
_02095538: .word 0x000046B8
_0209553C: .word 0x000005DC
	thumb_func_end sub_020954CC

	thumb_func_start sub_02095540
sub_02095540: ; 0x02095540
	push {r4, r5, lr}
	sub sp, #0xc
	add r5, r0, #0
	ldrb r0, [r5, #0xf]
	cmp r0, #0
	bne _02095550
	ldrb r0, [r5, #0x10]
	b _02095550
_02095550:
	sub r0, r0, #1
	strb r0, [r5, #0xf]
	ldr r0, _020955E0 ; =0x000008BC
	mov r1, #1
	ldr r0, [r5, r0]
	bl sub_020248F0
	add r0, r5, #0
	bl sub_020943EC
	ldr r0, _020955E4 ; =0x000005DC
	bl PlaySE
	ldrb r0, [r5, #0xf]
	cmp r0, #0x12
	ldr r0, _020955E8 ; =0x000046B8
	bne _020955BE
	ldr r0, [r5, r0]
	bl sub_02095DD8
	cmp r0, #2
	bne _020955DC
	ldr r0, _020955E8 ; =0x000046B8
	ldr r0, [r5, r0]
	bl sub_02095DE8
	mov r1, #6
	bl _s32_div_f
	lsl r0, r1, #0x18
	lsr r4, r0, #0x18
	ldr r0, _020955E8 ; =0x000046B8
	mov r1, #6
	ldr r0, [r5, r0]
	add r2, r4, #0
	bl sub_02095D40
	mov r0, #0x18
	mul r0, r4
	add r0, #0x14
	lsl r0, r0, #0xc
	str r0, [sp]
	mov r0, #0xa
	lsl r0, r0, #0xe
	str r0, [sp, #4]
	mov r0, #0
	str r0, [sp, #8]
	mov r0, #0x23
	lsl r0, r0, #6
	ldr r0, [r5, r0]
	add r1, sp, #0
	bl sub_020247D4
	add sp, #0xc
	pop {r4, r5, pc}
_020955BE:
	ldr r0, [r5, r0]
	bl sub_02095DD8
	cmp r0, #6
	bne _020955DC
	ldr r0, _020955E8 ; =0x000046B8
	ldr r0, [r5, r0]
	bl sub_02095DE8
	add r2, r0, #0
	ldr r0, _020955E8 ; =0x000046B8
	mov r1, #2
	ldr r0, [r5, r0]
	bl sub_02095D40
_020955DC:
	add sp, #0xc
	pop {r4, r5, pc}
	.balign 4, 0
_020955E0: .word 0x000008BC
_020955E4: .word 0x000005DC
_020955E8: .word 0x000046B8
	thumb_func_end sub_02095540

	thumb_func_start sub_020955EC
sub_020955EC: ; 0x020955EC
	push {r4, r5, lr}
	sub sp, #0xc
	add r5, r0, #0
	ldrb r0, [r5, #0xf]
	add r0, r0, #1
	strb r0, [r5, #0xf]
	ldrb r1, [r5, #0xf]
	ldrb r0, [r5, #0x10]
	cmp r1, r0
	bne _02095604
	mov r0, #0
	strb r0, [r5, #0xf]
_02095604:
	ldr r0, _02095690 ; =0x000008B8
	mov r1, #3
	ldr r0, [r5, r0]
	bl sub_020248F0
	add r0, r5, #0
	bl sub_020943EC
	ldr r0, _02095694 ; =0x000005DC
	bl PlaySE
	ldrb r0, [r5, #0xf]
	cmp r0, #0x12
	ldr r0, _02095698 ; =0x000046B8
	bne _0209566E
	ldr r0, [r5, r0]
	bl sub_02095DD8
	cmp r0, #2
	bne _0209568C
	ldr r0, _02095698 ; =0x000046B8
	ldr r0, [r5, r0]
	bl sub_02095DE8
	mov r1, #6
	bl _s32_div_f
	lsl r0, r1, #0x18
	lsr r4, r0, #0x18
	ldr r0, _02095698 ; =0x000046B8
	mov r1, #6
	ldr r0, [r5, r0]
	add r2, r4, #0
	bl sub_02095D40
	mov r0, #0x18
	mul r0, r4
	add r0, #0x14
	lsl r0, r0, #0xc
	str r0, [sp]
	mov r0, #0xa
	lsl r0, r0, #0xe
	str r0, [sp, #4]
	mov r0, #0
	str r0, [sp, #8]
	mov r0, #0x23
	lsl r0, r0, #6
	ldr r0, [r5, r0]
	add r1, sp, #0
	bl sub_020247D4
	add sp, #0xc
	pop {r4, r5, pc}
_0209566E:
	ldr r0, [r5, r0]
	bl sub_02095DD8
	cmp r0, #6
	bne _0209568C
	ldr r0, _02095698 ; =0x000046B8
	ldr r0, [r5, r0]
	bl sub_02095DE8
	add r2, r0, #0
	ldr r0, _02095698 ; =0x000046B8
	mov r1, #2
	ldr r0, [r5, r0]
	bl sub_02095D40
_0209568C:
	add sp, #0xc
	pop {r4, r5, pc}
	.balign 4, 0
_02095690: .word 0x000008B8
_02095694: .word 0x000005DC
_02095698: .word 0x000046B8
	thumb_func_end sub_020955EC

	thumb_func_start sub_0209569C
sub_0209569C: ; 0x0209569C
	push {r3, lr}
	ldr r1, _020956B0 ; =0x000008B4
	ldr r0, [r0, r1]
	mov r1, #5
	bl sub_020248F0
	ldr r0, _020956B4 ; =0x000005DC
	bl PlaySE
	pop {r3, pc}
	.balign 4, 0
_020956B0: .word 0x000008B4
_020956B4: .word 0x000005DC
	thumb_func_end sub_0209569C

	thumb_func_start sub_020956B8
sub_020956B8: ; 0x020956B8
	push {r3, r4, r5, r6, r7, lr}
	add r4, r0, #0
	ldr r0, _02095768 ; =0x000046D8
	ldr r1, [r4, r0]
	cmp r1, #0
	beq _02095764
	sub r0, #0x20
	mov r6, #0
	mvn r6, r6
	ldr r0, [r4, r0]
	add r5, r6, #0
	bl sub_02095DD8
	cmp r0, #6
	bhi _0209573E
	add r0, r0, r0
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_020956E2: ; jump table
	.short _0209573E - _020956E2 - 2 ; case 0
	.short _0209573E - _020956E2 - 2 ; case 1
	.short _020956F0 - _020956E2 - 2 ; case 2
	.short _0209570C - _020956E2 - 2 ; case 3
	.short _02095730 - _020956E2 - 2 ; case 4
	.short _0209573E - _020956E2 - 2 ; case 5
	.short _020956F0 - _020956E2 - 2 ; case 6
_020956F0:
	ldr r0, _0209576C ; =0x000046B8
	ldrb r5, [r4, #0xf]
	ldr r0, [r4, r0]
	bl sub_02095DE8
	add r7, r0, #0
	add r0, r4, #0
	add r1, r7, #0
	bl sub_020947C0
	cmp r0, #1
	bne _0209573E
	add r6, r7, #0
	b _0209573E
_0209570C:
	ldr r0, _0209576C ; =0x000046B8
	ldr r0, [r4, r0]
	bl sub_02095DE8
	add r7, r0, #0
	add r0, r4, #0
	add r1, r7, #0
	bl sub_02094894
	cmp r0, #1
	bne _0209573E
	lsl r0, r7, #4
	add r1, r4, r0
	ldr r0, _02095770 ; =0x00000884
	ldr r5, [r1, r0]
	add r0, r0, #4
	ldr r6, [r1, r0]
	b _0209573E
_02095730:
	ldr r0, _02095774 ; =0x00004680
	ldr r1, [r4, r0]
	cmp r1, #0
	beq _0209573E
	add r0, r0, #4
	ldrb r5, [r4, #0xf]
	ldr r6, [r4, r0]
_0209573E:
	ldr r0, _02095778 ; =0x000046E4
	ldr r1, [r4, r0]
	cmp r1, r5
	bne _0209574E
	sub r0, r0, #4
	ldr r0, [r4, r0]
	cmp r0, r6
	beq _0209575C
_0209574E:
	ldr r3, _0209577C ; =0x000046DC
	add r0, r5, #0
	ldr r2, [r4, r3]
	sub r3, r3, #4
	ldr r3, [r4, r3]
	add r1, r6, #0
	blx r3
_0209575C:
	ldr r0, _02095778 ; =0x000046E4
	str r5, [r4, r0]
	sub r0, r0, #4
	str r6, [r4, r0]
_02095764:
	pop {r3, r4, r5, r6, r7, pc}
	nop
_02095768: .word 0x000046D8
_0209576C: .word 0x000046B8
_02095770: .word 0x00000884
_02095774: .word 0x00004680
_02095778: .word 0x000046E4
_0209577C: .word 0x000046DC
	thumb_func_end sub_020956B8

	thumb_func_start sub_02095780
sub_02095780: ; 0x02095780
	mov r1, #0x16
	add r2, r1, #0
	ldr r3, _0209578C ; =sub_020CF178
	ldr r0, _02095790 ; =0x04000050
	sub r2, #0x1d
	bx r3
	.balign 4, 0
_0209578C: .word sub_020CF178
_02095790: .word 0x04000050
	thumb_func_end sub_02095780

	thumb_func_start sub_02095794
sub_02095794: ; 0x02095794
	push {r3, lr}
	ldr r0, _020957AC ; =0x04000050
	mov r1, #0
	strh r1, [r0]
	mov r2, #0xa
	str r2, [sp]
	mov r2, #4
	mov r3, #6
	bl sub_020CF15C
	pop {r3, pc}
	nop
_020957AC: .word 0x04000050
	thumb_func_end sub_02095794

	thumb_func_start sub_020957B0
sub_020957B0: ; 0x020957B0
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	add r5, sp, #0x10
	mov r4, #0x10
	ldrsb r4, [r5, r4]
	add r7, r0, #0
	add r6, r1, #0
	str r4, [sp]
	bl sub_02095BF0
	str r0, [sp, #4]
	cmp r0, #4
	bhi _02095834
	add r0, r0, r0
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_020957D6: ; jump table
	.short _02095834 - _020957D6 - 2 ; case 0
	.short _020957E0 - _020957D6 - 2 ; case 1
	.short _020957F6 - _020957D6 - 2 ; case 2
	.short _0209580C - _020957D6 - 2 ; case 3
	.short _02095822 - _020957D6 - 2 ; case 4
_020957E0:
	mov r0, #1
	ldrsb r1, [r6, r0]
	add r0, sp, #4
	add r2, sp, #4
	strb r1, [r0, #4]
	add r0, r7, #0
	mov r1, #3
	bl sub_02095CB8
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
_020957F6:
	mov r0, #1
	ldrsb r1, [r6, r0]
	add r0, sp, #4
	add r2, sp, #4
	strb r1, [r0, #4]
	add r0, r7, #0
	mov r1, #3
	bl sub_02095CB8
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
_0209580C:
	mov r0, #0
	ldrsb r1, [r6, r0]
	add r0, sp, #4
	add r2, sp, #4
	strb r1, [r0, #4]
	add r0, r7, #0
	mov r1, #5
	bl sub_02095CB8
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
_02095822:
	mov r0, #0
	ldrsb r1, [r6, r0]
	add r0, sp, #4
	add r2, sp, #4
	strb r1, [r0, #4]
	add r0, r7, #0
	mov r1, #5
	bl sub_02095CB8
_02095834:
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
	thumb_func_end sub_020957B0

	thumb_func_start sub_02095838
sub_02095838: ; 0x02095838
	push {r3, r4}
	ldr r0, [r3]
	cmp r0, #4
	bhi _020958BA
	add r0, r0, r0
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_0209584C: ; jump table
	.short _020958BA - _0209584C - 2 ; case 0
	.short _0209588C - _0209584C - 2 ; case 1
	.short _020958A8 - _0209584C - 2 ; case 2
	.short _02095870 - _0209584C - 2 ; case 3
	.short _02095856 - _0209584C - 2 ; case 4
_02095856:
	mov r0, #2
	strb r0, [r1]
	mov r0, #0
	strb r0, [r1, #1]
	ldrsb r4, [r1, r0]
	mov r0, #1
	ldrsb r3, [r1, r0]
	ldrb r0, [r2]
	mul r0, r3
	add r0, r4, r0
	strb r0, [r1, #2]
	pop {r3, r4}
	bx lr
_02095870:
	mov r0, #2
	strb r0, [r1]
	mov r0, #4
	strb r0, [r1, #1]
	mov r0, #0
	ldrsb r4, [r1, r0]
	mov r0, #1
	ldrsb r3, [r1, r0]
	ldrb r0, [r2]
	mul r0, r3
	add r0, r4, r0
	strb r0, [r1, #2]
	pop {r3, r4}
	bx lr
_0209588C:
	mov r0, #5
	strb r0, [r1]
	ldrb r0, [r3, #4]
	strb r0, [r1, #1]
	mov r0, #0
	ldrsb r4, [r1, r0]
	mov r0, #1
	ldrsb r3, [r1, r0]
	ldrb r0, [r2]
	mul r0, r3
	add r0, r4, r0
	strb r0, [r1, #2]
	pop {r3, r4}
	bx lr
_020958A8:
	mov r0, #0
	strb r0, [r1]
	ldrb r0, [r3, #4]
	strb r0, [r1, #1]
	mov r0, #1
	ldrsb r3, [r1, r0]
	ldrb r0, [r2]
	mul r0, r3
	strb r0, [r1, #2]
_020958BA:
	pop {r3, r4}
	bx lr
	.balign 4, 0
	thumb_func_end sub_02095838

	thumb_func_start sub_020958C0
sub_020958C0: ; 0x020958C0
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	add r6, sp, #0x10
	mov r5, #0x10
	ldrsb r5, [r6, r5]
	add r4, r0, #0
	add r7, r1, #0
	str r5, [sp]
	bl sub_02095BF0
	mov r2, #0
	str r0, [sp, #4]
	ldrsb r3, [r7, r2]
	add r1, sp, #4
	cmp r0, #1
	strb r3, [r1, #4]
	beq _020958F6
	cmp r0, #3
	bne _0209591C
	strb r2, [r1, #4]
	add r0, r4, #0
	mov r1, #3
	add r2, sp, #4
	bl sub_02095CB8
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
_020958F6:
	ldr r0, [r4, #4]
	ldrb r0, [r0]
	cmp r0, #0x12
	bne _0209590E
	strb r2, [r1, #4]
	add r0, r4, #0
	mov r1, #6
	add r2, sp, #4
	bl sub_02095CB8
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
_0209590E:
	mov r0, #4
	strb r0, [r1, #4]
	add r0, r4, #0
	mov r1, #2
	add r2, sp, #4
	bl sub_02095CB8
_0209591C:
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
	thumb_func_end sub_020958C0

	thumb_func_start sub_02095920
sub_02095920: ; 0x02095920
	mov r0, #0
	strb r0, [r1]
	strb r0, [r1, #1]
	strb r0, [r1, #2]
	bx lr
	.balign 4, 0
	thumb_func_end sub_02095920

	thumb_func_start sub_0209592C
sub_0209592C: ; 0x0209592C
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	add r6, sp, #0x10
	mov r5, #0x10
	ldrsb r5, [r6, r5]
	add r4, r0, #0
	add r7, r1, #0
	str r5, [sp]
	bl sub_02095BF0
	str r0, [sp, #4]
	mov r1, #1
	ldrsb r1, [r7, r1]
	cmp r1, #0
	bne _02095952
	mov r2, #0
	add r1, sp, #4
	strb r2, [r1, #4]
	b _02095962
_02095952:
	cmp r1, #1
	add r1, sp, #4
	bne _0209595E
	mov r2, #2
	strb r2, [r1, #4]
	b _02095962
_0209595E:
	mov r2, #3
	strb r2, [r1, #4]
_02095962:
	cmp r0, #1
	beq _02095972
	cmp r0, #2
	beq _0209599A
	cmp r0, #4
	beq _020959C2
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
_02095972:
	ldr r0, [r4, #4]
	add r2, sp, #4
	ldrb r0, [r0]
	cmp r0, #0x12
	bne _0209598E
	mov r1, #0
	add r0, sp, #4
	strb r1, [r0, #4]
	add r0, r4, #0
	mov r1, #6
	bl sub_02095CB8
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
_0209598E:
	add r0, r4, #0
	mov r1, #2
	bl sub_02095CB8
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
_0209599A:
	ldr r0, [r4, #4]
	add r2, sp, #4
	ldrb r0, [r0]
	cmp r0, #0x12
	bne _020959B6
	mov r1, #0
	add r0, sp, #4
	strb r1, [r0, #4]
	add r0, r4, #0
	mov r1, #6
	bl sub_02095CB8
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
_020959B6:
	add r0, r4, #0
	mov r1, #2
	bl sub_02095CB8
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
_020959C2:
	ldrb r0, [r4, #2]
	cmp r0, #0
	beq _020959D2
	add r0, r4, #0
	mov r1, #1
	add r2, sp, #4
	bl sub_02095CB8
_020959D2:
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_0209592C

	thumb_func_start sub_020959D8
sub_020959D8: ; 0x020959D8
	push {r4, r5, r6, lr}
	ldr r0, [r3]
	add r5, r1, #0
	add r4, r2, #0
	cmp r0, #1
	beq _02095A12
	cmp r0, #2
	beq _02095A12
	cmp r0, #3
	bne _02095A32
	ldrb r6, [r4]
	ldrb r0, [r4, #2]
	add r1, r6, #0
	sub r0, r0, #1
	bl _s32_div_f
	mul r0, r6
	strb r0, [r5, #2]
	ldrb r0, [r5, #2]
	ldrb r1, [r4]
	bl _s32_div_f
	strb r1, [r5]
	ldrb r0, [r5, #2]
	ldrb r1, [r4]
	bl _s32_div_f
	strb r0, [r5, #1]
	pop {r4, r5, r6, pc}
_02095A12:
	ldrb r0, [r3, #4]
	cmp r0, #2
	bhs _02095A1E
	mov r0, #0
	strb r0, [r5, #2]
	b _02095A2A
_02095A1E:
	bls _02095A26
	mov r0, #2
	strb r0, [r5, #2]
	b _02095A2A
_02095A26:
	mov r0, #1
	strb r0, [r5, #2]
_02095A2A:
	mov r0, #0
	strb r0, [r5]
	ldrb r0, [r5, #2]
	strb r0, [r5, #1]
_02095A32:
	pop {r4, r5, r6, pc}
	thumb_func_end sub_020959D8

	thumb_func_start sub_02095A34
sub_02095A34: ; 0x02095A34
	push {r3, r4, r5, r6, lr}
	sub sp, #0xc
	add r6, sp, #0x10
	mov r5, #0x10
	ldrsb r5, [r6, r5]
	add r4, r0, #0
	str r5, [sp]
	bl sub_02095BF0
	mov r2, #0
	str r0, [sp, #4]
	add r1, sp, #4
	strb r2, [r1, #4]
	cmp r0, #3
	beq _02095A5A
	cmp r0, #4
	beq _02095A68
	add sp, #0xc
	pop {r3, r4, r5, r6, pc}
_02095A5A:
	add r0, r4, #0
	mov r1, #4
	add r2, sp, #4
	bl sub_02095CB8
	add sp, #0xc
	pop {r3, r4, r5, r6, pc}
_02095A68:
	add r0, r4, #0
	mov r1, #4
	add r2, sp, #4
	bl sub_02095CB8
	add sp, #0xc
	pop {r3, r4, r5, r6, pc}
	.balign 4, 0
	thumb_func_end sub_02095A34

	thumb_func_start sub_02095A78
sub_02095A78: ; 0x02095A78
	bx lr
	.balign 4, 0
	thumb_func_end sub_02095A78

	thumb_func_start sub_02095A7C
sub_02095A7C: ; 0x02095A7C
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	add r5, sp, #0x10
	mov r4, #0x10
	ldrsb r4, [r5, r4]
	add r6, r0, #0
	add r7, r1, #0
	str r4, [sp]
	bl sub_02095BF0
	mov r1, #0
	str r0, [sp, #4]
	ldrsb r2, [r7, r1]
	add r1, sp, #4
	cmp r0, #4
	strb r2, [r1, #4]
	bhi _02095AF4
	add r0, r0, r0
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_02095AAA: ; jump table
	.short _02095AF4 - _02095AAA - 2 ; case 0
	.short _02095AF4 - _02095AAA - 2 ; case 1
	.short _02095AF4 - _02095AAA - 2 ; case 2
	.short _02095AB4 - _02095AAA - 2 ; case 3
	.short _02095AD6 - _02095AAA - 2 ; case 4
_02095AB4:
	ldr r0, [r6, #4]
	add r2, sp, #4
	ldrb r0, [r0]
	cmp r0, #0x12
	bne _02095ACA
	add r0, r6, #0
	mov r1, #6
	bl sub_02095CB8
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
_02095ACA:
	add r0, r6, #0
	mov r1, #2
	bl sub_02095CB8
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
_02095AD6:
	ldr r0, [r6, #4]
	add r2, sp, #4
	ldrb r0, [r0]
	cmp r0, #0x12
	bne _02095AEC
	add r0, r6, #0
	mov r1, #6
	bl sub_02095CB8
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
_02095AEC:
	add r0, r6, #0
	mov r1, #2
	bl sub_02095CB8
_02095AF4:
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
	thumb_func_end sub_02095A7C

	thumb_func_start sub_02095AF8
sub_02095AF8: ; 0x02095AF8
	mov r0, #0
	strb r0, [r1]
	strb r0, [r1, #1]
	strb r0, [r1, #2]
	bx lr
	.balign 4, 0
	thumb_func_end sub_02095AF8

	thumb_func_start sub_02095B04
sub_02095B04: ; 0x02095B04
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	add r5, sp, #0x10
	mov r4, #0x10
	ldrsb r4, [r5, r4]
	add r7, r0, #0
	add r6, r1, #0
	str r4, [sp]
	bl sub_02095BF0
	mov r1, #0
	str r0, [sp, #4]
	ldrsb r3, [r6, r1]
	add r2, sp, #4
	cmp r0, #4
	strb r3, [r2, #4]
	bhi _02095B84
	add r0, r0, r0
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_02095B32: ; jump table
	.short _02095B84 - _02095B32 - 2 ; case 0
	.short _02095B3C - _02095B32 - 2 ; case 1
	.short _02095B50 - _02095B32 - 2 ; case 2
	.short _02095B64 - _02095B32 - 2 ; case 3
	.short _02095B76 - _02095B32 - 2 ; case 4
_02095B3C:
	mov r0, #1
	ldrsb r0, [r6, r0]
	mov r1, #3
	strb r0, [r2, #4]
	add r0, r7, #0
	add r2, sp, #4
	bl sub_02095CB8
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
_02095B50:
	mov r0, #1
	ldrsb r0, [r6, r0]
	mov r1, #3
	strb r0, [r2, #4]
	add r0, r7, #0
	add r2, sp, #4
	bl sub_02095CB8
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
_02095B64:
	ldrsb r0, [r6, r1]
	mov r1, #5
	strb r0, [r2, #4]
	add r0, r7, #0
	add r2, sp, #4
	bl sub_02095CB8
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
_02095B76:
	ldrsb r0, [r6, r1]
	mov r1, #5
	strb r0, [r2, #4]
	add r0, r7, #0
	add r2, sp, #4
	bl sub_02095CB8
_02095B84:
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
	thumb_func_end sub_02095B04

	thumb_func_start sub_02095B88
sub_02095B88: ; 0x02095B88
	push {r3, r4}
	ldr r0, [r3]
	cmp r0, #4
	bhi _02095BEA
	add r0, r0, r0
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_02095B9C: ; jump table
	.short _02095BEA - _02095B9C - 2 ; case 0
	.short _02095BC0 - _02095B9C - 2 ; case 1
	.short _02095BDA - _02095B9C - 2 ; case 2
	.short _02095BA6 - _02095B9C - 2 ; case 3
	.short _02095BA6 - _02095B9C - 2 ; case 4
_02095BA6:
	mov r0, #2
	strb r0, [r1]
	mov r0, #0
	strb r0, [r1, #1]
	ldrsb r4, [r1, r0]
	mov r0, #1
	ldrsb r3, [r1, r0]
	ldrb r0, [r2]
	mul r0, r3
	add r0, r4, r0
	strb r0, [r1, #2]
	pop {r3, r4}
	bx lr
_02095BC0:
	mov r0, #5
	strb r0, [r1]
	mov r0, #0
	strb r0, [r1, #1]
	ldrsb r4, [r1, r0]
	mov r0, #1
	ldrsb r3, [r1, r0]
	ldrb r0, [r2]
	mul r0, r3
	add r0, r4, r0
	strb r0, [r1, #2]
	pop {r3, r4}
	bx lr
_02095BDA:
	mov r0, #0
	strb r0, [r1]
	strb r0, [r1, #1]
	mov r0, #1
	ldrsb r3, [r1, r0]
	ldrb r0, [r2]
	mul r0, r3
	strb r0, [r1, #2]
_02095BEA:
	pop {r3, r4}
	bx lr
	.balign 4, 0
	thumb_func_end sub_02095B88

	thumb_func_start sub_02095BF0
sub_02095BF0: ; 0x02095BF0
	push {r4, r5, r6, r7}
	add r7, r2, #0
	ldrb r2, [r7, #1]
	add r4, r1, #0
	mov r0, #0
	ldrb r1, [r7]
	mov ip, r2
	cmp r3, #0
	beq _02095C3C
	ldrsb r2, [r4, r0]
	add r2, r2, r3
	lsl r2, r2, #0x18
	asr r5, r2, #0x18
	ldr r2, _02095C8C ; =SDK_OVERLAY_OVY_1_ID
	ldrsb r6, [r4, r2]
	bpl _02095C14
	add r0, r2, #0
	b _02095C2E
_02095C14:
	cmp r5, r1
	blt _02095C1C
	mov r0, #2
	b _02095C2E
_02095C1C:
	add r2, r6, #0
	mul r2, r1
	add r2, r5, r2
	lsl r2, r2, #0x18
	lsr r3, r2, #0x18
	ldrb r2, [r7, #2]
	cmp r3, r2
	blo _02095C2E
	mov r0, #2
_02095C2E:
	cmp r0, #0
	bne _02095C86
	add r2, r6, #0
	mul r2, r1
	strb r5, [r4]
	add r2, r5, r2
	strb r2, [r4, #2]
_02095C3C:
	add r3, sp, #0
	mov r2, #0x10
	ldrsb r2, [r3, r2]
	cmp r2, #0
	beq _02095C84
	mov r5, #1
	ldrsb r5, [r4, r5]
	mov r3, #0
	ldrsb r3, [r4, r3]
	add r2, r5, r2
	lsl r2, r2, #0x18
	asr r2, r2, #0x18
	bpl _02095C5A
	mov r0, #3
	b _02095C76
_02095C5A:
	mov r5, ip
	cmp r2, r5
	blt _02095C64
	mov r0, #4
	b _02095C76
_02095C64:
	add r5, r2, #0
	mul r5, r1
	add r5, r3, r5
	lsl r5, r5, #0x18
	lsr r6, r5, #0x18
	ldrb r5, [r7, #2]
	cmp r6, r5
	blo _02095C76
	mov r0, #4
_02095C76:
	cmp r0, #0
	bne _02095C86
	add r0, r2, #0
	mul r0, r1
	strb r2, [r4, #1]
	add r0, r3, r0
	strb r0, [r4, #2]
_02095C84:
	mov r0, #0
_02095C86:
	pop {r4, r5, r6, r7}
	bx lr
	nop
_02095C8C: .word SDK_OVERLAY_OVY_1_ID
	thumb_func_end sub_02095BF0

	thumb_func_start sub_02095C90
sub_02095C90: ; 0x02095C90
	push {r4, r5}
	ldrb r5, [r0, #1]
	mov r3, #0
	cmp r5, #0
	ble _02095CB2
	ldr r4, [r0, #8]
_02095C9C:
	ldr r2, [r4]
	ldrb r2, [r2, #3]
	cmp r1, r2
	bne _02095CAA
	strb r3, [r0]
	pop {r4, r5}
	bx lr
_02095CAA:
	add r3, r3, #1
	add r4, #0xc
	cmp r3, r5
	blt _02095C9C
_02095CB2:
	pop {r4, r5}
	bx lr
	.balign 4, 0
	thumb_func_end sub_02095C90

	thumb_func_start sub_02095CB8
sub_02095CB8: ; 0x02095CB8
	push {r3, r4, r5, r6, r7, lr}
	add r4, r0, #0
	add r7, r2, #0
	bl sub_02095C90
	ldrb r1, [r4]
	mov r0, #0xc
	ldr r5, [r4, #8]
	add r6, r1, #0
	mul r6, r0
	ldr r2, [r4, #0xc]
	add r0, r4, #0
	lsl r1, r1, #2
	add r4, r5, r6
	add r1, r2, r1
	ldr r2, [r5, r6]
	ldr r4, [r4, #8]
	add r3, r7, #0
	blx r4
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_02095CB8

	thumb_func_start sub_02095CE0
sub_02095CE0: ; 0x02095CE0
	push {r4, r5, r6, lr}
	add r5, r1, #0
	mov r1, #0x10
	add r6, r0, #0
	bl AllocFromHeap
	add r4, r0, #0
	add r2, r4, #0
	mov r1, #0x10
	mov r0, #0
_02095CF4:
	strb r0, [r2]
	add r2, r2, #1
	sub r1, r1, #1
	bne _02095CF4
	mov r0, #6
	strb r0, [r4, #1]
	ldrb r1, [r4, #1]
	add r0, r6, #0
	lsl r1, r1, #2
	bl AllocFromHeap
	str r0, [r4, #0xc]
	ldrb r2, [r4, #1]
	mov r1, #0
	lsl r2, r2, #2
	bl memset
	str r5, [r4, #4]
	add r0, r4, #0
	pop {r4, r5, r6, pc}
	thumb_func_end sub_02095CE0

	thumb_func_start sub_02095D1C
sub_02095D1C: ; 0x02095D1C
	mov r2, #0
	strb r2, [r0]
	ldr r2, _02095D28 ; =0x02108434
	str r2, [r0, #8]
	strb r1, [r0, #2]
	bx lr
	.balign 4, 0
_02095D28: .word 0x02108434
	thumb_func_end sub_02095D1C

	thumb_func_start sub_02095D2C
sub_02095D2C: ; 0x02095D2C
	push {r4, lr}
	add r4, r0, #0
	ldr r0, [r4, #0xc]
	bl FreeToHeap
	add r0, r4, #0
	bl FreeToHeap
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_02095D2C

	thumb_func_start sub_02095D40
sub_02095D40: ; 0x02095D40
	push {r4, r5, r6, lr}
	add r5, r0, #0
	add r6, r2, #0
	bl sub_02095C90
	ldrb r0, [r5]
	ldr r2, [r5, #0xc]
	lsl r1, r0, #2
	add r4, r2, r1
	mov r1, #0xc
	ldr r2, [r5, #8]
	mul r1, r0
	ldr r5, [r2, r1]
	ldrb r0, [r5, #2]
	cmp r6, r0
	blo _02095D64
	bl GF_AssertFail
_02095D64:
	strb r6, [r4, #2]
	ldrb r1, [r4, #2]
	ldrb r0, [r5, #2]
	cmp r1, r0
	blo _02095D72
	mov r0, #0
	strb r0, [r4, #2]
_02095D72:
	ldrb r0, [r4, #2]
	ldrb r1, [r5]
	bl _s32_div_f
	strb r1, [r4]
	ldrb r0, [r4, #2]
	ldrb r1, [r5]
	bl _s32_div_f
	strb r0, [r4, #1]
	pop {r4, r5, r6, pc}
	thumb_func_end sub_02095D40

	thumb_func_start sub_02095D88
sub_02095D88: ; 0x02095D88
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	add r4, r0, #0
	str r2, [sp, #8]
	ldrb r7, [r4]
	ldr r2, [r4, #0xc]
	mov ip, r1
	lsl r1, r7, #2
	add r5, r2, r1
	mov r1, #0xc
	add r3, r7, #0
	mul r3, r1
	ldr r2, [r4, #8]
	ldrb r1, [r5, #2]
	add r6, r2, r3
	str r1, [sp, #4]
	ldr r1, [sp, #8]
	str r1, [sp]
	ldr r2, [r2, r3]
	ldr r6, [r6, #4]
	add r1, r5, #0
	mov r3, ip
	blx r6
	ldrb r0, [r4]
	cmp r7, r0
	beq _02095DC2
	add sp, #0xc
	mov r0, #1
	pop {r4, r5, r6, r7, pc}
_02095DC2:
	ldrb r1, [r5, #2]
	ldr r0, [sp, #4]
	cmp r0, r1
	beq _02095DD0
	add sp, #0xc
	mov r0, #1
	pop {r4, r5, r6, r7, pc}
_02095DD0:
	mov r0, #0
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_02095D88

	thumb_func_start sub_02095DD8
sub_02095DD8: ; 0x02095DD8
	ldrb r1, [r0]
	ldr r2, [r0, #8]
	mov r0, #0xc
	mul r0, r1
	ldr r0, [r2, r0]
	ldrb r0, [r0, #3]
	bx lr
	.balign 4, 0
	thumb_func_end sub_02095DD8

	thumb_func_start sub_02095DE8
sub_02095DE8: ; 0x02095DE8
	ldr r1, [r0, #0xc]
	ldrb r0, [r0]
	lsl r0, r0, #2
	add r0, r1, r0
	ldrb r0, [r0, #2]
	bx lr
	thumb_func_end sub_02095DE8

	thumb_func_start sub_02095DF4
sub_02095DF4: ; 0x02095DF4
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	add r4, r1, #0
	mov r0, #0xb
	mov r1, #0x20
	add r6, r2, #0
	add r7, r3, #0
	bl AllocFromHeapAtEnd
	add r2, r0, #0
	mov r0, #0
	str r0, [r2]
	str r4, [r2, #8]
	strh r6, [r2, #0xe]
	ldr r0, [sp, #0x18]
	strh r7, [r2, #0xc]
	str r0, [r2, #0x10]
	ldr r0, [sp, #0x1c]
	ldr r1, _02095E2C ; =sub_02095E30
	str r0, [r2, #0x14]
	ldr r0, [sp, #0x20]
	str r0, [r2, #0x18]
	ldr r0, [sp, #0x24]
	str r0, [r2, #0x1c]
	ldr r0, [r5, #0x10]
	bl sub_02050530
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_02095E2C: .word sub_02095E30
	thumb_func_end sub_02095DF4

	thumb_func_start sub_02095E30
sub_02095E30: ; 0x02095E30
	push {r3, r4, r5, lr}
	add r4, r0, #0
	bl sub_0205064C
	add r5, r0, #0
	add r0, r4, #0
	bl sub_02050650
	add r4, r0, #0
	ldr r0, [r4]
	cmp r0, #3
	bhi _02095EF4
	add r0, r0, r0
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_02095E54: ; jump table
	.short _02095E5C - _02095E54 - 2 ; case 0
	.short _02095E9E - _02095E54 - 2 ; case 1
	.short _02095EB4 - _02095E54 - 2 ; case 2
	.short _02095EC4 - _02095E54 - 2 ; case 3
_02095E5C:
	mov r0, #0xb
	mov r1, #0x10
	bl AllocFromHeapAtEnd
	str r0, [r4, #4]
	ldr r0, [r4, #8]
	cmp r0, #0
	beq _02095E70
	mov r1, #1
	b _02095E72
_02095E70:
	mov r1, #0
_02095E72:
	ldr r0, [r4, #4]
	str r1, [r0, #4]
	add r0, r5, #0
	bl ScriptEnvironment_GetSav2Ptr
	ldr r1, [r4, #4]
	str r0, [r1]
	ldrh r1, [r4, #0xc]
	ldr r0, [r4, #4]
	strb r1, [r0, #0xc]
	ldrh r1, [r4, #0xe]
	ldr r0, [r4, #4]
	strb r1, [r0, #0xf]
	ldr r1, [r4, #4]
	add r0, r5, #0
	bl sub_0203FC58
	bl sub_0203E30C
	mov r0, #1
	str r0, [r4]
	b _02095EF4
_02095E9E:
	add r0, r5, #0
	bl sub_020505A0
	cmp r0, #0
	bne _02095EF4
	mov r0, #2
	str r0, [r4]
	add r0, r5, #0
	bl sub_020505C0
	b _02095EF4
_02095EB4:
	add r0, r5, #0
	bl sub_020505C8
	cmp r0, #0
	beq _02095EF4
	mov r0, #3
	str r0, [r4]
	b _02095EF4
_02095EC4:
	ldr r0, [r4, #4]
	ldrb r1, [r0, #0xe]
	ldr r0, [r4, #0x10]
	strh r1, [r0]
	ldr r0, [r4, #4]
	ldrh r1, [r0, #0xa]
	ldr r0, [r4, #0x14]
	strh r1, [r0]
	ldr r0, [r4, #4]
	ldrh r1, [r0, #8]
	ldr r0, [r4, #0x18]
	strh r1, [r0]
	ldr r0, [r4, #4]
	ldrb r1, [r0, #0xd]
	ldr r0, [r4, #0x1c]
	strh r1, [r0]
	ldr r0, [r4, #4]
	bl FreeToHeap
	add r0, r4, #0
	bl FreeToHeap
	mov r0, #1
	pop {r3, r4, r5, pc}
_02095EF4:
	mov r0, #0
	pop {r3, r4, r5, pc}
	thumb_func_end sub_02095E30

	thumb_func_start sub_02095EF8
sub_02095EF8: ; 0x02095EF8
	push {r4, r5, r6, lr}
	sub sp, #0x48
	add r5, r0, #0
	add r0, sp, #0
	bl FS_InitFile
	ldr r1, _02095F64 ; =0x021105C8
	add r0, sp, #0
	bl FS_OpenFile
	cmp r0, #0
	bne _02095F1A
	bl GF_AssertFail
	add sp, #0x48
	mov r0, #0
	pop {r4, r5, r6, pc}
_02095F1A:
	ldr r1, [sp, #0x28]
	ldr r0, [sp, #0x24]
	sub r6, r1, r0
	add r0, r5, #0
	add r1, r6, #0
	bl AllocFromHeap
	add r4, r0, #0
	mov r1, #0
	add r2, r6, #0
	bl MIi_CpuFill8
	add r0, sp, #0
	add r1, r4, #0
	mov r2, #4
	bl FS_ReadFile
	ldr r2, [r4]
	mov r1, #0x14
	add r0, r5, #0
	mul r1, r2
	bl AllocFromHeap
	str r0, [r4, #4]
	ldr r3, [r4]
	mov r2, #0x14
	ldr r1, [r4, #4]
	add r0, sp, #0
	mul r2, r3
	bl FS_ReadFile
	add r0, sp, #0
	bl FS_CloseFile
	add r0, r4, #0
	add sp, #0x48
	pop {r4, r5, r6, pc}
	.balign 4, 0
_02095F64: .word 0x021105C8
	thumb_func_end sub_02095EF8

	thumb_func_start sub_02095F68
sub_02095F68: ; 0x02095F68
	push {r4, lr}
	add r4, r0, #0
	ldr r3, [r4]
	mov r2, #0x14
	ldr r0, [r4, #4]
	mov r1, #0
	mul r2, r3
	bl MIi_CpuFill8
	ldr r0, [r4, #4]
	bl FreeToHeap
	add r0, r4, #0
	mov r1, #0
	mov r2, #8
	bl MIi_CpuFill8
	add r0, r4, #0
	bl FreeToHeap
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_02095F68

	thumb_func_start sub_02095F94
sub_02095F94: ; 0x02095F94
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	add r0, r2, #0
	add r4, r1, #0
	bl sub_02095EF8
	add r6, r0, #0
	ldr r3, [r6]
	mov r1, #0
	cmp r3, #0
	ble _02095FD4
	ldr r7, [r6, #4]
	add r2, r7, #0
_02095FAE:
	ldrh r0, [r2, #4]
	cmp r5, r0
	bne _02095FCC
	add r0, r1, #0
	mov r2, #0x14
	mul r0, r2
	add r0, r7, r0
	add r1, r4, #0
	bl MIi_CpuCopy8
	add r0, r6, #0
	bl sub_02095F68
	ldrb r0, [r4]
	pop {r3, r4, r5, r6, r7, pc}
_02095FCC:
	add r1, r1, #1
	add r2, #0x14
	cmp r1, r3
	blt _02095FAE
_02095FD4:
	add r0, r6, #0
	bl sub_02095F68
	add r0, r4, #0
	mov r1, #0
	mov r2, #0x14
	bl MIi_CpuFill8
	mov r0, #0xff
	strb r0, [r4]
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_02095F94

	thumb_func_start sub_02095FEC
sub_02095FEC: ; 0x02095FEC
	lsl r1, r0, #1
	ldr r0, _02095FF4 ; =0x0210847C
	ldrh r0, [r0, r1]
	bx lr
	.balign 4, 0
_02095FF4: .word 0x0210847C
	thumb_func_end sub_02095FEC

	thumb_func_start sub_02095FF8
sub_02095FF8: ; 0x02095FF8
	push {r3, lr}
	mov r1, #3
	bl _s32_div_f
	cmp r1, #2
	bne _02096008
	mov r0, #1
	pop {r3, pc}
_02096008:
	mov r0, #0
	pop {r3, pc}
	thumb_func_end sub_02095FF8

	thumb_func_start sub_0209600C
sub_0209600C: ; 0x0209600C
	push {r4, lr}
	add r4, r0, #0
	mov r0, #0xb
	mov r1, #8
	bl AllocFromHeapAtEnd
	add r2, r0, #0
	mov r0, #0
	str r0, [r2]
	ldr r0, [r4, #0x10]
	ldr r1, _02096028 ; =sub_0209602C
	bl sub_02050530
	pop {r4, pc}
	.balign 4, 0
_02096028: .word sub_0209602C
	thumb_func_end sub_0209600C

	thumb_func_start sub_0209602C
sub_0209602C: ; 0x0209602C
	push {r4, r5, r6, r7, lr}
	sub sp, #0x34
	add r4, r0, #0
	bl sub_0205064C
	str r0, [sp, #0x1c]
	add r0, r4, #0
	bl sub_02050650
	add r7, r0, #0
	ldr r0, [r7]
	cmp r0, #5
	bhi _02096084
	add r0, r0, r0
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_02096052: ; jump table
	.short _0209605E - _02096052 - 2 ; case 0
	.short _0209607C - _02096052 - 2 ; case 1
	.short _0209612C - _02096052 - 2 ; case 2
	.short _0209613C - _02096052 - 2 ; case 3
	.short _0209618E - _02096052 - 2 ; case 4
	.short _020961B4 - _02096052 - 2 ; case 5
_0209605E:
	mov r0, #6
	str r0, [sp]
	mov r0, #1
	str r0, [sp, #4]
	mov r0, #4
	str r0, [sp, #8]
	mov r0, #0
	add r1, r0, #0
	add r2, r0, #0
	add r3, r0, #0
	bl sub_0200FA24
	mov r0, #1
	str r0, [r7]
	b _020961CE
_0209607C:
	bl sub_0200FB5C
	cmp r0, #0
	bne _02096086
_02096084:
	b _020961CE
_02096086:
	ldr r3, _020961D4 ; =0x02108514
	add r2, sp, #0x28
	ldmia r3!, {r0, r1}
	stmia r2!, {r0, r1}
	ldr r0, [r3]
	str r0, [r2]
	ldr r0, [sp, #0x1c]
	ldr r0, [r0, #0x20]
	ldr r0, [r0]
	bl MapHeader_GetMapSec
	mov r1, #0xb3
	str r0, [sp, #0x14]
	mov r0, #0xb
	lsl r1, r1, #2
	bl AllocFromHeapAtEnd
	str r0, [r7, #4]
	mov r1, #0
	str r1, [r0]
	ldr r0, [sp, #0x1c]
	ldr r0, [r0, #0xc]
	bl Sav2_PlayerData_GetOptionsAddr
	ldr r1, [r7, #4]
	mov r5, #0
	str r0, [r1, #4]
	str r5, [sp, #0x18]
	add r6, sp, #0x28
_020960C0:
	ldr r0, [sp, #0x1c]
	ldr r4, [r7, #4]
	ldr r0, [r0, #0xc]
	add r4, #8
	bl Sav2_PlayerData_GetProfileAddr
	str r0, [sp, #0x20]
	add r0, r4, r5
	bl ZeroMonData
	mov r0, #0
	str r0, [sp]
	str r0, [sp, #4]
	str r0, [sp, #8]
	str r0, [sp, #0xc]
	ldr r1, [r6]
	add r0, r4, r5
	mov r2, #5
	mov r3, #0x20
	bl sub_0206DE38
	mov r0, #0xc
	str r0, [sp]
	mov r0, #0xb
	str r0, [sp, #4]
	ldr r1, [sp, #0x20]
	ldr r3, [sp, #0x14]
	add r0, r4, r5
	mov r2, #4
	bl sub_020720FC
	mov r0, #0
	str r0, [sp, #0x24]
	add r0, r4, r5
	mov r1, #6
	add r2, sp, #0x24
	bl sub_0206EC40
	ldr r0, [sp, #0x18]
	add r5, #0xec
	add r0, r0, #1
	add r6, r6, #4
	str r0, [sp, #0x18]
	cmp r0, #3
	blt _020960C0
	ldr r0, [sp, #0x1c]
	ldr r1, [r7, #4]
	bl sub_0203F808
	bl sub_0203E30C
	mov r0, #2
	str r0, [r7]
	b _020961CE
_0209612C:
	ldr r0, [sp, #0x1c]
	bl sub_020505A0
	cmp r0, #0
	bne _020961CE
	mov r0, #3
	str r0, [r7]
	b _020961CE
_0209613C:
	ldr r0, [sp, #0x1c]
	ldr r0, [r0, #0xc]
	bl Sav2_Pokedex_get
	add r6, r0, #0
	ldr r0, [sp, #0x1c]
	ldr r0, [r0, #0xc]
	bl SavArray_PlayerParty_get
	ldr r1, [r7, #4]
	str r0, [sp, #0x10]
	ldr r2, [r1]
	add r4, r1, #0
	mov r1, #0xec
	add r5, r2, #0
	add r4, #8
	mul r5, r1
	add r1, r4, r5
	bl sub_02074524
	cmp r0, #0
	beq _02096172
	ldr r0, [sp, #0x1c]
	add r1, r4, r5
	ldr r0, [r0, #0xc]
	bl sub_0202ECC0
_02096172:
	ldr r0, [sp, #0x10]
	mov r1, #0
	bl GetPartyMonByIndex
	add r1, r0, #0
	add r0, r6, #0
	bl Pokedex_SetMonCaughtFlag
	mov r0, #4
	str r0, [r7]
	ldr r0, [sp, #0x1c]
	bl sub_020505C0
	b _020961CE
_0209618E:
	ldr r0, [sp, #0x1c]
	bl sub_020505C8
	cmp r0, #0
	beq _020961CE
	mov r0, #6
	str r0, [sp]
	mov r1, #1
	str r1, [sp, #4]
	mov r0, #4
	str r0, [sp, #8]
	mov r0, #0
	add r2, r1, #0
	add r3, r0, #0
	bl sub_0200FA24
	mov r0, #5
	str r0, [r7]
	b _020961CE
_020961B4:
	bl sub_0200FB5C
	cmp r0, #0
	beq _020961CE
	ldr r0, [r7, #4]
	bl FreeToHeap
	add r0, r7, #0
	bl FreeToHeap
	add sp, #0x34
	mov r0, #1
	pop {r4, r5, r6, r7, pc}
_020961CE:
	mov r0, #0
	add sp, #0x34
	pop {r4, r5, r6, r7, pc}
	.balign 4, 0
_020961D4: .word 0x02108514
	thumb_func_end sub_0209602C

	thumb_func_start sub_020961D8
sub_020961D8: ; 0x020961D8
	push {r3, r4, r5, r6, r7, lr}
	add r7, r0, #0
	add r6, r1, #0
	bl sub_0205064C
	add r5, r0, #0
	mov r0, #0x20
	mov r1, #0x24
	bl AllocFromHeap
	add r4, r0, #0
	str r5, [r4]
	mov r0, #0x20
	bl ScrStrBufs_new
	str r0, [r4, #4]
	mov r3, #0x20
	str r3, [sp]
	ldr r2, [r4]
	add r3, #0xec
	ldr r2, [r2, #0xc]
	mov r0, #2
	mov r1, #0
	add r3, r5, r3
	bl sub_02090C94
	str r0, [r4, #0x10]
	ldr r0, [r5, #0xc]
	bl sub_0202A954
	str r0, [r4, #0x14]
	add r0, r4, #0
	str r6, [r4, #0x20]
	add r0, #8
	mov r1, #4
	bl MailMsg_init_withBank
	add r1, r4, #0
	ldr r0, [r4, #0x14]
	add r1, #8
	bl sub_0202ABD0
	ldr r0, [r4, #0x10]
	bl sub_02090D40
	mov r0, #0
	str r0, [r4, #0x18]
	ldr r1, _02096244 ; =sub_02096260
	add r0, r7, #0
	add r2, r4, #0
	bl sub_02050530
	pop {r3, r4, r5, r6, r7, pc}
	nop
_02096244: .word sub_02096260
	thumb_func_end sub_020961D8

	thumb_func_start sub_02096248
sub_02096248: ; 0x02096248
	push {r4, lr}
	add r4, r0, #0
	ldr r0, [r4, #0x10]
	bl sub_02090D0C
	ldr r0, [r4, #4]
	bl ScrStrBufs_delete
	add r0, r4, #0
	bl FreeToHeap
	pop {r4, pc}
	thumb_func_end sub_02096248

	thumb_func_start sub_02096260
sub_02096260: ; 0x02096260
	push {r4, lr}
	bl sub_02050650
	add r4, r0, #0
	ldr r1, [r4, #0x18]
	cmp r1, #4
	bhi _02096314
	add r1, r1, r1
	add r1, pc
	ldrh r1, [r1, #6]
	lsl r1, r1, #0x10
	asr r1, r1, #0x10
	add pc, r1
_0209627A: ; jump table
	.short _02096284 - _0209627A - 2 ; case 0
	.short _020962A2 - _0209627A - 2 ; case 1
	.short _020962B8 - _0209627A - 2 ; case 2
	.short _020962CE - _0209627A - 2 ; case 3
	.short _0209630C - _0209627A - 2 ; case 4
_02096284:
	add r1, r4, #0
	ldr r0, [r4, #0x10]
	add r1, #8
	bl sub_02090D20
	ldr r0, [r4, #0x10]
	bl sub_02090D34
	ldr r0, [r4]
	ldr r1, [r4, #0x10]
	bl sub_0203EA24
	mov r0, #1
	str r0, [r4, #0x18]
	b _02096314
_020962A2:
	ldr r0, [r4]
	bl sub_020505A0
	cmp r0, #0
	bne _02096314
	ldr r0, [r4]
	bl sub_020505C0
	mov r0, #2
	str r0, [r4, #0x18]
	b _02096314
_020962B8:
	ldr r0, [r4]
	bl sub_020505C8
	cmp r0, #0
	beq _02096314
	mov r0, #1
	bl ov01_021E636C
	mov r0, #3
	str r0, [r4, #0x18]
	b _02096314
_020962CE:
	bl sub_0200FB5C
	cmp r0, #0
	beq _02096314
	ldr r0, [r4, #0x10]
	bl sub_02090D48
	cmp r0, #0
	beq _020962EC
	ldr r0, [r4, #0x20]
	mov r1, #0
	strh r1, [r0]
	mov r0, #4
	str r0, [r4, #0x18]
	b _02096314
_020962EC:
	ldr r0, [r4, #0x20]
	mov r1, #1
	strh r1, [r0]
	add r1, r4, #0
	ldr r0, [r4, #0x10]
	add r1, #8
	bl sub_02090D60
	add r1, r4, #0
	ldr r0, [r4, #0x14]
	add r1, #8
	bl sub_0202ABEC
	mov r0, #4
	str r0, [r4, #0x18]
	b _02096314
_0209630C:
	bl sub_02096248
	mov r0, #1
	pop {r4, pc}
_02096314:
	mov r0, #0
	pop {r4, pc}
	thumb_func_end sub_02096260

	thumb_func_start sub_02096318
sub_02096318: ; 0x02096318
	ldr r3, _0209632C ; =OSi_IntrTable
	ldr r1, _02096330 ; =0x00003FF8
	mov r0, #1
	ldr r2, [r3, r1]
	orr r0, r2
	str r0, [r3, r1]
	ldr r3, _02096334 ; =sub_020D422C
	mov r0, #3
	bx r3
	nop
_0209632C: .word OSi_IntrTable
_02096330: .word 0x00003FF8
_02096334: .word sub_020D422C
	thumb_func_end sub_02096318

	thumb_func_start PrintErrorMessageAndReset
PrintErrorMessageAndReset: ; 0x02096338
	push {r4, r5, r6, r7, lr}
	sub sp, #0x24
	ldr r0, _02096548 ; =0x021D43B4
	ldr r1, [r0]
	cmp r1, #1
	bne _02096346
	b _02096544
_02096346:
	mov r1, #1
	str r1, [r0]
	mov r0, #0
	bl sub_020D2AEC
	add r1, r0, #0
	mov r0, #0
	bl sub_020D2C78
	mov r0, #0
	bl sub_020D2BD0
	add r1, r0, #0
	mov r0, #0
	bl sub_020D2C8C
	mov r1, #1
	ldr r0, _0209654C ; =0x02108528
	add r2, r1, #0
	mov r3, #0
	bl InitHeapSystem
	mov r0, #0
	add r1, r0, #0
	bl sub_0200FBF4
	mov r0, #1
	mov r1, #0
	bl sub_0200FBF4
	mov r0, #1
	bl OS_DisableIrqMask
	ldr r1, _02096550 ; =sub_02096318
	mov r0, #1
	bl sub_020D1004
	mov r0, #1
	bl OS_EnableIrqMask
	mov r0, #0
	add r1, r0, #0
	bl sub_0201A0FC
	mov r0, #0
	add r1, r0, #0
	bl sub_0201A120
	bl sub_02022C54
	bl sub_02022CBC
	mov r2, #1
	lsl r2, r2, #0x1a
	ldr r1, [r2]
	ldr r0, _02096554 ; =0xFFFFE0FF
	and r1, r0
	str r1, [r2]
	ldr r2, _02096558 ; =0x04001000
	ldr r1, [r2]
	and r0, r1
	str r0, [r2]
	mov r0, #4
	mov r1, #8
	bl sub_0201A71C
	ldr r0, _0209655C ; =gMain + 0x60
	mov r1, #0
	strb r1, [r0, #9]
	bl sub_02022D3C
	ldr r3, _02096560 ; =0x04000050
	mov r0, #0
	strh r0, [r3]
	ldr r2, _02096564 ; =0x04001050
	sub r3, #0x50
	strh r0, [r2]
	ldr r1, [r3]
	ldr r0, _02096568 ; =0xFFFF1FFF
	sub r2, #0x50
	and r1, r0
	str r1, [r3]
	ldr r1, [r2]
	and r0, r1
	str r0, [r2]
	ldr r0, _0209656C ; =0x0210855C
	bl GX_SetBanks
	mov r0, #0
	bl sub_0201AC88
	str r0, [sp, #0x10]
	ldr r0, _02096570 ; =0x02108530
	bl sub_0201ACB0
	mov r1, #0
	ldr r0, [sp, #0x10]
	ldr r2, _02096574 ; =0x02108540
	add r3, r1, #0
	bl sub_0201B1E4
	ldr r0, [sp, #0x10]
	mov r1, #0
	bl sub_0201CAE0
	mov r1, #0
	str r1, [sp]
	ldr r0, [sp, #0x10]
	ldr r2, _02096578 ; =0x000001F7
	mov r3, #2
	str r1, [sp, #4]
	bl sub_0200E3DC
	mov r0, #0
	mov r1, #0x20
	add r2, r0, #0
	bl sub_02003030
	mov r0, #0
	mov r1, #0x20
	add r2, r0, #0
	add r3, r0, #0
	bl sub_0201C1C4
	ldr r1, _0209657C ; =0x00006C21
	mov r0, #0
	bl sub_0201C2D8
	ldr r1, _0209657C ; =0x00006C21
	mov r0, #4
	bl sub_0201C2D8
	mov r0, #1
	mov r1, #0x1b
	mov r2, #0x29
	mov r3, #0
	bl NewMsgDataFromNarc
	str r0, [sp, #0xc]
	mov r0, #6
	lsl r0, r0, #6
	mov r1, #0
	bl String_ctor
	add r4, r0, #0
	bl sub_02020080
	ldr r0, [sp, #0x10]
	ldr r2, _02096580 ; =0x02108520
	add r1, sp, #0x14
	bl AddWindow
	mov r0, #0xd0
	str r0, [sp]
	mov r0, #0x90
	mov r2, #0
	str r0, [sp, #4]
	add r0, sp, #0x14
	mov r1, #0xf
	add r3, r2, #0
	bl FillWindowPixelRect
	ldr r2, _02096578 ; =0x000001F7
	add r0, sp, #0x14
	mov r1, #0
	mov r3, #2
	bl sub_0200E580
	ldr r0, [sp, #0xc]
	mov r1, #3
	add r2, r4, #0
	bl ReadMsgDataIntoString
	mov r1, #0
	str r1, [sp]
	str r1, [sp, #4]
	add r0, sp, #0x14
	add r2, r4, #0
	add r3, r1, #0
	str r1, [sp, #8]
	bl AddTextPrinterParameterized
	add r0, r4, #0
	bl String_dtor
	bl sub_02022D24
	mov r0, #0
	bl sub_0200FBE8
	mov r0, #1
	bl sub_0200FBE8
	mov r0, #0
	mov r1, #0x3f
	mov r2, #3
	bl sub_0200B4F0
	bl sub_02038D90
	mov r4, #1
_020964D8:
	bl HandleDSLidAction
	bl sub_02036144
	bl sub_02039AA4
	cmp r0, #0
	bne _020964F2
	add r0, r4, #0
	add r1, r4, #0
	bl OS_WaitIrq
	b _020964D8
_020964F2:
	ldr r5, _02096584 ; =0x04000130
	ldr r4, _02096588 ; =0x027FFFA8
	ldr r7, _0209658C ; =0x00002FFF
	mov r6, #1
_020964FA:
	bl HandleDSLidAction
	ldrh r1, [r5]
	ldrh r0, [r4]
	orr r1, r0
	ldr r0, _0209658C ; =0x00002FFF
	eor r0, r1
	and r0, r7
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	tst r0, r6
	bne _0209651C
	mov r0, #1
	add r1, r0, #0
	bl OS_WaitIrq
	b _020964FA
_0209651C:
	ldr r1, _02096590 ; =0x00007FFF
	mov r0, #0
	bl sub_0200FBF4
	ldr r1, _02096590 ; =0x00007FFF
	mov r0, #1
	bl sub_0200FBF4
	add r0, sp, #0x14
	bl RemoveWindow
	ldr r0, [sp, #0xc]
	bl DestroyMsgData
	ldr r0, [sp, #0x10]
	bl FreeToHeap
	mov r0, #0
	bl OS_ResetSystem
_02096544:
	add sp, #0x24
	pop {r4, r5, r6, r7, pc}
	.balign 4, 0
_02096548: .word 0x021D43B4
_0209654C: .word 0x02108528
_02096550: .word sub_02096318
_02096554: .word 0xFFFFE0FF
_02096558: .word 0x04001000
_0209655C: .word gMain + 0x60
_02096560: .word 0x04000050
_02096564: .word 0x04001050
_02096568: .word 0xFFFF1FFF
_0209656C: .word 0x0210855C
_02096570: .word 0x02108530
_02096574: .word 0x02108540
_02096578: .word 0x000001F7
_0209657C: .word 0x00006C21
_02096580: .word 0x02108520
_02096584: .word 0x04000130
_02096588: .word 0x027FFFA8
_0209658C: .word 0x00002FFF
_02096590: .word 0x00007FFF
	thumb_func_end PrintErrorMessageAndReset

	thumb_func_start sub_02096594
sub_02096594: ; 0x02096594
	ldr r0, _0209659C ; =0x04000006
	ldr r3, _020965A0 ; =sub_0201FBB8
	ldrh r0, [r0]
	bx r3
	.balign 4, 0
_0209659C: .word 0x04000006
_020965A0: .word sub_0201FBB8
	thumb_func_end sub_02096594

	thumb_func_start sub_020965A4
sub_020965A4: ; 0x020965A4
	push {r3, r4, r5, lr}
	add r5, r0, #0
	bl sub_020967BC
	ldr r1, _02096604 ; =0x00000A54
	add r0, r5, #0
	mov r2, #0xb
	bl OverlayManager_CreateAndGetData
	ldr r2, _02096604 ; =0x00000A54
	add r4, r0, #0
	mov r1, #0
	bl MIi_CpuFill8
	add r0, r4, #0
	bl sub_02096780
	add r0, r4, #0
	bl sub_02096884
	add r0, r5, #0
	bl OverlayManager_GetField18
	str r0, [r4]
	cmp r0, #0
	bne _020965DC
	bl GF_AssertFail
_020965DC:
	ldr r2, [r4]
	add r0, r4, #0
	add r2, #0x20
	ldrb r2, [r2]
	mov r1, #0xb
	bl ov80_0222A84C
	str r0, [r4, #0x14]
	ldr r1, [r4]
	mov r2, #0
	add r1, #0x20
	ldrb r1, [r1]
	bl ov80_0222A958
	add r0, r4, #0
	bl sub_02096760
	mov r0, #1
	pop {r3, r4, r5, pc}
	nop
_02096604: .word 0x00000A54
	thumb_func_end sub_020965A4

	thumb_func_start sub_02096608
sub_02096608: ; 0x02096608
	push {r4, r5, r6, lr}
	add r5, r1, #0
	bl OverlayManager_GetData
	ldr r1, [r5]
	add r4, r0, #0
	cmp r1, #6
	bls _0209661A
	b _02096734
_0209661A:
	add r1, r1, r1
	add r1, pc
	ldrh r1, [r1, #6]
	lsl r1, r1, #0x10
	asr r1, r1, #0x10
	add pc, r1
_02096626: ; jump table
	.short _02096634 - _02096626 - 2 ; case 0
	.short _0209663A - _02096626 - 2 ; case 1
	.short _0209666C - _02096626 - 2 ; case 2
	.short _02096670 - _02096626 - 2 ; case 3
	.short _02096686 - _02096626 - 2 ; case 4
	.short _020966CE - _02096626 - 2 ; case 5
	.short _020966DE - _02096626 - 2 ; case 6
_02096634:
	mov r0, #1
	str r0, [r5]
	b _02096734
_0209663A:
	add r0, #0x22
	ldrb r0, [r0]
	cmp r0, #1
	bne _02096648
	mov r0, #2
	str r0, [r5]
	b _02096734
_02096648:
	ldrb r0, [r4, #0x1d]
	cmp r0, #0
	beq _02096734
	ldrb r0, [r4, #0x1e]
	cmp r0, #1
	bne _0209665A
	mov r0, #5
	str r0, [r5]
	b _02096734
_0209665A:
	ldr r0, [r4, #0x14]
	bl ov80_0222A8B8
	ldr r0, [r4, #4]
	cmp r0, #0
	beq _02096734
	mov r0, #3
	str r0, [r5]
	b _02096734
_0209666C:
	mov r0, #1
	pop {r4, r5, r6, pc}
_02096670:
	ldr r0, [r4, #0x18]
	bl ov80_022389C4
	add r0, r4, #0
	bl sub_02096770
	bl sub_020967E4
	mov r0, #4
	str r0, [r5]
	b _02096734
_02096686:
	ldr r0, [r4, #4]
	bl OverlayManager_run
	cmp r0, #1
	bne _02096734
	ldr r0, [r4, #4]
	bl OverlayManager_delete
	bl sub_020967BC
	ldr r1, [r4, #0xc]
	cmp r1, #0
	beq _020966A4
	ldr r0, [r4, #8]
	blx r1
_020966A4:
	ldr r0, [r4, #8]
	cmp r0, #0
	beq _020966B4
	ldrb r1, [r4, #0x10]
	cmp r1, #1
	bne _020966B4
	bl FreeToHeap
_020966B4:
	mov r0, #0
	str r0, [r4, #4]
	str r0, [r4, #0xc]
	str r0, [r4, #8]
	add r0, r4, #0
	bl sub_02096760
	ldr r0, [r4, #0x18]
	bl ov80_02238A18
	mov r0, #1
	str r0, [r5]
	b _02096734
_020966CE:
	bl sub_02096770
	add r0, r4, #0
	bl sub_02096780
	mov r0, #6
	str r0, [r5]
	b _02096734
_020966DE:
	bl sub_02096760
	ldrh r1, [r4, #0x20]
	ldr r0, _02096738 ; =0x0000FFFF
	cmp r1, r0
	ldr r0, [r4, #0x14]
	bne _020966FA
	ldr r1, [r4]
	mov r2, #0xb
	add r1, #0x20
	ldrb r1, [r1]
	bl ov80_0222AA7C
	b _0209672C
_020966FA:
	mov r1, #0xb
	bl ov80_0222AAD8
	add r6, r0, #0
	ldr r0, [r4, #0x14]
	bl ov80_0222A920
	ldr r2, [r4]
	add r0, r4, #0
	add r2, #0x20
	ldrb r2, [r2]
	mov r1, #0xb
	bl ov80_0222A84C
	str r0, [r4, #0x14]
	ldr r1, [r4]
	ldrh r2, [r4, #0x20]
	add r1, #0x20
	ldrb r1, [r1]
	bl ov80_0222A958
	ldr r0, [r4, #0x14]
	add r1, r6, #0
	bl ov80_0222AAF8
_0209672C:
	mov r0, #0
	strb r0, [r4, #0x1e]
	mov r0, #1
	str r0, [r5]
_02096734:
	mov r0, #0
	pop {r4, r5, r6, pc}
	.balign 4, 0
_02096738: .word 0x0000FFFF
	thumb_func_end sub_02096608

	thumb_func_start sub_0209673C
sub_0209673C: ; 0x0209673C
	push {r3, r4, r5, lr}
	add r5, r0, #0
	bl OverlayManager_GetData
	add r4, r0, #0
	ldr r0, [r4, #0x14]
	bl ov80_0222A920
	add r0, r4, #0
	bl sub_02096770
	add r0, r5, #0
	bl OverlayManager_FreeData
	bl sub_020967E4
	mov r0, #1
	pop {r3, r4, r5, pc}
	thumb_func_end sub_0209673C

	thumb_func_start sub_02096760
sub_02096760: ; 0x02096760
	push {r4, lr}
	add r4, r0, #0
	bl ov80_02238648
	str r0, [r4, #0x18]
	mov r0, #1
	strb r0, [r4, #0x1d]
	pop {r4, pc}
	thumb_func_end sub_02096760

	thumb_func_start sub_02096770
sub_02096770: ; 0x02096770
	push {r4, lr}
	add r4, r0, #0
	ldr r0, [r4, #0x18]
	bl ov80_0223885C
	mov r0, #0
	strb r0, [r4, #0x1d]
	pop {r4, pc}
	thumb_func_end sub_02096770

	thumb_func_start sub_02096780
sub_02096780: ; 0x02096780
	push {r4, lr}
	add r4, r0, #0
	ldr r0, _020967B8 ; =0x0000FFFF
	mov r1, #0
	add r2, r4, #0
_0209678A:
	add r1, r1, #1
	strh r0, [r2, #0x24]
	add r2, r2, #4
	cmp r1, #0x18
	blt _0209678A
	add r0, r4, #0
	mov r2, #0x1e
	add r0, #0x84
	mov r1, #0
	lsl r2, r2, #6
	bl MIi_CpuFill8
	ldr r1, _020967B8 ; =0x0000FFFF
	mov r2, #0
_020967A6:
	add r0, r4, #0
	add r0, #0x90
	add r2, r2, #1
	add r4, #0x3c
	strh r1, [r0]
	cmp r2, #0x20
	blt _020967A6
	pop {r4, pc}
	nop
_020967B8: .word 0x0000FFFF
	thumb_func_end sub_02096780

	thumb_func_start sub_020967BC
sub_020967BC: ; 0x020967BC
	push {r3, lr}
	ldr r0, _020967D8 ; =SDK_OVERLAY_OVY_80_ID
	mov r1, #2
	bl HandleLoadOverlay
	ldr r0, _020967DC ; =SDK_OVERLAY_OVY_81_ID
	mov r1, #2
	bl HandleLoadOverlay
	ldr r0, _020967E0 ; =SDK_OVERLAY_OVY_42_ID
	mov r1, #2
	bl HandleLoadOverlay
	pop {r3, pc}
	.balign 4, 0
_020967D8: .word SDK_OVERLAY_OVY_80_ID
_020967DC: .word SDK_OVERLAY_OVY_81_ID
_020967E0: .word SDK_OVERLAY_OVY_42_ID
	thumb_func_end sub_020967BC

	thumb_func_start sub_020967E4
sub_020967E4: ; 0x020967E4
	push {r3, lr}
	ldr r0, _020967FC ; =SDK_OVERLAY_OVY_80_ID
	bl UnloadOverlayByID
	ldr r0, _02096800 ; =SDK_OVERLAY_OVY_81_ID
	bl UnloadOverlayByID
	ldr r0, _02096804 ; =SDK_OVERLAY_OVY_42_ID
	bl UnloadOverlayByID
	pop {r3, pc}
	nop
_020967FC: .word SDK_OVERLAY_OVY_80_ID
_02096800: .word SDK_OVERLAY_OVY_81_ID
_02096804: .word SDK_OVERLAY_OVY_42_ID
	thumb_func_end sub_020967E4

	thumb_func_start sub_02096808
sub_02096808: ; 0x02096808
	ldr r0, [r0]
	bx lr
	thumb_func_end sub_02096808

	thumb_func_start sub_0209680C
sub_0209680C: ; 0x0209680C
	ldr r0, [r0, #0x18]
	bx lr
	thumb_func_end sub_0209680C

	thumb_func_start sub_02096810
sub_02096810: ; 0x02096810
	ldr r0, [r0]
	ldr r0, [r0]
	bx lr
	.balign 4, 0
	thumb_func_end sub_02096810

	thumb_func_start sub_02096818
sub_02096818: ; 0x02096818
	ldr r0, [r0]
	str r1, [r0]
	bx lr
	.balign 4, 0
	thumb_func_end sub_02096818

	thumb_func_start sub_02096820
sub_02096820: ; 0x02096820
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	ldr r0, [r5, #4]
	add r7, r1, #0
	add r4, r2, #0
	add r6, r3, #0
	cmp r0, #0
	beq _02096834
	bl GF_AssertFail
_02096834:
	add r0, r7, #0
	add r1, r4, #0
	mov r2, #0xb
	bl OverlayManager_new
	str r0, [r5, #4]
	str r4, [r5, #8]
	ldr r0, [sp, #0x18]
	strb r6, [r5, #0x10]
	str r0, [r5, #0xc]
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_02096820

	thumb_func_start sub_0209684C
sub_0209684C: ; 0x0209684C
	mov r1, #1
	add r0, #0x22
	strb r1, [r0]
	bx lr
	thumb_func_end sub_0209684C

	thumb_func_start sub_02096854
sub_02096854: ; 0x02096854
	ldr r3, [r0]
	add r3, #0x20
	strb r1, [r3]
	mov r1, #1
	strb r1, [r0, #0x1e]
	strh r2, [r0, #0x20]
	bx lr
	.balign 4, 0
	thumb_func_end sub_02096854

	thumb_func_start sub_02096864
sub_02096864: ; 0x02096864
	add r0, #0x24
	bx lr
	thumb_func_end sub_02096864

	thumb_func_start sub_02096868
sub_02096868: ; 0x02096868
	add r0, #0x84
	bx lr
	thumb_func_end sub_02096868

	thumb_func_start sub_0209686C
sub_0209686C: ; 0x0209686C
	mov r2, #0x3c
	add r0, #0x84
	mul r2, r1
	add r0, r0, r2
	bx lr
	.balign 4, 0
	thumb_func_end sub_0209686C

	thumb_func_start sub_02096878
sub_02096878: ; 0x02096878
	ldr r1, _02096880 ; =0x00000A04
	add r0, r0, r1
	bx lr
	nop
_02096880: .word 0x00000A04
	thumb_func_end sub_02096878

	thumb_func_start sub_02096884
sub_02096884: ; 0x02096884
	push {r4, lr}
	add r4, r0, #0
	ldr r0, _020968A8 ; =0x00000A04
	mov r1, #0
	add r0, r4, r0
	mov r2, #8
	bl MIi_CpuFill8
	ldr r1, _020968AC ; =0x0000FFFF
	ldr r0, _020968A8 ; =0x00000A04
	mov r2, #0
_0209689A:
	add r2, r2, #1
	strh r1, [r4, r0]
	add r4, r4, #2
	cmp r2, #8
	blt _0209689A
	pop {r4, pc}
	nop
_020968A8: .word 0x00000A04
_020968AC: .word 0x0000FFFF
	thumb_func_end sub_02096884

	thumb_func_start sub_020968B0
sub_020968B0: ; 0x020968B0
	push {r4, r5, r6, lr}
	add r5, r0, #0
	add r6, r1, #0
	mov r0, #0xb
	mov r1, #0x28
	bl AllocFromHeapAtEnd
	add r4, r0, #0
	mov r1, #0
	mov r2, #0x28
	bl MIi_CpuFill8
	str r6, [r4]
	ldr r0, [r5, #0xc]
	bl Sav2_PlayerData_GetOptionsAddr
	str r0, [r4, #4]
	ldr r0, [r5, #0xc]
	mov r1, #0xe
	str r0, [r4, #8]
	add r0, r5, #0
	add r0, #0x94
	ldr r0, [r0]
	add r2, r4, #0
	str r0, [r4, #0xc]
	add r0, r5, #0
	add r0, #0xb0
	ldr r0, [r0]
	str r0, [r4, #0x1c]
	mov r0, #0
	str r0, [r4, #0x10]
	str r0, [r4, #0x14]
	ldr r0, [r5, #0x20]
	ldr r0, [r0]
	str r0, [r4, #0x18]
	add r0, r4, #0
	add r0, #0x20
	strb r1, [r0]
	ldr r1, _0209690C ; =0x02108584
	add r0, r5, #0
	str r5, [r4, #0x24]
	bl ScrUnk80_AddOvyMan
	add r0, r4, #0
	pop {r4, r5, r6, pc}
	nop
_0209690C: .word 0x02108584
	thumb_func_end sub_020968B0

	thumb_func_start sub_02096910
sub_02096910: ; 0x02096910
	ldr r3, _0209691C ; =sub_0203410C
	add r2, r0, #0
	ldr r0, _02096920 ; =0x02108594
	mov r1, #0x34
	bx r3
	nop
_0209691C: .word sub_0203410C
_02096920: .word 0x02108594
	thumb_func_end sub_02096910

	thumb_func_start sub_02096924
sub_02096924: ; 0x02096924
	push {r3, r4, r5, r6, r7, lr}
	add r7, r0, #0
	ldr r0, _02096990 ; =0x000008D4
	add r5, r3, #0
	ldrb r1, [r5, r0]
	add r6, r2, #0
	mov r4, #0
	add r1, r1, #1
	strb r1, [r5, r0]
	bl sub_0203769C
	cmp r7, r0
	beq _0209698E
	ldrh r0, [r6]
	mov r1, #0xe0
	strb r0, [r5, #0x12]
	ldrh r0, [r6, #2]
	strh r0, [r5, #0x16]
	ldrh r0, [r6, #4]
	strh r0, [r5, #0x18]
	ldrh r0, [r6, #6]
	strh r0, [r5, #0x14]
	ldrb r0, [r5, #0x10]
	bic r0, r1
	ldrb r1, [r5, #0x12]
	add r1, r1, #5
	lsl r1, r1, #0x18
	lsr r1, r1, #0x18
	lsl r1, r1, #0x1d
	lsr r1, r1, #0x18
	orr r0, r1
	strb r0, [r5, #0x10]
	ldrh r2, [r5, #0x16]
	ldrh r1, [r5, #0x2e]
	cmp r1, r2
	beq _02096972
	ldrh r0, [r5, #0x18]
	cmp r1, r0
	bne _02096978
_02096972:
	add r0, r4, #1
	lsl r0, r0, #0x10
	lsr r4, r0, #0x10
_02096978:
	ldrh r1, [r5, #0x30]
	cmp r1, r2
	beq _02096984
	ldrh r0, [r5, #0x18]
	cmp r1, r0
	bne _0209698A
_02096984:
	add r0, r4, #2
	lsl r0, r0, #0x10
	lsr r4, r0, #0x10
_0209698A:
	ldr r0, _02096994 ; =0x000008D8
	strh r4, [r5, r0]
_0209698E:
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_02096990: .word 0x000008D4
_02096994: .word 0x000008D8
	thumb_func_end sub_02096924

	thumb_func_start sub_02096998
sub_02096998: ; 0x02096998
	push {r4, lr}
	ldr r1, _020969C0 ; =0x0000083E
	add r4, r0, #0
	add r1, r4, r1
	add r0, #0x3e
	mov r2, #0x1c
	bl MIi_CpuCopy8
	ldr r1, _020969C0 ; =0x0000083E
	mov r0, #0x3f
	add r1, r4, r1
	mov r2, #0x1c
	bl sub_02037030
	cmp r0, #1
	bne _020969BC
	mov r0, #1
	pop {r4, pc}
_020969BC:
	mov r0, #0
	pop {r4, pc}
	.balign 4, 0
_020969C0: .word 0x0000083E
	thumb_func_end sub_02096998

	thumb_func_start sub_020969C4
sub_020969C4: ; 0x020969C4
	push {r4, r5, r6, lr}
	add r5, r0, #0
	ldr r0, _020969F4 ; =0x000008D4
	add r4, r3, #0
	ldrb r1, [r4, r0]
	add r6, r2, #0
	add r1, r1, #1
	strb r1, [r4, r0]
	bl sub_0203769C
	cmp r5, r0
	beq _020969F0
	bl sub_0203769C
	cmp r0, #0
	beq _020969F0
	add r4, #0x3e
	add r0, r6, #0
	add r1, r4, #0
	mov r2, #0x1c
	bl MIi_CpuCopy8
_020969F0:
	pop {r4, r5, r6, pc}
	nop
_020969F4: .word 0x000008D4
	thumb_func_end sub_020969C4

	thumb_func_start sub_020969F8
sub_020969F8: ; 0x020969F8
	push {r4, r5, r6, lr}
	add r5, r0, #0
	ldr r0, _02096A30 ; =0x000008D8
	add r4, r3, #0
	mov r1, #0
	strh r1, [r4, r0]
	sub r1, r0, #4
	ldrb r1, [r4, r1]
	sub r0, r0, #4
	add r6, r2, #0
	add r1, r1, #1
	strb r1, [r4, r0]
	bl sub_0203769C
	cmp r5, r0
	beq _02096A2C
	ldrb r0, [r4, #0x10]
	lsl r0, r0, #0x1c
	lsr r0, r0, #0x1f
	bne _02096A26
	ldrh r0, [r6]
	cmp r0, #0
	beq _02096A2C
_02096A26:
	ldr r0, _02096A30 ; =0x000008D8
	mov r1, #1
	strh r1, [r4, r0]
_02096A2C:
	pop {r4, r5, r6, pc}
	nop
_02096A30: .word 0x000008D8
	thumb_func_end sub_020969F8

	thumb_func_start sub_02096A34
sub_02096A34: ; 0x02096A34
	push {r4, r5, r6, lr}
	add r5, r0, #0
	add r0, #0xa0
	ldrb r0, [r0]
	strh r0, [r5, #8]
	add r0, r5, #0
	add r0, #0xa0
	ldrb r0, [r0]
	bl ov80_022385D8
	add r4, r0, #0
	ldr r0, [r5]
	bl sub_0203107C
	add r6, r0, #0
	add r0, r4, #0
	bl sub_0205C268
	add r2, r0, #0
	add r0, r6, #0
	add r1, r4, #0
	bl sub_020310BC
	strh r0, [r5, #0xa]
	add r5, #8
	mov r0, #0x39
	add r1, r5, #0
	mov r2, #0x28
	bl sub_02037030
	cmp r0, #1
	bne _02096A78
	mov r0, #1
	pop {r4, r5, r6, pc}
_02096A78:
	mov r0, #0
	pop {r4, r5, r6, pc}
	thumb_func_end sub_02096A34

	thumb_func_start sub_02096A7C
sub_02096A7C: ; 0x02096A7C
	push {r4, r5, r6, lr}
	add r4, r3, #0
	add r6, r0, #0
	add r0, r4, #0
	add r0, #0x6f
	ldrb r0, [r0]
	add r5, r2, #0
	add r1, r0, #1
	add r0, r4, #0
	add r0, #0x6f
	strb r1, [r0]
	bl sub_0203769C
	cmp r6, r0
	beq _02096AA8
	ldrh r1, [r5]
	add r0, r4, #0
	add r0, #0x6e
	strb r1, [r0]
	ldrh r0, [r5, #2]
	add r4, #0x72
	strh r0, [r4]
_02096AA8:
	pop {r4, r5, r6, pc}
	.balign 4, 0
	thumb_func_end sub_02096A7C

	thumb_func_start sub_02096AAC
sub_02096AAC: ; 0x02096AAC
	push {r3, lr}
	add r2, r0, #0
	strh r1, [r2, #8]
	add r2, #8
	add r1, r2, #0
	mov r0, #0x3a
	mov r2, #0x28
	bl sub_02037030
	cmp r0, #1
	bne _02096AC6
	mov r0, #1
	pop {r3, pc}
_02096AC6:
	mov r0, #0
	pop {r3, pc}
	.balign 4, 0
	thumb_func_end sub_02096AAC

	thumb_func_start sub_02096ACC
sub_02096ACC: ; 0x02096ACC
	push {r4, r5, r6, lr}
	add r4, r3, #0
	add r5, r0, #0
	add r0, r4, #0
	add r0, #0x6f
	ldrb r0, [r0]
	add r6, r2, #0
	add r1, r0, #1
	add r0, r4, #0
	add r0, #0x6f
	strb r1, [r0]
	bl sub_0203769C
	cmp r5, r0
	beq _02096AF0
	ldrh r0, [r6]
	add r4, #0x59
	strb r0, [r4]
_02096AF0:
	pop {r4, r5, r6, pc}
	.balign 4, 0
	thumb_func_end sub_02096ACC

	thumb_func_start sub_02096AF4
sub_02096AF4: ; 0x02096AF4
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	ldr r0, [r5]
	add r4, r1, #0
	add r6, r2, #0
	bl SavArray_PlayerParty_get
	add r1, r5, #0
	add r1, #0x6a
	strb r4, [r1]
	add r1, r5, #0
	add r1, #0x6b
	add r7, r0, #0
	strb r6, [r1]
	cmp r4, #0xff
	bne _02096B30
	add r0, r5, #0
	mov r1, #0
	add r0, #0x76
	strh r1, [r0]
	add r0, r5, #0
	add r0, #0x7e
	strh r1, [r0]
	add r0, r5, #0
	add r0, #0x78
	strh r1, [r0]
	add r0, r5, #0
	add r0, #0x80
	strh r1, [r0]
	b _02096B7E
_02096B30:
	add r1, r4, #0
	bl GetPartyMonByIndex
	mov r1, #5
	mov r2, #0
	add r4, r0, #0
	bl GetMonData
	add r1, r5, #0
	add r1, #0x76
	strh r0, [r1]
	add r0, r4, #0
	mov r1, #6
	mov r2, #0
	bl GetMonData
	add r1, r5, #0
	add r1, #0x7e
	strh r0, [r1]
	add r0, r7, #0
	add r1, r6, #0
	bl GetPartyMonByIndex
	mov r1, #5
	mov r2, #0
	add r4, r0, #0
	bl GetMonData
	add r1, r5, #0
	add r1, #0x78
	strh r0, [r1]
	add r0, r4, #0
	mov r1, #6
	mov r2, #0
	bl GetMonData
	add r1, r5, #0
	add r1, #0x80
	strh r0, [r1]
_02096B7E:
	add r0, r5, #0
	add r0, #0x76
	ldrh r0, [r0]
	mov r2, #0x28
	strh r0, [r5, #8]
	add r0, r5, #0
	add r0, #0x7e
	ldrh r0, [r0]
	strh r0, [r5, #0xa]
	add r0, r5, #0
	add r0, #0x78
	ldrh r0, [r0]
	strh r0, [r5, #0xc]
	add r0, r5, #0
	add r0, #0x80
	ldrh r0, [r0]
	strh r0, [r5, #0xe]
	add r5, #8
	mov r0, #0x3b
	add r1, r5, #0
	bl sub_02037030
	cmp r0, #1
	bne _02096BB2
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_02096BB2:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_02096AF4

	thumb_func_start sub_02096BB8
sub_02096BB8: ; 0x02096BB8
	push {r4, r5, r6, lr}
	add r4, r3, #0
	add r6, r0, #0
	add r0, r4, #0
	add r0, #0x6f
	ldrb r0, [r0]
	add r5, r2, #0
	add r1, r0, #1
	add r0, r4, #0
	add r0, #0x6f
	strb r1, [r0]
	bl sub_0203769C
	cmp r6, r0
	beq _02096BF4
	ldrh r1, [r5]
	add r0, r4, #0
	add r0, #0x86
	strh r1, [r0]
	add r0, r4, #0
	ldrh r1, [r5, #2]
	add r0, #0x8e
	strh r1, [r0]
	add r0, r4, #0
	ldrh r1, [r5, #4]
	add r0, #0x88
	add r4, #0x90
	strh r1, [r0]
	ldrh r0, [r5, #6]
	strh r0, [r4]
_02096BF4:
	pop {r4, r5, r6, pc}
	.balign 4, 0
	thumb_func_end sub_02096BB8

	thumb_func_start sub_02096BF8
sub_02096BF8: ; 0x02096BF8
	push {r3, lr}
	add r2, r0, #0
	strh r1, [r2, #8]
	add r2, #8
	add r1, r2, #0
	mov r0, #0x3c
	mov r2, #0x28
	bl sub_02037030
	cmp r0, #1
	bne _02096C12
	mov r0, #1
	pop {r3, pc}
_02096C12:
	mov r0, #0
	pop {r3, pc}
	.balign 4, 0
	thumb_func_end sub_02096BF8

	thumb_func_start sub_02096C18
sub_02096C18: ; 0x02096C18
	push {r4, r5, r6, lr}
	add r4, r3, #0
	add r5, r0, #0
	add r0, r4, #0
	add r0, #0x6f
	ldrb r0, [r0]
	add r6, r2, #0
	add r1, r0, #1
	add r0, r4, #0
	add r0, #0x6f
	strb r1, [r0]
	bl sub_0203769C
	cmp r5, r0
	beq _02096C3C
	ldrh r0, [r6]
	add r4, #0x74
	strh r0, [r4]
_02096C3C:
	pop {r4, r5, r6, pc}
	.balign 4, 0
	thumb_func_end sub_02096C18

	thumb_func_start sub_02096C40
sub_02096C40: ; 0x02096C40
	push {r3, lr}
	add r2, r0, #0
	strh r1, [r2, #8]
	add r2, #8
	add r1, r2, #0
	mov r0, #0x3d
	mov r2, #0x28
	bl sub_02037030
	cmp r0, #1
	bne _02096C5A
	mov r0, #1
	pop {r3, pc}
_02096C5A:
	mov r0, #0
	pop {r3, pc}
	.balign 4, 0
	thumb_func_end sub_02096C40

	thumb_func_start sub_02096C60
sub_02096C60: ; 0x02096C60
	push {r4, r5, r6, lr}
	add r4, r3, #0
	add r5, r0, #0
	add r0, r4, #0
	add r0, #0x6f
	ldrb r0, [r0]
	add r6, r2, #0
	add r1, r0, #1
	add r0, r4, #0
	add r0, #0x6f
	strb r1, [r0]
	bl sub_0203769C
	cmp r5, r0
	beq _02096C84
	ldrh r0, [r6]
	add r4, #0x71
	strb r0, [r4]
_02096C84:
	pop {r4, r5, r6, pc}
	.balign 4, 0
	thumb_func_end sub_02096C60

	thumb_func_start sub_02096C88
sub_02096C88: ; 0x02096C88
	push {r4, r5, r6, lr}
	add r6, r1, #0
	add r5, r0, #0
	add r0, r6, #0
	mov r1, #0x58
	bl AllocFromHeap
	add r4, r0, #0
	bne _02096C9E
	bl GF_AssertFail
_02096C9E:
	add r0, r4, #0
	mov r1, #0
	mov r2, #0x58
	bl memset
	ldr r1, _02096CC4 ; =0x00001BD0
	add r0, r6, #0
	str r5, [r4]
	bl AllocFromHeap
	str r0, [r4, #0x4c]
	ldr r1, _02096CC4 ; =0x00001BD0
	add r0, r6, #0
	bl AllocFromHeap
	str r0, [r4, #0x50]
	add r0, r4, #0
	pop {r4, r5, r6, pc}
	nop
_02096CC4: .word 0x00001BD0
	thumb_func_end sub_02096C88

	thumb_func_start sub_02096CC8
sub_02096CC8: ; 0x02096CC8
	push {r4, lr}
	add r4, r0, #0
	ldr r0, [r4, #0x4c]
	bl FreeToHeap
	ldr r0, [r4, #0x50]
	bl FreeToHeap
	add r0, r4, #0
	bl FreeToHeap
	pop {r4, pc}
	thumb_func_end sub_02096CC8

	thumb_func_start sub_02096CE0
sub_02096CE0: ; 0x02096CE0
	ldr r3, _02096CEC ; =sub_0203410C
	add r2, r0, #0
	ldr r0, _02096CF0 ; =0x0210884C
	mov r1, #0x87
	bx r3
	nop
_02096CEC: .word sub_0203410C
_02096CF0: .word 0x0210884C
	thumb_func_end sub_02096CE0

	thumb_func_start sub_02096CF4
sub_02096CF4: ; 0x02096CF4
	push {r4, lr}
	add r4, r0, #0
	mov r0, #2
	bl sub_02038C1C
	bl sub_02037FF0
	ldr r0, [r4]
	ldr r0, [r0, #0x20]
	bl sub_0205AD24
	mov r0, #0
	bl sub_0205A904
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_02096CF4

	thumb_func_start sub_02096D14
sub_02096D14: ; 0x02096D14
	push {r3, r4, r5, r6, r7, lr}
	add r5, r1, #0
	add r7, r0, #0
	add r6, r3, #0
	str r2, [sp]
	cmp r5, #0x12
	blo _02096D26
	bl GF_AssertFail
_02096D26:
	add r0, r6, #4
	cmp r0, #0x18
	bls _02096D30
	bl GF_AssertFail
_02096D30:
	add r4, r7, #4
	ldr r1, [sp]
	add r0, r4, #4
	add r2, r6, #0
	str r5, [r7, #4]
	bl memcpy
	mov r0, #0x82
	add r1, r4, #0
	mov r2, #0x18
	bl sub_02037030
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_02096D14

	thumb_func_start sub_02096D4C
sub_02096D4C: ; 0x02096D4C
	push {r4, lr}
	ldr r4, [r0, #0x1c]
	cmp r4, #1
	bne _02096D58
	mov r0, #0
	pop {r4, pc}
_02096D58:
	bl sub_02096D14
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_02096D4C

	thumb_func_start sub_02096D60
sub_02096D60: ; 0x02096D60
	push {r3, r4, r5, lr}
	ldr r4, [r2]
	cmp r4, #0x12
	blo _02096D6E
	bl GF_AssertFail
	pop {r3, r4, r5, pc}
_02096D6E:
	lsl r5, r4, #2
	ldr r4, _02096D7C ; =0x02108804
	add r2, r2, #4
	ldr r4, [r4, r5]
	blx r4
	pop {r3, r4, r5, pc}
	nop
_02096D7C: .word 0x02108804
	thumb_func_end sub_02096D60

	thumb_func_start sub_02096D80
sub_02096D80: ; 0x02096D80
	push {r4, lr}
	add r1, r0, #0
	mov r0, #0x46
	add r4, r2, #0
	ldrsh r2, [r3, r0]
	mov r0, #1
	lsl r0, r1
	orr r2, r0
	add r0, r3, #0
	add r0, #0x46
	strh r2, [r0]
	add r0, r3, #0
	bl sub_02097018
	mov r2, #0x59
	add r1, r4, #0
	lsl r2, r2, #4
	bl memcpy
	pop {r4, pc}
	thumb_func_end sub_02096D80

	thumb_func_start sub_02096DA8
sub_02096DA8: ; 0x02096DA8
	cmp r0, #0
	bne _02096DB0
	ldrb r0, [r2]
	str r0, [r3, #0x28]
_02096DB0:
	bx lr
	.balign 4, 0
	thumb_func_end sub_02096DA8

	thumb_func_start sub_02096DB4
sub_02096DB4: ; 0x02096DB4
	ldr r0, [r3, #0x20]
	add r0, r0, #1
	str r0, [r3, #0x20]
	bx lr
	thumb_func_end sub_02096DB4

	thumb_func_start sub_02096DBC
sub_02096DBC: ; 0x02096DBC
	push {r3, r4, r5, lr}
	add r5, r0, #0
	add r4, r3, #0
	bl sub_0203769C
	cmp r0, #0
	beq _02096DE0
	mov r0, #0
	str r0, [r4, #0x20]
	mov r0, #1
	str r0, [r4, #0x24]
	ldr r0, [r4]
	lsl r2, r5, #0x18
	ldr r0, [r0, #0x38]
	mov r1, #0x1f
	lsr r2, r2, #0x18
	bl ov85_021E9C84
_02096DE0:
	pop {r3, r4, r5, pc}
	.balign 4, 0
	thumb_func_end sub_02096DBC

	thumb_func_start sub_02096DE4
sub_02096DE4: ; 0x02096DE4
	ldr r0, [r3]
	ldr r3, _02096DF0 ; =ov85_021E9C84
	ldr r0, [r0, #0x38]
	mov r1, #2
	mov r2, #0
	bx r3
	.balign 4, 0
_02096DF0: .word ov85_021E9C84
	thumb_func_end sub_02096DE4

	thumb_func_start sub_02096DF4
sub_02096DF4: ; 0x02096DF4
	push {r3, r4, r5, r6, lr}
	sub sp, #4
	add r6, r0, #0
	add r5, r2, #0
	add r4, r3, #0
	cmp r6, #0
	beq _02096E7E
	bl sub_0203769C
	cmp r0, #0
	bne _02096ECC
	ldrb r1, [r5]
	add r0, sp, #0
	strb r1, [r0]
	ldrb r1, [r5, #1]
	strb r1, [r0, #1]
	ldrb r1, [r5, #2]
	strb r1, [r0, #2]
	ldrb r1, [r5, #3]
	strb r1, [r0, #3]
	strb r6, [r0]
	ldr r1, [r4, #0x2c]
	strb r1, [r0, #1]
	ldrb r0, [r5, #2]
	cmp r0, #0
	beq _02096E2C
	cmp r0, #1
	b _02096E6E
_02096E2C:
	bl sub_02037454
	ldr r1, [r4, #0x2c]
	cmp r1, r0
	bne _02096E4E
	bl sub_02096FFC
	ldr r1, [r4, #0x2c]
	cmp r1, r0
	bne _02096E4E
	bl sub_02033250
	bl sub_020E3714
	ldr r1, [r4, #0x2c]
	cmp r1, r0
	beq _02096E56
_02096E4E:
	mov r1, #0
	add r0, sp, #0
	strb r1, [r0, #3]
	b _02096E6E
_02096E56:
	mov r1, #1
	add r0, r1, #0
	ldr r2, [r4, #0x30]
	lsl r0, r6
	orr r0, r2
	str r0, [r4, #0x30]
	add r0, sp, #0
	strb r1, [r0, #3]
	bl sub_02037454
	bl sub_02038C1C
_02096E6E:
	add r0, r4, #0
	mov r1, #2
	add r2, sp, #0
	mov r3, #4
	bl sub_02096D4C
	add sp, #4
	pop {r3, r4, r5, r6, pc}
_02096E7E:
	ldrb r0, [r5, #2]
	cmp r0, #0
	beq _02096E8C
	cmp r0, #1
	beq _02096EC0
	add sp, #4
	pop {r3, r4, r5, r6, pc}
_02096E8C:
	ldrb r6, [r5]
	bl sub_0203769C
	cmp r6, r0
	bne _02096ECC
	ldrb r0, [r5, #3]
	cmp r0, #0
	bne _02096EAC
	ldr r0, [r4]
	mov r1, #8
	ldr r0, [r0, #0x38]
	add r2, r6, #0
	bl ov85_021E9C84
	add sp, #4
	pop {r3, r4, r5, r6, pc}
_02096EAC:
	ldrb r0, [r5, #1]
	mov r1, #7
	strh r0, [r4, #0x38]
	ldr r0, [r4]
	ldrb r2, [r5]
	ldr r0, [r0, #0x38]
	bl ov85_021E9C84
	add sp, #4
	pop {r3, r4, r5, r6, pc}
_02096EC0:
	ldr r0, [r4]
	ldrb r2, [r5]
	ldr r0, [r0, #0x38]
	mov r1, #0x13
	bl ov85_021E9C84
_02096ECC:
	add sp, #4
	pop {r3, r4, r5, r6, pc}
	thumb_func_end sub_02096DF4

	thumb_func_start sub_02096ED0
sub_02096ED0: ; 0x02096ED0
	push {r4, lr}
	add r4, r3, #0
	ldr r0, [r4]
	ldrb r2, [r2]
	ldr r0, [r0, #0x38]
	mov r1, #1
	bl ov85_021E9D9C
	bl sub_0203769C
	cmp r0, #0
	bne _02096EEC
	mov r0, #0
	str r0, [r4, #0x34]
_02096EEC:
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_02096ED0

	thumb_func_start sub_02096EF0
sub_02096EF0: ; 0x02096EF0
	push {r4, lr}
	add r4, r3, #0
	bl sub_0203769C
	cmp r0, #0
	beq _02096F08
	ldr r0, [r4]
	mov r1, #0xd
	ldr r0, [r0, #0x38]
	mov r2, #0
	bl ov85_021E9C84
_02096F08:
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_02096EF0

	thumb_func_start sub_02096F0C
sub_02096F0C: ; 0x02096F0C
	push {r3, r4, r5, lr}
	add r5, r0, #0
	add r4, r3, #0
	bl sub_0203769C
	cmp r0, #0
	bne _02096F2A
	add r0, sp, #0
	strb r5, [r0]
	add r0, r4, #0
	mov r1, #0
	add r2, sp, #0
	mov r3, #1
	bl sub_02096D4C
_02096F2A:
	pop {r3, r4, r5, pc}
	thumb_func_end sub_02096F0C

	thumb_func_start sub_02096F2C
sub_02096F2C: ; 0x02096F2C
	add r0, r3, #0
	add r0, #0x40
	ldrh r1, [r0]
	ldrh r0, [r2]
	add r3, #0x40
	orr r0, r1
	strh r0, [r3]
	bx lr
	thumb_func_end sub_02096F2C

	thumb_func_start sub_02096F3C
sub_02096F3C: ; 0x02096F3C
	add r1, r3, #0
	add r1, #0x42
	ldrh r2, [r1]
	mov r1, #1
	lsl r1, r0
	add r0, r2, #0
	orr r0, r1
	add r3, #0x42
	strh r0, [r3]
	bx lr
	thumb_func_end sub_02096F3C

	thumb_func_start sub_02096F50
sub_02096F50: ; 0x02096F50
	ldr r0, [r3]
	ldr r3, _02096F5C ; =ov85_021E8680
	ldr r0, [r0, #0x34]
	add r1, r2, #0
	bx r3
	nop
_02096F5C: .word ov85_021E8680
	thumb_func_end sub_02096F50

	thumb_func_start sub_02096F60
sub_02096F60: ; 0x02096F60
	ldr r0, [r3]
	ldr r3, _02096F6C ; =ov85_021E86AC
	ldr r0, [r0, #0x34]
	ldr r1, [r2]
	bx r3
	nop
_02096F6C: .word ov85_021E86AC
	thumb_func_end sub_02096F60

	thumb_func_start sub_02096F70
sub_02096F70: ; 0x02096F70
	ldr r0, [r3]
	ldr r3, _02096F7C ; =ov85_021E85C4
	ldr r0, [r0, #0x34]
	ldrb r1, [r2]
	bx r3
	nop
_02096F7C: .word ov85_021E85C4
	thumb_func_end sub_02096F70

	thumb_func_start sub_02096F80
sub_02096F80: ; 0x02096F80
	push {r3, r4, r5, lr}
	add r4, r2, #0
	add r5, r3, #0
	bl sub_0203769C
	cmp r0, #0
	beq _02096F98
	ldr r0, [r5]
	add r1, r4, #0
	ldr r0, [r0, #0x34]
	bl ov85_021E85CC
_02096F98:
	pop {r3, r4, r5, pc}
	.balign 4, 0
	thumb_func_end sub_02096F80

	thumb_func_start sub_02096F9C
sub_02096F9C: ; 0x02096F9C
	add r1, r0, #0
	ldr r0, [r3]
	ldr r3, _02096FA8 ; =ov85_021E8740
	ldr r0, [r0, #0x34]
	ldr r2, [r2]
	bx r3
	.balign 4, 0
_02096FA8: .word ov85_021E8740
	thumb_func_end sub_02096F9C

	thumb_func_start sub_02096FAC
sub_02096FAC: ; 0x02096FAC
	ldr r0, [r3]
	ldr r3, _02096FB8 ; =ov85_021E8748
	ldr r0, [r0, #0x34]
	add r1, r2, #0
	bx r3
	nop
_02096FB8: .word ov85_021E8748
	thumb_func_end sub_02096FAC

	thumb_func_start sub_02096FBC
sub_02096FBC: ; 0x02096FBC
	add r1, r3, #0
	add r1, #0x48
	ldrh r2, [r1]
	mov r1, #1
	lsl r1, r0
	add r0, r2, #0
	orr r0, r1
	add r3, #0x48
	strh r0, [r3]
	bx lr
	thumb_func_end sub_02096FBC

	thumb_func_start sub_02096FD0
sub_02096FD0: ; 0x02096FD0
	add r1, r3, #0
	add r1, #0x4a
	ldrh r2, [r1]
	mov r1, #1
	lsl r1, r0
	add r0, r2, #0
	orr r0, r1
	add r3, #0x4a
	strh r0, [r3]
	bx lr
	thumb_func_end sub_02096FD0

	thumb_func_start sub_02096FE4
sub_02096FE4: ; 0x02096FE4
	mov r0, #0x18
	bx lr
	thumb_func_end sub_02096FE4

	thumb_func_start sub_02096FE8
sub_02096FE8: ; 0x02096FE8
	mov r0, #0x59
	lsl r0, r0, #4
	bx lr
	.balign 4, 0
	thumb_func_end sub_02096FE8

	thumb_func_start sub_02096FF0
sub_02096FF0: ; 0x02096FF0
	ldr r2, [r1, #0x4c]
	mov r1, #0x59
	lsl r1, r1, #4
	mul r1, r0
	add r0, r2, r1
	bx lr
	thumb_func_end sub_02096FF0

	thumb_func_start sub_02096FFC
sub_02096FFC: ; 0x02096FFC
	push {r3, r4, r5, lr}
	mov r5, #0
	add r4, r5, #0
_02097002:
	add r0, r4, #0
	bl sub_02034818
	cmp r0, #0
	beq _0209700E
	add r5, r5, #1
_0209700E:
	add r4, r4, #1
	cmp r4, #5
	blt _02097002
	add r0, r5, #0
	pop {r3, r4, r5, pc}
	thumb_func_end sub_02096FFC

	thumb_func_start sub_02097018
sub_02097018: ; 0x02097018
	ldr r2, [r0, #0x50]
	mov r0, #0x59
	lsl r0, r0, #4
	mul r0, r1
	add r0, r2, r0
	bx lr
	thumb_func_end sub_02097018

	thumb_func_start sub_02097024
sub_02097024: ; 0x02097024
	push {r4, r5, r6, lr}
	add r6, r1, #0
	add r5, r0, #0
	add r0, r6, #0
	mov r1, #0x3c
	bl AllocFromHeap
	add r4, r0, #0
	mov r1, #0
	mov r2, #0x3c
	bl memset
	add r2, r4, #0
	ldmia r5!, {r0, r1}
	add r2, #0x14
	stmia r2!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r2!, {r0, r1}
	ldmia r5!, {r0, r1}
	stmia r2!, {r0, r1}
	ldr r0, [r5]
	add r1, r6, #0
	str r0, [r2]
	add r0, r4, #0
	bl sub_02096C88
	str r0, [r4, #0x30]
	add r0, r4, #0
	pop {r4, r5, r6, pc}
	.balign 4, 0
	thumb_func_end sub_02097024

	thumb_func_start sub_02097060
sub_02097060: ; 0x02097060
	push {r4, lr}
	add r4, r0, #0
	ldr r0, [r4, #0x30]
	bl sub_02096CF4
	ldr r0, [r4, #0x30]
	bl sub_02096CC8
	add r0, r4, #0
	bl FreeToHeap
	pop {r4, pc}
	thumb_func_end sub_02097060

	thumb_func_start sub_02097078
sub_02097078: ; 0x02097078
	ldr r0, [r0, #0x10]
	bx lr
	thumb_func_end sub_02097078

	thumb_func_start sub_0209707C
sub_0209707C: ; 0x0209707C
	push {r3, r4, r5, lr}
	add r5, r0, #0
	mov r0, #0xb
	mov r1, #0x34
	bl AllocFromHeap
	add r4, r0, #0
	mov r1, #0
	mov r2, #0x34
	bl memset
	str r5, [r4, #0x28]
	ldr r0, [r5, #0xc]
	str r0, [r4, #0x10]
	add r0, r5, #0
	add r0, #0x84
	ldr r0, [r0]
	str r0, [r4, #0x14]
	ldr r0, [r5, #0xc]
	bl Sav2_PlayerData_GetOptionsAddr
	str r0, [r4, #0x18]
	ldr r0, [r5, #0xc]
	bl Sav2_GameStats_get
	str r0, [r4, #0x1c]
	ldr r0, [r4, #0x18]
	bl sub_0202ADCC
	str r0, [r4, #0xc]
	str r5, [r4, #0x20]
	add r0, r4, #0
	pop {r3, r4, r5, pc}
	.balign 4, 0
	thumb_func_end sub_0209707C

	thumb_func_start sub_020970C0
sub_020970C0: ; 0x020970C0
	push {r4, lr}
	add r4, r0, #0
	ldr r1, [r4]
	lsl r2, r1, #2
	ldr r1, _020970E0 ; =0x02108EC0
	ldr r1, [r1, r2]
	blx r1
	cmp r0, #1
	bne _020970DC
	add r0, r4, #0
	bl FreeToHeap
	mov r0, #1
	pop {r4, pc}
_020970DC:
	mov r0, #0
	pop {r4, pc}
	.balign 4, 0
_020970E0: .word 0x02108EC0
	thumb_func_end sub_020970C0

	thumb_func_start sub_020970E4
sub_020970E4: ; 0x020970E4
	push {r4, lr}
	add r4, r0, #0
	add r0, #8
	mov r1, #0xb
	bl sub_02097024
	str r0, [r4, #0x24]
	mov r0, #1
	str r0, [r4]
	ldr r0, [r4, #0x28]
	ldr r1, _02097104 ; =0x02108EA0
	ldr r2, [r4, #0x24]
	bl ScrUnk80_AddOvyMan
	mov r0, #0
	pop {r4, pc}
	.balign 4, 0
_02097104: .word 0x02108EA0
	thumb_func_end sub_020970E4

	thumb_func_start sub_02097108
sub_02097108: ; 0x02097108
	push {r4, lr}
	add r4, r0, #0
	ldr r0, [r4, #0x28]
	bl sub_020505A0
	cmp r0, #0
	bne _02097142
	ldr r0, [r4, #0x24]
	bl sub_02097078
	cmp r0, #0
	bne _02097126
	mov r0, #5
	str r0, [r4]
	b _02097142
_02097126:
	mov r0, #1
	add r1, r0, #0
	bl sub_020398D4
	ldr r0, [r4, #0x28]
	ldr r1, [r4, #4]
	bl sub_0203E740
	str r0, [r4, #0x2c]
	ldr r0, [r4, #0x24]
	mov r1, #1
	str r1, [r0]
	mov r0, #2
	str r0, [r4]
_02097142:
	mov r0, #0
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_02097108

	thumb_func_start sub_02097148
sub_02097148: ; 0x02097148
	push {r3, r4, r5, lr}
	add r5, r0, #0
	ldr r0, [r5, #0x28]
	bl sub_020505A0
	cmp r0, #0
	bne _020971A4
	ldr r0, [r5, #0x2c]
	add r1, r0, #0
	add r1, #0x26
	ldrb r4, [r1]
	bl FreeToHeap
	ldr r0, [r5, #0x2c]
	add r0, #0x27
	ldrb r0, [r0]
	cmp r0, #1
	bne _0209718C
	ldr r0, [r5, #0x28]
	mov r1, #3
	mov r2, #0
	bl sub_0203E76C
	str r0, [r5, #0x30]
	str r4, [r5, #4]
	ldr r0, [r5, #0x30]
	strb r4, [r0, #0x14]
	ldr r0, [r5, #0x28]
	ldr r1, [r5, #0x30]
	bl sub_0203E4EC
	mov r0, #3
	str r0, [r5]
	b _020971A4
_0209718C:
	ldr r0, [r5, #0x24]
	ldr r1, _020971A8 ; =0x02108EB0
	str r4, [r0, #4]
	ldr r0, [r5, #0x28]
	ldr r2, [r5, #0x24]
	bl ScrUnk80_AddOvyMan
	ldr r0, [r5, #0x24]
	mov r1, #3
	str r1, [r0]
	mov r0, #4
	str r0, [r5]
_020971A4:
	mov r0, #0
	pop {r3, r4, r5, pc}
	.balign 4, 0
_020971A8: .word 0x02108EB0
	thumb_func_end sub_02097148

	thumb_func_start sub_020971AC
sub_020971AC: ; 0x020971AC
	push {r4, lr}
	add r4, r0, #0
	ldr r0, [r4, #0x28]
	bl sub_020505A0
	cmp r0, #0
	bne _020971CE
	ldr r0, [r4, #0x30]
	bl FreeToHeap
	ldr r0, [r4, #0x28]
	ldr r1, [r4, #4]
	bl sub_0203E740
	str r0, [r4, #0x2c]
	mov r0, #2
	str r0, [r4]
_020971CE:
	mov r0, #0
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_020971AC

	thumb_func_start sub_020971D4
sub_020971D4: ; 0x020971D4
	push {r4, lr}
	add r4, r0, #0
	ldr r0, [r4, #0x28]
	bl sub_020505A0
	cmp r0, #0
	bne _020971E6
	mov r0, #5
	str r0, [r4]
_020971E6:
	mov r0, #0
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_020971D4

	thumb_func_start sub_020971EC
sub_020971EC: ; 0x020971EC
	push {r3, lr}
	ldr r0, [r0, #0x24]
	bl sub_02097060
	mov r0, #1
	pop {r3, pc}
	thumb_func_end sub_020971EC

	thumb_func_start sub_020971F8
sub_020971F8: ; 0x020971F8
	push {r3, r4, r5, lr}
	add r5, r0, #0
	bl sub_0203AC88
	add r4, r0, #0
	bl sub_0203AC90
	add r1, r0, #0
	add r0, r4, #0
	add r2, r5, #0
	bl sub_0203410C
	pop {r3, r4, r5, pc}
	.balign 4, 0
	thumb_func_end sub_020971F8

	thumb_func_start sub_02097214
sub_02097214: ; 0x02097214
	push {r4, lr}
	bl sub_0203AC88
	add r4, r0, #0
	bl sub_0203AC90
	add r1, r0, #0
	add r0, r4, #0
	mov r2, #0
	bl sub_0203410C
	pop {r4, pc}
	thumb_func_end sub_02097214

	thumb_func_start sub_0209722C
sub_0209722C: ; 0x0209722C
	mov r0, #0
	bx lr
	thumb_func_end sub_0209722C

	thumb_func_start sub_02097230
sub_02097230: ; 0x02097230
	mov r0, #8
	bx lr
	thumb_func_end sub_02097230

	thumb_func_start sub_02097234
sub_02097234: ; 0x02097234
	mov r0, #4
	bx lr
	thumb_func_end sub_02097234

	thumb_func_start sub_02097238
sub_02097238: ; 0x02097238
	push {r3, lr}
	cmp r3, #0
	beq _02097246
	add r0, r3, #0
	add r1, r2, #0
	bl ov44_02233100
_02097246:
	pop {r3, pc}
	thumb_func_end sub_02097238

	thumb_func_start sub_02097248
sub_02097248: ; 0x02097248
	push {r3, lr}
	cmp r3, #0
	beq _02097254
	add r0, r3, #0
	bl ov44_02233160
_02097254:
	pop {r3, pc}
	.balign 4, 0
	thumb_func_end sub_02097248

	thumb_func_start sub_02097258
sub_02097258: ; 0x02097258
	push {r3, lr}
	cmp r3, #0
	beq _02097266
	add r0, r3, #0
	add r1, r2, #0
	bl ov44_0223317C
_02097266:
	pop {r3, pc}
	thumb_func_end sub_02097258

	thumb_func_start sub_02097268
sub_02097268: ; 0x02097268
	push {r3, r4, r5, lr}
	add r5, r0, #0
	add r4, r2, #0
	cmp r1, #0x18
	blt _02097278
	bl GF_AssertFail
	mov r1, #0
_02097278:
	lsl r0, r1, #1
	add r2, r1, r0
	ldr r0, _020972A0 ; =0x02108EEE
	add r1, r0, r2
	ldrb r0, [r0, r2]
	strb r0, [r5]
	ldrb r0, [r1, #1]
	strb r0, [r5, #1]
	ldrb r0, [r1, #2]
	strb r0, [r5, #2]
	ldrb r0, [r5, #1]
	lsl r0, r0, #0x18
	lsr r0, r0, #0x1f
	beq _0209729E
	cmp r4, #1
	bne _0209729E
	ldrb r0, [r5]
	add r0, r0, #1
	strb r0, [r5]
_0209729E:
	pop {r3, r4, r5, pc}
	.balign 4, 0
_020972A0: .word 0x02108EEE
	thumb_func_end sub_02097268

	thumb_func_start sub_020972A4
sub_020972A4: ; 0x020972A4
	ldr r3, [r0]
	ldr r2, [r1]
	cmp r3, r2
	bne _020972BC
	ldrh r3, [r0, #4]
	ldrh r2, [r1, #4]
	cmp r3, r2
	bne _020972BC
	ldrh r2, [r0, #6]
	ldrh r0, [r1, #6]
	cmp r2, r0
	beq _020972C0
_020972BC:
	mov r0, #0
	bx lr
_020972C0:
	mov r0, #1
	bx lr
	thumb_func_end sub_020972A4

	thumb_func_start sub_020972C4
sub_020972C4: ; 0x020972C4
	push {r4, r5, r6, lr}
	add r5, r0, #0
	add r4, r1, #0
	mov r6, #0
_020972CC:
	add r0, r5, #0
	add r1, r4, #0
	bl sub_020972A4
	cmp r0, #0
	bne _020972DC
	mov r0, #0
	pop {r4, r5, r6, pc}
_020972DC:
	add r6, r6, #1
	add r4, #8
	add r5, #8
	cmp r6, #0xa
	blt _020972CC
	mov r0, #1
	pop {r4, r5, r6, pc}
	.balign 4, 0
	thumb_func_end sub_020972C4

	thumb_func_start sub_020972EC
sub_020972EC: ; 0x020972EC
	push {r3, r4}
	mov r4, #0
	cmp r2, #0
	ble _02097306
_020972F4:
	ldrb r3, [r1, r4]
	cmp r0, r3
	bne _02097300
	mov r0, #1
	pop {r3, r4}
	bx lr
_02097300:
	add r4, r4, #1
	cmp r4, r2
	blt _020972F4
_02097306:
	mov r0, #0
	pop {r3, r4}
	bx lr
	thumb_func_end sub_020972EC

	thumb_func_start sub_0209730C
sub_0209730C: ; 0x0209730C
	push {r3, r4, r5, r6, r7, lr}
	sub sp, #0xb0
	add r4, r0, #0
	str r1, [sp, #4]
	bl sub_0202ED88
	str r0, [sp, #0x2c]
	add r0, r4, #0
	bl sub_0202F57C
	str r0, [sp, #0x28]
	mov r1, #0
	bl sub_0202F630
	str r0, [sp, #0x24]
	ldr r0, [sp, #0x28]
	bl sub_0202F720
	cmp r0, #0
	beq _0209733A
	ldr r0, [sp, #4]
	cmp r0, #0
	bgt _0209733C
_0209733A:
	b _020974BC
_0209733C:
	add r0, r4, #0
	bl SavArray_Flags_get
	bl sub_02066860
	cmp r0, #0
	beq _02097364
	ldr r0, [sp, #0x28]
	bl sub_0202F6AC
	add r2, r0, #0
	ldr r1, [sp, #4]
	ldr r0, [sp, #0x28]
	add r1, r2, r1
	lsl r1, r1, #0x18
	lsr r1, r1, #0x18
	bl sub_0202F6A0
	add sp, #0xb0
	pop {r3, r4, r5, r6, r7, pc}
_02097364:
	mov r0, #0
	str r0, [sp, #0x20]
	ldr r1, [sp, #0x20]
	add r0, sp, #0x30
	mov r2, #6
	bl MIi_CpuFill8
	add r0, sp, #0x38
	mov r1, #0
	mov r2, #0x78
	bl MIi_CpuFill8
	add r0, sp, #0x38
	mov r6, #0
	str r0, [sp, #0xc]
_02097382:
	ldr r0, _020974C0 ; =0x0000FFFF
	ldr r5, [sp, #0xc]
	asr r0, r6
	lsl r0, r0, #0x1f
	lsr r0, r0, #0x1d
	mov r4, #0
	add r7, r0, #1
_02097390:
	mov r0, #0xb
	str r0, [sp]
	ldr r0, [sp, #0x24]
	add r1, r6, #0
	add r2, r4, #0
	mov r3, #0
	bl sub_020974C4
	add r4, r4, #1
	stmia r5!, {r0}
	cmp r4, r7
	blt _02097390
	ldr r0, [sp, #0xc]
	add r6, r6, #1
	add r0, #0x14
	str r0, [sp, #0xc]
	cmp r6, #6
	blt _02097382
	ldr r0, [sp, #0x28]
	ldr r1, [sp, #4]
	bl sub_0202F6B8
	mov r0, #0
	str r0, [sp, #8]
	ldr r0, [sp, #0x24]
	str r0, [sp, #0x18]
	add r0, sp, #0x38
	str r0, [sp, #0x14]
_020973C8:
	ldr r0, [sp, #0x18]
	ldr r2, [sp, #0x20]
	ldrb r7, [r0]
	lsl r2, r2, #0x18
	add r1, sp, #0x30
	add r0, r7, #0
	lsr r2, r2, #0x18
	bl sub_020972EC
	cmp r0, #0
	bne _02097442
	ldr r1, _020974C0 ; =0x0000FFFF
	ldr r0, [sp, #8]
	ldr r4, [sp, #0x14]
	asr r1, r0
	lsl r0, r1, #0x1f
	lsr r0, r0, #0x1d
	add r0, r0, #1
	mov r5, #0
	str r0, [sp, #0x10]
_020973F0:
	mov r0, #0xb
	str r0, [sp]
	ldr r0, [sp, #0x24]
	ldr r1, [sp, #8]
	add r2, r5, #0
	mov r3, #0
	bl sub_020974C4
	add r6, r0, #0
	ldr r0, [r4]
	add r1, r6, #0
	bl sub_020972C4
	cmp r0, #0
	beq _02097416
	add r0, r6, #0
	bl FreeToHeap
	b _02097438
_02097416:
	ldr r2, [sp, #0x20]
	add r0, r7, #0
	lsl r2, r2, #0x18
	add r1, sp, #0x30
	lsr r2, r2, #0x18
	bl sub_020972EC
	cmp r0, #0
	bne _02097432
	ldr r0, [sp, #0x20]
	add r1, sp, #0x30
	strb r7, [r1, r0]
	add r0, r0, #1
	str r0, [sp, #0x20]
_02097432:
	add r0, r6, #0
	bl FreeToHeap
_02097438:
	ldr r0, [sp, #0x10]
	add r5, r5, #1
	add r4, r4, #4
	cmp r5, r0
	blt _020973F0
_02097442:
	ldr r0, [sp, #0x18]
	add r0, #0x7a
	str r0, [sp, #0x18]
	ldr r0, [sp, #0x14]
	add r0, #0x14
	str r0, [sp, #0x14]
	ldr r0, [sp, #8]
	add r0, r0, #1
	str r0, [sp, #8]
	cmp r0, #6
	blt _020973C8
	add r0, sp, #0x38
	mov r7, #0
	str r0, [sp, #0x1c]
_0209745E:
	ldr r0, _020974C0 ; =0x0000FFFF
	ldr r4, [sp, #0x1c]
	asr r0, r7
	lsl r0, r0, #0x1f
	lsr r0, r0, #0x1d
	mov r5, #0
	add r6, r0, #1
_0209746C:
	ldr r0, [r4]
	cmp r0, #0
	beq _02097476
	bl FreeToHeap
_02097476:
	add r5, r5, #1
	add r4, r4, #4
	cmp r5, r6
	blt _0209746C
	ldr r0, [sp, #0x1c]
	add r7, r7, #1
	add r0, #0x14
	str r0, [sp, #0x1c]
	cmp r7, #6
	blt _0209745E
	ldr r0, [sp, #0x20]
	cmp r0, #0
	bne _020974A6
	ldr r0, [sp, #0x2c]
	mov r1, #6
	bl sub_0202F050
	mov r1, #0
	ldr r0, [sp, #0x2c]
	add r2, r1, #0
	bl sub_0202F300
	add sp, #0xb0
	pop {r3, r4, r5, r6, r7, pc}
_020974A6:
	ldr r0, [sp, #0x2c]
	mov r1, #6
	bl sub_0202F01C
	ldr r2, [sp, #0x20]
	ldr r0, [sp, #0x2c]
	lsl r2, r2, #0x18
	add r1, sp, #0x30
	lsr r2, r2, #0x18
	bl sub_0202F300
_020974BC:
	add sp, #0xb0
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
_020974C0: .word 0x0000FFFF
	thumb_func_end sub_0209730C

	thumb_func_start sub_020974C4
sub_020974C4: ; 0x020974C4
	push {r4, r5, r6, r7, lr}
	sub sp, #0x34
	str r1, [sp, #8]
	str r0, [sp, #4]
	ldr r0, [sp, #8]
	mov r1, #0x7a
	add r7, r0, #0
	ldr r0, [sp, #0x48]
	mul r7, r1
	mov r1, #0x50
	add r4, r2, #0
	str r3, [sp, #0xc]
	str r0, [sp, #0x14]
	bl AllocFromHeapAtEnd
	str r0, [sp, #0x20]
	mov r5, #0
	add r6, r0, #0
	mov r2, #0x81
	mov r3, #0x13
	mov r1, #5
_020974EE:
	cmp r4, #0
	bne _020974F6
	str r3, [r6]
	b _020974F8
_020974F6:
	str r2, [r6]
_020974F8:
	strh r1, [r6, #6]
	ldrh r0, [r6, #6]
	add r5, r5, #1
	strh r0, [r6, #4]
	add r6, #8
	cmp r5, #0xa
	blt _020974EE
	mov r0, #1
	str r0, [sp]
	ldr r1, [sp, #4]
	ldr r3, [sp, #0x14]
	ldrb r1, [r1, r7]
	mov r0, #0xe8
	mov r2, #0
	bl GfGfxLoader_LoadFromNarc
	add r5, r0, #0
	bne _02097522
	ldr r0, [sp, #0x20]
	add sp, #0x34
	pop {r4, r5, r6, r7, pc}
_02097522:
	ldr r0, [sp, #0x14]
	mov r1, #0x64
	bl AllocFromHeapAtEnd
	str r0, [sp, #0x1c]
	ldr r1, [sp, #0x1c]
	mov r0, #8
	mov r2, #0
_02097532:
	add r3, r5, r0
	add r0, #0x78
	str r3, [r1]
	add r3, r5, r0
	str r3, [r1, #4]
	ldrb r3, [r5, r2]
	add r2, r2, #1
	lsl r6, r3, #2
	strb r3, [r1, #0x10]
	lsl r3, r6, #1
	add r3, r6, r3
	add r0, r0, r3
	str r6, [r1, #0xc]
	add r3, r5, r0
	str r3, [r1, #8]
	ldrb r3, [r1, #0x10]
	add r1, #0x14
	lsl r3, r3, #2
	add r0, r0, r3
	cmp r2, #5
	blt _02097532
	ldr r0, [sp, #0x1c]
	add r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0
	bne _0209757C
	cmp r4, #0
	ble _0209757C
	ldr r0, [sp, #0x1c]
	bl FreeToHeap
	add r0, r5, #0
	bl FreeToHeap
	ldr r0, [sp, #0x20]
	add sp, #0x34
	pop {r4, r5, r6, r7, pc}
_0209757C:
	ldr r0, [sp, #0xc]
	mov r2, #0x14
	add r7, r0, #0
	mov r1, #0xa
	mul r2, r4
	ldr r3, [sp, #0x1c]
	mul r7, r1
	ldr r0, [sp, #0x20]
	mov r1, #0
	str r2, [sp, #0x10]
	add r4, r3, r2
_02097592:
	add r2, r7, r1
	ldr r3, [r4]
	lsl r2, r2, #2
	add r6, r3, r2
	ldrh r2, [r3, r2]
	add r1, r1, #1
	str r2, [r0]
	ldrh r2, [r6, #2]
	strh r2, [r0, #6]
	strh r2, [r0, #4]
	add r0, #8
	cmp r1, #0xa
	blt _02097592
	mov r0, #0
	str r0, [sp, #0x18]
	ldr r0, [sp, #4]
	ldr r1, [sp, #8]
	add r2, sp, #0x2c
	bl sub_02097694
	ldr r1, [sp, #0x1c]
	ldr r0, [sp, #0x10]
	mov r2, #0
	add r0, r1, r0
	ldrb r0, [r0, #0x10]
	cmp r0, #0
	ble _0209763C
	add r1, r2, #0
_020975CA:
	ldr r3, [r4, #8]
	ldrb r6, [r3, r1]
	add r0, r3, r1
	add r3, sp, #0x2c
	add r3, r3, r6
	sub r3, r3, #1
	ldrb r6, [r3]
	ldrb r3, [r0, #1]
	cmp r6, r3
	blo _02097632
	ldrb r6, [r0, #2]
	cmp r6, #0
	beq _020975F2
	add r3, sp, #0x2c
	add r3, r3, r6
	sub r3, r3, #1
	ldrb r3, [r3]
	ldrb r0, [r0, #3]
	cmp r3, r0
	blo _02097632
_020975F2:
	ldrb r3, [r4, #0x10]
	ldr r0, [sp, #0xc]
	mul r3, r0
	add r0, r2, r3
	lsl r0, r0, #2
	str r0, [sp, #0x28]
	ldr r0, [sp, #0x18]
	ldr r3, [sp, #0x20]
	lsl r0, r0, #3
	mov ip, r0
	add r7, r3, r0
	ldr r3, [r4, #4]
	ldr r0, [sp, #0x28]
	mov r6, ip
	ldrh r0, [r3, r0]
	str r0, [sp, #0x24]
	ldr r0, [sp, #0x20]
	ldr r3, [sp, #0x24]
	str r3, [r0, r6]
	ldr r3, [r4, #4]
	ldr r0, [sp, #0x28]
	add r0, r3, r0
	ldrh r0, [r0, #2]
	strh r0, [r7, #6]
	strh r0, [r7, #4]
	ldr r0, [sp, #0x18]
	add r0, r0, #1
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	str r0, [sp, #0x18]
	cmp r0, #9
	bhi _0209763C
_02097632:
	ldrb r0, [r4, #0x10]
	add r2, r2, #1
	add r1, r1, #4
	cmp r2, r0
	blt _020975CA
_0209763C:
	ldr r0, [sp, #0x1c]
	bl FreeToHeap
	add r0, r5, #0
	bl FreeToHeap
	ldr r0, [sp, #0x20]
	add sp, #0x34
	pop {r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_020974C4

	thumb_func_start sub_02097650
sub_02097650: ; 0x02097650
	push {r3, r4}
	cmp r1, #0
	bne _0209765C
	mov r0, #0
	pop {r3, r4}
	bx lr
_0209765C:
	sub r2, r1, #1
	lsl r1, r2, #2
	ldr r3, _02097690 ; =0x02108EDA
	add r1, r2, r1
	mov r4, #0
	add r2, r3, r1
_02097668:
	ldrb r1, [r2]
	cmp r0, r1
	bhs _02097678
	add r0, r4, #1
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	pop {r3, r4}
	bx lr
_02097678:
	add r4, r4, #1
	add r2, r2, #1
	cmp r4, #5
	blt _02097668
	cmp r0, #0x19
	bhs _0209768A
	mov r0, #6
	pop {r3, r4}
	bx lr
_0209768A:
	mov r0, #7
	pop {r3, r4}
	bx lr
	.balign 4, 0
_02097690: .word 0x02108EDA
	thumb_func_end sub_02097650

	thumb_func_start sub_02097694
sub_02097694: ; 0x02097694
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	add r6, r2, #0
	mov r2, #0x7a
	mul r2, r1
	add r1, r0, r2
	str r1, [sp]
	ldrb r1, [r0, r2]
	add r1, r0, r1
	mov r0, #0xb7
	lsl r0, r0, #2
	ldrb r0, [r1, r0]
	mov r1, #0xa
	bl _s32_div_f
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	str r0, [sp, #4]
	add r0, r6, #0
	mov r1, #0
	mov r2, #8
	bl MIi_CpuFill8
	ldr r0, [sp]
	mov r4, #0
	ldrb r0, [r0, #1]
	cmp r0, #0
	ble _0209771A
	ldr r5, [sp]
	add r7, sp, #8
_020976D0:
	ldrb r1, [r5, #2]
	add r0, sp, #8
	mov r2, #2
	bl sub_02097268
	ldrb r0, [r7, #2]
	cmp r0, #0
	beq _0209770E
	add r0, r6, r0
	add r0, r0, #4
	sub r0, r0, #1
	ldrb r1, [r0]
	add r1, r1, #1
	strb r1, [r0]
	ldrb r1, [r7, #2]
	ldr r0, [sp, #4]
	bl sub_02097650
	add r3, r0, #0
	ldrb r0, [r7, #2]
	add r0, r6, r0
	sub r0, r0, #1
	ldrb r1, [r0]
	add r2, r3, r1
	cmp r2, #0xff
	ble _0209770A
	mov r1, #0xff
	strb r1, [r0]
	b _0209770E
_0209770A:
	add r1, r1, r3
	strb r1, [r0]
_0209770E:
	ldr r0, [sp]
	add r4, r4, #1
	ldrb r0, [r0, #1]
	add r5, r5, #4
	cmp r4, r0
	blt _020976D0
_0209771A:
	add sp, #0xc
	pop {r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_02097694

	thumb_func_start sub_02097720
sub_02097720: ; 0x02097720
	push {r4, r5, r6, lr}
	add r6, r0, #0
	add r5, r1, #0
	bl sub_0205064C
	mov r0, #0xb
	mov r1, #0xc
	bl AllocFromHeapAtEnd
	mov r1, #0
	mov r2, #0xc
	add r4, r0, #0
	bl MIi_CpuFill8
	mov r0, #0
	str r0, [r4]
	ldr r1, _02097750 ; =sub_02097754
	add r0, r6, #0
	add r2, r4, #0
	str r5, [r4, #4]
	bl sub_02050530
	pop {r4, r5, r6, pc}
	nop
_02097750: .word sub_02097754
	thumb_func_end sub_02097720

	thumb_func_start sub_02097754
sub_02097754: ; 0x02097754
	push {r4, r5, r6, lr}
	add r5, r0, #0
	bl sub_0205064C
	add r6, r0, #0
	add r0, r5, #0
	bl sub_02050650
	add r4, r0, #0
	ldr r1, [r4]
	cmp r1, #3
	bhi _020977C6
	add r1, r1, r1
	add r1, pc
	ldrh r1, [r1, #6]
	lsl r1, r1, #0x10
	asr r1, r1, #0x10
	add pc, r1
_02097778: ; jump table
	.short _02097780 - _02097778 - 2 ; case 0
	.short _02097790 - _02097778 - 2 ; case 1
	.short _020977B0 - _02097778 - 2 ; case 2
	.short _020977BE - _02097778 - 2 ; case 3
_02097780:
	add r0, r6, #0
	bl sub_0203EB64
	str r0, [r4, #8]
	ldr r0, [r4]
	add r0, r0, #1
	str r0, [r4]
	b _020977C6
_02097790:
	add r0, r6, #0
	bl sub_020505A0
	cmp r0, #0
	bne _020977C6
	ldr r0, [r4, #8]
	ldrh r1, [r0, #0x1c]
	ldr r0, [r4, #4]
	strh r1, [r0]
	ldr r0, [r4, #8]
	bl FreeToHeap
	ldr r0, [r4]
	add r0, r0, #1
	str r0, [r4]
	b _020977C6
_020977B0:
	add r0, r5, #0
	bl sub_020552A4
	ldr r0, [r4]
	add r0, r0, #1
	str r0, [r4]
	b _020977C6
_020977BE:
	bl FreeToHeap
	mov r0, #1
	pop {r4, r5, r6, pc}
_020977C6:
	mov r0, #0
	pop {r4, r5, r6, pc}
	.balign 4, 0
	thumb_func_end sub_02097754

	thumb_func_start sub_020977CC
sub_020977CC: ; 0x020977CC
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	add r6, r1, #0
	mov r0, #0xb
	mov r1, #0x58
	add r7, r2, #0
	str r3, [sp]
	bl AllocFromHeapAtEnd
	add r4, r0, #0
	strb r6, [r4, #1]
	add r1, r4, #0
	ldr r0, [sp]
	strb r7, [r4, #2]
	str r0, [r4, #4]
	ldr r0, [sp, #0x18]
	add r1, #0x10
	str r0, [r4, #8]
	ldr r0, [sp, #0x1c]
	str r0, [r4, #0xc]
	mov r0, #0
	bl ov01_021EA6C4
	mov r0, #0
	strb r0, [r4]
	ldr r0, [r5, #0x10]
	ldr r1, _0209780C ; =sub_020978D0
	add r2, r4, #0
	bl sub_02050530
	pop {r3, r4, r5, r6, r7, pc}
	nop
_0209780C: .word sub_020978D0
	thumb_func_end sub_020977CC

	thumb_func_start sub_02097810
sub_02097810: ; 0x02097810
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	add r6, r1, #0
	mov r0, #0xb
	mov r1, #8
	add r7, r2, #0
	bl AllocFromHeapAtEnd
	add r4, r0, #0
	str r7, [r4, #4]
	add r0, r5, #0
	strb r6, [r4]
	bl sub_020555E0
	cmp r0, #4
	bhi _02097852
	add r0, r0, r0
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_0209783C: ; jump table
	.short _02097846 - _0209783C - 2 ; case 0
	.short _02097846 - _0209783C - 2 ; case 1
	.short _0209784C - _0209783C - 2 ; case 2
	.short _0209784C - _0209783C - 2 ; case 3
	.short _0209784C - _0209783C - 2 ; case 4
_02097846:
	mov r0, #0
	strb r0, [r4, #2]
	b _0209785A
_0209784C:
	mov r0, #1
	strb r0, [r4, #2]
	b _0209785A
_02097852:
	bl GF_AssertFail
	mov r0, #0
	strb r0, [r4, #2]
_0209785A:
	ldr r0, [r5, #0xc]
	bl Sav2_PlayerData_GetProfileAddr
	bl PlayerProfile_GetTrainerGender
	strb r0, [r4, #1]
	ldr r0, [r5, #0x10]
	ldr r1, _02097874 ; =sub_02097878
	add r2, r4, #0
	bl sub_02050530
	pop {r3, r4, r5, r6, r7, pc}
	nop
_02097874: .word sub_02097878
	thumb_func_end sub_02097810

	thumb_func_start sub_02097878
sub_02097878: ; 0x02097878
	push {r4, r5, r6, lr}
	add r5, r0, #0
	bl sub_0205064C
	add r4, r0, #0
	add r0, r5, #0
	bl sub_02050650
	add r6, r0, #0
	add r0, r5, #0
	bl sub_02050654
	add r5, r0, #0
	ldr r0, [r5]
	cmp r0, #0
	beq _020978A2
	cmp r0, #1
	beq _020978AC
	cmp r0, #2
	beq _020978BA
	b _020978C4
_020978A2:
	add r0, r4, #0
	add r1, r6, #0
	bl sub_0203FC68
	b _020978C4
_020978AC:
	add r0, r4, #0
	bl sub_020505A0
	cmp r0, #0
	beq _020978C4
	mov r0, #0
	pop {r4, r5, r6, pc}
_020978BA:
	add r0, r6, #0
	bl FreeToHeap
	mov r0, #1
	pop {r4, r5, r6, pc}
_020978C4:
	ldr r0, [r5]
	add r0, r0, #1
	str r0, [r5]
	mov r0, #0
	pop {r4, r5, r6, pc}
	.balign 4, 0
	thumb_func_end sub_02097878

	thumb_func_start sub_020978D0
sub_020978D0: ; 0x020978D0
	push {r3, r4, r5, r6, lr}
	sub sp, #0xc
	add r5, r0, #0
	bl sub_0205064C
	add r6, r0, #0
	add r0, r5, #0
	bl sub_02050650
	add r4, r0, #0
	ldrb r1, [r4]
	cmp r1, #5
	bhi _020979A2
	add r1, r1, r1
	add r1, pc
	ldrh r1, [r1, #6]
	lsl r1, r1, #0x10
	asr r1, r1, #0x10
	add pc, r1
_020978F6: ; jump table
	.short _02097902 - _020978F6 - 2 ; case 0
	.short _02097928 - _020978F6 - 2 ; case 1
	.short _02097954 - _020978F6 - 2 ; case 2
	.short _02097966 - _020978F6 - 2 ; case 3
	.short _02097982 - _020978F6 - 2 ; case 4
	.short _02097998 - _020978F6 - 2 ; case 5
_02097902:
	mov r0, #6
	str r0, [sp]
	mov r0, #1
	str r0, [sp, #4]
	mov r0, #0xb
	str r0, [sp, #8]
	mov r0, #0
	add r1, r0, #0
	add r2, r0, #0
	add r3, r0, #0
	bl sub_0200FA24
	mov r0, #0
	mov r1, #6
	bl sub_02005F50
	mov r0, #1
	strb r0, [r4]
	b _020979A2
_02097928:
	bl sub_0200FB5C
	cmp r0, #0
	beq _02097938
	bl sub_02005F88
	cmp r0, #0
	beq _0209793E
_02097938:
	add sp, #0xc
	mov r0, #0
	pop {r3, r4, r5, r6, pc}
_0209793E:
	bl sub_02004A90
	mov r1, #0
	bl sub_02005EB4
	add r0, r5, #0
	bl sub_0205525C
	mov r0, #2
	strb r0, [r4]
	b _020979A2
_02097954:
	ldrb r1, [r4, #1]
	add r2, r4, #0
	add r0, r6, #0
	add r2, #0x10
	bl sub_02097810
	mov r0, #3
	strb r0, [r4]
	b _020979A2
_02097966:
	ldr r0, [r4, #0xc]
	mov r2, #0
	str r0, [sp]
	ldrb r0, [r4, #2]
	mvn r2, r2
	str r0, [sp, #4]
	ldr r1, [r4, #4]
	ldr r3, [r4, #8]
	add r0, r5, #0
	bl sub_020537F0
	mov r0, #4
	strb r0, [r4]
	b _020979A2
_02097982:
	ldr r1, [r4, #4]
	add r0, r6, #0
	mov r2, #0
	bl sub_02055110
	add r0, r5, #0
	bl sub_02055408
	mov r0, #5
	strb r0, [r4]
	b _020979A2
_02097998:
	bl FreeToHeap
	add sp, #0xc
	mov r0, #1
	pop {r3, r4, r5, r6, pc}
_020979A2:
	mov r0, #0
	add sp, #0xc
	pop {r3, r4, r5, r6, pc}
	thumb_func_end sub_020978D0

	thumb_func_start sub_020979A8
sub_020979A8: ; 0x020979A8
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	add r6, r1, #0
	mov r0, #0xb
	mov r1, #0x58
	add r7, r2, #0
	str r3, [sp]
	bl AllocFromHeapAtEnd
	add r4, r0, #0
	strb r6, [r4, #1]
	add r1, r4, #0
	ldr r0, [sp]
	strb r7, [r4, #2]
	str r0, [r4, #4]
	ldr r0, [sp, #0x18]
	add r1, #0x10
	str r0, [r4, #8]
	ldr r0, [sp, #0x1c]
	str r0, [r4, #0xc]
	mov r0, #0
	bl ov01_021EA6C4
	mov r0, #0
	strb r0, [r4]
	ldr r0, [r5, #0x10]
	ldr r1, _020979E8 ; =sub_02097AA0
	add r2, r4, #0
	bl sub_02050530
	pop {r3, r4, r5, r6, r7, pc}
	nop
_020979E8: .word sub_02097AA0
	thumb_func_end sub_020979A8

	thumb_func_start sub_020979EC
sub_020979EC: ; 0x020979EC
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	add r6, r1, #0
	mov r0, #0xb
	mov r1, #8
	add r7, r2, #0
	bl AllocFromHeapAtEnd
	add r4, r0, #0
	str r7, [r4, #4]
	add r0, r5, #0
	strb r6, [r4]
	bl sub_020555E0
	cmp r0, #4
	bhi _02097A2E
	add r0, r0, r0
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_02097A18: ; jump table
	.short _02097A22 - _02097A18 - 2 ; case 0
	.short _02097A22 - _02097A18 - 2 ; case 1
	.short _02097A28 - _02097A18 - 2 ; case 2
	.short _02097A28 - _02097A18 - 2 ; case 3
	.short _02097A28 - _02097A18 - 2 ; case 4
_02097A22:
	mov r0, #0
	strb r0, [r4, #1]
	b _02097A36
_02097A28:
	mov r0, #1
	strb r0, [r4, #1]
	b _02097A36
_02097A2E:
	bl GF_AssertFail
	mov r0, #0
	strb r0, [r4, #1]
_02097A36:
	ldr r0, [r5, #0x10]
	ldr r1, _02097A44 ; =sub_02097A48
	add r2, r4, #0
	bl sub_02050530
	pop {r3, r4, r5, r6, r7, pc}
	nop
_02097A44: .word sub_02097A48
	thumb_func_end sub_020979EC

	thumb_func_start sub_02097A48
sub_02097A48: ; 0x02097A48
	push {r4, r5, r6, lr}
	add r5, r0, #0
	bl sub_0205064C
	add r4, r0, #0
	add r0, r5, #0
	bl sub_02050650
	add r6, r0, #0
	add r0, r5, #0
	bl sub_02050654
	add r5, r0, #0
	ldr r0, [r5]
	cmp r0, #0
	beq _02097A72
	cmp r0, #1
	beq _02097A7C
	cmp r0, #2
	beq _02097A8A
	b _02097A94
_02097A72:
	add r0, r4, #0
	add r1, r6, #0
	bl sub_0203FC90
	b _02097A94
_02097A7C:
	add r0, r4, #0
	bl sub_020505A0
	cmp r0, #0
	beq _02097A94
	mov r0, #0
	pop {r4, r5, r6, pc}
_02097A8A:
	add r0, r6, #0
	bl FreeToHeap
	mov r0, #1
	pop {r4, r5, r6, pc}
_02097A94:
	ldr r0, [r5]
	add r0, r0, #1
	str r0, [r5]
	mov r0, #0
	pop {r4, r5, r6, pc}
	.balign 4, 0
	thumb_func_end sub_02097A48

	thumb_func_start sub_02097AA0
sub_02097AA0: ; 0x02097AA0
	push {r3, r4, r5, r6, lr}
	sub sp, #0xc
	add r5, r0, #0
	bl sub_0205064C
	add r6, r0, #0
	add r0, r5, #0
	bl sub_02050650
	add r4, r0, #0
	ldrb r1, [r4]
	cmp r1, #5
	bhi _02097B72
	add r1, r1, r1
	add r1, pc
	ldrh r1, [r1, #6]
	lsl r1, r1, #0x10
	asr r1, r1, #0x10
	add pc, r1
_02097AC6: ; jump table
	.short _02097AD2 - _02097AC6 - 2 ; case 0
	.short _02097AF8 - _02097AC6 - 2 ; case 1
	.short _02097B24 - _02097AC6 - 2 ; case 2
	.short _02097B36 - _02097AC6 - 2 ; case 3
	.short _02097B52 - _02097AC6 - 2 ; case 4
	.short _02097B68 - _02097AC6 - 2 ; case 5
_02097AD2:
	mov r0, #6
	str r0, [sp]
	mov r0, #1
	str r0, [sp, #4]
	mov r0, #0xb
	str r0, [sp, #8]
	mov r0, #0
	add r1, r0, #0
	add r2, r0, #0
	add r3, r0, #0
	bl sub_0200FA24
	mov r0, #0
	mov r1, #6
	bl sub_02005F50
	mov r0, #1
	strb r0, [r4]
	b _02097B72
_02097AF8:
	bl sub_0200FB5C
	cmp r0, #0
	beq _02097B08
	bl sub_02005F88
	cmp r0, #0
	beq _02097B0E
_02097B08:
	add sp, #0xc
	mov r0, #0
	pop {r3, r4, r5, r6, pc}
_02097B0E:
	bl sub_02004A90
	mov r1, #0
	bl sub_02005EB4
	add r0, r5, #0
	bl sub_0205525C
	mov r0, #2
	strb r0, [r4]
	b _02097B72
_02097B24:
	ldrb r1, [r4, #1]
	add r2, r4, #0
	add r0, r6, #0
	add r2, #0x10
	bl sub_020979EC
	mov r0, #3
	strb r0, [r4]
	b _02097B72
_02097B36:
	ldr r0, [r4, #0xc]
	mov r2, #0
	str r0, [sp]
	ldrb r0, [r4, #2]
	mvn r2, r2
	str r0, [sp, #4]
	ldr r1, [r4, #4]
	ldr r3, [r4, #8]
	add r0, r5, #0
	bl sub_020537F0
	mov r0, #4
	strb r0, [r4]
	b _02097B72
_02097B52:
	ldr r1, [r4, #4]
	add r0, r6, #0
	mov r2, #0
	bl sub_02055110
	add r0, r5, #0
	bl sub_02055408
	mov r0, #5
	strb r0, [r4]
	b _02097B72
_02097B68:
	bl FreeToHeap
	add sp, #0xc
	mov r0, #1
	pop {r3, r4, r5, r6, pc}
_02097B72:
	mov r0, #0
	add sp, #0xc
	pop {r3, r4, r5, r6, pc}
	thumb_func_end sub_02097AA0

	thumb_func_start sub_02097B78
sub_02097B78: ; 0x02097B78
	push {r3, r4, r5, lr}
	mov r2, #2
	add r5, r0, #0
	mov r0, #3
	mov r1, #0x99
	lsl r2, r2, #0x12
	bl CreateHeap
	ldr r1, _02097BA8 ; =0x0000041C
	add r0, r5, #0
	mov r2, #0x99
	bl OverlayManager_CreateAndGetData
	ldr r2, _02097BA8 ; =0x0000041C
	mov r1, #0
	add r4, r0, #0
	bl MIi_CpuFill8
	add r0, r5, #0
	bl OverlayManager_GetField18
	str r0, [r4]
	mov r0, #1
	pop {r3, r4, r5, pc}
	.balign 4, 0
_02097BA8: .word 0x0000041C
	thumb_func_end sub_02097B78

	thumb_func_start sub_02097BAC
sub_02097BAC: ; 0x02097BAC
	push {r3, lr}
	bl OverlayManager_GetData
	ldr r1, [r0]
	add r1, #0x4c
	ldrh r1, [r1]
	lsl r2, r1, #2
	ldr r1, _02097BCC ; =0x02108F38
	ldr r1, [r1, r2]
	blx r1
	cmp r0, #0
	bne _02097BC8
	mov r0, #1
	pop {r3, pc}
_02097BC8:
	mov r0, #0
	pop {r3, pc}
	.balign 4, 0
_02097BCC: .word 0x02108F38
	thumb_func_end sub_02097BAC

	thumb_func_start sub_02097BD0
sub_02097BD0: ; 0x02097BD0
	push {r3, lr}
	bl OverlayManager_FreeData
	mov r0, #0x99
	bl DestroyHeap
	mov r0, #1
	pop {r3, pc}
	thumb_func_end sub_02097BD0

	thumb_func_start sub_02097BE0
sub_02097BE0: ; 0x02097BE0
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	add r7, r1, #0
	mov r0, #0xb
	mov r1, #0x54
	bl AllocFromHeapAtEnd
	add r4, r0, #0
	ldr r3, [r5, #0x48]
	add r6, r4, #0
	mov r2, #9
_02097BF6:
	ldmia r3!, {r0, r1}
	stmia r6!, {r0, r1}
	sub r2, r2, #1
	bne _02097BF6
	str r7, [r4, #0x48]
	mov r0, #0
	str r0, [r4, #0x50]
	add r0, r5, #0
	bl sub_020555E0
	cmp r0, #4
	bhi _02097C36
	add r0, r0, r0
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_02097C1A: ; jump table
	.short _02097C24 - _02097C1A - 2 ; case 0
	.short _02097C24 - _02097C1A - 2 ; case 1
	.short _02097C2A - _02097C1A - 2 ; case 2
	.short _02097C30 - _02097C1A - 2 ; case 3
	.short _02097C30 - _02097C1A - 2 ; case 4
_02097C24:
	mov r0, #0
	str r0, [r4, #0x4c]
	b _02097C3E
_02097C2A:
	mov r0, #1
	str r0, [r4, #0x4c]
	b _02097C3E
_02097C30:
	mov r0, #2
	str r0, [r4, #0x4c]
	b _02097C3E
_02097C36:
	bl GF_AssertFail
	mov r0, #1
	str r0, [r4, #0x4c]
_02097C3E:
	ldr r0, [r5, #0x10]
	ldr r1, _02097C4C ; =sub_02097C50
	add r2, r4, #0
	bl sub_02050530
	pop {r3, r4, r5, r6, r7, pc}
	nop
_02097C4C: .word sub_02097C50
	thumb_func_end sub_02097BE0

	thumb_func_start sub_02097C50
sub_02097C50: ; 0x02097C50
	push {r4, r5, r6, lr}
	add r5, r0, #0
	bl sub_0205064C
	add r6, r0, #0
	add r0, r5, #0
	bl sub_02050650
	add r4, r0, #0
	ldr r1, [r4, #0x50]
	cmp r1, #3
	bhi _02097CB0
	add r1, r1, r1
	add r1, pc
	ldrh r1, [r1, #6]
	lsl r1, r1, #0x10
	asr r1, r1, #0x10
	add pc, r1
_02097C74: ; jump table
	.short _02097C7C - _02097C74 - 2 ; case 0
	.short _02097C8A - _02097C74 - 2 ; case 1
	.short _02097C9A - _02097C74 - 2 ; case 2
	.short _02097CA8 - _02097C74 - 2 ; case 3
_02097C7C:
	add r0, r5, #0
	bl sub_0205525C
	ldr r0, [r4, #0x50]
	add r0, r0, #1
	str r0, [r4, #0x50]
	b _02097CB0
_02097C8A:
	add r0, r6, #0
	add r1, r4, #0
	bl sub_02097CB4
	ldr r0, [r4, #0x50]
	add r0, r0, #1
	str r0, [r4, #0x50]
	b _02097CB0
_02097C9A:
	add r0, r5, #0
	bl sub_020552A4
	ldr r0, [r4, #0x50]
	add r0, r0, #1
	str r0, [r4, #0x50]
	b _02097CB0
_02097CA8:
	bl FreeToHeap
	mov r0, #1
	pop {r4, r5, r6, pc}
_02097CB0:
	mov r0, #0
	pop {r4, r5, r6, pc}
	thumb_func_end sub_02097C50

	thumb_func_start sub_02097CB4
sub_02097CB4: ; 0x02097CB4
	push {r3, r4, r5, lr}
	add r4, r0, #0
	add r5, r1, #0
	mov r0, #0xb
	mov r1, #0xc
	bl AllocFromHeapAtEnd
	add r2, r0, #0
	str r5, [r2]
	mov r0, #0
	str r0, [r2, #8]
	ldr r0, [r4, #0x10]
	ldr r1, _02097CD4 ; =sub_02097CD8
	bl sub_02050530
	pop {r3, r4, r5, pc}
	.balign 4, 0
_02097CD4: .word sub_02097CD8
	thumb_func_end sub_02097CB4

	thumb_func_start sub_02097CD8
sub_02097CD8: ; 0x02097CD8
	push {r3, r4, r5, lr}
	add r4, r0, #0
	bl sub_0205064C
	add r5, r0, #0
	add r0, r4, #0
	bl sub_02050650
	add r4, r0, #0
	ldr r0, [r4, #8]
	ldr r1, [r4]
	cmp r0, #0
	beq _02097CFC
	cmp r0, #1
	beq _02097D14
	cmp r0, #2
	beq _02097D26
	b _02097D36
_02097CFC:
	mov r0, #0xb
	str r0, [sp]
	ldr r2, [r1, #0x48]
	ldr r3, [r1, #0x4c]
	add r0, r5, #0
	bl sub_0203FCB8
	str r0, [r4, #4]
	ldr r0, [r4, #8]
	add r0, r0, #1
	str r0, [r4, #8]
	b _02097D36
_02097D14:
	add r0, r5, #0
	bl sub_020505A0
	cmp r0, #0
	bne _02097D36
	ldr r0, [r4, #8]
	add r0, r0, #1
	str r0, [r4, #8]
	b _02097D36
_02097D26:
	ldr r0, [r4, #4]
	bl FreeToHeap
	add r0, r4, #0
	bl FreeToHeap
	mov r0, #1
	pop {r3, r4, r5, pc}
_02097D36:
	mov r0, #0
	pop {r3, r4, r5, pc}
	.balign 4, 0
	thumb_func_end sub_02097CD8

	thumb_func_start sub_02097D3C
sub_02097D3C: ; 0x02097D3C
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	add r6, r1, #0
	mov r0, #0xb
	mov r1, #8
	add r7, r2, #0
	bl AllocFromHeapAtEnd
	add r4, r0, #0
	mov r0, #0
	str r0, [r4]
	mov r0, #0xb
	mov r1, #8
	bl AllocFromHeapAtEnd
	str r0, [r4, #4]
	add r0, r5, #0
	bl ScriptEnvironment_GetSav2Ptr
	ldr r1, [r4, #4]
	add r2, r4, #0
	str r0, [r1, #4]
	ldr r0, [r4, #4]
	ldr r1, _02097D7C ; =sub_02097D80
	strh r6, [r0]
	ldr r0, [r4, #4]
	strh r7, [r0, #2]
	ldr r0, [r5, #0x10]
	bl sub_02050530
	pop {r3, r4, r5, r6, r7, pc}
	nop
_02097D7C: .word sub_02097D80
	thumb_func_end sub_02097D3C

	thumb_func_start sub_02097D80
sub_02097D80: ; 0x02097D80
	push {r4, r5, lr}
	sub sp, #0xc
	add r4, r0, #0
	bl sub_0205064C
	add r5, r0, #0
	add r0, r4, #0
	bl sub_02050650
	add r4, r0, #0
	ldr r0, [r4]
	cmp r0, #4
	bhi _02097E46
	add r0, r0, r0
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_02097DA6: ; jump table
	.short _02097DB0 - _02097DA6 - 2 ; case 0
	.short _02097DD0 - _02097DA6 - 2 ; case 1
	.short _02097DEC - _02097DA6 - 2 ; case 2
	.short _02097E04 - _02097DA6 - 2 ; case 3
	.short _02097E2C - _02097DA6 - 2 ; case 4
_02097DB0:
	mov r0, #6
	str r0, [sp]
	mov r0, #1
	str r0, [sp, #4]
	mov r0, #4
	str r0, [sp, #8]
	mov r0, #0
	add r1, r0, #0
	add r2, r0, #0
	add r3, r0, #0
	bl sub_0200FA24
	ldr r0, [r4]
	add r0, r0, #1
	str r0, [r4]
	b _02097E46
_02097DD0:
	bl sub_0200FB5C
	cmp r0, #0
	beq _02097E46
	ldr r1, [r4, #4]
	add r0, r5, #0
	bl sub_0203FD08
	bl sub_0203E30C
	ldr r0, [r4]
	add r0, r0, #1
	str r0, [r4]
	b _02097E46
_02097DEC:
	add r0, r5, #0
	bl sub_020505A0
	cmp r0, #0
	bne _02097E46
	ldr r0, [r4]
	add r0, r0, #1
	str r0, [r4]
	add r0, r5, #0
	bl sub_020505C0
	b _02097E46
_02097E04:
	add r0, r5, #0
	bl sub_020505C8
	cmp r0, #0
	beq _02097E46
	mov r0, #6
	str r0, [sp]
	mov r1, #1
	str r1, [sp, #4]
	mov r0, #4
	str r0, [sp, #8]
	mov r0, #0
	add r2, r1, #0
	add r3, r0, #0
	bl sub_0200FA24
	ldr r0, [r4]
	add r0, r0, #1
	str r0, [r4]
	b _02097E46
_02097E2C:
	bl sub_0200FB5C
	cmp r0, #0
	beq _02097E46
	ldr r0, [r4, #4]
	bl FreeToHeap
	add r0, r4, #0
	bl FreeToHeap
	add sp, #0xc
	mov r0, #1
	pop {r4, r5, pc}
_02097E46:
	mov r0, #0
	add sp, #0xc
	pop {r4, r5, pc}
	thumb_func_end sub_02097D80

	thumb_func_start sub_02097E4C
sub_02097E4C: ; 0x02097E4C
	push {r3, r4, r5, lr}
	add r4, r1, #0
	mov r1, #0xbb
	mov r2, #0
	add r5, r0, #0
	bl GetMonData
	add r2, sp, #0
	mov r1, #0
	strb r0, [r2]
	ldrsb r0, [r2, r1]
	add r2, r0, r4
	cmp r2, #0x7f
	ble _02097E6C
	mov r2, #0x7f
	b _02097E78
_02097E6C:
	add r0, r1, #0
	sub r0, #0x7f
	cmp r2, r0
	bge _02097E78
	add r2, r1, #0
	sub r2, #0x7f
_02097E78:
	add r0, sp, #0
	strb r2, [r0]
	add r0, r5, #0
	mov r1, #0xbb
	add r2, sp, #0
	bl sub_0206EC40
	pop {r3, r4, r5, pc}
	thumb_func_end sub_02097E4C

	thumb_func_start sub_02097E88
sub_02097E88: ; 0x02097E88
	sub r0, #0x22
	mov r1, #0
	cmp r0, #0x1c
	bhi _02097EF0
	add r0, r0, r0
	add r0, pc
	ldrh r0, [r0, #6]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	add pc, r0
_02097E9C: ; jump table
	.short _02097EDA - _02097E9C - 2 ; case 0
	.short _02097EDE - _02097E9C - 2 ; case 1
	.short _02097EE2 - _02097E9C - 2 ; case 2
	.short _02097EE6 - _02097E9C - 2 ; case 3
	.short _02097EF0 - _02097E9C - 2 ; case 4
	.short _02097EF0 - _02097E9C - 2 ; case 5
	.short _02097EF0 - _02097E9C - 2 ; case 6
	.short _02097EF0 - _02097E9C - 2 ; case 7
	.short _02097EF0 - _02097E9C - 2 ; case 8
	.short _02097EF0 - _02097E9C - 2 ; case 9
	.short _02097EF0 - _02097E9C - 2 ; case 10
	.short _02097EEA - _02097E9C - 2 ; case 11
	.short _02097EEA - _02097E9C - 2 ; case 12
	.short _02097EEA - _02097E9C - 2 ; case 13
	.short _02097EEA - _02097E9C - 2 ; case 14
	.short _02097EEA - _02097E9C - 2 ; case 15
	.short _02097ED6 - _02097E9C - 2 ; case 16
	.short _02097EF0 - _02097E9C - 2 ; case 17
	.short _02097EEA - _02097E9C - 2 ; case 18
	.short _02097EF0 - _02097E9C - 2 ; case 19
	.short _02097EF0 - _02097E9C - 2 ; case 20
	.short _02097EEE - _02097E9C - 2 ; case 21
	.short _02097EEE - _02097E9C - 2 ; case 22
	.short _02097EEE - _02097E9C - 2 ; case 23
	.short _02097EEE - _02097E9C - 2 ; case 24
	.short _02097EEE - _02097E9C - 2 ; case 25
	.short _02097EEE - _02097E9C - 2 ; case 26
	.short _02097EEE - _02097E9C - 2 ; case 27
	.short _02097EEE - _02097E9C - 2 ; case 28
_02097ED6:
	mov r1, #0x28
	b _02097EF0
_02097EDA:
	sub r1, #0x14
	b _02097EF0
_02097EDE:
	sub r1, #0x1e
	b _02097EF0
_02097EE2:
	sub r1, #0x14
	b _02097EF0
_02097EE6:
	sub r1, #0x28
	b _02097EF0
_02097EEA:
	mov r1, #8
	b _02097EF0
_02097EEE:
	mov r1, #0xa
_02097EF0:
	add r0, r1, #0
	bx lr
	thumb_func_end sub_02097E88

	thumb_func_start sub_02097EF4
sub_02097EF4: ; 0x02097EF4
	push {r4, lr}
	add r4, r0, #0
	add r0, r1, #0
	bl sub_02097E88
	add r1, r0, #0
	beq _02097F08
	add r0, r4, #0
	bl sub_02097E4C
_02097F08:
	pop {r4, pc}
	.balign 4, 0
	thumb_func_end sub_02097EF4

	thumb_func_start sub_02097F0C
sub_02097F0C: ; 0x02097F0C
	push {r3, r4, r5, lr}
	add r4, r1, #0
	mov r1, #0xae
	mov r2, #0
	add r5, r0, #0
	bl GetMonData
	lsl r0, r0, #0x10
	lsr r1, r0, #0x10
	beq _02097F60
	ldr r0, _02097F64 ; =0x000001EE
	cmp r1, r0
	beq _02097F60
	add r0, r5, #0
	mov r1, #0xbb
	mov r2, #0
	bl GetMonData
	add r1, sp, #0
	strb r0, [r1]
	mov r0, #0
	ldrsb r2, [r1, r0]
	ldr r1, _02097F68 ; =0x02108F44
	ldrsb r1, [r1, r4]
	add r2, r2, r1
	add r1, r0, #0
	sub r1, #0x7f
	cmp r2, r1
	bge _02097F4C
	add r2, r0, #0
	sub r2, #0x7f
	b _02097F52
_02097F4C:
	cmp r2, #0x7f
	ble _02097F52
	mov r2, #0x7f
_02097F52:
	add r0, sp, #0
	strb r2, [r0]
	add r0, r5, #0
	mov r1, #0xbb
	add r2, sp, #0
	bl sub_0206EC40
_02097F60:
	pop {r3, r4, r5, pc}
	nop
_02097F64: .word 0x000001EE
_02097F68: .word 0x02108F44
	thumb_func_end sub_02097F0C

	thumb_func_start sub_02097F6C
sub_02097F6C: ; 0x02097F6C
	push {r3, r4, r5, lr}
	add r5, r1, #0
	mov r1, #0x14
	add r4, r2, #0
	bl _u32_div_f
	lsl r0, r1, #0x18
	lsr r1, r0, #0x16
	ldr r0, _02097F94 ; =0x02108F4C
	ldrh r0, [r0, r1]
	cmp r5, r0
	bne _02097F90
	ldr r0, _02097F98 ; =0x02108F4E
	ldrh r0, [r0, r1]
	cmp r4, r0
	bne _02097F90
	mov r0, #1
	pop {r3, r4, r5, pc}
_02097F90:
	mov r0, #0
	pop {r3, r4, r5, pc}
	.balign 4, 0
_02097F94: .word 0x02108F4C
_02097F98: .word 0x02108F4E
	thumb_func_end sub_02097F6C

	thumb_func_start sub_02097F9C
sub_02097F9C: ; 0x02097F9C
	push {r3, r4, r5, r6, lr}
	sub sp, #0xc4
	add r6, r1, #0
	mov r1, #0x14
	add r5, r2, #0
	bl _u32_div_f
	ldr r2, _02097FF0 ; =0x02108F4C
	lsl r1, r1, #2
	add r4, r2, r1
	ldrh r1, [r2, r1]
	add r0, sp, #0
	bl WildEncounters_ReadFromNarc
	ldrh r0, [r4, #2]
	cmp r0, #0
	beq _02097FD8
	cmp r0, #1
	beq _02097FC8
	cmp r0, #2
	beq _02097FD0
	b _02097FDE
_02097FC8:
	add r0, sp, #0x80
	ldrh r0, [r0, #0x3e]
	strh r0, [r5]
	b _02097FDE
_02097FD0:
	add r0, sp, #0xc0
	ldrh r0, [r0, #2]
	strh r0, [r5]
	b _02097FDE
_02097FD8:
	add r0, sp, #0x80
	ldrh r0, [r0, #0x3c]
	strh r0, [r5]
_02097FDE:
	ldrh r0, [r5]
	cmp r0, #0
	bne _02097FE8
	bl GF_AssertFail
_02097FE8:
	ldrh r0, [r4]
	strh r0, [r6]
	add sp, #0xc4
	pop {r3, r4, r5, r6, pc}
	.balign 4, 0
_02097FF0: .word 0x02108F4C
	thumb_func_end sub_02097F9C

	.rodata
_020FF4E4:
	.byte 0x2D, 0x00
_020FF4E6:
	.byte 0x5F, 0x00, 0x14, 0x00, 0x50, 0x00
_020FF4EC:
	.byte 0x00, 0x00
_020FF4EE:
	.byte 0x3B, 0x01
	.byte 0x38, 0x00, 0x3B, 0x00, 0x93, 0x01, 0xB5, 0x01
_020FF4F8:
	.byte 0x97, 0x00, 0xFB, 0x00, 0x81, 0x01, 0x82, 0x01
	.byte 0xE9, 0x01, 0xEA, 0x01, 0xEB, 0x01, 0xEC, 0x01, 0xED, 0x01, 0x00, 0x00
_020FF50C:
	.byte 0x00, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x03, 0x00, 0x00, 0x00
_020FF524:
	.byte 0x05, 0x03, 0x02, 0x05, 0x03, 0x02, 0x01, 0x01, 0x00, 0x03, 0x02, 0x01
	.byte 0x01, 0x01, 0x00, 0x01, 0x01, 0x01, 0xFF, 0xFF, 0xFF, 0xFB, 0xFB, 0xF6, 0xFB, 0xFB, 0xF6, 0x03
	.byte 0x02, 0x01, 0x00, 0x00
_020FF544:
	.byte 0x01, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00
	.byte 0xE8, 0x03, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0xA0, 0x86, 0x01, 0x00, 0x40, 0x42, 0x0F, 0x00
	.byte 0x80, 0x96, 0x98, 0x00
_020FF564:
	.byte 0x96, 0x00, 0x97, 0x00, 0xF9, 0x00, 0xFA, 0x00, 0xFB, 0x00, 0x7E, 0x01
	.byte 0x7F, 0x01, 0x80, 0x01, 0x81, 0x01, 0x82, 0x01, 0xE3, 0x01, 0xE4, 0x01, 0xE7, 0x01, 0xE9, 0x01
	.byte 0xEA, 0x01, 0xEB, 0x01, 0xEC, 0x01, 0xED, 0x01
_020FF588:
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2F, 0x4E, 0x00, 0x00
	.byte 0x2A, 0x4E, 0x00, 0x00, 0x27, 0x4E, 0x00, 0x00, 0x27, 0x4E, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
_020FF5BC:
	.byte 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x01, 0x00, 0x00, 0x00, 0xFF, 0x01, 0x00, 0xFF, 0x00, 0x00, 0x01, 0xFF, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0xFF, 0x00, 0x01, 0x00, 0xFF, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xFF, 0x01, 0xFF, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x01
	.byte 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0x00, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00
	.byte 0xFF, 0x00, 0x01, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xFF, 0x00
	.byte 0xFF, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0x00, 0x00, 0xFF, 0x01, 0x00, 0x00
	.byte 0xFF, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
_020FF639:
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF
	.byte 0x00, 0x00, 0x00, 0x01, 0x00, 0xFF, 0x00, 0x00, 0x01, 0x00, 0x00, 0xFF, 0x00, 0x01, 0x00, 0x00
	.byte 0x00, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0x00
	.byte 0x00, 0x00, 0x01, 0x00, 0xFF, 0x00, 0x00, 0x01, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x01, 0x00, 0x00
	.byte 0x00, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0x00, 0x00
	.byte 0x00, 0x01, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x01, 0x00, 0x00, 0xFF, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0x00, 0x00
	.byte 0x00, 0x01, 0x00, 0xFF, 0x00, 0x00, 0x01, 0x00, 0x00, 0xFF, 0x00, 0x01, 0x00, 0x00, 0x00, 0xFF
	.byte 0x01, 0x00, 0x00, 0x00, 0x00, 0x00
_020FF6B6:
	.byte 0x0A, 0x00, 0x00, 0x00, 0xF6, 0x23, 0xDD, 0x00, 0x00, 0x00
	.byte 0x23, 0x00, 0x00, 0x00, 0xDD, 0x23, 0x00, 0x00, 0xDD, 0x00, 0x23, 0x00, 0xDD, 0x00, 0x00, 0xDD
	.byte 0x23, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0xF6, 0x00, 0x00, 0x23, 0x00, 0x00, 0xDD, 0x00, 0x23
	.byte 0x00, 0xDD, 0x00, 0x00, 0x23, 0xDD, 0x00, 0x00, 0xDD, 0x00, 0x00, 0x00, 0x23, 0x00, 0xDD, 0x00
	.byte 0x00, 0x23, 0x00, 0x00, 0xF6, 0x00, 0x0A, 0x00, 0x00, 0x00, 0xDD, 0x23, 0x00, 0x00, 0xDD, 0x00
	.byte 0x23, 0xDD, 0x00, 0x00, 0x23, 0x00, 0x00, 0xDD, 0x00, 0x23, 0x00, 0x00, 0x00, 0x00, 0x23, 0xDD
	.byte 0xF6, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0xDD, 0x23, 0x00, 0xDD, 0x00, 0x23, 0x00, 0x00, 0x00
	.byte 0xDD, 0x23, 0x00, 0x00, 0x00, 0x00, 0x23, 0x00, 0xDD, 0x00, 0x00, 0x23, 0xDD, 0x00, 0x00, 0xF6
	.byte 0x0A, 0x00, 0x00
_020FF733:
	.byte 0x00, 0x20, 0x40, 0x60, 0x00, 0x20, 0x60, 0x40, 0x00, 0x40, 0x20, 0x60, 0x00
	.byte 0x60, 0x20, 0x40, 0x00, 0x40, 0x60, 0x20, 0x00, 0x60, 0x40, 0x20, 0x20, 0x00, 0x40, 0x60, 0x20
	.byte 0x00, 0x60, 0x40, 0x40, 0x00, 0x20, 0x60, 0x60, 0x00, 0x20, 0x40, 0x40, 0x00, 0x60, 0x20, 0x60
	.byte 0x00, 0x40, 0x20, 0x20, 0x40, 0x00, 0x60, 0x20, 0x60, 0x00, 0x40, 0x40, 0x20, 0x00, 0x60, 0x60
	.byte 0x20, 0x00, 0x40, 0x40, 0x60, 0x00, 0x20, 0x60, 0x40, 0x00, 0x20, 0x20, 0x40, 0x60, 0x00, 0x20
	.byte 0x60, 0x40, 0x00, 0x40, 0x20, 0x60, 0x00, 0x60, 0x20, 0x40, 0x00, 0x40, 0x60, 0x20, 0x00, 0x60
	.byte 0x40, 0x20, 0x00, 0x00, 0x20, 0x40, 0x60, 0x00, 0x20, 0x60, 0x40, 0x00, 0x40, 0x20, 0x60, 0x00
	.byte 0x60, 0x20, 0x40, 0x00, 0x40, 0x60, 0x20, 0x00, 0x60, 0x40, 0x20, 0x20, 0x00, 0x40, 0x60, 0x20
	.byte 0x00, 0x60, 0x40, 0x00
_020FF7B4:
	.byte 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00, 0x04, 0x00
	.byte 0x05, 0x00, 0x06, 0x00, 0x07, 0x00, 0x08, 0x00, 0x09, 0x00, 0x0A, 0x00, 0x0B, 0x00, 0x0C, 0x00
	.byte 0x0D, 0x00, 0x0E, 0x00, 0x0F, 0x00, 0x10, 0x00, 0x11, 0x00, 0x12, 0x00, 0x13, 0x00, 0x14, 0x00
	.byte 0x15, 0x00, 0x16, 0x00, 0x17, 0x00, 0x18, 0x00, 0x19, 0x00, 0x1A, 0x00, 0x1B, 0x00, 0x1C, 0x00
	.byte 0x1D, 0x00, 0x1E, 0x00, 0x1F, 0x00, 0x20, 0x00, 0x21, 0x00, 0x22, 0x00, 0x23, 0x00, 0x24, 0x00
	.byte 0x25, 0x00, 0x26, 0x00, 0x27, 0x00, 0x28, 0x00, 0x29, 0x00, 0x2A, 0x00, 0x2B, 0x00, 0x2C, 0x00
	.byte 0x2D, 0x00, 0x2E, 0x00, 0x2F, 0x00, 0x30, 0x00, 0x31, 0x00, 0x32, 0x00, 0x33, 0x00, 0x34, 0x00
	.byte 0x35, 0x00, 0x36, 0x00, 0x37, 0x00, 0x38, 0x00, 0x39, 0x00, 0x3A, 0x00, 0x3B, 0x00, 0x3C, 0x00
	.byte 0x3D, 0x00, 0x3E, 0x00, 0x3F, 0x00, 0x40, 0x00, 0x41, 0x00, 0x42, 0x00, 0x43, 0x00, 0x44, 0x00
	.byte 0x45, 0x00, 0x46, 0x00, 0x47, 0x00, 0x48, 0x00, 0x49, 0x00, 0x4A, 0x00, 0x4B, 0x00, 0x4C, 0x00
	.byte 0x4D, 0x00, 0x4E, 0x00, 0x4F, 0x00, 0x50, 0x00, 0x51, 0x00, 0x52, 0x00, 0x53, 0x00, 0x54, 0x00
	.byte 0x55, 0x00, 0x56, 0x00, 0x57, 0x00, 0x58, 0x00, 0x59, 0x00, 0x5A, 0x00, 0x5B, 0x00, 0x5C, 0x00
	.byte 0x5D, 0x00, 0x5E, 0x00, 0x5F, 0x00, 0x60, 0x00, 0x61, 0x00, 0x62, 0x00, 0x63, 0x00, 0x64, 0x00
	.byte 0x65, 0x00, 0x66, 0x00, 0x67, 0x00, 0x68, 0x00, 0x69, 0x00, 0x6A, 0x00, 0x6B, 0x00, 0x6C, 0x00
	.byte 0x6D, 0x00, 0x6E, 0x00, 0x6F, 0x00, 0x70, 0x00, 0x71, 0x00, 0x72, 0x00, 0x73, 0x00, 0x74, 0x00
	.byte 0x75, 0x00, 0x76, 0x00, 0x77, 0x00, 0x78, 0x00, 0x79, 0x00, 0x7A, 0x00, 0x7B, 0x00, 0x7C, 0x00
	.byte 0x7D, 0x00, 0x7E, 0x00, 0x7F, 0x00, 0x80, 0x00, 0x81, 0x00, 0x82, 0x00, 0x83, 0x00, 0x84, 0x00
	.byte 0x85, 0x00, 0x86, 0x00, 0x87, 0x00, 0x88, 0x00, 0x89, 0x00, 0x8A, 0x00, 0x8B, 0x00, 0x8C, 0x00
	.byte 0x8D, 0x00, 0x8E, 0x00, 0x8F, 0x00, 0x90, 0x00, 0x91, 0x00, 0x92, 0x00, 0x93, 0x00, 0x94, 0x00
	.byte 0x95, 0x00, 0x96, 0x00, 0x97, 0x00, 0x98, 0x00, 0x99, 0x00, 0x9A, 0x00, 0x9B, 0x00, 0x9C, 0x00
	.byte 0x9D, 0x00, 0x9E, 0x00, 0x9F, 0x00, 0xA0, 0x00, 0xA1, 0x00, 0xA2, 0x00, 0xA3, 0x00, 0xA4, 0x00
	.byte 0xA5, 0x00, 0xA6, 0x00, 0xA7, 0x00, 0xA8, 0x00, 0xA9, 0x00, 0xAA, 0x00, 0xAB, 0x00, 0xAD, 0x00
	.byte 0xAE, 0x00, 0xAF, 0x00, 0xB0, 0x00, 0xB1, 0x00, 0xB2, 0x00, 0xB3, 0x00, 0xB4, 0x00, 0xB5, 0x00
	.byte 0xB6, 0x00, 0xB7, 0x00, 0xB8, 0x00, 0xB9, 0x00, 0xBA, 0x00, 0xBB, 0x00, 0xBC, 0x00, 0xBD, 0x00
	.byte 0xBE, 0x00, 0xBF, 0x00, 0xC0, 0x00, 0xC1, 0x00, 0xC2, 0x00, 0xC3, 0x00, 0xC4, 0x00, 0xC5, 0x00
	.byte 0xC6, 0x00, 0xC7, 0x00, 0xC8, 0x00, 0xC9, 0x00, 0xE5, 0x00, 0xE6, 0x00, 0xE7, 0x00, 0xE8, 0x00
	.byte 0xE9, 0x00, 0xEA, 0x00, 0xEB, 0x00, 0xEC, 0x00, 0xED, 0x00, 0xEE, 0x00, 0xEF, 0x00, 0xF0, 0x00
	.byte 0xF1, 0x00, 0xF2, 0x00, 0xF3, 0x00, 0xF4, 0x00, 0xF5, 0x00, 0xF6, 0x00, 0xF7, 0x00, 0xF8, 0x00
	.byte 0xF9, 0x00, 0xFA, 0x00, 0xFB, 0x00, 0xFC, 0x00, 0xFD, 0x00, 0xFE, 0x00, 0xFF, 0x00, 0x00, 0x01
	.byte 0x01, 0x01, 0x02, 0x01, 0x03, 0x01, 0x04, 0x01, 0x05, 0x01, 0x06, 0x01, 0x07, 0x01, 0x08, 0x01
	.byte 0x09, 0x01, 0x0A, 0x01, 0x0B, 0x01, 0x0C, 0x01, 0x0D, 0x01, 0x0E, 0x01, 0x0F, 0x01, 0x10, 0x01
	.byte 0x11, 0x01, 0x12, 0x01, 0x13, 0x01, 0x14, 0x01, 0x15, 0x01, 0x16, 0x01, 0x17, 0x01, 0x18, 0x01
	.byte 0x19, 0x01, 0x1A, 0x01, 0x1B, 0x01, 0x1C, 0x01, 0x1D, 0x01, 0x1E, 0x01, 0x1F, 0x01, 0x20, 0x01
	.byte 0x21, 0x01, 0x22, 0x01, 0x23, 0x01, 0x24, 0x01, 0x25, 0x01, 0x26, 0x01, 0x27, 0x01, 0x28, 0x01
	.byte 0x29, 0x01, 0x2A, 0x01, 0x2B, 0x01, 0x2C, 0x01, 0x2D, 0x01, 0x2E, 0x01, 0x2F, 0x01, 0x30, 0x01
	.byte 0x31, 0x01, 0x32, 0x01, 0x33, 0x01, 0x34, 0x01, 0x35, 0x01, 0x36, 0x01, 0x37, 0x01, 0x38, 0x01
	.byte 0x39, 0x01, 0x3A, 0x01, 0x3B, 0x01, 0x3C, 0x01, 0x3D, 0x01, 0x3E, 0x01, 0x3F, 0x01, 0x40, 0x01
	.byte 0x41, 0x01, 0x42, 0x01, 0x43, 0x01, 0x44, 0x01, 0x45, 0x01, 0x46, 0x01, 0x47, 0x01, 0x48, 0x01
	.byte 0x49, 0x01, 0x4A, 0x01, 0x4B, 0x01, 0x4C, 0x01, 0x4D, 0x01, 0x4E, 0x01, 0x4F, 0x01, 0x50, 0x01
	.byte 0x51, 0x01, 0x52, 0x01, 0x53, 0x01, 0x54, 0x01, 0x55, 0x01, 0x56, 0x01, 0x57, 0x01, 0x58, 0x01
	.byte 0x59, 0x01, 0x5A, 0x01, 0x5B, 0x01, 0x5C, 0x01, 0x5D, 0x01, 0x5E, 0x01, 0x5F, 0x01, 0x60, 0x01
	.byte 0x61, 0x01, 0x62, 0x01, 0x63, 0x01, 0x64, 0x01, 0x65, 0x01, 0x66, 0x01, 0x67, 0x01, 0x68, 0x01
	.byte 0x69, 0x01, 0x6A, 0x01, 0x6B, 0x01, 0x6C, 0x01, 0x6D, 0x01, 0x6E, 0x01, 0x6F, 0x01, 0x70, 0x01
	.byte 0x71, 0x01, 0x72, 0x01, 0x73, 0x01, 0x74, 0x01, 0x75, 0x01, 0x76, 0x01, 0x77, 0x01, 0x78, 0x01
	.byte 0x79, 0x01, 0x7A, 0x01, 0x7B, 0x01, 0x7C, 0x01, 0x7D, 0x01, 0x7E, 0x01, 0x7F, 0x01, 0x80, 0x01
	.byte 0x81, 0x01, 0x82, 0x01, 0x83, 0x01, 0x84, 0x01, 0x85, 0x01, 0x86, 0x01, 0x87, 0x01, 0x88, 0x01
	.byte 0x89, 0x01, 0x8A, 0x01, 0x8B, 0x01, 0x8C, 0x01, 0x8D, 0x01, 0x8E, 0x01, 0x8F, 0x01, 0x90, 0x01
	.byte 0x91, 0x01, 0x92, 0x01, 0x93, 0x01, 0x94, 0x01, 0x95, 0x01, 0x96, 0x01, 0x97, 0x01, 0x98, 0x01
	.byte 0x99, 0x01, 0x9A, 0x01, 0x9B, 0x01, 0x9C, 0x01, 0x9D, 0x01, 0xA1, 0x01, 0xA2, 0x01, 0xA3, 0x01
	.byte 0xA4, 0x01, 0xA5, 0x01, 0xA6, 0x01, 0xA7, 0x01, 0xA8, 0x01, 0xA9, 0x01, 0xAA, 0x01, 0xAB, 0x01
	.byte 0xAC, 0x01, 0xAD, 0x01, 0xAE, 0x01, 0xAF, 0x01, 0xB0, 0x01, 0xB1, 0x01, 0xB2, 0x01, 0xB3, 0x01
	.byte 0xB4, 0x01, 0xB5, 0x01, 0xB6, 0x01, 0xB7, 0x01, 0xB8, 0x01, 0xB9, 0x01, 0xBA, 0x01, 0xBD, 0x01
	.byte 0xC0, 0x01, 0xC1, 0x01, 0xC2, 0x01, 0xC3, 0x01, 0xC4, 0x01, 0xC5, 0x01, 0xC6, 0x01, 0xC7, 0x01
	.byte 0xC8, 0x01, 0xCA, 0x01, 0xCC, 0x01, 0xCD, 0x01, 0xCE, 0x01, 0xCF, 0x01, 0xD0, 0x01, 0xD1, 0x01
	.byte 0xD2, 0x01, 0xD3, 0x01, 0xD4, 0x01, 0xD5, 0x01, 0xD6, 0x01, 0xD7, 0x01, 0xD8, 0x01, 0xD9, 0x01
	.byte 0xDA, 0x01, 0xDB, 0x01, 0xDC, 0x01, 0xDD, 0x01, 0xDE, 0x01, 0xDF, 0x01, 0xE0, 0x01, 0xE1, 0x01
	.byte 0xE2, 0x01, 0xE3, 0x01, 0xE4, 0x01, 0xE5, 0x01, 0xE6, 0x01, 0xE7, 0x01, 0xE8, 0x01, 0xE9, 0x01
	.byte 0xEA, 0x01, 0xEB, 0x01, 0xEC, 0x01, 0xED, 0x01, 0xEE, 0x01, 0xEF, 0x01, 0xF0, 0x01, 0xF1, 0x01
	.byte 0xF2, 0x01, 0xF3, 0x01, 0xF4, 0x01, 0xF5, 0x01, 0xF6, 0x01, 0xF7, 0x01, 0xF8, 0x01, 0xF9, 0x01
	.byte 0xFA, 0x01, 0xFB, 0x01, 0xFC, 0x01, 0xFD, 0x01, 0xFE, 0x01, 0xFF, 0x01, 0x00, 0x02, 0x01, 0x02
	.byte 0x02, 0x02, 0x03, 0x02, 0x09, 0x02, 0x0A, 0x02, 0x0B, 0x02, 0x0C, 0x02, 0x0D, 0x02, 0x0E, 0x02
	.byte 0x0F, 0x02, 0x10, 0x02, 0x12, 0x02, 0x13, 0x02, 0x14, 0x02, 0x15, 0x02, 0x16, 0x02, 0x18, 0x02
_020FFB90:
	.byte 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00
	.byte 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00
	.byte 0x00, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01
	.byte 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00
	.byte 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00
	.byte 0x01, 0x00, 0x01, 0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x02, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00
	.byte 0x01, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00
	.byte 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00
_020FFC10:
	.byte 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x01, 0x01, 0x00, 0x01, 0x02, 0x02
	.byte 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x02, 0x02, 0x02, 0x00, 0x02, 0x02, 0x02, 0x02, 0x02
	.byte 0x02, 0x02, 0x02, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x02, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x02, 0x02, 0x02, 0x01, 0x01, 0x01, 0x02, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02
	.byte 0x02, 0x02, 0x00, 0x02, 0x00, 0x01, 0x01, 0x01, 0x02, 0x02, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02
	.byte 0x02, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x02, 0x01, 0x02, 0x02, 0x01
	.byte 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x01, 0x02, 0x01, 0x00, 0x02
	.byte 0x02, 0x00, 0x00, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x01
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02
	.byte 0x02, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x01, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x01, 0x02
	.byte 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x01, 0x02, 0x02, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x01
	.byte 0x01, 0x01, 0x00, 0x00, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x02, 0x02
	.byte 0x00, 0x00, 0x02, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00
	.byte 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x02, 0x02, 0x01, 0x01
	.byte 0x01, 0x01, 0x01, 0x00, 0x02, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x01, 0x01, 0x00, 0x01, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x02, 0x00, 0x02, 0x00, 0x02, 0x01, 0x01, 0x01
	.byte 0x01, 0x01, 0x01, 0x00, 0x02, 0x02, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x00, 0x01, 0x01, 0x02
	.byte 0x02, 0x01, 0x01, 0x01, 0x01, 0x00, 0x02, 0x02, 0x02, 0x01, 0x02, 0x00, 0x00, 0x02, 0x02, 0x02
	.byte 0x02, 0x02, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x02, 0x00, 0x00
	.byte 0x02, 0x00, 0x01, 0x00, 0x01, 0x00, 0x02, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00
	.byte 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00
	.byte 0x00, 0x01, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x02, 0x02, 0x00
	.byte 0x01, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02
	.byte 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x02, 0x02, 0x00, 0x01, 0x00
	.byte 0x02, 0x00, 0x02, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02
	.byte 0x02, 0x01, 0x01, 0x00, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01
	.byte 0x00, 0x02, 0x01, 0x00, 0x02, 0x01, 0x01, 0x00, 0x02, 0x02, 0x00, 0x01, 0x00, 0x02, 0x02, 0x00
	.byte 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01
	.byte 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00
_020FFE2B:
	.byte 0x00, 0x00, 0x00
_020FFE2E:
	.byte 0x00, 0x01
_020FFE30:
	.byte 0x35, 0x55, 0x07, 0x02, 0xB9, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x29, 0x50, 0x07, 0x02
	.byte 0xB9, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0xB5, 0x50, 0x07, 0x02, 0xD9, 0x4E, 0x07, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x3D, 0x51, 0x07, 0x02, 0xDD, 0x4E, 0x07, 0x02, 0xF9, 0x4E, 0x07, 0x02
	.byte 0xA9, 0x51, 0x07, 0x02, 0xF5, 0x4E, 0x07, 0x02, 0x19, 0x4F, 0x07, 0x02, 0x11, 0x52, 0x07, 0x02
	.byte 0xE5, 0x4E, 0x07, 0x02, 0x39, 0x4F, 0x07, 0x02, 0x0D, 0x53, 0x07, 0x02, 0xED, 0x4E, 0x07, 0x02
	.byte 0x55, 0x4F, 0x07, 0x02, 0x99, 0x53, 0x07, 0x02, 0xF5, 0x4E, 0x07, 0x02, 0x75, 0x4F, 0x07, 0x02
	.byte 0x99, 0x53, 0x07, 0x02, 0xF5, 0x4E, 0x07, 0x02, 0x7D, 0x4F, 0x07, 0x02, 0x25, 0x54, 0x07, 0x02
	.byte 0xE5, 0x4E, 0x07, 0x02, 0x85, 0x4F, 0x07, 0x02, 0x25, 0x54, 0x07, 0x02, 0xE5, 0x4E, 0x07, 0x02
	.byte 0x8D, 0x4F, 0x07, 0x02, 0xB5, 0x55, 0x07, 0x02, 0xE5, 0x55, 0x07, 0x02, 0x95, 0x4F, 0x07, 0x02
_020FFEC0:
	.byte 0x01, 0x04, 0x00, 0x00
_020FFEC4:
	.byte 0x80, 0x00
_020FFEC6:
	.byte 0x48, 0x00, 0x80, 0x00, 0x78, 0x00
_020FFECC:
	.byte 0x32, 0x5C, 0x03, 0xFB
	.byte 0x63, 0x8C, 0x03, 0xFB, 0xFF, 0x00, 0x00, 0x00
_020FFED8:
	.byte 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
_020FFEE8:
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x40, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00
_020FFEFC:
	.byte 0x01, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00
_020FFF14:
	.byte 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x20, 0x00, 0x00, 0x00
_020FFF34:
	.byte 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00
_020FFF5C:
	.byte 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
_020FFF90:
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x02, 0x03
	.byte 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x06, 0x04, 0x00, 0x03, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00
	_020FFFE4:
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0E, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x0D, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0C, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xF4, 0x00, 0x00, 0x00
	.byte 0xF6, 0x00, 0x00, 0x00, 0xF5, 0x00, 0x00, 0x00, 0xEA, 0x00, 0x00, 0x00, 0xE1, 0x00, 0x00, 0x00
	.byte 0xE3, 0x00, 0x00, 0x00, 0xEB, 0x00, 0x00, 0x00, 0xE5, 0x00, 0x00, 0x00, 0xED, 0x00, 0x00, 0x00
	.byte 0xE7, 0x00, 0x00, 0x00, 0xE4, 0x00, 0x00, 0x00, 0xEE, 0x00, 0x00, 0x00, 0xEC, 0x00, 0x00, 0x00
	.byte 0xE2, 0x00, 0x00, 0x00, 0xF1, 0x00, 0x00, 0x00, 0xE9, 0x00, 0x00, 0x00, 0xDE, 0x00, 0x00, 0x00
	.byte 0xDF, 0x00, 0x00, 0x00, 0xE6, 0x00, 0x00, 0x00, 0xDD, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00
	.byte 0xF0, 0x00, 0x00, 0x00, 0xDB, 0x00, 0x00, 0x00, 0xDC, 0x00, 0x00, 0x00, 0xE8, 0x00, 0x00, 0x00
	.byte 0xEF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x02, 0x01, 0x00, 0x02, 0x00, 0x01
	.byte 0x02, 0x00, 0x01, 0x01, 0x02, 0x00, 0x00, 0x01, 0x01, 0x02, 0x00, 0x00, 0xA5, 0x00, 0x28, 0x00
	.byte 0x18, 0x00, 0x65, 0x00, 0x40, 0x00, 0x0C, 0x00, 0x1E, 0x00, 0x32, 0x00, 0x08, 0x01, 0x51, 0x01
	.byte 0x60, 0x01, 0x5B, 0x01, 0x2E, 0x00, 0x5C, 0x00, 0x02, 0x01, 0x53, 0x01, 0x4B, 0x01, 0xED, 0x00
	.byte 0xF1, 0x00, 0x0D, 0x01, 0x3A, 0x00, 0x3B, 0x00, 0x3F, 0x00, 0x71, 0x00, 0xB6, 0x00, 0xF0, 0x00
	.byte 0xCA, 0x00, 0xDB, 0x00, 0xDA, 0x00, 0x4C, 0x00, 0xE7, 0x00, 0x55, 0x00, 0x57, 0x00, 0x59, 0x00
	.byte 0xD8, 0x00, 0x5B, 0x00, 0x5E, 0x00, 0xF7, 0x00, 0x18, 0x01, 0x68, 0x00, 0x73, 0x00, 0x5F, 0x01
	.byte 0x35, 0x00, 0xBC, 0x00, 0xC9, 0x00, 0x7E, 0x00, 0x3D, 0x01, 0x4C, 0x01, 0x03, 0x01, 0x07, 0x01
	.byte 0x22, 0x01, 0x9C, 0x00, 0xD5, 0x00, 0xA8, 0x00, 0xD3, 0x00, 0x1D, 0x01, 0x21, 0x01, 0x3B, 0x01
	.byte 0x63, 0x01, 0x9B, 0x01, 0x9C, 0x01, 0xCE, 0x00, 0x6A, 0x01, 0x76, 0x01, 0xC3, 0x01, 0xCB, 0x00
	.byte 0x96, 0x01, 0x99, 0x01, 0x05, 0x01, 0x3E, 0x01, 0x75, 0x01, 0x99, 0x00, 0xA5, 0x01, 0x73, 0x01
	.byte 0x16, 0x01, 0xA0, 0x01, 0x8D, 0x01, 0x94, 0x00, 0xBC, 0x01, 0xA3, 0x01, 0x56, 0x00, 0x68, 0x01
	.byte 0x0E, 0x00, 0xBE, 0x01, 0xF4, 0x00, 0xBD, 0x01, 0x8F, 0x01, 0x9D, 0x00, 0x94, 0x01, 0xD6, 0x00
	.byte 0x6B, 0x01, 0x8E, 0x01, 0x8A, 0x00, 0xBF, 0x01, 0xCF, 0x00, 0x6D, 0x01, 0x71, 0x01, 0xA4, 0x00
	.byte 0xAE, 0x01, 0xB1, 0x01, 0x0F, 0x00, 0x13, 0x00, 0x39, 0x00, 0x46, 0x00, 0xFA, 0x00, 0xF9, 0x00
	.byte 0x7F, 0x00, 0xAF, 0x01, 0x00, 0x00, 0x19, 0x03, 0x1A, 0x03, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00
	.byte 0x03, 0x00, 0x01, 0x00, 0x02, 0x00, 0x04, 0x00, 0x05, 0x00, 0x02, 0x00, 0x03, 0x00, 0x06, 0x00
	.byte 0x07, 0x00, 0x03, 0x00, 0x04, 0x00, 0x08, 0x00, 0x09, 0x00, 0x04, 0x00, 0x05, 0x00, 0x0A, 0x00
	.byte 0x0B, 0x00, 0x05, 0x00, 0x06, 0x00, 0x0C, 0x00, 0x0D, 0x00, 0x06, 0x00, 0x07, 0x00, 0x0E, 0x00
	.byte 0x0F, 0x00, 0x07, 0x00, 0x08, 0x00, 0x10, 0x00, 0x11, 0x00, 0x08, 0x00, 0x09, 0x00, 0x12, 0x00
	.byte 0x13, 0x00, 0x09, 0x00, 0x0A, 0x00, 0x14, 0x00, 0x13, 0x00, 0x0A, 0x00, 0x0B, 0x00, 0x15, 0x00
	.byte 0x16, 0x00, 0x0B, 0x00, 0x0C, 0x00, 0x17, 0x00, 0x16, 0x00, 0x0C, 0x00, 0x0D, 0x00, 0x97, 0x02
	.byte 0x98, 0x02, 0x00, 0x00, 0x0E, 0x00, 0x99, 0x02, 0x9A, 0x02, 0x00, 0x00, 0x0F, 0x00, 0x9B, 0x02
	.byte 0x9C, 0x02, 0x00, 0x00, 0x10, 0x00, 0x9D, 0x02, 0x9E, 0x02, 0x00, 0x00, 0x11, 0x00, 0x18, 0x00
	.byte 0x19, 0x00, 0x0D, 0x00, 0x12, 0x00, 0x1A, 0x00, 0x1B, 0x00, 0x0E, 0x00, 0x13, 0x00, 0x1E, 0x00
	.byte 0x1C, 0x00, 0x0F, 0x00, 0x14, 0x00, 0x1E, 0x00, 0x1D, 0x00, 0x10, 0x00, 0x15, 0x00, 0x1E, 0x00
	.byte 0x1F, 0x00, 0x11, 0x00, 0x16, 0x00, 0x1E, 0x00, 0x20, 0x00, 0x12, 0x00, 0x17, 0x00, 0x21, 0x00
	.byte 0x22, 0x00, 0x13, 0x00, 0x18, 0x00, 0x21, 0x00, 0x23, 0x00, 0x14, 0x00, 0x19, 0x00, 0x18, 0x00
	.byte 0x24, 0x00, 0x15, 0x00, 0x1A, 0x00, 0x18, 0x00, 0x25, 0x00, 0x16, 0x00, 0x1B, 0x00, 0x26, 0x00
	.byte 0x27, 0x00, 0x17, 0x00, 0x1C, 0x00, 0x28, 0x00, 0x2A, 0x00, 0x18, 0x00, 0x1D, 0x00, 0x29, 0x00
	.byte 0x2A, 0x00, 0x19, 0x00, 0x1E, 0x00, 0x2B, 0x00, 0x2C, 0x00, 0x1A, 0x00, 0x1F, 0x00, 0x2D, 0x00
	.byte 0x2E, 0x00, 0x1B, 0x00, 0x20, 0x00, 0x2F, 0x00, 0x30, 0x00, 0x1C, 0x00, 0x21, 0x00, 0x31, 0x00
	.byte 0x32, 0x00, 0x1D, 0x00, 0x22, 0x00, 0x33, 0x00, 0x34, 0x00, 0x1E, 0x00, 0x23, 0x00, 0x35, 0x00
	.byte 0x36, 0x00, 0x1F, 0x00, 0x24, 0x00, 0x33, 0x00, 0x37, 0x00, 0x20, 0x00, 0x25, 0x00, 0x38, 0x00
	.byte 0x39, 0x00, 0x21, 0x00, 0x26, 0x00, 0x3A, 0x00, 0x3B, 0x00, 0x22, 0x00, 0x27, 0x00, 0x3A, 0x00
	.byte 0x3C, 0x00, 0x23, 0x00, 0x28, 0x00, 0x3A, 0x00, 0x3D, 0x00, 0x24, 0x00, 0x29, 0x00, 0x3A, 0x00
	.byte 0x3E, 0x00, 0x25, 0x00, 0x2A, 0x00, 0x3F, 0x00, 0x40, 0x00, 0x26, 0x00, 0x2B, 0x00, 0x47, 0x00
	.byte 0x48, 0x00, 0x2C, 0x00, 0x2C, 0x00, 0x49, 0x00, 0x4A, 0x00, 0x2D, 0x00, 0x2D, 0x00, 0x53, 0x00
	.byte 0x54, 0x00, 0x3F, 0x00, 0x2E, 0x00, 0x55, 0x00, 0x56, 0x00, 0x40, 0x00, 0x2F, 0x00, 0x55, 0x00
	.byte 0x57, 0x00, 0x41, 0x00, 0x30, 0x00, 0x55, 0x00, 0x58, 0x00, 0x42, 0x00, 0x31, 0x00, 0x55, 0x00
	.byte 0x59, 0x00, 0x43, 0x00, 0x32, 0x00, 0x5A, 0x00, 0x5B, 0x00, 0x44, 0x00, 0x33, 0x00, 0x5C, 0x00
	.byte 0x5D, 0x00, 0x45, 0x00, 0x34, 0x00, 0x55, 0x00, 0x5E, 0x00, 0x46, 0x00, 0x35, 0x00, 0x5F, 0x00
	.byte 0x60, 0x00, 0x47, 0x00, 0x36, 0x00, 0xD2, 0x01, 0xD3, 0x01, 0x00, 0x00, 0x37, 0x00, 0x64, 0x00
	.byte 0x61, 0x00, 0x49, 0x00, 0x38, 0x00, 0x64, 0x00, 0x62, 0x00, 0x4A, 0x00, 0x39, 0x00, 0x64, 0x00
	.byte 0x63, 0x00, 0x4B, 0x00, 0x3A, 0x00, 0x64, 0x00, 0x65, 0x00, 0x4C, 0x00, 0x3B, 0x00, 0x64, 0x00
	.byte 0x66, 0x00, 0x4D, 0x00, 0x3C, 0x00, 0x64, 0x00, 0x67, 0x00, 0x4E, 0x00, 0x3D, 0x00, 0x64, 0x00
	.byte 0x68, 0x00, 0x4F, 0x00, 0x3E, 0x00, 0x64, 0x00, 0xD5, 0x01, 0x00, 0x00, 0x3F, 0x00, 0x69, 0x00
	.byte 0x6A, 0x00, 0x50, 0x00, 0x40, 0x00, 0x6B, 0x00, 0x6C, 0x00, 0x51, 0x00, 0x41, 0x00, 0x41, 0x00
	.byte 0x42, 0x00, 0x27, 0x00, 0x42, 0x00, 0x41, 0x00, 0x43, 0x00, 0x28, 0x00, 0x43, 0x00, 0x41, 0x00
	.byte 0x44, 0x00, 0x29, 0x00, 0x44, 0x00, 0x41, 0x00, 0x45, 0x00, 0x2A, 0x00, 0x45, 0x00, 0x41, 0x00
	.byte 0x46, 0x00, 0x2B, 0x00, 0x46, 0x00, 0x33, 0x00, 0x4B, 0x00, 0x2E, 0x00, 0x47, 0x00, 0x4C, 0x00
	.byte 0x4D, 0x00, 0x2F, 0x00, 0x48, 0x00, 0x4E, 0x00, 0x4F, 0x00, 0x30, 0x00, 0x49, 0x00, 0x4E, 0x00
	.byte 0x50, 0x00, 0x31, 0x00, 0x4A, 0x00, 0x4E, 0x00, 0x51, 0x00, 0x32, 0x00, 0x4B, 0x00, 0x4E, 0x00
	.byte 0x52, 0x00, 0x33, 0x00, 0x4C, 0x00, 0x6D, 0x00, 0x6E, 0x00, 0x53, 0x00, 0x4D, 0x00, 0x6D, 0x00
	.byte 0x6F, 0x00, 0x54, 0x00, 0x4E, 0x00, 0x70, 0x00, 0x71, 0x00, 0x55, 0x00, 0x4F, 0x00, 0x6D, 0x00
	.byte 0x72, 0x00, 0x56, 0x00, 0x50, 0x00, 0x73, 0x00, 0x74, 0x00, 0x5D, 0x00, 0x51, 0x00, 0x75, 0x00
	.byte 0x76, 0x00, 0x5E, 0x00, 0x52, 0x00, 0x77, 0x00, 0x78, 0x00, 0x5F, 0x00, 0x53, 0x00, 0x79, 0x00
	.byte 0x7A, 0x00, 0x60, 0x00, 0x54, 0x00, 0x7B, 0x00, 0x7C, 0x00, 0x61, 0x00, 0x55, 0x00, 0x7D, 0x00
	.byte 0x7E, 0x00, 0x62, 0x00, 0x56, 0x00, 0x7F, 0x00, 0x81, 0x00, 0x67, 0x00, 0x57, 0x00, 0x80, 0x00
	.byte 0x81, 0x00, 0x68, 0x00, 0x58, 0x00, 0x82, 0x00, 0x83, 0x00, 0x6A, 0x00, 0x59, 0x00, 0x84, 0x00
	.byte 0x83, 0x00, 0x6B, 0x00, 0x5A, 0x00, 0x85, 0x00, 0x86, 0x00, 0x6C, 0x00, 0x5B, 0x00, 0x87, 0x00
	.byte 0x86, 0x00, 0x6D, 0x00, 0x5C, 0x00, 0x88, 0x00, 0x89, 0x00, 0x6E, 0x00, 0x5D, 0x00, 0x8A, 0x00
	.byte 0x8B, 0x00, 0x6F, 0x00, 0x5E, 0x00, 0xD6, 0x01, 0xD7, 0x01, 0x00, 0x00, 0x5F, 0x00, 0xD8, 0x01
	.byte 0xD9, 0x01, 0x00, 0x00, 0x60, 0x00, 0xDA, 0x01, 0xDB, 0x01, 0x00, 0x00, 0x61, 0x00, 0xDC, 0x01
	.byte 0xDD, 0x01, 0x00, 0x00, 0x62, 0x00, 0xDE, 0x01, 0xDF, 0x01, 0x00, 0x00, 0x63, 0x00, 0x88, 0x01
	.byte 0x89, 0x01, 0x1E, 0x01, 0x64, 0x00, 0x8A, 0x01, 0x89, 0x01, 0x1F, 0x01, 0x65, 0x00, 0xAF, 0x01
	.byte 0xB0, 0x01, 0x65, 0x01, 0x66, 0x00, 0xB1, 0x01, 0xB0, 0x01, 0x66, 0x01, 0x67, 0x00, 0xA9, 0x01
	.byte 0xAA, 0x01, 0x62, 0x01, 0x68, 0x00, 0x69, 0x02, 0x6A, 0x02, 0x00, 0x00, 0x69, 0x00, 0x67, 0x02
	.byte 0x68, 0x02, 0x00, 0x00, 0x6A, 0x00, 0x51, 0x01, 0x52, 0x01, 0x00, 0x00, 0x6B, 0x00, 0xE0, 0x01
	.byte 0xE1, 0x01, 0x00, 0x00, 0x6C, 0x00, 0xE2, 0x01, 0xE3, 0x01, 0x00, 0x00, 0x6D, 0x00, 0xE4, 0x01
	.byte 0xE5, 0x01, 0x00, 0x00, 0x6E, 0x00, 0xE6, 0x01, 0xE7, 0x01, 0x00, 0x00, 0x6F, 0x00, 0xE8, 0x01
	.byte 0xE9, 0x01, 0x00, 0x00, 0x70, 0x00, 0xBB, 0x02, 0xBC, 0x02, 0x00, 0x00, 0x00, 0x00, 0x19, 0x03
	.byte 0x1A, 0x03, 0x00, 0x00, 0x00, 0x00, 0x19, 0x03, 0x1A, 0x03, 0x00, 0x00, 0x00, 0x00, 0x19, 0x03
	.byte 0x1A, 0x03, 0x00, 0x00, 0x00, 0x00, 0x19, 0x03, 0x1A, 0x03, 0x00, 0x00, 0x00, 0x00, 0x19, 0x03
	.byte 0x1A, 0x03, 0x00, 0x00, 0x00, 0x00, 0x19, 0x03, 0x1A, 0x03, 0x00, 0x00, 0x00, 0x00, 0x19, 0x03
	.byte 0x1A, 0x03, 0x00, 0x00, 0x00, 0x00, 0x19, 0x03, 0x1A, 0x03, 0x00, 0x00, 0x00, 0x00, 0x19, 0x03
	.byte 0x1A, 0x03, 0x00, 0x00, 0x00, 0x00, 0x19, 0x03, 0x1A, 0x03, 0x00, 0x00, 0x00, 0x00, 0x19, 0x03
	.byte 0x1A, 0x03, 0x00, 0x00, 0x00, 0x00, 0x19, 0x03, 0x1A, 0x03, 0x00, 0x00, 0x00, 0x00, 0x19, 0x03
	.byte 0x1A, 0x03, 0x00, 0x00, 0x00, 0x00, 0x19, 0x03, 0x1A, 0x03, 0x00, 0x00, 0x00, 0x00, 0x19, 0x03
	.byte 0x1A, 0x03, 0x00, 0x00, 0x00, 0x00, 0x19, 0x03, 0x1A, 0x03, 0x00, 0x00, 0x00, 0x00, 0x19, 0x03
	.byte 0x1A, 0x03, 0x00, 0x00, 0x00, 0x00, 0x19, 0x03, 0x1A, 0x03, 0x00, 0x00, 0x00, 0x00, 0x19, 0x03
	.byte 0x1A, 0x03, 0x00, 0x00, 0x00, 0x00, 0x19, 0x03, 0x1A, 0x03, 0x00, 0x00, 0x00, 0x00, 0x19, 0x03
	.byte 0x1A, 0x03, 0x00, 0x00, 0x00, 0x00, 0x19, 0x03, 0x1A, 0x03, 0x00, 0x00, 0x71, 0x00, 0x88, 0x02
	.byte 0x89, 0x02, 0x00, 0x00, 0x72, 0x00, 0x86, 0x02, 0x87, 0x02, 0x00, 0x00, 0x73, 0x00, 0x8C, 0x00
	.byte 0x8D, 0x00, 0x00, 0x00, 0x74, 0x00, 0x8E, 0x00, 0x8F, 0x00, 0x00, 0x00, 0x75, 0x00, 0x90, 0x00
	.byte 0x91, 0x00, 0x00, 0x00, 0x76, 0x00, 0x92, 0x00, 0x93, 0x00, 0x00, 0x00, 0x77, 0x00, 0x94, 0x00
	.byte 0x95, 0x00, 0x00, 0x00, 0x78, 0x00, 0x96, 0x00, 0x97, 0x00, 0x00, 0x00, 0x79, 0x00, 0x98, 0x00
	.byte 0x99, 0x00, 0x00, 0x00, 0x7A, 0x00, 0x9A, 0x00, 0x9B, 0x00, 0x00, 0x00, 0x7B, 0x00, 0x9C, 0x00
	.byte 0x9D, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x9E, 0x00, 0x9F, 0x00, 0x00, 0x00, 0x7D, 0x00, 0xA0, 0x00
	.byte 0xA1, 0x00, 0x00, 0x00, 0x7E, 0x00, 0xA2, 0x00, 0xA3, 0x00, 0x00, 0x00, 0x7F, 0x00, 0xA4, 0x00
	.byte 0xA5, 0x00, 0x85, 0x00, 0x80, 0x00, 0xA6, 0x00, 0xA7, 0x00, 0x86, 0x00, 0x81, 0x00, 0xA8, 0x00
	.byte 0xA9, 0x00, 0x87, 0x00, 0x82, 0x00, 0xAA, 0x00, 0xAB, 0x00, 0x88, 0x00, 0x83, 0x00, 0xAC, 0x00
	.byte 0xAD, 0x00, 0x89, 0x00, 0x84, 0x00, 0xAE, 0x00, 0xAF, 0x00, 0x8A, 0x00, 0x85, 0x00, 0xB0, 0x00
	.byte 0xB1, 0x00, 0x8B, 0x00, 0x86, 0x00, 0xB2, 0x00, 0xB3, 0x00, 0x8C, 0x00, 0x87, 0x00, 0xB4, 0x00
	.byte 0xB5, 0x00, 0x8D, 0x00, 0x88, 0x00, 0xB6, 0x00, 0xB7, 0x00, 0x8E, 0x00, 0x89, 0x00, 0xB8, 0x00
	.byte 0xB9, 0x00, 0x8F, 0x00, 0x8A, 0x00, 0xBA, 0x00, 0xBB, 0x00, 0x90, 0x00, 0x8B, 0x00, 0xBC, 0x00
	.byte 0xBD, 0x00, 0x91, 0x00, 0x8C, 0x00, 0xBE, 0x00, 0xBF, 0x00, 0x92, 0x00, 0x8D, 0x00, 0xC0, 0x00
	.byte 0xC1, 0x00, 0x93, 0x00, 0x8E, 0x00, 0xC2, 0x00, 0xC3, 0x00, 0x94, 0x00, 0x8F, 0x00, 0xC4, 0x00
	.byte 0xC5, 0x00, 0x95, 0x00, 0x90, 0x00, 0xC6, 0x00, 0xC7, 0x00, 0x96, 0x00, 0x91, 0x00, 0xC8, 0x00
	.byte 0xC9, 0x00, 0x97, 0x00, 0x92, 0x00, 0xCA, 0x00, 0xCB, 0x00, 0x98, 0x00, 0x93, 0x00, 0xCC, 0x00
	.byte 0xCD, 0x00, 0x99, 0x00, 0x94, 0x00, 0xCE, 0x00, 0xCF, 0x00, 0x9A, 0x00, 0x95, 0x00, 0xD0, 0x00
	.byte 0xD1, 0x00, 0x9B, 0x00, 0x96, 0x00, 0xD2, 0x00, 0xD3, 0x00, 0x9C, 0x00, 0x97, 0x00, 0xD4, 0x00
	.byte 0xD5, 0x00, 0x9D, 0x00, 0x98, 0x00, 0xD6, 0x00, 0xD7, 0x00, 0x9E, 0x00, 0x99, 0x00, 0xD8, 0x00
	.byte 0xD9, 0x00, 0x9F, 0x00, 0x9A, 0x00, 0xDA, 0x00, 0xDB, 0x00, 0xA0, 0x00, 0x9B, 0x00, 0xDC, 0x00
	.byte 0xDD, 0x00, 0xA1, 0x00, 0x9C, 0x00, 0xDE, 0x00, 0xDF, 0x00, 0xA2, 0x00, 0x9D, 0x00, 0xE0, 0x00
	.byte 0xE1, 0x00, 0xA3, 0x00, 0x9E, 0x00, 0xE2, 0x00, 0xE3, 0x00, 0xA4, 0x00, 0x9F, 0x00, 0xE4, 0x00
	.byte 0xE5, 0x00, 0xA5, 0x00, 0xA0, 0x00, 0xE6, 0x00, 0xE7, 0x00, 0xA6, 0x00, 0xA1, 0x00, 0xE8, 0x00
	.byte 0xE9, 0x00, 0xA7, 0x00, 0xA2, 0x00, 0x2A, 0x02, 0x2B, 0x02, 0x00, 0x00, 0xA3, 0x00, 0x2C, 0x02
	.byte 0x2D, 0x02, 0x00, 0x00, 0xA4, 0x00, 0x2E, 0x02, 0x2F, 0x02, 0x00, 0x00, 0xA5, 0x00, 0x30, 0x02
	.byte 0x31, 0x02, 0x00, 0x00, 0xA6, 0x00, 0x32, 0x02, 0x33, 0x02, 0x00, 0x00, 0xA7, 0x00, 0x34, 0x02
	.byte 0x35, 0x02, 0x00, 0x00, 0xA8, 0x00, 0x36, 0x02, 0x37, 0x02, 0x00, 0x00, 0xA9, 0x00, 0x38, 0x02
	.byte 0x39, 0x02, 0x00, 0x00, 0xAA, 0x00, 0x3A, 0x02, 0x3B, 0x02, 0x00, 0x00, 0xAB, 0x00, 0x3C, 0x02
	.byte 0x3D, 0x02, 0x00, 0x00, 0xAC, 0x00, 0x3E, 0x02, 0x3F, 0x02, 0x00, 0x00, 0xAD, 0x00, 0x40, 0x02
	.byte 0x41, 0x02, 0x00, 0x00, 0xAE, 0x00, 0x42, 0x02, 0x43, 0x02, 0x00, 0x00, 0xAF, 0x00, 0x44, 0x02
	.byte 0x45, 0x02, 0x00, 0x00, 0xB0, 0x00, 0x46, 0x02, 0x47, 0x02, 0x00, 0x00, 0xB1, 0x00, 0x48, 0x02
	.byte 0x49, 0x02, 0x00, 0x00, 0xB2, 0x00, 0x4A, 0x02, 0x4B, 0x02, 0x00, 0x00, 0xB3, 0x00, 0xEA, 0x00
	.byte 0xEB, 0x00, 0xA8, 0x00, 0xB4, 0x00, 0xEC, 0x00, 0xED, 0x00, 0xA9, 0x00, 0xB5, 0x00, 0xEE, 0x00
	.byte 0xEF, 0x00, 0xAA, 0x00, 0xB6, 0x00, 0xF0, 0x00, 0xF1, 0x00, 0xAB, 0x00, 0xB7, 0x00, 0xF2, 0x00
	.byte 0xF3, 0x00, 0xAC, 0x00, 0xB8, 0x00, 0xF4, 0x00, 0xF5, 0x00, 0xAD, 0x00, 0xB9, 0x00, 0xF6, 0x00
	.byte 0xF7, 0x00, 0xAE, 0x00, 0xBA, 0x00, 0xF8, 0x00, 0xF9, 0x00, 0xAF, 0x00, 0xBB, 0x00, 0x4C, 0x02
	.byte 0x4D, 0x02, 0x00, 0x00, 0xBC, 0x00, 0x4E, 0x02, 0x4F, 0x02, 0x00, 0x00, 0xBD, 0x00, 0x50, 0x02
	.byte 0x51, 0x02, 0x00, 0x00, 0xBE, 0x00, 0x52, 0x02, 0x53, 0x02, 0x00, 0x00, 0xBF, 0x00, 0xFA, 0x00
	.byte 0xFB, 0x00, 0xB3, 0x00, 0xC0, 0x00, 0xFC, 0x00, 0xFD, 0x00, 0xB4, 0x00, 0xC1, 0x00, 0xFE, 0x00
	.byte 0xFF, 0x00, 0xB5, 0x00, 0xC2, 0x00, 0x00, 0x01, 0x01, 0x01, 0xB6, 0x00, 0xC3, 0x00, 0x02, 0x01
	.byte 0x03, 0x01, 0xB7, 0x00, 0xC4, 0x00, 0x04, 0x01, 0x05, 0x01, 0xB8, 0x00, 0xC5, 0x00, 0xFC, 0x00
	.byte 0x06, 0x01, 0xB9, 0x00, 0xC6, 0x00, 0x07, 0x01, 0x08, 0x01, 0xBA, 0x00, 0xC7, 0x00, 0x09, 0x01
	.byte 0x0A, 0x01, 0xBB, 0x00, 0xC8, 0x00, 0x0B, 0x01, 0x0C, 0x01, 0xBC, 0x00, 0xC9, 0x00, 0x0D, 0x01
	.byte 0x0E, 0x01, 0xBD, 0x00, 0xCA, 0x00, 0x0F, 0x01, 0x10, 0x01, 0xBE, 0x00, 0xCB, 0x00, 0x11, 0x01
	.byte 0x12, 0x01, 0xBF, 0x00, 0xCC, 0x00, 0x13, 0x01, 0x14, 0x01, 0xC0, 0x00, 0xCD, 0x00, 0x15, 0x01
	.byte 0x16, 0x01, 0xC1, 0x00, 0xCE, 0x00, 0x17, 0x01, 0x18, 0x01, 0xC2, 0x00, 0xCF, 0x00, 0x19, 0x01
	.byte 0x1A, 0x01, 0xC3, 0x00, 0xD0, 0x00, 0x1B, 0x01, 0x1C, 0x01, 0xC4, 0x00, 0xD1, 0x00, 0x1D, 0x01
	.byte 0x1E, 0x01, 0xC5, 0x00, 0xD2, 0x00, 0x1F, 0x01, 0x20, 0x01, 0xC6, 0x00, 0xD3, 0x00, 0x21, 0x01
	.byte 0x22, 0x01, 0xC7, 0x00, 0xD4, 0x00, 0x23, 0x01, 0x24, 0x01, 0xC8, 0x00, 0xD5, 0x00, 0x25, 0x01
	.byte 0x26, 0x01, 0xC9, 0x00, 0xD6, 0x00, 0x27, 0x01, 0x28, 0x01, 0xCA, 0x00, 0xD7, 0x00, 0x29, 0x01
	.byte 0x2A, 0x01, 0xCB, 0x00, 0xD8, 0x00, 0x2B, 0x01, 0x2C, 0x01, 0xCC, 0x00, 0xD9, 0x00, 0x2D, 0x01
	.byte 0x2E, 0x01, 0xCD, 0x00, 0xDA, 0x00, 0x2F, 0x01, 0x30, 0x01, 0xCE, 0x00, 0xDB, 0x00, 0x31, 0x01
	.byte 0x30, 0x01, 0xCF, 0x00, 0xDC, 0x00, 0x32, 0x01, 0x33, 0x01, 0xD0, 0x00, 0xDD, 0x00, 0x34, 0x01
	.byte 0x35, 0x01, 0xD1, 0x00, 0xDE, 0x00, 0x36, 0x01, 0x37, 0x01, 0xD2, 0x00, 0xDF, 0x00, 0x38, 0x01
	.byte 0x39, 0x01, 0xD3, 0x00, 0xE0, 0x00, 0x3A, 0x01, 0x3B, 0x01, 0xD4, 0x00, 0xE1, 0x00, 0x3C, 0x01
	.byte 0x3D, 0x01, 0xD5, 0x00, 0xE2, 0x00, 0x3E, 0x01, 0x3F, 0x01, 0xD6, 0x00, 0xE3, 0x00, 0x40, 0x01
	.byte 0x41, 0x01, 0xD7, 0x00, 0xE4, 0x00, 0x42, 0x01, 0x43, 0x01, 0xD8, 0x00, 0xE5, 0x00, 0x44, 0x01
	.byte 0x45, 0x01, 0xD9, 0x00, 0xE6, 0x00, 0x46, 0x01, 0x47, 0x01, 0xDA, 0x00, 0xE7, 0x00, 0x48, 0x01
	.byte 0x4D, 0x00, 0xDB, 0x00, 0xE8, 0x00, 0x49, 0x01, 0x4A, 0x01, 0xDC, 0x00, 0xE9, 0x00, 0x4B, 0x01
	.byte 0x4C, 0x01, 0xDD, 0x00, 0xEA, 0x00, 0x4D, 0x01, 0x4E, 0x01, 0xDE, 0x00, 0xEB, 0x00, 0x4F, 0x01
	.byte 0x50, 0x01, 0xDF, 0x00, 0xEC, 0x00, 0x51, 0x01, 0x52, 0x01, 0xE0, 0x00, 0xED, 0x00, 0x53, 0x01
	.byte 0x54, 0x01, 0xE1, 0x00, 0xEE, 0x00, 0x55, 0x01, 0x56, 0x01, 0xFE, 0x00, 0xEF, 0x00, 0x55, 0x01
	.byte 0x57, 0x01, 0xFF, 0x00, 0xF0, 0x00, 0x55, 0x01, 0x58, 0x01, 0x00, 0x01, 0xF1, 0x00, 0x55, 0x01
	.byte 0x59, 0x01, 0x01, 0x01, 0xF2, 0x00, 0x55, 0x01, 0x5A, 0x01, 0x02, 0x01, 0xF3, 0x00, 0xEA, 0x01
	.byte 0xEB, 0x01, 0x00, 0x00, 0xF4, 0x00, 0xEC, 0x01, 0xED, 0x01, 0x00, 0x00, 0xF5, 0x00, 0xEE, 0x01
	.byte 0xEF, 0x01, 0x00, 0x00, 0xF6, 0x00, 0xF0, 0x01, 0xF1, 0x01, 0x00, 0x00, 0xF7, 0x00, 0x63, 0x02
	.byte 0x64, 0x02, 0x00, 0x00, 0xF8, 0x00, 0xF2, 0x01, 0xF3, 0x01, 0x00, 0x00, 0xF9, 0x00, 0xF4, 0x01
	.byte 0xF5, 0x01, 0x00, 0x00, 0xFA, 0x00, 0xF6, 0x01, 0xF7, 0x01, 0x00, 0x00, 0xFB, 0x00, 0xF8, 0x01
	.byte 0xF9, 0x01, 0x00, 0x00, 0xFC, 0x00, 0x4F, 0x01, 0x92, 0x02, 0x00, 0x00, 0xFD, 0x00, 0x93, 0x02
	.byte 0x94, 0x02, 0x00, 0x00, 0xFE, 0x00, 0xFA, 0x01, 0xFB, 0x01, 0x00, 0x00, 0xFF, 0x00, 0xFC, 0x01
	.byte 0xFD, 0x01, 0x00, 0x00, 0x00, 0x01, 0x65, 0x02, 0x66, 0x02, 0x00, 0x00, 0x01, 0x01, 0x8A, 0x02
	.byte 0x8B, 0x02, 0x00, 0x00, 0x02, 0x01, 0x8E, 0x02, 0x8F, 0x02, 0x00, 0x00, 0x03, 0x01, 0xFE, 0x01
	.byte 0xFF, 0x01, 0x00, 0x00, 0x04, 0x01, 0x7C, 0x02, 0x7D, 0x02, 0x00, 0x00, 0x05, 0x01, 0x7E, 0x02
	.byte 0x7F, 0x02, 0x00, 0x00, 0x06, 0x01, 0x80, 0x02, 0x81, 0x02, 0x00, 0x00, 0x07, 0x01, 0x82, 0x02
	.byte 0x83, 0x02, 0x00, 0x00, 0x08, 0x01, 0x8C, 0x02, 0x8D, 0x02, 0x00, 0x00, 0x09, 0x01, 0x00, 0x02
	.byte 0x01, 0x02, 0x00, 0x00, 0x0A, 0x01, 0x02, 0x02, 0x03, 0x02, 0x00, 0x00, 0x0B, 0x01, 0xAB, 0x02
	.byte 0xAC, 0x02, 0x00, 0x00, 0x0C, 0x01, 0xB3, 0x02, 0xB4, 0x02, 0x00, 0x00, 0x0D, 0x01, 0xB5, 0x02
	.byte 0xB6, 0x02, 0x00, 0x00, 0x0E, 0x01, 0xAD, 0x02, 0xAE, 0x02, 0x00, 0x00, 0x0F, 0x01, 0xAF, 0x02
	.byte 0xB0, 0x02, 0x00, 0x00, 0x10, 0x01, 0xB1, 0x02, 0xB2, 0x02, 0x00, 0x00, 0x11, 0x01, 0x04, 0x02
	.byte 0x05, 0x02, 0x00, 0x00, 0x12, 0x01, 0x06, 0x02, 0x07, 0x02, 0x00, 0x00, 0x13, 0x01, 0x08, 0x02
	.byte 0x09, 0x02, 0x00, 0x00, 0x14, 0x01, 0x6B, 0x02, 0x6C, 0x02, 0x00, 0x00, 0x15, 0x01, 0x6B, 0x02
	.byte 0x6D, 0x02, 0x00, 0x00, 0x16, 0x01, 0x6B, 0x02, 0x6E, 0x02, 0x00, 0x00, 0x17, 0x01, 0x6B, 0x02
	.byte 0x6F, 0x02, 0x00, 0x00, 0x18, 0x01, 0x6B, 0x02, 0x70, 0x02, 0x00, 0x00, 0x19, 0x01, 0x6B, 0x02
	.byte 0x71, 0x02, 0x00, 0x00, 0x1A, 0x01, 0x6B, 0x02, 0x72, 0x02, 0x00, 0x00, 0x1B, 0x01, 0x6B, 0x02
	.byte 0x73, 0x02, 0x00, 0x00, 0x1C, 0x01, 0x6B, 0x02, 0x74, 0x02, 0x00, 0x00, 0x1D, 0x01, 0x6B, 0x02
	.byte 0x75, 0x02, 0x00, 0x00, 0x1E, 0x01, 0x6B, 0x02, 0x76, 0x02, 0x00, 0x00, 0x1F, 0x01, 0x6B, 0x02
	.byte 0x77, 0x02, 0x00, 0x00, 0x20, 0x01, 0x6B, 0x02, 0x78, 0x02, 0x00, 0x00, 0x21, 0x01, 0x6B, 0x02
	.byte 0x79, 0x02, 0x00, 0x00, 0x22, 0x01, 0x6B, 0x02, 0x7A, 0x02, 0x00, 0x00, 0x23, 0x01, 0x6B, 0x02
	.byte 0x7B, 0x02, 0x00, 0x00, 0x24, 0x01, 0x0A, 0x02, 0x0B, 0x02, 0x00, 0x00, 0x25, 0x01, 0x0C, 0x02
	.byte 0x0D, 0x02, 0x00, 0x00, 0x26, 0x01, 0x0E, 0x02, 0x0F, 0x02, 0x00, 0x00, 0x27, 0x01, 0x10, 0x02
	.byte 0x11, 0x02, 0x00, 0x00, 0x28, 0x01, 0x12, 0x02, 0x13, 0x02, 0x00, 0x00, 0x29, 0x01, 0x14, 0x02
	.byte 0x15, 0x02, 0x00, 0x00, 0x2A, 0x01, 0x16, 0x02, 0x17, 0x02, 0x00, 0x00, 0x2B, 0x01, 0xB7, 0x02
	.byte 0xB8, 0x02, 0x00, 0x00, 0x2C, 0x01, 0x18, 0x02, 0x19, 0x02, 0x00, 0x00, 0x2D, 0x01, 0x1A, 0x02
	.byte 0x1B, 0x02, 0x00, 0x00, 0x2E, 0x01, 0x1C, 0x02, 0x1D, 0x02, 0x00, 0x00, 0x2F, 0x01, 0x1E, 0x02
	.byte 0x1F, 0x02, 0x00, 0x00, 0x30, 0x01, 0x20, 0x02, 0x21, 0x02, 0x00, 0x00, 0x31, 0x01, 0x22, 0x02
	.byte 0x23, 0x02, 0x00, 0x00, 0x32, 0x01, 0x8D, 0x01, 0x8E, 0x01, 0x21, 0x01, 0x33, 0x01, 0x8D, 0x01
	.byte 0x8F, 0x01, 0x22, 0x01, 0x34, 0x01, 0x8D, 0x01, 0x90, 0x01, 0x23, 0x01, 0x35, 0x01, 0x8D, 0x01
	.byte 0x91, 0x01, 0x24, 0x01, 0x36, 0x01, 0x8D, 0x01, 0x92, 0x01, 0x25, 0x01, 0x37, 0x01, 0x8D, 0x01
	.byte 0x93, 0x01, 0x26, 0x01, 0x38, 0x01, 0x8D, 0x01, 0x94, 0x01, 0x27, 0x01, 0x39, 0x01, 0x8D, 0x01
	.byte 0x8E, 0x01, 0x28, 0x01, 0x3A, 0x01, 0x8D, 0x01, 0x95, 0x01, 0x29, 0x01, 0x3B, 0x01, 0x8D, 0x01
	.byte 0x92, 0x01, 0x2A, 0x01, 0x3C, 0x01, 0x8D, 0x01, 0x96, 0x01, 0x2B, 0x01, 0x3D, 0x01, 0x8D, 0x01
	.byte 0x97, 0x01, 0x2C, 0x01, 0x3E, 0x01, 0x8D, 0x01, 0x94, 0x01, 0x2D, 0x01, 0x3F, 0x01, 0x8D, 0x01
	.byte 0x94, 0x01, 0x2E, 0x01, 0x40, 0x01, 0x8D, 0x01, 0x92, 0x01, 0x2F, 0x01, 0x41, 0x01, 0x8D, 0x01
	.byte 0x91, 0x01, 0x30, 0x01, 0x42, 0x01, 0x8D, 0x01, 0x92, 0x01, 0x31, 0x01, 0x43, 0x01, 0x8D, 0x01
	.byte 0x90, 0x01, 0x32, 0x01, 0x44, 0x01, 0x8D, 0x01, 0x95, 0x01, 0x33, 0x01, 0x45, 0x01, 0x8D, 0x01
	.byte 0x92, 0x01, 0x34, 0x01, 0x46, 0x01, 0x8D, 0x01, 0x92, 0x01, 0x35, 0x01, 0x47, 0x01, 0x8D, 0x01
	.byte 0x95, 0x01, 0x36, 0x01, 0x48, 0x01, 0x8D, 0x01, 0x98, 0x01, 0x37, 0x01, 0x49, 0x01, 0x8D, 0x01
	.byte 0x99, 0x01, 0x38, 0x01, 0x4A, 0x01, 0x8D, 0x01, 0x99, 0x01, 0x39, 0x01, 0x4B, 0x01, 0x8D, 0x01
	.byte 0x9A, 0x01, 0x3A, 0x01, 0x4C, 0x01, 0x8D, 0x01, 0x92, 0x01, 0x3B, 0x01, 0x4D, 0x01, 0x8D, 0x01
	.byte 0x9A, 0x01, 0x3C, 0x01, 0x4E, 0x01, 0x8D, 0x01, 0x91, 0x01, 0x3D, 0x01, 0x4F, 0x01, 0x8D, 0x01
	.byte 0x9B, 0x01, 0x3E, 0x01, 0x50, 0x01, 0x8D, 0x01, 0x8E, 0x01, 0x3F, 0x01, 0x51, 0x01, 0x8D, 0x01
	.byte 0x92, 0x01, 0x40, 0x01, 0x52, 0x01, 0x8D, 0x01, 0x91, 0x01, 0x41, 0x01, 0x53, 0x01, 0x8D, 0x01
	.byte 0x99, 0x01, 0x42, 0x01, 0x54, 0x01, 0x8D, 0x01, 0x96, 0x01, 0x43, 0x01, 0x55, 0x01, 0x8D, 0x01
	.byte 0x93, 0x01, 0x44, 0x01, 0x56, 0x01, 0x8D, 0x01, 0x9C, 0x01, 0x45, 0x01, 0x57, 0x01, 0x8D, 0x01
	.byte 0x96, 0x01, 0x46, 0x01, 0x58, 0x01, 0x8D, 0x01, 0x9C, 0x01, 0x47, 0x01, 0x59, 0x01, 0x8D, 0x01
	.byte 0x9D, 0x01, 0x48, 0x01, 0x5A, 0x01, 0x8D, 0x01, 0x97, 0x01, 0x49, 0x01, 0x5B, 0x01, 0x8D, 0x01
	.byte 0x92, 0x01, 0x4A, 0x01, 0x5C, 0x01, 0x8D, 0x01, 0x92, 0x01, 0x4B, 0x01, 0x5D, 0x01, 0x8D, 0x01
	.byte 0x91, 0x01, 0x4C, 0x01, 0x5E, 0x01, 0x8D, 0x01, 0x92, 0x01, 0x4D, 0x01, 0x5F, 0x01, 0x8D, 0x01
	.byte 0x97, 0x01, 0x4E, 0x01, 0x60, 0x01, 0x8D, 0x01, 0x98, 0x01, 0x4F, 0x01, 0x61, 0x01, 0x8D, 0x01
	.byte 0x91, 0x01, 0x50, 0x01, 0x62, 0x01, 0x8D, 0x01, 0x97, 0x01, 0x51, 0x01, 0x63, 0x01, 0x8D, 0x01
	.byte 0x96, 0x01, 0x52, 0x01, 0x64, 0x01, 0x8D, 0x01, 0x9D, 0x01, 0x00, 0x00, 0x65, 0x01, 0x8D, 0x01
	.byte 0x8E, 0x01, 0x00, 0x00, 0x66, 0x01, 0x8D, 0x01, 0x95, 0x01, 0x00, 0x00, 0x67, 0x01, 0x8D, 0x01
	.byte 0x92, 0x01, 0x00, 0x00, 0x68, 0x01, 0x8D, 0x01, 0x90, 0x01, 0x00, 0x00, 0x69, 0x01, 0x8D, 0x01
	.byte 0x97, 0x01, 0x00, 0x00, 0x6A, 0x01, 0x8D, 0x01, 0x99, 0x01, 0x00, 0x00, 0x6B, 0x01, 0x8D, 0x01
	.byte 0x92, 0x01, 0x00, 0x00, 0x6C, 0x01, 0x8D, 0x01, 0x8F, 0x01, 0x00, 0x00, 0x6D, 0x01, 0x8D, 0x01
	.byte 0x8E, 0x01, 0x00, 0x00, 0x6E, 0x01, 0x8D, 0x01, 0x96, 0x01, 0x00, 0x00, 0x6F, 0x01, 0x8D, 0x01
	.byte 0x62, 0x02, 0x00, 0x00, 0x70, 0x01, 0x8D, 0x01, 0x97, 0x01, 0x00, 0x00, 0x71, 0x01, 0x8D, 0x01
	.byte 0x92, 0x01, 0x00, 0x00, 0x72, 0x01, 0x8D, 0x01, 0x9B, 0x01, 0x00, 0x00, 0x73, 0x01, 0x8D, 0x01
	.byte 0x97, 0x01, 0x00, 0x00, 0x74, 0x01, 0x8D, 0x01, 0x92, 0x01, 0x00, 0x00, 0x75, 0x01, 0x8D, 0x01
	.byte 0x92, 0x01, 0x00, 0x00, 0x76, 0x01, 0x8D, 0x01, 0x9C, 0x01, 0x00, 0x00, 0x77, 0x01, 0x8D, 0x01
	.byte 0x92, 0x01, 0x00, 0x00, 0x78, 0x01, 0x8D, 0x01, 0x9C, 0x01, 0x00, 0x00, 0x79, 0x01, 0x8D, 0x01
	.byte 0x94, 0x01, 0x00, 0x00, 0x7A, 0x01, 0x8D, 0x01, 0x99, 0x01, 0x00, 0x00, 0x7B, 0x01, 0x8D, 0x01
	.byte 0x98, 0x01, 0x00, 0x00, 0x7C, 0x01, 0x8D, 0x01, 0x92, 0x01, 0x00, 0x00, 0x7D, 0x01, 0x8D, 0x01
	.byte 0x9C, 0x01, 0x00, 0x00, 0x7E, 0x01, 0x8D, 0x01, 0x92, 0x01, 0x00, 0x00, 0x7F, 0x01, 0x8D, 0x01
	.byte 0x92, 0x01, 0x00, 0x00, 0x80, 0x01, 0x8D, 0x01, 0x97, 0x01, 0x00, 0x00, 0x81, 0x01, 0x8D, 0x01
	.byte 0x9C, 0x01, 0x00, 0x00, 0x82, 0x01, 0x8D, 0x01, 0x62, 0x02, 0x00, 0x00, 0x83, 0x01, 0x8D, 0x01
	.byte 0x92, 0x01, 0x00, 0x00, 0x84, 0x01, 0x8D, 0x01, 0x92, 0x01, 0x00, 0x00, 0x85, 0x01, 0x8D, 0x01
	.byte 0x93, 0x01, 0x00, 0x00, 0x86, 0x01, 0x8D, 0x01, 0x91, 0x01, 0x00, 0x00, 0x87, 0x01, 0x8D, 0x01
	.byte 0x95, 0x01, 0x00, 0x00, 0x88, 0x01, 0x8D, 0x01, 0x92, 0x01, 0x00, 0x00, 0x89, 0x01, 0x8D, 0x01
	.byte 0x9D, 0x01, 0x00, 0x00, 0x8A, 0x01, 0x8D, 0x01, 0x62, 0x02, 0x00, 0x00, 0x8B, 0x01, 0x8D, 0x01
	.byte 0x92, 0x01, 0x00, 0x00, 0x8C, 0x01, 0x8D, 0x01, 0x98, 0x01, 0x00, 0x00, 0x8D, 0x01, 0x8D, 0x01
	.byte 0x91, 0x01, 0x00, 0x00, 0x8E, 0x01, 0x9E, 0x01, 0x92, 0x01, 0x53, 0x01, 0x8F, 0x01, 0x9E, 0x01
	.byte 0x9D, 0x01, 0x54, 0x01, 0x90, 0x01, 0x9E, 0x01, 0x90, 0x01, 0x55, 0x01, 0x91, 0x01, 0x9E, 0x01
	.byte 0x92, 0x01, 0x56, 0x01, 0x92, 0x01, 0x9E, 0x01, 0x90, 0x01, 0x57, 0x01, 0x93, 0x01, 0x9E, 0x01
	.byte 0x8E, 0x01, 0x58, 0x01, 0x94, 0x01, 0x9E, 0x01, 0x90, 0x01, 0x59, 0x01, 0x95, 0x01, 0x9E, 0x01
	.byte 0x92, 0x01, 0x5A, 0x01, 0x00, 0x00, 0x19, 0x03, 0x1A, 0x03, 0x00, 0x00, 0x96, 0x01, 0x26, 0x02
	.byte 0x27, 0x02, 0x00, 0x00, 0x97, 0x01, 0x28, 0x02, 0x29, 0x02, 0x00, 0x00, 0x98, 0x01, 0xB9, 0x02
	.byte 0xBA, 0x02, 0x00, 0x00, 0x99, 0x01, 0xA9, 0x02, 0xAA, 0x02, 0x00, 0x00, 0x9A, 0x01, 0x5E, 0x02
	.byte 0x5F, 0x02, 0x00, 0x00, 0x9B, 0x01, 0x9F, 0x02, 0xA0, 0x02, 0x00, 0x00, 0x9C, 0x01, 0xA3, 0x02
	.byte 0xA4, 0x02, 0x00, 0x00, 0x9D, 0x01, 0xA1, 0x02, 0xA2, 0x02, 0x00, 0x00, 0x9E, 0x01, 0x95, 0x02
	.byte 0x96, 0x02, 0x00, 0x00, 0x9F, 0x01, 0x84, 0x02, 0x85, 0x02, 0x00, 0x00, 0xA0, 0x01, 0x5C, 0x02
	.byte 0x5D, 0x02, 0x00, 0x00, 0xA1, 0x01, 0x90, 0x02, 0x91, 0x02, 0x00, 0x00, 0xA2, 0x01, 0xA7, 0x02
	.byte 0xA8, 0x02, 0x00, 0x00, 0xA3, 0x01, 0xB7, 0x01, 0xB8, 0x01, 0x69, 0x01, 0xA4, 0x01, 0xB9, 0x01
	.byte 0xBA, 0x01, 0x6A, 0x01, 0xA5, 0x01, 0x5D, 0x01, 0x5E, 0x01, 0x04, 0x01, 0xA6, 0x01, 0x61, 0x01
	.byte 0x62, 0x01, 0x06, 0x01, 0xA7, 0x01, 0x63, 0x01, 0x64, 0x01, 0x07, 0x01, 0xA8, 0x01, 0x65, 0x01
	.byte 0x66, 0x01, 0x08, 0x01, 0xA9, 0x01, 0x6B, 0x01, 0x6C, 0x01, 0x00, 0x00, 0xAA, 0x01, 0x75, 0x01
	.byte 0x76, 0x01, 0x00, 0x00, 0xAB, 0x01, 0xB5, 0x01, 0xB6, 0x01, 0x68, 0x01, 0xAC, 0x01, 0xAD, 0x01
	.byte 0xAE, 0x01, 0x00, 0x00, 0xAD, 0x01, 0x77, 0x01, 0x40, 0x00, 0x00, 0x00, 0xAE, 0x01, 0x5A, 0x02
	.byte 0x5B, 0x02, 0x00, 0x00, 0xAF, 0x01, 0x60, 0x02, 0x61, 0x02, 0x00, 0x00, 0xB0, 0x01, 0xA5, 0x02
	.byte 0xA6, 0x02, 0x00, 0x00, 0xB1, 0x01, 0x67, 0x01, 0x68, 0x01, 0x09, 0x01, 0xB2, 0x01, 0x69, 0x01
	.byte 0x6A, 0x01, 0x0A, 0x01, 0xB3, 0x01, 0x54, 0x02, 0x55, 0x02, 0x00, 0x00, 0xB4, 0x01, 0x9F, 0x01
	.byte 0xA0, 0x01, 0x5D, 0x01, 0xB5, 0x01, 0xA1, 0x01, 0xA2, 0x01, 0x00, 0x00, 0xB6, 0x01, 0xA3, 0x01
	.byte 0xA4, 0x01, 0x00, 0x00, 0xB7, 0x01, 0xA5, 0x01, 0xA6, 0x01, 0x00, 0x00, 0xB8, 0x01, 0x56, 0x02
	.byte 0x57, 0x02, 0x1D, 0x01, 0xB9, 0x01, 0x58, 0x02, 0x59, 0x02, 0x00, 0x00, 0xBA, 0x01, 0xBD, 0x02
	.byte 0xBE, 0x02, 0x00, 0x00, 0xBB, 0x01, 0xBF, 0x02, 0xC0, 0x02, 0x00, 0x00, 0xBC, 0x01, 0xC1, 0x02
	.byte 0xC2, 0x02, 0x5F, 0x01, 0xBD, 0x01, 0xC5, 0x02, 0xC6, 0x02, 0x00, 0x00, 0xBE, 0x01, 0xF7, 0x02
	.byte 0xF8, 0x02, 0x00, 0x00, 0xBF, 0x01, 0xC7, 0x02, 0xC8, 0x02, 0x00, 0x00, 0xC0, 0x01, 0xEB, 0x02
	.byte 0xEC, 0x02, 0x05, 0x01, 0xC1, 0x01, 0xF9, 0x02, 0xFA, 0x02, 0x00, 0x00, 0xC2, 0x01, 0xFB, 0x02
	.byte 0xFC, 0x02, 0x00, 0x00, 0xC3, 0x01, 0xFD, 0x02, 0xFE, 0x02, 0x00, 0x00, 0xC4, 0x01, 0xFF, 0x02
	.byte 0x00, 0x03, 0x63, 0x01, 0xC5, 0x01, 0x01, 0x03, 0x02, 0x03, 0x0F, 0x01, 0xC6, 0x01, 0xC9, 0x02
	.byte 0xCA, 0x02, 0x00, 0x00, 0xC7, 0x01, 0x03, 0x03, 0x04, 0x03, 0x00, 0x00, 0xC8, 0x01, 0x05, 0x03
	.byte 0x06, 0x03, 0x00, 0x00, 0xC9, 0x01, 0x07, 0x03, 0x08, 0x03, 0x00, 0x00, 0xCA, 0x01, 0x09, 0x03
	.byte 0x0A, 0x03, 0x00, 0x00, 0xCB, 0x01, 0x0B, 0x03, 0x0C, 0x03, 0x00, 0x00, 0xCC, 0x01, 0x0D, 0x03
	.byte 0x0E, 0x03, 0x00, 0x00, 0xCD, 0x01, 0x0F, 0x03, 0x10, 0x03, 0x00, 0x00, 0xCE, 0x01, 0xDD, 0x02
	.byte 0xDE, 0x02, 0x00, 0x00, 0xCF, 0x01, 0xE1, 0x02, 0xE2, 0x02, 0x00, 0x00, 0xD0, 0x01, 0xDF, 0x02
	.byte 0xE0, 0x02, 0x00, 0x00, 0xD1, 0x01, 0xE3, 0x02, 0xE4, 0x02, 0x00, 0x00, 0xD2, 0x01, 0xE5, 0x02
	.byte 0xE6, 0x02, 0x00, 0x00, 0xD3, 0x01, 0xE7, 0x02, 0xE8, 0x02, 0x00, 0x00, 0xD4, 0x01, 0xE9, 0x02
	.byte 0xEA, 0x02, 0x00, 0x00, 0xD5, 0x01, 0xD3, 0x02, 0xD4, 0x02, 0x00, 0x00, 0xD6, 0x01, 0xCD, 0x02
	.byte 0xCE, 0x02, 0x00, 0x00, 0xD7, 0x01, 0xCB, 0x02, 0xCC, 0x02, 0x00, 0x00, 0xD8, 0x01, 0xD1, 0x02
	.byte 0xD2, 0x02, 0x00, 0x00, 0xD9, 0x01, 0xD7, 0x02, 0xD8, 0x02, 0x00, 0x00, 0xDA, 0x01, 0xD5, 0x02
	.byte 0xD6, 0x02, 0x00, 0x00, 0xDB, 0x01, 0xCF, 0x02, 0xD0, 0x02, 0x00, 0x00, 0xDC, 0x01, 0xDB, 0x02
	.byte 0xDC, 0x02, 0x00, 0x00, 0xDD, 0x01, 0xD9, 0x02, 0xDA, 0x02, 0x00, 0x00, 0xDE, 0x01, 0x5E, 0x02
	.byte 0x5F, 0x02, 0x00, 0x00, 0xDF, 0x01, 0x11, 0x03, 0x12, 0x03, 0x00, 0x00, 0xE0, 0x01, 0x13, 0x03
	.byte 0x14, 0x03, 0x00, 0x00, 0xE1, 0x01, 0xED, 0x02, 0xEE, 0x02, 0x00, 0x00, 0xE2, 0x01, 0x15, 0x03
	.byte 0x16, 0x03, 0x00, 0x00, 0xE3, 0x01, 0x15, 0x03, 0x16, 0x03, 0x00, 0x00, 0xE4, 0x01, 0x15, 0x03
	.byte 0x16, 0x03, 0x00, 0x00, 0xE5, 0x01, 0x15, 0x03, 0x16, 0x03, 0x00, 0x00, 0xE6, 0x01, 0x15, 0x03
	.byte 0x16, 0x03, 0x00, 0x00, 0xE7, 0x01, 0x15, 0x03, 0x16, 0x03, 0x00, 0x00, 0xE8, 0x01, 0x15, 0x03
	.byte 0x16, 0x03, 0x00, 0x00, 0xE9, 0x01, 0x15, 0x03, 0x16, 0x03, 0x00, 0x00, 0xEA, 0x01, 0x15, 0x03
	.byte 0x16, 0x03, 0x00, 0x00, 0xEB, 0x01, 0x15, 0x03, 0x16, 0x03, 0x00, 0x00, 0xEC, 0x01, 0x15, 0x03
	.byte 0x16, 0x03, 0x00, 0x00, 0xED, 0x01, 0x15, 0x03, 0x16, 0x03, 0x00, 0x00, 0xEE, 0x01, 0x15, 0x03
	.byte 0x16, 0x03, 0x00, 0x00, 0xEF, 0x01, 0x15, 0x03, 0x16, 0x03, 0x00, 0x00, 0xF0, 0x01, 0x15, 0x03
	.byte 0x16, 0x03, 0x00, 0x00, 0xF1, 0x01, 0x15, 0x03, 0x16, 0x03, 0x00, 0x00, 0xF2, 0x01, 0x15, 0x03
	.byte 0x16, 0x03, 0x00, 0x00, 0xF3, 0x01, 0x15, 0x03, 0x16, 0x03, 0x00, 0x00, 0xF4, 0x01, 0x15, 0x03
	.byte 0x16, 0x03, 0x00, 0x00, 0xF5, 0x01, 0x15, 0x03, 0x16, 0x03, 0x00, 0x00, 0xF6, 0x01, 0x15, 0x03
	.byte 0x16, 0x03, 0x00, 0x00, 0xF7, 0x01, 0x15, 0x03, 0x16, 0x03, 0x00, 0x00, 0xF8, 0x01, 0x15, 0x03
	.byte 0x16, 0x03, 0x00, 0x00, 0xF9, 0x01, 0x15, 0x03, 0x16, 0x03, 0x00, 0x00, 0xFA, 0x01, 0x15, 0x03
	.byte 0x16, 0x03, 0x00, 0x00, 0xFB, 0x01, 0x15, 0x03, 0x16, 0x03, 0x00, 0x00, 0xFC, 0x01, 0x15, 0x03
	.byte 0x16, 0x03, 0x00, 0x00, 0xFD, 0x01, 0xF3, 0x02, 0xF4, 0x02, 0x00, 0x00, 0xFE, 0x01, 0x17, 0x03
	.byte 0x18, 0x03, 0x00, 0x00, 0xFF, 0x01, 0xEF, 0x02, 0xF0, 0x02, 0x14, 0x01, 0x00, 0x02, 0xF1, 0x02
	.byte 0xF2, 0x02, 0x15, 0x01, 0x01, 0x02, 0xF5, 0x02, 0xF6, 0x02, 0x00, 0x00, 0x03, 0x04, 0x04, 0x04
	.byte 0x41, 0xC5, 0x25, 0x02, 0x8D, 0xC5, 0x25, 0x02, 0xED, 0xC9, 0x25, 0x02, 0x5B, 0x00, 0x00, 0x00
	.byte 0xB5, 0xCA, 0x25, 0x02, 0xF5, 0xCD, 0x25, 0x02, 0x6D, 0xD3, 0x25, 0x02, 0x5C, 0x00, 0x00, 0x00
	.byte 0xA9, 0x2E, 0x23, 0x02, 0x65, 0x2F, 0x23, 0x02, 0xA9, 0x30, 0x23, 0x02, 0x2C, 0x00, 0x00, 0x00
	.byte 0xB5, 0xA4, 0x22, 0x02, 0x0D, 0xA6, 0x22, 0x02, 0x59, 0xA7, 0x22, 0x02, 0x2C, 0x00, 0x00, 0x00
	.byte 0x41, 0xC5, 0x25, 0x02, 0x75, 0xC5, 0x25, 0x02, 0xC1, 0xC6, 0x25, 0x02, 0x5D, 0x00, 0x00, 0x00
	.byte 0x01, 0x03, 0x1A, 0x03, 0x01, 0x0A, 0x1A, 0x0A, 0x01, 0x11, 0x1A, 0x11, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x04, 0x01
	.byte 0x03, 0x05, 0x01, 0x03, 0x05, 0x00, 0x02, 0x04, 0x04, 0x02, 0x00, 0x05, 0x03, 0x01, 0x05, 0x03
	.byte 0x01, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x1C, 0x04, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x1E, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x1D, 0x04
	.byte 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x1B, 0x04, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x1F, 0x02
	.byte 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x1E, 0x00, 0x00, 0x01, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x13, 0x00, 0x39, 0x00, 0x46, 0x00, 0xF9, 0x00, 0x7F, 0x00
	.byte 0xAF, 0x01, 0xFA, 0x00, 0x94, 0x00, 0x64, 0x00, 0x5B, 0x00, 0xE6, 0x00, 0xC0, 0x01, 0x1D, 0x00
	.byte 0xD0, 0x00, 0x87, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x40, 0x19, 0x00, 0x00
	.byte 0x07, 0x02, 0x07, 0x01, 0xC0, 0x21, 0x00, 0x00, 0x07, 0x03, 0x00, 0x02, 0x40, 0x49, 0x00, 0x00
	.byte 0x00, 0x04, 0x01, 0x03, 0xC0, 0x51, 0x00, 0x00, 0x01, 0x05, 0x02, 0x04, 0x40, 0x79, 0x00, 0x00
	.byte 0x02, 0x07, 0x03, 0x05, 0xC0, 0x81, 0x00, 0x00, 0x03, 0x07, 0x04, 0x07, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0xE0, 0xA8, 0x00, 0x00, 0x05, 0x01, 0x05, 0x00, 0x40, 0x19, 0x00, 0x00
	.byte 0x04, 0x02, 0x01, 0x01, 0xC0, 0x19, 0x00, 0x00, 0x07, 0x03, 0x00, 0x00, 0x40, 0x49, 0x00, 0x00
	.byte 0x00, 0x04, 0x03, 0x03, 0xC0, 0x49, 0x00, 0x00, 0x01, 0x05, 0x02, 0x02, 0x40, 0x79, 0x00, 0x00
	.byte 0x02, 0x00, 0x05, 0x05, 0xC0, 0x79, 0x00, 0x00, 0x03, 0x07, 0x04, 0x04, 0xE0, 0xA8, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0xE0, 0xA8, 0x00, 0x00, 0x05, 0x01, 0xFF, 0xFF, 0x40, 0x19, 0x00, 0x00
	.byte 0x07, 0x02, 0x07, 0x01, 0xC0, 0x21, 0x00, 0x00, 0x07, 0x03, 0x00, 0x02, 0x40, 0x49, 0x00, 0x00
	.byte 0x00, 0x04, 0x01, 0x03, 0xC0, 0x51, 0x00, 0x00, 0x01, 0x05, 0x02, 0x04, 0x40, 0x79, 0x00, 0x00
	.byte 0x02, 0x06, 0x03, 0x05, 0xC0, 0x81, 0x00, 0x00, 0x03, 0x06, 0x04, 0x06, 0xE0, 0xA8, 0x00, 0x00
	.byte 0x05, 0x07, 0x05, 0x07, 0xE0, 0xB8, 0x00, 0x00, 0x06, 0x01, 0x06, 0x00, 0x40, 0x19, 0x00, 0x00
	.byte 0x05, 0x02, 0x05, 0x01, 0xC0, 0x21, 0x00, 0x00, 0x05, 0x03, 0x00, 0x02, 0x40, 0x49, 0x00, 0x00
	.byte 0x00, 0x04, 0x01, 0x03, 0xC0, 0x51, 0x00, 0x00, 0x01, 0x05, 0x02, 0x04, 0x40, 0x79, 0x00, 0x00
	.byte 0x02, 0x00, 0x03, 0x05, 0xC0, 0x81, 0x00, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x1E, 0x00, 0x10, 0x00, 0x10, 0x00, 0x0E, 0x00, 0x10, 0x00, 0x01, 0x00, 0x9E, 0x00, 0x18, 0x00
	.byte 0x90, 0x00, 0x16, 0x00, 0x00, 0x00, 0x06, 0x00, 0x1E, 0x00, 0x40, 0x00, 0x10, 0x00, 0x3E, 0x00
	.byte 0x10, 0x00, 0x07, 0x00, 0x9E, 0x00, 0x48, 0x00, 0x90, 0x00, 0x46, 0x00, 0x00, 0x00, 0x0C, 0x00
	.byte 0x1E, 0x00, 0x70, 0x00, 0x10, 0x00, 0x6E, 0x00, 0x10, 0x00, 0x0D, 0x00, 0x9E, 0x00, 0x78, 0x00
	.byte 0x90, 0x00, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x10, 0x00, 0x10, 0x00, 0x0E, 0x00
	.byte 0x10, 0x00, 0x00, 0x00, 0x9E, 0x00, 0x10, 0x00, 0x90, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x06, 0x00
	.byte 0x1E, 0x00, 0x40, 0x00, 0x10, 0x00, 0x3E, 0x00, 0x10, 0x00, 0x06, 0x00, 0x9E, 0x00, 0x40, 0x00
	.byte 0x90, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x1E, 0x00, 0x70, 0x00, 0x10, 0x00, 0x6E, 0x00
	.byte 0x10, 0x00, 0x0C, 0x00, 0x9E, 0x00, 0x70, 0x00, 0x90, 0x00, 0x6E, 0x00, 0x31, 0x8E, 0x07, 0x02
	.byte 0x35, 0x90, 0x07, 0x02, 0xE1, 0x95, 0x07, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x02, 0x00
	.byte 0x06, 0x00, 0x08, 0x00, 0x03, 0x00, 0x05, 0x00, 0x01, 0x00, 0x07, 0x00, 0x08, 0x00, 0x02, 0x00
	.byte 0x14, 0x00, 0x0E, 0x00, 0x09, 0x00, 0x03, 0x00, 0x15, 0x00, 0x0F, 0x00, 0x0A, 0x00, 0x04, 0x00
	.byte 0x16, 0x00, 0x10, 0x00, 0x0B, 0x00, 0x05, 0x00, 0x17, 0x00, 0x11, 0x00, 0x0C, 0x00, 0x06, 0x00
	.byte 0x18, 0x00, 0x12, 0x00, 0x0D, 0x00, 0x07, 0x00, 0x19, 0x00, 0x13, 0x00, 0x10, 0x03, 0x10, 0x04
	.byte 0x10, 0x07, 0x10, 0x04, 0x10, 0x0B, 0x10, 0x04, 0x00, 0x02, 0x10, 0x04, 0x00, 0x06, 0x10, 0x04
	.byte 0x00, 0x0A, 0x10, 0x04, 0x00, 0x0E, 0x10, 0x04, 0x19, 0x13, 0x07, 0x05, 0x10, 0x02, 0x10, 0x04
	.byte 0x10, 0x06, 0x10, 0x04, 0x10, 0x0A, 0x10, 0x04, 0x10, 0x0E, 0x10, 0x04, 0x01, 0x1A, 0x15, 0x05
	.byte 0x02, 0x00, 0x80, 0x01, 0x01, 0x19, 0x14, 0x07, 0x02, 0x00, 0x8A, 0x01, 0x00, 0x02, 0x15, 0x14
	.byte 0x02, 0x0D, 0x98, 0x01, 0x00, 0x02, 0x13, 0x0D, 0x04, 0x0D, 0xC0, 0x01, 0x00, 0x02, 0x13, 0x1B
	.byte 0x04, 0x0D, 0xF4, 0x01, 0x00, 0x13, 0x11, 0x0C, 0x06, 0x00, 0x60, 0x02, 0x00, 0x13, 0x0F, 0x0C
	.byte 0x08, 0x00, 0x60, 0x02, 0x00, 0x11, 0x04, 0x0E, 0x02, 0x02, 0x60, 0x02, 0x00, 0x11, 0x08, 0x0E
	.byte 0x02, 0x02, 0x7C, 0x02, 0x00, 0x11, 0x0C, 0x0E, 0x02, 0x02, 0x98, 0x02, 0x00, 0x01, 0x03, 0x0E
	.byte 0x02, 0x02, 0xB4, 0x02, 0x00, 0x01, 0x07, 0x0E, 0x02, 0x02, 0xD0, 0x02, 0x00, 0x01, 0x0B, 0x0E
	.byte 0x02, 0x02, 0xEC, 0x02, 0x00, 0x01, 0x0F, 0x0E, 0x02, 0x02, 0x08, 0x03, 0x00, 0x1A, 0x14, 0x05
	.byte 0x03, 0x02, 0x24, 0x03, 0x00, 0x11, 0x03, 0x0E, 0x02, 0x02, 0x60, 0x02, 0x00, 0x11, 0x07, 0x0E
	.byte 0x02, 0x02, 0x7C, 0x02, 0x00, 0x11, 0x0B, 0x0E, 0x02, 0x02, 0x98, 0x02, 0x00, 0x11, 0x0F, 0x0E
	.byte 0x02, 0x02, 0xB4, 0x02, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x08, 0x07, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x01, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x08, 0x09, 0x07, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x01, 0x02, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0x08, 0x09, 0x0A, 0x07
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x01, 0x02, 0x07, 0x03, 0xFF, 0xFF, 0xFF, 0x08, 0x09, 0x0A, 0x0B
	.byte 0x07, 0xFF, 0xFF, 0xFF, 0x00, 0x01, 0x02, 0x07, 0x03, 0x04, 0xFF, 0xFF, 0x00, 0x01, 0x02, 0x03
	.byte 0x04, 0x08, 0xFF, 0xFF, 0x00, 0x01, 0x02, 0x07, 0x03, 0x04, 0x05, 0xFF, 0x00, 0x01, 0x02, 0x03
	.byte 0x04, 0x05, 0x08, 0xFF, 0x00, 0x01, 0x02, 0x07, 0x03, 0x04, 0x05, 0x06, 0x00, 0x01, 0x02, 0x07
	.byte 0x03, 0x04, 0x05, 0x06, 0x01, 0x06, 0x01, 0x09, 0x02, 0x00, 0x48, 0x00, 0x01, 0x00, 0x04, 0x06
	.byte 0x02, 0x00, 0x5A, 0x00, 0x01, 0x07, 0x04, 0x08, 0x02, 0x00, 0x66, 0x00, 0x01, 0x08, 0x03, 0x06
	.byte 0x01, 0x03, 0x76, 0x00, 0x01, 0x06, 0x04, 0x0A, 0x02, 0x00, 0x66, 0x00, 0x01, 0x16, 0x02, 0x09
	.byte 0x02, 0x00, 0x7C, 0x00, 0x01, 0x10, 0x05, 0x06, 0x02, 0x00, 0x8E, 0x00, 0x01, 0x17, 0x05, 0x08
	.byte 0x02, 0x00, 0x9A, 0x00, 0x01, 0x18, 0x04, 0x06, 0x01, 0x04, 0xAA, 0x00, 0x01, 0x16, 0x05, 0x0A
	.byte 0x02, 0x00, 0x9A, 0x00, 0x01, 0x06, 0x07, 0x09, 0x02, 0x00, 0xB0, 0x00, 0x01, 0x00, 0x0A, 0x06
	.byte 0x02, 0x00, 0xC2, 0x00, 0x01, 0x07, 0x0A, 0x08, 0x02, 0x00, 0xCE, 0x00, 0x01, 0x08, 0x09, 0x06
	.byte 0x01, 0x05, 0xDE, 0x00, 0x01, 0x06, 0x0A, 0x0A, 0x02, 0x00, 0xCE, 0x00, 0x01, 0x16, 0x08, 0x09
	.byte 0x02, 0x00, 0xE4, 0x00, 0x01, 0x10, 0x0B, 0x06, 0x02, 0x00, 0xF6, 0x00, 0x01, 0x17, 0x0B, 0x08
	.byte 0x02, 0x00, 0x02, 0x01, 0x01, 0x18, 0x0A, 0x06, 0x01, 0x06, 0x12, 0x01, 0x01, 0x16, 0x0B, 0x0A
	.byte 0x02, 0x00, 0x02, 0x01, 0x01, 0x06, 0x0D, 0x09, 0x02, 0x00, 0x18, 0x01, 0x01, 0x00, 0x10, 0x06
	.byte 0x02, 0x00, 0x2A, 0x01, 0x01, 0x07, 0x10, 0x08, 0x02, 0x00, 0x36, 0x01, 0x01, 0x08, 0x0F, 0x06
	.byte 0x01, 0x07, 0x46, 0x01, 0x01, 0x06, 0x10, 0x0A, 0x02, 0x00, 0x36, 0x01, 0x01, 0x16, 0x0E, 0x09
	.byte 0x02, 0x00, 0x4C, 0x01, 0x01, 0x10, 0x11, 0x06, 0x02, 0x00, 0x5E, 0x01, 0x01, 0x17, 0x11, 0x08
	.byte 0x02, 0x00, 0x6A, 0x01, 0x01, 0x18, 0x10, 0x06, 0x01, 0x08, 0x7A, 0x01, 0x01, 0x16, 0x11, 0x0A
	.byte 0x02, 0x00, 0x6A, 0x01, 0x01, 0x16, 0x01, 0x09, 0x02, 0x00, 0x7C, 0x00, 0x01, 0x11, 0x05, 0x05
	.byte 0x02, 0x00, 0x8E, 0x00, 0x01, 0x17, 0x05, 0x08, 0x02, 0x00, 0x9A, 0x00, 0x01, 0x18, 0x04, 0x06
	.byte 0x01, 0x04, 0xAA, 0x00, 0x01, 0x18, 0x04, 0x06, 0x01, 0x04, 0xAA, 0x00, 0x01, 0x16, 0x08, 0x09
	.byte 0x02, 0x00, 0xE4, 0x00, 0x01, 0x11, 0x0B, 0x05, 0x02, 0x00, 0xF6, 0x00, 0x01, 0x17, 0x0B, 0x08
	.byte 0x02, 0x00, 0x02, 0x01, 0x01, 0x18, 0x0A, 0x06, 0x01, 0x06, 0x12, 0x01, 0x01, 0x18, 0x04, 0x06
	.byte 0x01, 0x04, 0xAA, 0x00, 0x01, 0x16, 0x0E, 0x09, 0x02, 0x00, 0x4C, 0x01, 0x01, 0x11, 0x11, 0x05
	.byte 0x02, 0x00, 0x5E, 0x01, 0x01, 0x17, 0x11, 0x08, 0x02, 0x00, 0x6A, 0x01, 0x01, 0x18, 0x10, 0x06
	.byte 0x01, 0x08, 0x7A, 0x01, 0x01, 0x18, 0x04, 0x06, 0x01, 0x04, 0xAA, 0x00, 0x06, 0x07, 0x18, 0x0A
	.byte 0x02, 0x02, 0x01, 0x00, 0x06, 0x11, 0x18, 0x06, 0x02, 0x02, 0x15, 0x00, 0x06, 0x11, 0x1A, 0x0C
	.byte 0x03, 0x02, 0x21, 0x00, 0x32, 0x00, 0x33, 0x00, 0x31, 0x00, 0x30, 0x00, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0x54, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00
	.byte 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x40, 0x00, 0x18, 0x00
	.byte 0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x40, 0x00, 0x48, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xE8, 0x00, 0xA8, 0x00
	.byte 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x02, 0x00, 0x00, 0x00, 0xE8, 0x00, 0xB8, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x24, 0x00, 0x2C, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x03, 0x00, 0x00, 0x00, 0xA4, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x24, 0x00, 0x5C, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x03, 0x00, 0x00, 0x00, 0xA4, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x24, 0x00, 0x8C, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x03, 0x00, 0x00, 0x00, 0xA4, 0x00, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0xA4, 0x00, 0x94, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x0A, 0x00, 0x00, 0x00, 0xA4, 0x00, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0xA4, 0x00, 0x94, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x0A, 0x00, 0x00, 0x00, 0xA4, 0x00, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0xA4, 0x00, 0x94, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x0A, 0x00, 0x00, 0x00, 0xA4, 0x00, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0xA4, 0x00, 0x94, 0x00
	.byte 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x0A, 0x00, 0x00, 0x00, 0xA4, 0x00, 0x94, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0xA4, 0x00, 0x94, 0x00
	.byte 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x0A, 0x00, 0x00, 0x00, 0xA4, 0x00, 0x94, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0xA4, 0x00, 0x94, 0x00
	.byte 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x0A, 0x00, 0x00, 0x00, 0xA4, 0x00, 0x94, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0xA4, 0x00, 0x94, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x03, 0x00, 0x00, 0x00, 0x32, 0x00, 0x94, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0xFB, 0x07, 0x02, 0x69, 0x07, 0x08, 0x02
	.byte 0x39, 0xF4, 0x07, 0x02, 0xFD, 0xF4, 0x07, 0x02, 0x21, 0xF5, 0x07, 0x02, 0x3D, 0xF7, 0x07, 0x02
	.byte 0x01, 0xF8, 0x07, 0x02, 0x25, 0xF8, 0x07, 0x02, 0x3D, 0xFA, 0x07, 0x02, 0xFE, 0xFF, 0xFF, 0xFF
	.byte 0xFE, 0xFF, 0xFF, 0xFF, 0x0D, 0x05, 0x08, 0x02, 0x3D, 0x06, 0x08, 0x02, 0x29, 0x07, 0x08, 0x02
	.byte 0x89, 0x07, 0x08, 0x02, 0x49, 0x07, 0x08, 0x02, 0xD1, 0x08, 0x08, 0x02, 0x49, 0x09, 0x08, 0x02
	.byte 0x19, 0x09, 0x08, 0x02, 0x01, 0x09, 0x08, 0x02, 0xE9, 0x08, 0x08, 0x02, 0x61, 0x09, 0x08, 0x02
	.byte 0x31, 0x09, 0x08, 0x02, 0x79, 0x09, 0x08, 0x02, 0x91, 0x09, 0x08, 0x02, 0xA9, 0x09, 0x08, 0x02
	.byte 0xC1, 0x09, 0x08, 0x02, 0xD9, 0x09, 0x08, 0x02, 0xF1, 0x09, 0x08, 0x02, 0x41, 0x0A, 0x08, 0x02
	.byte 0x09, 0x0A, 0x08, 0x02, 0x25, 0x0A, 0x08, 0x02, 0xFE, 0xFF, 0xFF, 0xFF, 0x60, 0x68, 0x50, 0x58
	.byte 0x04, 0x07, 0x0D, 0x0A, 0x03, 0x06, 0x0C, 0x09, 0x09, 0x00, 0x00, 0x00, 0x28, 0x28, 0x28, 0x28
	.byte 0x29, 0x29, 0x29, 0x00, 0x70, 0x00, 0x00, 0x00, 0x4C, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x14, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00
	.byte 0x19, 0x00, 0x39, 0x00, 0x59, 0x00, 0x61, 0x00, 0x7A, 0x00, 0x9E, 0x00, 0xC6, 0x00, 0x00, 0x00
	.byte 0x03, 0x00, 0x2B, 0x00, 0x20, 0x00, 0x2F, 0x00, 0x01, 0x00, 0x2B, 0x00, 0x3F, 0x00, 0x09, 0x00
	.byte 0x30, 0x00, 0xE2, 0x00, 0xFF, 0xFF, 0x8D, 0x00, 0x74, 0x00, 0x60, 0x00, 0x6A, 0x00, 0x2F, 0x00
	.byte 0x01, 0x00, 0x2B, 0x00, 0x3F, 0x00, 0x09, 0x00, 0x30, 0x00, 0xE2, 0x00, 0xFF, 0xFF, 0x02, 0xE0
	.byte 0x02, 0xE0, 0x03, 0xE0, 0x03, 0xE0, 0x04, 0xE0, 0x04, 0xE0, 0x04, 0xD0, 0x04, 0xD0, 0x07, 0xE0
	.byte 0x07, 0xE0, 0x07, 0xE0, 0x08, 0xE0, 0x08, 0xE0, 0x04, 0xD0, 0x04, 0xD0, 0x04, 0xD0, 0x04, 0xD0
	.byte 0x04, 0xD0, 0x04, 0xD0, 0x04, 0xD0, 0x04, 0xD0, 0x07, 0xE0, 0x07, 0xE0, 0x07, 0xE0, 0x08, 0xE0
	.byte 0x08, 0xE0, 0xE3, 0x00, 0xE4, 0x00, 0xF9, 0x00, 0xF8, 0x00, 0xE5, 0x00, 0xE6, 0x00, 0xF5, 0x00
	.byte 0xF6, 0x00, 0xF7, 0x00, 0xE7, 0x00, 0x01, 0x00, 0xEE, 0x00, 0xEF, 0x00, 0xFF, 0xFF, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x1F, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDE, 0x01, 0xDE, 0x01
	.byte 0xDE, 0x01, 0xDE, 0x01, 0xDE, 0x01, 0xDE, 0x01, 0xDE, 0x01, 0xDE, 0x01, 0xDE, 0x01, 0xDE, 0x01
	.byte 0xDE, 0x01, 0xDE, 0x01, 0xDE, 0x01, 0xFF, 0xFF, 0x07, 0x01, 0x08, 0x01, 0x09, 0x01, 0x0A, 0x01
	.byte 0x0B, 0x01, 0x0C, 0x01, 0x0D, 0x01, 0x0E, 0x01, 0x11, 0x01, 0x0F, 0x01, 0x10, 0x01, 0x01, 0x00
	.byte 0x01, 0x00, 0xFF, 0xFF, 0x21, 0x01, 0x22, 0x01, 0x23, 0x01, 0x24, 0x01, 0x25, 0x01, 0x26, 0x01
	.byte 0x27, 0x01, 0x28, 0x01, 0x29, 0x01, 0x2A, 0x01, 0xDE, 0x01, 0xDE, 0x01, 0xDE, 0x01, 0xFF, 0xFF
	.byte 0x2B, 0x01, 0x2C, 0x01, 0x2D, 0x01, 0x2E, 0x01, 0x2F, 0x01, 0x30, 0x01, 0x31, 0x01, 0x32, 0x01
	.byte 0x33, 0x01, 0x34, 0x01, 0xDE, 0x01, 0xAD, 0x01, 0xAE, 0x01, 0xFF, 0xFF, 0x35, 0x01, 0x36, 0x01
	.byte 0x37, 0x01, 0x38, 0x01, 0x39, 0x01, 0x3A, 0x01, 0x3B, 0x01, 0x3C, 0x01, 0x3D, 0x01, 0x3E, 0x01
	.byte 0xDE, 0x01, 0xB3, 0x01, 0xBE, 0x01, 0xFF, 0xFF, 0x3F, 0x01, 0x40, 0x01, 0x41, 0x01, 0x42, 0x01
	.byte 0x43, 0x01, 0x44, 0x01, 0xDE, 0x01, 0xDE, 0x01, 0xDE, 0x01, 0xDE, 0x01, 0xDE, 0x01, 0xBB, 0x01
	.byte 0xBC, 0x01, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x1E, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x45, 0x01, 0x46, 0x01, 0x47, 0x01, 0x48, 0x01, 0x49, 0x01, 0x4A, 0x01, 0x4B, 0x01, 0x4C, 0x01
	.byte 0x4D, 0x01, 0x4E, 0x01, 0xDE, 0x01, 0xAD, 0x01, 0xAE, 0x01, 0xFF, 0xFF, 0x4F, 0x01, 0x50, 0x01
	.byte 0x51, 0x01, 0x52, 0x01, 0x53, 0x01, 0x54, 0x01, 0x55, 0x01, 0x56, 0x01, 0x57, 0x01, 0x58, 0x01
	.byte 0xDE, 0x01, 0xB3, 0x01, 0xBE, 0x01, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x01
	.byte 0x03, 0x01, 0xFC, 0x00, 0xFA, 0x00, 0xFD, 0x00, 0xFB, 0x00, 0xFE, 0x00, 0x05, 0x01, 0x01, 0x00
	.byte 0x01, 0x00, 0xFF, 0xFF, 0xE8, 0x00, 0xE9, 0x00, 0xEA, 0x00, 0xEB, 0x00, 0xEC, 0x00, 0xED, 0x00
	.byte 0xF0, 0x00, 0xF1, 0x00, 0xF2, 0x00, 0xF3, 0x00, 0xF4, 0x00, 0x06, 0x01, 0x04, 0x01, 0xFF, 0xFF
	.byte 0xDE, 0x01, 0xDE, 0x01, 0xDE, 0x01, 0xDE, 0x01, 0xDE, 0x01, 0xDE, 0x01, 0xDE, 0x01, 0xDE, 0x01
	.byte 0xDE, 0x01, 0xDE, 0x01, 0xDE, 0x01, 0xDE, 0x01, 0xDE, 0x01, 0xFF, 0xFF, 0xA2, 0x00, 0xA3, 0x00
	.byte 0xA4, 0x00, 0xA5, 0x00, 0xA6, 0x00, 0xA7, 0x00, 0xA8, 0x00, 0xA9, 0x00, 0xAA, 0x00, 0xAB, 0x00
	.byte 0x01, 0x00, 0xE1, 0x00, 0xE2, 0x00, 0xFF, 0xFF, 0xAD, 0x01, 0xAE, 0x01, 0xC4, 0x01, 0xC5, 0x01
	.byte 0xAB, 0x01, 0xAC, 0x01, 0xDE, 0x01, 0xDE, 0x01, 0xDE, 0x01, 0xBB, 0x01, 0xBC, 0x01, 0xDE, 0x01
	.byte 0xDE, 0x01, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x1C, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0xB4, 0x01, 0xB5, 0x01, 0xB2, 0x01, 0xB3, 0x01, 0xB9, 0x01, 0xBA, 0x01, 0xDE, 0x01, 0xDE, 0x01
	.byte 0xDE, 0x01, 0xDE, 0x01, 0xDE, 0x01, 0xDE, 0x01, 0xDE, 0x01, 0xFF, 0xFF, 0xAF, 0x01, 0xB0, 0x01
	.byte 0xC3, 0x01, 0xD0, 0x01, 0xC0, 0x01, 0xD2, 0x01, 0xBD, 0x01, 0xBE, 0x01, 0xBF, 0x01, 0xB1, 0x01
	.byte 0xC1, 0x01, 0xDE, 0x01, 0xDE, 0x01, 0xFF, 0xFF, 0xCB, 0x01, 0xCC, 0x01, 0xCD, 0x01, 0xCE, 0x01
	.byte 0xCF, 0x01, 0xC6, 0x01, 0xC8, 0x01, 0xC9, 0x01, 0xC7, 0x01, 0xCA, 0x01, 0xD1, 0x01, 0xDE, 0x01
	.byte 0xDE, 0x01, 0xFF, 0xFF, 0x21, 0x01, 0x22, 0x01, 0x23, 0x01, 0x24, 0x01, 0x25, 0x01, 0x26, 0x01
	.byte 0x27, 0x01, 0x28, 0x01, 0x29, 0x01, 0x2A, 0x01, 0xDE, 0x01, 0xDE, 0x01, 0xDE, 0x01, 0xFF, 0xFF
	.byte 0xD3, 0x01, 0xD4, 0x01, 0xD5, 0x01, 0xD6, 0x01, 0xD7, 0x01, 0xD8, 0x01, 0xD9, 0x01, 0xDA, 0x01
	.byte 0xDD, 0x01, 0xDB, 0x01, 0xDC, 0x01, 0xDE, 0x01, 0xDE, 0x01, 0xFF, 0xFF, 0x59, 0x01, 0x5A, 0x01
	.byte 0x5B, 0x01, 0x5C, 0x01, 0x5D, 0x01, 0x5E, 0x01, 0xDE, 0x01, 0xDE, 0x01, 0xDE, 0x01, 0xDE, 0x01
	.byte 0xDE, 0x01, 0xBB, 0x01, 0xBC, 0x01, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x1A, 0x00, 0x00, 0x03, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x8E, 0x00, 0x62, 0x00, 0x93, 0x00, 0xA1, 0x00, 0x2F, 0x00, 0x01, 0x00
	.byte 0x7C, 0x00, 0x74, 0x00, 0x60, 0x00, 0x7E, 0x00, 0xF1, 0x00, 0x91, 0x00, 0x30, 0x00, 0xE2, 0x00
	.byte 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00
	.byte 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00
	.byte 0x08, 0x00, 0x00, 0x00, 0x21, 0x01, 0x22, 0x01, 0x23, 0x01, 0x24, 0x01, 0x25, 0x01, 0x01, 0x00
	.byte 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00
	.byte 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0xFF, 0xFF, 0x26, 0x01, 0x27, 0x01, 0x28, 0x01, 0x29, 0x01
	.byte 0x2A, 0x01, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00
	.byte 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0xFF, 0xFF, 0x01, 0x00, 0x01, 0x00
	.byte 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00
	.byte 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0xFF, 0xFF
	.byte 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x31, 0x00, 0x32, 0x00, 0x34, 0x00, 0x35, 0x00, 0x37, 0x00, 0x38, 0x00, 0x3A, 0x00, 0x3B, 0x00
	.byte 0x3D, 0x00, 0x3E, 0x00, 0x81, 0x00, 0x82, 0x00, 0x84, 0x00, 0x85, 0x00, 0x87, 0x00, 0x88, 0x00
	.byte 0x8A, 0x00, 0x8B, 0x00, 0x8D, 0x00, 0x8E, 0x00, 0x24, 0x00, 0x26, 0x00, 0x74, 0x00, 0x76, 0x00
	.byte 0x32, 0x00, 0x31, 0x00, 0x35, 0x00, 0x34, 0x00, 0x38, 0x00, 0x37, 0x00, 0x3B, 0x00, 0x3A, 0x00
	.byte 0x3E, 0x00, 0x3D, 0x00, 0x82, 0x00, 0x81, 0x00, 0x85, 0x00, 0x84, 0x00, 0x88, 0x00, 0x87, 0x00
	.byte 0x8B, 0x00, 0x8A, 0x00, 0x8E, 0x00, 0x8D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00
	.byte 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00
	.byte 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00
	.byte 0x0D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC8, 0x00, 0x00, 0x00
	.byte 0x12, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00
	.byte 0x14, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00
	.byte 0x17, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xB0, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00
	.byte 0x19, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00
	.byte 0x25, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x5B, 0x00, 0x00, 0x00
	.byte 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x39, 0x3C
	.byte 0x00, 0x00, 0x02, 0x00, 0x59, 0x3C, 0x00, 0x00, 0x04, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x04, 0x00
	.byte 0x9D, 0x3C, 0x01, 0x00, 0x08, 0x00, 0xC5, 0x3C, 0x01, 0x00, 0x0B, 0x00, 0x1C, 0x58, 0x02, 0x00
	.byte 0x00, 0x01, 0x2C, 0x58, 0x02, 0x00, 0x01, 0x01, 0x3C, 0x58, 0x02, 0x00, 0x02, 0x01, 0x4C, 0x58
	.byte 0x02, 0x00, 0x03, 0x01, 0x5C, 0x58, 0x02, 0x00, 0x04, 0x01, 0x6C, 0x58, 0x02, 0x00, 0x05, 0x01
	.byte 0x7C, 0x58, 0x02, 0x00, 0x06, 0x01, 0x8C, 0x58, 0x02, 0x00, 0x07, 0x01, 0x9C, 0x58, 0x02, 0x00
	.byte 0x08, 0x01, 0xAC, 0x58, 0x02, 0x00, 0x09, 0x01, 0xBC, 0x58, 0x02, 0x00, 0x0A, 0x01, 0xCC, 0x58
	.byte 0x02, 0x00, 0x0B, 0x01, 0xDC, 0x58, 0x02, 0x00, 0x0C, 0x01, 0x1C, 0x6B, 0x02, 0x00, 0x00, 0x02
	.byte 0x2C, 0x6B, 0x02, 0x00, 0x01, 0x02, 0x3C, 0x6B, 0x02, 0x00, 0x02, 0x02, 0x4C, 0x6B, 0x02, 0x00
	.byte 0x03, 0x02, 0x5C, 0x6B, 0x02, 0x00, 0x04, 0x02, 0x6C, 0x6B, 0x02, 0x00, 0x05, 0x02, 0x7C, 0x6B
	.byte 0x02, 0x00, 0x06, 0x02, 0x8C, 0x6B, 0x02, 0x00, 0x07, 0x02, 0x9C, 0x6B, 0x02, 0x00, 0x08, 0x02
	.byte 0xAC, 0x6B, 0x02, 0x00, 0x09, 0x02, 0xBC, 0x6B, 0x02, 0x00, 0x0A, 0x02, 0xCC, 0x6B, 0x02, 0x00
	.byte 0x0B, 0x02, 0xDC, 0x6B, 0x02, 0x00, 0x0C, 0x02, 0x1C, 0x7E, 0x02, 0x00, 0x00, 0x03, 0x2C, 0x7E
	.byte 0x02, 0x00, 0x01, 0x03, 0x3C, 0x7E, 0x02, 0x00, 0x02, 0x03, 0x4C, 0x7E, 0x02, 0x00, 0x03, 0x03
	.byte 0x5C, 0x7E, 0x02, 0x00, 0x04, 0x03, 0x6C, 0x7E, 0x02, 0x00, 0x05, 0x03, 0x7C, 0x7E, 0x02, 0x00
	.byte 0x06, 0x03, 0x8C, 0x7E, 0x02, 0x00, 0x07, 0x03, 0x9C, 0x7E, 0x02, 0x00, 0x08, 0x03, 0xAC, 0x7E
	.byte 0x02, 0x00, 0x09, 0x03, 0xBC, 0x7E, 0x02, 0x00, 0x0A, 0x03, 0xCC, 0x7E, 0x02, 0x00, 0x0B, 0x03
	.byte 0xDC, 0x7E, 0x02, 0x00, 0x0C, 0x03, 0x1C, 0x91, 0x02, 0x00, 0x00, 0x04, 0x2C, 0x91, 0x02, 0x00
	.byte 0x01, 0x04, 0x3C, 0x91, 0x02, 0x00, 0x02, 0x04, 0x4C, 0x91, 0x02, 0x00, 0x03, 0x04, 0x5C, 0x91
	.byte 0x02, 0x00, 0x04, 0x04, 0x6C, 0x91, 0x02, 0x00, 0x05, 0x04, 0x7C, 0x91, 0x02, 0x00, 0x06, 0x04
	.byte 0x8C, 0x91, 0x02, 0x00, 0x07, 0x04, 0x9C, 0x91, 0x02, 0x00, 0x08, 0x04, 0xAC, 0x91, 0x02, 0x00
	.byte 0x09, 0x04, 0xBC, 0x91, 0x02, 0x00, 0x0A, 0x04, 0xCC, 0x91, 0x02, 0x00, 0x0B, 0x04, 0xDC, 0x91
	.byte 0x02, 0x00, 0x0C, 0x04, 0x1C, 0xA4, 0x02, 0x00, 0x00, 0x05, 0x2C, 0xA4, 0x02, 0x00, 0x01, 0x05
	.byte 0x3C, 0xA4, 0x02, 0x00, 0x02, 0x05, 0x4C, 0xA4, 0x02, 0x00, 0x03, 0x05, 0x5C, 0xA4, 0x02, 0x00
	.byte 0x04, 0x05, 0x6C, 0xA4, 0x02, 0x00, 0x05, 0x05, 0x7C, 0xA4, 0x02, 0x00, 0x06, 0x05, 0x8C, 0xA4
	.byte 0x02, 0x00, 0x07, 0x05, 0x9C, 0xA4, 0x02, 0x00, 0x08, 0x05, 0xAC, 0xA4, 0x02, 0x00, 0x09, 0x05
	.byte 0xBC, 0xA4, 0x02, 0x00, 0x0A, 0x05, 0xCC, 0xA4, 0x02, 0x00, 0x0B, 0x05, 0xDC, 0xA4, 0x02, 0x00
	.byte 0x0C, 0x05, 0x03, 0x00, 0x01, 0x00, 0x02, 0x00, 0x05, 0x00, 0x01, 0x00, 0x04, 0x00, 0x07, 0x00
	.byte 0x01, 0x00, 0x06, 0x00, 0x09, 0x00, 0x01, 0x00, 0x08, 0x00, 0x0B, 0x00, 0x01, 0x00, 0x0A, 0x00
	.byte 0x53, 0x00, 0x01, 0x00, 0x52, 0x00, 0x55, 0x00, 0x01, 0x00, 0x54, 0x00, 0x57, 0x00, 0x01, 0x00
	.byte 0x56, 0x00, 0x59, 0x00, 0x01, 0x00, 0x58, 0x00, 0x5B, 0x00, 0x01, 0x00, 0x5A, 0x00, 0x45, 0x00
	.byte 0x01, 0x00, 0x44, 0x00, 0x47, 0x00, 0x01, 0x00, 0x46, 0x00, 0x49, 0x00, 0x01, 0x00, 0x48, 0x00
	.byte 0x95, 0x00, 0x01, 0x00, 0x94, 0x00, 0x97, 0x00, 0x01, 0x00, 0x96, 0x00, 0x99, 0x00, 0x01, 0x00
	.byte 0x98, 0x00, 0xAC, 0x00, 0x01, 0x00, 0xC6, 0x00, 0xAD, 0x00, 0x01, 0x00, 0xC7, 0x00, 0xAE, 0x00
	.byte 0x01, 0x00, 0xC8, 0x00, 0xAF, 0x00, 0x01, 0x00, 0xC9, 0x00, 0xB0, 0x00, 0x01, 0x00, 0xCA, 0x00
	.byte 0xB1, 0x00, 0x01, 0x00, 0xCB, 0x00, 0xB2, 0x00, 0x01, 0x00, 0xCC, 0x00, 0xB3, 0x00, 0x01, 0x00
	.byte 0xCD, 0x00, 0xB4, 0x00, 0x01, 0x00, 0xCE, 0x00, 0xB5, 0x00, 0x01, 0x00, 0xCF, 0x00, 0xB6, 0x00
	.byte 0x01, 0x00, 0xD0, 0x00, 0xB7, 0x00, 0x01, 0x00, 0xD1, 0x00, 0xB8, 0x00, 0x01, 0x00, 0xD2, 0x00
	.byte 0xB9, 0x00, 0x01, 0x00, 0xD3, 0x00, 0xBA, 0x00, 0x01, 0x00, 0xD4, 0x00, 0xBB, 0x00, 0x01, 0x00
	.byte 0xD5, 0x00, 0xBC, 0x00, 0x01, 0x00, 0xD6, 0x00, 0xBD, 0x00, 0x01, 0x00, 0xD7, 0x00, 0xBE, 0x00
	.byte 0x01, 0x00, 0xD8, 0x00, 0xBF, 0x00, 0x01, 0x00, 0xD9, 0x00, 0xC0, 0x00, 0x01, 0x00, 0xDA, 0x00
	.byte 0xC1, 0x00, 0x01, 0x00, 0xDB, 0x00, 0xC2, 0x00, 0x01, 0x00, 0xDC, 0x00, 0xC3, 0x00, 0x01, 0x00
	.byte 0xDD, 0x00, 0xC4, 0x00, 0x01, 0x00, 0xDE, 0x00, 0xC5, 0x00, 0x01, 0x00, 0xDF, 0x00, 0x25, 0x00
	.byte 0x26, 0x00, 0x24, 0x00, 0x75, 0x00, 0x76, 0x00, 0x74, 0x00, 0x0C, 0x00, 0x0D, 0x00, 0x01, 0x00
	.byte 0x0E, 0x00, 0x0F, 0x00, 0x01, 0x00, 0x10, 0x00, 0x11, 0x00, 0x01, 0x00, 0x12, 0x00, 0x13, 0x00
	.byte 0x01, 0x00, 0x14, 0x00, 0x15, 0x00, 0x01, 0x00, 0x16, 0x00, 0x17, 0x00, 0x01, 0x00, 0x18, 0x00
	.byte 0x19, 0x00, 0x01, 0x00, 0x1A, 0x00, 0x1B, 0x00, 0x01, 0x00, 0x1C, 0x00, 0x1D, 0x00, 0x01, 0x00
	.byte 0x1E, 0x00, 0x1F, 0x00, 0x01, 0x00, 0x20, 0x00, 0x21, 0x00, 0x01, 0x00, 0x22, 0x00, 0x23, 0x00
	.byte 0x01, 0x00, 0x27, 0x00, 0x28, 0x00, 0x01, 0x00, 0x29, 0x00, 0x2A, 0x00, 0x01, 0x00, 0x5C, 0x00
	.byte 0x5D, 0x00, 0x01, 0x00, 0x5E, 0x00, 0x5F, 0x00, 0x01, 0x00, 0x60, 0x00, 0x61, 0x00, 0x01, 0x00
	.byte 0x62, 0x00, 0x63, 0x00, 0x01, 0x00, 0x64, 0x00, 0x65, 0x00, 0x01, 0x00, 0x66, 0x00, 0x67, 0x00
	.byte 0x01, 0x00, 0x68, 0x00, 0x69, 0x00, 0x01, 0x00, 0x6A, 0x00, 0x6B, 0x00, 0x01, 0x00, 0x6C, 0x00
	.byte 0x6D, 0x00, 0x01, 0x00, 0x6E, 0x00, 0x6F, 0x00, 0x01, 0x00, 0x70, 0x00, 0x71, 0x00, 0x01, 0x00
	.byte 0x72, 0x00, 0x73, 0x00, 0x01, 0x00, 0x77, 0x00, 0x78, 0x00, 0x01, 0x00, 0x79, 0x00, 0x7A, 0x00
	.byte 0x01, 0x00, 0x30, 0x00, 0x31, 0x00, 0x32, 0x00, 0x33, 0x00, 0x34, 0x00, 0x35, 0x00, 0x36, 0x00
	.byte 0x37, 0x00, 0x38, 0x00, 0x39, 0x00, 0x3A, 0x00, 0x3B, 0x00, 0x3C, 0x00, 0x3D, 0x00, 0x3E, 0x00
	.byte 0x80, 0x00, 0x81, 0x00, 0x82, 0x00, 0x83, 0x00, 0x84, 0x00, 0x85, 0x00, 0x86, 0x00, 0x87, 0x00
	.byte 0x88, 0x00, 0x89, 0x00, 0x8A, 0x00, 0x8B, 0x00, 0x8C, 0x00, 0x8D, 0x00, 0x8E, 0x00, 0x00, 0x00
	.byte 0x09, 0x29, 0x08, 0x02, 0x21, 0x2B, 0x08, 0x02, 0xE9, 0x2E, 0x08, 0x02, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xF5, 0x50, 0x08, 0x02, 0x4D, 0x52, 0x08, 0x02, 0x7D, 0x52, 0x08, 0x02, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x06, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x03, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x06, 0x04, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0E, 0x01, 0x00, 0x01, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x58, 0x08, 0x02
	.byte 0x39, 0x59, 0x08, 0x02, 0x75, 0x59, 0x08, 0x02, 0xDD, 0x58, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00
	.byte 0x05, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00
	.byte 0x09, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00
	.byte 0x0B, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x20, 0x00, 0x50, 0x00, 0x14, 0x00, 0x14, 0x00
	.byte 0x50, 0x00, 0x50, 0x00, 0x14, 0x00, 0x14, 0x00, 0x80, 0x00, 0x50, 0x00, 0x14, 0x00, 0x14, 0x00
	.byte 0xB0, 0x00, 0x50, 0x00, 0x14, 0x00, 0x14, 0x00, 0xE0, 0x00, 0x50, 0x00, 0x14, 0x00, 0x14, 0x00
	.byte 0x20, 0x00, 0x80, 0x00, 0x14, 0x00, 0x14, 0x00, 0x50, 0x00, 0x80, 0x00, 0x14, 0x00, 0x14, 0x00
	.byte 0x80, 0x00, 0x80, 0x00, 0x14, 0x00, 0x14, 0x00, 0xB0, 0x00, 0x80, 0x00, 0x14, 0x00, 0x14, 0x00
	.byte 0xE0, 0x00, 0x80, 0x00, 0x14, 0x00, 0x14, 0x00, 0x40, 0x00, 0xB0, 0x00, 0x3C, 0x00, 0x0C, 0x00
	.byte 0xC0, 0x00, 0xB0, 0x00, 0x3C, 0x00, 0x0C, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00
	.byte 0x00, 0x40, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00
	.byte 0x20, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00
	.byte 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x20, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00
	.byte 0x64, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00
	.byte 0x11, 0x7B, 0x08, 0x02, 0x65, 0x7B, 0x08, 0x02, 0xAD, 0x7B, 0x08, 0x02, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0x59, 0x7B, 0x08, 0x02, 0x65, 0x7B, 0x08, 0x02, 0xAD, 0x7B, 0x08, 0x02, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0x4D, 0x7B, 0x08, 0x02, 0x65, 0x7B, 0x08, 0x02, 0xAD, 0x7B, 0x08, 0x02, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0x41, 0x7B, 0x08, 0x02, 0x65, 0x7B, 0x08, 0x02, 0xAD, 0x7B, 0x08, 0x02, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0x35, 0x7B, 0x08, 0x02, 0x65, 0x7B, 0x08, 0x02, 0xAD, 0x7B, 0x08, 0x02, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0x29, 0x7B, 0x08, 0x02, 0x65, 0x7B, 0x08, 0x02, 0xAD, 0x7B, 0x08, 0x02, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0x1D, 0x7B, 0x08, 0x02, 0x65, 0x7B, 0x08, 0x02, 0xAD, 0x7B, 0x08, 0x02, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0x61, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00
	.byte 0x66, 0x00, 0x00, 0x00, 0xF9, 0x7E, 0x08, 0x02, 0x11, 0x7F, 0x08, 0x02, 0x2D, 0x7F, 0x08, 0x02
	.byte 0x28, 0x00, 0x00, 0x00, 0x05, 0x7F, 0x08, 0x02, 0x11, 0x7F, 0x08, 0x02, 0x2D, 0x7F, 0x08, 0x02
	.byte 0x28, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00
	.byte 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xFB, 0xFB, 0xFB, 0xFB
	.byte 0xFB, 0xFB, 0xFB, 0xFB, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x83, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00
	.byte 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x82, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00
	.byte 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x83, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00
	.byte 0x04, 0x00, 0x00, 0x00, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00
	.byte 0x02, 0x00, 0x00, 0x00, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0x00, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x83, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00
	.byte 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00
	.byte 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB
	.byte 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x83, 0x00, 0x00, 0x00
	.byte 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xFB, 0xFB, 0xFB, 0xFB
	.byte 0xFB, 0xFB, 0xFB, 0xFB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x67, 0x00, 0x00, 0x00
	.byte 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xFB, 0xFB, 0xFB, 0xFB
	.byte 0xFB, 0xFB, 0xFB, 0xFB, 0x28, 0x2F, 0x10, 0x02, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x68, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00
	.byte 0x0F, 0x27, 0x00, 0x00, 0xFB, 0xFB, 0xFB, 0xFB, 0x58, 0x2C, 0x10, 0x02, 0x01, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00
	.byte 0x03, 0x00, 0x00, 0x00, 0xE7, 0x03, 0x00, 0x00, 0xFB, 0xFB, 0xFB, 0xFB, 0x3C, 0x2A, 0x10, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x82, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00
	.byte 0x64, 0x00, 0x00, 0x00, 0xFB, 0xFB, 0xFB, 0xFB, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00
	.byte 0x04, 0x00, 0x00, 0x00, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x5C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00
	.byte 0x03, 0x00, 0x00, 0x00, 0x2C, 0x01, 0x00, 0x00, 0xFB, 0xFB, 0xFB, 0xFB, 0x00, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x5D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x0F, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2D, 0x01, 0x00, 0x00, 0xFB, 0xFB, 0xFB, 0xFB
	.byte 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00
	.byte 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xE7, 0x03, 0x00, 0x00
	.byte 0xFB, 0xFB, 0xFB, 0xFB, 0x88, 0x29, 0x10, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x5C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x0E, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2C, 0x01, 0x00, 0x00, 0xFB, 0xFB, 0xFB, 0xFB
	.byte 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00
	.byte 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xE7, 0x03, 0x00, 0x00
	.byte 0xFB, 0xFB, 0xFB, 0xFB, 0x88, 0x29, 0x10, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x4E, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0xFB, 0xFB, 0xFB, 0xFB, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x4F, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0xFB, 0xFB, 0xFB, 0xFB, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00
	.byte 0x03, 0x00, 0x00, 0x00, 0xE7, 0x03, 0x00, 0x00, 0xFB, 0xFB, 0xFB, 0xFB, 0xF0, 0x2A, 0x10, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x69, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00
	.byte 0xC8, 0x00, 0x00, 0x00, 0xFB, 0xFB, 0xFB, 0xFB, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x6A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00
	.byte 0x03, 0x00, 0x00, 0x00, 0xD2, 0x00, 0x00, 0x00, 0xFB, 0xFB, 0xFB, 0xFB, 0x00, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x6B, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00
	.byte 0x12, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xDC, 0x00, 0x00, 0x00, 0xFB, 0xFB, 0xFB, 0xFB
	.byte 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00
	.byte 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xFB, 0xFB, 0xFB, 0xFB
	.byte 0xFB, 0xFB, 0xFB, 0xFB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00
	.byte 0x03, 0x00, 0x00, 0x00, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0x00, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x08, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFB, 0xFB, 0xFB, 0xFB
	.byte 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00
	.byte 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xE7, 0x03, 0x00, 0x00
	.byte 0xFB, 0xFB, 0xFB, 0xFB, 0xD4, 0x28, 0x10, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x14, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB
	.byte 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0xFB, 0xFB, 0xFB, 0xFB
	.byte 0xFB, 0xFB, 0xFB, 0xFB, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00
	.byte 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00
	.byte 0x04, 0x00, 0x00, 0x00, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2D, 0x00, 0x00, 0x00
	.byte 0x0A, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0xFB, 0xFB, 0xFB, 0xFB
	.byte 0xFB, 0xFB, 0xFB, 0xFB, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x2E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00
	.byte 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0x90, 0x30, 0x10, 0x02, 0x01, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x2F, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00
	.byte 0x06, 0x00, 0x00, 0x00, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0x00, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00
	.byte 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x2B, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00
	.byte 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0x44, 0x31, 0x10, 0x02, 0x01, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00
	.byte 0x06, 0x00, 0x00, 0x00, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0x00, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00
	.byte 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00
	.byte 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xFB, 0xFB, 0xFB, 0xFB, 0x00, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00
	.byte 0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xFB, 0xFB, 0xFB, 0xFB
	.byte 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00
	.byte 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00
	.byte 0xFB, 0xFB, 0xFB, 0xFB, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x03, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00
	.byte 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00
	.byte 0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFB, 0xFB, 0xFB, 0xFB
	.byte 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00
	.byte 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xFB, 0xFB, 0xFB, 0xFB
	.byte 0xFB, 0xFB, 0xFB, 0xFB, 0xAC, 0x32, 0x10, 0x02, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x03, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00
	.byte 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00
	.byte 0x07, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0xFB, 0xFB, 0xFB, 0xFB, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x08, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00
	.byte 0x02, 0x00, 0x00, 0x00, 0xFB, 0xFB, 0xFB, 0xFB, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00
	.byte 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xFB, 0xFB, 0xFB, 0xFB, 0x00, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00
	.byte 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x04, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0xFB, 0xFB, 0xFB, 0xFB, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x03, 0x00, 0x00, 0x00, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0x14, 0x34, 0x10, 0x02
	.byte 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB
	.byte 0x60, 0x33, 0x10, 0x02, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00
	.byte 0x05, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xFB, 0xFB, 0xFB, 0xFB
	.byte 0xFB, 0xFB, 0xFB, 0xFB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x03, 0x00, 0x00, 0x00, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xC8, 0x34, 0x10, 0x02
	.byte 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00
	.byte 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB
	.byte 0xC8, 0x34, 0x10, 0x02, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x03, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xFB, 0xFB, 0xFB, 0xFB
	.byte 0xFB, 0xFB, 0xFB, 0xFB, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00
	.byte 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3B, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xFB, 0xFB, 0xFB, 0xFB
	.byte 0xFB, 0xFB, 0xFB, 0xFB, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x3A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00
	.byte 0x64, 0x00, 0x00, 0x00, 0xFB, 0xFB, 0xFB, 0xFB, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00
	.byte 0x03, 0x00, 0x00, 0x00, 0xE7, 0x03, 0x00, 0x00, 0xFB, 0xFB, 0xFB, 0xFB, 0xD4, 0x28, 0x10, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00
	.byte 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0x30, 0x36, 0x10, 0x02, 0x01, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x09, 0x00, 0x00, 0x00, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xF8, 0x31, 0x10, 0x02
	.byte 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB
	.byte 0xA4, 0x2B, 0x10, 0x02, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00
	.byte 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0xFB, 0xFB, 0xFB, 0xFB
	.byte 0xFB, 0xFB, 0xFB, 0xFB, 0x0C, 0x2D, 0x10, 0x02, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00
	.byte 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0x74, 0x2E, 0x10, 0x02, 0x01, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x09, 0x00, 0x00, 0x00, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xDC, 0x2F, 0x10, 0x02
	.byte 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB
	.byte 0xE4, 0x36, 0x10, 0x02, 0x20, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x08, 0x40, 0x00, 0x80, 0x00
	.byte 0x00, 0x01, 0x00, 0x04, 0x40, 0x00, 0x80, 0x00, 0x00, 0x01, 0x00, 0x04, 0xA5, 0xBC, 0xBE, 0xF9
	.byte 0x88, 0x97, 0x08, 0x57, 0x98, 0xB7, 0x08, 0x7F, 0x28, 0x3F, 0xC0, 0xEF, 0x68, 0x7F, 0xC0, 0xEF
	.byte 0xFF, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x08, 0x27, 0x08, 0x7F, 0x28, 0x47, 0x08, 0x7F, 0x48, 0x67, 0x08, 0x7F
	.byte 0x68, 0x87, 0x08, 0x7F, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x1F, 0x04, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x1B, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x1A, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x1F, 0x04
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x1B, 0x02, 0x00, 0x02, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x1A, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x02, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00
	.byte 0x0E, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00
	.byte 0x0A, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00
	.byte 0x0C, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x08, 0x27, 0x10, 0x2F, 0x08, 0x27, 0x30, 0x4F
	.byte 0x08, 0x27, 0x50, 0x70, 0x30, 0x4F, 0x10, 0x2F, 0x30, 0x4F, 0x30, 0x4F, 0x30, 0x4F, 0x50, 0x70
	.byte 0x58, 0x77, 0x10, 0x2F, 0x58, 0x77, 0x30, 0x4F, 0x58, 0x77, 0x50, 0x70, 0x0C, 0x33, 0x74, 0x8B
	.byte 0x4C, 0x73, 0x74, 0x8B, 0xB0, 0xBF, 0xD0, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x99, 0x82, 0x08, 0x02
	.byte 0x25, 0x84, 0x08, 0x02, 0x6D, 0x85, 0x08, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0x36, 0x00, 0x37, 0x00
	.byte 0x35, 0x00, 0x34, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x55, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00
	.byte 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x80, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x90, 0x00, 0x18, 0x00
	.byte 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x18, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xB0, 0x00, 0x18, 0x00
	.byte 0x00, 0x00, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x18, 0x00, 0x00, 0x00, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD0, 0x00, 0x18, 0x00
	.byte 0x00, 0x00, 0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x18, 0x00, 0x00, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x18, 0x00
	.byte 0x00, 0x00, 0x07, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0xA8, 0x00, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x44, 0x00, 0x18, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x02, 0x00, 0x00, 0x00, 0x44, 0x00, 0x18, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x10, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x0C, 0x00, 0x00, 0x00, 0xE8, 0x00, 0x3A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0xC8, 0x00, 0x96, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x12, 0x00, 0x00, 0x00, 0xD0, 0x00, 0x96, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0xD8, 0x00, 0x96, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x14, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x96, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0xE8, 0x00, 0x96, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x16, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x96, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x98, 0x00, 0xA8, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x0D, 0x00, 0x00, 0x00, 0xA0, 0x00, 0xA8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0xA8, 0x00, 0xA8, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x0D, 0x00, 0x00, 0x00, 0xB0, 0x00, 0xA8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0xB8, 0x00, 0xA8, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x0D, 0x00, 0x00, 0x00, 0xC0, 0x00, 0xA8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0xC8, 0x00, 0xA8, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x0D, 0x00, 0x00, 0x00, 0xD0, 0x00, 0xA8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0xD8, 0x00, 0xA8, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x0D, 0x00, 0x00, 0x00, 0xE0, 0x00, 0xA8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0xE8, 0x00, 0xA8, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x0D, 0x00, 0x00, 0x00, 0xF0, 0x00, 0xA8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0xD0, 0x00, 0x30, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x0F, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0xD8, 0x00, 0x78, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x0F, 0x00, 0x00, 0x00, 0x90, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x88, 0x00, 0x58, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x17, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x84, 0x00
	.byte 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x19, 0x00, 0x00, 0x00, 0x20, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x40, 0x00, 0x18, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x1B, 0x00, 0x00, 0x00, 0x60, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x20, 0x00, 0x40, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x1D, 0x00, 0x00, 0x00, 0x40, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x60, 0x00, 0x40, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x1F, 0x00, 0x00, 0x00, 0x20, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x40, 0x00, 0x68, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x21, 0x00, 0x00, 0x00, 0x60, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x20, 0x00, 0x18, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x22, 0x00, 0x00, 0x00, 0x80, 0x00, 0x20, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x0F, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x80, 0x00, 0x60, 0x00
	.byte 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x23, 0x00, 0x00, 0x00, 0xA4, 0x00, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x20, 0x00, 0x18, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x24, 0x00, 0x00, 0x00, 0x20, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x20, 0x00, 0x18, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x24, 0x00, 0x00, 0x00, 0x20, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x20, 0x00, 0x18, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x25, 0x00, 0x00, 0x00, 0xE4, 0x00, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x00, 0x00, 0x00, 0xB8, 0x00, 0x32, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x27, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x3A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0xB8, 0x00, 0x52, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x29, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x5A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x00, 0x00, 0x00, 0xB8, 0x00, 0x72, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x2B, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x7A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x40, 0x00, 0x30, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x2C, 0x00, 0x00, 0x00, 0x50, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x60, 0x00, 0x30, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x2C, 0x00, 0x00, 0x00, 0x70, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x80, 0x00, 0x30, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x2C, 0x00, 0x00, 0x00, 0x40, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x50, 0x00, 0x50, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x2C, 0x00, 0x00, 0x00, 0x60, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x70, 0x00, 0x50, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x2C, 0x00, 0x00, 0x00, 0x80, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x40, 0x00, 0x70, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x2C, 0x00, 0x00, 0x00, 0x50, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x60, 0x00, 0x70, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x2C, 0x00, 0x00, 0x00, 0x70, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x80, 0x00, 0x70, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x2C, 0x00, 0x00, 0x00, 0x40, 0x00, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x50, 0x00, 0x90, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x2C, 0x00, 0x00, 0x00, 0x60, 0x00, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x70, 0x00, 0x90, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x2C, 0x00, 0x00, 0x00, 0x80, 0x00, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x40, 0x00, 0xB0, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x2C, 0x00, 0x00, 0x00, 0x50, 0x00, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x60, 0x00, 0xB0, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x2C, 0x00, 0x00, 0x00, 0x70, 0x00, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x80, 0x00, 0xB0, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x2C, 0x00, 0x00, 0x00, 0x50, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x50, 0x00, 0x40, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x2C, 0x00, 0x00, 0x00, 0x50, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x50, 0x00, 0x80, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x2C, 0x00, 0x00, 0x00, 0x50, 0x00, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x5B, 0x00, 0xB6, 0x00
	.byte 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x2C, 0x00, 0x00, 0x00, 0x65, 0x00, 0xB6, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x6F, 0x00, 0xB6, 0x00
	.byte 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x2C, 0x00, 0x00, 0x00, 0x79, 0x00, 0xB6, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x83, 0x00, 0xB6, 0x00
	.byte 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x2C, 0x00, 0x00, 0x00, 0x6F, 0x00, 0xB6, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x02, 0x00, 0x01, 0x01, 0x01
	.byte 0x01, 0x02, 0x02, 0x02, 0x02, 0x03, 0x03, 0x02, 0x00, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A
	.byte 0x0B, 0x00, 0x00, 0x00, 0x04, 0x0D, 0x11, 0x05, 0x02, 0x0D, 0x1F, 0x02, 0x04, 0x01, 0x10, 0x15
	.byte 0x02, 0x0D, 0x29, 0x02, 0x04, 0x01, 0x12, 0x1E, 0x04, 0x0D, 0x53, 0x02, 0x01, 0x01, 0x03, 0x0A
	.byte 0x02, 0x0D, 0x1F, 0x02, 0x01, 0x01, 0x07, 0x0A, 0x02, 0x0D, 0x33, 0x02, 0x01, 0x01, 0x0B, 0x0A
	.byte 0x02, 0x0D, 0x47, 0x02, 0x01, 0x01, 0x0F, 0x0A, 0x02, 0x0D, 0x5B, 0x02, 0x01, 0x01, 0x13, 0x0A
	.byte 0x02, 0x0D, 0x6F, 0x02, 0x04, 0x0C, 0x01, 0x03, 0x02, 0x0D, 0x1F, 0x02, 0x04, 0x09, 0x03, 0x09
	.byte 0x02, 0x0D, 0x27, 0x02, 0x04, 0x09, 0x07, 0x09, 0x02, 0x0D, 0x39, 0x02, 0x04, 0x0B, 0x09, 0x05
	.byte 0x02, 0x0D, 0x4B, 0x02, 0x04, 0x0A, 0x0D, 0x07, 0x02, 0x0D, 0x55, 0x02, 0x04, 0x0B, 0x11, 0x06
	.byte 0x02, 0x0D, 0x63, 0x02, 0x01, 0x00, 0x03, 0x12, 0x12, 0x0D, 0x1F, 0x02, 0x01, 0x01, 0x16, 0x0B
	.byte 0x02, 0x0D, 0x63, 0x03, 0x01, 0x0B, 0x03, 0x07, 0x02, 0x0D, 0x1F, 0x02, 0x01, 0x0D, 0x06, 0x03
	.byte 0x02, 0x0D, 0x2D, 0x02, 0x01, 0x0D, 0x08, 0x03, 0x02, 0x0D, 0x33, 0x02, 0x01, 0x0D, 0x0A, 0x03
	.byte 0x02, 0x0D, 0x39, 0x02, 0x01, 0x0D, 0x0C, 0x03, 0x02, 0x0D, 0x3F, 0x02, 0x01, 0x0D, 0x0E, 0x03
	.byte 0x02, 0x0D, 0x45, 0x02, 0x01, 0x09, 0x11, 0x09, 0x02, 0x0D, 0x4B, 0x02, 0x01, 0x00, 0x13, 0x13
	.byte 0x04, 0x0D, 0x5D, 0x02, 0x04, 0x05, 0x01, 0x0B, 0x04, 0x0D, 0x1F, 0x02, 0x04, 0x05, 0x05, 0x0B
	.byte 0x04, 0x0D, 0x4B, 0x02, 0x04, 0x05, 0x09, 0x0B, 0x04, 0x0D, 0x77, 0x02, 0x04, 0x05, 0x0D, 0x0B
	.byte 0x04, 0x0D, 0xA3, 0x02, 0x04, 0x05, 0x13, 0x0B, 0x04, 0x0D, 0xCF, 0x02, 0x04, 0x1B, 0x06, 0x03
	.byte 0x02, 0x0D, 0xFB, 0x02, 0x04, 0x1B, 0x08, 0x03, 0x02, 0x0D, 0x01, 0x03, 0x04, 0x11, 0x0A, 0x0F
	.byte 0x0A, 0x0D, 0x07, 0x03, 0x04, 0x01, 0x14, 0x0F, 0x02, 0x0D, 0x9D, 0x03, 0x04, 0x01, 0x11, 0x0A
	.byte 0x02, 0x0D, 0x9D, 0x03, 0x04, 0x14, 0x01, 0x0B, 0x02, 0x0D, 0x01, 0x00, 0x01, 0x14, 0x01, 0x0B
	.byte 0x02, 0x0D, 0x17, 0x00, 0x01, 0x14, 0x01, 0x0B, 0x02, 0x0D, 0x2D, 0x00, 0x01, 0x01, 0x00, 0x0B
	.byte 0x02, 0x0D, 0x43, 0x00, 0x04, 0x14, 0x01, 0x0B, 0x02, 0x0D, 0x59, 0x00, 0x01, 0x14, 0x01, 0x0B
	.byte 0x02, 0x0D, 0x6F, 0x00, 0x01, 0x14, 0x14, 0x06, 0x02, 0x0D, 0x85, 0x00, 0x04, 0x01, 0x01, 0x09
	.byte 0x02, 0x0D, 0x91, 0x00, 0x04, 0x01, 0x03, 0x05, 0x02, 0x0D, 0xA3, 0x00, 0x04, 0x01, 0x05, 0x05
	.byte 0x02, 0x0D, 0xAD, 0x00, 0x04, 0x01, 0x07, 0x05, 0x02, 0x0D, 0xB7, 0x00, 0x04, 0x01, 0x09, 0x05
	.byte 0x02, 0x0D, 0xC1, 0x00, 0x04, 0x01, 0x0B, 0x0F, 0x02, 0x0D, 0xCB, 0x00, 0x04, 0x01, 0x0F, 0x0C
	.byte 0x02, 0x0D, 0xE9, 0x00, 0x04, 0x06, 0x11, 0x03, 0x02, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x03, 0x02
	.byte 0x02, 0x0D, 0x07, 0x01, 0x01, 0x03, 0x06, 0x06, 0x02, 0x0D, 0x0B, 0x01, 0x01, 0x03, 0x08, 0x06
	.byte 0x02, 0x0D, 0x17, 0x01, 0x01, 0x03, 0x0A, 0x06, 0x02, 0x0D, 0x23, 0x01, 0x01, 0x03, 0x0C, 0x06
	.byte 0x02, 0x0D, 0x2F, 0x01, 0x01, 0x03, 0x0E, 0x06, 0x02, 0x0D, 0x3B, 0x01, 0x01, 0x00, 0x11, 0x07
	.byte 0x02, 0x0D, 0x47, 0x01, 0x01, 0x01, 0x16, 0x06, 0x02, 0x0D, 0x47, 0x01, 0x04, 0x19, 0x15, 0x05
	.byte 0x02, 0x0D, 0x53, 0x01, 0x04, 0x12, 0x04, 0x06, 0x02, 0x0D, 0x5D, 0x01, 0x04, 0x12, 0x06, 0x06
	.byte 0x02, 0x0D, 0x69, 0x01, 0x04, 0x12, 0x08, 0x08, 0x02, 0x0D, 0x75, 0x01, 0x01, 0x12, 0x0B, 0x09
	.byte 0x02, 0x0D, 0x85, 0x01, 0x01, 0x02, 0x0D, 0x0C, 0x02, 0x0D, 0x97, 0x01, 0x04, 0x01, 0x11, 0x0C
	.byte 0x02, 0x0D, 0xAF, 0x01, 0x04, 0x14, 0x01, 0x0B, 0x02, 0x0D, 0xC7, 0x01, 0x01, 0x14, 0x16, 0x0C
	.byte 0x02, 0x0D, 0xDD, 0x01, 0x01, 0x14, 0x06, 0x06, 0x02, 0x0D, 0xF5, 0x01, 0x01, 0x16, 0x04, 0x09
	.byte 0x02, 0x0D, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00
	.byte 0x12, 0x14, 0xC8, 0x0E, 0x00, 0x00, 0x12, 0x14, 0xDF, 0x02, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00
	.byte 0x00, 0x00, 0x98, 0x20, 0xC5, 0x03, 0x00, 0x00, 0xA2, 0x15, 0x7F, 0x01, 0x00, 0x00, 0x0B, 0x00
	.byte 0x02, 0x00, 0x00, 0x00, 0xA7, 0x1B, 0x75, 0xF4, 0x00, 0x00, 0x04, 0x15, 0x96, 0xFF, 0x00, 0x00
	.byte 0x07, 0x00, 0xF5, 0xFF, 0x00, 0x00, 0x12, 0x14, 0x2C, 0x01, 0x00, 0x00, 0x12, 0x14, 0x2C, 0x01
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x07, 0xC5, 0x03, 0x00, 0x00, 0x25, 0x12
	.byte 0x7F, 0x01, 0x00, 0x00, 0xF5, 0xFF, 0x02, 0x00, 0x00, 0x00, 0xB5, 0x13, 0xC8, 0x0E, 0x00, 0x00
	.byte 0xB5, 0x13, 0xDF, 0x02, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0xB5, 0x13, 0x2C, 0x01
	.byte 0x00, 0x00, 0xB5, 0x13, 0x2C, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x0C
	.byte 0x75, 0xF4, 0x00, 0x00, 0xC3, 0x12, 0x96, 0xFF, 0x00, 0x00, 0xF9, 0xFF, 0xF5, 0xFF, 0x00, 0x00
	.byte 0x33, 0x07, 0xC5, 0x03, 0x00, 0x00, 0x25, 0x12, 0x7F, 0x01, 0x00, 0x00, 0xF5, 0xFF, 0x02, 0x00
	.byte 0x00, 0x00, 0xB5, 0x13, 0x2C, 0x01, 0x00, 0x00, 0xB5, 0x13, 0x2C, 0x01, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0xA7, 0x1B, 0x75, 0xF4, 0x00, 0x00, 0xB3, 0x14, 0x96, 0xFF, 0x00, 0x00
	.byte 0x07, 0x00, 0xF5, 0xFF, 0x00, 0x00, 0x22, 0x0C, 0x75, 0xF4, 0x00, 0x00, 0xC3, 0x12, 0x96, 0xFF
	.byte 0x00, 0x00, 0xF9, 0xFF, 0xF5, 0xFF, 0x00, 0x00, 0x12, 0x14, 0x2C, 0x01, 0x00, 0x00, 0x12, 0x14
	.byte 0x2C, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x98, 0x20, 0xC5, 0x03, 0x00, 0x00
	.byte 0xA2, 0x15, 0x7F, 0x01, 0x00, 0x00, 0x0B, 0x00, 0x02, 0x00, 0x00, 0x00, 0xA7, 0x1B, 0x75, 0xF4
	.byte 0x00, 0x00, 0x04, 0x15, 0x96, 0xFF, 0x00, 0x00, 0x07, 0x00, 0xF5, 0xFF, 0x00, 0x00, 0x22, 0x0C
	.byte 0x75, 0xF4, 0x00, 0x00, 0x14, 0x13, 0x96, 0xFF, 0x00, 0x00, 0xF9, 0xFF, 0xF5, 0xFF, 0x00, 0x00
	.byte 0x00, 0x01, 0x01, 0x04, 0x01, 0x02, 0x05, 0x0F, 0x02, 0x04, 0x19, 0x0A, 0x03, 0x04, 0x1A, 0x04
	.byte 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00
	.byte 0x08, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xA5, 0xBF, 0x02, 0x2D
	.byte 0xA5, 0xBF, 0x30, 0x60, 0xA5, 0xBF, 0x63, 0x8C, 0xA5, 0xBF, 0xBD, 0xFA, 0x26, 0x42, 0xA5, 0xCB
	.byte 0x2E, 0x4A, 0xCD, 0xF3, 0x46, 0x62, 0xA5, 0xCB, 0x4E, 0x6A, 0xCD, 0xF3, 0x66, 0x82, 0xA5, 0xCB
	.byte 0x6E, 0x8A, 0xCD, 0xF3, 0xFF, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x50, 0x00, 0x4E, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x00, 0x01, 0x00, 0x51, 0x00
	.byte 0x4F, 0x00, 0x00, 0x00, 0x4A, 0x00, 0x00, 0x00, 0x02, 0x00, 0x52, 0x00, 0x50, 0x00, 0x00, 0x00
	.byte 0x4B, 0x00, 0x00, 0x00, 0x03, 0x00, 0x53, 0x00, 0x51, 0x00, 0x00, 0x00, 0x4C, 0x00, 0x00, 0x00
	.byte 0x04, 0x00, 0x54, 0x00, 0x52, 0x00, 0x00, 0x00, 0x49, 0x00, 0x01, 0x00, 0x05, 0x00, 0x55, 0x00
	.byte 0x53, 0x00, 0x00, 0x00, 0x4A, 0x00, 0x01, 0x00, 0x06, 0x00, 0x56, 0x00, 0x54, 0x00, 0x00, 0x00
	.byte 0x4B, 0x00, 0x01, 0x00, 0x07, 0x00, 0x57, 0x00, 0x55, 0x00, 0x00, 0x00, 0x4C, 0x00, 0x01, 0x00
	.byte 0x08, 0x00, 0x58, 0x00, 0x56, 0x00, 0x00, 0x00, 0x49, 0x00, 0x02, 0x00, 0x09, 0x00, 0x59, 0x00
	.byte 0x57, 0x00, 0x00, 0x00, 0x4A, 0x00, 0x02, 0x00, 0x0A, 0x00, 0x5A, 0x00, 0x58, 0x00, 0x00, 0x00
	.byte 0x4B, 0x00, 0x02, 0x00, 0x0B, 0x00, 0x5B, 0x00, 0x59, 0x00, 0x00, 0x00, 0x4C, 0x00, 0x02, 0x00
	.byte 0x0C, 0x00, 0x5C, 0x00, 0x5A, 0x00, 0x00, 0x00, 0x49, 0x00, 0x03, 0x00, 0x0D, 0x00, 0x5D, 0x00
	.byte 0x5B, 0x00, 0x00, 0x00, 0x4A, 0x00, 0x03, 0x00, 0x0E, 0x00, 0x5E, 0x00, 0x5C, 0x00, 0x00, 0x00
	.byte 0x4B, 0x00, 0x03, 0x00, 0x0F, 0x00, 0x5F, 0x00, 0x5D, 0x00, 0x00, 0x00, 0x4C, 0x00, 0x03, 0x00
	.byte 0x10, 0x00, 0x60, 0x00, 0x5E, 0x00, 0x00, 0x00, 0x49, 0x00, 0x04, 0x00, 0x11, 0x00, 0x61, 0x00
	.byte 0x5F, 0x00, 0x00, 0x00, 0x4A, 0x00, 0x04, 0x00, 0x12, 0x00, 0x62, 0x00, 0x60, 0x00, 0x00, 0x00
	.byte 0x4B, 0x00, 0x04, 0x00, 0x13, 0x00, 0x63, 0x00, 0x61, 0x00, 0x00, 0x00, 0x4C, 0x00, 0x04, 0x00
	.byte 0x14, 0x00, 0x64, 0x00, 0x63, 0x00, 0x00, 0x00, 0x4E, 0x00, 0x00, 0x00, 0x15, 0x00, 0x65, 0x00
	.byte 0x64, 0x00, 0x00, 0x00, 0x4D, 0x00, 0x00, 0x00, 0x16, 0x00, 0x66, 0x00, 0x65, 0x00, 0x00, 0x00
	.byte 0x4F, 0x00, 0x01, 0x00, 0x17, 0x00, 0x67, 0x00, 0x66, 0x00, 0x00, 0x00, 0x50, 0x00, 0x02, 0x00
	.byte 0x18, 0x00, 0x68, 0x00, 0x67, 0x00, 0x00, 0x00, 0x51, 0x00, 0x01, 0x00, 0x19, 0x00, 0x00, 0x80
	.byte 0x68, 0x00, 0x00, 0x00, 0x51, 0x00, 0x03, 0x00, 0x1A, 0x00, 0x01, 0x80, 0x69, 0x00, 0x00, 0x00
	.byte 0x51, 0x00, 0x04, 0x00, 0x1B, 0x00, 0x02, 0x80, 0x6A, 0x00, 0x00, 0x00, 0x52, 0x00, 0x03, 0x00
	.byte 0x1C, 0x00, 0xB2, 0x00, 0x6B, 0x00, 0x00, 0x00, 0x52, 0x00, 0x04, 0x00, 0x1D, 0x00, 0xBE, 0x00
	.byte 0x6C, 0x00, 0x00, 0x00, 0x53, 0x00, 0x00, 0x00, 0x1E, 0x00, 0xBF, 0x00, 0x6D, 0x00, 0x00, 0x00
	.byte 0x53, 0x00, 0x01, 0x00, 0x1F, 0x00, 0xB2, 0x00, 0x19, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00
	.byte 0x20, 0x00, 0x69, 0x00, 0x7B, 0x00, 0x00, 0x00, 0x59, 0x00, 0x00, 0x00, 0x21, 0x00, 0x6A, 0x00
	.byte 0x7C, 0x00, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x00, 0x22, 0x00, 0x6B, 0x00, 0x7D, 0x00, 0x00, 0x00
	.byte 0x5B, 0x00, 0x00, 0x00, 0x23, 0x00, 0x6C, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x5C, 0x00, 0x00, 0x00
	.byte 0x24, 0x00, 0x6D, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x59, 0x00, 0x01, 0x00, 0x25, 0x00, 0x6E, 0x00
	.byte 0x80, 0x00, 0x00, 0x00, 0x5A, 0x00, 0x01, 0x00, 0x26, 0x00, 0x6F, 0x00, 0x81, 0x00, 0x00, 0x00
	.byte 0x5B, 0x00, 0x01, 0x00, 0x27, 0x00, 0x70, 0x00, 0x82, 0x00, 0x00, 0x00, 0x5C, 0x00, 0x01, 0x00
	.byte 0x28, 0x00, 0x71, 0x00, 0x83, 0x00, 0x00, 0x00, 0x59, 0x00, 0x02, 0x00, 0x29, 0x00, 0x72, 0x00
	.byte 0x84, 0x00, 0x00, 0x00, 0x5A, 0x00, 0x02, 0x00, 0x2A, 0x00, 0x73, 0x00, 0x85, 0x00, 0x00, 0x00
	.byte 0x5B, 0x00, 0x02, 0x00, 0x2B, 0x00, 0x74, 0x00, 0x86, 0x00, 0x00, 0x00, 0x5C, 0x00, 0x02, 0x00
	.byte 0x2C, 0x00, 0x75, 0x00, 0x87, 0x00, 0x00, 0x00, 0x59, 0x00, 0x03, 0x00, 0x2D, 0x00, 0x76, 0x00
	.byte 0x88, 0x00, 0x00, 0x00, 0x5A, 0x00, 0x03, 0x00, 0x2E, 0x00, 0x77, 0x00, 0x89, 0x00, 0x00, 0x00
	.byte 0x5B, 0x00, 0x03, 0x00, 0x2F, 0x00, 0x78, 0x00, 0x8A, 0x00, 0x00, 0x00, 0x5C, 0x00, 0x03, 0x00
	.byte 0x30, 0x00, 0x79, 0x00, 0x8B, 0x00, 0x00, 0x00, 0x59, 0x00, 0x04, 0x00, 0x31, 0x00, 0x7A, 0x00
	.byte 0x8C, 0x00, 0x00, 0x00, 0x5A, 0x00, 0x04, 0x00, 0x32, 0x00, 0x7B, 0x00, 0x8D, 0x00, 0x00, 0x00
	.byte 0x5B, 0x00, 0x04, 0x00, 0x33, 0x00, 0x7C, 0x00, 0x8E, 0x00, 0x00, 0x00, 0x5C, 0x00, 0x04, 0x00
	.byte 0x34, 0x00, 0x7D, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x5D, 0x00, 0x00, 0x00, 0x35, 0x00, 0x7E, 0x00
	.byte 0x1B, 0x00, 0x00, 0x00, 0x5E, 0x00, 0x00, 0x00, 0x36, 0x00, 0x7F, 0x00, 0x1C, 0x00, 0x00, 0x00
	.byte 0x5F, 0x00, 0x00, 0x00, 0x37, 0x00, 0x80, 0x00, 0x1D, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00
	.byte 0x38, 0x00, 0x81, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00, 0x39, 0x00, 0x82, 0x00
	.byte 0x1F, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x3A, 0x00, 0x83, 0x00, 0x20, 0x00, 0x00, 0x00
	.byte 0x63, 0x00, 0x02, 0x00, 0x3B, 0x00, 0x84, 0x00, 0x21, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00
	.byte 0x3C, 0x00, 0x85, 0x00, 0x22, 0x00, 0x00, 0x00, 0x65, 0x00, 0x01, 0x00, 0x3D, 0x00, 0x86, 0x00
	.byte 0x23, 0x00, 0x00, 0x00, 0x66, 0x00, 0x02, 0x00, 0x3E, 0x00, 0x87, 0x00, 0x24, 0x00, 0x00, 0x00
	.byte 0x67, 0x00, 0x03, 0x00, 0x3F, 0x00, 0x88, 0x00, 0x25, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00
	.byte 0x40, 0x00, 0x89, 0x00, 0x26, 0x00, 0x00, 0x00, 0x69, 0x00, 0x02, 0x00, 0x41, 0x00, 0x8A, 0x00
	.byte 0x27, 0x00, 0x00, 0x00, 0x6A, 0x00, 0x01, 0x00, 0x42, 0x00, 0x8B, 0x00, 0x28, 0x00, 0x00, 0x00
	.byte 0x6B, 0x00, 0x03, 0x00, 0x43, 0x00, 0x8C, 0x00, 0x29, 0x00, 0x00, 0x00, 0x6C, 0x00, 0x00, 0x00
	.byte 0x44, 0x00, 0x8D, 0x00, 0x2A, 0x00, 0x00, 0x00, 0x6D, 0x00, 0x00, 0x00, 0x45, 0x00, 0x8E, 0x00
	.byte 0x2B, 0x00, 0x00, 0x00, 0x6E, 0x00, 0x01, 0x00, 0x46, 0x00, 0x8F, 0x00, 0x2C, 0x00, 0x00, 0x00
	.byte 0x6F, 0x00, 0x03, 0x00, 0x47, 0x00, 0x90, 0x00, 0x2D, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00
	.byte 0x48, 0x00, 0x91, 0x00, 0x2E, 0x00, 0x00, 0x00, 0x71, 0x00, 0x00, 0x00, 0x49, 0x00, 0x07, 0x80
	.byte 0x2F, 0x00, 0x00, 0x00, 0x72, 0x00, 0x03, 0x00, 0x4A, 0x00, 0x08, 0x80, 0x30, 0x00, 0x00, 0x00
	.byte 0x73, 0x00, 0x01, 0x00, 0x4B, 0x00, 0x09, 0x80, 0x31, 0x00, 0x00, 0x00, 0x74, 0x00, 0x01, 0x00
	.byte 0x4C, 0x00, 0x0A, 0x80, 0x32, 0x00, 0x00, 0x00, 0x75, 0x00, 0x00, 0x00, 0x4D, 0x00, 0x0B, 0x80
	.byte 0x33, 0x00, 0x00, 0x00, 0x76, 0x00, 0x01, 0x00, 0x4E, 0x00, 0x0C, 0x80, 0x34, 0x00, 0x00, 0x00
	.byte 0x77, 0x00, 0x00, 0x00, 0x4F, 0x00, 0x0D, 0x80, 0x46, 0x00, 0x41, 0x00, 0x42, 0x00, 0x43, 0x00
	.byte 0x44, 0x00, 0x45, 0x00, 0x47, 0x00, 0x48, 0x00, 0x49, 0x00, 0x4A, 0x00, 0x4B, 0x00, 0x4C, 0x00
	.byte 0x4D, 0x00, 0x4E, 0x00, 0x4F, 0x00, 0x50, 0x00, 0x51, 0x00, 0x52, 0x00, 0x53, 0x00, 0x54, 0x00
	.byte 0x55, 0x00, 0x56, 0x00, 0x57, 0x00, 0x58, 0x00, 0x59, 0x00, 0x5A, 0x00, 0x5B, 0x00, 0x5C, 0x00
	.byte 0x5D, 0x00, 0x5E, 0x00, 0x5F, 0x00, 0x60, 0x00, 0x61, 0x00, 0x62, 0x00, 0x63, 0x00, 0x64, 0x00
	.byte 0x81, 0xF6, 0x08, 0x02, 0xF9, 0xF7, 0x08, 0x02, 0x01, 0xF8, 0x08, 0x02, 0xF5, 0xF6, 0x08, 0x02
	.byte 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x15, 0xF7, 0x08, 0x02, 0xC5, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x25, 0xF7, 0x08, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x29, 0xF7, 0x08, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x2D, 0xF7, 0x08, 0x02
	.byte 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x7D, 0xF7, 0x08, 0x02, 0xF5, 0xF7, 0x08, 0x02
	.byte 0x01, 0xF8, 0x08, 0x02, 0xA9, 0xF7, 0x08, 0x02, 0xE9, 0xF7, 0x08, 0x02, 0x01, 0xF8, 0x08, 0x02
	.byte 0x39, 0xF7, 0x08, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x3D, 0xF7, 0x08, 0x02
	.byte 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x4D, 0xF7, 0x08, 0x02, 0xF1, 0xF7, 0x08, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0x5D, 0xFB, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x29, 0xF8, 0x08, 0x02, 0x99, 0x15, 0x09, 0x02, 0x4D, 0xFB, 0x08, 0x02
	.byte 0xBD, 0xF8, 0x08, 0x02, 0xA1, 0x15, 0x09, 0x02, 0x00, 0x00, 0x00, 0x00, 0xE5, 0xF8, 0x08, 0x02
	.byte 0xA5, 0x15, 0x09, 0x02, 0x00, 0x00, 0x00, 0x00, 0x89, 0xFA, 0x08, 0x02, 0xC5, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x8D, 0xFA, 0x08, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x55, 0xFA, 0x08, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x19, 0xF9, 0x08, 0x02
	.byte 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x51, 0xFA, 0x08, 0x02, 0xC1, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x61, 0xF9, 0x08, 0x02, 0x61, 0xFB, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x91, 0xFA, 0x08, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0xA9, 0xFA, 0x08, 0x02
	.byte 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0xED, 0xFA, 0x08, 0x02, 0xC1, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0xFD, 0xFC, 0x08, 0x02, 0x81, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x01, 0xFD, 0x08, 0x02, 0x81, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0xDD, 0xFC, 0x08, 0x02
	.byte 0x81, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0xE1, 0xFB, 0x08, 0x02, 0x7D, 0xFD, 0x08, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0xF1, 0xFB, 0x08, 0x02, 0x85, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x05, 0xFD, 0x08, 0x02, 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x1D, 0xFD, 0x08, 0x02
	.byte 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x99, 0xFB, 0x08, 0x02, 0x7D, 0xFD, 0x08, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x79, 0xFB, 0x08, 0x02, 0x91, 0x15, 0x09, 0x02, 0x89, 0xFD, 0x08, 0x02
	.byte 0x89, 0xFB, 0x08, 0x02, 0x81, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0x7D, 0xFD, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0x7D, 0xFD, 0x08, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x27, 0x00, 0x35, 0x01, 0x28, 0x01, 0x35, 0x01, 0x29, 0x02, 0x36, 0x05
	.byte 0x2A, 0x03, 0x37, 0x09, 0x2B, 0x04, 0x38, 0x0D, 0x2C, 0x05, 0x39, 0x12, 0x2D, 0x06, 0x3A, 0x16
	.byte 0x2F, 0x07, 0x3B, 0x19, 0x2E, 0x08, 0x3C, 0x1D, 0x31, 0x09, 0x3D, 0x21, 0x30, 0x0A, 0x3E, 0x25
	.byte 0x33, 0x0B, 0x3F, 0x2A, 0x32, 0x0C, 0x40, 0x2E, 0x34, 0x0D, 0x41, 0x32, 0x35, 0x0E, 0x42, 0x36
	.byte 0x36, 0x0F, 0x43, 0x3A, 0x37, 0x10, 0x44, 0x3E, 0x38, 0x11, 0x49, 0x42, 0x39, 0x12, 0x4A, 0x46
	.byte 0x3A, 0x13, 0x4B, 0x4A, 0x3B, 0x14, 0x4C, 0x4E, 0x3C, 0x15, 0x45, 0x52, 0x3D, 0x16, 0x46, 0x56
	.byte 0x3E, 0x17, 0x47, 0x5A, 0x3F, 0x18, 0x48, 0x5E, 0x40, 0x19, 0x4D, 0x61, 0x41, 0x1A, 0x4E, 0x65
	.byte 0x42, 0x1B, 0x4F, 0x69, 0x43, 0x1C, 0x50, 0x6D, 0x44, 0x1D, 0x51, 0x71, 0x45, 0x1E, 0x52, 0x75
	.byte 0x46, 0x1F, 0x53, 0x79, 0x47, 0x20, 0x54, 0x7D, 0x48, 0x21, 0x55, 0x81, 0x49, 0x22, 0x56, 0x85
	.byte 0x4A, 0x23, 0x57, 0x8A, 0x4B, 0x24, 0x58, 0x8E, 0x4C, 0x25, 0x59, 0x91, 0x4D, 0x26, 0x5A, 0x95
	.byte 0x4E, 0x27, 0x5B, 0x99, 0x4F, 0x28, 0x5C, 0x9D, 0x50, 0x29, 0x5D, 0xA1, 0x51, 0x2A, 0x5E, 0xA5
	.byte 0x52, 0x2B, 0x5F, 0xA9, 0x53, 0x2C, 0x60, 0xAD, 0x54, 0x2D, 0x61, 0xB1, 0x55, 0x2E, 0x62, 0xB5
	.byte 0x56, 0x2F, 0x63, 0xB9, 0x57, 0x30, 0x64, 0xBD, 0x58, 0x31, 0x65, 0xC1, 0x59, 0x32, 0x66, 0x00
	.byte 0x5A, 0x33, 0x67, 0x00, 0x5B, 0x34, 0x68, 0x00, 0x5C, 0x35, 0x69, 0x00, 0x5D, 0x36, 0x6A, 0x00
	.byte 0x5E, 0x37, 0x6B, 0x00, 0x5F, 0x38, 0x6C, 0x00, 0x60, 0x39, 0x6D, 0x00, 0x61, 0x3A, 0x6E, 0x00
	.byte 0x62, 0x3B, 0x6F, 0x00, 0x63, 0x3C, 0x70, 0x00, 0x64, 0x3D, 0x71, 0x00, 0x65, 0x3E, 0x72, 0x00
	.byte 0x66, 0x3F, 0x73, 0x00, 0x67, 0x40, 0x74, 0x00, 0x68, 0x41, 0x75, 0x00, 0x69, 0x42, 0x76, 0x00
	.byte 0x6A, 0x43, 0x77, 0x00, 0x6B, 0x44, 0x78, 0x00, 0x6C, 0x45, 0x79, 0x00, 0x6D, 0x46, 0x7A, 0x00
	.byte 0x6E, 0x47, 0x7B, 0x00, 0x6F, 0x48, 0x7C, 0x00, 0x70, 0x49, 0x7D, 0x00, 0x71, 0x4A, 0x7E, 0x00
	.byte 0x72, 0x4B, 0x7F, 0x00, 0x73, 0x4C, 0x80, 0x00, 0x74, 0x4D, 0x81, 0x00, 0x75, 0x4E, 0x82, 0xC4
	.byte 0x76, 0x4F, 0x83, 0xC8, 0x77, 0x50, 0x84, 0xCC, 0x71, 0x6D, 0x1E, 0x02, 0x89, 0x6E, 0x1E, 0x02
	.byte 0x0D, 0x6F, 0x1E, 0x02, 0x5F, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x05, 0x04, 0x07, 0x00, 0x00
	.byte 0x01, 0x02, 0x03, 0x04, 0x05, 0x00, 0x00, 0x00

	.public _02106068
_02106068:
	.word ov53_021E5900, ov53_021E5994, ov53_021E5B48, SDK_OVERLAY_OVY_53_ID

_02106078:
	.byte 0xC1, 0x76, 0x05, 0x02, 0x99, 0x77, 0x05, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x9D, 0x77, 0x05, 0x02, 0x09, 0x7A, 0x05, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x6D, 0x77, 0x05, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0xAD, 0x73, 0x05, 0x02, 0xC5, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0xCD, 0x88, 0x05, 0x02, 0x89, 0x15, 0x09, 0x02, 0xDD, 0x88, 0x05, 0x02, 0x71, 0x15, 0x09, 0x02
	.byte 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x51, 0x7D, 0x05, 0x02, 0xC5, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x21, 0x87, 0x05, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x09, 0xA4, 0x05, 0x02, 0xCD, 0x8E, 0x02, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x31, 0xA4, 0x05, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x0D, 0xA4, 0x05, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0xC5, 0xA4, 0x05, 0x02
	.byte 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x11, 0xA4, 0x05, 0x02, 0xC1, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x4D, 0xA4, 0x05, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x6D, 0xA4, 0x05, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x99, 0xA4, 0x05, 0x02
	.byte 0x89, 0x15, 0x09, 0x02, 0xB5, 0xA4, 0x05, 0x02, 0xE5, 0x9A, 0x05, 0x02, 0x09, 0x9B, 0x05, 0x02
	.byte 0x19, 0x9B, 0x05, 0x02, 0x35, 0x9B, 0x05, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xA9, 0x15, 0x09, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0x91, 0x15, 0x09, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0x99, 0x15, 0x09, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xA1, 0x15, 0x09, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xA5, 0x15, 0x09, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC5, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xAD, 0x15, 0x09, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0x65, 0x15, 0x09, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0x69, 0x15, 0x09, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x5D, 0xF8, 0x04, 0x02, 0xB9, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x59, 0xFE, 0x04, 0x02
	.byte 0xB9, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x99, 0x03, 0x05, 0x02, 0xB9, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00

	.public _021065C4
_021065C4:
	.word sub_02091634, 0, 0, 0xFFFFFFFF
_021065D4:
	.byte 0x01, 0x03, 0x02, 0x05, 0x04, 0x06, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04
	.byte 0x05, 0x06, 0x07, 0x00, 0x01, 0x02, 0x03, 0x05, 0x06, 0x07, 0x04, 0x00, 0x02, 0x01, 0x03, 0x04
	.byte 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08
	.byte 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x00, 0x00, 0x00, 0x01, 0x02, 0x05, 0x03, 0x04, 0x06, 0x07, 0x08
	.byte 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x01, 0x02, 0x03, 0x04, 0x05, 0x10, 0x06, 0x07
	.byte 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x01, 0x02, 0x03, 0x07, 0x09, 0x08, 0x0A, 0x11
	.byte 0x0B, 0x0C, 0x04, 0x06, 0x10, 0x0D, 0x0E, 0x0F, 0x05, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04
	.byte 0x05, 0x06, 0x07, 0x08, 0x0A, 0x09, 0x0B, 0x0C, 0x14, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13
	.byte 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10
	.byte 0x11, 0x12, 0x13, 0x14, 0x02, 0x01, 0x04, 0x0C, 0x0D, 0x07, 0x06, 0x05, 0x0B, 0x03, 0x12, 0x13
	.byte 0x16, 0x15, 0x11, 0x08, 0x09, 0x0F, 0x0A, 0x10, 0x0E, 0x14, 0x00, 0x00, 0x01, 0x03, 0x04, 0x05
	.byte 0x02, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14
	.byte 0x15, 0x16, 0x17, 0x18, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0D, 0x0E
	.byte 0x0F, 0x0B, 0x10, 0x11, 0x12, 0x13, 0x14, 0x0C, 0x15, 0x16, 0x17, 0x18, 0x01, 0x03, 0x04, 0x05
	.byte 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x16, 0x15
	.byte 0x14, 0x02, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08
	.byte 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18
	.byte 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08
	.byte 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x18, 0x16, 0x17
	.byte 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x00, 0x1A, 0x08, 0x05, 0x0F
	.byte 0x29, 0x15, 0x2B, 0x0A, 0x18, 0x0D, 0x25, 0x02, 0x04, 0x01, 0x03, 0x1F, 0x0B, 0x14, 0x06, 0x28
	.byte 0x31, 0x11, 0x2A, 0x2E, 0x1D, 0x1B, 0x07, 0x30, 0x17, 0x2D, 0x20, 0x12, 0x2F, 0x24, 0x32, 0x1E
	.byte 0x2C, 0x0E, 0x1C, 0x23, 0x19, 0x0C, 0x27, 0x10, 0x22, 0x13, 0x21, 0x09, 0x26, 0x16, 0x00, 0x00
	.byte 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10
	.byte 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20
	.byte 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30
	.byte 0x31, 0x32, 0x33, 0x00, 0x00, 0x12, 0x1E, 0x03, 0x58, 0x68, 0x10, 0x02, 0x82, 0x00, 0x00, 0x00
	.byte 0x09, 0x00, 0x0C, 0x03, 0x7C, 0x66, 0x10, 0x02, 0x18, 0x00, 0x00, 0x00, 0x0C, 0x01, 0x0D, 0x03
	.byte 0xDC, 0x65, 0x10, 0x02, 0x07, 0x00, 0x00, 0x00, 0x1C, 0x02, 0x0E, 0x03, 0xAC, 0x66, 0x10, 0x02
	.byte 0x1B, 0x00, 0x00, 0x00, 0x24, 0x03, 0x0F, 0x03, 0xF8, 0x65, 0x10, 0x02, 0x0D, 0x00, 0x00, 0x00
	.byte 0x2B, 0x04, 0x10, 0x03, 0xC8, 0x66, 0x10, 0x02, 0x1F, 0x00, 0x00, 0x00, 0x4D, 0x05, 0x11, 0x03
	.byte 0x18, 0x66, 0x10, 0x02, 0x10, 0x00, 0x00, 0x00, 0xC1, 0x06, 0x12, 0x03, 0x28, 0x66, 0x10, 0x02
	.byte 0x11, 0x00, 0x00, 0x00, 0x46, 0x07, 0x13, 0x03, 0xD4, 0x65, 0x10, 0x02, 0x06, 0x00, 0x00, 0x00
	.byte 0x47, 0x08, 0x14, 0x03, 0x64, 0x66, 0x10, 0x02, 0x16, 0x00, 0x00, 0x00, 0xDB, 0x09, 0x15, 0x03
	.byte 0xEC, 0x65, 0x10, 0x02, 0x0C, 0x00, 0x00, 0x00, 0x5E, 0x0A, 0x16, 0x03, 0xE8, 0x66, 0x10, 0x02
	.byte 0x23, 0x00, 0x00, 0x00, 0x65, 0x0B, 0x17, 0x03, 0x50, 0x66, 0x10, 0x02, 0x14, 0x00, 0x00, 0x00
	.byte 0x67, 0x0C, 0x18, 0x03, 0x0C, 0x67, 0x10, 0x02, 0x32, 0x00, 0x00, 0x00, 0x9C, 0x0D, 0x19, 0x03
	.byte 0x3C, 0x66, 0x10, 0x02, 0x14, 0x00, 0x00, 0x00, 0xA6, 0x0E, 0x1A, 0x03, 0x08, 0x66, 0x10, 0x02
	.byte 0x10, 0x00, 0x00, 0x00, 0xAC, 0x0F, 0x1B, 0x03, 0xE4, 0x65, 0x10, 0x02, 0x07, 0x00, 0x00, 0x00
	.byte 0xC7, 0x10, 0x1C, 0x03, 0x94, 0x66, 0x10, 0x02, 0x18, 0x00, 0x00, 0x00, 0xDC, 0x11, 0x1D, 0x03
	.byte 0x40, 0x67, 0x10, 0x02, 0x33, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x06, 0x08, 0x09, 0x0C, 0x0D
	.byte 0x0F, 0x10, 0x11, 0x12, 0x14, 0x15, 0x16, 0x17, 0x19, 0x1B, 0x1C, 0x1D, 0x1F, 0x21, 0x22, 0x23
	.byte 0x24, 0x28, 0x2A, 0x2B, 0x2D, 0x30, 0x31, 0x32, 0x34, 0x36, 0x37, 0x38, 0x3A, 0x3B, 0x3C, 0x3D
	.byte 0x3E, 0x45, 0x46, 0x47, 0x48, 0x4A, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x55, 0x56, 0x58
	.byte 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x61, 0x62, 0x64, 0x65, 0x66, 0x67, 0x68, 0x6B, 0x6F
	.byte 0x73, 0x75, 0x76, 0x79, 0x7A, 0x7E, 0x81, 0x83, 0x85, 0x87, 0x8C, 0x8E, 0x92, 0x94, 0x95, 0x96
	.byte 0x97, 0x98, 0x9C, 0x9D, 0x9E, 0xA0, 0xA1, 0xA3, 0xA4, 0xA6, 0xA7, 0x6E, 0xAB, 0xAC, 0xB3, 0xB7
	.byte 0xBA, 0xBB, 0xBC, 0xBD, 0xC0, 0xC1, 0xC2, 0xC4, 0xC6, 0xC7, 0xC8, 0xCA, 0xCD, 0xCF, 0xD3, 0xD4
	.byte 0xD8, 0xDA, 0xDB, 0xCC, 0xDD, 0xDC, 0xDE, 0xE0, 0xE2, 0xE3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x08, 0x05, 0xFF, 0xFF, 0x84, 0x03, 0xB2, 0x00, 0xFF, 0xFF, 0xC3, 0x00
	.byte 0x52, 0x02, 0x35, 0x04, 0x9C, 0x00, 0xD3, 0x00, 0xFF, 0xFF, 0x4F, 0x01, 0xB0, 0x02, 0x91, 0x00
	.byte 0x9C, 0x03, 0x07, 0x01, 0x29, 0x00, 0xFF, 0xFF, 0x27, 0x00, 0x81, 0x01, 0x0D, 0x05, 0x87, 0x00
	.byte 0x0A, 0x02, 0xBD, 0x00, 0x7C, 0x00, 0xFF, 0xFF, 0xC9, 0x04, 0xFD, 0x04, 0xC1, 0x00, 0xD5, 0x01
	.byte 0x09, 0x03, 0x03, 0x05, 0xAF, 0x04, 0xE6, 0x04, 0xE5, 0x04, 0xAB, 0x04, 0x22, 0x05, 0xFE, 0x04
	.byte 0x7A, 0x04, 0xFF, 0xFF, 0x61, 0x03, 0xBE, 0x05, 0xCD, 0x04, 0xC5, 0x00, 0x43, 0x04, 0xB9, 0x04
	.byte 0x2A, 0x04, 0x7D, 0x04, 0xD0, 0x05, 0xD1, 0x05, 0xC9, 0x00, 0xED, 0x02, 0xB1, 0x04, 0xD9, 0x00
	.byte 0x87, 0x05, 0xE0, 0x01, 0xFF, 0xFF, 0x8C, 0x00, 0x8D, 0x00, 0x40, 0x00, 0x0E, 0x00, 0x73, 0x00
	.byte 0xF2, 0x01, 0x60, 0x01, 0x09, 0x04, 0x8F, 0x04, 0x68, 0x05, 0x76, 0x02, 0xE6, 0x00, 0x63, 0x00
	.byte 0x19, 0x01, 0x3D, 0x04, 0x0A, 0x03, 0x6D, 0x00, 0x9E, 0x04, 0x62, 0x00, 0x91, 0x01, 0x92, 0x01
	.byte 0x7E, 0x01, 0xFF, 0xFF, 0xD4, 0x05, 0xCB, 0x05, 0xC6, 0x05, 0xCD, 0x05, 0xD3, 0x05, 0xC1, 0x05
	.byte 0xC8, 0x05, 0xCC, 0x05, 0xCA, 0x05, 0xD5, 0x05, 0xC5, 0x05, 0xC4, 0x05, 0xC2, 0x05, 0xC3, 0x05
	.byte 0xD2, 0x05, 0xC7, 0x05, 0xC9, 0x05, 0xD6, 0x05, 0xC0, 0x05, 0xD0, 0x05, 0xD1, 0x05, 0xCE, 0x05
	.byte 0xCF, 0x05, 0xFF, 0xFF, 0xE2, 0x03, 0xAE, 0x02, 0xE0, 0x00, 0x2B, 0x00, 0x2C, 0x03, 0xC7, 0x04
	.byte 0xA4, 0x04, 0xC2, 0x04, 0xF5, 0x04, 0xC1, 0x04, 0xBB, 0x04, 0xDA, 0x04, 0x86, 0x04, 0x8A, 0x00
	.byte 0x8B, 0x00, 0xC2, 0x03, 0xA3, 0x05, 0x5F, 0x00, 0xC5, 0x04, 0x78, 0x04, 0xB8, 0x02, 0x17, 0x04
	.byte 0x2B, 0x03, 0xEA, 0x03, 0xFF, 0xFF, 0x6D, 0x05, 0x8A, 0x03, 0x86, 0x00, 0xBC, 0x05, 0x31, 0x00
	.byte 0x30, 0x00, 0x03, 0x00, 0x62, 0x04, 0xA0, 0x01, 0x49, 0x01, 0xFB, 0x01, 0x60, 0x04, 0x47, 0x00
	.byte 0x1F, 0x05, 0x20, 0x01, 0x2D, 0x00, 0x06, 0x02, 0x1E, 0x04, 0xD9, 0x02, 0xCE, 0x05, 0x39, 0x01
	.byte 0xE0, 0x03, 0x48, 0x03, 0x64, 0x00, 0x25, 0x00, 0xFF, 0xFF, 0xAB, 0x05, 0xAC, 0x05, 0xA7, 0x05
	.byte 0xAF, 0x05, 0xB2, 0x05, 0xB0, 0x05, 0xAA, 0x05, 0xA9, 0x05, 0xA0, 0x05, 0xA8, 0x05, 0xB9, 0x05
	.byte 0xB8, 0x05, 0xB6, 0x05, 0xA2, 0x05, 0xAD, 0x05, 0xB4, 0x05, 0xA1, 0x05, 0xB7, 0x05, 0xA5, 0x05
	.byte 0xB3, 0x05, 0xA3, 0x05, 0xBB, 0x05, 0xBD, 0x05, 0xBF, 0x05, 0xA6, 0x05, 0xB5, 0x05, 0xA4, 0x05
	.byte 0xBA, 0x05, 0xAE, 0x05, 0xB1, 0x05, 0xBE, 0x05, 0xBC, 0x05, 0xFF, 0xFF, 0x80, 0x04, 0x95, 0x04
	.byte 0x84, 0x04, 0x9D, 0x04, 0x7F, 0x04, 0x81, 0x04, 0x99, 0x04, 0x8A, 0x04, 0x7E, 0x04, 0x94, 0x04
	.byte 0x89, 0x04, 0x88, 0x04, 0x7C, 0x04, 0x83, 0x04, 0x8B, 0x04, 0x8C, 0x04, 0x9C, 0x04, 0x8F, 0x04
	.byte 0x87, 0x04, 0x7B, 0x04, 0x90, 0x04, 0x91, 0x04, 0x92, 0x04, 0x86, 0x04, 0x78, 0x04, 0x85, 0x04
	.byte 0x96, 0x04, 0x9A, 0x04, 0x8E, 0x04, 0x82, 0x04, 0x7D, 0x04, 0x93, 0x04, 0x7A, 0x04, 0xFF, 0xFF
	.byte 0x9C, 0x04, 0xD0, 0x04, 0xD4, 0x04, 0xD3, 0x03, 0x1D, 0x03, 0x2A, 0x02, 0x49, 0x04, 0x97, 0x03
	.byte 0xF8, 0x01, 0x94, 0x03, 0x3D, 0x03, 0xB4, 0x02, 0x09, 0x05, 0xAE, 0x00, 0xF9, 0x03, 0x3A, 0x01
	.byte 0xE7, 0x03, 0xA1, 0x05, 0x82, 0x05, 0x0E, 0x03, 0x7E, 0x05, 0x88, 0x01, 0x36, 0x05, 0x03, 0x03
	.byte 0xFD, 0x03, 0xE5, 0x03, 0xEC, 0x03, 0x72, 0x04, 0x3E, 0x03, 0x2F, 0x04, 0xAA, 0x03, 0xD7, 0x02
	.byte 0xB7, 0x05, 0x4E, 0x05, 0x02, 0x00, 0xFF, 0xFF, 0x58, 0x04, 0x5A, 0x04, 0x6B, 0x04, 0x65, 0x04
	.byte 0x59, 0x04, 0x5C, 0x04, 0x73, 0x04, 0x75, 0x04, 0x6C, 0x04, 0x63, 0x04, 0x68, 0x04, 0x69, 0x04
	.byte 0x72, 0x04, 0x6A, 0x04, 0x70, 0x04, 0x5F, 0x04, 0x52, 0x04, 0x76, 0x04, 0x56, 0x04, 0x53, 0x04
	.byte 0x71, 0x04, 0x6E, 0x04, 0x64, 0x04, 0x54, 0x04, 0x6D, 0x04, 0x61, 0x04, 0x6F, 0x04, 0x57, 0x04
	.byte 0x5E, 0x04, 0x66, 0x04, 0x5B, 0x04, 0x67, 0x04, 0x5D, 0x04, 0x77, 0x04, 0x62, 0x04, 0x60, 0x04
	.byte 0x74, 0x04, 0x55, 0x04, 0xFF, 0xFF, 0x4F, 0x05, 0x57, 0x05, 0x91, 0x03, 0xB1, 0x00, 0xF4, 0x03
	.byte 0x5B, 0x03, 0xFB, 0x02, 0x1E, 0x03, 0x91, 0x05, 0xB3, 0x05, 0x50, 0x05, 0x9E, 0x05, 0x22, 0x00
	.byte 0x1F, 0x00, 0x1D, 0x00, 0x20, 0x00, 0x1E, 0x00, 0x21, 0x00, 0x55, 0x02, 0x80, 0x03, 0x9B, 0x02
	.byte 0x22, 0x01, 0x26, 0x00, 0x23, 0x01, 0xE2, 0x04, 0x39, 0x04, 0x56, 0x04, 0xA9, 0x04, 0xFE, 0xFF
	.byte 0x02, 0x00, 0xFC, 0x04, 0x96, 0x05, 0x53, 0x04, 0xA4, 0x00, 0xAA, 0x04, 0xC4, 0x03, 0x36, 0x04
	.byte 0x2B, 0x01, 0x42, 0x01, 0x12, 0x01, 0xFF, 0xFF, 0x06, 0x04, 0x8E, 0x03, 0xA0, 0x05, 0x49, 0x02
	.byte 0x73, 0x04, 0x75, 0x04, 0xA8, 0x05, 0xC8, 0x04, 0x85, 0x00, 0xF1, 0x03, 0x69, 0x02, 0xBD, 0x04
	.byte 0x17, 0x00, 0x7D, 0x00, 0xD2, 0x01, 0xD1, 0x03, 0x35, 0x01, 0x65, 0x00, 0xEF, 0x00, 0x65, 0x03
	.byte 0x24, 0x02, 0x8B, 0x01, 0xD3, 0x02, 0x0B, 0x03, 0xBB, 0x02, 0x8F, 0x05, 0x8C, 0x03, 0x86, 0x05
	.byte 0xF4, 0x00, 0x0C, 0x03, 0xC4, 0x00, 0x46, 0x05, 0x99, 0x04, 0x89, 0x05, 0xD9, 0x04, 0x66, 0x00
	.byte 0x67, 0x00, 0x89, 0x02, 0x27, 0x01, 0x36, 0x03, 0xE5, 0x02, 0xFF, 0xFF, 0x84, 0x05, 0x83, 0x05
	.byte 0x79, 0x05, 0x99, 0x05, 0x71, 0x05, 0x81, 0x05, 0x74, 0x05, 0x76, 0x05, 0x78, 0x05, 0x97, 0x05
	.byte 0x72, 0x05, 0x7D, 0x05, 0x9F, 0x05, 0x75, 0x05, 0x80, 0x05, 0x88, 0x05, 0x8F, 0x05, 0x86, 0x05
	.byte 0x89, 0x05, 0x7C, 0x05, 0x8E, 0x05, 0x8C, 0x05, 0x7A, 0x05, 0x82, 0x05, 0x7E, 0x05, 0x7F, 0x05
	.byte 0x98, 0x05, 0x95, 0x05, 0x91, 0x05, 0x9E, 0x05, 0x96, 0x05, 0x94, 0x05, 0x9C, 0x05, 0x7B, 0x05
	.byte 0x8D, 0x05, 0x77, 0x05, 0x93, 0x05, 0x9D, 0x05, 0x8A, 0x05, 0x9A, 0x05, 0x73, 0x05, 0x9B, 0x05
	.byte 0x90, 0x05, 0x8B, 0x05, 0x85, 0x05, 0x87, 0x05, 0x92, 0x05, 0xFF, 0xFF, 0x08, 0x6F, 0x10, 0x02
	.byte 0xB8, 0x70, 0x10, 0x02, 0x90, 0x75, 0x10, 0x02, 0x52, 0x71, 0x10, 0x02, 0xE8, 0x6B, 0x10, 0x02
	.byte 0x7C, 0x6E, 0x10, 0x02, 0x98, 0x6F, 0x10, 0x02, 0x8C, 0x72, 0x10, 0x02, 0x00, 0x6B, 0x10, 0x02
	.byte 0x68, 0x69, 0x10, 0x02, 0xB6, 0x69, 0x10, 0x02, 0x7C, 0x6D, 0x10, 0x02, 0x64, 0x76, 0x10, 0x02
	.byte 0x96, 0x6B, 0x10, 0x02, 0x14, 0x6A, 0x10, 0x02, 0x34, 0x73, 0x10, 0x02, 0x4E, 0x69, 0x10, 0x02
	.byte 0xF4, 0x6D, 0x10, 0x02, 0x64, 0x78, 0x10, 0x02, 0xEC, 0x71, 0x10, 0x02, 0x94, 0x69, 0x10, 0x02
	.byte 0x46, 0x6A, 0x10, 0x02, 0x08, 0x6D, 0x10, 0x02, 0x48, 0x69, 0x10, 0x02, 0x78, 0x69, 0x10, 0x02
	.byte 0x5A, 0x69, 0x10, 0x02, 0x44, 0x69, 0x10, 0x02, 0x07, 0x05, 0x04, 0x05, 0x40, 0x01, 0x41, 0x01
	.byte 0x56, 0x03, 0x2E, 0x05, 0x6D, 0x01, 0x92, 0x05, 0x08, 0x00, 0xCF, 0x03, 0xE1, 0x03, 0x27, 0x02
	.byte 0x50, 0x03, 0x4A, 0x03, 0x33, 0x03, 0xFF, 0x03, 0x6F, 0x02, 0x74, 0x04, 0x27, 0x03, 0xCD, 0x01
	.byte 0x0D, 0x00, 0xD5, 0x04, 0x46, 0x00, 0x6E, 0x00, 0xFF, 0x04, 0xC6, 0x04, 0xE0, 0x04, 0xEA, 0x02
	.byte 0x02, 0x02, 0x54, 0x01, 0x25, 0x01, 0x1F, 0x04, 0x93, 0x04, 0xB4, 0x04, 0xCF, 0x05, 0x28, 0x00
	.byte 0xF5, 0x02, 0x01, 0x02, 0x16, 0x01, 0x55, 0x04, 0x01, 0x03, 0x5E, 0x02, 0xCA, 0x00, 0xEF, 0x03
	.byte 0xB4, 0x03, 0xC2, 0x00, 0x28, 0x05, 0x2F, 0x05, 0x70, 0x05, 0x9D, 0x01, 0x74, 0x03, 0xB6, 0x04
	.byte 0x13, 0x02, 0x6A, 0x03, 0xB5, 0x04, 0x09, 0x01, 0x68, 0x01, 0xFF, 0xFF, 0x31, 0x01, 0x02, 0x05
	.byte 0xAB, 0x00, 0x83, 0x00, 0xF6, 0x00, 0x73, 0x03, 0x7C, 0x01, 0x7D, 0x01, 0xA4, 0x03, 0x4C, 0x03
	.byte 0x3C, 0x04, 0xA5, 0x03, 0xD6, 0x01, 0xA6, 0x00, 0xA5, 0x00, 0x7D, 0x02, 0x39, 0x02, 0x1B, 0x02
	.byte 0x6A, 0x04, 0x34, 0x05, 0xB2, 0x04, 0xAD, 0x04, 0x45, 0x05, 0xC5, 0x05, 0xC4, 0x05, 0xF0, 0x03
	.byte 0x6A, 0x02, 0xCF, 0x01, 0x6C, 0x00, 0x6A, 0x05, 0x61, 0x02, 0xF5, 0x03, 0x7F, 0x05, 0x59, 0x01
	.byte 0xDD, 0x03, 0x08, 0x01, 0x16, 0x04, 0xB7, 0x02, 0xED, 0x04, 0x0F, 0x01, 0x6E, 0x05, 0xAC, 0x01
	.byte 0x70, 0x04, 0x0E, 0x01, 0x26, 0x01, 0x7E, 0x02, 0x98, 0x05, 0x33, 0x02, 0xC0, 0x01, 0x6D, 0x03
	.byte 0x10, 0x01, 0xF9, 0x00, 0xC9, 0x01, 0xBD, 0x03, 0x51, 0x01, 0x17, 0x03, 0x72, 0x01, 0x94, 0x01
	.byte 0x95, 0x01, 0xFF, 0xFF, 0x6B, 0x05, 0x53, 0x02, 0x1A, 0x00, 0xF3, 0x00, 0xE0, 0x02, 0x02, 0x04
	.byte 0x18, 0x01, 0x99, 0x01, 0xD5, 0x02, 0x4E, 0x00, 0x94, 0x05, 0x14, 0x00, 0x13, 0x00, 0x80, 0x01
	.byte 0x3B, 0x02, 0xFD, 0x01, 0x4E, 0x04, 0x9C, 0x05, 0xC9, 0x05, 0x59, 0x02, 0x06, 0x03, 0x63, 0x02
	.byte 0x0F, 0x03, 0x01, 0x05, 0x7A, 0x01, 0xE6, 0x01, 0x79, 0x01, 0x7B, 0x01, 0x7B, 0x05, 0x71, 0x01
	.byte 0xBF, 0x05, 0xDF, 0x00, 0x6F, 0x05, 0xA6, 0x05, 0x8C, 0x02, 0xC8, 0x02, 0x07, 0x03, 0xA3, 0x02
	.byte 0x6D, 0x04, 0x70, 0x00, 0x6F, 0x00, 0xD0, 0x01, 0xBF, 0x01, 0x9A, 0x04, 0x25, 0x04, 0x1E, 0x02
	.byte 0xBB, 0x03, 0xC9, 0x03, 0x4E, 0x03, 0x9F, 0x03, 0x1B, 0x04, 0x7D, 0x03, 0x8D, 0x02, 0xE9, 0x02
	.byte 0x48, 0x02, 0x2D, 0x03, 0xA7, 0x03, 0x8D, 0x05, 0x00, 0x03, 0x0B, 0x02, 0xBD, 0x02, 0x53, 0x03
	.byte 0x3B, 0x01, 0x97, 0x01, 0xDF, 0x01, 0xEE, 0x03, 0x08, 0x04, 0xFF, 0xFF, 0xF7, 0x02, 0xA9, 0x02
	.byte 0xEC, 0x02, 0x29, 0x03, 0xBE, 0x02, 0x8A, 0x04, 0x53, 0x00, 0x59, 0x05, 0x7E, 0x04, 0x16, 0x00
	.byte 0x19, 0x03, 0x5D, 0x01, 0x5C, 0x03, 0xA0, 0x00, 0x60, 0x05, 0x6C, 0x04, 0xC5, 0x03, 0x63, 0x04
	.byte 0x45, 0x04, 0xC8, 0x01, 0xCE, 0x03, 0x6E, 0x02, 0x98, 0x03, 0xF7, 0x01, 0x43, 0x02, 0x43, 0x05
	.byte 0x4A, 0x02, 0xB4, 0x00, 0x9F, 0x02, 0xB9, 0x05, 0x07, 0x04, 0x9C, 0x02, 0x25, 0x02, 0x7A, 0x03
	.byte 0x88, 0x00, 0x84, 0x02, 0x9E, 0x03, 0xE8, 0x03, 0xF4, 0x02, 0x66, 0x03, 0xA3, 0x01, 0x50, 0x04
	.byte 0x55, 0x05, 0x03, 0x02, 0x4A, 0x01, 0xC6, 0x03, 0x8B, 0x03, 0x64, 0x02, 0xF8, 0x02, 0x68, 0x04
	.byte 0xFA, 0x02, 0x7B, 0x03, 0x11, 0x04, 0xB1, 0x02, 0x42, 0x04, 0xCF, 0x04, 0xCD, 0x00, 0xB8, 0x05
	.byte 0x42, 0x03, 0x94, 0x04, 0xCC, 0x05, 0x4D, 0x04, 0xDE, 0x01, 0xCA, 0x02, 0xA2, 0x00, 0x0F, 0x02
	.byte 0xC2, 0x02, 0x8A, 0x02, 0xE8, 0x02, 0xFF, 0xFF, 0xA5, 0x04, 0xCC, 0x01, 0x3F, 0x00, 0x67, 0x01
	.byte 0x37, 0x02, 0x58, 0x04, 0x23, 0x02, 0x87, 0x02, 0x5F, 0x03, 0x31, 0x04, 0x84, 0x05, 0x80, 0x04
	.byte 0x5B, 0x05, 0x3C, 0x03, 0xA1, 0x02, 0x8E, 0x00, 0x40, 0x04, 0x32, 0x01, 0x51, 0x02, 0xBC, 0x04
	.byte 0xA6, 0x04, 0xBE, 0x00, 0x2A, 0x03, 0x22, 0x04, 0x83, 0x03, 0xEA, 0x04, 0x41, 0x00, 0x83, 0x05
	.byte 0x95, 0x04, 0x4E, 0x01, 0xA8, 0x01, 0x75, 0x02, 0xB5, 0x00, 0xE6, 0x02, 0x79, 0x05, 0x29, 0x04
	.byte 0xF7, 0x04, 0x0C, 0x05, 0x21, 0x05, 0x5B, 0x01, 0xFE, 0xFF, 0x02, 0x00, 0x41, 0x04, 0x99, 0x05
	.byte 0xB5, 0x03, 0x78, 0x03, 0x81, 0x03, 0x18, 0x00, 0x3B, 0x00, 0xED, 0x01, 0x1D, 0x04, 0xA8, 0x00
	.byte 0x14, 0x03, 0x5C, 0x01, 0x28, 0x03, 0x30, 0x01, 0xAB, 0x05, 0x90, 0x00, 0x02, 0x03, 0x64, 0x03
	.byte 0x26, 0x03, 0x5A, 0x04, 0xB6, 0x03, 0xC5, 0x02, 0x84, 0x04, 0x7C, 0x03, 0x2E, 0x02, 0x93, 0x03
	.byte 0xE2, 0x01, 0xB8, 0x00, 0x2A, 0x01, 0xFF, 0xFF, 0xBC, 0x01, 0x89, 0x04, 0xDB, 0x01, 0x27, 0x05
	.byte 0xBD, 0x01, 0x1A, 0x01, 0x5C, 0x00, 0x6C, 0x03, 0xA7, 0x01, 0x5E, 0x00, 0x69, 0x04, 0x4A, 0x00
	.byte 0xCB, 0x03, 0xBB, 0x01, 0xBA, 0x02, 0x90, 0x03, 0xCA, 0x04, 0xCB, 0x00, 0xE7, 0x01, 0x88, 0x04
	.byte 0xCB, 0x04, 0xD7, 0x01, 0x6A, 0x01, 0xAF, 0x01, 0x79, 0x02, 0xCF, 0x00, 0xD8, 0x01, 0x2C, 0x00
	.byte 0x28, 0x04, 0xB6, 0x05, 0xDD, 0x04, 0x2A, 0x00, 0x76, 0x00, 0xA2, 0x05, 0x37, 0x00, 0x4C, 0x00
	.byte 0xAD, 0x05, 0xD2, 0x04, 0x70, 0x01, 0xCA, 0x05, 0x26, 0x05, 0xD2, 0x00, 0x7C, 0x04, 0x83, 0x04
	.byte 0xD0, 0x03, 0xAF, 0x03, 0x30, 0x03, 0x4B, 0x00, 0x54, 0x03, 0xC4, 0x04, 0x58, 0x00, 0x84, 0x01
	.byte 0x7F, 0x01, 0xC8, 0x03, 0x25, 0x05, 0xFD, 0x00, 0x1D, 0x02, 0x3A, 0x00, 0x3A, 0x02, 0x10, 0x03
	.byte 0x46, 0x01, 0xD5, 0x05, 0x71, 0x03, 0xFC, 0x01, 0x3C, 0x01, 0xA9, 0x03, 0x00, 0x02, 0x14, 0x04
	.byte 0xCC, 0x04, 0x82, 0x00, 0x58, 0x03, 0xFF, 0xFF, 0x15, 0x19, 0x09, 0x02, 0xE4, 0x7B, 0x10, 0x02
	.byte 0xEB, 0x00, 0x00, 0x00, 0x15, 0x19, 0x09, 0x02, 0xA0, 0x7F, 0x10, 0x02, 0x02, 0x01, 0x00, 0x00
	.byte 0x75, 0x19, 0x09, 0x02, 0x24, 0x7A, 0x10, 0x02, 0xDF, 0x00, 0x00, 0x00, 0x75, 0x19, 0x09, 0x02
	.byte 0xBC, 0x7D, 0x10, 0x02, 0xF1, 0x00, 0x00, 0x00, 0xC1, 0x1A, 0x09, 0x02, 0x4E, 0x77, 0x10, 0x02
	.byte 0x8A, 0x00, 0x00, 0x00, 0xC1, 0x1A, 0x09, 0x02, 0x48, 0x6B, 0x10, 0x02, 0x26, 0x00, 0x00, 0x00
	.byte 0xC1, 0x1A, 0x09, 0x02, 0xBC, 0x6A, 0x10, 0x02, 0x21, 0x00, 0x00, 0x00, 0x39, 0x1A, 0x09, 0x02
	.byte 0xF0, 0x73, 0x10, 0x02, 0x66, 0x00, 0x00, 0x00, 0xC1, 0x1A, 0x09, 0x02, 0xBE, 0x74, 0x10, 0x02
	.byte 0x68, 0x00, 0x00, 0x00, 0xC1, 0x1A, 0x09, 0x02, 0x3C, 0x6C, 0x10, 0x02, 0x2F, 0x00, 0x00, 0x00
	.byte 0xC5, 0x19, 0x09, 0x02, 0x7A, 0x6A, 0x10, 0x02, 0x20, 0x00, 0x00, 0x00, 0xC1, 0x1A, 0x09, 0x02
	.byte 0xE4, 0x69, 0x10, 0x02, 0x17, 0x00, 0x00, 0x00, 0x9D, 0x04, 0x73, 0x01, 0x5D, 0x05, 0x57, 0x01
	.byte 0x62, 0x01, 0x53, 0x01, 0x7C, 0x02, 0x60, 0x02, 0x9B, 0x01, 0x16, 0x05, 0xD2, 0x02, 0x6B, 0x04
	.byte 0xDA, 0x03, 0xD4, 0x05, 0x99, 0x00, 0xEB, 0x02, 0x0B, 0x01, 0x71, 0x05, 0x0F, 0x00, 0x76, 0x01
	.byte 0xB6, 0x00, 0x45, 0x00, 0xAB, 0x02, 0x90, 0x01, 0x31, 0x05, 0x65, 0x02, 0x8F, 0x01, 0x04, 0x02
	.byte 0x40, 0x05, 0x1C, 0x02, 0x23, 0x03, 0x09, 0x00, 0x18, 0x04, 0x1B, 0x03, 0x01, 0x01, 0xF2, 0x00
	.byte 0x2B, 0x02, 0x3F, 0x03, 0xDC, 0x04, 0x5C, 0x05, 0x12, 0x02, 0x6D, 0x02, 0xAC, 0x05, 0xB6, 0x02
	.byte 0x8B, 0x02, 0xA0, 0x04, 0xB6, 0x01, 0x06, 0x05, 0xBE, 0x04, 0x5E, 0x05, 0x81, 0x05, 0x44, 0x03
	.byte 0x7F, 0x04, 0x8D, 0x03, 0x1E, 0x01, 0x08, 0x03, 0x5A, 0x03, 0xB5, 0x01, 0xB4, 0x01, 0x81, 0x04
	.byte 0x81, 0x02, 0x2D, 0x02, 0x96, 0x01, 0xCA, 0x03, 0xB2, 0x03, 0x85, 0x03, 0xA2, 0x01, 0x01, 0x00
	.byte 0x43, 0x03, 0x92, 0x03, 0x3B, 0x03, 0xAB, 0x01, 0x9C, 0x01, 0x0C, 0x00, 0xF6, 0x04, 0xE7, 0x04
	.byte 0xFF, 0xFF, 0x38, 0x05, 0xDC, 0x03, 0x41, 0x05, 0x97, 0x05, 0xD5, 0x03, 0x7F, 0x03, 0xEB, 0x01
	.byte 0x44, 0x05, 0xB7, 0x03, 0x5F, 0x02, 0xA0, 0x03, 0x2D, 0x01, 0xE1, 0x00, 0x72, 0x05, 0x82, 0x01
	.byte 0x7D, 0x05, 0x4A, 0x05, 0x47, 0x05, 0xB2, 0x02, 0xB5, 0x02, 0x57, 0x00, 0xE3, 0x01, 0x3C, 0x05
	.byte 0x9F, 0x05, 0x4B, 0x02, 0x48, 0x05, 0x32, 0x00, 0x22, 0x02, 0x75, 0x05, 0xA3, 0x03, 0x80, 0x05
	.byte 0x84, 0x00, 0x13, 0x03, 0x82, 0x02, 0x55, 0x00, 0x54, 0x00, 0xE8, 0x00, 0x51, 0x03, 0xC1, 0x05
	.byte 0xBA, 0x03, 0x08, 0x02, 0x58, 0x02, 0x16, 0x02, 0xF3, 0x01, 0x2E, 0x04, 0xA2, 0x03, 0xD4, 0x03
	.byte 0x41, 0x03, 0x4D, 0x03, 0x86, 0x03, 0x42, 0x02, 0x87, 0x03, 0x94, 0x00, 0xD1, 0x02, 0x95, 0x00
	.byte 0x89, 0x03, 0xC4, 0x01, 0x93, 0x00, 0xC8, 0x05, 0x67, 0x05, 0x7A, 0x02, 0xAA, 0x01, 0xA9, 0x01
	.byte 0x31, 0x02, 0xD8, 0x03, 0x88, 0x05, 0x1C, 0x04, 0x60, 0x00, 0x2D, 0x04, 0x33, 0x00, 0xCE, 0x00
	.byte 0x64, 0x01, 0xDD, 0x01, 0x63, 0x01, 0x0D, 0x01, 0xCF, 0x02, 0xFF, 0xFF, 0x11, 0x02, 0x16, 0x03
	.byte 0x17, 0x02, 0x14, 0x01, 0x5E, 0x03, 0x14, 0x02, 0x67, 0x04, 0x5D, 0x04, 0x15, 0x05, 0x72, 0x00
	.byte 0x23, 0x04, 0xD1, 0x01, 0xFD, 0x02, 0x80, 0x00, 0x39, 0x05, 0x8B, 0x05, 0x3B, 0x04, 0xD8, 0x00
	.byte 0x1A, 0x03, 0x54, 0x02, 0x4B, 0x05, 0x48, 0x00, 0x49, 0x00, 0x49, 0x05, 0xD3, 0x04, 0xA8, 0x04
	.byte 0xF4, 0x04, 0x05, 0x04, 0x98, 0x02, 0x15, 0x02, 0x47, 0x02, 0x96, 0x03, 0x46, 0x02, 0x45, 0x02
	.byte 0xF9, 0x01, 0x44, 0x02, 0x31, 0x03, 0x44, 0x04, 0x23, 0x05, 0xD4, 0x01, 0xAF, 0x00, 0xB0, 0x00
	.byte 0x0A, 0x05, 0xFF, 0x00, 0x44, 0x01, 0xF3, 0x02, 0x19, 0x04, 0x85, 0x01, 0x9E, 0x00, 0x85, 0x05
	.byte 0x3D, 0x05, 0x4C, 0x02, 0x76, 0x03, 0xC6, 0x01, 0x18, 0x05, 0xFA, 0x03, 0x4C, 0x05, 0x77, 0x04
	.byte 0x32, 0x05, 0x80, 0x02, 0x48, 0x01, 0x3F, 0x05, 0x3E, 0x05, 0xFC, 0x00, 0x91, 0x02, 0xFF, 0x02
	.byte 0xA1, 0x03, 0x97, 0x02, 0x65, 0x01, 0x0C, 0x04, 0x68, 0x03, 0x83, 0x01, 0xDB, 0x04, 0x19, 0x02
	.byte 0xDF, 0x02, 0xB1, 0x05, 0x9D, 0x00, 0xF8, 0x00, 0xEC, 0x00, 0xFF, 0xFF, 0x24, 0x05, 0xE9, 0x04
	.byte 0xF2, 0x02, 0xA2, 0x04, 0x57, 0x03, 0x7C, 0x05, 0xB8, 0x01, 0x8E, 0x05, 0x5A, 0x02, 0x29, 0x01
	.byte 0x8C, 0x05, 0x5D, 0x00, 0x62, 0x02, 0xF1, 0x04, 0xB9, 0x03, 0x0D, 0x02, 0xC7, 0x02, 0x69, 0x03
	.byte 0xB8, 0x03, 0x59, 0x03, 0x7A, 0x05, 0x77, 0x03, 0xF1, 0x02, 0x2B, 0x04, 0xE5, 0x01, 0xC3, 0x04
	.byte 0xF2, 0x04, 0xBF, 0x04, 0x9F, 0x04, 0xFA, 0x04, 0xFE, 0x02, 0x8B, 0x04, 0xD6, 0x00, 0xAC, 0x04
	.byte 0xAE, 0x04, 0x56, 0x05, 0x58, 0x05, 0xC0, 0x04, 0xD1, 0x04, 0xDF, 0x04, 0xE4, 0x04, 0x78, 0x02
	.byte 0xFB, 0x04, 0xDD, 0x02, 0x8C, 0x04, 0xC1, 0x01, 0xC2, 0x01, 0x6B, 0x00, 0x6A, 0x00, 0xED, 0x00
	.byte 0xEB, 0x04, 0xB3, 0x04, 0xFA, 0x00, 0x35, 0x05, 0xF3, 0x04, 0xA3, 0x04, 0x66, 0x05, 0x0F, 0x05
	.byte 0xAE, 0x01, 0x4C, 0x04, 0xA3, 0x00, 0xBB, 0x00, 0x0E, 0x02, 0x10, 0x02, 0x74, 0x00, 0xE5, 0x00
	.byte 0xE4, 0x00, 0x40, 0x03, 0xB4, 0x05, 0xFB, 0x03, 0xE1, 0x04, 0xEF, 0x04, 0x6F, 0x01, 0x0D, 0x04
	.byte 0x33, 0x04, 0x24, 0x03, 0x28, 0x02, 0x2F, 0x02, 0x0A, 0x04, 0x8E, 0x02, 0x20, 0x03, 0x61, 0x00
	.byte 0x4F, 0x02, 0xFF, 0xFF, 0xA1, 0x01, 0xCC, 0x02, 0xE4, 0x01, 0x2E, 0x00, 0x2F, 0x00, 0xD6, 0x04
	.byte 0x85, 0x04, 0x71, 0x04, 0x53, 0x05, 0xF6, 0x01, 0x63, 0x03, 0x30, 0x02, 0x17, 0x01, 0xB3, 0x02
	.byte 0x35, 0x00, 0x96, 0x04, 0x40, 0x02, 0xBB, 0x05, 0xE7, 0x00, 0xE9, 0x01, 0x4D, 0x05, 0xAC, 0x00
	.byte 0x0B, 0x04, 0x12, 0x00, 0x11, 0x00, 0x10, 0x00, 0x19, 0x00, 0xDD, 0x00, 0x1A, 0x02, 0xCC, 0x00
	.byte 0x7F, 0x00, 0x89, 0x01, 0x69, 0x05, 0x17, 0x05, 0x0B, 0x05, 0x5D, 0x03, 0x0F, 0x04, 0x37, 0x01
	.byte 0x13, 0x05, 0xD2, 0x05, 0x6E, 0x04, 0xC7, 0x03, 0x21, 0x03, 0x7B, 0x02, 0x30, 0x04, 0x7E, 0x03
	.byte 0xFC, 0x03, 0x18, 0x02, 0x46, 0x03, 0x3D, 0x02, 0xC7, 0x05, 0xBA, 0x00, 0x3C, 0x00, 0x3D, 0x00
	.byte 0x3E, 0x00, 0xBD, 0x05, 0x4D, 0x00, 0x05, 0x01, 0x51, 0x05, 0x89, 0x00, 0xDA, 0x01, 0xE9, 0x00
	.byte 0xF1, 0x01, 0xA5, 0x02, 0x64, 0x04, 0x88, 0x03, 0x70, 0x03, 0x6B, 0x03, 0xA6, 0x03, 0x54, 0x04
	.byte 0xC9, 0x02, 0x04, 0x04, 0x39, 0x00, 0x8A, 0x01, 0xDC, 0x01, 0x65, 0x05, 0xA6, 0x02, 0x2C, 0x02
	.byte 0xE4, 0x02, 0xFE, 0xFF, 0x02, 0x00, 0x4E, 0x02, 0xD2, 0x03, 0x52, 0x03, 0x9B, 0x03, 0x67, 0x03
	.byte 0x36, 0x00, 0x85, 0x02, 0x72, 0x03, 0xF7, 0x00, 0x20, 0x04, 0xD4, 0x02, 0xB0, 0x01, 0xFF, 0xFF
	.byte 0x08, 0x05, 0xA5, 0x04, 0xBC, 0x04, 0xA6, 0x04, 0xEA, 0x04, 0xF7, 0x04, 0xDC, 0x04, 0xA0, 0x04
	.byte 0x06, 0x05, 0xBE, 0x04, 0xF6, 0x04, 0xE7, 0x04, 0xDE, 0x04, 0xA1, 0x04, 0xBA, 0x04, 0xB8, 0x04
	.byte 0xC8, 0x04, 0xBD, 0x04, 0xD9, 0x04, 0xCF, 0x04, 0xCA, 0x04, 0xCB, 0x04, 0xDD, 0x04, 0xD2, 0x04
	.byte 0xC4, 0x04, 0xCC, 0x04, 0xE9, 0x04, 0xA2, 0x04, 0xF1, 0x04, 0xC3, 0x04, 0xF2, 0x04, 0xBF, 0x04
	.byte 0x9F, 0x04, 0xFA, 0x04, 0xAC, 0x04, 0xAE, 0x04, 0xC0, 0x04, 0xD1, 0x04, 0xDF, 0x04, 0xE4, 0x04
	.byte 0xFB, 0x04, 0xEB, 0x04, 0xB3, 0x04, 0xF3, 0x04, 0xA3, 0x04, 0xE1, 0x04, 0xEF, 0x04, 0xD0, 0x04
	.byte 0xD4, 0x04, 0x9E, 0x04, 0x02, 0x05, 0xB2, 0x04, 0xAD, 0x04, 0xED, 0x04, 0xE8, 0x04, 0xF9, 0x04
	.byte 0xF8, 0x04, 0xEC, 0x04, 0xE2, 0x04, 0xA9, 0x04, 0xFC, 0x04, 0xAA, 0x04, 0xC7, 0x04, 0xA4, 0x04
	.byte 0xC2, 0x04, 0xF5, 0x04, 0xC1, 0x04, 0xBB, 0x04, 0xDA, 0x04, 0xC5, 0x04, 0xD6, 0x04, 0x01, 0x05
	.byte 0xD8, 0x04, 0xE3, 0x04, 0xB7, 0x04, 0xEE, 0x04, 0xD7, 0x04, 0xCE, 0x04, 0xD3, 0x04, 0xA8, 0x04
	.byte 0xF4, 0x04, 0xDB, 0x04, 0xCD, 0x04, 0xB9, 0x04, 0xB1, 0x04, 0x07, 0x05, 0x04, 0x05, 0xD5, 0x04
	.byte 0xFF, 0x04, 0xC6, 0x04, 0xE0, 0x04, 0xB4, 0x04, 0xB6, 0x04, 0xB5, 0x04, 0xC9, 0x04, 0xFD, 0x04
	.byte 0x03, 0x05, 0xAF, 0x04, 0xE6, 0x04, 0xE5, 0x04, 0xAB, 0x04, 0xFE, 0x04, 0xFF, 0xFF, 0x5B, 0x05
	.byte 0x0C, 0x05, 0x21, 0x05, 0x5D, 0x05, 0x16, 0x05, 0x31, 0x05, 0x40, 0x05, 0x5C, 0x05, 0x5E, 0x05
	.byte 0x1E, 0x05, 0x1A, 0x05, 0x42, 0x05, 0x14, 0x05, 0x33, 0x05, 0x29, 0x05, 0x61, 0x05, 0x2B, 0x05
	.byte 0x54, 0x05, 0x1C, 0x05, 0x6C, 0x05, 0x38, 0x05, 0x41, 0x05, 0x44, 0x05, 0x4A, 0x05, 0x47, 0x05
	.byte 0x3C, 0x05, 0x48, 0x05, 0x67, 0x05, 0x46, 0x05, 0x59, 0x05, 0x60, 0x05, 0x43, 0x05, 0x55, 0x05
	.byte 0x27, 0x05, 0x26, 0x05, 0x25, 0x05, 0x24, 0x05, 0x56, 0x05, 0x58, 0x05, 0x35, 0x05, 0x66, 0x05
	.byte 0x0F, 0x05, 0x09, 0x05, 0x36, 0x05, 0x4E, 0x05, 0x0D, 0x05, 0x68, 0x05, 0x34, 0x05, 0x45, 0x05
	.byte 0x6A, 0x05, 0x6E, 0x05, 0x5F, 0x05, 0x2D, 0x05, 0x62, 0x05, 0x63, 0x05, 0x12, 0x05, 0x10, 0x05
	.byte 0x19, 0x05, 0x4F, 0x05, 0x57, 0x05, 0x50, 0x05, 0x53, 0x05, 0x4D, 0x05, 0x69, 0x05, 0x17, 0x05
	.byte 0x0B, 0x05, 0x13, 0x05, 0x51, 0x05, 0x65, 0x05, 0x6B, 0x05, 0x6F, 0x05, 0x1D, 0x05, 0x2C, 0x05
	.byte 0x1B, 0x05, 0x3A, 0x05, 0x0E, 0x05, 0x3B, 0x05, 0x20, 0x05, 0x37, 0x05, 0x2A, 0x05, 0x64, 0x05
	.byte 0x5A, 0x05, 0x52, 0x05, 0x11, 0x05, 0x30, 0x05, 0x15, 0x05, 0x39, 0x05, 0x4B, 0x05, 0x49, 0x05
	.byte 0x23, 0x05, 0x0A, 0x05, 0x3D, 0x05, 0x18, 0x05, 0x4C, 0x05, 0x32, 0x05, 0x3F, 0x05, 0x3E, 0x05
	.byte 0x6D, 0x05, 0x1F, 0x05, 0x2E, 0x05, 0x28, 0x05, 0x2F, 0x05, 0x70, 0x05, 0x22, 0x05, 0xFF, 0xFF
	.byte 0x4B, 0x01, 0x4C, 0x01, 0xA7, 0x05, 0x4B, 0x03, 0x1E, 0x05, 0x43, 0x01, 0x15, 0x03, 0xAD, 0x03
	.byte 0x1A, 0x05, 0xC7, 0x01, 0x3E, 0x01, 0x0C, 0x01, 0x5F, 0x01, 0x0A, 0x00, 0xFB, 0x00, 0x65, 0x04
	.byte 0x42, 0x05, 0x71, 0x00, 0xFC, 0x02, 0xB3, 0x03, 0x06, 0x00, 0xBC, 0x02, 0x04, 0x00, 0x05, 0x00
	.byte 0xCB, 0x05, 0xB9, 0x01, 0xB0, 0x03, 0xDE, 0x04, 0xA5, 0x01, 0xA4, 0x01, 0x98, 0x00, 0x86, 0x01
	.byte 0x66, 0x01, 0xAA, 0x00, 0xB1, 0x01, 0x14, 0x05, 0xF8, 0x03, 0xA1, 0x04, 0x70, 0x02, 0x6E, 0x01
	.byte 0x33, 0x05, 0x58, 0x01, 0xF3, 0x03, 0x24, 0x00, 0x23, 0x00, 0xAD, 0x00, 0x74, 0x05, 0x62, 0x03
	.byte 0xE3, 0x03, 0x5B, 0x00, 0x29, 0x05, 0xE6, 0x03, 0xC6, 0x05, 0x9F, 0x01, 0x00, 0x01, 0x59, 0x04
	.byte 0xF4, 0x01, 0x61, 0x05, 0x2B, 0x05, 0xE4, 0x03, 0x54, 0x05, 0xAF, 0x05, 0x5D, 0x02, 0x4D, 0x02
	.byte 0xCD, 0x05, 0x74, 0x02, 0xD3, 0x05, 0xB2, 0x05, 0x1C, 0x05, 0x90, 0x02, 0xA0, 0x02, 0x76, 0x05
	.byte 0x6F, 0x03, 0xB0, 0x05, 0x55, 0x01, 0xDE, 0x00, 0x32, 0x03, 0xA2, 0x02, 0x34, 0x02, 0x5C, 0x04
	.byte 0x47, 0x03, 0x88, 0x02, 0x5A, 0x01, 0x98, 0x01, 0x56, 0x01, 0x6C, 0x05, 0xE8, 0x01, 0xBA, 0x04
	.byte 0xC5, 0x01, 0xA9, 0x00, 0x9F, 0x00, 0xDE, 0x02, 0xA8, 0x03, 0xAA, 0x05, 0xE2, 0x02, 0x22, 0x03
	.byte 0xBE, 0x03, 0xA9, 0x05, 0x68, 0x00, 0x9E, 0x02, 0xFF, 0x01, 0x0E, 0x04, 0xB8, 0x04, 0x78, 0x05
	.byte 0x9B, 0x00, 0xFF, 0xFF, 0xA7, 0x02, 0x44, 0x00, 0x5F, 0x05, 0x43, 0x00, 0x42, 0x00, 0x2D, 0x05
	.byte 0xF0, 0x00, 0xDB, 0x00, 0x05, 0x03, 0x38, 0x04, 0x49, 0x03, 0x81, 0x00, 0xFE, 0x03, 0xBF, 0x03
	.byte 0x7E, 0x00, 0xD3, 0x01, 0x51, 0x00, 0xAB, 0x03, 0x00, 0x04, 0x79, 0x03, 0x52, 0x00, 0xCE, 0x01
	.byte 0xCE, 0x02, 0x62, 0x05, 0x28, 0x01, 0xD9, 0x01, 0xEA, 0x01, 0x36, 0x01, 0x38, 0x00, 0xE2, 0x00
	.byte 0xCA, 0x01, 0xB3, 0x00, 0xB7, 0x00, 0x69, 0x00, 0x03, 0x01, 0x15, 0x04, 0x1C, 0x01, 0x5F, 0x04
	.byte 0x52, 0x04, 0x2F, 0x01, 0x87, 0x04, 0x6E, 0x03, 0xC4, 0x02, 0x34, 0x01, 0x50, 0x02, 0x33, 0x01
	.byte 0xE8, 0x04, 0x38, 0x02, 0x09, 0x02, 0xF5, 0x01, 0xD0, 0x02, 0x9A, 0x00, 0xF6, 0x02, 0x34, 0x00
	.byte 0xE1, 0x01, 0x63, 0x05, 0x95, 0x05, 0x78, 0x01, 0x60, 0x03, 0xD8, 0x02, 0x2F, 0x03, 0x77, 0x01
	.byte 0x0B, 0x00, 0x25, 0x03, 0x66, 0x02, 0x97, 0x00, 0x96, 0x00, 0x06, 0x01, 0xC0, 0x02, 0x5E, 0x01
	.byte 0xF1, 0x00, 0xB7, 0x01, 0x56, 0x02, 0x9A, 0x02, 0x5B, 0x02, 0x38, 0x01, 0x10, 0x04, 0x55, 0x03
	.byte 0xE3, 0x02, 0x67, 0x02, 0x9D, 0x03, 0xC8, 0x00, 0xAD, 0x01, 0x26, 0x02, 0x18, 0x03, 0xC2, 0x05
	.byte 0xF9, 0x04, 0x3E, 0x04, 0x92, 0x00, 0x12, 0x05, 0xA5, 0x05, 0x87, 0x01, 0xDC, 0x02, 0xDA, 0x02
	.byte 0x7B, 0x04, 0x9E, 0x01, 0x24, 0x04, 0x76, 0x04, 0x10, 0x05, 0x90, 0x04, 0x7A, 0x00, 0x91, 0x04
	.byte 0x9A, 0x03, 0x45, 0x03, 0x1C, 0x03, 0xAD, 0x02, 0x3A, 0x03, 0x02, 0x01, 0xF8, 0x04, 0xEC, 0x04
	.byte 0x59, 0x00, 0xC3, 0x05, 0xBE, 0x01, 0xC6, 0x00, 0x19, 0x05, 0x92, 0x04, 0xFF, 0xFF, 0x31, 0x04
	.byte 0x40, 0x04, 0x22, 0x04, 0x29, 0x04, 0x41, 0x04, 0x1D, 0x04, 0xDA, 0x03, 0x18, 0x04, 0xCA, 0x03
	.byte 0xF8, 0x03, 0xF3, 0x03, 0xE3, 0x03, 0xE6, 0x03, 0xE4, 0x03, 0x0E, 0x04, 0xDC, 0x03, 0xD5, 0x03
	.byte 0x2E, 0x04, 0xD4, 0x03, 0xD8, 0x03, 0x1C, 0x04, 0x2D, 0x04, 0x06, 0x04, 0xF1, 0x03, 0xD1, 0x03
	.byte 0xC5, 0x03, 0x45, 0x04, 0xCE, 0x03, 0x07, 0x04, 0xE8, 0x03, 0x50, 0x04, 0xC6, 0x03, 0x11, 0x04
	.byte 0x42, 0x04, 0x4D, 0x04, 0xCB, 0x03, 0x28, 0x04, 0xD0, 0x03, 0xC8, 0x03, 0x14, 0x04, 0x2B, 0x04
	.byte 0x4C, 0x04, 0xFB, 0x03, 0x0D, 0x04, 0x33, 0x04, 0x0A, 0x04, 0xD3, 0x03, 0x49, 0x04, 0xF9, 0x03
	.byte 0xE7, 0x03, 0xFD, 0x03, 0xE5, 0x03, 0xEC, 0x03, 0x2F, 0x04, 0x09, 0x04, 0x3D, 0x04, 0x3C, 0x04
	.byte 0xF0, 0x03, 0xF5, 0x03, 0xDD, 0x03, 0x16, 0x04, 0x38, 0x04, 0xFE, 0x03, 0x00, 0x04, 0x15, 0x04
	.byte 0x10, 0x04, 0x3E, 0x04, 0x24, 0x04, 0xF4, 0x03, 0x39, 0x04, 0xC4, 0x03, 0x36, 0x04, 0xE2, 0x03
	.byte 0x17, 0x04, 0xEA, 0x03, 0x0B, 0x04, 0x0F, 0x04, 0xC7, 0x03, 0x30, 0x04, 0xFC, 0x03, 0x04, 0x04
	.byte 0xD2, 0x03, 0x20, 0x04, 0x35, 0x04, 0x02, 0x04, 0x4E, 0x04, 0x25, 0x04, 0xC9, 0x03, 0x1B, 0x04
	.byte 0xEE, 0x03, 0x08, 0x04, 0x03, 0x04, 0xDE, 0x03, 0x47, 0x04, 0xF6, 0x03, 0xED, 0x03, 0x13, 0x04
	.byte 0x21, 0x04, 0xE9, 0x03, 0x2C, 0x04, 0x32, 0x04, 0x46, 0x04, 0x37, 0x04, 0x27, 0x04, 0x4B, 0x04
	.byte 0x34, 0x04, 0x4A, 0x04, 0x01, 0x04, 0xD9, 0x03, 0x3A, 0x04, 0xDF, 0x03, 0x26, 0x04, 0xCC, 0x03
	.byte 0xD7, 0x03, 0x12, 0x04, 0x48, 0x04, 0xDB, 0x03, 0xEB, 0x03, 0x3F, 0x04, 0x1A, 0x04, 0xF7, 0x03
	.byte 0xF2, 0x03, 0x23, 0x04, 0x3B, 0x04, 0x05, 0x04, 0x44, 0x04, 0x19, 0x04, 0xFA, 0x03, 0x0C, 0x04
	.byte 0x43, 0x04, 0x2A, 0x04, 0x1E, 0x04, 0xE0, 0x03, 0xCF, 0x03, 0xE1, 0x03, 0xFF, 0x03, 0x1F, 0x04
	.byte 0xEF, 0x03, 0xFF, 0xFF, 0x2E, 0x01, 0xCD, 0x02, 0x77, 0x05, 0xCB, 0x02, 0x75, 0x01, 0x03, 0x04
	.byte 0x38, 0x03, 0xDE, 0x03, 0x0C, 0x02, 0x1B, 0x00, 0x1C, 0x00, 0xB9, 0x02, 0x93, 0x05, 0xA8, 0x02
	.byte 0xFE, 0x00, 0x1D, 0x05, 0xD4, 0x00, 0x47, 0x04, 0xFA, 0x01, 0x57, 0x02, 0x7B, 0x00, 0x75, 0x00
	.byte 0x77, 0x00, 0x6C, 0x01, 0xD6, 0x05, 0x12, 0x03, 0xD8, 0x04, 0x82, 0x03, 0x11, 0x01, 0x56, 0x00
	.byte 0x35, 0x02, 0x68, 0x02, 0x61, 0x04, 0xA1, 0x00, 0xF6, 0x03, 0x6F, 0x04, 0x2C, 0x05, 0x50, 0x01
	.byte 0xE7, 0x02, 0x95, 0x03, 0xC3, 0x03, 0x35, 0x03, 0x99, 0x03, 0xED, 0x03, 0x3F, 0x01, 0x8F, 0x02
	.byte 0xEC, 0x01, 0x13, 0x04, 0x24, 0x01, 0x39, 0x03, 0x74, 0x01, 0x21, 0x04, 0x5A, 0x00, 0xA6, 0x01
	.byte 0xE9, 0x03, 0x9A, 0x01, 0x13, 0x01, 0x93, 0x01, 0x4F, 0x03, 0x1B, 0x05, 0x1D, 0x01, 0xD5, 0x00
	.byte 0x61, 0x01, 0x8E, 0x04, 0xE3, 0x04, 0x34, 0x03, 0x0A, 0x01, 0x2E, 0x03, 0xFE, 0xFF, 0x02, 0x00
	.byte 0x2C, 0x04, 0x9D, 0x05, 0x1F, 0x02, 0xC0, 0x05, 0x82, 0x04, 0xE3, 0x00, 0x96, 0x02, 0x32, 0x04
	.byte 0x0D, 0x03, 0x8A, 0x05, 0xBC, 0x00, 0x2C, 0x01, 0xC3, 0x01, 0x72, 0x02, 0xB3, 0x01, 0x7F, 0x02
	.byte 0x37, 0x03, 0x1F, 0x03, 0x21, 0x01, 0x1F, 0x01, 0x05, 0x02, 0x93, 0x02, 0x3F, 0x02, 0xC6, 0x02
	.byte 0x46, 0x04, 0x50, 0x00, 0xC7, 0x00, 0x4F, 0x00, 0x6C, 0x02, 0xAC, 0x02, 0xDA, 0x00, 0xEB, 0x00
	.byte 0xF9, 0x02, 0x9A, 0x05, 0x6B, 0x02, 0x5C, 0x02, 0xEE, 0x00, 0x11, 0x03, 0xD7, 0x00, 0xB7, 0x04
	.byte 0x37, 0x04, 0x9D, 0x02, 0x8F, 0x00, 0xEE, 0x04, 0x69, 0x01, 0xCB, 0x01, 0x27, 0x04, 0x4B, 0x04
	.byte 0xD1, 0x00, 0xD7, 0x04, 0x77, 0x02, 0x3A, 0x05, 0x34, 0x04, 0x3C, 0x02, 0x4A, 0x04, 0x52, 0x01
	.byte 0x0E, 0x05, 0x3B, 0x05, 0x21, 0x02, 0xCE, 0x04, 0x01, 0x04, 0xBC, 0x03, 0xC1, 0x02, 0x15, 0x00
	.byte 0x20, 0x05, 0xD9, 0x03, 0x6B, 0x01, 0x99, 0x02, 0x73, 0x02, 0xAF, 0x02, 0xA7, 0x00, 0x47, 0x01
	.byte 0x57, 0x04, 0xBA, 0x01, 0xEF, 0x02, 0xA4, 0x02, 0x86, 0x02, 0x45, 0x01, 0x83, 0x02, 0x37, 0x05
	.byte 0xB5, 0x05, 0x07, 0x00, 0x3A, 0x04, 0xEA, 0x00, 0x8E, 0x01, 0x8D, 0x01, 0xA4, 0x05, 0x8C, 0x01
	.byte 0x79, 0x00, 0x78, 0x00, 0xDF, 0x03, 0x26, 0x04, 0xAE, 0x03, 0xCC, 0x03, 0xC3, 0x02, 0xD0, 0x00
	.byte 0xD7, 0x03, 0x12, 0x04, 0xBA, 0x05, 0xEE, 0x02, 0x07, 0x02, 0xAC, 0x03, 0x2A, 0x05, 0x48, 0x04
	.byte 0x64, 0x05, 0x73, 0x05, 0x5E, 0x04, 0xAE, 0x05, 0x36, 0x02, 0x41, 0x02, 0x66, 0x04, 0x95, 0x02
	.byte 0x5A, 0x05, 0x52, 0x05, 0x3E, 0x02, 0xB2, 0x01, 0xDB, 0x03, 0x32, 0x02, 0x94, 0x02, 0x9B, 0x05
	.byte 0x75, 0x03, 0xEB, 0x03, 0xB9, 0x00, 0xF5, 0x00, 0xC0, 0x00, 0xBF, 0x00, 0xE1, 0x02, 0x92, 0x02
	.byte 0x3F, 0x04, 0x04, 0x03, 0x20, 0x02, 0x29, 0x02, 0x90, 0x05, 0x5B, 0x04, 0x1B, 0x01, 0x4D, 0x01
	.byte 0xBF, 0x02, 0xF0, 0x02, 0x3D, 0x01, 0x04, 0x01, 0x1A, 0x04, 0xAA, 0x02, 0xD6, 0x02, 0x11, 0x05
	.byte 0x15, 0x01, 0x71, 0x02, 0xF7, 0x03, 0xDC, 0x00, 0x8F, 0x03, 0xFE, 0x01, 0xF2, 0x03, 0xDB, 0x02
	.byte 0x30, 0x05, 0xFF, 0xFF, 0x37, 0x02, 0x23, 0x02, 0x87, 0x02, 0x5F, 0x03, 0x3C, 0x03, 0xA1, 0x02
	.byte 0x51, 0x02, 0x2A, 0x03, 0x83, 0x03, 0x75, 0x02, 0xE6, 0x02, 0xB5, 0x03, 0x78, 0x03, 0x81, 0x03
	.byte 0x14, 0x03, 0x28, 0x03, 0x02, 0x03, 0x64, 0x03, 0x26, 0x03, 0xB6, 0x03, 0xC5, 0x02, 0x7C, 0x03
	.byte 0x2E, 0x02, 0x93, 0x03, 0x7C, 0x02, 0x60, 0x02, 0xD2, 0x02, 0xEB, 0x02, 0xAB, 0x02, 0x65, 0x02
	.byte 0x04, 0x02, 0x1C, 0x02, 0x23, 0x03, 0x1B, 0x03, 0x2B, 0x02, 0x3F, 0x03, 0x12, 0x02, 0x6D, 0x02
	.byte 0xB6, 0x02, 0x8B, 0x02, 0x44, 0x03, 0x8D, 0x03, 0x08, 0x03, 0x5A, 0x03, 0x81, 0x02, 0x2D, 0x02
	.byte 0xB2, 0x03, 0x85, 0x03, 0x43, 0x03, 0x92, 0x03, 0x3B, 0x03, 0x4B, 0x03, 0x15, 0x03, 0xAD, 0x03
	.byte 0xFC, 0x02, 0xB3, 0x03, 0xBC, 0x02, 0xB0, 0x03, 0x70, 0x02, 0x62, 0x03, 0xF4, 0x01, 0x5D, 0x02
	.byte 0x4D, 0x02, 0x74, 0x02, 0x90, 0x02, 0xA0, 0x02, 0x6F, 0x03, 0x32, 0x03, 0xA2, 0x02, 0x34, 0x02
	.byte 0x47, 0x03, 0x88, 0x02, 0xDE, 0x02, 0xA8, 0x03, 0xE2, 0x02, 0x22, 0x03, 0xBE, 0x03, 0x9E, 0x02
	.byte 0xFF, 0x01, 0x7F, 0x03, 0xB7, 0x03, 0x5F, 0x02, 0xA0, 0x03, 0xB2, 0x02, 0xB5, 0x02, 0x4B, 0x02
	.byte 0x22, 0x02, 0xA3, 0x03, 0x13, 0x03, 0x82, 0x02, 0x51, 0x03, 0xBA, 0x03, 0x08, 0x02, 0x58, 0x02
	.byte 0x16, 0x02, 0xF3, 0x01, 0xA2, 0x03, 0x41, 0x03, 0x4D, 0x03, 0x86, 0x03, 0x42, 0x02, 0x87, 0x03
	.byte 0xD1, 0x02, 0x89, 0x03, 0x7A, 0x02, 0x31, 0x02, 0xCF, 0x02, 0x8E, 0x03, 0x49, 0x02, 0x69, 0x02
	.byte 0x65, 0x03, 0x24, 0x02, 0xD3, 0x02, 0x0B, 0x03, 0xBB, 0x02, 0x8C, 0x03, 0x0C, 0x03, 0x89, 0x02
	.byte 0x36, 0x03, 0xE5, 0x02, 0xF7, 0x02, 0xA9, 0x02, 0xEC, 0x02, 0x29, 0x03, 0xBE, 0x02, 0x19, 0x03
	.byte 0x5C, 0x03, 0x6E, 0x02, 0x98, 0x03, 0xF7, 0x01, 0x43, 0x02, 0x4A, 0x02, 0x9F, 0x02, 0x9C, 0x02
	.byte 0x25, 0x02, 0x7A, 0x03, 0x84, 0x02, 0x9E, 0x03, 0xF4, 0x02, 0x66, 0x03, 0x03, 0x02, 0x8B, 0x03
	.byte 0x64, 0x02, 0xF8, 0x02, 0xFA, 0x02, 0x7B, 0x03, 0xB1, 0x02, 0x42, 0x03, 0xCA, 0x02, 0x0F, 0x02
	.byte 0xC2, 0x02, 0x8A, 0x02, 0xE8, 0x02, 0x6C, 0x03, 0xBA, 0x02, 0x90, 0x03, 0x79, 0x02, 0xAF, 0x03
	.byte 0x30, 0x03, 0x54, 0x03, 0x1D, 0x02, 0x3A, 0x02, 0x10, 0x03, 0x71, 0x03, 0xFC, 0x01, 0xA9, 0x03
	.byte 0x00, 0x02, 0x58, 0x03, 0xF2, 0x02, 0x57, 0x03, 0x5A, 0x02, 0x62, 0x02, 0xB9, 0x03, 0x0D, 0x02
	.byte 0xC7, 0x02, 0x69, 0x03, 0xB8, 0x03, 0x59, 0x03, 0x77, 0x03, 0xF1, 0x02, 0xFE, 0x02, 0x78, 0x02
	.byte 0xDD, 0x02, 0x0E, 0x02, 0x10, 0x02, 0x40, 0x03, 0x24, 0x03, 0x28, 0x02, 0x2F, 0x02, 0x8E, 0x02
	.byte 0x20, 0x03, 0x4F, 0x02, 0x1D, 0x03, 0x2A, 0x02, 0x97, 0x03, 0xF8, 0x01, 0x94, 0x03, 0x3D, 0x03
	.byte 0xB4, 0x02, 0x0E, 0x03, 0x03, 0x03, 0x3E, 0x03, 0xAA, 0x03, 0xD7, 0x02, 0x0A, 0x02, 0xF2, 0x01
	.byte 0x76, 0x02, 0x0A, 0x03, 0x73, 0x03, 0xA4, 0x03, 0x4C, 0x03, 0xA5, 0x03, 0x7D, 0x02, 0x39, 0x02
	.byte 0x1B, 0x02, 0x6A, 0x02, 0x61, 0x02, 0xB7, 0x02, 0x7E, 0x02, 0x33, 0x02, 0x6D, 0x03, 0xBD, 0x03
	.byte 0x17, 0x03, 0xFF, 0xFF, 0xCC, 0x01, 0x3F, 0x00, 0x67, 0x01, 0x8E, 0x00, 0x32, 0x01, 0xBE, 0x00
	.byte 0x41, 0x00, 0x4E, 0x01, 0xA8, 0x01, 0xB5, 0x00, 0x5B, 0x01, 0x18, 0x00, 0x3B, 0x00, 0xED, 0x01
	.byte 0xA8, 0x00, 0x5C, 0x01, 0x30, 0x01, 0x90, 0x00, 0xE2, 0x01, 0xB8, 0x00, 0x2A, 0x01, 0x73, 0x01
	.byte 0x57, 0x01, 0x62, 0x01, 0x53, 0x01, 0x9B, 0x01, 0x99, 0x00, 0x0B, 0x01, 0x0F, 0x00, 0x76, 0x01
	.byte 0xB6, 0x00, 0x45, 0x00, 0x90, 0x01, 0x8F, 0x01, 0x09, 0x00, 0x01, 0x01, 0xF2, 0x00, 0xB6, 0x01
	.byte 0x1E, 0x01, 0xB5, 0x01, 0xB4, 0x01, 0x96, 0x01, 0xA2, 0x01, 0x01, 0x00, 0xAB, 0x01, 0x9C, 0x01
	.byte 0x0C, 0x00, 0x4B, 0x01, 0x4C, 0x01, 0x43, 0x01, 0xC7, 0x01, 0x3E, 0x01, 0x0C, 0x01, 0x5F, 0x01
	.byte 0x0A, 0x00, 0xFB, 0x00, 0x71, 0x00, 0x06, 0x00, 0x04, 0x00, 0x05, 0x00, 0xB9, 0x01, 0xA5, 0x01
	.byte 0xA4, 0x01, 0x98, 0x00, 0x86, 0x01, 0x66, 0x01, 0xAA, 0x00, 0xB1, 0x01, 0x6E, 0x01, 0x58, 0x01
	.byte 0x24, 0x00, 0x23, 0x00, 0xAD, 0x00, 0x5B, 0x00, 0x9F, 0x01, 0x00, 0x01, 0x55, 0x01, 0xDE, 0x00
	.byte 0x5A, 0x01, 0x98, 0x01, 0x56, 0x01, 0xE8, 0x01, 0xC5, 0x01, 0xA9, 0x00, 0x9F, 0x00, 0x68, 0x00
	.byte 0x9B, 0x00, 0xEB, 0x01, 0x2D, 0x01, 0xE1, 0x00, 0x82, 0x01, 0x57, 0x00, 0xE3, 0x01, 0x32, 0x00
	.byte 0x84, 0x00, 0x55, 0x00, 0x54, 0x00, 0xE8, 0x00, 0x94, 0x00, 0x95, 0x00, 0xC4, 0x01, 0x93, 0x00
	.byte 0xAA, 0x01, 0xA9, 0x01, 0x60, 0x00, 0x33, 0x00, 0xCE, 0x00, 0x64, 0x01, 0xDD, 0x01, 0x63, 0x01
	.byte 0x0D, 0x01, 0x85, 0x00, 0x17, 0x00, 0x7D, 0x00, 0xD2, 0x01, 0x35, 0x01, 0x65, 0x00, 0xEF, 0x00
	.byte 0x8B, 0x01, 0xF4, 0x00, 0xC4, 0x00, 0x66, 0x00, 0x67, 0x00, 0x27, 0x01, 0x53, 0x00, 0x16, 0x00
	.byte 0x5D, 0x01, 0xA0, 0x00, 0xC8, 0x01, 0xB4, 0x00, 0x88, 0x00, 0xA3, 0x01, 0x4A, 0x01, 0xCD, 0x00
	.byte 0xDE, 0x01, 0xA2, 0x00, 0xBC, 0x01, 0xDB, 0x01, 0xBD, 0x01, 0x1A, 0x01, 0x5C, 0x00, 0xA7, 0x01
	.byte 0x5E, 0x00, 0x4A, 0x00, 0xBB, 0x01, 0xCB, 0x00, 0xE7, 0x01, 0xD7, 0x01, 0x6A, 0x01, 0xAF, 0x01
	.byte 0xCF, 0x00, 0xD8, 0x01, 0x2C, 0x00, 0x2A, 0x00, 0x76, 0x00, 0x37, 0x00, 0x4C, 0x00, 0x70, 0x01
	.byte 0xD2, 0x00, 0x4B, 0x00, 0x58, 0x00, 0x84, 0x01, 0x7F, 0x01, 0xFD, 0x00, 0x3A, 0x00, 0x46, 0x01
	.byte 0x3C, 0x01, 0x82, 0x00, 0xB8, 0x01, 0x29, 0x01, 0x5D, 0x00, 0xE5, 0x01, 0xD6, 0x00, 0xC1, 0x01
	.byte 0xC2, 0x01, 0x6B, 0x00, 0x6A, 0x00, 0xED, 0x00, 0xFA, 0x00, 0xAE, 0x01, 0xA3, 0x00, 0xBB, 0x00
	.byte 0x74, 0x00, 0xE5, 0x00, 0xE4, 0x00, 0x6F, 0x01, 0x61, 0x00, 0xAE, 0x00, 0x3A, 0x01, 0x88, 0x01
	.byte 0x02, 0x00, 0x27, 0x00, 0x81, 0x01, 0x87, 0x00, 0xBD, 0x00, 0x7C, 0x00, 0x8C, 0x00, 0x8D, 0x00
	.byte 0x40, 0x00, 0x0E, 0x00, 0x73, 0x00, 0x60, 0x01, 0xE6, 0x00, 0x63, 0x00, 0x19, 0x01, 0x6D, 0x00
	.byte 0x62, 0x00, 0x91, 0x01, 0x92, 0x01, 0x7E, 0x01, 0x31, 0x01, 0xAB, 0x00, 0x83, 0x00, 0xF6, 0x00
	.byte 0x7C, 0x01, 0x7D, 0x01, 0xD6, 0x01, 0xA6, 0x00, 0xA5, 0x00, 0xCF, 0x01, 0x6C, 0x00, 0x59, 0x01
	.byte 0x08, 0x01, 0x0F, 0x01, 0xAC, 0x01, 0x0E, 0x01, 0x26, 0x01, 0xC0, 0x01, 0x10, 0x01, 0xF9, 0x00
	.byte 0xC9, 0x01, 0x51, 0x01, 0x72, 0x01, 0x94, 0x01, 0x95, 0x01, 0xFF, 0xFF, 0xA7, 0x02, 0x05, 0x03
	.byte 0x49, 0x03, 0xBF, 0x03, 0xAB, 0x03, 0x79, 0x03, 0xCE, 0x02, 0x6E, 0x03, 0xC4, 0x02, 0x50, 0x02
	.byte 0x38, 0x02, 0x09, 0x02, 0xF5, 0x01, 0xD0, 0x02, 0xF6, 0x02, 0x60, 0x03, 0xD8, 0x02, 0x2F, 0x03
	.byte 0x25, 0x03, 0x66, 0x02, 0xC0, 0x02, 0x56, 0x02, 0x9A, 0x02, 0x5B, 0x02, 0x55, 0x03, 0xE3, 0x02
	.byte 0x67, 0x02, 0x9D, 0x03, 0x26, 0x02, 0x18, 0x03, 0xDC, 0x02, 0xDA, 0x02, 0x9A, 0x03, 0x45, 0x03
	.byte 0x1C, 0x03, 0xAD, 0x02, 0x3A, 0x03, 0x91, 0x03, 0x5B, 0x03, 0xFB, 0x02, 0x1E, 0x03, 0x55, 0x02
	.byte 0x80, 0x03, 0x9B, 0x02, 0xAE, 0x02, 0x2C, 0x03, 0xC2, 0x03, 0xB8, 0x02, 0x2B, 0x03, 0xCC, 0x02
	.byte 0xF6, 0x01, 0x63, 0x03, 0x30, 0x02, 0xB3, 0x02, 0x40, 0x02, 0x1A, 0x02, 0x5D, 0x03, 0x21, 0x03
	.byte 0x7B, 0x02, 0x7E, 0x03, 0x18, 0x02, 0x46, 0x03, 0x3D, 0x02, 0xF1, 0x01, 0xA5, 0x02, 0x88, 0x03
	.byte 0x70, 0x03, 0x6B, 0x03, 0xA6, 0x03, 0xC9, 0x02, 0xA6, 0x02, 0x2C, 0x02, 0xE4, 0x02, 0x4E, 0x02
	.byte 0x52, 0x03, 0x9B, 0x03, 0x67, 0x03, 0x85, 0x02, 0x72, 0x03, 0xD4, 0x02, 0x52, 0x02, 0x53, 0x02
	.byte 0xE0, 0x02, 0xD5, 0x02, 0x3B, 0x02, 0xFD, 0x01, 0x59, 0x02, 0x06, 0x03, 0x63, 0x02, 0x0F, 0x03
	.byte 0x8C, 0x02, 0xC8, 0x02, 0x07, 0x03, 0xA3, 0x02, 0x1E, 0x02, 0xBB, 0x03, 0x4E, 0x03, 0x9F, 0x03
	.byte 0x7D, 0x03, 0x8D, 0x02, 0xE9, 0x02, 0x48, 0x02, 0x2D, 0x03, 0xA7, 0x03, 0x00, 0x03, 0x0B, 0x02
	.byte 0xBD, 0x02, 0x53, 0x03, 0xCD, 0x02, 0xCB, 0x02, 0x38, 0x03, 0x0C, 0x02, 0xB9, 0x02, 0xA8, 0x02
	.byte 0xFA, 0x01, 0x57, 0x02, 0x12, 0x03, 0x82, 0x03, 0x35, 0x02, 0x68, 0x02, 0xE7, 0x02, 0x95, 0x03
	.byte 0xC3, 0x03, 0x35, 0x03, 0x99, 0x03, 0x8F, 0x02, 0x39, 0x03, 0x4F, 0x03, 0x34, 0x03, 0x2E, 0x03
	.byte 0x1F, 0x02, 0x96, 0x02, 0x0D, 0x03, 0x72, 0x02, 0x7F, 0x02, 0x37, 0x03, 0x1F, 0x03, 0x05, 0x02
	.byte 0x93, 0x02, 0x3F, 0x02, 0xC6, 0x02, 0x6C, 0x02, 0xAC, 0x02, 0xF9, 0x02, 0x6B, 0x02, 0x5C, 0x02
	.byte 0x11, 0x03, 0x9D, 0x02, 0x77, 0x02, 0x3C, 0x02, 0x21, 0x02, 0xBC, 0x03, 0xC1, 0x02, 0x99, 0x02
	.byte 0x73, 0x02, 0xAF, 0x02, 0xEF, 0x02, 0xA4, 0x02, 0x86, 0x02, 0x83, 0x02, 0xAE, 0x03, 0xC3, 0x02
	.byte 0xEE, 0x02, 0x07, 0x02, 0xAC, 0x03, 0x36, 0x02, 0x41, 0x02, 0x95, 0x02, 0x3E, 0x02, 0x32, 0x02
	.byte 0x94, 0x02, 0x75, 0x03, 0xE1, 0x02, 0x92, 0x02, 0x04, 0x03, 0x20, 0x02, 0x29, 0x02, 0xBF, 0x02
	.byte 0xF0, 0x02, 0xAA, 0x02, 0xD6, 0x02, 0x71, 0x02, 0x8F, 0x03, 0xFE, 0x01, 0xDB, 0x02, 0x11, 0x02
	.byte 0x16, 0x03, 0x17, 0x02, 0x5E, 0x03, 0x14, 0x02, 0xFD, 0x02, 0x1A, 0x03, 0x54, 0x02, 0x98, 0x02
	.byte 0x15, 0x02, 0x47, 0x02, 0x96, 0x03, 0x46, 0x02, 0x45, 0x02, 0xF9, 0x01, 0x44, 0x02, 0x31, 0x03
	.byte 0xF3, 0x02, 0x4C, 0x02, 0x76, 0x03, 0x80, 0x02, 0x91, 0x02, 0xFF, 0x02, 0xA1, 0x03, 0x97, 0x02
	.byte 0x68, 0x03, 0x19, 0x02, 0xDF, 0x02, 0x61, 0x03, 0xED, 0x02, 0x8A, 0x03, 0xFB, 0x01, 0x06, 0x02
	.byte 0xD9, 0x02, 0x48, 0x03, 0x56, 0x03, 0x27, 0x02, 0x50, 0x03, 0x4A, 0x03, 0x33, 0x03, 0x6F, 0x02
	.byte 0x27, 0x03, 0xEA, 0x02, 0x02, 0x02, 0xF5, 0x02, 0x01, 0x02, 0x01, 0x03, 0x5E, 0x02, 0xB4, 0x03
	.byte 0x74, 0x03, 0x13, 0x02, 0x6A, 0x03, 0x84, 0x03, 0x09, 0x03, 0xB0, 0x02, 0x9C, 0x03, 0xFF, 0xFF
	.byte 0x44, 0x00, 0x43, 0x00, 0x42, 0x00, 0xF0, 0x00, 0xDB, 0x00, 0x81, 0x00, 0x7E, 0x00, 0xD3, 0x01
	.byte 0x51, 0x00, 0x52, 0x00, 0xCE, 0x01, 0x28, 0x01, 0xD9, 0x01, 0xEA, 0x01, 0x36, 0x01, 0x38, 0x00
	.byte 0xE2, 0x00, 0xCA, 0x01, 0xB3, 0x00, 0xB7, 0x00, 0x69, 0x00, 0x03, 0x01, 0x1C, 0x01, 0x2F, 0x01
	.byte 0x34, 0x01, 0x33, 0x01, 0x9A, 0x00, 0x34, 0x00, 0xE1, 0x01, 0x78, 0x01, 0x77, 0x01, 0x0B, 0x00
	.byte 0x97, 0x00, 0x96, 0x00, 0x06, 0x01, 0x5E, 0x01, 0xF1, 0x00, 0xB7, 0x01, 0x38, 0x01, 0xC8, 0x00
	.byte 0xAD, 0x01, 0x92, 0x00, 0x87, 0x01, 0x9E, 0x01, 0x7A, 0x00, 0x02, 0x01, 0x59, 0x00, 0xBE, 0x01
	.byte 0xC6, 0x00, 0xB1, 0x00, 0x22, 0x00, 0x1F, 0x00, 0x1D, 0x00, 0x20, 0x00, 0x1E, 0x00, 0x21, 0x00
	.byte 0x22, 0x01, 0x26, 0x00, 0x23, 0x01, 0xA4, 0x00, 0x2B, 0x01, 0x42, 0x01, 0x12, 0x01, 0xE0, 0x00
	.byte 0x2B, 0x00, 0x8A, 0x00, 0x8B, 0x00, 0x5F, 0x00, 0xA1, 0x01, 0xE4, 0x01, 0x2E, 0x00, 0x2F, 0x00
	.byte 0x17, 0x01, 0x35, 0x00, 0xE7, 0x00, 0xE9, 0x01, 0xAC, 0x00, 0x12, 0x00, 0x11, 0x00, 0x10, 0x00
	.byte 0x19, 0x00, 0xDD, 0x00, 0xCC, 0x00, 0x7F, 0x00, 0x89, 0x01, 0x37, 0x01, 0xBA, 0x00, 0x3C, 0x00
	.byte 0x3D, 0x00, 0x3E, 0x00, 0x4D, 0x00, 0x05, 0x01, 0x89, 0x00, 0xDA, 0x01, 0xE9, 0x00, 0x39, 0x00
	.byte 0x8A, 0x01, 0xDC, 0x01, 0x36, 0x00, 0xF7, 0x00, 0xB0, 0x01, 0xC3, 0x00, 0x9C, 0x00, 0xD3, 0x00
	.byte 0x1A, 0x00, 0xF3, 0x00, 0x18, 0x01, 0x99, 0x01, 0x4E, 0x00, 0x14, 0x00, 0x13, 0x00, 0x80, 0x01
	.byte 0x7A, 0x01, 0xE6, 0x01, 0x79, 0x01, 0x7B, 0x01, 0x71, 0x01, 0xDF, 0x00, 0x70, 0x00, 0x6F, 0x00
	.byte 0xD0, 0x01, 0xBF, 0x01, 0x3B, 0x01, 0x97, 0x01, 0xDF, 0x01, 0x2E, 0x01, 0x75, 0x01, 0x1B, 0x00
	.byte 0x1C, 0x00, 0xFE, 0x00, 0xD4, 0x00, 0x7B, 0x00, 0x75, 0x00, 0x77, 0x00, 0x6C, 0x01, 0x11, 0x01
	.byte 0x56, 0x00, 0xA1, 0x00, 0x50, 0x01, 0x3F, 0x01, 0xEC, 0x01, 0x24, 0x01, 0x74, 0x01, 0x5A, 0x00
	.byte 0xA6, 0x01, 0x9A, 0x01, 0x13, 0x01, 0x93, 0x01, 0x1D, 0x01, 0xD5, 0x00, 0x61, 0x01, 0x0A, 0x01
	.byte 0xE3, 0x00, 0xBC, 0x00, 0x2C, 0x01, 0xC3, 0x01, 0xB3, 0x01, 0x21, 0x01, 0x1F, 0x01, 0x50, 0x00
	.byte 0xC7, 0x00, 0x4F, 0x00, 0xDA, 0x00, 0xEB, 0x00, 0xEE, 0x00, 0xD7, 0x00, 0x8F, 0x00, 0x69, 0x01
	.byte 0xCB, 0x01, 0xD1, 0x00, 0x52, 0x01, 0x15, 0x00, 0x6B, 0x01, 0xA7, 0x00, 0x47, 0x01, 0xBA, 0x01
	.byte 0x45, 0x01, 0x07, 0x00, 0xEA, 0x00, 0x8E, 0x01, 0x8D, 0x01, 0x8C, 0x01, 0x79, 0x00, 0x78, 0x00
	.byte 0xD0, 0x00, 0xB2, 0x01, 0xB9, 0x00, 0xF5, 0x00, 0xC0, 0x00, 0xBF, 0x00, 0x1B, 0x01, 0x4D, 0x01
	.byte 0x3D, 0x01, 0x04, 0x01, 0x15, 0x01, 0xDC, 0x00, 0x14, 0x01, 0x72, 0x00, 0xD1, 0x01, 0x80, 0x00
	.byte 0xD8, 0x00, 0x48, 0x00, 0x49, 0x00, 0xD4, 0x01, 0xAF, 0x00, 0xB0, 0x00, 0xFF, 0x00, 0x44, 0x01
	.byte 0x85, 0x01, 0x9E, 0x00, 0xC6, 0x01, 0x48, 0x01, 0xFC, 0x00, 0x65, 0x01, 0x83, 0x01, 0x9D, 0x00
	.byte 0xF8, 0x00, 0xEC, 0x00, 0xC5, 0x00, 0xC9, 0x00, 0xD9, 0x00, 0xE0, 0x01, 0x86, 0x00, 0x31, 0x00
	.byte 0x30, 0x00, 0x03, 0x00, 0xA0, 0x01, 0x49, 0x01, 0x47, 0x00, 0x20, 0x01, 0x2D, 0x00, 0x39, 0x01
	.byte 0x64, 0x00, 0x25, 0x00, 0x40, 0x01, 0x41, 0x01, 0x6D, 0x01, 0x08, 0x00, 0xCD, 0x01, 0x0D, 0x00
	.byte 0x46, 0x00, 0x6E, 0x00, 0x54, 0x01, 0x25, 0x01, 0x28, 0x00, 0x16, 0x01, 0xCA, 0x00, 0xC2, 0x00
	.byte 0x9D, 0x01, 0x09, 0x01, 0x68, 0x01, 0xB2, 0x00, 0xC1, 0x00, 0xD5, 0x01, 0x4F, 0x01, 0x91, 0x00
	.byte 0x07, 0x01, 0x29, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x02, 0x13, 0x1B, 0x04, 0x01, 0x6D, 0x01
	.byte 0x00, 0x19, 0x0D, 0x06, 0x04, 0x01, 0x55, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

	.public _0210820C
_0210820C:
	.word sub_02091CDC, sub_02091D18, sub_02091E34, 0xFFFFFFFF
_0210821C:
	.byte 0x00, 0x02, 0x13, 0x1B
	.byte 0x04, 0x01, 0x6D, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

	.public _02108278
_02108278:
	.word sub_020921A4, sub_020921E4, sub_02092288, 0xFFFFFFFF
_02108288:
	.byte 0x00, 0x03, 0x03, 0x1A, 0x12, 0x01, 0x23, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x1A, 0x12, 0x01, 0x23, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x06
	.byte 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x23, 0x05, 0x64, 0x24, 0x05, 0x64, 0x25, 0x05, 0x64, 0x26, 0x05, 0x64, 0x27, 0x05, 0x64, 0x28
	.byte 0x05, 0x64, 0x29, 0x05, 0x64, 0x2A, 0x05, 0x64, 0x2B, 0x05, 0x64, 0x2C, 0x05, 0x64, 0x2D, 0x05
	.byte 0x64, 0x2E, 0x05, 0x64, 0x2F, 0x05, 0x64, 0x30, 0x05, 0x64, 0x31, 0x05, 0x64, 0x32, 0x05, 0x64
	.byte 0x33, 0x05, 0x64, 0x00, 0x1A, 0x00, 0x84, 0x03, 0x58, 0x02, 0x4F, 0x00, 0xA0, 0x0F, 0x0E, 0x01
	.byte 0x1A, 0x00, 0x58, 0x1B, 0x58, 0x02, 0xFB, 0x00, 0x10, 0x27, 0x64, 0x00, 0x51, 0x00, 0x98, 0x3A
	.byte 0xB8, 0x0B, 0x19, 0x00, 0x38, 0x4A, 0x84, 0x03, 0x1F, 0x01, 0x30, 0x75, 0xC8, 0x00, 0x0A, 0x01
	.byte 0x40, 0x9C, 0xC8, 0x00, 0x13, 0x01, 0x50, 0xC3, 0xC8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x1E, 0x02
	.byte 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x1D, 0x02, 0x00, 0x01, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x1F, 0x02, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x01, 0x06, 0x06
	.byte 0x01, 0x03, 0x03, 0x04, 0x01, 0x01, 0x01, 0x05, 0x01, 0x03, 0x03, 0x03, 0x01, 0x01, 0x01, 0x01
	.byte 0x06, 0x05, 0x1E, 0x02, 0x30, 0x84, 0x10, 0x02, 0xB1, 0x57, 0x09, 0x02, 0x39, 0x58, 0x09, 0x02
	.byte 0x2C, 0x84, 0x10, 0x02, 0xC1, 0x58, 0x09, 0x02, 0x21, 0x59, 0x09, 0x02, 0x28, 0x84, 0x10, 0x02
	.byte 0x2D, 0x59, 0x09, 0x02, 0xD9, 0x59, 0x09, 0x02, 0x20, 0x84, 0x10, 0x02, 0x35, 0x5A, 0x09, 0x02
	.byte 0x79, 0x5A, 0x09, 0x02, 0x24, 0x84, 0x10, 0x02, 0x7D, 0x5A, 0x09, 0x02, 0xF9, 0x5A, 0x09, 0x02
	.byte 0x1C, 0x84, 0x10, 0x02, 0x05, 0x5B, 0x09, 0x02, 0x89, 0x5B, 0x09, 0x02, 0x98, 0x02, 0xCC, 0x02
	.byte 0x9A, 0x02, 0x96, 0x02, 0x97, 0x02, 0x83, 0x02, 0x95, 0x02, 0x94, 0x02, 0x81, 0x02, 0x99, 0x02
	.byte 0xA3, 0x02, 0xC8, 0x02, 0xA8, 0x02, 0xAC, 0x02, 0xC7, 0x02, 0x82, 0x02, 0xC2, 0x02, 0x84, 0x02
	.byte 0x88, 0x02, 0xC0, 0x02, 0xAD, 0x02, 0xB0, 0x02, 0xC9, 0x02, 0xCA, 0x02, 0x9B, 0x02, 0xB3, 0x02
	.byte 0x85, 0x02, 0x89, 0x02, 0x86, 0x02, 0x8A, 0x02, 0x8B, 0x02, 0x87, 0x02, 0x90, 0x02, 0x91, 0x02
	.byte 0x92, 0x02, 0x8F, 0x02, 0x8C, 0x02, 0x8D, 0x02, 0x8E, 0x02, 0x93, 0x02, 0xA2, 0x02, 0xC1, 0x02
	.byte 0xA5, 0x02, 0xBA, 0x02, 0xB8, 0x02, 0xC4, 0x02, 0xA0, 0x02, 0xB2, 0x02, 0x9F, 0x02, 0xB7, 0x02
	.byte 0xB1, 0x02, 0xBC, 0x02, 0xB5, 0x02, 0xB6, 0x02, 0x9D, 0x02, 0xA4, 0x02, 0xCB, 0x02, 0xBF, 0x02
	.byte 0xC6, 0x02, 0x9E, 0x02, 0xB4, 0x02, 0xA9, 0x02, 0xB9, 0x02, 0xAF, 0x02, 0xBE, 0x02, 0xBB, 0x02
	.byte 0xC3, 0x02, 0xAA, 0x02, 0xA1, 0x02, 0xAE, 0x02, 0xAB, 0x02, 0xA7, 0x02, 0xBD, 0x02, 0xC5, 0x02
	.byte 0xA6, 0x02, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00, 0x9B, 0x00, 0x00, 0x00, 0x9E, 0x00, 0x00, 0x00
	.byte 0x00, 0x03, 0x03, 0x1A, 0x12, 0x01, 0x23, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0xA5, 0x65, 0x09, 0x02, 0x09, 0x66, 0x09, 0x02, 0x3D, 0x67, 0x09, 0x02
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0x41, 0xB1, 0x22, 0x02, 0xB9, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0xA5, 0xB1, 0x22, 0x02, 0xB9, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x4D, 0xB2, 0x22, 0x02
	.byte 0xB9, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x35, 0xB3, 0x22, 0x02, 0xB9, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0xD5, 0xB3, 0x22, 0x02, 0xB9, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x21, 0xB4, 0x22, 0x02, 0xB9, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x2D, 0xB5, 0x22, 0x02
	.byte 0xB9, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x21, 0x10, 0x24, 0x02, 0xB9, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0xC9, 0x10, 0x24, 0x02, 0xB9, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x3D, 0x11, 0x24, 0x02, 0xB9, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x39, 0x12, 0x24, 0x02
	.byte 0xB9, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0xF9, 0xAE, 0x22, 0x02, 0xB9, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x3D, 0xAF, 0x22, 0x02, 0xB9, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x85, 0xAF, 0x22, 0x02, 0xB9, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0xED, 0xAF, 0x22, 0x02
	.byte 0xB9, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x49, 0xB0, 0x22, 0x02, 0xB9, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0xB9, 0xB0, 0x22, 0x02, 0xB9, 0x42, 0x03, 0x02, 0xE9, 0xB0, 0x22, 0x02
	.byte 0x65, 0xF7, 0x23, 0x02, 0xB9, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0xB5, 0xF7, 0x23, 0x02
	.byte 0xB9, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x15, 0xF8, 0x23, 0x02, 0xB9, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x29, 0xB6, 0x22, 0x02, 0xB9, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x91, 0xB6, 0x22, 0x02, 0xB9, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x41, 0xB7, 0x22, 0x02
	.byte 0xB9, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x61, 0xB8, 0x22, 0x02, 0xB9, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0xF9, 0xB8, 0x22, 0x02, 0xB9, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x41, 0xB9, 0x22, 0x02, 0xB9, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0xCD, 0xB9, 0x22, 0x02
	.byte 0xB9, 0x42, 0x03, 0x02, 0x5D, 0xBA, 0x22, 0x02, 0x0D, 0x14, 0x24, 0x02, 0xB9, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x75, 0x14, 0x24, 0x02, 0xB9, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0xDD, 0x14, 0x24, 0x02, 0xB9, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x11, 0x15, 0x24, 0x02
	.byte 0xB9, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x4D, 0x51, 0x24, 0x02, 0xB9, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0xB9, 0x51, 0x24, 0x02, 0xB9, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x21, 0x52, 0x24, 0x02, 0xB9, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x55, 0x52, 0x24, 0x02
	.byte 0xB9, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x7D, 0x6A, 0x09, 0x02, 0xB9, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0xCD, 0x6A, 0x09, 0x02, 0xB9, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0xB9, 0x6B, 0x09, 0x02, 0xB9, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x19, 0x6C, 0x09, 0x02
	.byte 0xB9, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x61, 0x6C, 0x09, 0x02, 0xB9, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x25, 0x69, 0x09, 0x02, 0xB9, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0xC5, 0x69, 0x09, 0x02, 0xB9, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0xF9, 0x69, 0x09, 0x02
	.byte 0xB9, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0xB1, 0xBA, 0x22, 0x02, 0xB9, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x19, 0xBB, 0x22, 0x02, 0xB9, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0xD1, 0xBB, 0x22, 0x02, 0xB9, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x6D, 0xBC, 0x22, 0x02
	.byte 0xB9, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0xB9, 0xBC, 0x22, 0x02, 0xB9, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x45, 0xBD, 0x22, 0x02, 0xB9, 0x42, 0x03, 0x02, 0xD5, 0xBD, 0x22, 0x02
	.byte 0x35, 0xED, 0x23, 0x02, 0xB9, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0xA9, 0xED, 0x23, 0x02
	.byte 0xB9, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x09, 0xEE, 0x23, 0x02, 0xB9, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0xD1, 0x6E, 0x09, 0x02, 0xE5, 0x6D, 0x09, 0x02, 0xF5, 0x6D, 0x09, 0x02
	.byte 0xF1, 0x6E, 0x09, 0x02, 0x0D, 0x6F, 0x09, 0x02, 0xBD, 0x6D, 0x09, 0x02, 0xB5, 0x6D, 0x09, 0x02
	.byte 0xA9, 0x6D, 0x09, 0x02, 0x2D, 0x6F, 0x09, 0x02, 0x3D, 0x6F, 0x09, 0x02, 0x71, 0x6F, 0x09, 0x02
	.byte 0x81, 0x6F, 0x09, 0x02, 0x51, 0x6F, 0x09, 0x02, 0x61, 0x6F, 0x09, 0x02, 0x9D, 0x6F, 0x09, 0x02
	.byte 0xAD, 0x6F, 0x09, 0x02, 0xBD, 0x6F, 0x09, 0x02, 0xD1, 0x6F, 0x09, 0x02, 0x71, 0x15, 0x09, 0x02
	.byte 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02
	.byte 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x71, 0x15, 0x09, 0x02, 0xC1, 0x42, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x61, 0x6D, 0x09, 0x02
	.byte 0xE5, 0x6F, 0x09, 0x02, 0x00, 0x00, 0x00, 0x00, 0x81, 0x6D, 0x09, 0x02, 0xE9, 0x6F, 0x09, 0x02
	.byte 0xF1, 0x6F, 0x09, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0xAD, 0x88, 0x1E, 0x02, 0x09, 0x8A, 0x1E, 0x02, 0x09, 0x8B, 0x1E, 0x02, 0x55, 0x00, 0x00, 0x00
	.byte 0x01, 0x59, 0x1E, 0x02, 0xAD, 0x5A, 0x1E, 0x02, 0x35, 0x5A, 0x1E, 0x02, 0x55, 0x00, 0x00, 0x00
	.byte 0xE5, 0x70, 0x09, 0x02, 0x09, 0x71, 0x09, 0x02, 0x49, 0x71, 0x09, 0x02, 0xAD, 0x71, 0x09, 0x02
	.byte 0xD5, 0x71, 0x09, 0x02, 0xED, 0x71, 0x09, 0x02, 0xFF, 0xFF, 0x01, 0x05, 0x0A, 0x0F, 0x14, 0x02
	.byte 0x06, 0x0B, 0x10, 0x15, 0x03, 0x07, 0x0C, 0x11, 0x16, 0x04, 0x08, 0x0D, 0x12, 0x17, 0xBD, 0x12
	.byte 0x01, 0xBE, 0x12, 0x01, 0xBF, 0x12, 0x01, 0xC0, 0x24, 0x02, 0xC1, 0x24, 0x02, 0xC2, 0x24, 0x02
	.byte 0xC3, 0x12, 0x03, 0xC4, 0x24, 0x03, 0xC5, 0x24, 0x03, 0xC6, 0x24, 0x04, 0xC7, 0x25, 0x04, 0xC8
	.byte 0x24, 0x04, 0xC9, 0x14, 0x00, 0xCA, 0x12, 0x00, 0xCB, 0x12, 0x00, 0xCC, 0x14, 0x00, 0xCD, 0x22
	.byte 0x00, 0xCE, 0x12, 0x00, 0xCF, 0x92, 0x00, 0xD1, 0x92, 0x00, 0xD3, 0x12, 0x00, 0xD4, 0x12, 0x00
	.byte 0xD5, 0x12, 0x00, 0xD6, 0x12, 0x00, 0x00, 0x00, 0x81, 0x60, 0x1E, 0x02, 0x51, 0x62, 0x1E, 0x02
	.byte 0xA5, 0x63, 0x1E, 0x02, 0x28, 0x08, 0x32, 0x28, 0xB0, 0xCE, 0x9C, 0x1E, 0x09, 0x00, 0x00, 0x00
	.byte 0x0B, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x14, 0x00, 0x02, 0x00, 0x15, 0x00, 0x00, 0x00
	.byte 0x5B, 0x00, 0x01, 0x00, 0x24, 0x00, 0x02, 0x00, 0x1D, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x01, 0x00
	.byte 0x26, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x2A, 0x00, 0x00, 0x00, 0x2E, 0x00, 0x02, 0x00
	.byte 0x2F, 0x00, 0x00, 0x00, 0x97, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00, 0xB0, 0x00, 0x00, 0x00
	.byte 0x93, 0x00, 0x00, 0x00, 0x36, 0x00, 0x01, 0x00, 0x49, 0x00, 0x02, 0x00

	.data

_0210F63C:
	.word 0x020F5A9A
	.word 0x020F5A30
	.word 0x020F59C8
	.word 0x020F5B84

_0210F64C:
	.byte 0x00, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x5E, 0xFF, 0x62
	.byte 0x80, 0x60, 0x80, 0x60, 0x00, 0x3F, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00
	.byte 0x33, 0x0B, 0x00, 0x00, 0x80, 0x60, 0x80, 0x60, 0x00, 0x5E, 0xFF, 0x62, 0x00, 0x3F, 0x20, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x33, 0x0B, 0x00, 0x00, 0x71, 0x02, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0xDF, 0xB0, 0x08, 0x99, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x64, 0x61, 0x74, 0x61, 0x2F, 0x63, 0x6C, 0x61, 0x63, 0x74, 0x5F, 0x64, 0x65, 0x66, 0x61, 0x75
	.byte 0x6C, 0x74, 0x2E, 0x4E, 0x41, 0x4E, 0x52, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x05
	.byte 0x06, 0x07, 0x08, 0x09, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x64
	.byte 0x00, 0x00, 0x0F, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x32
	.byte 0x00, 0x00, 0x01, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x03, 0x1E
	.byte 0xEC, 0xEC, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x05
	.byte 0x00, 0x00, 0x10, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x32
	.byte 0x00, 0x9D, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x32
	.byte 0x00, 0x00, 0x01, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x64
	.byte 0x00, 0x00, 0x01, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x64
	.byte 0x00, 0x9D, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x64
	.byte 0x00, 0x00, 0x01, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xC8
	.byte 0x00, 0x00, 0x01, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x04, 0x64
	.byte 0x00, 0x00, 0x03, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00
	.byte 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01
	.byte 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01
	.byte 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x01
	.byte 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x50, 0x00, 0x00
	.byte 0x04, 0x04, 0x00, 0x00, 0x20, 0x47, 0x41, 0x4D, 0x45, 0x00, 0x00, 0x00, 0x46, 0x52, 0x45, 0x41
	.byte 0x4B, 0x00, 0x00, 0x00, 0x20, 0x46, 0x55, 0x4C, 0x4C, 0x00, 0x00, 0x00, 0xB4, 0x6A, 0x0F, 0x02
	.byte 0xAC, 0x6A, 0x0F, 0x02, 0xA4, 0x6A, 0x0F, 0x02, 0x9C, 0x6A, 0x0F, 0x02, 0xBC, 0x6A, 0x0F, 0x02
	.byte 0x64, 0x61, 0x74, 0x61, 0x2F, 0x70, 0x6C, 0x5F, 0x77, 0x6D, 0x2E, 0x4E, 0x43, 0x4C, 0x52, 0x00
	.byte 0x64, 0x61, 0x74, 0x61, 0x2F, 0x70, 0x6C, 0x5F, 0x77, 0x69, 0x66, 0x69, 0x2E, 0x4E, 0x43, 0x47
	.byte 0x52, 0x00, 0x00, 0x00, 0x64, 0x61, 0x74, 0x61, 0x2F, 0x70, 0x6C, 0x5F, 0x77, 0x6D, 0x2E, 0x4E
	.byte 0x43, 0x47, 0x52, 0x00, 0x64, 0x61, 0x74, 0x61, 0x2F, 0x77, 0x6D, 0x32, 0x35, 0x36, 0x6B, 0x2E
	.byte 0x4E, 0x43, 0x47, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x59, 0x1E, 0x02
	.byte 0xB5, 0x59, 0x1E, 0x02, 0xC1, 0x5A, 0x1E, 0x02, 0x57, 0x00, 0x00, 0x00, 0x21, 0xBE, 0x21, 0x02
	.byte 0x51, 0xC2, 0x21, 0x02, 0x75, 0xCD, 0x21, 0x02, 0x41, 0x00, 0x00, 0x00, 0x11, 0xBA, 0x24, 0x02
	.byte 0xCD, 0xBA, 0x24, 0x02, 0xA5, 0xBB, 0x24, 0x02, 0x29, 0x00, 0x00, 0x00, 0xE1, 0x6D, 0x24, 0x02
	.byte 0x09, 0x6F, 0x24, 0x02, 0x51, 0x71, 0x24, 0x02, 0x29, 0x00, 0x00, 0x00, 0x01, 0x59, 0x1E, 0x02
	.byte 0x41, 0x5A, 0x1E, 0x02, 0xA5, 0x5A, 0x1E, 0x02, 0x56, 0x00, 0x00, 0x00
_0210F9CC:
	.byte 0xE0, 0xBA, 0x0F, 0x02
	.byte 0xEC, 0xBA, 0x0F, 0x02, 0xBA, 0xBC, 0x0F, 0x02, 0x0E, 0xBD, 0x0F, 0x02, 0x9A, 0xBD, 0x0F, 0x02
	.byte 0x9E, 0xBC, 0x0F, 0x02, 0xA4, 0xBB, 0x0F, 0x02
_0210F9E8:
	.byte 0x94, 0xBB, 0x0F, 0x02, 0x24, 0xBB, 0x0F, 0x02
	.byte 0x34, 0xBB, 0x0F, 0x02, 0x44, 0xBB, 0x0F, 0x02, 0x54, 0xBB, 0x0F, 0x02, 0x64, 0xBB, 0x0F, 0x02
	.byte 0x74, 0xBB, 0x0F, 0x02, 0x82, 0xBC, 0x0F, 0x02, 0xD6, 0xBC, 0x0F, 0x02, 0xF2, 0xBC, 0x0F, 0x02
	.byte 0x2A, 0xBD, 0x0F, 0x02, 0x46, 0xBD, 0x0F, 0x02, 0x62, 0xBD, 0x0F, 0x02, 0x7E, 0xBD, 0x0F, 0x02
	.byte 0xB6, 0xBD, 0x0F, 0x02, 0xEA, 0xBD, 0x0F, 0x02, 0x1E, 0xBE, 0x0F, 0x02, 0x52, 0xBE, 0x0F, 0x02
	.byte 0x86, 0xBE, 0x0F, 0x02, 0xBA, 0xBE, 0x0F, 0x02, 0xEE, 0xBE, 0x0F, 0x02
_0210FA3C:
	.byte 0x54, 0xBA, 0x0F, 0x02
	.byte 0x78, 0xBA, 0x0F, 0x02, 0xB0, 0xBA, 0x0F, 0x02, 0xEA, 0xBB, 0x0F, 0x02, 0x1A, 0xBC, 0x0F, 0x02
	.byte 0xB4, 0xBB, 0x0F, 0x02, 0xFA, 0xBA, 0x0F, 0x02, 0x34, 0xBC, 0x0F, 0x02, 0xCA, 0xBA, 0x0F, 0x02
	.byte 0x60, 0xBA, 0x0F, 0x02, 0x88, 0xBA, 0x0F, 0x02, 0xD4, 0xBA, 0x0F, 0x02, 0x80, 0xBA, 0x0F, 0x02
	.byte 0x84, 0xBB, 0x0F, 0x02, 0xC0, 0xBA, 0x0F, 0x02, 0x70, 0xBA, 0x0F, 0x02, 0x98, 0xBA, 0x0F, 0x02
	.byte 0x5A, 0xBA, 0x0F, 0x02, 0x02, 0xBC, 0x0F, 0x02, 0x4E, 0xBC, 0x0F, 0x02, 0x68, 0xBC, 0x0F, 0x02
	.byte 0x68, 0xBA, 0x0F, 0x02, 0xC6, 0xBB, 0x0F, 0x02, 0x08, 0xBB, 0x0F, 0x02, 0x90, 0xBA, 0x0F, 0x02
	.byte 0xA0, 0xBA, 0x0F, 0x02, 0xA8, 0xBA, 0x0F, 0x02, 0x16, 0xBB, 0x0F, 0x02, 0xB8, 0xBA, 0x0F, 0x02
	.byte 0xD8, 0xBB, 0x0F, 0x02, 0x04, 0x00, 0x07, 0x00, 0x0B, 0x00, 0x07, 0x00, 0x04, 0x00, 0x06, 0x00
	.byte 0x0B, 0x00, 0x06, 0x00, 0x04, 0x00, 0x08, 0x00, 0x0B, 0x00, 0x08, 0x00, 0x84, 0xDA, 0x0F, 0x02
	.byte 0xC4, 0xDA, 0x0F, 0x02, 0x04, 0xDB, 0x0F, 0x02, 0xC2, 0x01, 0xBD, 0x01, 0xBE, 0x01, 0xBF, 0x01
	.byte 0xB0, 0x01, 0xB2, 0x01, 0xB3, 0x01, 0xBC, 0x01, 0x7B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00
	.byte 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00
	.byte 0x05, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00
	.byte 0x0A, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00
	.byte 0x0E, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00
	.byte 0x0F, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x6E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00
	.byte 0x14, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00
	.byte 0x15, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00
	.byte 0x19, 0x00, 0x00, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x43, 0x01, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x1D, 0x00, 0x00, 0x00
	.byte 0x1E, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00
	.byte 0x1F, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00
	.byte 0x23, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xEB, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x1B, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x1D, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00
	.byte 0x1F, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00
	.byte 0x20, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00
	.byte 0x02, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00
	.byte 0x25, 0x00, 0x00, 0x00, 0x26, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00
	.byte 0x29, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00
	.byte 0x2A, 0x00, 0x00, 0x00, 0x2B, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00
	.byte 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2D, 0x00, 0x00, 0x00, 0x2E, 0x00, 0x00, 0x00
	.byte 0x2F, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00
	.byte 0x30, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00
	.byte 0x34, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x75, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00
	.byte 0x39, 0x00, 0x00, 0x00, 0x3A, 0x00, 0x00, 0x00, 0x3B, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00
	.byte 0x3D, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00
	.byte 0x41, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x42, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00
	.byte 0x46, 0x00, 0x00, 0x00, 0x47, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x00
	.byte 0x4A, 0x00, 0x00, 0x00, 0x4B, 0x00, 0x00, 0x00, 0x4C, 0x00, 0x00, 0x00, 0x4D, 0x00, 0x00, 0x00
	.byte 0x06, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0x00, 0x00, 0x00
	.byte 0x4F, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00, 0x00
	.byte 0x53, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x56, 0x00, 0x00, 0x00
	.byte 0x57, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x59, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00
	.byte 0x6F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x00, 0x5B, 0x00, 0x00, 0x00
	.byte 0x5C, 0x00, 0x00, 0x00, 0x5D, 0x00, 0x00, 0x00, 0x5E, 0x00, 0x00, 0x00, 0x5F, 0x00, 0x00, 0x00
	.byte 0x60, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00
	.byte 0x64, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x79, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x66, 0x00, 0x00, 0x00, 0x67, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00
	.byte 0x69, 0x00, 0x00, 0x00, 0x6A, 0x00, 0x00, 0x00, 0x6B, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00
	.byte 0x6A, 0x00, 0x00, 0x00, 0x6B, 0x00, 0x00, 0x00, 0x6C, 0x00, 0x00, 0x00, 0x6D, 0x00, 0x00, 0x00
	.byte 0x6E, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x6F, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x71, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00
	.byte 0x73, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x75, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00
	.byte 0x77, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x79, 0x00, 0x00, 0x00, 0x7A, 0x00, 0x00, 0x00
	.byte 0x0B, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x00
	.byte 0x7C, 0x00, 0x00, 0x00, 0x7D, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00
	.byte 0x80, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00
	.byte 0x81, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00, 0x83, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00
	.byte 0x7D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00
	.byte 0x86, 0x00, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00
	.byte 0x87, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x8A, 0x00, 0x00, 0x00
	.byte 0x8B, 0x00, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x8D, 0x00, 0x00, 0x00, 0x8E, 0x00, 0x00, 0x00, 0x8F, 0x00, 0x00, 0x00
	.byte 0x90, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x92, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00
	.byte 0x91, 0x00, 0x00, 0x00, 0x92, 0x00, 0x00, 0x00, 0x93, 0x00, 0x00, 0x00, 0x94, 0x00, 0x00, 0x00
	.byte 0x95, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x96, 0x00, 0x00, 0x00, 0x97, 0x00, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00, 0x99, 0x00, 0x00, 0x00
	.byte 0x9A, 0x00, 0x00, 0x00, 0x9B, 0x00, 0x00, 0x00, 0x99, 0x00, 0x00, 0x00, 0x9A, 0x00, 0x00, 0x00
	.byte 0x9B, 0x00, 0x00, 0x00, 0x9C, 0x00, 0x00, 0x00, 0x9D, 0x00, 0x00, 0x00, 0x9E, 0x00, 0x00, 0x00
	.byte 0x0F, 0x00, 0x00, 0x00, 0xB3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00
	.byte 0x97, 0x00, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00, 0x99, 0x00, 0x00, 0x00, 0x9A, 0x00, 0x00, 0x00
	.byte 0x9B, 0x00, 0x00, 0x00, 0x99, 0x00, 0x00, 0x00, 0x9A, 0x00, 0x00, 0x00, 0x9B, 0x00, 0x00, 0x00
	.byte 0x9C, 0x00, 0x00, 0x00, 0x9D, 0x00, 0x00, 0x00, 0x9E, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00
	.byte 0x93, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9F, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00
	.byte 0xA1, 0x00, 0x00, 0x00, 0xA2, 0x00, 0x00, 0x00, 0xA3, 0x00, 0x00, 0x00, 0xA4, 0x00, 0x00, 0x00
	.byte 0xA5, 0x00, 0x00, 0x00, 0xA6, 0x00, 0x00, 0x00, 0xA7, 0x00, 0x00, 0x00, 0xA8, 0x00, 0x00, 0x00
	.byte 0xA9, 0x00, 0x00, 0x00, 0xAA, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x6A, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0xAB, 0x00, 0x00, 0x00, 0xAC, 0x00, 0x00, 0x00, 0xAD, 0x00, 0x00, 0x00
	.byte 0xAE, 0x00, 0x00, 0x00, 0xAF, 0x00, 0x00, 0x00, 0xB0, 0x00, 0x00, 0x00, 0xAE, 0x00, 0x00, 0x00
	.byte 0xAF, 0x00, 0x00, 0x00, 0xB0, 0x00, 0x00, 0x00, 0xB1, 0x00, 0x00, 0x00, 0xB2, 0x00, 0x00, 0x00
	.byte 0xB3, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0xB4, 0x00, 0x00, 0x00, 0xB5, 0x00, 0x00, 0x00, 0xB6, 0x00, 0x00, 0x00, 0xB7, 0x00, 0x00, 0x00
	.byte 0xB8, 0x00, 0x00, 0x00, 0xB9, 0x00, 0x00, 0x00, 0xB7, 0x00, 0x00, 0x00, 0xB8, 0x00, 0x00, 0x00
	.byte 0xB9, 0x00, 0x00, 0x00, 0xBA, 0x00, 0x00, 0x00, 0xBB, 0x00, 0x00, 0x00, 0xBC, 0x00, 0x00, 0x00
	.byte 0x12, 0x00, 0x00, 0x00, 0x6B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBD, 0x00, 0x00, 0x00
	.byte 0xBE, 0x00, 0x00, 0x00, 0xBF, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0xC1, 0x00, 0x00, 0x00
	.byte 0xC2, 0x00, 0x00, 0x00, 0xC3, 0x00, 0x00, 0x00, 0xC4, 0x00, 0x00, 0x00, 0xC5, 0x00, 0x00, 0x00
	.byte 0xC6, 0x00, 0x00, 0x00, 0xC7, 0x00, 0x00, 0x00, 0xC8, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00
	.byte 0x92, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC9, 0x00, 0x00, 0x00, 0xCA, 0x00, 0x00, 0x00
	.byte 0xCB, 0x00, 0x00, 0x00, 0xCC, 0x00, 0x00, 0x00, 0xCD, 0x00, 0x00, 0x00, 0xCE, 0x00, 0x00, 0x00
	.byte 0xCC, 0x00, 0x00, 0x00, 0xCD, 0x00, 0x00, 0x00, 0xCE, 0x00, 0x00, 0x00, 0xCF, 0x00, 0x00, 0x00
	.byte 0xD0, 0x00, 0x00, 0x00, 0xD1, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x7A, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0xD2, 0x00, 0x00, 0x00, 0xD3, 0x00, 0x00, 0x00, 0xD4, 0x00, 0x00, 0x00
	.byte 0xD5, 0x00, 0x00, 0x00, 0xD6, 0x00, 0x00, 0x00, 0xD7, 0x00, 0x00, 0x00, 0xD5, 0x00, 0x00, 0x00
	.byte 0xD6, 0x00, 0x00, 0x00, 0xD7, 0x00, 0x00, 0x00, 0xD8, 0x00, 0x00, 0x00, 0xD9, 0x00, 0x00, 0x00
	.byte 0xDA, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0xDB, 0x00, 0x00, 0x00, 0xDC, 0x00, 0x00, 0x00, 0xDD, 0x00, 0x00, 0x00, 0xDE, 0x00, 0x00, 0x00
	.byte 0xDF, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0xDE, 0x00, 0x00, 0x00, 0xDF, 0x00, 0x00, 0x00
	.byte 0xE0, 0x00, 0x00, 0x00, 0xE1, 0x00, 0x00, 0x00, 0xE2, 0x00, 0x00, 0x00, 0xE3, 0x00, 0x00, 0x00
	.byte 0x17, 0x00, 0x00, 0x00
_021100C4:
	.byte 0xC1, 0xAE, 0x29, 0x00
_021100C8:
	.byte 0x00, 0xEE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x30, 0x02, 0x96, 0x00, 0x00, 0x00, 0x84, 0x03, 0x00, 0x00
_021100DC:
	.byte 0x00, 0x05, 0x01, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0xFD, 0xFF
_021100E8:
	.byte 0x70, 0x6F, 0x6B, 0x65, 0x74, 0x6F, 0x6F, 0x6C
	.byte 0x2F, 0x70, 0x65, 0x72, 0x73, 0x6F, 0x6E, 0x61, 0x6C, 0x2F, 0x70, 0x6D, 0x73, 0x2E, 0x6E, 0x61
	.byte 0x72, 0x63, 0x00, 0x00
_02110104:
	.byte 0x00, 0x30, 0x00, 0x80, 0x08, 0x38, 0x80, 0x00, 0x30, 0x60, 0x00, 0x80
	.byte 0x38, 0x68, 0x80, 0x00, 0x60, 0x90, 0x00, 0x80, 0x68, 0x98, 0x80, 0x00, 0xB0, 0xC0, 0xC8, 0x00
	.byte 0xA0, 0xB0, 0xC8, 0x00, 0xFF, 0x00, 0x00, 0x00
_02110128:
	.byte 0x00, 0x30, 0x00, 0x80, 0x08, 0x38, 0x80, 0x00
	.byte 0x30, 0x60, 0x00, 0x80, 0x38, 0x68, 0x80, 0x00, 0x60, 0x90, 0x00, 0x80, 0x68, 0x98, 0x80, 0x00
	.byte 0x98, 0xC0, 0xC8, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x80, 0x00, 0x30, 0x80, 0x00
	.byte 0x30, 0x60, 0x00, 0x80, 0x30, 0x60, 0x80, 0x00, 0x60, 0x90, 0x00, 0x80, 0x60, 0x90, 0x80, 0x00
	.byte 0x98, 0xC0, 0xC8, 0x00, 0xFF, 0x00, 0x00, 0x00
_02110168:
	.byte 0x10, 0x30, 0x80, 0x00, 0x30, 0x50, 0x80, 0x00
	.byte 0x50, 0x70, 0x80, 0x00, 0x70, 0x90, 0x80, 0x00, 0x98, 0xC0, 0xC8, 0x00, 0xFF, 0x00, 0x00, 0x00
_02110180:
	.byte 0x18, 0x38, 0x80, 0x00, 0x38, 0x58, 0x80, 0x00, 0x58, 0x78, 0x80, 0x00, 0x10, 0x30, 0x00, 0x80
	.byte 0x30, 0x50, 0x00, 0x80, 0x50, 0x70, 0x00, 0x80, 0x70, 0x90, 0x00, 0x80, 0x98, 0xC0, 0xC8, 0x00
	.byte 0xFF, 0x00, 0x00, 0x00
_021101A4:
	.byte 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x04, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00
_02110244:
	.byte 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00
	.byte 0x03, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x03, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x03, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0x06, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x04, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00
	.byte 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x03, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x04, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00
	.byte 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00
	.byte 0x02, 0x00, 0x00, 0x00
_021104E4:
	.byte 0xBE, 0x1D, 0x10, 0x02, 0xBE, 0x1D, 0x10, 0x02, 0xBE, 0x1D, 0x10, 0x02
	.byte 0xBE, 0x1D, 0x10, 0x02, 0xD8, 0x1D, 0x10, 0x02
_021104F8:
	.byte 0x80, 0x1E, 0x10, 0x02, 0x9C, 0x1E, 0x10, 0x02
	.byte 0xB8, 0x1E, 0x10, 0x02, 0x2C, 0x1E, 0x10, 0x02, 0x64, 0x1E, 0x10, 0x02, 0xF0, 0x1E, 0x10, 0x02
	.byte 0x0C, 0x1F, 0x10, 0x02, 0x5C, 0x20, 0x10, 0x02, 0x60, 0x1F, 0x10, 0x02, 0x24, 0x20, 0x10, 0x02
	.byte 0x98, 0x1F, 0x10, 0x02, 0xD0, 0x1F, 0x10, 0x02, 0xEC, 0x1F, 0x10, 0x02, 0x08, 0x20, 0x10, 0x02
	.byte 0x40, 0x20, 0x10, 0x02, 0x7C, 0x1F, 0x10, 0x02, 0xF2, 0x1D, 0x10, 0x02, 0x44, 0x1F, 0x10, 0x02
	.byte 0x28, 0x1F, 0x10, 0x02, 0x48, 0x1E, 0x10, 0x02, 0xD4, 0x20, 0x10, 0x02, 0xF8, 0x20, 0x10, 0x02
	.byte 0x1C, 0x21, 0x10, 0x02, 0x1C, 0x21, 0x10, 0x02, 0x1C, 0x21, 0x10, 0x02
_0211055C:
	.byte 0x00, 0x00, 0x00, 0x3F
	.byte 0xCD, 0xCC, 0x4C, 0x3E, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x80, 0x3F, 0x9A, 0x99, 0x99, 0x3F
	.byte 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F
_02110578:
	.byte 0xCD, 0xCC, 0x4C, 0x3F, 0x9A, 0x99, 0x19, 0x3F
	.byte 0xCD, 0xCC, 0xCC, 0x3E, 0xCD, 0xCC, 0x4C, 0x3E, 0xCD, 0xCC, 0x4C, 0x3F, 0x00, 0x00, 0x80, 0x3F
	.byte 0x00, 0x00, 0x80, 0x3F
_02110594:
	.byte 0x30, 0x28, 0x10, 0x02, 0x90, 0x28, 0x10, 0x02, 0x80, 0x28, 0x10, 0x02
	.byte 0x70, 0x28, 0x10, 0x02, 0x60, 0x28, 0x10, 0x02, 0x50, 0x28, 0x10, 0x02, 0x40, 0x28, 0x10, 0x02
_021105B0:
	.byte 0xB7
_021105B1:
	.byte 0x37, 0xDF, 0x3F, 0xB7, 0x57, 0xDF, 0x5F, 0xB7, 0x77, 0xDF, 0x7F
_021105BC:
	.byte 0x2C, 0x03, 0x00, 0x00
	.byte 0x4A, 0x00, 0x00, 0x00, 0x2E, 0x03, 0x00, 0x00
_021105C8:
	.byte 0x74, 0x65, 0x6C, 0x2F, 0x70, 0x6D, 0x74, 0x65
	.byte 0x6C, 0x5F, 0x62, 0x6F, 0x6F, 0x6B, 0x2E, 0x64, 0x61, 0x74, 0x00, 0x00
