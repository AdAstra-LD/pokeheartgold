	.include "asm/macros.inc"
	.include "global.inc"

	.rodata

_020FFC10:
	.byte 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x01, 0x01, 0x00, 0x01, 0x02, 0x02
	.byte 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x02, 0x02, 0x02, 0x00, 0x02, 0x02, 0x02, 0x02, 0x02
	.byte 0x02, 0x02, 0x02, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x02, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x02, 0x02, 0x02, 0x01, 0x01, 0x01, 0x02, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02
	.byte 0x02, 0x02, 0x00, 0x02, 0x00, 0x01, 0x01, 0x01, 0x02, 0x02, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02
	.byte 0x02, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x02, 0x01, 0x02, 0x02, 0x01
	.byte 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x01, 0x02, 0x01, 0x00, 0x02
	.byte 0x02, 0x00, 0x00, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x01
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02
	.byte 0x02, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x01, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x01, 0x02
	.byte 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x01, 0x02, 0x02, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x01
	.byte 0x01, 0x01, 0x00, 0x00, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x02, 0x02
	.byte 0x00, 0x00, 0x02, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00
	.byte 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x02, 0x02, 0x01, 0x01
	.byte 0x01, 0x01, 0x01, 0x00, 0x02, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x01, 0x01, 0x00, 0x01, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x02, 0x00, 0x02, 0x00, 0x02, 0x01, 0x01, 0x01
	.byte 0x01, 0x01, 0x01, 0x00, 0x02, 0x02, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x00, 0x01, 0x01, 0x02
	.byte 0x02, 0x01, 0x01, 0x01, 0x01, 0x00, 0x02, 0x02, 0x02, 0x01, 0x02, 0x00, 0x00, 0x02, 0x02, 0x02
	.byte 0x02, 0x02, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x02, 0x00, 0x00
	.byte 0x02, 0x00, 0x01, 0x00, 0x01, 0x00, 0x02, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00
	.byte 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00
	.byte 0x00, 0x01, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x02, 0x02, 0x00
	.byte 0x01, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02
	.byte 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x02, 0x02, 0x00, 0x01, 0x00
	.byte 0x02, 0x00, 0x02, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02
	.byte 0x02, 0x01, 0x01, 0x00, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01
	.byte 0x00, 0x02, 0x01, 0x00, 0x02, 0x01, 0x01, 0x00, 0x02, 0x02, 0x00, 0x01, 0x00, 0x02, 0x02, 0x00
	.byte 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01
	.byte 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00
_020FFE2B:
	.byte 0x00, 0x00, 0x00
_020FFE2E:
	.byte 0x00, 0x01

	.text

	thumb_func_start sub_02074170
sub_02074170: ; 0x02074170
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	bl AcquireBoxMonLock
	add r7, r0, #0
	add r0, r5, #0
	mov r1, #5
	mov r2, #0
	bl GetBoxMonData
	add r4, r0, #0
	add r0, r5, #0
	mov r1, #0x4c
	mov r2, #0
	bl GetBoxMonData
	add r6, r0, #0
	add r0, r5, #0
	bl sub_020742CC
	add r2, r0, #0
	add r0, r4, #0
	add r1, r6, #0
	bl sub_020741BC
	add r4, r0, #0
	add r0, r5, #0
	add r1, r7, #0
	bl ReleaseBoxMonLock
	add r0, r4, #0
	pop {r3, r4, r5, r6, r7, pc}
	thumb_func_end sub_02074170

	thumb_func_start sub_020741B0
sub_020741B0: ; 0x020741B0
	push {r3, lr}
	bl Mon_GetBoxMon
	bl sub_02074170
	pop {r3, pc}
	thumb_func_end sub_020741B0

	thumb_func_start sub_020741BC
sub_020741BC: ; 0x020741BC
	push {r4, lr}
	add r4, r0, #0
	cmp r1, #1
	bne _020741D2
	ldr r0, _02074268 ; =0x000001EA
	cmp r4, r0
	bne _020741CE
	add r0, #0xc
	pop {r4, pc}
_020741CE:
	add r0, #0xb
	pop {r4, pc}
_020741D2:
	lsl r0, r4, #0x10
	lsl r1, r2, #0x18
	lsr r0, r0, #0x10
	lsr r1, r1, #0x18
	bl sub_02070438
	cmp r0, #0
	beq _0207425A
	ldr r1, _0207426C ; =0x00000182
	cmp r4, r1
	bne _020741EE
	add r1, #0x74
	add r0, r0, r1
	pop {r4, pc}
_020741EE:
	cmp r4, #0xc9
	bne _020741F8
	add r1, #0x78
	add r0, r0, r1
	pop {r4, pc}
_020741F8:
	add r2, r1, #0
	add r2, #0x1a
	cmp r4, r2
	bne _02074206
	add r1, #0x93
	add r0, r0, r1
	pop {r4, pc}
_02074206:
	add r2, r1, #0
	add r2, #0x1b
	cmp r4, r2
	bne _02074214
	add r1, #0x95
	add r0, r0, r1
	pop {r4, pc}
_02074214:
	add r2, r1, #0
	add r2, #0x24
	cmp r4, r2
	bne _02074222
	add r1, #0x97
	add r0, r0, r1
	pop {r4, pc}
_02074222:
	add r2, r1, #0
	add r2, #0x25
	cmp r4, r2
	bne _02074230
	add r1, #0x98
	add r0, r0, r1
	pop {r4, pc}
_02074230:
	add r2, r1, #0
	add r2, #0x65
	cmp r4, r2
	bne _0207423E
	add r1, #0x99
	add r0, r0, r1
	pop {r4, pc}
_0207423E:
	add r2, r1, #0
	add r2, #0x6a
	cmp r4, r2
	bne _0207424C
	add r1, #0x9a
	add r0, r0, r1
	pop {r4, pc}
_0207424C:
	add r2, r1, #0
	add r2, #0x5d
	cmp r4, r2
	bne _0207425A
	add r1, #0x9b
	add r0, r0, r1
	pop {r4, pc}
_0207425A:
	ldr r0, _02074270 ; =0x000001ED
	cmp r4, r0
	bls _02074262
	mov r4, #0
_02074262:
	add r0, r4, #7
	pop {r4, pc}
	nop
_02074268: .word 0x000001EA
_0207426C: .word 0x00000182
_02074270: .word 0x000001ED
	thumb_func_end sub_020741BC

	thumb_func_start sub_02074274
sub_02074274: ; 0x02074274
	push {r3, r4, r5, lr}
	add r5, r0, #0
	add r4, r1, #0
	bne _020742B4
	ldr r0, _020742C0 ; =0x0000015F
	cmp r5, r0
	bne _02074298
	lsl r0, r5, #0x10
	lsl r1, r2, #0x18
	lsr r0, r0, #0x10
	lsr r1, r1, #0x18
	bl sub_02070438
	add r2, r0, #0
	beq _020742B4
	ldr r0, _020742C4 ; =0x00000222
	add r0, r2, r0
	pop {r3, r4, r5, pc}
_02074298:
	add r0, #0x46
	cmp r5, r0
	bne _020742B4
	lsl r0, r5, #0x10
	lsl r1, r2, #0x18
	lsr r0, r0, #0x10
	lsr r1, r1, #0x18
	bl sub_02070438
	add r2, r0, #0
	beq _020742B4
	ldr r0, _020742C8 ; =0x00000225
	add r0, r2, r0
	pop {r3, r4, r5, pc}
_020742B4:
	add r0, r5, #0
	add r1, r4, #0
	bl sub_020741BC
	pop {r3, r4, r5, pc}
	nop
_020742C0: .word 0x0000015F
_020742C4: .word 0x00000222
_020742C8: .word 0x00000225
	thumb_func_end sub_02074274

	thumb_func_start sub_020742CC
sub_020742CC: ; 0x020742CC
	push {r4, lr}
	mov r1, #0xae
	mov r2, #0
	add r4, r0, #0
	bl GetBoxMonData
	ldr r1, _02074360 ; =0x000001A6
	cmp r0, r1
	bhi _02074314
	bhs _0207434C
	add r2, r1, #0
	sub r2, #0x24
	cmp r0, r2
	bhi _020742F4
	sub r1, #0x24
	cmp r0, r1
	bhs _0207434C
	cmp r0, #0xc9
	beq _02074344
	b _0207435C
_020742F4:
	add r2, r1, #0
	sub r2, #9
	cmp r0, r2
	bhi _0207435C
	add r2, r1, #0
	sub r2, #0xa
	cmp r0, r2
	blo _0207435C
	add r2, r1, #0
	sub r2, #0xa
	cmp r0, r2
	beq _0207434C
	sub r1, #9
	cmp r0, r1
	beq _0207434C
	b _0207435C
_02074314:
	add r2, r1, #0
	add r2, #0x39
	cmp r0, r2
	bhi _0207432C
	add r2, r1, #0
	add r2, #0x39
	cmp r0, r2
	bhs _0207434C
	add r1, r1, #1
	cmp r0, r1
	beq _0207434C
	b _0207435C
_0207432C:
	add r2, r1, #0
	add r2, #0x41
	cmp r0, r2
	bhi _0207433C
	add r1, #0x41
	cmp r0, r1
	beq _0207434C
	b _0207435C
_0207433C:
	add r1, #0x46
	cmp r0, r1
	beq _0207434C
	b _0207435C
_02074344:
	add r0, r4, #0
	bl GetBoxMonUnownLetter
	pop {r4, pc}
_0207434C:
	add r0, r4, #0
	mov r1, #0x70
	mov r2, #0
	bl GetBoxMonData
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	pop {r4, pc}
_0207435C:
	mov r0, #0
	pop {r4, pc}
	.balign 4, 0
_02074360: .word 0x000001A6
	thumb_func_end sub_020742CC

	thumb_func_start sub_02074364
sub_02074364: ; 0x02074364
	cmp r2, #1
	bne _02074376
	ldr r1, _02074400 ; =0x000001EA
	cmp r0, r1
	bne _02074372
	add r0, r1, #5
	b _020743F8
_02074372:
	add r0, r1, #4
	b _020743F8
_02074376:
	ldr r2, _02074404 ; =0x000001ED
	cmp r0, r2
	bls _02074380
	mov r0, #0
	b _020743F8
_02074380:
	cmp r1, #0
	beq _020743F8
	add r3, r2, #0
	sub r3, #0x6b
	cmp r0, r3
	bne _02074392
	add r0, r2, #2
	add r0, r1, r0
	b _020743F8
_02074392:
	cmp r0, #0xc9
	bne _0207439C
	add r0, r2, #5
	add r0, r1, r0
	b _020743F8
_0207439C:
	add r3, r2, #0
	sub r3, #0x51
	cmp r0, r3
	bne _020743AA
	add r2, #0x21
	add r0, r1, r2
	b _020743F8
_020743AA:
	add r3, r2, #0
	sub r3, #0x50
	cmp r0, r3
	bne _020743B8
	add r2, #0x23
	add r0, r1, r2
	b _020743F8
_020743B8:
	add r3, r2, #0
	sub r3, #0x47
	cmp r0, r3
	bne _020743C6
	add r2, #0x25
	add r0, r1, r2
	b _020743F8
_020743C6:
	add r3, r2, #0
	sub r3, #0x46
	cmp r0, r3
	bne _020743D4
	add r2, #0x26
	add r0, r1, r2
	b _020743F8
_020743D4:
	sub r3, r2, #6
	cmp r0, r3
	bne _020743E0
	add r2, #0x27
	add r0, r1, r2
	b _020743F8
_020743E0:
	sub r3, r2, #1
	cmp r0, r3
	bne _020743EC
	add r2, #0x28
	add r0, r1, r2
	b _020743F8
_020743EC:
	add r3, r2, #0
	sub r3, #0xe
	cmp r0, r3
	bne _020743F8
	add r2, #0x29
	add r0, r1, r2
_020743F8:
	ldr r1, _02074408 ; =_020FFC10
	ldrb r0, [r1, r0]
	bx lr
	nop
_02074400: .word 0x000001EA
_02074404: .word 0x000001ED
_02074408: .word _020FFC10
	thumb_func_end sub_02074364

	thumb_func_start sub_0207440C
sub_0207440C: ; 0x0207440C
	push {r3, lr}
	cmp r2, #0
	bne _02074432
	ldr r3, _02074438 ; =0x0000015F
	cmp r0, r3
	bne _02074422
	cmp r1, #0
	beq _02074432
	ldr r0, _0207443C ; =_020FFE2B
	ldrb r0, [r0, r1]
	pop {r3, pc}
_02074422:
	add r3, #0x46
	cmp r0, r3
	bne _02074432
	cmp r1, #0
	beq _02074432
	ldr r0, _02074440 ; =_020FFE2E
	ldrb r0, [r0, r1]
	pop {r3, pc}
_02074432:
	bl sub_02074364
	pop {r3, pc}
	.balign 4, 0
_02074438: .word 0x0000015F
_0207443C: .word _020FFE2B
_02074440: .word _020FFE2E
	thumb_func_end sub_0207440C

	thumb_func_start sub_02074444
sub_02074444: ; 0x02074444
	push {r3, r4, r5, r6, r7, lr}
	add r5, r0, #0
	bl AcquireBoxMonLock
	add r4, r0, #0
	add r0, r5, #0
	bl sub_020742CC
	add r6, r0, #0
	add r0, r5, #0
	mov r1, #5
	mov r2, #0
	bl GetBoxMonData
	add r7, r0, #0
	add r0, r5, #0
	mov r1, #0x4c
	mov r2, #0
	bl GetBoxMonData
	str r0, [sp]
	add r0, r5, #0
	add r1, r4, #0
	bl ReleaseBoxMonLock
	ldr r2, [sp]
	add r0, r7, #0
	add r1, r6, #0
	bl sub_02074364
	pop {r3, r4, r5, r6, r7, pc}
	.balign 4, 0
	thumb_func_end sub_02074444

	thumb_func_start sub_02074484
sub_02074484: ; 0x02074484
	push {r3, lr}
	bl Mon_GetBoxMon
	bl sub_02074444
	pop {r3, pc}
	thumb_func_end sub_02074484

	thumb_func_start sub_02074490
sub_02074490: ; 0x02074490
	mov r0, #0
	bx lr
	thumb_func_end sub_02074490

	thumb_func_start sub_02074494
sub_02074494: ; 0x02074494
	mov r0, #2
	bx lr
	thumb_func_end sub_02074494

	thumb_func_start sub_02074498
sub_02074498: ; 0x02074498
	mov r0, #4
	bx lr
	thumb_func_end sub_02074498

	thumb_func_start sub_0207449C
sub_0207449C: ; 0x0207449C
	mov r0, #6
	bx lr
	thumb_func_end sub_0207449C

	thumb_func_start sub_020744A0
sub_020744A0: ; 0x020744A0
	mov r0, #1
	bx lr
	thumb_func_end sub_020744A0

	thumb_func_start sub_020744A4
sub_020744A4: ; 0x020744A4
	mov r0, #3
	bx lr
	thumb_func_end sub_020744A4

	thumb_func_start sub_020744A8
sub_020744A8: ; 0x020744A8
	mov r0, #5
	bx lr
	thumb_func_end sub_020744A8
